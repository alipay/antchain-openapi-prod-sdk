import AntchainUtil;
import Util;
import RPCUtil;

type @endpoint = string
type @regionId = string
type @accessKeyId = string
type @accessKeySecret = string
type @protocol = string
type @userAgent = string
type @readTimeout = number
type @connectTimeout = number
type @httpProxy = string
type @httpsProxy = string
type @socks5Proxy = string
type @socks5NetWork = string
type @noProxy = string
type @maxIdleConns = number
type @securityToken = string
type @maxIdleTimeMillis = number
type @keepAliveDurationMillis = number
type @maxRequests = number
type @maxRequestsPerHost = number

/**
 * Model for initing client
 */
model Config {
  accessKeyId?: string(description='accesskey id',default=''),
  accessKeySecret?: string(description='accesskey secret',default=''),
  securityToken?: string(description='security token',default=''),
  protocol?: string(description='http protocol',example='http',default='http'),
  readTimeout?: number(description='read timeout',example='10',default=''),
  connectTimeout?: number(description='connect timeout',example='10',default=''),
  httpProxy?: string(description='http proxy',example='http://localhost',default=''),
  httpsProxy?: string(description='https proxy',example='https://localhost',default=''),
  endpoint?: string(description='endpoint',example='cs.aliyuncs.com',default=''),
  noProxy?: string(description='proxy white list',example='http://localhost',default=''),
  maxIdleConns?: number(description='max idle conns',example='3',default=''),
  userAgent?: string(description='user agent',example='Alibabacloud/1',default=''),
  socks5Proxy?: string(description='socks5 proxy',default=''),
  socks5NetWork?: string(description='socks5 network',example='TCP',default=''),
  maxIdleTimeMillis?: number(description='长链接最大空闲时长',default='60 * 1000L'),
  keepAliveDurationMillis?: number(description='长链接最大连接时长',default='5000'),
  maxRequests?: number(description='最大连接数（长链接最大总数）',default='100'),
  maxRequestsPerHost?: number(description='每个目标主机的最大连接数（分主机域名的长链接最大总数',default='100'),
}

/**
 * Init client with Config
 * @param config config contains the necessary information to create a client
 */
init(config: Config) {
  if (Util.isUnset(config)) {
    throw {
      code = 'ParameterMissing',
      message = '\'config\' can not be unset'
    };
  }

  @accessKeyId = config.accessKeyId;
  @accessKeySecret = config.accessKeySecret;
  @securityToken = config.securityToken;
  @endpoint = config.endpoint;
  @protocol = config.protocol;
  @userAgent = config.userAgent;
  @readTimeout = Util.defaultNumber(config.readTimeout, 20000);
  @connectTimeout = Util.defaultNumber(config.connectTimeout, 20000);
  @httpProxy = config.httpProxy;
  @httpsProxy = config.httpsProxy;
  @noProxy = config.noProxy;
  @socks5Proxy = config.socks5Proxy;
  @socks5NetWork = config.socks5NetWork;
  @maxIdleConns = Util.defaultNumber(config.maxIdleConns, 60000);
  @maxIdleTimeMillis = Util.defaultNumber(config.maxIdleTimeMillis, 5);
  @keepAliveDurationMillis = Util.defaultNumber(config.keepAliveDurationMillis, 5000);
  @maxRequests = Util.defaultNumber(config.maxRequests, 100);
  @maxRequestsPerHost = Util.defaultNumber(config.maxRequestsPerHost, 100);
}

/**
 * Encapsulate the request and invoke the network
 * @param action api name
 * @param protocol http or https
 * @param method e.g. GET
 * @param pathname pathname of every api
 * @param request which contains request params
 * @param runtime which controls some details of call api, such as retry times
 * @return the response
 */
api doRequest(version: string, action: string, protocol: string, method: string, pathname: string, request: object, headers: map[string]string, runtime: Util.RuntimeOptions): object {
  __request.protocol = Util.defaultString(@protocol, protocol);
  __request.method = method;
  __request.pathname = pathname;
  __request.query = {
    method = action,
    version = version,
    sign_type = 'HmacSHA1',
    req_time = AntchainUtil.getTimestamp(),
    req_msg_id = AntchainUtil.getNonce(),
    access_key = @accessKeyId,
    base_sdk_version = 'TeaSDK-2.0',
    sdk_version = '1.0.4',
    _prod_code = 'NFTC',
    _prod_channel = 'undefined'
  };

  if (!Util.empty(@securityToken)) {
    __request.query.security_token = @securityToken;
  }

  __request.headers = {
    host = Util.defaultString(@endpoint, 'openapi.antchain.antgroup.com'),
    user-agent = Util.getUserAgent(@userAgent),
    ...headers
  };

  var tmp = Util.anyifyMapValue(RPCUtil.query(request));
  __request.body = Util.toFormString(tmp);
  __request.headers.content-type = 'application/x-www-form-urlencoded';

  var signedParam = {
    ...__request.query,
    ...RPCUtil.query(request)
  };
  __request.query.sign = AntchainUtil.getSignature(signedParam, @accessKeySecret);
} returns {
  var raw = Util.readAsString(__response.body);
  var obj = Util.parseJSON(raw);
  var res = Util.assertAsMap(obj);
  var resp = Util.assertAsMap(res.response);

  if (AntchainUtil.hasError(raw, @accessKeySecret)) {
    throw {
      message = resp.result_msg,
      data = resp,
      code = resp.result_code
    };
  }
  return resp;
} runtime {
  timeouted = 'retry',
  readTimeout = Util.defaultNumber(runtime.readTimeout, @readTimeout),
  connectTimeout = Util.defaultNumber(runtime.connectTimeout, @connectTimeout),
  httpProxy = Util.defaultString(runtime.httpProxy, @httpProxy),
  httpsProxy = Util.defaultString(runtime.httpsProxy, @httpsProxy),
  noProxy = Util.defaultString(runtime.noProxy, @noProxy),
  maxIdleConns = Util.defaultNumber(runtime.maxIdleConns, @maxIdleConns),
  maxIdleTimeMillis = @maxIdleTimeMillis,
  keepAliveDuration = @keepAliveDurationMillis,
  maxRequests = @maxRequests,
  maxRequestsPerHost = @maxRequestsPerHost,
  retry = {
    retryable = runtime.autoretry,
    maxAttempts = Util.defaultNumber(runtime.maxAttempts, 3)
  },
  backoff = {
    policy = Util.defaultString(runtime.backoffPolicy, 'no'),
    period = Util.defaultNumber(runtime.backoffPeriod, 1)
  },
  ignoreSSL = runtime.ignoreSSL
}

// 通用资源差量包信息
model GeneralResourcePatch {
  // 差量包文件下载地址
  url: string(name='url', example='https://download.address'),
  // 差量包的旧版本号
  oldVersion: long(name='old_version', example='1'),
  // md5摘要值
  md5: string(name='md5', example='9d5f26c7469ea9699a6e5f03ecfce24d'),
  // 差量包文件大小
  size: long(name='size', example='123'),
}

model PublishMerchantDiyskuRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 业务请求id，用来做业务上的幂等。后面查询状态也是此字段
  bizNo: string(name='biz_no'),
  // 调用渠道
  // PET 宠物
  // MEMBER 会员
  channel: string(name='channel'),
  // 领取数字藏品的用户ID，支持2088/手机号/1322
  userId: string(name='user_id'),
  // 支付宝2088账号：ALIPAY_UID
  // 手机号：PHONE_NO
  // 鲸探1322账号：FANS_UID
  userType: string(name='user_type'),
  // 需要发放的SKUID编码
  skuId: string(name='sku_id'),
  // 一期仅支持图片：IMAGE
  skuType: string(name='sku_type'),
  // 数字藏品的缩略图地址，可与原图相同也可不同，需要校验长宽比为1:1
  thumbnailUrl: string(name='thumbnail_url'),
  // 数字藏品的原图地址，需要校验长宽比为1:1
  originalUrl: string(name='original_url'),
}

model PublishMerchantDiyskuResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 生成的nftid结果
  nftId?: string(name='nft_id'),
  // 获得时间
  receiveTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='receive_time'),
  // 发放状态
  // AUDIT_SUBMIT("审核中"),
  // AUDIT_SUCCESS("审核通过"),
  // AUDIT_FAIL("审核未通过"),
  // TRANSFER_UNKNOWN("发放结果未知"),
  // TRANSFER_SUCCESS("发放成功"),
  // TRANSFER_FAILED("发放失败"),
  // SHIELD("屏蔽"),
  // RECYCLE("回收"),
  sendStatus?: string(name='send_status'),
}

/**
 * Description: DIY藏品发放
 * Summary: DIY藏品发放
 */
async function publishMerchantDiysku(request: PublishMerchantDiyskuRequest): PublishMerchantDiyskuResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return publishMerchantDiyskuEx(request, headers, runtime);
}

/**
 * Description: DIY藏品发放
 * Summary: DIY藏品发放
 */
async function publishMerchantDiyskuEx(request: PublishMerchantDiyskuRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PublishMerchantDiyskuResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.nftc.merchant.diysku.publish', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryMerchantDiyskuRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 业务请求id，用来做业务上的幂等
  bizNo: string(name='biz_no'),
  // 领取数字藏品的用户ID，支持2088/手机号/1322
  userId: string(name='user_id'),
}

model QueryMerchantDiyskuResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 生成的nftid结果
  nftId?: string(name='nft_id'),
  // 获得时间
  receiveTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='receive_time'),
  // 发放状态
  // AUDIT_SUBMIT("审核中"),
  // AUDIT_SUCCESS("审核通过"),
  // AUDIT_FAIL("审核未通过"),
  // TRANSFER_UNKNOWN("发放结果未知"),
  // TRANSFER_SUCCESS("发放成功"),
  // TRANSFER_FAILED("发放失败"),
  // SHIELD("屏蔽"),
  // RECYCLE("回收"),
  sendStatus?: string(name='send_status'),
}

/**
 * Description: DIY藏品发放查询
 * Summary: DIY藏品发放查询
 */
async function queryMerchantDiysku(request: QueryMerchantDiyskuRequest): QueryMerchantDiyskuResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryMerchantDiyskuEx(request, headers, runtime);
}

/**
 * Description: DIY藏品发放查询
 * Summary: DIY藏品发放查询
 */
async function queryMerchantDiyskuEx(request: QueryMerchantDiyskuRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryMerchantDiyskuResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.nftc.merchant.diysku.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryMerchantUgcimagesRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // ugc资产铸造记录id列表
  recordIdList: [ string ](name='record_id_list'),
  // 场景
  bizScene: string(name='biz_scene'),
}

model QueryMerchantUgcimagesResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 入参中id对应的图片列表
  imgList?: [ string ](name='img_list'),
}

/**
 * Description: 提供ISV  ugc铸造图片查询的openapi服务
 * Summary: ugc铸造图片查询的openapi接口
 */
async function queryMerchantUgcimages(request: QueryMerchantUgcimagesRequest): QueryMerchantUgcimagesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryMerchantUgcimagesEx(request, headers, runtime);
}

/**
 * Description: 提供ISV  ugc铸造图片查询的openapi服务
 * Summary: ugc铸造图片查询的openapi接口
 */
async function queryMerchantUgcimagesEx(request: QueryMerchantUgcimagesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryMerchantUgcimagesResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.nftc.merchant.ugcimages.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateResourceGeneralresourceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 小程序的APP ID
  appId: string(name='app_id'),
  // 业务幂等ID
  bizId: string(name='biz_id'),
  // 是否需要生成差量包
  needPatch: boolean(name='need_patch'),
}

model CreateResourceGeneralresourceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 资源ID
  resourceId?: string(name='resource_id'),
  // 文件上传地址
  url?: string(name='url'),
  // 资源上传的授权token，上传文件时需要将该值放入header中进行鉴权
  maasToken?: string(name='maas_token'),
}

/**
 * Description: 创建通用资源
 * Summary: 创建通用资源
 */
async function createResourceGeneralresource(request: CreateResourceGeneralresourceRequest): CreateResourceGeneralresourceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createResourceGeneralresourceEx(request, headers, runtime);
}

/**
 * Description: 创建通用资源
 * Summary: 创建通用资源
 */
async function createResourceGeneralresourceEx(request: CreateResourceGeneralresourceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateResourceGeneralresourceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.nftc.resource.generalresource.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BindResourceGeneralresourcefileRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 小程序的APP ID
  appId: string(name='app_id'),
  // 资源ID
  resourceId: string(name='resource_id'),
  // 文件ID
  fileId: string(name='file_id'),
}

model BindResourceGeneralresourcefileResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 版本号
  version?: long(name='version'),
  // 文件下载地址
  url?: string(name='url'),
  // md5摘要值
  md5?: string(name='md5'),
  // 文件大小
  size?: long(name='size'),
}

/**
 * Description: 绑定文件到通用资源ID
 * Summary: 绑定文件到通用资源ID
 */
async function bindResourceGeneralresourcefile(request: BindResourceGeneralresourcefileRequest): BindResourceGeneralresourcefileResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return bindResourceGeneralresourcefileEx(request, headers, runtime);
}

/**
 * Description: 绑定文件到通用资源ID
 * Summary: 绑定文件到通用资源ID
 */
async function bindResourceGeneralresourcefileEx(request: BindResourceGeneralresourcefileRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BindResourceGeneralresourcefileResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.nftc.resource.generalresourcefile.bind', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model PublishResourceGeneralresourcefileRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 小程序的APP ID
  appId: string(name='app_id'),
  // 业务幂等ID
  bizId: string(name='biz_id'),
  // 资源ID
  resourceId: string(name='resource_id'),
  // 版本号
  fileVersion: long(name='file_version'),
}

model PublishResourceGeneralresourcefileResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 版本号
  version?: long(name='version'),
  // 资源文件下载地址
  url?: string(name='url'),
  // md5摘要值
  md5?: string(name='md5'),
  // 文件大小
  size?: long(name='size'),
}

/**
 * Description: 发布通用资源文件
 * Summary: 发布通用资源文件
 */
async function publishResourceGeneralresourcefile(request: PublishResourceGeneralresourcefileRequest): PublishResourceGeneralresourcefileResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return publishResourceGeneralresourcefileEx(request, headers, runtime);
}

/**
 * Description: 发布通用资源文件
 * Summary: 发布通用资源文件
 */
async function publishResourceGeneralresourcefileEx(request: PublishResourceGeneralresourcefileRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PublishResourceGeneralresourcefileResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.nftc.resource.generalresourcefile.publish', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryResourcePatchlistRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 小程序的APP ID
  appId: string(name='app_id'),
  // 资源ID
  resourceId: string(name='resource_id'),
  // 版本号
  fileVersion: long(name='file_version'),
}

model QueryResourcePatchlistResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 差量包生成状态，包括PATCHING（生成中）和FINISHED（生成完成）
  patchStatus?: string(name='patch_status'),
  // 全量包下载地址
  url?: string(name='url'),
  // 资源ID
  resourceId?: string(name='resource_id'),
  // 全量包版本号
  version?: long(name='version'),
  // 全量包md5摘要值
  md5?: string(name='md5'),
  // 全量包文件大小
  size?: long(name='size'),
  // 差量包文件信息列表
  patchList?: [ GeneralResourcePatch ](name='patch_list'),
}

/**
 * Description: 查询资源文件差量包列表
 * Summary: 查询资源文件差量包列表
 */
async function queryResourcePatchlist(request: QueryResourcePatchlistRequest): QueryResourcePatchlistResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryResourcePatchlistEx(request, headers, runtime);
}

/**
 * Description: 查询资源文件差量包列表
 * Summary: 查询资源文件差量包列表
 */
async function queryResourcePatchlistEx(request: QueryResourcePatchlistRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryResourcePatchlistResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.nftc.resource.patchlist.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

