import AntchainUtil;
import Util;
import RPCUtil;

type @endpoint = string
type @regionId = string
type @accessKeyId = string
type @accessKeySecret = string
type @protocol = string
type @userAgent = string
type @readTimeout = number
type @connectTimeout = number
type @httpProxy = string
type @httpsProxy = string
type @socks5Proxy = string
type @socks5NetWork = string
type @noProxy = string
type @maxIdleConns = number
type @securityToken = string
type @maxIdleTimeMillis = number
type @keepAliveDurationMillis = number
type @maxRequests = number
type @maxRequestsPerHost = number

/**
 * Model for initing client
 */
model Config {
  accessKeyId?: string(description='accesskey id',default=''),
  accessKeySecret?: string(description='accesskey secret',default=''),
  securityToken?: string(description='security token',default=''),
  protocol?: string(description='http protocol',example='http',default='http'),
  readTimeout?: number(description='read timeout',example='10',default=''),
  connectTimeout?: number(description='connect timeout',example='10',default=''),
  httpProxy?: string(description='http proxy',example='http://localhost',default=''),
  httpsProxy?: string(description='https proxy',example='https://localhost',default=''),
  endpoint?: string(description='endpoint',example='cs.aliyuncs.com',default=''),
  noProxy?: string(description='proxy white list',example='http://localhost',default=''),
  maxIdleConns?: number(description='max idle conns',example='3',default=''),
  userAgent?: string(description='user agent',example='Alibabacloud/1',default=''),
  socks5Proxy?: string(description='socks5 proxy',default=''),
  socks5NetWork?: string(description='socks5 network',example='TCP',default=''),
  maxIdleTimeMillis?: number(description='长链接最大空闲时长',default='60 * 1000L'),
  keepAliveDurationMillis?: number(description='长链接最大连接时长',default='5000'),
  maxRequests?: number(description='最大连接数（长链接最大总数）',default='100'),
  maxRequestsPerHost?: number(description='每个目标主机的最大连接数（分主机域名的长链接最大总数',default='100'),
}

/**
 * Init client with Config
 * @param config config contains the necessary information to create a client
 */
init(config: Config) {
  if (Util.isUnset(config)) {
    throw {
      code = 'ParameterMissing',
      message = '\'config\' can not be unset'
    };
  }

  @accessKeyId = config.accessKeyId;
  @accessKeySecret = config.accessKeySecret;
  @securityToken = config.securityToken;
  @endpoint = config.endpoint;
  @protocol = config.protocol;
  @userAgent = config.userAgent;
  @readTimeout = Util.defaultNumber(config.readTimeout, 20000);
  @connectTimeout = Util.defaultNumber(config.connectTimeout, 20000);
  @httpProxy = config.httpProxy;
  @httpsProxy = config.httpsProxy;
  @noProxy = config.noProxy;
  @socks5Proxy = config.socks5Proxy;
  @socks5NetWork = config.socks5NetWork;
  @maxIdleConns = Util.defaultNumber(config.maxIdleConns, 60000);
  @maxIdleTimeMillis = Util.defaultNumber(config.maxIdleTimeMillis, 5);
  @keepAliveDurationMillis = Util.defaultNumber(config.keepAliveDurationMillis, 5000);
  @maxRequests = Util.defaultNumber(config.maxRequests, 100);
  @maxRequestsPerHost = Util.defaultNumber(config.maxRequestsPerHost, 100);
}

/**
 * Encapsulate the request and invoke the network
 * @param action api name
 * @param protocol http or https
 * @param method e.g. GET
 * @param pathname pathname of every api
 * @param request which contains request params
 * @param runtime which controls some details of call api, such as retry times
 * @return the response
 */
api doRequest(version: string, action: string, protocol: string, method: string, pathname: string, request: object, headers: map[string]string, runtime: Util.RuntimeOptions): object {
  __request.protocol = Util.defaultString(@protocol, protocol);
  __request.method = method;
  __request.pathname = pathname;
  __request.query = {
    method = action,
    version = version,
    sign_type = 'HmacSHA1',
    req_time = AntchainUtil.getTimestamp(),
    req_msg_id = AntchainUtil.getNonce(),
    access_key = @accessKeyId,
    base_sdk_version = 'TeaSDK-2.0',
    sdk_version = '1.0.32',
    _prod_code = 'NFTC',
    _prod_channel = 'undefined'
  };

  if (!Util.empty(@securityToken)) {
    __request.query.security_token = @securityToken;
  }

  __request.headers = {
    host = Util.defaultString(@endpoint, 'openapi.antchain.antgroup.com'),
    user-agent = Util.getUserAgent(@userAgent),
    ...headers
  };

  var tmp = Util.anyifyMapValue(RPCUtil.query(request));
  __request.body = Util.toFormString(tmp);
  __request.headers.content-type = 'application/x-www-form-urlencoded';

  var signedParam = {
    ...__request.query,
    ...RPCUtil.query(request)
  };
  __request.query.sign = AntchainUtil.getSignature(signedParam, @accessKeySecret);
} returns {
  var raw = Util.readAsString(__response.body);
  var obj = Util.parseJSON(raw);
  var res = Util.assertAsMap(obj);
  var resp = Util.assertAsMap(res.response);

  if (AntchainUtil.hasError(raw, @accessKeySecret)) {
    throw {
      message = resp.result_msg,
      data = resp,
      code = resp.result_code
    };
  }
  return resp;
} runtime {
  timeouted = 'retry',
  readTimeout = Util.defaultNumber(runtime.readTimeout, @readTimeout),
  connectTimeout = Util.defaultNumber(runtime.connectTimeout, @connectTimeout),
  httpProxy = Util.defaultString(runtime.httpProxy, @httpProxy),
  httpsProxy = Util.defaultString(runtime.httpsProxy, @httpsProxy),
  noProxy = Util.defaultString(runtime.noProxy, @noProxy),
  maxIdleConns = Util.defaultNumber(runtime.maxIdleConns, @maxIdleConns),
  maxIdleTimeMillis = @maxIdleTimeMillis,
  keepAliveDuration = @keepAliveDurationMillis,
  maxRequests = @maxRequests,
  maxRequestsPerHost = @maxRequestsPerHost,
  retry = {
    retryable = runtime.autoretry,
    maxAttempts = Util.defaultNumber(runtime.maxAttempts, 3)
  },
  backoff = {
    policy = Util.defaultString(runtime.backoffPolicy, 'no'),
    period = Util.defaultNumber(runtime.backoffPeriod, 1)
  },
  ignoreSSL = runtime.ignoreSSL
}

// 数字人部件素材对象
model AvatarMaterialDTO {
  // json配置
  json: string(name='json', example='https://mdn.alipayobjects.com/huamei_n3jbep/afts/ab/A*eG-PSZRxPfwAAAAAAAAAAAAADgt8AA/original'),
  // 装扮id
  decoId: string(name='deco_id', example='1111'),
  // 装扮名称
  decoName: string(name='deco_name', example='湖人主场球衣'),
  // webGl ab包地址
  webAbUrl: string(name='web_ab_url', example='https://mdn.alipayobjects.com/huamei_n3jbep/afts/ab/A*eG-PSZRxPfwAAAAAAAAAAAAADgt8AA/original'),
  // 贴图文件配置
  textureUrl: string(name='texture_url', example='https://mdn.alipayobjects.com/huamei_n3jbep/afts/ab/A*eG-PSZRxPfwAAAAAAAAAAAAADgt8AA/original'),
  // 缩略图
  thumbnail: string(name='thumbnail', example='https://www.xx.com'),
  // json字符串，装扮额外属性信息
  // 如自定义头发颜色，性别等
  avatarPvJson: string(name='avatar_pv_json', example='{"COLOR":"0F#1111","GENDER":"MALE"}'),
  // 安卓ab包
  androidAbUrl: string(name='android_ab_url', example='www.ant.com'),
  // IOS AB 包
  iosAbUrl: string(name='ios_ab_url', example='www.ant.com'),
  // 法令贴图文件
  falingTextureUrl: string(name='faling_texture_url', example='www.ant.com'),
}

// 订单商品对象
model ExternalOrderItemDTO {
  // 购买的sku id
  skuId: long(name='sku_id', example='12345'),
  // 购买后对应发放的藏品nftId，仅当orderStatus为FINISH时返回
  nftId: string(name='nft_id', example='AC152**#/123***'),
}

// 通用资源差量包信息
model GeneralResourcePatch {
  // 差量包文件下载地址
  url: string(name='url', example='https://download.address'),
  // 差量包的旧版本号
  oldVersion: long(name='old_version', example='1'),
  // md5摘要值
  md5: string(name='md5', example='9d5f26c7469ea9699a6e5f03ecfce24d'),
  // 差量包文件大小
  size: long(name='size', example='123'),
}

// 外部订单对象
model ExternalOrderDTO {
  // 订单的状态
  // PAID 已支付
  // PENDING 待支付
  // NOT_EXIST 不存在
  orderStatus: string(name='order_status', example='PAID'),
  // 只有在PAID状态下，此字段才会有值
  // 由于当前一笔订单只会购买一个资产，因此当前list中只会有一个值
  orderItemList?: [ ExternalOrderItemDTO ](name='order_item_list', example=''),
}

// 数字人整体形象
model AvatarDTO {
  // 数字人基础脸部模型
  avatarFaceUrl: string(name='avatar_face_url', example='https://mdn.alipayobjects.com/huamei_n3jbep/afts/ab/A*eG-PSZRxPfwAAAAAAAAAAAAADgt8AA/original'),
  // 数字人基础脸部Json配置
  avatarFaceJson: string(name='avatar_face_json', example='https://mdn.alipayobjects.com/huamei_n3jbep/afts/ab/A*eG-PSZRxPfwAAAAAAAAAAAAADgt8AA/original'),
  // 上衣配置
  upcloth: AvatarMaterialDTO(name='upcloth', example=''),
  // 下衣配置
  downcloth: AvatarMaterialDTO(name='downcloth', example=''),
  // 鞋子配置
  shoe: AvatarMaterialDTO(name='shoe', example=''),
  // 套装配置
  suit: AvatarMaterialDTO(name='suit', example=''),
  // 项链配置
  necklace: AvatarMaterialDTO(name='necklace', example=''),
  // 帽子配置
  hat: AvatarMaterialDTO(name='hat', example=''),
  // 眼镜配置
  glass: AvatarMaterialDTO(name='glass', example=''),
  // 头发配置
  hair: AvatarMaterialDTO(name='hair', example=''),
  // 脸型配置
  head: AvatarMaterialDTO(name='head', example=''),
  // 眉毛配置
  eyebrow: AvatarMaterialDTO(name='eyebrow', example=''),
  // 眼睛配置
  eye: AvatarMaterialDTO(name='eye', example=''),
  // 嘴巴配置
  lip: AvatarMaterialDTO(name='lip', example=''),
  // 鼻子配置
  nose: AvatarMaterialDTO(name='nose', example=''),
  // 腮红配置
  rouge: AvatarMaterialDTO(name='rouge', example=''),
  // 美瞳配置
  lens: AvatarMaterialDTO(name='lens', example=''),
  // 睫毛配置
  eyelash: AvatarMaterialDTO(name='eyelash', example=''),
  // 唇妆配置
  lipstick: AvatarMaterialDTO(name='lipstick', example=''),
  // 眼线配置
  eyeliner: AvatarMaterialDTO(name='eyeliner', example=''),
  // 眼影配置
  eyeshadow: AvatarMaterialDTO(name='eyeshadow', example=''),
  // webgl ab包链接
  avatarWebGlUnityBodyUrl: string(name='avatar_web_gl_unity_body_url', example='https://mdn.alipayobjects.com/huamei_n3jbep/afts/ab/A*eG-PSZRxPfwAAAAAAAAAAAAADgt8AA/original '),
  // ios ab包链接
  avatarIosUnityBodyUrl: string(name='avatar_ios_unity_body_url', example='https://mdn.alipayobjects.com/huamei_n3jbep/afts/ab/A*eG-PSZRxPfwAAAAAAAAAAAAADgt8AA/original '),
  // android ab包链接
  avatarAndroidUnityBodyUrl: string(name='avatar_android_unity_body_url', example='https://mdn.alipayobjects.com/huamei_n3jbep/afts/ab/A*eG-PSZRxPfwAAAAAAAAAAAAADgt8AA/original '),
  // 默认Unity配置
  defaultUnityConfig: string(name='default_unity_config', example='12345678'),
  // 袜子配置
  sock: AvatarMaterialDTO(name='sock', example=''),
  // 背持配置
  backpack: AvatarMaterialDTO(name='backpack', example=''),
  // 手部配置
  hand: AvatarMaterialDTO(name='hand', example=''),
  // 耳环配置
  earring: AvatarMaterialDTO(name='earring', example=''),
}

// 用户资产
// 
model UserAsset {
  // NFT商品的商品编码
  skuId: long(name='sku_id', example='1234'),
  // NFT资产的唯一编码
  nftId: string(name='nft_id', example='AC1234#001/150'),
  // NFT商品的名称
  skuName: string(name='sku_name', example='敦煌飞天九色鹿'),
  // NFT的创作者名称
  authorName: string(name='author_name', example='敦煌'),
  // NFT的发行方名称
  issuerName: string(name='issuer_name', example='支付宝'),
  // 缩略图url
  miniImagePath: string(name='mini_image_path', example='http://www.abc.com'),
}

model QueryAsoDistinctRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // App ID
  appid: string(name='appid'),
  // 苹果设备的 IDFA
  idfa: string(name='idfa'),
  // 渠道标识(默认 qimai )
  source?: string(name='source'),
}

model QueryAsoDistinctResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 是否激活
  // -1: 失败; 0: 未激活; 1:已激活
  idfa?: string(name='idfa'),
}

/**
 * Description: ASO排重
 * Summary: ASO排重
 */
async function queryAsoDistinct(request: QueryAsoDistinctRequest): QueryAsoDistinctResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryAsoDistinctEx(request, headers, runtime);
}

/**
 * Description: ASO排重
 * Summary: ASO排重
 */
async function queryAsoDistinctEx(request: QueryAsoDistinctRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAsoDistinctResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.nftc.aso.distinct.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SubmitAsoClickRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // App ID
  appid: string(name='appid'),
  // 苹果设备的 IDFA
  idfa: string(name='idfa'),
  // 用户终端的公网IP地址
  ip: string(name='ip'),
  // 用户代理(User Agent)
  ua: string(name='ua'),
  // 渠道标识(默认 qimai )
  source?: string(name='source'),
  // urlencode后的回调地址
  callback: string(name='callback'),
  // 手机型号 iphone10,3
  model?: string(name='model'),
}

model SubmitAsoClickResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 是否成功 0: 失败; 1:成功
  result?: string(name='result'),
}

/**
 * Description: ASO点击数据上报
 * Summary: ASO点击
 */
async function submitAsoClick(request: SubmitAsoClickRequest): SubmitAsoClickResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return submitAsoClickEx(request, headers, runtime);
}

/**
 * Description: ASO点击数据上报
 * Summary: ASO点击
 */
async function submitAsoClickEx(request: SubmitAsoClickRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SubmitAsoClickResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.nftc.aso.click.submit', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryAvatarProfileRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 在antchain.nftc.oauth.token.apply接口内获取到的AccessToken，带过期时间，可唯一确定当前用户
  accessToken: string(name='access_token'),
}

model QueryAvatarProfileResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 数字人整体形象数据
  avatarInfo?: AvatarDTO(name='avatar_info'),
}

/**
 * Description: 获取当前用户的数字人形象，进而在NBA空间内进行渲染
 * Summary: 查询当前数字人形象
 */
async function queryAvatarProfile(request: QueryAvatarProfileRequest): QueryAvatarProfileResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryAvatarProfileEx(request, headers, runtime);
}

/**
 * Description: 获取当前用户的数字人形象，进而在NBA空间内进行渲染
 * Summary: 查询当前数字人形象
 */
async function queryAvatarProfileEx(request: QueryAvatarProfileRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAvatarProfileResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.nftc.avatar.profile.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryPromoteActivityRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 助力活动的活动规则编码
  promoteId: string(name='promote_id'),
  // 用户授权token
  accessToken: string(name='access_token'),
}

model QueryPromoteActivityResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 助力活动的活动规则编码
  promoteId?: string(name='promote_id'),
  // 活动状态：
  // ENABLE（进行中）
  // END（活动结束）
  status?: string(name='status'),
  // 助力活动类型
  // ONCE（生命周期内一次）
  // DAILY（每日一次）
  type?: string(name='type'),
  // 活动开始时间
  startTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='start_time'),
  // 活动结束时间
  endTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='end_time'),
  // 最大助力人数
  maxNum?: long(name='max_num'),
  // 当前助力成功人数
  curNum?: long(name='cur_num'),
  // 参与助力的唯一编码，供三方幂等记录并唯一发奖
  promoteList?: [ string ](name='promote_list'),
}

/**
 * Description: 根据活动编码以及用户的openUid查询用户当前助力活动的状态以及进度
 * Summary: 查询用户助力活动信息
 */
async function queryPromoteActivity(request: QueryPromoteActivityRequest): QueryPromoteActivityResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryPromoteActivityEx(request, headers, runtime);
}

/**
 * Description: 根据活动编码以及用户的openUid查询用户当前助力活动的状态以及进度
 * Summary: 查询用户助力活动信息
 */
async function queryPromoteActivityEx(request: QueryPromoteActivityRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryPromoteActivityResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.nftc.promote.activity.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetPromoteShareurlRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 助力活动的活动规则编码
  promoteId: string(name='promote_id'),
  // 用户授权token
  accessToken: string(name='access_token'),
}

model GetPromoteShareurlResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 经处理过的分享落地页面的链接，该落地页面由鲸探实现
  shareUrl?: string(name='share_url'),
}

/**
 * Description: 根据活动编码以及用户的openUid发起助力，获取分享的url链接
 * Summary: 发起助力分享
 */
async function getPromoteShareurl(request: GetPromoteShareurlRequest): GetPromoteShareurlResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getPromoteShareurlEx(request, headers, runtime);
}

/**
 * Description: 根据活动编码以及用户的openUid发起助力，获取分享的url链接
 * Summary: 发起助力分享
 */
async function getPromoteShareurlEx(request: GetPromoteShareurlRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetPromoteShareurlResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.nftc.promote.shareurl.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ConfirmTaskRewardRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 鲸探用户唯一标识
  openUserId: string(name='open_user_id'),
  // 前置通过消息获取的奖励流水唯—id(可用作幂等键，详情看下文的奖励消息通知)
  rewardRecordId: string(name='reward_record_id'),
}

model ConfirmTaskRewardResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 确认奖励到账
 * Summary: 确认奖励到账
 */
async function confirmTaskReward(request: ConfirmTaskRewardRequest): ConfirmTaskRewardResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return confirmTaskRewardEx(request, headers, runtime);
}

/**
 * Description: 确认奖励到账
 * Summary: 确认奖励到账
 */
async function confirmTaskRewardEx(request: ConfirmTaskRewardRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ConfirmTaskRewardResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.nftc.task.reward.confirm', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ApplyOauthTokenRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 授权方式。支持：
  // 1.authorization_code，表示换取使用用户授权码code换取授权令牌access_token。
  // 2.refresh_token，表示使用refresh_token刷新获取新授权令牌。
  // refresh_token本期新增
  grantType: string(name='grant_type'),
  // 刷新令牌，上次换取访问令牌时得到。本参数在 grant_type 为 authorization_code 时不填；为 refresh_token 时必填；
  refreshToken?: string(name='refresh_token'),
  // 授权码，用户对应用授权后得到。本参数在 grant_type 为 authorization_code 时必填，为 refresh_token 时不填
  authCode?: string(name='auth_code'),
}

model ApplyOauthTokenResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 虚拟uid
  openUserId?: string(name='open_user_id'),
  // 后续调用接口健全的token，有效期30天
  accessToken?: string(name='access_token'),
  // accessToken到期时间
  expireTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='expire_time'),
  // 刷新token，有效期90天
  refreshToken?: string(name='refresh_token'),
  // refreshToken到期时间
  refreshExpireTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='refresh_expire_time'),
}

/**
 * Description: authcode换取token
 * Summary: authcode换取token
 */
async function applyOauthToken(request: ApplyOauthTokenRequest): ApplyOauthTokenResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return applyOauthTokenEx(request, headers, runtime);
}

/**
 * Description: authcode换取token
 * Summary: authcode换取token
 */
async function applyOauthTokenEx(request: ApplyOauthTokenRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ApplyOauthTokenResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.nftc.oauth.token.apply', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryOauthUserinfoRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // accessToken请求
  accessToken: string(name='access_token'),
  // 查询信息范围,user_base_info-查询头像、昵称
  scope?: string(name='scope'),
}

model QueryOauthUserinfoResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 昵称
  nickName?: string(name='nick_name'),
  // 头像链接
  avatar?: string(name='avatar'),
  // 用户id
  openUserId?: string(name='open_user_id'),
  // 租户下用户id
  tenantUid?: string(name='tenant_uid'),
  // 用户手机号
  phone?: string(name='phone'),
  // 0-未实名; 1-已实名
  isRealNameVerified?: long(name='is_real_name_verified'),
}

/**
 * Description: token获取头像/昵称
 * Summary: token获取头像/昵称
 */
async function queryOauthUserinfo(request: QueryOauthUserinfoRequest): QueryOauthUserinfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryOauthUserinfoEx(request, headers, runtime);
}

/**
 * Description: token获取头像/昵称
 * Summary: token获取头像/昵称
 */
async function queryOauthUserinfoEx(request: QueryOauthUserinfoRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryOauthUserinfoResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.nftc.oauth.userinfo.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ApplyOauthUserinfotokenRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // accessToken请求
  accessToken: string(name='access_token'),
  // 拉起页面的场景
  // nft_details 订单详情页
  // oauth_page 授权登陆页
  pageTokenScene: string(name='page_token_scene'),
}

model ApplyOauthUserinfotokenResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 用户token，有效期5分钟
  userInfoToken?: string(name='user_info_token'),
}

/**
 * Description: 获取用户Token
 * Summary: 获取用户Token
 */
async function applyOauthUserinfotoken(request: ApplyOauthUserinfotokenRequest): ApplyOauthUserinfotokenResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return applyOauthUserinfotokenEx(request, headers, runtime);
}

/**
 * Description: 获取用户Token
 * Summary: 获取用户Token
 */
async function applyOauthUserinfotokenEx(request: ApplyOauthUserinfotokenRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ApplyOauthUserinfotokenResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.nftc.oauth.userinfotoken.apply', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryOauthRealnameinfoRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // token
  accessToken: string(name='access_token'),
}

model QueryOauthRealnameinfoResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 实名
  realName?: string(name='real_name'),
  // 身份证编号
  idCard?: string(name='id_card'),
}

/**
 * Description: token获取实名信息
 * Summary: token获取实名认证信息
 */
async function queryOauthRealnameinfo(request: QueryOauthRealnameinfoRequest): QueryOauthRealnameinfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryOauthRealnameinfoEx(request, headers, runtime);
}

/**
 * Description: token获取实名信息
 * Summary: token获取实名认证信息
 */
async function queryOauthRealnameinfoEx(request: QueryOauthRealnameinfoRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryOauthRealnameinfoResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.nftc.oauth.realnameinfo.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SendSmsMessageRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 短信模版Id
  templateId: string(name='template_id'),
  // 手机号
  phone: string(name='phone'),
  // 参数键值对
  templateArgs: string(name='template_args'),
}

model SendSmsMessageResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 短信发送
 * Summary: 短信发送
 */
async function sendSmsMessage(request: SendSmsMessageRequest): SendSmsMessageResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return sendSmsMessageEx(request, headers, runtime);
}

/**
 * Description: 短信发送
 * Summary: 短信发送
 */
async function sendSmsMessageEx(request: SendSmsMessageRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SendSmsMessageResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.nftc.sms.message.send', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model PublishMerchantDiyskuRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 业务请求id，用来做业务上的幂等。后面查询状态也是此字段
  bizNo: string(name='biz_no'),
  // 调用渠道
  // PET 宠物
  // MEMBER 会员
  channel: string(name='channel'),
  // 领取数字藏品的用户ID，支持2088/手机号/1322
  userId: string(name='user_id'),
  // 支付宝2088账号：ALIPAY_UID
  // 手机号：PHONE_NO
  // 鲸探1322账号：FANS_UID
  userType: string(name='user_type'),
  // 需要发放的SKUID编码
  skuId: string(name='sku_id'),
  // 一期仅支持图片：IMAGE
  skuType: string(name='sku_type'),
  // 数字藏品的缩略图地址，可与原图相同也可不同，需要校验长宽比为1:1
  thumbnailUrl: string(name='thumbnail_url'),
  // 数字藏品的原图地址，需要校验长宽比为1:1
  originalUrl: string(name='original_url'),
}

model PublishMerchantDiyskuResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 生成的nftid结果
  nftId?: string(name='nft_id'),
  // 获得时间
  receiveTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='receive_time'),
  // 发放状态
  // AUDIT_SUBMIT("审核中"),
  // AUDIT_SUCCESS("审核通过"),
  // AUDIT_FAIL("审核未通过"),
  // TRANSFER_UNKNOWN("发放结果未知"),
  // TRANSFER_SUCCESS("发放成功"),
  // TRANSFER_FAILED("发放失败"),
  // SHIELD("屏蔽"),
  // RECYCLE("回收"),
  sendStatus?: string(name='send_status'),
}

/**
 * Description: DIY藏品发放
 * Summary: DIY藏品发放
 */
async function publishMerchantDiysku(request: PublishMerchantDiyskuRequest): PublishMerchantDiyskuResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return publishMerchantDiyskuEx(request, headers, runtime);
}

/**
 * Description: DIY藏品发放
 * Summary: DIY藏品发放
 */
async function publishMerchantDiyskuEx(request: PublishMerchantDiyskuRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PublishMerchantDiyskuResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.nftc.merchant.diysku.publish', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryMerchantDiyskuRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 业务请求id，用来做业务上的幂等
  bizNo: string(name='biz_no'),
  // 领取数字藏品的用户ID，支持2088/手机号/1322
  userId: string(name='user_id'),
}

model QueryMerchantDiyskuResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 生成的nftid结果
  nftId?: string(name='nft_id'),
  // 获得时间
  receiveTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='receive_time'),
  // 发放状态
  // AUDIT_SUBMIT("审核中"),
  // AUDIT_SUCCESS("审核通过"),
  // AUDIT_FAIL("审核未通过"),
  // TRANSFER_UNKNOWN("发放结果未知"),
  // TRANSFER_SUCCESS("发放成功"),
  // TRANSFER_FAILED("发放失败"),
  // SHIELD("屏蔽"),
  // RECYCLE("回收"),
  sendStatus?: string(name='send_status'),
}

/**
 * Description: DIY藏品发放查询
 * Summary: DIY藏品发放查询
 */
async function queryMerchantDiysku(request: QueryMerchantDiyskuRequest): QueryMerchantDiyskuResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryMerchantDiyskuEx(request, headers, runtime);
}

/**
 * Description: DIY藏品发放查询
 * Summary: DIY藏品发放查询
 */
async function queryMerchantDiyskuEx(request: QueryMerchantDiyskuRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryMerchantDiyskuResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.nftc.merchant.diysku.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryMerchantUgcimagesRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // ugc资产铸造记录id列表
  recordIdList: [ string ](name='record_id_list'),
  // 场景
  bizScene: string(name='biz_scene'),
}

model QueryMerchantUgcimagesResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 入参中id对应的图片列表
  imgList?: [ string ](name='img_list'),
}

/**
 * Description: 提供ISV  ugc铸造图片查询的openapi服务
 * Summary: ugc铸造图片查询的openapi接口
 */
async function queryMerchantUgcimages(request: QueryMerchantUgcimagesRequest): QueryMerchantUgcimagesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryMerchantUgcimagesEx(request, headers, runtime);
}

/**
 * Description: 提供ISV  ugc铸造图片查询的openapi服务
 * Summary: ugc铸造图片查询的openapi接口
 */
async function queryMerchantUgcimagesEx(request: QueryMerchantUgcimagesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryMerchantUgcimagesResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.nftc.merchant.ugcimages.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ApplyNftTransferRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 藏品标识sku
  skuId: long(name='sku_id'),
  // 被转入用户的支付宝uid和手机号
  toIdNo: string(name='to_id_no'),
  // 参照idType枚举
  toIdType: string(name='to_id_type'),
  // 用户购买价格，可以为0，单位分
  priceCent: long(name='price_cent'),
  // 用户在商户购买的订单号
  orderNo: string(name='order_no'),
  // 调用方渠道租户，传租户id即可
  channelTenant: string(name='channel_tenant'),
}

model ApplyNftTransferResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 标识一类NFT
  skuId?: long(name='sku_id'),
  // 流转的nftId
  nftId?: string(name='nft_id'),
}

/**
 * Description: 租户根据sku给用户发放藏品
 * Summary: 发放藏品
 */
async function applyNftTransfer(request: ApplyNftTransferRequest): ApplyNftTransferResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return applyNftTransferEx(request, headers, runtime);
}

/**
 * Description: 租户根据sku给用户发放藏品
 * Summary: 发放藏品
 */
async function applyNftTransferEx(request: ApplyNftTransferRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ApplyNftTransferResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.nftc.nft.transfer.apply', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model PagequeryNftCustomerRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 页码
  page: long(name='page'),
  // 分页大小-上限10
  pageSize: long(name='page_size'),
  // 用户标识
  idNo: string(name='id_no'),
  // 用户id类型
  idType: string(name='id_type'),
}

model PagequeryNftCustomerResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 页码，查询时传入
  page?: long(name='page'),
  // 页长，查询时传入
  pageSize?: long(name='page_size'),
  // 列表总数
  totalCount?: long(name='total_count'),
  // 用户资产列表
  assetList?: [ UserAsset ](name='asset_list'),
}

/**
 * Description: 调用租户分页查询用户该租户发行的sku的资产
 * Summary: 查询藏品
 */
async function pagequeryNftCustomer(request: PagequeryNftCustomerRequest): PagequeryNftCustomerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return pagequeryNftCustomerEx(request, headers, runtime);
}

/**
 * Description: 调用租户分页查询用户该租户发行的sku的资产
 * Summary: 查询藏品
 */
async function pagequeryNftCustomerEx(request: PagequeryNftCustomerRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PagequeryNftCustomerResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.nftc.nft.customer.pagequery', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryNftOrderRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 业务方侧唯一业务单号
  bizNo: string(name='biz_no'),
}

model QueryNftOrderResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 订单状态
  externalOrder?: ExternalOrderDTO(name='external_order'),
}

/**
 * Description: 查询支付结果
 * Summary: 查询支付结果
 */
async function queryNftOrder(request: QueryNftOrderRequest): QueryNftOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryNftOrderEx(request, headers, runtime);
}

/**
 * Description: 查询支付结果
 * Summary: 查询支付结果
 */
async function queryNftOrderEx(request: QueryNftOrderRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryNftOrderResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.nftc.nft.order.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryNftAssetbyskuRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 具体用户Id标识，支持不同类型的id标识，根据toIdType不同而不同
  idNo: string(name='id_no'),
  // 参照idType枚举，支持手机号/openUserId
  idType: string(name='id_type'),
  // 数字藏品类标识ID
  skuId: string(name='sku_id'),
  // 页码，从1开始
  page: long(name='page'),
  // 分页大小-上限10
  pageSize: long(name='page_size'),
}

model QueryNftAssetbyskuResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 用户资产列表
  assetList?: [ UserAsset ](name='asset_list'),
  // 总数
  totalCount?: long(name='total_count'),
}

/**
 * Description: 根据skuId维度查询藏品
 * Summary: 根据skuId维度查询藏品
 */
async function queryNftAssetbysku(request: QueryNftAssetbyskuRequest): QueryNftAssetbyskuResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryNftAssetbyskuEx(request, headers, runtime);
}

/**
 * Description: 根据skuId维度查询藏品
 * Summary: 根据skuId维度查询藏品
 */
async function queryNftAssetbyskuEx(request: QueryNftAssetbyskuRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryNftAssetbyskuResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.nftc.nft.assetbysku.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CheckNftAssetbyskuRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 鲸探用户ID标识，OpenApi场景使用的加密格式
  openUserId: string(name='open_user_id'),
  // 数字藏品类标识ID
  skuId: long(name='sku_id'),
}

model CheckNftAssetbyskuResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 是否已拥有对应sku的nft
  hasOwn?: boolean(name='has_own'),
}

/**
 * Description: 根据skuId维度校验藏品是否已拥有
 * Summary: 根据skuId维度校验藏品是否已拥有
 */
async function checkNftAssetbysku(request: CheckNftAssetbyskuRequest): CheckNftAssetbyskuResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return checkNftAssetbyskuEx(request, headers, runtime);
}

/**
 * Description: 根据skuId维度校验藏品是否已拥有
 * Summary: 根据skuId维度校验藏品是否已拥有
 */
async function checkNftAssetbyskuEx(request: CheckNftAssetbyskuRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CheckNftAssetbyskuResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.nftc.nft.assetbysku.check', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SendPromoPrizeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 鲸探用户唯一标识
  openUserId: string(name='open_user_id'),
  // 海豚活动ID，鲸探运营在海豚创建的活动ID
  campId: string(name='camp_id'),
  // 海豚奖品ID，鲸探运营在海豚创建的奖品ID
  prizeId: string(name='prize_id'),
  // 调用方唯一幂等号
  bizNo: string(name='biz_no'),
}

model SendPromoPrizeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 支付宝海豚优惠券发放
 * Summary: 支付宝海豚优惠券发放
 */
async function sendPromoPrize(request: SendPromoPrizeRequest): SendPromoPrizeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return sendPromoPrizeEx(request, headers, runtime);
}

/**
 * Description: 支付宝海豚优惠券发放
 * Summary: 支付宝海豚优惠券发放
 */
async function sendPromoPrizeEx(request: SendPromoPrizeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SendPromoPrizeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.nftc.promo.prize.send', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateResourceGeneralresourceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 小程序的APP ID
  appId: string(name='app_id'),
  // 业务幂等ID
  bizId: string(name='biz_id'),
  // 是否需要生成差量包
  needPatch: boolean(name='need_patch'),
}

model CreateResourceGeneralresourceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 资源ID
  resourceId?: string(name='resource_id'),
  // 文件上传地址
  url?: string(name='url'),
  // 资源上传的授权token，上传文件时需要将该值放入header中进行鉴权
  maasToken?: string(name='maas_token'),
}

/**
 * Description: 创建通用资源
 * Summary: 创建通用资源
 */
async function createResourceGeneralresource(request: CreateResourceGeneralresourceRequest): CreateResourceGeneralresourceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createResourceGeneralresourceEx(request, headers, runtime);
}

/**
 * Description: 创建通用资源
 * Summary: 创建通用资源
 */
async function createResourceGeneralresourceEx(request: CreateResourceGeneralresourceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateResourceGeneralresourceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.nftc.resource.generalresource.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BindResourceGeneralresourcefileRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 小程序的APP ID
  appId: string(name='app_id'),
  // 资源ID
  resourceId: string(name='resource_id'),
  // 文件ID
  fileId: string(name='file_id'),
  // 文件状态
  status?: string(name='status'),
  // 业务自定义的文本版本号
  bizVersion?: string(name='biz_version'),
}

model BindResourceGeneralresourcefileResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 版本号
  version?: long(name='version'),
  // 文件下载地址
  url?: string(name='url'),
  // md5摘要值
  md5?: string(name='md5'),
  // 文件大小
  size?: long(name='size'),
}

/**
 * Description: 绑定文件到通用资源ID
 * Summary: 绑定文件到通用资源ID
 */
async function bindResourceGeneralresourcefile(request: BindResourceGeneralresourcefileRequest): BindResourceGeneralresourcefileResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return bindResourceGeneralresourcefileEx(request, headers, runtime);
}

/**
 * Description: 绑定文件到通用资源ID
 * Summary: 绑定文件到通用资源ID
 */
async function bindResourceGeneralresourcefileEx(request: BindResourceGeneralresourcefileRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BindResourceGeneralresourcefileResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.nftc.resource.generalresourcefile.bind', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model PublishResourceGeneralresourcefileRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 小程序的APP ID
  appId: string(name='app_id'),
  // 业务幂等ID
  bizId: string(name='biz_id'),
  // 资源ID
  resourceId: string(name='resource_id'),
  // 版本号
  fileVersion: long(name='file_version'),
}

model PublishResourceGeneralresourcefileResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 版本号
  version?: long(name='version'),
  // 资源文件下载地址
  url?: string(name='url'),
  // md5摘要值
  md5?: string(name='md5'),
  // 文件大小
  size?: long(name='size'),
}

/**
 * Description: 发布通用资源文件
 * Summary: 发布通用资源文件
 */
async function publishResourceGeneralresourcefile(request: PublishResourceGeneralresourcefileRequest): PublishResourceGeneralresourcefileResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return publishResourceGeneralresourcefileEx(request, headers, runtime);
}

/**
 * Description: 发布通用资源文件
 * Summary: 发布通用资源文件
 */
async function publishResourceGeneralresourcefileEx(request: PublishResourceGeneralresourcefileRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PublishResourceGeneralresourcefileResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.nftc.resource.generalresourcefile.publish', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryResourcePatchlistRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 小程序的APP ID
  appId: string(name='app_id'),
  // 资源ID
  resourceId: string(name='resource_id'),
  // 版本号
  fileVersion: long(name='file_version'),
}

model QueryResourcePatchlistResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 差量包生成状态，包括PATCHING（生成中）和FINISHED（生成完成）
  patchStatus?: string(name='patch_status'),
  // 全量包下载地址
  url?: string(name='url'),
  // 资源ID
  resourceId?: string(name='resource_id'),
  // 全量包版本号
  version?: long(name='version'),
  // 全量包md5摘要值
  md5?: string(name='md5'),
  // 全量包文件大小
  size?: long(name='size'),
  // 差量包文件信息列表
  patchList?: [ GeneralResourcePatch ](name='patch_list'),
}

/**
 * Description: 查询资源文件差量包列表
 * Summary: 查询资源文件差量包列表
 */
async function queryResourcePatchlist(request: QueryResourcePatchlistRequest): QueryResourcePatchlistResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryResourcePatchlistEx(request, headers, runtime);
}

/**
 * Description: 查询资源文件差量包列表
 * Summary: 查询资源文件差量包列表
 */
async function queryResourcePatchlistEx(request: QueryResourcePatchlistRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryResourcePatchlistResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.nftc.resource.patchlist.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ApplyResourceFiletokenRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // Token类型
  tokenType: string(name='token_type'),
}

model ApplyResourceFiletokenResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 临时token信息
  massToken?: string(name='mass_token'),
  // 上传地址
  url?: string(name='url'),
  // afts-appid
  appId?: string(name='app_id'),
  // afts-bizkey
  bizKey?: string(name='biz_key'),
}

/**
 * Description: 资源管理平台-申请文件上传token
 * Summary: 资源管理平台-申请文件上传token
 */
async function applyResourceFiletoken(request: ApplyResourceFiletokenRequest): ApplyResourceFiletokenResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return applyResourceFiletokenEx(request, headers, runtime);
}

/**
 * Description: 资源管理平台-申请文件上传token
 * Summary: 资源管理平台-申请文件上传token
 */
async function applyResourceFiletokenEx(request: ApplyResourceFiletokenRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ApplyResourceFiletokenResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.nftc.resource.filetoken.apply', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

