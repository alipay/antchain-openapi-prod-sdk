import AntchainUtil;
import Util;
import RPCUtil;

type @endpoint = string
type @regionId = string
type @accessKeyId = string
type @accessKeySecret = string
type @protocol = string
type @userAgent = string
type @readTimeout = number
type @connectTimeout = number
type @httpProxy = string
type @httpsProxy = string
type @socks5Proxy = string
type @socks5NetWork = string
type @noProxy = string
type @maxIdleConns = number
type @securityToken = string
type @maxIdleTimeMillis = number
type @keepAliveDurationMillis = number
type @maxRequests = number
type @maxRequestsPerHost = number

/**
 * Model for initing client
 */
model Config {
  accessKeyId?: string(description='accesskey id',default=''),
  accessKeySecret?: string(description='accesskey secret',default=''),
  securityToken?: string(description='security token',default=''),
  protocol?: string(description='http protocol',example='http',default='http'),
  readTimeout?: number(description='read timeout',example='10',default=''),
  connectTimeout?: number(description='connect timeout',example='10',default=''),
  httpProxy?: string(description='http proxy',example='http://localhost',default=''),
  httpsProxy?: string(description='https proxy',example='https://localhost',default=''),
  endpoint?: string(description='endpoint',example='cs.aliyuncs.com',default=''),
  noProxy?: string(description='proxy white list',example='http://localhost',default=''),
  maxIdleConns?: number(description='max idle conns',example='3',default=''),
  userAgent?: string(description='user agent',example='Alibabacloud/1',default=''),
  socks5Proxy?: string(description='socks5 proxy',default=''),
  socks5NetWork?: string(description='socks5 network',example='TCP',default=''),
  maxIdleTimeMillis?: number(description='长链接最大空闲时长',default='60 * 1000L'),
  keepAliveDurationMillis?: number(description='长链接最大连接时长',default='5000'),
  maxRequests?: number(description='最大连接数（长链接最大总数）',default='100'),
  maxRequestsPerHost?: number(description='每个目标主机的最大连接数（分主机域名的长链接最大总数',default='100'),
}

/**
 * Init client with Config
 * @param config config contains the necessary information to create a client
 */
init(config: Config) {
  if (Util.isUnset(config)) {
    throw {
      code = 'ParameterMissing',
      message = '\'config\' can not be unset'
    };
  }

  @accessKeyId = config.accessKeyId;
  @accessKeySecret = config.accessKeySecret;
  @securityToken = config.securityToken;
  @endpoint = config.endpoint;
  @protocol = config.protocol;
  @userAgent = config.userAgent;
  @readTimeout = Util.defaultNumber(config.readTimeout, 20000);
  @connectTimeout = Util.defaultNumber(config.connectTimeout, 20000);
  @httpProxy = config.httpProxy;
  @httpsProxy = config.httpsProxy;
  @noProxy = config.noProxy;
  @socks5Proxy = config.socks5Proxy;
  @socks5NetWork = config.socks5NetWork;
  @maxIdleConns = Util.defaultNumber(config.maxIdleConns, 60000);
  @maxIdleTimeMillis = Util.defaultNumber(config.maxIdleTimeMillis, 5);
  @keepAliveDurationMillis = Util.defaultNumber(config.keepAliveDurationMillis, 5000);
  @maxRequests = Util.defaultNumber(config.maxRequests, 100);
  @maxRequestsPerHost = Util.defaultNumber(config.maxRequestsPerHost, 100);
}

/**
 * Encapsulate the request and invoke the network
 * @param action api name
 * @param protocol http or https
 * @param method e.g. GET
 * @param pathname pathname of every api
 * @param request which contains request params
 * @param runtime which controls some details of call api, such as retry times
 * @return the response
 */
api doRequest(version: string, action: string, protocol: string, method: string, pathname: string, request: object, headers: map[string]string, runtime: Util.RuntimeOptions): object {
  __request.protocol = Util.defaultString(@protocol, protocol);
  __request.method = method;
  __request.pathname = pathname;
  __request.query = {
    method = action,
    version = version,
    sign_type = 'HmacSHA1',
    req_time = AntchainUtil.getTimestamp(),
    req_msg_id = AntchainUtil.getNonce(),
    access_key = @accessKeyId,
    base_sdk_version = 'TeaSDK-2.0',
    sdk_version = '1.0.1',
    _prod_code = 'ID_SECURITYTECH',
    _prod_channel = 'undefined'
  };

  if (!Util.empty(@securityToken)) {
    __request.query.security_token = @securityToken;
  }

  __request.headers = {
    host = Util.defaultString(@endpoint, 'openapi.antchain.antgroup.com'),
    user-agent = Util.getUserAgent(@userAgent),
    ...headers
  };

  var tmp = Util.anyifyMapValue(RPCUtil.query(request));
  __request.body = Util.toFormString(tmp);
  __request.headers.content-type = 'application/x-www-form-urlencoded';

  var signedParam = {
    ...__request.query,
    ...RPCUtil.query(request)
  };
  __request.query.sign = AntchainUtil.getSignature(signedParam, @accessKeySecret);
} returns {
  var raw = Util.readAsString(__response.body);
  var obj = Util.parseJSON(raw);
  var res = Util.assertAsMap(obj);
  var resp = Util.assertAsMap(res.response);

  if (AntchainUtil.hasError(raw, @accessKeySecret)) {
    throw {
      message = resp.result_msg,
      data = resp,
      code = resp.result_code
    };
  }
  return resp;
} runtime {
  timeouted = 'retry',
  readTimeout = Util.defaultNumber(runtime.readTimeout, @readTimeout),
  connectTimeout = Util.defaultNumber(runtime.connectTimeout, @connectTimeout),
  httpProxy = Util.defaultString(runtime.httpProxy, @httpProxy),
  httpsProxy = Util.defaultString(runtime.httpsProxy, @httpsProxy),
  noProxy = Util.defaultString(runtime.noProxy, @noProxy),
  maxIdleConns = Util.defaultNumber(runtime.maxIdleConns, @maxIdleConns),
  maxIdleTimeMillis = @maxIdleTimeMillis,
  keepAliveDuration = @keepAliveDurationMillis,
  maxRequests = @maxRequests,
  maxRequestsPerHost = @maxRequestsPerHost,
  retry = {
    retryable = runtime.autoretry,
    maxAttempts = Util.defaultNumber(runtime.maxAttempts, 3)
  },
  backoff = {
    policy = Util.defaultString(runtime.backoffPolicy, 'no'),
    period = Util.defaultNumber(runtime.backoffPeriod, 1)
  },
  ignoreSSL = runtime.ignoreSSL
}

// FileTokenForUpload
model FileTokenForUpload {
  // access_id
  accessId: string(name='access_id', example='access_id'),
  // dir
  dir: string(name='dir', example='dir'),
  // expire
  expire: string(name='expire', example='expire'),
  // host
  host: string(name='host', example='host'),
  // policy
  policy: string(name='policy', example='policy'),
  // signature
  signature: string(name='signature', example='signature'),
}

// 设备风险查询data
model DeviceRiskResp {
  // apdid
  apdid: string(name='apdid', example='.'),
  // apdid_token
  apdidToken: string(name='apdid_token', example='.'),
  // risk_level
  riskLevel: long(name='risk_level', example=''),
  // risk_desc
  riskDesc: string(name='risk_desc', example='.'),
  // sug_action
  sugAction: string(name='sug_action', example='.'),
  // risk_labels
  riskLabels: [ string ](name='risk_labels', example=''),
}

model GetAshieldFiletokenRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
}

model GetAshieldFiletokenResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // -
  requestId?: string(name='request_id'),
  // res_success
  resSuccess?: boolean(name='res_success'),
  // res_code
  resCode?: string(name='res_code'),
  // res_message
  resMessage?: string(name='res_message'),
  // res_data
  resData?: FileTokenForUpload(name='res_data'),
}

/**
 * Description: 终端安全-Android应用加固-获取上传文件的临时URL
 * Summary: 获取上传文件的临时URL
 */
async function getAshieldFiletoken(request: GetAshieldFiletokenRequest): GetAshieldFiletokenResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getAshieldFiletokenEx(request, headers, runtime);
}

/**
 * Description: 终端安全-Android应用加固-获取上传文件的临时URL
 * Summary: 获取上传文件的临时URL
 */
async function getAshieldFiletokenEx(request: GetAshieldFiletokenRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetAshieldFiletokenResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'idsecuritytech.gateway.ashield.filetoken.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDeviceriskFingerRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // apdid_token
  apdidToken: string(name='apdid_token'),
  // client_id
  clientId?: string(name='client_id'),
  // terminal_type
  terminalType?: string(name='terminal_type'),
}

model QueryDeviceriskFingerResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // code
  code?: long(name='code'),
  // message
  message?: string(name='message'),
  // request_id
  requestId?: string(name='request_id'),
  // success
  success?: boolean(name='success'),
  // data
  data?: DeviceRiskResp(name='data'),
}

/**
 * Description: 设备指纹查询
 * Summary: 设备指纹查询
 */
async function queryDeviceriskFinger(request: QueryDeviceriskFingerRequest): QueryDeviceriskFingerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDeviceriskFingerEx(request, headers, runtime);
}

/**
 * Description: 设备指纹查询
 * Summary: 设备指纹查询
 */
async function queryDeviceriskFingerEx(request: QueryDeviceriskFingerRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDeviceriskFingerResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'idsecuritytech.gateway.devicerisk.finger.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDeviceriskRisklabelRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // apdid_token
  apdidToken: string(name='apdid_token'),
  // client_id
  clientId?: string(name='client_id'),
  // terminal_type
  terminalType?: string(name='terminal_type'),
}

model QueryDeviceriskRisklabelResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // code
  code?: long(name='code'),
  // message
  message?: string(name='message'),
  // request_id
  requestId?: string(name='request_id'),
  // success
  success?: boolean(name='success'),
  // data
  data?: DeviceRiskResp(name='data'),
}

/**
 * Description: 风险标签查询
 * Summary: 风险标签查询
 */
async function queryDeviceriskRisklabel(request: QueryDeviceriskRisklabelRequest): QueryDeviceriskRisklabelResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDeviceriskRisklabelEx(request, headers, runtime);
}

/**
 * Description: 风险标签查询
 * Summary: 风险标签查询
 */
async function queryDeviceriskRisklabelEx(request: QueryDeviceriskRisklabelRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDeviceriskRisklabelResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'idsecuritytech.gateway.devicerisk.risklabel.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDeviceriskDeviceriskRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // apdid_token
  apdidToken: string(name='apdid_token'),
  // client_id
  clientId?: string(name='client_id'),
  // app_id
  appId?: string(name='app_id'),
  // env_id
  envId?: string(name='env_id'),
  // tenant_id
  tenantId?: string(name='tenant_id'),
  // merchant_id
  merchantId?: string(name='merchant_id'),
  // app_name
  appName?: string(name='app_name'),
  // terminal_type
  terminalType?: string(name='terminal_type'),
}

model QueryDeviceriskDeviceriskResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // code
  code?: long(name='code'),
  // message
  message?: string(name='message'),
  // request_id
  requestId?: string(name='request_id'),
  // success
  success?: boolean(name='success'),
  // data
  data?: DeviceRiskResp(name='data'),
}

/**
 * Description: 终端安全-设备风险查询
 * Summary: 设备风险查询
 */
async function queryDeviceriskDevicerisk(request: QueryDeviceriskDeviceriskRequest): QueryDeviceriskDeviceriskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDeviceriskDeviceriskEx(request, headers, runtime);
}

/**
 * Description: 终端安全-设备风险查询
 * Summary: 设备风险查询
 */
async function queryDeviceriskDeviceriskEx(request: QueryDeviceriskDeviceriskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDeviceriskDeviceriskResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'idsecuritytech.gateway.devicerisk.devicerisk.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

