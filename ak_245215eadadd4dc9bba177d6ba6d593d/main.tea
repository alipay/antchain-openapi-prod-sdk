import AntchainUtil;
import Util;
import RPCUtil;

type @endpoint = string
type @regionId = string
type @accessKeyId = string
type @accessKeySecret = string
type @protocol = string
type @userAgent = string
type @readTimeout = number
type @connectTimeout = number
type @httpProxy = string
type @httpsProxy = string
type @socks5Proxy = string
type @socks5NetWork = string
type @noProxy = string
type @maxIdleConns = number
type @securityToken = string
type @maxIdleTimeMillis = number
type @keepAliveDurationMillis = number
type @maxRequests = number
type @maxRequestsPerHost = number

/**
 * Model for initing client
 */
model Config {
  accessKeyId?: string(description='accesskey id',default=''),
  accessKeySecret?: string(description='accesskey secret',default=''),
  securityToken?: string(description='security token',default=''),
  protocol?: string(description='http protocol',example='http',default='http'),
  readTimeout?: number(description='read timeout',example='10',default=''),
  connectTimeout?: number(description='connect timeout',example='10',default=''),
  httpProxy?: string(description='http proxy',example='http://localhost',default=''),
  httpsProxy?: string(description='https proxy',example='https://localhost',default=''),
  endpoint?: string(description='endpoint',example='cs.aliyuncs.com',default=''),
  noProxy?: string(description='proxy white list',example='http://localhost',default=''),
  maxIdleConns?: number(description='max idle conns',example='3',default=''),
  userAgent?: string(description='user agent',example='Alibabacloud/1',default=''),
  socks5Proxy?: string(description='socks5 proxy',default=''),
  socks5NetWork?: string(description='socks5 network',example='TCP',default=''),
  maxIdleTimeMillis?: number(description='长链接最大空闲时长',default='60 * 1000L'),
  keepAliveDurationMillis?: number(description='长链接最大连接时长',default='5000'),
  maxRequests?: number(description='最大连接数（长链接最大总数）',default='100'),
  maxRequestsPerHost?: number(description='每个目标主机的最大连接数（分主机域名的长链接最大总数',default='100'),
}

/**
 * Init client with Config
 * @param config config contains the necessary information to create a client
 */
init(config: Config) {
  if (Util.isUnset(config)) {
    throw {
      code = 'ParameterMissing',
      message = '\'config\' can not be unset'
    };
  }

  @accessKeyId = config.accessKeyId;
  @accessKeySecret = config.accessKeySecret;
  @securityToken = config.securityToken;
  @endpoint = config.endpoint;
  @protocol = config.protocol;
  @userAgent = config.userAgent;
  @readTimeout = Util.defaultNumber(config.readTimeout, 20000);
  @connectTimeout = Util.defaultNumber(config.connectTimeout, 20000);
  @httpProxy = config.httpProxy;
  @httpsProxy = config.httpsProxy;
  @noProxy = config.noProxy;
  @socks5Proxy = config.socks5Proxy;
  @socks5NetWork = config.socks5NetWork;
  @maxIdleConns = Util.defaultNumber(config.maxIdleConns, 60000);
  @maxIdleTimeMillis = Util.defaultNumber(config.maxIdleTimeMillis, 5);
  @keepAliveDurationMillis = Util.defaultNumber(config.keepAliveDurationMillis, 5000);
  @maxRequests = Util.defaultNumber(config.maxRequests, 100);
  @maxRequestsPerHost = Util.defaultNumber(config.maxRequestsPerHost, 100);
}

/**
 * Encapsulate the request and invoke the network
 * @param action api name
 * @param protocol http or https
 * @param method e.g. GET
 * @param pathname pathname of every api
 * @param request which contains request params
 * @param runtime which controls some details of call api, such as retry times
 * @return the response
 */
api doRequest(version: string, action: string, protocol: string, method: string, pathname: string, request: object, headers: map[string]string, runtime: Util.RuntimeOptions): object {
  __request.protocol = Util.defaultString(@protocol, protocol);
  __request.method = method;
  __request.pathname = pathname;
  __request.query = {
    method = action,
    version = version,
    sign_type = 'HmacSHA1',
    req_time = AntchainUtil.getTimestamp(),
    req_msg_id = AntchainUtil.getNonce(),
    access_key = @accessKeyId,
    base_sdk_version = 'TeaSDK-2.0',
    sdk_version = '1.2.2',
    _prod_code = 'ak_245215eadadd4dc9bba177d6ba6d593d',
    _prod_channel = 'saas'
  };

  if (!Util.empty(@securityToken)) {
    __request.query.security_token = @securityToken;
  }

  __request.headers = {
    host = Util.defaultString(@endpoint, 'openapi.antchain.antgroup.com'),
    user-agent = Util.getUserAgent(@userAgent),
    ...headers
  };

  var tmp = Util.anyifyMapValue(RPCUtil.query(request));
  __request.body = Util.toFormString(tmp);
  __request.headers.content-type = 'application/x-www-form-urlencoded';

  var signedParam = {
    ...__request.query,
    ...RPCUtil.query(request)
  };
  __request.query.sign = AntchainUtil.getSignature(signedParam, @accessKeySecret);
} returns {
  var raw = Util.readAsString(__response.body);
  var obj = Util.parseJSON(raw);
  var res = Util.assertAsMap(obj);
  var resp = Util.assertAsMap(res.response);

  if (AntchainUtil.hasError(raw, @accessKeySecret)) {
    throw {
      message = resp.result_msg,
      data = resp,
      code = resp.result_code
    };
  }
  return resp;
} runtime {
  timeouted = 'retry',
  readTimeout = Util.defaultNumber(runtime.readTimeout, @readTimeout),
  connectTimeout = Util.defaultNumber(runtime.connectTimeout, @connectTimeout),
  httpProxy = Util.defaultString(runtime.httpProxy, @httpProxy),
  httpsProxy = Util.defaultString(runtime.httpsProxy, @httpsProxy),
  noProxy = Util.defaultString(runtime.noProxy, @noProxy),
  maxIdleConns = Util.defaultNumber(runtime.maxIdleConns, @maxIdleConns),
  maxIdleTimeMillis = @maxIdleTimeMillis,
  keepAliveDuration = @keepAliveDurationMillis,
  maxRequests = @maxRequests,
  maxRequestsPerHost = @maxRequestsPerHost,
  retry = {
    retryable = runtime.autoretry,
    maxAttempts = Util.defaultNumber(runtime.maxAttempts, 3)
  },
  backoff = {
    policy = Util.defaultString(runtime.backoffPolicy, 'no'),
    period = Util.defaultNumber(runtime.backoffPeriod, 1)
  },
  ignoreSSL = runtime.ignoreSSL
}

// 字幕单句配置
model Sentence {
  // 字幕单句文本
  text: string(name='text', example='你好么'),
  // 字幕单句开始时间
  beginTime: long(name='begin_time', example='20'),
  // 字幕单句结束时间
  endTime: long(name='end_time', example='50'),
}

// 字幕样式
model CaptionsStyle {
  // 字体类型
  fontType: string(name='font_type', example='AlibabaPuHuiTi-Medium'),
  // 字体大小，像素单位
  fontSize: long(name='font_size', example='1'),
  // 字体颜色
  fontColor: string(name='font_color', example='FF1100'),
  // 描边颜色
  strokeColor?: string(name='stroke_color', example='FF1100'),
  // 描边宽度
  strokeWidth?: long(name='stroke_width', example='1'),
  // 字体背景颜色
  backgroundColor?: string(name='background_color', example='FFFFFF'),
}

// 字幕信息
model CaptionsInfo {
  // 字幕画面位置x坐标，距左侧
  x: long(name='x', example='10'),
  // 字幕画面位置y坐标，距上侧
  y: long(name='y', example='100'),
  // 字幕框宽度
  w: long(name='w', example='100'),
  // 字幕框高度
  h: long(name='h', example='20'),
  // 字幕id
  id?: string(name='id', example='123'),
  // 字幕句子时间节点信息
  sentences: [ Sentence ](name='sentences', example=''),
  // 是否自定义字幕样式，默认为false
  customCaptions?: boolean(name='custom_captions', example='true, false'),
  // 字幕自定义样式
  captionsStyle: CaptionsStyle(name='captions_style', example=''),
}

// 数字人形象
model AvatarProfile {
  // 190087
  avatarId: string(name='avatar_id', example='数字人形象id'),
  // 数字人形象名称
  name: string(name='name', example='灵韵-坐姿'),
  // CUSTOM---定制；
  // PRESET---预置
  type: string(name='type', example='CUSTOM'),
  // 位置信息等配置信息
  conf?: string(name='conf', example='{\"leftOffset\":0,\"topOffset\":866,\"width\":1080}'),
  // 数字人形象图片
  picUrl: string(name='pic_url', example='https://3123.png'),
  // 背景图片地址
  bgUrl?: string(name='bg_url', example='https://aaaa.png'),
  // 形象thumb图Url
  thumbUrl?: string(name='thumb_url', example='https://3424.png'),
}

// 数字人形象集合
model AvatarProfileResult {
  // 数字人形象数量
  total: long(name='total', example='34'),
  // 查询页面索引，不分页无
  pageIndex?: long(name='page_index', example='0'),
  // 数字人形象列表
  itemList: [ AvatarProfile ](name='item_list', example=''),
}

// 视频贴片信息
model Paster {
  //  贴片元素离画面位置x坐标
  x: long(name='x', example='30'),
  //  贴片元素离画面位置y坐标
  y: long(name='y', example='200'),
  //  贴片元素 url,支持 gif png jpg等图片格式
  srcUrl: string(name='src_url', example='https://aaa.gif'),
  // 贴片元素缩放比例
  scale: string(name='scale', example='1.0'),
}

// 脚本语音配置
model ScriptVoiceConfig {
  // 音色id，合成驱动选择text时必填
  voiceId?: string(name='voice_id', example='322290'),
  // 话术脚本内容，合成驱动选择text时必填
  text?: string(name='text', example='今天你好吗'),
  // 0.5～2，语速，合成驱动选择text时必填
  speed?: string(name='speed', example='0.8'),
  // 音频URL，合成驱动选择audio时必填
  audioUrl?: string(name='audio_url', example='https://xxxxx.23.wav'),
  // 音量，[0.1, 3]，默认为1，通常保留一位小数即可
  volume?: string(name='volume', example='1.0'),
  // 音调，[0.1, 3]，默认为1，通常保留一位小数即可
  pitch?: string(name='pitch', example='1.0'),
}

// 数字人音色
model AvatarVoice {
  // 音色名称
  name: string(name='name', example='小薇-客服'),
  // 音色代码
  code: string(name='code', example='voice_xiaowei'),
  // CLONE--克隆音色；
  // PRESET--预置；
  // CUSTOM--自定义，暂时不采用。
  type: string(name='type', example='CLONE'),
  // 音色形象url
  picUrl: string(name='pic_url', example='https://cdn.xsxsx.demo.png'),
  // 试听音频片段
  demoUrl: string(name='demo_url', example='https://cdn.xsxsxs.aaa.wav'),
}

// 数字人形象设置
model ProfileInfo {
  // 数字人离画面位置坐标,可以为负数或者出画
  //  数字人在视频生成中的位置
  x: long(name='x', example='0'),
  // 数字人离画面位置坐标,可以为负数或者出画
  //  数字人在视频生成中的位置
  y: long(name='y', example='0'),
  // 数字人视频大小,初始大小为训练素材整体大小非数字人在框选大小
  w: long(name='w', example='100'),
  // 数字人视频大小,初始大小为训练素材整体大小非数字人在框选大小
  h: long(name='h', example='100'),
  // 数字人视频大小缩放,实际大小为  scale*w   scale*h 
  scale?: string(name='scale', example='1.2'),
}

// 数字人动作序列
model AvatarAction {
  // 动作序列id
  actionId: long(name='action_id', example='1'),
  // 动作时长，单位毫秒
  duration: long(name='duration', example='1200'),
  // 动作预览链接
  videoPath: string(name='video_path', example='http://14.103.114.23/action_0.mp4'),
}

// 数字人训练结果
model TrainingResult {
  // 数字人id
  modelId?: string(name='model_id', example='1298'),
  // 音色id
  voiceId?: string(name='voice_id', example='269'),
}

// 数字人克隆任务结果
model CloneTask {
  // 数字人id
  modelId?: string(name='model_id', example='model_lhc8ml'),
  // 音色id
  voiceId?: string(name='voice_id', example='238'),
  // 初始化/训练队列中/声音克隆中/声音克隆完成/形象克隆中/形象克隆完成
  avatarStatus?: string(name='avatar_status', example='init/wait_training/tone_training/audio_clone_completed/avatar_cloning/avatar_clone_completed'),
  //  数字人训练失败会返回原因
  failReason?: string(name='fail_reason', example='失败原因'),
}

// 合成任务
model VideoTask {
  // RUNNING, COMPLETE,FAIL
  state: string(name='state', example='RUNNING'),
  // 完成状态，会返回视频地址
  videoUrl?: string(name='video_url', example='https://sdasdsa.webm'),
  // 视频时长
  videoDuration?: long(name='video_duration', example='123456'),
}

// 背景设置
// 
model Background {
  // 背景元素，支持 gif png jpg mp4等格式
  srcUrl: string(name='src_url', example='https://asdsadas.png'),
  // 背景缩放比例
  scale: string(name='scale', example='1.0'),
  // 背景图片x坐标位置，距左侧
  x: long(name='x', example='0'),
  // 背景图片y坐标位置，距上侧
  y: long(name='y', example='0'),
}

// 音频合成任务返回结果
model VoiceTask {
  // RUNNING, COMPLETE,FAIL
  state: string(name='state', example='RUNNING'),
  // 音频地址
  audioUrl: string(name='audio_url', example='https://sdasdsa.mp3'),
  // 音频时长
  audioTime: long(name='audio_time', example='123'),
  // 字幕信息
  captionsInfo?: CaptionsInfo(name='captions_info', example=''),
}

model ListUniversalsaasDigitalhumanVideoVoiceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
}

model ListUniversalsaasDigitalhumanVideoVoiceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 结果状态
  status?: boolean(name='status'),
  // 音色列表
  data?: [ AvatarVoice ](name='data'),
}

/**
 * Description: 数字人音色列表
 * Summary: 数字人音色列表
 */
async function listUniversalsaasDigitalhumanVideoVoice(request: ListUniversalsaasDigitalhumanVideoVoiceRequest): ListUniversalsaasDigitalhumanVideoVoiceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listUniversalsaasDigitalhumanVideoVoiceEx(request, headers, runtime);
}

/**
 * Description: 数字人音色列表
 * Summary: 数字人音色列表
 */
async function listUniversalsaasDigitalhumanVideoVoiceEx(request: ListUniversalsaasDigitalhumanVideoVoiceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListUniversalsaasDigitalhumanVideoVoiceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'universalsaas.digitalhuman.video.voice.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListUniversalsaasDigitalhumanVideoProfileRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 2D_PRESET---2d预置；
  // 3D_PRESET---3d预置；
  // 2D_CUSTOM--2d定制；
  // 3D_CUSTOM--3d定制；
  // 
  type: string(name='type'),
  // 分页查询页面索引，传值为空不分页
  // 索引从0开始。
  pageIndex?: long(name='page_index'),
  // 分页页面大小，默认10
  pageSize?: long(name='page_size'),
}

model ListUniversalsaasDigitalhumanVideoProfileResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 查询结果状态
  status?: boolean(name='status'),
  // 数字人形象集合
  data?: AvatarProfileResult(name='data'),
}

/**
 * Description: 数字人短视频形象列表
 * Summary: 数字人短视频形象列表
 */
async function listUniversalsaasDigitalhumanVideoProfile(request: ListUniversalsaasDigitalhumanVideoProfileRequest): ListUniversalsaasDigitalhumanVideoProfileResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listUniversalsaasDigitalhumanVideoProfileEx(request, headers, runtime);
}

/**
 * Description: 数字人短视频形象列表
 * Summary: 数字人短视频形象列表
 */
async function listUniversalsaasDigitalhumanVideoProfileEx(request: ListUniversalsaasDigitalhumanVideoProfileRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListUniversalsaasDigitalhumanVideoProfileResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'universalsaas.digitalhuman.video.profile.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateUniversalsaasDigitalhumanVideoTaskRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 画布大小
  height?: long(name='height'),
  // 数字人id
  avatarId: string(name='avatar_id'),
  // text/audio, 合成驱动--文本/音频
  driverType: string(name='driver_type'),
  // 形象设置
  profileInfo?: ProfileInfo(name='profile_info'),
  // 话术脚本语音配置
  scriptVoiceConfig: ScriptVoiceConfig(name='script_voice_config'),
  // 是否开启字幕
  openCaptions: boolean(name='open_captions'),
  // 字幕配置
  captionsInfo?: CaptionsInfo(name='captions_info'),
  // 是否替换字幕敏感词
  replaceSensitive?: boolean(name='replace_sensitive'),
  // 背景信息
  background?: Background(name='background'),
  // 贴片元素信息
  pasters?: [ Paster ](name='pasters'),
  // 数字人视频生成格式，默认不填
  format?: string(name='format'),
  // 画布大小
  width?: long(name='width'),
}

model CreateUniversalsaasDigitalhumanVideoTaskResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回结果状态
  status?: boolean(name='status'),
  // taskId
  data?: string(name='data'),
}

/**
 * Description: 视频合成任务生成
 * Summary: 视频合成任务生成
 */
async function createUniversalsaasDigitalhumanVideoTask(request: CreateUniversalsaasDigitalhumanVideoTaskRequest): CreateUniversalsaasDigitalhumanVideoTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createUniversalsaasDigitalhumanVideoTaskEx(request, headers, runtime);
}

/**
 * Description: 视频合成任务生成
 * Summary: 视频合成任务生成
 */
async function createUniversalsaasDigitalhumanVideoTaskEx(request: CreateUniversalsaasDigitalhumanVideoTaskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateUniversalsaasDigitalhumanVideoTaskResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'universalsaas.digitalhuman.video.task.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryUniversalsaasDigitalhumanVideoTaskRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 视频合成任务ID
  taskId: string(name='task_id'),
}

model QueryUniversalsaasDigitalhumanVideoTaskResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 结果状态
  status?: boolean(name='status'),
  // 合成结果
  data?: VideoTask(name='data'),
}

/**
 * Description: 视频合成任务查询
 * Summary: 视频合成任务查询
 */
async function queryUniversalsaasDigitalhumanVideoTask(request: QueryUniversalsaasDigitalhumanVideoTaskRequest): QueryUniversalsaasDigitalhumanVideoTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryUniversalsaasDigitalhumanVideoTaskEx(request, headers, runtime);
}

/**
 * Description: 视频合成任务查询
 * Summary: 视频合成任务查询
 */
async function queryUniversalsaasDigitalhumanVideoTaskEx(request: QueryUniversalsaasDigitalhumanVideoTaskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryUniversalsaasDigitalhumanVideoTaskResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'universalsaas.digitalhuman.video.task.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateUniversalsaasDigitalhumanVoiceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 需要转语音的文字
  text: string(name='text'),
  // 语速，[0.5,2.0]，默认1.0
  speed?: string(name='speed'),
  // 音调，[0.1,3.0]，默认1.0
  pitch?: string(name='pitch'),
  // 音量，[0.1,3.0]，默认1.0
  volume?: string(name='volume'),
  // 音色id
  voice: string(name='voice'),
}

model CreateUniversalsaasDigitalhumanVoiceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 音频url
  data?: string(name='data'),
  // 结果状态
  status?: boolean(name='status'),
}

/**
 * Description: 数字人短文本试听接口
 * Summary: 数字人短文本试听接口
 */
async function createUniversalsaasDigitalhumanVoice(request: CreateUniversalsaasDigitalhumanVoiceRequest): CreateUniversalsaasDigitalhumanVoiceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createUniversalsaasDigitalhumanVoiceEx(request, headers, runtime);
}

/**
 * Description: 数字人短文本试听接口
 * Summary: 数字人短文本试听接口
 */
async function createUniversalsaasDigitalhumanVoiceEx(request: CreateUniversalsaasDigitalhumanVoiceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateUniversalsaasDigitalhumanVoiceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'universalsaas.digitalhuman.voice.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CloneUniversalsaasDigitalhumanAvatarRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 数字人训练视频url
  fileUrl: string(name='file_url'),
  // 数字人名称
  name: string(name='name'),
  // 是否克隆声音，默认为false
  cloneVoice?: boolean(name='clone_voice'),
}

model CloneUniversalsaasDigitalhumanAvatarResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 结果状态
  status?: boolean(name='status'),
  // 训练结果，包含数字人id与音色id
  result?: TrainingResult(name='result'),
}

/**
 * Description: 极速训练数字人分身，返回modelId
 * Summary: 训练数字人分身
 */
async function cloneUniversalsaasDigitalhumanAvatar(request: CloneUniversalsaasDigitalhumanAvatarRequest): CloneUniversalsaasDigitalhumanAvatarResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return cloneUniversalsaasDigitalhumanAvatarEx(request, headers, runtime);
}

/**
 * Description: 极速训练数字人分身，返回modelId
 * Summary: 训练数字人分身
 */
async function cloneUniversalsaasDigitalhumanAvatarEx(request: CloneUniversalsaasDigitalhumanAvatarRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CloneUniversalsaasDigitalhumanAvatarResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'universalsaas.digitalhuman.avatar.clone', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CloneUniversalsaasDigitalhumanAvatarVoiceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 训练音频url
  voiceUrl: string(name='voice_url'),
  // 音频名称
  name: string(name='name'),
}

model CloneUniversalsaasDigitalhumanAvatarVoiceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 结果状态
  // 
  status?: boolean(name='status'),
  // 音色id
  voiceId?: string(name='voice_id'),
}

/**
 * Description: 音色克隆
 * Summary: 音色克隆
 */
async function cloneUniversalsaasDigitalhumanAvatarVoice(request: CloneUniversalsaasDigitalhumanAvatarVoiceRequest): CloneUniversalsaasDigitalhumanAvatarVoiceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return cloneUniversalsaasDigitalhumanAvatarVoiceEx(request, headers, runtime);
}

/**
 * Description: 音色克隆
 * Summary: 音色克隆
 */
async function cloneUniversalsaasDigitalhumanAvatarVoiceEx(request: CloneUniversalsaasDigitalhumanAvatarVoiceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CloneUniversalsaasDigitalhumanAvatarVoiceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'universalsaas.digitalhuman.avatar.voice.clone', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryUniversalsaasDigitalhumanCloneTaskRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 数字人id
  modelId: string(name='model_id'),
}

model QueryUniversalsaasDigitalhumanCloneTaskResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 结果状态
  status?: boolean(name='status'),
  // 数字人克隆任务结果
  data?: CloneTask(name='data'),
}

/**
 * Description: 训练数字人分身任务查询
 * Summary: 训练数字人分身任务查询
 */
async function queryUniversalsaasDigitalhumanCloneTask(request: QueryUniversalsaasDigitalhumanCloneTaskRequest): QueryUniversalsaasDigitalhumanCloneTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryUniversalsaasDigitalhumanCloneTaskEx(request, headers, runtime);
}

/**
 * Description: 训练数字人分身任务查询
 * Summary: 训练数字人分身任务查询
 */
async function queryUniversalsaasDigitalhumanCloneTaskEx(request: QueryUniversalsaasDigitalhumanCloneTaskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryUniversalsaasDigitalhumanCloneTaskResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'universalsaas.digitalhuman.clone.task.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateUniversalsaasDigitalhumanVoiceTaskRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 话术脚本
  text: string(name='text'),
  // 语速，支持 0.5-2 倍速
  speed: string(name='speed'),
  // 音调，[0.1, 3]，默认为1，通常保留一位小数即可
  pitch?: string(name='pitch'),
  // [0.1, 3]，默认为1，通常保留一位小数即可
  volume?: string(name='volume'),
  // 音色id
  voiceId: string(name='voice_id'),
  // 是否返回字幕信息，默认不返回
  openCaption?: boolean(name='open_caption'),
}

model CreateUniversalsaasDigitalhumanVoiceTaskResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 结果状态
  status?: boolean(name='status'),
  // taskId
  data?: string(name='data'),
}

/**
 * Description: 数字人音频生成接口
 * Summary: 数字人音频生成接口
 */
async function createUniversalsaasDigitalhumanVoiceTask(request: CreateUniversalsaasDigitalhumanVoiceTaskRequest): CreateUniversalsaasDigitalhumanVoiceTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createUniversalsaasDigitalhumanVoiceTaskEx(request, headers, runtime);
}

/**
 * Description: 数字人音频生成接口
 * Summary: 数字人音频生成接口
 */
async function createUniversalsaasDigitalhumanVoiceTaskEx(request: CreateUniversalsaasDigitalhumanVoiceTaskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateUniversalsaasDigitalhumanVoiceTaskResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'universalsaas.digitalhuman.voice.task.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryUniversalsaasDigitalhumanVoiceTaskRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 音频合成任务ID
  taskId: string(name='task_id'),
}

model QueryUniversalsaasDigitalhumanVoiceTaskResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 结果状态
  status?: boolean(name='status'),
  // 音频生成返回结果
  data?: VoiceTask(name='data'),
}

/**
 * Description: 音频生成任务查询接口
 * Summary: 音频生成任务查询接口
 */
async function queryUniversalsaasDigitalhumanVoiceTask(request: QueryUniversalsaasDigitalhumanVoiceTaskRequest): QueryUniversalsaasDigitalhumanVoiceTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryUniversalsaasDigitalhumanVoiceTaskEx(request, headers, runtime);
}

/**
 * Description: 音频生成任务查询接口
 * Summary: 音频生成任务查询接口
 */
async function queryUniversalsaasDigitalhumanVoiceTaskEx(request: QueryUniversalsaasDigitalhumanVoiceTaskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryUniversalsaasDigitalhumanVoiceTaskResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'universalsaas.digitalhuman.voice.task.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryUniversalsaasDigitalhumanAvatarActionRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 数字人id
  avatarId: long(name='avatar_id'),
}

model QueryUniversalsaasDigitalhumanAvatarActionResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 动作序列列表
  data?: [ AvatarAction ](name='data'),
  // 状态结果
  status?: boolean(name='status'),
}

/**
 * Description: 获取数字人动作序列接口
 * Summary: 获取数字人动作序列接口
 */
async function queryUniversalsaasDigitalhumanAvatarAction(request: QueryUniversalsaasDigitalhumanAvatarActionRequest): QueryUniversalsaasDigitalhumanAvatarActionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryUniversalsaasDigitalhumanAvatarActionEx(request, headers, runtime);
}

/**
 * Description: 获取数字人动作序列接口
 * Summary: 获取数字人动作序列接口
 */
async function queryUniversalsaasDigitalhumanAvatarActionEx(request: QueryUniversalsaasDigitalhumanAvatarActionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryUniversalsaasDigitalhumanAvatarActionResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'universalsaas.digitalhuman.avatar.action.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SubmitUniversalsaasDigitalhumanOrderRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 渠道类型
  source: string(name='source'),
  // 操作类型
  actionType: string(name='action_type'),
  // 业务类型
  bizType: string(name='biz_type'),
  // 业务id
  bizId: string(name='biz_id'),
  // 业务自定义信息
  bizData: string(name='biz_data'),
}

model SubmitUniversalsaasDigitalhumanOrderResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 订单记录code
  data?: string(name='data'),
  // 结果状态
  status?: boolean(name='status'),
}

/**
 * Description: 数字人订单上报接口
 * Summary: 数字人订单上报接口
 */
async function submitUniversalsaasDigitalhumanOrder(request: SubmitUniversalsaasDigitalhumanOrderRequest): SubmitUniversalsaasDigitalhumanOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return submitUniversalsaasDigitalhumanOrderEx(request, headers, runtime);
}

/**
 * Description: 数字人订单上报接口
 * Summary: 数字人订单上报接口
 */
async function submitUniversalsaasDigitalhumanOrderEx(request: SubmitUniversalsaasDigitalhumanOrderRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SubmitUniversalsaasDigitalhumanOrderResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'universalsaas.digitalhuman.order.submit', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

