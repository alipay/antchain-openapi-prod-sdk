import AntchainUtil;
import Util;
import RPCUtil;

type @endpoint = string
type @regionId = string
type @accessKeyId = string
type @accessKeySecret = string
type @protocol = string
type @userAgent = string
type @readTimeout = number
type @connectTimeout = number
type @httpProxy = string
type @httpsProxy = string
type @socks5Proxy = string
type @socks5NetWork = string
type @noProxy = string
type @maxIdleConns = number
type @securityToken = string
type @maxIdleTimeMillis = number
type @keepAliveDurationMillis = number
type @maxRequests = number
type @maxRequestsPerHost = number

/**
 * Model for initing client
 */
model Config {
  accessKeyId?: string(description='accesskey id',default=''),
  accessKeySecret?: string(description='accesskey secret',default=''),
  securityToken?: string(description='security token',default=''),
  protocol?: string(description='http protocol',example='http',default='http'),
  readTimeout?: number(description='read timeout',example='10',default=''),
  connectTimeout?: number(description='connect timeout',example='10',default=''),
  httpProxy?: string(description='http proxy',example='http://localhost',default=''),
  httpsProxy?: string(description='https proxy',example='https://localhost',default=''),
  endpoint?: string(description='endpoint',example='cs.aliyuncs.com',default=''),
  noProxy?: string(description='proxy white list',example='http://localhost',default=''),
  maxIdleConns?: number(description='max idle conns',example='3',default=''),
  userAgent?: string(description='user agent',example='Alibabacloud/1',default=''),
  socks5Proxy?: string(description='socks5 proxy',default=''),
  socks5NetWork?: string(description='socks5 network',example='TCP',default=''),
  maxIdleTimeMillis?: number(description='长链接最大空闲时长',default='60 * 1000L'),
  keepAliveDurationMillis?: number(description='长链接最大连接时长',default='5000'),
  maxRequests?: number(description='最大连接数（长链接最大总数）',default='100'),
  maxRequestsPerHost?: number(description='每个目标主机的最大连接数（分主机域名的长链接最大总数',default='100'),
}

/**
 * Init client with Config
 * @param config config contains the necessary information to create a client
 */
init(config: Config) {
  if (Util.isUnset(config)) {
    throw {
      code = 'ParameterMissing',
      message = '\'config\' can not be unset'
    };
  }

  @accessKeyId = config.accessKeyId;
  @accessKeySecret = config.accessKeySecret;
  @securityToken = config.securityToken;
  @endpoint = config.endpoint;
  @protocol = config.protocol;
  @userAgent = config.userAgent;
  @readTimeout = Util.defaultNumber(config.readTimeout, 20000);
  @connectTimeout = Util.defaultNumber(config.connectTimeout, 20000);
  @httpProxy = config.httpProxy;
  @httpsProxy = config.httpsProxy;
  @noProxy = config.noProxy;
  @socks5Proxy = config.socks5Proxy;
  @socks5NetWork = config.socks5NetWork;
  @maxIdleConns = Util.defaultNumber(config.maxIdleConns, 60000);
  @maxIdleTimeMillis = Util.defaultNumber(config.maxIdleTimeMillis, 5);
  @keepAliveDurationMillis = Util.defaultNumber(config.keepAliveDurationMillis, 5000);
  @maxRequests = Util.defaultNumber(config.maxRequests, 100);
  @maxRequestsPerHost = Util.defaultNumber(config.maxRequestsPerHost, 100);
}

/**
 * Encapsulate the request and invoke the network
 * @param action api name
 * @param protocol http or https
 * @param method e.g. GET
 * @param pathname pathname of every api
 * @param request which contains request params
 * @param runtime which controls some details of call api, such as retry times
 * @return the response
 */
api doRequest(version: string, action: string, protocol: string, method: string, pathname: string, request: object, headers: map[string]string, runtime: Util.RuntimeOptions): object {
  __request.protocol = Util.defaultString(@protocol, protocol);
  __request.method = method;
  __request.pathname = pathname;
  __request.query = {
    method = action,
    version = version,
    sign_type = 'HmacSHA1',
    req_time = AntchainUtil.getTimestamp(),
    req_msg_id = AntchainUtil.getNonce(),
    access_key = @accessKeyId,
    base_sdk_version = 'TeaSDK-2.0',
    sdk_version = '1.17.65',
    _prod_code = 'BCCR',
    _prod_channel = 'undefined'
  };

  if (!Util.empty(@securityToken)) {
    __request.query.security_token = @securityToken;
  }

  __request.headers = {
    host = Util.defaultString(@endpoint, 'openapi.antchain.antgroup.com'),
    user-agent = Util.getUserAgent(@userAgent),
    ...headers
  };

  var tmp = Util.anyifyMapValue(RPCUtil.query(request));
  __request.body = Util.toFormString(tmp);
  __request.headers.content-type = 'application/x-www-form-urlencoded';

  var signedParam = {
    ...__request.query,
    ...RPCUtil.query(request)
  };
  __request.query.sign = AntchainUtil.getSignature(signedParam, @accessKeySecret);
} returns {
  var raw = Util.readAsString(__response.body);
  var obj = Util.parseJSON(raw);
  var res = Util.assertAsMap(obj);
  var resp = Util.assertAsMap(res.response);

  if (AntchainUtil.hasError(raw, @accessKeySecret)) {
    throw {
      message = resp.result_msg,
      data = resp,
      code = resp.result_code
    };
  }
  return resp;
} runtime {
  timeouted = 'retry',
  readTimeout = Util.defaultNumber(runtime.readTimeout, @readTimeout),
  connectTimeout = Util.defaultNumber(runtime.connectTimeout, @connectTimeout),
  httpProxy = Util.defaultString(runtime.httpProxy, @httpProxy),
  httpsProxy = Util.defaultString(runtime.httpsProxy, @httpsProxy),
  noProxy = Util.defaultString(runtime.noProxy, @noProxy),
  maxIdleConns = Util.defaultNumber(runtime.maxIdleConns, @maxIdleConns),
  maxIdleTimeMillis = @maxIdleTimeMillis,
  keepAliveDuration = @keepAliveDurationMillis,
  maxRequests = @maxRequests,
  maxRequestsPerHost = @maxRequestsPerHost,
  retry = {
    retryable = runtime.autoretry,
    maxAttempts = Util.defaultNumber(runtime.maxAttempts, 3)
  },
  backoff = {
    policy = Util.defaultString(runtime.backoffPolicy, 'no'),
    period = Util.defaultNumber(runtime.backoffPeriod, 1)
  },
  ignoreSSL = runtime.ignoreSSL
}

// 相似位置信息
model ResemblePositionData {
  // 起始位置
  startPosition: long(name='start_position', example='0'),
  // 结束位置
  endPosition: long(name='end_position', example='1'),
}

// 出证用户（申请人，经办人）
model NotaryUser {
  // 用户类型
  userType: string(name='user_type', example='PERSON 或者 ENTERPRISE'),
  // 用户名称
  userName: string(name='user_name', example='个人用户姓名、企业名称'),
  // 用户账号
  userAccount?: string(name='user_account', example='该用户为业务方注册用户时传入'),
  // 证件类型
  certType: string(name='cert_type', example='个人证件类型： identity_card（身份证） 企业证件类型： unified _ social _ credit _ code（统一 社会信用代码） enterprise_registered_number（企 业工商注册号）'),
  // 证件号
  certNo: string(name='cert_no', example='证件类型对应的证件号码'),
  // 联系电话
  phone?: string(name='phone', example='个人手机号或企业联系人手机号码'),
  // 法定代表人姓名,用户类型为机构时必填
  legalPersonName?: string(name='legal_person_name', example='用户类型为机构时必填'),
  // 法定代表人证件号码,用户类型为机构时必填
  legalPersonCertNo?: string(name='legal_person_cert_no', example='法定代表人证件号码'),
  // 法定代表人证件类型
  legalPersonCertType?: string(name='legal_person_cert_type', example='证件类型： identity_card（身份证，默认） foreign_permanent_resident_id_ca rd(外国人永久居留身份证)'),
  // 身份证正面
  certFrontFile?: string(name='cert_front_file', example='类型为个人时，传入个人的证件照片；类型为企业时，传入法人的证件正面'),
  // 身份证反面
  certBackFile?: string(name='cert_back_file', example='类型为个人时，传入个人的证件照片；类型为企业时，传入法人的证件反面'),
  // 企业营业执照
  enterpriseCertFile?: string(name='enterprise_cert_file', example='用户类型为机构时必填'),
}

// 事由
model Reason {
  // 事由ID
  reasonId: string(name='reason_id', example='123'),
  // 事由名称
  reasonName: string(name='reason_name', example='商标权/名誉权/著作权'),
  // 附件文字说明
  comment: string(name='comment', example='这是一个说明'),
  // 排序
  sort: long(name='sort', example='1'),
  // 是否必须上传附件
  isNeedAttachment: boolean(name='is_need_attachment', example='true, false'),
}

// 相似的明细结果
model ResembleDetail {
  // 相似分数
  score: string(name='score', example='0.99'),
  // 长度
  length?: string(name='length', example='02:59:59'),
  // 明细类型，例如VIDEO_SEGMENT表示视频区间相似
  type: string(name='type', example='VIDEO_SEGMENT'),
  // 查询源文件的位置信息
  queryPositionData: ResemblePositionData(name='query_position_data', example=''),
  // 相似文件的位置信息
  matchPositionData: ResemblePositionData(name='match_position_data', example=''),
}

// 收件人信息
model DeliveryInfo {
  // 收件人姓名
  receiveName: string(name='receive_name', example='这是一个姓名'),
  // 联系电话
  contact: string(name='contact', example='13000000000'),
  // 省（需要接收纸质文件时必填）
  province?: string(name='province', example='浙江省'),
  // 市（需要接收纸质文件时必填）
  city?: string(name='city', example='杭州市'),
  // 区（需要接收纸质文件时必填）
  area?: string(name='area', example='西湖区'),
  // 详细地址（需要接收纸质文件时必填）
  address?: string(name='address', example='黄龙时代广场'),
  // 电子邮箱（需要接收电子文件时必填）
  email?: string(name='email', example='xxx@xx.com'),
}

// 作品相似识别结果
model ResembleRiskData {
  // 重复作品ID
  workId: string(name='work_id', example='重复作品ID'),
  // 相似作品的名称
  workName?: string(name='work_name', example='相似作品的名称'),
  // 相似作品的类型
  workType?: string(name='work_type', example='VIDEO'),
  // 相似值
  score?: string(name='score', example='相似值'),
  // 相似作品下载凭证
  workFileId?: string(name='work_file_id', example='相似作品下载凭证'),
  // 相似明细
  resembleDetails?: [ ResembleDetail ](name='resemble_details', example=''),
}

// 安全识别结果
model ContentRiskData {
  // 风险名称
  riskName: string(name='risk_name', example='风险名称'),
  // 风险是否通过审查
  riskResult: boolean(name='risk_result', example='true, false'),
}

// 作品标签识别结果
model LabelRiskData {
  // 识别出的标签名称
  labelName: string(name='label_name', example='识别出的标签名称'),
  // 识别出的标签是否与用户选择的标签匹配
  isMatch: boolean(name='is_match', example='true, false'),
  // 识别出的标签匹配度
  matchValue: string(name='match_value', example='识别出的标签匹配度'),
}

// 费用分项
model FeeDetail {
  // 费用描述
  feeDesc: string(name='fee_desc', example='网页取证起步费用'),
  // 费用
  amount: string(name='amount', example='xxxx'),
}

// 证据文件信息
model EvidInfo {
  // 取证ID
  evidenceId: string(name='evidence_id', example='RS123'),
  // 取证人
  witness: NotaryUser(name='witness', example=''),
}

// 监测提供商能力
model MonitorProviderCapability {
  // 供应商id
  providerId: string(name='provider_id', example='GOODEYE'),
  // 供应商名称
  providerName: string(name='provider_name', example='千里眼'),
  // 供应商描述
  providerDescription: string(name='provider_description', example='描述'),
  // 是否推荐供应商
  isProvided: boolean(name='is_provided', example='true, false'),
}

// 网页取证具体信息
model ScreenshotInfo {
  // 全链路取证日志文件下载链接
  processLogFile?: string(name='process_log_file', example='https://xxxx'),
  // 全链路取证日志文件哈希
  processLogFileHash?: string(name='process_log_file_hash', example='xxxx'),
  // 自清洁文件下载链接
  checkLogFile?: string(name='check_log_file', example='https://xxxx'),
  // 自清洁文件哈希
  checkLogFileHash?: string(name='check_log_file_hash', example='xxxx'),
  // 网页截图文件下载链接
  screenshotFile: string(name='screenshot_file', example='https://xxxx'),
  // 网页截图文件哈希
  screenshotFileHash?: string(name='screenshot_file_hash', example='xxxx'),
  // 日志打包文件hash
  logZipFileHash?: string(name='log_zip_file_hash', example='0003fa8261d1cd6cb419264d516f9b586687e39a0dc31b2c74ff4948e8b951e61afd'),
  // 日志文件上链hash
  logZipTxHash?: string(name='log_zip_tx_hash', example='0003fa8261d1cd6cb419264d516f9b586687e39a0dc31b2c74ff4948e8b951e61afd'),
}

// 取证文件信息
model ScreenInfo {
  // 全链路取证日志文件下载链接
  processLogFile?: string(name='process_log_file', example='https://xxxx'),
  // 全链路取证日志文件哈希
  processLogFileHash?: string(name='process_log_file_hash', example='xxxx'),
  // 自清洁文件下载地址
  checkLogFile?: string(name='check_log_file', example='https://xxxx'),
  // 自清洁文件哈希
  checkLogFileHash?: string(name='check_log_file_hash', example='xxxx'),
  // 网页截图文件下载链接
  webScreenshotFile?: string(name='web_screenshot_file', example='https://xxxx'),
  // 网页截图文件哈希
  webScreenshotFileHash?: string(name='web_screenshot_file_hash', example='xxxx'),
  // 网页源码文件下载链接
  webSourceFile?: string(name='web_source_file', example='https://xxxx'),
  // 网页源码文件哈希
  webSourceFileHash?: string(name='web_source_file_hash', example='xxxx'),
  // 视频源文件下载链接
  videoFile?: string(name='video_file', example='http://xx'),
  // 视频源文件哈希
  videoFileHash?: string(name='video_file_hash', example='xxxx'),
  // 手机自清洁文件下载链接
  extendDeviceCheckFile?: string(name='extend_device_check_file', example='https://xxxx'),
  // 手机自清洁文件哈希
  extendDeviceCheckFileHash?: string(name='extend_device_check_file_hash', example='xxxx'),
  // 手机操作日志下载链接
  extendDeviceProcessFile?: string(name='extend_device_process_file', example='https://xxxx'),
  // 手机操作日志哈希
  extendDeviceProcessFileHash?: string(name='extend_device_process_file_hash', example='xxxx'),
  // 日志打包文件hash
  logZipFileHash?: string(name='log_zip_file_hash', example='0003fa8261d1cd6cb419264d516f9b586687e39a0dc31b2c74ff4948e8b951e61afd'),
  // 日志打包文件上链hash
  logZipTxHash?: string(name='log_zip_tx_hash', example='0003fa8261d1cd6cb419264d516f9b586687e39a0dc31b2c74ff4948e8b951e61afd'),
}

// 出证开票信息
model NotaryInvoiceInfo {
  // 开票类型
  billingType: string(name='billing_type', example='PAPER纸质，ELECTRIC电子'),
  // 发票类型
  invoiceType: string(name='invoice_type', example='NORMAL增值税普通发票、SPECIAL增值税专用发票 个人只能开具普通发票'),
  // 主体类型
  subjectType: string(name='subject_type', example='个人PERSON，机构ENTERPRISE'),
  // 发票抬头
  invoiceName: string(name='invoice_name', example='姓名/单位名称'),
  // 纳税人识别号
  ratepayerCode?: string(name='ratepayer_code', example='发票抬头为机构时必填'),
  // 开户行
  bankType?: string(name='bank_type', example='发票抬头为机构时必填'),
  // 开户行账号
  bankAccount?: string(name='bank_account', example='发票抬头为机构时必填'),
  // 单位地址
  unitAddress?: string(name='unit_address', example='发票抬头为机构时必填'),
  // 单位电话
  unitPhone?: string(name='unit_phone', example='发票抬头为机构时必填'),
  // 发票收件信息
  delivery?: DeliveryInfo(name='delivery', example=''),
}

// 申办事由
model BidReason {
  // 事由类别ID
  categoryId: string(name='category_id', example='123'),
  // 分类名称
  categoryName: string(name='category_name', example='维权/合同纠纷'),
  // 描述
  desc: string(name='desc', example='这是一个描述'),
  // 文件上传描述
  fileUploadDesc: string(name='file_upload_desc', example='这是一个文件上传描述'),
  // 排序
  rank: long(name='rank', example='1'),
  // 是否必须上传证明文件
  isNeedTestifyFile: boolean(name='is_need_testify_file', example='true, false'),
  // reasonArray
  reasonArray: [ Reason ](name='reason_array', example=''),
}

// 公证书送达信息
model ReceiveInfo {
  // 纸质公证书份数
  copies?: long(name='copies', example='2'),
  // 公证书类型
  orderType: string(name='order_type', example='PAPER:纸质公证书 E-PAPER:电子公证书 BOTH:纸质+电子公证书'),
  // 收件人信息
  deliveryInfo: DeliveryInfo(name='delivery_info', example=''),
}

// 日统计数据模型
model DayStatisticsInfo {
  // 日期时间戳
  date: long(name='date', example='1661788800000'),
  // 日观看次数
  dayViews: string(name='day_views', example='100'),
  // 日观看时长
  dayViewDuration: string(name='day_view_duration', example='10'),
  // 日平均观看时长
  dayAverageViewDuration: string(name='day_average_view_duration', example='100'),
  // 日预计收入
  revenue: string(name='revenue', example='100'),
}

// 系列图错误原因
model SeriesDiagramErrorReason {
  // 系列图单个图片所属页码
  imagePdfPageIndex: long(name='image_pdf_page_index', example='1'),
  // 错误原因英文
  error: string(name='error', example='错误原因英文'),
  // 错误原因中文
  errorCn: string(name='error_cn', example='错误原因中文'),
}

// 权利声明核验信息
model VerifyStatementData {
  // 权利声明书存证交易HASH
  statementTxHash?: string(name='statement_tx_hash', example='0003fa8261d1cd6cb419264d516f9b586687e39a0dc31b2c74ff4948e8b951e61afd'),
  // 权利声明书文件ID（和statementFileId 二选一,如果都传使用statementFileHash）
  statementFileId?: string(name='statement_file_id', example='111111'),
  // 权利声明书文件HASH（和statementFileId 二选一,如果都传使用statementFileHash）
  statementFileHash?: string(name='statement_file_hash', example='c687c371eb1126d06ef688c97e4a85a38b92c232483600f45597daa233b16948'),
}

// 商品sku信息
model GoodSkuInfo {
  // 授权规格序号
  skuNum: string(name='sku_num', example='001'),
  // 授权规格价格(单位：分)
  price: long(name='price', example='10'),
}

// 公证处信息
model NotaryPublicOffice {
  // 公证处code
  code: string(name='code', example='LUJIANG'),
  // 公证处名称
  name: string(name='name', example='鹭江公证处'),
  // 公证处所在省（直辖市）
  province: string(name='province', example='福建'),
  // 公证处所在市
  city: string(name='city', example='厦门'),
  // 公证处完整名称
  orgName: string(name='org_name', example='厦门市鹭江公证处'),
  // 公证处隶属
  belong: string(name='belong', example='EZCUN'),
}

// 本次申请中每一类证据的数量明细
model NotaryFeeEvidTypeData {
  // 证据类型描述
  evidTypeDesc: string(name='evid_type_desc', example='网页取证'),
  // 证据分类及数量详情
  evidTypeDetail: string(name='evid_type_detail', example='10条，11张截图'),
}

// dci作品发表信息
model DciPublicationInfo {
  // 作品发表状态
  publicationStatus: string(name='publication_status', example='PUBLISHED'),
  // 首次发表日期
  firstPublicationDate: string(name='first_publication_date', example='yyyy-MM-dd'),
  // 首次发表地址
  firstPublicationPlace?: string(name='first_publication_place', example='杭州'),
  // 首次发表地点地区编码
  firstPublicationCode: string(name='first_publication_code', example='110101'),
}

// dci作品创作信息
model DciCreationInfo {
  // 作品创作性质
  creationNature: string(name='creation_nature', example='ORIGINAL'),
  // 创作完成日期
  creationCompletionDate: string(name='creation_completion_date', example='yyyy-MM-dd'),
  // 创作完成地点
  creationCompletionPlace?: string(name='creation_completion_place', example='杭州'),
  // 作品创作地点地区编码
  creationCompletionCode: string(name='creation_completion_code', example='110101'),
}

// 本次需支付费用的分项明细
model NotaryFeeItem {
  // 费用分项描述
  feeItemDesc: string(name='fee_item_desc', example='起步费用'),
  // 费用分项金额(分)
  feeItemAmountRmbFen: long(name='fee_item_amount_rmb_fen', example='200000'),
  // 费用分项详情列表
  feeDetailList: [ FeeDetail ](name='fee_detail_list', example=''),
}

// 权利信息
model RightsInfo {
  // 作品创作完成时间
  completedTime: long(name='completed_time', example='1629364618790'),
  // 作品创作完成地点（最长128个字符）
  completedPlace: string(maxLength=128, name='completed_place', example='杭州'),
  // 是否发表
  isPublish: boolean(name='is_publish', example='true, false'),
  // 发表时间（如果isPublish为true则必填）
  publishTime?: long(name='publish_time', example='1629969432519'),
  // 发表地点（如果isPublish为true则必填，最长128个字符）
  publishPlace?: string(maxLength=128, name='publish_place', example='杭州'),
  // 发表网址（如果isPublish为true则必填，最长1024个字符）
  publishWeb?: string(maxLength=1024, name='publish_web', example='https://xxxx'),
  // 是否是作者
  isAuthor: boolean(name='is_author', example='true, false'),
  // 作者姓名（如果isAuthor为true则必填，最长32个字符）
  authorCertName?: string(maxLength=32, name='author_cert_name', example='张三'),
  // 作者身份证号（如果isAuthor为true则必填）
  authorCertNo?: string(maxLength=30, name='author_cert_no', example='111111'),
}

// 核验用户信息
model VerifyUserData {
  // 证件名称
  certName?: string(name='cert_name', example='李四'),
  // 证件号码
  certNo?: string(name='cert_no', example='111111'),
  // 证件类型
  certType?: string(name='cert_type', example='IDENTITY_CARD'),
  // 登记人信息存证交易HASH
  registerPersonTxHash?: string(name='register_person_tx_hash', example='0003fa8261d1cd6cb419264d516f9b586687e39a0dc31b2c74ff4948e8b951e61afd'),
}

// 公证出证拒绝办理信息/终止信息
model RefuseInfo {
  // 拒绝理由/终止备注
  reason: string(name='reason', example='拒绝理由/终止备注'),
  // 不予办理决定书路径/终止决定书路径
  notificationPath: string(name='notification_path', example='不予办理决定书路径/终止决定书路径'),
}

// 取证网址信息
model EvidenceUrlInfo {
  // 取证网址
  url: string(name='url', example='www.baidu.com'),
  // 音视频取证时间
  autoSurfingMinute?: long(name='auto_surfing_minute', example='10'),
}

// 出海视频统计数据
model OverseaContentStatistics {
  // 发布视频id
  contentId: string(name='content_id', example='84343147225530369'),
  // 总观看次数
  totalViews: string(name='total_views', example='100'),
  // 总观看时长
  totalViewDuration: string(name='total_view_duration', example='10'),
  // 总平均观看时长
  totalAverageViewDuration: string(name='total_average_view_duration', example='20'),
  // 总预计收入
  totalRevenue: string(name='total_revenue', example='40'),
  // 每日详细统计列表
  dayStatisticsList: [ DayStatisticsInfo ](name='day_statistics_list', example=''),
}

// 定向监测结果
model DirectMonitorResult {
  // 监测结果id
  monitorResultId: string(name='monitor_result_id', example='xyz'),
  // 相似的资源链接
  similarResourceUrl: string(name='similar_resource_url', example='xyz'),
  // 相似资源所在的网址链接
  similarWebUrl: string(name='similar_web_url', example='xyz'),
  // 资源标题
  title?: string(name='title', example='xyz'),
  // 资源作者
  author?: string(name='author', example='xyz'),
  // 资源上传时间，格式yyyy-MM-dd HH:mm:ss
  uploadTime?: string(name='upload_time', example='2022-01-01 10:10:10'),
}

// 内容安全信息
model SecurityData {
  // 内容安全检查结果
  result: string(name='result', example='safe,risky'),
  // 有风险的内容
  riskData?: [ string ](name='risk_data', example=''),
}

// 发票信息
model InvoiceInfo {
  // 发票类型 InvoiceTypeEnum目前只支持普票
  // (NORMAL,ELC,普票)
  // (SPECIAL,VAT,专票)
  invoiceType: string(name='invoice_type', example='NORMAL'),
  // 发票抬头（著作权人之一）
  invoiceHeader: string(name='invoice_header', example='000'),
  // 纳税人识别号（机构必填）
  taxpayerNumber?: string(name='taxpayer_number', example='纳税人识别号'),
  // 注册地址（专票必填）
  registeredAddress?: string(name='registered_address', example='注册地址'),
  // 注册电话（专票必填）
  registeredTel?: string(name='registered_tel', example='注册电话'),
  // 开户电话（专票必填）
  openAccountTel?: string(name='open_account_tel', example='开户电话'),
  // 开户银行（专票必填）
  openAccountBank?: string(name='open_account_bank', example='开户银行'),
  // 银行账号（专票必填）
  bankAccount?: string(name='bank_account', example='银行账号'),
}

// 公证出证送达信息
model NotaryReceiveInfo {
  // 公证书类型
  orderType: string(name='order_type', example='PAPER:纸质公证书 E-PAPER:电子公证书 BOTH:纸质+电子公证书'),
  // 公证书送达信息
  receiveInfo: ReceiveInfo(name='receive_info', example=''),
  // 开票信息
  invoiceInfo?: NotaryInvoiceInfo(name='invoice_info', example=''),
}

// 账号信息
model AccountData {
  // 账号id
  accountId: string(name='account_id', example='111111'),
  // 账号名称
  accountName: string(name='account_name', example='小明'),
  // 账号平台（支付宝，淘宝，微信，抖音等）
  accountPlatform: string(name='account_platform', example='WEIXIN'),
}

// 著作权人证件信息
model CopyrightCertInfo {
  // 证件号码
  certNo: string(name='cert_no', example='111111'),
  // 证件名称
  certName: string(name='cert_name', example='张三'),
  // 证件类型
  certType: string(name='cert_type', example='IDENTITY_CARD'),
}

// 监测任务信息
model MonitorTask {
  // 内容表述
  // 
  // 
  contentDesc?: string(name='content_desc', example='wert'),
  // 监测任务标题
  // 
  // 
  contentTitle?: string(name='content_title', example='awe'),
  // 监测文件时长，主要用于视频监测、音频监测的时长记录
  fileLengthInSecond?: long(name='file_length_in_second', example='200'),
  // 监测关键字
  // 
  // 
  keywords: [ string ](name='keywords', example='111111111111111111'),
  // 监测任务ID
  // 
  monitorTaskId: string(name='monitor_task_id', example='111111111111111111'),
  // 任务名称
  // 
  // 
  name: string(name='name', example='111111111111111111'),
  // 监测供应商id
  providerId?: string(name='provider_id', example='GOODEYE'),
  // 监测结果数量
  // 
  // 
  resultCount?: long(name='result_count', example='1'),
  // 监测范围
  // 
  // 
  scopes: [ string ](name='scopes', example='111111111111111111'),
  // 任务状态
  // 
  // INIT
  // 
  // WORKING
  // 
  // FINISH
  // 
  // FAILURE
  // 
  // DELETE
  status: string(name='status', example='WORKING'),
  // 监测时长(天)
  // 
  // 
  taskDuration: long(name='task_duration', example='1'),
  // 任务结束时间
  // 
  // 
  taskEnd?: long(name='task_end', example='1592807928'),
  // 任务开始时间
  // 
  // 
  taskStart?: long(name='task_start', example='1592807928'),
  // 文件类别
  // 
  // IMAGE
  // 
  // TEXT
  // 
  // VIDEO
  fileType: string(name='file_type', example='IMAGE'),
  // 文件大小
  fileSize?: long(name='file_size', example='111111'),
  // submitType是url就是url地址 submitType 是file就是oss fileId
  submitContent: string(name='submit_content', example='https://xxxx'),
  // 提交任务的类型:FILE/URL
  // 不填为FILE
  // FILE表示文件上传素材，URL表示上传URL
  submitType?: string(name='submit_type', example='FILE'),
  // 当status为failure时的具体错误信息（中文描述）
  failureMsg?: string(name='failure_msg', example='error'),
  // 当status为failure时的具体错误信息（错误枚举）
  failureCode?: string(name='failure_code', example='SERVER_ERROR'),
}

// 物流信息
model ExpressInfo {
  // 材料类型
  type: string(name='type', example='PAPER纸质，ELECTRIC电子'),
  // 收件人姓名
  name: string(name='name', example='张三'),
  // 收件人电话号码
  phone: string(name='phone', example='13000000000'),
  // 邮箱地址
  email: string(name='email', example='xxx@xx.com'),
  // 快递名称
  expressName: string(name='express_name', example='快递名称'),
  // 快递单号
  trackingNumber: string(name='tracking_number', example='快递单号'),
  // 材料发出时间戳
  sendTime: long(name='send_time', example=''),
}

// 播放列表实体类
model PlayListEntity {
  // 播放列表名称，可包含多个视频
  playListName: string(name='play_list_name', example='播放列表1'),
  // 表示授权类型，仅支持EXCLUSIVE，表示独家
  // 默认EXCLUSIVE
  authorizeType?: string(name='authorize_type', example='EXCLUSIVE'),
  // 授权类型范围，仅支持OVERSEA，表示全海外
  // 默认OVERSEA
  authorizeScopeType?: string(name='authorize_scope_type', example='OVERSEA'),
  // 维权类型，仅支持CONTAIN_PROTECT，表示包含维权
  // 默认CONTAIN_PROTECT
  protectRightsType?: string(name='protect_rights_type', example='CONTAIN_PROTECT'),
  // 维权类型范围，仅支持OVERSEA，表示全海外
  // 默认OVERSEA
  protectRightsScopeType?: string(name='protect_rights_scope_type', example='OVERSEA'),
  // 内容授权开始日期yyyy-MM-dd
  authorizationStartDate: string(name='authorization_start_date', example='2022-09-01'),
  // 内容授权时长,单位：年，目前支持1~3年，
  // 注意结束时间即开始时间 + 授权时长 不能早于当前时间
  authorizationTimeLength: long(name='authorization_time_length', example='1'),
  // 内容授权平台列表：
  //        默认授权平台都会进行运营，当前仅支持YOUTUBE
  authPlatform?: [ string ](name='auth_platform', example='YOUTUBE'),
}

// 作品信息
model WorksInfo {
  // 作品名称
  worksName: string(name='works_name', example='我的作品'),
  // 作品类型
  worksType?: string(name='works_type', example='视频'),
  // 作品类型英文标识
  worksTypeEn?: string(name='works_type_en', example='MODEL'),
}

// dci权利信息
model DciRightInfo {
  // 作品权利范围
  rightScope: string(name='right_scope', example='PUBLICATION'),
  // 权利取得方式
  rightObtainWay: string(name='right_obtain_way', example='ORIGINAL'),
  // 权利归属方式
  ownershipWay: string(name='ownership_way', example='PERSONAL'),
}

// 监测任务结果
model MonitorResult {
  // 监测任务ID
  // 
  monitorTaskId: string(name='monitor_task_id', example='111111111111111111'),
  // 监测结果ID
  // 
  monitorResultId: string(name='monitor_result_id', example='1'),
  // 侵权网址
  // 
  // 
  infrUrl?: string(name='infr_url', example='http://a.b.c'),
  // 侵权主体
  // 
  // 
  infrHost?: string(name='infr_host', example='hhh'),
  // 侵权标题
  // 
  // 
  infrTitle?: string(name='infr_title', example='biaoti'),
  // 侵权内容上传时间
  // 
  // 
  infrTime?: long(name='infr_time', example='1592807928'),
  // 侵权详情
  // 
  detail?: string(name='detail', example='details'),
  // 发布者
  poster?: string(name='poster', example='111111'),
  // 侵权内容发布时间
  postDate?: long(name='post_date', example='1626614711096'),
  // 侵权内容发现时间
  findDate?: long(name='find_date', example='1626614711096'),
  // 观看数
  viewCount?: long(name='view_count', example='1'),
  // 点赞数
  likeCount?: long(name='like_count', example='1'),
  // 评论数
  commentCount?: long(name='comment_count', example='1'),
  // 转发数
  repostCount?: long(name='repost_count', example='1'),
  // 侵权文件下载链接
  downloadUrl?: string(name='download_url', example='https://xxxx'),
  // 疑似侵权反馈时间
  infrFeedbackTime?: long(name='infr_feedback_time', example='1592807928'),
}

// 用户信息
model UserData {
  // 用户账号
  account: string(name='account', example='18654362713'),
  // 账号类型
  accountType: string(name='account_type', example='COPYRIGHT'),
  // 证件名称
  certName: string(name='cert_name', example='张三'),
  // 证件号码
  certNo: string(name='cert_no', example='11111111111'),
  // 证件类型
  certType: string(name='cert_type', example='IDENTITY_CARD'),
  // 联系方式
  contactInfo?: string(name='contact_info', example='186534672712'),
  // 企业法人
  legalPerson?: string(name='legal_person', example='李四'),
  // 注册时间
  regTime: long(name='reg_time', example='1603162178000'),
  // 账号状态
  status: string(name='status', example='SUCCESS'),
  // 用户类型
  type: string(name='type', example='PERSON'),
}

// 录屏取证信息
model RecordScreenData {
  // 错误原因（状态为FAIL才有数据）
  errorReason?: string(name='error_reason', example='error'),
  // 录屏文件Hash值
  fileHash?: string(name='file_hash', example='00030a38fae767396d499b306c810d2f08c15773f8447d870e5e0235e6634ed10000'),
  // 录屏结束时间
  gmtEnd: long(name='gmt_end', example='11111'),
  // 录屏开始时间
  gmtStart: long(name='gmt_start', example='111111'),
  // OS版本号
  osVersion: string(name='os_version', example='Microsoft Windows Server 2012 R2 Datacenter 64 位'),
  // 录屏文件信息
  screenInfo?: ScreenInfo(name='screen_info', example=''),
  // 证据包下载地址（状态为SUCCESS 才有数据）
  screenZip?: string(name='screen_zip', example='https://xxxx'),
  // 录屏软件版本号
  swVersion: string(name='sw_version', example='1.0.24'),
  // 可信时间戳的返回对象
  tsr?: string(name='tsr', example='{"cTSR":"1f8b080000009d0e6c198caccc2c4c","code":"0","hashAlgorithm":"sha256","hashedMessage":"3585100148072894b8","sN":"TTAS_S.0.2_87310861339018912","tS":1602672018916,"version":"2.0"}'),
  // 统一证据编号
  txHash?: string(name='tx_hash', example='1d642de2e838c809965768d7fd63230c10ad8740809b5bc0a070855397674ea5'),
  // 录屏文件大小
  fileSize?: long(name='file_size', example='111111'),
  // 录屏文件存证块高
  blockHeight?: long(name='block_height', example='1212121'),
  // 录屏文件上链时间
  timestamp?: long(name='timestamp', example='1605597503000'),
  // 录屏文件公证处证书下载链接
  certificateUrl?: string(name='certificate_url', example='https://xxxx'),
  // 公证处证书编号
  certificateStorageNo?: string(name='certificate_storage_no', example='111111'),
  // 证据包存证交易hash
  zipTxHash?: string(name='zip_tx_hash', example='0003fa8261d1cd6cb419264d516f9b586687e39a0dc31b2c74ff4948e8b951e61afd'),
  // 取证备注信息
  inventory?: string(name='inventory', example='{    "urls": [       "https://www.baidu.com",       "https://www.mydcs.com"    ] }'),
  // 证据包文件hash
  zipFileHash?: string(name='zip_file_hash', example='0003fa8261d1cd6cb419264d516f9b586687e39a0dc31b2c74ff4948e8b951e61afd'),
  // 主要核心证据文件名称
  mainEvidenceName?: string(name='main_evidence_name', example='test.mp4'),
  // 取证申请单号
  evidenceOrderNum?: string(name='evidence_order_num', example='xxxx'),
  // 补正说明函下载地址
  correctionUrl?: string(name='correction_url', example='https://xxxx'),
  // 录屏取证准备时间
  gmtReady?: long(name='gmt_ready', example='1111'),
}

// 推荐分类信息
model RecommendCategoryDetail {
  // 推荐分类类型
  recommendWorkCategory: string(name='recommend_work_category', example='ART'),
  // 作品类型相似度，保留2位小数
  categorySimilarRatio: string(name='category_similar_ratio', example='0.95'),
  // 作品类型风险等级
  categoryRiskRank?: string(name='category_risk_rank', example='LOW'),
}

// 网页取证数据
model ScreenshotData {
  // 取证地址
  url: string(name='url', example='https://xxxx'),
  // 网页取证时间
  gmtEvidence?: long(name='gmt_evidence', example='111111'),
  // 网页取证文件Hash值
  fileHash?: string(name='file_hash', example='00030a38fae767396d499b306c810d2f08c15773f8447d870e5e0235e6634ed10000'),
  // 网页取证文件大小
  fileSize?: long(name='file_size', example='111111'),
  // 统一证据编号
  txHash?: string(name='tx_hash', example='1d642de2e838c809965768d7fd63230c10ad8740809b5bc0a070855397674ea5'),
  // 网页取证文件存证块高
  blockHeight?: long(name='block_height', example='111111'),
  // 网页取证文件上链时间
  timestamp?: long(name='timestamp', example='111111'),
  // 可信时间戳的返回对象
  tsr?: string(name='tsr', example='{"cTSR":"1f8b080000009d0e6c198caccc2c4c","code":"0","hashAlgorithm":"sha256","hashedMessage":"3585100148072894b8","sN":"TTAS_S.0.2_87310861339018912","tS":1602672018916,"version":"2.0"}'),
  // 网页截图文件公证处证书下载链接
  certificateUrl?: string(name='certificate_url', example='https://xxxx'),
  // 公证处证书编号
  certificateStorageNo?: string(name='certificate_storage_no', example='111111'),
  // 网页取证工具软件版本号
  toolVersion?: string(name='tool_version', example='0.0.1'),
  // 证据包下载地址（状态为SUCCESS 才有数据）
  screenshotZip?: string(name='screenshot_zip', example='https://xxxx'),
  // 取证文件信息
  screenshotInfo?: ScreenshotInfo(name='screenshot_info', example='111111'),
  // 网页title
  headTitle?: string(name='head_title', example='测试'),
  // 证据包交易hash
  zipTxHash?: string(name='zip_tx_hash', example='0003fa8261d1cd6cb419264d516f9b586687e39a0dc31b2c74ff4948e8b951e61afd'),
  // 网页取证失败原因
  errorReason?: string(name='error_reason', example='error'),
  // 中文失败原因
  errorReasonCn?: string(name='error_reason_cn', example='中文失败原因'),
  // 证据包文件hash
  zipFileHash?: string(name='zip_file_hash', example='0003fa8261d1cd6cb419264d516f9b586687e39a0dc31b2c74ff4948e8b951e61afd'),
  // 核心证据文件名称
  mainEvidenceName?: string(name='main_evidence_name', example='test.jpg'),
  // 取证申请单号
  evidenceOrderNum?: string(name='evidence_order_num', example='xxxx'),
  // 取证开始时间
  gmtEvidenceStart?: long(name='gmt_evidence_start', example='123'),
}

// 类型对应供应商
model MonitorProviderType {
  // 监测文件类型
  fileType: string(name='file_type', example='txt'),
  // 提交类型
  submitType: string(name='submit_type', example='FILE'),
  // 文件格式
  fileFormat?: string(name='file_format', example='jpg'),
  // 支持的服务商列表，已排序
  monitorProviders: [ MonitorProviderCapability ](name='monitor_providers', example=''),
}

// 数登上传文件结构体
model AdditionalFileInfo {
  // 内容梗概文件fileId
  contentSummaryFileId?: string(name='content_summary_file_id', example='202212131900example001.png'),
  // 权利归属证明文件
  ownershipFileIds?: [ string ](name='ownership_file_ids', example=''),
  // 肖像权授权文件fileId
  portraitAuthFileId?: string(name='portrait_auth_file_id', example='202212131900example003.png'),
  // 他人作品授权文件fileId
  othersWorkAuthFileId?: string(name='others_work_auth_file_id', example='202212131900example004.png'),
  // 其他文件fileId列表
  otherFileIdList?: [ string ](name='other_file_id_list', example=''),
}

// 授权信息
model AuthInfo {
  // 授权权利项
  rightCode: string(name='right_code', example='授权权利项'),
  // 许可地域，默认中国境内，不包括香港等
  regionCode?: string(name='region_code', example='全世界'),
  // 许可方式
  usageCode: string(name='usage_code', example='广播'),
  // 许可终端
  terminalCode: string(name='terminal_code', example='电视'),
  // 传播媒介，默认互联网
  mediaCode?: string(name='media_code', example='互联网'),
  // 是否独占,默认 普通专有 GENERAL
  rightItemCharacter?: string(name='right_item_character', example='GENERAL'),
  // 是否可转让,默认不可转让
  transferStatus?: string(name='transfer_status', example='ENABLE'),
}

// 放弃取证信息
model ScreenCancelInfo {
  // 允许放弃时长（分钟）
  cancelInMin: long(name='cancel_in_min', example='10'),
  // 可用放弃次数
  cancelAttemptLeft: long(name='cancel_attempt_left', example='1'),
}

// 证书信息
model CertificateData {
  // 任务ID
  taskId: string(name='task_id', example='任务ID'),
  // 版权用户UID
  userId: string(name='user_id', example='版权用户UID'),
  // DCI码
  dciCode: string(name='dci_code', example='DCI码'),
  // 证书下载的链接地址
  certificateUrl: string(name='certificate_url', example='证书下载的链接地址'),
}

// 代理信息
model ProxyData {
  // 金融云租户id
  tenantId: string(name='tenant_id', example='2088XXXXXX'),
  // 租户名称
  tenantName: string(name='tenant_name', example='FJKDNESX'),
  // 是否计量
  ifMeasure?: boolean(name='if_measure', example='true, false'),
}

// 公证出证申请信息
model NotaryApplyInfo {
  // 公证处ID
  orgId: string(name='org_id', example='公证处ID'),
  // 取证人和取证信息列表
  evidInfos: [ EvidInfo ](name='evid_infos', example=''),
  // 申办事由
  bidReason: BidReason(name='bid_reason', example=''),
  // 申请人信息
  applicantInfos: [ NotaryUser ](name='applicant_infos', example=''),
  // 经办人信息
  operatorInfo: NotaryUser(name='operator_info', example=''),
  // 授权书
  warrantFileList: [ string ](name='warrant_file_list', example=''),
  // 权利证明材料
  testifyFileList: [ string ](name='testify_file_list', example=''),
  // 保全内容
  preservationContent: string(name='preservation_content', example='xxx'),
  // 用户申办备注
  comments?: string(name='comments', example='用户申办备注'),
}

// 核验取证信息
model VerifyEvidenceData {
  // 操作日志交易HASH
  processLogTxHash?: string(name='process_log_tx_hash', example='0003fa8261d1cd6cb419264d516f9b586687e39a0dc31b2c74ff4948e8b951e61afd'),
  // 自清洁日志交易HASH
  checkLogTxHash?: string(name='check_log_tx_hash', example='0003fa8261d1cd6cb419264d516f9b586687e39a0dc31b2c74ff4948e8b951e61afd'),
}

// 公证出证需要用户签署的文件
model SignDocument {
  // 签署文件
  signFile: string(name='sign_file', example='xxx'),
  // 到期时间戳
  expireTime: long(name='expire_time', example=''),
  // 签署文件名
  signFileName: string(name='sign_file_name', example='在线公证申办过程记录.pdf'),
  // 签署文件描述
  signFileDesc: string(name='sign_file_desc', example='在线公证申办过程记录'),
  // 签署文件哈希
  signFileHash: string(name='sign_file_hash', example='用于校验文件完整性，计算文件的SHA-256值'),
  // 签署文件类型
  signFileType: string(name='sign_file_type', example='NOTARY_PAPER：公证申请表 ONLINE_NOTIFICATION：在线公证受理平台公证受理告知书 EVIDENCE_NOTIFICATION：保全证据通用告知书 ONLINE_RECORD：在线公证申办询问记录'),
}

// 商品信息
model GoodsInfo {
  // 商品id
  goodsId?: string(name='goods_id', example='111111'),
  // 商品名称
  goodsName?: string(name='goods_name', example='测试商品'),
  // 商品状态
  goodsStatus?: string(name='goods_status', example='UP'),
  // 商品分类
  classification?: string(name='classification', example='分类'),
  // 售卖数量
  totalSoldNum?: long(name='total_sold_num', example='1'),
  // 售价（分）
  standardPriceInCent?: long(name='standard_price_in_cent', example='1'),
  // 商品标题
  title?: string(name='title', example='测试标题'),
  // 授权期限起始时间
  authStartTime?: long(name='auth_start_time', example=''),
  // 授权期限结束时间
  authEndTime?: long(name='auth_end_time', example=''),
  // 发布时间
  publishTime?: long(name='publish_time', example=''),
}

// 审查数据
model ReviewData {
  // 作品名称安全识别结果
  titleRiskData?: [ ContentRiskData ](name='title_risk_data', example=''),
  // 内容安全识别结果
  contentRiskData?: [ ContentRiskData ](name='content_risk_data', example=''),
  // 作品相似识别结果
  resembleRiskData?: [ ResembleRiskData ](name='resemble_risk_data', example=''),
  // 作品标签识别结果
  labelRiskData?: [ LabelRiskData ](name='label_risk_data', example=''),
}

// 出证的公证书信息
model NotaryInfo {
  // 公证书编号
  notarialDeedNo: string(name='notarial_deed_no', example='公证书编号'),
  // 电子公证书文件路径
  notaryPaperPath: string(name='notary_paper_path', example='电子公证书文件路径'),
  // 公证书出证日期（yyyy-MM-dd）
  notaryTime: string(name='notary_time', example='2022-10-17'),
}

// 数登申请声明：包括创作目的、创作过程、独创性和字体申明
model DciExplanationInfo {
  // 创作目的，描述作品创作的目的
  creationPurpose: string(name='creation_purpose', example='xx的创作目的'),
  // 创作过程，具体的创作过程
  creationProcess: string(name='creation_process', example='xx的创作过程'),
  // 阐述作品的独创性
  originality: string(name='originality', example='独创性说明'),
  // 创作过程涉及到字体使用相关版权说明
  fontCopyright: string(name='font_copyright', example='字体申明'),
}

// 监测文件类型
model MonitorType {
  // 文件类型
  fileType: string(name='file_type', example='jpg'),
  // 提交类型
  submitType: string(name='submit_type', example='FILE'),
}

model GetUploadurlRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 文件名称
  fileName: string(maxLength=128, name='file_name'),
  // 保证请求幂等性。从您的客户端生成一个参数值，确保不同请求间该参数值唯一。clientToken只支持ASCII字符，且不能超过64个字符。
  clientToken?: string(maxLength=64, name='client_token'),
}

model GetUploadurlResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 授权访问oss链接
  url?: string(name='url'),
  // OSS 文件id
  fileId?: string(name='file_id'),
}

/**
 * Description: 调用接口获取版权开放平台授权访问oss链接
 * Summary: 获取授权访问oss链接
 */
async function getUploadurl(request: GetUploadurlRequest): GetUploadurlResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getUploadurlEx(request, headers, runtime);
}

/**
 * Description: 调用接口获取版权开放平台授权访问oss链接
 * Summary: 获取授权访问oss链接
 */
async function getUploadurlEx(request: GetUploadurlRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetUploadurlResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bccr.uploadurl.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AddHashregisterRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 文件SHA256 hash
  hash: string(name='hash'),
  // 文件大小
  length: long(name='length'),
  // hash算法
  hashType: string(name='hash_type'),
  // 文件类型
  type: string(name='type'),
  // 文件名称
  name: string(maxLength=128, name='name'),
  // 备注
  memo?: string(maxLength=512, name='memo'),
  // 证件名称
  certName: string(name='cert_name'),
  // 证件号码
  certNo: string(name='cert_no'),
  // 证件类型
  certType: string(name='cert_type'),
  // 是否自动创建公证保管函
  createCertificate?: boolean(name='create_certificate'),
  // 证书类型
  certificateType?: string(name='certificate_type'),
  // 是否创建证据包，默认否
  createPackage?: boolean(name='create_package'),
  // 	
  // 公证处Id
  orgId?: string(name='org_id'),
  // 电话号码
  phoneNum?: string(name='phone_num'),
  // 作品信息
  worksInfo?: WorksInfo(name='works_info'),
  // 是否创建权利声明书（默认否，选是需要rightsInfo传递对应信息）
  createStatement?: boolean(name='create_statement'),
  // 权利信息
  rightsInfo?: RightsInfo(name='rights_info'),
  // 企业经办人姓名（如果certType为BUSINESS_LICENSE并且createStatement为true则必传）
  managerName?: string(maxLength=32, name='manager_name'),
  // 企业经办人身份证号（如果certType为BUSINESS_LICENSE并且createStatement为true则必传）
  managerNo?: string(maxLength=30, name='manager_no'),
  // 附属证据信息（最多5个文件，传递的是FileId）
  ancillaryEvidence?: [ string ](name='ancillary_evidence'),
  // 著作权人信息
  copyrightOwnerInfo?: CopyrightCertInfo(name='copyright_owner_info'),
  // 幂等字段
  clientToken?: string(name='client_token'),
  // 特征文件oss id
  featureFileId?: string(name='feature_file_id'),
  // 代理信息
  proxyInfo?: ProxyData(name='proxy_info'),
}

model AddHashregisterResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 登记id
  registerId?: string(name='register_id'),
}

/**
 * Description: 版权开发平台hash登记
 * Summary: 新增HASH版权登记
 */
async function addHashregister(request: AddHashregisterRequest): AddHashregisterResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return addHashregisterEx(request, headers, runtime);
}

/**
 * Description: 版权开发平台hash登记
 * Summary: 新增HASH版权登记
 */
async function addHashregisterEx(request: AddHashregisterRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddHashregisterResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bccr.hashregister.add', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AddRegisterRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 文件oss id
  fileId: string(name='file_id'),
  // 是否自动创建公证书,默认否
  createCertificate?: boolean(name='create_certificate'),
  // 证书类型
  certificateType?: string(name='certificate_type'),
  // 是否创建证据包，默认否
  createPackage?: boolean(name='create_package'),
  // 公证处id
  orgId?: string(name='org_id'),
  // 文件名称
  name: string(maxLength=128, name='name'),
  // 文件类型
  type: string(name='type'),
  // 备注
  memo?: string(maxLength=512, name='memo'),
  // 证件名称
  certName: string(name='cert_name'),
  // 证件号码
  certNo: string(name='cert_no'),
  // 证件类型
  certType: string(name='cert_type'),
  // 电话号码
  phoneNum?: string(name='phone_num'),
  // 作品信息
  worksInfo?: WorksInfo(name='works_info'),
  // 是否创建权利声明书（默认否，选是需要rightsInfo传递对应信息）
  createStatement?: boolean(name='create_statement'),
  // 企业经办人姓名（如果certType为BUSINESS_LICENSE并且createStatement为true则必传）
  managerName?: string(maxLength=32, name='manager_name'),
  // 企业经办人身份证号（如果certType为BUSINESS_LICENSE并且createStatement为true则必传）
  managerNo?: string(maxLength=30, name='manager_no'),
  // 权利信息
  rightsInfo?: RightsInfo(name='rights_info'),
  // 附属证据信息（最多5个文件，传递的是FileId）
  ancillaryEvidence?: [ string ](name='ancillary_evidence'),
  // 著作权人信息
  copyrightOwnerInfo?: CopyrightCertInfo(name='copyright_owner_info'),
  // 幂等
  clientToken?: string(name='client_token'),
  // 同步账号信息
  syncInfo?: AccountData(name='sync_info'),
  // 代理信息
  proxyInfo?: ProxyData(name='proxy_info'),
  // 渠道标签
  channelTerminal?: string(name='channel_terminal'),
}

model AddRegisterResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 登记id
  registerId?: string(name='register_id'),
}

/**
 * Description: 版权平台新增版权登记
 * Summary: 新增版权登记
 */
async function addRegister(request: AddRegisterRequest): AddRegisterResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return addRegisterEx(request, headers, runtime);
}

/**
 * Description: 版权平台新增版权登记
 * Summary: 新增版权登记
 */
async function addRegisterEx(request: AddRegisterRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddRegisterResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bccr.register.add', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryRegisterstatusRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 登记id
  registerId: string(name='register_id'),
}

model QueryRegisterstatusResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 登记状态
  status?: string(name='status'),
  // 存证时间
  timestamp?: long(name='timestamp'),
  // 文件hash
  hash?: string(name='hash'),
  // 统一证据编号（存证交易HASH）
  txHash?: string(name='tx_hash'),
  // 存证块高
  blockHeight?: long(name='block_height'),
  // tsr信息
  tsr?: string(name='tsr'),
  // 公证处证书下载链接
  certificateUrl?: string(name='certificate_url'),
  // 公证处证书编号
  certificateStorageNo?: string(name='certificate_storage_no'),
  // 授时中心证书下载链接
  certificateTimeUrl?: string(name='certificate_time_url'),
  // 证据包下载地址（状态为SUCCESS并且请求要求生成证据包才有数据）
  packageUrl?: string(name='package_url'),
  // 证据包存证交易HASH  注意只有生成了证据包才会返回
  packageTxHash?: string(name='package_tx_hash'),
  // 权利声明书下载地址 注意只有传递了权利信息并且生成了权利声明书才会返回
  statementUrl?: string(name='statement_url'),
  // 安全信息
  security?: SecurityData(name='security'),
  // 补正说明函下载地址
  correctionUrl?: string(name='correction_url'),
}

/**
 * Description: 版权平台查询版权登记状态
 * Summary: 查询版权登记状态
 */
async function queryRegisterstatus(request: QueryRegisterstatusRequest): QueryRegisterstatusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryRegisterstatusEx(request, headers, runtime);
}

/**
 * Description: 版权平台查询版权登记状态
 * Summary: 查询版权登记状态
 */
async function queryRegisterstatusEx(request: QueryRegisterstatusRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryRegisterstatusResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bccr.registerstatus.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateCertificateRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 版权登记id
  registerId: string(name='register_id'),
  // 证书类型
  certificateType: string(name='certificate_type'),
  // 功能类型
  featuresType: string(name='features_type'),
  // 公证处id
  orgId?: string(name='org_id'),
  // 代理信息
  proxyInfo?: ProxyData(name='proxy_info'),
}

model CreateCertificateResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 生成证书结果
  status?: string(name='status'),
}

/**
 * Description: 版权平台生成版权登记证书
 * Summary: 生成版权登记证书
 */
async function createCertificate(request: CreateCertificateRequest): CreateCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createCertificateEx(request, headers, runtime);
}

/**
 * Description: 版权平台生成版权登记证书
 * Summary: 生成版权登记证书
 */
async function createCertificateEx(request: CreateCertificateRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateCertificateResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bccr.certificate.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetCertificateRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 证书类型
  certificateType: string(name='certificate_type'),
  // 功能类型
  featuresType: string(name='features_type'),
  // 版权登记id
  registerId: string(name='register_id'),
}

model GetCertificateResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 证书下载链接
  url?: string(name='url'),
  // 证书生成状态
  status?: string(name='status'),
}

/**
 * Description: 版权平台获取版权登记证书
 * Summary: 获取版权登记证书
 */
async function getCertificate(request: GetCertificateRequest): GetCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getCertificateEx(request, headers, runtime);
}

/**
 * Description: 版权平台获取版权登记证书
 * Summary: 获取版权登记证书
 */
async function getCertificateEx(request: GetCertificateRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetCertificateResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bccr.certificate.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateMonitorTaskRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // submitType是url就传 url地址 submitType 是file就传 oss fileId
  submitContent: string(name='submit_content'),
  // 提交任务的类型:FILE/URL
  // 不填为FILE
  // FILE表示文件上传素材，URL表示上传URL
  submitType?: string(name='submit_type'),
  // 文件类别
  // 
  // IMAGE
  // 
  // TEXT
  // 
  // VIDEO
  fileType: string(name='file_type'),
  // 任务名称(不超过100字符)
  taskName: string(name='task_name'),
  // 监测任务标题(不超过100字符)
  contentTitle: string(name='content_title'),
  // 关键词(不超过200字符)
  keywords: [ string ](name='keywords'),
  // 内容表述(不超过1000字符)
  contentDesc?: string(name='content_desc'),
  // 监测供应商id
  providerId?: string(name='provider_id'),
  // 监测范围 默认全部：ALL；PC网站：SITE；APP应用：APP
  scopes?: [ string ](name='scopes'),
  // 任务开始时间，如当前时间戳，不传则取服务器当前时间戳，单位毫秒
  taskStart?: long(name='task_start'),
  // 任务持续时间，单位天，默认90天
  // 
  // 一次性监测：0
  taskDuration?: long(name='task_duration'),
  // 代理信息
  proxyInfo?: ProxyData(name='proxy_info'),
  // 保证请求幂等性。从您的客户端生成一个参数值，确保不同请求间该参数值唯一。clientToken只支持ASCII字符，且不能超过64个字符。更多详情，请参见如何保证幂等性。
  clientToken: string(name='client_token'),
  // 原监测任务id
  originMonitorTaskId?: string(name='origin_monitor_task_id'),
}

model CreateMonitorTaskResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 监测任务Id
  monitorTaskId?: string(name='monitor_task_id'),
}

/**
 * Description: 新增版权监测任务
 * Summary: 新增版权监测
 */
async function createMonitorTask(request: CreateMonitorTaskRequest): CreateMonitorTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createMonitorTaskEx(request, headers, runtime);
}

/**
 * Description: 新增版权监测任务
 * Summary: 新增版权监测
 */
async function createMonitorTaskEx(request: CreateMonitorTaskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateMonitorTaskResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bccr.monitor.task.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StopMonitorTaskRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 监测任务Id
  // 
  monitorTaskId: string(name='monitor_task_id'),
}

model StopMonitorTaskResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 停止结果
  result?: boolean(name='result'),
}

/**
 * Description: 停止版权监测任务
 * Summary: 停止版权监测
 */
async function stopMonitorTask(request: StopMonitorTaskRequest): StopMonitorTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return stopMonitorTaskEx(request, headers, runtime);
}

/**
 * Description: 停止版权监测任务
 * Summary: 停止版权监测
 */
async function stopMonitorTaskEx(request: StopMonitorTaskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StopMonitorTaskResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bccr.monitor.task.stop', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryMonitorTaskRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 监测任务Id
  // 
  monitorTaskId: string(name='monitor_task_id'),
}

model QueryMonitorTaskResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 监测任务信息
  // 
  // 
  monitorTask?: MonitorTask(name='monitor_task'),
}

/**
 * Description: 查询版权监测任务
 * Summary: 查询版权监测
 */
async function queryMonitorTask(request: QueryMonitorTaskRequest): QueryMonitorTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryMonitorTaskEx(request, headers, runtime);
}

/**
 * Description: 查询版权监测任务
 * Summary: 查询版权监测
 */
async function queryMonitorTaskEx(request: QueryMonitorTaskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryMonitorTaskResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bccr.monitor.task.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryMonitorResultRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 监测任务Id
  monitorTaskId: string(name='monitor_task_id'),
  // 页序号(>0)
  // 
  // 
  pageIndex: long(name='page_index'),
  // 页大小(1-200)
  // 
  // 
  pageSize: long(name='page_size'),
}

model QueryMonitorResultResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 监测任务信息
  monitorResultList?: [ MonitorResult ](name='monitor_result_list'),
  // 页序号(>0)
  pageIndex?: long(name='page_index'),
  // 页大小(1-200)
  pageSize?: long(name='page_size'),
  // 监测结果数量
  resultCount?: long(name='result_count'),
}

/**
 * Description: 查询版权任务监测结果
 * Summary: 查询版权监测结果
 */
async function queryMonitorResult(request: QueryMonitorResultRequest): QueryMonitorResultResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryMonitorResultEx(request, headers, runtime);
}

/**
 * Description: 查询版权任务监测结果
 * Summary: 查询版权监测结果
 */
async function queryMonitorResultEx(request: QueryMonitorResultRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryMonitorResultResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bccr.monitor.result.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListMonitorProviderRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 需监测文件类型
  monitorTypes: [ MonitorType ](name='monitor_types'),
}

model ListMonitorProviderResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 监测能力提供方类型列表
  providerList?: [ MonitorProviderType ](name='provider_list'),
}

/**
 * Description: 获取传播监测能力服务商列表
 * Summary: 获取传播监测能力服务商列表
 */
async function listMonitorProvider(request: ListMonitorProviderRequest): ListMonitorProviderResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listMonitorProviderEx(request, headers, runtime);
}

/**
 * Description: 获取传播监测能力服务商列表
 * Summary: 获取传播监测能力服务商列表
 */
async function listMonitorProviderEx(request: ListMonitorProviderRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListMonitorProviderResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bccr.monitor.provider.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateRecodescreenRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 取证名称（最长128个字符）
  name: string(maxLength=128, minLength=1, name='name'),
  // 取证备注（最长512个字符）
  memo?: string(maxLength=512, name='memo'),
  // 预校验网址和预打开网页（不能大于10条）
  url?: [ string ](name='url'),
  // 取证类型 具体见附录 RecordScreenType
  type: string(name='type'),
  // 取证服务器地域 具体见附录 RecordScreenArea
  area: string(name='area'),
  // 定制录屏桌面识别码，目前取值只有默认值：DEFAULT
  screenCode?: string(name='screen_code'),
  // 最大录屏时间，maxTimeInMin不能小于6min，不能大于300min
  maxTimeInMin: long(name='max_time_in_min'),
  // 服务器进入ready状态，指定时间未开始进入abort状态的等待时间，单位为分钟，默认1min，waitInMin不能小于1，不能大于10min
  waitInMin?: long(name='wait_in_min'),
  // 当所选地域无机器资源时，是否使用其它地域
  // 
  // 目前取值只有默认值：FORBID
  crossRegion?: string(name='cross_region'),
  // ip地域取值
  // 
  // 目前取值只有默认值：ANY
  ipType?: string(name='ip_type'),
  // 回调地址
  callbackUrl?: string(name='callback_url'),
  // 公证处Id
  orgId?: string(name='org_id'),
  // 取证人证件名称
  certName: string(name='cert_name'),
  // 	
  // 取证人证件号码
  certNo: string(name='cert_no'),
  // 取证人证件类型 具体见附录CertType
  certType: string(name='cert_type'),
  // 企业法人代表姓名(如果certType为BUSINESS_LICENSE 则必传)
  legalPersonName?: string(name='legal_person_name'),
  // 企业法人代表身份证号(如果certType为BUSINESS_LICENSE 则必传)
  legalPersonNo?: string(name='legal_person_no'),
  // 企业用户取证人姓名(如果certType为BUSINESS_LICENSE 则必传)
  agent?: string(name='agent'),
  // 企业用户取证人身份证号(如果certType为BUSINESS_LICENSE 则必传)
  agentNo?: string(name='agent_no'),
  // 取证人电话号码，生成公证处证书需要，公证处需要作登记 格式范例：(86-573)2651630   或  (86)13738258505
  phoneNum?: string(name='phone_num'),
  // 代理信息
  proxyInfo?: ProxyData(name='proxy_info'),
  // 保证请求幂等性。从您的客户端生成一个参数值，确保不同请求间该参数值唯一。clientToken只支持ASCII字符，且不能超过64个字符。更多详情，请参见如何保证幂等性。
  clientToken: string(name='client_token'),
}

model CreateRecodescreenResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 取证id
  evidenceId?: string(name='evidence_id'),
}

/**
 * Description: 创建录屏取证(废弃)
 * Summary: 创建录屏取证(废弃)
 */
async function createRecodescreen(request: CreateRecodescreenRequest): CreateRecodescreenResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createRecodescreenEx(request, headers, runtime);
}

/**
 * Description: 创建录屏取证(废弃)
 * Summary: 创建录屏取证(废弃)
 */
async function createRecodescreenEx(request: CreateRecodescreenRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateRecodescreenResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bccr.recodescreen.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryRecodescreenRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 取证id
  evidenceId: string(name='evidence_id'),
}

model QueryRecodescreenResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 取证id
  evidenceId?: string(name='evidence_id'),
  // 取证状态 具体见附录 RecordScreenStatus
  status?: string(name='status'),
  // 取证操作Url （状态为INIT和DOING 时返回 可以重复打开使用）
  operateUrl?: string(name='operate_url'),
  // 取证详情（状态为PACKAGING,SUCCESS,FAIL才有数据）
  data?: RecordScreenData(name='data'),
}

/**
 * Description: 查询录屏取证(废弃)
 * Summary: 查询录屏取证(废弃)
 */
async function queryRecodescreen(request: QueryRecodescreenRequest): QueryRecodescreenResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryRecodescreenEx(request, headers, runtime);
}

/**
 * Description: 查询录屏取证(废弃)
 * Summary: 查询录屏取证(废弃)
 */
async function queryRecodescreenEx(request: QueryRecodescreenRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryRecodescreenResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bccr.recodescreen.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryUserRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 用户token，从cookie或者重定向链接获取
  token: string(name='token'),
}

model QueryUserResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 是否登录
  login?: boolean(name='login'),
  // 用户信息
  user?: UserData(name='user'),
}

/**
 * Description: 用户信息查询
 * Summary: 用户信息查询
 */
async function queryUser(request: QueryUserRequest): QueryUserResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryUserEx(request, headers, runtime);
}

/**
 * Description: 用户信息查询
 * Summary: 用户信息查询
 */
async function queryUserEx(request: QueryUserRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryUserResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bccr.user.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryUserListRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 页码，从1开始
  pageIndex: long(minimum=1, name='page_index'),
  // 每页数据，1~100
  pageSize: long(maximum=100, minimum=1, name='page_size'),
  // 用户状态
  status?: string(name='status'),
}

model QueryUserListResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 页码，从1开始
  pageIndex?: long(name='page_index'),
  // 每页数据，1~100
  pageSize?: long(name='page_size'),
  // 总数量
  totalCount?: long(name='total_count'),
  // 用户信息列表
  userList?: [ UserData ](name='user_list'),
}

/**
 * Description: 查询用户信息列表
 * Summary: 查询用户信息列表
 */
async function queryUserList(request: QueryUserListRequest): QueryUserListResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryUserListEx(request, headers, runtime);
}

/**
 * Description: 查询用户信息列表
 * Summary: 查询用户信息列表
 */
async function queryUserListEx(request: QueryUserListRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryUserListResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bccr.user.list.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateScreenshotRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 取证名称（最长128个字符）
  name: string(maxLength=128, minLength=1, name='name'),
  // 取证备注（最长512个字符）
  memo?: string(maxLength=512, name='memo'),
  // 取证地址（最长2048个字符）
  url: string(maxLength=2048, minLength=8, name='url'),
  // 公证处Id
  orgId?: string(name='org_id'),
  // 取证人证件名称
  certName: string(name='cert_name'),
  // 取证人证件号码
  certNo: string(name='cert_no'),
  // 取证人证件类型
  certType: string(name='cert_type'),
  // 法人代表姓名(如果certType为BUSINESS_LICENSE 则必传)
  legalPersonName?: string(name='legal_person_name'),
  // 法人代表身份证号(如果certType为BUSINESS_LICENSE 则必传)
  legalPersonNo?: string(name='legal_person_no'),
  // 法人证件类型
  legalPersonType?: string(name='legal_person_type'),
  // 企业用户取证人姓名(如果certType为BUSINESS_LICENSE 则必传)
  agentName?: string(name='agent_name'),
  // 企业用户取证人身份证号(如果certType为BUSINESS_LICENSE 则必传)
  agentNo?: string(name='agent_no'),
  // 取证人电话号码，生成公证处证书需要，公证处需要作登记 格式范例：(86-573)2651630   或  (86)13738258505
  phoneNum?: string(name='phone_num'),
  // 代理信息
  proxyInfo?: ProxyData(name='proxy_info'),
  // 保证请求幂等性。从您的客户端生成一个参数值，确保不同请求间该参数值唯一。clientToken只支持ASCII字符，且不能超过64个字符
  clientToken: string(maxLength=64, name='client_token'),
}

model CreateScreenshotResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 取证id
  evidenceId?: string(name='evidence_id'),
}

/**
 * Description: 创建网页取证
 * Summary: 创建网页取证
 */
async function createScreenshot(request: CreateScreenshotRequest): CreateScreenshotResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createScreenshotEx(request, headers, runtime);
}

/**
 * Description: 创建网页取证
 * Summary: 创建网页取证
 */
async function createScreenshotEx(request: CreateScreenshotRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateScreenshotResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bccr.screenshot.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryScreenshotRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 取证id
  evidenceId: string(name='evidence_id'),
}

model QueryScreenshotResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 取证id
  evidenceId?: string(name='evidence_id'),
  // 取证状态
  status?: string(name='status'),
  // 网页截图信息
  data?: ScreenshotData(name='data'),
}

/**
 * Description: 查询网页取证
 * Summary: 查询网页取证
 */
async function queryScreenshot(request: QueryScreenshotRequest): QueryScreenshotResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryScreenshotEx(request, headers, runtime);
}

/**
 * Description: 查询网页取证
 * Summary: 查询网页取证
 */
async function queryScreenshotEx(request: QueryScreenshotRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryScreenshotResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bccr.screenshot.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model VerifyBlockchainRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 统一证据编号（存证交易HASH）
  txHash: string(name='tx_hash'),
  // 文件HASH，使用HEX的完整表示，如 6460c949f8a347eb...
  // 
  // (和fileId 二选一，必传一个，都传按fileHash为准)
  fileHash?: string(name='file_hash'),
}

model VerifyBlockchainResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 统一证据编号（存证交易HASH）
  txHash?: string(name='tx_hash'),
  // 核验结果
  status?: string(name='status'),
  // 所在区块hash
  blockHash?: string(name='block_hash'),
  // 区块链高度
  blockHeight?: long(name='block_height'),
  // 存证类型
  dataType?: string(name='data_type'),
  // 存证时间
  timestamp?: string(name='timestamp'),
}

/**
 * Description: 链上核验
 * Summary: 链上核验
 */
async function verifyBlockchain(request: VerifyBlockchainRequest): VerifyBlockchainResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return verifyBlockchainEx(request, headers, runtime);
}

/**
 * Description: 链上核验
 * Summary: 链上核验
 */
async function verifyBlockchainEx(request: VerifyBlockchainRequest, headers: map[string]string, runtime: Util.RuntimeOptions): VerifyBlockchainResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bccr.blockchain.verify', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateRecordscreenRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 取证名称（最长128个字符）
  name: string(maxLength=128, minLength=1, name='name'),
  // 取证备注（最长512个字符）
  memo?: string(maxLength=512, name='memo'),
  // 预校验网址和预打开网页（不能大于10条），如果automatic为true 则必填
  url?: [ string ](name='url'),
  // 取证类型 具体见附录 RecordScreenType
  type: string(name='type'),
  // 取证服务器地域 具体见附录 RecordScreenArea
  area: string(name='area'),
  // 定制录屏桌面识别码，目前取值只有默认值：DEFAULT
  screenCode?: string(name='screen_code'),
  // 最大录屏时间，maxTimeInMin不能小于6min，不能大于300min
  maxTimeInMin: long(name='max_time_in_min'),
  // 服务器进入ready状态，指定时间未开始进入abort状态的等待时间，单位为分钟，默认1min，waitInMin不能小于1，不能大于10min
  waitInMin?: long(name='wait_in_min'),
  // 当所选地域无机器资源时，是否使用其它地域 目前取值只有默认值：FORBID
  crossRegion?: string(name='cross_region'),
  // ip地域取值 目前取值只有默认值：ANY
  ipType?: string(name='ip_type'),
  // 回调地址
  callbackUrl?: string(name='callback_url'),
  // 公证处Id
  orgId?: string(name='org_id'),
  // 取证人证件名称
  certName: string(name='cert_name'),
  // 取证人证件号码
  certNo: string(name='cert_no'),
  // 取证人证件类型 具体见附录CertType
  certType: string(name='cert_type'),
  // 企业法人代表姓名(如果certType为BUSINESS_LICENSE 则必传)
  legalPersonName?: string(name='legal_person_name'),
  // 企业法人代表身份证号(如果certType为BUSINESS_LICENSE 则必传)
  legalPersonNo?: string(name='legal_person_no'),
  // 法人证件类型（非必传，默认IDENTITY_CARD）
  legalPersonType?: string(name='legal_person_type'),
  // 企业用户取证人姓名(如果certType为BUSINESS_LICENSE 则必传)
  agentName?: string(name='agent_name'),
  // 企业用户取证人身份证号(如果certType为BUSINESS_LICENSE 则必传)
  agentNo?: string(name='agent_no'),
  // 取证人电话号码，生成公证处证书需要，公证处需要作登记 格式范例：(86-573)2651630 或 (86)13738258505
  phoneNum?: string(name='phone_num'),
  // 是否自动化取证
  automatic?: boolean(name='automatic'),
  // 取证目标类型： 微信公众号：WEIXIN_MP 其它：OTHER
  // 
  targetType?: string(name='target_type'),
  // 是否支持UAC通行 默认false
  supportUac?: boolean(name='support_uac'),
  // 取证脚本集Id
  scriptsPackageId?: string(name='scripts_package_id'),
  // 代理信息
  proxyInfo?: ProxyData(name='proxy_info'),
  // 保证请求幂等性。从您的客户端生成一个参数值，确保不同请求间该参数值唯一。clientToken只支持ASCII字符，且不能超过64个字符。更多详情，请参见如何保证幂等性。
  clientToken: string(name='client_token'),
  // 其他取证网址
  inventory?: string(name='inventory'),
  // 音视频取证信息
  audioVideoInfos?: [ EvidenceUrlInfo ](name='audio_video_infos'),
  // 放弃取证信息
  screenCancelInfo?: ScreenCancelInfo(name='screen_cancel_info'),
}

model CreateRecordscreenResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 取证id
  evidenceId?: string(name='evidence_id'),
}

/**
 * Description: 创建录屏取证
 * Summary: 创建录屏取证
 */
async function createRecordscreen(request: CreateRecordscreenRequest): CreateRecordscreenResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createRecordscreenEx(request, headers, runtime);
}

/**
 * Description: 创建录屏取证
 * Summary: 创建录屏取证
 */
async function createRecordscreenEx(request: CreateRecordscreenRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateRecordscreenResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bccr.recordscreen.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryRecordscreenRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 取证id
  evidenceId: string(name='evidence_id'),
}

model QueryRecordscreenResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 取证id
  evidenceId?: string(name='evidence_id'),
  // 取证状态 具体见附录 RecordScreenStatus
  status?: string(name='status'),
  // 取证操作Url （状态为INIT和DOING 时返回 可以重复打开使用）
  operateUrl?: string(name='operate_url'),
  // 取证详情（状态为PACKAGING,SUCCESS,FAIL才有数据）
  data?: RecordScreenData(name='data'),
}

/**
 * Description: 查询录屏取证
 * Summary: 查询录屏取证
 */
async function queryRecordscreen(request: QueryRecordscreenRequest): QueryRecordscreenResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryRecordscreenEx(request, headers, runtime);
}

/**
 * Description: 查询录屏取证
 * Summary: 查询录屏取证
 */
async function queryRecordscreenEx(request: QueryRecordscreenRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryRecordscreenResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bccr.recordscreen.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListNotaryRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
}

model ListNotaryResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 公证处列表
  notaryList?: [ NotaryPublicOffice ](name='notary_list'),
}

/**
 * Description: 获取支持的公证处列表
 * Summary: 获取支持的公证处列表
 */
async function listNotary(request: ListNotaryRequest): ListNotaryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listNotaryEx(request, headers, runtime);
}

/**
 * Description: 获取支持的公证处列表
 * Summary: 获取支持的公证处列表
 */
async function listNotaryEx(request: ListNotaryRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListNotaryResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bccr.notary.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateDirectmonitorTaskRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 提交类型，FILE/URL
  // 
  submitType: string(name='submit_type'),
  // submitType 是FILE就传 oss fileId，是URL就传url地址
  submitContent: string(name='submit_content'),
  // 文件名称
  fileName: string(name='file_name'),
  // 文件类别 IMAGE/TEXT/VIDEO/AUDIO
  // 
  fileType: string(name='file_type'),
  // 详细文件类型，在fileType为IMAGE时，当前仅支持MARKETING_IMAGE营销图片
  detailFileType: string(name='detail_file_type'),
  // 定向监测任务名称
  taskName?: string(name='task_name'),
  // 幂等号，用于保证请求幂等性。从您的客户端生成一个参数值，确保不同请求间该参数值唯一。clientToken只支持ASCII字符，且不能超过64个字符。更多详情，请参见如何保证幂等性。
  clientToken?: string(name='client_token'),
}

model CreateDirectmonitorTaskResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 监测任务id
  monitorTaskId?: string(name='monitor_task_id'),
  // 是否存在相似结果
  isExistSimilar?: boolean(name='is_exist_similar'),
  // 监测结果总数量
  monitorResultCount?: long(name='monitor_result_count'),
}

/**
 * Description: 新增版权定向监测任务
 * Summary: 新增版权定向监测
 */
async function createDirectmonitorTask(request: CreateDirectmonitorTaskRequest): CreateDirectmonitorTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createDirectmonitorTaskEx(request, headers, runtime);
}

/**
 * Description: 新增版权定向监测任务
 * Summary: 新增版权定向监测
 */
async function createDirectmonitorTaskEx(request: CreateDirectmonitorTaskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateDirectmonitorTaskResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bccr.directmonitor.task.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDirectmonitorResultRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 监测任务id
  monitorTaskId: string(name='monitor_task_id'),
  // 页面大小(1-200)
  pageSize: long(name='page_size'),
  // 页码(>0)
  pageIndex: long(name='page_index'),
}

model QueryDirectmonitorResultResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 监测任务id
  monitorTaskId?: string(name='monitor_task_id'),
  // 当前页面监测结果数量
  resultCount?: long(name='result_count'),
  // 监测结果列表
  monitorResultList?: [ DirectMonitorResult ](name='monitor_result_list'),
}

/**
 * Description: 查询版权定向监测结果
 * Summary: 查询版权定向监测结果
 */
async function queryDirectmonitorResult(request: QueryDirectmonitorResultRequest): QueryDirectmonitorResultResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDirectmonitorResultEx(request, headers, runtime);
}

/**
 * Description: 查询版权定向监测结果
 * Summary: 查询版权定向监测结果
 */
async function queryDirectmonitorResultEx(request: QueryDirectmonitorResultRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDirectmonitorResultResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bccr.directmonitor.result.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateDciPreregistrationRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 作品名称
  workName: string(name='work_name'),
  // 作品类型
  workCategory: string(name='work_category'),
  // 推荐作品分类
  recommendWorkCategory?: string(name='recommend_work_category'),
  // 作品oss文件Id
  workFileId: string(name='work_file_id'),
  // 文件类型
  fileType: string(name='file_type'),
  // 创作信息
  creationInfo: DciCreationInfo(name='creation_info'),
  // 发表信息
  publicationInfo: DciPublicationInfo(name='publication_info'),
  // 作者姓名
  authorName: string(name='author_name'),
  // 作者署名
  authorSignature?: string(name='author_signature'),
  // 原创声明
  originalStatement?: string(name='original_statement'),
  // 权利信息
  rightInfo: DciRightInfo(name='right_info'),
  // 真实意愿表达信息
  preRegistrationTrueWill: string(name='pre_registration_true_will'),
  // dci用户id
  dciUserId: string(name='dci_user_id'),
  // 代理信息
  proxyData?: ProxyData(name='proxy_data'),
  // 幂等字段
  clientToken: string(name='client_token'),
  // 作品类型相似度
  categorySimilarRatio?: string(name='category_similar_ratio'),
  // 作品类型风险等级
  categoryRiskRank?: string(name='category_risk_rank'),
  // 著作权人用户id List
  copyrightOwnerIds: [ string ](name='copyright_owner_ids'),
  // DCI类型
  applyType?: string(name='apply_type'),
  // 渠道标签
  channelTerminal?: string(name='channel_terminal'),
  // 推荐分类明细信息
  recommendCategoryList?: [ RecommendCategoryDetail ](name='recommend_category_list'),
}

model CreateDciPreregistrationResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // dci内容id
  dciContentId?: string(name='dci_content_id'),
}

/**
 * Description: DCI预登记
 * Summary: dci预登记
 */
async function createDciPreregistration(request: CreateDciPreregistrationRequest): CreateDciPreregistrationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createDciPreregistrationEx(request, headers, runtime);
}

/**
 * Description: DCI预登记
 * Summary: dci预登记
 */
async function createDciPreregistrationEx(request: CreateDciPreregistrationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateDciPreregistrationResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bccr.dci.preregistration.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDciPreregistrationRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // dci用户id
  dciUserId?: string(name='dci_user_id'),
  // dci内容id
  dciContentId: string(name='dci_content_id'),
}

model QueryDciPreregistrationResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 预登记状态
  status?: string(name='status'),
  // 文件哈希
  fileHash?: string(name='file_hash'),
  // 文件哈希存证txHash
  fileHashTxHash?: string(name='file_hash_tx_hash'),
  // 文件哈希存证区块高度
  fileHashBlockHeight?: string(name='file_hash_block_height'),
  // dci编码
  dciCode?: string(name='dci_code'),
  // DCI码存证txHash
  dciCodeTxHash?: string(name='dci_code_tx_hash'),
  // DCI码存证高度
  dciCodeBlockHeight?: string(name='dci_code_block_height'),
  // DCI码fileHash存证txHash
  dciCodeFileTxHash?: string(name='dci_code_file_tx_hash'),
  // DCI码fileHash存证高度
  dciCodeFileBlockHeight?: string(name='dci_code_file_block_height'),
  // 预登记证书txhash
  preRegCertTxHash?: string(name='pre_reg_cert_tx_hash'),
  // 预登记证书存证高度
  preRegCertBlockHeight?: string(name='pre_reg_cert_block_height'),
  // 预登记取消txHash
  cancelTxHash?: string(name='cancel_tx_hash'),
  // 预登记取消存证高度
  cancelBlockHeight?: string(name='cancel_block_height'),
  // dciCode的可信时间戳信息
  dciCodeTsr?: string(name='dci_code_tsr'),
  // dciCode fileHash的可信时间戳信息
  dciCodeFileTsr?: string(name='dci_code_file_tsr'),
  // 预登记证书可信时间戳信息
  preRegCertTsr?: string(name='pre_reg_cert_tsr'),
  // 预登记证书oss fileId
  preRegCertFileId?: string(name='pre_reg_cert_file_id'),
  // 预登记证书fileHash
  preRegCertFileHash?: string(name='pre_reg_cert_file_hash'),
  // 预登记证书下载链接
  preRegCertUrl?: string(name='pre_reg_cert_url'),
  // 预览图oss fileId
  pngFileId?: string(name='png_file_id'),
  // 申请发码时间
  applyObtainDate?: string(name='apply_obtain_date'),
  // DCI码创建时间
  dciCodeObtainDate?: string(name='dci_code_obtain_date'),
  // 错误原因
  errorReason?: string(name='error_reason'),
  // 错误中文原因
  errorReasonCn?: string(name='error_reason_cn'),
  // 公式地址
  publicationUrl?: string(name='publication_url'),
  // DCI类型
  applyType?: string(name='apply_type'),
  // 系列图错误原因集合
  seriesDiagramErrorReasonList?: [ SeriesDiagramErrorReason ](name='series_diagram_error_reason_list'),
}

/**
 * Description: 查询dci预登记信息
 * Summary: 查询dci预登记信息
 */
async function queryDciPreregistration(request: QueryDciPreregistrationRequest): QueryDciPreregistrationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDciPreregistrationEx(request, headers, runtime);
}

/**
 * Description: 查询dci预登记信息
 * Summary: 查询dci预登记信息
 */
async function queryDciPreregistrationEx(request: QueryDciPreregistrationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDciPreregistrationResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bccr.dci.preregistration.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AddDciUserRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 用户名称
  certName: string(name='cert_name'),
  // 证件类型
  certificateType: string(name='certificate_type'),
  // 证件号
  certificateNumber: string(name='certificate_number'),
  // 证件正面OSS fileId
  certificateFrontFileId: string(name='certificate_front_file_id'),
  // 证件反面OSS fileId
  certificateBackFileId?: string(name='certificate_back_file_id'),
  // 法人名称
  legalPersonCertName?: string(name='legal_person_cert_name'),
  // 法人证件类型
  legalPersonCertType?: string(name='legal_person_cert_type'),
  // 法人证件号
  legalPersonCertNo?: string(name='legal_person_cert_no'),
  // 手机号
  phone: string(name='phone'),
  // 所属地区
  areaType: string(name='area_type'),
  // 代理信息
  proxyData?: ProxyData(name='proxy_data'),
  // 版权认证方式:UGC-用户生成内容，AIGC-AI生成内容，SOFTWARE_WORKS-软件作品认证，如果不传默认为UGC
  copyrightCertificationType?: string(name='copyright_certification_type'),
  // 幂等字段
  clientToken: string(name='client_token'),
  // 用户名称废弃
  userName?: string(name='user_name'),
  // 证件有效期限起始日期废弃
  certificateStartTime?: string(name='certificate_start_time'),
  // 证件有效期限终止日期废弃
  certificateEndTime?: string(name='certificate_end_time'),
  // 证件正面OSS fileId废弃
  certificateFrontFilePath?: string(name='certificate_front_file_path'),
  // 证件反面OSS filePath废弃
  certificateBackFilePath?: string(name='certificate_back_file_path'),
  // 用户身份开始时间废弃
  identityStartTime?: string(name='identity_start_time'),
  // 用户类型废弃
  userType?: string(name='user_type'),
  // 地址废弃
  address?: string(name='address'),
}

model AddDciUserResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // dci用户id
  dciUserId?: string(name='dci_user_id'),
  // dci用户状态
  dciUserStatus?: string(name='dci_user_status'),
}

/**
 * Description: 注册dci账号
 * Summary: 注册dci账号
 */
async function addDciUser(request: AddDciUserRequest): AddDciUserResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return addDciUserEx(request, headers, runtime);
}

/**
 * Description: 注册dci账号
 * Summary: 注册dci账号
 */
async function addDciUserEx(request: AddDciUserRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddDciUserResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bccr.dci.user.add', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model RetryDciPreregistrationRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // dci用户id
  dciUserId: string(name='dci_user_id'),
  // dci内容id
  dciContentId: string(name='dci_content_id'),
  // 代理信息
  proxyData: ProxyData(name='proxy_data'),
  // 幂等信息
  clientToken: string(name='client_token'),
}

model RetryDciPreregistrationResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: dci预登记再确认
 * Summary: dci预登记再确认
 */
async function retryDciPreregistration(request: RetryDciPreregistrationRequest): RetryDciPreregistrationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return retryDciPreregistrationEx(request, headers, runtime);
}

/**
 * Description: dci预登记再确认
 * Summary: dci预登记再确认
 */
async function retryDciPreregistrationEx(request: RetryDciPreregistrationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RetryDciPreregistrationResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bccr.dci.preregistration.retry', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDciUserRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 证件类型
  certificateType: string(name='certificate_type'),
  // 证件号
  certificateNumber: string(name='certificate_number'),
  // 手机号
  phone: string(name='phone'),
  // 版权认证方式:UGC-用户生成内容，AIGC-AI生成内容，SOFTWARE_WORKS：软件作品认证，如果不传默认为UGC
  copyrightCertificationType?: string(name='copyright_certification_type'),
}

model QueryDciUserResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // dci用户id
  dciUserId?: string(name='dci_user_id'),
  // dci用户状态
  dciUserStatus?: string(name='dci_user_status'),
  // 名称
  name?: string(name='name'),
  // 证件类型
  certificateType?: string(name='certificate_type'),
  // 证件号
  certificateNumber?: string(name='certificate_number'),
  // 地址
  address?: string(name='address'),
  // 证件有效期开始时间
  certStartTime?: string(name='cert_start_time'),
  // 证件有效期结束时间
  certEndTime?: string(name='cert_end_time'),
  // 法人名称
  legalPerson?: string(name='legal_person'),
}

/**
 * Description: 查询dci账号信息
 * Summary: 查询dci账号信息
 */
async function queryDciUser(request: QueryDciUserRequest): QueryDciUserResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDciUserEx(request, headers, runtime);
}

/**
 * Description: 查询dci账号信息
 * Summary: 查询dci账号信息
 */
async function queryDciUserEx(request: QueryDciUserRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDciUserResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bccr.dci.user.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDciPreregpublicationRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 作品id
  dciContentId: string(name='dci_content_id'),
}

model QueryDciPreregpublicationResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 供核验公示地址
  publicationUrl?: string(name='publication_url'),
}

/**
 * Description: Dci预登记公示地址查询
 * Summary: Dci预登记公示地址查询
 */
async function queryDciPreregpublication(request: QueryDciPreregpublicationRequest): QueryDciPreregpublicationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDciPreregpublicationEx(request, headers, runtime);
}

/**
 * Description: Dci预登记公示地址查询
 * Summary: Dci预登记公示地址查询
 */
async function queryDciPreregpublicationEx(request: QueryDciPreregpublicationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDciPreregpublicationResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bccr.dci.preregpublication.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateDciUserRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // dci用户ID
  dciUserId: string(name='dci_user_id'),
  // 证件正面oss fileId
  certFrontFileId: string(name='cert_front_file_id'),
  // 证件背面oss fileId
  certBackFileId?: string(name='cert_back_file_id'),
  // 手机号
  phone?: string(name='phone'),
  // 客户端令牌
  clientToken?: string(name='client_token'),
  // 版权认证方式:UGC-用户生成内容，AIGC-AI生成内容，SOFTWARE_WORKS-软件作品认证，如果不传默认为UGC
  copyrightCertificationType?: string(name='copyright_certification_type'),
}

model UpdateDciUserResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 更新dci账号信息
 * Summary: 更新dci账号信息
 */
async function updateDciUser(request: UpdateDciUserRequest): UpdateDciUserResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateDciUserEx(request, headers, runtime);
}

/**
 * Description: 更新dci账号信息
 * Summary: 更新dci账号信息
 */
async function updateDciUserEx(request: UpdateDciUserRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateDciUserResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bccr.dci.user.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateDciRegistrationRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // DC123456
  dciContentId: string(name='dci_content_id'),
  // 数登申请声明
  explanationInfo: DciExplanationInfo(name='explanation_info'),
  // 补充文件相关信息
  additionalFileInfo?: AdditionalFileInfo(name='additional_file_info'),
  // 发票信息--当前支持普票
  invoiceInfo: InvoiceInfo(name='invoice_info'),
  // 幂等字段
  clientToken: string(name='client_token'),
  // 废弃待删除
  creationStatement?: string(name='creation_statement'),
  // 废弃待删除
  ancillaryEvidencePathList?: [ string ](name='ancillary_evidence_path_list'),
}

model CreateDciRegistrationResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 数登申请id
  digitalRegisterId?: string(name='digital_register_id'),
}

/**
 * Description: 发起数登申请
 * Summary: 发起数登申请
 */
async function createDciRegistration(request: CreateDciRegistrationRequest): CreateDciRegistrationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createDciRegistrationEx(request, headers, runtime);
}

/**
 * Description: 发起数登申请
 * Summary: 发起数登申请
 */
async function createDciRegistrationEx(request: CreateDciRegistrationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateDciRegistrationResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bccr.dci.registration.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDciRegistrationsubmitRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // dci内容id
  dciContentId: string(name='dci_content_id'),
}

model QueryDciRegistrationsubmitResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 数登提交状态
  contentStatus?: string(name='content_status'),
}

/**
 * Description: 已废弃接口
 * Summary: 已废弃接口
 */
async function queryDciRegistrationsubmit(request: QueryDciRegistrationsubmitRequest): QueryDciRegistrationsubmitResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDciRegistrationsubmitEx(request, headers, runtime);
}

/**
 * Description: 已废弃接口
 * Summary: 已废弃接口
 */
async function queryDciRegistrationsubmitEx(request: QueryDciRegistrationsubmitRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDciRegistrationsubmitResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bccr.dci.registrationsubmit.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDciRegistrationRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 数登申请id
  digitalRegisterId?: string(name='digital_register_id'),
  // dci申领id
  dciContentId?: string(name='dci_content_id'),
}

model QueryDciRegistrationResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 废弃待删除
  contentStatus?: string(name='content_status'),
  // 废弃待删除
  registerCertTxHash?: string(name='register_cert_tx_hash'),
  // 废弃待删除
  registerCertBlockHeight?: string(name='register_cert_block_height'),
  // 废弃待删除
  registerCertTsr?: string(name='register_cert_tsr'),
  // 废弃待删除
  registerCertPngFileId?: string(name='register_cert_png_file_id'),
  // 废弃待删除
  registerSampleFileId?: string(name='register_sample_file_id'),
  // 废弃待删除
  registerSamplePngFileId?: string(name='register_sample_png_file_id'),
  // 废弃待删除
  registerDownloadTimesLeft?: long(name='register_download_times_left'),
  // 废弃待删除
  errorReason?: string(name='error_reason'),
  // 废弃待删除
  errorReasonCn?: string(name='error_reason_cn'),
  // 废弃待删除
  invoiceFileIdList?: [ string ](name='invoice_file_id_list'),
  // 废弃待删除
  applyRegisterTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='apply_register_time'),
  // 数登登记号
  regNumber?: string(name='reg_number'),
  // 数登id
  digitalRegisterId?: string(name='digital_register_id'),
  // dci申领id
  dciContentId?: string(name='dci_content_id'),
  // 数登状态
  digitalRegisterStatus?: string(name='digital_register_status'),
  // 数登申请时间
  digitalRegisterApplyTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='digital_register_apply_time'),
  // 数登完成时间
  digitalRegisterCompletionTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='digital_register_completion_time'),
  // 数登证书预览图url
  digitalRegisterCertPngUrl?: string(name='digital_register_cert_png_url'),
  // 样本证书预览图url
  digitalRegisterSamplePngUrl?: string(name='digital_register_sample_png_url'),
  // 证书本月剩余下载次数
  downloadTimesLeft?: long(name='download_times_left'),
  // 发票下载链接list
  invoiceUrlList?: [ string ](name='invoice_url_list'),
  // 数登失败详情
  failDetail?: string(name='fail_detail'),
  // 补正类型
  amendType?: string(name='amend_type'),
  // 用户申请表url
  applyFormUrl?: string(name='apply_form_url'),
  // 数登流水号
  flowNumber?: string(name='flow_number'),
}

/**
 * Description: 查询数登结果
 * Summary: 查询数登结果
 */
async function queryDciRegistration(request: QueryDciRegistrationRequest): QueryDciRegistrationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDciRegistrationEx(request, headers, runtime);
}

/**
 * Description: 查询数登结果
 * Summary: 查询数登结果
 */
async function queryDciRegistrationEx(request: QueryDciRegistrationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDciRegistrationResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bccr.dci.registration.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetDciRegistrationcertRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 数登申请id
  digitalRegisterId: string(name='digital_register_id'),
  // 幂等字段
  clientToken: string(name='client_token'),
  // 废弃待删除
  dciContentId?: string(name='dci_content_id'),
}

model GetDciRegistrationcertResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 废弃待删除
  certStatus?: string(name='cert_status'),
  // 废弃待删除
  certificateUrl?: string(name='certificate_url'),
  // 废弃待删除
  errorReason?: string(name='error_reason'),
  // 废弃待删除
  errorReasonCn?: string(name='error_reason_cn'),
  // 数登状态
  digitalRegisterStatus?: string(name='digital_register_status'),
  // 数登证书&样本证书压缩包url
  downloadUrl?: string(name='download_url'),
  // 剩余下载次数
  downloadTimesLeft?: long(name='download_times_left'),
  // 失败详情
  failDetail?: string(name='fail_detail'),
}

/**
 * Description: 获取数登证书下载链接
 * Summary: 获取数登证书下载链接
 */
async function getDciRegistrationcert(request: GetDciRegistrationcertRequest): GetDciRegistrationcertResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getDciRegistrationcertEx(request, headers, runtime);
}

/**
 * Description: 获取数登证书下载链接
 * Summary: 获取数登证书下载链接
 */
async function getDciRegistrationcertEx(request: GetDciRegistrationcertRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetDciRegistrationcertResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bccr.dci.registrationcert.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDciContentsecurityRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 任务ID(数登流水号)
  flowNumber: string(name='flow_number'),
  // 客户端令牌
  clientToken?: string(name='client_token'),
  // 任务Id, 已废弃
  taskId?: string(name='task_id'),
  // 作品名，已废弃
  workName?: string(name='work_name'),
  // 作品Hash，已废弃
  workHash?: string(name='work_hash'),
  // 作品分类，已废弃
  workCategory?: string(name='work_category'),
}

model QueryDciContentsecurityResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 作品类型
  workType?: string(name='work_type'),
  // 审查结果
  reviewData?: ReviewData(name='review_data'),
}

/**
 * Description: 查询内容安全审核详情
 * Summary: 查询内容安全审核详情
 */
async function queryDciContentsecurity(request: QueryDciContentsecurityRequest): QueryDciContentsecurityResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDciContentsecurityEx(request, headers, runtime);
}

/**
 * Description: 查询内容安全审核详情
 * Summary: 查询内容安全审核详情
 */
async function queryDciContentsecurityEx(request: QueryDciContentsecurityRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDciContentsecurityResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bccr.dci.contentsecurity.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateDciRegistrationcertRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 任务ID
  taskId: string(name='task_id'),
  // 版权用户ID
  userId: string(name='user_id'),
  // DCI码
  dciCode: string(name='dci_code'),
  // 登记号
  regNumber: string(name='reg_number'),
  // 二维码
  qrCodeUrl: string(name='qr_code_url'),
  // 客户端token
  clientToken?: string(name='client_token'),
}

model CreateDciRegistrationcertResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 创建数字登记证书
 * Summary: 创建数字登记证书
 */
async function createDciRegistrationcert(request: CreateDciRegistrationcertRequest): CreateDciRegistrationcertResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createDciRegistrationcertEx(request, headers, runtime);
}

/**
 * Description: 创建数字登记证书
 * Summary: 创建数字登记证书
 */
async function createDciRegistrationcertEx(request: CreateDciRegistrationcertRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateDciRegistrationcertResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bccr.dci.registrationcert.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDciRegistrationcertRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 任务ID
  taskId: string(name='task_id'),
}

model QueryDciRegistrationcertResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 证书信息
  certificateData?: CertificateData(name='certificate_data'),
}

/**
 * Description: 已废弃接口
 * Summary: 已废弃接口
 */
async function queryDciRegistrationcert(request: QueryDciRegistrationcertRequest): QueryDciRegistrationcertResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDciRegistrationcertEx(request, headers, runtime);
}

/**
 * Description: 已废弃接口
 * Summary: 已废弃接口
 */
async function queryDciRegistrationcertEx(request: QueryDciRegistrationcertRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDciRegistrationcertResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bccr.dci.registrationcert.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetDciPayurlRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 数登申请id
  digitalRegisterId: string(name='digital_register_id'),
  // 幂等字段
  clientToken: string(name='client_token'),
  // 废弃待删除
  dciUserId?: string(name='dci_user_id'),
  // 废弃待删除
  dciContentId?: string(name='dci_content_id'),
  // 废弃待删除
  payMent?: string(name='pay_ment'),
  // 废弃待删除
  invoiceInfo?: InvoiceInfo(name='invoice_info'),
}

model GetDciPayurlResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 支付链接
  payUrl?: string(name='pay_url'),
}

/**
 * Description: 发起支付，获取支付链接
 * Summary: 数登支付-发起支付
 */
async function getDciPayurl(request: GetDciPayurlRequest): GetDciPayurlResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getDciPayurlEx(request, headers, runtime);
}

/**
 * Description: 发起支付，获取支付链接
 * Summary: 数登支付-发起支付
 */
async function getDciPayurlEx(request: GetDciPayurlRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetDciPayurlResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bccr.dci.payurl.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDciPayRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 数登申请id
  digitalRegisterId: string(name='digital_register_id'),
  // 废弃待删除
  dciUserId?: string(name='dci_user_id'),
  // 废弃待删除
  dciContentId?: string(name='dci_content_id'),
}

model QueryDciPayResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 支付状态
  // （INIT 用户点击支付，待获取链接；GET_PAY_URL_FAIL 获取支付链接失败；PAY_FAIL 支付失败；TIMEOUT 支付超时；PAY_SUCCESS 支付成功；PAYING 支付中；PAY_EXCEPTION	支付异常，待重试）
  payStatus?: string(name='pay_status'),
  // 废弃待删除
  payState?: string(name='pay_state'),
}

/**
 * Description: 查询数登支付结果
 * Summary: 查询数登支付结果
 */
async function queryDciPay(request: QueryDciPayRequest): QueryDciPayResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDciPayEx(request, headers, runtime);
}

/**
 * Description: 查询数登支付结果
 * Summary: 查询数登支付结果
 */
async function queryDciPayEx(request: QueryDciPayRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDciPayResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bccr.dci.pay.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CallbackDciPayresultRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 与中心约定的任务ID，同一个作品可能会发起多次登记
  taskId: string(name='task_id'),
  // 平台Id
  appId: string(name='app_id'),
  // 订单ID 
  orderId: string(name='order_id'),
  // 支付方式 (ALIPAY,0,支付宝)
  payMent: string(name='pay_ment'),
  // 订单金额
  money: string(name='money'),
  // 结果描述，如：支付成功
  resultContent: string(name='result_content'),
  // 状态，2001代表支付成功
  code: string(name='code'),
}

model CallbackDciPayresultResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 支付结果回调
 * Summary: 数登支付-支付结果回调
 */
async function callbackDciPayresult(request: CallbackDciPayresultRequest): CallbackDciPayresultResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return callbackDciPayresultEx(request, headers, runtime);
}

/**
 * Description: 支付结果回调
 * Summary: 数登支付-支付结果回调
 */
async function callbackDciPayresultEx(request: CallbackDciPayresultRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CallbackDciPayresultResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bccr.dci.payresult.callback', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model RefuseDciRegistrationRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 任务ID
  taskId: string(name='task_id'),
  // 复审失败原因
  code: string(name='code'),
  // 失败详情
  failDetail: string(name='fail_detail'),
  // 幂等字段
  clientToken: string(name='client_token'),
}

model RefuseDciRegistrationResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 数登审核失败结果回调
 * Summary: 数登审核失败结果回调
 */
async function refuseDciRegistration(request: RefuseDciRegistrationRequest): RefuseDciRegistrationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return refuseDciRegistrationEx(request, headers, runtime);
}

/**
 * Description: 数登审核失败结果回调
 * Summary: 数登审核失败结果回调
 */
async function refuseDciRegistrationEx(request: RefuseDciRegistrationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RefuseDciRegistrationResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bccr.dci.registration.refuse', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryNotaryBidreasonRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 公证处 ID
  orgId: string(name='org_id'),
}

model QueryNotaryBidreasonResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 申办事由列表
  bidReasonList?: [ BidReason ](name='bid_reason_list'),
}

/**
 * Description: 版权平台获取申办事由配置
 * Summary: 获取申办事由配置
 */
async function queryNotaryBidreason(request: QueryNotaryBidreasonRequest): QueryNotaryBidreasonResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryNotaryBidreasonEx(request, headers, runtime);
}

/**
 * Description: 版权平台获取申办事由配置
 * Summary: 获取申办事由配置
 */
async function queryNotaryBidreasonEx(request: QueryNotaryBidreasonRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryNotaryBidreasonResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bccr.notary.bidreason.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryNotaryDocumenttosignRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 申请人信息
  applicantList: [ NotaryUser ](name='applicant_list'),
  // 经办人信息
  agent: NotaryUser(name='agent'),
  // 送达信息
  receiveInfo: ReceiveInfo(name='receive_info'),
  // 保全内容
  preservation: string(name='preservation'),
  // 公证处id
  orgId: string(name='org_id'),
}

model QueryNotaryDocumenttosignResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 需要用户签署的文件列表
  signDocumentList?: [ SignDocument ](name='sign_document_list'),
  // 生成文件的时间，需要在提交申办接口传入
  previewTime?: long(name='preview_time'),
}

/**
 * Description: 获取签署文件
 * Summary: 获取签署文件
 */
async function queryNotaryDocumenttosign(request: QueryNotaryDocumenttosignRequest): QueryNotaryDocumenttosignResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryNotaryDocumenttosignEx(request, headers, runtime);
}

/**
 * Description: 获取签署文件
 * Summary: 获取签署文件
 */
async function queryNotaryDocumenttosignEx(request: QueryNotaryDocumenttosignRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryNotaryDocumenttosignResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bccr.notary.documenttosign.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ApplyNotaryOrderRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 公证出证申请信息
  notaryApplyInfo: NotaryApplyInfo(name='notary_apply_info'),
  // 公证出证收件信息
  notaryReceiveInfo: NotaryReceiveInfo(name='notary_receive_info'),
  // 用户预览签署文件的时间
  previewTime: long(name='preview_time'),
  // 用户签署文件时间
  agreeTime: long(name='agree_time'),
  // 客户端令牌
  clientToken?: string(name='client_token'),
}

model ApplyNotaryOrderResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 出证申请订单ID
  notaryOrderId?: string(name='notary_order_id'),
  // 订单状态
  orderStatus?: string(name='order_status'),
  // 支付二维码链接
  payUrl?: string(name='pay_url'),
  // 支付二维码过期时间
  payUrlExpireTime?: long(name='pay_url_expire_time'),
}

/**
 * Description: 提交申办订单
 * Summary: 提交申办订单
 */
async function applyNotaryOrder(request: ApplyNotaryOrderRequest): ApplyNotaryOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return applyNotaryOrderEx(request, headers, runtime);
}

/**
 * Description: 提交申办订单
 * Summary: 提交申办订单
 */
async function applyNotaryOrderEx(request: ApplyNotaryOrderRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ApplyNotaryOrderResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bccr.notary.order.apply', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryNotaryPayurlRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 订单ID
  notaryOrderId: string(name='notary_order_id'),
}

model QueryNotaryPayurlResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 支付二维码链接
  payUrl?: string(name='pay_url'),
  // 支付二维码链接到期时间
  payUrlExpireTime?: long(name='pay_url_expire_time'),
}

/**
 * Description: 公证出证重新获取支付链接
 * Summary: 重新获取支付链接
 */
async function queryNotaryPayurl(request: QueryNotaryPayurlRequest): QueryNotaryPayurlResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryNotaryPayurlEx(request, headers, runtime);
}

/**
 * Description: 公证出证重新获取支付链接
 * Summary: 重新获取支付链接
 */
async function queryNotaryPayurlEx(request: QueryNotaryPayurlRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryNotaryPayurlResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bccr.notary.payurl.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryNotaryFeedetailRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 公证处ID
  orgId: string(name='org_id'),
  // 公证书类型
  orderType: string(name='order_type'),
  // 纸质公证书份数
  copies?: long(name='copies'),
  // 证据列表
  evidInfoList: [ EvidInfo ](name='evid_info_list'),
}

model QueryNotaryFeedetailResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 本次公证出证需支付的总费用
  totalPriceRmbFen?: long(name='total_price_rmb_fen'),
  // 本次申请中每一类证据的数量明细列表
  notaryFeeEvidTypeDataList?: [ NotaryFeeEvidTypeData ](name='notary_fee_evid_type_data_list'),
  // 本次需支付费用的分项明细列表
  notaryFeeItemList?: [ NotaryFeeItem ](name='notary_fee_item_list'),
  // 收费规则描述
  notaryFeeRuleList?: [ string ](name='notary_fee_rule_list'),
}

/**
 * Description: 公证出证获取收费标准和明细
 * Summary: 获取收费标准和明细
 */
async function queryNotaryFeedetail(request: QueryNotaryFeedetailRequest): QueryNotaryFeedetailResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryNotaryFeedetailEx(request, headers, runtime);
}

/**
 * Description: 公证出证获取收费标准和明细
 * Summary: 获取收费标准和明细
 */
async function queryNotaryFeedetailEx(request: QueryNotaryFeedetailRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryNotaryFeedetailResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bccr.notary.feedetail.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryNotaryOrderRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // acrbasis订单ID
  notaryOrderId: string(name='notary_order_id'),
}

model QueryNotaryOrderResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 订单状态
  status?: string(name='status'),
  // 支付状态最后更新时间戳
  payTime?: long(name='pay_time'),
  // 用户预览签署文件的时间戳
  previewTime?: long(name='preview_time'),
  // 支付状态
  payStatus?: string(name='pay_status'),
  // 补充材料说明，当需要补充材料时提供
  materialRemarks?: string(name='material_remarks'),
  // 出证的公证书信息
  notaryInfo?: NotaryInfo(name='notary_info'),
  // 拒绝办理信息
  rejectInfo?: RefuseInfo(name='reject_info'),
  // 终止信息
  terminalInfo?: RefuseInfo(name='terminal_info'),
  // 支付方式
  payType?: string(name='pay_type'),
  // 用户应付的金额
  payableAmount?: long(name='payable_amount'),
  // 用户实际支付的金额
  paidAmount?: long(name='paid_amount'),
  // 公证处物流信息
  notaryExpressList?: [ ExpressInfo ](name='notary_express_list'),
  // 发票物流信息
  invoiceExpressList?: [ ExpressInfo ](name='invoice_express_list'),
}

/**
 * Description: 公证出证查询申办订单接口
 * Summary: 查询申办订单接口
 */
async function queryNotaryOrder(request: QueryNotaryOrderRequest): QueryNotaryOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryNotaryOrderEx(request, headers, runtime);
}

/**
 * Description: 公证出证查询申办订单接口
 * Summary: 查询申办订单接口
 */
async function queryNotaryOrderEx(request: QueryNotaryOrderRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryNotaryOrderResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bccr.notary.order.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UploadNotaryAttachmentRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 订单ID
  notaryOrderId: string(name='notary_order_id'),
  // 材料文件
  materialFileList: [ string ](name='material_file_list'),
}

model UploadNotaryAttachmentResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 公证出证申请出证材料补齐
 * Summary: 申请出证材料补齐
 */
async function uploadNotaryAttachment(request: UploadNotaryAttachmentRequest): UploadNotaryAttachmentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return uploadNotaryAttachmentEx(request, headers, runtime);
}

/**
 * Description: 公证出证申请出证材料补齐
 * Summary: 申请出证材料补齐
 */
async function uploadNotaryAttachmentEx(request: UploadNotaryAttachmentRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UploadNotaryAttachmentResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bccr.notary.attachment.upload', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model OperateNotaryOrderRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 订单ID
  notaryOrderId: string(name='notary_order_id'),
  // 更新状态类型
  type: string(name='type'),
}

model OperateNotaryOrderResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 公证出证更新申办状态
 * Summary: 更新申办状态
 */
async function operateNotaryOrder(request: OperateNotaryOrderRequest): OperateNotaryOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return operateNotaryOrderEx(request, headers, runtime);
}

/**
 * Description: 公证出证更新申办状态
 * Summary: 更新申办状态
 */
async function operateNotaryOrderEx(request: OperateNotaryOrderRequest, headers: map[string]string, runtime: Util.RuntimeOptions): OperateNotaryOrderResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bccr.notary.order.operate', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDciPreviewRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // dci作品预览id
  dciPreviewId?: string(name='dci_preview_id'),
  // basis的dci content id
  dciBasisId?: string(name='dci_basis_id'),
}

model QueryDciPreviewResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 作品预览处理状态
  filePreviewStatus?: string(name='file_preview_status'),
  // 作品片段预览状态
  filePartPreviewStatus?: string(name='file_part_preview_status'),
  // 作品预览处理结果
  filePreviewUrl?: string(name='file_preview_url'),
  // 作品预览截取片段结果
  filePartPreviewUrl?: string(name='file_part_preview_url'),
  // 作品名称
  workName?: string(name='work_name'),
  // dci码
  dciCode?: string(name='dci_code'),
  // 文件类型
  fileType?: string(name='file_type'),
  // 当前查询时间
  queryTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='query_time'),
  // 数登登记号
  regNumber?: string(name='reg_number'),
  // 著作权人名称列表
  copyrightOwnerNames?: [ string ](name='copyright_owner_names'),
  // 系列图预览地址
  seriesDiagramPreviewList?: [ string ](name='series_diagram_preview_list'),
}

/**
 * Description: 查询DCI作品预览结果
 * Summary: 查询DCI作品预览结果
 */
async function queryDciPreview(request: QueryDciPreviewRequest): QueryDciPreviewResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDciPreviewEx(request, headers, runtime);
}

/**
 * Description: 查询DCI作品预览结果
 * Summary: 查询DCI作品预览结果
 */
async function queryDciPreviewEx(request: QueryDciPreviewRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDciPreviewResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bccr.dci.preview.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model RetryDciRegistrationRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 待补正数登申请id
  digitalRegisterId: string(name='digital_register_id'),
  // 替换dci申领id
  dciContentId?: string(name='dci_content_id'),
  // 数登申请声明
  explanationInfo: DciExplanationInfo(name='explanation_info'),
  // 补充文件信息
  additionalFileInfo?: AdditionalFileInfo(name='additional_file_info'),
  // 幂等字段
  clientToken: string(name='client_token'),
}

model RetryDciRegistrationResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 补正数登申请
 * Summary: 补正数登申请
 */
async function retryDciRegistration(request: RetryDciRegistrationRequest): RetryDciRegistrationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return retryDciRegistrationEx(request, headers, runtime);
}

/**
 * Description: 补正数登申请
 * Summary: 补正数登申请
 */
async function retryDciRegistrationEx(request: RetryDciRegistrationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RetryDciRegistrationResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bccr.dci.registration.retry', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CloseDciRegistrationRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 数登id
  digitalRegisterId: string(name='digital_register_id'),
  // 退费人名称
  name: string(name='name'),
  // 联系手机号
  mobileNo: string(name='mobile_no'),
  // 幂等字段
  clientToken: string(name='client_token'),
}

model CloseDciRegistrationResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 数登停止申请
 * Summary: 数登停止申请
 */
async function closeDciRegistration(request: CloseDciRegistrationRequest): CloseDciRegistrationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return closeDciRegistrationEx(request, headers, runtime);
}

/**
 * Description: 数登停止申请
 * Summary: 数登停止申请
 */
async function closeDciRegistrationEx(request: CloseDciRegistrationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CloseDciRegistrationResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bccr.dci.registration.close', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AddDciUsernocertRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 用户名称
  certificateName: string(name='certificate_name'),
  // 证件类型
  certificateType: string(name='certificate_type'),
  // 证件号
  certificateNumber: string(name='certificate_number'),
  // 企业用户必填
  legalPersonCertName?: string(name='legal_person_cert_name'),
  // 企业用户必填
  legalPersonCertType?: string(name='legal_person_cert_type'),
  // 企业用户必填
  legalPersonCertNo?: string(name='legal_person_cert_no'),
  // 手机号
  phone: string(name='phone'),
  // 代理信息
  proxyData?: ProxyData(name='proxy_data'),
  // 幂等字段
  clientToken: string(name='client_token'),
  // 版权认证方式:UGC-用户生成内容，AIGC-AI生成内容，SOFTWARE_WORKS-软件作品认证，如果不传默认为UGC
  copyrightCertificationType?: string(name='copyright_certification_type'),
}

model AddDciUsernocertResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // dci用户id
  dciUserId?: string(name='dci_user_id'),
  // dci用户状态
  dciUserStatus?: string(name='dci_user_status'),
}

/**
 * Description: dci用户无需证件注册
 * Summary: dci用户无需证件注册
 */
async function addDciUsernocert(request: AddDciUsernocertRequest): AddDciUsernocertResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return addDciUsernocertEx(request, headers, runtime);
}

/**
 * Description: dci用户无需证件注册
 * Summary: dci用户无需证件注册
 */
async function addDciUsernocertEx(request: AddDciUsernocertRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddDciUsernocertResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bccr.dci.usernocert.add', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDciSimilarfileRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 文件下载凭证
  workFileId: string(name='work_file_id'),
}

model QueryDciSimilarfileResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 文件下载链接
  workDownloadUrl?: string(name='work_download_url'),
}

/**
 * Description: 查询相似作品下载链接
 * Summary: 查询相似作品下载链接
 */
async function queryDciSimilarfile(request: QueryDciSimilarfileRequest): QueryDciSimilarfileResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDciSimilarfileEx(request, headers, runtime);
}

/**
 * Description: 查询相似作品下载链接
 * Summary: 查询相似作品下载链接
 */
async function queryDciSimilarfileEx(request: QueryDciSimilarfileRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDciSimilarfileResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bccr.dci.similarfile.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ApplyDciPromotionRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 联系人姓名
  contactName: string(name='contact_name'),
  // 联系人电话
  contactPhone: string(name='contact_phone'),
  // dci ID
  dciContentId: string(name='dci_content_id'),
  // 幂等字段
  clientToken: string(name='client_token'),
  // 推广渠道
  promotionWay: string(name='promotion_way'),
}

model ApplyDciPromotionResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // basis数据ID
  apiTaskId?: string(name='api_task_id'),
}

/**
 * Description: 申请渠道推广
 * Summary: 申请渠道推广
 */
async function applyDciPromotion(request: ApplyDciPromotionRequest): ApplyDciPromotionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return applyDciPromotionEx(request, headers, runtime);
}

/**
 * Description: 申请渠道推广
 * Summary: 申请渠道推广
 */
async function applyDciPromotionEx(request: ApplyDciPromotionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ApplyDciPromotionResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bccr.dci.promotion.apply', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AddContentRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 文件id
  fileId: string(name='file_id'),
  // 内容标题
  title: string(name='title'),
  // 文件类型
  type: string(name='type'),
  // 内容标签列表
  keywords?: [ string ](name='keywords'),
  // 内容描述
  description?: string(name='description'),
  // 内容封面文件id
  coverFileId?: string(name='cover_file_id'),
  // 播放列表实体：包括名称和各种授权维权信息
  playListEntity: PlayListEntity(name='play_list_entity'),
  // 客户端token，幂等号，用来保证并发请求幂等性
  clientToken?: string(name='client_token'),
}

model AddContentResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 视频内容id
  contentId?: string(name='content_id'),
}

/**
 * Description: 添加发布视频内容
 * Summary: 发布视频内容
 */
async function addContent(request: AddContentRequest): AddContentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return addContentEx(request, headers, runtime);
}

/**
 * Description: 添加发布视频内容
 * Summary: 发布视频内容
 */
async function addContentEx(request: AddContentRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddContentResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bccr.content.add', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryContentStatusRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 视频内容id
  contentId: string(name='content_id'),
}

model QueryContentStatusResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 视频内容id
  contentId?: string(name='content_id'),
  // 视频状态
  status?: string(name='status'),
  // 内容标题
  title?: string(name='title'),
  // 内容类型
  type?: string(name='type'),
  // 标签列表
  keywords?: [ string ](name='keywords'),
  // 内容描述
  description?: string(name='description'),
  // 内容封面文件地址
  coverUrl?: string(name='cover_url'),
  // 存证id
  registerId?: string(name='register_id'),
  // 内容授权合同文件地址
  authPdfUrl?: string(name='auth_pdf_url'),
  // 播放列表名称
  playListName?: string(name='play_list_name'),
}

/**
 * Description: 查询视频内容状态
 * Summary: 查询视频内容状态
 */
async function queryContentStatus(request: QueryContentStatusRequest): QueryContentStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryContentStatusEx(request, headers, runtime);
}

/**
 * Description: 查询视频内容状态
 * Summary: 查询视频内容状态
 */
async function queryContentStatusEx(request: QueryContentStatusRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryContentStatusResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bccr.content.status.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryContentStatisticsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 内容id列表
  contentId: string(name='content_id'),
  // 起始日期时间戳
  startTime: long(name='start_time'),
  // 截止日期时间戳
  endTime: long(name='end_time'),
}

model QueryContentStatisticsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 总观看次数
  totalViews?: string(name='total_views'),
  // 总观看时长
  totalViewDuration?: string(name='total_view_duration'),
  // 总平均观看时长
  totalAverageViewDuration?: string(name='total_average_view_duration'),
  // 总预计收入
  totalRevenue?: string(name='total_revenue'),
  // 每日详细统计列表
  dayStatisticsList?: [ DayStatisticsInfo ](name='day_statistics_list'),
}

/**
 * Description: 查询视频内容统计数据
 * Summary: 查询视频内容统计
 */
async function queryContentStatistics(request: QueryContentStatisticsRequest): QueryContentStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryContentStatisticsEx(request, headers, runtime);
}

/**
 * Description: 查询视频内容统计数据
 * Summary: 查询视频内容统计
 */
async function queryContentStatisticsEx(request: QueryContentStatisticsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryContentStatisticsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bccr.content.statistics.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryContentBatchstatisticsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 内容id列表
  contentIdList: [ string ](name='content_id_list'),
  // 起始日期时间戳
  startTime: long(name='start_time'),
  // 截止日期时间戳
  endTime: long(name='end_time'),
}

model QueryContentBatchstatisticsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 出海视频统计数据列表
  overseaContentStatisticsList?: [ OverseaContentStatistics ](name='oversea_content_statistics_list'),
}

/**
 * Description: 批量查询视频内容统计数据
 * Summary: 批量查询视频统计信息
 */
async function queryContentBatchstatistics(request: QueryContentBatchstatisticsRequest): QueryContentBatchstatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryContentBatchstatisticsEx(request, headers, runtime);
}

/**
 * Description: 批量查询视频内容统计数据
 * Summary: 批量查询视频统计信息
 */
async function queryContentBatchstatisticsEx(request: QueryContentBatchstatisticsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryContentBatchstatisticsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bccr.content.batchstatistics.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model PublishGoodRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 文件id,最长64个字符
  fileId: string(name='file_id'),
  // 商品标题，最长64个字符
  title: string(name='title'),
  // 商品名称
  goodsName: string(name='goods_name'),
  // 商品分类
  classification?: string(name='classification'),
  // 售价（分）
  standardPriceInCent: long(name='standard_price_in_cent'),
  // 上架/下架，默认上架
  goodsStatus?: string(name='goods_status'),
  // 发布时间，默认直接发布
  publishTime?: long(name='publish_time'),
  // 授权期限起始时间
  authStartTime: long(name='auth_start_time'),
  // 授权期限结束时间（传-1 则为永久）
  authEndTime: long(name='auth_end_time'),
  // 是否是作者
  isAuthor: boolean(name='is_author'),
  // 作者姓名，如果isAuthor为false则必填，最长30个字符
  authorCertName?: string(name='author_cert_name'),
  // 作者身份证号,如果isAuthor为false则必填
  authorCertNo?: string(name='author_cert_no'),
  // 幂等号，可以保证请求的幂等性。从您的客户端生成一个参数值，确保不同请求间该参数值唯一。clientToken只支持ASCII字符，且不能超过64个字符。更多详情，请参见如何保证幂等性。
  clientToken?: string(name='client_token'),
  // 授权信息
  authInfo: [ AuthInfo ](name='auth_info'),
}

model PublishGoodResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 发布id
  pubilshId?: string(name='pubilsh_id'),
}

/**
 * Description: 商品发布
 * Summary: 商品发布
 */
async function publishGood(request: PublishGoodRequest): PublishGoodResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return publishGoodEx(request, headers, runtime);
}

/**
 * Description: 商品发布
 * Summary: 商品发布
 */
async function publishGoodEx(request: PublishGoodRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PublishGoodResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bccr.good.publish', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryGoodsPublishRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 发布id
  pubilshId: string(name='pubilsh_id'),
}

model QueryGoodsPublishResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 发布id
  pubilshId?: string(name='pubilsh_id'),
  // 发布状态
  publishStatus?: string(name='publish_status'),
  // 商品id
  goodsId?: string(name='goods_id'),
}

/**
 * Description: 商品发布查询
 * Summary: 商品发布查询
 */
async function queryGoodsPublish(request: QueryGoodsPublishRequest): QueryGoodsPublishResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryGoodsPublishEx(request, headers, runtime);
}

/**
 * Description: 商品发布查询
 * Summary: 商品发布查询
 */
async function queryGoodsPublishEx(request: QueryGoodsPublishRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryGoodsPublishResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bccr.goods.publish.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateGoodsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 商品id
  goodsId: string(name='goods_id'),
  // 商品价格（分）
  standardPriceInCent?: long(name='standard_price_in_cent'),
  // 商品状态:上架，下架
  goodsStatus?: string(name='goods_status'),
}

model UpdateGoodsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 商品更新
 * Summary: 商品更新
 */
async function updateGoods(request: UpdateGoodsRequest): UpdateGoodsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateGoodsEx(request, headers, runtime);
}

/**
 * Description: 商品更新
 * Summary: 商品更新
 */
async function updateGoodsEx(request: UpdateGoodsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateGoodsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bccr.goods.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryGoodsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 商品id
  goodsId: string(name='goods_id'),
}

model QueryGoodsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 商品信息
  goodsInfo?: GoodsInfo(name='goods_info'),
}

/**
 * Description: 商品查询
 * Summary: 商品查询
 */
async function queryGoods(request: QueryGoodsRequest): QueryGoodsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryGoodsEx(request, headers, runtime);
}

/**
 * Description: 商品查询
 * Summary: 商品查询
 */
async function queryGoodsEx(request: QueryGoodsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryGoodsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.bccr.goods.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

