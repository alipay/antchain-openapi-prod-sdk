import AntchainUtil;
import Util;
import RPCUtil;

type @endpoint = string
type @regionId = string
type @accessKeyId = string
type @accessKeySecret = string
type @protocol = string
type @userAgent = string
type @readTimeout = number
type @connectTimeout = number
type @httpProxy = string
type @httpsProxy = string
type @socks5Proxy = string
type @socks5NetWork = string
type @noProxy = string
type @maxIdleConns = number
type @securityToken = string
type @maxIdleTimeMillis = number
type @keepAliveDurationMillis = number
type @maxRequests = number
type @maxRequestsPerHost = number

/**
 * Model for initing client
 */
model Config {
  accessKeyId?: string(description='accesskey id',default=''),
  accessKeySecret?: string(description='accesskey secret',default=''),
  securityToken?: string(description='security token',default=''),
  protocol?: string(description='http protocol',example='http',default='http'),
  readTimeout?: number(description='read timeout',example='10',default=''),
  connectTimeout?: number(description='connect timeout',example='10',default=''),
  httpProxy?: string(description='http proxy',example='http://localhost',default=''),
  httpsProxy?: string(description='https proxy',example='https://localhost',default=''),
  endpoint?: string(description='endpoint',example='cs.aliyuncs.com',default=''),
  noProxy?: string(description='proxy white list',example='http://localhost',default=''),
  maxIdleConns?: number(description='max idle conns',example='3',default=''),
  userAgent?: string(description='user agent',example='Alibabacloud/1',default=''),
  socks5Proxy?: string(description='socks5 proxy',default=''),
  socks5NetWork?: string(description='socks5 network',example='TCP',default=''),
  maxIdleTimeMillis?: number(description='长链接最大空闲时长',default='60 * 1000L'),
  keepAliveDurationMillis?: number(description='长链接最大连接时长',default='5000'),
  maxRequests?: number(description='最大连接数（长链接最大总数）',default='100'),
  maxRequestsPerHost?: number(description='每个目标主机的最大连接数（分主机域名的长链接最大总数',default='100'),
}

/**
 * Init client with Config
 * @param config config contains the necessary information to create a client
 */
init(config: Config) {
  if (Util.isUnset(config)) {
    throw {
      code = 'ParameterMissing',
      message = '\'config\' can not be unset'
    };
  }

  @accessKeyId = config.accessKeyId;
  @accessKeySecret = config.accessKeySecret;
  @securityToken = config.securityToken;
  @endpoint = config.endpoint;
  @protocol = config.protocol;
  @userAgent = config.userAgent;
  @readTimeout = Util.defaultNumber(config.readTimeout, 20000);
  @connectTimeout = Util.defaultNumber(config.connectTimeout, 20000);
  @httpProxy = config.httpProxy;
  @httpsProxy = config.httpsProxy;
  @noProxy = config.noProxy;
  @socks5Proxy = config.socks5Proxy;
  @socks5NetWork = config.socks5NetWork;
  @maxIdleConns = Util.defaultNumber(config.maxIdleConns, 60000);
  @maxIdleTimeMillis = Util.defaultNumber(config.maxIdleTimeMillis, 5);
  @keepAliveDurationMillis = Util.defaultNumber(config.keepAliveDurationMillis, 5000);
  @maxRequests = Util.defaultNumber(config.maxRequests, 100);
  @maxRequestsPerHost = Util.defaultNumber(config.maxRequestsPerHost, 100);
}

/**
 * Encapsulate the request and invoke the network
 * @param action api name
 * @param protocol http or https
 * @param method e.g. GET
 * @param pathname pathname of every api
 * @param request which contains request params
 * @param runtime which controls some details of call api, such as retry times
 * @return the response
 */
api doRequest(version: string, action: string, protocol: string, method: string, pathname: string, request: object, headers: map[string]string, runtime: Util.RuntimeOptions): object {
  __request.protocol = Util.defaultString(@protocol, protocol);
  __request.method = method;
  __request.pathname = pathname;
  __request.query = {
    method = action,
    version = version,
    sign_type = 'HmacSHA1',
    req_time = AntchainUtil.getTimestamp(),
    req_msg_id = AntchainUtil.getNonce(),
    access_key = @accessKeyId,
    base_sdk_version = 'TeaSDK-2.0',
    sdk_version = '1.0.0',
    _prod_code = 'ak_6f72e7df0c87441c84120631f5b37b12',
    _prod_channel = 'saas'
  };

  if (!Util.empty(@securityToken)) {
    __request.query.security_token = @securityToken;
  }

  __request.headers = {
    host = Util.defaultString(@endpoint, 'openapi.antchain.antgroup.com'),
    user-agent = Util.getUserAgent(@userAgent),
    ...headers
  };

  var tmp = Util.anyifyMapValue(RPCUtil.query(request));
  __request.body = Util.toFormString(tmp);
  __request.headers.content-type = 'application/x-www-form-urlencoded';

  var signedParam = {
    ...__request.query,
    ...RPCUtil.query(request)
  };
  __request.query.sign = AntchainUtil.getSignature(signedParam, @accessKeySecret);
} returns {
  var raw = Util.readAsString(__response.body);
  var obj = Util.parseJSON(raw);
  var res = Util.assertAsMap(obj);
  var resp = Util.assertAsMap(res.response);

  if (AntchainUtil.hasError(raw, @accessKeySecret)) {
    throw {
      message = resp.result_msg,
      data = resp,
      code = resp.result_code
    };
  }
  return resp;
} runtime {
  timeouted = 'retry',
  readTimeout = Util.defaultNumber(runtime.readTimeout, @readTimeout),
  connectTimeout = Util.defaultNumber(runtime.connectTimeout, @connectTimeout),
  httpProxy = Util.defaultString(runtime.httpProxy, @httpProxy),
  httpsProxy = Util.defaultString(runtime.httpsProxy, @httpsProxy),
  noProxy = Util.defaultString(runtime.noProxy, @noProxy),
  maxIdleConns = Util.defaultNumber(runtime.maxIdleConns, @maxIdleConns),
  maxIdleTimeMillis = @maxIdleTimeMillis,
  keepAliveDurationMillis = @keepAliveDurationMillis,
  maxRequests = @maxRequests,
  maxRequestsPerHost = @maxRequestsPerHost,
  retry = {
    retryable = runtime.autoretry,
    maxAttempts = Util.defaultNumber(runtime.maxAttempts, 3)
  },
  backoff = {
    policy = Util.defaultString(runtime.backoffPolicy, 'no'),
    period = Util.defaultNumber(runtime.backoffPeriod, 1)
  },
  ignoreSSL = runtime.ignoreSSL
}

// 分页属性
model ALiYunPagination {
  // 分页大小
  pageSize?: long(name='page_size', example='20'),
  // 分页编号
  pageNumber?: long(name='page_number', example='1'),
  // 总数大小
  totalCount?: long(name='total_count', example='100'),
}

// 阿里云蚂蚁区块链证书信息
model ALiYunCertificateApplication {
  // ant_chain_id
  antChainId?: string(name='ant_chain_id', example='ant_chain_id'),
  // bid
  bid?: string(name='bid', example='bid'),
  // createtime
  createtime?: long(name='createtime', example='createtime'),
  // status
  status?: string(name='status', example='status'),
  // updatetime
  updatetime?: long(name='updatetime', example='1231231231231'),
  // username
  username?: string(name='username', example='username'),
}

// 阿里云蚂蚁链相关下载链接
model ALiYunDownloadPath {
  // ca_crt_url
  caCrtUrl?: string(name='ca_crt_url', example='ca_crt_url'),
  // client_crt_url
  clientCrtUrl?: string(name='client_crt_url', example='client_crt_url'),
  // sdk_url
  sdkUrl?: string(name='sdk_url', example='sdk_url'),
  // trust_ca_url
  trustCaUrl?: string(name='trust_ca_url', example='trust_ca_url'),
}

// 阿里云蚂蚁区块链相关下载结果
model ALiYunChainDownload {
  // download_path
  downloadPath?: ALiYunDownloadPath(name='download_path', example='download_path'),
  // private_key
  privateKey?: string(name='private_key', example='private_key'),
}

// 阿里云蚂蚁区块链证书列表信息
model ALiYunCertificateApplications {
  // certificate_application
  certificateApplications?: [ ALiYunCertificateApplication ](name='certificate_applications', example='certificate_application'),
  // pagination
  pagination?: ALiYunPagination(name='pagination', example='pagination'),
}

model ApplyBaasChainCertAntRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // ant_chain_id
  antChainId: string(name='ant_chain_id'),
  // common_name
  commonName: string(name='common_name'),
  // consortium_id
  consortiumId: string(name='consortium_id'),
  // country_name
  countryName: string(name='country_name'),
  // locality_name
  localityName: string(name='locality_name'),
  // organization_name
  organizationName: string(name='organization_name'),
  // organization_unit_name
  organizationUnitName: string(name='organization_unit_name'),
  // password
  password: string(name='password'),
  // region_id
  regionId?: string(name='region_id'),
  // state_or_province_name
  stateOrProvinceName: string(name='state_or_province_name'),
}

model ApplyBaasChainCertAntResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // result
  result?: ALiYunChainDownload(name='result'),
}

/**
 * Description: 自动申请区块链证书
 * Summary: 自动申请区块链证书
 */
async function applyBaasChainCertAnt(request: ApplyBaasChainCertAntRequest): ApplyBaasChainCertAntResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return applyBaasChainCertAntEx(request, headers, runtime);
}

/**
 * Description: 自动申请区块链证书
 * Summary: 自动申请区块链证书
 */
async function applyBaasChainCertAntEx(request: ApplyBaasChainCertAntRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ApplyBaasChainCertAntResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.chain.cert.ant.apply', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateBaasChainCertAntRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // ant_chain_id
  antChainId: string(name='ant_chain_id'),
  // region_id
  regionId?: string(name='region_id'),
  // upload_req
  uploadReq: string(name='upload_req'),
}

model CreateBaasChainCertAntResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // result
  result?: string(name='result'),
}

/**
 * Description: 手工创建区块链证书
 * Summary: 手工创建区块链证书
 */
async function createBaasChainCertAnt(request: CreateBaasChainCertAntRequest): CreateBaasChainCertAntResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createBaasChainCertAntEx(request, headers, runtime);
}

/**
 * Description: 手工创建区块链证书
 * Summary: 手工创建区块链证书
 */
async function createBaasChainCertAntEx(request: CreateBaasChainCertAntRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateBaasChainCertAntResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.chain.cert.ant.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DownloadBaasChainCertAntRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // ant_chain_id
  antChainId: string(name='ant_chain_id'),
  // region_id
  regionId?: string(name='region_id'),
}

model DownloadBaasChainCertAntResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // result
  result?: ALiYunDownloadPath(name='result'),
}

/**
 * Description: 区块链证书下载
 * Summary: 区块链证书下载
 */
async function downloadBaasChainCertAnt(request: DownloadBaasChainCertAntRequest): DownloadBaasChainCertAntResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return downloadBaasChainCertAntEx(request, headers, runtime);
}

/**
 * Description: 区块链证书下载
 * Summary: 区块链证书下载
 */
async function downloadBaasChainCertAntEx(request: DownloadBaasChainCertAntRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DownloadBaasChainCertAntResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.chain.cert.ant.download', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryBaasChainCertAntRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // ant_chain_id
  antChainId: string(name='ant_chain_id'),
  // page_number
  pageNumber: long(name='page_number'),
  // page_size
  pageSize: long(name='page_size'),
  // region_id
  regionId?: string(name='region_id'),
  // status
  status: string(name='status'),
}

model QueryBaasChainCertAntResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // result
  result?: ALiYunCertificateApplications(name='result'),
}

/**
 * Description: 区块链证书查询
 * Summary: 区块链证书查询
 */
async function queryBaasChainCertAnt(request: QueryBaasChainCertAntRequest): QueryBaasChainCertAntResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryBaasChainCertAntEx(request, headers, runtime);
}

/**
 * Description: 区块链证书查询
 * Summary: 区块链证书查询
 */
async function queryBaasChainCertAntEx(request: QueryBaasChainCertAntRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryBaasChainCertAntResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.chain.cert.ant.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ReinitBaasChainCertAntRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // ant_chain_id
  antChainId: string(name='ant_chain_id'),
  // region_id
  regionId?: string(name='region_id'),
  // username
  username?: string(name='username'),
}

model ReinitBaasChainCertAntResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // result
  result?: string(name='result'),
}

/**
 * Description: 区块链证书重置
 * Summary: 区块链证书重置
 */
async function reinitBaasChainCertAnt(request: ReinitBaasChainCertAntRequest): ReinitBaasChainCertAntResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return reinitBaasChainCertAntEx(request, headers, runtime);
}

/**
 * Description: 区块链证书重置
 * Summary: 区块链证书重置
 */
async function reinitBaasChainCertAntEx(request: ReinitBaasChainCertAntRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ReinitBaasChainCertAntResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.chain.cert.ant.reinit', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

