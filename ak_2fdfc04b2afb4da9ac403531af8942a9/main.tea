import AntchainUtil;
import Util;
import RPCUtil;

type @endpoint = string
type @regionId = string
type @accessKeyId = string
type @accessKeySecret = string
type @protocol = string
type @userAgent = string
type @readTimeout = number
type @connectTimeout = number
type @httpProxy = string
type @httpsProxy = string
type @socks5Proxy = string
type @socks5NetWork = string
type @noProxy = string
type @maxIdleConns = number
type @securityToken = string
type @maxIdleTimeMillis = number
type @keepAliveDurationMillis = number
type @maxRequests = number
type @maxRequestsPerHost = number

/**
 * Model for initing client
 */
model Config {
  accessKeyId?: string(description='accesskey id',default=''),
  accessKeySecret?: string(description='accesskey secret',default=''),
  securityToken?: string(description='security token',default=''),
  protocol?: string(description='http protocol',example='http',default='http'),
  readTimeout?: number(description='read timeout',example='10',default=''),
  connectTimeout?: number(description='connect timeout',example='10',default=''),
  httpProxy?: string(description='http proxy',example='http://localhost',default=''),
  httpsProxy?: string(description='https proxy',example='https://localhost',default=''),
  endpoint?: string(description='endpoint',example='cs.aliyuncs.com',default=''),
  noProxy?: string(description='proxy white list',example='http://localhost',default=''),
  maxIdleConns?: number(description='max idle conns',example='3',default=''),
  userAgent?: string(description='user agent',example='Alibabacloud/1',default=''),
  socks5Proxy?: string(description='socks5 proxy',default=''),
  socks5NetWork?: string(description='socks5 network',example='TCP',default=''),
  maxIdleTimeMillis?: number(description='长链接最大空闲时长',default='60 * 1000L'),
  keepAliveDurationMillis?: number(description='长链接最大连接时长',default='5000'),
  maxRequests?: number(description='最大连接数（长链接最大总数）',default='100'),
  maxRequestsPerHost?: number(description='每个目标主机的最大连接数（分主机域名的长链接最大总数',default='100'),
}

/**
 * Init client with Config
 * @param config config contains the necessary information to create a client
 */
init(config: Config) {
  if (Util.isUnset(config)) {
    throw {
      code = 'ParameterMissing',
      message = '\'config\' can not be unset'
    };
  }

  @accessKeyId = config.accessKeyId;
  @accessKeySecret = config.accessKeySecret;
  @securityToken = config.securityToken;
  @endpoint = config.endpoint;
  @protocol = config.protocol;
  @userAgent = config.userAgent;
  @readTimeout = Util.defaultNumber(config.readTimeout, 20000);
  @connectTimeout = Util.defaultNumber(config.connectTimeout, 20000);
  @httpProxy = config.httpProxy;
  @httpsProxy = config.httpsProxy;
  @noProxy = config.noProxy;
  @socks5Proxy = config.socks5Proxy;
  @socks5NetWork = config.socks5NetWork;
  @maxIdleConns = Util.defaultNumber(config.maxIdleConns, 60000);
  @maxIdleTimeMillis = Util.defaultNumber(config.maxIdleTimeMillis, 5);
  @keepAliveDurationMillis = Util.defaultNumber(config.keepAliveDurationMillis, 5000);
  @maxRequests = Util.defaultNumber(config.maxRequests, 100);
  @maxRequestsPerHost = Util.defaultNumber(config.maxRequestsPerHost, 100);
}

/**
 * Encapsulate the request and invoke the network
 * @param action api name
 * @param protocol http or https
 * @param method e.g. GET
 * @param pathname pathname of every api
 * @param request which contains request params
 * @param runtime which controls some details of call api, such as retry times
 * @return the response
 */
api doRequest(version: string, action: string, protocol: string, method: string, pathname: string, request: object, headers: map[string]string, runtime: Util.RuntimeOptions): object {
  __request.protocol = Util.defaultString(@protocol, protocol);
  __request.method = method;
  __request.pathname = pathname;
  __request.query = {
    method = action,
    version = version,
    sign_type = 'HmacSHA1',
    req_time = AntchainUtil.getTimestamp(),
    req_msg_id = AntchainUtil.getNonce(),
    access_key = @accessKeyId,
    base_sdk_version = 'TeaSDK-2.0',
    sdk_version = '1.0.2',
    _prod_code = 'ak_2fdfc04b2afb4da9ac403531af8942a9',
    _prod_channel = 'saas'
  };

  if (!Util.empty(@securityToken)) {
    __request.query.security_token = @securityToken;
  }

  __request.headers = {
    host = Util.defaultString(@endpoint, 'openapi.antchain.antgroup.com'),
    user-agent = Util.getUserAgent(@userAgent),
    ...headers
  };

  var tmp = Util.anyifyMapValue(RPCUtil.query(request));
  __request.body = Util.toFormString(tmp);
  __request.headers.content-type = 'application/x-www-form-urlencoded';

  var signedParam = {
    ...__request.query,
    ...RPCUtil.query(request)
  };
  __request.query.sign = AntchainUtil.getSignature(signedParam, @accessKeySecret);
} returns {
  var raw = Util.readAsString(__response.body);
  var obj = Util.parseJSON(raw);
  var res = Util.assertAsMap(obj);
  var resp = Util.assertAsMap(res.response);

  if (AntchainUtil.hasError(raw, @accessKeySecret)) {
    throw {
      message = resp.result_msg,
      data = resp,
      code = resp.result_code
    };
  }
  return resp;
} runtime {
  timeouted = 'retry',
  readTimeout = Util.defaultNumber(runtime.readTimeout, @readTimeout),
  connectTimeout = Util.defaultNumber(runtime.connectTimeout, @connectTimeout),
  httpProxy = Util.defaultString(runtime.httpProxy, @httpProxy),
  httpsProxy = Util.defaultString(runtime.httpsProxy, @httpsProxy),
  noProxy = Util.defaultString(runtime.noProxy, @noProxy),
  maxIdleConns = Util.defaultNumber(runtime.maxIdleConns, @maxIdleConns),
  maxIdleTimeMillis = @maxIdleTimeMillis,
  keepAliveDurationMillis = @keepAliveDurationMillis,
  maxRequests = @maxRequests,
  maxRequestsPerHost = @maxRequestsPerHost,
  retry = {
    retryable = runtime.autoretry,
    maxAttempts = Util.defaultNumber(runtime.maxAttempts, 3)
  },
  backoff = {
    policy = Util.defaultString(runtime.backoffPolicy, 'no'),
    period = Util.defaultNumber(runtime.backoffPeriod, 1)
  },
  ignoreSSL = runtime.ignoreSSL
}

// 键值对，兼容map用
model NameValuePair {
  // 键名
  name: string(name='name', example='key'),
  // 键值
  value: string(name='value', example='value'),
}

// 大安全接口入参
model RdsAnalyzeRequest {
  // 123
  appid: string(name='appid', example='123'),
  // 123
  bizNo?: string(name='biz_no', example='123'),
  // 213
  scene?: string(name='scene', example='123'),
  // 123
  token?: string(name='token', example='1231'),
  // 123
  data: string(name='data', example='123'),
  // 123
  extra: string(name='extra', example='123'),
}

// 大安全内容检测接口返回参数
model ResultModel {
  // 返回结果
  code?: long(name='code', example='1'),
  // 返回错误信息
  errMsg?: string(name='err_msg', example='123'),
  // 返回具体结果
  model?: string(name='model', example='123'),
}

// 大安全接口入参
model SecurityUniformRequest {
  // 123
  token: string(name='token', example='123'),
  // 123
  bizId: string(name='biz_id', example='123'),
  // 132
  params: string(name='params', example='123'),
}

// Map<String,Object> 集合
model QueryMap {
  // 键值
  name: string(name='name', example='BUSINESS_CODE'),
  // 额外用户信息
  value?: [ NameValuePair ](name='value', example=''),
}

// 大安全接口返回
model SecurityUniformResponse {
  // 是否成功
  success: boolean(name='success', example='true, false'),
  // 123
  code?: string(name='code', example='12'),
  // 123
  message?: string(name='message', example='123'),
  // 123
  token?: string(name='token', example='123'),
  // 123
  bizId?: string(name='biz_id', example='123'),
  // 123
  data?: string(name='data', example='123'),
}

// 大安全人机识别相应
model RdslibAntcaptchaservice {
  // 是否请求成功
  success: boolean(name='success', example='true, false'),
  // 相应信息
  message?: string(name='message', example='123'),
  // 返回数据
  data?: string(name='data', example='test'),
}

model BindDemoAaaBbbCccRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
}

model BindDemoAaaBbbCccResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 自动化测试创建，用于测试新建&修改功能
 * Summary: 自动化测试创建，用于测试新建&修改功能
 */
async function bindDemoAaaBbbCcc(request: BindDemoAaaBbbCccRequest): BindDemoAaaBbbCccResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return bindDemoAaaBbbCccEx(request, headers, runtime);
}

/**
 * Description: 自动化测试创建，用于测试新建&修改功能
 * Summary: 自动化测试创建，用于测试新建&修改功能
 */
async function bindDemoAaaBbbCccEx(request: BindDemoAaaBbbCccRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BindDemoAaaBbbCccResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.aaa.bbb.ccc.bind', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDemoAaaBbbCccRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
}

model QueryDemoAaaBbbCccResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 自动化测试创建1
 * Summary: 自动化测试创建（勿动）
 */
async function queryDemoAaaBbbCcc(request: QueryDemoAaaBbbCccRequest): QueryDemoAaaBbbCccResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDemoAaaBbbCccEx(request, headers, runtime);
}

/**
 * Description: 自动化测试创建1
 * Summary: 自动化测试创建（勿动）
 */
async function queryDemoAaaBbbCccEx(request: QueryDemoAaaBbbCccRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDemoAaaBbbCccResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.aaa.bbb.ccc.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDemoAaaaFffDdRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // xxx
  xxx: string(name='xxx'),
  // yyy
  yyy: string(name='yyy'),
}

model QueryDemoAaaaFffDdResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // aaa
  aaa?: string(name='aaa'),
  // bbb
  bbb?: string(name='bbb'),
}

/**
 * Description: 测试使用
 * Summary: 测试使用
 */
async function queryDemoAaaaFffDd(request: QueryDemoAaaaFffDdRequest): QueryDemoAaaaFffDdResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDemoAaaaFffDdEx(request, headers, runtime);
}

/**
 * Description: 测试使用
 * Summary: 测试使用
 */
async function queryDemoAaaaFffDdEx(request: QueryDemoAaaaFffDdRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDemoAaaaFffDdResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.aaaa.fff.dd.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDemoAbcAbcAbcRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
}

model QueryDemoAbcAbcAbcResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 自动化测试创建,用于测试API的修改
 * Summary: 自动化测试创建,用于测试API的修改勿动
 */
async function queryDemoAbcAbcAbc(request: QueryDemoAbcAbcAbcRequest): QueryDemoAbcAbcAbcResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDemoAbcAbcAbcEx(request, headers, runtime);
}

/**
 * Description: 自动化测试创建,用于测试API的修改
 * Summary: 自动化测试创建,用于测试API的修改勿动
 */
async function queryDemoAbcAbcAbcEx(request: QueryDemoAbcAbcAbcRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDemoAbcAbcAbcResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.abc.abc.abc.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDemoAdAsdAsdRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
}

model QueryDemoAdAsdAsdResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: asd
 * Summary: asd
 */
async function queryDemoAdAsdAsd(request: QueryDemoAdAsdAsdRequest): QueryDemoAdAsdAsdResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDemoAdAsdAsdEx(request, headers, runtime);
}

/**
 * Description: asd
 * Summary: asd
 */
async function queryDemoAdAsdAsdEx(request: QueryDemoAdAsdAsdRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDemoAdAsdAsdResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.ad.asd.asd.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BindDemoAsdAsdAsdRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
}

model BindDemoAsdAsdAsdResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: asd
 * Summary: asd
 */
async function bindDemoAsdAsdAsd(request: BindDemoAsdAsdAsdRequest): BindDemoAsdAsdAsdResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return bindDemoAsdAsdAsdEx(request, headers, runtime);
}

/**
 * Description: asd
 * Summary: asd
 */
async function bindDemoAsdAsdAsdEx(request: BindDemoAsdAsdAsdRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BindDemoAsdAsdAsdResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.asd.asd.asd.bind', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model InitDemoBbpInsuranceUserRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 保司编码
  businessCode: string(name='business_code'),
  // 第三方id，此处为天猫uid
  thirdPartId: string(name='third_part_id'),
  // 来源渠道
  channel: string(name='channel'),
  // 埋点信息
  burieds?: QueryMap(name='burieds'),
}

model InitDemoBbpInsuranceUserResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 保司用户埋点信息
 * Summary: 用户登陆页面埋点
 */
async function initDemoBbpInsuranceUser(request: InitDemoBbpInsuranceUserRequest): InitDemoBbpInsuranceUserResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return initDemoBbpInsuranceUserEx(request, headers, runtime);
}

/**
 * Description: 保司用户埋点信息
 * Summary: 用户登陆页面埋点
 */
async function initDemoBbpInsuranceUserEx(request: InitDemoBbpInsuranceUserRequest, headers: map[string]string, runtime: Util.RuntimeOptions): InitDemoBbpInsuranceUserResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.bbp.insurance.user.init', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CheckSaasSecurityInfosecOpencheckservicecheckRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 以json格式输入想要检测的内容
  content: string(name='content'),
  // 服务版本
  serviceVersion: string(name='service_version'),
}

model CheckSaasSecurityInfosecOpencheckservicecheckResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 大安全内容检测接口返回参数
  data?: ResultModel(name='data'),
}

/**
 * Description: 大安全检验内容安全接口
 * Summary: 大安全检验内容安全接口
 */
async function checkSaasSecurityInfosecOpencheckservicecheck(request: CheckSaasSecurityInfosecOpencheckservicecheckRequest): CheckSaasSecurityInfosecOpencheckservicecheckResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return checkSaasSecurityInfosecOpencheckservicecheckEx(request, headers, runtime);
}

/**
 * Description: 大安全检验内容安全接口
 * Summary: 大安全检验内容安全接口
 */
async function checkSaasSecurityInfosecOpencheckservicecheckEx(request: CheckSaasSecurityInfosecOpencheckservicecheckRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CheckSaasSecurityInfosecOpencheckservicecheckResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'saas.security.infosec.opencheckservicecheck.check', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QuerySaasSecurityInfosecOpencheckservicequeryRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 查询参数
  event: string(name='event'),
  // 服务版本
  serviceVersion: string(name='service_version'),
}

model QuerySaasSecurityInfosecOpencheckservicequeryResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 大安全内容检测接口返回结果
  data?: ResultModel(name='data'),
}

/**
 * Description: 大安全内容检测结果查询接口
 * Summary: 大安全内容检测结果查询接口
 */
async function querySaasSecurityInfosecOpencheckservicequery(request: QuerySaasSecurityInfosecOpencheckservicequeryRequest): QuerySaasSecurityInfosecOpencheckservicequeryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return querySaasSecurityInfosecOpencheckservicequeryEx(request, headers, runtime);
}

/**
 * Description: 大安全内容检测结果查询接口
 * Summary: 大安全内容检测结果查询接口
 */
async function querySaasSecurityInfosecOpencheckservicequeryEx(request: QuerySaasSecurityInfosecOpencheckservicequeryRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QuerySaasSecurityInfosecOpencheckservicequeryResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'saas.security.infosec.opencheckservicequery.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CheckSaasSecurityRdsRdsserviceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 123
  rdsServiceCheckRequest: string(name='rds_service_check_request'),
  // 服务版本
  serviceVersion: string(name='service_version'),
}

model CheckSaasSecurityRdsRdsserviceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 是否是机器
  data?: long(name='data'),
}

/**
 * Description: 大安全接口
 * Summary: 大安全接口
 */
async function checkSaasSecurityRdsRdsservice(request: CheckSaasSecurityRdsRdsserviceRequest): CheckSaasSecurityRdsRdsserviceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return checkSaasSecurityRdsRdsserviceEx(request, headers, runtime);
}

/**
 * Description: 大安全接口
 * Summary: 大安全接口
 */
async function checkSaasSecurityRdsRdsserviceEx(request: CheckSaasSecurityRdsRdsserviceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CheckSaasSecurityRdsRdsserviceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'saas.security.rds.rdsservice.check', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model VerifySaasSecurityRdslibAntcaptchaserviceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 123
  rdsAnalyzeRequest: RdsAnalyzeRequest(name='rds_analyze_request'),
  // 服务版本
  serviceVersion: string(name='service_version'),
}

model VerifySaasSecurityRdslibAntcaptchaserviceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 是否是机器人
  data?: RdslibAntcaptchaservice(name='data'),
}

/**
 * Description: 大安全接口
 * Summary: 大安全接口
 */
async function verifySaasSecurityRdslibAntcaptchaservice(request: VerifySaasSecurityRdslibAntcaptchaserviceRequest): VerifySaasSecurityRdslibAntcaptchaserviceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return verifySaasSecurityRdslibAntcaptchaserviceEx(request, headers, runtime);
}

/**
 * Description: 大安全接口
 * Summary: 大安全接口
 */
async function verifySaasSecurityRdslibAntcaptchaserviceEx(request: VerifySaasSecurityRdslibAntcaptchaserviceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): VerifySaasSecurityRdslibAntcaptchaserviceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'saas.security.rdslib.antcaptchaservice.verify', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QuerySaasSecuritySecuritycoreSecurityuniformserviceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 123
  securityUniformRequest: SecurityUniformRequest(name='security_uniform_request'),
  // 123
  serviceVersion: string(name='service_version'),
}

model QuerySaasSecuritySecuritycoreSecurityuniformserviceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回结果
  data?: SecurityUniformResponse(name='data'),
}

/**
 * Description: 大安全接口
 * Summary: 大安全接口
 */
async function querySaasSecuritySecuritycoreSecurityuniformservice(request: QuerySaasSecuritySecuritycoreSecurityuniformserviceRequest): QuerySaasSecuritySecuritycoreSecurityuniformserviceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return querySaasSecuritySecuritycoreSecurityuniformserviceEx(request, headers, runtime);
}

/**
 * Description: 大安全接口
 * Summary: 大安全接口
 */
async function querySaasSecuritySecuritycoreSecurityuniformserviceEx(request: QuerySaasSecuritySecuritycoreSecurityuniformserviceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QuerySaasSecuritySecuritycoreSecurityuniformserviceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'saas.security.securitycore.securityuniformservice.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QuerySaasSecurityTscenterUmidqueryserviceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 用户token id
  tokenId: string(name='token_id'),
  // 服务版本
  serviceVersion: string(name='service_version'),
}

model QuerySaasSecurityTscenterUmidqueryserviceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回的umid
  data?: string(name='data'),
}

/**
 * Description: 大安全接口
 * Summary: 大安全接口
 */
async function querySaasSecurityTscenterUmidqueryservice(request: QuerySaasSecurityTscenterUmidqueryserviceRequest): QuerySaasSecurityTscenterUmidqueryserviceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return querySaasSecurityTscenterUmidqueryserviceEx(request, headers, runtime);
}

/**
 * Description: 大安全接口
 * Summary: 大安全接口
 */
async function querySaasSecurityTscenterUmidqueryserviceEx(request: QuerySaasSecurityTscenterUmidqueryserviceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QuerySaasSecurityTscenterUmidqueryserviceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'saas.security.tscenter.umidqueryservice.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

