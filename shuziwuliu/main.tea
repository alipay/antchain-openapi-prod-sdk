import AntchainUtil;
import Util;
import RPCUtil;

type @endpoint = string
type @regionId = string
type @accessKeyId = string
type @accessKeySecret = string
type @protocol = string
type @userAgent = string
type @readTimeout = number
type @connectTimeout = number
type @httpProxy = string
type @httpsProxy = string
type @socks5Proxy = string
type @socks5NetWork = string
type @noProxy = string
type @maxIdleConns = number
type @securityToken = string
type @maxIdleTimeMillis = number
type @keepAliveDurationMillis = number
type @maxRequests = number
type @maxRequestsPerHost = number

/**
 * Model for initing client
 */
model Config {
  accessKeyId?: string(description='accesskey id',default=''),
  accessKeySecret?: string(description='accesskey secret',default=''),
  securityToken?: string(description='security token',default=''),
  protocol?: string(description='http protocol',example='http',default='http'),
  readTimeout?: number(description='read timeout',example='10',default=''),
  connectTimeout?: number(description='connect timeout',example='10',default=''),
  httpProxy?: string(description='http proxy',example='http://localhost',default=''),
  httpsProxy?: string(description='https proxy',example='https://localhost',default=''),
  endpoint?: string(description='endpoint',example='cs.aliyuncs.com',default=''),
  noProxy?: string(description='proxy white list',example='http://localhost',default=''),
  maxIdleConns?: number(description='max idle conns',example='3',default=''),
  userAgent?: string(description='user agent',example='Alibabacloud/1',default=''),
  socks5Proxy?: string(description='socks5 proxy',default=''),
  socks5NetWork?: string(description='socks5 network',example='TCP',default=''),
  maxIdleTimeMillis?: number(description='长链接最大空闲时长',default='60 * 1000L'),
  keepAliveDurationMillis?: number(description='长链接最大连接时长',default='5000'),
  maxRequests?: number(description='最大连接数（长链接最大总数）',default='100'),
  maxRequestsPerHost?: number(description='每个目标主机的最大连接数（分主机域名的长链接最大总数',default='100'),
}

/**
 * Init client with Config
 * @param config config contains the necessary information to create a client
 */
init(config: Config) {
  if (Util.isUnset(config)) {
    throw {
      code = 'ParameterMissing',
      message = '\'config\' can not be unset'
    };
  }

  @accessKeyId = config.accessKeyId;
  @accessKeySecret = config.accessKeySecret;
  @securityToken = config.securityToken;
  @endpoint = config.endpoint;
  @protocol = config.protocol;
  @userAgent = config.userAgent;
  @readTimeout = Util.defaultNumber(config.readTimeout, 20000);
  @connectTimeout = Util.defaultNumber(config.connectTimeout, 20000);
  @httpProxy = config.httpProxy;
  @httpsProxy = config.httpsProxy;
  @noProxy = config.noProxy;
  @socks5Proxy = config.socks5Proxy;
  @socks5NetWork = config.socks5NetWork;
  @maxIdleConns = Util.defaultNumber(config.maxIdleConns, 60000);
  @maxIdleTimeMillis = Util.defaultNumber(config.maxIdleTimeMillis, 5);
  @keepAliveDurationMillis = Util.defaultNumber(config.keepAliveDurationMillis, 5000);
  @maxRequests = Util.defaultNumber(config.maxRequests, 100);
  @maxRequestsPerHost = Util.defaultNumber(config.maxRequestsPerHost, 100);
}

/**
 * Encapsulate the request and invoke the network
 * @param action api name
 * @param protocol http or https
 * @param method e.g. GET
 * @param pathname pathname of every api
 * @param request which contains request params
 * @param runtime which controls some details of call api, such as retry times
 * @return the response
 */
api doRequest(version: string, action: string, protocol: string, method: string, pathname: string, request: object, headers: map[string]string, runtime: Util.RuntimeOptions): object {
  __request.protocol = Util.defaultString(@protocol, protocol);
  __request.method = method;
  __request.pathname = pathname;
  __request.query = {
    method = action,
    version = version,
    sign_type = 'HmacSHA1',
    req_time = AntchainUtil.getTimestamp(),
    req_msg_id = AntchainUtil.getNonce(),
    access_key = @accessKeyId,
    base_sdk_version = 'TeaSDK-2.0',
    sdk_version = '1.3.142',
  };

  if (!Util.empty(@securityToken)) {
    __request.query.security_token = @securityToken;
  }

  __request.headers = {
    host = Util.defaultString(@endpoint, 'openapi.antchain.antgroup.com'),
    user-agent = Util.getUserAgent(@userAgent),
    ...headers
  };

  var tmp = Util.anyifyMapValue(RPCUtil.query(request));
  __request.body = Util.toFormString(tmp);
  __request.headers.content-type = 'application/x-www-form-urlencoded';

  var signedParam = {
    ...__request.query,
    ...RPCUtil.query(request)
  };
  __request.query.sign = AntchainUtil.getSignature(signedParam, @accessKeySecret);
} returns {
  var raw = Util.readAsString(__response.body);
  var obj = Util.parseJSON(raw);
  var res = Util.assertAsMap(obj);
  var resp = Util.assertAsMap(res.response);

  if (AntchainUtil.hasError(raw, @accessKeySecret)) {
    throw {
      message = resp.result_msg,
      data = resp,
      code = resp.result_code
    };
  }
  return resp;
} runtime {
  timeouted = 'retry',
  readTimeout = Util.defaultNumber(runtime.readTimeout, @readTimeout),
  connectTimeout = Util.defaultNumber(runtime.connectTimeout, @connectTimeout),
  httpProxy = Util.defaultString(runtime.httpProxy, @httpProxy),
  httpsProxy = Util.defaultString(runtime.httpsProxy, @httpsProxy),
  noProxy = Util.defaultString(runtime.noProxy, @noProxy),
  maxIdleConns = Util.defaultNumber(runtime.maxIdleConns, @maxIdleConns),
  maxIdleTimeMillis = @maxIdleTimeMillis,
  keepAliveDurationMillis = @keepAliveDurationMillis,
  maxRequests = @maxRequests,
  maxRequestsPerHost = @maxRequestsPerHost,
  retry = {
    retryable = runtime.autoretry,
    maxAttempts = Util.defaultNumber(runtime.maxAttempts, 3)
  },
  backoff = {
    policy = Util.defaultString(runtime.backoffPolicy, 'no'),
    period = Util.defaultNumber(runtime.backoffPeriod, 1)
  },
  ignoreSSL = runtime.ignoreSSL
}

// 创建凭证One
model VoucherTestOne {
  // 测试Long
  voucherTestOneLong: long(maximum=10, minimum=0, name='voucher_test_one_long', example='test'),
  // 测试String
  voucherTestOneString: string(maxLength=10, minLength=0, name='voucher_test_one_string', example='test'),
  // 测试Int
  voucherTestOneInt: long(name='voucher_test_one_int', example='test'),
  // 测试Date
  voucherTestOneDate: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='voucher_test_one_date', example='test'),
  // 测试Integer
  voucherTestOneInteger: long(maximum=10, minimum=0, name='voucher_test_one_integer', example='test'),
  // 测试Boolean
  voucherTestOneBoolean: boolean(name='voucher_test_one_boolean', example='test'),
}

// 应付资费项
model PayTariffInfo {
  // 托运单号 [业务必填]
  orderNo?: string(name='order_no', example='暂无'),
  // 应付资费项code [业务必填]
  // 
  // 
  payTariffCode?: string(name='pay_tariff_code', example='暂无'),
  // 应付资费项项目 [业务必填]
  // 
  // 
  payTariffProject?: string(name='pay_tariff_project', example='暂无'),
  // 资费项中文描述 [业务必填]
  // 
  // 
  payTariffDesc?: string(name='pay_tariff_desc', example='暂无'),
  // 币种 [业务必填]
  currency?: string(name='currency', example='CNY'),
  // 资费项含税价 [业务必填]
  // 
  // 
  priceIncludingTax?: string(name='price_including_tax', example='暂无'),
  // 订舱单唯一性标识 [业务必填]
  bookingNo?: string(name='booking_no', example='暂无'),
  // 订舱单 [业务必填]
  bkgNo?: string(name='bkg_no', example='暂无'),
}

// 人员伤残情况
model PersonLoss {
  // 伤情，HOSPITALIZE-住院，CLINIC-门诊，DEATH-死亡，ALLOWANCE-津贴
  personInjuredCondition: string(maxLength=50, name='person_injured_condition', example='CLINIC'),
  // 伤者姓名
  personInjuredName: string(maxLength=200, name='person_injured_name', example='王大毛'),
  // 损失预估，单位（元），最多支持2位小数
  personLossEstimateAmount?: string(name='person_loss_estimate_amount', example='68.00'),
}

// 集装箱信息
model ContainerInfo {
  // 订舱单唯一标识
  bookingNo?: string(name='booking_no', example='暂无'),
  // 集装箱唯一标识
  containerId?: string(name='container_id', example='暂无'),
  // 箱号
  containerNo?: string(name='container_no', example='暂无'),
  // 箱型
  containerType?: string(name='container_type', example='暂无'),
}

// 集装箱列表
model MasterBlContainerParam {
  // 操作动作,为空为新增或更新，UPDATE为更新，DELETE为删除
  action?: string(name='action', example='暂无'),
  // 集装箱ID
  containerId: string(name='container_id', example='暂无'),
  // 箱号
  containerNo?: string(name='container_no', example='暂无'),
}

// 电子回单查询，具体凭证数据
model ScpTicketIssueData {
  // 凭证对应的司机/货主的did
  did: string(name='did', example='1111'),
  // 	
  // 凭证id
  issueId: string(name='issue_id', example='11111111'),
}

// 订舱单号
model CustomsOrderBookingParam {
  // 操作动作,为空为新增或更新，UPDATE为更新，DELETE为删除
  action?: string(name='action', example='暂无'),
  // 订舱单号
  bookingNo: string(name='booking_no', example='暂无'),
}

// 电子提单变更状态明细（无效）
model EblStatusDeatil {
  // 当前提单状态
  currentEblStatus: string(name='current_ebl_status', example='endorsed'),
  // 电子提单编号
  eblNo: string(name='ebl_no', example='暂无'),
  // 下一个提单状态
  nextEblStatus: string(name='next_ebl_status', example='surrendered'),
}

// 凭证id发行信息
model IssueIdInfo {
  // 信用流转凭证
  issueId: string(name='issue_id', example='123123'),
  // 全局唯一业务号
  outBizNo: string(name='out_biz_no', example='fa142b66cb1'),
  // 合同号（预留）
  contractId?: string(name='contract_id', example='123'),
  // 发行信用流转的运单号
  waybillId: string(name='waybill_id', example='123123'),
  // 支付订单
  payOrder: string(name='pay_order', example='123123'),
  // 凭证金额
  ticketAmt: string(name='ticket_amt', example='198.76'),
  // 信用凭证发起时间
  issueDate: string(name='issue_date', example='1581579336000'),
  // 信用凭证到期时间
  expireDate: string(name='expire_date', example='1581579336000'),
  // 发行结果状态 -1:发行失败状态， 0:未完成状态， 1:已发行状态
  status: long(name='status', example='1'),
  // 失败原因信息
  errMsg: string(name='err_msg', example='success'),
}

// 资费项发票
model PayTariffInvoiceParam {
  // 操作动作,为空为新增或更新，UPDATE为更新，DELETE为删除
  action?: string(name='action', example='暂无'),
  // 发票金额 业务必填
  invoiceAmount?: string(name='invoice_amount', example='暂无'),
  // 资费项金额 业务必填
  payTariffAmount?: string(name='pay_tariff_amount', example='暂无'),
  // 资费单据编号 业务必填
  payTariffCode?: string(name='pay_tariff_code', example='暂无'),
  // 资费项发票code
  payTariffInvoiceCode: string(name='pay_tariff_invoice_code', example='暂无'),
}

// 航运订舱单号信息
model BookingNoInfo {
  // 订舱单唯一标识
  bookingNo?: string(name='booking_no', example='暂无'),
  // 订舱号
  bkgNo?: string(name='bkg_no', example='暂无'),
}

// 应收资费项
model ReceiptTariffInfo {
  // 托运单号 [业务必填]
  orderNo?: string(name='order_no', example='暂无'),
  // 应收资费项code [业务必填]
  // 
  // 
  receiptTariffCode?: string(name='receipt_tariff_code', example='暂无'),
  // 应收资费项项目 [业务必填]
  receiptTariffProject?: string(name='receipt_tariff_project', example='暂无'),
  // 资费项中文描述 [业务必填]
  // 
  // 
  receiptTariffDesc?: string(name='receipt_tariff_desc', example='暂无'),
  // 币种 [业务必填]
  currency?: string(name='currency', example='CNY'),
  // 资费项含税价 [业务必填]
  // 
  // 
  priceIncludingTax?: string(name='price_including_tax', example='暂无'),
  // 订舱单唯一标识 [业务必填]
  bookingNo?: string(name='booking_no', example='暂无'),
  // 订舱号 [业务必填]
  bkgNo?: string(name='bkg_no', example='暂无'),
}

// 订舱单
model HouseBlBookingParam {
  // 操作动作,为空为新增或更新，UPDATE为更新，DELETE为删除
  action?: string(name='action', example='暂无'),
  // 订舱单号
  bookingNo: string(name='booking_no', example='暂无'),
}

// 库存货物
model InventoryCargo {
  // 序号，在同一次库存申报请求中，序号保持不重复，不能小于等于0
  inventoryIndex: long(name='inventory_index', example='1'),
  // sku品名
  sku: string(maxLength=200, name='sku', example='80656-RLC-422-5MP'),
  // 商品名称
  // 
  cargoName?: string(maxLength=200, name='cargo_name', example='小米手机9'),
  // 商品单品重量(kg)
  cargoWeight?: string(maxLength=50, name='cargo_weight', example='0.8'),
  // 商品外扩长宽高(cm)
  cargoDimensions?: string(maxLength=200, name='cargo_dimensions', example='20.00*30.00*40.00'),
  // 商品单品货物价值(元),最多支持2位小数
  cargoWorth?: string(maxLength=30, name='cargo_worth', example='3800.12'),
  // 当前库存货物数量
  currentInventoryCargoNum: long(name='current_inventory_cargo_num', example='567'),
  // 客户代码
  // 
  customerCode: string(maxLength=50, name='customer_code', example='32112'),
  // 关联保单号,需要仓储CP做拆分计算
  policyNo?: string(maxLength=64, name='policy_no', example='TB1882881002991'),
  // 入库时间, yyyy-MM-dd HH:mm:ss，需要仓储CP做拆分计算
  // 
  stockinDate?: string(name='stockin_date', example='2021-3-08 13:12:22 '),
  // 时区,仓储CP上报入库时间所属的时区
  timezone?: string(maxLength=16, name='timezone', example='东八区'),
}

// so通知关联的订舱单
model SoNotifyBookingParam {
  // 操作动作,为空为新增或更新，UPDATE为更新，DELETE为删除
  action?: string(name='action', example='暂无'),
  // 订舱单号
  bookingNo: string(name='booking_no', example='123456789'),
  // 船公司  业务必填 
  carrier?: string(name='carrier', example='暂无'),
  // 箱型箱量 json格式 业务必填
  // [{"containerVolume":"33","containerType":"22"}]
  // containerVolume--箱量 业务必填
  // containerType--箱型 业务必填
  containerParams?: string(name='container_params', example='暂无'),
  // 截关时间
  customsClearance?: long(name='customs_clearance', example=''),
  // 场站
  cy?: string(name='cy', example='暂无'),
  // 截港时间
  cyClosing?: long(name='cy_closing', example=''),
  // 预计船期
  etd?: long(name='etd', example=''),
  // 港口
  port?: string(name='port', example='暂无'),
  // 截单时间
  siClosing?: long(name='si_closing', example='暂无'),
  // 船名  业务必填
  vessel?: string(name='vessel', example='暂无'),
  // 航次 业务必填
  voyage?: string(name='voyage', example='暂无'),
}

// 签署方
model AuthParty {
  // 签署方名称
  signPartyName: string(name='sign_party_name', example='贾玲'),
  // 签署方证件类型，可以填写的枚举类：IDENTIFICATION_CARD，表示身份证
  signPartyCertType: string(name='sign_party_cert_type', example='IDENTIFICATION_CARD'),
  // 签署方证件号码
  signPartyCertNum: string(name='sign_party_cert_num', example='3308199612247856'),
  // 签署结果（必填，FINISH,FAIL,REFUSE三者选一，分别表示签署完成、失败和拒签）
  signResult: string(name='sign_result', example='FINISH'),
  // 签署失败或拒签原因（失败或拒签时必填）
  signFailReason?: string(name='sign_fail_reason', example='审批未通过'),
  // 签署时间(13位毫秒时间戳)
  signTime: string(name='sign_time', example='2881999301656'),
}

// 电子提单变更状态明细
model EblStatusDetail {
  // 当前提单状态
  currentEblStatus: string(name='current_ebl_status', example='endorsed'),
  // 电子提单编号
  eblNo: string(name='ebl_no', example='暂无 '),
  // 下一个提单状态
  nextEblStatus: string(name='next_ebl_status', example='surrendered'),
}

// 投保基本信息
model InsureBaseInfo {
  // 投保人姓名
  tbrName: string(name='tbr_name', example='张三'),
  // 投保人证件号
  tbrIdNo: string(name='tbr_id_no', example='371023443423131'),
  // 投保人证件类型
  tbrIdType: string(name='tbr_id_type', example='身份证'),
  // 投保人联系电话
  tbrTel: string(name='tbr_tel', example='15000000000'),
  // 投保人地址
  tbrAddr?: string(name='tbr_addr', example='北京市某某区'),
  // 投保人邮箱
  tbrEmail: string(name='tbr_email', example='xxx@email.com'),
  // 被保险人姓名
  bbrName: string(name='bbr_name', example='李四'),
  // 被保险人证件类型
  bbrIdType: string(name='bbr_id_type', example='身份证'),
  // 被保险人证件号码
  bbrIdNo: string(name='bbr_id_no', example='3710221223232322'),
  // 被保险人联系电话
  bbrTel: string(name='bbr_tel', example='150002323231'),
  // 被保险人地址
  bbrAddr?: string(name='bbr_addr', example='北京市新校区'),
  // 含税保费(元)，小数点两位
  preMium: string(name='pre_mium', example='12.01'),
  // 保险起期
  effDate: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='eff_date', example='2018-10-10T10:10:00Z'),
  // 保险止期
  termDate: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='term_date', example='2018-10-10T10:10:00Z'),
  // 投保人证件类型有效起期
  idenrifyPeriodStart?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='idenrify_period_start', example='2018-10-10T10:10:00Z'),
  // 投保人证件类型有效止期
  identifyPeriodEnd?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='identify_period_end', example='2018-10-10T10:10:00Z'),
}

// 池融资凭证核验查询结果
model PfVoucherCheckResult {
  // 凭证id
  voucherId: string(name='voucher_id', example='20119112323'),
  // 凭证类型
  voucherCategory: string(name='voucher_category', example='WAYBILL'),
  // 状态；PASS:通过，NO_PASS 未通过
  status: string(name='status', example='PASS'),
}

// 历史数据
model UploadFinancingParam {
  // 订舱单量（票）
  bookingCount: long(name='booking_count', example='123'),
  // 唯一标识
  code: string(name='code', example='123'),
  // 结束日期
  endDate: string(name='end_date', example='2020-01-31'),
  // 货代did
  forwarderDid: string(name='forwarder_did', example='暂无'),
  // 开始日期
  startDate: string(name='start_date', example='2020-01-01'),
  // 箱量【数量，不区分箱型，20GP是1TEU，40GP是2TEU】
  teu: long(name='teu', example='123'),
  // 运输总额
  amounts: string(name='amounts', example='[{"total_amount";"123.11","currency":“人民币”}]'),
}

// 链上hash
model TxDto {
  // 链上凭证
  txCode: string(name='tx_code', example='d4648b331839616b6ad76ed74b5fabf9c188add347da55aef3caccfa471d9f66 '),
  // 链上存储结构对应类型
  dataType: string(name='data_type', example='ORDER'),
}

// 物流轨迹位置
model LogisticLocation {
  // 结构化地址信息,规则遵循：国家、省份、城市、区县、城镇、乡村、街道、门牌号码、屋邨、大厦
  address?: string(name='address', example='北京市朝阳区阜通东大街6号 '),
  // 行政区划代码
  cityCode?: string(name='city_code', example='110000'),
  // 纬度
  // 
  lat: string(name='lat', example='39.916527 '),
  // 经度
  lon: string(name='lon', example='116.397128 '),
  // 轨迹时间戳
  trackTime: long(name='track_time', example='1566221266000'),
}

// 用户凭证信息
model UserIssueId {
  // 凭证id
  issueId: string(name='issue_id', example='12123'),
  // 凭证余额
  balanceAmt: string(name='balance_amt', example='87.09'),
}

// 电子提单批次下提单明细（无效）
model EblDeatil {
  // 电子提单copy文件hash
  eblCopyPdfFileHash: string(name='ebl_copy_pdf_file_hash', example='暂无'),
  // 电子提单copy文件id
  eblCopyPdfFileId: string(name='ebl_copy_pdf_file_id', example='暂无'),
  // 电子提单编号
  eblNo: string(name='ebl_no', example='暂无'),
}

// 入库货物
model StockinCargo {
  // 入库序号，在同一次入库请求中，入库序号保持不重复，不能小于0
  stockinIndex: long(name='stockin_index', example='1'),
  // sku品名
  // 
  sku: string(maxLength=200, name='sku', example='80656-RLC-422-5MP'),
  // 商品名称
  cargoName?: string(maxLength=200, name='cargo_name', example='小米手机米9手机'),
  // 商品单品重量(kg)
  cargoWeight?: string(maxLength=50, name='cargo_weight', example='0.8'),
  // 商品外扩长宽高(cm)
  cargoDimensions?: string(maxLength=200, name='cargo_dimensions', example='20.00*30.00*40.00'),
  // 商品单品货物价值(元),，最多支持2位小数
  cargoWorth?: string(maxLength=30, name='cargo_worth', example='120.00'),
  // 箱号
  containerNo?: string(maxLength=50, name='container_no', example='1'),
  // 实际入库件数
  actualStockinNum: long(name='actual_stockin_num', example='6'),
}

// 车辆损失详情 
model CarLoss {
  // 车牌号，车牌号和车架号至少填一个
  carMark?: string(maxLength=20, name='car_mark', example='皖C54322'),
  // 车主姓名 
  carOwnerName?: string(maxLength=200, name='car_owner_name', example='王大毛'),
  // 车主联系方式
  carOwnerContact?: string(maxLength=20, name='car_owner_contact', example='17029990909'),
  // 车架号，车牌号和车架号至少填一个
  carVinNo?: string(maxLength=100, name='car_vin_no', example='DMQJ928881992'),
  // 损失预估，单位（元），最多支持2位小数
  carLossEstimateAmount: string(name='car_loss_estimate_amount', example='1002.00'),
}

// 物流金融信用流转流水信息
model StatementInfo {
  // 信用流转批次号
  batchId: string(name='batch_id', example='123123'),
  // 全局唯一业务号
  outBizNo: string(name='out_biz_no', example='123123'),
  // 信用流转凭证
  issueId: string(name='issue_id', example='1212312'),
  // 合同号（预留）
  contractId?: string(name='contract_id', example='123123'),
  // 发行信用流转的运单号
  waybillId: string(name='waybill_id', example='321312'),
  // 发行信用流转的支付单号
  payOrder: string(name='pay_order', example='123123'),
  // 金额信息
  creditLimit: string(name='credit_limit', example='18.67'),
  // 流水类型
  stateType: string(name='state_type', example='FINANCE'),
  // 流水类型说明
  stateMsg: string(name='state_msg', example='融资'),
  // 凭证来源方did
  fromDid: string(name='from_did', example='did:mychain:fa142b66cb1dece6a36cd66081ceeece19674409149c32679f2e17ed2dd8312c'),
  // 凭证流转方did
  toDid: string(name='to_did', example='did:mychain:fa142b66cb1dece6a36cd66081ceeece19674409149c32679f2e17ed2dd8312c'),
  // 信用凭证发起时间
  issueDate: string(name='issue_date', example='1581579336000'),
  // 信用凭证到期时间
  expireDate: string(name='expire_date', example='1581579336000'),
}

// 附加条款
model MainItemAdd {
  // 附加条款代码-参考保司提供样例
  mainItemAddCode?: string(name='main_item_add_code', example=' '),
  // 附加条款内容-参考保司提供样例
  mainItemAddContent?: string(name='main_item_add_content', example=' '),
}

// 订舱单
model MasterBlBookingParam {
  // 操作动作,为空为新增或更新，UPDATE为更新，DELETE为删除
  action?: string(name='action', example='暂无'),
  // 订舱单号
  bookingNo: string(name='booking_no', example='暂无'),
}

// FinishWaybillOrderReq
model FinishWaybillOrderReq {
  // 运费
  allFreight?: string(name='all_freight', example='all_freight'),
  // 回单押金
  backFee?: string(name='back_fee', example='100'),
  // 货主支付运费金额
  consignorFreightAmount?: string(name='consignor_freight_amount', example='consignor_freight_amount'),
  // 运费增项
  freightIncr?: string(name='freight_incr', example='freight_incr'),
  // 运费扣减
  lossFee?: string(name='loss_fee', example='loss_fee'),
  // 平台did
  platformDid: string(name='platform_did', example='did:mychain:b6db2d812b1dac07a8c2a6201db3fff529f1ce7d78f58888fd791aec84dc8a8e'),
  // 运单id
  taxWaybillId: string(name='tax_waybill_id', example='运单id'),
}

// saas模式发行信息
model SaasIssueApplyInfo {
  // 货源订单
  cargoOrder?: string(name='cargo_order', example='123123'),
  // 合同号
  contractId?: string(name='contract_id', example='123123'),
  // 全局唯一业务单号
  outBizNo: string(name='out_biz_no', example='123123'),
  // 支付单号
  payOrder: string(name='pay_order', example='123123'),
  // 运单号
  waybillId: string(name='waybill_id', example='123123'),
  // 司机did
  driverDid: string(name='driver_did', example='123123'),
  // 发行费
  freight: string(name='freight', example='1.12'),
  // 到期时间戳
  expireDate: string(name='expire_date', example='1593504406597'),
}

// 箱子信息
model VehicleContainerParam {
  // 操作动作,为空为新增或更新，UPDATE为更新，DELETE为删除
  action?: string(name='action', example='暂无'),
  // 集装箱ID
  containerId: string(name='container_id', example='暂无'),
  // 箱号
  containerNo?: string(name='container_no', example='暂无'),
  // 封号
  sealNo?: string(name='seal_no', example='暂无'),
}

// A+模式发行信息
model IssueApplyInfoPlus {
  // 订单中的BookingNo，以英文逗号分割
  bookingNo: string(name='booking_no', example='booking_no_A,booking_no_B,booking_no_C'),
  // 船公司did
  carrierDid: string(name='carrier_did', example='123123'),
  // BookingNo中的箱号，以英文逗号分割
  containerNo: string(name='container_no', example='booking_no_A:container_no_1,booking_no_A:container_no_2,booking_no_B:container_no_1'),
  // 到期时间戳
  expireDate: string(name='expire_date', example='1595381053000'),
  // 发行金额，精确到小数点后2位
  issueAmt: string(name='issue_amt', example='32.65'),
  // 全局唯一业务号
  outBizNo: string(name='out_biz_no', example='123123'),
  // 支付单号
  outOrderNo: string(name='out_order_no', example='123123'),
  // 运单订单id
  waybillId: string(name='waybill_id', example='123123'),
}

// 货物列表
model HouseBlGoodsParam {
  // 预计备货时间
  cargoReadyDate?: long(name='cargo_ready_date', example='预计备货时间'),
  // 危险品页号
  dgPageNo?: string(name='dg_page_no', example='危险品页号'),
  // 危险品级别
  dgType?: string(name='dg_type', example='危险品级别'),
  // 危险品闪点
  flashPoint?: string(name='flash_point', example='危险品闪点'),
  // 货物名称 业务必填
  goods?: string(name='goods', example='暂无'),
  // 货物中文名
  goodsCn?: string(name='goods_cn', example='货物中文名'),
  // 货物类型 业务必填
  goodsType?: string(name='goods_type', example='货物类型'),
  // HS CODE
  hsCodes?: [ string ](name='hs_codes', example='HS CODE'),
  // 唛头
  marks?: string(name='marks', example='暂无'),
  // 件数 业务必填
  number?: string(name='number', example='暂无'),
  // 包装类型
  packageType?: string(name='package_type', example='包装类型'),
  // 实际件数
  realNumber?: string(name='real_number', example='实际件数'),
  // 实际体积
  realVolume?: string(name='real_volume', example='实际体积'),
  // 实际重量
  realWeight?: string(name='real_weight', example='实际重量'),
  // 危险品联合国编号
  unNo?: string(name='un_no', example='危险品联合国编号'),
  // 委托体积 业务必填
  volume?: string(name='volume', example='委托体积'),
  // 委托重量 业务必填
  weight?: string(name='weight', example='委托重量'),
}

// 上传booking信息
model UploadOrderBooking {
  // 订舱单号
  bookingNo: string(name='booking_no', example='暂无'),
  // 集装箱号  json字符串上传
  containerNos: string(name='container_nos', example='{"123","123"}'),
}

// 航运集装箱类型信息
model ContainerTypeInfo {
  // 箱型
  containerType?: string(name='container_type', example='暂无'),
  // 箱量
  containerVolume?: string(name='container_volume', example='暂无'),
}

// 凭证返回值
model VoucherResp {
  // 消息
  msg: string(maxLength=10, minLength=0, name='msg', example='success'),
}

// 货物
model ContainerGoodsParam {
  // 预计备货时间
  cargoReadyDate?: long(name='cargo_ready_date', example='预计备货时间'),
  // 危险品页号
  dgPageNo?: string(name='dg_page_no', example='危险品页号'),
  // 危险品级别
  dgType?: string(name='dg_type', example='危险品级别'),
  // 危险品闪点
  flashPoint?: string(name='flash_point', example='危险品闪点'),
  // 货物
  goods?: string(name='goods', example='货物'),
  // 货物中文名
  goodsCn?: string(name='goods_cn', example='货物中文名'),
  // 货物类型 业务必填
  goodsType?: string(name='goods_type', example='货物类型'),
  // HS CODE
  hsCodes?: [ string ](name='hs_codes', example='HS CODE'),
  // 唛头
  marks?: string(name='marks', example='唛头'),
  // 件数 业务必填
  number?: string(name='number', example='1'),
  // 包装类型
  packageType?: string(name='package_type', example='暂无'),
  // 实际件数
  realNumber?: string(name='real_number', example='实际件数'),
  // 实际体积
  realVolume?: string(name='real_volume', example='实际体积'),
  // 实际重量
  realWeight?: string(name='real_weight', example='实际重量'),
  // 危险品联合国编号
  unNo?: string(name='un_no', example='危险品联合国编号'),
  // 体积 业务必填
  volume?: string(name='volume', example='1'),
  // 毛重 业务必填
  weight?: string(name='weight', example='1'),
}

// 应付账单发票关联项
model PayBillInvoiceParam {
  // 账单发票code
  payBillInvoiceCode: string(name='pay_bill_invoice_code', example='xxx'),
  // 账单编号
  payBillOrderCode: string(name='pay_bill_order_code', example='xxx'),
  // 账单金额
  payBillAmount: string(name='pay_bill_amount', example='123123'),
  // 发票金额
  invoiceAmount: string(name='invoice_amount', example='123123'),
  // 操作动作
  action?: string(name='action', example='UPDATE、DELETE、INSERT'),
}

// 货主支付方式
model PayAmount {
  // 支付金额（2位小数）
  amount: string(name='amount', example='10000.00'),
  // 支付方式
  payType: string(name='pay_type', example='银行转账'),
}

// 资费项账单
model PayBillTariffParam {
  // 操作动作,为空为新增或更新，UPDATE为更新，DELETE为删除
  action?: string(name='action', example='UPDATE、DELETE、INSERT'),
  // 账单金额 业务必填
  billAmount?: string(name='bill_amount', example='暂无'),
  // 应付账单、应付资费项 多对多code
  payBillTariffCode: string(name='pay_bill_tariff_code', example='暂无'),
  //  资费项金额 业务必填
  payTariffAmount?: string(name='pay_tariff_amount', example='暂无'),
  // 应付资费项编号 业务必填
  payTariffCode?: string(name='pay_tariff_code', example='暂无'),
}

// 轨迹核验结果
model TrackCheckResult {
  // 轨迹核验状态code
  trackCheckStatus?: string(name='track_check_status', example='AD'),
  // 轨迹核验结果描述
  trackCheckStatusMsg?: string(name='track_check_status_msg', example='运单验证正常'),
}

// 集装箱列表
model HouseBlContainerParam {
  // 操作动作,为空为新增或更新，UPDATE为更新，DELETE为删除
  action?: string(name='action', example='暂无'),
  // 集装箱ID
  containerId: string(name='container_id', example='暂无'),
  // 箱号
  containerNo?: string(name='container_no', example='暂无'),
}

// 货物列表
model MasterBlGoodsParam {
  // 预计备货时间
  cargoReadyDate?: long(name='cargo_ready_date', example='预计备货时间'),
  // 危险品页号
  dgPageNo?: string(name='dg_page_no', example='危险品页号'),
  // 危险品级别
  dgType?: string(name='dg_type', example='危险品级别'),
  // 危险品闪点
  flashPoint?: string(name='flash_point', example='危险品闪点'),
  // 货物名称 业务必填
  goods?: string(name='goods', example='暂无'),
  // 货物中文名
  goodsCn?: string(name='goods_cn', example='货物中文名'),
  // 货物类型 业务必填
  goodsType?: string(name='goods_type', example='货物类型'),
  // 毛重 业务必填
  grossWeight?: string(name='gross_weight', example='暂无'),
  // HS CODE
  hsCodes?: [ string ](name='hs_codes', example='HS CODE'),
  // 唛头
  marks?: string(name='marks', example='暂无'),
  // 件数 业务必填
  number?: string(name='number', example='暂无'),
  // 包装类型
  packageType?: string(name='package_type', example='包装类型'),
  // 实际件数
  realNumber?: string(name='real_number', example='实际件数'),
  // 实际体积
  realVolume?: string(name='real_volume', example='实际体积'),
  // 实际重量
  realWeight?: string(name='real_weight', example='实际重量'),
  // 危险品联合国编号
  unNo?: string(name='un_no', example='危险品联合国编号'),
  // 委托体积 业务必填
  volume?: string(name='volume', example='委托体积'),
  // 委托重量 业务必填
  weight?: string(name='weight', example='委托重量'),
}

// 支付信息
model PaymentInfo {
  // 收款账户名称
  receiverAccountName: string(maxLength=200, name='receiver_account_name', example='王大力'),
  // 收款账户，支付宝账号
  receiverAccount: string(maxLength=50, name='receiver_account', example='xxx@sina.com'),
  // 收款账户类型 ,1-个人账号，0-公司账号
  receiverAccountType: string(maxLength=2, name='receiver_account_type', example='1'),
  // 收款人证件号码 ，账户类型为个人时，非空
  receiverCertificateNo?: string(maxLength=50, name='receiver_certificate_no', example='39991000299910029'),
  // 收款人证件类型，01-身份证，02-护照，03-军官证，04-港澳通行证，05-驾驶证，06-港澳回乡证或台胞证，07-临时身份证，99-其他
  receiverCertificateType: string(maxLength=2, name='receiver_certificate_type', example='01'),
}

// 货源单号-货主运费
model CargoAmount {
  // 货运单对应金额（2位小数）
  amount: string(name='amount', example='100000.00'),
  // 货源单号
  cargoOrder: string(name='cargo_order', example='123466'),
}

// 凭证开立申请信息
model IssueApplyInfo {
  // 货源订单
  cargoOrder?: string(name='cargo_order', example='123123'),
  // 合同号（预留）
  contractId?: string(name='contract_id', example='123'),
  // 凭证到期时间
  expireDate: string(name='expire_date', example='1581579336000'),
  // 支付单运费，运费最多精确到小数点后2位
  freight: string(name='freight', example='189.76'),
  // 全局唯一业务号
  outBizNo: string(name='out_biz_no', example='fa142b66cb1dece6a3'),
  // 支付订单
  payOrder: string(name='pay_order', example='123123'),
  // 运单id
  waybillId: string(name='waybill_id', example='123123'),
  // 司机did
  driverDid?: string(name='driver_did', example='did:mychain:11119abde09890ad6c40a5f9ba96fcb33ca134c6c29efdbbc743549e62c12222'),
}

// 授权上链文件
model AuthChainFile {
  // 签署文件的hash值
  signFileHash: string(name='sign_file_hash', example='ca94860b2f902e1ba7917d2c6a983cc43e5b3921f4b7ab28ea791ac28314ba52'),
  // 上链事务唯一标识
  uploadChainTxCode: string(name='upload_chain_tx_code', example='ca94860b2f902e1ba7917d2c6a983cc43e5b3921f4b7ab28ea791ac28314ba52'),
  // 蚂蚁区块链统一证据编号
  baasUniqCode: string(name='baas_uniq_code', example='ca94860b2f902e1ba7917d2c6a983cc43e5b3921f4b7ab28ea791ac28314ba52'),
  // 上链时间(13位毫秒级时间戳)
  uploadChainTime: string(name='upload_chain_time', example='1628563284015'),
  // 上链文件下载链接
  fileUrl: string(name='file_url', example='https://pic2.zhimg.com/v2-4d91e54c6cc5d225471684987a2061a1_r.jpg'),
  // 上链文件名称，要求包含扩展名。文件格式允许: pdf, txt, doc, docx
  fileName: string(name='file_name', example='上链文件.pdf'),
}

// 电子回单查询凭证数据
model ScpTicketIssueDataParam {
  // 凭证id
  issueId: string(name='issue_id', example='12345566'),
  // 凭证对应的司机/货主的did
  did: string(name='did', example='11111'),
}

// 货物损失详情
model CargoLoss {
  // 物品类型
  cargoType?: string(maxLength=200, name='cargo_type', example='电子/3C'),
  // 物品名称
  cargoName: string(maxLength=500, name='cargo_name', example='诺基亚nokiai103'),
  // 物品所有人
  cargoOwner?: string(maxLength=200, name='cargo_owner', example='福建省漳州市漳浦县201站点'),
  // 物品损失描述 
  cargoLossDesc?: string(maxLength=500, name='cargo_loss_desc', example='外包装破损'),
  // 损失预估，单位（元），最多支持2位小数
  cargoLossEstimateAmount: string(name='cargo_loss_estimate_amount', example='20.00'),
}

// 资费项账单
model ReceiptBillTariffParam {
  // 操作动作,为空为新增或更新，UPDATE为更新，DELETE为删除
  action?: string(name='action', example='UPDATE、DELETE、INSERT'),
  //  账单金额 业务必填
  billAmount?: string(name='bill_amount', example='暂无'),
  // 应收账单 、应收资费项 多对多关联code 
  receiptBillTariffCode: string(name='receipt_bill_tariff_code', example='暂无'),
  // 资费项金额 业务必填
  receiptTariffAmount?: string(name='receipt_tariff_amount', example='暂无'),
  // 应收资费项编号 业务必填
  receiptTariffCode?: string(name='receipt_tariff_code', example='暂无'),
}

// 上传订单总金额
model UploadOrderAmount {
  // 币种
  currency: string(name='currency', example='人民币'),
  // 总金额
  totalAmount: string(name='total_amount', example='123.23'),
}

// 索赔资料附件
model ClaimInformation {
  // 索赔资料地址url
  fileUrl: string(maxLength=500, name='file_url', example='https://www.xxx.com'),
  // 文件名	
  fileName: string(maxLength=200, name='file_name', example='客服判责资料 '),
}

// 信用凭证数据集合
model IssueTransferData {
  // 凭证id
  issueId: string(name='issue_id', example='11111111'),
  // 转出方did
  payerDid: string(name='payer_did', example='11111'),
  // 接收方did
  rcvDid: string(name='rcv_did', example='111111'),
}

// 电子提单批次下提单明细
model EblDetail {
  // 电子提单copy文件hash
  eblCopyPdfFileHash: string(name='ebl_copy_pdf_file_hash', example='暂无'),
  // 电子提单copy文件id
  eblCopyPdfFileId: string(name='ebl_copy_pdf_file_id', example='暂无'),
  // 电子提单编号
  eblNo: string(name='ebl_no', example='暂无'),
}

// 包含文件id、文件hash信息
model UploadFileInfo {
  // 文件id
  fileId: string(name='file_id', example='123456'),
  // 文件hash
  fileHash: string(name='file_hash', example='ca94860b2f902e1ba7917d2c6a983cc43e5b3921f4b7ab28ea791ac28314ba52'),
}

// 提单货物数据
model MasterBlGoodsDto {
  // 唛头
  marks?: string(name='marks', example='暂无'),
  // 货物
  goods: string(name='goods', example='笔记本电脑'),
  // 货物类型
  goodsType: string(name='goods_type', example='暂无'),
  // 包装类型
  packageType?: string(name='package_type', example='暂无'),
  // 委托件数
  number: string(name='number', example='10000'),
  // 委托重量
  weight: string(name='weight', example='暂无'),
  // 委托体积
  volume: string(name='volume', example='暂无'),
}

// 运单号-司机运费
model WaybillAmount {
  // 运单金额（2位小数）
  amount: string(name='amount', example='100000.00'),
  // 运单号
  waybillId: string(name='waybill_id', example='123456'),
}

// 承运人责任险保险标的信息
model InsureCarrierObjectInfo {
  // 厂牌型号
  cpModel: string(name='cp_model', example='xxxx'),
  // 车架号
  frameNo: string(name='frame_no', example='xxx'),
  // 车牌号码
  licenseNo: string(name='license_no', example='京A23211'),
  // 吨位
  tonNage: string(name='ton_nage', example='10'),
  // 行驶证车主
  drivPer: string(name='driv_per', example='张三'),
  // 运营证号
  runNo: string(name='run_no', example='xxxx'),
  // 运输货物
  tsCarGo: string(name='ts_car_go', example='运输货物'),
}

// 创建凭证Two
model VoucherTestTwo {
  // 测试Boolean
  voucherTestTwoBoolean: boolean(name='voucher_test_two_boolean', example='test'),
  // 凭证列表_apiTestList
  voucherTestTwoApiTestList: [ VoucherTestOne ](name='voucher_test_two_api_test_list', example='test'),
  // 测试Int
  voucherTestTwoInt: long(name='voucher_test_two_int', example='test'),
  // 测试Integer
  voucherTestTwoInteger: long(maximum=10, minimum=0, name='voucher_test_two_integer', example='test'),
  // 凭证列表_dateList
  voucherTestTwoDateList: [ string ](name='voucher_test_two_date_list', example='test'),
  // 测试String
  voucherTestTwoString: string(maxLength=10, minLength=0, name='voucher_test_two_string', example='test'),
  // 测试Date
  voucherTestTwoDate: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='voucher_test_two_date', example='test'),
  // 凭证列表_integerList
  voucherTestTwoIntegerList: [ long ](name='voucher_test_two_integer_list', example='test'),
  // 测试Long
  voucherTestTwoLong: long(maximum=10, minimum=0, name='voucher_test_two_long', example='test'),
  // 凭证列表_longList
  voucherTestTwoLongList: [ long ](name='voucher_test_two_long_list', example='test'),
  // 凭证列表_stringList
  voucherTestTwoStringList: [ string ](name='voucher_test_two_string_list', example='test'),
  // 测试apiTestInfo
  voucherTestTwoApiTestInfo: VoucherTestOne(name='voucher_test_two_api_test_info', example='test'),
  // 凭证列表_booleanList
  voucherTestTwoBooleanList: [ boolean ](name='voucher_test_two_boolean_list', example='test'),
}

// 资费项发票
model ReceiptTariffInvoiceParam {
  // 操作动作,为空为新增或更新，UPDATE为更新，DELETE为删除
  action?: string(name='action', example='暂无'),
  // 发票金额 业务必填
  invoiceAmount?: string(name='invoice_amount', example='暂无'),
  // 资费项金额 业务必填
  receiptTariffAmount?: string(name='receipt_tariff_amount', example='暂无'),
  // 资费单据编号 业务必填
  receiptTariffCode?: string(name='receipt_tariff_code', example='暂无'),
  // 资费项发票code
  receiptTariffInvoiceCode: string(name='receipt_tariff_invoice_code', example='暂无'),
}

// 航运集装箱ID信息
model ContainerIdInfo {
  // 箱子唯一标识
  containerId?: string(name='container_id', example='暂无'),
  // 箱号
  containerNo?: string(name='container_no', example='暂无'),
}

// 文档信息
model Document {
  // 文档url
  documentUrl: string(maxLength=500, name='document_url', example='https://www.baidu.com/s?wd=图片&rsv_spt=1&rsv_iqid=0xb'),
  // 文档名称 
  documentName: string(maxLength=200, name='document_name', example='客诉材料'),
}

// 货物信息
model GoodsInfo {
  // 货物ID [业务必填]
  goodsId?: string(name='goods_id', example='暂无'),
  // 唛头
  // 
  // 
  marks?: string(name='marks', example='暂无'),
  // 货物名称
  goods?: string(name='goods', example='暂无'),
  // 货物类型
  goodsType?: string(name='goods_type', example='暂无'),
  // 货物重量
  weight?: string(name='weight', example='暂无'),
  // 件数
  number?: string(name='number', example='暂无'),
}

// 池融资授信额度信息
model PfCreditQuotaInfo {
  // 证件号
  certNo: string(name='cert_no', example='6323232'),
  // 证件类型
  certType: string(name='cert_type', example='0'),
  // 授信到期日期
  creditEnd: string(name='credit_end', example='2020-09-19'),
  // 授信起始日期
  creditStart: string(name='credit_start', example='2020-09-11'),
  // 额度编号
  quotaNo: string(name='quota_no', example='923323'),
  // 剩余额度
  remainingQuota: string(name='remaining_quota', example='1'),
  // SON:放款账号loanAccNo
  // 还款账号repayAcctNo
  remark: string(name='remark', example='loanAccNo'),
  // 额度状态：
  // 0、停用 / 1、启用  /  2、冻结
  status: string(name='status', example='0'),
  // 授信额度
  totalQuota: string(name='total_quota', example='0'),
  // 数据更新时间
  updateTime: string(name='update_time', example='2020-09-10'),
  // 总质押额度
  totalPledgeQuota: string(name='total_pledge_quota', example='100'),
  // 剩余质押额度
  remainPledgeQuota: string(name='remain_pledge_quota', example='10'),
}

model CreateReceivableBillRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 测试
  test?: AuthParty(name='test'),
  // 的撒
  status: string(name='status'),
}

model CreateReceivableBillResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回结果
  txCodes?: [ TxDto ](name='tx_codes'),
}

/**
 * Description: 标准化应收账单
 * Summary: 标准化应收账单
 */
async function createReceivableBill(request: CreateReceivableBillRequest): CreateReceivableBillResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createReceivableBillEx(request, headers, runtime);
}

/**
 * Description: 标准化应收账单
 * Summary: 标准化应收账单
 */
async function createReceivableBillEx(request: CreateReceivableBillRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateReceivableBillResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.receivable.bill.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateStandardVoucherRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 账户是否存在
  exist: boolean(name='exist'),
  // 签署方
  voucherTestOne: VoucherTestTwo(name='voucher_test_one'),
  // 数据标识
  businessCode: string(maxLength=10, minLength=0, name='business_code'),
  // 凭证列表_apiTestList
  voucherTestThree: [ VoucherTestTwo ](name='voucher_test_three'),
  // 发行时间
  issueTime: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='issue_time'),
  // 凭证列表_voucherList
  voucherList: [ string ](name='voucher_list'),
  // 发行金额_Long
  amountLong: long(maximum=10, minimum=0, name='amount_long'),
  // 发行金额_Integer
  amountInt: long(maximum=10, minimum=0, name='amount_int'),
  // 签署方
  voucherTestTwo: VoucherTestTwo(name='voucher_test_two'),
  // 凭证列表_booleanList
  booleanList: [ boolean ](name='boolean_list'),
  // 凭证列表_dateList
  dateList: [ string ](name='date_list'),
  // 资产类型
  assetType: string(maxLength=10, minLength=0, name='asset_type'),
}

model CreateStandardVoucherResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 凭证返回值_voucherResp
  voucherResp: VoucherResp(name='voucher_resp'),
  // 编码
  code: string(name='code'),
  // 凭证返回值_voucherRespList
  voucherRespList: [ VoucherResp ](name='voucher_resp_list'),
}

/**
 * Description: 创建凭证
 * Summary: 创建凭证
 */
async function createStandardVoucher(request: CreateStandardVoucherRequest): CreateStandardVoucherResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createStandardVoucherEx(request, headers, runtime);
}

/**
 * Description: 创建凭证
 * Summary: 创建凭证
 */
async function createStandardVoucherEx(request: CreateStandardVoucherRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateStandardVoucherResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.standard.voucher.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreatePlatformDidRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 企业名称
  epCertName: string(name='ep_cert_name'),
  // 企业信用号码
  epCertNo: string(name='ep_cert_no'),
  // 企业法人姓名
  legalPersonCertName: string(name='legal_person_cert_name'),
  // 企业法人身份证号码
  legalPersonCertNo: string(name='legal_person_cert_no'),
  // 扩展字段
  extensionInfo?: string(name='extension_info'),
}

model CreatePlatformDidResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 无车承运平台DIS
  did?: string(name='did'),
}

/**
 * Description: 无车承运平台为自身申请DIS分布式数字身份
 * Summary: 无车承运平台DIS分布式数字身份申请
 */
async function createPlatformDid(request: CreatePlatformDidRequest): CreatePlatformDidResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createPlatformDidEx(request, headers, runtime);
}

/**
 * Description: 无车承运平台为自身申请DIS分布式数字身份
 * Summary: 无车承运平台DIS分布式数字身份申请
 */
async function createPlatformDidEx(request: CreatePlatformDidRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreatePlatformDidResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.platform.did.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateAgentDidRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 创建did的代理did
  agentDid: string(name='agent_did'),
  // 企业名称
  epCertName: string(name='ep_cert_name'),
  // 企业信用号码
  epCertNo: string(name='ep_cert_no'),
  // 扩展字段
  extensionInfo?: string(name='extension_info'),
  // 企业法人姓名
  legalPersonCertName: string(name='legal_person_cert_name'),
  // 企业法人身份证号码
  legalPersonCertNo: string(name='legal_person_cert_no'),
}

model CreateAgentDidResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 无车承运平台did
  did?: string(name='did'),
}

/**
 * Description: 代理申请无车承运平台的DIS分布式数字身份。无车saas平台需要为平台中的各个无车承运平台创建dis时需要使用代理创建的模式为其创建分布式数字身份。代理申请分布式数字身份的前置条件为自身需已有分布式数字身份。
 * Summary: 无车承运平台DIS分布式数字身份代理申请
 */
async function createAgentDid(request: CreateAgentDidRequest): CreateAgentDidResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createAgentDidEx(request, headers, runtime);
}

/**
 * Description: 代理申请无车承运平台的DIS分布式数字身份。无车saas平台需要为平台中的各个无车承运平台创建dis时需要使用代理创建的模式为其创建分布式数字身份。代理申请分布式数字身份的前置条件为自身需已有分布式数字身份。
 * Summary: 无车承运平台DIS分布式数字身份代理申请
 */
async function createAgentDidEx(request: CreateAgentDidRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateAgentDidResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.agent.did.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateConsignorDisRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 企业名称
  epCertName: string(name='ep_cert_name'),
  // 企业信用号码
  epCertNo: string(name='ep_cert_no'),
  // 扩展字段
  extensionInfo?: string(name='extension_info'),
  // 企业法人姓名
  legalPersonCertName?: string(name='legal_person_cert_name'),
  // 企业法人身份证号码
  legalPersonCertNo?: string(name='legal_person_cert_no'),
  // 所属承运平台did
  platformDid: string(name='platform_did'),
  // 是否核验货主四要素，如果为true  法人姓名和法人身份证号为必填
  checkAll: boolean(name='check_all'),
}

model CreateConsignorDisResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 货主did信息
  did?: string(name='did'),
}

/**
 * Description: 无车承运平台为货主申请联盟中唯一标识货主的DIS分布式数字身份,会对企业信息做核验，同一个企业多次申请dis将会返回相同的分布式数字身份。为货主申请分布式数字身份的前置条件为无车承运平台需已有分布式数字身份。
 * Summary: 货主DIS分布式数字身份申请
 */
async function createConsignorDis(request: CreateConsignorDisRequest): CreateConsignorDisResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createConsignorDisEx(request, headers, runtime);
}

/**
 * Description: 无车承运平台为货主申请联盟中唯一标识货主的DIS分布式数字身份,会对企业信息做核验，同一个企业多次申请dis将会返回相同的分布式数字身份。为货主申请分布式数字身份的前置条件为无车承运平台需已有分布式数字身份。
 * Summary: 货主DIS分布式数字身份申请
 */
async function createConsignorDisEx(request: CreateConsignorDisRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateConsignorDisResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.consignor.dis.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateDriverDisRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 司机身份证号码
  certNo: string(name='cert_no'),
  // 扩展字段
  extensionInfo?: string(name='extension_info'),
  // 司机手机号码
  mobile: string(name='mobile'),
  // 司机姓名
  name: string(name='name'),
  // 所属承运平台did
  platformDid: string(name='platform_did'),
}

model CreateDriverDisResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 司机did
  did?: string(name='did'),
}

/**
 * Description: 无车承运平台为司机申请DIS分布式数字身份,会对司机做实人认证，同一个司机多次申请dis会返回相同的分布式数字身份。为司机申请分布式数字身份的前置条件为无车承运平台需已有分布式数字身份。
 * Summary: 司机DIS分布式数字身份申请
 */
async function createDriverDis(request: CreateDriverDisRequest): CreateDriverDisResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createDriverDisEx(request, headers, runtime);
}

/**
 * Description: 无车承运平台为司机申请DIS分布式数字身份,会对司机做实人认证，同一个司机多次申请dis会返回相同的分布式数字身份。为司机申请分布式数字身份的前置条件为无车承运平台需已有分布式数字身份。
 * Summary: 司机DIS分布式数字身份申请
 */
async function createDriverDisEx(request: CreateDriverDisRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateDriverDisResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.driver.dis.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateCargoOrderRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 运费
  allFreight: string(name='all_freight'),
  // 货物行业编码
  cargoBusinessCode?: string(name='cargo_business_code'),
  // 货物商品编码
  cargoCode?: string(name='cargo_code'),
  // 货运险金额
  cargoInsuranceMoney?: string(name='cargo_insurance_money'),
  // 货物名称
  cargoName: string(name='cargo_name'),
  // 货源单号
  cargoOrder: string(name='cargo_order'),
  // 货物类型
  cargoType: string(name='cargo_type'),
  // 货物单位
  cargoUnit?: string(name='cargo_unit'),
  // 货物体积，单位（方）
  cargoVolume?: string(name='cargo_volume'),
  // 货主did
  consignorDid: string(name='consignor_did'),
  // 卸货地，XX省-XX市-XX区
  deliveryPlace: string(name='delivery_place'),
  // 装货地，XX省-XX市-XX区
  loadingPlace: string(name='loading_place'),
  // 所属承运平台did
  platformDid: string(name='platform_did'),
  // 货源单创建时间
  startTime: long(name='start_time'),
  // 联系人电话
  userPhone?: string(name='user_phone'),
  // 货物重量，单位（吨）
  weight: string(name='weight'),
}

model CreateCargoOrderResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 货源链上凭证
  txCode?: string(name='tx_code'),
}

/**
 * Description: 货源订单创建，货主发货给平台时的订单信息
 * Summary: 货源订单创建
 */
async function createCargoOrder(request: CreateCargoOrderRequest): CreateCargoOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createCargoOrderEx(request, headers, runtime);
}

/**
 * Description: 货源订单创建，货主发货给平台时的订单信息
 * Summary: 货源订单创建
 */
async function createCargoOrderEx(request: CreateCargoOrderRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateCargoOrderResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.cargo.order.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateCargoPayRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  //  收款方银行账号
  bankAccountOfPayee?: string(name='bank_account_of_payee'),
  // 付款方银行账号,货主付款的开户银行账号
  bankAccountOfPayer?: string(name='bank_account_of_payer'),
  // 银行流水号
  bankNo: string(name='bank_no'),
  // 收款方开户行（平台收款）
  // 取值：
  // MYBank_CloudCapital_2,  ## 云资金2.0
  bankOfPayee?: string(name='bank_of_payee'),
  // MYBank_CloudCapital_2,  ## 云资金2.0
  bankOfPayer?: string(name='bank_of_payer'),
  // 货源单号
  cargoOrder: string(name='cargo_order'),
  // 核验渠道，请按取值约束值填入。
  // 
  // YBank_CloudCapital_2,  ## 云资金2.0
  checkChannel?: string(name='check_channel'),
  // CNY、USD
  // 币种
  currency?: string(name='currency'),
  // 费用类型 (运费、调度费、服务费)
  expenseType: string(name='expense_type'),
  // 收款方名称
  payee?: string(name='payee'),
  // 付款方名称
  payer?: string(name='payer'),
  // 费用金额
  payment: string(name='payment'),
  // 是否核验
  payCheck?: boolean(name='pay_check'),
  // 付款方did
  payDid: string(name='pay_did'),
  // 平台支付单号
  payId: string(name='pay_id'),
  // 支付备注
  payNote?: string(name='pay_note'),
  // 支付时间
  payTime: long(name='pay_time'),
  // 支付类型
  payType?: string(name='pay_type'),
  // 收款方did
  recvDid: string(name='recv_did'),
  // 支持关联单个运单和多个运单
  taxWaybillIds: [ string ](name='tax_waybill_ids'),
}

model CreateCargoPayResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 货源支付链上凭证
  txCode?: string(name='tx_code'),
}

/**
 * Description: 货源支付订单创建,货源订单需存在。
 * Summary: 货源支付订单创建
 */
async function createCargoPay(request: CreateCargoPayRequest): CreateCargoPayResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createCargoPayEx(request, headers, runtime);
}

/**
 * Description: 货源支付订单创建,货源订单需存在。
 * Summary: 货源支付订单创建
 */
async function createCargoPayEx(request: CreateCargoPayRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateCargoPayResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.cargo.pay.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateWaybillOrderRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 用户链上账户 与司机did 二选一填写
  accountId?: string(name='account_id'),
  // 运费，单位（元），平台支付给司机的运费金额
  allFreight?: string(name='all_freight'),
  // 回单押金
  backFee?: string(name='back_fee'),
  // 业务类型
  businessType?: string(name='business_type'),
  // 货物行业编码
  cargoBusinessCode?: string(name='cargo_business_code'),
  // 货物商品编码
  cargoCode?: string(name='cargo_code'),
  // 货运险金额
  cargoInsuranceMoney?: string(name='cargo_insurance_money'),
  // 货源单号，关联货主订单
  cargoOrder?: string(name='cargo_order'),
  // 货源单号数组
  cargoOrders?: [ string ](name='cargo_orders'),
  // 货物单位
  cargoUnit?: string(name='cargo_unit'),
  // 货物体积，单位（方）
  cargoVolume?: string(name='cargo_volume'),
  // 货物重量，单位（吨）
  cargoWeight?: string(name='cargo_weight'),
  // 车牌颜色，黄色、蓝色、绿色
  cartBadgeColor: string(name='cart_badge_color'),
  // 车牌号
  // 
  cartBadgeNo: string(name='cart_badge_no'),
  // 承运商did
  carCaptainDid?: string(name='car_captain_did'),
  // 货主运费金额，单位（元），货主支付给平台的运费金额
  consignorFreightAmount?: string(name='consignor_freight_amount'),
  // 建单时间，13位毫秒级时间戳
  // 
  createdTime: long(name='created_time'),
  // 到达门点时间，13位毫秒级时间戳
  destDoorsEndTime?: long(name='dest_doors_end_time'),
  // 门点城市CODE，6位区域行政编码
  doorsCityCode?: string(name='doors_city_code'),
  // 门点城市名称
  doorsCityName?: string(name='doors_city_name'),
  // 门点区县CODE，6位区域行政编码
  doorsCountyCode?: string(name='doors_county_code'),
  // 门点区县名称
  doorsCountyName?: string(name='doors_county_name'),
  // 门点行政区划代码
  doorsDivisionCode?: string(name='doors_division_code'),
  // 门点省份CODE，6位区域行政编码
  doorsProvinceCode?: string(name='doors_province_code'),
  // 门点省份名称
  doorsProvinceName?: string(name='doors_province_name'),
  // 发货方名称
  // 
  drawee: string(name='drawee'),
  // 发货方纳税人识别号
  // 
  draweeTaxNo: string(name='drawee_tax_no'),
  // 司机分布式身份
  driverDid: string(name='driver_did'),
  // 司机姓名 已填司机分布式身份的情况下可不填
  // 
  driverName?: string(name='driver_name'),
  // 目的地详细地址
  endAddress?: string(name='end_address'),
  // 目的地城市CODE，6位区域行政编码
  // 
  endCityCode: string(name='end_city_code'),
  // 目的地城市名称
  // 
  endCityName: string(name='end_city_name'),
  // 目的地区县CODE，6位区域行政编码
  endCountyCode?: string(name='end_county_code'),
  // 目的地区县名称
  // 
  endCountyName?: string(name='end_county_name'),
  // 结束行政区划代码，12位区域行政编码，（长途运输须准确提供前6位，如不能提供后6位可补0；短途运输须准确提供12位）
  // 
  endDivisionCode: string(name='end_division_code'),
  // 目的地省份CODE，6位区域行政编码
  // 
  endProvinceCode: string(name='end_province_code'),
  // 目的地省份名称
  // 
  endProvinceName: string(name='end_province_name'),
  // 目的地街道CODE，12区域行政编码
  endStreetCode?: string(name='end_street_code'),
  // 目的地街道名称
  endStreetName?: string(name='end_street_name'),
  // 运费增项
  // 
  freightIncr?: string(name='freight_incr'),
  // 货物数量
  // 
  goodsAmount?: long(name='goods_amount'),
  // 货物数量单位类型
  // 
  goodsAmountType?: string(name='goods_amount_type'),
  // 货物名称
  // 
  goodsName: string(name='goods_name'),
  // 司机身份证号 已填司机分布式身份的情况下可不填
  idCard?: string(name='id_card'),
  // 运费扣减
  // 
  lossFee?: string(name='loss_fee'),
  // 司机手机号 已填司机分布式身份的情况下可不填
  // 
  mobileNo?: string(name='mobile_no'),
  // 系统识别id 网商识别号
  // 
  partnerId?: string(name='partner_id'),
  // 无车承运平台分布式数字身份，缺省时为自己的分布式数字身份
  // 
  platformDid: string(name='platform_did'),
  // 预付款金额
  // 
  prepayments?: string(name='prepayments'),
  // 线下预付ETC
  // 
  prepaymentsBuyEtc?: string(name='prepayments_buy_etc'),
  // 线下气款金额
  // 
  prepaymentsBuyGas?: string(name='prepayments_buy_gas'),
  // 运单id
  // 
  taxWaybillId: string(name='tax_waybill_id'),
  // 线下油款预付
  // 
  prepaymentsBuyOil?: string(name='prepayments_buy_oil'),
  // 预付ETC卡金额
  // 
  prepaymentsEtccard?: string(name='prepayments_etccard'),
  // 预付油卡金额
  // 
  prepaymentsOilcard?: string(name='prepayments_oilcard'),
  // 油卡赠送金额
  // 
  presentAmountOil?: string(name='present_amount_oil'),
  // 起始地详细地址
  startAddress?: string(name='start_address'),
  // 起始地城市CODE，6位区域行政编码
  startCityCode: string(name='start_city_code'),
  // 起始地城市名称
  // 
  startCityName: string(name='start_city_name'),
  // 起始地区县CODE，6位区域行政编码
  startCountyCode?: string(name='start_county_code'),
  // 起始地区县名称
  // 
  startCountyName?: string(name='start_county_name'),
  // 起始行政区划代码，12位区域行政编码（长途运输须准确提供前6位，如不能提供后6位可补0；短途运输须准确提供12位）
  // 
  startDivisionCode: string(name='start_division_code'),
  // 起始地省份CODE，6位区域行政编码
  startProvinceCode: string(name='start_province_code'),
  // 起始地省份名称
  // 
  startProvinceName: string(name='start_province_name'),
  // 起始地街道CODE，12区域行政编码
  startStreetCode?: string(name='start_street_code'),
  // 起始地街道名称
  startStreetName?: string(name='start_street_name'),
  // 起运时间戳，13位毫秒级时间戳
  startTime?: long(name='start_time'),
  // 车长，可以填：不限车长或者1.8，2.7，3.8，4.2，5，6.2，6.8，7.7，8.2，8.7，9.6，11.7，12.5，13，13.7，15，16，17.5等不超过2位小数的数字
  truckLength?: string(name='truck_length'),
  // 可以填：不限车型，平板，高栏，厢式，集装箱，自卸，冷藏，保温，高低板，面包车，棉被车，爬梯车，飞翼车
  truckType?: string(name='truck_type'),
  // 运输单价
  // 
  unitPrice?: string(name='unit_price'),
}

model CreateWaybillOrderResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 链上凭证
  txCode?: string(name='tx_code'),
}

/**
 * Description: 物流平台将运单指派给下游（承运商、司机）时产生
 * Summary: 运单创建
 */
async function createWaybillOrder(request: CreateWaybillOrderRequest): CreateWaybillOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createWaybillOrderEx(request, headers, runtime);
}

/**
 * Description: 物流平台将运单指派给下游（承运商、司机）时产生
 * Summary: 运单创建
 */
async function createWaybillOrderEx(request: CreateWaybillOrderRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateWaybillOrderResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.waybill.order.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateWaybillPayRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 确认到账时间
  // 
  arriveTime: long(name='arrive_time'),
  // 关联银行流水号
  // 
  bankSn: string(name='bank_sn'),
  // 付款金额
  // 
  payAmount: string(name='pay_amount'),
  // 付款方银行账号
  // 
  payBankCardNo: string(name='pay_bank_card_no'),
  // 付款方开户行
  // 
  payBankName: string(name='pay_bank_name'),
  // 是否核验
  payCheck?: boolean(name='pay_check'),
  // 付款方did
  // 
  payDid: string(name='pay_did'),
  // 付款方名称
  // 
  payName: string(name='pay_name'),
  // 付款时间戳
  // 
  payTime: long(name='pay_time'),
  // 支付类型
  // 
  payTypeNew: string(name='pay_type_new'),
  // 支付方式
  // 
  payWay: string(name='pay_way'),
  // 无车承运平台分布式数字身份，缺省为自己的分布式数字身份
  // 
  platformDid: string(name='platform_did'),
  // 支付订单ID
  // 
  posInfoId: string(name='pos_info_id'),
  // 实际付款方开户行
  // 
  realPayBank: string(name='real_pay_bank'),
  // 实际付款方银行账号
  // 
  realPayBankCardNo: string(name='real_pay_bank_card_no'),
  // 实际付款方名称
  // 
  realPayName: string(name='real_pay_name'),
  // 收款方银行账号
  // 
  recvBankCardNo: string(name='recv_bank_card_no'),
  // 收款方开户行
  // 
  recvBankName: string(name='recv_bank_name'),
  // 收款方did
  // 
  recvDid: string(name='recv_did'),
  // 收款方名称
  // 
  recvName: string(name='recv_name'),
  // 关联的运单ID
  // 
  waybillId: string(name='waybill_id'),
  // MYBank_CloudCapital_1,  ## 云资金1.0
  // MYBank_CloudCapital_2,  ## 云资金2.0
  checkChannel?: string(name='check_channel'),
  // CNY, USD
  currency?: string(name='currency'),
}

model CreateWaybillPayResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 链上凭证
  // 
  txCode?: string(name='tx_code'),
}

/**
 * Description: 创建物流支付订单，运单需已存在并且未结束
 * Summary: 运单支付订单创建
 */
async function createWaybillPay(request: CreateWaybillPayRequest): CreateWaybillPayResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createWaybillPayEx(request, headers, runtime);
}

/**
 * Description: 创建物流支付订单，运单需已存在并且未结束
 * Summary: 运单支付订单创建
 */
async function createWaybillPayEx(request: CreateWaybillPayRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateWaybillPayResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.waybill.pay.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ImportWaybillLocationRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 描述信息
  // 
  desc?: string(name='desc'),
  // 运单轨迹信息
  location: [ LogisticLocation ](name='location'),
  // 所属平台分布式数字身份，缺省时为自己的分布式数字身份
  // 
  platformDid: string(name='platform_did'),
  // 运单id
  // 
  taxWaybillId: string(name='tax_waybill_id'),
}

model ImportWaybillLocationResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 用于上报第三方的轨迹位置信息，运单需已存在并且未结束
 * Summary: 第三方位置信息上报
 */
async function importWaybillLocation(request: ImportWaybillLocationRequest): ImportWaybillLocationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return importWaybillLocationEx(request, headers, runtime);
}

/**
 * Description: 用于上报第三方的轨迹位置信息，运单需已存在并且未结束
 * Summary: 第三方位置信息上报
 */
async function importWaybillLocationEx(request: ImportWaybillLocationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ImportWaybillLocationResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.waybill.location.import', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateWaybillBillRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 受票方名称
  // 
  drawee: string(name='drawee'),
  // 受票方纳税人识别号
  // 
  draweeTaxNo: string(name='drawee_tax_no'),
  // 发票代码
  // 
  lzfpdm?: string(name='lzfpdm'),
  // 发票号码
  // 
  lzfphm?: string(name='lzfphm'),
  // 开票时间戳
  // 
  openTime: long(name='open_time'),
  // 所属平台的分布式数字身份，缺省时为自己的分布式数字身份
  // 
  platformDid: string(name='platform_did'),
  // 关联的运单ID
  // 
  waybillId: string(name='waybill_id'),
}

model CreateWaybillBillResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 链上凭证
  // 
  txCode?: string(name='tx_code'),
}

/**
 * Description: 发票订单创建
 * Summary: 发票订单创建
 */
async function createWaybillBill(request: CreateWaybillBillRequest): CreateWaybillBillResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createWaybillBillEx(request, headers, runtime);
}

/**
 * Description: 发票订单创建
 * Summary: 发票订单创建
 */
async function createWaybillBillEx(request: CreateWaybillBillRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateWaybillBillResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.waybill.bill.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryWaybillStatusRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 无车承运平台分布式数字身份，缺省时为自己的分布式数字身份
  // 
  platformDid?: string(name='platform_did'),
  // 运单ID
  // 
  taxWaybillId: string(name='tax_waybill_id'),
}

model QueryWaybillStatusResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 运单状态
  // 
  status?: string(name='status'),
  // 轨迹核验结果
  trackCheckResult?: TrackCheckResult(name='track_check_result'),
}

/**
 * Description: 查询物流运单状态
 * Summary: 查询运单状态
 */
async function queryWaybillStatus(request: QueryWaybillStatusRequest): QueryWaybillStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryWaybillStatusEx(request, headers, runtime);
}

/**
 * Description: 查询物流运单状态
 * Summary: 查询运单状态
 */
async function queryWaybillStatusEx(request: QueryWaybillStatusRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryWaybillStatusResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.waybill.status.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model FinishWaybillOrderRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链上账号 与司机did 二选一填写
  // 
  accountId?: string(name='account_id'),
  // 运费，单位（元），平台支付给司机的运费
  allFreight: string(name='all_freight'),
  // 回单押金
  // 
  backFee?: string(name='back_fee'),
  // 业务类型
  businessType?: string(name='business_type'),
  // 货物行业编码
  cargoBusinessCode?: string(name='cargo_business_code'),
  // 货物商品编码
  cargoCode?: string(name='cargo_code'),
  // 货物运费险
  cargoInsuranceMoney?: string(name='cargo_insurance_money'),
  // 货源单号
  // 
  cargoOrder?: string(name='cargo_order'),
  // 货物单位
  cargoUnit?: string(name='cargo_unit'),
  // 货物体积，单位（方）
  cargoVolume?: string(name='cargo_volume'),
  // 货物重量，单位（吨）
  cargoWeight?: string(name='cargo_weight'),
  // 车牌颜色，黄色、蓝色、绿色
  cartBadgeColor: string(name='cart_badge_color'),
  // 车牌号
  // 
  cartBadgeNo: string(name='cart_badge_no'),
  // 承运商did
  carCaptainDid?: string(name='car_captain_did'),
  // 货主运费金额，货主支付给平台的运费金额
  consignorFreightAmount: string(name='consignor_freight_amount'),
  // 建单时间，13位毫秒级时间戳
  createdTime: long(name='created_time'),
  // 到达门点时间，13位毫秒级时间戳
  destDoorsEndTime?: long(name='dest_doors_end_time'),
  // 门点城市CODE，6位区域行政编码
  doorsCityCode?: string(name='doors_city_code'),
  // 门点城市名称
  doorsCityName?: string(name='doors_city_name'),
  // 门点区县CODE，6位区域行政编码
  doorsCountyCode?: string(name='doors_county_code'),
  // 门点区县名称
  doorsCountyName?: string(name='doors_county_name'),
  // 门点行政区划代码，12位区域行政编码，（长途运输须准确提供前6位，如不能提供后6位可补0；短途运输须准确提供12位）
  doorsDivisionCode?: string(name='doors_division_code'),
  // 门点省份CODE，6位区域行政编
  doorsProvinceCode?: string(name='doors_province_code'),
  // 门点省份名称
  doorsProvinceName?: string(name='doors_province_name'),
  // 发货方名称
  // 
  drawee: string(name='drawee'),
  // 发货方纳税人识别号
  // 
  draweeTaxNo: string(name='drawee_tax_no'),
  // 司机分布式数字身份
  // 
  driverDid: string(name='driver_did'),
  // 司机姓名 已填司机分布式身份的情况下可不填
  // 
  driverName?: string(name='driver_name'),
  // 目的地详细地址
  endAddress?: string(name='end_address'),
  // 目的地城市CODE，6位区域行政编
  endCityCode: string(name='end_city_code'),
  // 目的地城市名称
  // 
  endCityName: string(name='end_city_name'),
  // 目的地区县CODE，6位区域行政编
  endCountyCode?: string(name='end_county_code'),
  // 目的地区县名称
  // 
  endCountyName?: string(name='end_county_name'),
  // 结束行政区划代码 ，12位区域行政编，（长途运输须准确提供前6位，如不能提供后6位可补0；短途运输须准确提供12位）
  // 
  endDivisionCode: string(name='end_division_code'),
  // 目的地省份CODE，6位区域行政编
  // 
  endProvinceCode: string(name='end_province_code'),
  // 目的地省份名称
  // 
  endProvinceName: string(name='end_province_name'),
  // 目的地街道CODE，12位行政区域编码
  endStreetCode?: string(name='end_street_code'),
  // 目的地街道名称
  endStreetName?: string(name='end_street_name'),
  // 终结时间，13位毫秒级时间戳
  endTime: long(name='end_time'),
  // 运费增项
  // 
  freightIncr?: string(name='freight_incr'),
  // 货物数量
  // 
  goodsAmount?: long(name='goods_amount'),
  // 货物数量单位类型
  // 
  goodsAmountType?: string(name='goods_amount_type'),
  // 货物名称
  // 
  goodsName: string(name='goods_name'),
  // 司机身份证号 已填司机分布式身份的情况下可不填
  // 
  idCard?: string(name='id_card'),
  // 运费扣减
  // 
  lossFee?: string(name='loss_fee'),
  // 司机手机号 已填司机分布式身份的情况下可不填
  // 
  mobileNo?: string(name='mobile_no'),
  // 系统识别id 网商识别号
  // 
  partnerId?: string(name='partner_id'),
  // 是否进行资金验证
  // 
  payCheck?: boolean(name='pay_check'),
  // 无车承运平台分布式数字身份，缺省时为自己的分布式数字身份
  // 
  platformDid: string(name='platform_did'),
  // 预付款金额
  // 
  prepayments?: string(name='prepayments'),
  // 线下预付ETC
  // 
  prepaymentsBuyEtc?: string(name='prepayments_buy_etc'),
  // 线下气款金额
  // 
  prepaymentsBuyGas?: string(name='prepayments_buy_gas'),
  // 线下油款预付
  // 
  prepaymentsBuyOil?: string(name='prepayments_buy_oil'),
  // 预付ETC卡金额
  // 
  prepaymentsEtccard?: string(name='prepayments_etccard'),
  // 预付油卡金额
  // 
  prepaymentsOilcard?: string(name='prepayments_oilcard'),
  // 油卡赠送金额
  // 
  presentAmountOil?: string(name='present_amount_oil'),
  // 起始地详细地址
  startAddress?: string(name='start_address'),
  // 起始地CODE
  // ，6位区域行政编
  startCityCode: string(name='start_city_code'),
  // 起始地城市名称
  // 
  startCityName: string(name='start_city_name'),
  // 起始地区县CODE
  // ，6位区域行政编
  startCountyCode?: string(name='start_county_code'),
  // 起始地区县名称
  // 
  startCountyName?: string(name='start_county_name'),
  // 起始行政区划代码，12位区域行政编，（长途运输须准确提供前6位，如不能提供后6位可补0；短途运输须准确提供12位）
  // 
  startDivisionCode: string(name='start_division_code'),
  // 起始地省份CODE
  // ，6位区域行政编
  startProvinceCode: string(name='start_province_code'),
  // 起始地省份名称
  // 
  startProvinceName: string(name='start_province_name'),
  // 起始地街道CODE，12位区域行政编
  startStreetCode?: string(name='start_street_code'),
  // 起始地街道名称
  startStreetName?: string(name='start_street_name'),
  // 起运时间，13位毫秒级时间戳
  // 
  startTime: long(name='start_time'),
  // 运单ID
  // 
  taxWaybillId: string(name='tax_waybill_id'),
  // 车长，可以填：不限车长或者1.8，2.7，3.8，4.2，5，6.2，6.8，7.7，8.2，8.7，9.6，11.7，12.5，13，13.7，15，16，17.5等不超过2位小数的数字
  truckLength?: string(name='truck_length'),
  // 车型，可以填写：不限车型，平板，高栏，厢式，集装箱，自卸，冷藏，保温，高低板，面包车，棉被车，爬梯车，飞翼车
  truckType?: string(name='truck_type'),
  // 运输单价
  // 
  unitPrice?: string(name='unit_price'),
}

model FinishWaybillOrderResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 链上凭证
  // 
  // 
  txCode?: string(name='tx_code'),
}

/**
 * Description: 运单完成表示整个运单的生命周期结束的最终状态，一般为和司机已进行确认结算后调用
完成后的运单无法再调用支付订单与轨迹位置上传接口。
 * Summary: 运单完成
 */
async function finishWaybillOrder(request: FinishWaybillOrderRequest): FinishWaybillOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return finishWaybillOrderEx(request, headers, runtime);
}

/**
 * Description: 运单完成表示整个运单的生命周期结束的最终状态，一般为和司机已进行确认结算后调用
完成后的运单无法再调用支付订单与轨迹位置上传接口。
 * Summary: 运单完成
 */
async function finishWaybillOrderEx(request: FinishWaybillOrderRequest, headers: map[string]string, runtime: Util.RuntimeOptions): FinishWaybillOrderResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.waybill.order.finish', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateCargoPayorderRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 收款方银行账号
  bankAccountOfPayee?: string(name='bank_account_of_payee'),
  // 付款方银行账号,货主付款的开户银行账号
  bankAccountOfPayer?: string(name='bank_account_of_payer'),
  // 银行流水号，云资金校验时 必传；
  // 
  bankNo?: string(name='bank_no'),
  // 收款方开户行（平台收款）
  // 
  // MYBank_CloudCapital_2,  ## 云资金2.0
  // 
  // 
  bankOfPayee?: string(name='bank_of_payee'),
  // 付款方开户行(货主付款)  取值
  // 
  // MYBank_CloudCapital_2,  ## 云资金2.0
  bankOfPayer?: string(name='bank_of_payer'),
  // 账单编号
  billId?: string(name='bill_id'),
  // 货源单号
  // 
  cargoOrder: string(name='cargo_order'),
  // 核验渠道，请按取值约束值填入
  // MYBank_CloudCapital_2,  ## 云资金2.0
  checkChannel?: string(name='check_channel'),
  // 币种  
  // 按下列取值：
  // CNY、USD
  // 
  // 
  currency?: string(name='currency'),
  // 费用类型 (运费、调度费、服务费)
  // 
  expenseType: string(name='expense_type'),
  // 收款方名称
  payee?: string(name='payee'),
  // 付款方名称
  payer?: string(name='payer'),
  // 费用金额（运单维度）
  // 
  payment: string(name='payment'),
  // 是否核验
  payCheck?: boolean(name='pay_check'),
  // 付款方did
  // 
  payDid: string(name='pay_did'),
  // 支付单号
  // 
  payId: string(name='pay_id'),
  // 支付备注
  // 
  payNote?: string(name='pay_note'),
  // 支付时间
  // 
  payTime: long(name='pay_time'),
  // 支付类型
  // 
  payType?: string(name='pay_type'),
  // 所属平台did
  platformDid: string(name='platform_did'),
  // 收款方did
  recvDid: string(name='recv_did'),
  // 请求唯一标识
  requestId: string(name='request_id'),
  // 运单号
  taxWaybillId: string(name='tax_waybill_id'),
}

model CreateCargoPayorderResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 货源支付链上凭证
  // 
  txCode?: string(name='tx_code'),
}

/**
 * Description: 货源支付订单创建,货源订单需存在。
 * Summary: 货源支付订单创建
 */
async function createCargoPayorder(request: CreateCargoPayorderRequest): CreateCargoPayorderResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createCargoPayorderEx(request, headers, runtime);
}

/**
 * Description: 货源支付订单创建,货源订单需存在。
 * Summary: 货源支付订单创建
 */
async function createCargoPayorderEx(request: CreateCargoPayorderRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateCargoPayorderResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.cargo.payorder.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SaveWaybillOrderRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链上账号 与司机did 二选一填写
  // 
  accountId?: string(name='account_id'),
  // 运费，单位（元），平台支付给司机的运费
  allFreight: string(name='all_freight'),
  // 回单押金
  // 
  backFee?: string(name='back_fee'),
  // 业务类型
  businessType?: string(name='business_type'),
  // 货物行业编码
  // 
  cargoBusinessCode?: string(name='cargo_business_code'),
  // 货物商品编码
  // 
  cargoCode?: string(name='cargo_code'),
  // 货物运费险
  // 
  cargoInsuranceMoney?: string(name='cargo_insurance_money'),
  // 货源单号
  // 
  cargoOrder?: string(name='cargo_order'),
  // 货物单位
  // 
  cargoUnit?: string(name='cargo_unit'),
  // 货物体积，单位（方）
  // 
  cargoVolume?: string(name='cargo_volume'),
  // 货物重量，单位（吨）
  cargoWeight?: string(name='cargo_weight'),
  // 车牌颜色，黄色、蓝色、绿色
  cartBadgeColor: string(name='cart_badge_color'),
  // 车牌号
  // 
  cartBadgeNo: string(name='cart_badge_no'),
  // 承运商did
  carCaptainDid?: string(name='car_captain_did'),
  // 货主运费金额，货主支付给平台的运费
  // 
  consignorFreightAmount: string(name='consignor_freight_amount'),
  // 建单时间，13位毫秒级时间戳
  createdTime: long(name='created_time'),
  // 到达门点时间，13位毫秒级时间戳
  destDoorsEndTime?: long(name='dest_doors_end_time'),
  // 门点城市CODE，6位区域行政编码
  doorsCityCode?: string(name='doors_city_code'),
  // 门点城市名称
  doorsCityName?: string(name='doors_city_name'),
  // 门点区县CODE，6位区域行政编码
  doorsCountyCode?: string(name='doors_county_code'),
  // 门点区县名称
  doorsCountyName?: string(name='doors_county_name'),
  // 门点行政区划代码，12位区域行政编码（长途运输须准确提供前6位，如不能提供后6位可补0；短途运输须准确提供12位）
  doorsDivisionCode?: string(name='doors_division_code'),
  // 门点省份CODE，6位区域行政编码
  doorsProvinceCode?: string(name='doors_province_code'),
  // 门点省份名称
  doorsProvinceName?: string(name='doors_province_name'),
  // 发货方名称
  // 
  drawee: string(name='drawee'),
  // 发货方纳税人识别号
  // 
  draweeTaxNo: string(name='drawee_tax_no'),
  // 司机分布式数字身份
  // 
  driverDid: string(name='driver_did'),
  // 司机姓名 已填司机分布式身份的情况下可不填
  // 
  driverName?: string(name='driver_name'),
  // 目的地详细地址
  endAddress?: string(name='end_address'),
  // 目的地城市CODE，6位区域行政编码
  // 
  endCityCode: string(name='end_city_code'),
  // 目的地城市名称
  // 
  endCityName: string(name='end_city_name'),
  // 目的地区县CODE，6位区域行政编码
  endCountyCode?: string(name='end_county_code'),
  // 目的地区县名称
  // 
  endCountyName?: string(name='end_county_name'),
  // 结束行政区划代码（长途运输须准确提供前6位，如不能提供后6位可补0；短途运输须准确提供12位）
  // 
  endDivisionCode: string(name='end_division_code'),
  // 目的地省份CODE，6位区域行政编码
  endProvinceCode: string(name='end_province_code'),
  // 目的地省份名称
  // 
  endProvinceName: string(name='end_province_name'),
  // 目的地街道CODE，12位区域行政编码
  endStreetCode?: string(name='end_street_code'),
  // 目的地街道名称
  endStreetName?: string(name='end_street_name'),
  // 运达时间，13位毫秒级时间戳
  endTime: long(name='end_time'),
  // 运费增项
  // 
  freightIncr?: string(name='freight_incr'),
  // 货物数量
  // 
  goodsAmount?: string(name='goods_amount'),
  // 货物数量单位类型
  // 
  goodsAmountType?: string(name='goods_amount_type'),
  // 货物名称
  // 
  goodsName: string(name='goods_name'),
  // 司机身份证号 已填司机分布式身份的情况下可不填
  // 
  idCard?: string(name='id_card'),
  // 运费扣减
  // 
  lossFee?: string(name='loss_fee'),
  // 司机手机号 已填司机分布式身份的情况下可不填
  // 
  mobileNo?: string(name='mobile_no'),
  // 系统识别id 网商识别号
  // 
  partnerId?: string(name='partner_id'),
  // 是否进行资金验证
  // 
  payCheck?: boolean(name='pay_check'),
  // 无车承运平台分布式数字身份，缺省时为自己的分布式数字身份
  // 
  platformDid: string(name='platform_did'),
  // 预付款金额
  // 
  prepayments?: string(name='prepayments'),
  // 线下预付ETC
  // 
  prepaymentsBuyEtc?: string(name='prepayments_buy_etc'),
  // 线下气款金额
  // 
  prepaymentsBuyGas?: string(name='prepayments_buy_gas'),
  // 线下油款预付
  // 
  prepaymentsBuyOil?: string(name='prepayments_buy_oil'),
  // 预付ETC卡金额
  // 
  prepaymentsEtccard?: string(name='prepayments_etccard'),
  // 预付油卡金额
  // 
  prepaymentsOilcard?: string(name='prepayments_oilcard'),
  // 油卡赠送金额
  // 
  presentAmountOil?: string(name='present_amount_oil'),
  // 起始地详细地址
  startAddress?: string(name='start_address'),
  // 起始地城市CODE，6位区域行政编码
  // 
  startCityCode: string(name='start_city_code'),
  // 起始地城市名称
  // 
  startCityName: string(name='start_city_name'),
  // 起始地区县CODE，6位区域行政编码
  // 
  // 
  startCountyCode?: string(name='start_county_code'),
  // 起始地区县名称
  // 
  startCountyName?: string(name='start_county_name'),
  // 起始行政区划代码（长途运输须准确提供前6位，如不能提供后6位可补0；短途运输须准确提供12位）
  // 
  startDivisionCode: string(name='start_division_code'),
  // 起始地省份CODE，6位区域行政编码
  // 
  // 
  startProvinceCode: string(name='start_province_code'),
  // 起始地省份名称
  // 
  startProvinceName: string(name='start_province_name'),
  // 起始地街道CODE，12位区域行政编码
  startStreetCode?: string(name='start_street_code'),
  // 起始地街道名称
  startStreetName?: string(name='start_street_name'),
  // 起运时间，13位毫秒级时间戳
  startTime: long(name='start_time'),
  // 运单ID
  // 
  taxWaybillId: string(name='tax_waybill_id'),
  // 车长，可以填：不限车长或者1.8，2.7，3.8，4.2，5，6.2，6.8，7.7，8.2，8.7，9.6，11.7，12.5，13，13.7，15，16，17.5等不超过2位小数的数字
  truckLength?: string(name='truck_length'),
  // 车型
  truckType?: string(name='truck_type'),
  // 运输单价
  // 
  unitPrice?: string(name='unit_price'),
}

model SaveWaybillOrderResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 链上凭证
  // 
  txCode?: string(name='tx_code'),
}

/**
 * Description: 当货物到达目的地时，调用此接口
 * Summary: 运单运输完成
 */
async function saveWaybillOrder(request: SaveWaybillOrderRequest): SaveWaybillOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return saveWaybillOrderEx(request, headers, runtime);
}

/**
 * Description: 当货物到达目的地时，调用此接口
 * Summary: 运单运输完成
 */
async function saveWaybillOrderEx(request: SaveWaybillOrderRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SaveWaybillOrderResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.waybill.order.save', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CloseWaybillOrderRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 无车承运平台分布式数字身份
  platformDid: string(name='platform_did'),
  // 运单ID
  // 
  taxWaybillId: string(name='tax_waybill_id'),
}

model CloseWaybillOrderResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 链上凭证
  // 
  txCode?: string(name='tx_code'),
}

/**
 * Description: 运单关闭
 * Summary: 运单关闭
 */
async function closeWaybillOrder(request: CloseWaybillOrderRequest): CloseWaybillOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return closeWaybillOrderEx(request, headers, runtime);
}

/**
 * Description: 运单关闭
 * Summary: 运单关闭
 */
async function closeWaybillOrderEx(request: CloseWaybillOrderRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CloseWaybillOrderResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.waybill.order.close', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model FinishFinanceWaybillRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 运费
  allFreight?: string(name='all_freight'),
  // 回单押金
  backFee?: string(name='back_fee'),
  // 货主支付运费金额
  consignorFreightAmount: string(name='consignor_freight_amount'),
  // 运费增项
  freightIncr?: string(name='freight_incr'),
  // 运费扣减
  lossFee?: string(name='loss_fee'),
  // 无车承运平台分布式数字身份，缺省时为自己的分布式数字身份
  platformDid: string(name='platform_did'),
  // 运单id
  taxWaybillId: string(name='tax_waybill_id'),
}

model FinishFinanceWaybillResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 链上凭证
  txCode?: string(name='tx_code'),
}

/**
 * Description: 完成物流运单
 * Summary: 完成物流运单
 */
async function finishFinanceWaybill(request: FinishFinanceWaybillRequest): FinishFinanceWaybillResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return finishFinanceWaybillEx(request, headers, runtime);
}

/**
 * Description: 完成物流运单
 * Summary: 完成物流运单
 */
async function finishFinanceWaybillEx(request: FinishFinanceWaybillRequest, headers: map[string]string, runtime: Util.RuntimeOptions): FinishFinanceWaybillResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.finance.waybill.finish', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model FinishFinanceTransportRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 运费
  allFreight?: string(name='all_freight'),
  // 回单押金
  backFee?: string(name='back_fee'),
  // 货主支付运费金额
  consignorFreightAmount: string(name='consignor_freight_amount'),
  // 到达门点时间
  destDoorsEndTime?: long(name='dest_doors_end_time'),
  // 终结时间
  endTime: long(name='end_time'),
  // 运费增项
  freightIncr?: string(name='freight_incr'),
  // 运费扣减
  lossFee?: string(name='loss_fee'),
  // 无车承运平台分布式数字身份，缺省时为自己的分布式数字身份
  platformDid: string(name='platform_did'),
  // 运单id
  taxWaybillId: string(name='tax_waybill_id'),
}

model FinishFinanceTransportResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 货源支付链上凭证
  // 
  txCode?: string(name='tx_code'),
}

/**
 * Description: 运输完成
 * Summary: 运输完成
 */
async function finishFinanceTransport(request: FinishFinanceTransportRequest): FinishFinanceTransportResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return finishFinanceTransportEx(request, headers, runtime);
}

/**
 * Description: 运输完成
 * Summary: 运输完成
 */
async function finishFinanceTransportEx(request: FinishFinanceTransportRequest, headers: map[string]string, runtime: Util.RuntimeOptions): FinishFinanceTransportResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.finance.transport.finish', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateFinanceWaybillRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 运费，单位（元），平台支付给司机的运费
  allFreight?: string(name='all_freight'),
  // 回单押金
  backFee?: string(name='back_fee'),
  // 业务类型
  businessType?: string(name='business_type'),
  // 货物行业编码
  cargoBusinessCode?: string(name='cargo_business_code'),
  // 货物商品编码
  cargoCode?: string(name='cargo_code'),
  // 货物运费险
  cargoInsuranceMoney?: string(name='cargo_insurance_money'),
  // 货源单号
  cargoOrder?: string(name='cargo_order'),
  // 货物单位
  cargoUnit?: string(name='cargo_unit'),
  // 货物体积，单位（方）
  cargoVolume?: string(name='cargo_volume'),
  // 货物重量，单位（吨）
  cargoWeight?: string(name='cargo_weight'),
  // 车牌颜色，黄色、蓝色、绿色
  cartBadgeColor?: string(name='cart_badge_color'),
  // 车牌号
  cartBadgeNo?: string(name='cart_badge_no'),
  // 承运商did
  carCaptainDid?: string(name='car_captain_did'),
  // 货主支付运费金额，货主支付给平台的运费金额
  consignorFreightAmount?: string(name='consignor_freight_amount'),
  // 建单时间，13位毫秒级时间戳
  createdTime?: long(name='created_time'),
  // 到达门点时间，13位毫秒级时间戳
  destDoorsEndTime?: string(name='dest_doors_end_time'),
  // 门点城市CODE，6位区域行政编码
  doorsCityCode?: string(name='doors_city_code'),
  // 门点城市名称
  doorsCityName?: string(name='doors_city_name'),
  // 门点区县CODE，6位区域行政编码
  doorsCountyCode?: string(name='doors_county_code'),
  // 门点区县名称
  doorsCountyName?: string(name='doors_county_name'),
  // 门点行政区划代码，12位区域行政编码，（长途运输须准确提供前6位，如不能提供后6位可补0；短途运输须准确提供12位）
  doorsDivisionCode?: string(name='doors_division_code'),
  // 门点省份CODE，6位行政区域编码
  doorsProvinceCode?: string(name='doors_province_code'),
  // 门点省份名称
  doorsProvinceName?: string(name='doors_province_name'),
  // 发货方名称
  drawee?: string(name='drawee'),
  // 发货方纳税人识别号
  draweeTaxNo?: string(name='drawee_tax_no'),
  // 司机分布式数字身份
  driverDid?: string(name='driver_did'),
  // 目的地详细地址
  endAddress?: string(name='end_address'),
  // 目的地城市CODE，6位区域行政编码
  endCityCode?: string(name='end_city_code'),
  // 目的地城市名称
  endCityName?: string(name='end_city_name'),
  // 目的地区县CODE
  endCountyCode?: string(name='end_county_code'),
  // 目的地区县名称，6位区域行政编码
  endCountyName?: string(name='end_county_name'),
  // 结束行政区划代码，12位区域行政编码，（长途运输须准确提供前6位，如不能提供后6位可补0；短途运输须准确提供12位）
  endDivisionCode?: string(name='end_division_code'),
  // 目的地省份CODE，6位区域行政编码
  endProvinceCode?: string(name='end_province_code'),
  // 目的地省份名称
  endProvinceName?: string(name='end_province_name'),
  // 目的地街道CODE，12位区域行政编码
  endStreetCode?: string(name='end_street_code'),
  // 目的地街道名称
  endStreetName?: string(name='end_street_name'),
  // 终结时间，13位毫秒级时间戳
  endTime?: long(name='end_time'),
  // 运费增项
  freightIncr?: string(name='freight_incr'),
  // 货物数量
  goodsAmount?: long(name='goods_amount'),
  // 货物数量单位类型
  goodsAmountType?: string(name='goods_amount_type'),
  // 货物名称
  goodsName?: string(name='goods_name'),
  // 运费扣减
  lossFee?: string(name='loss_fee'),
  // 网商识别号
  partnerId?: string(name='partner_id'),
  // 无车承运平台分布式数字身份，缺省时为自己的分布式数字身份
  // 
  platformDid: string(name='platform_did'),
  // 预付款金额
  prepayments?: string(name='prepayments'),
  // 线下预付ETC
  prepaymentsBuyEtc?: string(name='prepayments_buy_etc'),
  // 线下气款金额
  prepaymentsBuyGas?: string(name='prepayments_buy_gas'),
  // 线下油款预付
  prepaymentsBuyOil?: string(name='prepayments_buy_oil'),
  // 预付ETC卡金额
  prepaymentsEtccard?: string(name='prepayments_etccard'),
  // 预付油卡金额
  prepaymentsOilcard?: string(name='prepayments_oilcard'),
  // 油卡赠送金额
  presentAmountOil?: string(name='present_amount_oil'),
  // 起始地详细地址
  startAddress?: string(name='start_address'),
  // 起始地CODE，6位区域行政编码
  startCityCode?: string(name='start_city_code'),
  // 起始地城市名称
  startCityName?: string(name='start_city_name'),
  // 起始地区县CODE，6位区域行政编码
  startCountyCode?: string(name='start_county_code'),
  // 起始地区县名称
  startCountyName?: string(name='start_county_name'),
  // 起始行政区划代码，12位区域行政编码（长途运输须准确提供前6位，如不能提供后6位可补0；短途运输须准确提供12位）
  startDivisionCode?: string(name='start_division_code'),
  // 起始地省份CODE，6位区域行政编码
  startProvinceCode?: string(name='start_province_code'),
  // 起始地省份名称
  startProvinceName?: string(name='start_province_name'),
  // 起始地街道CODE，12位区域行政编码
  startStreetCode?: string(name='start_street_code'),
  // 起始地街道名称
  startStreetName?: string(name='start_street_name'),
  // 起运时间戳，13位毫秒级时间戳
  startTime?: long(name='start_time'),
  // 运单id
  taxWaybillId: string(name='tax_waybill_id'),
  // 车长，可以填：不限车长或者1.8，2.7，3.8，4.2，5，6.2，6.8，7.7，8.2，8.7，9.6，11.7，12.5，13，13.7，15，16，17.5等不超过2位小数的数字
  truckLength?: string(name='truck_length'),
  // 车型，可以填写：不限车型，平板，高栏，厢式，集装箱，自卸，冷藏，保温，高低板，面包车，棉被车，爬梯车，飞翼车
  truckType?: string(name='truck_type'),
  // 运输单价
  unitPrice?: string(name='unit_price'),
}

model UpdateFinanceWaybillResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 货源支付链上凭证
  // 
  txCode?: string(name='tx_code'),
}

/**
 * Description: 对运单信息项需更新时调用
 * Summary: 更新运单
 */
async function updateFinanceWaybill(request: UpdateFinanceWaybillRequest): UpdateFinanceWaybillResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateFinanceWaybillEx(request, headers, runtime);
}

/**
 * Description: 对运单信息项需更新时调用
 * Summary: 更新运单
 */
async function updateFinanceWaybillEx(request: UpdateFinanceWaybillRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateFinanceWaybillResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.finance.waybill.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartFinanceWaybillRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 货物运费险
  cargoInsuranceMoney?: string(name='cargo_insurance_money'),
  // 车牌颜色
  cartBadgeColor: string(name='cart_badge_color'),
  // 车牌号
  cartBadgeNo: string(name='cart_badge_no'),
  // 承运商did
  carCaptainDid?: string(name='car_captain_did'),
  // 司机分布式数字身份
  driverDid: string(name='driver_did'),
  // 无车承运平台分布式数字身份，缺省时为自己的分布式数字身份
  platformDid: string(name='platform_did'),
  // 起运时间，13位毫秒级时间戳
  startTime: long(name='start_time'),
  // 运单id
  taxWaybillId: string(name='tax_waybill_id'),
}

model StartFinanceWaybillResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 货源支付链上凭证
  // 
  txCode?: string(name='tx_code'),
}

/**
 * Description: 当司机到达货主装货地后，调用此接口
 * Summary: 起运运单
 */
async function startFinanceWaybill(request: StartFinanceWaybillRequest): StartFinanceWaybillResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startFinanceWaybillEx(request, headers, runtime);
}

/**
 * Description: 当司机到达货主装货地后，调用此接口
 * Summary: 起运运单
 */
async function startFinanceWaybillEx(request: StartFinanceWaybillRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartFinanceWaybillResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.finance.waybill.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateCaptainDisRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 身份证号码
  certNo: string(name='cert_no'),
  // 扩展字段
  extensionInfo?: string(name='extension_info'),
  // 手机号码
  mobile: string(name='mobile'),
  // 姓名
  name: string(name='name'),
  // 所属平台did
  platformDid: string(name='platform_did'),
}

model CreateCaptainDisResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 车队长did
  did?: string(name='did'),
}

/**
 * Description: 创建承运商账户
 * Summary: 创建承运商账户
 */
async function createCaptainDis(request: CreateCaptainDisRequest): CreateCaptainDisResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createCaptainDisEx(request, headers, runtime);
}

/**
 * Description: 创建承运商账户
 * Summary: 创建承运商账户
 */
async function createCaptainDisEx(request: CreateCaptainDisRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateCaptainDisResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.captain.dis.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateCargowaybillBillRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 货主账单总额（两位小数）
  billAmount: string(name='bill_amount'),
  // 账单code（唯一标识）
  billCode: string(name='bill_code'),
  // 账单生成时间(毫秒)
  billCreateTime: long(name='bill_create_time'),
  // 账单期限，单位（天），需填写1到360之间的整数
  billDeadline: string(name='bill_deadline'),
  // 付款方did
  billPayerDid: string(name='bill_payer_did'),
  // 货源单号-货主运费列表
  cargoAmounts: [ CargoAmount ](name='cargo_amounts'),
  // 币种
  currency: string(name='currency'),
  // 货主支付方式-支付金额列表
  payAmounts: [ PayAmount ](name='pay_amounts'),
  // 平台did
  platformDid: string(name='platform_did'),
  // 预计货主付款日期
  preConsignorPayDate: long(name='pre_consignor_pay_date'),
  // 运单号-司机运费列表
  waybillAmounts: [ WaybillAmount ](name='waybill_amounts'),
  // 账单到期日期
  deadline: long(name='deadline'),
  // 运单上传状态，可填写：已完成、未完成
  waybillUploadStatus: string(name='waybill_upload_status'),
}

model CreateCargowaybillBillResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 链上凭证
  txCode?: string(name='tx_code'),
}

/**
 * Description: 创建货主账单
 * Summary: 货主账单创建
 */
async function createCargowaybillBill(request: CreateCargowaybillBillRequest): CreateCargowaybillBillResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createCargowaybillBillEx(request, headers, runtime);
}

/**
 * Description: 创建货主账单
 * Summary: 货主账单创建
 */
async function createCargowaybillBillEx(request: CreateCargowaybillBillRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateCargowaybillBillResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.cargowaybill.bill.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ConfirmCargowaybillBillRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 账单金额（两位小数）
  billAmount: string(name='bill_amount'),
  // 账单code（账单唯一标识）
  billCode: string(name='bill_code'),
  // 账单确认货主did
  billConsignorDid: string(name='bill_consignor_did'),
  // 账单确认日期（毫秒）
  billSureDate?: long(name='bill_sure_date'),
  // 是否结算
  whetherSettle: boolean(name='whether_settle'),
  // 平台did
  platformDid: string(name='platform_did'),
}

model ConfirmCargowaybillBillResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 链上凭证
  txCode?: string(name='tx_code'),
}

/**
 * Description: 确认货主账单
 * Summary: 货主账单确认
 */
async function confirmCargowaybillBill(request: ConfirmCargowaybillBillRequest): ConfirmCargowaybillBillResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return confirmCargowaybillBillEx(request, headers, runtime);
}

/**
 * Description: 确认货主账单
 * Summary: 货主账单确认
 */
async function confirmCargowaybillBillEx(request: ConfirmCargowaybillBillRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ConfirmCargowaybillBillResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.cargowaybill.bill.confirm', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateCargowaybillBillsettleRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 平台did
  platformDid: string(name='platform_did'),
  // 账单code（账单唯一标识）
  billCode: string(name='bill_code'),
  // 结算金额（2位小数）
  settleAmount: string(name='settle_amount'),
  // 结算状态（只有2种状态：部分结算、已结清）
  settleStatus: string(name='settle_status'),
}

model CreateCargowaybillBillsettleResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 链上凭证
  txCode?: string(name='tx_code'),
}

/**
 * Description: 结算货主账单
 * Summary: 货主账单结算
 */
async function createCargowaybillBillsettle(request: CreateCargowaybillBillsettleRequest): CreateCargowaybillBillsettleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createCargowaybillBillsettleEx(request, headers, runtime);
}

/**
 * Description: 结算货主账单
 * Summary: 货主账单结算
 */
async function createCargowaybillBillsettleEx(request: CreateCargowaybillBillsettleRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateCargowaybillBillsettleResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.cargowaybill.billsettle.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateWaybillorderPlatformdidRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 新平台diid
  newPlatformDid: string(name='new_platform_did'),
  // 老平台did
  oldPlatformDid: string(name='old_platform_did'),
  // 运单号
  taxWaybillId: string(name='tax_waybill_id'),
}

model UpdateWaybillorderPlatformdidResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 链上凭证
  txCode?: string(name='tx_code'),
}

/**
 * Description: 运单平台did更新
 * Summary: 运单平台did更新
 */
async function updateWaybillorderPlatformdid(request: UpdateWaybillorderPlatformdidRequest): UpdateWaybillorderPlatformdidResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateWaybillorderPlatformdidEx(request, headers, runtime);
}

/**
 * Description: 运单平台did更新
 * Summary: 运单平台did更新
 */
async function updateWaybillorderPlatformdidEx(request: UpdateWaybillorderPlatformdidRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateWaybillorderPlatformdidResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.waybillorder.platformdid.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateCargowaybillBillRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 货主账单总额（两位小数）
  billAmount: string(name='bill_amount'),
  // 账单code（唯一标识）
  billCode: string(name='bill_code'),
  // 账单生成时间(毫秒)
  billCreateTime: long(name='bill_create_time'),
  // 账单期限，单位（天），需填写1到360之间的整数
  billDeadline: string(name='bill_deadline'),
  // 付款方did
  billPayerDid: string(name='bill_payer_did'),
  // 货源单号-货主运费列表
  cargoAmounts: [ CargoAmount ](name='cargo_amounts'),
  // 币种
  currency: string(name='currency'),
  // 账单到期日期
  deadline: long(name='deadline'),
  // 货主支付方式-支付金额列表
  payAmounts: [ PayAmount ](name='pay_amounts'),
  // 平台did
  platformDid: string(name='platform_did'),
  // 预计货主付款日期
  preConsignorPayDate: long(name='pre_consignor_pay_date'),
  // 运单号-司机运费列表
  waybillAmounts?: [ WaybillAmount ](name='waybill_amounts'),
  // 运单上传状态，可填写：已完成、未完成
  waybillUploadStatus: string(name='waybill_upload_status'),
}

model UpdateCargowaybillBillResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 链上凭证
  txCode?: string(name='tx_code'),
}

/**
 * Description: 更新货主账单
 * Summary: 货主账单更新
 */
async function updateCargowaybillBill(request: UpdateCargowaybillBillRequest): UpdateCargowaybillBillResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateCargowaybillBillEx(request, headers, runtime);
}

/**
 * Description: 更新货主账单
 * Summary: 货主账单更新
 */
async function updateCargowaybillBillEx(request: UpdateCargowaybillBillRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateCargowaybillBillResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.cargowaybill.bill.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateDisDidRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 个人身份证号。当组织类型为个人时，此字段为必填项
  certNo?: string(name='cert_no'),
  // 企业名称。当组织类型为企业时，此字段为必填项
  epCertName?: string(name='ep_cert_name'),
  // 企业信用号码。当组织类型为企业时，此字段为必填项
  epCertNo?: string(name='ep_cert_no'),
  // 扩展字段
  extensionInfo?: string(name='extension_info'),
  // 企业法人姓名。当申请企业类型网络货运平台或者子平台时，此字段为必填项
  legalPersonCertName?: string(name='legal_person_cert_name'),
  // 企业法人身份证号码。当申请企业类型网络货运平台或者子平台时，此字段为必填项
  legalPersonCertNo?: string(name='legal_person_cert_no'),
  // 个人手机号码。当组织类型为个人时，此字段为必填项
  mobile?: string(name='mobile'),
  // 个人姓名。当组织类型为个人时，此字段为必填项
  name?: string(name='name'),
  // 组织类型。企业或者个人，二选一填入
  organizationType: string(name='organization_type'),
  // 所属平台did。如果为空时，表示创建根平台，允许申请网络货运平台或者3pl角色。创建除根平台外的其他身份时，所属平台did必须填写。
  platformDid?: string(name='platform_did'),
  // 角色类型。
  // 当组织类型为个人时，可填角色：货主、司机、承运商；
  // 当组织类型为企业时，可填角色：网络货运平台、道路运输企业/3pl、货主、子平台、承运商、托盘方
  roleType: string(name='role_type'),
}

model CreateDisDidResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 分布式数字身份did
  did?: string(name='did'),
  // 组织类型
  organizationType?: string(name='organization_type'),
  // 现阶段此did下的所有授予的角色
  roleTypes?: [ string ](name='role_types'),
}

/**
 * Description: 分布式申请did账户集合，可通过此接口申请个人类型角色为货主、承运商、司机的分布式数字身份did；可申请企业类型角色为货主、网络货运平台、道路运输企业/3pl、承运商、子平台的分布式数字身份did。注：接口可允许多次调用，但每次调用只允许申请一个角色，不允许一次调用申请多个角色
 * Summary: 分布式数字身份申请did集合
 */
async function createDisDid(request: CreateDisDidRequest): CreateDisDidResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createDisDidEx(request, headers, runtime);
}

/**
 * Description: 分布式申请did账户集合，可通过此接口申请个人类型角色为货主、承运商、司机的分布式数字身份did；可申请企业类型角色为货主、网络货运平台、道路运输企业/3pl、承运商、子平台的分布式数字身份did。注：接口可允许多次调用，但每次调用只允许申请一个角色，不允许一次调用申请多个角色
 * Summary: 分布式数字身份申请did集合
 */
async function createDisDidEx(request: CreateDisDidRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateDisDidResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.dis.did.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UploadTransportContractRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 合同甲方did，一般为合同甲方的链上数字身份
  partyADid: string(name='party_a_did'),
  // 运输合同生效日期，格式要求yyyy-MM-dd
  contractEffectiveDate: string(name='contract_effective_date'),
  // 运输合同到期日期，要求格式yyyy-MM-dd
  contractExpiresDate: string(name='contract_expires_date'),
  // 影像件文件信息列表，可以包含多个文件，每个文件需要有文件id和文件hash  (请求蚂蚁影像上传接口获取的文件id和文件hash)。影像文件格式要求：bmp,jpg,jpeg,gif,psd,png,tiff,tga,eps,pdf
  fileInfos: [ UploadFileInfo ](name='file_infos'),
  // 合同乙方Did，一般为合同乙方的链上数字身份
  partyBDid: string(name='party_b_did'),
  // 运输合同编号
  transportContractCode: string(name='transport_contract_code'),
  // 所属平台did
  platformDid: string(name='platform_did'),
}

model UploadTransportContractResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 链上凭证
  txCode?: string(name='tx_code'),
}

/**
 * Description: 3PL运输合同上传
 * Summary: 3PL运输合同上传
 */
async function uploadTransportContract(request: UploadTransportContractRequest): UploadTransportContractResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return uploadTransportContractEx(request, headers, runtime);
}

/**
 * Description: 3PL运输合同上传
 * Summary: 3PL运输合同上传
 */
async function uploadTransportContractEx(request: UploadTransportContractRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UploadTransportContractResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.transport.contract.upload', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UploadTransportRouteRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 目的地省市区，要求格式 XX省-XX市-XX区，比如四川省-成都市-青白江区。当线路类型为STOCK_IN（即入库物流）时，此字段必填
  endAddress?: string(name='end_address'),
  // 目的地详细地址，街道村社区道路楼宇门牌号。当线路类型为STOCK_IN（即入库物流）时，此字段必填
  endDetailedAddress?: string(name='end_detailed_address'),
  // 起始地省市区，要求格式 XX省-XX市-XX区。比如浙江省-杭州市-余杭区。当线路类型为STOCK_OUT（即出库物流）时，此字段必填
  startAddress?: string(name='start_address'),
  // 起始地详细地址，街道村社区道路楼宇门牌号。当线路类型为STOCK_OUT（即出库物流）时，此字段必填
  startDetailedAddress?: string(name='start_detailed_address'),
  // 3plDid
  thirdPartyLogisticsDid: string(name='third_party_logistics_did'),
  // 运输合同编号
  transportContractCode: string(name='transport_contract_code'),
  // 运输线路编码
  transportRouteCode: string(name='transport_route_code'),
  // 线路类型，以下二选一填写（可填STOCK_OUT、STOCK_IN）。注：以上分别表示出库物流、入库物流
  routeType: string(name='route_type'),
}

model UploadTransportRouteResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 链上凭证
  txCode?: string(name='tx_code'),
}

/**
 * Description: 3PL运输线路上传
 * Summary: 3PL运输线路上传
 */
async function uploadTransportRoute(request: UploadTransportRouteRequest): UploadTransportRouteResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return uploadTransportRouteEx(request, headers, runtime);
}

/**
 * Description: 3PL运输线路上传
 * Summary: 3PL运输线路上传
 */
async function uploadTransportRouteEx(request: UploadTransportRouteRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UploadTransportRouteResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.transport.route.upload', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateTransportWaybillRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 运费，3pl支付给下承运商的运费金额，单位（元），要求格式为不超过二位小数
  allFreight: string(name='all_freight'),
  // 货物名称
  cargoName: string(name='cargo_name'),
  // 货物体积，单位（方）。货物重量、货物体积二选一填写
  cargoVolume?: string(name='cargo_volume'),
  // 货物重量，单位（吨）。货物重量、货物体积二选一填写
  cargoWeight?: string(name='cargo_weight'),
  // 下游承运商did，一般为下一级承运商数字身份
  carrierDid: string(name='carrier_did'),
  // 车牌颜色，需填写黄色、蓝色、绿色中的一种
  carBadgeColor: string(name='car_badge_color'),
  // 车牌号，承运车牌号
  carBadgeNo: string(name='car_badge_no'),
  // 货主did，一般为合同甲方的链上数字身份
  consignorDid: string(name='consignor_did'),
  // 创建时间，13位毫秒级时间戳
  createTime: long(name='create_time'),
  // 实际承运司机did，实际承运司机的链上数字身份
  driverDid: string(name='driver_did'),
  // 目的地省市区，要求格式 XX省-XX市-XX区，比如四川省-成都市-青白江区
  endAddress: string(name='end_address'),
  // 目的地详细地址，街道村社区道路楼宇门牌号
  endDetailedAddress: string(name='end_detailed_address'),
  // 货物数量
  goodsAmount?: long(name='goods_amount'),
  // 货物数量单位类型
  goodsAmountType?: string(name='goods_amount_type'),
  // 起始地省市区，要求格式 XX省-XX市-XX区。比如浙江省-杭州市-余杭区
  startAddress: string(name='start_address'),
  // 起始地详细地址，街道村社区道路楼宇门牌号
  startDetailedAddress: string(name='start_detailed_address'),
  // 客户系统内运单编号
  taxWaybillId: string(name='tax_waybill_id'),
  // 3plDid，一般为合同乙方的链上数字身份
  thirdPartyLogisticsDid: string(name='third_party_logistics_did'),
  // 所属合同编号
  transportContractCode?: string(name='transport_contract_code'),
  // 所属运输线路编码
  transportRouteCode?: string(name='transport_route_code'),
  // 托盘方did
  palletDid?: string(name='pallet_did'),
}

model CreateTransportWaybillResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 链上凭证
  txCode?: string(name='tx_code'),
}

/**
 * Description: 3PL运单创建
 * Summary: 3PL运单创建
 */
async function createTransportWaybill(request: CreateTransportWaybillRequest): CreateTransportWaybillResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createTransportWaybillEx(request, headers, runtime);
}

/**
 * Description: 3PL运单创建
 * Summary: 3PL运单创建
 */
async function createTransportWaybillEx(request: CreateTransportWaybillRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateTransportWaybillResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.transport.waybill.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateWaybillActionRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 操作类型，以下二选一填写：运单起运、运输完成
  operateAction: string(name='operate_action'),
  // 运单起运或运输完成的时间，要求为13位毫秒级时间戳
  operateActionTime: long(name='operate_action_time'),
  // 客户系统内运单编号
  taxWaybillId: string(name='tax_waybill_id'),
  // 3plDid，一般为合同乙方的链上数字身份
  thirdPartyLogisticsDid: string(name='third_party_logistics_did'),
}

model UpdateWaybillActionResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 链上凭证
  txCode?: string(name='tx_code'),
}

/**
 * Description: 3PL运单状态更新
 * Summary: 3PL运单状态更新
 */
async function updateWaybillAction(request: UpdateWaybillActionRequest): UpdateWaybillActionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateWaybillActionEx(request, headers, runtime);
}

/**
 * Description: 3PL运单状态更新
 * Summary: 3PL运单状态更新
 */
async function updateWaybillActionEx(request: UpdateWaybillActionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateWaybillActionResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.waybill.action.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateTransportWaybillRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 运费，3pl支付给下承运商的运费金额，单位（元），要求格式为不超过二位小数
  allFreight?: string(name='all_freight'),
  // 货物名称
  cargoName?: string(name='cargo_name'),
  // 单位（方），货物体积
  cargoVolume?: string(name='cargo_volume'),
  // 单位（吨），货物重量
  cargoWeight?: string(name='cargo_weight'),
  // 下游承运商did，一般为下一级承运商数字身份
  carrierDid?: string(name='carrier_did'),
  // 车牌颜色，需填写黄色、蓝色、绿色中的一种
  carBadgeColor?: string(name='car_badge_color'),
  // 车牌号，承运车牌号
  carBadgeNo?: string(name='car_badge_no'),
  // 货主did，一般为合同甲方的链上数字身份
  consignorDid?: string(name='consignor_did'),
  // 创建时间，13位毫秒级时间戳
  createTime?: long(name='create_time'),
  // 实际承运司机did，实际承运司机的链上数字身份
  driverDid?: string(name='driver_did'),
  // 目的地省市区，要求格式 XX省-XX市-XX区，比如四川省-成都市-青白江区
  endAddress?: string(name='end_address'),
  // 目的地详细地址，街道村社区道路楼宇门牌号
  endDetailedAddress?: string(name='end_detailed_address'),
  // 到达时间，13位毫秒级时间戳
  endTime?: long(name='end_time'),
  // 货物数量
  goodsAmount?: long(name='goods_amount'),
  // 货物数量单位类型
  goodsAmountType?: string(name='goods_amount_type'),
  // 起始地省市区，要求格式 XX省-XX市-XX区。比如浙江省-杭州市-余杭区
  startAddress?: string(name='start_address'),
  // 起始地详细地址，街道村社区道路楼宇门牌号
  startDetailedAddress?: string(name='start_detailed_address'),
  // 起运时间，13位毫秒级时间戳
  startTime?: long(name='start_time'),
  // 客户系统内运单编号
  taxWaybillId: string(name='tax_waybill_id'),
  // 3plDid，一般为合同乙方的链上数字身份
  thirdPartyLogisticsDid: string(name='third_party_logistics_did'),
  // 所属合同编号
  transportContractCode?: string(name='transport_contract_code'),
  // 所属运输线路编码
  transportRouteCode?: string(name='transport_route_code'),
  // 托盘方did
  palletDid?: string(name='pallet_did'),
}

model UpdateTransportWaybillResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 链上凭证
  txCode?: string(name='tx_code'),
}

/**
 * Description: 3PL运单修改
 * Summary: 3PL运单修改
 */
async function updateTransportWaybill(request: UpdateTransportWaybillRequest): UpdateTransportWaybillResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateTransportWaybillEx(request, headers, runtime);
}

/**
 * Description: 3PL运单修改
 * Summary: 3PL运单修改
 */
async function updateTransportWaybillEx(request: UpdateTransportWaybillRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateTransportWaybillResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.transport.waybill.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UploadTransportReceiptRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 货主did，一般为合同甲方的链上数字身份
  consignorDid: string(name='consignor_did'),
  // 请求蚂蚁影像上传接口上传文件获取的文件id和文件hash信息。影像文件格式：bmp,jpg,jpeg,gif,psd,png,tiff,tga,eps,pdf
  fileInfo: UploadFileInfo(name='file_info'),
  // 回单id，客户编辑的唯一回单编码
  receiptId: string(name='receipt_id'),
  // 客户系统内运单编号
  taxWaybillId: string(name='tax_waybill_id'),
  // 3plDid，一般为合同乙方的链上数字身份
  thirdPartyLogisticsDid: string(name='third_party_logistics_did'),
}

model UploadTransportReceiptResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 链上凭证
  txCode?: string(name='tx_code'),
}

/**
 * Description: 3PL回单上传
 * Summary: 3PL回单上传
 */
async function uploadTransportReceipt(request: UploadTransportReceiptRequest): UploadTransportReceiptResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return uploadTransportReceiptEx(request, headers, runtime);
}

/**
 * Description: 3PL回单上传
 * Summary: 3PL回单上传
 */
async function uploadTransportReceiptEx(request: UploadTransportReceiptRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UploadTransportReceiptResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.transport.receipt.upload', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateBillReceivablebillRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 账单总金额，单位（元），周期内应向发货方收取的运费总金额，不超过2位小数的数字
  billAmount: string(name='bill_amount'),
  // 账单生成时间，13位毫秒级时间戳
  billCreateTime: long(name='bill_create_time'),
  // 账单期限，单位（天），合同约定的结算周期，需填写1到360的整数
  billDeadline: long(name='bill_deadline'),
  // 账单id，客户生成的账单唯一编号
  billId: string(name='bill_id'),
  // 收款方did，账单的收款方数字身份
  billPayeeDid: string(name='bill_payee_did'),
  // 付款方did，账单的付款方数字身份
  billPayerDid: string(name='bill_payer_did'),
  // 账单起始日期，13位毫秒级时间戳
  billStartTime: long(name='bill_start_time'),
  // 关联合同编号，账单关联的合同编号，如为合同物流请填写
  // 
  contractCode?: string(name='contract_code'),
  // 账单到期日期，13位毫秒级时间戳
  deadline: long(name='deadline'),
  // 账单关联运单号数组，元素个数不能超过1000个
  waybillIds: [ string ](name='waybill_ids'),
  // 所属平台did
  platformDid: string(name='platform_did'),
}

model CreateBillReceivablebillResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 链上凭证
  txCode?: string(name='tx_code'),
}

/**
 * Description: 应收账单创建
 * Summary: 应收账单创建
 */
async function createBillReceivablebill(request: CreateBillReceivablebillRequest): CreateBillReceivablebillResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createBillReceivablebillEx(request, headers, runtime);
}

/**
 * Description: 应收账单创建
 * Summary: 应收账单创建
 */
async function createBillReceivablebillEx(request: CreateBillReceivablebillRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateBillReceivablebillResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.bill.receivablebill.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateReceivablebillStatusRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 账单id，客户生成的账单唯一编号
  billId: string(name='bill_id'),
  // 收款方did，账单的收款方数字身份
  billPayeeDid: string(name='bill_payee_did'),
  // 账单后续所可能产生的状态，以下三选一填写：账单确认、部分结算、已结清
  // 
  // 
  updateStatus: string(name='update_status'),
  // 更新状态时间，13位毫秒级时间戳
  updateStatusTime: long(name='update_status_time'),
}

model UpdateReceivablebillStatusResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 链上凭证
  txCode?: string(name='tx_code'),
}

/**
 * Description: 应收账单状态更新
 * Summary: 应收账单状态更新
 */
async function updateReceivablebillStatus(request: UpdateReceivablebillStatusRequest): UpdateReceivablebillStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateReceivablebillStatusEx(request, headers, runtime);
}

/**
 * Description: 应收账单状态更新
 * Summary: 应收账单状态更新
 */
async function updateReceivablebillStatusEx(request: UpdateReceivablebillStatusRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateReceivablebillStatusResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.receivablebill.status.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateBillReceivablebillRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 账单总金额，单位（元），周期内应向发货方收取的运费总金额，不超过2位小数的数字
  billAmount?: string(name='bill_amount'),
  // 账单生成时间，13位毫秒级时间戳
  billCreateTime?: long(name='bill_create_time'),
  // 账单期限，单位（天），合同约定的结算周期，需填写1到360的整数
  billDeadline?: long(name='bill_deadline'),
  // 账单id，客户生成的账单唯一编号
  billId: string(name='bill_id'),
  // 收款方did，账单的收款方数字身份
  billPayeeDid: string(name='bill_payee_did'),
  // 付款方did，账单的付款方数字身份
  billPayerDid?: string(name='bill_payer_did'),
  // 账单起始日期，13位毫秒级时间戳
  billStartTime?: long(name='bill_start_time'),
  // 关联合同编号，账单关联的合同编号，如为合同物流请填写
  contractCode?: string(name='contract_code'),
  // 账单到期日期，13位毫秒级时间戳
  deadline?: long(name='deadline'),
  // 账单关联运单号数组，元素个数不能超过1000个
  waybillIds?: [ string ](name='waybill_ids'),
  // 所属平台did
  platformDid?: string(name='platform_did'),
}

model UpdateBillReceivablebillResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 链上凭证
  txCode?: string(name='tx_code'),
}

/**
 * Description: 应收账单修改
 * Summary: 应收账单修改
 */
async function updateBillReceivablebill(request: UpdateBillReceivablebillRequest): UpdateBillReceivablebillResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateBillReceivablebillEx(request, headers, runtime);
}

/**
 * Description: 应收账单修改
 * Summary: 应收账单修改
 */
async function updateBillReceivablebillEx(request: UpdateBillReceivablebillRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateBillReceivablebillResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.bill.receivablebill.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateHighwayInvoiceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 发票号码，8位发票号码
  invoiceNo: string(name='invoice_no'),
  // 发票代码，10位或者12位发票代码
  invoiceCode: string(name='invoice_code'),
  // 发票校验码后6位
  verifyCode?: string(name='verify_code'),
  // 收款方did，出票方，需要出票收钱的
  payeeDid: string(name='payee_did'),
  // 付款方did，收票方，需要收票付钱的
  payerDid: string(name='payer_did'),
  // 发票含税金额， 不超过2位小数的数字
  invoiceContainsTax: string(name='invoice_contains_tax'),
  // 发票不含税金额，不超过2位小数的数字
  invoiceWithoutTax: string(name='invoice_without_tax'),
  // 开票日期，格式为yyyy-mm-dd
  invoiceDate: string(name='invoice_date'),
  // 发票类型，以下二选一填写：应收发票、应付发票
  invoiceType: string(name='invoice_type'),
  // 影像件ID，发票上传蚂蚁oss的文件ID。注意：影像件id和影像件hash，必须都填写或都不填，不可只填其中一项
  fileId?: string(name='file_id'),
  // 影像件hash，上传蚂蚁oss的文件hash。注意：影像件id和影像件hash，必须都填写或都不填，不可只填其中一项
  fileHash?: string(name='file_hash'),
  // 发票归属平台did，用以区分是哪家平台/企业的发票
  platformDid: string(name='platform_did'),
  // 发票种类，以下四选一填写（可填VAT_SPECIAL_INVOICE、VAT_NORMAL_INVOICE、VAT_ROLL_INVOICE、ELECTRONIC_INVOICE）。注：以上分别表示增值税专票、增值税普票、增值税卷票、电子发票
  type: string(name='type'),
}

model CreateHighwayInvoiceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 链上凭证
  txCode?: string(name='tx_code'),
}

/**
 * Description: 路运发票创建
 * Summary: 路运发票创建
 */
async function createHighwayInvoice(request: CreateHighwayInvoiceRequest): CreateHighwayInvoiceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createHighwayInvoiceEx(request, headers, runtime);
}

/**
 * Description: 路运发票创建
 * Summary: 路运发票创建
 */
async function createHighwayInvoiceEx(request: CreateHighwayInvoiceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateHighwayInvoiceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.highway.invoice.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryWaybillInfoRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 运单id
  taxWaybillId: string(name='tax_waybill_id'),
  // 填写无车承运平台did或者3plDid
  did: string(name='did'),
}

model QueryWaybillInfoResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // json串形式的运单信息
  waybill?: string(name='waybill'),
}

/**
 * Description: 查询运单信息
 * Summary: 运单信息查询
 */
async function queryWaybillInfo(request: QueryWaybillInfoRequest): QueryWaybillInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryWaybillInfoEx(request, headers, runtime);
}

/**
 * Description: 查询运单信息
 * Summary: 运单信息查询
 */
async function queryWaybillInfoEx(request: QueryWaybillInfoRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryWaybillInfoResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.waybill.info.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateBillReceivablebillnodetailRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 账单总金额，单位（元），周期内应向发货方收取的运费总金额，不超过2位小数的数字
  billAmount: string(name='bill_amount'),
  // 账单生成时间，13位毫秒级时间戳
  billCreateTime: long(name='bill_create_time'),
  // 账单期限，单位（天），合同约定的结算周期
  billDeadline: long(name='bill_deadline'),
  // 账单id，客户生成的账单唯一编号
  billId: string(name='bill_id'),
  // 收款方did，账单的收款方数字身份
  billPayeeDid: string(name='bill_payee_did'),
  // 付款方did，账单的付款方数字身份
  billPayerDid: string(name='bill_payer_did'),
  // 账单起始日期，13位毫秒级时间戳
  billStartTime: long(name='bill_start_time'),
  // 关联合同编号，账单关联的合同编号，如为合同物流请填写
  contractCode?: string(name='contract_code'),
  // 账单到期日期，13位毫秒级时间戳
  deadline: long(name='deadline'),
  // 所属平台did
  platformDid: string(name='platform_did'),
}

model CreateBillReceivablebillnodetailResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 链上凭证
  txCode?: string(name='tx_code'),
}

/**
 * Description: 应收账单创建无明细版
 * Summary: 应收账单创建无明细版
 */
async function createBillReceivablebillnodetail(request: CreateBillReceivablebillnodetailRequest): CreateBillReceivablebillnodetailResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createBillReceivablebillnodetailEx(request, headers, runtime);
}

/**
 * Description: 应收账单创建无明细版
 * Summary: 应收账单创建无明细版
 */
async function createBillReceivablebillnodetailEx(request: CreateBillReceivablebillnodetailRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateBillReceivablebillnodetailResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.bill.receivablebillnodetail.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SaveTrailerCorpRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 企业名称
  companyName: string(name='company_name'),
  // 企业统一社会信用代码
  socialCreditCode: string(name='social_credit_code'),
  // 渠道企业名称
  channelCompanyName: string(name='channel_company_name'),
  // 渠道企业信用代码
  channelSocialCreditCode: string(name='channel_social_credit_code'),
  // 企业入驻渠道日期
  entryDate: string(name='entry_date'),
}

model SaveTrailerCorpResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回结果
  result?: string(name='result'),
}

/**
 * Description: 企业信息上传/更新
 * Summary: 企业信息上传/更新
 */
async function saveTrailerCorp(request: SaveTrailerCorpRequest): SaveTrailerCorpResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return saveTrailerCorpEx(request, headers, runtime);
}

/**
 * Description: 企业信息上传/更新
 * Summary: 企业信息上传/更新
 */
async function saveTrailerCorpEx(request: SaveTrailerCorpRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SaveTrailerCorpResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.trailer.corp.save', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SaveTrailerTransportRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 企业名称
  companyName: string(name='company_name'),
  // 企业统一社会信用代码
  socialCreditCode: string(name='social_credit_code'),
  // 运营数据.月份
  transportMonth: string(name='transport_month'),
  // 运营数据.运输箱量
  transportContainerQuantity?: long(name='transport_container_quantity'),
  // 运营数据.运费总额
  freightTotalAmount: string(name='freight_total_amount'),
  // 运营数据.运输司机量
  transportDriverQuantity?: long(name='transport_driver_quantity'),
}

model SaveTrailerTransportResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 上传结果 
  result?: string(name='result'),
}

/**
 * Description: 企业运营数据上传/更新
 * Summary: 企业运营数据上传/更新
 */
async function saveTrailerTransport(request: SaveTrailerTransportRequest): SaveTrailerTransportResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return saveTrailerTransportEx(request, headers, runtime);
}

/**
 * Description: 企业运营数据上传/更新
 * Summary: 企业运营数据上传/更新
 */
async function saveTrailerTransportEx(request: SaveTrailerTransportRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SaveTrailerTransportResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.trailer.transport.save', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryBusinessInstancestatusRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 实例id
  instanceId: string(name='instance_id'),
  // 实例对应的租户id
  instanceTenant: string(name='instance_tenant'),
}

model QueryBusinessInstancestatusResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 实例id
  instanceId?: string(name='instance_id'),
  // 实例对应的租户id
  instanceTenant?: string(name='instance_tenant'),
  // STARTED---运行中
  // STOPPED--已停服
  // RELEASED--已释放
  instanceStatus?: string(name='instance_status'),
}

/**
 * Description: 根据实例id，查询实例状态
 * Summary: 实例状态查询
 */
async function queryBusinessInstancestatus(request: QueryBusinessInstancestatusRequest): QueryBusinessInstancestatusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryBusinessInstancestatusEx(request, headers, runtime);
}

/**
 * Description: 根据实例id，查询实例状态
 * Summary: 实例状态查询
 */
async function queryBusinessInstancestatusEx(request: QueryBusinessInstancestatusRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryBusinessInstancestatusResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.business.instancestatus.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model OpenCreditDriverRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 司机云资金商户ID
  accountId: string(name='account_id'),
  // 开通结果回调url
  callbackUrl: string(name='callback_url'),
  // 司机分布式数字身份
  driverDid: string(name='driver_did'),
  // 集团平台方分布式数字身份
  groupPlatformDid: string(name='group_platform_did'),
  // 产品id 目前填写 PRODUCT_MYBANK
  productId: string(name='product_id'),
}

model OpenCreditDriverResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 签署开通申请id
  applyId?: string(name='apply_id'),
  // 协议签署开通url
  signUrl?: string(name='sign_url'),
  // 签署状态
  // -1:签署开通失败, 0:未签署开通, 1:已签署开通
  status?: long(name='status'),
}

/**
 * Description: 司机信用流转协议签署并开通流转能力
 * Summary: 司机信用流转协议签署并开通流转能力
 */
async function openCreditDriver(request: OpenCreditDriverRequest): OpenCreditDriverResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return openCreditDriverEx(request, headers, runtime);
}

/**
 * Description: 司机信用流转协议签署并开通流转能力
 * Summary: 司机信用流转协议签署并开通流转能力
 */
async function openCreditDriverEx(request: OpenCreditDriverRequest, headers: map[string]string, runtime: Util.RuntimeOptions): OpenCreditDriverResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.credit.driver.open', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryCreditDriverRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 申请id
  applyId?: string(name='apply_id'),
  // 司机分布式数字身份
  did: string(name='did'),
  // 集团平台方分布式数字身份
  groupPlatformDid: string(name='group_platform_did'),
  // 产品id  目前填写PRODUCT_MYBANK
  productId: string(name='product_id'),
}

model QueryCreditDriverResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 开通失败信息
  queryMsg?: string(name='query_msg'),
  // 开通状态
  // -1:失败状态， 0:未完成状态， 1:已完成状态
  status?: long(name='status'),
}

/**
 * Description: 查询司机信用流转能力开通情况
 * Summary: 查询司机信用流转能力开通情况
 */
async function queryCreditDriver(request: QueryCreditDriverRequest): QueryCreditDriverResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryCreditDriverEx(request, headers, runtime);
}

/**
 * Description: 查询司机信用流转能力开通情况
 * Summary: 查询司机信用流转能力开通情况
 */
async function queryCreditDriverEx(request: QueryCreditDriverRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryCreditDriverResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.credit.driver.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryCreditConsignorRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 申请id
  applyId?: string(name='apply_id'),
  // 货主分布式数字身份
  did: string(name='did'),
  // 集团平台方分布式数字身份
  groupPlatformDid: string(name='group_platform_did'),
  // 产品id
  // A模式： PRODUCT_MYBANK, 
  // A+模式： PRODUCT_MYBANK_A_PLUS, 
  // B模式： PRODUCT_MYBANK_B, 
  productId: string(name='product_id'),
}

model QueryCreditConsignorResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 开通失败信息
  queryMsg?: string(name='query_msg'),
  // 开通状态
  // -1:失败状态， 0:未完成状态， 1:已完成状态
  status?: long(name='status'),
}

/**
 * Description: 查询货主信用流转能力开通情况
 * Summary: 查询货主信用流转能力开通情况
 */
async function queryCreditConsignor(request: QueryCreditConsignorRequest): QueryCreditConsignorResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryCreditConsignorEx(request, headers, runtime);
}

/**
 * Description: 查询货主信用流转能力开通情况
 * Summary: 查询货主信用流转能力开通情况
 */
async function queryCreditConsignorEx(request: QueryCreditConsignorRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryCreditConsignorResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.credit.consignor.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryCreditBalanceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 货主分布式数字身份
  consignorDid: string(name='consignor_did'),
  // 支付单运费，运费最多精确到小数点后2位
  freight: string(name='freight'),
  // 集团平台方分布式数字身份
  groupPlatformDid: string(name='group_platform_did'),
  // 业务发起方分布式数字身份
  platformDid: string(name='platform_did'),
  // 产品id 
  // A模式：PRODUCT_MYBANK,  
  // A+模式：PRODUCT_MYBANK_A_PLUS,  
  // B模式：PRODUCT_MYBANK_B,
  // 
  productId: string(name='product_id'),
}

model QueryCreditBalanceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 是否有信用流转额度
  hasBalance?: boolean(name='has_balance'),
}

/**
 * Description: 查询货主信用流转额度
 * Summary: 查询货主信用流转额度
 */
async function queryCreditBalance(request: QueryCreditBalanceRequest): QueryCreditBalanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryCreditBalanceEx(request, headers, runtime);
}

/**
 * Description: 查询货主信用流转额度
 * Summary: 查询货主信用流转额度
 */
async function queryCreditBalanceEx(request: QueryCreditBalanceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryCreditBalanceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.credit.balance.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UploadCreditIssueRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 批次号
  batchId: string(name='batch_id'),
  // 发行结果回调url
  callbackUrl: string(name='callback_url'),
  // 货主分布式数字身份
  consignorDid: string(name='consignor_did'),
  // 集团平台方分布式数字身份
  groupPlatformDid: string(name='group_platform_did'),
  // 发行信用流转信息列表
  issueApplyInfos: [ IssueApplyInfo ](name='issue_apply_infos'),
  // 业务发起方分布式数字身份
  platformDid: string(name='platform_did'),
  // 产品id 目前填PRODUCT_MYBANK
  productId: string(name='product_id'),
}

model UploadCreditIssueResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 批次号
  batchId?: string(name='batch_id'),
  // 批次状态
  batchIdStatus?: long(name='batch_id_status'),
  // 发行url
  issueUrl?: string(name='issue_url'),
}

/**
 * Description: 发行信用流转批次信息上传（只做信息上传，供真正web端发行时使用）
 * Summary: 发行信用流转批次信息上传
 */
async function uploadCreditIssue(request: UploadCreditIssueRequest): UploadCreditIssueResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return uploadCreditIssueEx(request, headers, runtime);
}

/**
 * Description: 发行信用流转批次信息上传（只做信息上传，供真正web端发行时使用）
 * Summary: 发行信用流转批次信息上传
 */
async function uploadCreditIssueEx(request: UploadCreditIssueRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UploadCreditIssueResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.credit.issue.upload', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryCreditIssuebatchstatusRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 批次号
  batchId: string(name='batch_id'),
  // 集团平台方分布式数字身份
  groupPlatformDid: string(name='group_platform_did'),
  // 业务发起方分布式数字身份
  platformDid: string(name='platform_did'),
  // 产品id 
  // A模式：PRODUCT_MYBANK， 
  // A+模式：PRODUCT_MYBANK_A_PLUS， 
  // A模式：PRODUCT_MYBANK_B， 
  productId: string(name='product_id'),
}

model QueryCreditIssuebatchstatusResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 批次号
  batchId?: string(name='batch_id'),
  // 批次状态
  batchStatus?: long(name='batch_status'),
}

/**
 * Description: 信用流转批次状态查询
 * Summary: 信用流转批次状态查询
 */
async function queryCreditIssuebatchstatus(request: QueryCreditIssuebatchstatusRequest): QueryCreditIssuebatchstatusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryCreditIssuebatchstatusEx(request, headers, runtime);
}

/**
 * Description: 信用流转批次状态查询
 * Summary: 信用流转批次状态查询
 */
async function queryCreditIssuebatchstatusEx(request: QueryCreditIssuebatchstatusRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryCreditIssuebatchstatusResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.credit.issuebatchstatus.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CancelCreditIssuebatchRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 批次号
  batchId: string(name='batch_id'),
  // 货主分布式数字身份
  consignorDid: string(name='consignor_did'),
  // 集团平台方分布式数字身份
  groupPlatformDid: string(name='group_platform_did'),
  // 业务发起方分布式数字身份
  platformDid: string(name='platform_did'),
  // 产品id 
  // A模式：PRODUCT_MYBANK，
  // A+模式：PRODUCT_MYBANK_A_PLUS，
  // B模式：PRODUCT_MYBANK_B
  productId: string(name='product_id'),
}

model CancelCreditIssuebatchResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 批次号
  batchId?: string(name='batch_id'),
}

/**
 * Description: 支付批次撤销
 * Summary: 支付批次撤销
 */
async function cancelCreditIssuebatch(request: CancelCreditIssuebatchRequest): CancelCreditIssuebatchResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return cancelCreditIssuebatchEx(request, headers, runtime);
}

/**
 * Description: 支付批次撤销
 * Summary: 支付批次撤销
 */
async function cancelCreditIssuebatchEx(request: CancelCreditIssuebatchRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CancelCreditIssuebatchResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.credit.issuebatch.cancel', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryCreditIssuebyidRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 信用流转发行批次号
  batchId: string(name='batch_id'),
  // 集团平台方分布式数字身份
  groupPlatformDid: string(name='group_platform_did'),
  // 是否只返回已发行凭证信息
  issuedOnly: boolean(name='issued_only'),
  // 信用流转发行凭证Id
  issueId?: string(name='issue_id'),
  // 页数 从1开始
  pageNum: long(name='page_num'),
  // 每页显示数量 不超过100
  pageSize: long(name='page_size'),
  // 业务发起方分布式数字身份
  platformDid: string(name='platform_did'),
  // 产品id 
  // A模式：PRODUCT_MYBANK，
  // A+模式：PRODUCT_MYBANK_A_PLUS，
  // B模式：PRODUCT_MYBANK_B
  productId: string(name='product_id'),
}

model QueryCreditIssuebyidResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 信用流转批次号
  batchId?: string(name='batch_id'),
  // 批次状态
  batchIdStatus?: string(name='batch_id_status'),
  // 凭证发行者did
  did?: string(name='did'),
  // 发行凭证列表
  issueIds?: [ IssueIdInfo ](name='issue_ids'),
  // 页数 从1开始
  pageNum?: long(name='page_num'),
  // 每页显示数量
  pageSize?: long(name='page_size'),
  // 数据总量
  totalCount?: long(name='total_count'),
}

/**
 * Description: 根据id查询信用凭证信息
 * Summary: 根据id查询信用凭证信息
 */
async function queryCreditIssuebyid(request: QueryCreditIssuebyidRequest): QueryCreditIssuebyidResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryCreditIssuebyidEx(request, headers, runtime);
}

/**
 * Description: 根据id查询信用凭证信息
 * Summary: 根据id查询信用凭证信息
 */
async function queryCreditIssuebyidEx(request: QueryCreditIssuebyidRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryCreditIssuebyidResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.credit.issuebyid.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryCreditIssuebytimeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 指定查询者分布式数字身份
  did: string(name='did'),
  // 查询截止时间
  endDate: string(name='end_date'),
  // 集团平台方分布式数字身份
  groupPlatformDid: string(name='group_platform_did'),
  // 是否只返回已发行凭证信息
  issuedOnly: boolean(name='issued_only'),
  // 页数 从1开始
  pageNum: long(name='page_num'),
  // 每页显示数量 不超过100
  pageSize: long(name='page_size'),
  // 业务发起方分布式数字身份
  platformDid: string(name='platform_did'),
  // 产品id 目前填PRODUCT_MYBANK
  productId: string(name='product_id'),
  // 查询起始时间
  startDate: string(name='start_date'),
}

model QueryCreditIssuebytimeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 信用流转批次号
  batchId?: string(name='batch_id'),
  // 批次状态
  batchIdStatus?: long(name='batch_id_status'),
  // 凭证发行者did
  did?: string(name='did'),
  // 凭证列表
  issueIds?: [ IssueIdInfo ](name='issue_ids'),
  // 页数 从1开始
  pageNum?: long(name='page_num'),
  // 每页显示数量
  pageSize?: long(name='page_size'),
  // 数据总量
  totalCount?: long(name='total_count'),
}

/**
 * Description: 根据时间查询信用凭证信息
 * Summary: 根据时间查询信用凭证信息
 */
async function queryCreditIssuebytime(request: QueryCreditIssuebytimeRequest): QueryCreditIssuebytimeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryCreditIssuebytimeEx(request, headers, runtime);
}

/**
 * Description: 根据时间查询信用凭证信息
 * Summary: 根据时间查询信用凭证信息
 */
async function queryCreditIssuebytimeEx(request: QueryCreditIssuebytimeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryCreditIssuebytimeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.credit.issuebytime.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryCreditUserissueRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 被查询方分布式数字身份
  did: string(name='did'),
  // 集团平台方分布式数字身份
  groupPlatformDid: string(name='group_platform_did'),
  // 页数
  pageNum: long(name='page_num'),
  // 每页显示的最大条数
  pageSize: long(name='page_size'),
  // 业务发起方分布式数字身份
  platformDid: string(name='platform_did'),
  // 产品id 
  // A模式：PRODUCT_MYBANK， A+模式：PRODUCT_MYBANK_A_PLUS， B模式：PRODUCT_MYBANK_B
  productId: string(name='product_id'),
}

model QueryCreditUserissueResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 凭证所有者分布式数字身份
  did?: string(name='did'),
  // 信用流转凭证列表
  issueIds?: [ UserIssueId ](name='issue_ids'),
  // 页数
  pageNum?: long(name='page_num'),
  // 每页显示最大条数
  pageSize?: long(name='page_size'),
  // 总数
  totalCount?: long(name='total_count'),
}

/**
 * Description: 查询用户持有的信用凭证信息
 * Summary: 查询用户持有的信用凭证信息
 */
async function queryCreditUserissue(request: QueryCreditUserissueRequest): QueryCreditUserissueResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryCreditUserissueEx(request, headers, runtime);
}

/**
 * Description: 查询用户持有的信用凭证信息
 * Summary: 查询用户持有的信用凭证信息
 */
async function queryCreditUserissueEx(request: QueryCreditUserissueRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryCreditUserissueResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.credit.userissue.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryCreditStatementRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 需查询对象分布式数字身份不能为空
  did: string(name='did'),
  // 查询截止时间
  endDate: string(name='end_date'),
  // 集团平台方分布式数字身份
  groupPlatformDid: string(name='group_platform_did'),
  // 页数 从1开始
  pageNum: long(name='page_num'),
  // 每页显示数量 最多100
  pageSize: long(name='page_size'),
  // 业务发起方分布式数字身份
  platformDid: string(name='platform_did'),
  // 产品id 
  // A模式：PRODUCT_MYBANK， A+模式：PRODUCT_MYBANK_A_PLUS， B模式：PRODUCT_MYBANK_B
  productId: string(name='product_id'),
  // 查询起始时间
  startDate: string(name='start_date'),
}

model QueryCreditStatementResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 页数 从1开始
  pageNum?: long(name='page_num'),
  // 每页显示数量
  pageSize?: long(name='page_size'),
  // 流水列表
  statementInfos?: [ StatementInfo ](name='statement_infos'),
  // 数据总量
  totalCount?: long(name='total_count'),
}

/**
 * Description: 查询用户信用流转流水记录
 * Summary: 查询用户信用流转流水记录
 */
async function queryCreditStatement(request: QueryCreditStatementRequest): QueryCreditStatementResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryCreditStatementEx(request, headers, runtime);
}

/**
 * Description: 查询用户信用流转流水记录
 * Summary: 查询用户信用流转流水记录
 */
async function queryCreditStatementEx(request: QueryCreditStatementRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryCreditStatementResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.credit.statement.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateCreditIssuetransferRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 转让结果回调url
  callbackUrl: string(name='callback_url'),
  // 集团平台方分布式数字身份
  groupPlatformDid: string(name='group_platform_did'),
  // 信用流转凭证
  issueId: string(name='issue_id'),
  // 全局业务号，保证唯一性，如拆分转让业务单号
  outBizNo: string(name='out_biz_no'),
  // 转入方分布式数字身份
  payeeDid: string(name='payee_did'),
  // 转出方分布式数字身份
  payerDid: string(name='payer_did'),
  // 业务发起方分布式数字身份
  platformDid: string(name='platform_did'),
  // 产品id 目前使用PRODUCT_MYBANK
  productId: string(name='product_id'),
  // 转让金额
  txAmt: string(name='tx_amt'),
}

model CreateCreditIssuetransferResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 转让申请成功金额
  successApplyAmt?: string(name='success_apply_amt'),
  // 请求时传入的全局业务号
  outBizNo?: string(name='out_biz_no'),
}

/**
 * Description: 信用凭证拆分转让申请
 * Summary: 信用凭证拆分转让申请
 */
async function createCreditIssuetransfer(request: CreateCreditIssuetransferRequest): CreateCreditIssuetransferResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createCreditIssuetransferEx(request, headers, runtime);
}

/**
 * Description: 信用凭证拆分转让申请
 * Summary: 信用凭证拆分转让申请
 */
async function createCreditIssuetransferEx(request: CreateCreditIssuetransferRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateCreditIssuetransferResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.credit.issuetransfer.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryCreditIssuetransferRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 集团平台方分布式数字身份
  groupPlatformDid: string(name='group_platform_did'),
  // 全局业务号，保证唯一性，如拆分转让业务单号
  outBizNo: string(name='out_biz_no'),
  // 业务发起方分布式数字身份
  platformDid: string(name='platform_did'),
  // 产品id 目前使用PRODUCT_MYBANK
  productId: string(name='product_id'),
}

model QueryCreditIssuetransferResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 错误信息
  errMsg?: string(name='err_msg'),
  // 转让失败金额
  failAmt?: string(name='fail_amt'),
  // 信用凭证号
  issueId?: string(name='issue_id'),
  // 请求时传入的全局业务号
  outBizNo?: string(name='out_biz_no'),
  // 转入方分布式数字身份
  payeeDid?: string(name='payee_did'),
  // 转出方分布式数字身份
  payerDid?: string(name='payer_did'),
  // 产品id
  productId?: string(name='product_id'),
  // 转让结果状态 -1:转让失败状态， 0:转让未完成状态， 1:转让部分成功状态，2:转让成功状态
  status?: long(name='status'),
  // 转让成功金额
  successAmt?: string(name='success_amt'),
}

/**
 * Description: 信用凭证拆分转让结果查询
 * Summary: 信用凭证拆分转让结果查询
 */
async function queryCreditIssuetransfer(request: QueryCreditIssuetransferRequest): QueryCreditIssuetransferResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryCreditIssuetransferEx(request, headers, runtime);
}

/**
 * Description: 信用凭证拆分转让结果查询
 * Summary: 信用凭证拆分转让结果查询
 */
async function queryCreditIssuetransferEx(request: QueryCreditIssuetransferRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryCreditIssuetransferResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.credit.issuetransfer.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateCreditIssuefinanceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 转让结果回调url
  callbackUrl: string(name='callback_url'),
  // 集团平台方分布式数字身份
  groupPlatformDid: string(name='group_platform_did'),
  // 信用流转凭证
  issueId: string(name='issue_id'),
  // 融资申请方分布式数字身份
  loanerDid: string(name='loaner_did'),
  // 全局业务号，保证唯一性，如融资业务单号
  outBizNo: string(name='out_biz_no'),
  // 业务发起方分布式数字身份
  platformDid: string(name='platform_did'),
  // 产品id 
  // A模式：PRODUCT_MYBANK， A+模式：PRODUCT_MYBANK_A_PLUS， B模式：PRODUCT_MYBANK_B
  productId: string(name='product_id'),
  // 融资金额
  txAmt: string(name='tx_amt'),
}

model CreateCreditIssuefinanceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 融资申请失败，回转至无车承运平台金额
  failApplyAmt?: string(name='fail_apply_amt'),
  // 请求时传入的全局业务号
  outBizNo?: string(name='out_biz_no'),
  // 融资申请成功金额
  successApplyAmt?: string(name='success_apply_amt'),
}

/**
 * Description: 信用凭证融资申请
 * Summary: 信用凭证融资申请
 */
async function createCreditIssuefinance(request: CreateCreditIssuefinanceRequest): CreateCreditIssuefinanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createCreditIssuefinanceEx(request, headers, runtime);
}

/**
 * Description: 信用凭证融资申请
 * Summary: 信用凭证融资申请
 */
async function createCreditIssuefinanceEx(request: CreateCreditIssuefinanceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateCreditIssuefinanceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.credit.issuefinance.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryCreditIssuefinanceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 集团平台方分布式数字身份
  groupPlatformDid: string(name='group_platform_did'),
  // 融资申请方分布式数字身份
  loanerDid: string(name='loaner_did'),
  // 全局业务号，保证唯一性，如融资业务单号
  outBizNo: string(name='out_biz_no'),
  // 业务发起方分布式数字身份
  platformDid: string(name='platform_did'),
  // 产品id 
  // A模式：PRODUCT_MYBANK， A+模式：PRODUCT_MYBANK_A_PLUS， B模式：PRODUCT_MYBANK_B
  productId: string(name='product_id'),
}

model QueryCreditIssuefinanceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 错误信息
  errMsg?: string(name='err_msg'),
  // 融资失败，回转至无车承运平台失败金额
  failAmt?: string(name='fail_amt'),
  // 融资失败，回转至无车承运平台成功金额
  failTransferAmt?: string(name='fail_transfer_amt'),
  // 请求时传入的全局业务号
  outBizNo?: string(name='out_biz_no'),
  // 融资结果状态 -1:融资未完成， 0:融资完成， 1:融资全部失败，逆流转回平台全部成功，2:融资部分成功，逆流转回平台全部成功，3:逆流转回平台发生失败，需人工介入 
  status?: long(name='status'),
  // 融资成功金额
  successAmt?: string(name='success_amt'),
}

/**
 * Description: 信用凭证融资结果查询
 * Summary: 信用凭证融资结果查询
 */
async function queryCreditIssuefinance(request: QueryCreditIssuefinanceRequest): QueryCreditIssuefinanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryCreditIssuefinanceEx(request, headers, runtime);
}

/**
 * Description: 信用凭证融资结果查询
 * Summary: 信用凭证融资结果查询
 */
async function queryCreditIssuefinanceEx(request: QueryCreditIssuefinanceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryCreditIssuefinanceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.credit.issuefinance.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryCreditIssuereceivableRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 集团平台方分布式数字身份
  groupPlatformDid: string(name='group_platform_did'),
  // 信用凭证id
  issueId: string(name='issue_id'),
  // 业务发起方分布式数字身份
  platformDid: string(name='platform_did'),
  // PRODUCT_MYBANK  、PRODUCT_MYBANK_B
  productId: string(name='product_id'),
}

model QueryCreditIssuereceivableResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 已清分金额
  clearAmt?: string(name='clear_amt'),
  // 代偿金额
  compensateAmt?: string(name='compensate_amt'),
  // 错误信息
  errMsg?: string(name='err_msg'),
  // 完成日期 long类型字符串
  finishDate?: string(name='finish_date'),
  // 是否代偿,true为代偿，false为不代偿
  hasCompensate?: boolean(name='has_compensate'),
  // 信用凭证id
  issueId?: string(name='issue_id'),
  // 全局唯一业务号
  outBizNo?: string(name='out_biz_no'),
  // 外部订单号，也就是凭证发行时传递的支付订单
  outOrderNo?: string(name='out_order_no'),
  // 产品id--PRODUCT_MYBANK 、PRODUCT_MYBANK_B;
  productId?: string(name='product_id'),
  // 清分结果状态--- 0：未清分， 1：清分完成
  status?: long(name='status'),
  // 凭证总金额
  totalAmt?: string(name='total_amt'),
  // 清分类型--主动清分 、 到期清分
  type?: string(name='type'),
}

/**
 * Description: 信用凭证清分信息查询
 * Summary: 信用凭证清分信息查询
 */
async function queryCreditIssuereceivable(request: QueryCreditIssuereceivableRequest): QueryCreditIssuereceivableResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryCreditIssuereceivableEx(request, headers, runtime);
}

/**
 * Description: 信用凭证清分信息查询
 * Summary: 信用凭证清分信息查询
 */
async function queryCreditIssuereceivableEx(request: QueryCreditIssuereceivableRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryCreditIssuereceivableResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.credit.issuereceivable.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryCreditIssueamountRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 指定查询者分布式数字身份
  did: string(name='did'),
  // 集团平台方分布式数字身份
  groupPlatformDid: string(name='group_platform_did'),
  // 信用凭证id
  issueId: string(name='issue_id'),
  // 业务发起方分布式数字身份
  platformDid: string(name='platform_did'),
  // 产品id 目前填写PRODUCT_MYBANK
  productId: string(name='product_id'),
}

model QueryCreditIssueamountResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 剩余金额
  balanceAmt?: string(name='balance_amt'),
  // 已清分金额
  cashAmt?: string(name='cash_amt'),
  // 欠的滞纳金金额
  debtIntAmt?: string(name='debt_int_amt'),
  // 欠款本金金额
  debtPrinAmt?: string(name='debt_prin_amt'),
  // 该凭证下的总欠款金额
  debtTotalAmt?: string(name='debt_total_amt'),
  // 信用凭证到期时间
  expireDate?: string(name='expire_date'),
  // 冻结的金额
  freezeAmt?: string(name='freeze_amt'),
  // 信用凭证id
  issueId?: string(name='issue_id'),
  // 累计已还滞纳金金额
  paidIntAmt?: string(name='paid_int_amt'),
  // 凭证总金额
  ticketAmt?: string(name='ticket_amt'),
}

/**
 * Description: 信用凭证资产查询
 * Summary: 信用凭证资产查询
 */
async function queryCreditIssueamount(request: QueryCreditIssueamountRequest): QueryCreditIssueamountResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryCreditIssueamountEx(request, headers, runtime);
}

/**
 * Description: 信用凭证资产查询
 * Summary: 信用凭证资产查询
 */
async function queryCreditIssueamountEx(request: QueryCreditIssueamountRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryCreditIssueamountResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.credit.issueamount.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CallbackCreditCommonRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 回调数据，根据不同msg_method 返回不同结构
  msgData: string(name='msg_data'),
  // 回调方法类型
  msgMethod: string(name='msg_method'),
}

model CallbackCreditCommonResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 是否已接收
  received?: boolean(name='received'),
}

/**
 * Description: 物流金融统一回调接口
 * Summary: 物流金融统一回调接口
 */
async function callbackCreditCommon(request: CallbackCreditCommonRequest): CallbackCreditCommonResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return callbackCreditCommonEx(request, headers, runtime);
}

/**
 * Description: 物流金融统一回调接口
 * Summary: 物流金融统一回调接口
 */
async function callbackCreditCommonEx(request: CallbackCreditCommonRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CallbackCreditCommonResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.credit.common.callback', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ApplyCreditIssueclearRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 申请日期，不输入则是当前时间
  applyDate?: long(name='apply_date'),
  // 清分金额，当前只支持全额清分，不填就是默认全额清分
  clearAmt?: string(name='clear_amt'),
  // 主动清分方分布式数字身份
  clearDid: string(name='clear_did'),
  // 扩展字段
  extInfo?: string(name='ext_info'),
  // 集团平台方分布式数字身份
  groupPlatformDid: string(name='group_platform_did'),
  // 凭证id
  issueId: string(name='issue_id'),
  // 全局唯一业务流水号
  outBizNo: string(name='out_biz_no'),
  // 外部订单号，此为支付单号
  outOrderNo: string(name='out_order_no'),
  // 业务发起方分布式数字身份
  platformDid: string(name='platform_did'),
  // 产品id
  // A模式：PRODUCT_MYBANK， A+模式：PRODUCT_MYBANK_A_PLUS， B模式：PRODUCT_MYBANK_B
  productId: string(name='product_id'),
}

model ApplyCreditIssueclearResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 全局唯一业务流水号
  outBizNo?: string(name='out_biz_no'),
}

/**
 * Description: 信用凭证主动清分
 * Summary: 信用凭证主动清分
 */
async function applyCreditIssueclear(request: ApplyCreditIssueclearRequest): ApplyCreditIssueclearResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return applyCreditIssueclearEx(request, headers, runtime);
}

/**
 * Description: 信用凭证主动清分
 * Summary: 信用凭证主动清分
 */
async function applyCreditIssueclearEx(request: ApplyCreditIssueclearRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ApplyCreditIssueclearResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.credit.issueclear.apply', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SendCreditProxyRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 代理请求方法名
  applyMethod: string(name='apply_method'),
  // 代理请求数据
  applyData: string(name='apply_data'),
}

model SendCreditProxyResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 物流金融代理消息
 * Summary: 物流金融代理消息
 */
async function sendCreditProxy(request: SendCreditProxyRequest): SendCreditProxyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return sendCreditProxyEx(request, headers, runtime);
}

/**
 * Description: 物流金融代理消息
 * Summary: 物流金融代理消息
 */
async function sendCreditProxyEx(request: SendCreditProxyRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SendCreditProxyResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.credit.proxy.send', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CheckCreditWaybillRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 集团平台方分布式数字身份
  groupPlatformDid: string(name='group_platform_did'),
  // 业务发起方分布式数字身
  platformDid: string(name='platform_did'),
  // 产品id
  // A模式：PRODUCT_MYBANK， A+模式：PRODUCT_MYBANK_A_PLUS， B模式：PRODUCT_MYBANK_B
  productId: string(name='product_id'),
  // 运单列表
  waybillList: [ string ](name='waybill_list'),
}

model CheckCreditWaybillResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 核验结果列表,  格式为 运单号:核验状态， 核验状态包含  0:运单未知状态   1:通过   2:不通过   3:未核验   4:没有指定信息
  checkResult?: [ string ](name='check_result'),
}

/**
 * Description: 运单信用流转核验结果查询
 * Summary: 运单信用流转核验结果查询
 */
async function checkCreditWaybill(request: CheckCreditWaybillRequest): CheckCreditWaybillResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return checkCreditWaybillEx(request, headers, runtime);
}

/**
 * Description: 运单信用流转核验结果查询
 * Summary: 运单信用流转核验结果查询
 */
async function checkCreditWaybillEx(request: CheckCreditWaybillRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CheckCreditWaybillResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.credit.waybill.check', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ReopenCreditDriverRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 产品id
  productId: string(name='product_id'),
  // 集团平台did
  groupPlatformDid: string(name='group_platform_did'),
  // 司机did
  driverDid: string(name='driver_did'),
  // 云资金商户id
  accountId: string(name='account_id'),
  // 回调地址
  callbackUrl: string(name='callback_url'),
}

model ReopenCreditDriverResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 申请id
  applyId?: string(name='apply_id'),
  // 会员注册状态
  status?: long(name='status'),
}

/**
 * Description: 物流金融信用流转司机换绑
 * Summary: 物流金融信用流转司机换绑
 */
async function reopenCreditDriver(request: ReopenCreditDriverRequest): ReopenCreditDriverResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return reopenCreditDriverEx(request, headers, runtime);
}

/**
 * Description: 物流金融信用流转司机换绑
 * Summary: 物流金融信用流转司机换绑
 */
async function reopenCreditDriverEx(request: ReopenCreditDriverRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ReopenCreditDriverResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.credit.driver.reopen', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UploadCreditAuthorizationRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 签署货主统一社会信用代码
  consignorCertNo: string(name='consignor_cert_no'),
  // 签署货主did
  consignorDid: string(name='consignor_did'),
  // 签署货主企业名称
  consignorName: string(name='consignor_name'),
  // 授权的货主平台账号
  consignorPlatformAccount: string(name='consignor_platform_account'),
  // 协议到期日
  expireDate: string(name='expire_date'),
  // 集团平台did
  groupPlatformDid: string(name='group_platform_did'),
  // 是否包含账号授权条款
  hasAuthorizationClause: boolean(name='has_authorization_clause'),
  // 签署子公司统一社会信用代码
  platformCertNo: string(name='platform_cert_no'),
  // 签署子公司did
  platformDid: string(name='platform_did'),
  // 签署子公司企业名称
  // 
  platformName: string(name='platform_name'),
  // 线下协议影像件id与文件哈希, 多id以逗号分隔, 最多支持10个
  protocolImgId: string(name='protocol_img_id'),
  // 协议名称
  protocolName: string(name='protocol_name'),
  // 线下协议编号
  protocolNo: string(name='protocol_no'),
  // 签署时间
  signDate: string(name='sign_date'),
  // 产品id
  productId: string(name='product_id'),
}

model UploadCreditAuthorizationResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 协议链上地址
  txHash?: string(name='tx_hash'),
}

/**
 * Description: 线下协议授权关系上传
 * Summary: 线下协议授权关系上传
 */
async function uploadCreditAuthorization(request: UploadCreditAuthorizationRequest): UploadCreditAuthorizationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return uploadCreditAuthorizationEx(request, headers, runtime);
}

/**
 * Description: 线下协议授权关系上传
 * Summary: 线下协议授权关系上传
 */
async function uploadCreditAuthorizationEx(request: UploadCreditAuthorizationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UploadCreditAuthorizationResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.credit.authorization.upload', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UploadCreditConfirmRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 货主云资金商户id
  accountId: string(name='account_id'),
  // 确认时间
  confirmDate: string(name='confirm_date'),
  // 应收转让通知编号
  confirmNo: string(name='confirm_no'),
  // 签署货主did
  consignorDid: string(name='consignor_did'),
  // 签署的货主平台账号
  consignorPlatformAccount: string(name='consignor_platform_account'),
  // 协议到期日
  expireDate: string(name='expire_date'),
  // 集团平台did
  groupPlatformDid: string(name='group_platform_did'),
  // 签署子公司did
  platformDid: string(name='platform_did'),
  // 协议名称
  protocolName: string(name='protocol_name'),
  // 协议PDF文件, 多个文件可用逗号分隔, 最多10个
  protocolPdfId: string(name='protocol_pdf_id'),
  // 产品id
  productId: string(name='product_id'),
}

model UploadCreditConfirmResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 协议链上地址
  txHash?: string(name='tx_hash'),
}

/**
 * Description: 线上应收转让确认关系
 * Summary: 线上应收转让确认关系
 */
async function uploadCreditConfirm(request: UploadCreditConfirmRequest): UploadCreditConfirmResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return uploadCreditConfirmEx(request, headers, runtime);
}

/**
 * Description: 线上应收转让确认关系
 * Summary: 线上应收转让确认关系
 */
async function uploadCreditConfirmEx(request: UploadCreditConfirmRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UploadCreditConfirmResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.credit.confirm.upload', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BatchcreateCreditmodeIssueRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 批次id
  batchId: string(name='batch_id'),
  // 回调地址
  callbackUrl: string(name='callback_url'),
  // 集团平台分布式数字身份
  groupPlatformDid: string(name='group_platform_did'),
  // 发行列表
  issueApplyInfos: [ IssueApplyInfo ](name='issue_apply_infos'),
  // 业务平台方分布式数字身份
  platformDid: string(name='platform_did'),
  // 产品id
  productId: string(name='product_id'),
}

model BatchcreateCreditmodeIssueResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 批次id
  batchId?: string(name='batch_id'),
  // 批次状态
  batchStatus?: string(name='batch_status'),
}

/**
 * Description: 物流信用流转凭证批量发行
 * Summary: 物流信用流转凭证批量发行
 */
async function batchcreateCreditmodeIssue(request: BatchcreateCreditmodeIssueRequest): BatchcreateCreditmodeIssueResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return batchcreateCreditmodeIssueEx(request, headers, runtime);
}

/**
 * Description: 物流信用流转凭证批量发行
 * Summary: 物流信用流转凭证批量发行
 */
async function batchcreateCreditmodeIssueEx(request: BatchcreateCreditmodeIssueRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BatchcreateCreditmodeIssueResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.creditmode.issue.batchcreate', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ApplyCreditmodeIssueclearRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 产品id
  productId: string(name='product_id'),
  // 集团平台方分布式数字身份
  groupPlatformDid: string(name='group_platform_did'),
  // 业务平台方分布式数字身份
  platformDid: string(name='platform_did'),
  // 主动清分方分布式数字身份
  clearDid: string(name='clear_did'),
  // 凭证id
  issueId: string(name='issue_id'),
  // 全局业务号
  outBizNo: string(name='out_biz_no'),
  // 支付单号
  outOrderNo: string(name='out_order_no'),
  // 清分金额
  clearAmt?: string(name='clear_amt'),
  // 模式  B:b模式
  modeType: string(name='mode_type'),
  // 申请日期
  applyDate?: string(name='apply_date'),
  // 扩展字段
  extInfo?: string(name='ext_info'),
}

model ApplyCreditmodeIssueclearResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 全局业务号
  outBizNo?: string(name='out_biz_no'),
}

/**
 * Description: 物流信用流转按模式主动清分
 * Summary: 物流信用流转按模式主动清分
 */
async function applyCreditmodeIssueclear(request: ApplyCreditmodeIssueclearRequest): ApplyCreditmodeIssueclearResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return applyCreditmodeIssueclearEx(request, headers, runtime);
}

/**
 * Description: 物流信用流转按模式主动清分
 * Summary: 物流信用流转按模式主动清分
 */
async function applyCreditmodeIssueclearEx(request: ApplyCreditmodeIssueclearRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ApplyCreditmodeIssueclearResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.creditmode.issueclear.apply', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UploadCreditIssuebysaasRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 批次id
  batchId: string(name='batch_id'),
  // 发行结果回调地址
  callbackUrl: string(name='callback_url'),
  // 集团平台did
  groupPlatformDid: string(name='group_platform_did'),
  // 发行信息
  issueApplyInfos: [ SaasIssueApplyInfo ](name='issue_apply_infos'),
  // 凭证发行方did
  platformDid: string(name='platform_did'),
  // 产品id
  productId: string(name='product_id'),
}

model UploadCreditIssuebysaasResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 批次id
  batchId?: string(name='batch_id'),
  // 批次状态
  batchStatus?: long(name='batch_status'),
  // 发行url
  issueUrl?: string(name='issue_url'),
}

/**
 * Description: 信用流转发行信息上传SAAS版
 * Summary: 信用流转发行信息上传SAAS版
 */
async function uploadCreditIssuebysaas(request: UploadCreditIssuebysaasRequest): UploadCreditIssuebysaasResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return uploadCreditIssuebysaasEx(request, headers, runtime);
}

/**
 * Description: 信用流转发行信息上传SAAS版
 * Summary: 信用流转发行信息上传SAAS版
 */
async function uploadCreditIssuebysaasEx(request: UploadCreditIssuebysaasRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UploadCreditIssuebysaasResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.credit.issuebysaas.upload', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CancelCreditIssuebatchbysaasRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 批次号
  batchId: string(name='batch_id'),
  // 集团平台did
  groupPlatformDid: string(name='group_platform_did'),
  // 凭证发行方did
  platformDid: string(name='platform_did'),
  // 产品id
  productId: string(name='product_id'),
}

model CancelCreditIssuebatchbysaasResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 批次id
  batchId?: string(name='batch_id'),
}

/**
 * Description: 信用流转B模式发行批次撤销SAAS版
 * Summary: 信用流转B模式发行批次撤销SAAS版
 */
async function cancelCreditIssuebatchbysaas(request: CancelCreditIssuebatchbysaasRequest): CancelCreditIssuebatchbysaasResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return cancelCreditIssuebatchbysaasEx(request, headers, runtime);
}

/**
 * Description: 信用流转B模式发行批次撤销SAAS版
 * Summary: 信用流转B模式发行批次撤销SAAS版
 */
async function cancelCreditIssuebatchbysaasEx(request: CancelCreditIssuebatchbysaasRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CancelCreditIssuebatchbysaasResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.credit.issuebatchbysaas.cancel', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryCreditBalancebysaasRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 产品id
  productId: string(name='product_id'),
  // 集团平台did
  groupPlatformDid: string(name='group_platform_did'),
  // 查询者did
  platformDid: string(name='platform_did'),
  // 发行金额
  freight: string(name='freight'),
}

model QueryCreditBalancebysaasResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 是否有信用流转额度
  hasBalance?: boolean(name='has_balance'),
}

/**
 * Description: 信用流转可用额度查询SAAS版
 * Summary: 信用流转可用额度查询SAAS版
 */
async function queryCreditBalancebysaas(request: QueryCreditBalancebysaasRequest): QueryCreditBalancebysaasResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryCreditBalancebysaasEx(request, headers, runtime);
}

/**
 * Description: 信用流转可用额度查询SAAS版
 * Summary: 信用流转可用额度查询SAAS版
 */
async function queryCreditBalancebysaasEx(request: QueryCreditBalancebysaasRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryCreditBalancebysaasResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.credit.balancebysaas.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetCreditIssuescpticketRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 申请唯一流水号
  applyId: string(name='apply_id'),
  // 回调地址
  callbackUrl: string(name='callback_url'),
  // 集团平台方分布式数字身份
  groupPlatformDid: string(name='group_platform_did'),
  // 业务发起方分布式数字身
  platformDid: string(name='platform_did'),
  // 产品id	
  productId: string(name='product_id'),
  // 电子回单查询凭证数据
  scpTicketIssueData: [ ScpTicketIssueData ](name='scp_ticket_issue_data'),
}

model GetCreditIssuescpticketResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 申请唯一流水号
  applyId?: string(name='apply_id'),
  // 集团平台方分布式数字身份
  groupPlatformDid?: string(name='group_platform_did'),
  // 业务发起方分布式数字身
  platformDid?: string(name='platform_did'),
  // 产品id
  productId?: string(name='product_id'),
}

/**
 * Description: 信用凭证电子回单获取
 * Summary: 信用凭证电子回单获取
 */
async function getCreditIssuescpticket(request: GetCreditIssuescpticketRequest): GetCreditIssuescpticketResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getCreditIssuescpticketEx(request, headers, runtime);
}

/**
 * Description: 信用凭证电子回单获取
 * Summary: 信用凭证电子回单获取
 */
async function getCreditIssuescpticketEx(request: GetCreditIssuescpticketRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetCreditIssuescpticketResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.credit.issuescpticket.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryCreditIssuescpticketresultRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 申请唯一流水号
  applyId: string(name='apply_id'),
  // 集团平台方分布式数字身份
  groupPlatformDid: string(name='group_platform_did'),
  // 业务发起方分布式数字身
  platformDid: string(name='platform_did'),
  // 产品id
  productId: string(name='product_id'),
}

model QueryCreditIssuescpticketresultResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 申请唯一流水号
  applyId?: string(name='apply_id'),
  // 电子回单下载地址,链接有有效期
  fileDownloadUrl?: string(name='file_download_url'),
  // 集团平台方分布式数字身份
  // 
  groupPlatformDid?: string(name='group_platform_did'),
  // 业务发起方分布式数字身
  platformDid?: string(name='platform_did'),
  // 产品id
  // 
  productId?: string(name='product_id'),
  // 状态
  status?: string(name='status'),
}

/**
 * Description: 信用凭证电子回单获取结果查询接口
 * Summary: 信用凭证电子回单获取结果查询接口
 */
async function queryCreditIssuescpticketresult(request: QueryCreditIssuescpticketresultRequest): QueryCreditIssuescpticketresultResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryCreditIssuescpticketresultEx(request, headers, runtime);
}

/**
 * Description: 信用凭证电子回单获取结果查询接口
 * Summary: 信用凭证电子回单获取结果查询接口
 */
async function queryCreditIssuescpticketresultEx(request: QueryCreditIssuescpticketresultRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryCreditIssuescpticketresultResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.credit.issuescpticketresult.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UploadCreditAplusissueRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 批次id
  batchId: string(name='batch_id'),
  // 发行结果信息回调地址
  callbackUrl: string(name='callback_url'),
  // 货代did
  consignorDid: string(name='consignor_did'),
  // 发行时直接进行快速提现：true ，
  // 发行后自主触发提现：false （默认）
  easyFinance?: boolean(name='easy_finance'),
  // 集团平台did
  groupPlatformDid: string(name='group_platform_did'),
  // 发行信息列表
  issueApplyInfos: [ IssueApplyInfoPlus ](name='issue_apply_infos'),
  // 业务承接方did
  platformDid: string(name='platform_did'),
  // 产品id
  productId: string(name='product_id'),
  // 登录模式，返回的发行url指定使用何种模式登录。ORG:企业支付宝登录（缺省时默认ORG模式），USER_ACCOUNT:个人支付宝登录。
  loginType?: string(name='login_type'),
}

model UploadCreditAplusissueResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 批次id
  batchId?: string(name='batch_id'),
  // 批次状态 -1:失效， 0:初始化完成，1:进行中，2:部分成功，3:成功
  batchIdStatus?: long(name='batch_id_status'),
  // 凭证发行跳转url
  issueUrl?: string(name='issue_url'),
}

/**
 * Description: 信用流转A+模式发行信息上传
 * Summary: 信用流转A+模式发行信息上传
 */
async function uploadCreditAplusissue(request: UploadCreditAplusissueRequest): UploadCreditAplusissueResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return uploadCreditAplusissueEx(request, headers, runtime);
}

/**
 * Description: 信用流转A+模式发行信息上传
 * Summary: 信用流转A+模式发行信息上传
 */
async function uploadCreditAplusissueEx(request: UploadCreditAplusissueRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UploadCreditAplusissueResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.credit.aplusissue.upload', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryCreditCreditamountRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 集团平台did
  groupPlatformDid: string(name='group_platform_did'),
  // 平台did
  platformDid: string(name='platform_did'),
  // 产品ID
  productId: string(name='product_id'),
}

model QueryCreditCreditamountResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 可用额度
  creditAmount?: string(name='credit_amount'),
  // 集团平台did
  groupPlatformDid?: string(name='group_platform_did'),
  // 平台did
  platformDid?: string(name='platform_did'),
  // 产品ID
  productId?: string(name='product_id'),
}

/**
 * Description: 信用流转可用额度查询接口
 * Summary: 信用流转可用额度查询接口
 */
async function queryCreditCreditamount(request: QueryCreditCreditamountRequest): QueryCreditCreditamountResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryCreditCreditamountEx(request, headers, runtime);
}

/**
 * Description: 信用流转可用额度查询接口
 * Summary: 信用流转可用额度查询接口
 */
async function queryCreditCreditamountEx(request: QueryCreditCreditamountRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryCreditCreditamountResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.credit.creditamount.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateCreditCommonsignRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 账户号，account_type=ACCOUNT_BANK_NO时填写外部银行卡号， account_type=ACCOUNT_CLOUD_FUND时填写云资金商户ID
  accountId: string(name='account_id'),
  // 账户类型，ACCOUNT_BANK_NO:外部银行卡，ACCOUNT_CLOUD_FUND:云资金商户ID
  accountType: string(name='account_type'),
  // 开户行联行号，当帐户类型为ACCOUNT_BANK_NO时必填
  bankCnaps?: string(name='bank_cnaps'),
  // 开户行名称，当帐户类型为ACCOUNT_BANK_NO时必填
  bankName?: string(name='bank_name'),
  // 签约结果回调地址
  callbackUrl: string(name='callback_url'),
  // 驾驶证号码，当帐户类型为ACCOUNT_BANK_NO且签约方sign_did类型为个人时必填
  drivingLicense?: string(name='driving_license'),
  // 驾驶证影像件ID，当帐户类型为ACCOUNT_BANK_NO且签约方sign_did类型为个人时必填
  drivingLicenseFileId?: string(name='driving_license_file_id'),
  // 集团平台did
  groupPlatformDid: string(name='group_platform_did'),
  // 法定代表人名称，签约方sign_did类型为企业时必填
  legalName?: string(name='legal_name'),
  // 产品id
  productId: string(name='product_id'),
  // 签约方did
  signDid: string(name='sign_did'),
  // 行驶证号码，当帐户类型为ACCOUNT_BANK_NO且签约方sign_did类型为个人时必填
  vehicleLicense?: string(name='vehicle_license'),
  // 行驶证影像件ID，当帐户类型为ACCOUNT_BANK_NO且签约方sign_did类型为个人时必填
  vehicleLicenseFileId?: string(name='vehicle_license_file_id'),
}

model CreateCreditCommonsignResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 申请id
  applyId?: string(name='apply_id'),
  // 签约状态，-1:签约失败，0:未签约，1:已签约，2:签约中
  status?: long(name='status'),
}

/**
 * Description: 信用流转非授信通用签约接口
 * Summary: 信用流转非授信通用签约接口
 */
async function createCreditCommonsign(request: CreateCreditCommonsignRequest): CreateCreditCommonsignResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createCreditCommonsignEx(request, headers, runtime);
}

/**
 * Description: 信用流转非授信通用签约接口
 * Summary: 信用流转非授信通用签约接口
 */
async function createCreditCommonsignEx(request: CreateCreditCommonsignRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateCreditCommonsignResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.credit.commonsign.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryCreditCommonsignRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 产品id
  productId: string(name='product_id'),
  // 集团平台did
  groupPlatformDid: string(name='group_platform_did'),
  // 签约方did
  signDid: string(name='sign_did'),
  // 申请id，不填则查询当前签约状态，填写则查询apply_id对应的签约申请结果
  applyId?: string(name='apply_id'),
}

model QueryCreditCommonsignResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 签约结果，-1:签约失败，0:未签约，1:已签约，2:签约中
  status?: long(name='status'),
  // 查询信息
  queryMsg?: string(name='query_msg'),
}

/**
 * Description: 信用流转非授信通用签约查询接口
 * Summary: 信用流转非授信通用签约查询接口
 */
async function queryCreditCommonsign(request: QueryCreditCommonsignRequest): QueryCreditCommonsignResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryCreditCommonsignEx(request, headers, runtime);
}

/**
 * Description: 信用流转非授信通用签约查询接口
 * Summary: 信用流转非授信通用签约查询接口
 */
async function queryCreditCommonsignEx(request: QueryCreditCommonsignRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryCreditCommonsignResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.credit.commonsign.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BatchcreateCreditIssueRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 产品id
  productId: string(name='product_id'),
  // 集团平台did
  groupPlatformDid: string(name='group_platform_did'),
  // 凭证发行方分布式身份
  createDid: string(name='create_did'),
  // 凭证接收方分布式身份
  receiveDid: string(name='receive_did'),
  // 批次id
  batchId: string(name='batch_id'),
  // 全局业务唯一号
  outBizNo: string(name='out_biz_no'),
  // 支付订单号
  payOrder: string(name='pay_order'),
  // 支付单运费总额，运费最多精确到小数点后2位
  freight: string(name='freight'),
  // 发行后自动贴现，true: 自动贴现，false: 不自动贴现 （默认）
  easyFinance?: boolean(name='easy_finance'),
  // 凭证到期时间
  expireDate: string(name='expire_date'),
  // 发行结果回调地址
  callbackUrl: string(name='callback_url'),
  // 需合并发行的运单id列表
  waybillIds: [ string ](name='waybill_ids'),
}

model BatchcreateCreditIssueResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 批次id
  batchId?: string(name='batch_id'),
  // 批次状态
  batchStatus?: long(name='batch_status'),
}

/**
 * Description: 信用流转凭证合并发行接口
 * Summary: 信用流转凭证合并发行接口
 */
async function batchcreateCreditIssue(request: BatchcreateCreditIssueRequest): BatchcreateCreditIssueResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return batchcreateCreditIssueEx(request, headers, runtime);
}

/**
 * Description: 信用流转凭证合并发行接口
 * Summary: 信用流转凭证合并发行接口
 */
async function batchcreateCreditIssueEx(request: BatchcreateCreditIssueRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BatchcreateCreditIssueResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.credit.issue.batchcreate', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UploadCreditIssuebatchRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 批次id
  batchId: string(name='batch_id'),
  // 回调地址
  callbackUrl: string(name='callback_url'),
  // 凭证发行方did
  createDid: string(name='create_did'),
  // 发行后自动贴现，true: 自动贴现，false: 不自动贴现 （默认）
  easyFinance?: boolean(name='easy_finance'),
  // 凭证到期时间
  expireDate: string(name='expire_date'),
  // 支付单运费总额，运费最多精确到小数点后2位
  freight: string(name='freight'),
  // 集团平台did
  groupPlatformDid: string(name='group_platform_did'),
  // 全局业务唯一编号
  outBizNo: string(name='out_biz_no'),
  // 支付订单号
  payOrder: string(name='pay_order'),
  // 产品id
  productId: string(name='product_id'),
  // 凭证接收方did
  receiveDid: string(name='receive_did'),
  // 运单合并列表
  waybillIds: [ string ](name='waybill_ids'),
}

model UploadCreditIssuebatchResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 批次id
  batchId?: string(name='batch_id'),
  // 批次状态
  batchStatus?: long(name='batch_status'),
  // 发行链接
  issueUrl?: string(name='issue_url'),
}

/**
 * Description: 信用流转凭证合并发行信息上传接口
 * Summary: 信用流转凭证合并发行信息上传接口
 */
async function uploadCreditIssuebatch(request: UploadCreditIssuebatchRequest): UploadCreditIssuebatchResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return uploadCreditIssuebatchEx(request, headers, runtime);
}

/**
 * Description: 信用流转凭证合并发行信息上传接口
 * Summary: 信用流转凭证合并发行信息上传接口
 */
async function uploadCreditIssuebatchEx(request: UploadCreditIssuebatchRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UploadCreditIssuebatchResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.credit.issuebatch.upload', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetIssueTransferfileRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 申请唯一流水号
  applyId: string(name='apply_id'),
  // 回调地址
  // 
  callbackUrl: string(name='callback_url'),
  // 集团平台方分布式数字身份
  groupPlatformDid: string(name='group_platform_did'),
  // 信用流转凭证集合，最大长度支持30
  issueTransferDatas: [ IssueTransferData ](name='issue_transfer_datas'),
  // 业务发起方分布式数字身份
  platformDid: string(name='platform_did'),
  // 产品id
  // 
  productId: string(name='product_id'),
}

model GetIssueTransferfileResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 申请唯一流水号
  applyId?: string(name='apply_id'),
  // 集团平台方分布式数字身份
  groupPlatformDid?: string(name='group_platform_did'),
  // 业务发起方分布式数字身
  platformDid?: string(name='platform_did'),
  // 产品id
  productId?: string(name='product_id'),
}

/**
 * Description: 信用凭证电子回单获取(新)，明确了凭证的转出方did和转入方did
 * Summary: 信用凭证电子回单获取(新)
 */
async function getIssueTransferfile(request: GetIssueTransferfileRequest): GetIssueTransferfileResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getIssueTransferfileEx(request, headers, runtime);
}

/**
 * Description: 信用凭证电子回单获取(新)，明确了凭证的转出方did和转入方did
 * Summary: 信用凭证电子回单获取(新)
 */
async function getIssueTransferfileEx(request: GetIssueTransferfileRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetIssueTransferfileResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.issue.transferfile.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ApplyInsurancepolicyZhonghuacaixianRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 被保险人地址
  bbrAddr?: string(maxLength=80, name='bbr_addr'),
  // 被保险人证件号码
  bbrIdNo: string(maxLength=40, name='bbr_id_no'),
  // 被保险人证件类型。按照如下值填写
  // 464001	身份证
  // 464002	护照
  // 464003	其他
  // 464004	组织机构代码
  // 464005	军人证
  // 464006	工商注册号码
  // 464007	统一社会信用代码
  // 464008	临时身份证
  // 464009	外国护照
  // 464010	中国人民武装警察身份证件
  // 464011	军官证
  // 464012	企业营业执照号码
  // 464013	统一社会信用代码（五证合一号码）
  // 464014	个体工商户营业执照号码
  // 464015	户口本
  // 464016	其他类境内个人身份有效证件
  // 464017	其他类境外个人身份有效证件
  // 464018	税务登记证
  // 464019	金融许可证号码
  // 464020	国家主管部门颁外国驻华机构批文号码
  // 464021	其他类境外机构代码
  bbrIdType: string(maxLength=40, name='bbr_id_type'),
  // 被保险人姓名
  bbrName: string(maxLength=40, name='bbr_name'),
  // 被保险人联系电话
  bbrTel: string(maxLength=40, name='bbr_tel'),
  // 运费,四舍五入精确到小数点两位。系统将根据运费和费率计算含税保费，计算的保费结果为四舍五入，精确到两位小数
  carriage: string(maxLength=20, name='carriage'),
  // 货物名称
  carGo: string(maxLength=40, name='car_go'),
  // 厂牌型号
  cpModel: string(maxLength=80, name='cp_model'),
  // 目的地
  destination?: string(maxLength=200, name='destination'),
  // 行驶证车主
  drivPer: string(maxLength=40, name='driv_per'),
  // 保险起期，精确到天；最短起保时间为次日0点，最长延时起保时间为次日0点后24h
  effDate: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='eff_date'),
  // 发动机编号
  engineNo: string(maxLength=40, name='engine_no'),
  // 车架号
  frameNo: string(maxLength=40, name='frame_no'),
  // 运单所属集团分布式身份标识
  groupPlatformDid: string(maxLength=80, name='group_platform_did'),
  // 投保人证件类型有效止期
  identifyPeriodEnd?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='identify_period_end'),
  // 投保人证件类型有效起期
  identifyPeriodStart?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='identify_period_start'),
  // 车牌号码
  licenseNo: string(maxLength=40, name='license_no'),
  // 运单所属平台分布式身份标识
  platformDid: string(maxLength=80, name='platform_did'),
  // 运营证号
  runNo: string(maxLength=40, name='run_no'),
  // 起运地
  startPlace?: string(maxLength=200, name='start_place'),
  // 投保人地址
  tbrAddr?: string(maxLength=80, name='tbr_addr'),
  // 投保人邮箱
  tbrEmail?: string(maxLength=40, name='tbr_email'),
  // 投保人证件号
  tbrIdNo: string(maxLength=40, name='tbr_id_no'),
  // 投保人证件类型，按照如下状态进行填写 
  // 464001	身份证
  // 464002	护照
  // 464003	其他
  // 464004	组织机构代码
  // 464005	军人证
  // 464006	工商注册号码
  // 464007	统一社会信用代码
  // 464008	临时身份证
  // 464009	外国护照
  // 464010	中国人民武装警察身份证件
  // 464011	军官证
  // 464012	企业营业执照号码
  // 464013	统一社会信用代码（五证合一号码）
  // 464014	个体工商户营业执照号码
  // 464015	户口本
  // 464016	其他类境内个人身份有效证件
  // 464017	其他类境外个人身份有效证件
  // 464018	税务登记证
  // 464019	金融许可证号码
  // 464020	国家主管部门颁外国驻华机构批文号码
  // 464021	其他类境外机构代码
  tbrIdType: string(maxLength=40, name='tbr_id_type'),
  // 投保人姓名
  tbrName: string(maxLength=40, name='tbr_name'),
  // 投保人联系电话
  tbrTel: string(maxLength=40, name='tbr_tel'),
  // 保险止期，保期时间间隔为1-30天。
  termDate: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='term_date'),
  // 吨位
  tonNage: string(maxLength=20, name='ton_nage'),
  // 交易流水号,全局唯一；格式为 yyyyMMdd+身份标识+其他编码。系统会根据该流水号做防重、幂等判断逻辑。当极端场景中，系统会返回处理中状态，客户端应该保持该流水号不变，并使用原来的请求再次发送请求，系统会根据幂等逻辑返回处理结果
  tradeNo: string(maxLength=32, minLength=32, name='trade_no'),
  // 运输货物
  tsCarGo: string(maxLength=80, name='ts_car_go'),
  // 运单id。通过运单创建接口上传运单时指定的运单标识。系统会根据该标识查询运单相关信息做投保业务校验
  waybillId: string(maxLength=128, name='waybill_id'),
  // 重量
  weight?: string(maxLength=20, name='weight'),
}

model ApplyInsurancepolicyZhonghuacaixianResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 保单号
  polNo?: string(name='pol_no'),
  // 电子保单下载地址
  polUrl?: string(name='pol_url'),
  // 含税保费
  preMium?: string(name='pre_mium'),
}

/**
 * Description: 保险服务，投保接口。接口提供幂等逻辑，请求后接口会返回成功、失败、处理中。其中处理中是极端场景，需要客户端使用相同的业务流水号发起重试，以免造成重复投保
 * Summary: 投保接口-中华财险-承运人责任险
 */
async function applyInsurancepolicyZhonghuacaixian(request: ApplyInsurancepolicyZhonghuacaixianRequest): ApplyInsurancepolicyZhonghuacaixianResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return applyInsurancepolicyZhonghuacaixianEx(request, headers, runtime);
}

/**
 * Description: 保险服务，投保接口。接口提供幂等逻辑，请求后接口会返回成功、失败、处理中。其中处理中是极端场景，需要客户端使用相同的业务流水号发起重试，以免造成重复投保
 * Summary: 投保接口-中华财险-承运人责任险
 */
async function applyInsurancepolicyZhonghuacaixianEx(request: ApplyInsurancepolicyZhonghuacaixianRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ApplyInsurancepolicyZhonghuacaixianResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.insurancepolicy.zhonghuacaixian.apply', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CancelInsurancepolicyZhonghuacaixianRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 保单号，投保成功后返回的
  polNo: string(maxLength=60, name='pol_no'),
  // 含税保费，精确到小数点后两位
  preMium: string(name='pre_mium'),
  // 全局唯一交易流水号
  tradeNo: string(maxLength=32, minLength=32, name='trade_no'),
}

model CancelInsurancepolicyZhonghuacaixianResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 退保成功的对应的保单号
  polNo?: string(name='pol_no'),
}

/**
 * Description: 数字物流保险，退保接口
 * Summary: 退保接口-中华财险-承运人责任险
 */
async function cancelInsurancepolicyZhonghuacaixian(request: CancelInsurancepolicyZhonghuacaixianRequest): CancelInsurancepolicyZhonghuacaixianResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return cancelInsurancepolicyZhonghuacaixianEx(request, headers, runtime);
}

/**
 * Description: 数字物流保险，退保接口
 * Summary: 退保接口-中华财险-承运人责任险
 */
async function cancelInsurancepolicyZhonghuacaixianEx(request: CancelInsurancepolicyZhonghuacaixianRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CancelInsurancepolicyZhonghuacaixianResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.insurancepolicy.zhonghuacaixian.cancel', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model PushInsurancenotifyClaimRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 通知类型：
  // claims_pay:理赔支付信息
  // claims_info: 理赔信息
  category: string(maxLength=16, name='category'),
  // 通知内容
  content: string(maxLength=3000, name='content'),
}

model PushInsurancenotifyClaimResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 业务返回报文
  data?: string(name='data'),
}

/**
 * Description: 保险理赔通知
 * Summary: 保险理赔通知
 */
async function pushInsurancenotifyClaim(request: PushInsurancenotifyClaimRequest): PushInsurancenotifyClaimResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return pushInsurancenotifyClaimEx(request, headers, runtime);
}

/**
 * Description: 保险理赔通知
 * Summary: 保险理赔通知
 */
async function pushInsurancenotifyClaimEx(request: PushInsurancenotifyClaimRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PushInsurancenotifyClaimResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.insurancenotify.claim.push', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ApplyInsuranceFileurlRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 上传的文件名，要求文件名后缀必须以 _yyyyMMdd结尾
  fileName: string(maxLength=80, name='file_name'),
}

model ApplyInsuranceFileurlResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 用于上传文件的连接
  fileUrl?: string(name='file_url'),
}

/**
 * Description: 系统会生成上传文件的连接，使用方使用该链接进行文件上传。该链接具有一定的时效性，因此建议按需按时申请使用
 * Summary: 上传文件链接申请
 */
async function applyInsuranceFileurl(request: ApplyInsuranceFileurlRequest): ApplyInsuranceFileurlResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return applyInsuranceFileurlEx(request, headers, runtime);
}

/**
 * Description: 系统会生成上传文件的连接，使用方使用该链接进行文件上传。该链接具有一定的时效性，因此建议按需按时申请使用
 * Summary: 上传文件链接申请
 */
async function applyInsuranceFileurlEx(request: ApplyInsuranceFileurlRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ApplyInsuranceFileurlResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.insurance.fileurl.apply', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ApplyInsurancepolicyUniversalRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 投保人开户银行，当打印发票选择为“1”时，必填
  accountBankName?: string(maxLength=100, name='account_bank_name'),
  // 投保人银行账户，当打印发票选择为“1”时，必填
  bankAccountInformation?: string(maxLength=50, name='bank_account_information'),
  // 被保人地址
  bbrAddr?: string(maxLength=200, name='bbr_addr'),
  // 被保人did（被保人所在链上分布式数字身份）
  bbrDid?: string(maxLength=200, name='bbr_did'),
  // 被保人证件号
  bbrIdNo: string(maxLength=50, name='bbr_id_no'),
  // 被保人证件类型，01-居民身份证, 02-驾驶执照, 03-营业执照, 99-其他	
  // 
  bbrIdType: string(maxLength=2, name='bbr_id_type'),
  // 被保人姓名
  bbrName: string(maxLength=100, name='bbr_name'),
  // 被保人电话号
  bbrTel: string(maxLength=20, name='bbr_tel'),
  // 被保人类型, 1-个人 2-团队
  bbrType: string(maxLength=1, name='bbr_type'),
  // 货物名称
  cargoName?: string(maxLength=100, name='cargo_name'),
  // 货物数量
  cargoQuantity: string(maxLength=20, name='cargo_quantity'),
  // 货物数量单位
  cargoQuantityUnit: string(maxLength=20, name='cargo_quantity_unit'),
  // 货物吨位
  cargoTonnage?: string(maxLength=20, name='cargo_tonnage'),
  // 货物类型，普货，手机/电子产品/家用电器，精密仪器，家具，易碎品，大宗散货，生鲜（瓜果蔬菜），棉纱
  cargoType: string(maxLength=50, name='cargo_type'),
  // 货物体积
  cargoVolume?: string(maxLength=20, name='cargo_volume'),
  // 货值
  cargoWorth: string(maxLength=50, name='cargo_worth'),
  // 车长
  carLength?: string(maxLength=10, name='car_length'),
  // 车型
  carModel?: string(maxLength=20, name='car_model'),
  // 目的地，格式为"省-市-区"
  destination: string(maxLength=100, name='destination'),
  // 司机姓名
  driverName: string(maxLength=50, name='driver_name'),
  // 司机联系方式
  driverTel: string(maxLength=20, name='driver_tel'),
  // 保险起始时间, 时间格式 "yyyy-MM-dd HH:mm:ss", 预计起运日期
  effDate: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='eff_date'),
  // 保司, 01-华泰, 02-平安, 03-亚太
  externalChannelCode: string(maxLength=2, name='external_channel_code'),
  // 险种, 01-承运人平台责任险
  // 
  externalProductCode: string(maxLength=2, name='external_product_code'),
  // 车架号
  frameNo?: string(maxLength=50, name='frame_no'),
  // 投保额，整数以元为单位
  // 
  insuredAmount: string(maxLength=12, name='insured_amount'),
  // 车牌号
  licenseNo: string(maxLength=20, name='license_no'),
  // 车牌颜色，01-黄牌，02-蓝牌
  licensePlateColor?: string(maxLength=2, name='license_plate_color'),
  // 税务登记证/纳税人识别号，当打印发票选择为“1”时，必填
  nsrIdentifier?: string(maxLength=50, name='nsr_identifier'),
  // 接单时间, 时间格式 "yyyy-MM-dd HH:mm:ss"
  orderTime: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='order_time'),
  // 包装方式, 01-箱装、02-袋装、03-包装、04-桶装、05-捆扎包装、06-裸装、07-散装、08-其他包装
  packing?: string(maxLength=100, name='packing'),
  // 是否打印发票，默认0-不开票  1-专票 2-电子发票
  printInvoice: string(maxLength=1, name='print_invoice'),
  // 费率，按实际业务商讨费率执行, 但最终结果以保司计算结果为准，0到1之间，最多6位小数
  rate: string(maxLength=8, name='rate'),
  // 起运地，格式为"省-市-区"
  startPlace: string(maxLength=100, name='start_place'),
  // 投保人地址，当打印发票选择为“1”时，必填
  tbrAddr?: string(maxLength=200, name='tbr_addr'),
  // 投保人-企业联系人联系方式
  tbrCorporateContract?: string(maxLength=20, name='tbr_corporate_contract'),
  // 投保人did（投保人所在链上分布式数字身份）
  tbrDid?: string(maxLength=200, name='tbr_did'),
  // 投保人邮箱，用以接受电子发票的邮箱地址
  tbrEmail?: string(maxLength=50, name='tbr_email'),
  // 投保人证件号
  tbrIdNo: string(maxLength=50, name='tbr_id_no'),
  // 投保人证件类型，01-居民身份证, 02-驾驶执照, 03-营业执照, 99-其他
  tbrIdType: string(maxLength=2, name='tbr_id_type'),
  // 投保人名称
  tbrName: string(maxLength=100, name='tbr_name'),
  // 投保人电话号
  tbrTel: string(maxLength=20, name='tbr_tel'),
  // 投保人类型, 1-个人 2-团队
  tbrType: string(maxLength=1, name='tbr_type'),
  // 保险截止时间, 时间格式 "yyyy-MM-dd HH:mm:ss", 预计到达日期，保险止期间隔为1-30天
  termDate: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='term_date'),
  // 专票邮寄地址
  ticketAddr?: string(maxLength=200, name='ticket_addr'),
  // 订单号, 年月日+唯一字符ID
  tradeNo: string(maxLength=50, name='trade_no'),
  // 中转地，格式为"省-市-区"
  transitPoint?: string(maxLength=100, name='transit_point'),
  // 运单id（平台方运单id）
  waybillId: string(maxLength=50, name='waybill_id'),
}

model ApplyInsurancepolicyUniversalResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 保单号
  polNo?: string(name='pol_no'),
  // 电子保单下载地址
  polUrl?: string(name='pol_url'),
  // 总保费
  totalPremium?: string(name='total_premium'),
  // 订单号
  tradeNo?: string(name='trade_no'),
}

/**
 * Description: 保险服务-平台责任险投保接口。根据运输货物货值生成相应的保费。
接口提供幂等逻辑，请求后接口会返回成功、失败、处理中。其中处理中是极端场景，需要客户端使用相同的业务流水号发起重试，以免造成重复投保
 * Summary: 投保接口-承运人平台责任险
 */
async function applyInsurancepolicyUniversal(request: ApplyInsurancepolicyUniversalRequest): ApplyInsurancepolicyUniversalResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return applyInsurancepolicyUniversalEx(request, headers, runtime);
}

/**
 * Description: 保险服务-平台责任险投保接口。根据运输货物货值生成相应的保费。
接口提供幂等逻辑，请求后接口会返回成功、失败、处理中。其中处理中是极端场景，需要客户端使用相同的业务流水号发起重试，以免造成重复投保
 * Summary: 投保接口-承运人平台责任险
 */
async function applyInsurancepolicyUniversalEx(request: ApplyInsurancepolicyUniversalRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ApplyInsurancepolicyUniversalResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.insurancepolicy.universal.apply', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CancelInsurancepolicyUniversalRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 投保订单号
  applyTradeNo: string(maxLength=50, name='apply_trade_no'),
  // 保司, 01-华泰, 03-亚太
  externalChannelCode: string(maxLength=2, name='external_channel_code'),
  // 险种, 01-承运人平台责任险
  // 
  externalProductCode: string(maxLength=2, name='external_product_code'),
  // 保单号
  polNo: string(maxLength=50, name='pol_no'),
  // 退保全局唯一流水号
  tradeNo: string(maxLength=50, name='trade_no'),
}

model CancelInsurancepolicyUniversalResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 投保订单号
  applyTradeNo?: string(name='apply_trade_no'),
  // 保单号
  polNo?: string(name='pol_no'),
  // 退还保费
  sendBackPremium?: string(name='send_back_premium'),
  // 成功退保时间, 时间格式 "yyyy-MM-dd HH:mm:ss"
  successSurrenderTime?: string(name='success_surrender_time'),
  // 退保生效时间, 时间格式 "yyyy-MM-dd HH:mm:ss"
  surrenderEffectiveTime?: string(name='surrender_effective_time'),
}

/**
 * Description: 数字物流保险，退保接口
 * Summary: 退保接口-承运人平台责任险
 */
async function cancelInsurancepolicyUniversal(request: CancelInsurancepolicyUniversalRequest): CancelInsurancepolicyUniversalResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return cancelInsurancepolicyUniversalEx(request, headers, runtime);
}

/**
 * Description: 数字物流保险，退保接口
 * Summary: 退保接口-承运人平台责任险
 */
async function cancelInsurancepolicyUniversalEx(request: CancelInsurancepolicyUniversalRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CancelInsurancepolicyUniversalResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.insurancepolicy.universal.cancel', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model PushInsuranceOlpRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 被保人证件号
  bbrIdNo: string(maxLength=50, name='bbr_id_no'),
  // 被保人名称
  bbrName: string(maxLength=100, name='bbr_name'),
  // 被保人类型, 1-个人 2-企业	
  // 
  bbrType: string(maxLength=10, name='bbr_type'),
  // 保险公司编码
  channelCode: string(maxLength=50, name='channel_code'),
  // 保险公司名称
  channelName: string(maxLength=100, name='channel_name'),
  // 理赔单状态，ALREADY_RISK: 已出险，NOT_RISK: 未出险，CLAIMED: 已理赔
  claimStatus: string(maxLength=12, name='claim_status'),
  // 投保时间	
  insureDate: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='insure_date'),
  // 保险止期
  insureEnd?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='insure_end'),
  // 保险起期
  insureStart?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='insure_start'),
  // 存证平台编码
  platformConsumerCode: string(maxLength=50, name='platform_consumer_code'),
  // 存证平台名称
  platformConsumerName: string(maxLength=100, name='platform_consumer_name'),
  // 保单文件id，可支持多个，逗号隔开
  polFileIds?: string(maxLength=3200, name='pol_file_ids'),
  // 保单号
  polNo: string(maxLength=100, name='pol_no'),
  // 保单状态，INSURED: 已投保，SURRENDERED: 已退保,	
  polStatus: string(maxLength=12, name='pol_status'),
  // 电子保单url地址
  polUrl?: string(maxLength=500, name='pol_url'),
  // 保费
  premium: string(maxLength=20, name='premium'),
  // 险种代码
  productCode: string(maxLength=50, name='product_code'),
  // 险种名称
  productName: string(maxLength=100, name='product_name'),
  // 退保时间
  surrenderTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='surrender_time'),
  // 投保人证件号
  tbrIdNo: string(maxLength=50, name='tbr_id_no'),
  // 投保人名称
  tbrName: string(maxLength=100, name='tbr_name'),
  // 投保人类型, 1-个人 2-企业
  tbrType: string(maxLength=10, name='tbr_type'),
  // 交易流水号
  tradeNo?: string(maxLength=200, name='trade_no'),
}

model PushInsuranceOlpResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回状态
  status?: string(name='status'),
}

/**
 * Description: 利用区块链智能合约进行离线保单存证
 * Summary: 离线保单存证推送
 */
async function pushInsuranceOlp(request: PushInsuranceOlpRequest): PushInsuranceOlpResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return pushInsuranceOlpEx(request, headers, runtime);
}

/**
 * Description: 利用区块链智能合约进行离线保单存证
 * Summary: 离线保单存证推送
 */
async function pushInsuranceOlpEx(request: PushInsuranceOlpRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PushInsuranceOlpResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.insurance.olp.push', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateInsuranceOlpRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 被保人证件号
  bbrIdNo?: string(maxLength=50, name='bbr_id_no'),
  // 被保人名称
  bbrName?: string(maxLength=100, name='bbr_name'),
  // 被保人类型, 1-个人 2-企业
  bbrType?: string(maxLength=10, name='bbr_type'),
  // 保险公司编码
  channelCode?: string(maxLength=50, name='channel_code'),
  // 保险公司名称
  channelName?: string(maxLength=100, name='channel_name'),
  // 理赔单状态，ALREADY_RISK: 已出险，NOT_RISK: 未出险，CLAIMED: 已理赔
  claimStatus?: string(maxLength=12, name='claim_status'),
  // 投保时间
  insureDate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='insure_date'),
  // 保险止期
  insureEnd?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='insure_end'),
  // 保险起期
  insureStart?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='insure_start'),
  // 存证平台编码
  platformConsumerCode: string(maxLength=50, name='platform_consumer_code'),
  // 存证平台名称
  platformConsumerName?: string(maxLength=100, name='platform_consumer_name'),
  // 保单文件id，可支持多个，逗号隔开
  polFileIds?: string(maxLength=3200, name='pol_file_ids'),
  // 保单号
  polNo: string(maxLength=100, name='pol_no'),
  // 保单状态，INSURED: 已投保，SURRENDERED: 已退保,
  polStatus?: string(maxLength=12, name='pol_status'),
  // 电子保单url地址	
  polUrl?: string(maxLength=500, name='pol_url'),
  // 保费
  // 
  premium?: string(maxLength=20, name='premium'),
  // 险种代码
  // 
  productCode?: string(maxLength=50, name='product_code'),
  // 险种名称
  // 
  productName?: string(maxLength=100, name='product_name'),
  // 退保时间
  surrenderTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='surrender_time'),
  // 投保人证件号
  tbrIdNo?: string(maxLength=50, name='tbr_id_no'),
  // 投保人名称
  tbrName?: string(maxLength=100, name='tbr_name'),
  // 投保人类型, 1-个人 2-企业
  tbrType?: string(maxLength=10, name='tbr_type'),
  // 交易流水号
  tradeNo?: string(maxLength=200, name='trade_no'),
}

model UpdateInsuranceOlpResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回状态
  status?: string(name='status'),
}

/**
 * Description: 利用区块链智能合约进行离线保单信息更新追踪
 * Summary: 离线保单更新
 */
async function updateInsuranceOlp(request: UpdateInsuranceOlpRequest): UpdateInsuranceOlpResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateInsuranceOlpEx(request, headers, runtime);
}

/**
 * Description: 利用区块链智能合约进行离线保单信息更新追踪
 * Summary: 离线保单更新
 */
async function updateInsuranceOlpEx(request: UpdateInsuranceOlpRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateInsuranceOlpResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.insurance.olp.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model PushInsuranceReppolicyRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 直保人租户ID
  platformCode: string(maxLength=50, name='platform_code'),
  // 直保人
  directInsurerName: string(maxLength=200, name='direct_insurer_name'),
  // 保单号
  polNo: string(maxLength=100, name='pol_no'),
  // 共保标志，1:是 0:否
  jointInsuranceLogo?: string(maxLength=5, name='joint_insurance_logo'),
  // 共保比例（%）
  jointInsuranceRate?: string(maxLength=5, name='joint_insurance_rate'),
  // 险种代码
  productCode: string(maxLength=20, name='product_code'),
  // 险种名称
  productName: string(maxLength=100, name='product_name'),
  // 被保险人
  bbrName: string(maxLength=200, name='bbr_name'),
  // 保险起期
  insureStart: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='insure_start'),
  // 保险止期
  insureEnd: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='insure_end'),
  // 币种，CNY:人民币, USD:美元，JPY:日元，HKD:港元，EUR:欧元，GBP英镑
  currency: string(maxLength=10, name='currency'),
  // 保费
  premium: string(maxLength=20, name='premium'),
  // 保额
  insuranceAmount?: string(maxLength=20, name='insurance_amount'),
  // 固定保额分出比例（%）
  fixedInsuranceAmountSplitRate?: string(maxLength=5, name='fixed_insurance_amount_split_rate'),
  // 固定保费分出比例（%）
  fixedPremiumSplitRate: string(maxLength=5, name='fixed_premium_split_rate'),
  // 临分保额分出比例（%）
  facultativeInsuranceAmountSplitRate?: string(maxLength=5, name='facultative_insurance_amount_split_rate'),
  // 临分保费分出比例（%）
  facultativePremiumSplitRate: string(maxLength=5, name='facultative_premium_split_rate'),
  // 分出保费
  splitPremium: string(maxLength=20, name='split_premium'),
  // 再保人
  reinsurer: string(maxLength=100, name='reinsurer'),
  // 摊回手续费比例（%）
  amortizeFeeRate: string(maxLength=5, name='amortize_fee_rate'),
  // 摊回手续费
  amortizeFee: string(maxLength=20, name='amortize_fee'),
  // 再保合同名称
  reinsuranceContractName?: string(maxLength=200, name='reinsurance_contract_name'),
  // 是否有超赔临分，1:是 0:否
  overPayFacultative?: string(maxLength=5, name='over_pay_facultative'),
  // 项目名称
  projectName?: string(maxLength=100, name='project_name'),
  // 接收方租户id
  receiverPlatformId: string(maxLength=50, name='receiver_platform_id'),
}

model PushInsuranceReppolicyResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回状态
  status?: string(name='status'),
}

/**
 * Description: 再保分保单推送接口
 * Summary: 再保分保单推送
 */
async function pushInsuranceReppolicy(request: PushInsuranceReppolicyRequest): PushInsuranceReppolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return pushInsuranceReppolicyEx(request, headers, runtime);
}

/**
 * Description: 再保分保单推送接口
 * Summary: 再保分保单推送
 */
async function pushInsuranceReppolicyEx(request: PushInsuranceReppolicyRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PushInsuranceReppolicyResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.insurance.reppolicy.push', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model PushInsuranceRepcorrectRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 直保人租户ID
  platformCode: string(maxLength=50, name='platform_code'),
  // 直保人
  directInsurerName: string(maxLength=200, name='direct_insurer_name'),
  // 批单类型 1:批增 2: 批减
  approvalType: string(maxLength=20, name='approval_type'),
  // 批单号
  approvalNo: string(maxLength=100, name='approval_no'),
  // 保单号
  polNo: string(maxLength=100, name='pol_no'),
  // 共保标志，1:是 0:否
  // 
  jointInsuranceLogo?: string(maxLength=5, name='joint_insurance_logo'),
  // 共保比例（%）
  jointInsuranceRate?: string(maxLength=5, name='joint_insurance_rate'),
  // 险种代码
  productCode: string(maxLength=20, name='product_code'),
  // 险种名称
  // 
  productName: string(maxLength=100, name='product_name'),
  // 被保险人
  bbrName: string(maxLength=200, name='bbr_name'),
  // 保险起期
  insureStart: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='insure_start'),
  // 保险止期
  // 
  insureEnd: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='insure_end'),
  // 币种，CNY:人民币, USD:美元，JPY:日元，HKD:港元，EUR:欧元，GBP英镑
  currency: string(maxLength=10, name='currency'),
  // 保额
  insuranceAmount?: string(maxLength=20, name='insurance_amount'),
  // 批改保费
  correctPremium: string(maxLength=20, name='correct_premium'),
  // 固定保额分出比例（%）
  fixedInsuranceAmountSplitRate?: string(maxLength=5, name='fixed_insurance_amount_split_rate'),
  // 固定保费分出比例（%）
  fixedPremiumSplitRate: string(maxLength=5, name='fixed_premium_split_rate'),
  // 临分保额分出比例（%）
  facultativeInsuranceAmountSplitRate?: string(maxLength=5, name='facultative_insurance_amount_split_rate'),
  // 临分保费分出比例（%）
  facultativePremiumSplitRate: string(maxLength=5, name='facultative_premium_split_rate'),
  // 分出保费
  splitPremium: string(maxLength=20, name='split_premium'),
  // 再保人
  // 
  reinsurer: string(maxLength=100, name='reinsurer'),
  // 摊回手续费比例（%）
  amortizeFeeRate: string(maxLength=5, name='amortize_fee_rate'),
  // 摊回手续费
  // 
  amortizeFee: string(maxLength=20, name='amortize_fee'),
  // 再保合同名称
  reinsuranceContractName?: string(maxLength=200, name='reinsurance_contract_name'),
  // 是否有超赔临分，1:是 0:否
  overPayFacultative?: string(maxLength=5, name='over_pay_facultative'),
  // 批改原因
  // 
  correctReason?: string(maxLength=500, name='correct_reason'),
  // 项目名称
  projectName?: string(maxLength=100, name='project_name'),
  // 接收方租户id
  // 
  receiverPlatformId: string(maxLength=50, name='receiver_platform_id'),
}

model PushInsuranceRepcorrectResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回状态
  status?: string(name='status'),
}

/**
 * Description: 再保批改单推送
 * Summary: 再保批改单推送
 */
async function pushInsuranceRepcorrect(request: PushInsuranceRepcorrectRequest): PushInsuranceRepcorrectResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return pushInsuranceRepcorrectEx(request, headers, runtime);
}

/**
 * Description: 再保批改单推送
 * Summary: 再保批改单推送
 */
async function pushInsuranceRepcorrectEx(request: PushInsuranceRepcorrectRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PushInsuranceRepcorrectResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.insurance.repcorrect.push', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ApplyInsuranceCbrfRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 物流公司业务线的简称
  businessId?: string(maxLength=30, minLength=0, name='business_id'),
  // 保司编码
  insuranceCode: string(maxLength=8, name='insurance_code'),
  // 险种编码
  productCode: string(maxLength=2, name='product_code'),
  // 起保时间
  insuranceStart: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='insurance_start'),
  // 交付航司确认时间
  deliveryTime: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='delivery_time'),
  // 客户订单编号
  relatedOderNo: string(maxLength=256, minLength=2, name='related_oder_no'),
  // 目的国，2位iso缩写
  destCountry: string(maxLength=256, minLength=2, name='dest_country'),
  // 商家唯一脱敏的编码
  businessMerchantId?: string(maxLength=256, name='business_merchant_id'),
  // 货物的揽收时间
  collectionTime?: string(maxLength=50, name='collection_time'),
  // 货物名称
  goodName?: string(maxLength=200, name='good_name'),
  // 货值(美金)，货物的美金商品价值
  goodValue?: string(maxLength=50, name='good_value'),
}

model ApplyInsuranceCbrfResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 投保响应编码
  insuredReceiptNo?: string(name='insured_receipt_no'),
  // 投保时的标的订单号
  relatedOrderNo?: string(name='related_order_no'),
  // 保司出具的保单编号
  policyNo?: string(name='policy_no'),
  // 返回时间
  responseTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='response_time'),
  // 幂等标识；true:幂等结果；false: 非幂等结果
  idemFlag?: boolean(name='idem_flag'),
}

/**
 * Description: 跨境运费险投保申请
 * Summary: 跨境运费险投保
 */
async function applyInsuranceCbrf(request: ApplyInsuranceCbrfRequest): ApplyInsuranceCbrfResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return applyInsuranceCbrfEx(request, headers, runtime);
}

/**
 * Description: 跨境运费险投保申请
 * Summary: 跨境运费险投保
 */
async function applyInsuranceCbrfEx(request: ApplyInsuranceCbrfRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ApplyInsuranceCbrfResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.insurance.cbrf.apply', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model RepayInsuranceCbrfRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 物流公司业务线的简称
  businessId?: string(maxLength=50, name='business_id'),
  // 保司编码
  insuranceCode: string(maxLength=16, name='insurance_code'),
  //  险种
  productCode: string(maxLength=2, name='product_code'),
  // 客户的订单编号
  relatedOrderNo: string(maxLength=256, name='related_order_no'),
  // 保单号
  policyNo: string(maxLength=50, name='policy_no'),
  // 投保响应编码
  insuredReceiptNo: string(maxLength=40, name='insured_receipt_no'),
  // 2位ISO国家编码
  destCountry: string(maxLength=256, name='dest_country'),
  // 理赔时间
  claimTime: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='claim_time'),
  // 理赔金额，单位为元，依据实际情况计算的理赔金额，最多小数点后2位
  claimAmount: string(maxLength=20, name='claim_amount'),
  // 达到国内仓库时间
  dwaTime?: string(name='dwa_time'),
}

model RepayInsuranceCbrfResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 赔案号
  claimNo?: string(name='claim_no'),
  // 客户投保时的标的订单号
  relatedOrderNo?: string(name='related_order_no'),
  // 保单号
  policyNo?: string(name='policy_no'),
  // 幂等标识。true：幂等结果;false：非幂等结果
  idemFlag?: boolean(name='idem_flag'),
}

/**
 * Description: 跨境运费险理赔
 * Summary: 跨境运费险理赔
 */
async function repayInsuranceCbrf(request: RepayInsuranceCbrfRequest): RepayInsuranceCbrfResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return repayInsuranceCbrfEx(request, headers, runtime);
}

/**
 * Description: 跨境运费险理赔
 * Summary: 跨境运费险理赔
 */
async function repayInsuranceCbrfEx(request: RepayInsuranceCbrfRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RepayInsuranceCbrfResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.insurance.cbrf.repay', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ApplyInsuranceCbecRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 调用方生成的唯一编码，格式为 yyyyMMdd_身份标识_其他编码，系统会根据该流水号做防重、幂等判断逻辑。
  // yyyyMMdd请传递当前时间。 
  // 身份标识可自定义。
  // 其他编码建议为随机值。
  // 当极端场景中，系统会返回处理中，错误码为2222，客户端应该保持该流水号不变，并使用原来的请求再次发送请求，系统会根据幂等逻辑返回处理结果；	
  tradeNo: string(maxLength=50, name='trade_no'),
  // 保司编码，CPIC---太保
  externalChannelCode: string(maxLength=64, name='external_channel_code'),
  // 险种编码，03--跨境出口货运险
  externalProductCode: string(maxLength=64, name='external_product_code'),
  // 投保人名称
  tbrName: string(maxLength=100, name='tbr_name'),
  // 投保人证件类型，03--营业执照
  tbrIdType?: string(maxLength=2, name='tbr_id_type'),
  // 投保人证件号码
  tbrIdNo?: string(maxLength=30, name='tbr_id_no'),
  // 被保人名称
  bbrName: string(maxLength=100, name='bbr_name'),
  // 被保人证件类型，01--居民身份证，03--营业执照
  bbrIdType?: string(maxLength=2, name='bbr_id_type'),
  // 被保人证件号码
  bbrIdNo?: string(maxLength=30, name='bbr_id_no'),
  // 出库单号/航次号/运单号
  relatedOrderNo: string(maxLength=200, name='related_order_no'),
  // 包装及数量
  cargoQuantity: string(maxLength=20, name='cargo_quantity'),
  // 货物名称
  cargoName: string(maxLength=100, name='cargo_name'),
  // 包装代码,参考保司提供样例-包装代码
  packingCode: string(maxLength=2, name='packing_code'),
  // 货物类型代码,参考保司提供样例-货物类型代码
  cargoTypeCode: string(maxLength=4, name='cargo_type_code'),
  // 航行区域代码,参考保司提供样例-航行区域代码
  flightAreaCode: string(maxLength=10, name='flight_area_code'),
  // 运输方式代码,参考保司提供样例-运输方式
  transportTypeCode: string(maxLength=2, name='transport_type_code'),
  // 运输工具名称
  transportMeansName: string(maxLength=30, name='transport_means_name'),
  // 航次号
  voyage?: string(maxLength=30, name='voyage'),
  // 出发地
  startPlace: string(maxLength=200, name='start_place'),
  // 中转地
  transitPoint?: string(maxLength=100, name='transit_point'),
  // 目的地
  destination: string(maxLength=200, name='destination'),
  // 理赔代理地代码，参考保司提供样例-理赔代理地
  claimAgentCode: string(maxLength=30, name='claim_agent_code'),
  // 主险条款代码--参考保司提供样例
  mainItemCode: string(maxLength=12, name='main_item_code'),
  // 主险条款内容--参考保司提供样例
  mainItemContent: string(maxLength=500, name='main_item_content'),
  // 附加条款集合
  mainItemAdds?: [ MainItemAdd ](name='main_item_adds'),
  // 特别约定--填写协议中的特别约定
  specialize?: string(maxLength=500, name='specialize'),
  // 申报货物价值,，最多兼容2位小数，单位（元）
  cargoWorth: string(maxLength=50, name='cargo_worth'),
  // 费率，最多兼容9位小数
  rate: string(name='rate'),
  // 保费，最多兼容2位小数，单位（元）
  premium: string(name='premium'),
  // 保险起期，日期格式yyyy-mm-dd
  insureStart: string(name='insure_start'),
  // 起运日期，日期格式yyyy-mm-dd
  saleDate: string(name='sale_date'),
}

model ApplyInsuranceCbecResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 投保交易号
  tradeNo?: string(name='trade_no'),
  // 保单号，保司生成的投保业务号
  policyNo?: string(name='policy_no'),
  // 保费
  premium?: string(name='premium'),
}

/**
 * Description: 跨境出口货运险投保
 * Summary: 跨境出口货运险投保
 */
async function applyInsuranceCbec(request: ApplyInsuranceCbecRequest): ApplyInsuranceCbecResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return applyInsuranceCbecEx(request, headers, runtime);
}

/**
 * Description: 跨境出口货运险投保
 * Summary: 跨境出口货运险投保
 */
async function applyInsuranceCbecEx(request: ApplyInsuranceCbecRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ApplyInsuranceCbecResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.insurance.cbec.apply', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ApplyInsuranceStockinRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 入库交易流水号，保持唯一；
  // 格式为 yyyyMMdd_身份标识_其他编码。
  // 系统会根据该流水号做防重、幂等判断逻辑。
  // 当极端场景中（接口超时），客户端应该保持该流水号不变，并使用原来的请求再次发送请求，系统会根据幂等逻辑返回处理结果；
  tradeNo: string(maxLength=50, name='trade_no'),
  // 入库单号，可参考格式：年月日+唯一字符
  stockinNo: string(maxLength=50, name='stockin_no'),
  // 入库时间，格式：yyyy-MM-dd HH:mm:ss
  stockinDate: string(name='stockin_date'),
  // 时区	
  timezone: string(maxLength=16, name='timezone'),
  // 仓库代码
  repositoryCode: string(maxLength=50, name='repository_code'),
  // 客户代码
  customerCode: string(maxLength=50, name='customer_code'),
  // 保单号,国内起运时投保产生的保单号
  policyNo?: string(maxLength=64, name='policy_no'),
  // 入库货物列表
  stockinCargos: [ StockinCargo ](name='stockin_cargos'),
}

model ApplyInsuranceStockinResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 入库交易流水号
  tradeNo?: string(name='trade_no'),
  // 入库单号
  // 
  // 
  stockinNo?: string(name='stockin_no'),
}

/**
 * Description: 货物入库申报
 * Summary: 货物入库申报
 */
async function applyInsuranceStockin(request: ApplyInsuranceStockinRequest): ApplyInsuranceStockinResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return applyInsuranceStockinEx(request, headers, runtime);
}

/**
 * Description: 货物入库申报
 * Summary: 货物入库申报
 */
async function applyInsuranceStockinEx(request: ApplyInsuranceStockinRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ApplyInsuranceStockinResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.insurance.stockin.apply', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ApplyInsuranceInventoryRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 库存申报交易号，调用方生成的唯一编码；
  // 格式为 yyyyMMdd_身份标识_其他编码，yyyyMMdd请传递当前时间。
  // 系统会根据该流水号做防重、幂等判断逻辑。
  // 当极端场景中（接口超时），客户端应该保持该流水号不变，并使用原来的请求再次发送请求，系统会根据幂等逻辑返回处理结果；
  tradeNo: string(maxLength=50, name='trade_no'),
  // 库存申报编号
  inventoryNo: string(maxLength=50, name='inventory_no'),
  // 库存查询时间，yyyy-mm-dd，精确到（天）
  inventoryQueryDate: string(name='inventory_query_date'),
  // 仓库代码
  // 
  // 
  repositoryCode: string(maxLength=50, name='repository_code'),
  // 库存货物列表
  inventoryCargos: [ InventoryCargo ](name='inventory_cargos'),
}

model ApplyInsuranceInventoryResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 库存申报编号
  inventoryNo?: string(name='inventory_no'),
  // 库存申报交易流水号
  tradeNo?: string(name='trade_no'),
}

/**
 * Description: 货物库存申报
 * Summary: 货物库存申报
 */
async function applyInsuranceInventory(request: ApplyInsuranceInventoryRequest): ApplyInsuranceInventoryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return applyInsuranceInventoryEx(request, headers, runtime);
}

/**
 * Description: 货物库存申报
 * Summary: 货物库存申报
 */
async function applyInsuranceInventoryEx(request: ApplyInsuranceInventoryRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ApplyInsuranceInventoryResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.insurance.inventory.apply', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ApplyInsuranceOspiRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 调用方生成的唯一编码，格式为 yyyyMMdd_身份标识_其他编码，系统会根据该流水号做防重、幂等判断逻辑。
  // yyyyMMdd请传递当前时间。 
  // 身份标识可自定义。
  // 其他编码建议为随机值。
  // 当极端场景中，系统会返回处理中，错误码为2222，客户端应该保持该流水号不变，并使用原来的请求再次发送请求，系统会根据幂等逻辑返回处理结果；	
  tradeNo: string(maxLength=50, name='trade_no'),
  // 保司编码.，PAIC---平安，CICP-中华财险
  externalChannelCode: string(maxLength=10, name='external_channel_code'),
  // 险种编码，04--海外邮包险
  // 
  externalProductCode: string(maxLength=2, name='external_product_code'),
  // 投保人姓名，保险协议中的投保人全称
  tbrName: string(maxLength=100, name='tbr_name'),
  // 投保人证件类型，03--营业执照
  tbrIdType: string(maxLength=2, name='tbr_id_type'),
  // 投保人证件号码
  tbrIdNo: string(maxLength=30, name='tbr_id_no'),
  // 被保人姓名，实际的保险被保人名称
  bbrName: string(maxLength=100, name='bbr_name'),
  // 被保人证件类型，01--居民身份证、03--营业执照
  bbrIdType: string(maxLength=2, name='bbr_id_type'),
  // 被保人证件号码
  bbrIdNo: string(maxLength=30, name='bbr_id_no'),
  // 受益人名称，实际的保险受益人名称
  beneficiaryName: string(maxLength=100, name='beneficiary_name'),
  // 受益人证件类型，01--居民身份证、03--营业执照
  beneficiaryIdType: string(maxLength=2, name='beneficiary_id_type'),
  // 受益人证件号码
  beneficiaryNo: string(maxLength=30, name='beneficiary_no'),
  // 保险起期，日期格式yyyy-MM-dd HH:mm:ss
  insureStart: string(name='insure_start'),
  // 保险金额，单位（元），最多支持2位小数，超过2位拒绝；
  insuredAmount: string(name='insured_amount'),
  // 方案名，海外邮包险--OWFP
  schemeName: string(maxLength=100, name='scheme_name'),
  // 项目名称,海外邮包险：OWFP-对应国别，例OWFP-RU
  projectName: string(maxLength=500, name='project_name'),
  // 订单号,物流平台用以区分业务的唯一码
  relaOrderNo: string(maxLength=200, name='rela_order_no'),
  // 寄件时间，日期格式yyyy-MM-dd HH:mm:ss
  pickUpTime: string(name='pick_up_time'),
  // 快递公司名称，实际的派送公司全称
  courierCompany: string(maxLength=200, name='courier_company'),
  // 快递单号，实际的派送快递单号
  courierNumber: string(maxLength=100, name='courier_number'),
  // 货物类型，货物类型的大类
  cargoType: string(maxLength=100, name='cargo_type'),
  // 货物名称，实际的货物名称
  cargoName: string(maxLength=200, name='cargo_name'),
  // 货物数量
  cargoQuantity: string(name='cargo_quantity'),
  // 买家ID，买家的脱敏唯一标识
  buyId: string(maxLength=100, name='buy_id'),
  // 卖家ID，卖家的脱敏唯一标识
  sellId: string(maxLength=100, name='sell_id'),
  // 站点/仓储ID，站点/仓储的脱敏唯一标识
  siteId: string(maxLength=100, name='site_id'),
  // 出发地地址，包裹的实际发件地地址
  startPlace: string(maxLength=500, name='start_place'),
  // 目的地地址，包裹的实际收件地地址
  destination: string(maxLength=500, name='destination'),
  // ISO到达国别，包裹业务实际发生的国家
  isoCountry: string(maxLength=10, name='iso_country'),
  // 货物申报价值，单位（元），最多支持2位小数，超过2位拒绝
  cargoWorth: string(name='cargo_worth'),
  // 收货人名称
  consigneeName?: string(maxLength=100, name='consignee_name'),
}

model ApplyInsuranceOspiResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 投保唯一码
  tradeNo?: string(name='trade_no'),
  // 保单号
  policyNo?: string(name='policy_no'),
  // 保费
  premium?: string(name='premium'),
  // 保额
  insuredAmount?: string(name='insured_amount'),
  // 保险起期
  insureStart?: string(name='insure_start'),
  // 保险止期
  insureEnd?: string(name='insure_end'),
}

/**
 * Description: 海外邮包险投保api
 * Summary: 海外邮包险投保
 */
async function applyInsuranceOspi(request: ApplyInsuranceOspiRequest): ApplyInsuranceOspiResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return applyInsuranceOspiEx(request, headers, runtime);
}

/**
 * Description: 海外邮包险投保api
 * Summary: 海外邮包险投保
 */
async function applyInsuranceOspiEx(request: ApplyInsuranceOspiRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ApplyInsuranceOspiResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.insurance.ospi.apply', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ApplyInsuranceOspireportRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 调用方生成的唯一编码，格式为 yyyyMMdd_身份标识_其他编码，系统会根据该流水号做防重、幂等判断逻辑。
  // yyyyMMdd请传递当前时间。 
  // 身份标识可自定义。
  // 其他编码建议为随机值。
  // 当极端场景中，系统会返回处理中，错误码为2222，客户端应该保持该流水号不变，并使用原来的请求再次发送请求，系统会根据幂等逻辑返回处理结果；	
  tradeNo: string(maxLength=50, name='trade_no'),
  // 保司编码，PAIC---平安，CICP-中华财险
  externalChannelCode: string(maxLength=10, name='external_channel_code'),
  // 险种编码
  // 04--海外邮包险
  // 06--跨境邮包险
  externalProductCode: string(maxLength=2, name='external_product_code'),
  // 保单号，申请理赔的保单号
  policyNo: string(maxLength=200, name='policy_no'),
  // 订单号，申请理赔所关联的订单号
  relaOrderNo: string(maxLength=200, name='rela_order_no'),
  // 出险时间，发生损失的时间，yyyy-MM-dd HH:mm:ss
  accidentTime: string(name='accident_time'),
  // 报案人名称，申请报案人的名称
  reporterName: string(maxLength=100, name='reporter_name'),
  // 报案人联系方式，申请报案人的联系方式
  reporterContact: string(maxLength=20, name='reporter_contact'),
  // 索赔金额，单位（元），最多支持2位小数，超2位小数拒绝
  claimAmount: string(name='claim_amount'),
  // 物流揽收时间，yyyy-MM-dd HH:mm:ss
  collectDate: string(name='collect_date'),
  // 工单号，平台客服判责的工单号
  jobNo: string(maxLength=100, name='job_no'),
  // 快递公司名称，实际的派送公司全称
  courierCompany: string(maxLength=200, name='courier_company'),
  // 快递单号，实际的派送快递单号
  courierNumber: string(maxLength=100, name='courier_number'),
  // 买家ID，买家的脱敏唯一标识
  buyId: string(maxLength=100, name='buy_id'),
  // 卖家ID，卖家的脱敏唯一标识 
  sellId: string(maxLength=100, name='sell_id'),
  // 站点/仓储ID，站点/仓储的脱敏唯一标识
  siteId?: string(maxLength=100, name='site_id'),
  // 货物名称，实际的货物名称
  cargoName: string(maxLength=200, name='cargo_name'),
  // 货物的重量，单位(kg)，最多支持6位小数
  cargoWeight: string(maxLength=20, name='cargo_weight'),
  // 出发地地址，货物的出发地地址
  startPlace: string(maxLength=500, name='start_place'),
  // 目的地地址，货物的目的地地址
  destination: string(maxLength=500, name='destination'),
  // ISO到达国别，包裹业务实际发生的国家
  isoCountry: string(maxLength=10, name='iso_country'),
  // 出险地址，货物发生实际损失的最近的一次地址记录
  accidentAddress: string(maxLength=500, name='accident_address'),
  // 平台赔款支付时间，平台先行赔付的时间，yyyy-MM-dd HH:mm:ss
  paymentTime: string(name='payment_time'),
  // 赔付项目类型，01-运费，02-货值，03-货值2
  paymentItem: string(maxLength=2, name='payment_item'),
  // 出险类型，赔付的出险类型，届时保司和平台方商定
  accidentType: string(maxLength=20, name='accident_type'),
  // 索赔资料附件，最多10个
  claimInformations: [ ClaimInformation ](name='claim_informations'),
}

model ApplyInsuranceOspireportResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 报案唯一码
  tradeNo?: string(name='trade_no'),
  // 报案号
  reportNo?: string(name='report_no'),
}

/**
 * Description: 海外、跨境邮包险理赔报案
 * Summary: 海外、跨境邮包险报案
 */
async function applyInsuranceOspireport(request: ApplyInsuranceOspireportRequest): ApplyInsuranceOspireportResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return applyInsuranceOspireportEx(request, headers, runtime);
}

/**
 * Description: 海外、跨境邮包险理赔报案
 * Summary: 海外、跨境邮包险报案
 */
async function applyInsuranceOspireportEx(request: ApplyInsuranceOspireportRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ApplyInsuranceOspireportResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.insurance.ospireport.apply', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model NotifyInsuranceOspireportRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 案件同步唯一码，调用方生成的唯一编码； 格式为 yyyyMMdd_身份标识_其他编码，yyyyMMdd请传递当前时间。
  // 系统会根据该流水号做防重、幂等判断逻辑。
  tradeNo: string(maxLength=50, name='trade_no'),
  // 报案号，关联的报案案件号
  reportNo: string(maxLength=100, name='report_no'),
  // 订单号
  relaOrderNo: string(maxLength=100, name='rela_order_no'),
  // 理赔金额(元)，实际的理赔金额，最多支持2位小数，超2位小数拒绝请求
  claimAmount: string(name='claim_amount'),
  // 支付时间，实际的保司打款时间，格式：yyyy-MM-dd HH:mm:ss
  paymentTime: string(name='payment_time'),
  // 银行流水，打款的银行流水号
  bankSerialNum: string(maxLength=200, name='bank_serial_num'),
}

model NotifyInsuranceOspireportResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 案件同步唯一码
  tradeNo?: string(name='trade_no'),
  // 案件通知状态--SUCCESS、FAIL
  reportNotifyStatus?: string(name='report_notify_status'),
}

/**
 * Description: 海外、跨境邮包险案件结果通知
 * Summary: 海外、跨境邮包险案件结果通知
 */
async function notifyInsuranceOspireport(request: NotifyInsuranceOspireportRequest): NotifyInsuranceOspireportResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return notifyInsuranceOspireportEx(request, headers, runtime);
}

/**
 * Description: 海外、跨境邮包险案件结果通知
 * Summary: 海外、跨境邮包险案件结果通知
 */
async function notifyInsuranceOspireportEx(request: NotifyInsuranceOspireportRequest, headers: map[string]string, runtime: Util.RuntimeOptions): NotifyInsuranceOspireportResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.insurance.ospireport.notify', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ApplyInsuranceYzbRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 调用方生成的唯一编码，格式为 yyyyMMdd_身份标识_其他编码，系统会根据该流水号做防重、幂等判断逻辑。
  // yyyyMMdd请传递当前时间。 
  // 身份标识可自定义。
  // 其他编码建议为随机值。
  // 当极端场景中，系统会返回处理中，错误码为2222，客户端应该保持该流水号不变，并使用原来的请求再次发送请求，系统会根据幂等逻辑返回处理结果；	
  tradeNo: string(maxLength=50, name='trade_no'),
  // 保司编码，PAIC---平安
  externalChannelCode: string(maxLength=10, name='external_channel_code'),
  // 险种编码，05-驿站宝
  externalProductCode: string(maxLength=2, name='external_product_code'),
  // 投保人姓名，保险协议中的投保人全称
  tbrName: string(maxLength=100, name='tbr_name'),
  // 投保人证件类型，03--营业执照
  tbrIdType: string(maxLength=2, name='tbr_id_type'),
  // 投保人证件号码
  tbrIdNo: string(maxLength=30, name='tbr_id_no'),
  // 被保人姓名，实际的保险被保人名称
  bbrName: string(maxLength=100, name='bbr_name'),
  // 被保人证件类型，01--居民身份证、03--营业执照
  bbrIdType: string(maxLength=2, name='bbr_id_type'),
  // 被保人证件号码
  bbrIdNo: string(maxLength=30, name='bbr_id_no'),
  // 被保人联系方式
  bbrContact: string(maxLength=30, name='bbr_contact'),
  // 受益人名称，实际的保险受益人名称
  beneficiaryName: string(maxLength=100, name='beneficiary_name'),
  // 受益人证件类型，01--居民身份证、03--营业执照
  beneficiaryIdType: string(maxLength=2, name='beneficiary_id_type'),
  // 受益人证件号码
  beneficiaryNo: string(maxLength=30, name='beneficiary_no'),
  // 保险起期，格式：yyyy-MM-dd HH:mm:ss
  insureStart: string(name='insure_start'),
  // 套餐编码，PK00053022、PK00053025、PK00053026
  productPackageType: string(maxLength=20, name='product_package_type'),
  // 站点ID，站点的唯一标识
  siteId: string(maxLength=30, name='site_id'),
  // 站点名称
  siteName: string(maxLength=100, name='site_name'),
  // 总资产，单位（元），最多2位小数，超过拒绝请求
  totalAssets: string(name='total_assets'),
  // 雇员人数，站点的雇佣人员数
  employeeNum: string(name='employee_num'),
  // 省编码，站点位于的省份编码
  provinceCode: string(maxLength=10, name='province_code'),
  // 市编码，站点位于的市区编码
  cityCode: string(maxLength=10, name='city_code'),
  // 区编码,站点位于的区县编码
  districtCode: string(maxLength=10, name='district_code'),
  // 完整地址，站点的详细地址
  wholeAddress: string(maxLength=300, name='whole_address'),
  // 方案名称，菜鸟驿站宝、菜鸟校园驿站宝、溪鸟公共服务站保障
  schemeName: string(maxLength=100, name='scheme_name'),
  // 意健险被保人姓名
  acplBbrName: string(maxLength=100, name='acpl_bbr_name'),
  // 意健险被保人身份证号
  acplBbrIdNo: string(maxLength=30, name='acpl_bbr_id_no'),
  // 产品市场编码，一般指保司端险种编码
  pdtMktCode?: string(maxLength=16, name='pdt_mkt_code'),
}

model ApplyInsuranceYzbResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 投保唯一码
  tradeNo?: string(name='trade_no'),
  // 保单号
  policyNo?: string(name='policy_no'),
  // 电子保单链接
  policyUrl?: string(name='policy_url'),
  // 保费
  premium?: string(name='premium'),
  // 保额
  insuredAmount?: string(name='insured_amount'),
  // 保险起期
  insureStart?: string(name='insure_start'),
  // 保险止期
  insureEnd?: string(name='insure_end'),
}

/**
 * Description: 驿站宝投保
 * Summary: 驿站宝投保
 */
async function applyInsuranceYzb(request: ApplyInsuranceYzbRequest): ApplyInsuranceYzbResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return applyInsuranceYzbEx(request, headers, runtime);
}

/**
 * Description: 驿站宝投保
 * Summary: 驿站宝投保
 */
async function applyInsuranceYzbEx(request: ApplyInsuranceYzbRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ApplyInsuranceYzbResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.insurance.yzb.apply', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ApplyInsuranceCbpiRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 调用方生成的唯一编码，格式为 yyyyMMdd_身份标识_其他编码，系统会根据该流水号做防重、幂等判断逻辑。
  // yyyyMMdd请传递当前时间。 
  // 身份标识可自定义。
  // 其他编码建议为随机值。
  // 当极端场景中，系统会返回处理中，错误码为2222，客户端应该保持该流水号不变，并使用原来的请求再次发送请求，系统会根据幂等逻辑返回处理结果；	
  tradeNo: string(maxLength=50, name='trade_no'),
  // 保司编码.，PAIC---平安，PICC-人保
  externalChannelCode: string(maxLength=10, name='external_channel_code'),
  // 险种编码，06--跨境邮包险
  externalProductCode: string(maxLength=2, name='external_product_code'),
  // 保险协议中的投保人全称
  tbrName: string(maxLength=100, name='tbr_name'),
  // 投保人证件类型，03--营业执照
  // 
  tbrIdType: string(maxLength=2, name='tbr_id_type'),
  // 投保人证件号码
  tbrIdNo: string(maxLength=30, name='tbr_id_no'),
  // 被保人姓名，实际的保险被保人名称
  bbrName: string(maxLength=100, name='bbr_name'),
  // 被保人证件类型，01--居民身份证、03--营业执照
  bbrIdType: string(maxLength=2, name='bbr_id_type'),
  // 被保人证件号码
  // 
  bbrIdNo: string(maxLength=30, name='bbr_id_no'),
  // 受益人名称，实际的保险受益人名称
  // 
  beneficiaryName: string(maxLength=100, name='beneficiary_name'),
  // 受益人证件类型，01--居民身份证、03--营业执照
  beneficiaryIdType: string(maxLength=2, name='beneficiary_id_type'),
  // 受益人证件号码
  beneficiaryNo: string(maxLength=30, name='beneficiary_no'),
  // 保险起期，日期格式yyyy-MM-dd HH:mm:ss
  // 
  insureStart: string(name='insure_start'),
  // 保险金额，单位（元），最多支持2位小数，超过2位拒绝；
  // 
  insuredAmount: string(name='insured_amount'),
  // 方案名，XBDP—跨境邮包险
  schemeName: string(maxLength=100, name='scheme_name'),
  // 项目名称，命名规范“方案种类+物流业务种类+国别”
  projectName: string(maxLength=500, name='project_name'),
  // 订单号,物流平台用以区分业务的唯一码
  relatedOrderNo: string(maxLength=100, name='related_order_no'),
  // 寄件时间，日期格式yyyy-MM-dd HH:mm:ss
  pickUpTime: string(name='pick_up_time'),
  // 快递公司名称，实际的派送公司全称
  courierCompany: string(maxLength=200, name='courier_company'),
  // 快递单号，实际的派送快递单号
  // 
  courierNumber: string(maxLength=100, name='courier_number'),
  // 货物类型,货物类型的大类
  cargoType: string(maxLength=100, name='cargo_type'),
  // 货物名称,实际的货物名称
  cargoName: string(maxLength=200, name='cargo_name'),
  // 货物数量
  cargoQuantity: string(name='cargo_quantity'),
  // 买家ID,买家的脱敏唯一标识
  buyId: string(maxLength=100, name='buy_id'),
  // 卖家ID,卖家的脱敏唯一标识
  sellId: string(maxLength=100, name='sell_id'),
  // 出发地地址,包裹的实际发件地地址
  startPlace: string(maxLength=500, name='start_place'),
  // 目的地地址,包裹的实际收件地地址
  destination: string(maxLength=500, name='destination'),
  // ISO到达国别,包裹业务实际发生的国家
  isoCountry: string(maxLength=10, name='iso_country'),
  // 货物申报价值，单位（元），最多支持2位小数，超过2位拒绝
  cargoWorth: string(name='cargo_worth'),
  // 收货人名称
  consigneeName?: string(maxLength=100, name='consignee_name'),
  // 平安询价code,当客户向平安进行保险投递时，请填写上平安询价code字段
  quoteMark?: string(maxLength=100, name='quote_mark'),
}

model ApplyInsuranceCbpiResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 投保唯一码
  // 
  tradeNo?: string(name='trade_no'),
  // 保单号
  // 
  policyNo?: string(name='policy_no'),
  // 保费
  // 
  premium?: string(name='premium'),
  // 保额
  // 
  insuredAmount?: string(name='insured_amount'),
  // 保险起期
  // 
  insureStart?: string(name='insure_start'),
  // 保险止期
  // 
  insureEnd?: string(name='insure_end'),
}

/**
 * Description: 跨境邮包险投保
 * Summary: 跨境邮包险投保
 */
async function applyInsuranceCbpi(request: ApplyInsuranceCbpiRequest): ApplyInsuranceCbpiResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return applyInsuranceCbpiEx(request, headers, runtime);
}

/**
 * Description: 跨境邮包险投保
 * Summary: 跨境邮包险投保
 */
async function applyInsuranceCbpiEx(request: ApplyInsuranceCbpiRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ApplyInsuranceCbpiResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.insurance.cbpi.apply', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ApplyInsuranceYzbreportRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 调用方生成的唯一编码，格式为 yyyyMMdd_身份标识_其他编码，系统会根据该流水号做防重、幂等判断逻辑。
  // yyyyMMdd请传递当前时间。 
  // 身份标识可自定义。
  // 其他编码建议为随机值。
  // 当极端场景中，系统会返回处理中，错误码为2222，客户端应该保持该流水号不变，并使用原来的请求再次发送请求，系统会根据幂等逻辑返回处理结果；	
  tradeNo: string(maxLength=50, name='trade_no'),
  // 保司编码，PAIC---平安
  externalChannelCode: string(maxLength=10, name='external_channel_code'),
  // 险种编码，05-驿站宝
  externalProductCode: string(maxLength=2, name='external_product_code'),
  // 保单号，申请理赔的保单号
  policyNo: string(maxLength=200, name='policy_no'),
  // 报案唯一标识，申请理赔所关联的订单号，如一个订单会存在多次理赔，请用唯一标识
  reportUniqueKey: string(maxLength=200, name='report_unique_key'),
  // 理赔申请人
  claimApplyPerson: string(maxLength=100, name='claim_apply_person'),
  // 报案人名称
  reporterName: string(maxLength=100, name='reporter_name'),
  // 报案人联系方式
  reporterContact: string(maxLength=20, name='reporter_contact'),
  // 出险时间，发生损失的时间 yyyy-mm-dd hh:mm:ss
  accidentTime: string(name='accident_time'),
  // 出险城市编码，国家地理位置编码6位城市编码
  accidentCityCode: string(maxLength=10, name='accident_city_code'),
  // 出险区县编码，国家地理位置编码6位城市编码
  accidentDistrictCode: string(maxLength=10, name='accident_district_code'),
  // 出险详细地址，事发出险地的详细地址
  accidentAddress: string(maxLength=500, name='accident_address'),
  // 出险详细经过
  accidentDetail: string(maxLength=500, name='accident_detail'),
  // 出险原因代码，包裹破损丢失-R3028，火灾-R3025，爆炸-R3026，水湿-R3036，自燃-R3038，其他意外-R3039
  accidentCauseCode: string(maxLength=10, name='accident_cause_code'),
  // 损失类型，1-人伤，2-车损,，3-物损，6-其它损失，多种损失以英文逗号分隔
  lossType: string(maxLength=50, name='loss_type'),
  // 损失预估总金额，单位（元），最多支持2位小数
  lossEstimateTotalAmount: string(name='loss_estimate_total_amount'),
  // 投诉工单号，申请理赔所关联的投诉工单号，包裹出险可填
  // 
  complaintJobNo?: string(maxLength=100, name='complaint_job_no'),
  // 快递公司，申请理赔所关联的快递公司名称，包裹出险可填
  courierCompany?: string(maxLength=200, name='courier_company'),
  // 运单号，申请理赔所关联的运单号，包裹出险可填
  wayBillNo?: string(maxLength=100, name='way_bill_no'),
  // 支付信息
  paymentInfo?: PaymentInfo(name='payment_info'),
  // 人员伤残情况
  personLoss?: PersonLoss(name='person_loss'),
  // 车辆损失详情
  carLoss?: CarLoss(name='car_loss'),
  // 货物损失详情
  cargoLoss?: CargoLoss(name='cargo_loss'),
  // 文档信息
  documents?: [ Document ](name='documents'),
  // 判责工单号
  dutyWorkNo?: string(maxLength=100, name='duty_work_no'),
  // 快递或包裹进入驿站仓储时间，yyyy-mm-dd hh:mm:ss
  pkgInDate?: string(maxLength=20, name='pkg_in_date'),
  // 驿站针对快递或包裹的出库时间（配送上门传送待签收时间），yyyy-mm-dd hh:mm:ss
  pkgOutDate?: string(maxLength=20, name='pkg_out_date'),
  // 发票工单投诉时间，yyyy-mm-dd hh:mm:ss
  genWorkDate?: string(maxLength=20, name='gen_work_date'),
  // 工单类型
  workType?: string(maxLength=20, name='work_type'),
  // 是否星级站点，0是，1否
  isStarStation?: string(name='is_star_station'),
}

model ApplyInsuranceYzbreportResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 报案唯一码
  tradeNo?: string(name='trade_no'),
  // 报案号
  reportNo?: string(name='report_no'),
}

/**
 * Description: 驿站宝报案
 * Summary: 驿站宝报案
 */
async function applyInsuranceYzbreport(request: ApplyInsuranceYzbreportRequest): ApplyInsuranceYzbreportResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return applyInsuranceYzbreportEx(request, headers, runtime);
}

/**
 * Description: 驿站宝报案
 * Summary: 驿站宝报案
 */
async function applyInsuranceYzbreportEx(request: ApplyInsuranceYzbreportRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ApplyInsuranceYzbreportResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.insurance.yzbreport.apply', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryInsuranceYzbreportRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 保司编码，PAIC---平安
  // 
  externalChannelCode: string(maxLength=10, name='external_channel_code'),
  // 保单号
  policyNo: string(maxLength=200, name='policy_no'),
  // 报案号
  reportNo: string(maxLength=100, name='report_no'),
}

model QueryInsuranceYzbreportResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 报案号
  reportNo?: string(name='report_no'),
  // 保单号
  policyNo?: string(name='policy_no'),
  // 赔案号
  claimNo?: string(name='claim_no'),
  // 报案时间，格式yyyy-mm-dd hh:mm:ss
  reportReqTime?: string(name='report_req_time'),
  // 案件状态，已报案，已结案，已赔付
  reportStatus?: string(name='report_status'),
  // 案件赔付金额，单位元，两位小数;
  reportPaidAmount?: string(name='report_paid_amount'),
  // 险种名称
  externalProductName?: string(name='external_product_name'),
  // 结案时间，格式yyyy-mm-dd hh:mm:ss
  reportEndTime?: string(name='report_end_time'),
  // 案件赔付结论，1-赔付 2-零结 3-商业险拒赔 4-整案拒赔 5-注销
  reportPaidDesc?: string(name='report_paid_desc'),
  // 案件赔付时间，格式yyyy-mm-dd hh:mm:ss
  // 
  reportPaidTime?: string(name='report_paid_time'),
}

/**
 * Description: 驿站宝案件进度查询
 * Summary: 驿站宝案件进度查询
 */
async function queryInsuranceYzbreport(request: QueryInsuranceYzbreportRequest): QueryInsuranceYzbreportResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryInsuranceYzbreportEx(request, headers, runtime);
}

/**
 * Description: 驿站宝案件进度查询
 * Summary: 驿站宝案件进度查询
 */
async function queryInsuranceYzbreportEx(request: QueryInsuranceYzbreportRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryInsuranceYzbreportResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.insurance.yzbreport.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SaveInsuranceWaybillRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 调用方生成的唯一编码，格式为 yyyyMMdd_身份标识_其他编码，系统会根据该流水号做防重、幂等判断逻辑。
  // yyyyMMdd请传递当前时间。 
  // 身份标识可自定义。
  // 其他编码建议为随机值。
  // 当极端场景中，系统会返回处理中，错误码为2222，客户端应该保持该流水号不变，并使用原来的请求再次发送请求，系统会根据幂等逻辑返回处理结果；	
  // 
  tradeNo: string(maxLength=50, name='trade_no'),
  // 运单号，客户侧系统的运单唯一识别号
  waybillNo: string(maxLength=200, name='waybill_no'),
  // 发货单位，客户唯一识别码或脱敏标识
  deliveryCompany?: string(maxLength=200, name='delivery_company'),
  // 发货人，客户唯一识别码或脱敏标识
  consignor: string(maxLength=200, name='consignor'),
  // 发货地址，地址可脱敏，不需要精确到门牌号
  deliveryAddress?: string(maxLength=500, name='delivery_address'),
  // 货物名称
  cargoName: string(maxLength=500, name='cargo_name'),
  // 货物数量，单位（件）
  cargoQuantity: string(maxLength=20, name='cargo_quantity'),
  // 货物重量，单位（kg）
  cargoWeight?: string(maxLength=20, name='cargo_weight'),
  // 货物体积，单位（方）
  cargoDimensions?: string(maxLength=20, name='cargo_dimensions'),
  // 揽件网点，货物出发地的揽件网点
  pickupOutlets?: string(maxLength=200, name='pickup_outlets'),
  // 出发站，专线出发站点
  departureStation: string(maxLength=200, name='departure_station'),
  // 到达站，专线到达站点
  destinationStation: string(maxLength=200, name='destination_station'),
  // 派件网点，货物目的地的派件网点
  dispatchOutlets?: string(maxLength=200, name='dispatch_outlets'),
  // 收货人，客户唯一识别码或脱敏标识
  consignee?: string(maxLength=200, name='consignee'),
  // 收货地址，地址可脱敏，不需要精确到门牌号
  receivingAddress?: string(maxLength=500, name='receiving_address'),
  // 干线承运商
  trunkLineCarrier?: string(maxLength=200, name='trunk_line_carrier'),
  // 干线车牌号
  trunkLineCarNumber?: string(maxLength=20, name='trunk_line_car_number'),
  // 司机姓名
  driverName?: string(maxLength=200, name='driver_name'),
  // 司机联系方式
  driverContact?: string(maxLength=20, name='driver_contact'),
  // 运单创建时间，格式：yyyy-mm-dd hh:mm:ss
  waybillCreateTime: string(name='waybill_create_time'),
  // 干线运输发车时间，格式要求：yyyy-mm-dd hh:mm:ss
  trunkLineDepartureTime?: string(name='trunk_line_departure_time'),
  // 干线运输到达时间，格式要求：yyyy-mm-dd hh:mm:ss
  trunkLineArrivalTime?: string(name='trunk_line_arrival_time'),
  // 运费总金额，单位（元），最多2位小数
  freight: string(name='freight'),
  // 运单状态，客户系统中实际的当前运单状态
  waybillStatus: string(maxLength=200, name='waybill_status'),
  // 提货车牌号
  takeCargoCarNumber?: string(maxLength=20, name='take_cargo_car_number'),
  // 短驳车牌号
  shortBargeCarNumber?: string(maxLength=20, name='short_barge_car_number'),
  // 送货车牌号
  deliveryCarNumber?: string(maxLength=20, name='delivery_car_number'),
  // 运单操作类型，CREATE -创建，UPDATE-更新
  waybillActionType: string(maxLength=20, name='waybill_action_type'),
}

model SaveInsuranceWaybillResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 运单操作类型，与请求参数中一致
  waybillActionType?: string(name='waybill_action_type'),
  // 交易流水号，与请求参数中一致
  tradeNo?: string(name='trade_no'),
}

/**
 * Description: 零担快运运单上链存证接口
 * Summary: 零担快运运单上链存证接口
 */
async function saveInsuranceWaybill(request: SaveInsuranceWaybillRequest): SaveInsuranceWaybillResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return saveInsuranceWaybillEx(request, headers, runtime);
}

/**
 * Description: 零担快运运单上链存证接口
 * Summary: 零担快运运单上链存证接口
 */
async function saveInsuranceWaybillEx(request: SaveInsuranceWaybillRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SaveInsuranceWaybillResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.insurance.waybill.save', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryInsuranceEpolicyRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 投保返回的交易流水号
  applyTradeNo: string(maxLength=50, name='apply_trade_no'),
  // 保单号
  policyNo: string(maxLength=64, name='policy_no'),
}

model QueryInsuranceEpolicyResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 电子保单url地址
  policyUrl?: string(name='policy_url'),
}

/**
 * Description: 保险电子保单查询
 * Summary: 保险电子保单查询
 */
async function queryInsuranceEpolicy(request: QueryInsuranceEpolicyRequest): QueryInsuranceEpolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryInsuranceEpolicyEx(request, headers, runtime);
}

/**
 * Description: 保险电子保单查询
 * Summary: 保险电子保单查询
 */
async function queryInsuranceEpolicyEx(request: QueryInsuranceEpolicyRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryInsuranceEpolicyResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.insurance.epolicy.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model NotifyInsuranceReportresultRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 案件同步唯一码，调用方生成的唯一编码； 格式为 yyyyMMdd_身份标识_其他编码，yyyyMMdd请传递当前时间。 系统会根据该流水号做防重、幂等判断逻辑。	
  // 
  tradeNo: string(maxLength=50, name='trade_no'),
  // 渠道简称code
  channelSimpleCode: string(maxLength=16, name='channel_simple_code'),
  // 报案号，关联的报案案件号	
  // 
  reportNo: string(maxLength=100, name='report_no'),
  // 订单号	
  // 
  relaOrderNo: string(maxLength=100, name='rela_order_no'),
  // 理赔金额(元)，实际的理赔金额，最多支持2位小数，超2位小数拒绝请求	
  // 
  claimAmount: string(name='claim_amount'),
  // 支付时间，实际的保司打款时间，格式：yyyy-MM-dd HH:mm:ss	
  // 
  paymentTime: string(name='payment_time'),
  // 银行流水，打款的银行流水号	
  // 
  bankSerialNum: string(maxLength=200, name='bank_serial_num'),
}

model NotifyInsuranceReportresultResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 案件同步唯一码	
  // 
  tradeNo?: string(name='trade_no'),
  // 案件通知状态--SUCCESS、FAIL	
  // 
  reportNotifyStatus?: string(name='report_notify_status'),
}

/**
 * Description: 报案案件结果通知（内部）
 * Summary: 报案案件结果通知（内部）
 */
async function notifyInsuranceReportresult(request: NotifyInsuranceReportresultRequest): NotifyInsuranceReportresultResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return notifyInsuranceReportresultEx(request, headers, runtime);
}

/**
 * Description: 报案案件结果通知（内部）
 * Summary: 报案案件结果通知（内部）
 */
async function notifyInsuranceReportresultEx(request: NotifyInsuranceReportresultRequest, headers: map[string]string, runtime: Util.RuntimeOptions): NotifyInsuranceReportresultResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.insurance.reportresult.notify', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model PushAuthSigninfoRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 签署流程id
  signProcessId: string(name='sign_process_id'),
  // 授权关系类型id
  authRelTypeId: string(name='auth_rel_type_id'),
  // 某某主题
  signTheme?: string(name='sign_theme'),
  // 发起方名称
  initiatorName: string(name='initiator_name'),
  // 发起方证件类型，可以填写的枚举类型：UNIFIED_SOCIAL_CREDIT_CODE,  BUSINESS_LICENSE_NUMBER。分别表示统一社会信用代码和工商注册号
  initiatorCertType: string(name='initiator_cert_type'),
  // 发起方证件号码
  initiatorCertNum: string(name='initiator_cert_num'),
  // 合同模板hash
  contTmplHash: string(name='cont_tmpl_hash'),
  // 签署方信息列表
  authPartys: [ AuthParty ](name='auth_partys'),
  // 上链文件信息列表
  authChainFiles: [ AuthChainFile ](name='auth_chain_files'),
  // 动态字段1
  dynaField1?: string(name='dyna_field1'),
  // 动态字段2
  dynaField2?: string(name='dyna_field2'),
  // 动态字段3
  dynaField3?: string(name='dyna_field3'),
  // 动态字段4
  dynaField4?: string(name='dyna_field4'),
  // 动态字段5
  dynaField5?: string(name='dyna_field5'),
  // 动态字段6
  dynaField6?: string(name='dyna_field6'),
  // 动态字段7
  dynaField7?: string(name='dyna_field7'),
  // 动态字段8
  dynaField8?: string(name='dyna_field8'),
  // 动态字段9
  dynaField9?: string(name='dyna_field9'),
  // 动态字段10
  dynaField10?: string(name='dyna_field10'),
  // 动态字段11
  dynaField11?: string(name='dyna_field11'),
  // 动态字段12
  dynaField12?: string(name='dyna_field12'),
  // 动态字段13
  dynaField13?: string(name='dyna_field13'),
  // 动态字段14
  dynaField14?: string(name='dyna_field14'),
  // 动态字段15
  dynaField15?: string(name='dyna_field15'),
  // 动态字段16
  dynaField16?: string(name='dyna_field16'),
  // 动态字段17
  dynaField17?: string(name='dyna_field17'),
  // 动态字段18
  dynaField18?: string(name='dyna_field18'),
  // 动态字段19
  dynaField19?: string(name='dyna_field19'),
  // 动态字段20
  dynaField20?: string(name='dyna_field20'),
}

model PushAuthSigninfoResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 推送成功
  status?: string(name='status'),
}

/**
 * Description: 授权签署信息推送
 * Summary: 授权签署信息推送
 */
async function pushAuthSigninfo(request: PushAuthSigninfoRequest): PushAuthSigninfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return pushAuthSigninfoEx(request, headers, runtime);
}

/**
 * Description: 授权签署信息推送
 * Summary: 授权签署信息推送
 */
async function pushAuthSigninfoEx(request: PushAuthSigninfoRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PushAuthSigninfoResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.auth.signinfo.push', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryPfPaymentRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 业务参考号
  bussRefrNo: string(maxLength=100, name='buss_refr_no'),
  // 支用id
  financingId: string(maxLength=32, name='financing_id'),
}

model QueryPfPaymentResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 入账状态: 10-受理 20-在途 00-成功 99-失败
  accountinStatus?: string(name='accountin_status'),
  // 交易时间
  tradeTime?: string(name='trade_time'),
}

/**
 * Description: 池融资委托支付入账查询
 * Summary: 委托支付入账查询
 */
async function queryPfPayment(request: QueryPfPaymentRequest): QueryPfPaymentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryPfPaymentEx(request, headers, runtime);
}

/**
 * Description: 池融资委托支付入账查询
 * Summary: 委托支付入账查询
 */
async function queryPfPaymentEx(request: QueryPfPaymentRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryPfPaymentResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.pf.payment.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryPfIouRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 项目id
  projectId: string(name='project_id'),
  // 融资主体Did
  financingSubjectDid: string(name='financing_subject_did'),
  // 支用Id
  financingId: string(name='financing_id'),
}

model QueryPfIouResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 执行年利率
  annualInterestRate?: string(name='annual_interest_rate'),
  // 借据Id
  creditId?: string(name='credit_id'),
  // 借据到期日
  interestBearingEnd?: string(name='interest_bearing_end'),
  // 借据起息日
  interestBearingStart?: string(name='interest_bearing_start'),
  // 应还本金，即放款金额
  issuedAmount?: string(name='issued_amount'),
  // 还款银行名称
  repayBankName?: string(name='repay_bank_name'),
  // 还款账号名称
  repayAcctName?: string(name='repay_acct_name'),
  // 还款账号
  repayAccount?: string(name='repay_account'),
  // 实际已还本金
  repayAmt?: string(name='repay_amt'),
  // 实际已还利息
  repayInterest?: string(name='repay_interest'),
  // 实际已还总额
  repayTotalAmt?: string(name='repay_total_amt'),
  // 借据状态
  creditStatus?: string(name='credit_status'),
  // 是否逾期,0是,1否
  isOverdue?: string(name='is_overdue'),
  // 项目id
  projectId?: string(name='project_id'),
  // 支用id
  financingId?: string(name='financing_id'),
  // 融资主体DID
  financingSubjectDid?: string(name='financing_subject_did'),
}

/**
 * Description: 池融资借据信息查询
 * Summary: 借据信息查询
 */
async function queryPfIou(request: QueryPfIouRequest): QueryPfIouResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryPfIouEx(request, headers, runtime);
}

/**
 * Description: 池融资借据信息查询
 * Summary: 借据信息查询
 */
async function queryPfIouEx(request: QueryPfIouRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryPfIouResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.pf.iou.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryPfQuotaRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 项目标识
  projectId: string(maxLength=64, name='project_id'),
  // 证件号
  certNo: string(maxLength=20, name='cert_no'),
  // 证件类型;050 统一社会信用证代码
  certType: string(maxLength=3, name='cert_type'),
  // 银行端客户号
  customerNo: string(maxLength=20, name='customer_no'),
  // 融资主体did
  financingSubjectDid: string(name='financing_subject_did'),
}

model QueryPfQuotaResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 授信额度信息
  quotaInfo?: [ PfCreditQuotaInfo ](name='quota_info'),
}

/**
 * Description: 池融资授信额度查询
 * Summary: 授信额度查询
 */
async function queryPfQuota(request: QueryPfQuotaRequest): QueryPfQuotaResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryPfQuotaEx(request, headers, runtime);
}

/**
 * Description: 池融资授信额度查询
 * Summary: 授信额度查询
 */
async function queryPfQuotaEx(request: QueryPfQuotaRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryPfQuotaResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.pf.quota.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ApplyPfWaybillfinancingRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 请求号，以时间串yyyyMMdd 开头，要求该请求号在请求方系统内唯一；同时该字段也是幂等字段
  requestNo: string(maxLength=23, name='request_no'),
  // 项目标识；与对接同学确认对应的标识值
  projectId: string(maxLength=64, name='project_id'),
  // 承运商did
  carrierDid: string(maxLength=80, name='carrier_did'),
  // 融资支用金额；总长度最长20位，保留2位小数，四舍五入
  financingAmount: string(name='financing_amount'),
  // 支用币种，支持 CNY,USD
  financingCurrency: string(name='financing_currency'),
  // 融资授信主体公司分布式数字身份
  financingSubjectDid: string(maxLength=80, name='financing_subject_did'),
  // 贷款期限，值为2~6，单位为月
  loanTerm: string(maxLength=6, minLength=2, name='loan_term'),
  // 收款方开户行总行联行号
  payeeBankNumber: string(maxLength=32, name='payee_bank_number'),
  // 收款方开户行名称
  payeeBcb: string(maxLength=200, name='payee_bcb'),
  // 收款方开户行银行卡号
  payeeBcbCardNo: string(name='payee_bcb_card_no'),
  // 收款方证件号
  // 
  // 
  payeeIdNumber: string(maxLength=40, name='payee_id_number'),
  // 收款方证件类型
  payeeIdType: string(maxLength=5, name='payee_id_type'),
  // 收款方名称
  payeeName: string(maxLength=200, name='payee_name'),
  // 0政府投标 1经营周转 2支付货款 3采购机票，一般默认填 2 
  purpose: string(name='purpose'),
  // 银行端的Ukey签名；使用方调用接口前使用银行Ukey做签名，并将签名后的结果填入该字段；一期，该字段可不传，使用方通过登录网上银行使用网银进行确认
  signature?: string(maxLength=800, name='signature'),
  // 转账附言
  // 1: 工资、奖金收入
  // 2：稿费、演出费等劳务收入
  // 3：债券、期货、信托等投资的本金和收益
  // 4：个人债券或产权转让收益
  // 该字段建议填写 2
  transferPostscript: string(maxLength=3, name='transfer_postscript'),
  // 凭证类型，支持 WAYBILL,PAYABLE
  voucherCategory: string(name='voucher_category'),
  // 支用凭证ids，支持多个，逗号隔开；
  voucherIds: string(maxLength=2000, name='voucher_ids'),
  // 8位发票号，支持多个，逗号分隔
  voucherInvoiceCodes?: string(maxLength=800, name='voucher_invoice_codes'),
  // 提款确认书hash
  confirmationHash?: string(name='confirmation_hash'),
  // 提款确认书 osskey
  confirmationOssKey?: string(name='confirmation_oss_key'),
  // 签名公钥
  signaturePubKey?: string(name='signature_pub_key'),
  // 网银操作员账号
  // 
  // 
  onlineBankOperatorAccount?: string(name='online_bank_operator_account'),
}

model ApplyPfWaybillfinancingResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 融资支用Id
  financingId?: string(name='financing_id'),
  // 申请状态，
  // 融资申请失败 IN_VALID
  // 融资申请失败 F_APPLY_FAIL
  // 融资申请成功 F_APPLY_SUC
  // 融资申请成功 COMMIT
  // 融资核验中 VERIFYING
  // 融资核验失败 VERIFY_FAILURE
  // 融资订单生成成功 P_WITHDRAW
  // 融资成功 A_WITHDRAW
  // 融资失败 EXPIRED
  status?: string(name='status'),
}

/**
 * Description: 池融资支用申请
 * Summary: 池融资支用申请
 */
async function applyPfWaybillfinancing(request: ApplyPfWaybillfinancingRequest): ApplyPfWaybillfinancingResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return applyPfWaybillfinancingEx(request, headers, runtime);
}

/**
 * Description: 池融资支用申请
 * Summary: 池融资支用申请
 */
async function applyPfWaybillfinancingEx(request: ApplyPfWaybillfinancingRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ApplyPfWaybillfinancingResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.pf.waybillfinancing.apply', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model PushPfPledgeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 项目标识，可联系对接同学提供
  projectId: string(maxLength=64, name='project_id'),
  // 账单标识
  billId: string(maxLength=128, minLength=1, name='bill_id'),
  // 融资主体did
  financingSubjectDid: string(maxLength=128, minLength=1, name='financing_subject_did'),
  // 请求号；以yyyyMMdd 时间串开头的32位字符串；该字符串需要保持请求系统内唯一，系统会以该请求号作为幂等处理
  requestNo: string(maxLength=32, minLength=16, name='request_no'),
  // 质押发票号码列表
  invoiceNos?: [ string ](name='invoice_nos'),
  // 托盘账单金额
  palletBillAmount?: string(maxLength=64, minLength=1, name='pallet_bill_amount'),
  // 托盘账单关联发票号列表
  palletInvoiceNos?: [ string ](name='pallet_invoice_nos'),
}

model PushPfPledgeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 质押标识，用于账单质押推送状态查询
  pledgeId?: string(name='pledge_id'),
  // 已提交  COMMIT
  // 推送中 PUSHING
  // 推送成功 PUSH_SUC
  // 推送失败 PUSH_FAIL
  status?: string(name='status'),
  // 描述
  desc?: string(name='desc'),
}

/**
 * Description: 池融资账单质押，用于入池
 * Summary: 池融资账单质押
 */
async function pushPfPledge(request: PushPfPledgeRequest): PushPfPledgeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return pushPfPledgeEx(request, headers, runtime);
}

/**
 * Description: 池融资账单质押，用于入池
 * Summary: 池融资账单质押
 */
async function pushPfPledgeEx(request: PushPfPledgeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PushPfPledgeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.pf.pledge.push', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryPfPledgeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 质押id
  pledgeId: string(maxLength=32, minLength=16, name='pledge_id'),
}

model QueryPfPledgeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 账单id
  billId?: string(name='bill_id'),
  // 融资主体did
  financingSubjectDid?: string(name='financing_subject_did'),
  // 已提交  COMMIT
  // 推送中 PUSHING
  // 推送成功 PUSH_SUC
  // 推送失败 PUSH_FAIL
  status?: string(name='status'),
  // 状态描述
  desc?: string(name='desc'),
}

/**
 * Description: 入池账单质押状态查询
 * Summary: 质押状态查询
 */
async function queryPfPledge(request: QueryPfPledgeRequest): QueryPfPledgeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryPfPledgeEx(request, headers, runtime);
}

/**
 * Description: 入池账单质押状态查询
 * Summary: 质押状态查询
 */
async function queryPfPledgeEx(request: QueryPfPledgeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryPfPledgeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.pf.pledge.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryPfFinancingRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 支用Id
  financingId: string(name='financing_id'),
}

model QueryPfFinancingResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 支用Id
  financingId?: string(name='financing_id'),
  // 状态，说明如下：
  // 融资申请失败 IN_VALID;
  // 融资申请失败 F_APPLY_FAIL;
  // 融资申请成功 F_APPLY_SUC;
  // 融资申请成功 COMMIT;
  // 融资核验中 VERIFYING;
  // 融资核验失败 VERIFY_FAILURE;
  // 融资订单生成成功 P_WITHDRAW;
  // 融资成功 A_WITHDRAW;
  // 融资失败 EXPIRED
  status?: string(name='status'),
  // 描述
  desc?: string(name='desc'),
}

/**
 * Description: 池融资融资支用状态查询
 * Summary: 池融资融资支用状态查询
 */
async function queryPfFinancing(request: QueryPfFinancingRequest): QueryPfFinancingResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryPfFinancingEx(request, headers, runtime);
}

/**
 * Description: 池融资融资支用状态查询
 * Summary: 池融资融资支用状态查询
 */
async function queryPfFinancingEx(request: QueryPfFinancingRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryPfFinancingResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.pf.financing.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CheckPfVoucherRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 融资主体did
  financingSubjectDid: string(maxLength=80, name='financing_subject_did'),
  // 运单所属平台did
  platformDid: string(maxLength=80, name='platform_did'),
  // 凭证类型，支持 WAYBILL(运单)
  voucherCategory: string(maxLength=100, minLength=1, name='voucher_category'),
  // 支持多个，逗号隔开
  voucherIds: string(maxLength=3000, minLength=1, name='voucher_ids'),
}

model CheckPfVoucherResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 核验结果
  checkResults?: [ PfVoucherCheckResult ](name='check_results'),
}

/**
 * Description: 池融资凭证核验结果查询
 * Summary: 池融资凭证核验结果查询
 */
async function checkPfVoucher(request: CheckPfVoucherRequest): CheckPfVoucherResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return checkPfVoucherEx(request, headers, runtime);
}

/**
 * Description: 池融资凭证核验结果查询
 * Summary: 池融资凭证核验结果查询
 */
async function checkPfVoucherEx(request: CheckPfVoucherRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CheckPfVoucherResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.pf.voucher.check', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ApplyPfConfirmationRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 请求号
  requestNo: string(name='request_no'),
  // 项目标识，可联系对接同学获取
  projectId: string(maxLength=64, name='project_id'),
  // 客户号
  clientNo: string(name='client_no'),
  // 融资主体did
  financingSubjectDid: string(name='financing_subject_did'),
  // 借款人证件类型
  borrowerCardType: string(name='borrower_card_type'),
  // 借款人证件号码
  // 
  // 
  borrowerCardNo: string(name='borrower_card_no'),
  // 融资金额
  // 
  // 
  financingAmount: string(name='financing_amount'),
  // 支用币种
  // 
  // 
  currency: string(name='currency'),
  // 贷款期限（月）
  loanTerm: string(name='loan_term'),
  // 收款方开户行总行联行号
  // 
  // 
  payeeBankUnionNumber: string(name='payee_bank_union_number'),
  // 收款方开户行名称
  // 
  // 
  payeeBankName: string(name='payee_bank_name'),
  // 收款方户名
  // 
  // 
  payeeName: string(name='payee_name'),
  // 收款方银行卡账号
  // 
  // 
  payeeBankNo: string(name='payee_bank_no'),
  // 收款人证件类型
  // 
  // 
  payeeCardType?: string(name='payee_card_type'),
  // 收款人证件号码
  // 
  // 
  payeeCardNo?: string(name='payee_card_no'),
  // 贷款用途
  // 
  // 
  purpose: string(name='purpose'),
  // 附言
  postscript?: string(name='postscript'),
}

model ApplyPfConfirmationResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 融资提款确认书 hash	
  // 
  confirmationHash?: string(name='confirmation_hash'),
  // 融资提款确认书 OSSkey
  // 
  // 
  confirmationOssKey?: string(name='confirmation_oss_key'),
  // 贷款起始日期，格式：yyyyMMdd	
  // 
  // 
  loanStartTime?: string(name='loan_start_time'),
  // 贷款到期日期，格式：yyyyMMdd	
  // 
  // 
  loanEndTime?: string(name='loan_end_time'),
  // 还款方式
  // 
  // 
  repayment?: string(name='repayment'),
  // 贷款利率
  etrdLnIntRt?: string(name='etrd_ln_int_rt'),
}

/**
 * Description: 池融资提款确认书申请
 * Summary: 提款确认书申请
 */
async function applyPfConfirmation(request: ApplyPfConfirmationRequest): ApplyPfConfirmationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return applyPfConfirmationEx(request, headers, runtime);
}

/**
 * Description: 池融资提款确认书申请
 * Summary: 提款确认书申请
 */
async function applyPfConfirmationEx(request: ApplyPfConfirmationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ApplyPfConfirmationResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.pf.confirmation.apply', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ApplyPfFinancingqualificationRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 项目标识，可联系对接同学获取
  projectId: string(maxLength=64, name='project_id'),
  // 客户号
  clientNo: string(name='client_no'),
  // 融资主体did
  financingSubjectDid: string(name='financing_subject_did'),
  // 借款人证件类型
  borrowerCardType: string(name='borrower_card_type'),
  // 借款人证件号码
  // 
  // 
  borrowerCardNo: string(name='borrower_card_no'),
}

model ApplyPfFinancingqualificationResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 申请流水号
  aplSeqNo?: string(name='apl_seq_no'),
  // 受理标志
  // 0-受理失败
  // 1-受理成功
  acceptanceFlag?: string(name='acceptance_flag'),
}

/**
 * Description: 池融资融资资格申请
 * Summary: 池融资融资资格申请
 */
async function applyPfFinancingqualification(request: ApplyPfFinancingqualificationRequest): ApplyPfFinancingqualificationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return applyPfFinancingqualificationEx(request, headers, runtime);
}

/**
 * Description: 池融资融资资格申请
 * Summary: 池融资融资资格申请
 */
async function applyPfFinancingqualificationEx(request: ApplyPfFinancingqualificationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ApplyPfFinancingqualificationResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.pf.financingqualification.apply', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryPfFinancingqualificationRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 项目标识，可联系对接同学获取
  projectId: string(maxLength=64, name='project_id'),
  // 客户号
  clientNo: string(name='client_no'),
  // 融资主体did
  financingSubjectDid: string(name='financing_subject_did'),
  // 借款人证件类型
  borrowerCardType: string(name='borrower_card_type'),
  // 借款人证件号码
  // 
  // 
  borrowerCardNo: string(name='borrower_card_no'),
  // 申请流水号
  aplSeqNo: string(name='apl_seq_no'),
}

model QueryPfFinancingqualificationResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 请求号
  aplSeqNo?: string(name='apl_seq_no'),
  // 申请日期
  appDate?: string(name='app_date'),
  // 审批通过时间
  // 
  // 
  approveDate?: string(name='approve_date'),
  // 额度协议文件编号
  // 
  // 
  amntAgrmntFn?: string(name='amnt_agrmnt_fn'),
  // 处理状态
  // A01-审批中
  // A02-审批失败
  // A03-审批通过
  // A04-审批作废
  proceStatus?: string(name='proce_status'),
  // 失败原因
  failRslt?: string(name='fail_rslt'),
  // 错误码
  genReason?: string(name='gen_reason'),
}

/**
 * Description: 池融资融资资格申请结果查询
 * Summary: 池融资融资资格申请结果查询
 */
async function queryPfFinancingqualification(request: QueryPfFinancingqualificationRequest): QueryPfFinancingqualificationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryPfFinancingqualificationEx(request, headers, runtime);
}

/**
 * Description: 池融资融资资格申请结果查询
 * Summary: 池融资融资资格申请结果查询
 */
async function queryPfFinancingqualificationEx(request: QueryPfFinancingqualificationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryPfFinancingqualificationResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.pf.financingqualification.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CallbackPfDefinpfRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 业务类型
  bizType: string(name='biz_type'),
  // 回调内容
  contentInfo: string(name='content_info'),
}

model CallbackPfDefinpfResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 是否成功
  result?: boolean(name='result'),
  // 错误信息
  errorMsg?: string(name='error_msg'),
  // 返回结果
  response?: string(name='response'),
}

/**
 * Description: 池融资主站回调金融云接口
 * Summary: 池融资主站回调金融云接口
 */
async function callbackPfDefinpf(request: CallbackPfDefinpfRequest): CallbackPfDefinpfResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return callbackPfDefinpfEx(request, headers, runtime);
}

/**
 * Description: 池融资主站回调金融云接口
 * Summary: 池融资主站回调金融云接口
 */
async function callbackPfDefinpfEx(request: CallbackPfDefinpfRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CallbackPfDefinpfResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.pf.definpf.callback', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryPfWithdrawRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 银行端客户号
  customerNo: string(maxLength=20, name='customer_no'),
  // 证件类型;050 统一社会信用证代码
  certType: string(maxLength=3, name='cert_type'),
  // 证件号码
  certNo: string(maxLength=20, name='cert_no'),
}

model QueryPfWithdrawResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 银行端客户号
  // 
  customerNo?: string(name='customer_no'),
  // 证件类型;050 统一社会信用证代码
  // 
  certType?: string(name='cert_type'),
  // 证件号码
  certNo?: string(name='cert_no'),
  // 客户完成账单融资申请放款至账户中待提款的金额，保留两位小数（单位：元）
  withdrawalAmount?: string(name='withdrawal_amount'),
  // 数据更新时间
  updateTime?: string(name='update_time'),
}

/**
 * Description: 用于查询可提款额度
 * Summary: 可提款额度查询
 */
async function queryPfWithdraw(request: QueryPfWithdrawRequest): QueryPfWithdrawResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryPfWithdrawEx(request, headers, runtime);
}

/**
 * Description: 用于查询可提款额度
 * Summary: 可提款额度查询
 */
async function queryPfWithdrawEx(request: QueryPfWithdrawRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryPfWithdrawResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.pf.withdraw.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateDidForwarderRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 代理did
  agentDid: string(name='agent_did'),
  // 企业名称
  epCertName: string(name='ep_cert_name'),
  // 企业证件号
  epCertNo: string(name='ep_cert_no'),
  // 扩展字段
  extensionInfo?: string(name='extension_info'),
  // 法人姓名
  legalPersonCertName?: string(name='legal_person_cert_name'),
  // 法人身份证号
  legalPersonCertNo?: string(name='legal_person_cert_no'),
}

model CreateDidForwarderResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 货代did
  did?: string(name='did'),
}

/**
 * Description: 创建货代did
 * Summary: 创建货代did
 */
async function createDidForwarder(request: CreateDidForwarderRequest): CreateDidForwarderResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createDidForwarderEx(request, headers, runtime);
}

/**
 * Description: 创建货代did
 * Summary: 创建货代did
 */
async function createDidForwarderEx(request: CreateDidForwarderRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateDidForwarderResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.did.forwarder.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateDidSaasplatformRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 企业名称
  // 
  epCertName: string(name='ep_cert_name'),
  // 企业证件号
  epCertNo: string(name='ep_cert_no'),
  // 扩展字段
  extensionInfo?: string(name='extension_info'),
  // 法人姓名
  legalPersonCertName: string(name='legal_person_cert_name'),
  // 法人身份证
  legalPersonCertNo: string(name='legal_person_cert_no'),
}

model CreateDidSaasplatformResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // saas平台did
  did?: string(name='did'),
}

/**
 * Description: 创建saas平台did
 * Summary: 创建saas平台did
 */
async function createDidSaasplatform(request: CreateDidSaasplatformRequest): CreateDidSaasplatformResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createDidSaasplatformEx(request, headers, runtime);
}

/**
 * Description: 创建saas平台did
 * Summary: 创建saas平台did
 */
async function createDidSaasplatformEx(request: CreateDidSaasplatformRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateDidSaasplatformResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.did.saasplatform.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateDidClientRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 代理did
  agentDid: string(name='agent_did'),
  // 企业名称
  epCertName: string(name='ep_cert_name'),
  // 企业证件号
  epCertNo: string(name='ep_cert_no'),
  // 扩展字段
  extensionInfo?: string(name='extension_info'),
  // 法人姓名
  legalPersonCertName?: string(name='legal_person_cert_name'),
  // 法人身份证号
  legalPersonCertNo?: string(name='legal_person_cert_no'),
}

model CreateDidClientResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 直客did
  did?: string(name='did'),
}

/**
 * Description: 创建直客did
 * Summary: 创建直客did
 */
async function createDidClient(request: CreateDidClientRequest): CreateDidClientResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createDidClientEx(request, headers, runtime);
}

/**
 * Description: 创建直客did
 * Summary: 创建直客did
 */
async function createDidClientEx(request: CreateDidClientRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateDidClientResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.did.client.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SaveBizOrderRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 操作动作,为空为新增或更新，UPDATE为更新，DELETE为删除
  action?: string(name='action'),
  // 提单要求
  blRequest?: string(name='bl_request'),
  // 订舱单号
  bookingNo?: string(name='booking_no'),
  // 船公司
  carrier?: string(name='carrier'),
  // 客户did  业务必填
  clientDid?: string(name='client_did'),
  // 收货人
  consignee?: string(name='consignee'),
  // 约号
  contract?: string(name='contract'),
  // 报关
  customsClearance?: string(name='customs_clearance'),
  // 目的地 业务必填	
  // 
  deliveryPlace?: string(name='delivery_place'),
  // 运输条款
  deliveryTerms?: string(name='delivery_terms'),
  // 卸货港. 业务必填	
  // 
  dischargePort?: string(name='discharge_port'),
  // 货代did
  forwarderDid: string(name='forwarder_did'),
  // 运费
  freight?: string(name='freight'),
  // 保险
  insurance?: string(name='insurance'),
  // 放单地点
  issuePlace?: string(name='issue_place'),
  // 起运港. 业务必填	
  // 
  loadingPort?: string(name='loading_port'),
  // 裝卸方式
  movement?: string(name='movement'),
  // 通知方
  notifyParty?: string(name='notify_party'),
  // 订单号
  orderNo: string(name='order_no'),
  // 付费方式 业务必填	
  // 
  paymentTerms?: string(name='payment_terms'),
  // 拖车
  pickUp?: string(name='pick_up'),
  // 收货地点
  receiptPlace?: string(name='receipt_place'),
  // 备注
  remark?: string(name='remark'),
  // 发货人
  shipper?: string(name='shipper'),
  // 任务单号
  taskOrder?: string(name='task_order'),
  // 运输方式
  transportation?: string(name='transportation'),
  // 船名
  vessel?: string(name='vessel'),
  // 航次
  voyage?: string(name='voyage'),
}

model SaveBizOrderResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 链上凭证
  txCodes?: [ TxDto ](name='tx_codes'),
}

/**
 * Description: 保存订单
 * Summary: 保存订单
 */
async function saveBizOrder(request: SaveBizOrderRequest): SaveBizOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return saveBizOrderEx(request, headers, runtime);
}

/**
 * Description: 保存订单
 * Summary: 保存订单
 */
async function saveBizOrderEx(request: SaveBizOrderRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SaveBizOrderResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.biz.order.save', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SaveBizConsignorderRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 操作动作,为空为新增或更新，UPDATE为更新，DELETE为删除
  action?: string(name='action'),
  // 托单code
  consignOrderCode: string(name='consign_order_code'),
  // 托单文件hash  业务必填
  fileHash?: string(name='file_hash'),
  // 托单文件id  业务必填
  fileId?: string(name='file_id'),
  // 货代did
  forwarderDid: string(name='forwarder_did'),
  // 订单号
  orderNo: string(name='order_no'),
}

model SaveBizConsignorderResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 链上凭证
  txCodes?: [ TxDto ](name='tx_codes'),
}

/**
 * Description: 保存托单文件
 * Summary: 保存托单文件
 */
async function saveBizConsignorder(request: SaveBizConsignorderRequest): SaveBizConsignorderResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return saveBizConsignorderEx(request, headers, runtime);
}

/**
 * Description: 保存托单文件
 * Summary: 保存托单文件
 */
async function saveBizConsignorderEx(request: SaveBizConsignorderRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SaveBizConsignorderResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.biz.consignorder.save', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SaveBizGoodsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 操作动作,为空为新增或更新，UPDATE为更新，DELETE为删除
  action?: string(name='action'),
  // 预计备货时间 毫秒值单位
  cargoReadyDate?: long(name='cargo_ready_date'),
  // 危险品页号
  dgPageNo?: string(name='dg_page_no'),
  // 危险品级别
  dgType?: string(name='dg_type'),
  // 危险品闪点
  flashPoint?: string(name='flash_point'),
  // 货代did
  forwarderDid: string(name='forwarder_did'),
  // 货物 业务必填	
  // 
  goods?: string(name='goods'),
  // 中文品名
  goodsCn?: string(name='goods_cn'),
  // 货物ID
  goodsId: string(name='goods_id'),
  // 货物类型（业务必填）
  goodsType?: string(name='goods_type'),
  // HS CODE
  hsCodes?: [ string ](name='hs_codes'),
  // 唛头
  marks?: string(name='marks'),
  // 委托件数 业务必填	
  // 
  number?: string(name='number'),
  // 订单号
  orderNo: string(name='order_no'),
  // 包装类型
  packageType?: string(name='package_type'),
  // 实际件数
  realNumber?: string(name='real_number'),
  // 实际体积
  realVolume?: string(name='real_volume'),
  // 实际重量
  realWeight?: string(name='real_weight'),
  // 危险品联合国编号
  unNo?: string(name='un_no'),
  // 委托体积（业务必填）
  volume?: string(name='volume'),
  // 委托重量（业务必填）
  weight?: string(name='weight'),
}

model SaveBizGoodsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 链上凭证
  txCodes?: [ TxDto ](name='tx_codes'),
}

/**
 * Description: 保存货物
 * Summary: 保存货物
 */
async function saveBizGoods(request: SaveBizGoodsRequest): SaveBizGoodsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return saveBizGoodsEx(request, headers, runtime);
}

/**
 * Description: 保存货物
 * Summary: 保存货物
 */
async function saveBizGoodsEx(request: SaveBizGoodsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SaveBizGoodsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.biz.goods.save', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SaveBizSonotifyRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 操作动作,为空为新增或更新，UPDATE为更新，DELETE为删除
  action?: string(name='action'),
  // so通知关联的订舱单 (业务必填)
  bookingParams?: [ SoNotifyBookingParam ](name='booking_params'),
  // 联系人
  contactName?: string(name='contact_name'),
  // 联系方式
  contactType?: string(name='contact_type'),
  // 卸货港 业务必填	
  // 
  dischargePort?: string(name='discharge_port'),
  // 货代did
  forwarderDid: string(name='forwarder_did'),
  // 起运港 业务必填	
  // 
  loadingPort?: string(name='loading_port'),
  // 	
  // 订单号
  orderNo: string(name='order_no'),
  // soNotify 唯一标识code
  soNotifyCode: string(name='so_notify_code'),
}

model SaveBizSonotifyResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 链上凭证
  txCodes?: [ TxDto ](name='tx_codes'),
}

/**
 * Description: 保存SO入货通知
 * Summary: 保存SO入货通知
 */
async function saveBizSonotify(request: SaveBizSonotifyRequest): SaveBizSonotifyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return saveBizSonotifyEx(request, headers, runtime);
}

/**
 * Description: 保存SO入货通知
 * Summary: 保存SO入货通知
 */
async function saveBizSonotifyEx(request: SaveBizSonotifyRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SaveBizSonotifyResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.biz.sonotify.save', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SaveBizBookingorderRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 操作动作,为空为新增或更新，UPDATE为更新，DELETE为删除
  action?: string(name='action'),
  // 订舱单号
  bookingNo: string(name='booking_no'),
  // 船公司 业务必填
  carrier?: string(name='carrier'),
  // 截关时间
  customsClearance?: long(name='customs_clearance'),
  // 场站 业务必填
  cy?: string(name='cy'),
  // 截港时间 毫秒值单位
  cyClosing?: long(name='cy_closing'),
  // 目的地
  deliveryPlace?: string(name='delivery_place'),
  // 卸货港
  dischargePort?: string(name='discharge_port'),
  // 预计船期 毫秒值单位
  etd?: long(name='etd'),
  // 货代did
  forwarderDid: string(name='forwarder_did'),
  // 起运港
  loadingPort?: string(name='loading_port'),
  // 订单号
  orderNo: string(name='order_no'),
  // 截单时间  毫秒值单位
  siClosing?: long(name='si_closing'),
  // 特殊字段无要求非必填
  source?: string(name='source'),
  // 船名 业务必填
  vessel?: string(name='vessel'),
  // 航次 业务必填
  voyage?: string(name='voyage'),
  // 订舱号
  bkgNo: string(name='bkg_no'),
  // 确认时间
  confirmTime?: long(name='confirm_time'),
}

model SaveBizBookingorderResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 链上凭证
  txCodes?: [ TxDto ](name='tx_codes'),
}

/**
 * Description: 保存订舱单
 * Summary: 保存订舱单
 */
async function saveBizBookingorder(request: SaveBizBookingorderRequest): SaveBizBookingorderResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return saveBizBookingorderEx(request, headers, runtime);
}

/**
 * Description: 保存订舱单
 * Summary: 保存订舱单
 */
async function saveBizBookingorderEx(request: SaveBizBookingorderRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SaveBizBookingorderResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.biz.bookingorder.save', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SaveBizContainerRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 操作动作,为空为新增或更新，UPDATE为更新，DELETE为删除
  action?: string(name='action'),
  // 订舱单号
  // 
  bookingNo: string(name='booking_no'),
  // 集装箱ID
  containerId: string(name='container_id'),
  // 箱号 业务必填
  containerNo?: string(name='container_no'),
  //  箱型  业务必填
  containerType?: string(name='container_type'),
  // 货代did
  forwarderDid: string(name='forwarder_did'),
  // 货物列表
  goodsList?: [ ContainerGoodsParam ](name='goods_list'),
  // 订单号
  orderNo: string(name='order_no'),
  // 备注
  remark?: string(name='remark'),
  // 封铅号
  sealNo?: string(name='seal_no'),
  // 是否SOC
  socFlag?: string(name='soc_flag'),
  // 特殊字段无要求非必填
  source?: string(name='source'),
}

model SaveBizContainerResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 链上凭证
  txCodes?: [ TxDto ](name='tx_codes'),
}

/**
 * Description: 保存集装箱
 * Summary: 保存集装箱
 */
async function saveBizContainer(request: SaveBizContainerRequest): SaveBizContainerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return saveBizContainerEx(request, headers, runtime);
}

/**
 * Description: 保存集装箱
 * Summary: 保存集装箱
 */
async function saveBizContainerEx(request: SaveBizContainerRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SaveBizContainerResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.biz.container.save', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SaveBizCustomsorderRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 操作动作,为空为新增或更新，UPDATE为更新，DELETE为删除
  action?: string(name='action'),
  // 订舱单号
  bookingParams?: [ CustomsOrderBookingParam ](name='booking_params'),
  // 报关代理
  broker?: string(name='broker'),
  // 集装箱ID
  containerId?: string(name='container_id'),
  // 箱号
  containerNo?: string(name='container_no'),
  // 报关单号
  customsCode: string(name='customs_code'),
  //  出口人
  exporter?: string(name='exporter'),
  // 货代did
  // 
  forwarderDid: string(name='forwarder_did'),
  // 货物名称
  goods?: string(name='goods'),
  // 毛重 
  grossWeight?: string(name='gross_weight'),
  // 订单号
  // 
  orderNo: string(name='order_no'),
  // 件数
  packagesNo?: string(name='packages_no'),
  // 报关状态  APPROVED--通关，UNAPPROVED-未通关
  status?: string(name='status'),
  // 航名 业务必填
  vessel: string(name='vessel'),
  // 航次 业务必填
  voyage?: string(name='voyage'),
}

model SaveBizCustomsorderResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 链上凭证
  txCodes?: [ TxDto ](name='tx_codes'),
}

/**
 * Description: 保存报关单
 * Summary: 保存报关单
 */
async function saveBizCustomsorder(request: SaveBizCustomsorderRequest): SaveBizCustomsorderResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return saveBizCustomsorderEx(request, headers, runtime);
}

/**
 * Description: 保存报关单
 * Summary: 保存报关单
 */
async function saveBizCustomsorderEx(request: SaveBizCustomsorderRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SaveBizCustomsorderResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.biz.customsorder.save', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SaveBizVehicleRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 操作动作,为空为新增或更新，UPDATE为更新，DELETE为删除
  action?: string(name='action'),
  // 箱子信息 业务必填
  containerParams?: [ VehicleContainerParam ](name='container_params'),
  // 货代did
  forwarderDid: string(name='forwarder_did'),
  // 订单号
  orderNo: string(name='order_no'),
  // 拖车单号
  vehicleCode: string(name='vehicle_code'),
  // 车牌号 
  vehicleNo?: string(name='vehicle_no'),
}

model SaveBizVehicleResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 链上凭证
  txCodes?: [ TxDto ](name='tx_codes'),
}

/**
 * Description: 保存拖车单
 * Summary: 保存拖车单
 */
async function saveBizVehicle(request: SaveBizVehicleRequest): SaveBizVehicleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return saveBizVehicleEx(request, headers, runtime);
}

/**
 * Description: 保存拖车单
 * Summary: 保存拖车单
 */
async function saveBizVehicleEx(request: SaveBizVehicleRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SaveBizVehicleResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.biz.vehicle.save', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SaveBizMasterblRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 操作动作,为空为新增或更新，UPDATE为更新，DELETE为删除
  action?: string(name='action'),
  // 订舱单
  blBookingParams?: [ MasterBlBookingParam ](name='bl_booking_params'),
  // 提单要求 
  blRequest?: string(name='bl_request'),
  // 提单类型
  blType?: string(name='bl_type'),
  // 船公司 业务必填
  carrier?: string(name='carrier'),
  // 收货人 业务必填	
  // 
  consignee?: string(name='consignee'),
  // 集装箱列表 业务必填	
  // 
  containerParams?: [ MasterBlContainerParam ](name='container_params'),
  // 约号
  contract?: string(name='contract'),
  // 目的地. 业务必填	
  // 
  deliveryPlace?: string(name='delivery_place'),
  // 运输条款
  deliveryTerms?: string(name='delivery_terms'),
  // 卸货港. 业务必填	
  // 
  dischargePort?: string(name='discharge_port'),
  // 	
  // 货代did
  forwarderDid: string(name='forwarder_did'),
  // 运费/约号
  freight?: string(name='freight'),
  // 货物列表. 业务必填	
  // 
  goodsParams?: [ MasterBlGoodsParam ](name='goods_params'),
  // 出单日期
  issueDate?: long(name='issue_date'),
  // 放单地点
  issuePlace?: string(name='issue_place'),
  // 起运港  业务必填	
  // 
  loadingPort?: string(name='loading_port'),
  // master提单号
  masterBlNo: string(name='master_bl_no'),
  // 裝卸方式
  movement?: string(name='movement'),
  // 通知方 
  notifyParty?: string(name='notify_party'),
  // 开船日期
  onBoardDate?: long(name='on_board_date'),
  // 船状态
  onBoardStatus?: string(name='on_board_status'),
  // 	
  // 订单号
  orderNo: string(name='order_no'),
  // 付费方式  业务必填	
  // 
  paymentTerms?: string(name='payment_terms'),
  // 前程运输
  prCarriage?: string(name='pr_carriage'),
  // 其他
  remark?: string(name='remark'),
  //  发货人. 业务必填	
  // 
  shipper?: string(name='shipper'),
  // 特殊字段无要求非必填
  source?: string(name='source'),
  // 运输方式
  transportation?: string(name='transportation'),
  // 航名 业务必填
  vessel?: string(name='vessel'),
  // 航次 业务必填
  voyage?: string(name='voyage'),
}

model SaveBizMasterblResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 链上凭证
  txCodes?: [ TxDto ](name='tx_codes'),
}

/**
 * Description: 保存master提单
 * Summary: 保存master提单
 */
async function saveBizMasterbl(request: SaveBizMasterblRequest): SaveBizMasterblResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return saveBizMasterblEx(request, headers, runtime);
}

/**
 * Description: 保存master提单
 * Summary: 保存master提单
 */
async function saveBizMasterblEx(request: SaveBizMasterblRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SaveBizMasterblResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.biz.masterbl.save', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model FinishBizAuditRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 	
  // 货代did
  forwarderDid: string(name='forwarder_did'),
  // 	
  // 订单号
  orderNo: string(name='order_no'),
}

model FinishBizAuditResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 链上凭证
  txCodes?: [ TxDto ](name='tx_codes'),
}

/**
 * Description: 内审完成
 * Summary: 内审完成
 */
async function finishBizAudit(request: FinishBizAuditRequest): FinishBizAuditResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return finishBizAuditEx(request, headers, runtime);
}

/**
 * Description: 内审完成
 * Summary: 内审完成
 */
async function finishBizAuditEx(request: FinishBizAuditRequest, headers: map[string]string, runtime: Util.RuntimeOptions): FinishBizAuditResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.biz.audit.finish', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SaveBizHouseblRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 操作动作,为空为新增或更新，UPDATE为更新，DELETE为删除
  action?: string(name='action'),
  // 订舱单
  blBookingParams?: [ HouseBlBookingParam ](name='bl_booking_params'),
  // 提单签发单位
  blIssuingAgency?: string(name='bl_issuing_agency'),
  // 提单要求
  blRequest?: string(name='bl_request'),
  // 提单类型
  blType?: string(name='bl_type'),
  // 船公司 业务必填
  carrier?: string(name='carrier'),
  // 收货人 业务必填	
  // 
  consignee?: string(name='consignee'),
  // 集装箱列表 业务必填	
  // 
  containerParams?: [ HouseBlContainerParam ](name='container_params'),
  // 约号
  contract?: string(name='contract'),
  // 目的地  业务必填	
  // 
  deliveryPlace?: string(name='delivery_place'),
  // 运输条款
  deliveryTerms?: string(name='delivery_terms'),
  // 卸货港 业务必填	
  // 
  dischargePort?: string(name='discharge_port'),
  // 货代did
  forwarderDid: string(name='forwarder_did'),
  // 运费
  freight?: string(name='freight'),
  // 货物列表 业务必填	
  // 
  goodsParams?: [ HouseBlGoodsParam ](name='goods_params'),
  // house提单号
  houseBlNo: string(name='house_bl_no'),
  // 出单日期 
  issueDate?: long(name='issue_date'),
  // 放单地点
  issuePlace?: string(name='issue_place'),
  // 起运港 业务必填	
  // 
  loadingPort?: string(name='loading_port'),
  // master提单号
  masterBlNo?: string(name='master_bl_no'),
  // 裝卸方式 
  movement?: string(name='movement'),
  // 通知方
  notifyParty?: string(name='notify_party'),
  // 开船日期
  onBoardDate?: long(name='on_board_date'),
  // 订单号
  orderNo: string(name='order_no'),
  // 付费方式 业务必填	
  // 
  paymentTerms?: string(name='payment_terms'),
  // 其他
  remark?: string(name='remark'),
  // 发货人 业务必填	
  // 
  shipper?: string(name='shipper'),
  // 运输方式
  transportation?: string(name='transportation'),
  // 航名 业务必填
  vessel?: string(name='vessel'),
  // 航次 业务必填
  voyage?: string(name='voyage'),
}

model SaveBizHouseblResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 链上凭证
  txCodes?: [ TxDto ](name='tx_codes'),
}

/**
 * Description: 保存house提单
 * Summary: 保存house提单
 */
async function saveBizHousebl(request: SaveBizHouseblRequest): SaveBizHouseblResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return saveBizHouseblEx(request, headers, runtime);
}

/**
 * Description: 保存house提单
 * Summary: 保存house提单
 */
async function saveBizHouseblEx(request: SaveBizHouseblRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SaveBizHouseblResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.biz.housebl.save', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateBillPaybillorderRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 申请时间
  applyDate?: long(name='apply_date'),
  // 银行收款账户
  bankReceiptAccount?: string(name='bank_receipt_account'),
  // 币种
  currency?: string(name='currency'),
  // 开户行
  depositBank?: string(name='deposit_bank'),
  // 货代did
  forwarderDid: string(name='forwarder_did'),
  // 应付总额
  payAmount?: string(name='pay_amount'),
  // 付款单编号
  payBillOrderCode: string(name='pay_bill_order_code'),
  // 应付账单资费项 业务必填
  payBillTariffParams?: [ PayBillTariffParam ](name='pay_bill_tariff_params'),
  // 付款公司
  payCompany?: string(name='pay_company'),
  // 付款公司企业信用号
  // 
  payCompanyCertNo?: string(name='pay_company_cert_no'),
  // 付款公司did
  payCompanyDid?: string(name='pay_company_did'),
  // 付款期限
  payDeadline?: string(name='pay_deadline'),
  // 收款客户
  receiptClient?: string(name='receipt_client'),
  // 收款客户企业信用号
  // 
  receiptClientCertNo?: string(name='receipt_client_cert_no'),
  // 收款客户did
  receiptClientDid?: string(name='receipt_client_did'),
  // 对应应收资费项code
  receiptTariffCodes?: [ string ](name='receipt_tariff_codes'),
  // 结算公司
  settleCompany?: string(name='settle_company'),
  // 结算公司企业信用号
  // 
  settleCompanyCertNo?: string(name='settle_company_cert_no'),
  // 结算公司did
  settleCompanyDid?: string(name='settle_company_did'),
  // 账单结算周期
  settleCycle?: string(name='settle_cycle'),
}

model CreateBillPaybillorderResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 链上凭证hash
  txCodes?: [ TxDto ](name='tx_codes'),
}

/**
 * Description: 创建应付账单
 * Summary: 创建应付账单(已下)
 */
async function createBillPaybillorder(request: CreateBillPaybillorderRequest): CreateBillPaybillorderResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createBillPaybillorderEx(request, headers, runtime);
}

/**
 * Description: 创建应付账单
 * Summary: 创建应付账单(已下)
 */
async function createBillPaybillorderEx(request: CreateBillPaybillorderRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateBillPaybillorderResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.bill.paybillorder.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateBillReceiptbillorderRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 实际收款结算公司
  actualSettleCompany?: string(name='actual_settle_company'),
  // 实际收款结算公司企业信用号
  actualSettleCompanyCertNo?: string(name='actual_settle_company_cert_no'),
  // 实际收款结算公司did
  actualSettleCompanyDid?: string(name='actual_settle_company_did'),
  // 确认时间  业务必填
  applyDate?: long(name='apply_date'),
  // 揽货类型
  clientType?: string(name='client_type'),
  // 币种 业务必填
  currency?: string(name='currency'),
  // 货代did
  forwarderDid: string(name='forwarder_did'),
  // 开票抬头
  invoiceTitle?: string(name='invoice_title'),
  // 含税价
  priceIncludingTax?: string(name='price_including_tax'),
  // 收款账号
  receiptAccount?: string(name='receipt_account'),
  // 收款总额 业务必填
  receiptAmount?: string(name='receipt_amount'),
  // 收款账单编号
  receiptBillOrderCode: string(name='receipt_bill_order_code'),
  // 应收资费项账单 业务必填
  receiptBillTariffParams?: [ ReceiptBillTariffParam ](name='receipt_bill_tariff_params'),
  // 结算客户名称
  settleClient?: string(name='settle_client'),
  // 结算客户企业信用号
  settleClientCertNo?: string(name='settle_client_cert_no'),
  // 结算客户名称did
  settleClientDid?: string(name='settle_client_did'),
  // 结算公司
  settleCompany?: string(name='settle_company'),
  // 结算公司企业信用号
  settleCompanyCertNo?: string(name='settle_company_cert_no'),
  // 结算公司did
  settleCompanyDid?: string(name='settle_company_did'),
  // 账单结算周期
  settleCycle?: string(name='settle_cycle'),
  // 税金
  taxes?: string(name='taxes'),
  // 未税价
  untaxedPrice?: string(name='untaxed_price'),
}

model CreateBillReceiptbillorderResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 链上凭证
  txCodes?: [ TxDto ](name='tx_codes'),
}

/**
 * Description: 创建应收账单
 * Summary: 创建应收账单(已下)
 */
async function createBillReceiptbillorder(request: CreateBillReceiptbillorderRequest): CreateBillReceiptbillorderResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createBillReceiptbillorderEx(request, headers, runtime);
}

/**
 * Description: 创建应收账单
 * Summary: 创建应收账单(已下)
 */
async function createBillReceiptbillorderEx(request: CreateBillReceiptbillorderRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateBillReceiptbillorderResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.bill.receiptbillorder.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SaveBillPaybilltariffRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 操作动作,为空为新增或更新，UPDATE为更新，DELETE为删除
  action?: string(name='action'),
  // 计费数量 业务必填
  billingNumber?: string(name='billing_number'),
  // 计费类型 业务必填
  billingType?: string(name='billing_type'),
  // 航运订舱号[业务必填]
  bkgNo?: string(name='bkg_no'),
  // 订舱单号[业务必填]
  bookingNo?: string(name='booking_no'),
  // 币种 业务必填
  currency?: string(name='currency'),
  // 货代did
  forwarderDid: string(name='forwarder_did'),
  // 收支  INCOME--收入， EXPENSES--支出
  // 业务必填
  incomeOrExpenses?: string(name='income_or_expenses'),
  // 电子发票网址
  invoiceUrl?: string(name='invoice_url'),
  // 工作单号 业务必填
  orderNo?: string(name='order_no'),
  // 资费单据编号
  payTariffCode: string(name='pay_tariff_code'),
  // 资费项中文描述 业务必填
  payTariffDesc?: string(name='pay_tariff_desc'),
  // 资费项目 业务必填
  payTariffProject?: string(name='pay_tariff_project'),
  // 含税价 业务必填
  priceIncludingTax?: string(name='price_including_tax'),
  // 结算客户名称
  settleClient?: string(name='settle_client'),
  // 结算客户企业信用号
  settleClientCertNo?: string(name='settle_client_cert_no'),
  // 结算客户did
  settleClientDid?: string(name='settle_client_did'),
  // 税金
  taxes?: string(name='taxes'),
  // 未税价 业务必填
  untaxedPrice?: string(name='untaxed_price'),
  // 确认时间
  confirmTime?: long(name='confirm_time'),
}

model SaveBillPaybilltariffResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 链上凭证
  txCodes?: [ TxDto ](name='tx_codes'),
}

/**
 * Description: 保存应付资费项
 * Summary: 保存应付资费项
 */
async function saveBillPaybilltariff(request: SaveBillPaybilltariffRequest): SaveBillPaybilltariffResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return saveBillPaybilltariffEx(request, headers, runtime);
}

/**
 * Description: 保存应付资费项
 * Summary: 保存应付资费项
 */
async function saveBillPaybilltariffEx(request: SaveBillPaybilltariffRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SaveBillPaybilltariffResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.bill.paybilltariff.save', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SaveBillReceiptbilltariffRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 操作动作,为空为新增或更新，UPDATE为更新，DELETE为删除
  action?: string(name='action'),
  // 计费数量  业务必填
  billingNumber?: string(name='billing_number'),
  // 计费类型 业务必填
  billingType?: string(name='billing_type'),
  // 航运订舱号[业务必填]
  bkgNo?: string(name='bkg_no'),
  // 订舱单号[业务必填]
  bookingNo?: string(name='booking_no'),
  // 币种 [业务必填]
  currency?: string(name='currency'),
  // 货代did
  forwarderDid: string(name='forwarder_did'),
  // 收支  INCOME--收入， EXPENSES--支出
  // 业务必填
  incomeOrExpenses?: string(name='income_or_expenses'),
  // 电子发票网址
  invoiceUrl?: string(name='invoice_url'),
  // 工作单号 业务必填
  orderNo?: string(name='order_no'),
  // 含税价 业务必填
  priceIncludingTax?: string(name='price_including_tax'),
  // 资费单据编号
  receiptTariffCode: string(name='receipt_tariff_code'),
  // 中文描述 业务必填
  receiptTariffDesc?: string(name='receipt_tariff_desc'),
  // 资费项目 业务必填
  receiptTariffProject?: string(name='receipt_tariff_project'),
  // 结算客户名称
  settleClient?: string(name='settle_client'),
  // 结算客户企业信用号
  settleClientCertNo?: string(name='settle_client_cert_no'),
  // 结算客户did
  settleClientDid?: string(name='settle_client_did'),
  // 税金
  taxes?: string(name='taxes'),
  // 未税价 业务必填
  untaxedPrice?: string(name='untaxed_price'),
  // 确认时间
  confirmTime?: long(name='confirm_time'),
}

model SaveBillReceiptbilltariffResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 链上凭证
  txCodes?: [ TxDto ](name='tx_codes'),
}

/**
 * Description: 保存应收资费项
 * Summary: 保存应收资费项
 */
async function saveBillReceiptbilltariff(request: SaveBillReceiptbilltariffRequest): SaveBillReceiptbilltariffResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return saveBillReceiptbilltariffEx(request, headers, runtime);
}

/**
 * Description: 保存应收资费项
 * Summary: 保存应收资费项
 */
async function saveBillReceiptbilltariffEx(request: SaveBillReceiptbilltariffRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SaveBillReceiptbilltariffResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.bill.receiptbilltariff.save', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model VerifyBillPaybillRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 操作动作,为空为新增或更新，UPDATE为更新，DELETE为删除
  action?: string(name='action'),
  // 货代did
  forwarderDid: string(name='forwarder_did'),
  // 应付资费项编号
  payTariffCode: string(name='pay_tariff_code'),
  // 核销金额 业务必填
  verifyAmount?: string(name='verify_amount'),
  // 核销应付资费项编号
  verifyPayTariffCode: string(name='verify_pay_tariff_code'),
  // 核销状态 WAIT_VERIFY-待核销，PART_VERIFY-部分核销，COMPLETE_VERIFY-完成核销 
  // 业务必填
  verifyStatus?: string(name='verify_status'),
}

model VerifyBillPaybillResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 链上凭证
  txCodes?: [ TxDto ](name='tx_codes'),
}

/**
 * Description: 核销应付资费项
 * Summary: 核销应付资费项
 */
async function verifyBillPaybill(request: VerifyBillPaybillRequest): VerifyBillPaybillResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return verifyBillPaybillEx(request, headers, runtime);
}

/**
 * Description: 核销应付资费项
 * Summary: 核销应付资费项
 */
async function verifyBillPaybillEx(request: VerifyBillPaybillRequest, headers: map[string]string, runtime: Util.RuntimeOptions): VerifyBillPaybillResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.bill.paybill.verify', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model VerifyBillReceiptbillorderRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 操作动作,为空为新增或更新，UPDATE为更新，DELETE为删除
  action?: string(name='action'),
  // 货代did
  forwarderDid: string(name='forwarder_did'),
  // 应收资费项编号
  receiptTariffCode: string(name='receipt_tariff_code'),
  // 核销金额 业务必填
  verifyAmount?: string(name='verify_amount'),
  // 核销应收资费项编号
  verifyReceiptTariffCode: string(name='verify_receipt_tariff_code'),
  // 核销状态 WAIT_VERIFY-待核销，PART_VERIFY-部分核销，COMPLETE_VERIFY-完成核销 业务必填
  verifyStatus?: string(name='verify_status'),
}

model VerifyBillReceiptbillorderResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 链上凭证
  txCodes?: [ TxDto ](name='tx_codes'),
}

/**
 * Description: 核销应收资费项
 * Summary: 核销应收资费项
 */
async function verifyBillReceiptbillorder(request: VerifyBillReceiptbillorderRequest): VerifyBillReceiptbillorderResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return verifyBillReceiptbillorderEx(request, headers, runtime);
}

/**
 * Description: 核销应收资费项
 * Summary: 核销应收资费项
 */
async function verifyBillReceiptbillorderEx(request: VerifyBillReceiptbillorderRequest, headers: map[string]string, runtime: Util.RuntimeOptions): VerifyBillReceiptbillorderResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.bill.receiptbillorder.verify', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateBillPaybillorderRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 操作动作,为空为新增或更新，UPDATE为更新，DELETE为删除	
  // 
  action?: string(name='action'),
  // 申请时间 毫秒值 业务必填
  applyDate?: long(name='apply_date'),
  // 银行收款账户
  bankReceiptAccount?: string(name='bank_receipt_account'),
  // 币种 业务必填
  currency?: string(name='currency'),
  // 开户行
  depositBank?: string(name='deposit_bank'),
  // 账单到期日
  expireDate?: long(name='expire_date'),
  // 货代did
  forwarderDid: string(name='forwarder_did'),
  // 应付总额 业务必填
  payAmount?: string(name='pay_amount'),
  // 付款单编号
  payBillOrderCode: string(name='pay_bill_order_code'),
  // 应付账单资费项 业务必填
  payBillTariffParams?: [ PayBillTariffParam ](name='pay_bill_tariff_params'),
  // 付款公司
  payCompany?: string(name='pay_company'),
  // 付款公司企业信用号
  payCompanyCertNo?: string(name='pay_company_cert_no'),
  // 付款公司did
  payCompanyDid?: string(name='pay_company_did'),
  // 付款期限
  payDeadline?: string(name='pay_deadline'),
  // 收款客户[业务必填]
  receiptClient?: string(name='receipt_client'),
  // 收款客户企业信用号[业务必填]
  receiptClientCertNo?: string(name='receipt_client_cert_no'),
  // 收款客户did[业务必填]
  receiptClientDid?: string(name='receipt_client_did'),
  // 对应应收资费项code
  receiptTariffCodes?: [ string ](name='receipt_tariff_codes'),
  // 结算公司
  settleCompany?: string(name='settle_company'),
  // 结算公司企业信用号
  settleCompanyCertNo?: string(name='settle_company_cert_no'),
  // 结算公司did [业务必填]
  settleCompanyDid?: string(name='settle_company_did'),
  // 账单结算周期
  settleCycle?: string(name='settle_cycle'),
  // 结算状态 ：  SETTLED(已结算) ,  UNSETTLE（未结算）[业务必填]
  settleStatus?: string(name='settle_status'),
  // 确认时间
  confirmTime?: long(name='confirm_time'),
}

model UpdateBillPaybillorderResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 链上凭证
  txCodes?: [ TxDto ](name='tx_codes'),
}

/**
 * Description: 更新应付账单
 * Summary: 更新应付账单
 */
async function updateBillPaybillorder(request: UpdateBillPaybillorderRequest): UpdateBillPaybillorderResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateBillPaybillorderEx(request, headers, runtime);
}

/**
 * Description: 更新应付账单
 * Summary: 更新应付账单
 */
async function updateBillPaybillorderEx(request: UpdateBillPaybillorderRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateBillPaybillorderResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.bill.paybillorder.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateBillReceiptbillorderRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 操作动作,为空为新增或更新，UPDATE为更新，DELETE为删除	
  action?: string(name='action'),
  // 实际收款结算公司
  actualSettleCompany?: string(name='actual_settle_company'),
  // 实际收款结算公司企业信用号
  actualSettleCompanyCertNo?: string(name='actual_settle_company_cert_no'),
  // 实际收款结算公司did [业务必填]
  actualSettleCompanyDid?: string(name='actual_settle_company_did'),
  // 确认时间
  applyDate?: long(name='apply_date'),
  // 揽货类型
  clientType?: string(name='client_type'),
  // 币种
  currency?: string(name='currency'),
  // 账单到期日
  expireDate?: long(name='expire_date'),
  // 货代did
  forwarderDid: string(name='forwarder_did'),
  // 开票抬头
  invoiceTitle?: string(name='invoice_title'),
  // 含税价
  priceIncludingTax?: string(name='price_including_tax'),
  // 收款账号
  receiptAccount?: string(name='receipt_account'),
  // 收款总额
  receiptAmount?: string(name='receipt_amount'),
  // 收款账单编号
  receiptBillOrderCode: string(name='receipt_bill_order_code'),
  // 应收资费项账单 业务必填
  receiptBillTariffParams?: [ ReceiptBillTariffParam ](name='receipt_bill_tariff_params'),
  // 结算客户名称
  settleClient?: string(name='settle_client'),
  // 结算客户名称企业信用号
  settleClientCertNo?: string(name='settle_client_cert_no'),
  // 结算客户did
  settleClientDid?: string(name='settle_client_did'),
  // 结算公司 [业务必填]
  settleCompany?: string(name='settle_company'),
  // 结算公司企业信用号[业务必填]
  settleCompanyCertNo?: string(name='settle_company_cert_no'),
  // 结算公司did[业务必填]
  settleCompanyDid?: string(name='settle_company_did'),
  // 账单结算周期
  settleCycle?: string(name='settle_cycle'),
  // SETTLED(已结算) UNSETTLE（未结算）[业务必填]
  settleStatus?: string(name='settle_status'),
  // 税金
  taxes?: string(name='taxes'),
  // 未税价
  untaxedPrice?: string(name='untaxed_price'),
  // 确认时间
  confirmTime?: long(name='confirm_time'),
}

model UpdateBillReceiptbillorderResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 链上凭证
  txCodes?: [ TxDto ](name='tx_codes'),
}

/**
 * Description: 更新应收账单
 * Summary: 更新应收账单
 */
async function updateBillReceiptbillorder(request: UpdateBillReceiptbillorderRequest): UpdateBillReceiptbillorderResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateBillReceiptbillorderEx(request, headers, runtime);
}

/**
 * Description: 更新应收账单
 * Summary: 更新应收账单
 */
async function updateBillReceiptbillorderEx(request: UpdateBillReceiptbillorderRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateBillReceiptbillorderResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.bill.receiptbillorder.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SaveBillPayinvoiceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 操作动作,为空为新增或更新，UPDATE为更新，DELETE为删除
  action?: string(name='action'),
  // 总金额 业务必填
  amount?: string(name='amount'),
  // 校验码后六位
  checkCode?: string(name='check_code'),
  // 币种 CNY/USD [业务必填]
  currency?: string(name='currency'),
  // 美元金额
  dollarAmount?: string(name='dollar_amount'),
  // 开票方名称  业务必填
  drawerName?: string(name='drawer_name'),
  // 开票纳税人识别号 业务必填
  drawerTaxpayerCode?: string(name='drawer_taxpayer_code'),
  // 货代did
  forwarderDid: string(name='forwarder_did'),
  // 发票唯一标识
  invoiceCode: string(name='invoice_code'),
  // 发票抬头did[业务必填]
  invoiceHeaderDid?: string(name='invoice_header_did'),
  // 发票抬头企业名称[业务必填]
  invoiceHeaderName?: string(name='invoice_header_name'),
  // 发票抬头企业信用代码[业务必填]
  invoiceHeaderSocialNo?: string(name='invoice_header_social_no'),
  // 发票号码 业务必填
  invoiceNumber?: string(name='invoice_number'),
  // 发票税务号
  invoiceTaxCode?: string(name='invoice_tax_code'),
  // 开票类型 业务必填
  invoiceType?: string(name='invoice_type'),
  // 开票日期 业务必填
  makeInvoiceDate?: long(name='make_invoice_date'),
  // 账单关联项目
  payBillInvoiceParams?: [ PayBillInvoiceParam ](name='pay_bill_invoice_params'),
  // 资费项发票 业务必填
  payTariffInvoiceParams?: [ PayTariffInvoiceParam ](name='pay_tariff_invoice_params'),
  // 不含税金额 业务必填
  untaxedPrice?: string(name='untaxed_price'),
}

model SaveBillPayinvoiceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 链上凭证
  txCodes?: [ TxDto ](name='tx_codes'),
}

/**
 * Description: 保存应付发票
 * Summary: 保存应付发票
 */
async function saveBillPayinvoice(request: SaveBillPayinvoiceRequest): SaveBillPayinvoiceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return saveBillPayinvoiceEx(request, headers, runtime);
}

/**
 * Description: 保存应付发票
 * Summary: 保存应付发票
 */
async function saveBillPayinvoiceEx(request: SaveBillPayinvoiceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SaveBillPayinvoiceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.bill.payinvoice.save', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SaveBillReceiptinvoiceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 操作动作,为空为新增或更新，UPDATE为更新，DELETE为删除
  action?: string(name='action'),
  // 总金额 业务必填
  amount?: string(name='amount'),
  // 校验码后六位
  checkCode?: string(name='check_code'),
  // 开票方名称 业务必填
  drawerName?: string(name='drawer_name'),
  // 开票纳税人识别号 业务必填
  drawerTaxpayerCode?: string(name='drawer_taxpayer_code'),
  // 货代did
  forwarderDid: string(name='forwarder_did'),
  // 应收发票唯一标识
  invoiceCode: string(name='invoice_code'),
  // 发票号码 业务必填
  invoiceNumber?: string(name='invoice_number'),
  // 开票类型 业务必填
  invoiceType?: string(name='invoice_type'),
  // 开票日期 毫秒值 业务必填
  makeInvoiceDate?: long(name='make_invoice_date'),
  // 资费项发票 业务必填
  receiptTariffInvoiceParams?: [ ReceiptTariffInvoiceParam ](name='receipt_tariff_invoice_params'),
  // 不含税金额 业务必填
  untaxedPrice?: string(name='untaxed_price'),
  // 发票税务号
  invoiceTaxCode?: string(name='invoice_tax_code'),
}

model SaveBillReceiptinvoiceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 链上凭证
  txCodes?: [ TxDto ](name='tx_codes'),
}

/**
 * Description: 保存应收发票
 * Summary: 保存应收发票
 */
async function saveBillReceiptinvoice(request: SaveBillReceiptinvoiceRequest): SaveBillReceiptinvoiceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return saveBillReceiptinvoiceEx(request, headers, runtime);
}

/**
 * Description: 保存应收发票
 * Summary: 保存应收发票
 */
async function saveBillReceiptinvoiceEx(request: SaveBillReceiptinvoiceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SaveBillReceiptinvoiceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.bill.receiptinvoice.save', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UploadBizFinancingRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 融资数据
  financingData: [ UploadFinancingParam ](name='financing_data'),
}

model UploadBizFinancingResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 上链hash
  txCodes?: [ TxDto ](name='tx_codes'),
}

/**
 * Description: 上传历史数据
 * Summary: 上传历史数据
 */
async function uploadBizFinancing(request: UploadBizFinancingRequest): UploadBizFinancingResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return uploadBizFinancingEx(request, headers, runtime);
}

/**
 * Description: 上传历史数据
 * Summary: 上传历史数据
 */
async function uploadBizFinancingEx(request: UploadBizFinancingRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UploadBizFinancingResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.biz.financing.upload', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UploadBizOrderRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 船公司did
  carrierDid: string(name='carrier_did'),
  // 尾款金额
  deadlineAmount: string(name='deadline_amount'),
  // 货代did
  forwarderDid: string(name='forwarder_did'),
  // 订单总额
  orderAmounts: [ UploadOrderAmount ](name='order_amounts'),
  // 订单booking信息
  orderBookings: [ UploadOrderBooking ](name='order_bookings'),
  // 订单号
  orderNo: string(name='order_no'),
  // 结算did
  settleDid: string(name='settle_did'),
}

model UploadBizOrderResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 上链hash
  txCodes?: [ TxDto ](name='tx_codes'),
}

/**
 * Description: 上传订单
 * Summary: 上传订单
 */
async function uploadBizOrder(request: UploadBizOrderRequest): UploadBizOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return uploadBizOrderEx(request, headers, runtime);
}

/**
 * Description: 上传订单
 * Summary: 上传订单
 */
async function uploadBizOrderEx(request: UploadBizOrderRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UploadBizOrderResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.biz.order.upload', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateDidCarrierRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 代理did
  agentDid: string(name='agent_did'),
  // 企业名称
  epCertName: string(name='ep_cert_name'),
  // 企业证件号
  epCertNo: string(name='ep_cert_no'),
  // 扩展字段
  extensionInfo?: string(name='extension_info'),
  // 法人姓名
  legalPersonCertName?: string(name='legal_person_cert_name'),
  // 法人身份证
  legalPersonCertNo?: string(name='legal_person_cert_no'),
  // 船公司编号
  scac?: string(name='scac'),
}

model CreateDidCarrierResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 船公司did
  did?: string(name='did'),
}

/**
 * Description: 创建船公司did账户
 * Summary: 创建船公司did账户
 */
async function createDidCarrier(request: CreateDidCarrierRequest): CreateDidCarrierResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createDidCarrierEx(request, headers, runtime);
}

/**
 * Description: 创建船公司did账户
 * Summary: 创建船公司did账户
 */
async function createDidCarrierEx(request: CreateDidCarrierRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateDidCarrierResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.did.carrier.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AuthSysForwarderRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 客户端id
  clientId: string(name='client_id'),
  // 密钥
  clientSecret: string(name='client_secret'),
  // 货代did
  intRefId: string(name='int_ref_id'),
  // For HOME application internal
  tenantId: string(name='tenant_id'),
  // 渠道source
  source: string(name='source'),
}

model AuthSysForwarderResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 推送结果
  result?: boolean(name='result'),
}

/**
 * Description:  货代授权
 * Summary:  货代授权
 */
async function authSysForwarder(request: AuthSysForwarderRequest): AuthSysForwarderResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return authSysForwarderEx(request, headers, runtime);
}

/**
 * Description:  货代授权
 * Summary:  货代授权
 */
async function authSysForwarderEx(request: AuthSysForwarderRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AuthSysForwarderResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.sys.forwarder.auth', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryBizMasterblRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 货代did
  forwarderDid: string(name='forwarder_did'),
  // master提单号
  masterBlNo: string(name='master_bl_no'),
}

model QueryBizMasterblResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 船公司
  carrier?: string(name='carrier'),
  // 收货人
  consignee?: string(name='consignee'),
  // 目的地
  deliveryPlace?: string(name='delivery_place'),
  // 卸货港
  dischargePort?: string(name='discharge_port'),
  // 货代did
  forwarderDid?: string(name='forwarder_did'),
  // 运费
  freight?: string(name='freight'),
  // 提单货物数据列表
  goodsDtos?: [ MasterBlGoodsDto ](name='goods_dtos'),
  // 起运港
  loadingPort?: string(name='loading_port'),
  // master提单号
  masterBlNo?: string(name='master_bl_no'),
  // 通知方
  notifyParty?: string(name='notify_party'),
  // 前程运输
  prCarriage?: string(name='pr_carriage'),
  // 发货人
  shipper?: string(name='shipper'),
  // 航名
  vessel?: string(name='vessel'),
  // 航次
  voyage?: string(name='voyage'),
}

/**
 * Description: master提单信息查询
 * Summary: master提单信息查询
 */
async function queryBizMasterbl(request: QueryBizMasterblRequest): QueryBizMasterblResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryBizMasterblEx(request, headers, runtime);
}

/**
 * Description: master提单信息查询
 * Summary: master提单信息查询
 */
async function queryBizMasterblEx(request: QueryBizMasterblRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryBizMasterblResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.biz.masterbl.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SaveBizPayinvoicefileRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 操作动作,为空为新增或更新，UPDATE为更新，DELETE为删除，INSERT为新增
  action?: string(name='action'),
  // 发票文件hash [业务必填]
  fileHash?: string(name='file_hash'),
  // 发票文件ID [业务必填]
  fileId?: string(name='file_id'),
  // 货代DID
  forwarderDid: string(name='forwarder_did'),
  // 应付发票code
  invoiceCode: string(name='invoice_code'),
}

model SaveBizPayinvoicefileResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 链上凭证
  txCodes?: [ TxDto ](name='tx_codes'),
}

/**
 * Description: 应付发票文件上传接口
 * Summary: 应付发票文件上传接口
 */
async function saveBizPayinvoicefile(request: SaveBizPayinvoicefileRequest): SaveBizPayinvoicefileResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return saveBizPayinvoicefileEx(request, headers, runtime);
}

/**
 * Description: 应付发票文件上传接口
 * Summary: 应付发票文件上传接口
 */
async function saveBizPayinvoicefileEx(request: SaveBizPayinvoicefileRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SaveBizPayinvoicefileResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.biz.payinvoicefile.save', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SaveBiznewOrderRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 托运订单号
  orderNo: string(name='order_no'),
  // 托运人did [业务必填]
  consignorDid?: string(name='consignor_did'),
  // 承运人did [业务必填]
  carrierDid?: string(name='carrier_did'),
  // 订舱单号列表
  bookingInfoList?: [ BookingNoInfo ](name='booking_info_list'),
  // 拖车单号
  vehicleCodeList?: [ string ](name='vehicle_code_list'),
  // 报关单号
  customsCodeList?: [ string ](name='customs_code_list'),
  // 订单确认 CREATE/FINISH (创建/确认)  [业务必填]
  status?: string(name='status'),
}

model SaveBiznewOrderResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 链上凭证
  txCodes?: [ TxDto ](name='tx_codes'),
}

/**
 * Description: 托运订单保存接口
 * Summary: 托运订单保存接口
 */
async function saveBiznewOrder(request: SaveBiznewOrderRequest): SaveBiznewOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return saveBiznewOrderEx(request, headers, runtime);
}

/**
 * Description: 托运订单保存接口
 * Summary: 托运订单保存接口
 */
async function saveBiznewOrderEx(request: SaveBiznewOrderRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SaveBiznewOrderResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.biznew.order.save', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SaveBiznewBookingRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 托运订单号
  // 
  // 
  orderNo: string(name='order_no'),
  // 订舱单唯一标识
  bookingNo: string(name='booking_no'),
  // 订舱号 [业务必填]
  bkgNo?: string(name='bkg_no'),
  // 货代did
  forwarderDid: string(name='forwarder_did'),
  // 收货人
  consignee?: string(name='consignee'),
  // 船公司 [业务必填]
  carrier?: string(name='carrier'),
  // 船名 [业务必填]
  vessel?: string(name='vessel'),
  // 航次 [业务必填]
  voyage?: string(name='voyage'),
  // 起运港 [业务必填]
  loadingPort?: string(name='loading_port'),
  // 卸货港 [业务必填]
  dischargePort?: string(name='discharge_port'),
  // 箱型箱量 [业务必填]
  containerTypeInfoList?: [ ContainerTypeInfo ](name='container_type_info_list'),
  // 截关时间（秒时间戳）
  customsClearance?: long(name='customs_clearance'),
  // 截港时间（秒时间戳）
  cyClosing?: long(name='cy_closing'),
  // 截单时间 (秒时间戳)
  siClosing?: long(name='si_closing'),
  // 预计船期（秒时间戳）
  etd?: long(name='etd'),
  // 订舱费总金额 [业务必填]
  bkgTotalAmount?: string(name='bkg_total_amount'),
  // 订舱费金额 [业务必填]
  bkgAmount?: string(name='bkg_amount'),
  // 港杂费金额 [业务必填]
  portCharges?: string(name='port_charges'),
  // 币种 CNY/USD [业务必填]
  // 
  // 
  currency?: string(name='currency'),
  // 订单确认 CREATE/FINISH (创建/确认) [业务必填]
  status?: string(name='status'),
}

model SaveBiznewBookingResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 链上存证
  txCodes?: [ TxDto ](name='tx_codes'),
}

/**
 * Description: 订舱单创建接口
 * Summary: 订舱单创建接口
 */
async function saveBiznewBooking(request: SaveBiznewBookingRequest): SaveBiznewBookingResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return saveBiznewBookingEx(request, headers, runtime);
}

/**
 * Description: 订舱单创建接口
 * Summary: 订舱单创建接口
 */
async function saveBiznewBookingEx(request: SaveBiznewBookingRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SaveBiznewBookingResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.biznew.booking.save', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SaveBiznewVehicleRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 托运订单号
  // 
  // 
  orderNo: string(name='order_no'),
  // 拖车单号
  // 
  // 
  vehicleCode: string(name='vehicle_code'),
  // 货代did
  forwarderDid: string(name='forwarder_did'),
  // 拖车总金额 [业务必填]
  vehicleTotalAmount?: string(name='vehicle_total_amount'),
  // 拖车运费金额 [业务必填]
  vehicleAmount?: string(name='vehicle_amount'),
  // 拖车杂费金额 [业务必填]
  vehicleCharges?: string(name='vehicle_charges'),
  // 币种 [业务必填]
  currency?: string(name='currency'),
  // 箱号箱ID
  // 
  // 
  containerIdInfoList?: [ ContainerIdInfo ](name='container_id_info_list'),
}

model SaveBiznewVehicleResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 链上存证
  txCodes?: [ TxDto ](name='tx_codes'),
}

/**
 * Description: 拖车单保存接口
 * Summary: 拖车单保存接口
 */
async function saveBiznewVehicle(request: SaveBiznewVehicleRequest): SaveBiznewVehicleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return saveBiznewVehicleEx(request, headers, runtime);
}

/**
 * Description: 拖车单保存接口
 * Summary: 拖车单保存接口
 */
async function saveBiznewVehicleEx(request: SaveBiznewVehicleRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SaveBiznewVehicleResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.biznew.vehicle.save', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SaveBiznewCustomsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 托运订单号
  orderNo: string(name='order_no'),
  // 报关单号
  // 
  // 
  customsCode: string(name='customs_code'),
  // 货代did
  forwarderDid: string(name='forwarder_did'),
  // 报关代理
  // 
  // 
  broker?: string(name='broker'),
  // 出口人
  exporter?: string(name='exporter'),
  // 船名 [业务必填]
  vessel?: string(name='vessel'),
  // 航次 [业务必填]
  voyage?: string(name='voyage'),
  // 报关状态
  // APPROVED--通关，UNAPPROVED-未通关
  status?: string(name='status'),
  // 集装箱唯一标识
  containerId?: string(name='container_id'),
  // 箱号
  containerNo?: string(name='container_no'),
  // 货物名称
  goods?: string(name='goods'),
  // 毛重
  grossWeight?: string(name='gross_weight'),
  // 件数
  packagesNo?: string(name='packages_no'),
  // 报关总金额 [业务必填]
  customsTotalAmount?: string(name='customs_total_amount'),
  // 报关运费金额 [业务必填]
  customsAmount?: string(name='customs_amount'),
  // 报关杂费金额 [业务必填]
  customsCharges?: string(name='customs_charges'),
  // 币种 [业务必填]
  currency?: string(name='currency'),
  // 订舱单号列表 [业务必填]
  bookingInfoList?: [ BookingNoInfo ](name='booking_info_list'),
}

model SaveBiznewCustomsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 链上存证
  txCodes?: [ TxDto ](name='tx_codes'),
}

/**
 * Description: 报关单保存接口
 * Summary: 报关单保存接口
 */
async function saveBiznewCustoms(request: SaveBiznewCustomsRequest): SaveBiznewCustomsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return saveBiznewCustomsEx(request, headers, runtime);
}

/**
 * Description: 报关单保存接口
 * Summary: 报关单保存接口
 */
async function saveBiznewCustomsEx(request: SaveBiznewCustomsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SaveBiznewCustomsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.biznew.customs.save', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SaveBiznewMasterRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 托运订单号
  orderNo: string(name='order_no'),
  // master提单号或House提单号
  masterBlNo: string(name='master_bl_no'),
  // 提单类型  master/house  
  // 
  // 
  type: string(name='type'),
  // 提单签发单位 [业务必填]
  // 
  // 
  signUnitName?: string(name='sign_unit_name'),
  // 货代did
  forwarderDid: string(name='forwarder_did'),
  // 发货人 [业务必填]
  shipper?: string(name='shipper'),
  // 出口人 [业务必填]
  // 
  // 
  consignee?: string(name='consignee'),
  // 船公司 [业务必填]
  carrier?: string(name='carrier'),
  // 船名 [业务必填]
  vessel?: string(name='vessel'),
  // 航次 [业务必填]
  voyage?: string(name='voyage'),
  // 起运港 [业务必填]
  loadingPort?: string(name='loading_port'),
  // 卸货港 [业务必填]
  dischargePort?: string(name='discharge_port'),
  // 目的地 [业务必填]
  deliveryPlace?: string(name='delivery_place'),
  // 开船时间 (秒时间戳)
  onBoardDate?: long(name='on_board_date'),
  // 船状态 ATA （已到港） ，ATD （已离港 ），UNATD （未离港）
  onBoardStatus?: string(name='on_board_status'),
  // 订舱单号列表 [业务必填]
  bookingInfoList?: [ BookingNoInfo ](name='booking_info_list'),
  // 集装箱信息 [业务必填]
  containerInfoList?: [ ContainerInfo ](name='container_info_list'),
  // 货物列表
  // 
  // 
  goodsInfoList?: [ GoodsInfo ](name='goods_info_list'),
}

model SaveBiznewMasterResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 链上存证
  txCodes?: [ TxDto ](name='tx_codes'),
}

/**
 * Description: 航运提单保存接口
 * Summary: 航运提单保存接口
 */
async function saveBiznewMaster(request: SaveBiznewMasterRequest): SaveBiznewMasterResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return saveBiznewMasterEx(request, headers, runtime);
}

/**
 * Description: 航运提单保存接口
 * Summary: 航运提单保存接口
 */
async function saveBiznewMasterEx(request: SaveBiznewMasterRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SaveBiznewMasterResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.biznew.master.save', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SaveBiznewPaybillorderRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 应付账单号
  // 
  // 
  payBillOrderCode: string(name='pay_bill_order_code'),
  // 货代did
  forwarderDid: string(name='forwarder_did'),
  // 应付方did [业务必填]
  // 
  // 
  settleCompanyDid?: string(name='settle_company_did'),
  // 收款方did [业务必填]
  // 
  // 
  receiptClientDid?: string(name='receipt_client_did'),
  // 付款金额 [业务必填]
  // 
  // 
  payAmount?: string(name='pay_amount'),
  // 申请时间 （秒时间戳） [业务必填]
  // 
  // 
  applyDate?: long(name='apply_date'),
  // 账单到期时间（秒时间戳） [业务必填]
  expireDate?: long(name='expire_date'),
  // 账单状态  SETTLED 已结算 UNSETTLE 未结算 (业务必填)
  settleStatus?: string(name='settle_status'),
  // 应付资费项 (业务必填)
  payTariffList?: [ PayTariffInfo ](name='pay_tariff_list'),
  // 币种 [业务必填]
  currency?: string(name='currency'),
}

model SaveBiznewPaybillorderResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 链上存证
  txCodes?: [ TxDto ](name='tx_codes'),
}

/**
 * Description: 应付账单保存接口
 * Summary: 应付账单保存接口
 */
async function saveBiznewPaybillorder(request: SaveBiznewPaybillorderRequest): SaveBiznewPaybillorderResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return saveBiznewPaybillorderEx(request, headers, runtime);
}

/**
 * Description: 应付账单保存接口
 * Summary: 应付账单保存接口
 */
async function saveBiznewPaybillorderEx(request: SaveBiznewPaybillorderRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SaveBiznewPaybillorderResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.biznew.paybillorder.save', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SaveBiznewReceiptbillorderRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 应收账单号
  // 
  // 
  receiptBillOrderCode: string(name='receipt_bill_order_code'),
  // 货代did
  forwarderDid: string(name='forwarder_did'),
  // 应付方did [业务必填]
  // 
  // 
  settleCompanyDid?: string(name='settle_company_did'),
  // 收款方did [业务必填]
  // 
  // 
  receiptClientDid?: string(name='receipt_client_did'),
  // 收款金额 [业务必填]
  // 
  // 
  receiptAmount?: string(name='receipt_amount'),
  // 申请时间 (秒时间戳) [业务必填]
  applyDate?: long(name='apply_date'),
  // 账单到期日 (秒时间戳) [业务必填]
  // 
  // 
  expireDate?: long(name='expire_date'),
  // 账单状态  SETTLED 已结算 UNSETTLE 未结算  [业务必填]
  settleStatus?: string(name='settle_status'),
  // 应收资费项 [业务必填]
  // 
  // 
  receiptTariffList?: [ ReceiptTariffInfo ](name='receipt_tariff_list'),
  // 币种 [业务必填]
  currency?: string(name='currency'),
}

model SaveBiznewReceiptbillorderResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 链上存证
  txCodes?: [ TxDto ](name='tx_codes'),
}

/**
 * Description: 应收账单保存接口
 * Summary: 应收账单保存接口
 */
async function saveBiznewReceiptbillorder(request: SaveBiznewReceiptbillorderRequest): SaveBiznewReceiptbillorderResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return saveBiznewReceiptbillorderEx(request, headers, runtime);
}

/**
 * Description: 应收账单保存接口
 * Summary: 应收账单保存接口
 */
async function saveBiznewReceiptbillorderEx(request: SaveBiznewReceiptbillorderRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SaveBiznewReceiptbillorderResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.biznew.receiptbillorder.save', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SaveBiznewInvoiceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 货代did
  forwarderDid: string(name='forwarder_did'),
  // 发票唯一标识
  invoiceCode: string(name='invoice_code'),
  // 发票税务号 [业务必填]
  invoiceTaxCode?: string(name='invoice_tax_code'),
  // 发票号 [业务必填]
  invoiceNumber?: string(name='invoice_number'),
  // 发票类型 [业务必填]
  invoiceType?: string(name='invoice_type'),
  // 开票类型 pay/receipt (应付/应收) [业务必填]
  // 
  // 
  type?: string(name='type'),
  // 校验码
  // 
  // 
  checkCode?: string(name='check_code'),
  // 开票方名称 [业务必填]
  // 
  // 
  drawerName?: string(name='drawer_name'),
  // 开票纳税人识别号 [业务必填]
  // 
  // 
  drawerTaxpayerCode?: string(name='drawer_taxpayer_code'),
  // 受票方企业名称 [业务必填]
  // 
  // 
  invoiceHeaderName?: string(name='invoice_header_name'),
  // 受票方企业信用证代码 [业务必填]
  // 
  // 
  invoiceHeaderSocialNo?: string(name='invoice_header_social_no'),
  // 开票时间 [业务必填]
  // 
  // 
  makeInvoiceDate?: long(name='make_invoice_date'),
  // 发票金额 [业务必填]
  // 
  // 
  amount?: string(name='amount'),
  // 币种 [业务必填]
  currency?: string(name='currency'),
  // 美元 
  dollarAmount?: string(name='dollar_amount'),
  // 不含税金额 [业务必填]
  untaxedPrice?: string(name='untaxed_price'),
  // 发票文件ID [业务必填]
  fileId?: string(name='file_id'),
  // 发票文件hash [业务必填]
  fileHash?: string(name='file_hash'),
}

model SaveBiznewInvoiceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 链上存证
  txCodes?: [ TxDto ](name='tx_codes'),
}

/**
 * Description: 航运发票保存接口
 * Summary: 航运发票保存接口
 */
async function saveBiznewInvoice(request: SaveBiznewInvoiceRequest): SaveBiznewInvoiceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return saveBiznewInvoiceEx(request, headers, runtime);
}

/**
 * Description: 航运发票保存接口
 * Summary: 航运发票保存接口
 */
async function saveBiznewInvoiceEx(request: SaveBiznewInvoiceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SaveBiznewInvoiceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.biznew.invoice.save', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UploadShippingEblRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 船公司名称
  carrierName: string(name='carrier_name'),
  // 收货人did
  consigneeDid: string(name='consignee_did'),
  // 电子提单类型
  eblCategory: string(name='ebl_category'),
  // 电子提单copy文件hash
  eblCopyPdfFileHash: string(name='ebl_copy_pdf_file_hash'),
  // copy电子提单pdf文件id
  eblCopyPdfFileId: string(name='ebl_copy_pdf_file_id'),
  // 电子提单编号
  eblNo: string(name='ebl_no'),
  // 电子甜的原文件hash
  eblOriginalPdfFileHash?: string(name='ebl_original_pdf_file_hash'),
  // 原电子提单pdf文件id
  eblOriginalPdfFileId?: string(name='ebl_original_pdf_file_id'),
  // 议付行did
  negotiatingBankDid: string(name='negotiating_bank_did'),
  // 托运人did
  shipperDid: string(name='shipper_did'),
}

model UploadShippingEblResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 上传电子提单
 * Summary: 上传电子提单
 */
async function uploadShippingEbl(request: UploadShippingEblRequest): UploadShippingEblResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return uploadShippingEblEx(request, headers, runtime);
}

/**
 * Description: 上传电子提单
 * Summary: 上传电子提单
 */
async function uploadShippingEblEx(request: UploadShippingEblRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UploadShippingEblResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.shipping.ebl.upload', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UploadShippingEblbatchRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 代理人did
  agentDid?: string(name='agent_did'),
  // 是否为代理操作
  agentFlag: boolean(name='agent_flag'),
  // 格式：carrierName_yyyyMMddHHmmss_5位随机数字；全局唯一
  batchNo: string(name='batch_no'),
  // 船公司名称
  carrierName: string(name='carrier_name'),
  // 收货人did
  consigneeDid: string(name='consignee_did'),
  // 电子提单类型
  eblCategory: string(name='ebl_category'),
  // 批次下的提单明细
  // 
  // 
  eblDetails: [ EblDetail ](name='ebl_details'),
  // 议付行did
  negotiatingBankDid: string(name='negotiating_bank_did'),
  // 托运人did
  shipperDid: string(name='shipper_did'),
}

model UploadShippingEblbatchResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 电子提单批次上传，一个I批次下传递多个提单
 * Summary: 电子提单批次上传
 */
async function uploadShippingEblbatch(request: UploadShippingEblbatchRequest): UploadShippingEblbatchResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return uploadShippingEblbatchEx(request, headers, runtime);
}

/**
 * Description: 电子提单批次上传，一个I批次下传递多个提单
 * Summary: 电子提单批次上传
 */
async function uploadShippingEblbatchEx(request: UploadShippingEblbatchRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UploadShippingEblbatchResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.shipping.eblbatch.upload', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateShippingEblbatchstatusRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 电子提单批次号
  batchNo: string(name='batch_no'),
  // 批次下的提单状态变更明细
  eblStatusDetails: [ EblStatusDetail ](name='ebl_status_details'),
}

model UpdateShippingEblbatchstatusResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 感知收货人提单状态的变更
 * Summary: 电子提单批次状态变更
 */
async function updateShippingEblbatchstatus(request: UpdateShippingEblbatchstatusRequest): UpdateShippingEblbatchstatusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateShippingEblbatchstatusEx(request, headers, runtime);
}

/**
 * Description: 感知收货人提单状态的变更
 * Summary: 电子提单批次状态变更
 */
async function updateShippingEblbatchstatusEx(request: UpdateShippingEblbatchstatusRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateShippingEblbatchstatusResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'digital.logistic.shipping.eblbatchstatus.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

