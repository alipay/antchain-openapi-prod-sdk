import AntchainUtil;
import Util;
import RPCUtil;

type @endpoint = string
type @regionId = string
type @accessKeyId = string
type @accessKeySecret = string
type @protocol = string
type @userAgent = string
type @readTimeout = number
type @connectTimeout = number
type @httpProxy = string
type @httpsProxy = string
type @socks5Proxy = string
type @socks5NetWork = string
type @noProxy = string
type @maxIdleConns = number
type @securityToken = string
type @maxIdleTimeMillis = number
type @keepAliveDurationMillis = number
type @maxRequests = number
type @maxRequestsPerHost = number

/**
 * Model for initing client
 */
model Config {
  accessKeyId?: string(description='accesskey id',default=''),
  accessKeySecret?: string(description='accesskey secret',default=''),
  securityToken?: string(description='security token',default=''),
  protocol?: string(description='http protocol',example='http',default='http'),
  readTimeout?: number(description='read timeout',example='10',default=''),
  connectTimeout?: number(description='connect timeout',example='10',default=''),
  httpProxy?: string(description='http proxy',example='http://localhost',default=''),
  httpsProxy?: string(description='https proxy',example='https://localhost',default=''),
  endpoint?: string(description='endpoint',example='cs.aliyuncs.com',default=''),
  noProxy?: string(description='proxy white list',example='http://localhost',default=''),
  maxIdleConns?: number(description='max idle conns',example='3',default=''),
  userAgent?: string(description='user agent',example='Alibabacloud/1',default=''),
  socks5Proxy?: string(description='socks5 proxy',default=''),
  socks5NetWork?: string(description='socks5 network',example='TCP',default=''),
  maxIdleTimeMillis?: number(description='长链接最大空闲时长',default='60 * 1000L'),
  keepAliveDurationMillis?: number(description='长链接最大连接时长',default='5000'),
  maxRequests?: number(description='最大连接数（长链接最大总数）',default='100'),
  maxRequestsPerHost?: number(description='每个目标主机的最大连接数（分主机域名的长链接最大总数',default='100'),
}

/**
 * Init client with Config
 * @param config config contains the necessary information to create a client
 */
init(config: Config) {
  if (Util.isUnset(config)) {
    throw {
      code = 'ParameterMissing',
      message = '\'config\' can not be unset'
    };
  }

  @accessKeyId = config.accessKeyId;
  @accessKeySecret = config.accessKeySecret;
  @securityToken = config.securityToken;
  @endpoint = config.endpoint;
  @protocol = config.protocol;
  @userAgent = config.userAgent;
  @readTimeout = Util.defaultNumber(config.readTimeout, 20000);
  @connectTimeout = Util.defaultNumber(config.connectTimeout, 20000);
  @httpProxy = config.httpProxy;
  @httpsProxy = config.httpsProxy;
  @noProxy = config.noProxy;
  @socks5Proxy = config.socks5Proxy;
  @socks5NetWork = config.socks5NetWork;
  @maxIdleConns = Util.defaultNumber(config.maxIdleConns, 60000);
  @maxIdleTimeMillis = Util.defaultNumber(config.maxIdleTimeMillis, 5);
  @keepAliveDurationMillis = Util.defaultNumber(config.keepAliveDurationMillis, 5000);
  @maxRequests = Util.defaultNumber(config.maxRequests, 100);
  @maxRequestsPerHost = Util.defaultNumber(config.maxRequestsPerHost, 100);
}

/**
 * Encapsulate the request and invoke the network
 * @param action api name
 * @param protocol http or https
 * @param method e.g. GET
 * @param pathname pathname of every api
 * @param request which contains request params
 * @param runtime which controls some details of call api, such as retry times
 * @return the response
 */
api doRequest(version: string, action: string, protocol: string, method: string, pathname: string, request: object, headers: map[string]string, runtime: Util.RuntimeOptions): object {
  __request.protocol = Util.defaultString(@protocol, protocol);
  __request.method = method;
  __request.pathname = pathname;
  __request.query = {
    method = action,
    version = version,
    sign_type = 'HmacSHA1',
    req_time = AntchainUtil.getTimestamp(),
    req_msg_id = AntchainUtil.getNonce(),
    access_key = @accessKeyId,
    base_sdk_version = 'TeaSDK-2.0',
    sdk_version = '1.0.2',
    _prod_code = 'ak_195dff03d395462ea294bafdba69df3f',
    _prod_channel = 'saas'
  };

  if (!Util.empty(@securityToken)) {
    __request.query.security_token = @securityToken;
  }

  __request.headers = {
    host = Util.defaultString(@endpoint, 'openapi.antchain.antgroup.com'),
    user-agent = Util.getUserAgent(@userAgent),
    ...headers
  };

  var tmp = Util.anyifyMapValue(RPCUtil.query(request));
  __request.body = Util.toFormString(tmp);
  __request.headers.content-type = 'application/x-www-form-urlencoded';

  var signedParam = {
    ...__request.query,
    ...RPCUtil.query(request)
  };
  __request.query.sign = AntchainUtil.getSignature(signedParam, @accessKeySecret);
} returns {
  var raw = Util.readAsString(__response.body);
  var obj = Util.parseJSON(raw);
  var res = Util.assertAsMap(obj);
  var resp = Util.assertAsMap(res.response);

  if (AntchainUtil.hasError(raw, @accessKeySecret)) {
    throw {
      message = resp.result_msg,
      data = resp,
      code = resp.result_code
    };
  }
  return resp;
} runtime {
  timeouted = 'retry',
  readTimeout = Util.defaultNumber(runtime.readTimeout, @readTimeout),
  connectTimeout = Util.defaultNumber(runtime.connectTimeout, @connectTimeout),
  httpProxy = Util.defaultString(runtime.httpProxy, @httpProxy),
  httpsProxy = Util.defaultString(runtime.httpsProxy, @httpsProxy),
  noProxy = Util.defaultString(runtime.noProxy, @noProxy),
  maxIdleConns = Util.defaultNumber(runtime.maxIdleConns, @maxIdleConns),
  maxIdleTimeMillis = @maxIdleTimeMillis,
  keepAliveDuration = @keepAliveDurationMillis,
  maxRequests = @maxRequests,
  maxRequestsPerHost = @maxRequestsPerHost,
  retry = {
    retryable = runtime.autoretry,
    maxAttempts = Util.defaultNumber(runtime.maxAttempts, 3)
  },
  backoff = {
    policy = Util.defaultString(runtime.backoffPolicy, 'no'),
    period = Util.defaultNumber(runtime.backoffPeriod, 1)
  },
  ignoreSSL = runtime.ignoreSSL
}

model SubmitAntchainAtoSignFlowRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 订单号
  orderId: string(name='order_id'),
  // CRED_PSN_CH_IDCARD： 大陆身份证
  // CRED_PSN_CH_TWCARD：台湾来往大陆通行证
  // CRED_PSN_CH_MACAO"：澳门来往大陆通行证
  // CRED_PSN_CH_HONGKONG：香港来往大陆通行证
  // CRED_PSN_PASSPORT：护照
  userIdType: string(name='user_id_type'),
  // 用户证件号，需要采用RSA加密传输
  userIdNumber: string(name='user_id_number'),
  // 姓名，需要采用RSA加密传输
  userName: string(name='user_name'),
  // 用户手机号，可不传；传的话需要采用RSA加密传输
  userMobile?: string(name='user_mobile'),
  // 用户的电子邮箱，可不传；传的话需要采用RSA加密传输
  userEmail?: string(name='user_email'),
  // 签署有效期，时间戳，例如：new Date().getTime()
  signValidity?: string(name='sign_validity'),
  // 1-短信；2-邮件
  flowNotifyType?: string(name='flow_notify_type'),
  // 业务场景，电子合同签署协议的时候的标题
  businessScene: string(name='business_scene'),
  // 签署完成跳转链接
  signedRedirectUrl?: string(name='signed_redirect_url'),
  // 签署的电子合同模板信息，List<Object>的JSON格式，Object如下：
  // {
  // templateId:__, // String格式
  // templateArgs: {
  //     "模板参数key":"模板参数值", // 必须为String
  //   }
  // }
  templateList: string(name='template_list'),
  // 用户的支付宝uid
  alipayUserId: string(maxLength=20, minLength=12, name='alipay_user_id'),
  // 公司名称
  merchantName: string(maxLength=256, minLength=2, name='merchant_name'),
  // 商户签署区域标识。对应在合同模板的机构签署区域中的tag值(如果合同模板的签署区域的tag值为空，则可以不传这个参数)。必须完全对应，否则在多方签署的情况下根据tag找到不到对应的签署机构，会出错。
  merchantTag?: string(maxLength=32, minLength=0, name='merchant_tag'),
  // 商户需要盖的印章ID
  merchantSealId?: string(name='merchant_seal_id'),
  // 电子合同签署顺序，如果只有1方企业签署，传入1即可。如果是多方，并且需要设置签署顺序，则需要将这个值以及thirdSigner中的signOrder做一个签署顺序。
  merchantSignOrder?: long(maximum=10000, minimum=1, name='merchant_sign_order'),
  // CRED_ORG_USCC：统一社会信用代码，CRED_ORG_REGCODE：工商注册号，只支持这两个值
  merchantIdType: string(maxLength=20, minLength=6, name='merchant_id_type'),
  // 商户证件号，需要采用RSA加密传输
  merchantIdNumber: string(maxLength=1000, minLength=4, name='merchant_id_number'),
  // 法人姓名，需要RSA加密传输
  merchantLegalName?: string(name='merchant_legal_name'),
  // 法人证件号，需要采用RSA加密传输
  merchantLegalIdNumber?: string(name='merchant_legal_id_number'),
  // 多方签署的其他参与方的签署信息，json的array格式，参考：[{"tag":"zf_a","orgName":"上海网络科技有限公司","orgIdType":"CRED_ORG_REGCODE","orgIdNumber":"12098760923","orgLegalName":"王大浪","orgLegalIdNumber":"107120196708289012"}]，其中：orgIdNumber、orgLegalName、orgLegalIdNumber需要加密传输。
  thirdSigner?: string(maxLength=2000, minLength=0, name='third_signer'),
}

model SubmitAntchainAtoSignFlowResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 签署合同单号
  signNo?: string(name='sign_no'),
  // 电子签署流程ID
  flowId?: string(name='flow_id'),
  // 签署用户ID
  accountId?: string(name='account_id'),
  // 签署附加信息，用于获取签署链接等。JSON格式的字符串。
  signInfo?: string(name='sign_info'),
}

/**
 * Description: 提交电子合同的签署流程(后置签署模式)
 * Summary: 提交电子合同的签署流程（后置签署模式）
 */
async function submitAntchainAtoSignFlow(request: SubmitAntchainAtoSignFlowRequest): SubmitAntchainAtoSignFlowResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return submitAntchainAtoSignFlowEx(request, headers, runtime);
}

/**
 * Description: 提交电子合同的签署流程(后置签署模式)
 * Summary: 提交电子合同的签署流程（后置签署模式）
 */
async function submitAntchainAtoSignFlowEx(request: SubmitAntchainAtoSignFlowRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SubmitAntchainAtoSignFlowResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.ato.sign.flow.submit', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SubmitAntchainAtoFrontSignRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 商户的订单号
  orderId: string(maxLength=64, minLength=4, name='order_id'),
  // CRED_PSN_CH_IDCARD： 大陆身份证 
  // CRED_PSN_CH_TWCARD：台湾来往大陆通行证 
  // CRED_PSN_CH_MACAO"：澳门来往大陆通行证 
  // CRED_PSN_CH_HONGKONG：香港来往大陆通行证 
  // CRED_PSN_PASSPORT：护照
  userIdType: string(maxLength=40, minLength=4, name='user_id_type'),
  // 用户证件号，需要采用RSA加密传输
  userIdNumber: string(name='user_id_number'),
  // 姓名，需要采用RSA加密传输
  // 
  userName: string(name='user_name'),
  // 用户手机号，可不传；传的话需要采用RSA加密传输
  // 
  userMobile?: string(name='user_mobile'),
  // 用户的电子邮箱，可不传；传的话需要采用RSA加密传输
  // 
  userEmail?: string(name='user_email'),
  // 签署有效期，时间戳，例如：new Date().getTime()
  signValidity?: string(name='sign_validity'),
  // 1-短信；2-邮件
  flowNotifyType?: string(name='flow_notify_type'),
  // 业务场景，电子合同签署协议的时候的标题
  // 
  businessScene: string(maxLength=200, minLength=2, name='business_scene'),
  // 签署完成跳转链接
  // 
  signedRedirectUrl?: string(name='signed_redirect_url'),
  // 签署的电子合同模板信息，List<Object>的JSON格式，Object如下： { templateId:__, // String格式 templateArgs: { "模板参数key":"模板参数值", // 必须为String } }
  templateList: string(name='template_list'),
  // 用户的支付宝uid
  alipayUserId: string(maxLength=24, minLength=4, name='alipay_user_id'),
  // 商户签署区域标识。对应在合同模板的机构签署区域中的tag值(如果合同模板的签署区域的tag值为空，则可以不传这个参数)。必须完全对应，否则在多方签署的情况下根据tag找到不到对应的签署机构，会出错。
  merchantName: string(name='merchant_name'),
  // 商户签署区域标识。对应在合同模板的机构签署区域中的tag值(如果合同模板的签署区域的tag值为空，则可以不传这个参数)。必须完全对应，否则在多方签署的情况下根据tag找到不到对应的签署机构，会出错。
  merchantTag?: string(maxLength=32, minLength=2, name='merchant_tag'),
  // 电子合同签署顺序，如果只有1方企业签署，传入1即可。如果是多方，并且需要设置签署顺序，则需要将这个值以及thirdSigner中的signOrder做一个签署顺序。
  merchantSignOrder?: long(name='merchant_sign_order'),
  // 商户需要盖的印章ID
  merchantSealId?: string(name='merchant_seal_id'),
  // CRED_ORG_USCC：统一社会信用代码，
  // CRED_ORG_REGCODE：工商注册号，
  // 只支持这两个值
  merchantIdType: string(maxLength=32, minLength=4, name='merchant_id_type'),
  // 商户证件号，需要采用RSA加密传输
  merchantIdNumber: string(name='merchant_id_number'),
  // 法人姓名，需要RSA加密传输
  // 
  merchantLegalName?: string(name='merchant_legal_name'),
  // 法人证件号，需要采用RSA加密传输
  // 
  merchantLegalIdNumber?: string(name='merchant_legal_id_number'),
  // 多方签署的其他参与方的签署信息，json的array格式，参考：[{"tag":"zf_a","orgName":"上海网络科技有限公司","orgIdType":"CRED_ORG_REGCODE","orgIdNumber":"12098760923","orgLegalName":"王大浪","orgLegalIdNumber":"107120196708289012","sealIds":["12b2317-0000-3333-2222-ec087dc97d8b"]}]，其中：orgIdNumber、orgLegalName、orgLegalIdNumber需要加密传输。
  thirdSigner?: string(name='third_signer'),
}

model SubmitAntchainAtoFrontSignResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 签署合同单号
  // 
  signNo?: string(name='sign_no'),
  // 电子签署流程ID
  // 
  flowId?: string(name='flow_id'),
  // 签署用户ID
  // 
  accountId?: string(name='account_id'),
  // 签署扩展信息，用于获取签署链接等。JSON格式字符串。
  signInfo?: string(name='sign_info'),
}

/**
 * Description: 提交前置签署的电子合同签署流程（前置签署模式）
 * Summary: 提交签署的电子合同签署流程（前置签署）
 */
async function submitAntchainAtoFrontSign(request: SubmitAntchainAtoFrontSignRequest): SubmitAntchainAtoFrontSignResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return submitAntchainAtoFrontSignEx(request, headers, runtime);
}

/**
 * Description: 提交前置签署的电子合同签署流程（前置签署模式）
 * Summary: 提交签署的电子合同签署流程（前置签署）
 */
async function submitAntchainAtoFrontSignEx(request: SubmitAntchainAtoFrontSignRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SubmitAntchainAtoFrontSignResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.ato.front.sign.submit', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SyncAntchainAtoFrontTradeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 类型
  // 1. orderFullInfo ， 订单所有信息同步
  type: string(name='type'),
  // json.toString
  bizContent: string(name='biz_content'),
}

model SyncAntchainAtoFrontTradeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回信息
  responseData?: string(name='response_data'),
}

/**
 * Description: 订单创建，前置签署
 * Summary: 前置签署订单创建
 */
async function syncAntchainAtoFrontTrade(request: SyncAntchainAtoFrontTradeRequest): SyncAntchainAtoFrontTradeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return syncAntchainAtoFrontTradeEx(request, headers, runtime);
}

/**
 * Description: 订单创建，前置签署
 * Summary: 前置签署订单创建
 */
async function syncAntchainAtoFrontTradeEx(request: SyncAntchainAtoFrontTradeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SyncAntchainAtoFrontTradeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.ato.front.trade.sync', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

