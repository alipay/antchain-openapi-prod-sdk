import AntchainUtil;
import Util;
import RPCUtil;

type @endpoint = string
type @regionId = string
type @accessKeyId = string
type @accessKeySecret = string
type @protocol = string
type @userAgent = string
type @readTimeout = number
type @connectTimeout = number
type @httpProxy = string
type @httpsProxy = string
type @socks5Proxy = string
type @socks5NetWork = string
type @noProxy = string
type @maxIdleConns = number
type @securityToken = string
type @maxIdleTimeMillis = number
type @keepAliveDurationMillis = number
type @maxRequests = number
type @maxRequestsPerHost = number

/**
 * Model for initing client
 */
model Config {
  accessKeyId?: string(description='accesskey id',default=''),
  accessKeySecret?: string(description='accesskey secret',default=''),
  securityToken?: string(description='security token',default=''),
  protocol?: string(description='http protocol',example='http',default='http'),
  readTimeout?: number(description='read timeout',example='10',default=''),
  connectTimeout?: number(description='connect timeout',example='10',default=''),
  httpProxy?: string(description='http proxy',example='http://localhost',default=''),
  httpsProxy?: string(description='https proxy',example='https://localhost',default=''),
  endpoint?: string(description='endpoint',example='cs.aliyuncs.com',default=''),
  noProxy?: string(description='proxy white list',example='http://localhost',default=''),
  maxIdleConns?: number(description='max idle conns',example='3',default=''),
  userAgent?: string(description='user agent',example='Alibabacloud/1',default=''),
  socks5Proxy?: string(description='socks5 proxy',default=''),
  socks5NetWork?: string(description='socks5 network',example='TCP',default=''),
  maxIdleTimeMillis?: number(description='长链接最大空闲时长',default='60 * 1000L'),
  keepAliveDurationMillis?: number(description='长链接最大连接时长',default='5000'),
  maxRequests?: number(description='最大连接数（长链接最大总数）',default='100'),
  maxRequestsPerHost?: number(description='每个目标主机的最大连接数（分主机域名的长链接最大总数',default='100'),
}

/**
 * Init client with Config
 * @param config config contains the necessary information to create a client
 */
init(config: Config) {
  if (Util.isUnset(config)) {
    throw {
      code = 'ParameterMissing',
      message = '\'config\' can not be unset'
    };
  }

  @accessKeyId = config.accessKeyId;
  @accessKeySecret = config.accessKeySecret;
  @securityToken = config.securityToken;
  @endpoint = config.endpoint;
  @protocol = config.protocol;
  @userAgent = config.userAgent;
  @readTimeout = Util.defaultNumber(config.readTimeout, 20000);
  @connectTimeout = Util.defaultNumber(config.connectTimeout, 20000);
  @httpProxy = config.httpProxy;
  @httpsProxy = config.httpsProxy;
  @noProxy = config.noProxy;
  @socks5Proxy = config.socks5Proxy;
  @socks5NetWork = config.socks5NetWork;
  @maxIdleConns = Util.defaultNumber(config.maxIdleConns, 60000);
  @maxIdleTimeMillis = Util.defaultNumber(config.maxIdleTimeMillis, 5);
  @keepAliveDurationMillis = Util.defaultNumber(config.keepAliveDurationMillis, 5000);
  @maxRequests = Util.defaultNumber(config.maxRequests, 100);
  @maxRequestsPerHost = Util.defaultNumber(config.maxRequestsPerHost, 100);
}

/**
 * Encapsulate the request and invoke the network
 * @param action api name
 * @param protocol http or https
 * @param method e.g. GET
 * @param pathname pathname of every api
 * @param request which contains request params
 * @param runtime which controls some details of call api, such as retry times
 * @return the response
 */
api doRequest(version: string, action: string, protocol: string, method: string, pathname: string, request: object, headers: map[string]string, runtime: Util.RuntimeOptions): object {
  __request.protocol = Util.defaultString(@protocol, protocol);
  __request.method = method;
  __request.pathname = pathname;
  __request.query = {
    method = action,
    version = version,
    sign_type = 'HmacSHA1',
    req_time = AntchainUtil.getTimestamp(),
    req_msg_id = AntchainUtil.getNonce(),
    access_key = @accessKeyId,
    base_sdk_version = 'TeaSDK-2.0',
    sdk_version = '1.3.1',
    _prod_code = 'ak_195dff03d395462ea294bafdba69df3f',
    _prod_channel = 'saas'
  };

  if (!Util.empty(@securityToken)) {
    __request.query.security_token = @securityToken;
  }

  __request.headers = {
    host = Util.defaultString(@endpoint, 'openapi.antchain.antgroup.com'),
    user-agent = Util.getUserAgent(@userAgent),
    ...headers
  };

  var tmp = Util.anyifyMapValue(RPCUtil.query(request));
  __request.body = Util.toFormString(tmp);
  __request.headers.content-type = 'application/x-www-form-urlencoded';

  var signedParam = {
    ...__request.query,
    ...RPCUtil.query(request)
  };
  __request.query.sign = AntchainUtil.getSignature(signedParam, @accessKeySecret);
} returns {
  var raw = Util.readAsString(__response.body);
  var obj = Util.parseJSON(raw);
  var res = Util.assertAsMap(obj);
  var resp = Util.assertAsMap(res.response);

  if (AntchainUtil.hasError(raw, @accessKeySecret)) {
    throw {
      message = resp.result_msg,
      data = resp,
      code = resp.result_code
    };
  }
  return resp;
} runtime {
  timeouted = 'retry',
  readTimeout = Util.defaultNumber(runtime.readTimeout, @readTimeout),
  connectTimeout = Util.defaultNumber(runtime.connectTimeout, @connectTimeout),
  httpProxy = Util.defaultString(runtime.httpProxy, @httpProxy),
  httpsProxy = Util.defaultString(runtime.httpsProxy, @httpsProxy),
  noProxy = Util.defaultString(runtime.noProxy, @noProxy),
  maxIdleConns = Util.defaultNumber(runtime.maxIdleConns, @maxIdleConns),
  maxIdleTimeMillis = @maxIdleTimeMillis,
  keepAliveDuration = @keepAliveDurationMillis,
  maxRequests = @maxRequests,
  maxRequestsPerHost = @maxRequestsPerHost,
  retry = {
    retryable = runtime.autoretry,
    maxAttempts = Util.defaultNumber(runtime.maxAttempts, 3)
  },
  backoff = {
    policy = Util.defaultString(runtime.backoffPolicy, 'no'),
    period = Util.defaultNumber(runtime.backoffPeriod, 1)
  },
  ignoreSSL = runtime.ignoreSSL
}

// 主动支付单据
model ActivePayOrder {
  // 支付宝支付订单号，用于拉起主动支付页面
  tradeNo: string(maxLength=64, minLength=1, name='trade_no', example='f28038577d664015bfc1034c4a125121'),
  // 状态
  // INIT：交易创建
  // FAILED：付款失败
  // SUCCESS：付款成功
  tradeStatus: string(maxLength=64, minLength=1, name='trade_status', example='INIT'),
  // 状态原因码
  statusReasonCode?: string(minLength=1, name='status_reason_code', example='TIMEOUT'),
  // 超时关闭
  statusReasonMsg?: string(minLength=1, name='status_reason_msg', example='状态原因描述'),
  // 本次交易支付的订单金额，单位为分
  // 付款成功或付款成功之后的状态必填
  totalAmount?: long(minimum=1, name='total_amount', example='100'),
  // 用户在交易中支付的金额，单位为分
  // 付款成功的状态必填
  paidAmount?: long(minimum=1, name='paid_amount', example='100'),
  // 商家在交易中实际收到的款项，单位为分
  // 付款成功的状态必填
  receiptAmount?: long(minimum=1, name='receipt_amount', example='100'),
  // 交易支付时间
  // 付款成功的状态必填
  gmtPay?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_pay', example='2018-10-10T10:10:00Z'),
}

// 键值对
model XNameValuePair {
  // 键名
  name: string(name='name', example='key'),
  // 键值
  value: string(name='value', example='value'),
}

model SyncAntchainAtoTradeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 业务字段，具体传入信息需参考文档
  // 传入格式需为json字符串
  bizContent: string(name='biz_content'),
  // 接口执行类型
  // 
  type: string(name='type'),
}

model SyncAntchainAtoTradeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // resp信息
  responseData?: string(name='response_data'),
}

/**
 * Description: 对账saas交易信息同步接口
 * Summary: 对账saas交易信息同步接口
 */
async function syncAntchainAtoTrade(request: SyncAntchainAtoTradeRequest): SyncAntchainAtoTradeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return syncAntchainAtoTradeEx(request, headers, runtime);
}

/**
 * Description: 对账saas交易信息同步接口
 * Summary: 对账saas交易信息同步接口
 */
async function syncAntchainAtoTradeEx(request: SyncAntchainAtoTradeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SyncAntchainAtoTradeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.ato.trade.sync', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetAntchainAtoTradeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 查询信息，必须遵循json字符串格式
  bizContent: string(name='biz_content'),
  // 接口类型
  type: string(name='type'),
}

model GetAntchainAtoTradeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回的查询值
  responseData?: string(name='response_data'),
}

/**
 * Description: 获取详情
 * Summary: 获取详情
 */
async function getAntchainAtoTrade(request: GetAntchainAtoTradeRequest): GetAntchainAtoTradeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getAntchainAtoTradeEx(request, headers, runtime);
}

/**
 * Description: 获取详情
 * Summary: 获取详情
 */
async function getAntchainAtoTradeEx(request: GetAntchainAtoTradeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetAntchainAtoTradeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.ato.trade.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateAntchainAtoRealpersonFacevrfRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 真实姓名
  certName: string(name='cert_name'),
  // 证件号码
  certNo: string(name='cert_no'),
  // 身份信息来源类型，当前仅支持证件（CERT_INFO）
  identityType: string(name='identity_type'),
  // 证件类型，当前仅支持身份证（IDENTITY_CARD）
  certType: string(name='cert_type'),
  // 商户请求的唯一标识。
  // 
  // 值为 32 位长度的字母数字组合。其中，前面几位字符是商户自定义的简称，中间几位可以使用一段时间，后段可以使用一个随机或递增序列。该值也可以使用 UUID。
  outerOrderNo: string(name='outer_order_no'),
  // 认证结束回跳地址
  returnUrl: string(name='return_url'),
  // 订单id 长度不可超过50
  orderId: string(name='order_id'),
}

model CreateAntchainAtoRealpersonFacevrfResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 业务返回字段，JSON格式
  data?: string(name='data'),
}

/**
 * Description: 可信身份认证，创建认证
 * Summary: 创建认证
 */
async function createAntchainAtoRealpersonFacevrf(request: CreateAntchainAtoRealpersonFacevrfRequest): CreateAntchainAtoRealpersonFacevrfResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createAntchainAtoRealpersonFacevrfEx(request, headers, runtime);
}

/**
 * Description: 可信身份认证，创建认证
 * Summary: 创建认证
 */
async function createAntchainAtoRealpersonFacevrfEx(request: CreateAntchainAtoRealpersonFacevrfRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateAntchainAtoRealpersonFacevrfResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.ato.realperson.facevrf.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryAntchainAtoRealpersonFacevrfRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 可信实人认证的唯一标识
  certifyId: string(name='certify_id'),
  // 商户请求的唯一标识。
  // 
  // 值为 32 位长度的字母数字组合。其中，前面几位字符是商户自定义的简称，中间几位可以使用一段时间，后段可以使用一个随机或递增序列。该值也可以使用 UUID。
  outerOrderNo: string(name='outer_order_no'),
  // 订单id 长度不可超过50
  orderId: string(name='order_id'),
}

model QueryAntchainAtoRealpersonFacevrfResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 业务返回字段，JSON格式
  data?: string(name='data'),
}

/**
 * Description: 查询认证的结果和相关信息
 * Summary: 查询认证结果
 */
async function queryAntchainAtoRealpersonFacevrf(request: QueryAntchainAtoRealpersonFacevrfRequest): QueryAntchainAtoRealpersonFacevrfResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryAntchainAtoRealpersonFacevrfEx(request, headers, runtime);
}

/**
 * Description: 查询认证的结果和相关信息
 * Summary: 查询认证结果
 */
async function queryAntchainAtoRealpersonFacevrfEx(request: QueryAntchainAtoRealpersonFacevrfRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAntchainAtoRealpersonFacevrfResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.ato.realperson.facevrf.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AllAntchainAtoSignTemplateRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 合同类型，如果不传则返回所有
  contractType?: string(name='contract_type'),
  // 商户统一社会信用代码，SIT环境，非融必填
  merchantId?: string(maxLength=42, name='merchant_id'),
  // ● FINANCE 融资
  // ● NON_FINANCE 非融资
  fundType?: string(name='fund_type'),
  // 查询融资类型时，需要传入资方统一社会信用代码
  fundId?: string(name='fund_id'),
}

model AllAntchainAtoSignTemplateResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // List<Object>格式，详细参考：
  // [
  //         {
  //             "templateCode": "TEST_001",
  //             "tenantId": "BIPCCOQY",
  //             "agreementType": "SERVICE_LEASE",
  //             "fileName": "测试模板之协议签署证明",
  //             "templateId": "f28038577d664015bfc1034c4a125121",
  //             "fieldArgs": "{\"sceneName\":\"测试协议合同签署\",\"title\":\"这是一份证明协议\"}",
  //             "userPos": "[{\"required\":true,\"posPage\":\"1\",\"posX\":\"162.44\",\"posY\":\"425\"}]",
  //             "orgPos": "[{\"required\":true,\"posPage\":\"1\",\"posX\":\"449.99\",\"posY\":\"420.03\"}]"
  //         }
  //     ]
  templateList?: string(name='template_list'),
}

/**
 * Description: 电子合同签署的合同模板查询服务
 * Summary: 电子合同签署的合同模板查询服务
 */
async function allAntchainAtoSignTemplate(request: AllAntchainAtoSignTemplateRequest): AllAntchainAtoSignTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return allAntchainAtoSignTemplateEx(request, headers, runtime);
}

/**
 * Description: 电子合同签署的合同模板查询服务
 * Summary: 电子合同签署的合同模板查询服务
 */
async function allAntchainAtoSignTemplateEx(request: AllAntchainAtoSignTemplateRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AllAntchainAtoSignTemplateResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.ato.sign.template.all', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SubmitAntchainAtoSignFlowRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 订单号
  orderId: string(name='order_id'),
  // CRED_PSN_CH_IDCARD： 大陆身份证
  // CRED_PSN_CH_TWCARD：台湾来往大陆通行证
  // CRED_PSN_CH_MACAO"：澳门来往大陆通行证
  // CRED_PSN_CH_HONGKONG：香港来往大陆通行证
  // CRED_PSN_PASSPORT：护照
  userIdType: string(name='user_id_type'),
  // 用户证件号，需要采用RSA加密传输
  userIdNumber: string(name='user_id_number'),
  // 姓名，需要采用RSA加密传输
  userName: string(name='user_name'),
  // 用户手机号，可不传；传的话需要采用RSA加密传输
  userMobile?: string(name='user_mobile'),
  // 用户的电子邮箱，可不传；传的话需要采用RSA加密传输
  userEmail?: string(name='user_email'),
  // 签署有效期，时间戳，例如：new Date().getTime()
  signValidity?: string(name='sign_validity'),
  // 1-短信；2-邮件
  flowNotifyType?: string(name='flow_notify_type'),
  // 业务场景，电子合同签署协议的时候的标题
  businessScene: string(name='business_scene'),
  // 签署完成跳转链接
  signedRedirectUrl?: string(name='signed_redirect_url'),
  // 签署的电子合同模板信息，List<Object>的JSON格式，Object如下：
  // {
  // templateId:__, // String格式
  // templateArgs: {
  //     "模板参数key":"模板参数值", // 必须为String
  //   }
  // }
  templateList: string(name='template_list'),
  // 用户的支付宝uid
  alipayUserId?: string(maxLength=20, minLength=12, name='alipay_user_id'),
  // 公司名称
  merchantName: string(maxLength=256, minLength=2, name='merchant_name'),
  // 商户签署区域标识。对应在合同模板的机构签署区域中的tag值(如果合同模板的签署区域的tag值为空，则可以不传这个参数)。必须完全对应，否则在多方签署的情况下根据tag找到不到对应的签署机构，会出错。
  merchantTag?: string(maxLength=32, minLength=0, name='merchant_tag'),
  // 商户需要盖的印章ID
  merchantSealId?: string(name='merchant_seal_id'),
  // 电子合同签署顺序，如果只有1方企业签署，传入1即可。如果是多方，并且需要设置签署顺序，则需要将这个值以及thirdSigner中的signOrder做一个签署顺序。
  merchantSignOrder?: long(maximum=10000, minimum=1, name='merchant_sign_order'),
  // CRED_ORG_USCC：统一社会信用代码，CRED_ORG_REGCODE：工商注册号，只支持这两个值
  merchantIdType: string(maxLength=20, minLength=6, name='merchant_id_type'),
  // 商户证件号，需要采用RSA加密传输
  merchantIdNumber: string(maxLength=1000, minLength=4, name='merchant_id_number'),
  // 法人姓名，需要RSA加密传输
  merchantLegalName?: string(name='merchant_legal_name'),
  // 法人证件号，需要采用RSA加密传输
  merchantLegalIdNumber?: string(name='merchant_legal_id_number'),
  // 多方签署的其他参与方的签署信息，json的array格式，参考：[{"tag":"zf_a","orgName":"上海网络科技有限公司","orgIdType":"CRED_ORG_REGCODE","orgIdNumber":"12098760923","orgLegalName":"王大浪","orgLegalIdNumber":"107120196708289012"}]，其中：orgIdNumber、orgLegalName、orgLegalIdNumber需要加密传输。
  thirdSigner?: string(maxLength=2000, minLength=0, name='third_signer'),
}

model SubmitAntchainAtoSignFlowResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 签署合同单号
  signNo?: string(name='sign_no'),
  // 电子签署流程ID
  flowId?: string(name='flow_id'),
  // 签署用户ID
  accountId?: string(name='account_id'),
  // 签署附加信息，用于获取签署链接等。JSON格式的字符串。
  signInfo?: string(name='sign_info'),
}

/**
 * Description: 提交电子合同的签署流程(后置签署模式)
 * Summary: 提交电子合同的签署流程（后置签署模式）
 */
async function submitAntchainAtoSignFlow(request: SubmitAntchainAtoSignFlowRequest): SubmitAntchainAtoSignFlowResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return submitAntchainAtoSignFlowEx(request, headers, runtime);
}

/**
 * Description: 提交电子合同的签署流程(后置签署模式)
 * Summary: 提交电子合同的签署流程（后置签署模式）
 */
async function submitAntchainAtoSignFlowEx(request: SubmitAntchainAtoSignFlowRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SubmitAntchainAtoSignFlowResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.ato.sign.flow.submit', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetAntchainAtoSignFlowRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 签署合同单号
  signNo: string(name='sign_no'),
}

model GetAntchainAtoSignFlowResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 签署合同单号
  signNo?: string(name='sign_no'),
  // 订单号
  orderId?: string(name='order_id'),
  // 签署用户ID
  accountId?: string(name='account_id'),
  // 状态：DRAFT - 草稿； SIGNING - 签署中； FINISH - 签署完成；UNDO - 撤销； TERMINATE - 终止； EXPIRE - 过期； REJECTED - 拒签； CANCELLED - 解约
  // 
  status?: string(name='status'),
  // 签署流程ID
  flowId?: string(name='flow_id'),
  // 签署文件列表，参考：
  // _[{"fileItemNo":"10090801000001699892007791144960","agreementType":"COMMON","fileName":"xxx合同","fileSize":228530,"signAccountId":"fe2eb3814c4e49edba2bc012f790771f","fileId":"2c7684461a0f4d33bc02f6d77f7b3937","downloadUrl":"https://dev.oss-cn-shanghai.aliyuncs.com/ag/ord/xxx/16939683744483057_%E6%B5%8B%E8%AF%95%E6%A8%A1%E6%9D%BF%E4%B9%8B%E5%8D%8F%E8%AE%AE%E7%AD%BE%E7%BD%B2%E8%AF%81%E6%98%8E.pdf?Expires=1693971989&OSSAccessKeyId=LTAI5tR3hHiaXPAh8YsY9Dce&Signature=i%2FfAgDem33guI%2F0KjIFj24XZNCc%3D"}]_
  docList?: string(name='doc_list'),
  // 业务场景，主要用于签署合同的标题描述
  businessScene?: string(name='business_scene'),
  // 签署合同中的订单的uid。
  alipayUserId?: string(name='alipay_user_id'),
  // 签署扩展信息，用于获取签署链接等。JSON格式字符串。
  signInfo?: string(name='sign_info'),
}

/**
 * Description: 查询签署流程详情
 * Summary: 查询签署流程详情
 */
async function getAntchainAtoSignFlow(request: GetAntchainAtoSignFlowRequest): GetAntchainAtoSignFlowResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getAntchainAtoSignFlowEx(request, headers, runtime);
}

/**
 * Description: 查询签署流程详情
 * Summary: 查询签署流程详情
 */
async function getAntchainAtoSignFlowEx(request: GetAntchainAtoSignFlowRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetAntchainAtoSignFlowResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.ato.sign.flow.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateAntchainAtoWithholdSignRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 订单id 长度不可超过50
  orderId: string(maxLength=50, name='order_id'),
  // 支付宝商户id，使用签约能力前时候进行向平台申请
  alipayMerchantId?: string(maxLength=20, name='alipay_merchant_id'),
  // 支付宝商户名称，会展示在支付并签约界面
  alipayMerchantName?: string(maxLength=50, name='alipay_merchant_name'),
  // 支付宝商户服务名称，会展示在支付并签约界面
  alipayMerchantServiceName?: string(maxLength=50, name='alipay_merchant_service_name'),
  // 支付宝商户服务描述，会展示在支付并签约界面
  alipayMerchantServiceDescription?: string(maxLength=150, name='alipay_merchant_service_description'),
  // 支付宝uid，非必填
  alipayUserId?: string(maxLength=128, name='alipay_user_id'),
}

model CreateAntchainAtoWithholdSignResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 签约字符串
  signStr?: string(name='sign_str'),
}

/**
 * Description: 代扣签约创建
 * Summary: 代扣签约
 */
async function createAntchainAtoWithholdSign(request: CreateAntchainAtoWithholdSignRequest): CreateAntchainAtoWithholdSignResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createAntchainAtoWithholdSignEx(request, headers, runtime);
}

/**
 * Description: 代扣签约创建
 * Summary: 代扣签约
 */
async function createAntchainAtoWithholdSignEx(request: CreateAntchainAtoWithholdSignRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateAntchainAtoWithholdSignResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.ato.withhold.sign.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryAntchainAtoWithholdSignRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 订单id 长度不可超过50
  orderId: string(maxLength=50, name='order_id'),
}

model QueryAntchainAtoWithholdSignResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 协议当前状态
  // 1. UNSIGNED：未签约
  // 2. SIGNED：已签约；
  // 3. TERMINATED：已解约
  status?: string(name='status'),
  // 协议签署时间
  signTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='sign_time'),
  // 协议生效时间
  validTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='valid_time'),
  // 协议失效时间
  invalidTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='invalid_time'),
}

/**
 * Description: 代扣签约查询
 * Summary: 代扣签约查询
 */
async function queryAntchainAtoWithholdSign(request: QueryAntchainAtoWithholdSignRequest): QueryAntchainAtoWithholdSignResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryAntchainAtoWithholdSignEx(request, headers, runtime);
}

/**
 * Description: 代扣签约查询
 * Summary: 代扣签约查询
 */
async function queryAntchainAtoWithholdSignEx(request: QueryAntchainAtoWithholdSignRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAntchainAtoWithholdSignResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.ato.withhold.sign.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AuthAntchainAtoSignFlowRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 签署的电子合同ID
  signNo: string(maxLength=64, minLength=6, name='sign_no'),
  // 签署区域的tag，和发起签署流程的机构的tag对应。
  tag?: string(maxLength=32, minLength=2, name='tag'),
  // 电子合同签署服务返回的biz_flow_id
  bizFlowId?: string(maxLength=64, minLength=4, name='biz_flow_id'),
  // 电子合同签署服务的返回的account_id
  accountId?: string(maxLength=64, minLength=4, name='account_id'),
}

model AuthAntchainAtoSignFlowResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 签署最后落签的签署区域id列表
  signFieldIds?: string(name='sign_field_ids'),
}

/**
 * Description: 电子合同签署模块，机构调用这个接口进行签署的授权落签
 * Summary: 电子合同签署流程落签操作
 */
async function authAntchainAtoSignFlow(request: AuthAntchainAtoSignFlowRequest): AuthAntchainAtoSignFlowResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return authAntchainAtoSignFlowEx(request, headers, runtime);
}

/**
 * Description: 电子合同签署模块，机构调用这个接口进行签署的授权落签
 * Summary: 电子合同签署流程落签操作
 */
async function authAntchainAtoSignFlowEx(request: AuthAntchainAtoSignFlowRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AuthAntchainAtoSignFlowResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.ato.sign.flow.auth', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UnbindAntchainAtoWithholdSignRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 订单id 长度不可超过50
  orderId: string(maxLength=50, name='order_id'),
}

model UnbindAntchainAtoWithholdSignResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 订单关闭后,可以通过此接口解绑签约
 * Summary: 代扣签约解绑
 */
async function unbindAntchainAtoWithholdSign(request: UnbindAntchainAtoWithholdSignRequest): UnbindAntchainAtoWithholdSignResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return unbindAntchainAtoWithholdSignEx(request, headers, runtime);
}

/**
 * Description: 订单关闭后,可以通过此接口解绑签约
 * Summary: 代扣签约解绑
 */
async function unbindAntchainAtoWithholdSignEx(request: UnbindAntchainAtoWithholdSignRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UnbindAntchainAtoWithholdSignResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.ato.withhold.sign.unbind', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CancelAntchainAtoWithholdPlanRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 当发现跨天继续提交
  orderId: string(maxLength=50, name='order_id'),
  // 取消原因
  // RENTING_OUT:退租
  // RENTING_AND_RESALE:租转售
  // 
  // 
  cancelReason: string(maxLength=64, name='cancel_reason'),
}

model CancelAntchainAtoWithholdPlanResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 取消代扣计划，将未扣款的全部代扣计划进行取消
 * Summary: 取消代扣计划
 */
async function cancelAntchainAtoWithholdPlan(request: CancelAntchainAtoWithholdPlanRequest): CancelAntchainAtoWithholdPlanResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return cancelAntchainAtoWithholdPlanEx(request, headers, runtime);
}

/**
 * Description: 取消代扣计划，将未扣款的全部代扣计划进行取消
 * Summary: 取消代扣计划
 */
async function cancelAntchainAtoWithholdPlanEx(request: CancelAntchainAtoWithholdPlanRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CancelAntchainAtoWithholdPlanResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.ato.withhold.plan.cancel', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model RepayAntchainAtoWithholdPlanRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 订单id 长度不可超过50
  orderId: string(maxLength=50, name='order_id'),
  // 第几期
  periodNum: long(minimum=1, name='period_num'),
  // 其他方式还款的时间
  gmtPay: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_pay'),
  // 取消订单某一期代扣计划中以其他方式还款金额，单位为分
  payOffAmount: long(minimum=0, name='pay_off_amount'),
  // 变更其他方式还款
  // WECHAT:微信;
  // BANK:银行
  // ALIPAY:支付宝
  payOffType?: string(maxLength=64, name='pay_off_type'),
  // 通过其他方式还款单号;例如银行流水号或微信流水号
  payOffNo?: string(maxLength=64, name='pay_off_no'),
  // 其他方式还款银行名称，还款方式为银行时必填
  payOffBankName?: string(maxLength=64, name='pay_off_bank_name'),
}

model RepayAntchainAtoWithholdPlanResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: ● 重要说明：
     ①这个接口是取消订单某一期代扣计划中以其他方式还款的金额，取消之后代扣不再执行该期计划。
     ②对通过其他方式还款的第三方单号留存;例如：银行流水号或微信流水号。
 * Summary: 单期代扣取消
 */
async function repayAntchainAtoWithholdPlan(request: RepayAntchainAtoWithholdPlanRequest): RepayAntchainAtoWithholdPlanResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return repayAntchainAtoWithholdPlanEx(request, headers, runtime);
}

/**
 * Description: ● 重要说明：
     ①这个接口是取消订单某一期代扣计划中以其他方式还款的金额，取消之后代扣不再执行该期计划。
     ②对通过其他方式还款的第三方单号留存;例如：银行流水号或微信流水号。
 * Summary: 单期代扣取消
 */
async function repayAntchainAtoWithholdPlanEx(request: RepayAntchainAtoWithholdPlanRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RepayAntchainAtoWithholdPlanResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.ato.withhold.plan.repay', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SubmitAntchainAtoFrontSignRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 商户的订单号
  orderId: string(maxLength=64, minLength=4, name='order_id'),
  // CRED_PSN_CH_IDCARD： 大陆身份证 
  // CRED_PSN_CH_TWCARD：台湾来往大陆通行证 
  // CRED_PSN_CH_MACAO"：澳门来往大陆通行证 
  // CRED_PSN_CH_HONGKONG：香港来往大陆通行证 
  // CRED_PSN_PASSPORT：护照
  userIdType: string(maxLength=40, minLength=4, name='user_id_type'),
  // 用户证件号，需要采用RSA加密传输
  userIdNumber: string(name='user_id_number'),
  // 姓名，需要采用RSA加密传输
  // 
  userName: string(name='user_name'),
  // 用户手机号，可不传；传的话需要采用RSA加密传输
  // 
  userMobile?: string(name='user_mobile'),
  // 用户的电子邮箱，可不传；传的话需要采用RSA加密传输
  // 
  userEmail?: string(name='user_email'),
  // 签署有效期，时间戳，例如：new Date().getTime()
  signValidity?: string(name='sign_validity'),
  // 1-短信；2-邮件
  flowNotifyType?: string(name='flow_notify_type'),
  // 业务场景，电子合同签署协议的时候的标题
  // 
  businessScene: string(maxLength=200, minLength=2, name='business_scene'),
  // 签署完成跳转链接
  // 
  signedRedirectUrl?: string(name='signed_redirect_url'),
  // 签署的电子合同模板信息，List<Object>的JSON格式，Object如下： { templateId:__, // String格式 templateArgs: { "模板参数key":"模板参数值", // 必须为String } }
  templateList: string(name='template_list'),
  // 用户的支付宝uid
  alipayUserId?: string(maxLength=24, minLength=4, name='alipay_user_id'),
  // 商户签署区域标识。对应在合同模板的机构签署区域中的tag值(如果合同模板的签署区域的tag值为空，则可以不传这个参数)。必须完全对应，否则在多方签署的情况下根据tag找到不到对应的签署机构，会出错。
  merchantName: string(name='merchant_name'),
  // 商户签署区域标识。对应在合同模板的机构签署区域中的tag值(如果合同模板的签署区域的tag值为空，则可以不传这个参数)。必须完全对应，否则在多方签署的情况下根据tag找到不到对应的签署机构，会出错。
  merchantTag?: string(maxLength=32, minLength=2, name='merchant_tag'),
  // 电子合同签署顺序，如果只有1方企业签署，传入1即可。如果是多方，并且需要设置签署顺序，则需要将这个值以及thirdSigner中的signOrder做一个签署顺序。
  merchantSignOrder?: long(name='merchant_sign_order'),
  // 商户需要盖的印章ID
  merchantSealId?: string(name='merchant_seal_id'),
  // CRED_ORG_USCC：统一社会信用代码，
  // CRED_ORG_REGCODE：工商注册号，
  // 只支持这两个值
  merchantIdType: string(maxLength=32, minLength=4, name='merchant_id_type'),
  // 商户证件号，需要采用RSA加密传输
  merchantIdNumber: string(name='merchant_id_number'),
  // 法人姓名，需要RSA加密传输
  // 
  merchantLegalName?: string(name='merchant_legal_name'),
  // 法人证件号，需要采用RSA加密传输
  // 
  merchantLegalIdNumber?: string(name='merchant_legal_id_number'),
  // 多方签署的其他参与方的签署信息，json的array格式，参考：[{"tag":"zf_a","orgName":"上海网络科技有限公司","orgIdType":"CRED_ORG_REGCODE","orgIdNumber":"12098760923","orgLegalName":"王大浪","orgLegalIdNumber":"107120196708289012","sealIds":["12b2317-0000-3333-2222-ec087dc97d8b"]}]，其中：orgIdNumber、orgLegalName、orgLegalIdNumber需要加密传输。
  thirdSigner?: string(name='third_signer'),
}

model SubmitAntchainAtoFrontSignResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 签署合同单号
  // 
  signNo?: string(name='sign_no'),
  // 电子签署流程ID
  // 
  flowId?: string(name='flow_id'),
  // 签署用户ID
  // 
  accountId?: string(name='account_id'),
  // 签署扩展信息，用于获取签署链接等。JSON格式字符串。
  signInfo?: string(name='sign_info'),
}

/**
 * Description: 提交前置签署的电子合同签署流程（前置签署模式）
 * Summary: 提交签署的电子合同签署流程（前置签署）
 */
async function submitAntchainAtoFrontSign(request: SubmitAntchainAtoFrontSignRequest): SubmitAntchainAtoFrontSignResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return submitAntchainAtoFrontSignEx(request, headers, runtime);
}

/**
 * Description: 提交前置签署的电子合同签署流程（前置签署模式）
 * Summary: 提交签署的电子合同签署流程（前置签署）
 */
async function submitAntchainAtoFrontSignEx(request: SubmitAntchainAtoFrontSignRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SubmitAntchainAtoFrontSignResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.ato.front.sign.submit', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SyncAntchainAtoFrontTradeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 类型
  // 1. orderFullInfo ， 订单所有信息同步
  type: string(name='type'),
  // json.toString
  bizContent: string(name='biz_content'),
}

model SyncAntchainAtoFrontTradeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回信息
  responseData?: string(name='response_data'),
}

/**
 * Description: 订单创建，前置签署
 * Summary: 前置签署订单创建
 */
async function syncAntchainAtoFrontTrade(request: SyncAntchainAtoFrontTradeRequest): SyncAntchainAtoFrontTradeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return syncAntchainAtoFrontTradeEx(request, headers, runtime);
}

/**
 * Description: 订单创建，前置签署
 * Summary: 前置签署订单创建
 */
async function syncAntchainAtoFrontTradeEx(request: SyncAntchainAtoFrontTradeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SyncAntchainAtoFrontTradeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.ato.front.trade.sync', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model RetryAntchainAtoWithholdPlanRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 订单id 长度不可超过50
  orderId: string(maxLength=50, name='order_id'),
  // 第几期
  periodNum: long(minimum=1, name='period_num'),
}

model RetryAntchainAtoWithholdPlanResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 当代扣未成功时，商户可与用户进行沟通补款到支付宝，补款完成后通过代扣重试能力实时触发重试扣款。
 * Summary: 扣款计划重试
 */
async function retryAntchainAtoWithholdPlan(request: RetryAntchainAtoWithholdPlanRequest): RetryAntchainAtoWithholdPlanResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return retryAntchainAtoWithholdPlanEx(request, headers, runtime);
}

/**
 * Description: 当代扣未成功时，商户可与用户进行沟通补款到支付宝，补款完成后通过代扣重试能力实时触发重试扣款。
 * Summary: 扣款计划重试
 */
async function retryAntchainAtoWithholdPlanEx(request: RetryAntchainAtoWithholdPlanRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RetryAntchainAtoWithholdPlanResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.ato.withhold.plan.retry', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ConfirmAntchainAtoWithholdSignasyncunsignRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 订单id
  orderId: string(maxLength=50, minLength=1, name='order_id'),
  // 操作动作
  // 同意：AGREE
  // 拒绝：REFUSE
  operate: string(maxLength=16, minLength=1, name='operate'),
  // 拒绝原因码,商户拒绝时必填。
  // USER_OWE_MONEY：用户账户存在欠费订单
  // USER_IN_SERVICE：用户有进行的订单
  refuseReasonCode?: string(maxLength=16, minLength=1, name='refuse_reason_code'),
  // 用户欠款金额，单位为分
  // refuse_reason_code=USER_OWE_MONEY时必填
  userOweMoney?: long(minimum=1, name='user_owe_money'),
  // 用户进行中的服务
  // refuse_reason_code=USER_IN_SERVICE时必填
  userInService?: string(maxLength=128, minLength=1, name='user_in_service'),
}

model ConfirmAntchainAtoWithholdSignasyncunsignResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 当代扣签约时，用户在支付宝侧发起异步解约，此时需要经过商户确认才可以完成解约。saas会通知商户用户的异步解约申请，由商户通过此接口确认是否解约
 * Summary: 代扣签约的异步解约确认
 */
async function confirmAntchainAtoWithholdSignasyncunsign(request: ConfirmAntchainAtoWithholdSignasyncunsignRequest): ConfirmAntchainAtoWithholdSignasyncunsignResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return confirmAntchainAtoWithholdSignasyncunsignEx(request, headers, runtime);
}

/**
 * Description: 当代扣签约时，用户在支付宝侧发起异步解约，此时需要经过商户确认才可以完成解约。saas会通知商户用户的异步解约申请，由商户通过此接口确认是否解约
 * Summary: 代扣签约的异步解约确认
 */
async function confirmAntchainAtoWithholdSignasyncunsignEx(request: ConfirmAntchainAtoWithholdSignasyncunsignRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ConfirmAntchainAtoWithholdSignasyncunsignResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.ato.withhold.signasyncunsign.confirm', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UploadAntchainAtoFundFlowRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 订单所属商户的统一社会信用代码
  merchantId: string(name='merchant_id'),
  // 商户的订单号
  orderId: string(name='order_id'),
  // 签署合同单号
  signNo: string(name='sign_no'),
  // 返回的文件fileItemNo编号
  fileItemNo: string(name='file_item_no'),
  // 上传的pdf文件，需要以.pdf后缀结尾
  fileObject?: readable(description='待上传文件', ignore='true'),
  fileObjectName?: string(description='待上传文件名', ignore='true'),
  fileId: string(name='file_id'),
}

model UploadAntchainAtoFundFlowResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 用于资方将盖章后的合同文件上传
 * Summary: 资方合同文件上传接口
 */
async function uploadAntchainAtoFundFlow(request: UploadAntchainAtoFundFlowRequest): UploadAntchainAtoFundFlowResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return uploadAntchainAtoFundFlowEx(request, headers, runtime);
}

/**
 * Description: 用于资方将盖章后的合同文件上传
 * Summary: 资方合同文件上传接口
 */
async function uploadAntchainAtoFundFlowEx(request: UploadAntchainAtoFundFlowRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UploadAntchainAtoFundFlowResponse {
  if (!Util.isUnset(request.fileObject)) {
    var uploadReq = new CreateAntcloudGatewayxFileUploadRequest{
      authToken = request.authToken,
      apiCode = 'antchain.ato.fund.flow.upload',
      fileName = request.fileObjectName,
    };
    var uploadResp = createAntcloudGatewayxFileUploadEx(uploadReq, headers, runtime);
    if (!AntchainUtil.isSuccess(uploadResp.resultCode, "ok")) {
      var uploadAntchainAtoFundFlowResponse = new UploadAntchainAtoFundFlowResponse{
        reqMsgId = uploadResp.reqMsgId,
        resultCode = uploadResp.resultCode,
        resultMsg = uploadResp.resultMsg,
      };
      return uploadAntchainAtoFundFlowResponse;
    }
    var uploadHeaders = AntchainUtil.parseUploadHeaders(uploadResp.uploadHeaders);
    AntchainUtil.putObject(request.fileObject, uploadHeaders, uploadResp.uploadUrl);
    request.fileId = uploadResp.fileId;
  }
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.ato.fund.flow.upload', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetAntchainAtoFundFlowRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 订单所属商户的统一社会信用代码
  merchantId: string(name='merchant_id'),
  // 商户的订单号
  orderId: string(name='order_id'),
  // 合同类型
  contractType?: string(name='contract_type'),
}

model GetAntchainAtoFundFlowResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 商户的订单号
  orderId?: string(name='order_id'),
  // 需要落章的合同列表，需要status状态为FINISH可以落章
  contractList?: string(name='contract_list'),
}

/**
 * Description: 获取商户签署后的合同文件，用于资方签署落章
 * Summary: 资方合同文件获取接口
 */
async function getAntchainAtoFundFlow(request: GetAntchainAtoFundFlowRequest): GetAntchainAtoFundFlowResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getAntchainAtoFundFlowEx(request, headers, runtime);
}

/**
 * Description: 获取商户签署后的合同文件，用于资方签署落章
 * Summary: 资方合同文件获取接口
 */
async function getAntchainAtoFundFlowEx(request: GetAntchainAtoFundFlowRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetAntchainAtoFundFlowResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.ato.fund.flow.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model RefuseAntchainAtoFundFlowRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 订单所属商户的统一社会信用代码
  merchantId: string(name='merchant_id'),
  // 商户的订单号
  orderId: string(name='order_id'),
  // 签署合同单号
  signNo: string(name='sign_no'),
  // 填写拒绝落章原因，如果同意则不用填写
  signReason?: string(name='sign_reason'),
}

model RefuseAntchainAtoFundFlowResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 用户资方通知合同签署的状态，一般用于拒绝落章文件时，需要通知拒绝原因
 * Summary: 资方合同签署状态通知
 */
async function refuseAntchainAtoFundFlow(request: RefuseAntchainAtoFundFlowRequest): RefuseAntchainAtoFundFlowResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return refuseAntchainAtoFundFlowEx(request, headers, runtime);
}

/**
 * Description: 用户资方通知合同签署的状态，一般用于拒绝落章文件时，需要通知拒绝原因
 * Summary: 资方合同签署状态通知
 */
async function refuseAntchainAtoFundFlowEx(request: RefuseAntchainAtoFundFlowRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RefuseAntchainAtoFundFlowResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.ato.fund.flow.refuse', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AuthAntchainAtoFundFlowRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 订单所属商户的统一社会信用代码
  merchantId: string(name='merchant_id'),
  // 商户的订单号
  orderId: string(name='order_id'),
  // 签署的电子合同ID
  signNo: string(name='sign_no'),
  // 签署区域的tag，和发起签署流程的机构的tag对应
  tag: string(name='tag'),
}

model AuthAntchainAtoFundFlowResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 签署最后落签的签署区域id列表
  signFieldIds?: string(name='sign_field_ids'),
}

/**
 * Description: 资方调用，授权通过e签宝进行落签
 * Summary: 资方e签宝落签接口
 */
async function authAntchainAtoFundFlow(request: AuthAntchainAtoFundFlowRequest): AuthAntchainAtoFundFlowResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return authAntchainAtoFundFlowEx(request, headers, runtime);
}

/**
 * Description: 资方调用，授权通过e签宝进行落签
 * Summary: 资方e签宝落签接口
 */
async function authAntchainAtoFundFlowEx(request: AuthAntchainAtoFundFlowRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AuthAntchainAtoFundFlowResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.ato.fund.flow.auth', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateAntchainAtoWithholdActivepayRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 订单id 长度不可超过50
  orderId: string(maxLength=50, name='order_id'),
  // 第几期
  periodNum: long(minimum=1, name='period_num'),
}

model CreateAntchainAtoWithholdActivepayResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 支付宝支付订单号，用于拉起主动支付页面
  tradeNo?: string(name='trade_no'),
}

/**
 * Description: 代扣主动支付创建
 * Summary: 代扣主动支付创建
 */
async function createAntchainAtoWithholdActivepay(request: CreateAntchainAtoWithholdActivepayRequest): CreateAntchainAtoWithholdActivepayResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createAntchainAtoWithholdActivepayEx(request, headers, runtime);
}

/**
 * Description: 代扣主动支付创建
 * Summary: 代扣主动支付创建
 */
async function createAntchainAtoWithholdActivepayEx(request: CreateAntchainAtoWithholdActivepayRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateAntchainAtoWithholdActivepayResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.ato.withhold.activepay.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryAntchainAtoWithholdActivepayRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 订单id 长度不可超过50
  orderId: string(maxLength=50, minLength=1, name='order_id'),
  // 第几期
  periodNum: long(name='period_num'),
  // 支付宝支付订单号，当传递此单号时，只会返回当前单据
  tradeNo?: string(maxLength=64, name='trade_no'),
}

model QueryAntchainAtoWithholdActivepayResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 当前支付单
  currentOrder?: ActivePayOrder(name='current_order'),
  // 主动支付单列表，当不通过trade_no查询时有值
  orders?: [ ActivePayOrder ](name='orders'),
}

/**
 * Description: 代扣主动支付查询
 * Summary: 代扣主动支付查询
 */
async function queryAntchainAtoWithholdActivepay(request: QueryAntchainAtoWithholdActivepayRequest): QueryAntchainAtoWithholdActivepayResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryAntchainAtoWithholdActivepayEx(request, headers, runtime);
}

/**
 * Description: 代扣主动支付查询
 * Summary: 代扣主动支付查询
 */
async function queryAntchainAtoWithholdActivepayEx(request: QueryAntchainAtoWithholdActivepayRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAntchainAtoWithholdActivepayResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.ato.withhold.activepay.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CancelAntchainAtoWithholdActivepayRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 订单id 长度不可超过50
  orderId: string(name='order_id'),
  // 第几期
  periodNum: long(name='period_num'),
  // 支付宝支付订单号，当传递此单号时，只会取消指定单据号，不传递时取消当前代扣
  tradeNo?: string(name='trade_no'),
}

model CancelAntchainAtoWithholdActivepayResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 取消的单号
  tradeNo?: string(name='trade_no'),
}

/**
 * Description: 代扣主动支付取消
 * Summary: 代扣主动支付取消
 */
async function cancelAntchainAtoWithholdActivepay(request: CancelAntchainAtoWithholdActivepayRequest): CancelAntchainAtoWithholdActivepayResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return cancelAntchainAtoWithholdActivepayEx(request, headers, runtime);
}

/**
 * Description: 代扣主动支付取消
 * Summary: 代扣主动支付取消
 */
async function cancelAntchainAtoWithholdActivepayEx(request: CancelAntchainAtoWithholdActivepayRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CancelAntchainAtoWithholdActivepayResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.ato.withhold.activepay.cancel', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CancelAntchainAtoFundPlanRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 订单id 长度不可超过50
  orderId: string(name='order_id'),
  // 订单所属商户的社会信用代码
  merchantId: string(name='merchant_id'),
  // 取消原因 
  // ACTIVE_REDEEM:自主赎回
  // RENTING_OUT_REDEEM:退租赎回
  // RENTING_AND_RESALE_REDEEM:租转售赎回
  cancelReason: string(name='cancel_reason'),
}

model CancelAntchainAtoFundPlanResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 资方调用，取消商户履约计划
 * Summary: 商户履约计划取消
 */
async function cancelAntchainAtoFundPlan(request: CancelAntchainAtoFundPlanRequest): CancelAntchainAtoFundPlanResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return cancelAntchainAtoFundPlanEx(request, headers, runtime);
}

/**
 * Description: 资方调用，取消商户履约计划
 * Summary: 商户履约计划取消
 */
async function cancelAntchainAtoFundPlanEx(request: CancelAntchainAtoFundPlanRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CancelAntchainAtoFundPlanResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.ato.fund.plan.cancel', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CallbackAntchainAtoFundNotifyRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // ASYNC_UNSIGN_APPLY
  type: string(name='type'),
  // 数据
  data: string(name='data'),
}

model CallbackAntchainAtoFundNotifyResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 通知回调
 * Summary: 通知回调
 */
async function callbackAntchainAtoFundNotify(request: CallbackAntchainAtoFundNotifyRequest): CallbackAntchainAtoFundNotifyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return callbackAntchainAtoFundNotifyEx(request, headers, runtime);
}

/**
 * Description: 通知回调
 * Summary: 通知回调
 */
async function callbackAntchainAtoFundNotifyEx(request: CallbackAntchainAtoFundNotifyRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CallbackAntchainAtoFundNotifyResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.ato.fund.notify.callback', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SyncAntchainAtoTradeFinanceloanapplyRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 订单id 
  orderId: string(maxLength=50, minLength=1, name='order_id'),
  // 订单所属商户的社会信用代码
  merchantId: string(maxLength=64, minLength=1, name='merchant_id'),
  // 融资放款申请接口
  merchantName: string(name='merchant_name'),
}

model SyncAntchainAtoTradeFinanceloanapplyResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 订单id
  orderId?: string(name='order_id'),
  // 订单所属商户的社会信用代码
  merchantId?: string(name='merchant_id'),
}

/**
 * Description: 融资放款申请接口
 * Summary: 融资放款申请接口
 */
async function syncAntchainAtoTradeFinanceloanapply(request: SyncAntchainAtoTradeFinanceloanapplyRequest): SyncAntchainAtoTradeFinanceloanapplyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return syncAntchainAtoTradeFinanceloanapplyEx(request, headers, runtime);
}

/**
 * Description: 融资放款申请接口
 * Summary: 融资放款申请接口
 */
async function syncAntchainAtoTradeFinanceloanapplyEx(request: SyncAntchainAtoTradeFinanceloanapplyRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SyncAntchainAtoTradeFinanceloanapplyResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.ato.trade.financeloanapply.sync', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetAntchainAtoTradeMerchantfulfillmentRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 订单id
  orderId: string(maxLength=50, minLength=1, name='order_id'),
  // 订单所属商户的社会信用代码
  merchantId: string(maxLength=64, minLength=1, name='merchant_id'),
  // 履约期数，不填返回为所有履约期的履约信息
  // - 如果有填写，返回当前期数的履约信息，列表长度为1
  termIdx?: long(name='term_idx'),
}

model GetAntchainAtoTradeMerchantfulfillmentResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回值为 「MerchantFulfillmentResp」的json字符串
  responseData?: string(name='response_data'),
}

/**
 * Description: 商户履约查询
 * Summary: 商户履约查询
 */
async function getAntchainAtoTradeMerchantfulfillment(request: GetAntchainAtoTradeMerchantfulfillmentRequest): GetAntchainAtoTradeMerchantfulfillmentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getAntchainAtoTradeMerchantfulfillmentEx(request, headers, runtime);
}

/**
 * Description: 商户履约查询
 * Summary: 商户履约查询
 */
async function getAntchainAtoTradeMerchantfulfillmentEx(request: GetAntchainAtoTradeMerchantfulfillmentRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetAntchainAtoTradeMerchantfulfillmentResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.ato.trade.merchantfulfillment.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SyncAntchainAtoFundMerchantpromiseRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 订单id 
  orderId: string(maxLength=50, minLength=1, name='order_id'),
  // 订单所属商户的社会信用代码
  merchantId: string(maxLength=64, minLength=1, name='merchant_id'),
  // json字符串,填入「MerchantPromiseReq」的json字符串
  bizContent: string(minLength=1, name='biz_content'),
}

model SyncAntchainAtoFundMerchantpromiseResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 订单id
  orderId?: string(name='order_id'),
  // 订单所属商家社会信用代码
  merchantId?: string(name='merchant_id'),
}

/**
 * Description: 商户还款承诺同步
 * Summary: 商户还款承诺同步
 */
async function syncAntchainAtoFundMerchantpromise(request: SyncAntchainAtoFundMerchantpromiseRequest): SyncAntchainAtoFundMerchantpromiseResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return syncAntchainAtoFundMerchantpromiseEx(request, headers, runtime);
}

/**
 * Description: 商户还款承诺同步
 * Summary: 商户还款承诺同步
 */
async function syncAntchainAtoFundMerchantpromiseEx(request: SyncAntchainAtoFundMerchantpromiseRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SyncAntchainAtoFundMerchantpromiseResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.ato.fund.merchantpromise.sync', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SyncAntchainAtoFundFinanceloanresultsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 订单id
  orderId: string(maxLength=50, minLength=1, name='order_id'),
  // 商家的社会信用代码
  merchantId: string(maxLength=200, minLength=1, name='merchant_id'),
  // json字符串,填入「FinanceLoanResultsReq」的json字符串
  bizContent: string(minLength=1, name='biz_content'),
}

model SyncAntchainAtoFundFinanceloanresultsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 订单id
  orderId?: string(name='order_id'),
  // 订单所属商户的社会信用代码
  merchantId?: string(name='merchant_id'),
  // "ERROR": 放款同步异常
  // “SUCCESS":放款同步成功
  loanResult?: string(name='loan_result'),
}

/**
 * Description: 融资放款结果同步
 * Summary: 融资放款结果同步
 */
async function syncAntchainAtoFundFinanceloanresults(request: SyncAntchainAtoFundFinanceloanresultsRequest): SyncAntchainAtoFundFinanceloanresultsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return syncAntchainAtoFundFinanceloanresultsEx(request, headers, runtime);
}

/**
 * Description: 融资放款结果同步
 * Summary: 融资放款结果同步
 */
async function syncAntchainAtoFundFinanceloanresultsEx(request: SyncAntchainAtoFundFinanceloanresultsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SyncAntchainAtoFundFinanceloanresultsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.ato.fund.financeloanresults.sync', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetAntchainAtoFundUserpromiseRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 订单id
  orderId: string(maxLength=50, minLength=1, name='order_id'),
  // 订单所属商户的社会信用代码
  merchantId: string(maxLength=200, minLength=1, name='merchant_id'),
}

model GetAntchainAtoFundUserpromiseResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回值为「OrderPromise」的json字符串
  responseData?: string(name='response_data'),
}

/**
 * Description: 查询用户承诺
 * Summary: 查询用户承诺
 */
async function getAntchainAtoFundUserpromise(request: GetAntchainAtoFundUserpromiseRequest): GetAntchainAtoFundUserpromiseResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getAntchainAtoFundUserpromiseEx(request, headers, runtime);
}

/**
 * Description: 查询用户承诺
 * Summary: 查询用户承诺
 */
async function getAntchainAtoFundUserpromiseEx(request: GetAntchainAtoFundUserpromiseRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetAntchainAtoFundUserpromiseResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.ato.fund.userpromise.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetAntchainAtoTradeUserperformanceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 订单id
  orderId: string(maxLength=50, minLength=1, name='order_id'),
  // 商家公司社会信用代码
  merchantId: string(maxLength=64, minLength=1, name='merchant_id'),
}

model GetAntchainAtoTradeUserperformanceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 「UserPerformanceInfo」的json字符串
  responseData?: string(name='response_data'),
}

/**
 * Description: 用户履约信息查询（履约承诺+记录）
 * Summary: 用户履约信息查询（履约承诺+记录）
 */
async function getAntchainAtoTradeUserperformance(request: GetAntchainAtoTradeUserperformanceRequest): GetAntchainAtoTradeUserperformanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getAntchainAtoTradeUserperformanceEx(request, headers, runtime);
}

/**
 * Description: 用户履约信息查询（履约承诺+记录）
 * Summary: 用户履约信息查询（履约承诺+记录）
 */
async function getAntchainAtoTradeUserperformanceEx(request: GetAntchainAtoTradeUserperformanceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetAntchainAtoTradeUserperformanceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.ato.trade.userperformance.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetAntchainAtoTradeMerchantperformanceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 订单id
  orderId: string(maxLength=50, minLength=1, name='order_id'),
  // 订单所属商户的社会信用代码
  merchantId: string(maxLength=64, minLength=1, name='merchant_id'),
}

model GetAntchainAtoTradeMerchantperformanceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 「MerchantPerformanceInfo」的json字符串
  responseData?: string(name='response_data'),
}

/**
 * Description: 商户履约信息查询（履约承诺+履约记录）
 * Summary: 商户履约信息查询（履约承诺+履约记录）
 */
async function getAntchainAtoTradeMerchantperformance(request: GetAntchainAtoTradeMerchantperformanceRequest): GetAntchainAtoTradeMerchantperformanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getAntchainAtoTradeMerchantperformanceEx(request, headers, runtime);
}

/**
 * Description: 商户履约信息查询（履约承诺+履约记录）
 * Summary: 商户履约信息查询（履约承诺+履约记录）
 */
async function getAntchainAtoTradeMerchantperformanceEx(request: GetAntchainAtoTradeMerchantperformanceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetAntchainAtoTradeMerchantperformanceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.ato.trade.merchantperformance.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetAntchainAtoFundUserperformanceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 订单id 
  orderId: string(maxLength=64, minLength=1, name='order_id'),
  // 订单所属商户的社会信用代码
  merchantId: string(maxLength=64, minLength=1, name='merchant_id'),
  // 订单所属融资公司的社会信用代码
  fundId: string(maxLength=64, minLength=1, name='fund_id'),
}

model GetAntchainAtoFundUserperformanceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 「UserPerformanceInfo」的json字符串
  responseData?: string(name='response_data'),
}

/**
 * Description: 用户履约信息查询（履约承诺+履约记录）
 * Summary: 用户履约信息查询（履约承诺+履约记录）
 */
async function getAntchainAtoFundUserperformance(request: GetAntchainAtoFundUserperformanceRequest): GetAntchainAtoFundUserperformanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getAntchainAtoFundUserperformanceEx(request, headers, runtime);
}

/**
 * Description: 用户履约信息查询（履约承诺+履约记录）
 * Summary: 用户履约信息查询（履约承诺+履约记录）
 */
async function getAntchainAtoFundUserperformanceEx(request: GetAntchainAtoFundUserperformanceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetAntchainAtoFundUserperformanceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.ato.fund.userperformance.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetAntchainAtoFundMerchantperformanceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 订单id 
  orderId: string(maxLength=50, minLength=1, name='order_id'),
  // 订单所属商户的社会信用代码
  merchantId: string(maxLength=64, minLength=1, name='merchant_id'),
  // 订单所属融资方的社会信用代码
  fundId: string(maxLength=64, minLength=1, name='fund_id'),
}

model GetAntchainAtoFundMerchantperformanceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 「MerchantPerformanceInfo」的json字符串
  responseData?: string(name='response_data'),
}

/**
 * Description: 商户履约信息查询（履约承诺+履约记录）
 * Summary: 商户履约信息查询（履约承诺+履约记录）
 */
async function getAntchainAtoFundMerchantperformance(request: GetAntchainAtoFundMerchantperformanceRequest): GetAntchainAtoFundMerchantperformanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getAntchainAtoFundMerchantperformanceEx(request, headers, runtime);
}

/**
 * Description: 商户履约信息查询（履约承诺+履约记录）
 * Summary: 商户履约信息查询（履约承诺+履约记录）
 */
async function getAntchainAtoFundMerchantperformanceEx(request: GetAntchainAtoFundMerchantperformanceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetAntchainAtoFundMerchantperformanceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.ato.fund.merchantperformance.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetAntchainAtoFundOrderfullinfoRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 订单Id
  orderId: string(maxLength=50, minLength=1, name='order_id'),
  // 订单所属商户的社会信用代码
  merchantId: string(maxLength=64, minLength=1, name='merchant_id'),
  // 订单所属商户的社会信用代码
  fundId: string(maxLength=64, minLength=1, name='fund_id'),
}

model GetAntchainAtoFundOrderfullinfoResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // OrderFullInfoResp的json字符串
  responseData?: string(name='response_data'),
}

/**
 * Description: 资方查询订单详情
 * Summary: 资方查询订单详情
 */
async function getAntchainAtoFundOrderfullinfo(request: GetAntchainAtoFundOrderfullinfoRequest): GetAntchainAtoFundOrderfullinfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getAntchainAtoFundOrderfullinfoEx(request, headers, runtime);
}

/**
 * Description: 资方查询订单详情
 * Summary: 资方查询订单详情
 */
async function getAntchainAtoFundOrderfullinfoEx(request: GetAntchainAtoFundOrderfullinfoRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetAntchainAtoFundOrderfullinfoResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.ato.fund.orderfullinfo.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UploadAntchainAtoSignFlowRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 	
  // 订单所属商户的统一社会信用代码
  merchantId: string(name='merchant_id'),
  // 	
  // 商户的订单号
  orderId: string(name='order_id'),
  // 签署合同单号
  signNo: string(name='sign_no'),
  // 模板id
  templateId: string(name='template_id'),
  // 合同签署时间，格式为yyyy-MM-dd HH:mm:ss
  signTime: string(name='sign_time'),
  // 上传的pdf文件，需要以.pdf后缀结尾
  fileObject?: readable(description='待上传文件', ignore='true'),
  fileObjectName?: string(description='待上传文件名', ignore='true'),
  fileId: string(name='file_id'),
}

model UploadAntchainAtoSignFlowResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 文件编号
  fileItemNo?: string(name='file_item_no'),
}

/**
 * Description: 调用该接口，追加上传无法在原有链路上签署的合同
 * Summary: 商户调用合同追加接口
 */
async function uploadAntchainAtoSignFlow(request: UploadAntchainAtoSignFlowRequest): UploadAntchainAtoSignFlowResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return uploadAntchainAtoSignFlowEx(request, headers, runtime);
}

/**
 * Description: 调用该接口，追加上传无法在原有链路上签署的合同
 * Summary: 商户调用合同追加接口
 */
async function uploadAntchainAtoSignFlowEx(request: UploadAntchainAtoSignFlowRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UploadAntchainAtoSignFlowResponse {
  if (!Util.isUnset(request.fileObject)) {
    var uploadReq = new CreateAntcloudGatewayxFileUploadRequest{
      authToken = request.authToken,
      apiCode = 'antchain.ato.sign.flow.upload',
      fileName = request.fileObjectName,
    };
    var uploadResp = createAntcloudGatewayxFileUploadEx(uploadReq, headers, runtime);
    if (!AntchainUtil.isSuccess(uploadResp.resultCode, "ok")) {
      var uploadAntchainAtoSignFlowResponse = new UploadAntchainAtoSignFlowResponse{
        reqMsgId = uploadResp.reqMsgId,
        resultCode = uploadResp.resultCode,
        resultMsg = uploadResp.resultMsg,
      };
      return uploadAntchainAtoSignFlowResponse;
    }
    var uploadHeaders = AntchainUtil.parseUploadHeaders(uploadResp.uploadHeaders);
    AntchainUtil.putObject(request.fileObject, uploadHeaders, uploadResp.uploadUrl);
    request.fileId = uploadResp.fileId;
  }
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.ato.sign.flow.upload', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateAntchainAtoWithholdRefundRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 订单id
  orderId: string(maxLength=128, minLength=1, name='order_id'),
  // 第几期
  // 针对用户履约的第几期进行退款申请
  periodNum: long(minimum=1, name='period_num'),
  // 外部系统传入的退款请求号
  refundRequestNo: string(maxLength=128, minLength=1, name='refund_request_no'),
  // 本次请求的退款金额，单位为分
  // 1234=12.34元
  refundMoney: long(minimum=1, name='refund_money'),
  // 退款原因
  refundReason?: string(maxLength=200, name='refund_reason'),
}

model CreateAntchainAtoWithholdRefundResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 外部系统传入的退款请求号
  refundRequestNo?: string(name='refund_request_no'),
  // ACCEPT : 受理成功
  status?: string(name='status'),
  // 请求支付宝的退款单据号
  refundOrderNo?: string(name='refund_order_no'),
}

/**
 * Description: 创建退款请求
 * Summary: 创建退款申请
 */
async function createAntchainAtoWithholdRefund(request: CreateAntchainAtoWithholdRefundRequest): CreateAntchainAtoWithholdRefundResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createAntchainAtoWithholdRefundEx(request, headers, runtime);
}

/**
 * Description: 创建退款请求
 * Summary: 创建退款申请
 */
async function createAntchainAtoWithholdRefundEx(request: CreateAntchainAtoWithholdRefundRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateAntchainAtoWithholdRefundResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.ato.withhold.refund.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryAntchainAtoWithholdRefundRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 订单id
  orderId: string(maxLength=128, minLength=1, name='order_id'),
  // 几期
  // 针对用户履约的第几期进行退款申请
  periodNum: long(minimum=1, name='period_num'),
  // 外部系统传入的退款请求号
  refundRequestNo: string(maxLength=128, minLength=1, name='refund_request_no'),
}

model QueryAntchainAtoWithholdRefundResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 外部系统传入的退款请求号
  refundRequestNo?: string(name='refund_request_no'),
  // 请求支付宝的退款单据号
  refundOrderNo?: string(name='refund_order_no'),
  // 退款请求状态
  // ● ACCEPT: 受理成功
  // ● PENDING: 需人工介入
  // ● SUCCESS: 成功
  // ● FAILED : 失败
  status?: string(name='status'),
  // 退款失败原因
  refundErrorMsg?: string(name='refund_error_msg'),
  // 本笔交易总退款金额，单位为分
  // 12300=123元
  totalRefundAmount?: long(name='total_refund_amount'),
  // 本次退款申请的实际退款金额，单位为分
  // 12300=123元
  sendBackAmount?: long(name='send_back_amount'),
  // 实际退款时间,13位时间戳（毫秒）
  gmtRefundPay?: long(name='gmt_refund_pay'),
}

/**
 * Description: 退款申请结果查询
 * Summary: 退款申请结果查询
 */
async function queryAntchainAtoWithholdRefund(request: QueryAntchainAtoWithholdRefundRequest): QueryAntchainAtoWithholdRefundResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryAntchainAtoWithholdRefundEx(request, headers, runtime);
}

/**
 * Description: 退款申请结果查询
 * Summary: 退款申请结果查询
 */
async function queryAntchainAtoWithholdRefundEx(request: QueryAntchainAtoWithholdRefundRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAntchainAtoWithholdRefundResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.ato.withhold.refund.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateAntchainAtoTradeUserpromiseRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 订单id
  orderId: string(maxLength=49, minLength=6, name='order_id'),
  // 商家社会信用代码
  merchantId: string(maxLength=199, minLength=1, name='merchant_id'),
  // 修改的用户履约期数
  termIdx: long(name='term_idx'),
  // 更新后的租金，单位为分
  // 1234=12.34元
  updatedRentalMoney: long(name='updated_rental_money'),
  // 调整原因，枚举
  // ● A01 : 违章罚金
  // ● A02 : 水电煤费用
  reason: string(maxLength=10, minLength=1, name='reason'),
  // 调整说明，本说明同步到支付宝账户备注中，需准确填写
  desc: string(maxLength=64, minLength=1, name='desc'),
}

model UpdateAntchainAtoTradeUserpromiseResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 商户调用，修改订单的用户还款承诺
 * Summary: 用户还款承诺信息修改
 */
async function updateAntchainAtoTradeUserpromise(request: UpdateAntchainAtoTradeUserpromiseRequest): UpdateAntchainAtoTradeUserpromiseResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateAntchainAtoTradeUserpromiseEx(request, headers, runtime);
}

/**
 * Description: 商户调用，修改订单的用户还款承诺
 * Summary: 用户还款承诺信息修改
 */
async function updateAntchainAtoTradeUserpromiseEx(request: UpdateAntchainAtoTradeUserpromiseRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateAntchainAtoTradeUserpromiseResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.ato.trade.userpromise.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model NotifyAntchainAtoFundFlowRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 订单所属商户的统一社会信用代码
  merchantId: string(name='merchant_id'),
  // 商户的订单号
  orderId: string(name='order_id'),
  // 签署合同单号
  signNo: string(name='sign_no'),
  // 返回的文件fileItemNo编号
  fileItemNo: string(name='file_item_no'),
}

model NotifyAntchainAtoFundFlowResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 用于资方将盖章后的合同文件上传给ISV后，ISV通过该接口通知资方已上传合同
 * Summary: 资方合同文件已上传确认接口
 */
async function notifyAntchainAtoFundFlow(request: NotifyAntchainAtoFundFlowRequest): NotifyAntchainAtoFundFlowResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return notifyAntchainAtoFundFlowEx(request, headers, runtime);
}

/**
 * Description: 用于资方将盖章后的合同文件上传给ISV后，ISV通过该接口通知资方已上传合同
 * Summary: 资方合同文件已上传确认接口
 */
async function notifyAntchainAtoFundFlowEx(request: NotifyAntchainAtoFundFlowRequest, headers: map[string]string, runtime: Util.RuntimeOptions): NotifyAntchainAtoFundFlowResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.ato.fund.flow.notify', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SyncAntchainAtoFrontIndirectorderRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 业务参数,json.toString
  bizContent: string(minLength=1, name='biz_content'),
}

model SyncAntchainAtoFrontIndirectorderResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 前置签署间联模式订单进件
 * Summary: 前置签署间联模式订单进件
 */
async function syncAntchainAtoFrontIndirectorder(request: SyncAntchainAtoFrontIndirectorderRequest): SyncAntchainAtoFrontIndirectorderResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return syncAntchainAtoFrontIndirectorderEx(request, headers, runtime);
}

/**
 * Description: 前置签署间联模式订单进件
 * Summary: 前置签署间联模式订单进件
 */
async function syncAntchainAtoFrontIndirectorderEx(request: SyncAntchainAtoFrontIndirectorderRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SyncAntchainAtoFrontIndirectorderResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.ato.front.indirectorder.sync', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SyncAntchainAtoTradeIndirectorderRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 业务参数,json.toString
  bizContent: string(minLength=1, name='biz_content'),
}

model SyncAntchainAtoTradeIndirectorderResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 间联模式-后置模式订单进件
 * Summary: 间联模式-后置模式订单进件
 */
async function syncAntchainAtoTradeIndirectorder(request: SyncAntchainAtoTradeIndirectorderRequest): SyncAntchainAtoTradeIndirectorderResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return syncAntchainAtoTradeIndirectorderEx(request, headers, runtime);
}

/**
 * Description: 间联模式-后置模式订单进件
 * Summary: 间联模式-后置模式订单进件
 */
async function syncAntchainAtoTradeIndirectorderEx(request: SyncAntchainAtoTradeIndirectorderRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SyncAntchainAtoTradeIndirectorderResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.ato.trade.indirectorder.sync', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateAntcloudGatewayxFileUploadRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 上传文件作用的openapi method
  apiCode: string(name='api_code'),
  // 文件标签，多个标签;分割
  fileLabel?: string(maxLength=100, name='file_label'),
  // 自定义的文件元数据
  fileMetadata?: string(maxLength=1000, name='file_metadata'),
  // 文件名，不传则随机生成文件名
  fileName?: string(maxLength=100, name='file_name'),
  // 文件的多媒体类型
  mimeType?: string(name='mime_type'),
  // 产品方的api归属集群，即productInstanceId
  apiCluster?: string(name='api_cluster'),
}

model CreateAntcloudGatewayxFileUploadResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 上传有效期
  expiredTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='expired_time'),
  // 32位文件唯一id
  fileId?: string(name='file_id'),
  // 放入http请求头里
  uploadHeaders?: [ XNameValuePair ](name='upload_headers'),
  // 文件上传地址
  uploadUrl?: string(name='upload_url'),
}

/**
 * Description: 创建HTTP PUT提交的文件上传
 * Summary: 文件上传创建
 */
async function createAntcloudGatewayxFileUpload(request: CreateAntcloudGatewayxFileUploadRequest): CreateAntcloudGatewayxFileUploadResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createAntcloudGatewayxFileUploadEx(request, headers, runtime);
}

/**
 * Description: 创建HTTP PUT提交的文件上传
 * Summary: 文件上传创建
 */
async function createAntcloudGatewayxFileUploadEx(request: CreateAntcloudGatewayxFileUploadRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateAntcloudGatewayxFileUploadResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.gatewayx.file.upload.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

