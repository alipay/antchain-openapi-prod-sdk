// This file is auto-generated, don't edit it
import AntchainUtil from '@antchain/alipay-util';
import Util, * as $Util from '@alicloud/tea-util';
import RPCUtil from '@alicloud/rpc-util';
import { Readable } from 'stream';
import * as $tea from '@alicloud/tea-typescript';

/**
 * Model for initing client
 */
export class Config extends $tea.Model {
  accessKeyId?: string;
  accessKeySecret?: string;
  securityToken?: string;
  protocol?: string;
  readTimeout?: number;
  connectTimeout?: number;
  httpProxy?: string;
  httpsProxy?: string;
  endpoint?: string;
  noProxy?: string;
  maxIdleConns?: number;
  userAgent?: string;
  socks5Proxy?: string;
  socks5NetWork?: string;
  maxIdleTimeMillis?: number;
  keepAliveDurationMillis?: number;
  maxRequests?: number;
  maxRequestsPerHost?: number;
  static names(): { [key: string]: string } {
    return {
      accessKeyId: 'accessKeyId',
      accessKeySecret: 'accessKeySecret',
      securityToken: 'securityToken',
      protocol: 'protocol',
      readTimeout: 'readTimeout',
      connectTimeout: 'connectTimeout',
      httpProxy: 'httpProxy',
      httpsProxy: 'httpsProxy',
      endpoint: 'endpoint',
      noProxy: 'noProxy',
      maxIdleConns: 'maxIdleConns',
      userAgent: 'userAgent',
      socks5Proxy: 'socks5Proxy',
      socks5NetWork: 'socks5NetWork',
      maxIdleTimeMillis: 'maxIdleTimeMillis',
      keepAliveDurationMillis: 'keepAliveDurationMillis',
      maxRequests: 'maxRequests',
      maxRequestsPerHost: 'maxRequestsPerHost',
    };
  }

  static types(): { [key: string]: any } {
    return {
      accessKeyId: 'string',
      accessKeySecret: 'string',
      securityToken: 'string',
      protocol: 'string',
      readTimeout: 'number',
      connectTimeout: 'number',
      httpProxy: 'string',
      httpsProxy: 'string',
      endpoint: 'string',
      noProxy: 'string',
      maxIdleConns: 'number',
      userAgent: 'string',
      socks5Proxy: 'string',
      socks5NetWork: 'string',
      maxIdleTimeMillis: 'number',
      keepAliveDurationMillis: 'number',
      maxRequests: 'number',
      maxRequestsPerHost: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 数据授权服务审批流程节点结构体
export class ProcessNode extends $tea.Model {
  // 审批节点ID
  nodeId: string;
  // 节点名称
  nodeName: string;
  // 节点序号，从1开始编号
  nodeNum: number;
  static names(): { [key: string]: string } {
    return {
      nodeId: 'node_id',
      nodeName: 'node_name',
      nodeNum: 'node_num',
    };
  }

  static types(): { [key: string]: any } {
    return {
      nodeId: 'string',
      nodeName: 'string',
      nodeNum: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 蚂蚁链浏览器合约链交易内容
export class BlockchainBrowserTransactionContract extends $tea.Model {
  // data
  data: string;
  // from
  from: string;
  // to
  to: string;
  // gas
  gas: number;
  // hash
  hash: string;
  // nonce
  nonce: string;
  // period
  period: number;
  // signature_list
  signatureList: string[];
  // timestamp
  timestamp: number;
  // transaction_type
  transactionType: string;
  // value
  value: number;
  static names(): { [key: string]: string } {
    return {
      data: 'data',
      from: 'from',
      to: 'to',
      gas: 'gas',
      hash: 'hash',
      nonce: 'nonce',
      period: 'period',
      signatureList: 'signature_list',
      timestamp: 'timestamp',
      transactionType: 'transaction_type',
      value: 'value',
    };
  }

  static types(): { [key: string]: any } {
    return {
      data: 'string',
      from: 'string',
      to: 'string',
      gas: 'number',
      hash: 'string',
      nonce: 'string',
      period: 'number',
      signatureList: { 'type': 'array', 'itemType': 'string' },
      timestamp: 'number',
      transactionType: 'string',
      value: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// TriggerLogDTO类成员
export class PositionStructBody extends $tea.Model {
  // 错误计数
  errorCount?: string;
  // 高度
  height?: string;
  // 序号
  index?: string;
  // 最后一个错误
  lastError?: string;
  // 类型
  type?: string;
  static names(): { [key: string]: string } {
    return {
      errorCount: 'error_count',
      height: 'height',
      index: 'index',
      lastError: 'last_error',
      type: 'type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorCount: 'string',
      height: 'string',
      index: 'string',
      lastError: 'string',
      type: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 授权服务参与方结构体
export class Participant extends $tea.Model {
  // 业务系统唯一标示
  bizUid?: string;
  // 区块链ID
  blockchainId?: string;
  // 创建时间
  createTime: number;
  // 信用代码
  creditNumber?: string;
  // 扩展信息，标准JSON格式
  extensionInfo?: string;
  // 参与方名字
  name: string;
  // 回调通知服务地址
  notificationService?: string;
  // 参与方ID
  participantId: string;
  // DID  doc中的公开信息
  publicInfo?: string;
  // 参与方角色列表
  role: string[];
  // 空间ID
  spaceId?: string;
  // 参与方状态
  status?: string;
  // 更新时间
  updateTime: number;
  // 账户名称
  account?: string;
  static names(): { [key: string]: string } {
    return {
      bizUid: 'biz_uid',
      blockchainId: 'blockchain_id',
      createTime: 'create_time',
      creditNumber: 'credit_number',
      extensionInfo: 'extension_info',
      name: 'name',
      notificationService: 'notification_service',
      participantId: 'participant_id',
      publicInfo: 'public_info',
      role: 'role',
      spaceId: 'space_id',
      status: 'status',
      updateTime: 'update_time',
      account: 'account',
    };
  }

  static types(): { [key: string]: any } {
    return {
      bizUid: 'string',
      blockchainId: 'string',
      createTime: 'number',
      creditNumber: 'string',
      extensionInfo: 'string',
      name: 'string',
      notificationService: 'string',
      participantId: 'string',
      publicInfo: 'string',
      role: { 'type': 'array', 'itemType': 'string' },
      spaceId: 'string',
      status: 'string',
      updateTime: 'number',
      account: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 合约绑定关系
export class ContractBindResp extends $tea.Model {
  // 合约标识
  serviceId?: string;
  // 合约名称
  name?: string;
  // 是否已关联
  bind?: boolean;
  static names(): { [key: string]: string } {
    return {
      serviceId: 'service_id',
      name: 'name',
      bind: 'bind',
    };
  }

  static types(): { [key: string]: any } {
    return {
      serviceId: 'string',
      name: 'string',
      bind: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 节点类型
export class CrowdNodeTypeEnum extends $tea.Model {
  // 组合节点
  group?: string;
  // 条件节点
  condition?: string;
  static names(): { [key: string]: string } {
    return {
      group: 'group',
      condition: 'condition',
    };
  }

  static types(): { [key: string]: any } {
    return {
      group: 'string',
      condition: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 任务列表返回体
export class TaskListInfoDTO extends $tea.Model {
  // 任务名称
  taskName: string;
  // 任务ID
  taskId: string;
  // appId
  appId: string;
  // 自有ID
  surveyId: string;
  // 租户ID
  tenantId: string;
  // 租户名称
  tenantName: string;
  // 操作员
  operator: string;
  // 样本数量
  sampleNum: number;
  // 完成数量
  completedNum: number;
  // 甄别数量
  screenNum: number;
  // 样本总金额
  sampleTotalAmount: string;
  // 全额红包总金额
  redPacketTotalAmount: string;
  // 该任务总金额
  taskTotalAmount: string;
  // 全额红包金额
  fullRedPacketAmount: string;
  // 甄别红包金额
  examineRedPacketAmount: string;
  // 发证量
  issuedNum?: number;
  // 产品下单code类型（1-资源包 2-后付费）
  productCodeType: string;
  // 审核理由
  reviewContent?: string;
  // 任务状态：0-已删、1-已完成、2-审核未通过、3-暂停、4-投放中、5-暂停中未重启、6、投放中未暂停、7-投放中未调整、8-投放中未完成、9-待投放、10-草稿任务
  status: string;
  // ap状态，1:启用，0：审批中
  apStatus: string;
  // 奖励渠道（0-手动发支付宝余额 1-海豚红包 2-问卷自带）
  prizeChannel: number;
  // 奖励渠道为问卷自带时，全额红包信息
  fullRedPacketTextInfo?: string;
  // 修改时间
  gmtModified: string;
  // 创建时间
  gmtCreate: string;
  // 投放时间
  gmtOnline?: string;
  // 最近暂停/完成时间
  gmtPauseOrComplete?: string;
  // 最近一轮用时（h）
  lastRoundTime?: number;
  static names(): { [key: string]: string } {
    return {
      taskName: 'task_name',
      taskId: 'task_id',
      appId: 'app_id',
      surveyId: 'survey_id',
      tenantId: 'tenant_id',
      tenantName: 'tenant_name',
      operator: 'operator',
      sampleNum: 'sample_num',
      completedNum: 'completed_num',
      screenNum: 'screen_num',
      sampleTotalAmount: 'sample_total_amount',
      redPacketTotalAmount: 'red_packet_total_amount',
      taskTotalAmount: 'task_total_amount',
      fullRedPacketAmount: 'full_red_packet_amount',
      examineRedPacketAmount: 'examine_red_packet_amount',
      issuedNum: 'issued_num',
      productCodeType: 'product_code_type',
      reviewContent: 'review_content',
      status: 'status',
      apStatus: 'ap_status',
      prizeChannel: 'prize_channel',
      fullRedPacketTextInfo: 'full_red_packet_text_info',
      gmtModified: 'gmt_modified',
      gmtCreate: 'gmt_create',
      gmtOnline: 'gmt_online',
      gmtPauseOrComplete: 'gmt_pause_or_complete',
      lastRoundTime: 'last_round_time',
    };
  }

  static types(): { [key: string]: any } {
    return {
      taskName: 'string',
      taskId: 'string',
      appId: 'string',
      surveyId: 'string',
      tenantId: 'string',
      tenantName: 'string',
      operator: 'string',
      sampleNum: 'number',
      completedNum: 'number',
      screenNum: 'number',
      sampleTotalAmount: 'string',
      redPacketTotalAmount: 'string',
      taskTotalAmount: 'string',
      fullRedPacketAmount: 'string',
      examineRedPacketAmount: 'string',
      issuedNum: 'number',
      productCodeType: 'string',
      reviewContent: 'string',
      status: 'string',
      apStatus: 'string',
      prizeChannel: 'number',
      fullRedPacketTextInfo: 'string',
      gmtModified: 'string',
      gmtCreate: 'string',
      gmtOnline: 'string',
      gmtPauseOrComplete: 'string',
      lastRoundTime: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 阿里云联盟成员信息
export class ALiYunMember extends $tea.Model {
  // 加入时间
  joinTime?: number;
  // 成员id
  memberId?: string;
  // 成员名称
  memberName?: string;
  // 角色
  role?: string;
  // 状态
  status?: string;
  static names(): { [key: string]: string } {
    return {
      joinTime: 'join_time',
      memberId: 'member_id',
      memberName: 'member_name',
      role: 'role',
      status: 'status',
    };
  }

  static types(): { [key: string]: any } {
    return {
      joinTime: 'number',
      memberId: 'string',
      memberName: 'string',
      role: 'string',
      status: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 应用授权列表
export class ApplicationPageListResp extends $tea.Model {
  // 应用标识
  applicationId?: string;
  // 链ID
  accessKey?: string;
  // 合约(创建实例时填写的合约名称。)
  nameList?: string[];
  static names(): { [key: string]: string } {
    return {
      applicationId: 'application_id',
      accessKey: 'access_key',
      nameList: 'name_list',
    };
  }

  static types(): { [key: string]: any } {
    return {
      applicationId: 'string',
      accessKey: 'string',
      nameList: { 'type': 'array', 'itemType': 'string' },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 实例进度信息
export class InstanceProgressInfo extends $tea.Model {
  // 操作人
  operator?: string;
  // 操作时间
  time?: number;
  // 合约部署进度类型
  type?: string;
  // 部署状态
  status?: string;
  // 合约部署进度名称
  typeName?: string;
  // 额外参数
  data?: string;
  static names(): { [key: string]: string } {
    return {
      operator: 'operator',
      time: 'time',
      type: 'type',
      status: 'status',
      typeName: 'type_name',
      data: 'data',
    };
  }

  static types(): { [key: string]: any } {
    return {
      operator: 'string',
      time: 'number',
      type: 'string',
      status: 'string',
      typeName: 'string',
      data: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 授权服务数据模型结构体
export class DataModel extends $tea.Model {
  // 业务系统唯一标示
  bizUid?: string;
  // 空间ID
  spaceId: string;
  // 创建时间
  createTime: number;
  // 数据模型描述
  description?: string;
  // 模型字段详细信息
  fieldDetail: string;
  // 数据模型业务ID
  modelBizId?: string;
  // 数据模型ID
  modelId: string;
  // 数据模型名称
  name: string;
  // 提交人
  submitter: Participant;
  // 更新时间
  updateTime: number;
  // 状态
  status: string;
  static names(): { [key: string]: string } {
    return {
      bizUid: 'biz_uid',
      spaceId: 'space_id',
      createTime: 'create_time',
      description: 'description',
      fieldDetail: 'field_detail',
      modelBizId: 'model_biz_id',
      modelId: 'model_id',
      name: 'name',
      submitter: 'submitter',
      updateTime: 'update_time',
      status: 'status',
    };
  }

  static types(): { [key: string]: any } {
    return {
      bizUid: 'string',
      spaceId: 'string',
      createTime: 'number',
      description: 'string',
      fieldDetail: 'string',
      modelBizId: 'string',
      modelId: 'string',
      name: 'string',
      submitter: Participant,
      updateTime: 'number',
      status: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 授权流程节点详细信息
export class NodeDetail extends $tea.Model {
  // 节点审批意见
  comment: string;
  // 节点ID
  nodeId: string;
  // 节点名称
  nodeName: string;
  // 节点状态
  nodeStatus: string;
  // 节点审批时间
  operateTime: number;
  // 扩展参数
  extensionInfo?: string;
  static names(): { [key: string]: string } {
    return {
      comment: 'comment',
      nodeId: 'node_id',
      nodeName: 'node_name',
      nodeStatus: 'node_status',
      operateTime: 'operate_time',
      extensionInfo: 'extension_info',
    };
  }

  static types(): { [key: string]: any } {
    return {
      comment: 'string',
      nodeId: 'string',
      nodeName: 'string',
      nodeStatus: 'string',
      operateTime: 'number',
      extensionInfo: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 合约链配置信息结果
export class ContractIdeConfig extends $tea.Model {
  // 合约链的一个已创建的测试账户
  accountName: string;
  // 区块链唯一标识
  bizid: string;
  // 合约链的名字
  chainName: string;
  // 目标合约链的host地址
  host: string;
  // 说明是否开启wasm合约功能
  isWasm?: boolean;
  // 目标合约链服务公开的端口号
  port: string;
  // 合约链已创建的测试账户的密钥
  privateKey: string;
  // 如果是TEE硬件隐私合约链，会包含此字段内容
  rsaPublicKey?: string;
  // 合约链的版本说明
  version?: string;
  static names(): { [key: string]: string } {
    return {
      accountName: 'account_name',
      bizid: 'bizid',
      chainName: 'chain_name',
      host: 'host',
      isWasm: 'is_wasm',
      port: 'port',
      privateKey: 'private_key',
      rsaPublicKey: 'rsa_public_key',
      version: 'version',
    };
  }

  static types(): { [key: string]: any } {
    return {
      accountName: 'string',
      bizid: 'string',
      chainName: 'string',
      host: 'string',
      isWasm: 'boolean',
      port: 'string',
      privateKey: 'string',
      rsaPublicKey: 'string',
      version: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// {"key":"value"}
export class KeyValuePair extends $tea.Model {
  // 键名
  key: string;
  // 值
  value: string;
  static names(): { [key: string]: string } {
    return {
      key: 'key',
      value: 'value',
    };
  }

  static types(): { [key: string]: any } {
    return {
      key: 'string',
      value: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 日志存储类型
export class TriggerLogDTOStructBody extends $tea.Model {
  // 创建时间
  createTime?: string;
  // 修改时间
  modifyTime?: string;
  // 状态
  status?: string;
  // uuid
  uuid?: string;
  // 位置
  position?: PositionStructBody;
  static names(): { [key: string]: string } {
    return {
      createTime: 'create_time',
      modifyTime: 'modify_time',
      status: 'status',
      uuid: 'uuid',
      position: 'position',
    };
  }

  static types(): { [key: string]: any } {
    return {
      createTime: 'string',
      modifyTime: 'string',
      status: 'string',
      uuid: 'string',
      position: PositionStructBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 合约类型
export class ContractTypeListResp extends $tea.Model {
  // 名称
  name?: string;
  // 值
  value?: string;
  static names(): { [key: string]: string } {
    return {
      name: 'name',
      value: 'value',
    };
  }

  static types(): { [key: string]: any } {
    return {
      name: 'string',
      value: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 蚂蚁链浏览器交易信息
export class BlockchainBrowserTransaction extends $tea.Model {
  // bizid
  bizid: string;
  // block_hash
  blockHash: string;
  // category
  category: number;
  // create_time
  createTime: number;
  // from
  from: string;
  // gas_used
  gasUsed: number;
  // hash
  hash: string;
  // height
  height: number;
  // reference_count
  referenceCount: number;
  // to
  to: string;
  // transaction_type
  transactionType: string;
  // block_version
  blockVersion: number;
  // blockchain_name
  blockchainName: string;
  // blockchain_status
  blockchainStatus: boolean;
  // content
  content: string;
  // hash_status
  hashStatus: boolean;
  // type
  type: number;
  // transaction_contract
  transactionContract: BlockchainBrowserTransactionContract;
  static names(): { [key: string]: string } {
    return {
      bizid: 'bizid',
      blockHash: 'block_hash',
      category: 'category',
      createTime: 'create_time',
      from: 'from',
      gasUsed: 'gas_used',
      hash: 'hash',
      height: 'height',
      referenceCount: 'reference_count',
      to: 'to',
      transactionType: 'transaction_type',
      blockVersion: 'block_version',
      blockchainName: 'blockchain_name',
      blockchainStatus: 'blockchain_status',
      content: 'content',
      hashStatus: 'hash_status',
      type: 'type',
      transactionContract: 'transaction_contract',
    };
  }

  static types(): { [key: string]: any } {
    return {
      bizid: 'string',
      blockHash: 'string',
      category: 'number',
      createTime: 'number',
      from: 'string',
      gasUsed: 'number',
      hash: 'string',
      height: 'number',
      referenceCount: 'number',
      to: 'string',
      transactionType: 'string',
      blockVersion: 'number',
      blockchainName: 'string',
      blockchainStatus: 'boolean',
      content: 'string',
      hashStatus: 'boolean',
      type: 'number',
      transactionContract: BlockchainBrowserTransactionContract,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 阿里云蚂蚁链相关下载链接
export class ALiYunDownloadPath extends $tea.Model {
  // client_crt_url
  clientCrtUrl?: string;
  // trust_ca_url
  trustCaUrl?: string;
  // ca_crt_url
  caCrtUrl?: string;
  // sdk_url
  sdkUrl?: string;
  static names(): { [key: string]: string } {
    return {
      clientCrtUrl: 'client_crt_url',
      trustCaUrl: 'trust_ca_url',
      caCrtUrl: 'ca_crt_url',
      sdkUrl: 'sdk_url',
    };
  }

  static types(): { [key: string]: any } {
    return {
      clientCrtUrl: 'string',
      trustCaUrl: 'string',
      caCrtUrl: 'string',
      sdkUrl: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 阿里云子链结构体
export class ALiYunChainSubnet extends $tea.Model {
  // 子链id
  antChainId?: string;
  // 子链名称
  name?: string;
  // 子链节点数
  nodeSum?: number;
  // 子链监控状态
  monitor?: boolean;
  // 子链的块高
  blockHeight?: string;
  // 子链的业务总数
  transactionSum?: number;
  // 子链的创建时间
  createTime?: number;
  // 子链的状态
  status?: string;
  // 子链的权限
  consortiumMember?: boolean;
  // 主链id
  mainChainId?: string;
  // rest申请状态
  rest?: string;
  // 子链序号
  groupId?: string;
  static names(): { [key: string]: string } {
    return {
      antChainId: 'ant_chain_id',
      name: 'name',
      nodeSum: 'node_sum',
      monitor: 'monitor',
      blockHeight: 'block_height',
      transactionSum: 'transaction_sum',
      createTime: 'create_time',
      status: 'status',
      consortiumMember: 'consortium_member',
      mainChainId: 'main_chain_id',
      rest: 'rest',
      groupId: 'group_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      antChainId: 'string',
      name: 'string',
      nodeSum: 'number',
      monitor: 'boolean',
      blockHeight: 'string',
      transactionSum: 'number',
      createTime: 'number',
      status: 'string',
      consortiumMember: 'boolean',
      mainChainId: 'string',
      rest: 'string',
      groupId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// Did doc中的service info
export class DidServiceInfo extends $tea.Model {
  // 服务的end point info
  endPoint: string;
  // 扩展字段信息
  extensionInfo: string;
  static names(): { [key: string]: string } {
    return {
      endPoint: 'end_point',
      extensionInfo: 'extension_info',
    };
  }

  static types(): { [key: string]: any } {
    return {
      endPoint: 'string',
      extensionInfo: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 实例最近调用记录
export class InstanceRecordInfo extends $tea.Model {
  // 应用标识
  application?: string;
  // 执行结果
  status?: string;
  // 操作时间
  operatingTime?: string;
  static names(): { [key: string]: string } {
    return {
      application: 'application',
      status: 'status',
      operatingTime: 'operating_time',
    };
  }

  static types(): { [key: string]: any } {
    return {
      application: 'string',
      status: 'string',
      operatingTime: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 阿里云账户信息
export class ALiYunAccount extends $tea.Model {
  // ant_chain_id
  antChainId?: string;
  // account
  account?: string;
  // account_public_key
  accountPublicKey?: string;
  // account_recovery_key
  accountRecoveryKey?: string;
  // account_status
  accountStatus?: string;
  // 机构信息
  memberName?: string;
  // 创建时间
  createTime?: number;
  static names(): { [key: string]: string } {
    return {
      antChainId: 'ant_chain_id',
      account: 'account',
      accountPublicKey: 'account_public_key',
      accountRecoveryKey: 'account_recovery_key',
      accountStatus: 'account_status',
      memberName: 'member_name',
      createTime: 'create_time',
    };
  }

  static types(): { [key: string]: any } {
    return {
      antChainId: 'string',
      account: 'string',
      accountPublicKey: 'string',
      accountRecoveryKey: 'string',
      accountStatus: 'string',
      memberName: 'string',
      createTime: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 阿里云链节点信息
export class ALiYunChainNodeInfo extends $tea.Model {
  // block_height
  blockHeight?: number;
  // node_name
  nodeName?: string;
  // status
  status?: boolean;
  // version
  version?: string;
  // 节点id
  nodeId?: string;
  // 节点ip
  nodeIp?: string;
  // 节点的端口
  nodePort?: string;
  // 节点类型
  nodeType?: string;
  // 节点状态
  nodeState?: string;
  // 节点来源
  nodeSource?: string;
  // 节点存储空间使用量
  diskUse?: string;
  // 节点存储总空间大小
  diskTotal?: string;
  // 节点公钥
  publicKey?: string;
  static names(): { [key: string]: string } {
    return {
      blockHeight: 'block_height',
      nodeName: 'node_name',
      status: 'status',
      version: 'version',
      nodeId: 'node_id',
      nodeIp: 'node_ip',
      nodePort: 'node_port',
      nodeType: 'node_type',
      nodeState: 'node_state',
      nodeSource: 'node_source',
      diskUse: 'disk_use',
      diskTotal: 'disk_total',
      publicKey: 'public_key',
    };
  }

  static types(): { [key: string]: any } {
    return {
      blockHeight: 'number',
      nodeName: 'string',
      status: 'boolean',
      version: 'string',
      nodeId: 'string',
      nodeIp: 'string',
      nodePort: 'string',
      nodeType: 'string',
      nodeState: 'string',
      nodeSource: 'string',
      diskUse: 'string',
      diskTotal: 'string',
      publicKey: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// VC可信传输时，指定的目标did信息
export class VcTransmitTargetStruct extends $tea.Model {
  // 目标did的公钥
  publicKey?: string;
  // 传输vc使用的区块链id
  vcChannel?: string;
  // 验证者did
  verifierDid: string;
  static names(): { [key: string]: string } {
    return {
      publicKey: 'public_key',
      vcChannel: 'vc_channel',
      verifierDid: 'verifier_did',
    };
  }

  static types(): { [key: string]: any } {
    return {
      publicKey: 'string',
      vcChannel: 'string',
      verifierDid: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 人群标签对象
export class CrowdTagEnumItemDTO extends $tea.Model {
  // 枚举名称
  name: string;
  // 枚举值
  val: string;
  static names(): { [key: string]: string } {
    return {
      name: 'name',
      val: 'val',
    };
  }

  static types(): { [key: string]: any } {
    return {
      name: 'string',
      val: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 阿里云交易查询信息
export class ALiYunTransaction extends $tea.Model {
  // tx_type
  txType?: string;
  // data
  data?: string;
  // hash
  hash?: string;
  // from
  from?: string;
  // to
  to?: string;
  // timestamp
  timestamp?: number;
  // period
  period?: number;
  // nonce
  nonce?: string;
  // gas
  gas?: string;
  // value
  value?: string;
  // signatures
  signatures?: string[];
  // extentions
  extentions?: string[];
  static names(): { [key: string]: string } {
    return {
      txType: 'tx_type',
      data: 'data',
      hash: 'hash',
      from: 'from',
      to: 'to',
      timestamp: 'timestamp',
      period: 'period',
      nonce: 'nonce',
      gas: 'gas',
      value: 'value',
      signatures: 'signatures',
      extentions: 'extentions',
    };
  }

  static types(): { [key: string]: any } {
    return {
      txType: 'string',
      data: 'string',
      hash: 'string',
      from: 'string',
      to: 'string',
      timestamp: 'number',
      period: 'number',
      nonce: 'string',
      gas: 'string',
      value: 'string',
      signatures: { 'type': 'array', 'itemType': 'string' },
      extentions: { 'type': 'array', 'itemType': 'string' },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 阿里云存证链信息
export class ALiYunNotaryBlockchain extends $tea.Model {
  // name
  name?: string;
  // bizid
  bizid?: string;
  // chain_type
  chainType?: string;
  // node_num
  nodeNum?: number;
  // member_status
  memberStatus?: string;
  // block_height
  blockHeight?: number;
  // transactions
  transactions?: number;
  // network
  network?: string;
  // version
  version?: string;
  static names(): { [key: string]: string } {
    return {
      name: 'name',
      bizid: 'bizid',
      chainType: 'chain_type',
      nodeNum: 'node_num',
      memberStatus: 'member_status',
      blockHeight: 'block_height',
      transactions: 'transactions',
      network: 'network',
      version: 'version',
    };
  }

  static types(): { [key: string]: any } {
    return {
      name: 'string',
      bizid: 'string',
      chainType: 'string',
      nodeNum: 'number',
      memberStatus: 'string',
      blockHeight: 'number',
      transactions: 'number',
      network: 'string',
      version: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 合约市场列表
export class ContractTemplateResp extends $tea.Model {
  // 模板标识
  templateId?: string;
  // 产品码
  productCode?: string;
  // 合约名称
  name?: string;
  // 缩略图url
  thumbUrl?: string;
  // 合约描述
  description?: string;
  // 文档地址
  detailUrl?: string;
  // 是否已开通合约
  open?: boolean;
  // 后续展示：购买用户头像
  avatarLogoList?: string[];
  // 定制合约价格
  priceMessage?: string;
  static names(): { [key: string]: string } {
    return {
      templateId: 'template_id',
      productCode: 'product_code',
      name: 'name',
      thumbUrl: 'thumb_url',
      description: 'description',
      detailUrl: 'detail_url',
      open: 'open',
      avatarLogoList: 'avatar_logo_list',
      priceMessage: 'price_message',
    };
  }

  static types(): { [key: string]: any } {
    return {
      templateId: 'string',
      productCode: 'string',
      name: 'string',
      thumbUrl: 'string',
      description: 'string',
      detailUrl: 'string',
      open: 'boolean',
      avatarLogoList: { 'type': 'array', 'itemType': 'string' },
      priceMessage: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 数据授权服务数据对象结构体
export class DataEntity extends $tea.Model {
  // 授权状态
  authStatus?: string;
  // 业务系统唯一标示
  bizUid?: string;
  // 区块链ID
  blockchainId?: string;
  // 数据类别
  category: string;
  // 数据ID
  dataId: string;
  // 数据模型ID
  dataModelId?: string;
  // 扩展信息，标准JSON格式
  extensionInfo?: string;
  // 数据名称
  name: string;
  // 数据所有者ID
  ownerId: string;
  // 流程节点信息
  processTemplate?: ProcessNode[];
  // 数据状态
  status?: string;
  // 创建时间
  createTime: number;
  // 修改时间
  updateTime?: number;
  // DID doc里的公开信息
  publicInfo?: string;
  static names(): { [key: string]: string } {
    return {
      authStatus: 'auth_status',
      bizUid: 'biz_uid',
      blockchainId: 'blockchain_id',
      category: 'category',
      dataId: 'data_id',
      dataModelId: 'data_model_id',
      extensionInfo: 'extension_info',
      name: 'name',
      ownerId: 'owner_id',
      processTemplate: 'process_template',
      status: 'status',
      createTime: 'create_time',
      updateTime: 'update_time',
      publicInfo: 'public_info',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authStatus: 'string',
      bizUid: 'string',
      blockchainId: 'string',
      category: 'string',
      dataId: 'string',
      dataModelId: 'string',
      extensionInfo: 'string',
      name: 'string',
      ownerId: 'string',
      processTemplate: { 'type': 'array', 'itemType': ProcessNode },
      status: 'string',
      createTime: 'number',
      updateTime: 'number',
      publicInfo: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 阿里云蚂蚁链对象
export class ALiYunAntChain extends $tea.Model {
  // ant_chain_id
  antChainId?: string;
  // 链名称
  antChainName?: string;
  // 链的类型
  chainType?: string;
  // cipher_suit
  cipherSuit?: string;
  // 创建时间
  createTime?: number;
  // expire_time
  expireTime?: number;
  // instance_id
  instanceId?: string;
  // is_admin
  isAdmin?: boolean;
  // 成员状态
  memberStatus?: string;
  // merkle_tree_suit
  merkleTreeSuit?: string;
  // Network
  network?: string;
  // 节点数
  nodeNum?: number;
  // 区域信息
  regionId?: string;
  // 链的资源大小
  resourceSize?: string;
  // rest_status
  restStatus?: string;
  // 算法参数
  tlsAlgo?: string;
  // 版本信息
  version?: string;
  // monitor_status
  monitorStatus?: boolean;
  static names(): { [key: string]: string } {
    return {
      antChainId: 'ant_chain_id',
      antChainName: 'ant_chain_name',
      chainType: 'chain_type',
      cipherSuit: 'cipher_suit',
      createTime: 'create_time',
      expireTime: 'expire_time',
      instanceId: 'instance_id',
      isAdmin: 'is_admin',
      memberStatus: 'member_status',
      merkleTreeSuit: 'merkle_tree_suit',
      network: 'network',
      nodeNum: 'node_num',
      regionId: 'region_id',
      resourceSize: 'resource_size',
      restStatus: 'rest_status',
      tlsAlgo: 'tls_algo',
      version: 'version',
      monitorStatus: 'monitor_status',
    };
  }

  static types(): { [key: string]: any } {
    return {
      antChainId: 'string',
      antChainName: 'string',
      chainType: 'string',
      cipherSuit: 'string',
      createTime: 'number',
      expireTime: 'number',
      instanceId: 'string',
      isAdmin: 'boolean',
      memberStatus: 'string',
      merkleTreeSuit: 'string',
      network: 'string',
      nodeNum: 'number',
      regionId: 'string',
      resourceSize: 'string',
      restStatus: 'string',
      tlsAlgo: 'string',
      version: 'string',
      monitorStatus: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// Did Doc中的服务字段描述
export class DidDocServicesInfo extends $tea.Model {
  // 服务的扩展字段
  extension?: string;
  // 服务ID，必须保证该服务ID在did doc中是唯一的。对于保留类型服务：
  // DidAuthService， 有且只能有一个，并且id必须为didauth-1；
  // VerifiableClaimRepository， 有且只有一个，并且id必须为vcrepository-1;
  id: string;
  // 服务的可访问地址
  serviceEndpoint: string;
  // 服务类型，必须是已经注册的服务类型，或者是默认保留的服务类型
  type: string;
  static names(): { [key: string]: string } {
    return {
      extension: 'extension',
      id: 'id',
      serviceEndpoint: 'service_endpoint',
      type: 'type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      extension: 'string',
      id: 'string',
      serviceEndpoint: 'string',
      type: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 阿里云蚂蚁区块链证书信息
export class ALiYunCertificateApplication extends $tea.Model {
  // ant_chain_id
  antChainId?: string;
  // username
  username?: string;
  // createtime
  createtime?: number;
  // updatetime
  updatetime?: number;
  // bid
  bid?: string;
  // status
  status?: string;
  static names(): { [key: string]: string } {
    return {
      antChainId: 'ant_chain_id',
      username: 'username',
      createtime: 'createtime',
      updatetime: 'updatetime',
      bid: 'bid',
      status: 'status',
    };
  }

  static types(): { [key: string]: any } {
    return {
      antChainId: 'string',
      username: 'string',
      createtime: 'number',
      updatetime: 'number',
      bid: 'string',
      status: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// DidDoc中service的信息
export class DisServicesInfo extends $tea.Model {
  // did doc service扩展字段
  extesion?: string;
  // did doc service id
  id: string;
  // 服务endpoint
  serviceEndpoint: string;
  // service type
  type: string;
  // EXIST
  // CONFLICT
  // VALID
  // INVALID
  desc?: string;
  static names(): { [key: string]: string } {
    return {
      extesion: 'extesion',
      id: 'id',
      serviceEndpoint: 'service_endpoint',
      type: 'type',
      desc: 'desc',
    };
  }

  static types(): { [key: string]: any } {
    return {
      extesion: 'string',
      id: 'string',
      serviceEndpoint: 'string',
      type: 'string',
      desc: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 阿里云合约链信息
export class ALiYunContractBlockchain extends $tea.Model {
  // name
  name?: string;
  // bizid
  bizid?: string;
  // chain_type
  chainType?: string;
  // node_num
  nodeNum?: number;
  // member_status
  memberStatus?: string;
  // block_height
  blockHeight?: number;
  // transactions
  transactions?: number;
  // network
  network?: string;
  // version
  version?: string;
  static names(): { [key: string]: string } {
    return {
      name: 'name',
      bizid: 'bizid',
      chainType: 'chain_type',
      nodeNum: 'node_num',
      memberStatus: 'member_status',
      blockHeight: 'block_height',
      transactions: 'transactions',
      network: 'network',
      version: 'version',
    };
  }

  static types(): { [key: string]: any } {
    return {
      name: 'string',
      bizid: 'string',
      chainType: 'string',
      nodeNum: 'number',
      memberStatus: 'string',
      blockHeight: 'number',
      transactions: 'number',
      network: 'string',
      version: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 阿里云区块链小程序用户权限信息
export class ALiYunChainMiniAppAuthorizedUser extends $tea.Model {
  // phone
  phone?: string;
  // gmt_authorized
  gmtAuthorized?: string;
  // 记录id
  userId?: number;
  static names(): { [key: string]: string } {
    return {
      phone: 'phone',
      gmtAuthorized: 'gmt_authorized',
      userId: 'user_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      phone: 'string',
      gmtAuthorized: 'string',
      userId: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 阿里云合约工程信息
export class ALiYunContractProject extends $tea.Model {
  // consortium_id
  consortiumId?: string;
  // create_time
  createTime?: number;
  // project_description
  projectDescription?: string;
  // project_id
  projectId?: string;
  // project_name
  projectName?: string;
  // project_version
  projectVersion?: string;
  // update_time
  updateTime?: number;
  static names(): { [key: string]: string } {
    return {
      consortiumId: 'consortium_id',
      createTime: 'create_time',
      projectDescription: 'project_description',
      projectId: 'project_id',
      projectName: 'project_name',
      projectVersion: 'project_version',
      updateTime: 'update_time',
    };
  }

  static types(): { [key: string]: any } {
    return {
      consortiumId: 'string',
      createTime: 'number',
      projectDescription: 'string',
      projectId: 'string',
      projectName: 'string',
      projectVersion: 'string',
      updateTime: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 合约列表
export class ContractPageListResp extends $tea.Model {
  // 服务ID
  serviceId?: string;
  // 合约名称
  name?: string;
  // 合约类型
  type?: string;
  // 创建时间
  createTime?: number;
  static names(): { [key: string]: string } {
    return {
      serviceId: 'service_id',
      name: 'name',
      type: 'type',
      createTime: 'create_time',
    };
  }

  static types(): { [key: string]: any } {
    return {
      serviceId: 'string',
      name: 'string',
      type: 'string',
      createTime: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 阿里云区块链信息
export class ALiYunOldContractBlockchain extends $tea.Model {
  // name
  name?: string;
  // bizid
  bizid?: string;
  // chain_type
  chainType?: string;
  // node_num
  nodeNum?: number;
  // member_status
  memberStatus?: string;
  // block_height
  blockHeight?: number;
  // transactions
  transactions?: number;
  // network
  network?: string;
  // version
  version?: string;
  static names(): { [key: string]: string } {
    return {
      name: 'name',
      bizid: 'bizid',
      chainType: 'chain_type',
      nodeNum: 'node_num',
      memberStatus: 'member_status',
      blockHeight: 'block_height',
      transactions: 'transactions',
      network: 'network',
      version: 'version',
    };
  }

  static types(): { [key: string]: any } {
    return {
      name: 'string',
      bizid: 'string',
      chainType: 'string',
      nodeNum: 'number',
      memberStatus: 'string',
      blockHeight: 'number',
      transactions: 'number',
      network: 'string',
      version: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 分页属性
export class ALiYunPagination extends $tea.Model {
  // 分页大小
  pageSize?: number;
  // 分页编号
  pageNumber?: number;
  // 总数大小
  totalCount?: number;
  static names(): { [key: string]: string } {
    return {
      pageSize: 'page_size',
      pageNumber: 'page_number',
      totalCount: 'total_count',
    };
  }

  static types(): { [key: string]: any } {
    return {
      pageSize: 'number',
      pageNumber: 'number',
      totalCount: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 阿里云区块链交易的汇总信息
export class ALiYunTransactionSummary extends $tea.Model {
  // alias
  alias?: string;
  // hash
  hash?: string;
  // trans_type_v6
  transTypeV6?: string;
  // trans_type_v10
  transTypeV10?: string;
  // category
  category?: number;
  // height
  height?: number;
  // block_hash
  blockHash?: string;
  // create_time
  createTime?: number;
  // reference_count
  referenceCount?: number;
  // from
  from?: string;
  // to
  to?: string;
  // gas_used
  gasUsed?: number;
  static names(): { [key: string]: string } {
    return {
      alias: 'alias',
      hash: 'hash',
      transTypeV6: 'trans_type_v6',
      transTypeV10: 'trans_type_v10',
      category: 'category',
      height: 'height',
      blockHash: 'block_hash',
      createTime: 'create_time',
      referenceCount: 'reference_count',
      from: 'from',
      to: 'to',
      gasUsed: 'gas_used',
    };
  }

  static types(): { [key: string]: any } {
    return {
      alias: 'string',
      hash: 'string',
      transTypeV6: 'string',
      transTypeV10: 'string',
      category: 'number',
      height: 'number',
      blockHash: 'string',
      createTime: 'number',
      referenceCount: 'number',
      from: 'string',
      to: 'string',
      gasUsed: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 阿里云联盟信息
export class ALiYunAntConsortium extends $tea.Model {
  // 链的数量
  chainNum?: number;
  // 成员数量
  memberNum?: number;
  // 时间戳
  createTime?: number;
  // 角色
  role?: string;
  // 联盟id
  consortiumId?: string;
  // 状态值
  status?: string;
  // 联盟名称
  consortiumName?: string;
  // 联盟描述
  consortiumDescription?: string;
  // 是否为空联盟
  isEmptyConsortium?: boolean;
  static names(): { [key: string]: string } {
    return {
      chainNum: 'chain_num',
      memberNum: 'member_num',
      createTime: 'create_time',
      role: 'role',
      consortiumId: 'consortium_id',
      status: 'status',
      consortiumName: 'consortium_name',
      consortiumDescription: 'consortium_description',
      isEmptyConsortium: 'is_empty_consortium',
    };
  }

  static types(): { [key: string]: any } {
    return {
      chainNum: 'number',
      memberNum: 'number',
      createTime: 'number',
      role: 'string',
      consortiumId: 'string',
      status: 'string',
      consortiumName: 'string',
      consortiumDescription: 'string',
      isEmptyConsortium: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 阿里云数据导出任务checkpoint类
export class CheckPointStructBody extends $tea.Model {
  // 高度
  height?: string;
  // 序号
  index?: string;
  // 类型
  type?: string;
  // last_error
  lastError?: string;
  // 错误统计
  errorCount?: string;
  // 统计
  totalCount?: string;
  static names(): { [key: string]: string } {
    return {
      height: 'height',
      index: 'index',
      type: 'type',
      lastError: 'last_error',
      errorCount: 'error_count',
      totalCount: 'total_count',
    };
  }

  static types(): { [key: string]: any } {
    return {
      height: 'string',
      index: 'string',
      type: 'string',
      lastError: 'string',
      errorCount: 'string',
      totalCount: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 人群匹配结果
export class CrowdMatchResult extends $tea.Model {
  // 人群匹配结果
  match: boolean;
  static names(): { [key: string]: string } {
    return {
      match: 'match',
    };
  }

  static types(): { [key: string]: any } {
    return {
      match: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 账户映射情况
export class AccountMappingInfo extends $tea.Model {
  // 链上账户id
  bcAccount: string;
  // 账户绑定状态，1为未绑定，2为绑定成功
  bindingStatus: number;
  // 1是激活状态，2是冻结状态
  status: number;
  // 账户唯一标示
  uid: string;
  static names(): { [key: string]: string } {
    return {
      bcAccount: 'bc_account',
      bindingStatus: 'binding_status',
      status: 'status',
      uid: 'uid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      bcAccount: 'string',
      bindingStatus: 'number',
      status: 'number',
      uid: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 证书实例详情
export class CertInstanceDetail extends $tea.Model {
  // 主键
  bizId: string;
  // 实例名称
  name: string;
  // 版发者
  issuer: string;
  // 实例内容
  claimContent: string;
  // 状态；-1：已删除 0：审核未通过, 1：审核通过, 2：待审核, 3：编辑中
  status: number;
  // 审核建议
  verifyComment: string;
  // 创建时间
  gmtCreate: string;
  // 修改时间
  gmtModified: string;
  static names(): { [key: string]: string } {
    return {
      bizId: 'biz_id',
      name: 'name',
      issuer: 'issuer',
      claimContent: 'claim_content',
      status: 'status',
      verifyComment: 'verify_comment',
      gmtCreate: 'gmt_create',
      gmtModified: 'gmt_modified',
    };
  }

  static types(): { [key: string]: any } {
    return {
      bizId: 'string',
      name: 'string',
      issuer: 'string',
      claimContent: 'string',
      status: 'number',
      verifyComment: 'string',
      gmtCreate: 'string',
      gmtModified: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 蚂蚁链用途申报结构体
export class ChainPurpose extends $tea.Model {
  // 用途id
  id?: string;
  // 用途key
  key?: string;
  // 用途内容
  name?: string;
  // 用途申报时间
  time?: string;
  // 用途申报状态
  status?: string;
  // 简短描述开关
  item?: boolean;
  // 详细描述开关
  extend?: boolean;
  // 用途申报简短描述
  purposeItem?: string;
  static names(): { [key: string]: string } {
    return {
      id: 'id',
      key: 'key',
      name: 'name',
      time: 'time',
      status: 'status',
      item: 'item',
      extend: 'extend',
      purposeItem: 'purpose_item',
    };
  }

  static types(): { [key: string]: any } {
    return {
      id: 'string',
      key: 'string',
      name: 'string',
      time: 'string',
      status: 'string',
      item: 'boolean',
      extend: 'boolean',
      purposeItem: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 证书颁发校验错误描述
export class TemplateInstanceErrorDetailDTO extends $tea.Model {
  // 当前错误类型的错误行数
  errorNum: number;
  // 出错数据抽样
  samples: string[];
  // 出错列，从0开始
  errorColumnIndex: number;
  // 当前错误类型的描述
  errorDescription: string;
  static names(): { [key: string]: string } {
    return {
      errorNum: 'error_num',
      samples: 'samples',
      errorColumnIndex: 'error_column_index',
      errorDescription: 'error_description',
    };
  }

  static types(): { [key: string]: any } {
    return {
      errorNum: 'number',
      samples: { 'type': 'array', 'itemType': 'string' },
      errorColumnIndex: 'number',
      errorDescription: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 申请用户授权的目标可验证声明内容、过期时间等配置
export class Claim extends $tea.Model {
  // 一个json的string，内容包含具体需要的声明，不同业务场景不同。
  claimContent: string;
  // 如果在相同的biz_type下，还需要针对声明claim进行细化划分，可以使用此字段。
  claimType?: string;
  // 申请声明颁发后的有效期，可选参数，如果不指定则默认申请永久有效。
  expire?: number;
  // 授权颁发可验证声明的目标did信息，通常为机构或组织的did
  did?: string;
  // 目标待授权的名称，标定唯一性，与claim内容配合使用，如果不指定did可以考虑使用此字段。
  name?: string;
  static names(): { [key: string]: string } {
    return {
      claimContent: 'claim_content',
      claimType: 'claim_type',
      expire: 'expire',
      did: 'did',
      name: 'name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      claimContent: 'string',
      claimType: 'string',
      expire: 'number',
      did: 'string',
      name: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 阿里云子链检查结果
export class ALiYunChainSubnetCheck extends $tea.Model {
  // 检查结果
  checkResult?: string;
  // 子链成员列表
  consortiumMemberList?: string[];
  // 节点信息列表
  chainNodeInfoList?: ALiYunChainNodeInfo[];
  // 联盟管理员
  consortiumAdmin?: boolean;
  // 子链成员列表
  consortiumMemberInfoList?: ALiYunMember[];
  // 分页信息
  pagination?: ALiYunPagination;
  static names(): { [key: string]: string } {
    return {
      checkResult: 'check_result',
      consortiumMemberList: 'consortium_member_list',
      chainNodeInfoList: 'chain_node_info_list',
      consortiumAdmin: 'consortium_admin',
      consortiumMemberInfoList: 'consortium_member_info_list',
      pagination: 'pagination',
    };
  }

  static types(): { [key: string]: any } {
    return {
      checkResult: 'string',
      consortiumMemberList: { 'type': 'array', 'itemType': 'string' },
      chainNodeInfoList: { 'type': 'array', 'itemType': ALiYunChainNodeInfo },
      consortiumAdmin: 'boolean',
      consortiumMemberInfoList: { 'type': 'array', 'itemType': ALiYunMember },
      pagination: ALiYunPagination,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 授权规则详细信息
export class AuthorizationRule extends $tea.Model {
  // 规则来源
  source: string;
  // 规则索引
  index: string;
  // 规则类型
  type: string;
  // 规则表达式
  expression: string;
  // 规则内容
  content: string;
  static names(): { [key: string]: string } {
    return {
      source: 'source',
      index: 'index',
      type: 'type',
      expression: 'expression',
      content: 'content',
    };
  }

  static types(): { [key: string]: any } {
    return {
      source: 'string',
      index: 'string',
      type: 'string',
      expression: 'string',
      content: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 账户映射结果
export class AccountMappingResult extends $tea.Model {
  // 该账户在链上的唯一标示
  baccount: string;
  // 当前账户映射结果描述语句
  message: string;
  // 状态描述符
  status: string;
  // 自有系统中该账户唯一标示
  uid: string;
  static names(): { [key: string]: string } {
    return {
      baccount: 'baccount',
      message: 'message',
      status: 'status',
      uid: 'uid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      baccount: 'string',
      message: 'string',
      status: 'string',
      uid: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 可验证声明的完整内容以及状态，当前持有者的did等信息
export class VcContent extends $tea.Model {
  // 可验证声明的唯一标识id，status 为 “1” 时候非空
  vcId: string;
  // 可验证声明完整内容， status 为 “1” 时候非空
  vcContent: string;
  // 可验证声明的颁发状态说明： -1：颁发失败，0：未授权 1：授权成功，此时vc_content字段会包含授权后的声明内容，其它状态码，待定义后增加。
  status: string;
  // 被颁发当前可验证声明的目标did
  did?: string;
  // 如果status 是 “-1”，则说明当前可验证声明颁发失败，此字段说明失败原因。
  message?: string;
  static names(): { [key: string]: string } {
    return {
      vcId: 'vc_id',
      vcContent: 'vc_content',
      status: 'status',
      did: 'did',
      message: 'message',
    };
  }

  static types(): { [key: string]: any } {
    return {
      vcId: 'string',
      vcContent: 'string',
      status: 'string',
      did: 'string',
      message: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 用户身份、账户及手机号信息
export class UserInfoParam extends $tea.Model {
  // 用户手机号信息
  phone: string;
  // 用户账号信息
  userAccount: string;
  // 用户名称
  userName: string;
  static names(): { [key: string]: string } {
    return {
      phone: 'phone',
      userAccount: 'user_account',
      userName: 'user_name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      phone: 'string',
      userAccount: 'string',
      userName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 任务人群匹配返回列表
export class TaskCrowdMatchResp extends $tea.Model {
  // 任务ID
  taskId: string;
  // 人群匹配结果
  crowdMatchResult: CrowdMatchResult;
  static names(): { [key: string]: string } {
    return {
      taskId: 'task_id',
      crowdMatchResult: 'crowd_match_result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      taskId: 'string',
      crowdMatchResult: CrowdMatchResult,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 链详情
export class MyChainInfo extends $tea.Model {
  // 链id
  bizId: string;
  // 授权租户id
  tenant: string;
  static names(): { [key: string]: string } {
    return {
      bizId: 'biz_id',
      tenant: 'tenant',
    };
  }

  static types(): { [key: string]: any } {
    return {
      bizId: 'string',
      tenant: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 派生DID的具体参数
export class DeriveDid extends $tea.Model {
  // 派生的子did
  childdid: string;
  // 子did 的did doc
  childdiddoc: string;
  // 用户输入用于派生子did的派生码
  code: string;
  static names(): { [key: string]: string } {
    return {
      childdid: 'childdid',
      childdiddoc: 'childdiddoc',
      code: 'code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      childdid: 'string',
      childdiddoc: 'string',
      code: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 授权明细详情
export class AuthorizationDetail extends $tea.Model {
  // 授权凭证ID
  authorityCertId: string;
  // 授权ID
  authorizationId?: string;
  // 区块号
  blockNum: number;
  // 过期时间
  expire?: number;
  // 授权时间
  issuanceTime: number;
  // 授权人
  issuer: Participant;
  // 被授权人
  subject: Participant;
  // 哈希
  txHash: string;
  // 资产所有者
  owner: Participant;
  static names(): { [key: string]: string } {
    return {
      authorityCertId: 'authority_cert_id',
      authorizationId: 'authorization_id',
      blockNum: 'block_num',
      expire: 'expire',
      issuanceTime: 'issuance_time',
      issuer: 'issuer',
      subject: 'subject',
      txHash: 'tx_hash',
      owner: 'owner',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authorityCertId: 'string',
      authorizationId: 'string',
      blockNum: 'number',
      expire: 'number',
      issuanceTime: 'number',
      issuer: Participant,
      subject: Participant,
      txHash: 'string',
      owner: Participant,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 阿里云CloudIde的配置
export class ALiYunChainCloudIdeConfig extends $tea.Model {
  // bizid
  bizid?: string;
  // name
  name?: string;
  // trial_account
  trialAccount?: string;
  // trial_account_private_key
  trialAccountPrivateKey?: string;
  // ant_chain_id
  antChainId?: string;
  // ant_chain_name
  antChainName?: string;
  // version
  version?: string;
  static names(): { [key: string]: string } {
    return {
      bizid: 'bizid',
      name: 'name',
      trialAccount: 'trial_account',
      trialAccountPrivateKey: 'trial_account_private_key',
      antChainId: 'ant_chain_id',
      antChainName: 'ant_chain_name',
      version: 'version',
    };
  }

  static types(): { [key: string]: any } {
    return {
      bizid: 'string',
      name: 'string',
      trialAccount: 'string',
      trialAccountPrivateKey: 'string',
      antChainId: 'string',
      antChainName: 'string',
      version: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 创建应用响应信息
export class ApplicationCreateResp extends $tea.Model {
  // 应用标识
  applicationId?: string;
  static names(): { [key: string]: string } {
    return {
      applicationId: 'application_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      applicationId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 阿里云联盟返回结果
export class ALiYunUnion extends $tea.Model {
  // 联盟内链的集合
  antChains?: ALiYunAntChain[];
  // 联盟信息
  antConsortiums?: ALiYunAntConsortium[];
  // 联盟Id
  consortiumId?: string;
  // 联盟成员信息
  members?: ALiYunMember[];
  // 阿里云分页属性
  pagination?: ALiYunPagination;
  // is_exist
  isExist?: boolean;
  static names(): { [key: string]: string } {
    return {
      antChains: 'ant_chains',
      antConsortiums: 'ant_consortiums',
      consortiumId: 'consortium_id',
      members: 'members',
      pagination: 'pagination',
      isExist: 'is_exist',
    };
  }

  static types(): { [key: string]: any } {
    return {
      antChains: { 'type': 'array', 'itemType': ALiYunAntChain },
      antConsortiums: { 'type': 'array', 'itemType': ALiYunAntConsortium },
      consortiumId: 'string',
      members: { 'type': 'array', 'itemType': ALiYunMember },
      pagination: ALiYunPagination,
      isExist: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 数据授权服务公钥矩阵关系结构体
export class PublicKeyRelation extends $tea.Model {
  // 公钥颁发者ID
  issuerId: string;
  // 公钥接受者ID
  recipientId: string;
  static names(): { [key: string]: string } {
    return {
      issuerId: 'issuer_id',
      recipientId: 'recipient_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      issuerId: 'string',
      recipientId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 获取Afts文件上传地址返回值，包含地址和token
export class GetAftsUploadUrlResponse extends $tea.Model {
  // 11121312
  massToken: string;
  // 上传文件地址
  uploadUrl: string;
  static names(): { [key: string]: string } {
    return {
      massToken: 'mass_token',
      uploadUrl: 'upload_url',
    };
  }

  static types(): { [key: string]: any } {
    return {
      massToken: 'string',
      uploadUrl: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 合约类型
export class ContractTypeResp extends $tea.Model {
  // 合约服务类型
  typeList?: ContractTypeListResp[];
  static names(): { [key: string]: string } {
    return {
      typeList: 'type_list',
    };
  }

  static types(): { [key: string]: any } {
    return {
      typeList: { 'type': 'array', 'itemType': ContractTypeListResp },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 物流金融平台运单轨迹信息
export class LogisticLocation extends $tea.Model {
  // 结构化地址信息,规则遵循：国家、省份、城市、区县、城镇、乡村、街道、门牌号码、屋邨、大厦
  address?: string;
  // 行政区划代码
  cityCode?: string;
  // 纬度
  lat: string;
  // 经度
  lon: string;
  // 轨迹时间戳
  trackTime: number;
  static names(): { [key: string]: string } {
    return {
      address: 'address',
      cityCode: 'city_code',
      lat: 'lat',
      lon: 'lon',
      trackTime: 'track_time',
    };
  }

  static types(): { [key: string]: any } {
    return {
      address: 'string',
      cityCode: 'string',
      lat: 'string',
      lon: 'string',
      trackTime: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 阿里云订单结果
export class ALiYunOrderResult extends $tea.Model {
  // request_id
  requestId?: string;
  // data
  data?: string;
  // success
  success?: boolean;
  // code
  code?: string;
  // message
  message?: string;
  // synchro
  synchro?: boolean;
  static names(): { [key: string]: string } {
    return {
      requestId: 'request_id',
      data: 'data',
      success: 'success',
      code: 'code',
      message: 'message',
      synchro: 'synchro',
    };
  }

  static types(): { [key: string]: any } {
    return {
      requestId: 'string',
      data: 'string',
      success: 'boolean',
      code: 'string',
      message: 'string',
      synchro: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 批量查询商户下已映射的账户信息接口，返回的对象
export class QueryMappingBatchResult extends $tea.Model {
  // 本次查询获取的账户信息
  accounts: AccountMappingInfo[];
  // 该商户下总共映射账户的数量
  totalNum: number;
  // 该商户下账户信息的总页数
  totalPage: number;
  static names(): { [key: string]: string } {
    return {
      accounts: 'accounts',
      totalNum: 'total_num',
      totalPage: 'total_page',
    };
  }

  static types(): { [key: string]: any } {
    return {
      accounts: { 'type': 'array', 'itemType': AccountMappingInfo },
      totalNum: 'number',
      totalPage: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 阿里云区块链区块信息
export class ALiYunChainBlock extends $tea.Model {
  // ant_chain_id
  antChainId?: string;
  // block_hash
  blockHash?: string;
  // create_time
  createTime?: number;
  // height
  height?: number;
  // previous_hash
  previousHash?: string;
  // root_tx_hash
  rootTxHash?: string;
  // transaction_size
  transactionSize?: number;
  // trans_summary_list
  transSummaryList?: ALiYunTransactionSummary[];
  // Version
  version?: number;
  static names(): { [key: string]: string } {
    return {
      antChainId: 'ant_chain_id',
      blockHash: 'block_hash',
      createTime: 'create_time',
      height: 'height',
      previousHash: 'previous_hash',
      rootTxHash: 'root_tx_hash',
      transactionSize: 'transaction_size',
      transSummaryList: 'trans_summary_list',
      version: 'version',
    };
  }

  static types(): { [key: string]: any } {
    return {
      antChainId: 'string',
      blockHash: 'string',
      createTime: 'number',
      height: 'number',
      previousHash: 'string',
      rootTxHash: 'string',
      transactionSize: 'number',
      transSummaryList: { 'type': 'array', 'itemType': ALiYunTransactionSummary },
      version: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 应用授权列表查询
export class ApplicationPageResp extends $tea.Model {
  // 应用授权列表
  list?: ApplicationPageListResp[];
  // 总数
  total?: number;
  static names(): { [key: string]: string } {
    return {
      list: 'list',
      total: 'total',
    };
  }

  static types(): { [key: string]: any } {
    return {
      list: { 'type': 'array', 'itemType': ApplicationPageListResp },
      total: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// did中使用ZKP生成证明需要的信息
export class DidZKPInfo extends $tea.Model {
  // 需要生成证明的路径
  path: string;
  // 生成ZKP证明的公共信息
  publicInputs: string;
  // zkp方法
  zkpType: string;
  static names(): { [key: string]: string } {
    return {
      path: 'path',
      publicInputs: 'public_inputs',
      zkpType: 'zkp_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      path: 'string',
      publicInputs: 'string',
      zkpType: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 阿里云账户列表信息
export class ALiYunAccountList extends $tea.Model {
  // pagination
  pagination?: ALiYunPagination;
  // accounts
  accounts?: ALiYunAccount[];
  // 联盟管理员
  consortiumAdmin?: boolean;
  static names(): { [key: string]: string } {
    return {
      pagination: 'pagination',
      accounts: 'accounts',
      consortiumAdmin: 'consortium_admin',
    };
  }

  static types(): { [key: string]: any } {
    return {
      pagination: ALiYunPagination,
      accounts: { 'type': 'array', 'itemType': ALiYunAccount },
      consortiumAdmin: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 蚂蚁链用途申报结构体
export class AntChainPurposeResponse extends $tea.Model {
  // 用户申报用途状态
  status?: string;
  // 已申报的用途，比如供应链金融
  purpose?: string;
  // 申报时间
  createTime?: string;
  // 简短说明用途
  chainPurposeItem?: string;
  // 用途详情
  chainPurposeExtend?: string;
  // 申请用途列表
  recordList?: ChainPurpose[];
  static names(): { [key: string]: string } {
    return {
      status: 'status',
      purpose: 'purpose',
      createTime: 'create_time',
      chainPurposeItem: 'chain_purpose_item',
      chainPurposeExtend: 'chain_purpose_extend',
      recordList: 'record_list',
    };
  }

  static types(): { [key: string]: any } {
    return {
      status: 'string',
      purpose: 'string',
      createTime: 'string',
      chainPurposeItem: 'string',
      chainPurposeExtend: 'string',
      recordList: { 'type': 'array', 'itemType': ChainPurpose },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 阿里云交易收据
export class ALiYunTransactionReceipt extends $tea.Model {
  // data
  data?: string;
  // gas_used
  gasUsed?: string;
  // result
  result?: number;
  // logs
  logs?: string[];
  static names(): { [key: string]: string } {
    return {
      data: 'data',
      gasUsed: 'gas_used',
      result: 'result',
      logs: 'logs',
    };
  }

  static types(): { [key: string]: any } {
    return {
      data: 'string',
      gasUsed: 'string',
      result: 'number',
      logs: { 'type': 'array', 'itemType': 'string' },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 实例进度
export class ContractCreateProcessResp extends $tea.Model {
  // 当前进度信息
  status?: string;
  // 合约部署进度
  progressInfoList?: InstanceProgressInfo[];
  static names(): { [key: string]: string } {
    return {
      status: 'status',
      progressInfoList: 'progress_info_list',
    };
  }

  static types(): { [key: string]: any } {
    return {
      status: 'string',
      progressInfoList: { 'type': 'array', 'itemType': InstanceProgressInfo },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 新建合约服务
export class ContractCreateResp extends $tea.Model {
  // 合约标识
  serviceId?: string;
  static names(): { [key: string]: string } {
    return {
      serviceId: 'service_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      serviceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 内部建链信息查询
export class CreateBlockchainInfo extends $tea.Model {
  // 链id
  bizid: string;
  // 链的状态
  blockchainStatus: string;
  // 链的类型
  blockchainType: string;
  // 链的名称
  blockchainName: string;
  // 节点数量
  blockchanNodeNum: number;
  // 创建时间
  blockchainCreateTime: number;
  static names(): { [key: string]: string } {
    return {
      bizid: 'bizid',
      blockchainStatus: 'blockchain_status',
      blockchainType: 'blockchain_type',
      blockchainName: 'blockchain_name',
      blockchanNodeNum: 'blockchan_node_num',
      blockchainCreateTime: 'blockchain_create_time',
    };
  }

  static types(): { [key: string]: any } {
    return {
      bizid: 'string',
      blockchainStatus: 'string',
      blockchainType: 'string',
      blockchainName: 'string',
      blockchanNodeNum: 'number',
      blockchainCreateTime: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// VC分享的结果
export class VcShareResult extends $tea.Model {
  // 目标分享的VC的id
  vcId: string;
  // 分享给目标接受者的did
  targetDid: string;
  // 分享链上VC数据的交易hash，可用于直连区块链查询交易内容时使用。
  txHash?: string;
  // 分享是否成功，true：成功，false：失败
  status: boolean;
  // 失败的对应原因信息
  msg?: string;
  static names(): { [key: string]: string } {
    return {
      vcId: 'vc_id',
      targetDid: 'target_did',
      txHash: 'tx_hash',
      status: 'status',
      msg: 'msg',
    };
  }

  static types(): { [key: string]: any } {
    return {
      vcId: 'string',
      targetDid: 'string',
      txHash: 'string',
      status: 'boolean',
      msg: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 合约加密字段
export class ContractEncryptKeyItem extends $tea.Model {
  // 字段对应的id
  key: string;
  // 0:encrypt_text,
  // 1:encrypt_array_text,
  // 2:encrypt_int
  // 3:encrypt_array_int
  type: number;
  // 字段对应的数据
  value: string;
  static names(): { [key: string]: string } {
    return {
      key: 'key',
      type: 'type',
      value: 'value',
    };
  }

  static types(): { [key: string]: any } {
    return {
      key: 'string',
      type: 'number',
      value: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// did更新事件
export class DidEvent extends $tea.Model {
  // 事件对应的合约方法
  action: string;
  // 对应did
  did: string;
  // did对应doc
  didDoc: string;
  // 本次事件的触发者
  from: string;
  // 6500
  height: number;
  // 交易hash
  txHash: string;
  // 交易在区块中的index
  txIndex: number;
  static names(): { [key: string]: string } {
    return {
      action: 'action',
      did: 'did',
      didDoc: 'did_doc',
      from: 'from',
      height: 'height',
      txHash: 'tx_hash',
      txIndex: 'tx_index',
    };
  }

  static types(): { [key: string]: any } {
    return {
      action: 'string',
      did: 'string',
      didDoc: 'string',
      from: 'string',
      height: 'number',
      txHash: 'string',
      txIndex: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// Vc可信传输实际参数
export class VcTransmitPayload extends $tea.Model {
  // 目标did相关信息列表
  targetVerifier: VcTransmitTargetStruct[];
  // 要传输的vc_id
  vcId: string;
  // vc原文，如果vc原文出现在传输接口，那么VC仓库不会从本地查找，而是直接将传输的VC上链
  vcContent?: string;
  static names(): { [key: string]: string } {
    return {
      targetVerifier: 'target_verifier',
      vcId: 'vc_id',
      vcContent: 'vc_content',
    };
  }

  static types(): { [key: string]: any } {
    return {
      targetVerifier: { 'type': 'array', 'itemType': VcTransmitTargetStruct },
      vcId: 'string',
      vcContent: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 阿里云合约内容
export class ALiYunChainContractContent extends $tea.Model {
  // content
  content?: string;
  // content_id
  contentId?: string;
  // content_name
  contentName?: string;
  // create_time
  createTime?: number;
  // is_directory
  isDirectory?: boolean;
  // parent_content_id
  parentContentId?: string;
  // project_id
  projectId?: string;
  // update_time
  updateTime?: number;
  static names(): { [key: string]: string } {
    return {
      content: 'content',
      contentId: 'content_id',
      contentName: 'content_name',
      createTime: 'create_time',
      isDirectory: 'is_directory',
      parentContentId: 'parent_content_id',
      projectId: 'project_id',
      updateTime: 'update_time',
    };
  }

  static types(): { [key: string]: any } {
    return {
      content: 'string',
      contentId: 'string',
      contentName: 'string',
      createTime: 'number',
      isDirectory: 'boolean',
      parentContentId: 'string',
      projectId: 'string',
      updateTime: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 结果
export class Result extends $tea.Model {
  // 联盟id
  consortiumId: string;
  static names(): { [key: string]: string } {
    return {
      consortiumId: 'consortium_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      consortiumId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 更新did doc中的service信息
export class UpdateDidService extends $tea.Model {
  // 待更新did之前的版本号
  previousVersion: number;
  // did doc中的service id
  serviceId: string;
  // 服务信息
  serviceInfo: DidServiceInfo;
  // 服务类型
  serviceType: string;
  static names(): { [key: string]: string } {
    return {
      previousVersion: 'previous_version',
      serviceId: 'service_id',
      serviceInfo: 'service_info',
      serviceType: 'service_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      previousVersion: 'number',
      serviceId: 'string',
      serviceInfo: DidServiceInfo,
      serviceType: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 包含业务组的用户信息
export class AccountInfoWithBiz extends $tea.Model {
  // 注册地址
  address?: string;
  // 业务场景code
  bizCode: string;
  // 业务名称
  bizName: string;
  // 业务类型，预留
  bizType?: string;
  // 用户创建时间，格式yyyy-MM-dd HH:mm:ss
  createTime?: string;
  // 用户注销时间，格式yyyy-MM-dd HH:mm:ss
  endTime?: string;
  // 扩展字段，使用json格式
  extension?: string;
  // 业务组code
  groupCode: string;
  // 业务组名称
  groupName: string;
  // 唯一标示类型，0:统一信用代码,1:开票机构代码,2:身份证号
  identityType?: number;
  // 唯一标示码
  identityValue?: string;
  // 用户标签
  label?: string;
  // 间连用户的上层直连用户名称
  parent?: string;
  // 统计时间，时间格式：yyyy-MM-dd HH:mm:ss
  statDate?: string;
  // 用户id
  userId?: string;
  // 用户或企业名称
  userName?: string;
  // 用户类型：direct直连，indirect间连，partner合作伙伴
  userType?: string;
  static names(): { [key: string]: string } {
    return {
      address: 'address',
      bizCode: 'biz_code',
      bizName: 'biz_name',
      bizType: 'biz_type',
      createTime: 'create_time',
      endTime: 'end_time',
      extension: 'extension',
      groupCode: 'group_code',
      groupName: 'group_name',
      identityType: 'identity_type',
      identityValue: 'identity_value',
      label: 'label',
      parent: 'parent',
      statDate: 'stat_date',
      userId: 'user_id',
      userName: 'user_name',
      userType: 'user_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      address: 'string',
      bizCode: 'string',
      bizName: 'string',
      bizType: 'string',
      createTime: 'string',
      endTime: 'string',
      extension: 'string',
      groupCode: 'string',
      groupName: 'string',
      identityType: 'number',
      identityValue: 'string',
      label: 'string',
      parent: 'string',
      statDate: 'string',
      userId: 'string',
      userName: 'string',
      userType: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 基础车辆信息
export class BasicCarInfo extends $tea.Model {
  // 车牌号码
  licenseNo: string;
  // 车架号
  vin: string;
  // 发动机号
  engineNo: string;
  // 初登日期
  registerDate: string;
  // 车辆型号
  modelCode: string;
  // 营运性质
  useNatureCode: string;
  static names(): { [key: string]: string } {
    return {
      licenseNo: 'license_no',
      vin: 'vin',
      engineNo: 'engine_no',
      registerDate: 'register_date',
      modelCode: 'model_code',
      useNatureCode: 'use_nature_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      licenseNo: 'string',
      vin: 'string',
      engineNo: 'string',
      registerDate: 'string',
      modelCode: 'string',
      useNatureCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 物流金融信用凭证信息
export class IssueInfo extends $tea.Model {
  // 信用流转批次号
  batchId?: string;
  // 合同编号
  contractId?: string;
  // 信用凭证额度
  creditLimit?: string;
  // 失败原因信息
  errMsg?: string;
  // 信用凭证到期时间
  expireDate?: string;
  // 信用凭证发起时间
  issueDate?: string;
  // 信用流转凭证
  issueId?: string;
  // 发行结果状态 
  // -1:发行失败状态， 0:未完成状态， 1:已发行状态
  status?: number;
  // 发行信用流转的运单号
  waybillId?: string;
  static names(): { [key: string]: string } {
    return {
      batchId: 'batch_id',
      contractId: 'contract_id',
      creditLimit: 'credit_limit',
      errMsg: 'err_msg',
      expireDate: 'expire_date',
      issueDate: 'issue_date',
      issueId: 'issue_id',
      status: 'status',
      waybillId: 'waybill_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      batchId: 'string',
      contractId: 'string',
      creditLimit: 'string',
      errMsg: 'string',
      expireDate: 'string',
      issueDate: 'string',
      issueId: 'string',
      status: 'number',
      waybillId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 查看应用秘钥响应信息
export class ApplicationGetSkResp extends $tea.Model {
  // 应用秘钥
  sk?: string;
  static names(): { [key: string]: string } {
    return {
      sk: 'sk',
    };
  }

  static types(): { [key: string]: any } {
    return {
      sk: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 分页失败的展示日志（过滤器：待处理、成功、已忽略）
export class CommonResponsePageableStructBody extends $tea.Model {
  // 页面规格
  pageSize?: string;
  // 当前页码
  current?: string;
  // 总条数
  total?: string;
  // 失败日志数组
  list?: TriggerLogDTOStructBody[];
  static names(): { [key: string]: string } {
    return {
      pageSize: 'page_size',
      current: 'current',
      total: 'total',
      list: 'list',
    };
  }

  static types(): { [key: string]: any } {
    return {
      pageSize: 'string',
      current: 'string',
      total: 'string',
      list: { 'type': 'array', 'itemType': TriggerLogDTOStructBody },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 阿里云售卖区信息
export class ALiYunChainRegion extends $tea.Model {
  // region_id
  regionId?: string;
  // region_name
  regionName?: string;
  static names(): { [key: string]: string } {
    return {
      regionId: 'region_id',
      regionName: 'region_name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      regionId: 'string',
      regionName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 阿里云售卖联盟信息
export class ALiYunBuyUnion extends $tea.Model {
  // consortium_name
  consortiumName?: string;
  // consortium_id
  consortiumId?: string;
  static names(): { [key: string]: string } {
    return {
      consortiumName: 'consortium_name',
      consortiumId: 'consortium_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      consortiumName: 'string',
      consortiumId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 分享可验证声明时的核心内容
export class VcShareStruct extends $tea.Model {
  // 分享的目标VC的id
  vcId: string;
  // 目标的VC持有者的did
  ownerDid: string;
  // 在支持声明的claim字段级别分享能力时使用，可以指定哪些字段隐藏，哪些字段分享。示例中标记为”1“的是隐藏，”0“的是分享明文。
  index?: string;
  // 非托管模式下owner_did的签名，作为授权凭证
  signature?: string;
  static names(): { [key: string]: string } {
    return {
      vcId: 'vc_id',
      ownerDid: 'owner_did',
      index: 'index',
      signature: 'signature',
    };
  }

  static types(): { [key: string]: any } {
    return {
      vcId: 'string',
      ownerDid: 'string',
      index: 'string',
      signature: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 小程序浏览器授权类型
export class MiniAppBrowserAuthType extends $tea.Model {
  // 授权类型
  authType: string;
  static names(): { [key: string]: string } {
    return {
      authType: 'auth_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authType: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 链上交易信息
export class TxInfo extends $tea.Model {
  // 上链结果
  txReceiptResult: string;
  // 区块链id
  bizId: string;
  // 交易hash
  txHash: string;
  // 交易类型
  txType: string;
  // 时间戳
  timestamp: number;
  // 区块高度
  blockNumber: string;
  // 交易随机数Nonce
  nonce: string;
  // 发起地址
  from: string;
  // 目标地址
  to: string;
  // 签名
  signature: string;
  static names(): { [key: string]: string } {
    return {
      txReceiptResult: 'tx_receipt_result',
      bizId: 'biz_id',
      txHash: 'tx_hash',
      txType: 'tx_type',
      timestamp: 'timestamp',
      blockNumber: 'block_number',
      nonce: 'nonce',
      from: 'from',
      to: 'to',
      signature: 'signature',
    };
  }

  static types(): { [key: string]: any } {
    return {
      txReceiptResult: 'string',
      bizId: 'string',
      txHash: 'string',
      txType: 'string',
      timestamp: 'number',
      blockNumber: 'string',
      nonce: 'string',
      from: 'string',
      to: 'string',
      signature: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 服务发现结果
export class ServiceDiscoveryResult extends $tea.Model {
  // 提供该服务能力的did
  did: string;
  // 提供该服务能力的endpoint信息
  services: DidDocServicesInfo[];
  static names(): { [key: string]: string } {
    return {
      did: 'did',
      services: 'services',
    };
  }

  static types(): { [key: string]: any } {
    return {
      did: 'string',
      services: { 'type': 'array', 'itemType': DidDocServicesInfo },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 蚂蚁链交易汇总信息
export class BlockchainBrowserTransactionStatistic extends $tea.Model {
  // 蚂蚁链id
  bizid: string;
  // 开始时间
  createTime: number;
  // 时间点
  dateTime: string;
  // 统计时间内最新块高度
  lastSumBlockHeight: number;
  // 统计周期内交易的数量
  transCount: number;
  static names(): { [key: string]: string } {
    return {
      bizid: 'bizid',
      createTime: 'create_time',
      dateTime: 'date_time',
      lastSumBlockHeight: 'last_sum_block_height',
      transCount: 'trans_count',
    };
  }

  static types(): { [key: string]: any } {
    return {
      bizid: 'string',
      createTime: 'number',
      dateTime: 'string',
      lastSumBlockHeight: 'number',
      transCount: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 阿里云区块链Rest信息
export class ALiYunChainRest extends $tea.Model {
  // access_id
  accessId?: string;
  // create_time
  createTime?: number;
  // rest
  rest?: string;
  // update_time
  updateTime?: number;
  // REST开通结果
  result?: string;
  static names(): { [key: string]: string } {
    return {
      accessId: 'access_id',
      createTime: 'create_time',
      rest: 'rest',
      updateTime: 'update_time',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      accessId: 'string',
      createTime: 'number',
      rest: 'string',
      updateTime: 'number',
      result: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 通过controller注册用户
export class VcControllerAddUserRegisterPayload extends $tea.Model {
  // 注册用户did
  did: string;
  // 用户did对应的授权公钥
  publicKey: string;
  // 业务区块连的bizid
  vcChannel?: string;
  static names(): { [key: string]: string } {
    return {
      did: 'did',
      publicKey: 'public_key',
      vcChannel: 'vc_channel',
    };
  }

  static types(): { [key: string]: any } {
    return {
      did: 'string',
      publicKey: 'string',
      vcChannel: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 账户信息
export class AccountInfo extends $tea.Model {
  // 版通数量
  epAmount: number;
  // 版通代码
  epCode: string;
  static names(): { [key: string]: string } {
    return {
      epAmount: 'ep_amount',
      epCode: 'ep_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      epAmount: 'number',
      epCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 阿里云区块链配置信息
export class ALiYunChainConfigOption extends $tea.Model {
  // config_option
  configOption?: string;
  // show_name
  showName?: string;
  // enable
  enable?: boolean;
  static names(): { [key: string]: string } {
    return {
      configOption: 'config_option',
      showName: 'show_name',
      enable: 'enable',
    };
  }

  static types(): { [key: string]: any } {
    return {
      configOption: 'string',
      showName: 'string',
      enable: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 删除资源返回结果
export class ALiYunDeleteResource extends $tea.Model {
  // data
  data?: boolean;
  // success
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      data: 'data',
      success: 'success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      data: 'boolean',
      success: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 交易详情
export class TransactionInfo extends $tea.Model {
  // 交易时间戳
  timestamp: number;
  // 交易hash
  hash: string;
  // 交易块高
  height: number;
  // 交易所在块高
  blockhash: string;
  // 交易来源
  from: string;
  // 交易地址
  to: string;
  // 交易类型
  txtype: number;
  // 转账额度
  value: number;
  // logs
  logs: string;
  // 燃料消耗
  gasused: number;
  // result
  result: string;
  // 拓展json字段
  json: string;
  static names(): { [key: string]: string } {
    return {
      timestamp: 'timestamp',
      hash: 'hash',
      height: 'height',
      blockhash: 'blockhash',
      from: 'from',
      to: 'to',
      txtype: 'txtype',
      value: 'value',
      logs: 'logs',
      gasused: 'gasused',
      result: 'result',
      json: 'json',
    };
  }

  static types(): { [key: string]: any } {
    return {
      timestamp: 'number',
      hash: 'string',
      height: 'number',
      blockhash: 'string',
      from: 'string',
      to: 'string',
      txtype: 'number',
      value: 'number',
      logs: 'string',
      gasused: 'number',
      result: 'string',
      json: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 阿里云区块链小程序权限控制信息
export class ALiYunChainMiniAppAuthorization extends $tea.Model {
  // ant_chain_id
  antChainId?: string;
  // q_r_code_type
  qRCodeType?: string;
  // authorization_type
  authorizationType?: string;
  static names(): { [key: string]: string } {
    return {
      antChainId: 'ant_chain_id',
      qRCodeType: 'q_r_code_type',
      authorizationType: 'authorization_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      antChainId: 'string',
      qRCodeType: 'string',
      authorizationType: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 历史任务信息
export class OldTaskInfo extends $tea.Model {
  // 任务标题(同一个租户不能重复)
  taskName: string;
  // appId
  appId: string;
  // 问卷ID
  surveyId: string;
  // 备注信息
  notes?: string;
  // 租户ID
  tenantId: string;
  // 操作者
  operator: string;
  // banner标题
  bannerTitle: string;
  // banner图片地址（最多支持3张）
  bannerImageUrls?: string;
  // banner 图片地址, 拼装后的url
  bannerImageFullUrls?: string[];
  // 题量
  questionNum: number;
  // 任务连接地址
  taskLinkUrl: string;
  // 人群划分描述
  personDivideContent?: string;
  // 城市列表
  cityDivideUrls?: string;
  // 城市列表, 拼装后的url
  cityDivideFullUrls?: string[];
  // 样本数量
  sampleNum: number;
  // 完成样本量
  completedNum: number;
  // 产品下单code类型（1-资源包 2-后付费）
  productCodeType: string;
  // 产品余量
  productCapacity: number;
  // 奖励渠道（0-手动发支付宝余额 1-海豚红包 2-问卷自带）
  prizeChannel: number;
  // 支付宝账号
  alipayAccountId?: string;
  // 奖励类型（0-定额红包）
  prizeType: number;
  // 全额红包金额，奖励渠道为0和1时
  fullRedPacketAmount: string;
  // 全额红包描述，奖励渠道为2时，此处必填
  fullRedPacketTextInfo?: string;
  // 甄别红包金额
  examineRedPacketAmount: string;
  // 关联的证书instanceId
  certInstanceId?: string;
  // 证书实例详情
  certInstanceDetail?: CertInstanceDetail;
  // 审核建议
  verifyComment?: string;
  // 任务创建时间
  gmtCreate: string;
  // 任务更新时间
  gmtModified: string;
  // 审核理由
  reviewContent?: string;
  // 人群配置信息
  crowdConfig?: string;
  // 任务ID
  taskId: string;
  // 状态
  status: number;
  static names(): { [key: string]: string } {
    return {
      taskName: 'task_name',
      appId: 'app_id',
      surveyId: 'survey_id',
      notes: 'notes',
      tenantId: 'tenant_id',
      operator: 'operator',
      bannerTitle: 'banner_title',
      bannerImageUrls: 'banner_image_urls',
      bannerImageFullUrls: 'banner_image_full_urls',
      questionNum: 'question_num',
      taskLinkUrl: 'task_link_url',
      personDivideContent: 'person_divide_content',
      cityDivideUrls: 'city_divide_urls',
      cityDivideFullUrls: 'city_divide_full_urls',
      sampleNum: 'sample_num',
      completedNum: 'completed_num',
      productCodeType: 'product_code_type',
      productCapacity: 'product_capacity',
      prizeChannel: 'prize_channel',
      alipayAccountId: 'alipay_account_id',
      prizeType: 'prize_type',
      fullRedPacketAmount: 'full_red_packet_amount',
      fullRedPacketTextInfo: 'full_red_packet_text_info',
      examineRedPacketAmount: 'examine_red_packet_amount',
      certInstanceId: 'cert_instance_id',
      certInstanceDetail: 'cert_instance_detail',
      verifyComment: 'verify_comment',
      gmtCreate: 'gmt_create',
      gmtModified: 'gmt_modified',
      reviewContent: 'review_content',
      crowdConfig: 'crowd_config',
      taskId: 'task_id',
      status: 'status',
    };
  }

  static types(): { [key: string]: any } {
    return {
      taskName: 'string',
      appId: 'string',
      surveyId: 'string',
      notes: 'string',
      tenantId: 'string',
      operator: 'string',
      bannerTitle: 'string',
      bannerImageUrls: 'string',
      bannerImageFullUrls: { 'type': 'array', 'itemType': 'string' },
      questionNum: 'number',
      taskLinkUrl: 'string',
      personDivideContent: 'string',
      cityDivideUrls: 'string',
      cityDivideFullUrls: { 'type': 'array', 'itemType': 'string' },
      sampleNum: 'number',
      completedNum: 'number',
      productCodeType: 'string',
      productCapacity: 'number',
      prizeChannel: 'number',
      alipayAccountId: 'string',
      prizeType: 'number',
      fullRedPacketAmount: 'string',
      fullRedPacketTextInfo: 'string',
      examineRedPacketAmount: 'string',
      certInstanceId: 'string',
      certInstanceDetail: CertInstanceDetail,
      verifyComment: 'string',
      gmtCreate: 'string',
      gmtModified: 'string',
      reviewContent: 'string',
      crowdConfig: 'string',
      taskId: 'string',
      status: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 阿里云蚂蚁区块链相关下载结果
export class ALiYunChainDownload extends $tea.Model {
  // private_key
  privateKey?: string;
  // download_path
  downloadPath?: ALiYunDownloadPath;
  static names(): { [key: string]: string } {
    return {
      privateKey: 'private_key',
      downloadPath: 'download_path',
    };
  }

  static types(): { [key: string]: any } {
    return {
      privateKey: 'string',
      downloadPath: ALiYunDownloadPath,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 授权协议信息
export class AgreementConfigInfoDTO extends $tea.Model {
  // 协议名称
  agreementName: string;
  // 协议链接
  agreementUrl: string;
  // 协议描述
  agreementDesc: string;
  // 协议版本
  version?: number;
  static names(): { [key: string]: string } {
    return {
      agreementName: 'agreement_name',
      agreementUrl: 'agreement_url',
      agreementDesc: 'agreement_desc',
      version: 'version',
    };
  }

  static types(): { [key: string]: any } {
    return {
      agreementName: 'string',
      agreementUrl: 'string',
      agreementDesc: 'string',
      version: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 阿里云链统计信息
export class ALiYunChainStatics extends $tea.Model {
  // alias
  alias?: string;
  // Dt
  dt?: number;
  // trans_count
  transCount?: number;
  // last_sum_block_height
  lastSumBlockHeight?: number;
  // creat_time
  creatTime?: number;
  static names(): { [key: string]: string } {
    return {
      alias: 'alias',
      dt: 'dt',
      transCount: 'trans_count',
      lastSumBlockHeight: 'last_sum_block_height',
      creatTime: 'creat_time',
    };
  }

  static types(): { [key: string]: any } {
    return {
      alias: 'string',
      dt: 'number',
      transCount: 'number',
      lastSumBlockHeight: 'number',
      creatTime: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 阿里云蚂蚁区块链证书列表信息
export class ALiYunCertificateApplications extends $tea.Model {
  // pagination
  pagination?: ALiYunPagination;
  // certificate_application
  certificateApplications?: ALiYunCertificateApplication[];
  static names(): { [key: string]: string } {
    return {
      pagination: 'pagination',
      certificateApplications: 'certificate_applications',
    };
  }

  static types(): { [key: string]: any } {
    return {
      pagination: ALiYunPagination,
      certificateApplications: { 'type': 'array', 'itemType': ALiYunCertificateApplication },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// vc传输初始化结果
export class VcTransmitInitResult extends $tea.Model {
  // 初始化成功与否
  isSuccess: boolean;
  // 失败时返回的额外信息
  message: string;
  // 接受者did
  targetVerifier: string;
  // 待签名的交易hash
  needSignatureTxHash: string;
  static names(): { [key: string]: string } {
    return {
      isSuccess: 'is_success',
      message: 'message',
      targetVerifier: 'target_verifier',
      needSignatureTxHash: 'need_signature_tx_hash',
    };
  }

  static types(): { [key: string]: any } {
    return {
      isSuccess: 'boolean',
      message: 'string',
      targetVerifier: 'string',
      needSignatureTxHash: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 具体实体的身份信息
export class EntityInfo extends $tea.Model {
  // 0，身份证；1，电话；2，email，3，企业营业执照号
  type: number;
  // 具体号码
  value: string;
  static names(): { [key: string]: string } {
    return {
      type: 'type',
      value: 'value',
    };
  }

  static types(): { [key: string]: any } {
    return {
      type: 'number',
      value: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 链节点信息
export class NodeInfo extends $tea.Model {
  // 链的区块高度
  blockheight?: number;
  // 节点名称
  nodename?: string;
  // 节点健康状况
  status?: boolean;
  // 节点版本
  version?: string;
  static names(): { [key: string]: string } {
    return {
      blockheight: 'blockheight',
      nodename: 'nodename',
      status: 'status',
      version: 'version',
    };
  }

  static types(): { [key: string]: any } {
    return {
      blockheight: 'number',
      nodename: 'string',
      status: 'boolean',
      version: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// Did服务类型描述结构体
export class DidServiceType extends $tea.Model {
  // 枚举类型，描述访问服务的方式
  accessMode?: string;
  // 对服务的文字描述，<1000个字符
  description?: string;
  // 服务类型创建者did
  did: string;
  // { "item1":"", "item2":"",...
  serviceInput?: string;
  // 返回值类型描述，json形式
  serviceOutput?: string;
  // 自定义服务类型，字符数16～32个
  serviceType: string;
  static names(): { [key: string]: string } {
    return {
      accessMode: 'access_mode',
      description: 'description',
      did: 'did',
      serviceInput: 'service_input',
      serviceOutput: 'service_output',
      serviceType: 'service_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      accessMode: 'string',
      description: 'string',
      did: 'string',
      serviceInput: 'string',
      serviceOutput: 'string',
      serviceType: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 应用请求
export class ApplicationQueryReq extends $tea.Model {
  // 应用程序ID
  applicationId: string;
  static names(): { [key: string]: string } {
    return {
      applicationId: 'application_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      applicationId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 合约信息
export class ContractInfo extends $tea.Model {
  // 合约地址
  contract?: string;
  // 部署hash
  hash?: string;
  // 合约部署时间
  timestamp?: number;
  static names(): { [key: string]: string } {
    return {
      contract: 'contract',
      hash: 'hash',
      timestamp: 'timestamp',
    };
  }

  static types(): { [key: string]: any } {
    return {
      contract: 'string',
      hash: 'string',
      timestamp: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 创建VC参数
export class AddVC extends $tea.Model {
  // vc原文hash
  contentHash: string;
  // issuer后缀的hash值
  issuerHash: string;
  // valid or invalid
  status: string;
  // 接收者后缀hash值
  subjectHash: string;
  // 可验证声明id
  vcId: string;
  static names(): { [key: string]: string } {
    return {
      contentHash: 'content_hash',
      issuerHash: 'issuer_hash',
      status: 'status',
      subjectHash: 'subject_hash',
      vcId: 'vc_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      contentHash: 'string',
      issuerHash: 'string',
      status: 'string',
      subjectHash: 'string',
      vcId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 带单位的值
export class ValueUnitPair extends $tea.Model {
  // 数值
  value: number;
  // 单位
  unit: string;
  static names(): { [key: string]: string } {
    return {
      value: 'value',
      unit: 'unit',
    };
  }

  static types(): { [key: string]: any } {
    return {
      value: 'number',
      unit: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 阿里云区块链小程序交易二维码生成
export class ALiYunChainMiniAppCodeCreate extends $tea.Model {
  // ant_chain_id
  antChainId?: string;
  // transaction_hash
  transactionHash?: string;
  // base64_q_r_code_p_n_g
  base64QRCodePNG?: string;
  // q_r_code_content
  qRCodeContent?: string;
  static names(): { [key: string]: string } {
    return {
      antChainId: 'ant_chain_id',
      transactionHash: 'transaction_hash',
      base64QRCodePNG: 'base64_q_r_code_p_n_g',
      qRCodeContent: 'q_r_code_content',
    };
  }

  static types(): { [key: string]: any } {
    return {
      antChainId: 'string',
      transactionHash: 'string',
      base64QRCodePNG: 'string',
      qRCodeContent: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 描述分布的结构，目前主要包含date和value值
export class Curve extends $tea.Model {
  // 分布以day为单位的日期
  date: string;
  // 以day为单位的一天凭证颁发的数据量统计。
  value: string;
  static names(): { [key: string]: string } {
    return {
      date: 'date',
      value: 'value',
    };
  }

  static types(): { [key: string]: any } {
    return {
      date: 'string',
      value: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 存证元数据
export class NotaryMetaParam extends $tea.Model {
  // 描述本条存证在存证事务中的阶段，用户可自行维护
  phase: string;
  // 扩展字段
  properties?: string;
  // 全局唯一的存证事务ID
  token: string;
  static names(): { [key: string]: string } {
    return {
      phase: 'phase',
      properties: 'properties',
      token: 'token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      phase: 'string',
      properties: 'string',
      token: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 用于内部业务统计的信息，外部商户请忽略
export class BizInfo extends $tea.Model {
  // BPWZPFCN
  clientTenent?: string;
  // 业务代码
  code?: string;
  static names(): { [key: string]: string } {
    return {
      clientTenent: 'client_tenent',
      code: 'code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      clientTenent: 'string',
      code: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 数字资产管理平台版通交易信息
export class EPTradeInfo extends $tea.Model {
  // 版通代码
  epCode: string;
  // 版通交易号
  txCode: string;
  // 卖方账户
  txFrom: string;
  // 交易时间戳
  txTime: number;
  // 买方账户
  txTo: string;
  // 交易数量
  txValue: number;
  static names(): { [key: string]: string } {
    return {
      epCode: 'ep_code',
      txCode: 'tx_code',
      txFrom: 'tx_from',
      txTime: 'tx_time',
      txTo: 'tx_to',
      txValue: 'tx_value',
    };
  }

  static types(): { [key: string]: any } {
    return {
      epCode: 'string',
      txCode: 'string',
      txFrom: 'string',
      txTime: 'number',
      txTo: 'string',
      txValue: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 可信存证身份识别信息
export class Identity extends $tea.Model {
  // 经办人姓名，企业认证必选
  agent?: string;
  // 经办人身份证
  agentId?: string;
  // 用户名称
  certName: string;
  // 证件号
  certNo: string;
  // 证件类型，个人只支持身份证IDENTITY_CARD，企业支持UNIFIED_SOCIAL_CREDIT_CODE（统一社会信用代码）和ENTERPRISE_REGISTERED_NUMBER（企业工商注册号
  certType: string;
  // 法人姓名，企业认证必选
  legalPerson?: string;
  // 法人身份证,  企业认证必选
  legalPersonId?: string;
  // 用户手机号码
  mobileNo?: string;
  // 扩展属性
  properties?: string;
  // 用户类型，PERSON或者ENTERPRISE
  userType: string;
  static names(): { [key: string]: string } {
    return {
      agent: 'agent',
      agentId: 'agent_id',
      certName: 'cert_name',
      certNo: 'cert_no',
      certType: 'cert_type',
      legalPerson: 'legal_person',
      legalPersonId: 'legal_person_id',
      mobileNo: 'mobile_no',
      properties: 'properties',
      userType: 'user_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      agent: 'string',
      agentId: 'string',
      certName: 'string',
      certNo: 'string',
      certType: 'string',
      legalPerson: 'string',
      legalPersonId: 'string',
      mobileNo: 'string',
      properties: 'string',
      userType: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 营销分销平台推广人账户信息
export class FundInfo extends $tea.Model {
  // 可提现余额
  balance: string;
  // 待结算额度
  settleQuota: string;
  // 商户id
  shopId: string;
  static names(): { [key: string]: string } {
    return {
      balance: 'balance',
      settleQuota: 'settle_quota',
      shopId: 'shop_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      balance: 'string',
      settleQuota: 'string',
      shopId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// VC Repo用户注册结构体
export class VcUserRegisterPayload extends $tea.Model {
  // 用户did对应的授权公钥
  publicKey?: string;
  // 业务区块连的bizid
  vcChannel?: string;
  static names(): { [key: string]: string } {
    return {
      publicKey: 'public_key',
      vcChannel: 'vc_channel',
    };
  }

  static types(): { [key: string]: any } {
    return {
      publicKey: 'string',
      vcChannel: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 阿里云请求结果
export class ALiYunHandleBabelMns extends $tea.Model {
  // message
  message?: string;
  // request_id
  requestId?: string;
  // success
  success?: boolean;
  static names(): { [key: string]: string } {
    return {
      message: 'message',
      requestId: 'request_id',
      success: 'success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      message: 'string',
      requestId: 'string',
      success: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 溯源信息中的一项记录。
export class Item extends $tea.Model {
  // 溯源项的具体内容
  desc: string;
  // 扩展信息 ，json格式
  extInfo: string;
  // 溯源项的键值
  key: string;
  // 溯源项的中文标题 
  title: string;
  // 内容类型 
  type: string;
  static names(): { [key: string]: string } {
    return {
      desc: 'desc',
      extInfo: 'ext_info',
      key: 'key',
      title: 'title',
      type: 'type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      desc: 'string',
      extInfo: 'string',
      key: 'string',
      title: 'string',
      type: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// C3S可信计算服务TAPP应用信息
export class TappInfo extends $tea.Model {
  // C3S可信计算TAPP应用标识
  taapId: string;
  // C3S可信计算TAPP版本
  tappVersion: number;
  static names(): { [key: string]: string } {
    return {
      taapId: 'taap_id',
      tappVersion: 'tapp_version',
    };
  }

  static types(): { [key: string]: any } {
    return {
      taapId: 'string',
      tappVersion: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// BaaS平台联盟信息
export class BaasUnionInfo extends $tea.Model {
  // 联盟名称
  unionName: string;
  // 描述
  unionDescription: string;
  // 联系人
  unionUser: string;
  // 联盟联系人手机号码
  unionUserCell: string;
  // 联盟联系人邮箱
  unionUserMail: string;
  static names(): { [key: string]: string } {
    return {
      unionName: 'union_name',
      unionDescription: 'union_description',
      unionUser: 'union_user',
      unionUserCell: 'union_user_cell',
      unionUserMail: 'union_user_mail',
    };
  }

  static types(): { [key: string]: any } {
    return {
      unionName: 'string',
      unionDescription: 'string',
      unionUser: 'string',
      unionUserCell: 'string',
      unionUserMail: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// blockchain交易结构体
export class TransactionPo extends $tea.Model {
  // 交易所在块hash
  blockHash?: string;
  // 交易来源
  from?: string;
  // gas消耗
  gasUsed?: number;
  // 交易hash
  hash?: string;
  // 交易所在块 块高
  height?: number;
  // 交易返回结果
  result?: string;
  // 交易时间
  timestamp?: number;
  // 交易地址
  to?: string;
  // 交易类型 同SDK
  txType?: number;
  // 转账额度
  value?: number;
  static names(): { [key: string]: string } {
    return {
      blockHash: 'block_hash',
      from: 'from',
      gasUsed: 'gas_used',
      hash: 'hash',
      height: 'height',
      result: 'result',
      timestamp: 'timestamp',
      to: 'to',
      txType: 'tx_type',
      value: 'value',
    };
  }

  static types(): { [key: string]: any } {
    return {
      blockHash: 'string',
      from: 'string',
      gasUsed: 'number',
      hash: 'string',
      height: 'number',
      result: 'string',
      timestamp: 'number',
      to: 'string',
      txType: 'number',
      value: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// VC链上传输结果
export class VcTransmitResult extends $tea.Model {
  // 成功或者失败
  isSuccess: boolean;
  // 失败信息
  message?: string;
  // 验证verifier did
  targetVerifier: string;
  // 交易hash
  txHash?: string;
  static names(): { [key: string]: string } {
    return {
      isSuccess: 'is_success',
      message: 'message',
      targetVerifier: 'target_verifier',
      txHash: 'tx_hash',
    };
  }

  static types(): { [key: string]: any } {
    return {
      isSuccess: 'boolean',
      message: 'string',
      targetVerifier: 'string',
      txHash: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 可信时间信息结构
export class TsrResponse extends $tea.Model {
  // hash后的信息
  hashedMessage: string;
  // 哈希算法
  hashAlgorithm: string;
  // 时间
  ts: string;
  static names(): { [key: string]: string } {
    return {
      hashedMessage: 'hashed_message',
      hashAlgorithm: 'hash_algorithm',
      ts: 'ts',
    };
  }

  static types(): { [key: string]: any } {
    return {
      hashedMessage: 'string',
      hashAlgorithm: 'string',
      ts: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 阿里云数据导出服务TriggerDTO结构体
export class TriggerDTOStructBody extends $tea.Model {
  // 名称
  name?: string;
  // 类型
  type?: string;
  // 源
  source?: string;
  // 创建时间
  createTime?: string;
  // 错误信息
  errorMessage?: string;
  // 状态
  status?: string;
  // option（map结构，由于金融云无map接口所以通过string类型传输json格式）
  option?: string;
  // checkpoint类
  checkpoint?: CheckPointStructBody;
  // 待处理的错误事件总数
  pendingErrorLogs?: string;
  static names(): { [key: string]: string } {
    return {
      name: 'name',
      type: 'type',
      source: 'source',
      createTime: 'create_time',
      errorMessage: 'error_message',
      status: 'status',
      option: 'option',
      checkpoint: 'checkpoint',
      pendingErrorLogs: 'pending_error_logs',
    };
  }

  static types(): { [key: string]: any } {
    return {
      name: 'string',
      type: 'string',
      source: 'string',
      createTime: 'string',
      errorMessage: 'string',
      status: 'string',
      option: 'string',
      checkpoint: CheckPointStructBody,
      pendingErrorLogs: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 人群配置
export class CrowdNodeDTO extends $tea.Model {
  // 节点id
  nodeId: string;
  // 节点类型
  nodeType: CrowdNodeTypeEnum;
  // 是否排除
  exclude: boolean;
  // 节点配置
  nodeConfig: string;
  static names(): { [key: string]: string } {
    return {
      nodeId: 'node_id',
      nodeType: 'node_type',
      exclude: 'exclude',
      nodeConfig: 'node_config',
    };
  }

  static types(): { [key: string]: any } {
    return {
      nodeId: 'string',
      nodeType: CrowdNodeTypeEnum,
      exclude: 'boolean',
      nodeConfig: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 可信存证存证地点信息
export class Location extends $tea.Model {
  // 所在城市
  city?: string;
  // 操作IMEI
  imei?: string;
  // 操作IMSI
  imsi?: string;
  // 操作IP地址
  ip?: string;
  // 纬度
  latitude?: string;
  // 经度
  longitude?: string;
  // 扩展属性
  propertities?: string;
  // 操作Wi-Fi物理地址
  wifiMac?: string;
  static names(): { [key: string]: string } {
    return {
      city: 'city',
      imei: 'imei',
      imsi: 'imsi',
      ip: 'ip',
      latitude: 'latitude',
      longitude: 'longitude',
      propertities: 'propertities',
      wifiMac: 'wifi_mac',
    };
  }

  static types(): { [key: string]: any } {
    return {
      city: 'string',
      imei: 'string',
      imsi: 'string',
      ip: 'string',
      latitude: 'string',
      longitude: 'string',
      propertities: 'string',
      wifiMac: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 营销分销推广人账户流水信息
export class CapitalInfo extends $tea.Model {
  // 记录流水额度
  balanceLog: string;
  // 商户id
  shopId: string;
  // 记录时间
  timeLog: number;
  // 链上地址
  txHash: string;
  static names(): { [key: string]: string } {
    return {
      balanceLog: 'balance_log',
      shopId: 'shop_id',
      timeLog: 'time_log',
      txHash: 'tx_hash',
    };
  }

  static types(): { [key: string]: any } {
    return {
      balanceLog: 'string',
      shopId: 'string',
      timeLog: 'number',
      txHash: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 阿里云区块链小程序日志查询
export class ALiYunChainMiniAppLog extends $tea.Model {
  // access_count
  accessCount?: number;
  // access_alipay_account_count
  accessAlipayAccountCount?: number;
  static names(): { [key: string]: string } {
    return {
      accessCount: 'access_count',
      accessAlipayAccountCount: 'access_alipay_account_count',
    };
  }

  static types(): { [key: string]: any } {
    return {
      accessCount: 'number',
      accessAlipayAccountCount: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 订单结果
export class OrderResult extends $tea.Model {
  // 事例id
  instanceId: string;
  // 是否成功
  success: boolean;
  static names(): { [key: string]: string } {
    return {
      instanceId: 'instance_id',
      success: 'success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      instanceId: 'string',
      success: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 蚂蚁链节点信息
export class BlockchainBrowserNodeOwner extends $tea.Model {
  // node_id
  nodeId: string;
  // node_ip
  nodeIp: string;
  // node_name
  nodeName: string;
  // node_owner
  nodeOwner: string;
  // node_port
  nodePort: string;
  // node_source
  nodeSource: string;
  // node_state
  nodeState: string;
  // node_type
  nodeType: string;
  // 节点已使用的存储空间
  nodeDiskUsed: string;
  // 节点的总存储空间
  nodeDiskTotal: string;
  static names(): { [key: string]: string } {
    return {
      nodeId: 'node_id',
      nodeIp: 'node_ip',
      nodeName: 'node_name',
      nodeOwner: 'node_owner',
      nodePort: 'node_port',
      nodeSource: 'node_source',
      nodeState: 'node_state',
      nodeType: 'node_type',
      nodeDiskUsed: 'node_disk_used',
      nodeDiskTotal: 'node_disk_total',
    };
  }

  static types(): { [key: string]: any } {
    return {
      nodeId: 'string',
      nodeIp: 'string',
      nodeName: 'string',
      nodeOwner: 'string',
      nodePort: 'string',
      nodeSource: 'string',
      nodeState: 'string',
      nodeType: 'string',
      nodeDiskUsed: 'string',
      nodeDiskTotal: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 阿里云蚂蚁区块链账户创建信息
export class ALiYunChainAccount extends $tea.Model {
  // account_private_key
  accountPrivateKey?: string;
  // account_public_key
  accountPublicKey?: string;
  // account_recover_private_key
  accountRecoverPrivateKey?: string;
  // account_recover_public_key
  accountRecoverPublicKey?: string;
  // ant_chain_id
  antChainId?: string;
  // account
  account?: string;
  static names(): { [key: string]: string } {
    return {
      accountPrivateKey: 'account_private_key',
      accountPublicKey: 'account_public_key',
      accountRecoverPrivateKey: 'account_recover_private_key',
      accountRecoverPublicKey: 'account_recover_public_key',
      antChainId: 'ant_chain_id',
      account: 'account',
    };
  }

  static types(): { [key: string]: any } {
    return {
      accountPrivateKey: 'string',
      accountPublicKey: 'string',
      accountRecoverPrivateKey: 'string',
      accountRecoverPublicKey: 'string',
      antChainId: 'string',
      account: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 更新DID服务列表
export class UpdateDidServiceList extends $tea.Model {
  // 待更新did之前的版本号
  previousVersion: number;
  // 服务信息列表
  serviceList: DisServicesInfo[];
  static names(): { [key: string]: string } {
    return {
      previousVersion: 'previous_version',
      serviceList: 'service_list',
    };
  }

  static types(): { [key: string]: any } {
    return {
      previousVersion: 'number',
      serviceList: { 'type': 'array', 'itemType': DisServicesInfo },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 车辆用户信息
export class CarUserInfo extends $tea.Model {
  // 唯一标识用户的id
  userId: string;
  // 手机号
  phoneNum: string;
  // 城市编码
  cityCode: string;
  // 姓名
  userCertName?: string;
  // 证件号码
  userCertNo?: string;
  static names(): { [key: string]: string } {
    return {
      userId: 'user_id',
      phoneNum: 'phone_num',
      cityCode: 'city_code',
      userCertName: 'user_cert_name',
      userCertNo: 'user_cert_no',
    };
  }

  static types(): { [key: string]: any } {
    return {
      userId: 'string',
      phoneNum: 'string',
      cityCode: 'string',
      userCertName: 'string',
      userCertNo: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 营销分销商品信息
export class ItemDto extends $tea.Model {
  // 商品id
  productId: string;
  // 商户id
  shopId: string;
  // 链上地址
  txHash: string;
  static names(): { [key: string]: string } {
    return {
      productId: 'product_id',
      shopId: 'shop_id',
      txHash: 'tx_hash',
    };
  }

  static types(): { [key: string]: any } {
    return {
      productId: 'string',
      shopId: 'string',
      txHash: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 蚂蚁链最新区块列表信息
export class BlockchainBrowserLatestBlock extends $tea.Model {
  // bizid
  bizid: string;
  // block_hash
  blockHash: string;
  // create_time
  createTime: number;
  // height
  height: number;
  // previous_hash
  previousHash: string;
  // root_tx_hash
  rootTxHash: string;
  // size
  size: number;
  // transaction_size
  transactionSize: number;
  // version
  version: number;
  static names(): { [key: string]: string } {
    return {
      bizid: 'bizid',
      blockHash: 'block_hash',
      createTime: 'create_time',
      height: 'height',
      previousHash: 'previous_hash',
      rootTxHash: 'root_tx_hash',
      size: 'size',
      transactionSize: 'transaction_size',
      version: 'version',
    };
  }

  static types(): { [key: string]: any } {
    return {
      bizid: 'string',
      blockHash: 'string',
      createTime: 'number',
      height: 'number',
      previousHash: 'string',
      rootTxHash: 'string',
      size: 'number',
      transactionSize: 'number',
      version: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// VC传输确认
export class VcTransmitCnf extends $tea.Model {
  // 针对tx_hash的签名
  signature: string;
  // 交易hash
  txHash: string;
  // vc传输目标did
  verifierId: string;
  static names(): { [key: string]: string } {
    return {
      signature: 'signature',
      txHash: 'tx_hash',
      verifierId: 'verifier_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      signature: 'string',
      txHash: 'string',
      verifierId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 阿里云区块链小程序用户权限查询
export class ALiYunChainMiniAppUserPrivilege extends $tea.Model {
  // ant_chain_id
  antChainId?: string;
  // q_r_code_type
  qRCodeType?: string;
  // authorization_type
  authorizationType?: string;
  // pagination
  pagination?: ALiYunPagination;
  // ALiYunChainMiniAppAuthorizedUser
  authorizedUserList?: ALiYunChainMiniAppAuthorizedUser[];
  static names(): { [key: string]: string } {
    return {
      antChainId: 'ant_chain_id',
      qRCodeType: 'q_r_code_type',
      authorizationType: 'authorization_type',
      pagination: 'pagination',
      authorizedUserList: 'authorized_user_list',
    };
  }

  static types(): { [key: string]: any } {
    return {
      antChainId: 'string',
      qRCodeType: 'string',
      authorizationType: 'string',
      pagination: ALiYunPagination,
      authorizedUserList: { 'type': 'array', 'itemType': ALiYunChainMiniAppAuthorizedUser },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 授权服务流程信息
export class ProcessInfo extends $tea.Model {
  // 当前处理节点
  currentNode: number;
  // 扩展信息
  extensionInfo?: string;
  // 节点列表
  nodes: NodeDetail[];
  // 流程ID
  processId: string;
  // 流程状态
  processStatus: string;
  // 流程节点总数
  totalCount: number;
  // 数据对象ID
  dataId: string;
  static names(): { [key: string]: string } {
    return {
      currentNode: 'current_node',
      extensionInfo: 'extension_info',
      nodes: 'nodes',
      processId: 'process_id',
      processStatus: 'process_status',
      totalCount: 'total_count',
      dataId: 'data_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      currentNode: 'number',
      extensionInfo: 'string',
      nodes: { 'type': 'array', 'itemType': NodeDetail },
      processId: 'string',
      processStatus: 'string',
      totalCount: 'number',
      dataId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 阿里云区块链售卖资源信息
export class ALiYunChainResouceForSale extends $tea.Model {
  // region_id
  regionId?: string;
  // type_list
  typeList?: string[];
  static names(): { [key: string]: string } {
    return {
      regionId: 'region_id',
      typeList: 'type_list',
    };
  }

  static types(): { [key: string]: any } {
    return {
      regionId: 'string',
      typeList: { 'type': 'array', 'itemType': 'string' },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 数字资产管理平台账户映射结构
export class ExchangeAccountMap extends $tea.Model {
  // 用户联系方式
  phone: string;
  // 用户账户
  userAccount: string;
  // 用户名称
  userName: string;
  static names(): { [key: string]: string } {
    return {
      phone: 'phone',
      userAccount: 'user_account',
      userName: 'user_name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      phone: 'string',
      userAccount: 'string',
      userName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 阿里云区块链创建信息
export class ALiYunChainExecuteOrder extends $tea.Model {
  // user_request_id
  userRequestId?: string;
  // data
  data?: string;
  // success
  success?: boolean;
  // code
  code?: string;
  // message
  message?: string;
  // synchro
  synchro?: boolean;
  static names(): { [key: string]: string } {
    return {
      userRequestId: 'user_request_id',
      data: 'data',
      success: 'success',
      code: 'code',
      message: 'message',
      synchro: 'synchro',
    };
  }

  static types(): { [key: string]: any } {
    return {
      userRequestId: 'string',
      data: 'string',
      success: 'boolean',
      code: 'string',
      message: 'string',
      synchro: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 账户映射的具体信息
export class AccountMap extends $tea.Model {
  // 要映射的链对应的唯一id
  bizid: string;
  // 0: 身份证；1：手机；2: 电子邮箱；3: 企业营业执照号
  entityInfoType?: number;
  // 对应entity_info_type的具体值
  // 
  entityInfoValue?: string;
  // 账户对应实体的全名
  fullName?: string;
  // 该账户在指定链上的状态1，激活，2，冻结，新建账户只能为1
  status: number;
  // 希望映射后在链上的账户名
  targetName?: string;
  // 该账户对应实体的类型：0， 个人； 1， 企业
  type?: number;
  // 自有系统中该账户的唯一标示
  uid: string;
  static names(): { [key: string]: string } {
    return {
      bizid: 'bizid',
      entityInfoType: 'entity_info_type',
      entityInfoValue: 'entity_info_value',
      fullName: 'full_name',
      status: 'status',
      targetName: 'target_name',
      type: 'type',
      uid: 'uid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      bizid: 'string',
      entityInfoType: 'number',
      entityInfoValue: 'string',
      fullName: 'string',
      status: 'number',
      targetName: 'string',
      type: 'number',
      uid: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 任务列表分页结构体
export class PageTaskListDTO extends $tea.Model {
  // 任务列表集合
  content: TaskListInfoDTO[];
  // 总记录条目
  totalElements: number;
  // 记录总页数
  totalPages: number;
  // 页码
  number: number;
  // 每页记录条目
  size: number;
  // 每页元素个数
  numberOfElements: number;
  static names(): { [key: string]: string } {
    return {
      content: 'content',
      totalElements: 'total_elements',
      totalPages: 'total_pages',
      number: 'number',
      size: 'size',
      numberOfElements: 'number_of_elements',
    };
  }

  static types(): { [key: string]: any } {
    return {
      content: { 'type': 'array', 'itemType': TaskListInfoDTO },
      totalElements: 'number',
      totalPages: 'number',
      number: 'number',
      size: 'number',
      numberOfElements: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 服务端签名oss的url然后client直传文件到oss，此结构包含了服务端签名后的数据。
export class PresignedUrlPolicy extends $tea.Model {
  // oss访问的临时access id
  accessId: string;
  // 一个需要回调通知服务端的方法名，非必填
  callback?: string;
  // oss上的文件存放路径
  dir: string;
  // url超期的时间戳说明
  expire: string;
  // oss的地址
  host: string;
  // 被base64编码的policy内容
  policy: string;
  // 签名结果
  signature: string;
  static names(): { [key: string]: string } {
    return {
      accessId: 'access_id',
      callback: 'callback',
      dir: 'dir',
      expire: 'expire',
      host: 'host',
      policy: 'policy',
      signature: 'signature',
    };
  }

  static types(): { [key: string]: any } {
    return {
      accessId: 'string',
      callback: 'string',
      dir: 'string',
      expire: 'string',
      host: 'string',
      policy: 'string',
      signature: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 更新did auth paylod结构体
export class UpdateDidAuthPayload extends $tea.Model {
  // 新公钥的实际控制者
  controller: string;
  // 旧Auth Key的过期时间
  previousAuthKeyExpire: string;
  // 更新Did doc的版本
  previousVersion: number;
  // 新DID Auth key的public key id
  publicKeyId: string;
  // 密钥对生成算法
  publicKeyType: string;
  // 公钥的实际值
  value: string;
  static names(): { [key: string]: string } {
    return {
      controller: 'controller',
      previousAuthKeyExpire: 'previous_auth_key_expire',
      previousVersion: 'previous_version',
      publicKeyId: 'public_key_id',
      publicKeyType: 'public_key_type',
      value: 'value',
    };
  }

  static types(): { [key: string]: any } {
    return {
      controller: 'string',
      previousAuthKeyExpire: 'string',
      previousVersion: 'number',
      publicKeyId: 'string',
      publicKeyType: 'string',
      value: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 获取Afts上传地址和token
export class GetAftsUploadUrlRequest extends $tea.Model {
  // 问件类型
  fileType: string;
  static names(): { [key: string]: string } {
    return {
      fileType: 'file_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      fileType: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// did详情
export class DidDetail extends $tea.Model {
  // 控制者的did描述符
  controller: string;
  // did描述符
  did: string;
  // did doc
  didDoc: string;
  static names(): { [key: string]: string } {
    return {
      controller: 'controller',
      did: 'did',
      didDoc: 'did_doc',
    };
  }

  static types(): { [key: string]: any } {
    return {
      controller: 'string',
      did: 'string',
      didDoc: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 蚂蚁链浏览器区块信息
export class BlockchainBrowserBlock extends $tea.Model {
  // bizid
  bizid: string;
  // blockchain_name
  blockchainName: string;
  // blockchain_status
  blockchainStatus: boolean;
  // block_hash
  blockHash: string;
  // create_time
  createTime: number;
  // hash_status
  hashStatus: boolean;
  // height
  height: number;
  // previous_hash
  previousHash: string;
  // root_tx_hash
  rootTxHash: string;
  // transaction_list
  transactionList: BlockchainBrowserTransaction[];
  // transaction_size
  transactionSize: number;
  static names(): { [key: string]: string } {
    return {
      bizid: 'bizid',
      blockchainName: 'blockchain_name',
      blockchainStatus: 'blockchain_status',
      blockHash: 'block_hash',
      createTime: 'create_time',
      hashStatus: 'hash_status',
      height: 'height',
      previousHash: 'previous_hash',
      rootTxHash: 'root_tx_hash',
      transactionList: 'transaction_list',
      transactionSize: 'transaction_size',
    };
  }

  static types(): { [key: string]: any } {
    return {
      bizid: 'string',
      blockchainName: 'string',
      blockchainStatus: 'boolean',
      blockHash: 'string',
      createTime: 'number',
      hashStatus: 'boolean',
      height: 'number',
      previousHash: 'string',
      rootTxHash: 'string',
      transactionList: { 'type': 'array', 'itemType': BlockchainBrowserTransaction },
      transactionSize: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 任务人群配置
export class TaskCrowdNodeDTO extends $tea.Model {
  // 节点ID
  nodeId: string;
  // 节点类型
  nodeType: string;
  // 是否排除
  exclude: boolean;
  // 节点配置
  nodeConfig: string;
  static names(): { [key: string]: string } {
    return {
      nodeId: 'node_id',
      nodeType: 'node_type',
      exclude: 'exclude',
      nodeConfig: 'node_config',
    };
  }

  static types(): { [key: string]: any } {
    return {
      nodeId: 'string',
      nodeType: 'string',
      exclude: 'boolean',
      nodeConfig: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 人群匹配结果
export class MatchResult extends $tea.Model {
  // 是否匹配
  match: boolean;
  static names(): { [key: string]: string } {
    return {
      match: 'match',
    };
  }

  static types(): { [key: string]: any } {
    return {
      match: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 阿里云蚂蚁区块链信息
export class ALiYunChain extends $tea.Model {
  // notary_blockchain
  notaryBlockchain?: ALiYunNotaryBlockchain;
  // contract_blockchain
  contractBlockchain?: ALiYunContractBlockchain;
  // old_contract_blockchain
  oldContractBlockchain?: ALiYunOldContractBlockchain;
  static names(): { [key: string]: string } {
    return {
      notaryBlockchain: 'notary_blockchain',
      contractBlockchain: 'contract_blockchain',
      oldContractBlockchain: 'old_contract_blockchain',
    };
  }

  static types(): { [key: string]: any } {
    return {
      notaryBlockchain: ALiYunNotaryBlockchain,
      contractBlockchain: ALiYunContractBlockchain,
      oldContractBlockchain: ALiYunOldContractBlockchain,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 营销分销平台返佣信息
export class RakeBackInfo extends $tea.Model {
  // 推广层级
  level: number;
  // 上级推广订单id
  parentId: string;
  // 推广人id
  promoterId: string;
  // 返佣额度
  quota: string;
  // 返佣比例 10表示10%
  rate: string;
  static names(): { [key: string]: string } {
    return {
      level: 'level',
      parentId: 'parent_id',
      promoterId: 'promoter_id',
      quota: 'quota',
      rate: 'rate',
    };
  }

  static types(): { [key: string]: any } {
    return {
      level: 'number',
      parentId: 'string',
      promoterId: 'string',
      quota: 'string',
      rate: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 阿里云区块链小程序交易查询信息
export class ALiYunChainMiniAppTransaction extends $tea.Model {
  // authorized
  authorized?: boolean;
  // transaction_response
  transactionResponse?: string;
  // transaction_receipt
  transactionReceipt?: string;
  static names(): { [key: string]: string } {
    return {
      authorized: 'authorized',
      transactionResponse: 'transaction_response',
      transactionReceipt: 'transaction_receipt',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authorized: 'boolean',
      transactionResponse: 'string',
      transactionReceipt: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 阿里云托管账户信息
export class ALiYunChainKmsAccount extends $tea.Model {
  // 账户公钥
  pubKey?: string;
  // 托管秘钥ID
  myKmsKeyId?: string;
  static names(): { [key: string]: string } {
    return {
      pubKey: 'pub_key',
      myKmsKeyId: 'my_kms_key_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      pubKey: 'string',
      myKmsKeyId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 物流金融平台用户信息
export class LogisticFinUser extends $tea.Model {
  // 纳税人识别号
  draweeTaxNo: string;
  // 业务方企业id
  orgId: string;
  // 业务方用户id
  userId: string;
  static names(): { [key: string]: string } {
    return {
      draweeTaxNo: 'drawee_tax_no',
      orgId: 'org_id',
      userId: 'user_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      draweeTaxNo: 'string',
      orgId: 'string',
      userId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 合约查询
export class ContractQueryDetailReq extends $tea.Model {
  // 服务ID
  serviceId: string;
  static names(): { [key: string]: string } {
    return {
      serviceId: 'service_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      serviceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 智能合约市场列表查询
export class ContractTemplateQueryReq extends $tea.Model {
  // 页码
  num: number;
  // 页大小
  size: number;
  static names(): { [key: string]: string } {
    return {
      num: 'num',
      size: 'size',
    };
  }

  static types(): { [key: string]: any } {
    return {
      num: 'number',
      size: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 分销会员用户信息
export class DistributionUser extends $tea.Model {
  // 用户创建时间
  createTime: string;
  // 用户手机号
  mobile: string;
  // 用户唯一标识
  userId: string;
  static names(): { [key: string]: string } {
    return {
      createTime: 'create_time',
      mobile: 'mobile',
      userId: 'user_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      createTime: 'string',
      mobile: 'string',
      userId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 智能合约市场列表
export class ContractTemplateListResp extends $tea.Model {
  // 合约市场列表
  list?: ContractTemplateResp[];
  // 总数
  total?: number;
  static names(): { [key: string]: string } {
    return {
      list: 'list',
      total: 'total',
    };
  }

  static types(): { [key: string]: any } {
    return {
      list: { 'type': 'array', 'itemType': ContractTemplateResp },
      total: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 授权流程操作结果
export class ProcessResult extends $tea.Model {
  // 申请权限的扩展参数
  extension?: string;
  // 申请权限原因
  message?: string;
  // 下一个处理节点ID
  next?: string;
  // 流程ID
  processId: string;
  // 流程状态
  status: string;
  // 数据对象ID
  dataId: string;
  // 交易HASH
  txHash?: string;
  // 区块高度
  blockNumber?: number;
  // 授权凭证
  authorityCert?: string;
  static names(): { [key: string]: string } {
    return {
      extension: 'extension',
      message: 'message',
      next: 'next',
      processId: 'process_id',
      status: 'status',
      dataId: 'data_id',
      txHash: 'tx_hash',
      blockNumber: 'block_number',
      authorityCert: 'authority_cert',
    };
  }

  static types(): { [key: string]: any } {
    return {
      extension: 'string',
      message: 'string',
      next: 'string',
      processId: 'string',
      status: 'string',
      dataId: 'string',
      txHash: 'string',
      blockNumber: 'number',
      authorityCert: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 数据授权服务用户公钥结构体
export class PublicKey extends $tea.Model {
  // 公钥颁发者ID
  issuerId: string;
  // 公钥内容
  publicKeyContent: string;
  // 公钥接受者ID
  recipientId: string;
  static names(): { [key: string]: string } {
    return {
      issuerId: 'issuer_id',
      publicKeyContent: 'public_key_content',
      recipientId: 'recipient_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      issuerId: 'string',
      publicKeyContent: 'string',
      recipientId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 合约部署记录
export class ContractRecord extends $tea.Model {
  // abi对应oss key
  abiOssKey: string;
  // abi oss 地址
  abiOssUrl?: string;
  // 区块链唯一标识
  bizid: string;
  // 区块链名称
  blockchainName: string;
  // bytecode对应oss key
  bytecodeOssKey: string;
  // bytecode oss 地址
  bytecodeOssUrl?: string;
  // 16进制表示的合约identity
  identity: string;
  // 合约代码中定义的合约实例名，比如solidity的contract 关键字后面的命名
  instanceName: string;
  // 合约名称
  name: string;
  // 发布状态，1未发布，3已发布
  publish: number;
  // 交易hash
  txHash: string;
  // solidity|cpp|go
  type: string;
  static names(): { [key: string]: string } {
    return {
      abiOssKey: 'abi_oss_key',
      abiOssUrl: 'abi_oss_url',
      bizid: 'bizid',
      blockchainName: 'blockchain_name',
      bytecodeOssKey: 'bytecode_oss_key',
      bytecodeOssUrl: 'bytecode_oss_url',
      identity: 'identity',
      instanceName: 'instance_name',
      name: 'name',
      publish: 'publish',
      txHash: 'tx_hash',
      type: 'type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      abiOssKey: 'string',
      abiOssUrl: 'string',
      bizid: 'string',
      blockchainName: 'string',
      bytecodeOssKey: 'string',
      bytecodeOssUrl: 'string',
      identity: 'string',
      instanceName: 'string',
      name: 'string',
      publish: 'number',
      txHash: 'string',
      type: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 蚂蚁链浏览器交易收据信息
export class BlockchainBrowserTransactionReceipt extends $tea.Model {
  // data
  data: string;
  // gas_used
  gasUsed: number;
  // logs
  logs: string[];
  // result
  result: number;
  static names(): { [key: string]: string } {
    return {
      data: 'data',
      gasUsed: 'gas_used',
      logs: 'logs',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      data: 'string',
      gasUsed: 'number',
      logs: { 'type': 'array', 'itemType': 'string' },
      result: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 数字资产管理平台批发结构
export class AccountWholesaleParam extends $tea.Model {
  // 批发数量
  epAmount: number;
  // 用户账户
  userAccount: string;
  static names(): { [key: string]: string } {
    return {
      epAmount: 'ep_amount',
      userAccount: 'user_account',
    };
  }

  static types(): { [key: string]: any } {
    return {
      epAmount: 'number',
      userAccount: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 更新后的任务信息
export class UpdatedTaskInfo extends $tea.Model {
  // 任务标题(同一个租户不能重复)
  taskName: string;
  // appId
  appId: string;
  // 问卷ID
  surveyId: string;
  // 任务ID
  taskId: string;
  // 备注信息
  notes?: string;
  // 租户ID
  tenantId: string;
  // 操作者ID
  operator: string;
  // banner标题
  bannerTitle: string;
  // banner图片地址（最多支持3张）
  bannerImageUrls?: string;
  // banner 图片地址, 拼装后的url
  bannerImageFullUrls?: string[];
  // 题量
  questionNum: number;
  // 任务连接地址
  taskLinkUrl: string;
  // 人群划分描述
  personDivideContent?: string;
  // 城市列表
  cityDivideUrls?: string;
  // 城市列表, 拼装后的url
  cityDivideFullUrls?: string[];
  // 样本数量
  sampleNum: number;
  // 完成样本量
  completedNum: number;
  // 产品下单code类型（1-资源包 2-后付费）
  productCodeType: string;
  // 产品余量
  productCapacity: number;
  // 奖励渠道（0-手动发支付宝余额 1-海豚红包 2-问卷自带）
  prizeChannel: number;
  // 支付宝账号
  alipayAccountId?: string;
  // 奖励类型（0-定额红包）
  prizeType: number;
  // 全额红包金额，奖励渠道为0和1时
  fullRedPacketAmount: string;
  // 全额红包描述，奖励渠道为2时，此处必填
  fullRedPacketTextInfo?: string;
  // 甄别红包金额
  examineRedPacketAmount: string;
  // 关联的证书instanceId
  certInstanceId?: string;
  // 证书实例详情
  certInstanceDetail: CertInstanceDetail;
  // 审核意见
  verifyOmment?: string;
  // 任务创建时间
  gmtCreate: string;
  // 任务修改时间
  gmtModified: string;
  // 审核理由
  reviewContent?: string;
  // 状态
  status: number;
  // 人群配置
  crowdConfig: string;
  static names(): { [key: string]: string } {
    return {
      taskName: 'task_name',
      appId: 'app_id',
      surveyId: 'survey_id',
      taskId: 'task_id',
      notes: 'notes',
      tenantId: 'tenant_id',
      operator: 'operator',
      bannerTitle: 'banner_title',
      bannerImageUrls: 'banner_image_urls',
      bannerImageFullUrls: 'banner_image_full_urls',
      questionNum: 'question_num',
      taskLinkUrl: 'task_link_url',
      personDivideContent: 'person_divide_content',
      cityDivideUrls: 'city_divide_urls',
      cityDivideFullUrls: 'city_divide_full_urls',
      sampleNum: 'sample_num',
      completedNum: 'completed_num',
      productCodeType: 'product_code_type',
      productCapacity: 'product_capacity',
      prizeChannel: 'prize_channel',
      alipayAccountId: 'alipay_account_id',
      prizeType: 'prize_type',
      fullRedPacketAmount: 'full_red_packet_amount',
      fullRedPacketTextInfo: 'full_red_packet_text_info',
      examineRedPacketAmount: 'examine_red_packet_amount',
      certInstanceId: 'cert_instance_id',
      certInstanceDetail: 'cert_instance_detail',
      verifyOmment: 'verify_omment',
      gmtCreate: 'gmt_create',
      gmtModified: 'gmt_modified',
      reviewContent: 'review_content',
      status: 'status',
      crowdConfig: 'crowd_config',
    };
  }

  static types(): { [key: string]: any } {
    return {
      taskName: 'string',
      appId: 'string',
      surveyId: 'string',
      taskId: 'string',
      notes: 'string',
      tenantId: 'string',
      operator: 'string',
      bannerTitle: 'string',
      bannerImageUrls: 'string',
      bannerImageFullUrls: { 'type': 'array', 'itemType': 'string' },
      questionNum: 'number',
      taskLinkUrl: 'string',
      personDivideContent: 'string',
      cityDivideUrls: 'string',
      cityDivideFullUrls: { 'type': 'array', 'itemType': 'string' },
      sampleNum: 'number',
      completedNum: 'number',
      productCodeType: 'string',
      productCapacity: 'number',
      prizeChannel: 'number',
      alipayAccountId: 'string',
      prizeType: 'number',
      fullRedPacketAmount: 'string',
      fullRedPacketTextInfo: 'string',
      examineRedPacketAmount: 'string',
      certInstanceId: 'string',
      certInstanceDetail: CertInstanceDetail,
      verifyOmment: 'string',
      gmtCreate: 'string',
      gmtModified: 'string',
      reviewContent: 'string',
      status: 'number',
      crowdConfig: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 阿里云交易查询结果
export class ALiYunTransactionResult extends $tea.Model {
  // block_hash
  blockHash?: string;
  // block_height
  blockHeight?: number;
  // block_version
  blockVersion?: string;
  // create_time
  createTime?: number;
  // hash
  hash?: string;
  // Transaction
  transaction?: ALiYunTransaction;
  static names(): { [key: string]: string } {
    return {
      blockHash: 'block_hash',
      blockHeight: 'block_height',
      blockVersion: 'block_version',
      createTime: 'create_time',
      hash: 'hash',
      transaction: 'transaction',
    };
  }

  static types(): { [key: string]: any } {
    return {
      blockHash: 'string',
      blockHeight: 'number',
      blockVersion: 'string',
      createTime: 'number',
      hash: 'string',
      transaction: ALiYunTransaction,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// waas公钥信息
export class PublicKeyInfo extends $tea.Model {
  // 公钥id
  keyId: string;
  // 公钥内容
  publicKey: string;
  // 算法类型
  signType: string;
  // 过期时间戳（毫秒）
  expire?: number;
  // 公钥状态，0:不可用 1:可用
  status: number;
  // 创建者的did
  controller?: string;
  static names(): { [key: string]: string } {
    return {
      keyId: 'key_id',
      publicKey: 'public_key',
      signType: 'sign_type',
      expire: 'expire',
      status: 'status',
      controller: 'controller',
    };
  }

  static types(): { [key: string]: any } {
    return {
      keyId: 'string',
      publicKey: 'string',
      signType: 'string',
      expire: 'number',
      status: 'number',
      controller: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 更新VC状态数据结构
export class UpdateVCStatus extends $tea.Model {
  // valid or invalid
  status: string;
  // 可验证声明id
  vcId: string;
  static names(): { [key: string]: string } {
    return {
      status: 'status',
      vcId: 'vc_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      status: 'string',
      vcId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 关联应用
export class ContractBindAppReq extends $tea.Model {
  // 应用ID
  applicationId: string;
  // 合约服务标识集合
  serviceIds?: string[];
  static names(): { [key: string]: string } {
    return {
      applicationId: 'application_id',
      serviceIds: 'service_ids',
    };
  }

  static types(): { [key: string]: any } {
    return {
      applicationId: 'string',
      serviceIds: { 'type': 'array', 'itemType': 'string' },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 用户数据
export class OCUserData extends $tea.Model {
  // 创建时间
  createTime: string;
  // 手机号
  phoneNumber: string;
  // 用户姓名
  userName: string;
  static names(): { [key: string]: string } {
    return {
      createTime: 'create_time',
      phoneNumber: 'phone_number',
      userName: 'user_name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      createTime: 'string',
      phoneNumber: 'string',
      userName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 用户身份信息
export class UserMetaInfo extends $tea.Model {
  // 用户身份信息类型
  type: string;
  // 用户身份信息
  data: KeyValuePair[];
  static names(): { [key: string]: string } {
    return {
      type: 'type',
      data: 'data',
    };
  }

  static types(): { [key: string]: any } {
    return {
      type: 'string',
      data: { 'type': 'array', 'itemType': KeyValuePair },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 阿里云子链列表信息
export class ALiYunChainSubnetList extends $tea.Model {
  // ant_chain_id
  antChainId?: string;
  // 子链名称
  blockchainName?: string;
  // 联盟管理员
  consortiumAdmin?: boolean;
  // 子链列表信息
  blockchainSubnetList?: ALiYunChainSubnet[];
  static names(): { [key: string]: string } {
    return {
      antChainId: 'ant_chain_id',
      blockchainName: 'blockchain_name',
      consortiumAdmin: 'consortium_admin',
      blockchainSubnetList: 'blockchain_subnet_list',
    };
  }

  static types(): { [key: string]: any } {
    return {
      antChainId: 'string',
      blockchainName: 'string',
      consortiumAdmin: 'boolean',
      blockchainSubnetList: { 'type': 'array', 'itemType': ALiYunChainSubnet },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 合约服务列表查询
export class ContracPageReq extends $tea.Model {
  // 合约服务类别
  type?: string;
  // 页码
  num: number;
  // 页大小
  size: number;
  static names(): { [key: string]: string } {
    return {
      type: 'type',
      num: 'num',
      size: 'size',
    };
  }

  static types(): { [key: string]: any } {
    return {
      type: 'string',
      num: 'number',
      size: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 人群标签枚举集合对象
export class CrowdTagEnumResp extends $tea.Model {
  // 人群标签code
  crowdTag: string;
  // 人群标签枚举列表对象
  crowTagEnumItemList: CrowdTagEnumItemDTO[];
  static names(): { [key: string]: string } {
    return {
      crowdTag: 'crowd_tag',
      crowTagEnumItemList: 'crow_tag_enum_item_list',
    };
  }

  static types(): { [key: string]: any } {
    return {
      crowdTag: 'string',
      crowTagEnumItemList: { 'type': 'array', 'itemType': CrowdTagEnumItemDTO },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 阿里云最新区块列表查询的单元信息
export class ALiYunChainBlockInfo extends $tea.Model {
  // alias
  alias?: string;
  // block_hash
  blockHash?: string;
  // root_tx_hash
  rootTxHash?: string;
  // height
  height?: number;
  // previous_hash
  previousHash?: string;
  // create_time
  createTime?: number;
  // biz_data
  bizData?: string;
  // transaction_size
  transactionSize?: number;
  // version
  version?: number;
  // size
  size?: number;
  static names(): { [key: string]: string } {
    return {
      alias: 'alias',
      blockHash: 'block_hash',
      rootTxHash: 'root_tx_hash',
      height: 'height',
      previousHash: 'previous_hash',
      createTime: 'create_time',
      bizData: 'biz_data',
      transactionSize: 'transaction_size',
      version: 'version',
      size: 'size',
    };
  }

  static types(): { [key: string]: any } {
    return {
      alias: 'string',
      blockHash: 'string',
      rootTxHash: 'string',
      height: 'number',
      previousHash: 'string',
      createTime: 'number',
      bizData: 'string',
      transactionSize: 'number',
      version: 'number',
      size: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 组件信息
export class DiscreteValue extends $tea.Model {
  // 排序id
  sortId?: number;
  // 字段描述
  text: string;
  // 提示信息
  tips?: string;
  // 单位信息
  unit?: string;
  // 值内容
  value: string;
  static names(): { [key: string]: string } {
    return {
      sortId: 'sort_id',
      text: 'text',
      tips: 'tips',
      unit: 'unit',
      value: 'value',
    };
  }

  static types(): { [key: string]: any } {
    return {
      sortId: 'number',
      text: 'string',
      tips: 'string',
      unit: 'string',
      value: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 合约列表
export class ContractPageResp extends $tea.Model {
  // 合约列表
  list?: ContractPageListResp[];
  // 总数
  total?: number;
  static names(): { [key: string]: string } {
    return {
      list: 'list',
      total: 'total',
    };
  }

  static types(): { [key: string]: any } {
    return {
      list: { 'type': 'array', 'itemType': ContractPageListResp },
      total: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// AccountPo
export class AccountPo extends $tea.Model {
  // 账户 hash
  account?: string;
  // 账户创建时间
  createTime?: number;
  // 创建该账户的交易hash
  hash?: string;
  // 创建该账户的 账户hash
  parent?: string;
  static names(): { [key: string]: string } {
    return {
      account: 'account',
      createTime: 'create_time',
      hash: 'hash',
      parent: 'parent',
    };
  }

  static types(): { [key: string]: any } {
    return {
      account: 'string',
      createTime: 'number',
      hash: 'string',
      parent: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// doc删除service
export class DidDeleteService extends $tea.Model {
  // 修改前did doc版本
  previousVersion: number;
  // 指定服务的id
  serviceId: string;
  static names(): { [key: string]: string } {
    return {
      previousVersion: 'previous_version',
      serviceId: 'service_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      previousVersion: 'number',
      serviceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 可验证声明相关的事件
export class VCEvent extends $tea.Model {
  // 事件对应的合约方法
  action: string;
  // 本次事件的触发者
  from: string;
  // 事件在区块的高度
  height: number;
  // 该VC的颁发者
  issuer: string;
  // 有效，或者无效
  status: string;
  // 该vc的接受者
  subjec: string;
  // 交易hash
  // 
  txHash: string;
  // 交易在区块中的index
  txIndex: number;
  // 可验证声明Hash值
  vcHash: string;
  // vcid
  vcId: string;
  static names(): { [key: string]: string } {
    return {
      action: 'action',
      from: 'from',
      height: 'height',
      issuer: 'issuer',
      status: 'status',
      subjec: 'subjec',
      txHash: 'tx_hash',
      txIndex: 'tx_index',
      vcHash: 'vc_hash',
      vcId: 'vc_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      action: 'string',
      from: 'string',
      height: 'number',
      issuer: 'string',
      status: 'string',
      subjec: 'string',
      txHash: 'string',
      txIndex: 'number',
      vcHash: 'string',
      vcId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// dis服务发现对象
export class DisServiceInfo extends $tea.Model {
  // 提供服务的did
  controller: string;
  // 服务地址
  endPoint: string;
  // 服务id
  serviceId: string;
  // 服务类型
  serviceType: string;
  static names(): { [key: string]: string } {
    return {
      controller: 'controller',
      endPoint: 'end_point',
      serviceId: 'service_id',
      serviceType: 'service_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      controller: 'string',
      endPoint: 'string',
      serviceId: 'string',
      serviceType: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// POAP徽章的详细信息
export class PoapInfo extends $tea.Model {
  // 徽章ID，具有唯一性
  poapId: string;
  // 徽章名字
  poapName: string;
  // 徽章HASH
  uniHash: string;
  // 状态，枚举值
  status?: string;
  // 徽章资源 URL
  poapUrl: string;
  // 枚举值，2D_IMAGE--2D图片渲染；3D_OASISENGINE--3D模型渲染
  renderType: string;
  // 3D模型降级使用的资源URL
  faultToleranceUrl?: string;
  // 小程序详情跳转URL。临时链接，过期时间为 detail_alipays_url_expire_time 字段的值
  detailAlipaysUrl?: string;
  // 详情页跳转URL过期时间
  detailAlipaysUrlExpireTime?: string;
  static names(): { [key: string]: string } {
    return {
      poapId: 'poap_id',
      poapName: 'poap_name',
      uniHash: 'uni_hash',
      status: 'status',
      poapUrl: 'poap_url',
      renderType: 'render_type',
      faultToleranceUrl: 'fault_tolerance_url',
      detailAlipaysUrl: 'detail_alipays_url',
      detailAlipaysUrlExpireTime: 'detail_alipays_url_expire_time',
    };
  }

  static types(): { [key: string]: any } {
    return {
      poapId: 'string',
      poapName: 'string',
      uniHash: 'string',
      status: 'string',
      poapUrl: 'string',
      renderType: 'string',
      faultToleranceUrl: 'string',
      detailAlipaysUrl: 'string',
      detailAlipaysUrlExpireTime: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 分布式数字身份信息
export class DidInfo extends $tea.Model {
  // 分布式数字身份id
  did: string;
  // 分布式数字身份对应的用户名称
  name: string;
  static names(): { [key: string]: string } {
    return {
      did: 'did',
      name: 'name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      did: 'string',
      name: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 数据隐私服务选择tapp信息的结构体
export class ChoiceTappInfo extends $tea.Model {
  // 选择的tapp的名字
  tappName: string;
  // 版本号，如果不填就选择最新的版本
  tappVersion?: number;
  // 该tapp将被声明在did doc中的id
  serviceId: string;
  static names(): { [key: string]: string } {
    return {
      tappName: 'tapp_name',
      tappVersion: 'tapp_version',
      serviceId: 'service_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      tappName: 'string',
      tappVersion: 'number',
      serviceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 复制阿里云合约工程信息
export class ALiYunContractProjectDuplicate extends $tea.Model {
  // id
  id?: string;
  // consortium_id
  consortiumId?: string;
  // gmt_create
  gmtCreate?: number;
  // gmt_modified
  gmtModified?: number;
  // name
  name?: string;
  // version
  version?: string;
  // description
  description?: string;
  static names(): { [key: string]: string } {
    return {
      id: 'id',
      consortiumId: 'consortium_id',
      gmtCreate: 'gmt_create',
      gmtModified: 'gmt_modified',
      name: 'name',
      version: 'version',
      description: 'description',
    };
  }

  static types(): { [key: string]: any } {
    return {
      id: 'string',
      consortiumId: 'string',
      gmtCreate: 'number',
      gmtModified: 'number',
      name: 'string',
      version: 'string',
      description: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 物流金融信用流转流水信息
export class CreditTransferStatementInfo extends $tea.Model {
  // 信用凭证额度
  creditLimit?: string;
  // 信用凭证到期时间
  expireDate?: string;
  // 凭证来源方did
  fromDid?: string;
  // 信用凭证发起时间
  issueDate?: string;
  // 信用流转凭证
  issueId?: string;
  // 流水类型
  stateType?: string;
  // 凭证流转方did
  toDid?: string;
  static names(): { [key: string]: string } {
    return {
      creditLimit: 'credit_limit',
      expireDate: 'expire_date',
      fromDid: 'from_did',
      issueDate: 'issue_date',
      issueId: 'issue_id',
      stateType: 'state_type',
      toDid: 'to_did',
    };
  }

  static types(): { [key: string]: any } {
    return {
      creditLimit: 'string',
      expireDate: 'string',
      fromDid: 'string',
      issueDate: 'string',
      issueId: 'string',
      stateType: 'string',
      toDid: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 阿里云合约工程信息查询
export class ALiYunContractProjects extends $tea.Model {
  // pagination
  pagination?: ALiYunPagination;
  // contract_projects
  contractProjects?: ALiYunContractProject[];
  static names(): { [key: string]: string } {
    return {
      pagination: 'pagination',
      contractProjects: 'contract_projects',
    };
  }

  static types(): { [key: string]: any } {
    return {
      pagination: ALiYunPagination,
      contractProjects: { 'type': 'array', 'itemType': ALiYunContractProject },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 阿里云区块链资源类型信息
export class ALiYunChainResouceType extends $tea.Model {
  // type_id
  typeId?: number;
  // cpu
  cpu?: number;
  // memory
  memory?: number;
  // disk
  disk?: number;
  static names(): { [key: string]: string } {
    return {
      typeId: 'type_id',
      cpu: 'cpu',
      memory: 'memory',
      disk: 'disk',
    };
  }

  static types(): { [key: string]: any } {
    return {
      typeId: 'number',
      cpu: 'number',
      memory: 'number',
      disk: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 结构化存证类型
export class DepositMetaDataItem extends $tea.Model {
  // 结构化存证时该item的描述
  desc: string;
  // 结构化存证该数据字段的唯一索引
  key: string;
  // 结构化存证时该item的类型
  // 0 text
  // 1 encrypt text
  // 2 txHash
  // 3 image url
  // 4 vedio url
  // 5 map url
  type: number;
  // 结构化数据存证时，该item的值
  value: string;
  static names(): { [key: string]: string } {
    return {
      desc: 'desc',
      key: 'key',
      type: 'type',
      value: 'value',
    };
  }

  static types(): { [key: string]: any } {
    return {
      desc: 'string',
      key: 'string',
      type: 'number',
      value: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 阿里云最新交易信息
export class ALiYunLatestTransaction extends $tea.Model {
  // hash
  hash?: string;
  // transaction_v10_type
  transactionV10Type?: string;
  // trans_type_v6
  transTypeV6?: string;
  // from
  from?: string;
  // to
  to?: string;
  // create_time
  createTime?: number;
  static names(): { [key: string]: string } {
    return {
      hash: 'hash',
      transactionV10Type: 'transaction_v10_type',
      transTypeV6: 'trans_type_v6',
      from: 'from',
      to: 'to',
      createTime: 'create_time',
    };
  }

  static types(): { [key: string]: any } {
    return {
      hash: 'string',
      transactionV10Type: 'string',
      transTypeV6: 'string',
      from: 'string',
      to: 'string',
      createTime: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 分页查询请求信息
export class PageReq extends $tea.Model {
  // 页码
  num: number;
  // 页大小
  size: number;
  static names(): { [key: string]: string } {
    return {
      num: 'num',
      size: 'size',
    };
  }

  static types(): { [key: string]: any } {
    return {
      num: 'number',
      size: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 用户密钥信息
export class UserBizKeyInfo extends $tea.Model {
  // 拥有该密钥的用户列表
  grantedUser: string[];
  // 密钥名称
  keyName: string;
  static names(): { [key: string]: string } {
    return {
      grantedUser: 'granted_user',
      keyName: 'key_name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      grantedUser: { 'type': 'array', 'itemType': 'string' },
      keyName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 证书详情
export class BareClaim extends $tea.Model {
  // 下面的内容由调用者自己定义，建议只存放必要的声明信息，不要放置敏感数据
  claim: string;
  // 证书类型
  type?: string;
  static names(): { [key: string]: string } {
    return {
      claim: 'claim',
      type: 'type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      claim: 'string',
      type: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 合约链配置信息结果，内部包含一个列表，列举多个合约链的配置信息
export class ContractIdeConfigResult extends $tea.Model {
  // 合约链的配置信息，可包含多个合约链的配置
  contractIdeConfigList: ContractIdeConfig[];
  static names(): { [key: string]: string } {
    return {
      contractIdeConfigList: 'contract_ide_config_list',
    };
  }

  static types(): { [key: string]: any } {
    return {
      contractIdeConfigList: { 'type': 'array', 'itemType': ContractIdeConfig },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 合约与应用关联信息
export class ContractBindListResp extends $tea.Model {
  // 合约关联列表
  list?: ContractBindResp[];
  static names(): { [key: string]: string } {
    return {
      list: 'list',
    };
  }

  static types(): { [key: string]: any } {
    return {
      list: { 'type': 'array', 'itemType': ContractBindResp },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 合约详情
export class ContractDetailResp extends $tea.Model {
  // 合约服务ID
  serviceId?: string;
  // 合约服务名称
  name?: string;
  // 创建人
  creator?: string;
  // 创建时间
  createTime?: number;
  // 订购产品
  orderingProducts?: string;
  // 关联区块链id
  chanId?: string;
  // 合约状态
  contractStatus?: string;
  // 合约部署进度当前状态
  status?: string;
  // 合约部署进度
  progressInfoList?: InstanceProgressInfo[];
  // 实例最近调用记录(暂缓，先不做)
  recordInfoList?: InstanceRecordInfo[];
  static names(): { [key: string]: string } {
    return {
      serviceId: 'service_id',
      name: 'name',
      creator: 'creator',
      createTime: 'create_time',
      orderingProducts: 'ordering_products',
      chanId: 'chan_id',
      contractStatus: 'contract_status',
      status: 'status',
      progressInfoList: 'progress_info_list',
      recordInfoList: 'record_info_list',
    };
  }

  static types(): { [key: string]: any } {
    return {
      serviceId: 'string',
      name: 'string',
      creator: 'string',
      createTime: 'number',
      orderingProducts: 'string',
      chanId: 'string',
      contractStatus: 'string',
      status: 'string',
      progressInfoList: { 'type': 'array', 'itemType': InstanceProgressInfo },
      recordInfoList: { 'type': 'array', 'itemType': InstanceRecordInfo },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 托管数据库ManagedMQDTO结构体
export class ManagedMQDTOStructBody extends $tea.Model {
  // id
  id: string;
  // 实例
  instance?: string;
  // 主题
  topic?: string;
  // 类型
  type?: string;
  static names(): { [key: string]: string } {
    return {
      id: 'id',
      instance: 'instance',
      topic: 'topic',
      type: 'type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      id: 'string',
      instance: 'string',
      topic: 'string',
      type: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 证书批量颁发进度
export class CertIssueProgressDTO extends $tea.Model {
  // 证书实例id
  bizId: string;
  // 存证ID，如果颁发失败，此值为null
  vcId: string;
  // 因校验异常停止任务（不会继续校验文件内容和颁发证书） -3
  // 因校验内容不正确停止颁发任务(会校验完所有的行但不执行颁发) -2
  // 已手动取消（可重试状态下手动取消任务，取消状态下可以启动新的颁发任务） -1
  // 可重试 0
  // 执行中（初始状态） 1
  // 已成功完成 2
  status: number;
  // is_error=true时的错误描述
  errorMessage: string;
  // 证书的字段标题列表
  titles: string[];
  // 颁发进度百分比
  progressPercent: number;
  // 当前批次数据总行数（不含标题）
  totalNum: string;
  // 颁发证书当前执行的阶段，VERIFY：校验文件中，ISSUE：颁发中
  curTaskType: string;
  // 颁发开始的时间戳
  startTimeMillis: number;
  // 颁发结束的时间戳
  endTimeMillis: number;
  // 校验错误描述列表
  errorDetails: TemplateInstanceErrorDetailDTO[];
  static names(): { [key: string]: string } {
    return {
      bizId: 'biz_id',
      vcId: 'vc_id',
      status: 'status',
      errorMessage: 'error_message',
      titles: 'titles',
      progressPercent: 'progress_percent',
      totalNum: 'total_num',
      curTaskType: 'cur_task_type',
      startTimeMillis: 'start_time_millis',
      endTimeMillis: 'end_time_millis',
      errorDetails: 'error_details',
    };
  }

  static types(): { [key: string]: any } {
    return {
      bizId: 'string',
      vcId: 'string',
      status: 'number',
      errorMessage: 'string',
      titles: { 'type': 'array', 'itemType': 'string' },
      progressPercent: 'number',
      totalNum: 'string',
      curTaskType: 'string',
      startTimeMillis: 'number',
      endTimeMillis: 'number',
      errorDetails: { 'type': 'array', 'itemType': TemplateInstanceErrorDetailDTO },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 存证信息集合
export class NotaryTransaction extends $tea.Model {
  // 如果存证类型为text, 则为存证内容
  // 如果存证类型为file,则为存证文件临时下载地址
  content: string;
  // 链上存证哈希
  transactionHash: string;
  // 存证类型
  type: string;
  static names(): { [key: string]: string } {
    return {
      content: 'content',
      transactionHash: 'transaction_hash',
      type: 'type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      content: 'string',
      transactionHash: 'string',
      type: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 蚂蚁链最新交易信息
export class BlockchainBrowserLatestTransaction extends $tea.Model {
  // create_time
  createTime: number;
  // from
  from: string;
  // to
  to: string;
  // hash
  hash: string;
  // transactionV10Type
  transactionType: string;
  static names(): { [key: string]: string } {
    return {
      createTime: 'create_time',
      from: 'from',
      to: 'to',
      hash: 'hash',
      transactionType: 'transaction_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      createTime: 'number',
      from: 'string',
      to: 'string',
      hash: 'string',
      transactionType: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 版通历史发行记录信息
export class EPIssueHisInfo extends $tea.Model {
  // 版通发行日期时间戳
  issueDate: number;
  // 版通线下发行量
  offlineIssueAmount: number;
  // 版通线上发行量
  onlineIssueAmount: number;
  // 版通自持发行量
  selfIssueAmount: number;
  static names(): { [key: string]: string } {
    return {
      issueDate: 'issue_date',
      offlineIssueAmount: 'offline_issue_amount',
      onlineIssueAmount: 'online_issue_amount',
      selfIssueAmount: 'self_issue_amount',
    };
  }

  static types(): { [key: string]: any } {
    return {
      issueDate: 'number',
      offlineIssueAmount: 'number',
      onlineIssueAmount: 'number',
      selfIssueAmount: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 数据资产分页查询
export class ListDataEntityResult extends $tea.Model {
  // 数据模型信息
  dataModel: DataModel;
  // 数据资产信息
  dataEntity: DataEntity;
  static names(): { [key: string]: string } {
    return {
      dataModel: 'data_model',
      dataEntity: 'data_entity',
    };
  }

  static types(): { [key: string]: any } {
    return {
      dataModel: DataModel,
      dataEntity: DataEntity,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 新建合约服务
export class ContractCreateReq extends $tea.Model {
  // 链ID
  chainId: string;
  // 合约模板标识
  templateId: string;
  // 合约名称
  name: string;
  static names(): { [key: string]: string } {
    return {
      chainId: 'chain_id',
      templateId: 'template_id',
      name: 'name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      chainId: 'string',
      templateId: 'string',
      name: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// identity parameter
export class IdentityParam extends $tea.Model {
  // 经办人姓名
  agent?: string;
  // 经办人身份证号
  agentId?: string;
  // 用户的姓名
  certName: string;
  // 用户的身份证号
  certNo: string;
  // 用户证件类型，目前只支持IDENTITY_CARD
  certType: string;
  // 法人姓名，企业认证必选
  legalPerson?: string;
  // 法人身份证，企业认证必选
  legalPersonId?: string;
  // 手机号码
  mobileNo?: string;
  // 扩展属性字段
  properties?: string;
  // 用户类型，默认为PERSON
  userType?: string;
  static names(): { [key: string]: string } {
    return {
      agent: 'agent',
      agentId: 'agent_id',
      certName: 'cert_name',
      certNo: 'cert_no',
      certType: 'cert_type',
      legalPerson: 'legal_person',
      legalPersonId: 'legal_person_id',
      mobileNo: 'mobile_no',
      properties: 'properties',
      userType: 'user_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      agent: 'string',
      agentId: 'string',
      certName: 'string',
      certNo: 'string',
      certType: 'string',
      legalPerson: 'string',
      legalPersonId: 'string',
      mobileNo: 'string',
      properties: 'string',
      userType: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 阿里云链信息
export class ALiYunChainInfo extends $tea.Model {
  // abnormal_nodes
  abnormalNodes?: number;
  // ant_chain_id
  antChainId?: string;
  // block_height
  blockHeight?: number;
  // create_time
  createTime?: number;
  // is_role
  isRole?: boolean;
  // node_number
  nodeNumber?: number;
  // normal
  normal?: boolean;
  // transaction_sum
  transactionSum?: number;
  // Version
  version?: string;
  // node_infos
  nodeInfos?: ALiYunChainNodeInfo[];
  static names(): { [key: string]: string } {
    return {
      abnormalNodes: 'abnormal_nodes',
      antChainId: 'ant_chain_id',
      blockHeight: 'block_height',
      createTime: 'create_time',
      isRole: 'is_role',
      nodeNumber: 'node_number',
      normal: 'normal',
      transactionSum: 'transaction_sum',
      version: 'version',
      nodeInfos: 'node_infos',
    };
  }

  static types(): { [key: string]: any } {
    return {
      abnormalNodes: 'number',
      antChainId: 'string',
      blockHeight: 'number',
      createTime: 'number',
      isRole: 'boolean',
      nodeNumber: 'number',
      normal: 'boolean',
      transactionSum: 'number',
      version: 'string',
      nodeInfos: { 'type': 'array', 'itemType': ALiYunChainNodeInfo },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 创建did doc时的具体操作
export class DidAddDoc extends $tea.Model {
  // did doc content
  doc: string;
  static names(): { [key: string]: string } {
    return {
      doc: 'doc',
    };
  }

  static types(): { [key: string]: any } {
    return {
      doc: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 证书模板详情类
export class TemplateInfoDTO extends $tea.Model {
  // 主键
  id: number;
  // 模板类别：马拉松类、滑雪类
  category: string;
  // 模板内容， json格式文本
  claimTemplate: string;
  // 创建时间
  gmtCreate: string;
  // 修改时间
  gmtModified: string;
  static names(): { [key: string]: string } {
    return {
      id: 'id',
      category: 'category',
      claimTemplate: 'claim_template',
      gmtCreate: 'gmt_create',
      gmtModified: 'gmt_modified',
    };
  }

  static types(): { [key: string]: any } {
    return {
      id: 'number',
      category: 'string',
      claimTemplate: 'string',
      gmtCreate: 'string',
      gmtModified: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

// 键值对
export class XNameValuePair extends $tea.Model {
  // 键名
  name: string;
  // 键值
  value: string;
  static names(): { [key: string]: string } {
    return {
      name: 'name',
      value: 'value',
    };
  }

  static types(): { [key: string]: any } {
    return {
      name: 'string',
      value: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartAccountMappingRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 映射账户详细信息
  account: AccountMap;
  // 扩展信息
  extension: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      account: 'account',
      extension: 'extension',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      account: AccountMap,
      extension: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartAccountMappingResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 映射结果
  data?: AccountMappingResult;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      data: 'data',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      data: AccountMappingResult,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class BatchcreateAccountMappingRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 待映射处理的账户信息列表
  data: AccountMap[];
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      data: 'data',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      data: { 'type': 'array', 'itemType': AccountMap },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class BatchcreateAccountMappingResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 当前请求分配的请求ID，可以通过这个值查询映射结果
  batchId?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      batchId: 'batch_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      batchId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartAccountSignatureRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 加密算法
  algorithm: string;
  // 区块链唯一标示
  bizid: string;
  // 用户需要签名的原始数据
  data: string;
  // 签名账户在原系统中的唯一标示
  uid: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      algorithm: 'algorithm',
      bizid: 'bizid',
      data: 'data',
      uid: 'uid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      algorithm: 'string',
      bizid: 'string',
      data: 'string',
      uid: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartAccountSignatureResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 签名
  signature?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      signature: 'signature',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      signature: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryAccountMappingresultRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 查询之前对应批量映射请求的映射结果
  batchId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      batchId: 'batch_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      batchId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryAccountMappingresultResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 映射结果列表
  data?: AccountMappingResult[];
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      data: 'data',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      data: { 'type': 'array', 'itemType': AccountMappingResult },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryAccountMappingRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 要映射的链对应的唯一id
  bizid: string;
  // 自有系统中该账户唯一标示
  uid: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizid: 'bizid',
      uid: 'uid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizid: 'string',
      uid: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryAccountMappingResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 该用户信息
  data?: AccountMappingInfo;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      data: 'data',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      data: AccountMappingInfo,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class BatchqueryAccountMappingRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 要映射的链对应的唯一id
  bizid: string;
  // 查询页数
  pageNum: number;
  // 每页大小
  pageSize: number;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizid: 'bizid',
      pageNum: 'page_num',
      pageSize: 'page_size',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizid: 'string',
      pageNum: 'number',
      pageSize: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class BatchqueryAccountMappingResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 返回查询的数据
  data?: QueryMappingBatchResult;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      data: 'data',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      data: QueryMappingBatchResult,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateAccountMappingInfoRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 注册地址
  address?: string;
  // 业务场景code
  bizCode: string;
  // 业务名称
  bizName: string;
  // 业务类型，预留
  bizType?: string;
  // 用户创建时间
  createTime?: string;
  // 用户注销时间
  endTime?: string;
  // 扩展字段，使用json格式
  extension?: string;
  // 业务组code
  groupCode: string;
  // 业务组名称
  groupName: string;
  // 唯一标示类型，0:统一信用代码,1:开票机构代码,2:身份证号
  identityType?: number;
  // 唯一标示码
  identityValue?: string;
  // 用户标签
  label?: string;
  // 间连用户的上层直连用户名称
  parent?: string;
  // 统计时间
  statDate?: string;
  // 用户id
  userId?: string;
  // 用户或企业名称
  userName?: string;
  // 用户类型：direct直连，indirect间连，partner合作伙伴
  userType?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      address: 'address',
      bizCode: 'biz_code',
      bizName: 'biz_name',
      bizType: 'biz_type',
      createTime: 'create_time',
      endTime: 'end_time',
      extension: 'extension',
      groupCode: 'group_code',
      groupName: 'group_name',
      identityType: 'identity_type',
      identityValue: 'identity_value',
      label: 'label',
      parent: 'parent',
      statDate: 'stat_date',
      userId: 'user_id',
      userName: 'user_name',
      userType: 'user_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      address: 'string',
      bizCode: 'string',
      bizName: 'string',
      bizType: 'string',
      createTime: 'string',
      endTime: 'string',
      extension: 'string',
      groupCode: 'string',
      groupName: 'string',
      identityType: 'number',
      identityValue: 'string',
      label: 'string',
      parent: 'string',
      statDate: 'string',
      userId: 'string',
      userName: 'string',
      userType: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateAccountMappingInfoResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 返回id
  accountId?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      accountId: 'account_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      accountId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class BatchcreateAccountMappingInfoRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 批量上传的用户信息
  list: AccountInfoWithBiz[];
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      list: 'list',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      list: { 'type': 'array', 'itemType': AccountInfoWithBiz },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class BatchcreateAccountMappingInfoResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 账户id列表
  accounts?: string[];
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      accounts: 'accounts',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      accounts: { 'type': 'array', 'itemType': 'string' },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetAkdfUserbizkeyRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 区块链id
  bizid: string;
  // 密钥名称
  keyName: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizid: 'bizid',
      keyName: 'key_name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizid: 'string',
      keyName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetAkdfUserbizkeyResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 区块链id
  bizid?: string;
  // 4dY3DnjHPogYcsiVujkdhBRBceY8ZT5cUBP1zRBAZia7WZhJZyHmWbARBAWvy13aB7cNenbBg5D4CnM1gijv5YiSgBgHTC89sag9M7cxxdaRMrvFEA4YpcaunZdd4Q1APBynsDsqmVyzyGnZk5Kez9WBz5PZRyRC3gqCNXhHLLwuJmGCn8aEv3Ar9vsFUQa6qAgNtVVgiDxEYqBNNQc9K51ytdpBX81ph8nzy2ctUvLqi4G7iFU1wVsdd14XS7oz1v54M5Hb2CUTkv7ncXZSnNJYDsGyKAmHiriL2rargNzp6v2nUXhGSrkCVMDCVkZVcpeVFqSxKGatVdkGYUAswt3vtRVCcs
  encryptedPrivateKey?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      bizid: 'bizid',
      encryptedPrivateKey: 'encrypted_private_key',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      bizid: 'string',
      encryptedPrivateKey: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListAkdfUserbizkeyRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 区块链id
  bizid: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizid: 'bizid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizid: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListAkdfUserbizkeyResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 区块链id
  bizid?: string;
  // 用户密钥信息
  userBizKeyInfo?: UserBizKeyInfo[];
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      bizid: 'bizid',
      userBizKeyInfo: 'user_biz_key_info',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      bizid: 'string',
      userBizKeyInfo: { 'type': 'array', 'itemType': UserBizKeyInfo },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CheckBlockchainOrderRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 参数
  data: string;
  // region_id
  regionId?: string;
  // 用户请求ID
  userRequestId?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      data: 'data',
      regionId: 'region_id',
      userRequestId: 'user_request_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      data: 'string',
      regionId: 'string',
      userRequestId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CheckBlockchainOrderResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 阿里云订单结果
  result?: ALiYunOrderResult;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: ALiYunOrderResult,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class VerifyBlockchainOrderRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 参数信息
  data: string;
  // 区域信息
  regionId?: string;
  // 用户请求id
  userRequestId?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      data: 'data',
      regionId: 'region_id',
      userRequestId: 'user_request_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      data: 'string',
      regionId: 'string',
      userRequestId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class VerifyBlockchainOrderResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 阿里云请求返回结果
  result?: ALiYunOrderResult;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: ALiYunOrderResult,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InvalidateBlockchainOrderRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 参数
  data: string;
  // 区域信息
  regionId?: string;
  // 用户请求信息
  userRequestId?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      data: 'data',
      regionId: 'region_id',
      userRequestId: 'user_request_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      data: 'string',
      regionId: 'string',
      userRequestId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InvalidateBlockchainOrderResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 阿里云请求参数
  result?: ALiYunOrderResult;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: ALiYunOrderResult,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ReleaseBlockchainOrderPhysicalRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // bid
  bid: string;
  // country
  country?: string;
  // gmt_wakeup
  gmtWakeup?: string;
  // hid
  hid: number;
  // interrupt
  interrupt?: boolean;
  // pk
  pk: string;
  // region_id
  regionId?: string;
  // request_id
  requestId?: string;
  // task_extra_data
  taskExtraData?: string;
  // task_identifier
  taskIdentifier?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bid: 'bid',
      country: 'country',
      gmtWakeup: 'gmt_wakeup',
      hid: 'hid',
      interrupt: 'interrupt',
      pk: 'pk',
      regionId: 'region_id',
      requestId: 'request_id',
      taskExtraData: 'task_extra_data',
      taskIdentifier: 'task_identifier',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bid: 'string',
      country: 'string',
      gmtWakeup: 'string',
      hid: 'number',
      interrupt: 'boolean',
      pk: 'string',
      regionId: 'string',
      requestId: 'string',
      taskExtraData: 'string',
      taskIdentifier: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ReleaseBlockchainOrderPhysicalResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // bid
  bid?: string;
  // country
  country?: string;
  // gmt_wakeup
  gmtWakeup?: string;
  // hid
  hid?: number;
  // interrupt
  interrupt?: boolean;
  // invoker
  invoker?: string;
  // level
  level?: number;
  // message
  message?: string;
  // pk
  pk?: string;
  // prompt
  prompt?: string;
  // request_id
  requestId?: string;
  // 阿里云请求返回结果
  result?: ALiYunDeleteResource;
  // task_extra_data
  taskExtraData?: string;
  // task_identifier
  taskIdentifier?: string;
  // url
  url?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      bid: 'bid',
      country: 'country',
      gmtWakeup: 'gmt_wakeup',
      hid: 'hid',
      interrupt: 'interrupt',
      invoker: 'invoker',
      level: 'level',
      message: 'message',
      pk: 'pk',
      prompt: 'prompt',
      requestId: 'request_id',
      result: 'result',
      taskExtraData: 'task_extra_data',
      taskIdentifier: 'task_identifier',
      url: 'url',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      bid: 'string',
      country: 'string',
      gmtWakeup: 'string',
      hid: 'number',
      interrupt: 'boolean',
      invoker: 'string',
      level: 'number',
      message: 'string',
      pk: 'string',
      prompt: 'string',
      requestId: 'string',
      result: ALiYunDeleteResource,
      taskExtraData: 'string',
      taskIdentifier: 'string',
      url: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ReleaseBlockchainOrderLogicalRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // bid
  bid: string;
  // country
  country?: string;
  // gmt_wakeup
  gmtWakeup?: string;
  // hid
  hid: number;
  // 中断标识
  interrupt?: boolean;
  // pk
  pk: string;
  // region_id
  regionId?: string;
  // request_id
  requestId?: string;
  // task_extra_data
  taskExtraData?: string;
  // task_identifier
  taskIdentifier?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bid: 'bid',
      country: 'country',
      gmtWakeup: 'gmt_wakeup',
      hid: 'hid',
      interrupt: 'interrupt',
      pk: 'pk',
      regionId: 'region_id',
      requestId: 'request_id',
      taskExtraData: 'task_extra_data',
      taskIdentifier: 'task_identifier',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bid: 'string',
      country: 'string',
      gmtWakeup: 'string',
      hid: 'number',
      interrupt: 'boolean',
      pk: 'string',
      regionId: 'string',
      requestId: 'string',
      taskExtraData: 'string',
      taskIdentifier: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ReleaseBlockchainOrderLogicalResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // bid
  bid?: string;
  // country
  country?: string;
  // data
  data?: boolean;
  // gmt_wakeup
  gmtWakeup?: string;
  // hid
  hid?: number;
  // interrupt
  interrupt?: boolean;
  // invoker
  invoker?: string;
  // level
  level?: number;
  // message
  message?: string;
  // pk
  pk?: string;
  // prompt
  prompt?: string;
  // reques_id
  requesId?: string;
  // 阿里云请求返回结果
  result?: ALiYunDeleteResource;
  // task_extra_data
  taskExtraData?: string;
  // task_identifier
  taskIdentifier?: string;
  // url
  url?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      bid: 'bid',
      country: 'country',
      data: 'data',
      gmtWakeup: 'gmt_wakeup',
      hid: 'hid',
      interrupt: 'interrupt',
      invoker: 'invoker',
      level: 'level',
      message: 'message',
      pk: 'pk',
      prompt: 'prompt',
      requesId: 'reques_id',
      result: 'result',
      taskExtraData: 'task_extra_data',
      taskIdentifier: 'task_identifier',
      url: 'url',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      bid: 'string',
      country: 'string',
      data: 'boolean',
      gmtWakeup: 'string',
      hid: 'number',
      interrupt: 'boolean',
      invoker: 'string',
      level: 'number',
      message: 'string',
      pk: 'string',
      prompt: 'string',
      requesId: 'string',
      result: ALiYunDeleteResource,
      taskExtraData: 'string',
      taskIdentifier: 'string',
      url: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CheckBlockchainResourceRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // bid
  bid: string;
  // country
  country?: string;
  // gmt_wakeup
  gmtWakeup?: string;
  // hid
  hid: number;
  // interrupt
  interrupt?: boolean;
  // pk
  pk: string;
  // region_id
  regionId?: string;
  // request_id
  requestId?: string;
  // task_extra_data
  taskExtraData?: string;
  // task_identifier
  taskIdentifier?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bid: 'bid',
      country: 'country',
      gmtWakeup: 'gmt_wakeup',
      hid: 'hid',
      interrupt: 'interrupt',
      pk: 'pk',
      regionId: 'region_id',
      requestId: 'request_id',
      taskExtraData: 'task_extra_data',
      taskIdentifier: 'task_identifier',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bid: 'string',
      country: 'string',
      gmtWakeup: 'string',
      hid: 'number',
      interrupt: 'boolean',
      pk: 'string',
      regionId: 'string',
      requestId: 'string',
      taskExtraData: 'string',
      taskIdentifier: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CheckBlockchainResourceResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // bid
  bid?: string;
  // country
  country?: string;
  // gmt_wakeup
  gmtWakeup?: string;
  // hid
  hid?: number;
  // interrupt
  interrupt?: boolean;
  // invoker
  invoker?: string;
  // level
  level?: number;
  // message
  message?: string;
  // pk
  pk?: string;
  // prompt
  prompt?: string;
  // request_id
  requestId?: string;
  // task_extra_data
  taskExtraData?: string;
  // task_identifier
  taskIdentifier?: string;
  // url
  url?: string;
  // 阿里云资源请求返回结果
  result?: ALiYunDeleteResource;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      bid: 'bid',
      country: 'country',
      gmtWakeup: 'gmt_wakeup',
      hid: 'hid',
      interrupt: 'interrupt',
      invoker: 'invoker',
      level: 'level',
      message: 'message',
      pk: 'pk',
      prompt: 'prompt',
      requestId: 'request_id',
      taskExtraData: 'task_extra_data',
      taskIdentifier: 'task_identifier',
      url: 'url',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      bid: 'string',
      country: 'string',
      gmtWakeup: 'string',
      hid: 'number',
      interrupt: 'boolean',
      invoker: 'string',
      level: 'number',
      message: 'string',
      pk: 'string',
      prompt: 'string',
      requestId: 'string',
      taskExtraData: 'string',
      taskIdentifier: 'string',
      url: 'string',
      result: ALiYunDeleteResource,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ConfirmBlockchainOrderRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // data
  data: string;
  // region_id
  regionId?: string;
  // user_request_id
  userRequestId?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      data: 'data',
      regionId: 'region_id',
      userRequestId: 'user_request_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      data: 'string',
      regionId: 'string',
      userRequestId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ConfirmBlockchainOrderResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 阿里云接口返回结果
  result?: ALiYunOrderResult;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: ALiYunOrderResult,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ConnectBlockchainOrderRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // message
  message?: string;
  // region_id
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      message: 'message',
      regionId: 'region_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      message: 'string',
      regionId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ConnectBlockchainOrderResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 阿里云请求参数
  result?: ALiYunHandleBabelMns;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: ALiYunHandleBabelMns,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ExecBlockchainOrderRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // data
  data?: string;
  // region_id
  regionId?: string;
  // user_request_id
  userRequestId?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      data: 'data',
      regionId: 'region_id',
      userRequestId: 'user_request_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      data: 'string',
      regionId: 'string',
      userRequestId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ExecBlockchainOrderResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // result
  result?: ALiYunChainExecuteOrder;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: ALiYunChainExecuteOrder,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateUnionUnionRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 联盟描述
  consortiumDescription?: string;
  // 联盟名称
  consortiumName: string;
  // 区域信息
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      consortiumDescription: 'consortium_description',
      consortiumName: 'consortium_name',
      regionId: 'region_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      consortiumDescription: 'string',
      consortiumName: 'string',
      regionId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateUnionUnionResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 联盟信息
  result?: ALiYunUnion;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: ALiYunUnion,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteUnionUnionRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 联盟ID
  consortiumId: string;
  // 区域id
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      consortiumId: 'consortium_id',
      regionId: 'region_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      consortiumId: 'string',
      regionId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteUnionUnionResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 结果信息
  result?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateUnionUnionRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 联盟id
  consortiumId: string;
  // 联盟名称
  consortiumName: string;
  // 区域信息
  regionId?: string;
  // 联盟描述
  consortiumDescription?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      consortiumId: 'consortium_id',
      consortiumName: 'consortium_name',
      regionId: 'region_id',
      consortiumDescription: 'consortium_description',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      consortiumId: 'string',
      consortiumName: 'string',
      regionId: 'string',
      consortiumDescription: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateUnionUnionResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 结果信息
  result?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryUnionUnionRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 分页编号
  pageNumber?: string;
  // 分页大小
  pageSize: string;
  // 区域信息
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      pageNumber: 'page_number',
      pageSize: 'page_size',
      regionId: 'region_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      pageNumber: 'string',
      pageSize: 'string',
      regionId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryUnionUnionResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 阿里云联盟查询结果
  result?: ALiYunUnion;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: ALiYunUnion,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyUnionMemberRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 联盟id
  consortiumId?: string;
  // 被邀请用户的bid
  inviteBid?: string;
  // 被邀请的用户id
  inviteUserId?: number;
  // 区域信息
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      consortiumId: 'consortium_id',
      inviteBid: 'invite_bid',
      inviteUserId: 'invite_user_id',
      regionId: 'region_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      consortiumId: 'string',
      inviteBid: 'string',
      inviteUserId: 'number',
      regionId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyUnionMemberResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 邀请联盟的结果
  result?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ConfirmUnionMemberRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 邀请码
  code?: string;
  // 区域信息
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      code: 'code',
      regionId: 'region_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      code: 'string',
      regionId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ConfirmUnionMemberResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 阿里云联盟成员加入
  result?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryUnionChainRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 联盟id
  consortiumId: string;
  // 分页编号
  pageNumber?: number;
  // 分页大小
  pageSize: number;
  // region_id
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      consortiumId: 'consortium_id',
      pageNumber: 'page_number',
      pageSize: 'page_size',
      regionId: 'region_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      consortiumId: 'string',
      pageNumber: 'number',
      pageSize: 'number',
      regionId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryUnionChainResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 联盟内链数据
  result?: ALiYunUnion;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: ALiYunUnion,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryUnionMemberRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 联盟id
  consortiumId: string;
  // page_number
  pageNumber?: number;
  // page_size
  pageSize: number;
  // 区域信息
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      consortiumId: 'consortium_id',
      pageNumber: 'page_number',
      pageSize: 'page_size',
      regionId: 'region_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      consortiumId: 'string',
      pageNumber: 'number',
      pageSize: 'number',
      regionId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryUnionMemberResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 结果信息
  result?: ALiYunUnion;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: ALiYunUnion,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateUnionMemberRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // region_id
  regionId?: string;
  // member_name
  memberName: string;
  // consortium_id
  consortiumId: string;
  // member_id
  memberId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      regionId: 'region_id',
      memberName: 'member_name',
      consortiumId: 'consortium_id',
      memberId: 'member_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      regionId: 'string',
      memberName: 'string',
      consortiumId: 'string',
      memberId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateUnionMemberResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // result
  result?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateChainNameAntRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // ant_chain_id
  antChainId: string;
  // ant_chain_name
  antChainName: string;
  // region_id
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      antChainId: 'ant_chain_id',
      antChainName: 'ant_chain_name',
      regionId: 'region_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      antChainId: 'string',
      antChainName: 'string',
      regionId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateChainNameAntResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // result
  result?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateChainCertAntRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // ant_chain_id
  antChainId: string;
  // region_id
  regionId?: string;
  // upload_req
  uploadReq: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      antChainId: 'ant_chain_id',
      regionId: 'region_id',
      uploadReq: 'upload_req',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      antChainId: 'string',
      regionId: 'string',
      uploadReq: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateChainCertAntResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // result
  result?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyChainCertAntRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // ant_chain_id
  antChainId: string;
  // common_name
  commonName: string;
  // consortium_id
  consortiumId: string;
  // country_name
  countryName: string;
  // locality_name
  localityName: string;
  // organization_name
  organizationName: string;
  // organization_unit_name
  organizationUnitName: string;
  // password
  password: string;
  // region_id
  regionId?: string;
  // state_or_province_name
  stateOrProvinceName: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      antChainId: 'ant_chain_id',
      commonName: 'common_name',
      consortiumId: 'consortium_id',
      countryName: 'country_name',
      localityName: 'locality_name',
      organizationName: 'organization_name',
      organizationUnitName: 'organization_unit_name',
      password: 'password',
      regionId: 'region_id',
      stateOrProvinceName: 'state_or_province_name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      antChainId: 'string',
      commonName: 'string',
      consortiumId: 'string',
      countryName: 'string',
      localityName: 'string',
      organizationName: 'string',
      organizationUnitName: 'string',
      password: 'string',
      regionId: 'string',
      stateOrProvinceName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyChainCertAntResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // result
  result?: ALiYunChainDownload;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: ALiYunChainDownload,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateChainPublicCertRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // bizid
  bizid?: string;
  // consortium_id
  consortiumId?: string;
  // region_id
  regionId?: string;
  // upload_req
  uploadReq?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizid: 'bizid',
      consortiumId: 'consortium_id',
      regionId: 'region_id',
      uploadReq: 'upload_req',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizid: 'string',
      consortiumId: 'string',
      regionId: 'string',
      uploadReq: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateChainPublicCertResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // result
  result?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyChainPublicCertRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // bizid
  bizid?: string;
  // common_name
  commonName?: string;
  // country_name
  countryName?: string;
  // locality_name
  localityName?: string;
  // organization_name
  organizationName?: string;
  // organization_unit_name
  organizationUnitName?: string;
  // password
  password?: string;
  // region_id
  regionId?: string;
  // state_or_province_name
  stateOrProvinceName?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizid: 'bizid',
      commonName: 'common_name',
      countryName: 'country_name',
      localityName: 'locality_name',
      organizationName: 'organization_name',
      organizationUnitName: 'organization_unit_name',
      password: 'password',
      regionId: 'region_id',
      stateOrProvinceName: 'state_or_province_name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizid: 'string',
      commonName: 'string',
      countryName: 'string',
      localityName: 'string',
      organizationName: 'string',
      organizationUnitName: 'string',
      password: 'string',
      regionId: 'string',
      stateOrProvinceName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyChainPublicCertResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // result
  result?: ALiYunChainDownload;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: ALiYunChainDownload,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ReinitChainPublicCertRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // bizid
  bizid?: string;
  // region_id
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizid: 'bizid',
      regionId: 'region_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizid: 'string',
      regionId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ReinitChainPublicCertResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // result
  result?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateChainPublicAccountRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // account
  account?: string;
  // account_pub_key
  accountPubKey?: string;
  // account_recover_pub_key
  accountRecoverPubKey?: string;
  // bizid
  bizid?: string;
  // region_id
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      account: 'account',
      accountPubKey: 'account_pub_key',
      accountRecoverPubKey: 'account_recover_pub_key',
      bizid: 'bizid',
      regionId: 'region_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      account: 'string',
      accountPubKey: 'string',
      accountRecoverPubKey: 'string',
      bizid: 'string',
      regionId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateChainPublicAccountResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // result
  result?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyChainPublicAccountRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // account
  account?: string;
  // bizid
  bizid?: string;
  // password
  password?: string;
  // recover_password
  recoverPassword?: string;
  // region_id
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      account: 'account',
      bizid: 'bizid',
      password: 'password',
      recoverPassword: 'recover_password',
      regionId: 'region_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      account: 'string',
      bizid: 'string',
      password: 'string',
      recoverPassword: 'string',
      regionId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyChainPublicAccountResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // result
  result?: ALiYunChainAccount;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: ALiYunChainAccount,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryChainPublicRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // region_id
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      regionId: 'region_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      regionId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryChainPublicResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // result
  result?: ALiYunChain;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: ALiYunChain,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DownloadChainPublicCertRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // bizid
  bizid?: string;
  // region_id
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizid: 'bizid',
      regionId: 'region_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizid: 'string',
      regionId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DownloadChainPublicCertResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // result
  result?: ALiYunDownloadPath;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: ALiYunDownloadPath,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateChainAccountAntRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // account
  account?: string;
  // account_pub_key
  accountPubKey?: string;
  // account_recover_pub_key
  accountRecoverPubKey?: string;
  // ant_chain_id
  antChainId?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      account: 'account',
      accountPubKey: 'account_pub_key',
      accountRecoverPubKey: 'account_recover_pub_key',
      antChainId: 'ant_chain_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      account: 'string',
      accountPubKey: 'string',
      accountRecoverPubKey: 'string',
      antChainId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateChainAccountAntResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // result
  result?: ALiYunChainAccount;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: ALiYunChainAccount,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyChainAccountAntRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // account
  account?: string;
  // ant_chain_id
  antChainId?: string;
  // password
  password?: string;
  // recover_password
  recoverPassword?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      account: 'account',
      antChainId: 'ant_chain_id',
      password: 'password',
      recoverPassword: 'recover_password',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      account: 'string',
      antChainId: 'string',
      password: 'string',
      recoverPassword: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyChainAccountAntResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // result
  result?: ALiYunChainAccount;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: ALiYunChainAccount,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryChainAccountAntRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // ant_chain_id
  antChainId: string;
  // page_number
  pageNumber?: number;
  // page_size
  pageSize: number;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      antChainId: 'ant_chain_id',
      pageNumber: 'page_number',
      pageSize: 'page_size',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      antChainId: 'string',
      pageNumber: 'number',
      pageSize: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryChainAccountAntResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // result
  result?: ALiYunAccountList;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: ALiYunAccountList,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DownloadChainCertAntRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // ant_chain_id
  antChainId: string;
  // region_id
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      antChainId: 'ant_chain_id',
      regionId: 'region_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      antChainId: 'string',
      regionId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DownloadChainCertAntResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // result
  result?: ALiYunDownloadPath;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: ALiYunDownloadPath,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryChainNodeAntRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // ant_chain_id
  antChainId: string;
  // region_id
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      antChainId: 'ant_chain_id',
      regionId: 'region_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      antChainId: 'string',
      regionId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryChainNodeAntResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // result
  result?: string[];
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: { 'type': 'array', 'itemType': 'string' },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FreezeChainAccountAntRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // account
  account: string;
  // ant_chain_id
  antChainId: string;
  // region_id
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      account: 'account',
      antChainId: 'ant_chain_id',
      regionId: 'region_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      account: 'string',
      antChainId: 'string',
      regionId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FreezeChainAccountAntResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // result
  result?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UnfreezeChainAccountAntRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // account
  account?: string;
  // ant_chain_id
  antChainId: string;
  // region_id
  regionId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      account: 'account',
      antChainId: 'ant_chain_id',
      regionId: 'region_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      account: 'string',
      antChainId: 'string',
      regionId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UnfreezeChainAccountAntResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // result
  result?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ReinitChainCertAntRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // ant_chain_id
  antChainId: string;
  // region_id
  regionId?: string;
  // username
  username?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      antChainId: 'ant_chain_id',
      regionId: 'region_id',
      username: 'username',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      antChainId: 'string',
      regionId: 'string',
      username: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ReinitChainCertAntResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // result
  result?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryChainCertAntRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // ant_chain_id
  antChainId: string;
  // page_number
  pageNumber: number;
  // page_size
  pageSize: number;
  // region_id
  regionId?: string;
  // status
  status: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      antChainId: 'ant_chain_id',
      pageNumber: 'page_number',
      pageSize: 'page_size',
      regionId: 'region_id',
      status: 'status',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      antChainId: 'string',
      pageNumber: 'number',
      pageSize: 'number',
      regionId: 'string',
      status: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryChainCertAntResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // result
  result?: ALiYunCertificateApplications;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: ALiYunCertificateApplications,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryChainBrowserInfoRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // ant_chain_id
  antChainId: string;
  // region_id
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      antChainId: 'ant_chain_id',
      regionId: 'region_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      antChainId: 'string',
      regionId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryChainBrowserInfoResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // result
  result?: ALiYunChainInfo;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: ALiYunChainInfo,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryChainBrowserBlocksRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // ant_chain_id
  antChainId: string;
  // region_id
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      antChainId: 'ant_chain_id',
      regionId: 'region_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      antChainId: 'string',
      regionId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryChainBrowserBlocksResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // result
  result?: ALiYunChainBlockInfo[];
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: { 'type': 'array', 'itemType': ALiYunChainBlockInfo },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryChainBrowserTransactionsRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // bizid
  bizid?: string;
  // start
  start?: number;
  // end
  end?: number;
  // region_id
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizid: 'bizid',
      start: 'start',
      end: 'end',
      regionId: 'region_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizid: 'string',
      start: 'number',
      end: 'number',
      regionId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryChainBrowserTransactionsResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // result
  result?: ALiYunChainStatics[];
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: { 'type': 'array', 'itemType': ALiYunChainStatics },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class BatchqueryChainBrowserTransactionRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // ant_chain_id
  antChainId: string;
  // region_id
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      antChainId: 'ant_chain_id',
      regionId: 'region_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      antChainId: 'string',
      regionId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class BatchqueryChainBrowserTransactionResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // result
  result?: ALiYunLatestTransaction[];
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: { 'type': 'array', 'itemType': ALiYunLatestTransaction },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryChainBrowserReceiptRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // ant_chain_id
  antChainId: string;
  // hash
  hash: string;
  // region_id
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      antChainId: 'ant_chain_id',
      hash: 'hash',
      regionId: 'region_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      antChainId: 'string',
      hash: 'string',
      regionId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryChainBrowserReceiptResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // result
  result?: ALiYunTransactionReceipt;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: ALiYunTransactionReceipt,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryChainBrowserTransactionRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // ant_chain_id
  antChainId: string;
  // hash
  hash: string;
  // region_id
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      antChainId: 'ant_chain_id',
      hash: 'hash',
      regionId: 'region_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      antChainId: 'string',
      hash: 'string',
      regionId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryChainBrowserTransactionResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // result
  result?: ALiYunTransactionResult;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: ALiYunTransactionResult,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryChainBrowserBlockRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // ant_chain_id
  antChainId?: string;
  // height
  height?: number;
  // region_id
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      antChainId: 'ant_chain_id',
      height: 'height',
      regionId: 'region_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      antChainId: 'string',
      height: 'number',
      regionId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryChainBrowserBlockResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // result
  result?: ALiYunChainBlock;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: ALiYunChainBlock,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryChainResouceRegionRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // region_id
  regionId?: string;
  // locale
  locale?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      regionId: 'region_id',
      locale: 'locale',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      regionId: 'string',
      locale: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryChainResouceRegionResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // result
  result?: ALiYunChainRegion[];
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: { 'type': 'array', 'itemType': ALiYunChainRegion },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryChainResourceTypeRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // region_id
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      regionId: 'region_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      regionId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryChainResourceTypeResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // result
  result?: ALiYunChainResouceType[];
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: { 'type': 'array', 'itemType': ALiYunChainResouceType },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryChainResouceSaleRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // region_id
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      regionId: 'region_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      regionId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryChainResouceSaleResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // reslut
  reslut?: ALiYunChainResouceForSale;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      reslut: 'reslut',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      reslut: ALiYunChainResouceForSale,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryChainResourceConfigRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // purpose
  purpose?: string;
  // region_id
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      purpose: 'purpose',
      regionId: 'region_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      purpose: 'string',
      regionId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryChainResourceConfigResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // result
  result?: ALiYunChainConfigOption[];
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: { 'type': 'array', 'itemType': ALiYunChainConfigOption },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryChainBrowserStatisticsRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // ant_chain_id
  antChainId: string;
  // start
  start?: number;
  // end
  end?: number;
  // region_id
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      antChainId: 'ant_chain_id',
      start: 'start',
      end: 'end',
      regionId: 'region_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      antChainId: 'string',
      start: 'number',
      end: 'number',
      regionId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryChainBrowserStatisticsResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // result
  result?: ALiYunChainStatics[];
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: { 'type': 'array', 'itemType': ALiYunChainStatics },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ExecChainPublicContractRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // bizid
  bizid?: string;
  // transaction
  transaction?: string;
  // region_id
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizid: 'bizid',
      transaction: 'transaction',
      regionId: 'region_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizid: 'string',
      transaction: 'string',
      regionId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ExecChainPublicContractResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // result
  result?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryChainPublicIdeRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // bizid
  bizid?: string;
  // region_id
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizid: 'bizid',
      regionId: 'region_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizid: 'string',
      regionId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryChainPublicIdeResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // result
  result?: ALiYunChainCloudIdeConfig[];
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: { 'type': 'array', 'itemType': ALiYunChainCloudIdeConfig },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryChainPublicContentRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // region_id
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      regionId: 'region_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      regionId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryChainPublicContentResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // result
  result?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateChainContractProjectRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // region_id
  regionId?: string;
  // consortium_id
  consortiumId?: string;
  // project_name
  projectName?: string;
  // project_version
  projectVersion?: string;
  // project_description
  projectDescription?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      regionId: 'region_id',
      consortiumId: 'consortium_id',
      projectName: 'project_name',
      projectVersion: 'project_version',
      projectDescription: 'project_description',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      regionId: 'string',
      consortiumId: 'string',
      projectName: 'string',
      projectVersion: 'string',
      projectDescription: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateChainContractProjectResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // result
  result?: ALiYunContractProject;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: ALiYunContractProject,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteChainContractProjectRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // project_id
  projectId?: string;
  // region_id
  regionId?: string;
  // consortium_id
  consortiumId?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      projectId: 'project_id',
      regionId: 'region_id',
      consortiumId: 'consortium_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      projectId: 'string',
      regionId: 'string',
      consortiumId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteChainContractProjectResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // result
  result?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CloneChainContractProjectRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // project_description
  projectDescription: string;
  // project_id
  projectId: string;
  // project_name
  projectName: string;
  // project_version
  projectVersion: string;
  // region_id
  regionId?: string;
  // consortium_id
  consortiumId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      projectDescription: 'project_description',
      projectId: 'project_id',
      projectName: 'project_name',
      projectVersion: 'project_version',
      regionId: 'region_id',
      consortiumId: 'consortium_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      projectDescription: 'string',
      projectId: 'string',
      projectName: 'string',
      projectVersion: 'string',
      regionId: 'string',
      consortiumId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CloneChainContractProjectResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // result
  result?: ALiYunContractProject;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: ALiYunContractProject,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryChainContractProjectRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // consortium_id
  consortiumId: string;
  // page_number
  pageNumber: number;
  // page_size
  pageSize: number;
  // region_id
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      consortiumId: 'consortium_id',
      pageNumber: 'page_number',
      pageSize: 'page_size',
      regionId: 'region_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      consortiumId: 'string',
      pageNumber: 'number',
      pageSize: 'number',
      regionId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryChainContractProjectResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // result
  result?: ALiYunContractProjects;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: ALiYunContractProjects,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class RetryChainContractProjectRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // description
  description?: string;
  // name
  name?: string;
  // project_id
  projectId?: string;
  // project_version
  projectVersion?: string;
  // region_id
  regionId?: string;
  // consortium_id
  consortiumId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      description: 'description',
      name: 'name',
      projectId: 'project_id',
      projectVersion: 'project_version',
      regionId: 'region_id',
      consortiumId: 'consortium_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      description: 'string',
      name: 'string',
      projectId: 'string',
      projectVersion: 'string',
      regionId: 'string',
      consortiumId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class RetryChainContractProjectResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // result
  result?: ALiYunContractProjectDuplicate;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: ALiYunContractProjectDuplicate,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateChainContractProjectRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // project_description
  projectDescription?: string;
  // project_id
  projectId: string;
  // project_name
  projectName?: string;
  // project_version
  projectVersion?: string;
  // region_id
  regionId?: string;
  // consortium_id
  consortiumId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      projectDescription: 'project_description',
      projectId: 'project_id',
      projectName: 'project_name',
      projectVersion: 'project_version',
      regionId: 'region_id',
      consortiumId: 'consortium_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      projectDescription: 'string',
      projectId: 'string',
      projectName: 'string',
      projectVersion: 'string',
      regionId: 'string',
      consortiumId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateChainContractProjectResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // result
  result?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateChainContractContentRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // content
  content?: string;
  // content_name
  contentName: string;
  // is_directory
  isDirectory: boolean;
  // parent_content_id
  parentContentId?: string;
  // project_id
  projectId: string;
  // region_id
  regionId?: string;
  // consortium_id
  consortiumId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      content: 'content',
      contentName: 'content_name',
      isDirectory: 'is_directory',
      parentContentId: 'parent_content_id',
      projectId: 'project_id',
      regionId: 'region_id',
      consortiumId: 'consortium_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      content: 'string',
      contentName: 'string',
      isDirectory: 'boolean',
      parentContentId: 'string',
      projectId: 'string',
      regionId: 'string',
      consortiumId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateChainContractContentResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // result
  result?: ALiYunChainContractContent;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: ALiYunChainContractContent,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateChainContractContentRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // content
  content?: string;
  // content_id
  contentId: string;
  // content_name
  contentName?: string;
  // parent_content_id
  parentContentId?: string;
  // region_id
  regionId?: string;
  // consortium_id
  consortiumId?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      content: 'content',
      contentId: 'content_id',
      contentName: 'content_name',
      parentContentId: 'parent_content_id',
      regionId: 'region_id',
      consortiumId: 'consortium_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      content: 'string',
      contentId: 'string',
      contentName: 'string',
      parentContentId: 'string',
      regionId: 'string',
      consortiumId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateChainContractContentResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // result
  result?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryChainContractContentRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // project_id
  projectId?: string;
  // region_id
  regionId?: string;
  // consortium_id
  consortiumId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      projectId: 'project_id',
      regionId: 'region_id',
      consortiumId: 'consortium_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      projectId: 'string',
      regionId: 'string',
      consortiumId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryChainContractContentResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // result
  result?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ExecChainContractRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // region_id
  regionId?: string;
  // ant_chain_id
  antChainId: string;
  // transaction
  transaction: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      regionId: 'region_id',
      antChainId: 'ant_chain_id',
      transaction: 'transaction',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      regionId: 'string',
      antChainId: 'string',
      transaction: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ExecChainContractResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // result
  result?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryChainIdeRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // consortium_id
  consortiumId: string;
  // region_id
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      consortiumId: 'consortium_id',
      regionId: 'region_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      consortiumId: 'string',
      regionId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryChainIdeResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // result
  result?: ALiYunChainCloudIdeConfig[];
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: { 'type': 'array', 'itemType': ALiYunChainCloudIdeConfig },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteChainContractContentRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // content_id
  contentId: string;
  // region_id
  regionId?: string;
  // consortium_id
  consortiumId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      contentId: 'content_id',
      regionId: 'region_id',
      consortiumId: 'consortium_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      contentId: 'string',
      regionId: 'string',
      consortiumId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteChainContractContentResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // result
  result?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class BatchcreateChainMiniappUserRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // ant_chain_id
  antChainId?: string;
  // phone_list
  phoneList?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      antChainId: 'ant_chain_id',
      phoneList: 'phone_list',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      antChainId: 'string',
      phoneList: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class BatchcreateChainMiniappUserResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // result
  result?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteChainMiniappUserRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // AntChainId
  antChainId?: string;
  // phone
  phone?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      antChainId: 'ant_chain_id',
      phone: 'phone',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      antChainId: 'string',
      phone: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteChainMiniappUserResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // result
  result?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class BatchqueryChainMiniappUserRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // ant_chain_id
  antChainId: string;
  // page_number
  pageNumber: number;
  // page_size
  pageSize: number;
  // q_r_code_type
  qRCodeType: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      antChainId: 'ant_chain_id',
      pageNumber: 'page_number',
      pageSize: 'page_size',
      qRCodeType: 'q_r_code_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      antChainId: 'string',
      pageNumber: 'number',
      pageSize: 'number',
      qRCodeType: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class BatchqueryChainMiniappUserResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // result
  result?: ALiYunChainMiniAppUserPrivilege;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: ALiYunChainMiniAppUserPrivilege,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryChainMiniappAuthorizationRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // ant_chain_id
  antChainId: string;
  // q_r_code_type
  qRCodeType: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      antChainId: 'ant_chain_id',
      qRCodeType: 'q_r_code_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      antChainId: 'string',
      qRCodeType: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryChainMiniappAuthorizationResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // result
  result?: ALiYunChainMiniAppAuthorization;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: ALiYunChainMiniAppAuthorization,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateChainMiniappAuthorizationRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // ant_chain_id
  antChainId?: string;
  // q_r_code_type
  qRCodeType?: string;
  // authorization_type
  authorizationType?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      antChainId: 'ant_chain_id',
      qRCodeType: 'q_r_code_type',
      authorizationType: 'authorization_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      antChainId: 'string',
      qRCodeType: 'string',
      authorizationType: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateChainMiniappAuthorizationResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // result
  result?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryChainMiniappTransactionRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // ant_chain_id
  antChainId: string;
  // transaction_hash
  transactionHash: string;
  // phone_hash
  phoneHash: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      antChainId: 'ant_chain_id',
      transactionHash: 'transaction_hash',
      phoneHash: 'phone_hash',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      antChainId: 'string',
      transactionHash: 'string',
      phoneHash: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryChainMiniappTransactionResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // result
  result?: ALiYunChainMiniAppTransaction;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: ALiYunChainMiniAppTransaction,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryChainMiniappLogRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // ant_chain_id
  antChainId: string;
  // q_r_code_type
  qRCodeType: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      antChainId: 'ant_chain_id',
      qRCodeType: 'q_r_code_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      antChainId: 'string',
      qRCodeType: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryChainMiniappLogResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // result
  result?: ALiYunChainMiniAppLog;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: ALiYunChainMiniAppLog,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateChainMiniappCodeRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // ant_chain_id
  antChainId: string;
  // transaction_hash
  transactionHash: string;
  // contract_id
  contractId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      antChainId: 'ant_chain_id',
      transactionHash: 'transaction_hash',
      contractId: 'contract_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      antChainId: 'string',
      transactionHash: 'string',
      contractId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateChainMiniappCodeResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // result
  result?: ALiYunChainMiniAppCodeCreate;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: ALiYunChainMiniAppCodeCreate,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryUnionBuyRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // region_id
  regionId?: string;
  // tenant_id
  tenantId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      regionId: 'region_id',
      tenantId: 'tenant_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      regionId: 'string',
      tenantId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryUnionBuyResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // result
  result?: ALiYunBuyUnion[];
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: { 'type': 'array', 'itemType': ALiYunBuyUnion },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryChainPublicRestRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // bizid
  bizid: string;
  // region_id
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizid: 'bizid',
      regionId: 'region_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizid: 'string',
      regionId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryChainPublicRestResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // AccessId
  result?: ALiYunChainRest[];
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: { 'type': 'array', 'itemType': ALiYunChainRest },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyChainPublicRestRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // bizid
  bizid: string;
  // region_id
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizid: 'bizid',
      regionId: 'region_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizid: 'string',
      regionId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyChainPublicRestResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // result
  result?: ALiYunChainRest;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: ALiYunChainRest,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ReinitChainPublicRestRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // access_id
  accessId: string;
  // bizid
  bizid: string;
  // region_id
  regionId?: string;
  // vcode
  vcode: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      accessId: 'access_id',
      bizid: 'bizid',
      regionId: 'region_id',
      vcode: 'vcode',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      accessId: 'string',
      bizid: 'string',
      regionId: 'string',
      vcode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ReinitChainPublicRestResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // result
  result?: ALiYunChainRest;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: ALiYunChainRest,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryChainRestAntRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // ant_chain_id
  antChainId: string;
  // region_id
  regionId?: string;
  // consortium_id
  consortiumId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      antChainId: 'ant_chain_id',
      regionId: 'region_id',
      consortiumId: 'consortium_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      antChainId: 'string',
      regionId: 'string',
      consortiumId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryChainRestAntResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // result
  result?: ALiYunChainRest[];
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: { 'type': 'array', 'itemType': ALiYunChainRest },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyChainRestAntRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // ant_chain_id
  antChainId: string;
  // region_id
  regionId?: string;
  // consortium_id
  consortiumId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      antChainId: 'ant_chain_id',
      regionId: 'region_id',
      consortiumId: 'consortium_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      antChainId: 'string',
      regionId: 'string',
      consortiumId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyChainRestAntResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // result
  result?: ALiYunChainRest;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: ALiYunChainRest,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ReinitChainRestAntRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // access_id
  accessId: string;
  // ant_chain_id
  antChainId: string;
  // consortium_id
  consortiumId: string;
  // region_id
  regionId?: string;
  // vcode
  vcode: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      accessId: 'access_id',
      antChainId: 'ant_chain_id',
      consortiumId: 'consortium_id',
      regionId: 'region_id',
      vcode: 'vcode',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      accessId: 'string',
      antChainId: 'string',
      consortiumId: 'string',
      regionId: 'string',
      vcode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ReinitChainRestAntResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // result
  result?: ALiYunChainRest;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: ALiYunChainRest,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SendChainPublicRestRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // access_id
  accessId: string;
  // bizid
  bizid: string;
  // region_id
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      accessId: 'access_id',
      bizid: 'bizid',
      regionId: 'region_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      accessId: 'string',
      bizid: 'string',
      regionId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SendChainPublicRestResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // result
  result?: boolean;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SendChainRestAntRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // access_id
  accessId: string;
  // ant_chain_id
  antChainId: string;
  // consortium_id
  consortiumId: string;
  // region_id
  regionId?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      accessId: 'access_id',
      antChainId: 'ant_chain_id',
      consortiumId: 'consortium_id',
      regionId: 'region_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      accessId: 'string',
      antChainId: 'string',
      consortiumId: 'string',
      regionId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SendChainRestAntResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // result
  result?: boolean;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryChainSubnetRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 链id
  antChainId: string;
  // 联盟id
  consortiumId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      antChainId: 'ant_chain_id',
      consortiumId: 'consortium_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      antChainId: 'string',
      consortiumId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryChainSubnetResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 子链列表信息
  result?: ALiYunChainSubnetList;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: ALiYunChainSubnetList,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CheckChainSubnetCreateRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 链id
  antChainId: string;
  // 联盟id
  consortiumId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      antChainId: 'ant_chain_id',
      consortiumId: 'consortium_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      antChainId: 'string',
      consortiumId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CheckChainSubnetCreateResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 检查结果
  result?: ALiYunChainSubnetCheck;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: ALiYunChainSubnetCheck,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateChainSubnetRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 主链id
  antChainId?: string;
  // 子链名称
  subnetName?: string;
  // 节点的id
  nodeId?: string;
  // 联盟成员
  consortiumMember?: string;
  // 联盟id
  consortiumId?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      antChainId: 'ant_chain_id',
      subnetName: 'subnet_name',
      nodeId: 'node_id',
      consortiumMember: 'consortium_member',
      consortiumId: 'consortium_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      antChainId: 'string',
      subnetName: 'string',
      nodeId: 'string',
      consortiumMember: 'string',
      consortiumId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateChainSubnetResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 建链结果
  result?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ExecChainSubnetRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 子链id
  antChainId?: string;
  // 联盟id
  consortiumId?: string;
  // 子链操作的枚举类型
  operateType?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      antChainId: 'ant_chain_id',
      consortiumId: 'consortium_id',
      operateType: 'operate_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      antChainId: 'string',
      consortiumId: 'string',
      operateType: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ExecChainSubnetResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 子链启停的结果
  result?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateChainSubnetNameRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 子链id
  antChainId?: string;
  // 联盟id
  consortiumId?: string;
  // 子链名称
  subnetName?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      antChainId: 'ant_chain_id',
      consortiumId: 'consortium_id',
      subnetName: 'subnet_name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      antChainId: 'string',
      consortiumId: 'string',
      subnetName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateChainSubnetNameResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 修改子链的结果
  result?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryChainSubnetNodeRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 子链id
  antChainId?: string;
  // 联盟id
  consortiumId?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      antChainId: 'ant_chain_id',
      consortiumId: 'consortium_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      antChainId: 'string',
      consortiumId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryChainSubnetNodeResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 子链节点信息列表
  result?: ALiYunChainSubnetCheck;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: ALiYunChainSubnetCheck,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteChainSubnetNodeRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 子链id
  antChainId?: string;
  // 联盟id
  consortiumId?: string;
  // 待删除的节点id
  nodeId?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      antChainId: 'ant_chain_id',
      consortiumId: 'consortium_id',
      nodeId: 'node_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      antChainId: 'string',
      consortiumId: 'string',
      nodeId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteChainSubnetNodeResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 删除节点的结果
  result?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CheckChainSubnetNodeRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 子链id
  antChainId?: string;
  // 联盟id
  consortiumId?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      antChainId: 'ant_chain_id',
      consortiumId: 'consortium_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      antChainId: 'string',
      consortiumId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CheckChainSubnetNodeResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 阿里云节点信息列表
  result?: ALiYunChainNodeInfo[];
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: { 'type': 'array', 'itemType': ALiYunChainNodeInfo },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AddChainSubnetNodeRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 子链节点
  antChainId?: string;
  // 联盟id
  consortiumId?: string;
  // 节点id
  nodeId?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      antChainId: 'ant_chain_id',
      consortiumId: 'consortium_id',
      nodeId: 'node_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      antChainId: 'string',
      consortiumId: 'string',
      nodeId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AddChainSubnetNodeResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 添加节点的结果
  result?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryChainSubnetMemberRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 子链id
  antChainId?: string;
  // 联盟id
  consortiumId?: string;
  // 分页编号
  pageNumber?: string;
  // 分页大小
  pageSize?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      antChainId: 'ant_chain_id',
      consortiumId: 'consortium_id',
      pageNumber: 'page_number',
      pageSize: 'page_size',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      antChainId: 'string',
      consortiumId: 'string',
      pageNumber: 'string',
      pageSize: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryChainSubnetMemberResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 子链机构信息
  result?: ALiYunChainSubnetCheck;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: ALiYunChainSubnetCheck,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteChainSubnetMemberRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 子链id
  antChainId?: string;
  // 联盟id
  consortiumId?: string;
  // 子链成员id
  memberId?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      antChainId: 'ant_chain_id',
      consortiumId: 'consortium_id',
      memberId: 'member_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      antChainId: 'string',
      consortiumId: 'string',
      memberId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteChainSubnetMemberResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 子链成员删除结果
  result?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CheckChainSubnetMemberRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 子链id
  antChainId?: string;
  // 联盟id
  consortiumId?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      antChainId: 'ant_chain_id',
      consortiumId: 'consortium_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      antChainId: 'string',
      consortiumId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CheckChainSubnetMemberResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 子链的机构列表
  result?: ALiYunChainSubnetCheck;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: ALiYunChainSubnetCheck,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AddChainSubnetMemberRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 子链id
  antChainId?: string;
  // 联盟id
  consortiumId?: string;
  // 联盟成员id
  consortiumMemberId?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      antChainId: 'ant_chain_id',
      consortiumId: 'consortium_id',
      consortiumMemberId: 'consortium_member_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      antChainId: 'string',
      consortiumId: 'string',
      consortiumMemberId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AddChainSubnetMemberResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 子链添加成员的结果
  result?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyChainSubnetRestRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 子链id
  antChainId?: string;
  // 联盟id
  consortiumId?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      antChainId: 'ant_chain_id',
      consortiumId: 'consortium_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      antChainId: 'string',
      consortiumId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyChainSubnetRestResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 阿里云REST开通结果
  result?: ALiYunChainRest;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: ALiYunChainRest,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryChainDataexportTaskRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 链id
  antChainId: string;
  // 联盟id
  consortiumId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      antChainId: 'ant_chain_id',
      consortiumId: 'consortium_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      antChainId: 'string',
      consortiumId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryChainDataexportTaskResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 数据导出结果测试
  result?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryChainDataExportRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 链id
  antChainId: string;
  // 联盟id
  consortiumId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      antChainId: 'ant_chain_id',
      consortiumId: 'consortium_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      antChainId: 'string',
      consortiumId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryChainDataExportResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 返回结果为TriggerDTO类型的list
  result?: TriggerDTOStructBody[];
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: { 'type': 'array', 'itemType': TriggerDTOStructBody },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateChainDataexportTaskRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 链id
  antChainId: string;
  // 联盟id
  consortiumId: string;
  // {}
  trigger: TriggerDTOStructBody;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      antChainId: 'ant_chain_id',
      consortiumId: 'consortium_id',
      trigger: 'trigger',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      antChainId: 'string',
      consortiumId: 'string',
      trigger: TriggerDTOStructBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateChainDataexportTaskResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // ""
  result?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateChainTaskIdRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 链id
  antChainId: string;
  // 联盟id
  consortiumId: string;
  // TriggerDTO结构体
  trigger: TriggerDTOStructBody;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      antChainId: 'ant_chain_id',
      consortiumId: 'consortium_id',
      trigger: 'trigger',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      antChainId: 'string',
      consortiumId: 'string',
      trigger: TriggerDTOStructBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateChainTaskIdResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // ""
  result?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryChainDataPreviewRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 链id
  antChainId: string;
  // 联盟id
  consortiumId: string;
  // 任务id
  taskId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      antChainId: 'ant_chain_id',
      consortiumId: 'consortium_id',
      taskId: 'task_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      antChainId: 'string',
      consortiumId: 'string',
      taskId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryChainDataPreviewResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 返回预览数据
  result?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryChainMappingRelationshipRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 链id
  antChainId: string;
  // 联盟id
  consortiumId: string;
  // ""
  serviceId: string;
  // 映射方法类型
  mappingType: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      antChainId: 'ant_chain_id',
      consortiumId: 'consortium_id',
      serviceId: 'service_id',
      mappingType: 'mapping_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      antChainId: 'string',
      consortiumId: 'string',
      serviceId: 'string',
      mappingType: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryChainMappingRelationshipResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 映射结果
  result?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateChainTableSqlRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 链id
  antChainId: string;
  // 联盟id
  consortiumId: string;
  // {}
  trigger: TriggerDTOStructBody;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      antChainId: 'ant_chain_id',
      consortiumId: 'consortium_id',
      trigger: 'trigger',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      antChainId: 'string',
      consortiumId: 'string',
      trigger: TriggerDTOStructBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateChainTableSqlResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 创建导出MySQL任务失败，获取 Create Table 语句
  result?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateChainDataexportStatusRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 链id
  antChainId: string;
  // 联盟id
  consortiumId: string;
  // "9481b612d6ca4cfdbecc5c5d395eda423f007745-233d-4860-8fd4-a107233ace6c"
  triggerName: string;
  //  "Enabled/Disabled/DELETE"
  statusAction: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      antChainId: 'ant_chain_id',
      consortiumId: 'consortium_id',
      triggerName: 'trigger_name',
      statusAction: 'status_action',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      antChainId: 'string',
      consortiumId: 'string',
      triggerName: 'string',
      statusAction: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateChainDataexportStatusResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // {}
  result?: TriggerDTOStructBody;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: TriggerDTOStructBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateChainDataexportTaskRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 联盟id
  consortiumId: string;
  // 链id
  antChainId: string;
  // 任务名称
  triggerName: string;
  // 导出任务接口体
  trigger: TriggerDTOStructBody;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      consortiumId: 'consortium_id',
      antChainId: 'ant_chain_id',
      triggerName: 'trigger_name',
      trigger: 'trigger',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      consortiumId: 'string',
      antChainId: 'string',
      triggerName: 'string',
      trigger: TriggerDTOStructBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateChainDataexportTaskResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  //  修改导出任务（名称、描述、告警地址）信息结构体
  //   
  result?: TriggerDTOStructBody;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: TriggerDTOStructBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryChainFailureLogRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 链id
  antChainId: string;
  // 联盟id
  consortiumId: string;
  // ""
  triggerName: string;
  // ""
  statusAction?: string;
  // 当前页码
  pageNo?: string;
  // 页面规格
  pageSize?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      antChainId: 'ant_chain_id',
      consortiumId: 'consortium_id',
      triggerName: 'trigger_name',
      statusAction: 'status_action',
      pageNo: 'page_no',
      pageSize: 'page_size',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      antChainId: 'string',
      consortiumId: 'string',
      triggerName: 'string',
      statusAction: 'string',
      pageNo: 'string',
      pageSize: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryChainFailureLogResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // {}
  result?: CommonResponsePageableStructBody;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: CommonResponsePageableStructBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateChainFailureLogRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 链id
  antChainId: string;
  // 联盟id
  consortiumId: string;
  // 日志名称
  triggerName?: string;
  // 日志状态
  statusAction?: string;
  // 日志id
  logId?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      antChainId: 'ant_chain_id',
      consortiumId: 'consortium_id',
      triggerName: 'trigger_name',
      statusAction: 'status_action',
      logId: 'log_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      antChainId: 'string',
      consortiumId: 'string',
      triggerName: 'string',
      statusAction: 'string',
      logId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateChainFailureLogResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 返回结果
  result?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryChainManagedMqRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 链id
  antChainId: string;
  // 联盟id
  consortiumId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      antChainId: 'ant_chain_id',
      consortiumId: 'consortium_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      antChainId: 'string',
      consortiumId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryChainManagedMqResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // ManagedMQDTO接口体列表
  result?: ManagedMQDTOStructBody[];
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: { 'type': 'array', 'itemType': ManagedMQDTOStructBody },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InitChainManagedMqRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 链id
  antChainId: string;
  // 联盟id
  consortiumId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      antChainId: 'ant_chain_id',
      consortiumId: 'consortium_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      antChainId: 'string',
      consortiumId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InitChainManagedMqResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 初始化托管 MQ 实例
  result?: ManagedMQDTOStructBody;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: ManagedMQDTOStructBody,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryChainUseDeclarationRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryChainUseDeclarationResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 用户申报用途类
  result?: ChainPurpose[];
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: { 'type': 'array', 'itemType': ChainPurpose },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyChainUseDeclarationRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 用途KEY
  chainPurposeKey: string;
  // 选择其他类型时，用户输入（必填）
  chainPurposeExtend?: string;
  // 简短说明用途
  // 
  // 选择其他类型时，用户输入
  chainPurposeItem?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      chainPurposeKey: 'chain_purpose_key',
      chainPurposeExtend: 'chain_purpose_extend',
      chainPurposeItem: 'chain_purpose_item',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      chainPurposeKey: 'string',
      chainPurposeExtend: 'string',
      chainPurposeItem: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyChainUseDeclarationResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 蚂蚁链申报用途接口体
  result?: AntChainPurposeResponse;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: AntChainPurposeResponse,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryChainUseListRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryChainUseListResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 蚂蚁链用途申报结构体
  result?: AntChainPurposeResponse;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: AntChainPurposeResponse,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CheckChainSensitiveWordsRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 用途KEY
  chainPurposeKey: string;
  // 敏感词检查条目内容
  chainPurposeItem: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      chainPurposeKey: 'chain_purpose_key',
      chainPurposeItem: 'chain_purpose_item',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      chainPurposeKey: 'string',
      chainPurposeItem: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CheckChainSensitiveWordsResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 返回敏感词校验结果
  result?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateChainAccountAntkmsRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 链账户名称
  account: string;
  // 链ID
  antChainId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      account: 'account',
      antChainId: 'ant_chain_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      account: 'string',
      antChainId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateChainAccountAntkmsResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 阿里云托管账户返回值
  result?: ALiYunChainKmsAccount;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: ALiYunChainKmsAccount,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class OpenChainServiceRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 2e7e22c42bb8419bbf99b7f56aa2f17f
  antChainId: string;
  // 联盟id
  consortiumId: string;
  // 内部产品code
  productCode: string;
  // 自定义信息，json格式
  extend?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      antChainId: 'ant_chain_id',
      consortiumId: 'consortium_id',
      productCode: 'product_code',
      extend: 'extend',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      antChainId: 'string',
      consortiumId: 'string',
      productCode: 'string',
      extend: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class OpenChainServiceResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 服务开通受理状态：
  //     UN_OPEN(0, "product.status.unopen"),
  //     INIT(1, "product.status.init"),
  //     OPEN(2, "product.status.open"),
  //     CLOSE(3, "product.status.close"),
  //     UNKNOWN(4, "product.status.unknown"),
  //     STOP(5, "product.status.stop");
  result?: number;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CheckChainServiceRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 链id
  antChainId: string;
  // 联盟id
  consortiumId: string;
  // BAAS-SERVICE1
  productCode: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      antChainId: 'ant_chain_id',
      consortiumId: 'consortium_id',
      productCode: 'product_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      antChainId: 'string',
      consortiumId: 'string',
      productCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CheckChainServiceResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 服务开通受理状态： UN_OPEN(0, "product.status.unopen"), INIT(1, "product.status.init"), OPEN(2, "product.status.open"), CLOSE(3, "product.status.close"), UNKNOWN(4, "product.status.unknown"), STOP(5, "product.status.stop");
  result?: number;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CloseChainServiceRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 链id
  antChainId: string;
  // 联盟id
  consortiumId: string;
  // 内部产品code
  productCode: string;
  // 自定义信息，json格式
  extend?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      antChainId: 'ant_chain_id',
      consortiumId: 'consortium_id',
      productCode: 'product_code',
      extend: 'extend',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      antChainId: 'string',
      consortiumId: 'string',
      productCode: 'string',
      extend: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CloseChainServiceResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 服务关闭受理状态： UN_OPEN(0, "product.status.unopen"), INIT(1, "product.status.init"), OPEN(2, "product.status.open"), CLOSE(3, "product.status.close"), UNKNOWN(4, "product.status.unknown"), STOP(5, "product.status.stop");
  result?: number;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartAmlCorporationJoinprepareRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 企业加入BaaS创建的反洗钱联盟时使用的邮箱地址
  email: string;
  // 扩展信息字段
  extension?: string;
  // 目前支持ECDSA K1公私密钥对
  publicKey: string;
  // 数字身份恢复密钥，支持ECDSA K1曲线的公私密钥对
  recoveryKey?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      email: 'email',
      extension: 'extension',
      publicKey: 'public_key',
      recoveryKey: 'recovery_key',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      email: 'string',
      extension: 'string',
      publicKey: 'string',
      recoveryKey: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartAmlCorporationJoinprepareResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 企业在反洗钱联盟中的唯一区块链标示，后续和平台的交互都要通过该标示
  did?: string;
  // mytf的认证信息，加盟方可以验证其有效性
  mytfInfo?: string;
  // 平台提供的各类tapp信息，入驻方需要从中选择自己使用的tapp，并记录下tapp的加密私钥和签名密钥；后续平台发给加盟放的所有信息都会携带签名；而所有发往TAPP的数据都需要使用对应加密公钥进行加密来保证数据安全
  tappInfos?: string[];
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      did: 'did',
      mytfInfo: 'mytf_info',
      tappInfos: 'tapp_infos',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      did: 'string',
      mytfInfo: 'string',
      tappInfos: { 'type': 'array', 'itemType': 'string' },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartAmlCorporationJoincommitRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 入驻准备阶段得到的数字标识
  did: string;
  // 选择采用的TAPP ID编号，如果不填，系统将选择默认的kyc tapp进行执行
  tappId?: string;
  // 对应tapp的版本号。默认选择最新版本
  tappVersion?: number;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      did: 'did',
      tappId: 'tapp_id',
      tappVersion: 'tapp_version',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      did: 'string',
      tappId: 'string',
      tappVersion: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartAmlCorporationJoincommitResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartAmlPersonTwofactorRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 完整证件号，与证件类型配对
  certNo: string;
  // 证件类型
  // 001，身份证
  // 目前只支持身份证
  certType: number;
  // 张三
  name: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      certNo: 'cert_no',
      certType: 'cert_type',
      name: 'name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      certNo: 'string',
      certType: 'number',
      name: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartAmlPersonTwofactorResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 如果验证通过会为用户创建did
  did?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      did: 'did',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      did: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SaveBusinessDepositRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 业务链对应的bizId    
  // 
  bizId: string;
  // 存证的内容
  data: string;
  // 用户的did地址
  did: string;
  // 任意用户自定义的keyId(需要唯一)，根据该keyId可以查找存证的内容，若不填则使用txHash作为keyId
  keyId?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizId: 'biz_id',
      data: 'data',
      did: 'did',
      keyId: 'key_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizId: 'string',
      data: 'string',
      did: 'string',
      keyId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SaveBusinessDepositResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // bizid+accountid+keyId/txHash 组成的唯一id，用户可以根据该id到服务中查询链上内容
  depositId?: string;
  // 是否存在成功
  status?: string;
  // 链上返回的txHash值
  txHash?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      depositId: 'deposit_id',
      status: 'status',
      txHash: 'tx_hash',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      depositId: 'string',
      status: 'string',
      txHash: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SaveBusinessDepositMetadataRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 业务链对应的bizId    
  // 
  bizId: string;
  // 具体存证的内容
  data: DepositMetaDataItem[];
  // 用户的did地址
  did: string;
  // 用户自定义唯一keyId，可用该keyId到业务服务中查询存证内容
  keyId?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizId: 'biz_id',
      data: 'data',
      did: 'did',
      keyId: 'key_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizId: 'string',
      data: { 'type': 'array', 'itemType': DepositMetaDataItem },
      did: 'string',
      keyId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SaveBusinessDepositMetadataResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 存证id，由bizId+accountId+keyId组成
  depositId?: string;
  // 是否存证成功
  status?: string;
  // 链上存证对应的txHash
  txHash?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      depositId: 'deposit_id',
      status: 'status',
      txHash: 'tx_hash',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      depositId: 'string',
      status: 'string',
      txHash: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SaveBusinessDepositEncryptRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 业务链对应的bizId    
  bizId: string;
  // 要加密存储的内容
  data: string;
  // 用户did地址
  did: string;
  // 业务唯一id，只需要本用户的应用唯一即可，因为最终会与用户的accountId拼接起来
  keyId?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizId: 'biz_id',
      data: 'data',
      did: 'did',
      keyId: 'key_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizId: 'string',
      data: 'string',
      did: 'string',
      keyId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SaveBusinessDepositEncryptResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 可以用该id到服务上查询链的信息
  depositId?: string;
  // 是否存证成功
  status?: string;
  // 交易的txHash
  txHash?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      depositId: 'deposit_id',
      status: 'status',
      txHash: 'tx_hash',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      depositId: 'string',
      status: 'string',
      txHash: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SaveBusinessDepositEncryptmetadataRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 业务链对应的bizId    
  // 
  bizId: string;
  // 要加密的数据
  data: string;
  // 用户的did身份地址
  did: string;
  // 业务唯一id，只需要本链本用户所用的业务keyId唯一即可
  keyId?: string;
  // 存证内容描述，格式为json，其中type为支持的类型：
  // text：文本类型 
  // image：图片类型(待添加) 
  // video：视频类型(待添加) 
  // txHash：存证引用类型(待添加) 
  // map:地图类型(待添加)
  metadata: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizId: 'biz_id',
      data: 'data',
      did: 'did',
      keyId: 'key_id',
      metadata: 'metadata',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizId: 'string',
      data: 'string',
      did: 'string',
      keyId: 'string',
      metadata: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SaveBusinessDepositEncryptmetadataResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 存证id，由bizId+accountId+keyId组成
  depositId?: string;
  // 是否存证成功
  status?: string;
  // 链上交易的id
  txHash?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      depositId: 'deposit_id',
      status: 'status',
      txHash: 'tx_hash',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      depositId: 'string',
      status: 'string',
      txHash: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateBusinessDidRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 用户身份证号
  idCardNumber: string;
  // 用户手机号
  phoneNumber: string;
  // 用户姓名
  userName: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      idCardNumber: 'id_card_number',
      phoneNumber: 'phone_number',
      userName: 'user_name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      idCardNumber: 'string',
      phoneNumber: 'string',
      userName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateBusinessDidResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 链的业务编号
  bizId?: string;
  // 生成的did用户身份号
  did?: string;
  // isv创建者身份
  isvAccount?: string;
  // 是否创建成功
  status?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      bizId: 'biz_id',
      did: 'did',
      isvAccount: 'isv_account',
      status: 'status',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      bizId: 'string',
      did: 'string',
      isvAccount: 'string',
      status: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateBusinessBizaccountRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 业务链对应的bizId
  bizId: string;
  // 申请者对应的did账户
  did: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizId: 'biz_id',
      did: 'did',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizId: 'string',
      did: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateBusinessBizaccountResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // did地址
  did?: string;
  // 租户账户
  isvAccount?: string;
  // 生成的账户在kms上的密钥id    
  // 
  kmsId?: string;
  // 调用接口是否成功
  status?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      did: 'did',
      isvAccount: 'isv_account',
      kmsId: 'kms_id',
      status: 'status',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      did: 'string',
      isvAccount: 'string',
      kmsId: 'string',
      status: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryBusinessDepositRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 业务链对应的bizId    
  // 
  bizId: string;
  // 用户did身份
  did: string;
  // 存证数据业务逻辑id
  keyId: string;
  // 存证数据对应的链上交易哈希，若无则返回最新的交易哈希。
  txHash?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizId: 'biz_id',
      did: 'did',
      keyId: 'key_id',
      txHash: 'tx_hash',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizId: 'string',
      did: 'string',
      keyId: 'string',
      txHash: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryBusinessDepositResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 具体存证数据
  depositData?: string;
  // 业务逻辑对应的存证id
  depositId?: string;
  // keyId对应的所有相关的历史交易记录
  historyTxHashes?: string[];
  // 是否查询成功
  status?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      depositData: 'deposit_data',
      depositId: 'deposit_id',
      historyTxHashes: 'history_tx_hashes',
      status: 'status',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      depositData: 'string',
      depositId: 'string',
      historyTxHashes: { 'type': 'array', 'itemType': 'string' },
      status: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AuthBusinessDepositdataRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 业务链对应的bizId    
  // 
  bizId: string;
  // 授权者身份
  did: string;
  // 被授权者did身份
  grantedDid: string;
  // 被授权的字段
  itemKeyId: string[];
  // 业务逻辑唯一id
  keyId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizId: 'biz_id',
      did: 'did',
      grantedDid: 'granted_did',
      itemKeyId: 'item_key_id',
      keyId: 'key_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizId: 'string',
      did: 'string',
      grantedDid: 'string',
      itemKeyId: { 'type': 'array', 'itemType': 'string' },
      keyId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AuthBusinessDepositdataResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 被授权的逻辑交易
  depositId?: string;
  // 是否授权调用成功
  status?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      depositId: 'deposit_id',
      status: 'status',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      depositId: 'string',
      status: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateBusinessContractDeployRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 业务链对应的bizId
  bizId: string;
  // 合约代码
  contractCode: string;
  // 合约名称
  contractName: string;
  // 合约类型
  contractType: number;
  // 合约部署者did身份
  did: string;
  // 构造函数传入参数
  inputData?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizId: 'biz_id',
      contractCode: 'contract_code',
      contractName: 'contract_name',
      contractType: 'contract_type',
      did: 'did',
      inputData: 'input_data',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizId: 'string',
      contractCode: 'string',
      contractName: 'string',
      contractType: 'number',
      did: 'string',
      inputData: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateBusinessContractDeployResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 部署合约返回值
  data?: string;
  // 是否调用成功
  status?: number;
  // 部署合约在链上对应的交易地址
  txHash?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      data: 'data',
      status: 'status',
      txHash: 'tx_hash',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      data: 'string',
      status: 'number',
      txHash: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateBusinessContractnormalcallRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 业务链对应的bizId    
  // 
  bizId: string;
  // 合约名称
  contractName: string;
  // 合约类型
  contractType: number;
  // 调用合约者身份
  did: string;
  // 传入参数
  inputData: string;
  // 合约接口名称
  methodSignature: string;
  // 返回值类型
  outputType: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizId: 'biz_id',
      contractName: 'contract_name',
      contractType: 'contract_type',
      did: 'did',
      inputData: 'input_data',
      methodSignature: 'method_signature',
      outputType: 'output_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizId: 'string',
      contractName: 'string',
      contractType: 'number',
      did: 'string',
      inputData: 'string',
      methodSignature: 'string',
      outputType: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateBusinessContractnormalcallResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 调用合约接口返回值
  data?: string;
  // 是否调用成功
  status?: number;
  // 调用合约的交易地址
  txHash?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      data: 'data',
      status: 'status',
      txHash: 'tx_hash',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      data: 'string',
      status: 'number',
      txHash: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateBusinessContractencryptcallRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 业务链对应的bizId    
  bizId: string;
  // 合约名称
  contractName: string;
  // 合约类型
  contractType: number;
  // 具体数据的定义，加密在服务端，需传入原始值、类型及key等相关信息
  data: ContractEncryptKeyItem[];
  // 调用合约者用户身份
  did: string;
  // 合约方法名
  methodSignature: string;
  // 返回值类型
  outputType: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizId: 'biz_id',
      contractName: 'contract_name',
      contractType: 'contract_type',
      data: 'data',
      did: 'did',
      methodSignature: 'method_signature',
      outputType: 'output_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizId: 'string',
      contractName: 'string',
      contractType: 'number',
      data: { 'type': 'array', 'itemType': ContractEncryptKeyItem },
      did: 'string',
      methodSignature: 'string',
      outputType: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateBusinessContractencryptcallResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 合约返回参数
  data?: string;
  // 是否调用成功
  status?: number;
  // 链上合约交易调用地址
  txHash?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      data: 'data',
      status: 'status',
      txHash: 'tx_hash',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      data: 'string',
      status: 'number',
      txHash: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryBusinessContractreceiptRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 业务链的bizId
  bizId: string;
  // 调用者用户did
  did: string;
  // 链上交易txHash
  txHash: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizId: 'biz_id',
      did: 'did',
      txHash: 'tx_hash',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizId: 'string',
      did: 'string',
      txHash: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryBusinessContractreceiptResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 链上txHash对应的内容
  data?: string;
  // 接口调用是否成功
  status?: number;
  // 对应的链上交易txHash
  txHash?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      data: 'data',
      status: 'status',
      txHash: 'tx_hash',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      data: 'string',
      status: 'number',
      txHash: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryBusinessContractencryptreceiptRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 链的业务bizId
  bizId: string;
  // test_contract_name
  contractName: string;
  // 调用者用户身份
  did: string;
  // 交易对应的链上地址
  txHash: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizId: 'biz_id',
      contractName: 'contract_name',
      did: 'did',
      txHash: 'tx_hash',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizId: 'string',
      contractName: 'string',
      did: 'string',
      txHash: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryBusinessContractencryptreceiptResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // txHash对应的交易内容
  data?: string;
  // 调用接口是否成功
  status?: number;
  // 交易对应的txHash
  txHash?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      data: 'data',
      status: 'status',
      txHash: 'tx_hash',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      data: 'string',
      status: 'number',
      txHash: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryBusinessContractencryptmethodRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 合约链所在地址
  bizId: string;
  // 合约名称
  contractName: string;
  // 合约类型
  contractType: number;
  // 用户的did身份
  did: string;
  // 输入参数
  inputData: string;
  // 查询方法名接口
  methodSignature: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizId: 'biz_id',
      contractName: 'contract_name',
      contractType: 'contract_type',
      did: 'did',
      inputData: 'input_data',
      methodSignature: 'method_signature',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizId: 'string',
      contractName: 'string',
      contractType: 'number',
      did: 'string',
      inputData: 'string',
      methodSignature: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryBusinessContractencryptmethodResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 查询方法返回值
  data?: string;
  // 是否接口调用成功
  status?: number;
  // 该查询方法在链上所发的交易
  txHash?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      data: 'data',
      status: 'status',
      txHash: 'tx_hash',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      data: 'string',
      status: 'number',
      txHash: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeployBusinessAgreementRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 业务链的id编号
  bizId: string;
  // 合约名称
  contractName: string;
  // 用户的did身份
  did: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizId: 'biz_id',
      contractName: 'contract_name',
      did: 'did',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizId: 'string',
      contractName: 'string',
      did: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeployBusinessAgreementResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 返回值
  data?: string;
  // 0表示成功
  status?: number;
  // 部署合约交易在链上的地址
  txHash?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      data: 'data',
      status: 'status',
      txHash: 'tx_hash',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      data: 'string',
      status: 'number',
      txHash: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateBusinessAgreementRegistertemplateRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 业务链对应的bizId
  bizId: string;
  // 合约名称
  contractName: string;
  // 用户did身份
  did: string;
  // 业务共识模板
  template: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizId: 'biz_id',
      contractName: 'contract_name',
      did: 'did',
      template: 'template',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizId: 'string',
      contractName: 'string',
      did: 'string',
      template: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateBusinessAgreementRegistertemplateResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 注册合约模板，链上合约返回值
  data?: string;
  // 是否该接口调用成功
  status?: number;
  // 该调用对应链上的交易地址
  txHash?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      data: 'data',
      status: 'status',
      txHash: 'tx_hash',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      data: 'string',
      status: 'number',
      txHash: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateBusinessAgreementRegisterRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 业务链的bizId
  bizId: string;
  // 回调合约方法
  callbackMethod: string;
  // 回调合约名称
  contractId: string;
  // 合约名称
  contractName: string;
  // 用户身份的did
  did: string;
  // 回调key
  key: string;
  // 合约模板id
  templateId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizId: 'biz_id',
      callbackMethod: 'callback_method',
      contractId: 'contract_id',
      contractName: 'contract_name',
      did: 'did',
      key: 'key',
      templateId: 'template_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizId: 'string',
      callbackMethod: 'string',
      contractId: 'string',
      contractName: 'string',
      did: 'string',
      key: 'string',
      templateId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateBusinessAgreementRegisterResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 合约调用返回值
  data?: string;
  // 该接口是否调用成功
  status?: number;
  // 该交易对应的链上地址
  txHash?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      data: 'data',
      status: 'status',
      txHash: 'tx_hash',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      data: 'string',
      status: 'number',
      txHash: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateBusinessAgreementSignRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 业务链bizId
  bizId: string;
  // 回调合约名称
  contractId: string;
  // 业务共识合约名称
  contractName: string;
  // 用户did身份
  did: string;
  // 业务共识唯一标识
  key: string;
  // 用户签名
  signData: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizId: 'biz_id',
      contractId: 'contract_id',
      contractName: 'contract_name',
      did: 'did',
      key: 'key',
      signData: 'sign_data',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizId: 'string',
      contractId: 'string',
      contractName: 'string',
      did: 'string',
      key: 'string',
      signData: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateBusinessAgreementSignResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 该合约调用返回值
  data?: string;
  // 该接口是否调用成功，0表示成功
  status?: number;
  // 该调用对应的链上交易地址
  txHash?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      data: 'data',
      status: 'status',
      txHash: 'tx_hash',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      data: 'string',
      status: 'number',
      txHash: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryBusinessAgreementRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 业务共识链id
  bizId: string;
  // 回调合约id
  contractId: string;
  // 业务共识合约id
  contractName: string;
  // 发起者did账户
  did: string;
  // 业务共识唯一id
  key: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizId: 'biz_id',
      contractId: 'contract_id',
      contractName: 'contract_name',
      did: 'did',
      key: 'key',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizId: 'string',
      contractId: 'string',
      contractName: 'string',
      did: 'string',
      key: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryBusinessAgreementResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 当前该共识的状态信息
  data?: string;
  // 业务共识查询接口是否调用成功，0表示成功
  status?: number;
  // 该接口调用对应的链上交易地址
  txHash?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      data: 'data',
      status: 'status',
      txHash: 'tx_hash',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      data: 'string',
      status: 'number',
      txHash: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateBusinessContractGrantdidRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 租户业务链地址biz_id
  bizId: string;
  // 授权的合约名称
  contractName: string;
  // 用户did身份
  did: string;
  // 授权截止日期
  dueTime: string;
  // 被授权者身份
  grantedDid: string;
  // 授权的字段
  itemIds: string[];
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizId: 'biz_id',
      contractName: 'contract_name',
      did: 'did',
      dueTime: 'due_time',
      grantedDid: 'granted_did',
      itemIds: 'item_ids',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizId: 'string',
      contractName: 'string',
      did: 'string',
      dueTime: 'string',
      grantedDid: 'string',
      itemIds: { 'type': 'array', 'itemType': 'string' },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateBusinessContractGrantdidResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 成功被授权的字段
  data?: string;
  // 该接口是否调用成功，0表示成功
  status?: number;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      data: 'data',
      status: 'status',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      data: 'string',
      status: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryBusinessDepositEncryptedmetadataRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 链的业务id
  bizId: string;
  // 发起者的did身份
  did: string;
  // 存证的唯一主键key_id
  keyId: string;
  // 被存证的交易txHash，若不传则默认key_id最近的交易hash
  txHash?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizId: 'biz_id',
      did: 'did',
      keyId: 'key_id',
      txHash: 'tx_hash',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizId: 'string',
      did: 'string',
      keyId: 'string',
      txHash: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryBusinessDepositEncryptedmetadataResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 被存证的数据
  depositData?: string;
  // 存证的唯一主键
  depositId?: string;
  // 被存证的主键关联的历史交易
  historyTxId?: string[];
  // 是否查询成功
  status?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      depositData: 'deposit_data',
      depositId: 'deposit_id',
      historyTxId: 'history_tx_id',
      status: 'status',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      depositData: 'string',
      depositId: 'string',
      historyTxId: { 'type': 'array', 'itemType': 'string' },
      status: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AuthBusinessDepositdataCorpRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 被授权的存证数据所在的链
  bizId: string;
  // 被授权者的did数字身份
  did: string;
  // 授权的截止日期，超过该日期后，该组织不再具有访问加密数据的权限
  dueTime: string;
  // 被授权的组织名
  grantedCorp: string;
  // 被授权的字段
  itemKeyId: string[];
  // 被授权的存证内容逻辑主键
  keyId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizId: 'biz_id',
      did: 'did',
      dueTime: 'due_time',
      grantedCorp: 'granted_corp',
      itemKeyId: 'item_key_id',
      keyId: 'key_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizId: 'string',
      did: 'string',
      dueTime: 'string',
      grantedCorp: 'string',
      itemKeyId: { 'type': 'array', 'itemType': 'string' },
      keyId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AuthBusinessDepositdataCorpResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 被授权的逻辑主字段(biz_id与key_id的拼接）
  depositId?: string;
  // 是否授权成功
  status?: string;
  // deposit_id对应的当前最新的交易
  txHash?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      depositId: 'deposit_id',
      status: 'status',
      txHash: 'tx_hash',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      depositId: 'string',
      status: 'string',
      txHash: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CancelBusinessDepositGrantdidRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 存证数据的发起者did身份
  did: string;
  // 取消授权的did数字身份
  grantedDid: string;
  // 取消授权的字段名称
  itemKeyId: string[];
  // 存证数据的主键
  keyId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      did: 'did',
      grantedDid: 'granted_did',
      itemKeyId: 'item_key_id',
      keyId: 'key_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      did: 'string',
      grantedDid: 'string',
      itemKeyId: { 'type': 'array', 'itemType': 'string' },
      keyId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CancelBusinessDepositGrantdidResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 取消授权的主键
  depositId?: string;
  // 取消授权成功
  status?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      depositId: 'deposit_id',
      status: 'status',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      depositId: 'string',
      status: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CancelBusinessDepositGrantcorpRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 数据存证所在链的业务id
  bizId: string;
  // 存证数据的发起者did数字身份
  did: string;
  // 取消授权的组织名称
  grantedCorp: string;
  // 取消授权的子列名称
  itemKeyId: string[];
  // 存证数据的逻辑主keyId
  keyId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizId: 'biz_id',
      did: 'did',
      grantedCorp: 'granted_corp',
      itemKeyId: 'item_key_id',
      keyId: 'key_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizId: 'string',
      did: 'string',
      grantedCorp: 'string',
      itemKeyId: { 'type': 'array', 'itemType': 'string' },
      keyId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CancelBusinessDepositGrantcorpResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 存证数据的逻辑主id(biz_id与key_id的拼接)
  depositId?: string;
  // 是否取消授权成功
  status?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      depositId: 'deposit_id',
      status: 'status',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      depositId: 'string',
      status: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateBusinessContractGrantcorpRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 数据所在的链业务id
  bizId: string;
  // 合约名称
  contractName: string;
  // 合约keyId发起者的数字身份
  did: string;
  // 授权截止日期，超过该日期则不可继续访问该数据
  dueTime: string;
  // 授权的组织名称
  grantedCorp: string;
  // 需要授权的字段名称
  itemIds: string[];
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizId: 'biz_id',
      contractName: 'contract_name',
      did: 'did',
      dueTime: 'due_time',
      grantedCorp: 'granted_corp',
      itemIds: 'item_ids',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizId: 'string',
      contractName: 'string',
      did: 'string',
      dueTime: 'string',
      grantedCorp: 'string',
      itemIds: { 'type': 'array', 'itemType': 'string' },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateBusinessContractGrantcorpResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 授权的字段列表
  data?: string[];
  // 是否授权给组织成功，0表示成功
  status?: number;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      data: 'data',
      status: 'status',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      data: { 'type': 'array', 'itemType': 'string' },
      status: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CancelBusinessContractGrantdidRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 合约所在链的业务id
  bizId: string;
  // 合约名称
  contractName: string;
  // keyId的创建者数字身份
  did: string;
  // 取消被授权者的数字身份
  grantedDid: string;
  // 取消授权的字段
  itemIds: string[];
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizId: 'biz_id',
      contractName: 'contract_name',
      did: 'did',
      grantedDid: 'granted_did',
      itemIds: 'item_ids',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizId: 'string',
      contractName: 'string',
      did: 'string',
      grantedDid: 'string',
      itemIds: { 'type': 'array', 'itemType': 'string' },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CancelBusinessContractGrantdidResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 取消授权成功的字段列表
  data?: string;
  // 是否取消授权成功，0表示成功
  status?: number;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      data: 'data',
      status: 'status',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      data: 'string',
      status: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CancelBusinessContractGrantcorpRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 合约所在的业务链id
  bizId: string;
  // 合约名称
  contractName: string;
  // 用户的did数字身份
  did: string;
  // 取消被授权者的机构名称
  grantedCorp: string;
  // 取消授权的字段名
  itemIds: string[];
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizId: 'biz_id',
      contractName: 'contract_name',
      did: 'did',
      grantedCorp: 'granted_corp',
      itemIds: 'item_ids',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizId: 'string',
      contractName: 'string',
      did: 'string',
      grantedCorp: 'string',
      itemIds: { 'type': 'array', 'itemType': 'string' },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CancelBusinessContractGrantcorpResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 成功取消授权的字段
  data?: string;
  // 是否取消授权成功，0表示成功
  status?: number;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      data: 'data',
      status: 'status',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      data: 'string',
      status: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ImportPlatformTestregionTestfuncRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 123
  testParam1: string;
  // 123
  testParam2: number;
  // 123
  testParam3: NodeInfo[];
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      testParam1: 'test_param1',
      testParam2: 'test_param2',
      testParam3: 'test_param3',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      testParam1: 'string',
      testParam2: 'number',
      testParam3: { 'type': 'array', 'itemType': NodeInfo },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ImportPlatformTestregionTestfuncResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 123
  testResponse?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      testResponse: 'test_response',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      testResponse: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreatePlatformDepositAccountRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 业务链对应的bizId
  bizId: string;
  // 申请者对应的did账户
  did: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizId: 'biz_id',
      did: 'did',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizId: 'string',
      did: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreatePlatformDepositAccountResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // did地址
  did?: string;
  // 租户账户
  isvAccount?: string;
  // 生成的账户在kms上的密钥id
  kmsId?: string;
  // 调用接口是否成功
  status?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      did: 'did',
      isvAccount: 'isv_account',
      kmsId: 'kms_id',
      status: 'status',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      did: 'string',
      isvAccount: 'string',
      kmsId: 'string',
      status: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreatePlatformDepositDidRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 用户身份证号
  idCardNumber: string;
  // 手机号
  phoneNumber: string;
  // 用户姓名
  userName: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      idCardNumber: 'id_card_number',
      phoneNumber: 'phone_number',
      userName: 'user_name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      idCardNumber: 'string',
      phoneNumber: 'string',
      userName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreatePlatformDepositDidResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 用户did
  did?: string;
  // 租户金融科技id
  isvAccount?: string;
  // 是否创建成果
  status?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      did: 'did',
      isvAccount: 'isv_account',
      status: 'status',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      did: 'string',
      isvAccount: 'string',
      status: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SavePlatformDepositDepositRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 业务链对应的bizId
  bizId: string;
  // 存证数据
  data: string;
  // 用户的did地址
  did: string;
  // 任意用户自定义的keyId(需要唯一)，根据该keyId可以查找存证的内容，若不填则使用txHash作为keyId
  keyId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizId: 'biz_id',
      data: 'data',
      did: 'did',
      keyId: 'key_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizId: 'string',
      data: 'string',
      did: 'string',
      keyId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SavePlatformDepositDepositResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // bizid+accountid+keyId/txHash 组成的唯一id，用户可以根据该id到服务中查询链上内容
  depositId?: string;
  // 是否存证成果
  status?: string;
  // 链上返回的txHash值
  txHash?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      depositId: 'deposit_id',
      status: 'status',
      txHash: 'tx_hash',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      depositId: 'string',
      status: 'string',
      txHash: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreatePlatformDepositCorpdidRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 企业名称
  // 
  epCertName: string;
  // 企业证件号
  epCertNo: string;
  // 企业法人名称
  legalPersonCertName: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      epCertName: 'ep_cert_name',
      epCertNo: 'ep_cert_no',
      legalPersonCertName: 'legal_person_cert_name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      epCertName: 'string',
      epCertNo: 'string',
      legalPersonCertName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreatePlatformDepositCorpdidResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 企业did
  did?: string;
  // 调用者金融科技id
  isvAccount?: string;
  // 是否调用成功
  status?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      did: 'did',
      isvAccount: 'isv_account',
      status: 'status',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      did: 'string',
      isvAccount: 'string',
      status: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDigitalassetartAccountRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 用户手机号
  phone: string;
  // 用户的支付宝账号
  userAccount: string;
  // 用户姓名
  userName: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      phone: 'phone',
      userAccount: 'user_account',
      userName: 'user_name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      phone: 'string',
      userAccount: 'string',
      userName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDigitalassetartAccountResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 用户链账户地址
  accountId?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      accountId: 'account_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      accountId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class BatchcreateDigitalassetartAccountRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 批量用户账户、姓名、手机号等信息
  users: UserInfoParam[];
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      users: 'users',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      users: { 'type': 'array', 'itemType': UserInfoParam },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class BatchcreateDigitalassetartAccountResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 失败的账户
  failList?: string[];
  // 失败的个数
  failNum?: number;
  // 成功的个数
  successNum?: number;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      failList: 'fail_list',
      failNum: 'fail_num',
      successNum: 'success_num',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      failList: { 'type': 'array', 'itemType': 'string' },
      failNum: 'number',
      successNum: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDigitalassetartArtCreateRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 艺术品锚定物
  artAnchor: string;
  // 艺术品唯一id
  artId: string;
  // 艺术品名称
  artName: string;
  // 艺术品代码
  code: string;
  // 创建时间
  createDate: string;
  // 鉴定者账户
  identifiers: string[];
  // 艺术品图片哈希
  imageHashes: string[];
  // 一级分类
  mainClass: string;
  // 拥有者链上账户地址
  ownerAccountId: string;
  // 二级分类
  subClass: string;
  // 艺术品视频哈希
  vedioHashes: string[];
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      artAnchor: 'art_anchor',
      artId: 'art_id',
      artName: 'art_name',
      code: 'code',
      createDate: 'create_date',
      identifiers: 'identifiers',
      imageHashes: 'image_hashes',
      mainClass: 'main_class',
      ownerAccountId: 'owner_account_id',
      subClass: 'sub_class',
      vedioHashes: 'vedio_hashes',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      artAnchor: 'string',
      artId: 'string',
      artName: 'string',
      code: 'string',
      createDate: 'string',
      identifiers: { 'type': 'array', 'itemType': 'string' },
      imageHashes: { 'type': 'array', 'itemType': 'string' },
      mainClass: 'string',
      ownerAccountId: 'string',
      subClass: 'string',
      vedioHashes: { 'type': 'array', 'itemType': 'string' },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDigitalassetartArtCreateResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 艺术品唯一id
  artId?: string;
  // 艺术品状态信息
  status?: number;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      artId: 'art_id',
      status: 'status',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      artId: 'string',
      status: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SetDigitalassetartArtIssueRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 拥有者链上账户地址
  accountId: string;
  // 艺术品id
  artId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      accountId: 'account_id',
      artId: 'art_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      accountId: 'string',
      artId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SetDigitalassetartArtIssueResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 艺术品id
  artId?: string;
  // 艺术品状态信息，1表示发行成功
  status?: number;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      artId: 'art_id',
      status: 'status',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      artId: 'string',
      status: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SetDigitalassetartArtIssuetoexchangeRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 拥有者账户地址
  accountId: string;
  // 艺术品id
  artId: string;
  // 交易所代码
  exchangeCode: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      accountId: 'account_id',
      artId: 'art_id',
      exchangeCode: 'exchange_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      accountId: 'string',
      artId: 'string',
      exchangeCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SetDigitalassetartArtIssuetoexchangeResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 艺术品id
  artId?: string;
  // 交易所代码
  exchangeCode?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      artId: 'art_id',
      exchangeCode: 'exchange_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      artId: 'string',
      exchangeCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SetDigitalassetartArtTradeRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 拥有者链上地址
  accountId: string;
  // 艺术品唯一id
  artId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      accountId: 'account_id',
      artId: 'art_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      accountId: 'string',
      artId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SetDigitalassetartArtTradeResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 艺术品交易成功
  artId?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      artId: 'art_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      artId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SetDigitalassetartArtTradeonexchangeRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 交易所代码
  exchangeCode: string;
  // 交易者账户
  tradeAccountId: string;
  // 交易txHash
  txHash: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      exchangeCode: 'exchange_code',
      tradeAccountId: 'trade_account_id',
      txHash: 'tx_hash',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      exchangeCode: 'string',
      tradeAccountId: 'string',
      txHash: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SetDigitalassetartArtTradeonexchangeResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 0 在交易成功
  // 1 在交易失败
  status?: number;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      status: 'status',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      status: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FreezeDigitalassetartArtAccountRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 管理员账户
  accountId: string;
  // 艺术品id
  artId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      accountId: 'account_id',
      artId: 'art_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      accountId: 'string',
      artId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FreezeDigitalassetartArtAccountResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 艺术品id
  artId?: string;
  // 艺术品冻结是否成功，0表示成功
  status?: number;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      artId: 'art_id',
      status: 'status',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      artId: 'string',
      status: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UnfreezeDigitalassetartArtAccountRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 管理员账户id
  accountId: string;
  // 艺术品id
  artId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      accountId: 'account_id',
      artId: 'art_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      accountId: 'string',
      artId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UnfreezeDigitalassetartArtAccountResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 艺术品id
  artId?: string;
  // 解冻是否成功，0表示成功
  status?: number;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      artId: 'art_id',
      status: 'status',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      artId: 'string',
      status: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SetDigitalassetartArtUnissuetoexchangeRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 管理员账户地址
  accountId: string;
  // 艺术品id
  artId: string;
  // 交易所代码
  exchangeCode: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      accountId: 'account_id',
      artId: 'art_id',
      exchangeCode: 'exchange_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      accountId: 'string',
      artId: 'string',
      exchangeCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SetDigitalassetartArtUnissuetoexchangeResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 取消在交易所发布艺术品成功或者失败原因详情
  reason?: string;
  // 取消在交易发布艺术品调用是否成功
  // 0 表示成功
  status?: number;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      reason: 'reason',
      status: 'status',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      reason: 'string',
      status: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryDigitalassetartArtRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 管理员账户
  accountId: string;
  // 艺术品id
  artId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      accountId: 'account_id',
      artId: 'art_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      accountId: 'string',
      artId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryDigitalassetartArtResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 艺术品id
  artId?: string;
  // 艺术品名称
  artName?: string;
  // 艺术品代码
  code?: string;
  // 艺术品所在交易所代码
  exchanges?: string[];
  // 艺术品鉴定者列表
  identifiers?: string[];
  // 艺术品图片哈希
  imageHash?: string[];
  // 发行方账户信息
  issueAccount?: string;
  // 艺术品在链上发行时间
  issueDate?: number;
  // 艺术品所属主分类
  mainClass?: string;
  // 艺术品拥有者id
  ownerId?: string;
  // 艺术品状态信息
  // 1未发行 
  // 2已发行 
  // 3冻结 
  // 4回购
  state?: number;
  // 艺术品所属分类次分类
  subClass?: string;
  // 艺术品视频哈希
  vedioHash?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      artId: 'art_id',
      artName: 'art_name',
      code: 'code',
      exchanges: 'exchanges',
      identifiers: 'identifiers',
      imageHash: 'image_hash',
      issueAccount: 'issue_account',
      issueDate: 'issue_date',
      mainClass: 'main_class',
      ownerId: 'owner_id',
      state: 'state',
      subClass: 'sub_class',
      vedioHash: 'vedio_hash',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      artId: 'string',
      artName: 'string',
      code: 'string',
      exchanges: { 'type': 'array', 'itemType': 'string' },
      identifiers: { 'type': 'array', 'itemType': 'string' },
      imageHash: { 'type': 'array', 'itemType': 'string' },
      issueAccount: 'string',
      issueDate: 'number',
      mainClass: 'string',
      ownerId: 'string',
      state: 'number',
      subClass: 'string',
      vedioHash: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDigitalassetExchangeAccountmapRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 交易所代码
  exchangeCode: string;
  // 用户联系方式
  phone: string;
  // 业务方用户账号
  userAccount: string;
  // 业务方用户名称
  userName: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      exchangeCode: 'exchange_code',
      phone: 'phone',
      userAccount: 'user_account',
      userName: 'user_name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      exchangeCode: 'string',
      phone: 'string',
      userAccount: 'string',
      userName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDigitalassetExchangeAccountmapResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 返回调用结果 正常为 success
  result?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class BatchcreateDigitalassetExchangeAccountmapRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 业务方需映射的账户列表
  accountMapParams: ExchangeAccountMap[];
  // 交易所代码
  exchangeCode: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      accountMapParams: 'account_map_params',
      exchangeCode: 'exchange_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      accountMapParams: { 'type': 'array', 'itemType': ExchangeAccountMap },
      exchangeCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class BatchcreateDigitalassetExchangeAccountmapResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 返回失败账户列表
  failList?: string[];
  // 失败数量
  failNum?: number;
  // 成功数量
  successNum?: number;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      failList: 'fail_list',
      failNum: 'fail_num',
      successNum: 'success_num',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      failList: { 'type': 'array', 'itemType': 'string' },
      failNum: 'number',
      successNum: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDigitalassetExchangeUnfreezeRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 版通代码
  epCode: string;
  // 解限数量
  epUnfreezeAmount: number;
  // 交易所代码
  exchangeCode: string;
  // 业务方用户账户
  userAccount: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      epCode: 'ep_code',
      epUnfreezeAmount: 'ep_unfreeze_amount',
      exchangeCode: 'exchange_code',
      userAccount: 'user_account',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      epCode: 'string',
      epUnfreezeAmount: 'number',
      exchangeCode: 'string',
      userAccount: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDigitalassetExchangeUnfreezeResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 操作结果 success 为正常
  result?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDigitalassetExchangeLockpositionRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 版通代码
  epCode?: string;
  // 交易所代码
  exchangeCode: string;
  // 锁定操作，0为解锁，1为锁定
  operate: number;
  // 业务方账户
  userAccount?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      epCode: 'ep_code',
      exchangeCode: 'exchange_code',
      operate: 'operate',
      userAccount: 'user_account',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      epCode: 'string',
      exchangeCode: 'string',
      operate: 'number',
      userAccount: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDigitalassetExchangeLockpositionResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 操作结果 success 为正常
  result?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDigitalassetExchangeEpissueRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 版通锚定物
  epAnchor: string;
  // 版通代码
  epCode: string;
  // 版通首发量
  epFirstAmount: number;
  // 版通发行方账户
  epIssueAccount: string;
  // 版通发行时间戳
  epIssueDate: number;
  // 版通名称
  epName: string;
  // 版通线下发行配额
  epOfflineIssueAmount: number;
  // 版通线下日解限比例
  epOfflineUnfreeze: number;
  // 版通线上发行配额
  epOnlineIssueAmount: number;
  // 发行方版通自持量
  epSelfAmount: number;
  // 发行方版通日解限比例
  epSelfUnfreeze: number;
  // 版通发行数量
  epTotalAmount: number;
  // 版通类型
  epType: string;
  // 交易所代码
  exchangeCode: string;
  // 预留扩展字段
  extend?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      epAnchor: 'ep_anchor',
      epCode: 'ep_code',
      epFirstAmount: 'ep_first_amount',
      epIssueAccount: 'ep_issue_account',
      epIssueDate: 'ep_issue_date',
      epName: 'ep_name',
      epOfflineIssueAmount: 'ep_offline_issue_amount',
      epOfflineUnfreeze: 'ep_offline_unfreeze',
      epOnlineIssueAmount: 'ep_online_issue_amount',
      epSelfAmount: 'ep_self_amount',
      epSelfUnfreeze: 'ep_self_unfreeze',
      epTotalAmount: 'ep_total_amount',
      epType: 'ep_type',
      exchangeCode: 'exchange_code',
      extend: 'extend',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      epAnchor: 'string',
      epCode: 'string',
      epFirstAmount: 'number',
      epIssueAccount: 'string',
      epIssueDate: 'number',
      epName: 'string',
      epOfflineIssueAmount: 'number',
      epOfflineUnfreeze: 'number',
      epOnlineIssueAmount: 'number',
      epSelfAmount: 'number',
      epSelfUnfreeze: 'number',
      epTotalAmount: 'number',
      epType: 'string',
      exchangeCode: 'string',
      extend: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDigitalassetExchangeEpissueResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 操作结果 success 为成功
  result?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDigitalassetExchangeEpstockissueRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 版通代码
  epCode: string;
  // 版通发行方账户
  epIssueAccount: string;
  // 版通存量发行线下量
  epOfflineIssueAmount: number;
  // 版通存量发行线上量
  epOnlineIssueAmount: number;
  // 版通存量发行自持量
  epSelfIssueAmount: number;
  // 交易所代码
  exchangeCode: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      epCode: 'ep_code',
      epIssueAccount: 'ep_issue_account',
      epOfflineIssueAmount: 'ep_offline_issue_amount',
      epOnlineIssueAmount: 'ep_online_issue_amount',
      epSelfIssueAmount: 'ep_self_issue_amount',
      exchangeCode: 'exchange_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      epCode: 'string',
      epIssueAccount: 'string',
      epOfflineIssueAmount: 'number',
      epOnlineIssueAmount: 'number',
      epSelfIssueAmount: 'number',
      exchangeCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDigitalassetExchangeEpstockissueResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 操作结果 success 为成功
  result?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDigitalassetExchangeEpwholesaleRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 批发账户信息列表
  accountList: AccountWholesaleParam[];
  // 版通代码
  epCode: string;
  // 版通发行方账户
  epIssueAccount: string;
  // 交易所代码
  exchangeCode: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      accountList: 'account_list',
      epCode: 'ep_code',
      epIssueAccount: 'ep_issue_account',
      exchangeCode: 'exchange_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      accountList: { 'type': 'array', 'itemType': AccountWholesaleParam },
      epCode: 'string',
      epIssueAccount: 'string',
      exchangeCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDigitalassetExchangeEpwholesaleResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 失败账户列表
  failList?: string[];
  // 失败原因 0:成功 1:执行失败 2:线下配额数量不足
  reason?: number;
  // 成功账户列表
  successList?: string[];
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      failList: 'fail_list',
      reason: 'reason',
      successList: 'success_list',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      failList: { 'type': 'array', 'itemType': 'string' },
      reason: 'number',
      successList: { 'type': 'array', 'itemType': 'string' },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryDigitalassetExchangeEpinfoRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 版通代码
  epCode: string;
  // 交易所代码
  exchangeCode: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      epCode: 'ep_code',
      exchangeCode: 'exchange_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      epCode: 'string',
      exchangeCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryDigitalassetExchangeEpinfoResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 版通锚定物
  epAnchor?: string;
  // 版通代码
  epCode?: string;
  // 版通首发量
  epFirstAmount?: number;
  // 版通发行方账户
  epIssueAccount?: string;
  // 版通发行日时间戳
  epIssueDate?: number;
  // 版通历史发行记录
  epIssueHistory?: EPIssueHisInfo[];
  // 版通名称
  epName?: string;
  // 版通线下发行量
  epOfflineIssueAmount?: number;
  // 版通线下日解限量
  epOfflineUnfreeze?: number;
  // 版通线上发行量
  epOnlineIssueAmount?: number;
  // 版通发行方自持量
  epSelfAmount?: number;
  // 版通自持日解限量
  epSelfUnfreeze?: number;
  // 版通状态 0:正常 1:锁定
  epStatus?: number;
  // 版通总发行量
  epTotalAmount?: number;
  // 版通类型
  epType?: string;
  // 扩展字段
  extend?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      epAnchor: 'ep_anchor',
      epCode: 'ep_code',
      epFirstAmount: 'ep_first_amount',
      epIssueAccount: 'ep_issue_account',
      epIssueDate: 'ep_issue_date',
      epIssueHistory: 'ep_issue_history',
      epName: 'ep_name',
      epOfflineIssueAmount: 'ep_offline_issue_amount',
      epOfflineUnfreeze: 'ep_offline_unfreeze',
      epOnlineIssueAmount: 'ep_online_issue_amount',
      epSelfAmount: 'ep_self_amount',
      epSelfUnfreeze: 'ep_self_unfreeze',
      epStatus: 'ep_status',
      epTotalAmount: 'ep_total_amount',
      epType: 'ep_type',
      extend: 'extend',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      epAnchor: 'string',
      epCode: 'string',
      epFirstAmount: 'number',
      epIssueAccount: 'string',
      epIssueDate: 'number',
      epIssueHistory: { 'type': 'array', 'itemType': EPIssueHisInfo },
      epName: 'string',
      epOfflineIssueAmount: 'number',
      epOfflineUnfreeze: 'number',
      epOnlineIssueAmount: 'number',
      epSelfAmount: 'number',
      epSelfUnfreeze: 'number',
      epStatus: 'number',
      epTotalAmount: 'number',
      epType: 'string',
      extend: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryDigitalassetExchangeEptradeRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 查询截止时间
  endDate: string;
  // 版通代码 （版通代码与用户账户至少选一个）
  epCode?: string;
  // 交易所代码
  exchangeCode: string;
  // 页数 从1开始
  pageNum: number;
  // 每页显示数量
  pageSize: number;
  // 查询起始时间
  startDate: string;
  // 用户账户 （版通代码与用户账户至少选一个）
  userAccount?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      endDate: 'end_date',
      epCode: 'ep_code',
      exchangeCode: 'exchange_code',
      pageNum: 'page_num',
      pageSize: 'page_size',
      startDate: 'start_date',
      userAccount: 'user_account',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      endDate: 'string',
      epCode: 'string',
      exchangeCode: 'string',
      pageNum: 'number',
      pageSize: 'number',
      startDate: 'string',
      userAccount: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryDigitalassetExchangeEptradeResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 页数 从1开始
  pageNum?: number;
  // 每页显示数量
  pageSize?: number;
  // 数据总量
  totalCount?: number;
  // 交易信息列表
  txInfos?: EPTradeInfo[];
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      pageNum: 'page_num',
      pageSize: 'page_size',
      totalCount: 'total_count',
      txInfos: 'tx_infos',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      pageNum: 'number',
      pageSize: 'number',
      totalCount: 'number',
      txInfos: { 'type': 'array', 'itemType': EPTradeInfo },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryDigitalassetExchangeEpaccountRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 交易所代码
  exchangeCode: string;
  // 用户账户
  userAccount: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      exchangeCode: 'exchange_code',
      userAccount: 'user_account',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      exchangeCode: 'string',
      userAccount: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryDigitalassetExchangeEpaccountResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 账户状态 0:正常 1:锁定
  accountStatus?: number;
  // 版通回购账户信息
  buybackAccounts?: AccountInfo[];
  // 版通限制交易账户信息
  constrainedAccounts?: AccountInfo[];
  // 版通可交易账户信息
  tradeAccounts?: AccountInfo[];
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      accountStatus: 'account_status',
      buybackAccounts: 'buyback_accounts',
      constrainedAccounts: 'constrained_accounts',
      tradeAccounts: 'trade_accounts',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      accountStatus: 'number',
      buybackAccounts: { 'type': 'array', 'itemType': AccountInfo },
      constrainedAccounts: { 'type': 'array', 'itemType': AccountInfo },
      tradeAccounts: { 'type': 'array', 'itemType': AccountInfo },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDigitalassetExchangeEptradeRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 交易数量
  epAmount: number;
  // 版通代码
  epCode: string;
  // 交易所代码
  exchangeCode: string;
  // 卖方账户
  fromAccount: string;
  // 买方账户
  toAccount: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      epAmount: 'ep_amount',
      epCode: 'ep_code',
      exchangeCode: 'exchange_code',
      fromAccount: 'from_account',
      toAccount: 'to_account',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      epAmount: 'number',
      epCode: 'string',
      exchangeCode: 'string',
      fromAccount: 'string',
      toAccount: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDigitalassetExchangeEptradeResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 交易号
  txCode?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      txCode: 'tx_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      txCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDigitalassetExchangeEpbuybackRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 版通回购数量
  epAmount: number;
  // 版通代码
  epCode: string;
  // 交易所代码
  exchangeCode: string;
  // 用户账户
  userAccount: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      epAmount: 'ep_amount',
      epCode: 'ep_code',
      exchangeCode: 'exchange_code',
      userAccount: 'user_account',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      epAmount: 'number',
      epCode: 'string',
      exchangeCode: 'string',
      userAccount: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDigitalassetExchangeEpbuybackResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 操作结果 success 为成功
  result?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDistributionUserRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 用户在ISV中的唯一标识
  identity: string;
  // 其他说明
  info?: string;
  // 用户手机号码
  mobile: string;
  // 来源: 微信朋友圈/微信小程序/支付宝小程序/H5/商户自有APP/其他
  source: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      identity: 'identity',
      info: 'info',
      mobile: 'mobile',
      source: 'source',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      identity: 'string',
      info: 'string',
      mobile: 'string',
      source: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDistributionUserResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 用户创建时间
  createTime?: string;
  // 用户唯一标示
  userId?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      createTime: 'create_time',
      userId: 'user_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      createTime: 'string',
      userId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryDistributionUserTeamRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 商品唯一标识
  itemId?: string;
  // 分页查询当前页号，默认值1
  pageNum?: number;
  // 分页查询当前页大小，默认值20
  pageSize?: number;
  // 商户唯一标识
  shopId: string;
  // 用户唯一标识
  userId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      itemId: 'item_id',
      pageNum: 'page_num',
      pageSize: 'page_size',
      shopId: 'shop_id',
      userId: 'user_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      itemId: 'string',
      pageNum: 'number',
      pageSize: 'number',
      shopId: 'string',
      userId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryDistributionUserTeamResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 一级会员信息
  members?: DistributionUser[];
  // 下级用户总数
  memberNum?: number;
  // 一级会员数
  oneLevelMemberNum?: number;
  // 分页查询当前页号
  pageNum?: number;
  // 分页查询当前页大小
  pageSize?: number;
  // 二级会员数
  twoLevelMemberNum?: number;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      members: 'members',
      memberNum: 'member_num',
      oneLevelMemberNum: 'one_level_member_num',
      pageNum: 'page_num',
      pageSize: 'page_size',
      twoLevelMemberNum: 'two_level_member_num',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      members: { 'type': 'array', 'itemType': DistributionUser },
      memberNum: 'number',
      oneLevelMemberNum: 'number',
      pageNum: 'number',
      pageSize: 'number',
      twoLevelMemberNum: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDistributionShopRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 商户在ISV中的标识
  identity: string;
  // 其他说明
  info?: string;
  // 商户名称
  name: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      identity: 'identity',
      info: 'info',
      name: 'name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      identity: 'string',
      info: 'string',
      name: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDistributionShopResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 商户管理员唯一标识
  adminUserId?: string;
  // 商户创建时间
  createTime?: string;
  // 商户唯一标识
  shopId?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      adminUserId: 'admin_user_id',
      createTime: 'create_time',
      shopId: 'shop_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      adminUserId: 'string',
      createTime: 'string',
      shopId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDistributionUserRelationRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 上级用户唯一标识
  fromUserId?: string;
  // 商品唯一标识
  itemId?: string;
  // 商户唯一标识
  shopId: string;
  // 来源，微信朋友圈/微信小程序/支付宝小程序/H5/商户自有APP/其他
  source: string;
  // 用户唯一标识
  userId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      fromUserId: 'from_user_id',
      itemId: 'item_id',
      shopId: 'shop_id',
      source: 'source',
      userId: 'user_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      fromUserId: 'string',
      itemId: 'string',
      shopId: 'string',
      source: 'string',
      userId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDistributionUserRelationResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 区块链交易hash
  txHash?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      txHash: 'tx_hash',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      txHash: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InitDistributionContractRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 初始化合约名称
  name: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      name: 'name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      name: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InitDistributionContractResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 合约链上地址
  txHash?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      txHash: 'tx_hash',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      txHash: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDistributionProductItemRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 分销比例  10 表示 10%
  distributionRate: string;
  // 上架时间戳
  enableDate: string;
  // 划线价格
  linePrice: string;
  // 商品id
  productId: string;
  // 商品封面图片url
  productImg: string;
  // 商品信息
  productInfo: string;
  // 商品名称
  productName: string;
  // 商品价格
  productPrice: string;
  // 商品类型
  productType: string;
  // 商户id
  shopId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      distributionRate: 'distribution_rate',
      enableDate: 'enable_date',
      linePrice: 'line_price',
      productId: 'product_id',
      productImg: 'product_img',
      productInfo: 'product_info',
      productName: 'product_name',
      productPrice: 'product_price',
      productType: 'product_type',
      shopId: 'shop_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      distributionRate: 'string',
      enableDate: 'string',
      linePrice: 'string',
      productId: 'string',
      productImg: 'string',
      productInfo: 'string',
      productName: 'string',
      productPrice: 'string',
      productType: 'string',
      shopId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDistributionProductItemResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 商品id
  productId?: string;
  // 商户id
  shopId?: string;
  // 链上地址
  txHash?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      productId: 'product_id',
      shopId: 'shop_id',
      txHash: 'tx_hash',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      productId: 'string',
      shopId: 'string',
      txHash: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryDistributionProductItemRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 商品id
  productId?: string;
  // 商户id
  shopId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      productId: 'product_id',
      shopId: 'shop_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      productId: 'string',
      shopId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryDistributionProductItemResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 商品列表
  products?: ItemDto[];
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      products: 'products',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      products: { 'type': 'array', 'itemType': ItemDto },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateDistributionFundPromoterRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 可提现余额
  balance: string;
  // 推广人id
  promoterId: string;
  // 待结算
  settleQuota: string;
  // 商户id
  shopId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      balance: 'balance',
      promoterId: 'promoter_id',
      settleQuota: 'settle_quota',
      shopId: 'shop_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      balance: 'string',
      promoterId: 'string',
      settleQuota: 'string',
      shopId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateDistributionFundPromoterResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 链上地址
  txHash?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      txHash: 'tx_hash',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      txHash: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateDistributionFundShopRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 审批中额度
  approveQuota: string;
  // 可提现余额
  balance: string;
  // 已到账额度
  finishQuota: string;
  // 商户id
  shopId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      approveQuota: 'approve_quota',
      balance: 'balance',
      finishQuota: 'finish_quota',
      shopId: 'shop_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      approveQuota: 'string',
      balance: 'string',
      finishQuota: 'string',
      shopId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateDistributionFundShopResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 链上地址
  txHash?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      txHash: 'tx_hash',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      txHash: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryDistributionFundPromoterRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 分页号
  pageNum: number;
  // 分页显示条数
  pageSize: number;
  // 推广人id
  promoterId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      pageNum: 'page_num',
      pageSize: 'page_size',
      promoterId: 'promoter_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      pageNum: 'number',
      pageSize: 'number',
      promoterId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryDistributionFundPromoterResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 推广人账户列表
  fundList?: FundInfo[];
  // 分页号
  pageNum?: number;
  // 分页显示条数
  pageSize?: number;
  // 推广人id
  promoterId?: string;
  // 总量
  totalCount?: number;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      fundList: 'fund_list',
      pageNum: 'page_num',
      pageSize: 'page_size',
      promoterId: 'promoter_id',
      totalCount: 'total_count',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      fundList: { 'type': 'array', 'itemType': FundInfo },
      pageNum: 'number',
      pageSize: 'number',
      promoterId: 'string',
      totalCount: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryDistributionFundShopRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 商户id
  shopId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      shopId: 'shop_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      shopId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryDistributionFundShopResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 审批中额度
  approveQuota?: string;
  // 可提现额度
  balance?: string;
  // 已到账额度
  finishQuota?: string;
  // 商户id
  shopId?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      approveQuota: 'approve_quota',
      balance: 'balance',
      finishQuota: 'finish_quota',
      shopId: 'shop_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      approveQuota: 'string',
      balance: 'string',
      finishQuota: 'string',
      shopId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryDistributionFundPromoterflowRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 分页号
  pageNum: number;
  // 分页显示条数
  pageSize: number;
  // 推广人id
  promoterId: string;
  // 商户id
  shopId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      pageNum: 'page_num',
      pageSize: 'page_size',
      promoterId: 'promoter_id',
      shopId: 'shop_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      pageNum: 'number',
      pageSize: 'number',
      promoterId: 'string',
      shopId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryDistributionFundPromoterflowResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 流水信息列表
  capitalFlows?: CapitalInfo[];
  // 分页号
  pageNum?: number;
  // 分页显示条数
  pageSize?: number;
  // 总数量
  totalCount?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      capitalFlows: 'capital_flows',
      pageNum: 'page_num',
      pageSize: 'page_size',
      totalCount: 'total_count',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      capitalFlows: { 'type': 'array', 'itemType': CapitalInfo },
      pageNum: 'number',
      pageSize: 'number',
      totalCount: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDistributionOrderPromoterRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 购买用户id
  buyerId: string;
  // 佣金
  commission: string;
  // 佣金比例 10表示10%
  commissionRate: string;
  // 推广订单id
  orderId: string;
  // 订单金额
  orderPrice: string;
  // 推广人上级ID
  prevPromoterId: string;
  // 推广人上级分佣金额
  prevPromoterPrice: string;
  // 商品id
  productId: string;
  // 推广人id
  promoterId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      buyerId: 'buyer_id',
      commission: 'commission',
      commissionRate: 'commission_rate',
      orderId: 'order_id',
      orderPrice: 'order_price',
      prevPromoterId: 'prev_promoter_id',
      prevPromoterPrice: 'prev_promoter_price',
      productId: 'product_id',
      promoterId: 'promoter_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      buyerId: 'string',
      commission: 'string',
      commissionRate: 'string',
      orderId: 'string',
      orderPrice: 'string',
      prevPromoterId: 'string',
      prevPromoterPrice: 'string',
      productId: 'string',
      promoterId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDistributionOrderPromoterResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 链上地址
  txHash?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      txHash: 'tx_hash',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      txHash: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDistributionOrderTradeRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 买家id
  buyerId: string;
  // 买家信息
  buyerInfo: string;
  // 买家名称
  buyerName: string;
  // 收银单号
  cashierId: string;
  // 外部子订单id
  childId: string;
  // 分销交易分佣信息
  distributionInfo: string;
  // 分销商城id
  distributionShopId: string;
  // 分销商城名称
  distributionShopName: string;
  // 订单过期时间戳
  expireTime: number;
  // 订单扩展信息
  extend: string;
  // 内部渠道
  innerSource: string;
  // 交易参与方
  joinTrader: string;
  // 订单id
  orderId: string;
  // 订单金额 单位 分
  orderPrice: number;
  // 外部父订单id
  parentId: string;
  // 订单支付信息
  payInfo: string;
  // 结算状态 I待结算 S已结算
  payStatus: string;
  // 上级推广金额
  prevPromoterPrice: string;
  // 商品描述
  productDesc: string;
  // 商品id
  productId: string;
  // 商品名称
  productName: string;
  // 商品数量
  productNum: number;
  // 商品价格
  productPrice: string;
  // 商品类型
  productType: string;
  // 推广订单id
  promoterOrderId: string;
  // 商品原始金额
  realPrice: string;
  // 退款时间戳
  refundTime: number;
  // 请求系统
  reqSystem: string;
  // 卖方id
  sellerId: string;
  // 卖方信息
  sellerInfo: string;
  // 卖方名称
  sellerName: string;
  // 分享人
  share: string;
  // 商户id
  shopId: string;
  // 订单渠道
  source: string;
  // 交易状态 W-待付款、S-成功、F-失败、C-待确认
  status: string;
  // 购买订单id
  tradeId: string;
  // 交易时间戳
  tradeTime: number;
  // 交易类型
  tradeType: string;
  // 业务类型
  type: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      buyerId: 'buyer_id',
      buyerInfo: 'buyer_info',
      buyerName: 'buyer_name',
      cashierId: 'cashier_id',
      childId: 'child_id',
      distributionInfo: 'distribution_info',
      distributionShopId: 'distribution_shop_id',
      distributionShopName: 'distribution_shop_name',
      expireTime: 'expire_time',
      extend: 'extend',
      innerSource: 'inner_source',
      joinTrader: 'join_trader',
      orderId: 'order_id',
      orderPrice: 'order_price',
      parentId: 'parent_id',
      payInfo: 'pay_info',
      payStatus: 'pay_status',
      prevPromoterPrice: 'prev_promoter_price',
      productDesc: 'product_desc',
      productId: 'product_id',
      productName: 'product_name',
      productNum: 'product_num',
      productPrice: 'product_price',
      productType: 'product_type',
      promoterOrderId: 'promoter_order_id',
      realPrice: 'real_price',
      refundTime: 'refund_time',
      reqSystem: 'req_system',
      sellerId: 'seller_id',
      sellerInfo: 'seller_info',
      sellerName: 'seller_name',
      share: 'share',
      shopId: 'shop_id',
      source: 'source',
      status: 'status',
      tradeId: 'trade_id',
      tradeTime: 'trade_time',
      tradeType: 'trade_type',
      type: 'type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      buyerId: 'string',
      buyerInfo: 'string',
      buyerName: 'string',
      cashierId: 'string',
      childId: 'string',
      distributionInfo: 'string',
      distributionShopId: 'string',
      distributionShopName: 'string',
      expireTime: 'number',
      extend: 'string',
      innerSource: 'string',
      joinTrader: 'string',
      orderId: 'string',
      orderPrice: 'number',
      parentId: 'string',
      payInfo: 'string',
      payStatus: 'string',
      prevPromoterPrice: 'string',
      productDesc: 'string',
      productId: 'string',
      productName: 'string',
      productNum: 'number',
      productPrice: 'string',
      productType: 'string',
      promoterOrderId: 'string',
      realPrice: 'string',
      refundTime: 'number',
      reqSystem: 'string',
      sellerId: 'string',
      sellerInfo: 'string',
      sellerName: 'string',
      share: 'string',
      shopId: 'string',
      source: 'string',
      status: 'string',
      tradeId: 'string',
      tradeTime: 'number',
      tradeType: 'string',
      type: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDistributionOrderTradeResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 链上地址
  txHash?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      txHash: 'tx_hash',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      txHash: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryDistributionOrderPromoterRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 订单id
  orderId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      orderId: 'order_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      orderId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryDistributionOrderPromoterResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 佣金
  commission?: string;
  // 佣金比例 10表示 10%
  commissionRate?: string;
  // 订单id
  orderId?: string;
  // 订单金额
  orderPrice?: string;
  // 推广人上级ID
  prevPromoterId?: string;
  // 推广人上级分佣金额
  prevPromoterPrice?: string;
  // 商品id
  productId?: string;
  // 推广人id
  promoterId?: string;
  // 链上地址
  txHash?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      commission: 'commission',
      commissionRate: 'commission_rate',
      orderId: 'order_id',
      orderPrice: 'order_price',
      prevPromoterId: 'prev_promoter_id',
      prevPromoterPrice: 'prev_promoter_price',
      productId: 'product_id',
      promoterId: 'promoter_id',
      txHash: 'tx_hash',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      commission: 'string',
      commissionRate: 'string',
      orderId: 'string',
      orderPrice: 'string',
      prevPromoterId: 'string',
      prevPromoterPrice: 'string',
      productId: 'string',
      promoterId: 'string',
      txHash: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryDistributionOrderRakebackRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 订单id
  orderId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      orderId: 'order_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      orderId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryDistributionOrderRakebackResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 订单id
  orderId?: string;
  // 返佣信息列表
  rakebackList?: RakeBackInfo[];
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      orderId: 'order_id',
      rakebackList: 'rakeback_list',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      orderId: 'string',
      rakebackList: { 'type': 'array', 'itemType': RakeBackInfo },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryDistributionOrderTradeRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 订单id
  orderId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      orderId: 'order_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      orderId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryDistributionOrderTradeResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 买家id
  buyerId?: string;
  // 买家信息
  buyerInfo?: string;
  // 买家名称
  buyerName?: string;
  // 收银单号
  cashierId?: string;
  // 外部子订单id
  childId?: string;
  // 分销交易分佣信息
  distributionInfo?: string;
  // 分销商城id
  distributionShopId?: string;
  // 分销商城名称
  distributionShopName?: string;
  // 订单过期时间戳
  expireTime?: number;
  // 订单扩展信息
  extend?: string;
  // 内部渠道
  innerSource?: string;
  // 交易参与方
  joinTrader?: string;
  // 订单id
  orderId?: string;
  // 订单金额
  orderPrice?: string;
  // 外部父订单id
  parentId?: string;
  // 订单支付信息f
  payInfo?: string;
  // 结算状态 I待结算 S已结算
  payStatus?: string;
  // 商品描述
  productDesc?: string;
  // 商品id
  productId?: string;
  // 商品名称
  productName?: string;
  // 商品数量
  productNum?: number;
  // 商品单价
  productPrice?: string;
  // 商品类型
  productType?: string;
  // 推广人订单id
  promoterOrderId?: string;
  // 商品原始金额
  realPrice?: string;
  // 退款时间
  refundTime?: number;
  // 请求系统
  reqSystem?: string;
  // 卖家id
  sellerId?: string;
  // 卖家信息
  sellerInfo?: string;
  // 卖家名称
  sellerName?: string;
  // 分享人
  share?: string;
  // 商户id
  shopId?: string;
  // 订单渠道
  source?: string;
  // 状态 W-待付款、S-成功、F-失败、C-待确认
  status?: string;
  // 购买订单id
  tradeId?: string;
  // 交易时间戳
  tradeTime?: number;
  // 交易类型
  tradeType?: string;
  // 业务类型
  type?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      buyerId: 'buyer_id',
      buyerInfo: 'buyer_info',
      buyerName: 'buyer_name',
      cashierId: 'cashier_id',
      childId: 'child_id',
      distributionInfo: 'distribution_info',
      distributionShopId: 'distribution_shop_id',
      distributionShopName: 'distribution_shop_name',
      expireTime: 'expire_time',
      extend: 'extend',
      innerSource: 'inner_source',
      joinTrader: 'join_trader',
      orderId: 'order_id',
      orderPrice: 'order_price',
      parentId: 'parent_id',
      payInfo: 'pay_info',
      payStatus: 'pay_status',
      productDesc: 'product_desc',
      productId: 'product_id',
      productName: 'product_name',
      productNum: 'product_num',
      productPrice: 'product_price',
      productType: 'product_type',
      promoterOrderId: 'promoter_order_id',
      realPrice: 'real_price',
      refundTime: 'refund_time',
      reqSystem: 'req_system',
      sellerId: 'seller_id',
      sellerInfo: 'seller_info',
      sellerName: 'seller_name',
      share: 'share',
      shopId: 'shop_id',
      source: 'source',
      status: 'status',
      tradeId: 'trade_id',
      tradeTime: 'trade_time',
      tradeType: 'trade_type',
      type: 'type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      buyerId: 'string',
      buyerInfo: 'string',
      buyerName: 'string',
      cashierId: 'string',
      childId: 'string',
      distributionInfo: 'string',
      distributionShopId: 'string',
      distributionShopName: 'string',
      expireTime: 'number',
      extend: 'string',
      innerSource: 'string',
      joinTrader: 'string',
      orderId: 'string',
      orderPrice: 'string',
      parentId: 'string',
      payInfo: 'string',
      payStatus: 'string',
      productDesc: 'string',
      productId: 'string',
      productName: 'string',
      productNum: 'number',
      productPrice: 'string',
      productType: 'string',
      promoterOrderId: 'string',
      realPrice: 'string',
      refundTime: 'number',
      reqSystem: 'string',
      sellerId: 'string',
      sellerInfo: 'string',
      sellerName: 'string',
      share: 'string',
      shopId: 'string',
      source: 'string',
      status: 'string',
      tradeId: 'string',
      tradeTime: 'number',
      tradeType: 'string',
      type: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateLogisticFinanceDisRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 扩展字段
  extend?: string;
  // 是否为他人代理申请分布式数字身份,缺省时为自己创建分布式数字身份
  isAgent?: boolean;
  // 用户（企业）名称
  userName: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      extend: 'extend',
      isAgent: 'is_agent',
      userName: 'user_name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      extend: 'string',
      isAgent: 'boolean',
      userName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateLogisticFinanceDisResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 生成的分布式数字身份id
  did?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      did: 'did',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      did: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListLogisticFinanceDisRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListLogisticFinanceDisResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 分布式数字身份列表
  didList?: DidInfo[];
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      didList: 'did_list',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      didList: { 'type': 'array', 'itemType': DidInfo },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateLogisticFinanceDisvcRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 指定可验证声明颁发对象的分布式数字身份id
  destDid: string;
  // 可验证声明有效期 (时间戳) ， 到达该时间戳表示的时间时过期， 默认一天
  expire?: string;
  // vc颁发者分布式数字身份，缺省时为调用者的默认分布式数字身份
  srcDid?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      destDid: 'dest_did',
      expire: 'expire',
      srcDid: 'src_did',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      destDid: 'string',
      expire: 'string',
      srcDid: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateLogisticFinanceDisvcResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 可验证声明id
  vcId?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      vcId: 'vc_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      vcId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryLogisticFinanceDisvcRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 代理申请的分布式数字身份，缺省时为自己的分布式数字身份
  agentDid?: string;
  // 可验证声明id
  vcId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      agentDid: 'agent_did',
      vcId: 'vc_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      agentDid: 'string',
      vcId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryLogisticFinanceDisvcResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 可验证声明完整内容
  vc?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      vc: 'vc',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      vc: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateLogisticFinanceAccountRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 指定的分布式数字身份，缺省时默认为自己的分布式数字身份
  did?: string;
  // 纳税人识别号
  draweeTaxNo: string;
  // 业务方企业id
  orgId: string;
  // 业务方用户id
  userId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      did: 'did',
      draweeTaxNo: 'drawee_tax_no',
      orgId: 'org_id',
      userId: 'user_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      did: 'string',
      draweeTaxNo: 'string',
      orgId: 'string',
      userId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateLogisticFinanceAccountResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 平台内唯一标识，格式为 org_id:user_id:drawee_tax_no
  accountId?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      accountId: 'account_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      accountId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class BatchcreateLogisticFinanceAccountRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 指定的分布式数字身份，缺省时为自己的分布式数字身份
  did?: string;
  // 业务方用户列表，一次最多不超过200
  users: LogisticFinUser[];
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      did: 'did',
      users: 'users',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      did: 'string',
      users: { 'type': 'array', 'itemType': LogisticFinUser },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class BatchcreateLogisticFinanceAccountResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 失败列表
  failList?: LogisticFinUser[];
  // 映射失败数
  failNum?: number;
  // 成功列表
  successList?: string[];
  // 映射成功数
  successNum?: number;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      failList: 'fail_list',
      failNum: 'fail_num',
      successList: 'success_list',
      successNum: 'success_num',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      failList: { 'type': 'array', 'itemType': LogisticFinUser },
      failNum: 'number',
      successList: { 'type': 'array', 'itemType': 'string' },
      successNum: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateLogisticFinanceOrderRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 用户链上账户
  // 与司机did 二选一填写
  accountId?: string;
  // 运费
  allFreight?: string;
  // 回单押金
  // 
  backFee?: string;
  // 货源单号
  cargoOrder?: string;
  // 车牌颜色
  cartBadgeColor: string;
  // 车牌号
  cartBadgeNo: string;
  // 建单时间
  createdTime: number;
  // 受票方名称
  drawee: string;
  // 受票方纳税人识别号
  draweeTaxNo: string;
  // 司机分布式身份
  driverDid?: string;
  // 司机姓名
  // 已填司机分布式身份的情况下可不填
  driverName?: string;
  // 目的地城市CODE
  endCityCode: string;
  // 目的地城市名称
  endCityName: string;
  // 目的地区县CODE
  endCountyCode?: string;
  // 目的地区县名称
  endCountyName?: string;
  // 结束行政区划代码
  endDivisionCode: string;
  // 目的地省份CODE
  endProvinceCode: string;
  // 目的地省份名称
  endProvinceName: string;
  // 运费增项
  freightIncr?: string;
  // 货物数量
  goodsAmount?: number;
  // 货物数量单位类型
  goodsAmountType?: string;
  // 货物名称
  goodsName: string;
  // 司机身份证号
  // 已填司机分布式身份的情况下可不填
  idCard?: string;
  // 运费扣减
  // 
  lossFee?: string;
  // 司机手机号
  // 已填司机分布式身份的情况下可不填
  mobileNo?: string;
  // 系统识别id
  // 网商识别号
  partnerId?: string;
  // 无车承运平台分布式数字身份，缺省时为自己的分布式数字身份
  platformDid?: string;
  // 预付款金额
  prepayments?: string;
  // 线下预付ETC
  prepaymentsBuyEtc?: string;
  // 线下气款金额
  prepaymentsBuyGas?: string;
  // 线下油款预付
  prepaymentsBuyOil?: string;
  // 预付ETC卡金额
  prepaymentsEtccard?: string;
  // 预付油卡金额
  prepaymentsOilcard?: string;
  // 油卡赠送金额
  presentAmountOil?: string;
  // 起始地CODE
  startCityCode: string;
  // 起始地城市名称
  startCityName: string;
  // 起始地区县CODE
  startCountyCode?: string;
  // 起始地区县名称
  startCountyName?: string;
  // 起始行政区划代码
  startDivisionCode: string;
  // 起始地省份CODE
  startProvinceCode: string;
  // 起始地省份名称
  startProvinceName: string;
  // 起运时间戳
  startTime: number;
  // 运单id
  taxWaybillId: string;
  // 运输单价
  unitPrice?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      accountId: 'account_id',
      allFreight: 'all_freight',
      backFee: 'back_fee',
      cargoOrder: 'cargo_order',
      cartBadgeColor: 'cart_badge_color',
      cartBadgeNo: 'cart_badge_no',
      createdTime: 'created_time',
      drawee: 'drawee',
      draweeTaxNo: 'drawee_tax_no',
      driverDid: 'driver_did',
      driverName: 'driver_name',
      endCityCode: 'end_city_code',
      endCityName: 'end_city_name',
      endCountyCode: 'end_county_code',
      endCountyName: 'end_county_name',
      endDivisionCode: 'end_division_code',
      endProvinceCode: 'end_province_code',
      endProvinceName: 'end_province_name',
      freightIncr: 'freight_incr',
      goodsAmount: 'goods_amount',
      goodsAmountType: 'goods_amount_type',
      goodsName: 'goods_name',
      idCard: 'id_card',
      lossFee: 'loss_fee',
      mobileNo: 'mobile_no',
      partnerId: 'partner_id',
      platformDid: 'platform_did',
      prepayments: 'prepayments',
      prepaymentsBuyEtc: 'prepayments_buy_etc',
      prepaymentsBuyGas: 'prepayments_buy_gas',
      prepaymentsBuyOil: 'prepayments_buy_oil',
      prepaymentsEtccard: 'prepayments_etccard',
      prepaymentsOilcard: 'prepayments_oilcard',
      presentAmountOil: 'present_amount_oil',
      startCityCode: 'start_city_code',
      startCityName: 'start_city_name',
      startCountyCode: 'start_county_code',
      startCountyName: 'start_county_name',
      startDivisionCode: 'start_division_code',
      startProvinceCode: 'start_province_code',
      startProvinceName: 'start_province_name',
      startTime: 'start_time',
      taxWaybillId: 'tax_waybill_id',
      unitPrice: 'unit_price',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      accountId: 'string',
      allFreight: 'string',
      backFee: 'string',
      cargoOrder: 'string',
      cartBadgeColor: 'string',
      cartBadgeNo: 'string',
      createdTime: 'number',
      drawee: 'string',
      draweeTaxNo: 'string',
      driverDid: 'string',
      driverName: 'string',
      endCityCode: 'string',
      endCityName: 'string',
      endCountyCode: 'string',
      endCountyName: 'string',
      endDivisionCode: 'string',
      endProvinceCode: 'string',
      endProvinceName: 'string',
      freightIncr: 'string',
      goodsAmount: 'number',
      goodsAmountType: 'string',
      goodsName: 'string',
      idCard: 'string',
      lossFee: 'string',
      mobileNo: 'string',
      partnerId: 'string',
      platformDid: 'string',
      prepayments: 'string',
      prepaymentsBuyEtc: 'string',
      prepaymentsBuyGas: 'string',
      prepaymentsBuyOil: 'string',
      prepaymentsEtccard: 'string',
      prepaymentsOilcard: 'string',
      presentAmountOil: 'string',
      startCityCode: 'string',
      startCityName: 'string',
      startCountyCode: 'string',
      startCountyName: 'string',
      startDivisionCode: 'string',
      startProvinceCode: 'string',
      startProvinceName: 'string',
      startTime: 'number',
      taxWaybillId: 'string',
      unitPrice: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateLogisticFinanceOrderResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 链上凭证
  txCode?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      txCode: 'tx_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      txCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FinishLogisticFinanceOrderRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 链上账号 
  // 与司机did 二选一填写
  accountId?: string;
  // 运费
  allFreight?: string;
  // 回单押金
  backFee?: string;
  // 货源单号
  cargoOrder?: string;
  // 车牌颜色
  cartBadgeColor: string;
  // 车牌号
  cartBadgeNo: string;
  // 建单时间
  createdTime: number;
  // 受票方名称
  drawee: string;
  // 受票方纳税人识别号
  draweeTaxNo: string;
  // 司机分布式数字身份
  driverDid?: string;
  // 司机姓名
  // 已填司机分布式身份的情况下可不填
  driverName?: string;
  // 目的地城市CODE
  endCityCode: string;
  // 目的地城市名称
  endCityName: string;
  // 目的地区县CODE
  endCountyCode?: string;
  // 目的地区县名称
  endCountyName?: string;
  // 结束行政区划代码
  endDivisionCode: string;
  // 目的地省份CODE
  endProvinceCode: string;
  // 目的地省份名称
  endProvinceName: string;
  // 终结时间
  endTime: number;
  // 运费增项
  freightIncr?: string;
  // 货物数量
  goodsAmount?: number;
  // 货物数量单位类型
  goodsAmountType?: string;
  // 货物名称
  goodsName: string;
  // 司机身份证号
  // 已填司机分布式身份的情况下可不填
  idCard?: string;
  // 运费扣减
  lossFee?: string;
  // 司机手机号
  // 已填司机分布式身份的情况下可不填
  mobileNo?: string;
  // 系统识别id
  // 网商识别号
  partnerId?: string;
  // 是否进行资金验证
  payCheck?: boolean;
  // 无车承运平台分布式数字身份，缺省时为自己的分布式数字身份
  platformDid?: string;
  // 预付款金额
  prepayments?: string;
  // 线下预付ETC
  prepaymentsBuyEtc?: string;
  // 线下气款金额
  prepaymentsBuyGas?: string;
  // 线下油款预付
  prepaymentsBuyOil?: string;
  // 预付ETC卡金额
  prepaymentsEtccard?: string;
  // 预付油卡金额
  prepaymentsOilcard?: string;
  // 油卡赠送金额
  presentAmountOil?: string;
  // 起始地CODE
  startCityCode: string;
  // 起始地城市名称
  startCityName: string;
  // 起始地区县CODE
  startCountyCode?: string;
  // 起始地区县名称
  startCountyName?: string;
  // 起始行政区划代码
  startDivisionCode: string;
  // 起始地省份CODE
  startProvinceCode: string;
  // 起始地省份名称
  startProvinceName: string;
  // 起运时间
  startTime: number;
  // 运单ID
  taxWaybillId: string;
  // 运输单价
  unitPrice?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      accountId: 'account_id',
      allFreight: 'all_freight',
      backFee: 'back_fee',
      cargoOrder: 'cargo_order',
      cartBadgeColor: 'cart_badge_color',
      cartBadgeNo: 'cart_badge_no',
      createdTime: 'created_time',
      drawee: 'drawee',
      draweeTaxNo: 'drawee_tax_no',
      driverDid: 'driver_did',
      driverName: 'driver_name',
      endCityCode: 'end_city_code',
      endCityName: 'end_city_name',
      endCountyCode: 'end_county_code',
      endCountyName: 'end_county_name',
      endDivisionCode: 'end_division_code',
      endProvinceCode: 'end_province_code',
      endProvinceName: 'end_province_name',
      endTime: 'end_time',
      freightIncr: 'freight_incr',
      goodsAmount: 'goods_amount',
      goodsAmountType: 'goods_amount_type',
      goodsName: 'goods_name',
      idCard: 'id_card',
      lossFee: 'loss_fee',
      mobileNo: 'mobile_no',
      partnerId: 'partner_id',
      payCheck: 'pay_check',
      platformDid: 'platform_did',
      prepayments: 'prepayments',
      prepaymentsBuyEtc: 'prepayments_buy_etc',
      prepaymentsBuyGas: 'prepayments_buy_gas',
      prepaymentsBuyOil: 'prepayments_buy_oil',
      prepaymentsEtccard: 'prepayments_etccard',
      prepaymentsOilcard: 'prepayments_oilcard',
      presentAmountOil: 'present_amount_oil',
      startCityCode: 'start_city_code',
      startCityName: 'start_city_name',
      startCountyCode: 'start_county_code',
      startCountyName: 'start_county_name',
      startDivisionCode: 'start_division_code',
      startProvinceCode: 'start_province_code',
      startProvinceName: 'start_province_name',
      startTime: 'start_time',
      taxWaybillId: 'tax_waybill_id',
      unitPrice: 'unit_price',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      accountId: 'string',
      allFreight: 'string',
      backFee: 'string',
      cargoOrder: 'string',
      cartBadgeColor: 'string',
      cartBadgeNo: 'string',
      createdTime: 'number',
      drawee: 'string',
      draweeTaxNo: 'string',
      driverDid: 'string',
      driverName: 'string',
      endCityCode: 'string',
      endCityName: 'string',
      endCountyCode: 'string',
      endCountyName: 'string',
      endDivisionCode: 'string',
      endProvinceCode: 'string',
      endProvinceName: 'string',
      endTime: 'number',
      freightIncr: 'string',
      goodsAmount: 'number',
      goodsAmountType: 'string',
      goodsName: 'string',
      idCard: 'string',
      lossFee: 'string',
      mobileNo: 'string',
      partnerId: 'string',
      payCheck: 'boolean',
      platformDid: 'string',
      prepayments: 'string',
      prepaymentsBuyEtc: 'string',
      prepaymentsBuyGas: 'string',
      prepaymentsBuyOil: 'string',
      prepaymentsEtccard: 'string',
      prepaymentsOilcard: 'string',
      presentAmountOil: 'string',
      startCityCode: 'string',
      startCityName: 'string',
      startCountyCode: 'string',
      startCountyName: 'string',
      startDivisionCode: 'string',
      startProvinceCode: 'string',
      startProvinceName: 'string',
      startTime: 'number',
      taxWaybillId: 'string',
      unitPrice: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FinishLogisticFinanceOrderResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 链上凭证
  txCode?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      txCode: 'tx_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      txCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateLogisticFinancePayorderRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 确认到账时间
  arriveTime: number;
  // 关联银行流水号
  bankSn: string;
  // 付款金额
  payAmount: string;
  // 付款方银行账号
  payBankCardNo: string;
  // 付款方开户行
  payBankName: string;
  // 付款方did
  payDid?: string;
  // 付款方名称
  payName: string;
  // 付款时间戳
  payTime: number;
  // 支付类型
  payTypeNew: string;
  // 支付方式
  payWay: string;
  // 无车承运平台分布式数字身份，缺省为自己的分布式数字身份
  platformDid?: string;
  // 支付订单ID
  posInfoId: string;
  // 实际付款方开户行
  realPayBank: string;
  // 实际付款方银行账号
  realPayBankCardNo: string;
  // 实际付款方名称
  realPayName: string;
  // 收款方银行账号
  recvBankCardNo: string;
  // 收款方开户行
  recvBankName: string;
  // 收款方did
  recvDid?: string;
  // 收款方名称
  recvName: string;
  // 关联的运单ID
  waybillId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      arriveTime: 'arrive_time',
      bankSn: 'bank_sn',
      payAmount: 'pay_amount',
      payBankCardNo: 'pay_bank_card_no',
      payBankName: 'pay_bank_name',
      payDid: 'pay_did',
      payName: 'pay_name',
      payTime: 'pay_time',
      payTypeNew: 'pay_type_new',
      payWay: 'pay_way',
      platformDid: 'platform_did',
      posInfoId: 'pos_info_id',
      realPayBank: 'real_pay_bank',
      realPayBankCardNo: 'real_pay_bank_card_no',
      realPayName: 'real_pay_name',
      recvBankCardNo: 'recv_bank_card_no',
      recvBankName: 'recv_bank_name',
      recvDid: 'recv_did',
      recvName: 'recv_name',
      waybillId: 'waybill_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      arriveTime: 'number',
      bankSn: 'string',
      payAmount: 'string',
      payBankCardNo: 'string',
      payBankName: 'string',
      payDid: 'string',
      payName: 'string',
      payTime: 'number',
      payTypeNew: 'string',
      payWay: 'string',
      platformDid: 'string',
      posInfoId: 'string',
      realPayBank: 'string',
      realPayBankCardNo: 'string',
      realPayName: 'string',
      recvBankCardNo: 'string',
      recvBankName: 'string',
      recvDid: 'string',
      recvName: 'string',
      waybillId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateLogisticFinancePayorderResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 链上凭证
  txCode?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      txCode: 'tx_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      txCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryLogisticFinanceOrderRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 无车承运平台分布式数字身份，缺省时为自己的分布式数字身份
  platformDid?: string;
  // 运单ID
  taxWaybillId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      platformDid: 'platform_did',
      taxWaybillId: 'tax_waybill_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      platformDid: 'string',
      taxWaybillId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryLogisticFinanceOrderResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 运单状态
  status?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      status: 'status',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      status: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateLogisticFinanceBillorderRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 受票方名称
  drawee: string;
  // 受票方纳税人识别号
  draweeTaxNo: string;
  // 发票代码
  lzfpdm?: string;
  // 发票号码
  lzfphm?: string;
  // 开票时间戳
  openTime: number;
  // 所属平台的分布式数字身份，缺省时为自己的分布式数字身份
  platformDid?: string;
  // 关联的运单ID
  waybillId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      drawee: 'drawee',
      draweeTaxNo: 'drawee_tax_no',
      lzfpdm: 'lzfpdm',
      lzfphm: 'lzfphm',
      openTime: 'open_time',
      platformDid: 'platform_did',
      waybillId: 'waybill_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      drawee: 'string',
      draweeTaxNo: 'string',
      lzfpdm: 'string',
      lzfphm: 'string',
      openTime: 'number',
      platformDid: 'string',
      waybillId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateLogisticFinanceBillorderResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 链上凭证
  txCode?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      txCode: 'tx_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      txCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ImportLogisticFinanceLocationRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 描述信息
  desc?: string;
  // 运单轨迹信息
  location: LogisticLocation[];
  // 所属平台分布式数字身份，缺省时为自己的分布式数字身份
  platformDid?: string;
  // 运单id
  taxWaybillId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      desc: 'desc',
      location: 'location',
      platformDid: 'platform_did',
      taxWaybillId: 'tax_waybill_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      desc: 'string',
      location: { 'type': 'array', 'itemType': LogisticLocation },
      platformDid: 'string',
      taxWaybillId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ImportLogisticFinanceLocationResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateLogisticFinanceConsignorRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 企业名称
  epCertName: string;
  // 企业证件号
  epCertNo: string;
  // 扩展字段
  extensionInfo?: string;
  // 法人姓名
  legalPersonCertName: string;
  // 法人身份证
  legalPersonCertNo: string;
  // 所属无车平台DIS
  platformDid: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      epCertName: 'ep_cert_name',
      epCertNo: 'ep_cert_no',
      extensionInfo: 'extension_info',
      legalPersonCertName: 'legal_person_cert_name',
      legalPersonCertNo: 'legal_person_cert_no',
      platformDid: 'platform_did',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      epCertName: 'string',
      epCertNo: 'string',
      extensionInfo: 'string',
      legalPersonCertName: 'string',
      legalPersonCertNo: 'string',
      platformDid: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateLogisticFinanceConsignorResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 返回货主did信息
  did?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      did: 'did',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      did: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateLogisticFinancePlatformRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 企业名称
  epCertName: string;
  // 企业证件号
  epCertNo: string;
  // 扩展字段
  extensionInfo?: string;
  // 法人姓名
  legalPersonCertName: string;
  // 法人身份证
  legalPersonCertNo: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      epCertName: 'ep_cert_name',
      epCertNo: 'ep_cert_no',
      extensionInfo: 'extension_info',
      legalPersonCertName: 'legal_person_cert_name',
      legalPersonCertNo: 'legal_person_cert_no',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      epCertName: 'string',
      epCertNo: 'string',
      extensionInfo: 'string',
      legalPersonCertName: 'string',
      legalPersonCertNo: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateLogisticFinancePlatformResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 返回无车承运平台DIS
  did?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      did: 'did',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      did: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateLogistFinanceAgentplatformRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 代理创建者did
  agentDid: string;
  // 企业名称
  epCertName: string;
  // 企业证件号
  epCertNo: string;
  // 扩展字段
  extensionInfo?: string;
  // 法人姓名
  legalPersonCertName: string;
  // 法人身份证号
  legalPersonCertNo: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      agentDid: 'agent_did',
      epCertName: 'ep_cert_name',
      epCertNo: 'ep_cert_no',
      extensionInfo: 'extension_info',
      legalPersonCertName: 'legal_person_cert_name',
      legalPersonCertNo: 'legal_person_cert_no',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      agentDid: 'string',
      epCertName: 'string',
      epCertNo: 'string',
      extensionInfo: 'string',
      legalPersonCertName: 'string',
      legalPersonCertNo: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateLogistFinanceAgentplatformResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 返回无车承运平台did
  did?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      did: 'did',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      did: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateLogisticFinanceDriverRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 身份证号码
  certNo: string;
  // 扩展字段
  extensionInfo?: string;
  // 手机号码
  mobile: string;
  // 姓名
  name: string;
  // 所属平台did
  platformDid: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      certNo: 'cert_no',
      extensionInfo: 'extension_info',
      mobile: 'mobile',
      name: 'name',
      platformDid: 'platform_did',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      certNo: 'string',
      extensionInfo: 'string',
      mobile: 'string',
      name: 'string',
      platformDid: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateLogisticFinanceDriverResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 返回司机did
  did?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      did: 'did',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      did: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateLogisticFinanceCargoorderRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 运费
  allFreight: string;
  // 货物名称
  cargoName: string;
  // 货源单号
  cargoOrder: string;
  // 货物类型
  cargoType: string;
  // 货主did
  consignorDid: string;
  // 卸货地
  deliveryPlace: string;
  // 装货地
  loadingPlace: string;
  // 平台did
  platformDid: string;
  // 联系人电话
  userPhone?: string;
  // 重量
  weight: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      allFreight: 'all_freight',
      cargoName: 'cargo_name',
      cargoOrder: 'cargo_order',
      cargoType: 'cargo_type',
      consignorDid: 'consignor_did',
      deliveryPlace: 'delivery_place',
      loadingPlace: 'loading_place',
      platformDid: 'platform_did',
      userPhone: 'user_phone',
      weight: 'weight',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      allFreight: 'string',
      cargoName: 'string',
      cargoOrder: 'string',
      cargoType: 'string',
      consignorDid: 'string',
      deliveryPlace: 'string',
      loadingPlace: 'string',
      platformDid: 'string',
      userPhone: 'string',
      weight: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateLogisticFinanceCargoorderResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 货源链上凭证
  txCode?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      txCode: 'tx_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      txCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateLogisticFinanceCargopayorderRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 银行流水号
  bankNo: string;
  // 货源单号
  cargoOrder: string;
  // 费用类型   (运费、调度费、服务费)
  expenseType: string;
  // 支付金额
  payment: string;
  // 付款方did
  payDid: string;
  // 平台支付单号
  payId: string;
  // 支付备注
  payNote?: string;
  // 收款方did
  recvDid: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bankNo: 'bank_no',
      cargoOrder: 'cargo_order',
      expenseType: 'expense_type',
      payment: 'payment',
      payDid: 'pay_did',
      payId: 'pay_id',
      payNote: 'pay_note',
      recvDid: 'recv_did',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bankNo: 'string',
      cargoOrder: 'string',
      expenseType: 'string',
      payment: 'string',
      payDid: 'string',
      payId: 'string',
      payNote: 'string',
      recvDid: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateLogisticFinanceCargopayorderResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 货源支付链上凭证
  txCode?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      txCode: 'tx_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      txCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateOcpProductRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 联盟Id
  baasAlliance: string;
  // 意义：链扩容字段，表示在默认空间大小基础上，新增空间大小，单位为G，默认值为0。
  // 仅链版本为企业版（enterpriseVer）时，才发挥作用。
  baasCapacity?: string;
  // 区块链的名称
  baasName: string;
  // 意义：链新增节点数，表示在默认4个节点基础上，新增节点数，单位为个，默认值为0。
  //  仅链版本为企业版（enterpriseVer）时，才发挥作用。
  baasNode?: string;
  // 意义：Tee链标志，表示创建Tee区块链，默认值为false。 
  // 注意：仅链版本为企业版（enterpriseVer）时，才发挥作用。
  baasTee?: boolean;
  // 基础版（basicVer）、企业版（enterpriseVer）
  baasVer: string;
  // 业务组详细码
  bizCode: string;
  // 业务组详细类型
  bizType: string;
  // 业务组码
  groupCode: string;
  // 产品码 全局唯一
  productCode: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      baasAlliance: 'baas_alliance',
      baasCapacity: 'baas_capacity',
      baasName: 'baas_name',
      baasNode: 'baas_node',
      baasTee: 'baas_tee',
      baasVer: 'baas_ver',
      bizCode: 'biz_code',
      bizType: 'biz_type',
      groupCode: 'group_code',
      productCode: 'product_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      baasAlliance: 'string',
      baasCapacity: 'string',
      baasName: 'string',
      baasNode: 'string',
      baasTee: 'boolean',
      baasVer: 'string',
      bizCode: 'string',
      bizType: 'string',
      groupCode: 'string',
      productCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateOcpProductResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateOcpProductRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 产品实例Id 
  instanceId: string;
  // 产品码 全局唯一
  productCode: string;
  // 增量规格信息（JSON格式）会按照key进行排序
  specification: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      instanceId: 'instance_id',
      productCode: 'product_code',
      specification: 'specification',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      instanceId: 'string',
      productCode: 'string',
      specification: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateOcpProductResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 签名结果
  sign?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      sign: 'sign',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      sign: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CloseOcpProductRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 产品实例Id列    
  instanceId: string;
  // 产品码 全局唯一
  productCode: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      instanceId: 'instance_id',
      productCode: 'product_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      instanceId: 'string',
      productCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CloseOcpProductResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class EnableOcpProductRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 产品实例Id
  instanceId: string;
  // 产品码 全局唯一
  productCode: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      instanceId: 'instance_id',
      productCode: 'product_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      instanceId: 'string',
      productCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class EnableOcpProductResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 签名结果
  sign?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      sign: 'sign',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      sign: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StopOcpProductRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 产品实例Id
  instanceId: string;
  // 产品码 全局唯一
  productCode: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      instanceId: 'instance_id',
      productCode: 'product_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      instanceId: 'string',
      productCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StopOcpProductResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 签名结果   
  sign?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      sign: 'sign',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      sign: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InitOcpProductRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 加载业务的场景
  businessAction: string;
  // 用于加载对应场景数据的上下文（JSON格式具体同产品方定义）
  businessContext: string;
  // 流水号用于业务串联，以及幂等
  orderNo?: string;
  // 产品码 全局唯一
  productCode: string;
  // 区域
  region?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      businessAction: 'business_action',
      businessContext: 'business_context',
      orderNo: 'order_no',
      productCode: 'product_code',
      region: 'region',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      businessAction: 'string',
      businessContext: 'string',
      orderNo: 'string',
      productCode: 'string',
      region: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InitOcpProductResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 组合内容
  discreteValues?: DiscreteValue[];
  // 签名结果
  sign?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      discreteValues: 'discrete_values',
      sign: 'sign',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      discreteValues: { 'type': 'array', 'itemType': DiscreteValue },
      sign: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryOcpProductRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 实例id
  instanceId: string;
  // 产品码
  productCode: string;
  // 租户id
  tenantId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      instanceId: 'instance_id',
      productCode: 'product_code',
      tenantId: 'tenant_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      instanceId: 'string',
      productCode: 'string',
      tenantId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryOcpProductResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 状态描述：未开通（UN_OPEN）、初始化（INIT）、开通（OPEN）、释放\关闭（CLOSE）、未知（UNKNOWN）、暂停（STOP）。
  info?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      info: 'info',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      info: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class OpenOcpProductRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 实例id
  instanceId: string;
  // 产品码
  productCode: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      instanceId: 'instance_id',
      productCode: 'product_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      instanceId: 'string',
      productCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class OpenOcpProductResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateOcpProductsRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 实例id
  instanceId: string;
  // 产品码
  productCode: string;
  // 产品规格
  specification: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      instanceId: 'instance_id',
      productCode: 'product_code',
      specification: 'specification',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      instanceId: 'string',
      productCode: 'string',
      specification: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateOcpProductsResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CallbackOcpProductRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 任务状态变更，是否成功；
  downstatus: boolean;
  // 事件类型：开通、变更、释放、创建、停止、恢复等
  event: string;
  // 产品实例Id列
  instanceId: string;
  // 产品码 全局唯一
  productCode: string;
  // 租户id
  tenantId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      downstatus: 'downstatus',
      event: 'event',
      instanceId: 'instance_id',
      productCode: 'product_code',
      tenantId: 'tenant_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      downstatus: 'boolean',
      event: 'string',
      instanceId: 'string',
      productCode: 'string',
      tenantId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CallbackOcpProductResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CheckOcpTaskRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 事件类型：开通（AF_OPEN）、变更（AF_MODIFY）、释放（AF_RELEASE）、创建（AF_PROVISION）、停止（AF_STOP）、恢复（AF_RESUME）等。
  event: string;
  // 实例id
  instanceId: string;
  // 请求平台来源
  platform: string;
  // 产品码
  productCode: string;
  // 租户id
  tenantId: string;
  // 商品码
  accessCode: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      event: 'event',
      instanceId: 'instance_id',
      platform: 'platform',
      productCode: 'product_code',
      tenantId: 'tenant_id',
      accessCode: 'access_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      event: 'string',
      instanceId: 'string',
      platform: 'string',
      productCode: 'string',
      tenantId: 'string',
      accessCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CheckOcpTaskResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 任务是否成功
  taskResult?: boolean;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      taskResult: 'task_result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      taskResult: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ExecOcpTaskRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 事件类型：开通（AF_OPEN）、变更（AF_MODIFY）、释放（AF_RELEASE）、创建（AF_PROVISION）、停止（AF_STOP）、恢复（AF_RESUME）等。
  event: string;
  // 实例id
  instanceId: string;
  // 订单号码
  orderNo: string;
  // 请求平台来源
  platform: string;
  // 产品码
  productCode: string;
  // 产品规格
  specification: string;
  // 租户Id
  tenantId: string;
  // 商品码
  accessCode: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      event: 'event',
      instanceId: 'instance_id',
      orderNo: 'order_no',
      platform: 'platform',
      productCode: 'product_code',
      specification: 'specification',
      tenantId: 'tenant_id',
      accessCode: 'access_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      event: 'string',
      instanceId: 'string',
      orderNo: 'string',
      platform: 'string',
      productCode: 'string',
      specification: 'string',
      tenantId: 'string',
      accessCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ExecOcpTaskResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 任务是否成功
  taskResult?: boolean;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      taskResult: 'task_result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      taskResult: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateBlockchainInstanceInnerRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 区块链名称
  blockchainName: string;
  // 链打标内容
  blockchainTag?: string;
  // Tee链/企业版/企业版  enterprise
  blockchainType: string;
  // 待创建联盟的信息
  createUnionInfo?: BaasUnionInfo;
  // 节点数
  nodeNumber: number;
  // 联盟id
  unionId?: number;
  // 业务线code
  groupCode: string;
  // 业务线子码
  groupSubCode: string;
  // 是否需要创建测试链
  testChain: boolean;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      blockchainName: 'blockchain_name',
      blockchainTag: 'blockchain_tag',
      blockchainType: 'blockchain_type',
      createUnionInfo: 'create_union_info',
      nodeNumber: 'node_number',
      unionId: 'union_id',
      groupCode: 'group_code',
      groupSubCode: 'group_sub_code',
      testChain: 'test_chain',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      blockchainName: 'string',
      blockchainTag: 'string',
      blockchainType: 'string',
      createUnionInfo: BaasUnionInfo,
      nodeNumber: 'number',
      unionId: 'number',
      groupCode: 'string',
      groupSubCode: 'string',
      testChain: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateBlockchainInstanceInnerResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // instanceId
  result?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryBlockchainInstanceBizidRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 内部建链的实例id
  instanceId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      instanceId: 'instance_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      instanceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryBlockchainInstanceBizidResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 区块链的相关信息
  result?: CreateBlockchainInfo[];
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: { 'type': 'array', 'itemType': CreateBlockchainInfo },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateApiConsortiumRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 某某联盟的使用场景描述
  description: string;
  // 联盟名称
  name: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      description: 'description',
      name: 'name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      description: 'string',
      name: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateApiConsortiumResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 请求id
  requestId?: string;
  // 结果
  result?: Result;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      requestId: 'request_id',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      requestId: 'string',
      result: Result,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryApiMiniappbrowserAuthtypeRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 链 ID
  antChainId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      antChainId: 'ant_chain_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      antChainId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryApiMiniappbrowserAuthtypeResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 请求 ID
  requestId?: string;
  // 授权类型
  result?: MiniAppBrowserAuthType;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      requestId: 'request_id',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      requestId: 'string',
      result: MiniAppBrowserAuthType,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryStatisticsPortHeightRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 链id
  bizid: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizid: 'bizid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizid: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryStatisticsPortHeightResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 当前块高
  height?: number;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      height: 'height',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      height: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryStatisticPortBizidRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryStatisticPortBizidResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 链授权列表
  bizList?: MyChainInfo[];
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      bizList: 'biz_list',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      bizList: { 'type': 'array', 'itemType': MyChainInfo },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AddStatisticsPortTaskRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 链id
  bizid: string;
  // 结束块高
  end: number;
  // 开始块高
  start: number;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizid: 'bizid',
      end: 'end',
      start: 'start',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizid: 'string',
      end: 'number',
      start: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AddStatisticsPortTaskResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryApiDwhTransactionRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 链bizid
  bizId: string;
  // block_hash
  blockHash?: string;
  // end_timestamp
  endTimestamp?: number;
  // from
  from?: string;
  // pageNo
  pageNo?: number;
  // pageSize
  pageSize?: number;
  // startTimestamp
  startTimestamp?: number;
  // to
  to?: string;
  // transactionHash
  transactionHash?: string;
  // transactionType
  transactionType?: number;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizId: 'biz_id',
      blockHash: 'block_hash',
      endTimestamp: 'end_timestamp',
      from: 'from',
      pageNo: 'page_no',
      pageSize: 'page_size',
      startTimestamp: 'start_timestamp',
      to: 'to',
      transactionHash: 'transaction_hash',
      transactionType: 'transaction_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizId: 'string',
      blockHash: 'string',
      endTimestamp: 'number',
      from: 'string',
      pageNo: 'number',
      pageSize: 'number',
      startTimestamp: 'number',
      to: 'string',
      transactionHash: 'string',
      transactionType: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryApiDwhTransactionResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // transaction_list
  transactionList?: TransactionPo[];
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      transactionList: 'transaction_list',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      transactionList: { 'type': 'array', 'itemType': TransactionPo },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryApiDwhAccountRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 账户hash ，如果根据账户hash查询账户信息可以填写该字段
  accountHash?: string;
  // 链id
  bizId: string;
  // 结束时间，如果查询时间段创建的账户，可以填写该字段
  endTimestamp?: number;
  // 页数，分页使用，从1开始
  pageNo?: number;
  // 分页大小，取值不能超过100，默认100
  pageSize?: number;
  // 开始时间，如果查询时间段创建的账户，可以填写该字段
  startTimestamp?: number;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      accountHash: 'account_hash',
      bizId: 'biz_id',
      endTimestamp: 'end_timestamp',
      pageNo: 'page_no',
      pageSize: 'page_size',
      startTimestamp: 'start_timestamp',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      accountHash: 'string',
      bizId: 'string',
      endTimestamp: 'number',
      pageNo: 'number',
      pageSize: 'number',
      startTimestamp: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryApiDwhAccountResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 账户列表
  accountList?: AccountPo[];
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      accountList: 'account_list',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      accountList: { 'type': 'array', 'itemType': AccountPo },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryApiDwhContractRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // biz_id 链id
  bizId?: string;
  // 合约地址：如果根据合约地址查询，可以填该字段
  contract?: string;
  // 结束时间：如果根据时间范围查询创建的合约，可以填写该字段
  endTimestamp?: number;
  // 页数，分页使用，从1开始默认为1
  pageNo?: number;
  // 分页大小，取值不能超过100，默认100
  pageSize?: number;
  // 开始时间：如果根据时间范围查询创建的账户，可以填写该字段
  startTimestamp?: number;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizId: 'biz_id',
      contract: 'contract',
      endTimestamp: 'end_timestamp',
      pageNo: 'page_no',
      pageSize: 'page_size',
      startTimestamp: 'start_timestamp',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizId: 'string',
      contract: 'string',
      endTimestamp: 'number',
      pageNo: 'number',
      pageSize: 'number',
      startTimestamp: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryApiDwhContractResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 合约列表
  contractList?: ContractInfo[];
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      contractList: 'contract_list',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      contractList: { 'type': 'array', 'itemType': ContractInfo },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryApiDwhbTransactionRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // biz_id
  bizId: string;
  // hash_list
  hashList: string[];
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizId: 'biz_id',
      hashList: 'hash_list',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizId: 'string',
      hashList: { 'type': 'array', 'itemType': 'string' },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryApiDwhbTransactionResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // transaction
  transactionList?: TransactionInfo[];
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      transactionList: 'transaction_list',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      transactionList: { 'type': 'array', 'itemType': TransactionInfo },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteCaasContractServiceRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 服务ID
  serviceId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      serviceId: 'service_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      serviceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteCaasContractServiceResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateCaasContractServiceRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 链ID
  chainId: string;
  // 联盟ID
  unionId: string;
  // 合约模板标识
  templateId: string;
  // 合约名称
  name: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      chainId: 'chain_id',
      unionId: 'union_id',
      templateId: 'template_id',
      name: 'name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      chainId: 'string',
      unionId: 'string',
      templateId: 'string',
      name: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateCaasContractServiceResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 返回结果
  result?: ContractCreateResp;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: ContractCreateResp,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class PagequeryCaasContractServiceRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 合约服务类别
  type?: string;
  // 页码
  num: number;
  // 页大小
  size: number;
  // 链id
  chainId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      type: 'type',
      num: 'num',
      size: 'size',
      chainId: 'chain_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      type: 'string',
      num: 'number',
      size: 'number',
      chainId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class PagequeryCaasContractServiceResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 返回结果
  result?: ContractPageResp;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: ContractPageResp,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryCaasContractServiceRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 服务ID
  serviceId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      serviceId: 'service_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      serviceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryCaasContractServiceResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 返回结果
  result?: ContractCreateProcessResp;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: ContractCreateProcessResp,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeployCaasContractServiceRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 链ID
  chainId: string;
  // 联盟id
  unionId: string;
  // 合约模板标识
  templateId: string;
  // 合约名称
  name: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      chainId: 'chain_id',
      unionId: 'union_id',
      templateId: 'template_id',
      name: 'name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      chainId: 'string',
      unionId: 'string',
      templateId: 'string',
      name: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeployCaasContractServiceResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 返回结果
  result?: ContractCreateResp;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: ContractCreateResp,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListCaasContractServiceRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 链ID
  chainId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      chainId: 'chain_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      chainId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListCaasContractServiceResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 返回结果
  result?: ContractTypeResp;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: ContractTypeResp,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DetailCaasContractServiceRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 服务ID
  serviceId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      serviceId: 'service_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      serviceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DetailCaasContractServiceResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 返回结果
  result?: ContractDetailResp;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: ContractDetailResp,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateCaasApplicationManageRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 链ID
  chainId: string;
  // 联盟id
  unionId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      chainId: 'chain_id',
      unionId: 'union_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      chainId: 'string',
      unionId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateCaasApplicationManageResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 返回结果
  result?: ApplicationCreateResp;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: ApplicationCreateResp,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class PagequeryCaasApplicationManageRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 页码
  num: number;
  // 页大小
  size: number;
  // 链ID
  chainId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      num: 'num',
      size: 'size',
      chainId: 'chain_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      num: 'number',
      size: 'number',
      chainId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class PagequeryCaasApplicationManageResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 返回结果
  result?: ApplicationPageResp;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: ApplicationPageResp,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryCaasApplicationManageRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 应用程序ID
  applicationId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      applicationId: 'application_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      applicationId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryCaasApplicationManageResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 返回结果
  result?: ContractBindListResp;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: ContractBindListResp,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UnbindCaasApplicationManageRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 应用程序ID
  applicationId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      applicationId: 'application_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      applicationId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UnbindCaasApplicationManageResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class BindCaasApplicationManageRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 应用ID
  applicationId: string;
  // 合约服务标识集合
  serviceIds?: string[];
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      applicationId: 'application_id',
      serviceIds: 'service_ids',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      applicationId: 'string',
      serviceIds: { 'type': 'array', 'itemType': 'string' },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class BindCaasApplicationManageResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetCaasApplicationManageRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 应用程序ID
  applicationId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      applicationId: 'application_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      applicationId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetCaasApplicationManageResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 返回结果
  result?: ApplicationGetSkResp;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: ApplicationGetSkResp,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class PagequeryCaasContractMarketRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 页码
  num: number;
  // 页大小
  size: number;
  // 链id
  chainId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      num: 'num',
      size: 'size',
      chainId: 'chain_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      num: 'number',
      size: 'number',
      chainId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class PagequeryCaasContractMarketResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 返回结果
  result?: ContractTemplateListResp;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: ContractTemplateListResp,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateContractRecordRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // abi对应oss key
  abiOssKey: string;
  // 区块链唯一标识
  bizid: string;
  // bytecode对应oss key
  bytecodeOssKey: string;
  // 16进制表示的合约identity
  identity: string;
  // 合约代码中定义的合约实例名，比如solidity的contract 关键字后面的命名
  instanceName: string;
  // 合约名称
  name: string;
  // 交易hash
  txHash: string;
  // solidity|cpp|go
  type: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      abiOssKey: 'abi_oss_key',
      bizid: 'bizid',
      bytecodeOssKey: 'bytecode_oss_key',
      identity: 'identity',
      instanceName: 'instance_name',
      name: 'name',
      txHash: 'tx_hash',
      type: 'type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      abiOssKey: 'string',
      bizid: 'string',
      bytecodeOssKey: 'string',
      identity: 'string',
      instanceName: 'string',
      name: 'string',
      txHash: 'string',
      type: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateContractRecordResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 是否成功
  result?: boolean;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetContractRecordRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 区块链唯一标识
  bizid: string;
  // 16进制表示的合约identity
  identity: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizid: 'bizid',
      identity: 'identity',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizid: 'string',
      identity: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetContractRecordResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 合约部署记录
  result?: ContractRecord;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: ContractRecord,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateContractRecordRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // abi对应oss key
  abiOssKey: string;
  // 区块链唯一标识
  bizid: string;
  // bytecode对应oss key
  bytecodeOssKey: string;
  // 16进制表示的合约identity
  identity: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      abiOssKey: 'abi_oss_key',
      bizid: 'bizid',
      bytecodeOssKey: 'bytecode_oss_key',
      identity: 'identity',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      abiOssKey: 'string',
      bizid: 'string',
      bytecodeOssKey: 'string',
      identity: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateContractRecordResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 是否成功
  result?: boolean;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class OnlineContractRecordRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 区块链唯一标识
  bizid: string;
  // 16进制表示的合约identity
  identity: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizid: 'bizid',
      identity: 'identity',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizid: 'string',
      identity: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class OnlineContractRecordResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 是否成功
  result?: boolean;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class OfflineContractRecordRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 区块链唯一标识
  bizid: string;
  // 16进制表示的合约identity
  identity: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizid: 'bizid',
      identity: 'identity',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizid: 'string',
      identity: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class OfflineContractRecordResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 是否成功
  result?: boolean;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryContractRecordRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 区块链唯一标识
  bizid: string;
  // 页号
  pageNo: number;
  // 页大小
  pageSize: number;
  // 查询状态
  queryStatus?: number;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizid: 'bizid',
      pageNo: 'page_no',
      pageSize: 'page_size',
      queryStatus: 'query_status',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizid: 'string',
      pageNo: 'number',
      pageSize: 'number',
      queryStatus: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryContractRecordResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 当前页元素列表
  content?: ContractRecord[];
  // 当前页号
  number?: string;
  // 当前页大小
  size?: string;
  // 元素总个数
  totalElements?: number;
  // 总页数
  totalPages?: number;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      content: 'content',
      number: 'number',
      size: 'size',
      totalElements: 'total_elements',
      totalPages: 'total_pages',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      content: { 'type': 'array', 'itemType': ContractRecord },
      number: 'string',
      size: 'string',
      totalElements: 'number',
      totalPages: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ExecContractDelegateRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 区块链唯一标识
  bizid: string;
  // 交易消息体
  body: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizid: 'bizid',
      body: 'body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizid: 'string',
      body: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ExecContractDelegateResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 返回结果
  result?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ExecContractServiceRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 区块链唯一标识
  bizid: string;
  // 交易消息体
  body: string;
  // 16进制表示的合约identity
  identity: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizid: 'bizid',
      body: 'body',
      identity: 'identity',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizid: 'string',
      body: 'string',
      identity: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ExecContractServiceResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 执行结果
  result?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetContractConfigChainRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetContractConfigChainResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 当前租户具有访问权限的合约链配置信息列表
  result?: ContractIdeConfigResult;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: ContractIdeConfigResult,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetContractAbiUrlRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetContractAbiUrlResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 可用于上传文件到oss的相关oss client字段配置，包括服务端的签名，url超期时间等。
  result?: PresignedUrlPolicy;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: PresignedUrlPolicy,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetContractBytecodeUrlRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetContractBytecodeUrlResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 可用于上传文件到oss的相关oss client字段配置，包括服务端的签名，url超期时间等。
  result?: PresignedUrlPolicy;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: PresignedUrlPolicy,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UploadDataFileBatchqueryRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 上传文件md5值
  fileMd5: string;
  // 数据集id
  dataSetId: string;
  // 文件id
  fileObject?: Readable;
  fileObjectName?: string;
  fileId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      fileMd5: 'file_md5',
      dataSetId: 'data_set_id',
      fileObject: 'fileObject',
      fileObjectName: 'fileObjectName',
      fileId: 'file_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      fileMd5: 'string',
      dataSetId: 'string',
      fileObject: 'Readable',
      fileObjectName: 'string',
      fileId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UploadDataFileBatchqueryResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 离线任务查询id，批量任务结束后可通过该字段查询结果
  queryId?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      queryId: 'query_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      queryId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryDataResultBatchqueryRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 上传待查询数据集文件后得到的查询id，在此接口进行结果查询
  queryId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      queryId: 'query_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      queryId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryDataResultBatchqueryResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 结果文件临时链接
  filePath?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      filePath: 'file_path',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      filePath: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDataauthorizationParticipantRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 账户名称
  account?: string;
  // 业务系统唯一标示
  bizUid: string;
  // 区块链ID
  blockchainId?: string;
  // 信用编号
  creditNumber?: string;
  // 扩展参数，标准JSON格式
  extensionInfo?: string;
  // 用户名称
  name: string;
  // 回调通知服务地址
  notificationService?: string;
  // did doc中的公开信息
  publicInfo?: string;
  // 用户角色列表
  role: string[];
  // 空间ID
  spaceId?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      account: 'account',
      bizUid: 'biz_uid',
      blockchainId: 'blockchain_id',
      creditNumber: 'credit_number',
      extensionInfo: 'extension_info',
      name: 'name',
      notificationService: 'notification_service',
      publicInfo: 'public_info',
      role: 'role',
      spaceId: 'space_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      account: 'string',
      bizUid: 'string',
      blockchainId: 'string',
      creditNumber: 'string',
      extensionInfo: 'string',
      name: 'string',
      notificationService: 'string',
      publicInfo: 'string',
      role: { 'type': 'array', 'itemType': 'string' },
      spaceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDataauthorizationParticipantResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 参与方信息
  participant?: Participant;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      participant: 'participant',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      participant: Participant,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteDataauthorizationParticipantRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 参与方ID
  participantId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      participantId: 'participant_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      participantId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteDataauthorizationParticipantResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateDataauthorizationParticipantRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 扩展参数，标准JSON格式
  extensionInfo?: string;
  // 用户名称
  name: string;
  // 回调通知服务地址
  notificationService?: string;
  // 参与方ID
  participantId: string;
  // did doc中的公开信息
  publicInfo?: string;
  // 用户角色列表
  role: string[];
  // 账户名称
  account?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      extensionInfo: 'extension_info',
      name: 'name',
      notificationService: 'notification_service',
      participantId: 'participant_id',
      publicInfo: 'public_info',
      role: 'role',
      account: 'account',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      extensionInfo: 'string',
      name: 'string',
      notificationService: 'string',
      participantId: 'string',
      publicInfo: 'string',
      role: { 'type': 'array', 'itemType': 'string' },
      account: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateDataauthorizationParticipantResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryDataauthorizationParticipantRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 参与方ID
  participantId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      participantId: 'participant_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      participantId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryDataauthorizationParticipantResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 参与方信息
  participant?: Participant;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      participant: 'participant',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      participant: Participant,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDataauthorizationParticipantRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 空间ID
  spaceId?: string;
  // 用户角色
  role: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      spaceId: 'space_id',
      role: 'role',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      spaceId: 'string',
      role: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDataauthorizationParticipantResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 参与方列表
  participants?: Participant[];
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      participants: 'participants',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      participants: { 'type': 'array', 'itemType': Participant },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDataauthorizationDataEntityRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 业务系统数据对象唯一标示
  bizUid: string;
  // 区块链ID
  blockchainId?: string;
  // 数据类别
  category: string;
  // 数据模型ID
  dataModelId?: string;
  // 扩展参数，标准JSON格式
  extensionInfo?: string;
  // 数据名称
  name: string;
  // 数据所有者ID
  ownerId: string;
  // 审批模版
  processTemplate?: ProcessNode[];
  // DID doc里的公开信息
  publicInfo?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizUid: 'biz_uid',
      blockchainId: 'blockchain_id',
      category: 'category',
      dataModelId: 'data_model_id',
      extensionInfo: 'extension_info',
      name: 'name',
      ownerId: 'owner_id',
      processTemplate: 'process_template',
      publicInfo: 'public_info',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizUid: 'string',
      blockchainId: 'string',
      category: 'string',
      dataModelId: 'string',
      extensionInfo: 'string',
      name: 'string',
      ownerId: 'string',
      processTemplate: { 'type': 'array', 'itemType': ProcessNode },
      publicInfo: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDataauthorizationDataEntityResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 数据对象ID
  dataId?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      dataId: 'data_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      dataId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryDataauthorizationDataEntityRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 数据ID
  dataId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      dataId: 'data_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      dataId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryDataauthorizationDataEntityResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 数据目录详细信息
  dataEntity?: DataEntity;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      dataEntity: 'data_entity',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      dataEntity: DataEntity,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateDataauthorizationPublicKeyRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 公钥列表
  publicKeys: PublicKey[];
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      publicKeys: 'public_keys',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      publicKeys: { 'type': 'array', 'itemType': PublicKey },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateDataauthorizationPublicKeyResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDataauthorizationPublicKeyRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 生成公钥时的关联关系
  publicKeyRelations: PublicKeyRelation[];
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      publicKeyRelations: 'public_key_relations',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      publicKeyRelations: { 'type': 'array', 'itemType': PublicKeyRelation },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDataauthorizationPublicKeyResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 公钥列表
  publicKeys?: PublicKey[];
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      publicKeys: 'public_keys',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      publicKeys: { 'type': 'array', 'itemType': PublicKey },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class OpenDataauthorizationAuthorizationServiceRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 租户ID
  tenantId: string;
  // 租户AK
  tenantAccessKey?: string;
  // 开通原因
  remark?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      tenantId: 'tenant_id',
      tenantAccessKey: 'tenant_access_key',
      remark: 'remark',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      tenantId: 'string',
      tenantAccessKey: 'string',
      remark: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class OpenDataauthorizationAuthorizationServiceResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 租户AK
  tenantAccessKey?: string;
  // 租户ID
  tenantId?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      tenantAccessKey: 'tenant_access_key',
      tenantId: 'tenant_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      tenantAccessKey: 'string',
      tenantId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CloseDataauthorizationAuthorizationServiceRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 租户ID
  tenantId: string;
  // 关闭服务原因
  remark?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      tenantId: 'tenant_id',
      remark: 'remark',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      tenantId: 'string',
      remark: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CloseDataauthorizationAuthorizationServiceResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyDataauthorizationAuthorizationRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 申请人ID
  applicantId: string;
  // 1592877833149
  applicantTime: number;
  // 申请ID，业务系统唯一
  bizUid: string;
  // 申请原因
  comment: string;
  // 数据ID
  dataId: string;
  // 扩展参数
  extensionInfo?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      applicantId: 'applicant_id',
      applicantTime: 'applicant_time',
      bizUid: 'biz_uid',
      comment: 'comment',
      dataId: 'data_id',
      extensionInfo: 'extension_info',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      applicantId: 'string',
      applicantTime: 'number',
      bizUid: 'string',
      comment: 'string',
      dataId: 'string',
      extensionInfo: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyDataauthorizationAuthorizationResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 申请处理结果
  processResult?: ProcessResult;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      processResult: 'process_result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      processResult: ProcessResult,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ExecDataauthorizationProcessRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 审批操作意见
  comment: string;
  // 扩展参数
  extensionInfo?: string;
  // 新节点ID列表
  forwardNodeIds?: string[];
  // 审批操作结果
  operateResult: string;
  // 审批操作时间
  operateTime: number;
  // 审批操作人ID
  operatorId: string;
  // 流程ID
  processId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      comment: 'comment',
      extensionInfo: 'extension_info',
      forwardNodeIds: 'forward_node_ids',
      operateResult: 'operate_result',
      operateTime: 'operate_time',
      operatorId: 'operator_id',
      processId: 'process_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      comment: 'string',
      extensionInfo: 'string',
      forwardNodeIds: { 'type': 'array', 'itemType': 'string' },
      operateResult: 'string',
      operateTime: 'number',
      operatorId: 'string',
      processId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ExecDataauthorizationProcessResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CancelDataauthorizationAuthorizationRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 权限凭证
  authorityCert: string;
  // 操作人ID
  operatorId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      authorityCert: 'authority_cert',
      operatorId: 'operator_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      authorityCert: 'string',
      operatorId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CancelDataauthorizationAuthorizationResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CheckDataauthorizationAuthorizationRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 权限凭证
  authorityCert: string;
  // 数据ID
  dataId: string;
  // 参与方ID
  participantId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      authorityCert: 'authority_cert',
      dataId: 'data_id',
      participantId: 'participant_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      authorityCert: 'string',
      dataId: 'string',
      participantId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CheckDataauthorizationAuthorizationResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 是否有权限
  authority?: boolean;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      authority: 'authority',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      authority: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryDataauthorizationProcessRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 流程ID
  processId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      processId: 'process_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      processId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryDataauthorizationProcessResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 流程详细信息
  processInfo?: ProcessInfo;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      processInfo: 'process_info',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      processInfo: ProcessInfo,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SendDataauthorizationDepositDataRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 通知人列表
  notificationIds?: string[];
  // 数据发送人
  senderId?: string;
  // 存证交易内容
  txData: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      notificationIds: 'notification_ids',
      senderId: 'sender_id',
      txData: 'tx_data',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      notificationIds: { 'type': 'array', 'itemType': 'string' },
      senderId: 'string',
      txData: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SendDataauthorizationDepositDataResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 存证交易hash
  txHash?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      txHash: 'tx_hash',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      txHash: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryDataauthorizationDepositDataRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 存证交易hash
  txHash: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      txHash: 'tx_hash',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      txHash: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryDataauthorizationDepositDataResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 存证交易内容
  txData?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      txData: 'tx_data',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      txData: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ResumeDataauthorizationAuthorizationRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 权限凭证
  authorityCert: string;
  // 操作人ID
  operatorId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      authorityCert: 'authority_cert',
      operatorId: 'operator_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      authorityCert: 'string',
      operatorId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ResumeDataauthorizationAuthorizationResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateDataauthorizationDataEntityRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 数据类别
  category: string;
  // 数据ID
  dataId: string;
  // 数据模型ID
  dataModelId?: string;
  // 扩展参数
  extensionInfo?: string;
  // 数据名称
  name: string;
  // 数据所有者ID
  ownerId: string;
  // 流程模版
  processTemplate?: ProcessNode[];
  // DID doc里的公开信息
  publicInfo?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      category: 'category',
      dataId: 'data_id',
      dataModelId: 'data_model_id',
      extensionInfo: 'extension_info',
      name: 'name',
      ownerId: 'owner_id',
      processTemplate: 'process_template',
      publicInfo: 'public_info',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      category: 'string',
      dataId: 'string',
      dataModelId: 'string',
      extensionInfo: 'string',
      name: 'string',
      ownerId: 'string',
      processTemplate: { 'type': 'array', 'itemType': ProcessNode },
      publicInfo: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateDataauthorizationDataEntityResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteDataauthorizationDataEntityRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 数据ID
  dataId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      dataId: 'data_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      dataId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteDataauthorizationDataEntityResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDataauthorizationCustomParticipantRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 区块链ID
  blockchainId?: string;
  // 扩展参数
  extensionInfo?: string;
  // 参与方名字
  name: string;
  // 服务地址
  notificationService?: string;
  // 参与方ID，全局唯一
  participantId: string;
  // 公钥
  publicKey: string;
  // 恢复公钥
  recoverKey: string;
  // 参与方角色列表
  role: string[];
  // 信用代码，证件号等
  creditNumber?: string;
  // 空间ID
  spaceId?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      blockchainId: 'blockchain_id',
      extensionInfo: 'extension_info',
      name: 'name',
      notificationService: 'notification_service',
      participantId: 'participant_id',
      publicKey: 'public_key',
      recoverKey: 'recover_key',
      role: 'role',
      creditNumber: 'credit_number',
      spaceId: 'space_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      blockchainId: 'string',
      extensionInfo: 'string',
      name: 'string',
      notificationService: 'string',
      participantId: 'string',
      publicKey: 'string',
      recoverKey: 'string',
      role: { 'type': 'array', 'itemType': 'string' },
      creditNumber: 'string',
      spaceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDataauthorizationCustomParticipantResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 参与方ID
  participantId?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      participantId: 'participant_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      participantId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDataauthorizationCustomDataRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 区块链ID
  blockchainId: string;
  // 数据对象类别
  category: string;
  // 数据对象ID，全局唯一
  dataId: string;
  // 扩展参数
  extensionInfo?: string;
  // 数据对象名字
  name: string;
  // 数据所有者ID
  ownerId: string;
  // 流程审批模版
  processTemplate?: ProcessNode[];
  // 带签名信息的参数信息
  parameters: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      blockchainId: 'blockchain_id',
      category: 'category',
      dataId: 'data_id',
      extensionInfo: 'extension_info',
      name: 'name',
      ownerId: 'owner_id',
      processTemplate: 'process_template',
      parameters: 'parameters',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      blockchainId: 'string',
      category: 'string',
      dataId: 'string',
      extensionInfo: 'string',
      name: 'string',
      ownerId: 'string',
      processTemplate: { 'type': 'array', 'itemType': ProcessNode },
      parameters: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDataauthorizationCustomDataResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 数据对象ID
  dataId?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      dataId: 'data_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      dataId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyDataauthorizationAuthorizationWithsignatureRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 申请ID
  bizUid: string;
  // 区块链ID
  blockchainId: string;
  // 带签名的参数信息
  parameters: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizUid: 'biz_uid',
      blockchainId: 'blockchain_id',
      parameters: 'parameters',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizUid: 'string',
      blockchainId: 'string',
      parameters: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyDataauthorizationAuthorizationWithsignatureResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 操作结果
  processResult?: ProcessResult;
  // 权限凭证
  authorityCert?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      processResult: 'process_result',
      authorityCert: 'authority_cert',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      processResult: ProcessResult,
      authorityCert: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ExecDataauthorizationProcessWithsignatureRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 区块链ID
  blockchainId: string;
  // 带签名的参数信息
  parameters: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      blockchainId: 'blockchain_id',
      parameters: 'parameters',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      blockchainId: 'string',
      parameters: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ExecDataauthorizationProcessWithsignatureResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 流程处理结果
  processResult?: ProcessResult;
  // 权限凭证
  authorityCert?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      processResult: 'process_result',
      authorityCert: 'authority_cert',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      processResult: ProcessResult,
      authorityCert: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDataauthorizationDataModelRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 业务系统唯一标示
  bizUid: string;
  // 数据模型描述
  description?: string;
  // 模型字段详细信息
  fieldDetail: string;
  // 数据模型业务ID
  modelBizId?: string;
  // 数据模型名称
  name: string;
  // 空间ID
  spaceId?: string;
  // 提交人ID
  submitterId?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizUid: 'biz_uid',
      description: 'description',
      fieldDetail: 'field_detail',
      modelBizId: 'model_biz_id',
      name: 'name',
      spaceId: 'space_id',
      submitterId: 'submitter_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizUid: 'string',
      description: 'string',
      fieldDetail: 'string',
      modelBizId: 'string',
      name: 'string',
      spaceId: 'string',
      submitterId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDataauthorizationDataModelResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 数据模型ID
  dataModelId?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      dataModelId: 'data_model_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      dataModelId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateDataauthorizationDataModelRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 数据模型ID
  dataModelId: string;
  // 数据模型描述
  description?: string;
  // 模型字段详细信息
  fieldDetail: string;
  // 模型业务ID
  modelBizId?: string;
  // 数据模型名称
  name: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      dataModelId: 'data_model_id',
      description: 'description',
      fieldDetail: 'field_detail',
      modelBizId: 'model_biz_id',
      name: 'name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      dataModelId: 'string',
      description: 'string',
      fieldDetail: 'string',
      modelBizId: 'string',
      name: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateDataauthorizationDataModelResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteDataauthorizationDataModelRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 数据模型ID
  dataModelId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      dataModelId: 'data_model_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      dataModelId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteDataauthorizationDataModelResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDataauthorizationParticipantPageRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 信用代码编号
  creditNumber?: string;
  // 参与方名字
  name?: string;
  // 页码
  pageNum: number;
  // 每页数量
  pageSize: number;
  // 角色
  role?: string;
  // 空间ID
  spaceId: string;
  // 账户名称
  account?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      creditNumber: 'credit_number',
      name: 'name',
      pageNum: 'page_num',
      pageSize: 'page_size',
      role: 'role',
      spaceId: 'space_id',
      account: 'account',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      creditNumber: 'string',
      name: 'string',
      pageNum: 'number',
      pageSize: 'number',
      role: 'string',
      spaceId: 'string',
      account: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDataauthorizationParticipantPageResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 参与方列表
  data?: Participant[];
  // 是否有下一页
  hasNextPage?: boolean;
  // 是否有上一页
  hasPreviousPage?: boolean;
  // 页码
  pageNum?: number;
  // 每页数量
  pageSize?: number;
  // 数据总量
  total?: number;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      data: 'data',
      hasNextPage: 'has_next_page',
      hasPreviousPage: 'has_previous_page',
      pageNum: 'page_num',
      pageSize: 'page_size',
      total: 'total',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      data: { 'type': 'array', 'itemType': Participant },
      hasNextPage: 'boolean',
      hasPreviousPage: 'boolean',
      pageNum: 'number',
      pageSize: 'number',
      total: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryDataauthorizationDataModelRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 数据模型ID
  dataModelId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      dataModelId: 'data_model_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      dataModelId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryDataauthorizationDataModelResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 数据模型详细信息
  dataModel?: DataModel;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      dataModel: 'data_model',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      dataModel: DataModel,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDataauthorizationDatamodelPageRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 模型业务ID
  modelBizId?: string;
  // 模型名称
  modelName?: string;
  // 页码
  pageNum: number;
  // 每页大小
  pageSize: number;
  // 空间ID
  spaceId: string;
  // 提交人名字
  submitterName?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      modelBizId: 'model_biz_id',
      modelName: 'model_name',
      pageNum: 'page_num',
      pageSize: 'page_size',
      spaceId: 'space_id',
      submitterName: 'submitter_name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      modelBizId: 'string',
      modelName: 'string',
      pageNum: 'number',
      pageSize: 'number',
      spaceId: 'string',
      submitterName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDataauthorizationDatamodelPageResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 数据模型列表
  data?: DataModel[];
  // 是否有下一页
  hasNextPage?: boolean;
  // 是否有上一页
  hasPreviousPage?: boolean;
  // 页码
  pageNum?: number;
  // 每页大小
  pageSize?: number;
  // 数据总量
  total?: number;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      data: 'data',
      hasNextPage: 'has_next_page',
      hasPreviousPage: 'has_previous_page',
      pageNum: 'page_num',
      pageSize: 'page_size',
      total: 'total',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      data: { 'type': 'array', 'itemType': DataModel },
      hasNextPage: 'boolean',
      hasPreviousPage: 'boolean',
      pageNum: 'number',
      pageSize: 'number',
      total: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDataauthorizationAvailableDatamodelRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 参与方DID
  participantId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      participantId: 'participant_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      participantId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDataauthorizationAvailableDatamodelResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 数据模型列表
  dataModels?: DataModel[];
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      dataModels: 'data_models',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      dataModels: { 'type': 'array', 'itemType': DataModel },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDataauthorizationDataentityPageRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 授权状态
  authStatus?: string;
  // 模型名称
  modelName?: string;
  // 页码
  pageNum: number;
  // 每页大小
  pageSize: number;
  // 参与方DID
  participantId: string;
  // 数据模型业务ID
  modelBizId?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      authStatus: 'auth_status',
      modelName: 'model_name',
      pageNum: 'page_num',
      pageSize: 'page_size',
      participantId: 'participant_id',
      modelBizId: 'model_biz_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      authStatus: 'string',
      modelName: 'string',
      pageNum: 'number',
      pageSize: 'number',
      participantId: 'string',
      modelBizId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDataauthorizationDataentityPageResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 分页数据列表
  data?: ListDataEntityResult[];
  // 是否有下一页
  hasNextPage?: boolean;
  // 是否有上一页
  hasPreviousPage?: boolean;
  // 页码
  pageNum?: number;
  // 每页大小
  pageSize?: number;
  // 数据总量
  total?: number;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      data: 'data',
      hasNextPage: 'has_next_page',
      hasPreviousPage: 'has_previous_page',
      pageNum: 'page_num',
      pageSize: 'page_size',
      total: 'total',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      data: { 'type': 'array', 'itemType': ListDataEntityResult },
      hasNextPage: 'boolean',
      hasPreviousPage: 'boolean',
      pageNum: 'number',
      pageSize: 'number',
      total: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDataauthorizationDirectAuthorizationRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 业务UUID,业务系统唯一标示
  bizUid: string;
  // 直接授权原因
  comment: string;
  // 数据ID
  dataId: string;
  // 过期时间
  expire: number;
  // 扩展参数
  extensionInfo?: string;
  // 授权者ID
  issuerId: string;
  // 被授予者ID
  subjectId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizUid: 'biz_uid',
      comment: 'comment',
      dataId: 'data_id',
      expire: 'expire',
      extensionInfo: 'extension_info',
      issuerId: 'issuer_id',
      subjectId: 'subject_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizUid: 'string',
      comment: 'string',
      dataId: 'string',
      expire: 'number',
      extensionInfo: 'string',
      issuerId: 'string',
      subjectId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDataauthorizationDirectAuthorizationResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 权限凭证
  authorityCert?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      authorityCert: 'authority_cert',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      authorityCert: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDataauthorizationAuthorizationPageRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 授权时间终点
  endTime?: number;
  // 授权人ID
  issuerId?: string;
  // 授权人名字
  issuerName?: string;
  // 页码
  pageNum: number;
  // 每页大小
  pageSize: number;
  // 空间ID
  spaceId: string;
  // 授权时间起点
  startIme?: number;
  // 被授权人ID
  subjectId?: string;
  // 被授权人名字
  subjectName?: string;
  // 数据资产ID
  dataId?: string;
  // 数据模型ID
  dataModelId?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      endTime: 'end_time',
      issuerId: 'issuer_id',
      issuerName: 'issuer_name',
      pageNum: 'page_num',
      pageSize: 'page_size',
      spaceId: 'space_id',
      startIme: 'start_ime',
      subjectId: 'subject_id',
      subjectName: 'subject_name',
      dataId: 'data_id',
      dataModelId: 'data_model_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      endTime: 'number',
      issuerId: 'string',
      issuerName: 'string',
      pageNum: 'number',
      pageSize: 'number',
      spaceId: 'string',
      startIme: 'number',
      subjectId: 'string',
      subjectName: 'string',
      dataId: 'string',
      dataModelId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDataauthorizationAuthorizationPageResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 授权明细列表
  data?: AuthorizationDetail[];
  // 是否有下
  hasNextPage?: boolean;
  // 是否有上一页
  hasPreviousPage?: boolean;
  // 页码
  pageNum?: number;
  // 每页大小
  pageSize?: number;
  // 数据总量
  total?: number;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      data: 'data',
      hasNextPage: 'has_next_page',
      hasPreviousPage: 'has_previous_page',
      pageNum: 'page_num',
      pageSize: 'page_size',
      total: 'total',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      data: { 'type': 'array', 'itemType': AuthorizationDetail },
      hasNextPage: 'boolean',
      hasPreviousPage: 'boolean',
      pageNum: 'number',
      pageSize: 'number',
      total: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDataauthorizationAuthparticipantPageRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 数据资产ID
  dataId: string;
  // 页码
  pageNum: number;
  // 每页大小
  pageSize: number;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      dataId: 'data_id',
      pageNum: 'page_num',
      pageSize: 'page_size',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      dataId: 'string',
      pageNum: 'number',
      pageSize: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDataauthorizationAuthparticipantPageResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 授权列表
  data?: AuthorizationDetail[];
  // 是否有下一页
  hasNextPage?: boolean;
  // 是否有上一页
  hasPreviousPage?: boolean;
  // 页码
  pageNum?: number;
  // 每页大小
  pageSize?: number;
  // 数据总量
  total?: number;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      data: 'data',
      hasNextPage: 'has_next_page',
      hasPreviousPage: 'has_previous_page',
      pageNum: 'page_num',
      pageSize: 'page_size',
      total: 'total',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      data: { 'type': 'array', 'itemType': AuthorizationDetail },
      hasNextPage: 'boolean',
      hasPreviousPage: 'boolean',
      pageNum: 'number',
      pageSize: 'number',
      total: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDataauthorizationDataAssertRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 业务系统数据唯一标示
  bizUid: string;
  // 区块链ID
  blockchainId?: string;
  // 资产类别
  category: string;
  // 数据模型ID
  dataModelId?: string;
  // 扩展参数
  extensionInfo?: string;
  // 资产名称
  name: string;
  // 所有者ID
  ownerId: string;
  // 审批流程模版
  processTemplate?: ProcessNode[];
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizUid: 'biz_uid',
      blockchainId: 'blockchain_id',
      category: 'category',
      dataModelId: 'data_model_id',
      extensionInfo: 'extension_info',
      name: 'name',
      ownerId: 'owner_id',
      processTemplate: 'process_template',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizUid: 'string',
      blockchainId: 'string',
      category: 'string',
      dataModelId: 'string',
      extensionInfo: 'string',
      name: 'string',
      ownerId: 'string',
      processTemplate: { 'type': 'array', 'itemType': ProcessNode },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDataauthorizationDataAssertResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 数据资产ID
  dataId?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      dataId: 'data_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      dataId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateDataauthorizationDataAssertRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 数据资产类别
  category: string;
  // 数据资产ID
  dataId: string;
  // 扩展参数
  extensionInfo?: string;
  // 数据资产名称
  name: string;
  // 审批流程模版
  processTemplate?: ProcessNode[];
  // 数据模型ID
  dataModelId?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      category: 'category',
      dataId: 'data_id',
      extensionInfo: 'extension_info',
      name: 'name',
      processTemplate: 'process_template',
      dataModelId: 'data_model_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      category: 'string',
      dataId: 'string',
      extensionInfo: 'string',
      name: 'string',
      processTemplate: { 'type': 'array', 'itemType': ProcessNode },
      dataModelId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateDataauthorizationDataAssertResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteDataauthorizationDataAssertRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 数据资产ID
  dataId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      dataId: 'data_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      dataId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteDataauthorizationDataAssertResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDataauthorizationAgentAuthorizationRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 业务UUID
  bizUid: string;
  // 授权原因
  comment: string;
  // 数据资产ID
  dataId: string;
  // 过期时间
  expire: number;
  // 扩展参数
  extensionInfo?: string;
  // 授权规则
  rule?: AuthorizationRule;
  // 被授权人ID
  subjectId: string;
  // 申请代理授权的参与方DID
  applicantId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizUid: 'biz_uid',
      comment: 'comment',
      dataId: 'data_id',
      expire: 'expire',
      extensionInfo: 'extension_info',
      rule: 'rule',
      subjectId: 'subject_id',
      applicantId: 'applicant_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizUid: 'string',
      comment: 'string',
      dataId: 'string',
      expire: 'number',
      extensionInfo: 'string',
      rule: AuthorizationRule,
      subjectId: 'string',
      applicantId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDataauthorizationAgentAuthorizationResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 授权凭证
  authorityCert?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      authorityCert: 'authority_cert',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      authorityCert: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDataauthorizationAuthorityCertRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 授权凭证ID列表
  authorityCertIds: string[];
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      authorityCertIds: 'authority_cert_ids',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      authorityCertIds: { 'type': 'array', 'itemType': 'string' },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListDataauthorizationAuthorityCertResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 授权详情列表
  data?: AuthorizationDetail[];
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      data: 'data',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      data: { 'type': 'array', 'itemType': AuthorizationDetail },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SaveDataauthorizationDepositDataRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 存证内容
  txData: string;
  // 发送数据上链的DID
  senderId?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      txData: 'tx_data',
      senderId: 'sender_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      txData: 'string',
      senderId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SaveDataauthorizationDepositDataResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 交易HASH
  txHash?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      txHash: 'tx_hash',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      txHash: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDataauthorizationSyncDataRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 枚举值：
  // DATAENTITY：数据目录
  // PARTICIPANT：参与方
  type: string;
  // 接收同步数据的DID
  receiverId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      type: 'type',
      receiverId: 'receiver_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      type: 'string',
      receiverId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDataauthorizationSyncDataResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 待同步的数据总量
  total?: number;
  // 最后一条数据的创建时间
  lastCreateTime?: number;
  // 任务ID
  taskId?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      total: 'total',
      lastCreateTime: 'last_create_time',
      taskId: 'task_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      total: 'number',
      lastCreateTime: 'number',
      taskId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryTraceabilityTxCheckRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 接入业务标识，一接入方有条链或者必须区分统计业务类型情况下必填。
  bizType?: string;
  // 溯源信息内容校验码用sha256hex(内容) 计算出其正确性。
  payloadHash?: string;
  // 区块链接入来源
  source: string;
  // 区块查证信息透传
  subTitle?: string;
  // 透传到查证结果的标题信息
  title?: string;
  // 要查询的区块链交易信息。
  txHash: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizType: 'biz_type',
      payloadHash: 'payload_hash',
      source: 'source',
      subTitle: 'sub_title',
      title: 'title',
      txHash: 'tx_hash',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizType: 'string',
      payloadHash: 'string',
      source: 'string',
      subTitle: 'string',
      title: 'string',
      txHash: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryTraceabilityTxCheckResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 溯源项列表
  items?: Item[];
  // 提示信息
  message?: string;
  // 展现信息的副标题
  subTitle?: string;
  // 显示查证结果的标题
  title?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      items: 'items',
      message: 'message',
      subTitle: 'sub_title',
      title: 'title',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      items: { 'type': 'array', 'itemType': Item },
      message: 'string',
      subTitle: 'string',
      title: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryTraceabilityBlockchainInfosRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 区块链id
  bizid: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizid: 'bizid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizid: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryTraceabilityBlockchainInfosResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 异常的节点数
  abnormalNodes?: number;
  // 区块链id
  bizid?: string;
  // 区块高度
  blockHeight?: number;
  // 创建时间
  createTime?: string;
  // 链的状态，是否正常
  isNormal?: boolean;
  // 是否为管理员权限
  isRole?: boolean;
  // 链的名字
  name?: string;
  // 节点信息
  nodeInfoList?: NodeInfo[];
  // 节点数
  nodeNumber?: number;
  // 链上交易数
  transactionSum?: number;
  // 链的版本
  version?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      abnormalNodes: 'abnormal_nodes',
      bizid: 'bizid',
      blockHeight: 'block_height',
      createTime: 'create_time',
      isNormal: 'is_normal',
      isRole: 'is_role',
      name: 'name',
      nodeInfoList: 'node_info_list',
      nodeNumber: 'node_number',
      transactionSum: 'transaction_sum',
      version: 'version',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      abnormalNodes: 'number',
      bizid: 'string',
      blockHeight: 'number',
      createTime: 'string',
      isNormal: 'boolean',
      isRole: 'boolean',
      name: 'string',
      nodeInfoList: { 'type': 'array', 'itemType': NodeInfo },
      nodeNumber: 'number',
      transactionSum: 'number',
      version: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SaveBlockchainBrowserPrivilegeRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 链id
  bizid: string;
  // ORGJC1CN
  tenantid: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizid: 'bizid',
      tenantid: 'tenantid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizid: 'string',
      tenantid: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SaveBlockchainBrowserPrivilegeResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryBlockchainBrowserPrivilegeRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 链id
  bizid: string;
  // 租户id
  tenantid: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizid: 'bizid',
      tenantid: 'tenantid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizid: 'string',
      tenantid: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryBlockchainBrowserPrivilegeResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteBlockchainBrowserPrivilegeRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 链id
  bizid: string;
  // ORGJC1CN
  tenantid: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizid: 'bizid',
      tenantid: 'tenantid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizid: 'string',
      tenantid: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteBlockchainBrowserPrivilegeResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetBlockchainMiniprogramRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 蚂蚁区块链的唯一链id
  bizid: string;
  // 蚂蚁区块链的链上交易hash值
  hash: string;
  // 原生存证数据展示自定义合约地址
  contractId?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizid: 'bizid',
      hash: 'hash',
      contractId: 'contract_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizid: 'string',
      hash: 'string',
      contractId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetBlockchainMiniprogramResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 交易二维码二进制内容的Base64编码
  qrCodeDownloadUrl?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      qrCodeDownloadUrl: 'qr_code_download_url',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      qrCodeDownloadUrl: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AddBlockchainMiniprogramRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 蚂蚁区块链的唯一链id
  bizid: string;
  // 授权查看权限的支付宝电话号码集合
  phoneNumbers: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizid: 'bizid',
      phoneNumbers: 'phone_numbers',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizid: 'string',
      phoneNumbers: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AddBlockchainMiniprogramResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 批量添加权限成功与否
  status?: number;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      status: 'status',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      status: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryBrowserTransactionStatisticRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // bizid
  bizid: string;
  // 截止时间
  endTime: number;
  // 开始时间
  startTime: number;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizid: 'bizid',
      endTime: 'end_time',
      startTime: 'start_time',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizid: 'string',
      endTime: 'number',
      startTime: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryBrowserTransactionStatisticResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // result
  result?: BlockchainBrowserTransactionStatistic[];
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: { 'type': 'array', 'itemType': BlockchainBrowserTransactionStatistic },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryBrowserBlockLatestRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // bizid
  bizid: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizid: 'bizid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizid: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryBrowserBlockLatestResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // result
  result?: BlockchainBrowserLatestBlock[];
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: { 'type': 'array', 'itemType': BlockchainBrowserLatestBlock },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryBrowserTransactionLatestRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // bizid
  bizid: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizid: 'bizid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizid: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryBrowserTransactionLatestResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // result
  result?: BlockchainBrowserLatestTransaction[];
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: { 'type': 'array', 'itemType': BlockchainBrowserLatestTransaction },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryBrowserBlockRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // bizid
  bizid: string;
  // height
  height: number;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizid: 'bizid',
      height: 'height',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizid: 'string',
      height: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryBrowserBlockResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // BlockchainBrowserTransaction
  result?: BlockchainBrowserBlock;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: BlockchainBrowserBlock,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryBrowserTransactionRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // bizid
  bizid: string;
  // hash
  hash: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizid: 'bizid',
      hash: 'hash',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizid: 'string',
      hash: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryBrowserTransactionResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // result
  result?: BlockchainBrowserTransaction;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: BlockchainBrowserTransaction,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryBrowserTransactionReceiptRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // bizid
  bizid: string;
  // hash
  hash: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizid: 'bizid',
      hash: 'hash',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizid: 'string',
      hash: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryBrowserTransactionReceiptResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // BlockchainBrowserTransactionReceipt
  result?: BlockchainBrowserTransactionReceipt;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: BlockchainBrowserTransactionReceipt,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryBrowserNodeOwnerRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // bizid
  bizid: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizid: 'bizid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizid: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryBrowserNodeOwnerResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // result
  result?: BlockchainBrowserNodeOwner[];
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: { 'type': 'array', 'itemType': BlockchainBrowserNodeOwner },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteBlockchainMiniprogramRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 蚂蚁区块链的唯一链id
  bizid: string;
  // 取消查看权限的支付宝电话号码集合
  phoneNumbers: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizid: 'bizid',
      phoneNumbers: 'phone_numbers',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizid: 'string',
      phoneNumbers: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteBlockchainMiniprogramResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 批量取消权限成功与否
  status?: number;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      status: 'status',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      status: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryBlockchainMiniprogramRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 蚂蚁区块链的唯一链id
  bizid: string;
  // 查看权限的支付宝电话号码
  phoneNumber: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizid: 'bizid',
      phoneNumber: 'phone_number',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizid: 'string',
      phoneNumber: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryBlockchainMiniprogramResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 权限成功与否
  status?: number;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      status: 'status',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      status: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryCreditTransferApplyRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 货主分布式数字身份
  consignorDid: string;
  // 业务发起方分布式数字身
  platformDid: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      consignorDid: 'consignor_did',
      platformDid: 'platform_did',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      consignorDid: 'string',
      platformDid: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryCreditTransferApplyResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 查询结果信息，失败时为失败原因信息
  queryMsg?: string;
  // 查询结果状态   
  // -1:注册失败， 0:注册中， 1:注册完成
  status?: number;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      queryMsg: 'query_msg',
      status: 'status',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      queryMsg: 'string',
      status: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryCreditTransferBalanceRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 货主分布式数字身份
  consignorDid: string;
  // 需发行信用流转的运费，运费最多精确到小数点后2位
  freight: string;
  // 业务发起方分布式数字身
  platformDid: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      consignorDid: 'consignor_did',
      freight: 'freight',
      platformDid: 'platform_did',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      consignorDid: 'string',
      freight: 'string',
      platformDid: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryCreditTransferBalanceResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 是否有信用流转额度
  hasBalance?: boolean;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      hasBalance: 'has_balance',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      hasBalance: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryCreditTransferIssuebyidRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 信用流转发行批次号，与issueId信用流转发行结果查询号不可同时为空
  batchId?: string;
  // 货主分布式数字身份
  consignorDid: string;
  // 信用流转发行凭证Id，与batchId信用流转发行批次号不可同时为空
  issueId?: string;
  // 是否只返回已发行凭证信息
  issueOnly: boolean;
  // 页数 从1开始
  pageNum: number;
  // 每页显示数量
  pageSize: number;
  // 业务发起方分布式数字身份
  platformDid: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      batchId: 'batch_id',
      consignorDid: 'consignor_did',
      issueId: 'issue_id',
      issueOnly: 'issue_only',
      pageNum: 'page_num',
      pageSize: 'page_size',
      platformDid: 'platform_did',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      batchId: 'string',
      consignorDid: 'string',
      issueId: 'string',
      issueOnly: 'boolean',
      pageNum: 'number',
      pageSize: 'number',
      platformDid: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryCreditTransferIssuebyidResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 凭证所属did
  did?: string;
  // 凭证列表
  issueIds?: IssueInfo[];
  // 页数 从1开始
  pageNum?: number;
  // 每页显示数量
  pageSize?: number;
  // 数据总量
  totalCount?: number;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      did: 'did',
      issueIds: 'issue_ids',
      pageNum: 'page_num',
      pageSize: 'page_size',
      totalCount: 'total_count',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      did: 'string',
      issueIds: { 'type': 'array', 'itemType': IssueInfo },
      pageNum: 'number',
      pageSize: 'number',
      totalCount: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryCreditTransferIssuebytimeRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 需查询对象的分布式数字身份
  did: string;
  // 查询截止时间
  endDate: string;
  // 是否只返回已发行凭证信息
  issueOnle: boolean;
  // 页数 从1开始
  pageNum: string;
  // 每页显示数量
  pageSize: string;
  // 业务发起方分布式数字身份
  platformDid: string;
  // 查询起始时间
  startDate: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      did: 'did',
      endDate: 'end_date',
      issueOnle: 'issue_onle',
      pageNum: 'page_num',
      pageSize: 'page_size',
      platformDid: 'platform_did',
      startDate: 'start_date',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      did: 'string',
      endDate: 'string',
      issueOnle: 'boolean',
      pageNum: 'string',
      pageSize: 'string',
      platformDid: 'string',
      startDate: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryCreditTransferIssuebytimeResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  //  凭证所属did
  did?: string;
  // 凭证列表
  issueIds?: IssueInfo[];
  // 页数 从1开始
  pageNum?: number;
  // 每页显示数量
  pageSize?: number;
  // 数据总量
  totalCount?: number;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      did: 'did',
      issueIds: 'issue_ids',
      pageNum: 'page_num',
      pageSize: 'page_size',
      totalCount: 'total_count',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      did: 'string',
      issueIds: { 'type': 'array', 'itemType': IssueInfo },
      pageNum: 'number',
      pageSize: 'number',
      totalCount: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryCreditTransferStatementRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 需查询对象的分布式数字身份
  did: string;
  // 查询截止时间
  endDate: string;
  // 页数 从1开始
  pageNum: number;
  // 每页显示数量
  pageSize: number;
  // 业务发起方分布式数字身份
  platformDid: string;
  // 查询起始时间
  startDate: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      did: 'did',
      endDate: 'end_date',
      pageNum: 'page_num',
      pageSize: 'page_size',
      platformDid: 'platform_did',
      startDate: 'start_date',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      did: 'string',
      endDate: 'string',
      pageNum: 'number',
      pageSize: 'number',
      platformDid: 'string',
      startDate: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryCreditTransferStatementResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 需查询对象的分布式数字身份
  did?: string;
  // 页数 从1开始
  pageNum?: number;
  // 每页显示数量
  pageSize?: number;
  // 流水列表
  statementInfos?: CreditTransferStatementInfo[];
  // 数据总量
  totalCount?: number;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      did: 'did',
      pageNum: 'page_num',
      pageSize: 'page_size',
      statementInfos: 'statement_infos',
      totalCount: 'total_count',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      did: 'string',
      pageNum: 'number',
      pageSize: 'number',
      statementInfos: { 'type': 'array', 'itemType': CreditTransferStatementInfo },
      totalCount: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CallbackCreditTransferRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 回调消息内容
  msgData: string;
  // 回调消息方法类型
  msgMethod: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      msgData: 'msg_data',
      msgMethod: 'msg_method',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      msgData: 'string',
      msgMethod: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CallbackCreditTransferResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 是否已接收
  isRecv?: boolean;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      isRecv: 'is_recv',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      isRecv: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class PushAuthUserVcRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 长度不超过64字符的业务唯一ID，用于对一个业务流的追踪。
  bizId: string;
  // 具体的业务类型，长度不超过32字符，具体需要与DIS小组业务对接商定新增的业务类型。
  bizType: string;
  // 推送的业务方自己所属的did，也就是颁发此声明的 issuer
  did: string;
  // 使用did字段的密钥进行整体传送内容（不包括此signature字段）签名的结果，具体签名规则：
  // 1. Map<String,String> params 的key按照字典序排序
  // 2. 拼接为 key1=value1&key2=value2&key3=value3 ...
  // 3. 计算sha256(第2步结果)得到hash
  // 4. 使用hash 和 签名的did请求DIS的签名接口进行签名：baas.account.signature.start，https://apdevcenter.cloud.alipay.com/console/openapi/product/BLOCKCHAIN/apis/baas.account.signature.start/versions/1.0/document?
  signature: string;
  // 通过DIS颁发的声明详细信息，其中content的claim字段是和业务相关的实际声明内容。
  vcContent: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizId: 'biz_id',
      bizType: 'biz_type',
      did: 'did',
      signature: 'signature',
      vcContent: 'vc_content',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizId: 'string',
      bizType: 'string',
      did: 'string',
      signature: 'string',
      vcContent: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class PushAuthUserVcResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 是否推送成功到DIS的C端应用
  result?: boolean;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class PushAuthClaimVcRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 长度不超过64字符的业务唯一ID，用于对一个业务流的追踪，查询等。
  bizId: string;
  // 具体的业务类型，长度不超过32字符，具体需要与DIS小组业务对接商定新增的业务类型。
  bizType: string;
  // 申请授权的具体内容，通常由业务方对接定义，在小程序展示声明详细内容给用户，用户进行确认后，授权颁发声明。
  claimContent: string;
  // 如果在相同的biz_type下，还需要针对声明claim进行细化划分，可以使用此字段。
  claimType?: string;
  // 业务方持有的did身份
  did: string;
  // 申请声明颁发后的有效期，可选参数，如果不指定则默认申请永久有效。
  expire?: number;
  // 申请目标did身份持有者，对声明进行授权颁发。
  issuerDid: string;
  // 使用did字段的密钥进行整体传送内容（不包括此signature字段）签名的结果，具体签名规则：
  // 1. Map<String,String> params 的key按照字典序排序
  // 2. 拼接为 key1=value1&key2=value2&key3=value3 ...
  // 3. 计算sha256(第2步结果)得到hash
  // 4. 使用hash 和 签名的did请求DIS的签名接口进行签名：baas.account.signature.start，https://apdevcenter.cloud.alipay.com/console/openapi/product/BLOCKCHAIN/apis/baas.account.signature.start/versions/1.0/document?
  signature: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizId: 'biz_id',
      bizType: 'biz_type',
      claimContent: 'claim_content',
      claimType: 'claim_type',
      did: 'did',
      expire: 'expire',
      issuerDid: 'issuer_did',
      signature: 'signature',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizId: 'string',
      bizType: 'string',
      claimContent: 'string',
      claimType: 'string',
      did: 'string',
      expire: 'number',
      issuerDid: 'string',
      signature: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class PushAuthClaimVcResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 是否推送成功到DIS的C端应用
  result?: boolean;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class PullAuthUserDidRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 长度不超过64字符的业务唯一ID，用于对一个业务流的追踪、查询。
  bizId: string;
  // 业务方持有的did
  did: string;
  // 使用did字段的密钥进行整体传送内容（不包括此signature字段）签名的结果，具体签名规则： 1. Map<String,String> params 的key按照字典序排序 2. 拼接为 key1=value1&key2=value2&key3=value3 ... 3. 计算sha256(第2步结果)得到hash 4. 使用hash 和 签名的did请求DIS的签名接口进行签名：baas.account.signature.start，https://apdevcenter.cloud.alipay.com/console/openapi/product/BLOCKCHAIN/apis/baas.account.signature.start/versions/1.0/document?
  signature: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizId: 'biz_id',
      did: 'did',
      signature: 'signature',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizId: 'string',
      did: 'string',
      signature: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class PullAuthUserDidResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 长度不超过64字符的业务唯一ID，用于对一个业务流的追踪，与请求中的biz_id一致方便业务方使用。
  bizId?: string;
  // 获取到关联的用户did
  userDid?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      bizId: 'biz_id',
      userDid: 'user_did',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      bizId: 'string',
      userDid: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class PullAuthClaimVcRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 长度不超过64字符的业务唯一ID，用于对一个业务流的追踪、查询。
  bizId: string;
  // 业务方持有的did
  did: string;
  // 使用did字段的密钥进行整体传送内容（不包括此signature字段）签名的结果，具体签名规则： 1. Map<String,String> params 的key按照字典序排序 2. 拼接为 key1=value1&key2=value2&key3=value3 ... 3. 计算sha256(第2步结果)得到hash 4. 使用hash 和 签名的did请求DIS的签名接口进行签名：baas.account.signature.start，https://apdevcenter.cloud.alipay.com/console/openapi/product/BLOCKCHAIN/apis/baas.account.signature.start/versions/1.0/document?
  signature: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizId: 'biz_id',
      did: 'did',
      signature: 'signature',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizId: 'string',
      did: 'string',
      signature: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class PullAuthClaimVcResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 长度不超过64字符的业务唯一ID，用于对一个业务流的追踪，与请求中的biz_id一致方便业务方使用。
  bizId?: string;
  // 具体的业务类型，长度不超过32字符，具体需要对接确定新增的业务类型。
  bizType?: string;
  // 当前声明的状态说明：
  // 0：用户未授权
  // 1：用户授权成功，此时vc_content字段会包含授权后的声明内容
  // 101：业务方发起声明claim_content中的用户三要素（姓名，电话，身份证号），与目标用户真实的三要素匹配失败
  // 
  // 其它状态码，待定义后增加。
  status?: string;
  // 申请授权的用户did
  userDid?: string;
  // 如果status的值是“1”，则此字段就是用户授权成功后的声明（vc）的完整内容。
  vcContent?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      bizId: 'biz_id',
      bizType: 'biz_type',
      status: 'status',
      userDid: 'user_did',
      vcContent: 'vc_content',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      bizId: 'string',
      bizType: 'string',
      status: 'string',
      userDid: 'string',
      vcContent: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateAuthUserDidRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 通常为业务方持有的企业did身份
  did: string;
  // 扩展用户信息字段，用于创建did特别场景，传递更多用户信息。
  extension?: string;
  // 是否实人认证，如果"T"表示已实人认证，否则未认证。
  isCertified?: string;
  // 使用did字段的密钥进行整体传送内容（不包括此signature字段）签名的结果，具体签名规则： 1. Map<String,String> params 的key按照字典序排序 2. 拼接为 key1=value1&key2=value2&key3=value3 ... 3. 计算sha256(第2步结果)得到hash 4. 使用hash 和 签名的did请求DIS的签名接口进行签名：baas.account.signature.start，https://apdevcenter.cloud.alipay.com/console/openapi/product/BLOCKCHAIN/apis/baas.account.signature.start/versions/1.0/document?
  signature?: string;
  // 业务方内部用户的id，可脱敏id，在一些id打通场景有特别用途。
  userId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      did: 'did',
      extension: 'extension',
      isCertified: 'is_certified',
      signature: 'signature',
      userId: 'user_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      did: 'string',
      extension: 'string',
      isCertified: 'string',
      signature: 'string',
      userId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateAuthUserDidResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 返回给指定用户创建的did结果，如果入参对应userId的did之前已经存在，则不会新建did，直接返回已有did。
  result?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateAuthCorporateDidRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 对企业描述的扩展字段，用于传递更多企业信息，支持业务。
  extensionInfo?: string;
  // 企业名称，通常为法定的公司实体名称
  ownerName: string;
  // 调用方体系内企业的唯一ID，作为创建DID的绑定目标，调用者需要保证其唯一性。
  ownerUid: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      extensionInfo: 'extension_info',
      ownerName: 'owner_name',
      ownerUid: 'owner_uid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      extensionInfo: 'string',
      ownerName: 'string',
      ownerUid: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateAuthCorporateDidResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 为企业创建的DID结果
  did?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      did: 'did',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      did: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class PullAuthWebpageVcRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 企业B类的唯一ID，对应的did在返回值vc_content中的subject字段
  pkId: string;
  // C类用户的唯一ID，当前为通过姓名+身份证号组合计算哈希得到user_id = sha256(name+certNo)，对应的did在返回值vc_content中的issuer字段
  userId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      pkId: 'pk_id',
      userId: 'user_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      pkId: 'string',
      userId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class PullAuthWebpageVcResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // C类用户实际授权发生的时间，GMT标准时间
  gmtAuthTime?: number;
  // 企业B类的唯一ID，对应的did在vc_content中的subject字段
  pkId?: string;
  // 当前声明的状态说明： 0：用户未授权 1：用户授权成功，此时vc_content字段会包含授权后的声明内容 ，101：信息校验失败，其他授权错误码情况待明确
  status?: string;
  // 授权的可验证声明具体类型说明，有助于未来业务区分不同授权场景。
  type?: string;
  // C类用户的唯一ID，当前为通过姓名+身份证号组合计算哈希得到user_id = sha256(name+certNo)，对应的did在vc_content中的issuer字段
  userId?: string;
  // 如果status的值是“1”，则此字段就是用户授权成功后的声明（vc）的完整内容。
  vcContent?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      gmtAuthTime: 'gmt_auth_time',
      pkId: 'pk_id',
      status: 'status',
      type: 'type',
      userId: 'user_id',
      vcContent: 'vc_content',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      gmtAuthTime: 'number',
      pkId: 'string',
      status: 'string',
      type: 'string',
      userId: 'string',
      vcContent: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class PullAuthWebpageUrlRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 实人认证使用的biz_id，长度不超过64字符的业务唯一id
  bizId: string;
  // 实人认证使用的biz_type，通常为业务方自己在阿里云实人认证控制台创建。
  bizType: string;
  // 业务方C端用户身份证信息，会进入可验证声明claim内容中。
  certNo: string;
  // 业务方可以传递的附加信息，通常跟可验证声明的claim有关，目前是可选项，将来业务复杂后，需要指定claim类型，或者附加信息内容说明.
  extension?: string;
  // 业务方C端用户姓名信息，会进入可验证声明claim内容中。
  name: string;
  // 业务方B类身份标识id，与创建的业务方B类DID（颁发可验证声明的subject目标）时baas.auth.corporate.did.create接口的入参owner_uid相同。
  pkId?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizId: 'biz_id',
      bizType: 'biz_type',
      certNo: 'cert_no',
      extension: 'extension',
      name: 'name',
      pkId: 'pk_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizId: 'string',
      bizType: 'string',
      certNo: 'string',
      extension: 'string',
      name: 'string',
      pkId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class PullAuthWebpageUrlResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 可用的H5的Url，并且已经携带授权宝侧相关的参数：token、bizId等.
  authUrl?: string;
  // 此请求业务方的C端用户的DID，在授权宝侧相当于C端用户给业务方做授权，因此C端用户是issuer，业务方的B类客户是目标subject。
  issuerDid?: string;
  // 此请求业务方B类客户的DID
  subjectDid?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      authUrl: 'auth_url',
      issuerDid: 'issuer_did',
      subjectDid: 'subject_did',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      authUrl: 'string',
      issuerDid: 'string',
      subjectDid: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartAuthVcAuthRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 长度不超过64字符的业务唯一ID，用于对一个业务流的追踪，查询等。
  bizId: string;
  // 业务类型，通常需要与授权宝服务沟通确定，业务类型可能影响此接口内部实现逻辑，长度不超过32字符。
  bizType: string;
  // 一个json的string。内容包含具体需要的声明，不同业务场景不同。
  claimContent: string;
  // 如果在相同的biz_type下，还需要针对声明claim进行细化划分，可以使用此字段。
  claimType?: string;
  // 非托管的情况下必选，业务方持有的did身份。
  did?: string;
  // 申请声明颁发后的有效期，可选参数，如果不指定则默认申请永久有效。
  expire?: number;
  // 业务方可以传递的附加信息，通常跟可验证声明的claim有关，目前是可选项，将来业务复杂后，需要指定claim类型，或者附加信息内容说明。
  extension?: string;
  // 非托管的情况下必选。
  // 使用did字段的密钥进行整体传送内容（不包括此signature字段）签名的结果，具体签名规则： 1. Map<String,String> params 的key按照字典序排序 2. 拼接为 key1=value1&key2=value2&key3=value3 ... 3. 计算sha256(第2步结果)得到hash 4. 使用hash 和 签名的did请求DIS的签名。
  signature?: string;
  // 涉及的C类用户身份信息，如果是支付宝体系内，需要提供userId，并且提供二要素信息(name，certNo)
  userInfo: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizId: 'biz_id',
      bizType: 'biz_type',
      claimContent: 'claim_content',
      claimType: 'claim_type',
      did: 'did',
      expire: 'expire',
      extension: 'extension',
      signature: 'signature',
      userInfo: 'user_info',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizId: 'string',
      bizType: 'string',
      claimContent: 'string',
      claimType: 'string',
      did: 'string',
      expire: 'number',
      extension: 'string',
      signature: 'string',
      userInfo: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartAuthVcAuthResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 输入参数的bizId返回
  bizId?: string;
  // 具体业务的类型说明，来自入参。
  bizType?: string;
  // 本次可验证声明颁发者的DID
  issuerDid?: string;
  // 可验证声明的颁发状态说明： 0：未授权 1：授权成功，此时vc_content字段会包含授权后的声明内容，其它状态码，待定义后增加。
  status?: string;
  // 本次可验证声明目标者的DID
  subjectDid?: string;
  // 可验证声明完整内容， status 为 “1” 时候非空
  vcContent?: string;
  // 可验证声明的唯一标识id，status 为 “1” 时候非空
  vcId?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      bizId: 'biz_id',
      bizType: 'biz_type',
      issuerDid: 'issuer_did',
      status: 'status',
      subjectDid: 'subject_did',
      vcContent: 'vc_content',
      vcId: 'vc_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      bizId: 'string',
      bizType: 'string',
      issuerDid: 'string',
      status: 'string',
      subjectDid: 'string',
      vcContent: 'string',
      vcId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartAuthVcShareRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 非托管的情况下必选，业务方持有的did身份。
  did?: string;
  // 在支持声明的claim字段级别分享能力时使用，可以指定哪些字段隐藏，哪些字段分享。示例中标记为”1“的是隐藏，”0“的是分享明文。
  index?: string;
  // 非托管的情况下必选。 使用did字段的密钥进行整体传送内容（不包括此signature字段）签名的结果，具体签名规则： 1. Map<String,String> params 的key按照字典序排序 2. 拼接为 key1=value1&key2=value2&key3=value3 ... 3. 计算sha256(第2步结果)得到hash 4. 使用hash 和 签名的did请求DIS的签名。
  signature?: string;
  // 分享声明的目标方DID
  targetDid: string;
  // 分享权限的目标可验证声明(VC)的ID
  vcId: string;
  // vc_id的owner，将持有的vc_id分享给目标target_did
  ownerDid: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      did: 'did',
      index: 'index',
      signature: 'signature',
      targetDid: 'target_did',
      vcId: 'vc_id',
      ownerDid: 'owner_did',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      did: 'string',
      index: 'string',
      signature: 'string',
      targetDid: 'string',
      vcId: 'string',
      ownerDid: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartAuthVcShareResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 分享可验证声明的目标方DID
  targetDid?: string;
  // 分享链上VC数据的交易hash，可用于直连区块链查询交易内容时使用。
  txHash?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      targetDid: 'target_did',
      txHash: 'tx_hash',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      targetDid: 'string',
      txHash: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryAuthVcContentRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 如果此字段为空，则默认使用当前请求租户在授权宝配置的did来进行查询(此did需授权有权限)，此外情况都需要指定目标vc_id的owner_did
  ownerDid?: string;
  // 查询目标可验证声明的ID
  vcId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      ownerDid: 'owner_did',
      vcId: 'vc_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      ownerDid: 'string',
      vcId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryAuthVcContentResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 目标查询的可验证声明的完整内容，如果有权限则返回明文内容，否则获取失败，此内容为空。
  vcContent?: string;
  // 目标可验证声明的唯一ID
  vcId?: string;
  // 当前声明的状态说明： 0：未授权 1：授权成功，-1：已吊销
  status?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      vcContent: 'vc_content',
      vcId: 'vc_id',
      status: 'status',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      vcContent: 'string',
      vcId: 'string',
      status: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateAuthUserinfoDidRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 业务类型，通常需要与授权宝服务沟通确定，业务类型可能影响此接口内部实现逻辑，长度不超过32字符。
  bizType: string;
  // 非托管的情况下必选，业务方持有的did身份。
  did?: string;
  // 业务方可以传递的附加信息，暂时未启用
  extension?: string;
  // 非托管的情况下必选。 使用did字段的密钥进行整体传送内容（不包括此signature字段）签名的结果，具体签名规则： 1. Map<String,String> params 的key按照字典序排序 2. 拼接为 key1=value1&key2=value2&key3=value3 ... 3. 计算sha256(第2步结果)得到hash 4. 使用hash 和 签名的did请求DIS的签名。
  signature?: string;
  // 目标用户的相关信息描述，用于创建DID绑定
  userInfo: string;
  // 所有需要关联的外键，外键必须以did auth key controller的did作为前缀+“sidekey:”+外键
  indexes?: string[];
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizType: 'biz_type',
      did: 'did',
      extension: 'extension',
      signature: 'signature',
      userInfo: 'user_info',
      indexes: 'indexes',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizType: 'string',
      did: 'string',
      extension: 'string',
      signature: 'string',
      userInfo: 'string',
      indexes: { 'type': 'array', 'itemType': 'string' },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateAuthUserinfoDidResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 返回给指定用户创建的did结果，如果入参对应的did之前已经存在，则不会新建did，直接返回已有did。
  result?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartAuthVcRevokeRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 在type参数为1时，此did参数不需要传递，默认调用方吊销给用户颁发的卡证。
  did: string;
  // 类型说明，1：机构给用户颁发的证书，2：用户授权机构的证书(需要用户授权)
  type?: number;
  // 吊销的目标可验证声明ID，如果type参数为1时，此参数可以默认不传，授权宝将会找到目标user当前持有的有效卡证，进行吊销处理。
  // 当type不为1时，此参数也可以不传，此时授权宝会根据userInfo和did信息去找到一个可吊销的VC进行吊销（应用层慎重使用，确保这样筛选的目标唯一性）。
  vcId?: string;
  // 当type参数为1时，此参数和did参数，两者选一个使用，使用userId或者did参数指明did，代表的都是目标C类用户身份。
  // 当type不为1时，此参数代表C类用户身份，did参数指明授权的目标机构身份。
  // 
  userInfo?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      did: 'did',
      type: 'type',
      vcId: 'vc_id',
      userInfo: 'user_info',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      did: 'string',
      type: 'number',
      vcId: 'string',
      userInfo: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartAuthVcRevokeResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // true:吊销成功，false:吊销失败
  result?: boolean;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartAuthVcGiveRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 长度不超过64字符的业务唯一ID，用于对一个业务流的追踪，查询等。
  bizId: string;
  // 业务类型，通常需要与授权宝服务沟通确定，业务类型可能影响此接口内部实现逻辑，长度不超过32字符。
  bizType: string;
  // 一个json的string。内容包含具体需要的声明，不同业务场景不同。
  claimContent?: string;
  // 如果在相同的biz_type下，还需要针对声明claim进行细化划分，可以使用此字段。
  claimType?: string;
  // 非托管的情况下必选，业务方持有的did身份。
  did?: string;
  // 业务方可以传递的附加信息
  extension?: string;
  // 发起转增的发起方did，其实为发起请求之前的vc_id持有人
  ownerDid: string;
  // 非托管的情况下必选。 使用did字段的密钥进行整体传送内容（不包括此signature字段）签名的结果，具体签名规则： 1. Map<String,String> params 的key按照字典序排序 2. 拼接为 key1=value1&key2=value2&key3=value3 ... 3. 计算sha256(第2步结果)得到hash 4. 使用hash 和 签名的did请求DIS的签名。
  signature?: string;
  // 转增目标的did内容
  targetDid: string;
  // 目标票据所在的可验证证明的id
  vcId: string;
  // 申请声明颁发后的有效期，可选参数，如果不指定则默认申请永久有效。
  expire?: number;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizId: 'biz_id',
      bizType: 'biz_type',
      claimContent: 'claim_content',
      claimType: 'claim_type',
      did: 'did',
      extension: 'extension',
      ownerDid: 'owner_did',
      signature: 'signature',
      targetDid: 'target_did',
      vcId: 'vc_id',
      expire: 'expire',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizId: 'string',
      bizType: 'string',
      claimContent: 'string',
      claimType: 'string',
      did: 'string',
      extension: 'string',
      ownerDid: 'string',
      signature: 'string',
      targetDid: 'string',
      vcId: 'string',
      expire: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartAuthVcGiveResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 入参返回
  bizId?: string;
  // 业务类型，入参返回
  bizType?: string;
  // 本次转增后新颁发的可验证声明的issuer
  issuerDid?: string;
  // 可验证声明的颁发状态说明： 0：未授权 1：授权成功，此时vc_content字段会包含授权后的声明内容，其它状态码，待定义后增加。
  status?: string;
  // 本次转增的目标，也是新颁发的可验证声明的持有者owner的did
  subjectDid?: string;
  // 可验证声明完整内容， status 为 “1” 时候非空
  vcContent?: string;
  // 可验证声明的id
  vcId?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      bizId: 'biz_id',
      bizType: 'biz_type',
      issuerDid: 'issuer_did',
      status: 'status',
      subjectDid: 'subject_did',
      vcContent: 'vc_content',
      vcId: 'vc_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      bizId: 'string',
      bizType: 'string',
      issuerDid: 'string',
      status: 'string',
      subjectDid: 'string',
      vcContent: 'string',
      vcId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartAuthVcSharebatchRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 非托管的情况下必选，业务方持有的did身份。
  did?: string;
  // 非托管的情况下必选。 使用did字段的密钥进行整体传送内容（不包括此signature字段）签名的结果，具体签名规则： 1. Map<String,String> params 的key按照字典序排序 2. 拼接为 key1=value1&key2=value2&key3=value3 ... 3. 计算sha256(第2步结果)得到hash 4. 使用hash 和 签名的did请求DIS的签名。
  signature?: string;
  // 分享声明的目标方DID
  targetDid: string;
  // 目标待分享的VC列表，不超过10个
  vcShareList: VcShareStruct[];
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      did: 'did',
      signature: 'signature',
      targetDid: 'target_did',
      vcShareList: 'vc_share_list',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      did: 'string',
      signature: 'string',
      targetDid: 'string',
      vcShareList: { 'type': 'array', 'itemType': VcShareStruct },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartAuthVcSharebatchResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // VC分享的结果列表，分别带有结果tx_hash
  vcShareResults?: VcShareResult[];
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      vcShareResults: 'vc_share_results',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      vcShareResults: { 'type': 'array', 'itemType': VcShareResult },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartAuthCorporateSignRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 需要进行签名的字符串，按规定方式进行传参拼接并sha256
  data: string;
  // 需要代理签名的目标did，此did是当前请求方申请在授权宝控制创建
  did: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      data: 'data',
      did: 'did',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      data: 'string',
      did: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartAuthCorporateSignResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 签名结果
  signature?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      signature: 'signature',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      signature: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartAuthVcBatchauthRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 长度不超过64字符的业务唯一ID，用于对一个业务流的追踪，查询等。
  bizId: string;
  // 业务类型，通常需要与授权宝服务沟通确定，业务类型可能影响此接口内部实现逻辑，长度不超过32字符。
  bizType: string;
  // 批量进行可验证声明颁发的所有候选声明内容
  claimList: Claim[];
  // 非托管的情况下必选，业务方持有的did身份。
  did?: string;
  // 业务方可以传递的附加信息，通常跟可验证声明的claim有关，目前是可选项，将来业务复杂后，需要指定claim类型，或者附加信息内容说明。
  extension?: string;
  // jN1LVH5YhbTvgrdeBqlImPJBWDzVdNyyHZ1n9A0pSOQKnt11jWM5Qn707+wEa7bc8TOd1WvRItTe\r\nmx4xYCqX0gE=\r\n	
  signature?: string;
  // 涉及的C类用户身份信息，如果是支付宝体系内，需要提供userId，并且提供二要素信息(name，certNo)
  userInfo: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizId: 'biz_id',
      bizType: 'biz_type',
      claimList: 'claim_list',
      did: 'did',
      extension: 'extension',
      signature: 'signature',
      userInfo: 'user_info',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizId: 'string',
      bizType: 'string',
      claimList: { 'type': 'array', 'itemType': Claim },
      did: 'string',
      extension: 'string',
      signature: 'string',
      userInfo: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartAuthVcBatchauthResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 输入参数的bizId返回
  bizId?: string;
  // 具体业务的类型说明，来自入参。
  bizType?: string;
  // 本次可验证声明颁发者的DID
  issuerDid?: string;
  // 颁发的多个可验证声明结果列表。
  vcList?: VcContent[];
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      bizId: 'biz_id',
      bizType: 'biz_type',
      issuerDid: 'issuer_did',
      vcList: 'vc_list',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      bizId: 'string',
      bizType: 'string',
      issuerDid: 'string',
      vcList: { 'type': 'array', 'itemType': VcContent },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartAuthVcReplaceRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 长度不超过64字符的业务流水唯一ID，用于对一个业务流的追踪，查询等。
  bizId: string;
  // 业务类型，通常需要与授权宝服务沟通确定，业务类型可能影响此接口内部实现逻辑，长度不超过32字符。
  bizType: string;
  // 一个json的string。内容包含具体需要的声明，不同业务场景不同。
  claimContent: string;
  // 如果在相同的biz_type下，还需要针对声明claim进行细化划分，可以使用此字段。
  claimType?: string;
  // 非托管的情况下必选，业务方持有的did身份。
  did?: string;
  // 申请声明颁发后的有效期，可选参数，如果不指定则默认申请永久有效。
  expire?: number;
  // 业务方可以传递的附加信息
  extension?: string;
  // 非托管的情况下必选。 使用did字段的密钥进行整体传送内容（不包括此signature字段）签名的结果，具体签名规则： 1. Map<String,String> params 的key按照字典序排序 2. 拼接为 key1=value1&key2=value2&key3=value3 ... 3. 计算sha256(第2步结果)得到hash 4. 使用hash 和 签名的did请求DIS的签名。
  signature?: string;
  // 涉及的C类用户身份信息，如果是支付宝体系内，需要提供userId，并且提供二要素信息(name，certNo)
  // 如果已知目标C类用户的did，则可以直接指定did，比如：{"did": "XXXX"}
  userInfo: string;
  // 目标被替换的卡证vcId，此vcId指向的VC将被吊销，然后颁发新的vc。
  // 如果不指定此字段，如果有效卡证唯一，授权宝会默认找到唯一的有效卡证vcId进行吊销，然后颁发新的vc。
  vcId?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizId: 'biz_id',
      bizType: 'biz_type',
      claimContent: 'claim_content',
      claimType: 'claim_type',
      did: 'did',
      expire: 'expire',
      extension: 'extension',
      signature: 'signature',
      userInfo: 'user_info',
      vcId: 'vc_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizId: 'string',
      bizType: 'string',
      claimContent: 'string',
      claimType: 'string',
      did: 'string',
      expire: 'number',
      extension: 'string',
      signature: 'string',
      userInfo: 'string',
      vcId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartAuthVcReplaceResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 输入参数的bizId返回
  bizId?: string;
  // 具体业务的类型说明，来自入参。
  bizType?: string;
  // 本次可验证声明颁发者的DID
  issuerDid?: string;
  // 可验证声明的颁发状态说明： 0：未授权 1：授权成功，此时vc_content字段会包含授权后的声明内容，其它状态码，待定义后增加。
  status?: string;
  // 本次可验证声明目标者的DID
  subjectDid?: string;
  // 可验证声明完整内容， status 为 “1” 时候非空
  vcContent?: string;
  // 可验证声明的唯一标识id，status 为 “1” 时候非空
  vcId?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      bizId: 'biz_id',
      bizType: 'biz_type',
      issuerDid: 'issuer_did',
      status: 'status',
      subjectDid: 'subject_did',
      vcContent: 'vc_content',
      vcId: 'vc_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      bizId: 'string',
      bizType: 'string',
      issuerDid: 'string',
      status: 'string',
      subjectDid: 'string',
      vcContent: 'string',
      vcId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class PushAuthInsurancePolicyRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 投保人证件号码
  certNo: string;
  // 投保人证件类型
  certType?: string;
  // 投保人的did
  did: string;
  // 保单失效时间
  effectEndTime: string;
  // 保单生效时间
  effectStartTime: string;
  // 投保时间
  insuredTime: string;
  // 出单时间
  issueTime: string;
  // 投保人姓名
  name: string;
  // 保单编号
  policyNo: string;
  // 保单类型
  policyType?: string;
  // 产品名称
  prodName: string;
  // 产品编号
  prodNo: string;
  // 行为回溯的整体编号
  userTraceCode: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      certNo: 'cert_no',
      certType: 'cert_type',
      did: 'did',
      effectEndTime: 'effect_end_time',
      effectStartTime: 'effect_start_time',
      insuredTime: 'insured_time',
      issueTime: 'issue_time',
      name: 'name',
      policyNo: 'policy_no',
      policyType: 'policy_type',
      prodName: 'prod_name',
      prodNo: 'prod_no',
      userTraceCode: 'user_trace_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      certNo: 'string',
      certType: 'string',
      did: 'string',
      effectEndTime: 'string',
      effectStartTime: 'string',
      insuredTime: 'string',
      issueTime: 'string',
      name: 'string',
      policyNo: 'string',
      policyType: 'string',
      prodName: 'string',
      prodNo: 'string',
      userTraceCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class PushAuthInsurancePolicyResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 凭证id
  vcId?: string;
  // 合并之后的录屏记录的id，recordingId
  recordingId?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      vcId: 'vc_id',
      recordingId: 'recording_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      vcId: 'string',
      recordingId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetAuthFrontendAccesstokenRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 业务类型
  bizType: string;
  // 用户did
  userDid: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizType: 'biz_type',
      userDid: 'user_did',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizType: 'string',
      userDid: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetAuthFrontendAccesstokenResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 访问令牌
  accessToken?: string;
  // 过期时间
  expire?: string;
  // refresh_token
  refreshToken?: string;
  // 和xreplay交互时使用的令牌
  xreplayToken?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      accessToken: 'access_token',
      expire: 'expire',
      refreshToken: 'refresh_token',
      xreplayToken: 'xreplay_token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      accessToken: 'string',
      expire: 'string',
      refreshToken: 'string',
      xreplayToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateAuthClaimUrlRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 业务类型
  bizType: string;
  // 授权声明内容
  claimValue: string;
  // 被授权企业did
  corpDid: string;
  // 过期时间选项
  expireOptions: ValueUnitPair[];
  // 授权是否可撤销
  revocable: boolean;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizType: 'biz_type',
      claimValue: 'claim_value',
      corpDid: 'corp_did',
      expireOptions: 'expire_options',
      revocable: 'revocable',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizType: 'string',
      claimValue: 'string',
      corpDid: 'string',
      expireOptions: { 'type': 'array', 'itemType': ValueUnitPair },
      revocable: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateAuthClaimUrlResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 待认证的业务id
  bizId?: string;
  // 授权模版跳转url
  claimUrl?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      bizId: 'biz_id',
      claimUrl: 'claim_url',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      bizId: 'string',
      claimUrl: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartAuthVerifyCarinfoRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 长度不超过64字符的业务唯一ID，用于对一个业务流的追踪，查询等。
  bizId: string;
  // 业务类型，通常需要与授权宝服务沟通确定，业务类型可能影响此接口内部实现逻辑，长度不超过32字符。
  bizType: string;
  // 加密前身份证号最后一位为字母 X 时，请使用大写 X，SHA256 加密字符串(小写)，身份证需 18
  // 岁以上。
  certNo: string;
  // 保留字段，待扩展使用的JSON字符串内容
  extension?: string;
  // 车牌号加密前车牌字母均为大写，SHA256 的加密后字符串(小写字母)
  licenseNo: string;
  // 目标用户姓名的SHA256计算结果(小写字母)
  name: string;
  // 姓名和身份证号拼接之后，SHA256加密的结果(小写字母)，身份证最后一位为字母 X 时， 请使用大写 X，加密后 SHA256 的 字符串(小写)， 身份证需 18 岁以上。
  twoMeta: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizId: 'biz_id',
      bizType: 'biz_type',
      certNo: 'cert_no',
      extension: 'extension',
      licenseNo: 'license_no',
      name: 'name',
      twoMeta: 'two_meta',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizId: 'string',
      bizType: 'string',
      certNo: 'string',
      extension: 'string',
      licenseNo: 'string',
      name: 'string',
      twoMeta: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartAuthVerifyCarinfoResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 业务流水号，输入参数的bizId返回。
  bizId?: string;
  // 来自入参，具体看业务场景。
  bizType?: string;
  // 目标用户创建的did结果，如果为空则表明未创建。
  did?: string;
  // 查询结果
  // 1 一致(收费)
  // 2 姓名不一致(收费)
  // 3 身份证未命中(收费)
  // 4 车牌号不一致(收费)
  // 0 无意义(responsecode 不为 100 时 出现)
  resultStatus?: number;
  // 查询结果数据，result_status 不等于 1 时为null，结果是一个JSON字符串，具体结果内容解释，需要参考文档说明。
  resultData?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      bizId: 'biz_id',
      bizType: 'biz_type',
      did: 'did',
      resultStatus: 'result_status',
      resultData: 'result_data',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      bizId: 'string',
      bizType: 'string',
      did: 'string',
      resultStatus: 'number',
      resultData: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartAuthVerifyDriverinfoRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 业务流水号，长度不超过64字符的业务唯一ID，用于对一个业务流的追踪，查询等。
  bizId: string;
  // 业务类型，通常需要与授权宝服务沟通确定，业务类型可能影响此接口内部实现逻辑，长度不超过32字符。
  bizType: string;
  // 加密前身份证号最后一位为字母 X 时，请使用大写 X，SHA256 加密字符串(小写)，身份证需 18 岁以上。
  certNo: string;
  // 保留字段，待扩展使用的JSON字符串内容
  extension?: string;
  // 目标用户姓名的SHA256计算结果(小写字母)。
  name: string;
  // 姓名和身份证号拼接之后，SHA256加密的结果(小写字母)，身份证最后一位为字母 X 时， 请使用大写 X，加密后 SHA256 的 字符串(小写)， 身份证需 18 岁以上。
  twoMeta: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizId: 'biz_id',
      bizType: 'biz_type',
      certNo: 'cert_no',
      extension: 'extension',
      name: 'name',
      twoMeta: 'two_meta',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizId: 'string',
      bizType: 'string',
      certNo: 'string',
      extension: 'string',
      name: 'string',
      twoMeta: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartAuthVerifyDriverinfoResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 业务流水号，输入参数的bizId返回。
  bizId?: string;
  // 来自入参，具体看业务场景。
  bizType?: string;
  // 目标用户创建的did结果，如果为空则表明未创建。
  did?: string;
  // 查询结果：
  // 1 一致(收费) 
  // 2 姓名不一致(收费) 
  // 3 身份证未命中(收费) 
  // 4 车牌号不一致(收费) 
  // 0 无意义
  resultStatus?: number;
  // 查询结果数据，result_status 不等于 1 时为null，结果是一个JSON字符串，具体结果内容解释，需要参考文档说明。
  resultData?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      bizId: 'biz_id',
      bizType: 'biz_type',
      did: 'did',
      resultStatus: 'result_status',
      resultData: 'result_data',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      bizId: 'string',
      bizType: 'string',
      did: 'string',
      resultStatus: 'number',
      resultData: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartAuthVerifyCarinspectRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 长度不超过64字符的业务唯一ID，用于对一个业务流的追踪，查询等。
  bizId: string;
  // 业务类型，通常需要与授权宝服务沟通确定，业务类型可能影响此接口内部实现逻辑，长度不超过32字符。
  bizType: string;
  // 车牌号，内容大写，不带空格。
  plateNo: string;
  // 非必填参数，号牌种类说明，比如"01"代表大型汽车，具体类型入参说明参考文档枚举。
  plateType?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizId: 'biz_id',
      bizType: 'biz_type',
      plateNo: 'plate_no',
      plateType: 'plate_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizId: 'string',
      bizType: 'string',
      plateNo: 'string',
      plateType: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartAuthVerifyCarinspectResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 年检有效期止。
  inspectionDate?: string;
  //  0：正常   1：逾期未检验  2：无法判断
  status?: number;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      inspectionDate: 'inspection_date',
      status: 'status',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      inspectionDate: 'string',
      status: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetAuthClaimTemplateRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 业务类型
  bizType: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizType: 'biz_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizType: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetAuthClaimTemplateResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 授权声明模版
  claimTemplate?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      claimTemplate: 'claim_template',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      claimTemplate: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateAuthClaimVcRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 业务类型
  bizType: string;
  // 业务id
  bizId: string;
  // 被授权者did
  subjectDid: string;
  // 授权内容
  content: string;
  // 授权发起者did
  issuerDid: string;
  // 过期时间，长期为-1, 单位为毫秒
  expire: number;
  // 授权是否可撤销
  revocable: boolean;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizType: 'biz_type',
      bizId: 'biz_id',
      subjectDid: 'subject_did',
      content: 'content',
      issuerDid: 'issuer_did',
      expire: 'expire',
      revocable: 'revocable',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizType: 'string',
      bizId: 'string',
      subjectDid: 'string',
      content: 'string',
      issuerDid: 'string',
      expire: 'number',
      revocable: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateAuthClaimVcResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 业务id
  bizId?: string;
  // 可验证声明id
  vcId?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      bizId: 'biz_id',
      vcId: 'vc_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      bizId: 'string',
      vcId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryAuthClaimVcRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 可验证声明id
  vcId: string;
  // 业务类型
  bizType: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      vcId: 'vc_id',
      bizType: 'biz_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      vcId: 'string',
      bizType: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryAuthClaimVcResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 可验证声明id
  vcId?: string;
  // vc详情
  vcContent?: string;
  // vc状态
  // 0:未授权
  // 1:已授权
  // 2: 拒绝授权
  // 3: 授权已撤销
  status?: number;
  // 业务类型
  bizType?: string;
  // 授权是否可撤销
  revocable?: boolean;
  // 过期时间
  expire?: number;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      vcId: 'vc_id',
      vcContent: 'vc_content',
      status: 'status',
      bizType: 'biz_type',
      revocable: 'revocable',
      expire: 'expire',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      vcId: 'string',
      vcContent: 'string',
      status: 'number',
      bizType: 'string',
      revocable: 'boolean',
      expire: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryAuthVehicleinsuranceRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 车牌号
  vehicleNo: string;
  // 车型代码. 可选, 02 普通小客车(默认); 52 新能源小客车
  vehicleType?: string;
  // 车辆识别码
  vin: string;
  // 车主认证信息
  ownerMetaInfo: UserMetaInfo;
  // 业务类型
  bizType: string;
  // 业务id
  bizId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      vehicleNo: 'vehicle_no',
      vehicleType: 'vehicle_type',
      vin: 'vin',
      ownerMetaInfo: 'owner_meta_info',
      bizType: 'biz_type',
      bizId: 'biz_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      vehicleNo: 'string',
      vehicleType: 'string',
      vin: 'string',
      ownerMetaInfo: UserMetaInfo,
      bizType: 'string',
      bizId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryAuthVehicleinsuranceResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 上次交强险投保年月
  lastInsuranceDate?: string;
  // 初次投保日期
  firstInsuranceDate?: string;
  // 最近交强险投保期止
  latestInsuranceDate?: string;
  // 车辆did
  vehicleDid?: string;
  // 车主did
  ownerUserDid?: string;
  // 服务提供方代码
  ispType?: number;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      lastInsuranceDate: 'last_insurance_date',
      firstInsuranceDate: 'first_insurance_date',
      latestInsuranceDate: 'latest_insurance_date',
      vehicleDid: 'vehicle_did',
      ownerUserDid: 'owner_user_did',
      ispType: 'isp_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      lastInsuranceDate: 'string',
      firstInsuranceDate: 'string',
      latestInsuranceDate: 'string',
      vehicleDid: 'string',
      ownerUserDid: 'string',
      ispType: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryAuthVehicleinsuranceVcRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 车牌号
  vehicleNo: string;
  // 车型代码. 可选, 02 普通小客车(默认); 52 新能源小客车
  vehicleType?: string;
  // 车辆识别码
  vin: string;
  // 车主认证信息
  ownerMetaInfo: UserMetaInfo;
  // 业务类型
  bizType: string;
  // 业务id
  bizId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      vehicleNo: 'vehicle_no',
      vehicleType: 'vehicle_type',
      vin: 'vin',
      ownerMetaInfo: 'owner_meta_info',
      bizType: 'biz_type',
      bizId: 'biz_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      vehicleNo: 'string',
      vehicleType: 'string',
      vin: 'string',
      ownerMetaInfo: UserMetaInfo,
      bizType: 'string',
      bizId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryAuthVehicleinsuranceVcResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 上次交强险投保年月
  lastInsuranceDate?: string;
  // 初次投保日期
  firstInsuranceDate?: string;
  // 最近交强险投保期止
  latestInsuranceDate?: string;
  // 车辆did
  vehicleDid?: string;
  // 车主did
  ownerUserDid?: string;
  // 可验证声明id
  vcId?: string;
  // 业务提供方代码
  ispType?: number;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      lastInsuranceDate: 'last_insurance_date',
      firstInsuranceDate: 'first_insurance_date',
      latestInsuranceDate: 'latest_insurance_date',
      vehicleDid: 'vehicle_did',
      ownerUserDid: 'owner_user_did',
      vcId: 'vc_id',
      ispType: 'isp_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      lastInsuranceDate: 'string',
      firstInsuranceDate: 'string',
      latestInsuranceDate: 'string',
      vehicleDid: 'string',
      ownerUserDid: 'string',
      vcId: 'string',
      ispType: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryAuthVcStatisticsRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 业务场景码，通常特定的业务场景需要与授权宝约定使用
  bizType: string;
  // 返回分布数据以day为单位的数量，当前此参数保留，只返回7day的分布，后续启用此参数。
  size?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizType: 'biz_type',
      size: 'size',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizType: 'string',
      size: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryAuthVcStatisticsResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 业务场景值，与入参相同
  bizType?: string;
  // 指定业务场景的数据量，在核酸检测场景，就是整体核酸检测数据的数量
  total?: number;
  // 分布曲线描绘的一个点，day为单位的分布数据汇总情况。
  list?: Curve[];
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      bizType: 'biz_type',
      total: 'total',
      list: 'list',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      bizType: 'string',
      total: 'number',
      list: { 'type': 'array', 'itemType': Curve },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryAuthVcRealtimeRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 查询目标业务的实时凭证颁发情况
  bizType: string;
  // 最新实时颁发的凭证查看数目，可以不设定，默认返回10个结果，如果整体结果少于10，则按情况返回。
  size?: number;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizType: 'biz_type',
      size: 'size',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizType: 'string',
      size: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryAuthVcRealtimeResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 业务类型场景码，与入参相同。
  bizType?: string;
  // 实际返回的结果数目，如果真是数据量小于request中的size的情况下，total 不等于 size，否则 total 与size值相等。
  total?: number;
  // 列表结果，其中每个元素是一个json的string，这个json实际就是数据源提供的数据上链之前的内容。
  // 
  // {
  //   "key":"vc:mychain:01364d9acbda8d09d8c30d94987b40b28f2c28d4ff8f86dbe16197a8f2b0c031",
  //   "name": "张三",           //个人姓名
  //   "certNo": "210XXXXXX90", //个人证件号码
  //   "mobile": "138XXXXXX90", //个人手机号码
  //   "orgName": "XXX检测中心",      //检测机构名称
  //   "orgNo": "90XXXX00",    //检测机构编号 (可选)
  //   "type":"1",             //具体类型说明：1：核酸检测证明，2：疫苗接种证明，其他类型后续扩展
  //   "result":"阴性",
  //   "date":"2021-03-09",    //检测的日期，请统一使用此标准
  //   "timestamp":"检测准确时间戳"   //其它字段可以再补充
  // }
  list?: string[];
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      bizType: 'biz_type',
      total: 'total',
      list: 'list',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      bizType: 'string',
      total: 'number',
      list: { 'type': 'array', 'itemType': 'string' },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryAuthOrgStatusRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 业务类型说明，当前查询的业务类型，不同业务的机构列表不同。
  bizType: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizType: 'biz_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizType: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryAuthOrgStatusResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 业务场景码类型
  bizType?: string;
  // 列表结果，其中每个元素是一个json的string，这个json实际就是数据源提供的数据上链之前的内容。
  // 
  // [
  //   {
  //     "did": "did:mychain:b11dd863d31c38507d6cf8e615b897c7a9160d145e404b8a991964179c0e0bfd",
  //     "orgName": "XX检查门诊-1",
  //     "orgNo": "机构编号-1",
  //     "logoUrl": "https://gw.alipayobjects.com/mdn/rms_40e4ff/afts/img/A*a8QOSJysDlsAAAAAAAAAAABkARQnAQ",
  //     "status": 1
  //   },
  //   {
  //     "did": "did:mychain:b11dd863d31c38507d6cf8e615b897c7a9160d145e404b8a991964179c0e0bfe",
  //     "orgName": "XX检查门诊-2",
  //     "orgNo": "机构编号-2",
  //     "logoUrl": "https://gw.alipayobjects.com/mdn/rms_40e4ff/afts/img/A*a8QOSJysDlsAAAAAAAAAAABkARQnAQ",
  //     "status": 0
  //   }
  // ]
  list?: string[];
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      bizType: 'biz_type',
      list: 'list',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      bizType: 'string',
      list: { 'type': 'array', 'itemType': 'string' },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartAuthAssetIssueRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 长度不超过64字符的业务唯一ID，用于对一个业务流的追踪，查询等。
  bizId: string;
  // 具体的业务类型，长度不超过32字符，具体需要与DIS小组业务对接商定新增的业务类型。
  bizType: string;
  // 目前区分content的两种数据：
  // - "b_total"：商户维度聚合数据，（分城市消费者统计数据），相关商家属性。
  // - "c_deposit"：C类个人充值数据，未来扩展C类核销，退款等数据类型，"c_"前缀。
  // - "c_total"：C类个人充值数据聚合(安心充+学费码整体去重按照地理位置维度聚合)
  type: string;
  // 当 type参数为："b_total"
  // 主要设定“商户统一信用码” ，其name字段从mif如果获取到也填入：
  // {"name": "XXXX",
  // "certNo":"信用码"}，
  // 
  // 当type参数为："c_deposit"时，设定C类用户信息，使用uid，如果有二要素信息，则计算二要素“姓名+身份证号”的拼接字符串计算Hash得到twoMeta：
  // {"userId": "XXXX",
  // "twoMeta":"SHA256(姓名+身份证号码)"}
  // 
  // 当 type参数为："c_total"，可以不设定此参数。
  identity?: string;
  // 可能两种类型数据：
  // 商户维度的统计数据，是聚合的数据结果
  // C类充值数据，包含 充值明细数据，目标商户信用码，商户所在城市地理位置信息等。
  content: string;
  // 传递的附加信息说明，暂时未定义
  extension?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizId: 'biz_id',
      bizType: 'biz_type',
      type: 'type',
      identity: 'identity',
      content: 'content',
      extension: 'extension',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizId: 'string',
      bizType: 'string',
      type: 'string',
      identity: 'string',
      content: 'string',
      extension: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartAuthAssetIssueResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 数据在目标链上的交易hash
  hash?: string;
  // 颁发的凭证的索引id
  vcId?: string;
  // 目标identity在分布式数字身份这边创建的did
  did?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      hash: 'hash',
      vcId: 'vc_id',
      did: 'did',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      hash: 'string',
      vcId: 'string',
      did: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AllAuthCertTemplateRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 证书模板的分类，目前支持马拉松和荣誉证书，marathon 、honor 、employee
  category: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      category: 'category',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      category: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AllAuthCertTemplateResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 模板类别：马拉松类、滑雪类
  category?: string;
  // 模板详情列表
  templates?: TemplateInfoDTO[];
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      category: 'category',
      templates: 'templates',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      category: 'string',
      templates: { 'type': 'array', 'itemType': TemplateInfoDTO },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SaveAuthCertInstanceforcustomRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 证书内容，json格式，可以根据证书模板增加自定义字段
  content: string;
  // 需要编辑的证书实例id，如果是新增场景则传null
  instanceId?: string;
  // 创建证书实例后的状态，新增场景默认为3，修改场景不用传值
  // 
  // 3: 编辑中 2: 待审核  1: 审核通过 
  // 
  // 只有3: 编辑中 状态可以对证书实例进行修改
  status?: number;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      content: 'content',
      instanceId: 'instance_id',
      status: 'status',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      content: 'string',
      instanceId: 'string',
      status: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SaveAuthCertInstanceforcustomResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 创建成功的证书实例id
  instanceId?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      instanceId: 'instance_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      instanceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class BatchcreateAuthCertRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 证书实例id
  instanceId: string;
  // 通过上传领取人明细文件接口返回的csv文件名
  path: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      instanceId: 'instance_id',
      path: 'path',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      instanceId: 'string',
      path: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class BatchcreateAuthCertResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 证书颁发进度描述
  certIssueProgress?: CertIssueProgressDTO;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      certIssueProgress: 'cert_issue_progress',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      certIssueProgress: CertIssueProgressDTO,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateAuthCertRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 证书实例id
  instanceId: string;
  // 证书的字段标题列表
  titles: string[];
  // 证书的字段内容数组
  data: string[];
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      instanceId: 'instance_id',
      titles: 'titles',
      data: 'data',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      instanceId: 'string',
      titles: { 'type': 'array', 'itemType': 'string' },
      data: { 'type': 'array', 'itemType': 'string' },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateAuthCertResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 颁发进度的详细描述
  certIssueProgress?: CertIssueProgressDTO;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      certIssueProgress: 'cert_issue_progress',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      certIssueProgress: CertIssueProgressDTO,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InvalidateAuthCertRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 证书id
  certId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      certId: 'cert_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      certId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InvalidateAuthCertResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryAuthCertProgressRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 证书实例id
  instanceId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      instanceId: 'instance_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      instanceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryAuthCertProgressResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 批量颁发的任务进度
  certIssueProgress?: CertIssueProgressDTO;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      certIssueProgress: 'cert_issue_progress',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      certIssueProgress: CertIssueProgressDTO,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UploadAuthCertInstanceRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 自动生成的唯一id，不需要传入
  fileObject?: Readable;
  fileObjectName?: string;
  fileId?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      fileObject: 'fileObject',
      fileObjectName: 'fileObjectName',
      fileId: 'file_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      fileObject: 'Readable',
      fileObjectName: 'string',
      fileId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UploadAuthCertInstanceResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 上传成功后的文件名，作为批量颁发证书接口的入参
  path?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      path: 'path',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      path: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SaveAuthCertInstanceRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 证书内容，json格式，可以根据证书模板增加自定义字段
  content: string;
  // 需要编辑的证书实例id，如果是新增场景则传null
  instanceId?: string;
  // 创建证书实例后的状态，新增和修改场景默认为3 
  // 3: 编辑中 
  // 2: 待审核
  // 
  // 只有3: 编辑中 状态可以对证书实例进行修改
  status?: number;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      content: 'content',
      instanceId: 'instance_id',
      status: 'status',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      content: 'string',
      instanceId: 'string',
      status: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SaveAuthCertInstanceResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 创建或修改成功的证书实例id
  instanceId?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      instanceId: 'instance_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      instanceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyAuthCertInstanceRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 证书实例id
  instanceId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      instanceId: 'instance_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      instanceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyAuthCertInstanceResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetAuthCertInstancedataurlRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetAuthCertInstancedataurlResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // oss服务地址
  host?: string;
  // 申请的证书领取人csv的名称，使用该key作为批量颁发证书的path参数
  dir?: string;
  // ak
  accessId?: string;
  // Policy规定了请求表单域的合法性
  policy?: string;
  // 签名
  signature?: string;
  // 过期时间戳
  expire?: string;
  // 加密回调信息
  callback?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      host: 'host',
      dir: 'dir',
      accessId: 'access_id',
      policy: 'policy',
      signature: 'signature',
      expire: 'expire',
      callback: 'callback',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      host: 'string',
      dir: 'string',
      accessId: 'string',
      policy: 'string',
      signature: 'string',
      expire: 'string',
      callback: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateAuthCertClaimRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 长度不超过64字符的业务唯一ID，用于对一个业务流的追踪，查询等。
  bizId: string;
  // 业务类型，通常需要与授权宝服务沟通确定，业务类型可能影响此接口内部实现逻辑，长度不超过32字符。
  // 
  bizType: string;
  // 一个json的string。内容包含具体需要的声明，不同业务场景不同。
  // 
  claimContent: string;
  // 如果在相同的biz_type下，还需要针对声明claim进行细化划分，可以使用此字段。
  // 
  claimType?: string;
  // 申请声明颁发后的有效期，可选参数，如果不指定则默认申请永久有效。
  // 
  expire?: number;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizId: 'biz_id',
      bizType: 'biz_type',
      claimContent: 'claim_content',
      claimType: 'claim_type',
      expire: 'expire',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizId: 'string',
      bizType: 'string',
      claimContent: 'string',
      claimType: 'string',
      expire: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateAuthCertClaimResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 可验证声明的唯一标识id，status 为 “1” 时候非空
  vcId?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      vcId: 'vc_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      vcId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryAuthCertClaimRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 可验证声明id
  vcId: string;
  // 业务类型
  bizType: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      vcId: 'vc_id',
      bizType: 'biz_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      vcId: 'string',
      bizType: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryAuthCertClaimResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 可验证声明id
  vcId?: string;
  // 交易hash（仅上链成功后会有值）
  txHash?: string;
  // vc详情
  vcContent?: string;
  // vc状态 0:未授权 1:已授权 2: 拒绝授权 3: 授权已撤销
  status?: number;
  // 业务类型
  bizType?: string;
  // 过期时间
  expire?: number;
  // 授权是否可撤销
  revocable?: boolean;
  // 存证请求创建时间
  gmtCreate?: string;
  // 存证上链时间（仅上链成功后会有值）
  gmtTransmit?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      vcId: 'vc_id',
      txHash: 'tx_hash',
      vcContent: 'vc_content',
      status: 'status',
      bizType: 'biz_type',
      expire: 'expire',
      revocable: 'revocable',
      gmtCreate: 'gmt_create',
      gmtTransmit: 'gmt_transmit',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      vcId: 'string',
      txHash: 'string',
      vcContent: 'string',
      status: 'number',
      bizType: 'string',
      expire: 'number',
      revocable: 'boolean',
      gmtCreate: 'string',
      gmtTransmit: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateAuthCertClaimurlRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 存证唯一id
  vcId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      vcId: 'vc_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      vcId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateAuthCertClaimurlResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 证书平台支付宝小程序查验存证的url
  miniUrl?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      miniUrl: 'mini_url',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      miniUrl: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetAuthClaimRecentRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 业务类型
  bizType: string;
  // C类用户支付宝2088id
  uid: string;
  // 被授权机构did
  subject?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizType: 'biz_type',
      uid: 'uid',
      subject: 'subject',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizType: 'string',
      uid: 'string',
      subject: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetAuthClaimRecentResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 声明的 id，status 为 “1” 时候非空
  vcId?: string;
  // 可验证声明完成内容， status 为 “1” 时候非空
  vcContent?: string;
  // 业务类型
  bizType?: string;
  // vc状态 0:未授权 1:已授权 2: 拒绝授权 3: 授权已撤销
  status?: number;
  // 授权是否可撤销
  revocable?: boolean;
  // 过期时间
  expire?: number;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      vcId: 'vc_id',
      vcContent: 'vc_content',
      bizType: 'biz_type',
      status: 'status',
      revocable: 'revocable',
      expire: 'expire',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      vcId: 'string',
      vcContent: 'string',
      bizType: 'string',
      status: 'number',
      revocable: 'boolean',
      expire: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ExecAuthContractRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 地区
  regionId?: string;
  // ant_chain_id
  antChainId: string;
  // transaction
  transaction: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      regionId: 'region_id',
      antChainId: 'ant_chain_id',
      transaction: 'transaction',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      regionId: 'string',
      antChainId: 'string',
      transaction: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ExecAuthContractResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // result
  result?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryAuthSceneAuthstatusRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 支付宝会员id
  userId: string;
  // 当前场景id
  sceneId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      userId: 'user_id',
      sceneId: 'scene_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      userId: 'string',
      sceneId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryAuthSceneAuthstatusResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // Authorized 已授权
  // Unauthorized 未授权
  authStatus?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      authStatus: 'auth_status',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      authStatus: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ExecAuthContractClaimRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 长度不超过64字符的业务流水唯一ID，用于对一个业务流的追踪，与请求中的biz_id一致方便业务方使用。
  bizId: string;
  // 业务类型
  bizType: string;
  // 合约名称
  contractName: string;
  // 合约方法名称
  functionName: string;
  // 合约入参类型，和 arguments对应， 取值类型： DOUBLE，STRING，INTEGER，LONG，FLOAT； 默认为String
  arguments?: string[];
  // 保留参数，选填，目前暂未用到，合约入参类型，和 arguments对应 取值类型： DOUBLE，STRING，INTEGER，LONG，FLOAT；
  types?: string[];
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizId: 'biz_id',
      bizType: 'biz_type',
      contractName: 'contract_name',
      functionName: 'function_name',
      arguments: 'arguments',
      types: 'types',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizId: 'string',
      bizType: 'string',
      contractName: 'string',
      functionName: 'string',
      arguments: { 'type': 'array', 'itemType': 'string' },
      types: { 'type': 'array', 'itemType': 'string' },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ExecAuthContractClaimResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 场景码
  bizId?: string;
  // 业务场景码类型
  bizType?: string;
  // 合约执行结果
  resultData?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      bizId: 'biz_id',
      bizType: 'biz_type',
      resultData: 'result_data',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      bizId: 'string',
      bizType: 'string',
      resultData: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateAuthCertDetailpageurlRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 证书实例ID
  instanceId: string;
  // 用户领取条件信息, JSON结构，信息同颁发证书时使用的领取条件
  userInfo: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      instanceId: 'instance_id',
      userInfo: 'user_info',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      instanceId: 'string',
      userInfo: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateAuthCertDetailpageurlResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // H5页面url
  resultData?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      resultData: 'result_data',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      resultData: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SignAuthAgreementUserRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 用户id
  userId: string;
  // 协议id
  agreementId: string;
  // 签约时间
  signDate: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      userId: 'user_id',
      agreementId: 'agreement_id',
      signDate: 'sign_date',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      userId: 'string',
      agreementId: 'string',
      signDate: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SignAuthAgreementUserResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class BindAuthPoapRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 长度不超过64字符的业务流水唯一id，可作幂等处理
  bizId: string;
  // 徽章元数据ID
  poapMetaId: string;
  // 支付宝UID，2088开头
  userId?: string;
  // 用户真实姓名
  userName?: string;
  // 用户手机号
  userCertNo?: string;
  // 用户手机号
  userMobile?: string;
  // 定制id会有白名单进行权限限制。id格式要求：长度6-20，允许字母、数字、部分特殊字符(_#:|)
  poapId?: string;
  // 徽章关联权益时，用户领取权益的动作类型
  profitAction?: string;
  // 徽章关联权益时，用户领取权益的地址
  profitUrl?: string;
  // 徽章关联权益时附带信息，buttonName为自定义领取按钮名称，needAuth为是否需要授权，authId为授权请求id，authBizId为授权请求场景id
  payload?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizId: 'biz_id',
      poapMetaId: 'poap_meta_id',
      userId: 'user_id',
      userName: 'user_name',
      userCertNo: 'user_cert_no',
      userMobile: 'user_mobile',
      poapId: 'poap_id',
      profitAction: 'profit_action',
      profitUrl: 'profit_url',
      payload: 'payload',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizId: 'string',
      poapMetaId: 'string',
      userId: 'string',
      userName: 'string',
      userCertNo: 'string',
      userMobile: 'string',
      poapId: 'string',
      profitAction: 'string',
      profitUrl: 'string',
      payload: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class BindAuthPoapResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 徽章ID
  poapId?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      poapId: 'poap_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      poapId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryAuthPoapRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // POAP徽章ID
  poapId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      poapId: 'poap_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      poapId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryAuthPoapResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 徽章信息信息
  poapInfo?: PoapInfo;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      poapInfo: 'poap_info',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      poapInfo: PoapInfo,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartAuthDataRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 调用方生成的请求id，需保证唯一
  authId: string;
  // 调用方请求的数据类型
  dataType: string;
  // 授权结果通知调用方的方式
  callbackType: string;
  // 授权结果通知调用方的地址
  callbackUrl: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      authId: 'auth_id',
      dataType: 'data_type',
      callbackType: 'callback_type',
      callbackUrl: 'callback_url',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      authId: 'string',
      dataType: 'string',
      callbackType: 'string',
      callbackUrl: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartAuthDataResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 授权宝小程序的地址，调用方需要访问该地址从而进行用户授权
  myauthUrl?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      myauthUrl: 'myauth_url',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      myauthUrl: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetAuthDataRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 调用方在发起授权请求时创建的请求id
  authId: string;
  // 授权数据类型
  dataType: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      authId: 'auth_id',
      dataType: 'data_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      authId: 'string',
      dataType: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetAuthDataResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 使用调用方的公钥加密后的授权数据
  encryptedData?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      encryptedData: 'encrypted_data',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      encryptedData: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryAuthIdentityauthRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 授权宝生成的bizId 与 核身token 用 ; 拼接成的字符串
  securityId: string;
  // 核身的userid
  userId: string;
  // 核身对应的操作类型，目前只有0，代表创建did
  operationType: number;
  // 其它类型操作时的参数，json形式字符串
  params?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      securityId: 'security_id',
      userId: 'user_id',
      operationType: 'operation_type',
      params: 'params',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      securityId: 'string',
      userId: 'string',
      operationType: 'number',
      params: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryAuthIdentityauthResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 核身结果
  verifyResult?: boolean;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      verifyResult: 'verify_result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      verifyResult: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryAuthCertDetailurlRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 证书的bizId
  bizId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizId: 'biz_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryAuthCertDetailurlResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 证书的详情h5链接
  detailUrl?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      detailUrl: 'detail_url',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      detailUrl: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class NotifyAuthTaskStatusRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 任务id
  taskId: string;
  // 支uid
  userId: string;
  // NO_START, NO_SUBMIT, NOT_COMPLETE, COMPLETE
  status: string;
  // 状态发生时间
  happenTime: string;
  // 业务流水号，问卷方传给主站后透传给授权宝
  outBizNo?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      taskId: 'task_id',
      userId: 'user_id',
      status: 'status',
      happenTime: 'happen_time',
      outBizNo: 'out_biz_no',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      taskId: 'string',
      userId: 'string',
      status: 'string',
      happenTime: 'string',
      outBizNo: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class NotifyAuthTaskStatusResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class PauseAuthTaskRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 任务id
  taskId: string;
  // 操作者
  operator: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      taskId: 'task_id',
      operator: 'operator',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      taskId: 'string',
      operator: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class PauseAuthTaskResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 任务暂停成功/失败
  data?: boolean;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      data: 'data',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      data: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FinishAuthTaskRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 任务id
  taskId: string;
  // 操作者
  operator: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      taskId: 'task_id',
      operator: 'operator',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      taskId: 'string',
      operator: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FinishAuthTaskResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 任务完成操作成功/失败
  data?: boolean;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      data: 'data',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      data: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ReopenAuthTaskRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 任务id
  taskId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      taskId: 'task_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      taskId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ReopenAuthTaskResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 任务重启成功/失败
  data?: boolean;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      data: 'data',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      data: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class OperateAuthTaskRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 任务id
  taskId: string;
  // 样本数量
  sampleNum: number;
  // 操作人
  operator: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      taskId: 'task_id',
      sampleNum: 'sample_num',
      operator: 'operator',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      taskId: 'string',
      sampleNum: 'number',
      operator: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class OperateAuthTaskResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryAuthTaskRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 标签列表
  tagCodeList: string[];
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      tagCodeList: 'tag_code_list',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      tagCodeList: { 'type': 'array', 'itemType': 'string' },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryAuthTaskResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 人群标签返回列表
  data?: CrowdTagEnumResp[];
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      data: 'data',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      data: { 'type': 'array', 'itemType': CrowdTagEnumResp },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CountAuthTaskRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 任务id
  taskId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      taskId: 'task_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      taskId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CountAuthTaskResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 任务对应的人群预估数量
  data?: number;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      data: 'data',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      data: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class MatchAuthTaskRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 用户id
  userId: string;
  // 任务ID，支持批量
  taskIds: string[];
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      userId: 'user_id',
      taskIds: 'task_ids',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      userId: 'string',
      taskIds: { 'type': 'array', 'itemType': 'string' },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class MatchAuthTaskResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 人群匹配结果
  data?: TaskCrowdMatchResp[];
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      data: 'data',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      data: { 'type': 'array', 'itemType': TaskCrowdMatchResp },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SubmitAuthTaskRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 任务标题(同一个租户不能重复)
  taskName: string;
  // appId
  appId: string;
  // 问卷id(同一个租户不能重复，只能包含字母、数组或者下划线)
  surveyId: string;
  // notes
  notes?: string;
  // 任务创建者
  operator: string;
  // banner标题
  bannerTitle: string;
  // banner图片地址（最多支持3张）
  bannerImageUrls?: string[];
  // 题量
  questionNum: number;
  // 任务连接地址
  taskLinkUrl: string;
  // 人群划分描述
  personDivideContent?: string;
  // 城市列表
  cityDivideUrls?: string[];
  // 样本数量
  sampleNum: number;
  // 产品下单code类型（1-资源包 2-后付费）
  productCodeType: string;
  // 奖励渠道（0-手动发支付宝余额 1-海豚红包 2-问卷自带）
  prizeChannel: number;
  // 支付宝账号
  alipayAccountId?: string;
  // 奖励类型（0-定额红包）
  prizeType: number;
  // 全额红包金额（价格在0.01~100），奖励渠道为0和1时
  fullRedPacketAmount: string;
  // 甄别红包金额
  examineRedPacketAmount: string;
  // 全额红包描述，奖励渠道为2时，此处必填
  fullRedPacketTextInfo?: string;
  // 证书内容
  certContent?: string;
  // 人群配置
  crowdConfig: string;
  // 是否草稿，1表示草稿
  draft: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      taskName: 'task_name',
      appId: 'app_id',
      surveyId: 'survey_id',
      notes: 'notes',
      operator: 'operator',
      bannerTitle: 'banner_title',
      bannerImageUrls: 'banner_image_urls',
      questionNum: 'question_num',
      taskLinkUrl: 'task_link_url',
      personDivideContent: 'person_divide_content',
      cityDivideUrls: 'city_divide_urls',
      sampleNum: 'sample_num',
      productCodeType: 'product_code_type',
      prizeChannel: 'prize_channel',
      alipayAccountId: 'alipay_account_id',
      prizeType: 'prize_type',
      fullRedPacketAmount: 'full_red_packet_amount',
      examineRedPacketAmount: 'examine_red_packet_amount',
      fullRedPacketTextInfo: 'full_red_packet_text_info',
      certContent: 'cert_content',
      crowdConfig: 'crowd_config',
      draft: 'draft',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      taskName: 'string',
      appId: 'string',
      surveyId: 'string',
      notes: 'string',
      operator: 'string',
      bannerTitle: 'string',
      bannerImageUrls: { 'type': 'array', 'itemType': 'string' },
      questionNum: 'number',
      taskLinkUrl: 'string',
      personDivideContent: 'string',
      cityDivideUrls: { 'type': 'array', 'itemType': 'string' },
      sampleNum: 'number',
      productCodeType: 'string',
      prizeChannel: 'number',
      alipayAccountId: 'string',
      prizeType: 'number',
      fullRedPacketAmount: 'string',
      examineRedPacketAmount: 'string',
      fullRedPacketTextInfo: 'string',
      certContent: 'string',
      crowdConfig: 'string',
      draft: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SubmitAuthTaskResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 任务id
  data?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      data: 'data',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      data: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DetailAuthTaskRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 任务ID
  taskId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      taskId: 'task_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      taskId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DetailAuthTaskResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 历史任务信息
  oldTaskInfo?: OldTaskInfo;
  // 最新的任务信息
  updateTaskInfo?: UpdatedTaskInfo;
  // 是否有未完成的圈人任务
  haveNotFinishedCrowdTask?: boolean;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      oldTaskInfo: 'old_task_info',
      updateTaskInfo: 'update_task_info',
      haveNotFinishedCrowdTask: 'have_not_finished_crowd_task',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      oldTaskInfo: OldTaskInfo,
      updateTaskInfo: UpdatedTaskInfo,
      haveNotFinishedCrowdTask: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateAuthTaskRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 任务ID
  taskId: string;
  // 任务标题(同一个租户不能重复)
  taskName: string;
  // appId
  appId: string;
  // 问卷id(同一个租户不能重复，只能包含字母、数组或者下划线)
  surveyId: string;
  // notes
  notes?: string;
  // 任务调整操作者
  operator: string;
  // banner标题
  bannerTitle: string;
  // banner图片地址（最多支持3张）
  bannerImageUrls?: string[];
  // 题量
  questionNum: number;
  // 任务连接地址
  taskLinkUrl: string;
  // 人群划分描述
  personDivideContent?: string;
  // 城市列表
  cityDivideUrls?: string[];
  // 样本数量
  sampleNum: number;
  // 产品下单code类型（1-资源包 2-后付费）
  productCodeType: string;
  // 奖励渠道（0-手动发支付宝余额 1-海豚红包 2-问卷自带）
  prizeChannel: number;
  // 支付宝账号
  alipayAccountId?: string;
  // 奖励类型（0-定额红包）
  prizeType: number;
  // 全额红包金额（价格在0.01~100），奖励渠道为0和1时
  fullRedPacketAmount: string;
  // 甄别红包金额
  examineRedPacketAmount: string;
  // 全额红包描述，奖励渠道为2时，此处必填
  fullRedPacketTextInfo?: string;
  // 证书内容
  certContent: string;
  // 人群配置
  crowdConfig: string;
  // 是否草稿，1表示草稿
  draft: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      taskId: 'task_id',
      taskName: 'task_name',
      appId: 'app_id',
      surveyId: 'survey_id',
      notes: 'notes',
      operator: 'operator',
      bannerTitle: 'banner_title',
      bannerImageUrls: 'banner_image_urls',
      questionNum: 'question_num',
      taskLinkUrl: 'task_link_url',
      personDivideContent: 'person_divide_content',
      cityDivideUrls: 'city_divide_urls',
      sampleNum: 'sample_num',
      productCodeType: 'product_code_type',
      prizeChannel: 'prize_channel',
      alipayAccountId: 'alipay_account_id',
      prizeType: 'prize_type',
      fullRedPacketAmount: 'full_red_packet_amount',
      examineRedPacketAmount: 'examine_red_packet_amount',
      fullRedPacketTextInfo: 'full_red_packet_text_info',
      certContent: 'cert_content',
      crowdConfig: 'crowd_config',
      draft: 'draft',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      taskId: 'string',
      taskName: 'string',
      appId: 'string',
      surveyId: 'string',
      notes: 'string',
      operator: 'string',
      bannerTitle: 'string',
      bannerImageUrls: { 'type': 'array', 'itemType': 'string' },
      questionNum: 'number',
      taskLinkUrl: 'string',
      personDivideContent: 'string',
      cityDivideUrls: { 'type': 'array', 'itemType': 'string' },
      sampleNum: 'number',
      productCodeType: 'string',
      prizeChannel: 'number',
      alipayAccountId: 'string',
      prizeType: 'number',
      fullRedPacketAmount: 'string',
      examineRedPacketAmount: 'string',
      fullRedPacketTextInfo: 'string',
      certContent: 'string',
      crowdConfig: 'string',
      draft: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateAuthTaskResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CountAuthTaskCrowdRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 任务ID
  taskId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      taskId: 'task_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      taskId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CountAuthTaskCrowdResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 人群预估数量
  crowdCount?: number;
  // 人群导出时间
  bizDate?: string;
  // 生效的圈选人群的设置
  crowdConfigInfo?: string;
  // EXPORTING 导出中
  // SUCCESS 导出成功
  // FAIL 导出失败
  exportStatus?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      crowdCount: 'crowd_count',
      bizDate: 'biz_date',
      crowdConfigInfo: 'crowd_config_info',
      exportStatus: 'export_status',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      crowdCount: 'number',
      bizDate: 'string',
      crowdConfigInfo: 'string',
      exportStatus: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class MatchAuthTaskCrowdRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 用户ID
  userId: string;
  // 任务ID
  taskIds: string[];
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      userId: 'user_id',
      taskIds: 'task_ids',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      userId: 'string',
      taskIds: { 'type': 'array', 'itemType': 'string' },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class MatchAuthTaskCrowdResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 人群匹配结果
  data?: TaskCrowdMatchResp[];
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      data: 'data',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      data: { 'type': 'array', 'itemType': TaskCrowdMatchResp },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryAuthTaskLabelRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 人群标签
  tagCodeList: string[];
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      tagCodeList: 'tag_code_list',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      tagCodeList: { 'type': 'array', 'itemType': 'string' },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryAuthTaskLabelResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 人群标签返回结果
  data?: CrowdTagEnumResp[];
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      data: 'data',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      data: { 'type': 'array', 'itemType': CrowdTagEnumResp },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListAuthTaskRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 任务名称/任务id/自有id 模糊搜索
  taskName?: string;
  // 页码，默认是0开始
  pageNo: number;
  // 每页大小，默认是6
  pageSize: number;
  // 操作人列表
  operators?: string[];
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      taskName: 'task_name',
      pageNo: 'page_no',
      pageSize: 'page_size',
      operators: 'operators',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      taskName: 'string',
      pageNo: 'number',
      pageSize: 'number',
      operators: { 'type': 'array', 'itemType': 'string' },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListAuthTaskResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 任务分页列表返回体
  data?: PageTaskListDTO;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      data: 'data',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      data: PageTaskListDTO,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UnbindAuthEquityRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 权益开通时ISV返回的业务订单号
  outBizNo: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      outBizNo: 'out_biz_no',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      outBizNo: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UnbindAuthEquityResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class RepayAuthEquityRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 权益开通时ISV返回的业务订单号
  outBizNo: string;
  // 需要退款的交易订单号(权益扣款成功后回调消息返回的交易号)
  tradeNo: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      outBizNo: 'out_biz_no',
      tradeNo: 'trade_no',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      outBizNo: 'string',
      tradeNo: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class RepayAuthEquityResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class VerifyAuthTokenValidityRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 用户ID
  userId: string;
  // 授权凭证
  authorizedToken: string;
  // 数据产品类型
  dataType: string;
  // 授权场景码
  sceneCode: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      userId: 'user_id',
      authorizedToken: 'authorized_token',
      dataType: 'data_type',
      sceneCode: 'scene_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      userId: 'string',
      authorizedToken: 'string',
      dataType: 'string',
      sceneCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class VerifyAuthTokenValidityResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 验证结果（ture表示通过，false表示不通过）
  verifyResult?: boolean;
  // 错误信息
  errMsg?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      verifyResult: 'verify_result',
      errMsg: 'err_msg',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      verifyResult: 'boolean',
      errMsg: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class VerifyAuthBusinessUserRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 用户id
  userId: string;
  // 场景码
  sceneCode: string;
  // 用户核验需要的额外信息，根据场景选择是否需要上传
  verifyContent?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      userId: 'user_id',
      sceneCode: 'scene_code',
      verifyContent: 'verify_content',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      userId: 'string',
      sceneCode: 'string',
      verifyContent: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class VerifyAuthBusinessUserResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 用户当前记录状态
  recordType?: string;
  // 加密后的用户授权记录id
  encryptBizId?: string;
  // 授权协议信息列表
  agreementConfigInfoList?: AgreementConfigInfoDTO[];
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      recordType: 'record_type',
      encryptBizId: 'encrypt_biz_id',
      agreementConfigInfoList: 'agreement_config_info_list',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      recordType: 'string',
      encryptBizId: 'string',
      agreementConfigInfoList: { 'type': 'array', 'itemType': AgreementConfigInfoDTO },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SubmitAuthBusinessDataRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 用户id
  userId: string;
  // 场景码
  sceneCode: string;
  // 推送的数据内容，json字符串形式
  pushDataContent: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      userId: 'user_id',
      sceneCode: 'scene_code',
      pushDataContent: 'push_data_content',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      userId: 'string',
      sceneCode: 'string',
      pushDataContent: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SubmitAuthBusinessDataResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 推送是否成功
  pushSuccess?: boolean;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      pushSuccess: 'push_success',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      pushSuccess: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UploadAuthBusinessCardRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 用户id
  userId: string;
  // 运营场景码
  sceneCode: string;
  // 上传证件类型
  fileType: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      userId: 'user_id',
      sceneCode: 'scene_code',
      fileType: 'file_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      userId: 'string',
      sceneCode: 'string',
      fileType: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UploadAuthBusinessCardResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // oss文件上传策略
  presignedUrlPolicy?: PresignedUrlPolicy;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      presignedUrlPolicy: 'presigned_url_policy',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      presignedUrlPolicy: PresignedUrlPolicy,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryAuthVcTransactionRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 查询目标可验证声明的ID
  vcId: string;
  // 业务类型，通常需要与授权宝服务沟通确定，业务类型可能影响此接口内部实现逻辑，长度不超过32字符。
  bizType: string;
  // 如果此字段为空，则默认使用当前请求租户在授权宝配置的did来进行查询(此did需授权有权限)，此外情况都需要指定目标vc_id的owner_did
  // 
  ownerDid?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      vcId: 'vc_id',
      bizType: 'biz_type',
      ownerDid: 'owner_did',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      vcId: 'string',
      bizType: 'string',
      ownerDid: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryAuthVcTransactionResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 链上交易信息
  txInfo?: TxInfo;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      txInfo: 'tx_info',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      txInfo: TxInfo,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AuthAuthBusinessUserRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 加密后的授权记录bizId
  encryptBizId: string;
  // 唯一场景码
  sceneCode: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      encryptBizId: 'encrypt_biz_id',
      sceneCode: 'scene_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      encryptBizId: 'string',
      sceneCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AuthAuthBusinessUserResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 确认授权后生成的授权凭证
  authToken?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      authToken: 'auth_token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      authToken: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryAuthCrowdUploadurlRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 问件类型
  fileType: string;
  // 人群类型：LAST_THREE_MONTHS_SURVEY（排除问卷三个月人群）；LAST_SIX_MONTHS_SURVEY（排除问卷六个月人群）；LAST_THREE_MONTHS_RECRUIT（排除招募三个月人群）LAST_SIX_MONTHS_RECRUIT（排除招募任务六个月人群）
  crowdType: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      fileType: 'file_type',
      crowdType: 'crowd_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      fileType: 'string',
      crowdType: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryAuthCrowdUploadurlResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 上传地址
  uploadUrl?: string;
  // policy
  policy?: string;
  // 签名
  signature?: string;
  // 文件目录
  dir?: string;
  // oss地址
  host?: string;
  // 过期时间
  expire?: string;
  // access_id
  accessId?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      uploadUrl: 'upload_url',
      policy: 'policy',
      signature: 'signature',
      dir: 'dir',
      host: 'host',
      expire: 'expire',
      accessId: 'access_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      uploadUrl: 'string',
      policy: 'string',
      signature: 'string',
      dir: 'string',
      host: 'string',
      expire: 'string',
      accessId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SubmitAuthCrowdUploadRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 上传文件地址
  uploadUrl: string;
  // 人群类型 （1，三个月的问卷人群，2，六个月的问卷人群，3，三个月的招募人群，4，六个月的招募人群）
  crowdType: string;
  // 备注信息
  remark?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      uploadUrl: 'upload_url',
      crowdType: 'crowd_type',
      remark: 'remark',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      uploadUrl: 'string',
      crowdType: 'string',
      remark: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SubmitAuthCrowdUploadResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UploadAuthCertPhotoRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 图片文件类型
  fileType: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      fileType: 'file_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      fileType: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UploadAuthCertPhotoResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // oss文件上传策略
  presignedUrlPolicy?: PresignedUrlPolicy;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      presignedUrlPolicy: 'presigned_url_policy',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      presignedUrlPolicy: PresignedUrlPolicy,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SubmitAuthCarinfoRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 唯一场景码
  sceneCode: string;
  // 用户信息
  userInfo: CarUserInfo;
  // 车辆信息
  carInfo: BasicCarInfo;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      sceneCode: 'scene_code',
      userInfo: 'user_info',
      carInfo: 'car_info',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      sceneCode: 'string',
      userInfo: CarUserInfo,
      carInfo: BasicCarInfo,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SubmitAuthCarinfoResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 推送是否成功
  pushSuccess?: boolean;
  // 传递给活动页面的token
  token?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      pushSuccess: 'push_success',
      token: 'token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      pushSuccess: 'boolean',
      token: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDidCorporateAgentcreateRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 场景码，找dis工作人员进行分配
  bizCode?: string;
  // 扩展字段
  extensionInfo?: string;
  // 所有需要关联的外键，外键必须已did auth key controller的did作为前缀+“sidekey:”+外键
  indexs?: string[];
  // 企业名称
  ownerName?: string;
  // 自定义企业唯一id，企业在自有模式下的唯一号bid的hash值，调用者需要保证其唯一性
  ownerUid: string;
  // 携带自己定义的服务类型
  services?: DidDocServicesInfo[];
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizCode: 'biz_code',
      extensionInfo: 'extension_info',
      indexs: 'indexs',
      ownerName: 'owner_name',
      ownerUid: 'owner_uid',
      services: 'services',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizCode: 'string',
      extensionInfo: 'string',
      indexs: { 'type': 'array', 'itemType': 'string' },
      ownerName: 'string',
      ownerUid: 'string',
      services: { 'type': 'array', 'itemType': DidDocServicesInfo },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDidCorporateAgentcreateResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 生成的did字符串
  did?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      did: 'did',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      did: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDidPersonAgentcreateRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 企业自定信息
  extensionInfo?: string;
  // 所有需要关联的外键，外键必须已did auth key controller的did作为前缀+“sidekey:”+外键
  indexs?: string[];
  // 名称
  ownerName?: string;
  // 唯一号，比如可以是hash(证件类型+企业营业执照号) 计算出来的唯一值等
  ownerUid: string;
  // 携带自己定义的服务类型
  services?: DidDocServicesInfo[];
  // 场景码，找dis工作人员进行分配
  bizCode?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      extensionInfo: 'extension_info',
      indexs: 'indexs',
      ownerName: 'owner_name',
      ownerUid: 'owner_uid',
      services: 'services',
      bizCode: 'biz_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      extensionInfo: 'string',
      indexs: { 'type': 'array', 'itemType': 'string' },
      ownerName: 'string',
      ownerUid: 'string',
      services: { 'type': 'array', 'itemType': DidDocServicesInfo },
      bizCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDidPersonAgentcreateResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 生成的did字符串
  did?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      did: 'did',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      did: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDidCorporateSelfcreateRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 扩展信息
  extension?: string;
  // 公司名称
  ownerName?: string;
  // 携带自己定义的服务类型
  services?: DidDocServicesInfo[];
  // 场景码，找dis工作人员进行分配
  bizCode?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      extension: 'extension',
      ownerName: 'owner_name',
      services: 'services',
      bizCode: 'biz_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      extension: 'string',
      ownerName: 'string',
      services: { 'type': 'array', 'itemType': DidDocServicesInfo },
      bizCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDidCorporateSelfcreateResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 生成的did字符串
  did?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      did: 'did',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      did: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDidPersonSelfcreateRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 扩展字段
  extensionInfo?: string;
  // 由调用者，或者浏览器直接生成
  ownerName?: string;
  // 携带自己定义的服务类型
  // 
  services?: DidDocServicesInfo[];
  // 场景码，找dis工作人员进行分配
  bizCode?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      extensionInfo: 'extension_info',
      ownerName: 'owner_name',
      services: 'services',
      bizCode: 'biz_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      extensionInfo: 'string',
      ownerName: 'string',
      services: { 'type': 'array', 'itemType': DidDocServicesInfo },
      bizCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDidPersonSelfcreateResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 生成的did字符串
  did?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      did: 'did',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      did: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDidVerifiableclaimIssureRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 颁发证书声明
  bareClaim: BareClaim;
  // 过期时间
  expire: number;
  // 由谁来颁发，该did必须为调用者自己或者自己代理的did
  issuer: string;
  // 为哪个did颁发
  subject: string;
  // 验证声明类型，目前默认VerifiableCredential
  type?: string[];
  // 验证声明状态方式，目前只支持直接通过声明id上链查找状态方式，后续会支持更多方式
  verifyStatusType?: string;
  // 场景码，找dis工作人员进行分配
  bizCode?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bareClaim: 'bare_claim',
      expire: 'expire',
      issuer: 'issuer',
      subject: 'subject',
      type: 'type',
      verifyStatusType: 'verify_status_type',
      bizCode: 'biz_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bareClaim: BareClaim,
      expire: 'number',
      issuer: 'string',
      subject: 'string',
      type: { 'type': 'array', 'itemType': 'string' },
      verifyStatusType: 'string',
      bizCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDidVerifiableclaimIssureResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 可验证声明的完整声明 {"content":{"verion":"0.7.0","issuer":"xxxx","subject":"xxxx","expire":1530735444,"issucanceDate":1530735000,"id":"XXXX","claim":{//用户自定义},"status":{"type":"XXXX","id":"XXXXX"}},"proof":{"type":"ecdsa","created":"2018-06-18T21:19:10Z","verificationMethod":"XXXX","signatureValue":"XXXXX"}}
  verifiableClaimContent?: string;
  // 声明id
  verifiableClaimId?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      verifiableClaimContent: 'verifiable_claim_content',
      verifiableClaimId: 'verifiable_claim_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      verifiableClaimContent: 'string',
      verifiableClaimId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDidVerifiableclaimVerifierRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 用于零知识证明类型的可验证声明的验证。index是对应于完整VC的一个json字符串，其中key值保持和原始VC一致，value如果是1表示verificate_claim对应key携带的是对应field的原始值，而如果Key的value是0表示verificate_claim对应key携带的是对应field的merkle root值。
  indexs?: string;
  // 可验证声明
  verifiableClaim: string;
  // 场景码，找dis工作人员进行分配
  bizCode?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      indexs: 'indexs',
      verifiableClaim: 'verifiable_claim',
      bizCode: 'biz_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      indexs: 'string',
      verifiableClaim: 'string',
      bizCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDidVerifiableclaimVerifierResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryDidDocRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 请求者did
  did: string;
  // 场景码，找dis工作人员进行分配
  bizCode?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      did: 'did',
      bizCode: 'biz_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      did: 'string',
      bizCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryDidDocResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // did对应的doc
  doc?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      doc: 'doc',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      doc: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateDidVerifiableclaimStatusRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 场景码，找dis工作人员进行分配
  bizCode?: string;
  // 希望可验证声明的状态， 0无效，1生效
  status: string;
  // 可验证声明id
  vcId: string;
  // 该VC的颁发者
  issuerDid?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizCode: 'biz_code',
      status: 'status',
      vcId: 'vc_id',
      issuerDid: 'issuer_did',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizCode: 'string',
      status: 'string',
      vcId: 'string',
      issuerDid: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateDidVerifiableclaimStatusResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateDidCorporateExtensionserviceRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 需要更新的did doc对应的did字段；该did必须为调用者自己的did，或者托管给调用者的did
  did: string;
  // 修改后的全量扩展字段
  extension: string;
  // 场景码，找dis工作人员进行分配
  bizCode?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      did: 'did',
      extension: 'extension',
      bizCode: 'biz_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      did: 'string',
      extension: 'string',
      bizCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateDidCorporateExtensionserviceResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDidCorporateCustomerservicetypeRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 自定义的扩展服务类型
  serviceTypes: DidServiceType[];
  // 场景码，找dis工作人员进行分配
  bizCode?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      serviceTypes: 'service_types',
      bizCode: 'biz_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      serviceTypes: { 'type': 'array', 'itemType': DidServiceType },
      bizCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDidCorporateCustomerservicetypeResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDidCertificationThreemetaRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 身份证号码
  // 
  certNo: string;
  // 证书的subject did，不给此参数时候三要素验证不颁发vc
  // 
  did?: string;
  // 手机号码
  // 
  mobile: string;
  // 姓名
  name: string;
  // 场景码，找dis工作人员进行分配
  bizCode?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      certNo: 'cert_no',
      did: 'did',
      mobile: 'mobile',
      name: 'name',
      bizCode: 'biz_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      certNo: 'string',
      did: 'string',
      mobile: 'string',
      name: 'string',
      bizCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDidCertificationThreemetaResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // vc id，可通过该字符串来查询vc具体内容
  // 
  vcId?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      vcId: 'vc_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      vcId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDidCertificationTwometaRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 身份证号码
  certNo: string;
  // 颁发证书的subject did
  did: string;
  // 姓名
  name: string;
  // 场景码，找dis工作人员进行分配
  bizCode?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      certNo: 'cert_no',
      did: 'did',
      name: 'name',
      bizCode: 'biz_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      certNo: 'string',
      did: 'string',
      name: 'string',
      bizCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDidCertificationTwometaResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // vc id，可通过该字符串来查询vc具体内容
  vcId?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      vcId: 'vc_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      vcId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryDidVcRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // vc id，可通过该字符串来查询vc具体内容
  vcId: string;
  // 验证者id
  verifierDid?: string;
  // 场景码，找dis工作人员进行分配
  bizCode?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      vcId: 'vc_id',
      verifierDid: 'verifier_did',
      bizCode: 'biz_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      vcId: 'string',
      verifierDid: 'string',
      bizCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryDidVcResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 可验证声明的完整声明 {"content":{"verion":"0.7.0","issuer":"xxxx","subject":"xxxx","expire":1530735444,"issucanceDate":1530735000,"id":"XXXX","claim":{//用户自定义},"status":{"type":"XXXX","id":"XXXXX"}},"proof":{"type":"ecdsa","created":"2018-06-18T21:19:10Z","verificationMethod":"XXXX","signatureValue":"XXXXX"}}
  vcContent?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      vcContent: 'vc_content',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      vcContent: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDidIdentificationFaceauthRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 认证类型,枚举值 PC_AUTH、APP_AUTH
  authType: string;
  // 颁发证书的subject did
  did: string;
  // 用户身份信息
  identityParam: IdentityParam;
  // 认证接口回调路径，POST接口 请求示例： { "certifyId":"0242de204e1a2c3ed6ee5e21d8a57a4c", "did":"xxxxx","vcId":"xxxxx" }
  returnUrl?: string;
  // 场景码，找dis工作人员进行分配
  bizCode?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      authType: 'auth_type',
      did: 'did',
      identityParam: 'identity_param',
      returnUrl: 'return_url',
      bizCode: 'biz_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      authType: 'string',
      did: 'string',
      identityParam: IdentityParam,
      returnUrl: 'string',
      bizCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDidIdentificationFaceauthResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 认证ID
  certifyId?: string;
  // 二维码URL，用户支付宝扫一扫实人认证
  certifyUrl?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      certifyId: 'certify_id',
      certifyUrl: 'certify_url',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      certifyId: 'string',
      certifyUrl: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryDidIdentificationFaceauthRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 认证ID，用于查询认证结果
  certifyId: string;
  // 场景码，找dis工作人员进行分配
  bizCode?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      certifyId: 'certify_id',
      bizCode: 'biz_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      certifyId: 'string',
      bizCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryDidIdentificationFaceauthResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // vc id，可通过该字符串来查询vc具体内容
  vcId?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      vcId: 'vc_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      vcId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDidNotificationConsumerRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  //  事件发生时的回调路径，必须满足：
  // metho：POST
  // Content-Type：application/json
  callBackUrl: string;
  // 关注的did；这个did必须是调用者自己的did，也可以是托管给调用者的did
  did: string;
  // 1 所有相关事件， 
  // 2 所有相关did事件，
  // 3 所有相关vc事件，
  type: number;
  // 场景码，找dis工作人员进行分配
  bizCode?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      callBackUrl: 'call_back_url',
      did: 'did',
      type: 'type',
      bizCode: 'biz_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      callBackUrl: 'string',
      did: 'string',
      type: 'number',
      bizCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDidNotificationConsumerResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 分配的消费者id，当需要重新注册时，需要使用这个consumer_id;
  consumerId?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      consumerId: 'consumer_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      consumerId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class RebootDidNotificationConsumerRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // method： POST
  // applicatoin/json
  callBackUrl: string;
  // 注册是得到的consumer_id
  consumerId: string;
  // 重新从哪个高度开始同步信息，目前did messager只保留1周之内的数据，所以这个高度如果早于一周，会返回异常。
  restartBlockHeight: number;
  // 场景码，找dis工作人员进行分配
  bizCode?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      callBackUrl: 'call_back_url',
      consumerId: 'consumer_id',
      restartBlockHeight: 'restart_block_height',
      bizCode: 'biz_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      callBackUrl: 'string',
      consumerId: 'string',
      restartBlockHeight: 'number',
      bizCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class RebootDidNotificationConsumerResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 如果成功，会返回consumer_id
  consumerId?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      consumerId: 'consumer_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      consumerId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InitDidCorporateDirectRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 扩展字段
  extension?: string;
  // owner名
  ownerName?: string;
  // 租户自有用户的唯1号，每个owner_uid只能申请一个did
  ownerUid: string;
  // 公钥
  publicKey: string;
  // did doc service信息列表
  services?: DisServicesInfo[];
  // 场景码，找dis工作人员进行分配
  bizCode?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      extension: 'extension',
      ownerName: 'owner_name',
      ownerUid: 'owner_uid',
      publicKey: 'public_key',
      services: 'services',
      bizCode: 'biz_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      extension: 'string',
      ownerName: 'string',
      ownerUid: 'string',
      publicKey: 'string',
      services: { 'type': 'array', 'itemType': DisServicesInfo },
      bizCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InitDidCorporateDirectResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // did
  did?: string;
  // did doc content
  doc?: string;
  // 后续did doc上链需要使用私钥对这个hash值进行签名
  hash?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      did: 'did',
      doc: 'doc',
      hash: 'hash',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      did: 'string',
      doc: 'string',
      hash: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class PushDidCorporateDirectRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // did
  did: string;
  // did doc json string
  doc: string;
  // 对hash进行签名后接字符串
  signData: string;
  // 场景码，找dis工作人员进行分配
  bizCode?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      did: 'did',
      doc: 'doc',
      signData: 'sign_data',
      bizCode: 'biz_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      did: 'string',
      doc: 'string',
      signData: 'string',
      bizCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class PushDidCorporateDirectResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InitDidCorporateIdentityRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 扩展字段
  extensionInfo?: string;
  // 持有者名字
  ownerName?: string;
  // 用户在租户下的唯一ID
  ownerUid: string;
  // 场景码，找dis工作人员进行分配
  bizCode?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      extensionInfo: 'extension_info',
      ownerName: 'owner_name',
      ownerUid: 'owner_uid',
      bizCode: 'biz_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      extensionInfo: 'string',
      ownerName: 'string',
      ownerUid: 'string',
      bizCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InitDidCorporateIdentityResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // did
  did?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      did: 'did',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      did: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDidAgentChallengeresponseRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 场景码，找dis工作人员进行分配
  bizCode?: string;
  // 一段auth challenge明文，即需要被计算签名的明文
  challengeRequest: string;
  // 指定的did，该did必须是租户自己，或托管给租户的did
  did: string;
  // 0 原始字符串，1 hash值
  challengeType?: number;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizCode: 'biz_code',
      challengeRequest: 'challenge_request',
      did: 'did',
      challengeType: 'challenge_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizCode: 'string',
      challengeRequest: 'string',
      did: 'string',
      challengeType: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDidAgentChallengeresponseResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // {
  //   __challenge":xxxx, //待签名的明文
  //   “expired”：xxxx,//签名有效时间
  //   “sign”：xxxx，//对上述字段进行的签名
  // }
  signData?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      signData: 'sign_data',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      signData: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDidAgentVerifyauthresponseRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // { __challenge":xxxx, //待签名的明文
  //  “expired”：xxxx,//签名有效时间 
  // “sign”：xxxx，//对上述字段进行的签名
  // }
  authResponse: string;
  // 待验证的did
  did: string;
  // 场景码，找dis工作人员进行分配
  bizCode?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      authResponse: 'auth_response',
      did: 'did',
      bizCode: 'biz_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      authResponse: 'string',
      did: 'string',
      bizCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDidAgentVerifyauthresponseResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDidCertificationMaskRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 身份证号码
  certNo: string;
  // 颁发证书的subject did
  did: string;
  // 手机号码
  mobile: string;
  // 姓名
  name: string;
  // 场景码，找dis工作人员进行分配
  bizCode?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      certNo: 'cert_no',
      did: 'did',
      mobile: 'mobile',
      name: 'name',
      bizCode: 'biz_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      certNo: 'string',
      did: 'string',
      mobile: 'string',
      name: 'string',
      bizCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDidCertificationMaskResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // vc id，可通过该字符串来查询vc具体内容
  vcId?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      vcId: 'vc_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      vcId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class OpenDidAdminServiceRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 场景码，找dis工作人员进行分配
  bizCode?: string;
  // 账户接入公钥
  disAccessKey?: string;
  // 扩展字段
  specification?: string;
  // 租户id
  tenantId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizCode: 'biz_code',
      disAccessKey: 'dis_access_key',
      specification: 'specification',
      tenantId: 'tenant_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizCode: 'string',
      disAccessKey: 'string',
      specification: 'string',
      tenantId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class OpenDidAdminServiceResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 分配给该租户的访问密钥
  disAccessKey?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      disAccessKey: 'dis_access_key',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      disAccessKey: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StopDidAdminServiceRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 场景码，找dis工作人员进行分配
  bizCode?: string;
  // 扩展字段
  specification?: string;
  // 指定租户
  tenantId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizCode: 'biz_code',
      specification: 'specification',
      tenantId: 'tenant_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizCode: 'string',
      specification: 'string',
      tenantId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StopDidAdminServiceResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDidSignatureAgentRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 场景码，找dis工作人员进行分配
  bizCode?: string;
  // 需要进行签名的字符串
  data: string;
  // 0 原始数据
  // 1 hash值
  dataType?: number;
  // 需要进行代理签名的did
  did: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizCode: 'biz_code',
      data: 'data',
      dataType: 'data_type',
      did: 'did',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizCode: 'string',
      data: 'string',
      dataType: 'number',
      did: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDidSignatureAgentResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 签名之后的结果
  signature?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      signature: 'signature',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      signature: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CheckDidSignRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 需要验签的字符串
  checkData: string;
  // 对字符串签名的did
  did: string;
  // 签名后的字符串
  signature: string;
  // 场景码，找dis工作人员进行分配
  bizCode?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      checkData: 'check_data',
      did: 'did',
      signature: 'signature',
      bizCode: 'biz_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      checkData: 'string',
      did: 'string',
      signature: 'string',
      bizCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CheckDidSignResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDidZkpverifiableclaimVisibilityRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // vc颁发者
  issuer: string;
  // 哪些字段将被展示。
  // 如果父路径和子路径都被包含，那么将以最上级路径为准，展示上级路径对应的内容
  path: string[];
  // vc完整原文
  vc: string;
  // 场景码，找dis工作人员进行分配
  bizCode?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      issuer: 'issuer',
      path: 'path',
      vc: 'vc',
      bizCode: 'biz_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      issuer: 'string',
      path: { 'type': 'array', 'itemType': 'string' },
      vc: 'string',
      bizCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDidZkpverifiableclaimVisibilityResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 索引字段，标示哪些字段是原始值，哪些字段是hash值
  index?: string;
  // 被隐藏了部分内容的VC内容
  vcView?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      index: 'index',
      vcView: 'vc_view',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      index: 'string',
      vcView: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDidAgentSidekeyRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 指定did进行外键关联
  did: string;
  // 所有需要关联的外键，外键必须已did auth key controller的did作为前缀+“sidekey:”+外键
  indexs: string[];
  // 场景码，找dis工作人员进行分配
  bizCode?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      did: 'did',
      indexs: 'indexs',
      bizCode: 'biz_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      did: 'string',
      indexs: { 'type': 'array', 'itemType': 'string' },
      bizCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDidAgentSidekeyResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateDidAgentSidekeyRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 新增的外键
  addIndexs?: string[];
  // 去掉哪些外键
  deleteIndexs?: string[];
  // 指定did进行外键关联
  did: string;
  // 场景码，找dis工作人员进行分配
  bizCode?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      addIndexs: 'add_indexs',
      deleteIndexs: 'delete_indexs',
      did: 'did',
      bizCode: 'biz_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      addIndexs: { 'type': 'array', 'itemType': 'string' },
      deleteIndexs: { 'type': 'array', 'itemType': 'string' },
      did: 'string',
      bizCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateDidAgentSidekeyResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDidCorporateAgentcreatewithsidekeyRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // {
  //     "自定义服务相关字段": 自定义字符串,
  //     "nation": "CN",
  //     "type": "LimitedCompany",
  //     "name": "演示用户名",
  //     "licenceNo": "1111",
  //     "address": "1111",
  //     "parentName": "演示直连公司",
  //     "linkType": "indirect",
  //     "certifyDate": "2019-1-1",
  //     "licenceExpireDate": "2020-1-1",
  //     "businessScope": "1111",
  //     "businessAddress": "1111",
  //     "corporateBusinessType": 0
  // }
  extensionInfo?: string;
  // 所有需要关联的外键，外键必须已did auth key controller的did作为前缀+“sidekey:”+外键
  indexs: string[];
  // 企业名称
  ownerName?: string;
  // 自定义企业唯一id，企业在自有模式下的唯一号bid的has...
  ownerUid: string;
  // 场景码，找dis工作人员进行分配
  bizCode?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      extensionInfo: 'extension_info',
      indexs: 'indexs',
      ownerName: 'owner_name',
      ownerUid: 'owner_uid',
      bizCode: 'biz_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      extensionInfo: 'string',
      indexs: { 'type': 'array', 'itemType': 'string' },
      ownerName: 'string',
      ownerUid: 'string',
      bizCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDidCorporateAgentcreatewithsidekeyResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 生成的did字符串
  did?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      did: 'did',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      did: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateDidCorporateExtensionservicewithsidekeyRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 新增的外键
  addIndexs?: string[];
  // 去掉哪些外键
  deleteIndexs?: string[];
  // 需要更新的did doc对应的did字段；该did必须为调用者自己的did，或者托管给调用者的did
  did: string;
  // 修改后的全量扩展字段
  extension: string;
  // 场景码，找dis工作人员进行分配
  bizCode?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      addIndexs: 'add_indexs',
      deleteIndexs: 'delete_indexs',
      did: 'did',
      extension: 'extension',
      bizCode: 'biz_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      addIndexs: { 'type': 'array', 'itemType': 'string' },
      deleteIndexs: { 'type': 'array', 'itemType': 'string' },
      did: 'string',
      extension: 'string',
      bizCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateDidCorporateExtensionservicewithsidekeyResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryDidDocSidekeyRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 是否需要分页返回
  needPage?: boolean;
  // 按分页查询
  pageNum?: number;
  // 前缀+z40_uid
  sideKey: string;
  // 通过外键查询did，需要以下条件之一：
  // 1. 查询者为外键前缀对应的did；
  // 2. 查询者能够提供外键前缀对应的did的授权vc。
  verifiableClaim?: string;
  // 场景码，找dis工作人员进行分配
  bizCode?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      needPage: 'need_page',
      pageNum: 'page_num',
      sideKey: 'side_key',
      verifiableClaim: 'verifiable_claim',
      bizCode: 'biz_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      needPage: 'boolean',
      pageNum: 'number',
      sideKey: 'string',
      verifiableClaim: 'string',
      bizCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryDidDocSidekeyResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // side可以查找到的所有did doc数组，以json方式输出
  doc?: string;
  // 总个数
  totalNum?: number;
  // 总页数
  totalPage?: number;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      doc: 'doc',
      totalNum: 'total_num',
      totalPage: 'total_page',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      doc: 'string',
      totalNum: 'number',
      totalPage: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDidPersonAgentcreatewithsidekeyRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // { "自定义服务相关字段": 自定义字符串, "nation": "CN", "certType": "身份证", "name": "演示用户名", "certNo": "1111"}
  extensionInfo?: string;
  // 所有需要关联的外键，外键必须已did auth key controller的did作为前缀+“sidekey:”+外键
  indexs: string[];
  // 个人名称
  ownerName?: string;
  // 自定义企业唯一id，企业在自有模式下的唯一号bid的has...
  ownerUid: string;
  // 场景码，找dis工作人员进行分配
  bizCode?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      extensionInfo: 'extension_info',
      indexs: 'indexs',
      ownerName: 'owner_name',
      ownerUid: 'owner_uid',
      bizCode: 'biz_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      extensionInfo: 'string',
      indexs: { 'type': 'array', 'itemType': 'string' },
      ownerName: 'string',
      ownerUid: 'string',
      bizCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDidPersonAgentcreatewithsidekeyResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 生成的did字符串
  did?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      did: 'did',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      did: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDidIotAgentcreateRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // { "自定义服务相关字段": 自定义字符串, "type": "IOT设备类型", "name": "演示用户名", "licenceNo": "设备唯一号", "address": "1111" }
  extensionInfo?: string;
  // 所有需要关联的外键，外键必须已did auth key controller的did作为前缀+“sidekey:”+外键
  indexs?: string[];
  // 企业名称
  ownerName?: string;
  // 自定义企业唯一id，企业在自有模式下的唯一号bid的has...
  ownerUid: string;
  // 携带自己定义的服务类型
  // 
  services?: DidDocServicesInfo[];
  // 场景码，找dis工作人员进行分配
  bizCode?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      extensionInfo: 'extension_info',
      indexs: 'indexs',
      ownerName: 'owner_name',
      ownerUid: 'owner_uid',
      services: 'services',
      bizCode: 'biz_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      extensionInfo: 'string',
      indexs: { 'type': 'array', 'itemType': 'string' },
      ownerName: 'string',
      ownerUid: 'string',
      services: { 'type': 'array', 'itemType': DidDocServicesInfo },
      bizCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDidIotAgentcreateResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 生成的did字符串
  did?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      did: 'did',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      did: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDidIotAgentcreatewithsidekeyRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // { "自定义服务相关字段": 自定义字符串, "type": "IOT设备类型", "name": "演示用户名", "licenceNo": "设备唯一号", "address": "1111" }
  extensionInfo?: string;
  // 所有需要关联的外键，外键必须已did auth key controller的did作为前缀+“sidekey:”+外键
  indexs: string[];
  // iot设备名
  ownerName?: string;
  // 自定义企业唯一id，企业在自有模式下的唯一号bid的has...
  ownerUid: string;
  // 场景码，找dis工作人员进行分配
  bizCode?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      extensionInfo: 'extension_info',
      indexs: 'indexs',
      ownerName: 'owner_name',
      ownerUid: 'owner_uid',
      bizCode: 'biz_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      extensionInfo: 'string',
      indexs: { 'type': 'array', 'itemType': 'string' },
      ownerName: 'string',
      ownerUid: 'string',
      bizCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDidIotAgentcreatewithsidekeyResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 生成的iot did字符串
  did?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      did: 'did',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      did: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateDidIotExtensionservicewithsidekeyRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 新增的外键
  addIndexs?: string[];
  // 去掉哪些外键
  deleteIndexs?: string[];
  // 需要更新的did doc对应的did字段；该did必须为调用者自己的did，或者托管给调用者的did
  did: string;
  // 修改后的全量扩展字段
  extension: string;
  // 场景码，找dis工作人员进行分配
  bizCode?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      addIndexs: 'add_indexs',
      deleteIndexs: 'delete_indexs',
      did: 'did',
      extension: 'extension',
      bizCode: 'biz_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      addIndexs: { 'type': 'array', 'itemType': 'string' },
      deleteIndexs: { 'type': 'array', 'itemType': 'string' },
      did: 'string',
      extension: 'string',
      bizCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateDidIotExtensionservicewithsidekeyResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateDidPersonExtensionservicewithsidekeyRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 新增的外键
  addIndexs?: string[];
  // 去掉哪些外键
  deleteIndexs?: string[];
  // 需要更新的did doc对应的did字段；该did必须为调用者自己的did，或者托管给调用者的did
  did: string;
  // 修改后的全量扩展字段
  // 
  extension?: string;
  // 场景码，找dis工作人员进行分配
  bizCode?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      addIndexs: 'add_indexs',
      deleteIndexs: 'delete_indexs',
      did: 'did',
      extension: 'extension',
      bizCode: 'biz_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      addIndexs: { 'type': 'array', 'itemType': 'string' },
      deleteIndexs: { 'type': 'array', 'itemType': 'string' },
      did: 'string',
      extension: 'string',
      bizCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateDidPersonExtensionservicewithsidekeyResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDidPersonWiththreemetaRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 身份证号码
  certNo: string;
  // 扩展字段
  extensionInfo?: string;
  // 手机号码
  mobile: string;
  // 姓名
  name: string;
  // 名称
  ownerName?: string;
  // 自定义个人唯一id，个人在自有模式下的唯一号，调用者需要保证其唯一性 
  ownerUid: string;
  // 场景码，找dis工作人员进行分配
  bizCode?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      certNo: 'cert_no',
      extensionInfo: 'extension_info',
      mobile: 'mobile',
      name: 'name',
      ownerName: 'owner_name',
      ownerUid: 'owner_uid',
      bizCode: 'biz_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      certNo: 'string',
      extensionInfo: 'string',
      mobile: 'string',
      name: 'string',
      ownerName: 'string',
      ownerUid: 'string',
      bizCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDidPersonWiththreemetaResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 生成的did字符串
  did?: string;
  // 颁发的vcId
  vcId?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      did: 'did',
      vcId: 'vc_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      did: 'string',
      vcId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDidCorporateWiththreemetaRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 企业名称
  epCertName: string;
  // 企业证件号
  epCertNo: string;
  // { "nation": "CN", //企业注册地址 "type": "LimitedCompany", //企业类型 "name": "演示用户名", //必选字段，企业名 "licenceNo": "1111", //营业执照 "address": "1111", //企业地址 "parentName": "", //<-必选字段 业务方名 需要提前协商 "linkType": "indirect", //<- 连接类型，direct直链企业， indirect间链企业 "certifyDate": "2019-1-1", //证书颁发时间 "licenceExpireDate": "2020-1-1", //证书到期时间 "businessScope": "1111", //企业经营范围 "businessAddress": "1111", //企业经营地址 "corporateBusinessType": 0, //<- 企业类型：0 一般企业， 1 个人商户 "channelName": "" //<- 必选字段 业务渠道 需要提前沟通 }
  extensionInfo?: string;
  // 法人姓名
  legalPersonCertName: string;
  // 名称
  ownerName?: string;
  // 自定义企业唯一id，企业在自有模式下的唯一号，调用者需要保证其唯一性
  ownerUid: string;
  // 场景码，找dis工作人员进行分配
  bizCode?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      epCertName: 'ep_cert_name',
      epCertNo: 'ep_cert_no',
      extensionInfo: 'extension_info',
      legalPersonCertName: 'legal_person_cert_name',
      ownerName: 'owner_name',
      ownerUid: 'owner_uid',
      bizCode: 'biz_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      epCertName: 'string',
      epCertNo: 'string',
      extensionInfo: 'string',
      legalPersonCertName: 'string',
      ownerName: 'string',
      ownerUid: 'string',
      bizCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDidCorporateWiththreemetaResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 生成的did
  did?: string;
  // 颁发的vcId
  vcId?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      did: 'did',
      vcId: 'vc_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      did: 'string',
      vcId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDidVcrepositoryIssueRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 配置此列表，则说明需要DIS对证书声明内容加密处理，并且控制访问权限，此列表为初始配置的did名单，拥有对此颁发证书的读取权限。
  // 如果不配置此列表，则DIS默认将明文存储此证书，任何did都可以访问此证书声明内容。
  // 
  authDidList?: string[];
  // 颁发证书声明的原始声明内容，其中claim字段为json格式
  bareClaim: BareClaim;
  // 过期时间，如果用不过期可以设置为：-1。
  // 注意如果证书过期，则无法再通过VC Repository读取访问此证书内容。
  expire: number;
  // 颁发证书方，该did必须为调用者自己或者自己代理的did。
  // 
  issuer: string;
  // 1 - 指定id将被按照verifiable_claim_id = "vc:mychain:" + SHA256(Joiner.on(":").join(subject, verifiable_claim_id.substring(0,50)))+verifiable_claim_id.substring(50);此表达式参与SHA256的 verifiable_claim_id 为用户指定的参数。
  specifiedClaimIdType?: number;
  // 颁发证书的目标did，此目标did将拥有存储到VC Repository的数据管控权限，比如：授权给其它did读取此证书的权限。
  subject: string;
  // 通过层级定义的证书类型说明，在使用VC Repository的情况下默认为：["VerifiableCredential","DelegateVCRepository"]。
  // 如果用户希望通过type来过滤读取证书VC，那么可以在此列表后面追加层次定义说明，方便后续读取证书在VC Repository进行过滤。（如果读取方已知verifiable_claim_id可以直接过滤读取）
  type?: string[];
  // 如果指定，最终会使用此id会参与生成的证书的verifiable_claim_id，但是调用方需要保证设置值的唯一性，重复的id会引起最终verifiable_claim_id重复，导致被拒绝颁发证书。
  // 如果不指定，则会随机生成一个规范的verifiable_claim_id。
  // verifiable_claim_id = "vc:mychain:" + SHA256(Joiner.on(":").join(subject, verifiable_claim_id)); 此表达式参与SHA256的 verifiable_claim_id 为用户指定的参数。
  verifiableClaimId?: string;
  // 验证声明状态方式，目前只支持直接通过声明id上链查找状态方式，后续会支持更多方式
  verifyStatusType?: string;
  // 场景码，找dis工作人员进行分配
  bizCode?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      authDidList: 'auth_did_list',
      bareClaim: 'bare_claim',
      expire: 'expire',
      issuer: 'issuer',
      specifiedClaimIdType: 'specified_claim_id_type',
      subject: 'subject',
      type: 'type',
      verifiableClaimId: 'verifiable_claim_id',
      verifyStatusType: 'verify_status_type',
      bizCode: 'biz_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      authDidList: { 'type': 'array', 'itemType': 'string' },
      bareClaim: BareClaim,
      expire: 'number',
      issuer: 'string',
      specifiedClaimIdType: 'number',
      subject: 'string',
      type: { 'type': 'array', 'itemType': 'string' },
      verifiableClaimId: 'string',
      verifyStatusType: 'string',
      bizCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDidVcrepositoryIssueResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 可验证声明的完整声明 {"content":{"verion":"0.7.0","issuer":"xxxx","subject":"xxxx","expire":1530735444,"issucanceDate":1530735000,"id":"XXXX","claim":{//用户自定义},"status":{"type":"XXXX","id":"XXXXX"}},"proof":{"type":"ecdsa","created":"2018-06-18T21:19:10Z","verificationMethod":"XXXX","signatureValue":"XXXXX"}}
  verifiableClaimContent?: string;
  // 颁发的证书唯一id，颁发成功后返回。
  verifiableClaimId?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      verifiableClaimContent: 'verifiable_claim_content',
      verifiableClaimId: 'verifiable_claim_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      verifiableClaimContent: 'string',
      verifiableClaimId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDidVcrepositoryReadRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 请求读取数据的did。
  did: string;
  // 配合owner_did字段一起使用，指定查询目标VC时的过滤字段（可是标准VC内容的字段），指定此字段后，配合需指定filter_value字段。
  filterField?: string;
  // 配合filter_field字段，设定具体过滤VC的使用的值，示例说明是在使用`type`字段过滤VC时候的样例。
  filterValue?: string;
  // 如果没有配置参数verifiable_claim_id，则只能通过制定subject_did、issuer_did和filter参数来查找目标VC内容。 因此只有在调用方未知verifiable_claim_id的情况下，才需要配置此参数。
  issuerDid?: string;
  // 保留字段，请求读的did身份对应公钥对所有数据参数的签名（目前托管模式可缺省此字段，未来非托管时需请求端签名，需填此字段）
  signature?: string;
  // 如果没有配置参数verifiable_claim_id，则只能通过制定subject_did、issuer_did和filter参数来查找目标VC内容。
  // 因此只有在调用方未知verifiable_claim_id的情况下，才需要配置此参数。
  subjectDid?: string;
  // 调用方如果已知目标VC的verifiable_claim_id，建议通过配置此参数来读取目标VC内容，并且不需要配置subject_did、issuer_did和 filter相关参数。
  // 注意如果不配置此字段，则必须配置subject_did, issuer_did, filter_field, filter_value 字段。
  // 注意：如果此字段不是"vc:mychain:"前缀开头，则会使用如下规则生成：
  // verifiable_claim_id = "vc:mychain:" + SHA256(Joiner.on(":").join(issuer_did, subject_did, verifiable_claim_id)); 此表达式参与SHA256的 verifiable_claim_id 为用户指定的参数。
  verifiableClaimId?: string;
  // 场景码，找dis工作人员进行分配
  bizCode?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      did: 'did',
      filterField: 'filter_field',
      filterValue: 'filter_value',
      issuerDid: 'issuer_did',
      signature: 'signature',
      subjectDid: 'subject_did',
      verifiableClaimId: 'verifiable_claim_id',
      bizCode: 'biz_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      did: 'string',
      filterField: 'string',
      filterValue: 'string',
      issuerDid: 'string',
      signature: 'string',
      subjectDid: 'string',
      verifiableClaimId: 'string',
      bizCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDidVcrepositoryReadResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 可验证声明的完整声明 {"content":{"verion":"0.7.0","issuer":"xxxx","subject":"xxxx","expire":1530735444,"issucanceDate":1530735000,"id":"XXXX","claim":{//用户自定义},"status":{"type":"XXXX","id":"XXXXX"}},"proof":{"type":"ecdsa","created":"2018-06-18T21:19:10Z","verificationMethod":"XXXX","signatureValue":"XXXXX"}}
  verifiableClaimContent?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      verifiableClaimContent: 'verifiable_claim_content',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      verifiableClaimContent: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDidVcrepositoryAuthRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 配置此did列表，为这些did分配读取目标VC的权限，如果目标VC存储时是明文存储，则操作失败（无需做此权限管控）。
  authDidList: string[];
  // 场景码，找dis工作人员进行分配
  bizCode?: string;
  // 目标VC的owner，也就是VC内容中的subject身份。
  did: string;
  // 指定查询目标VC时的过滤字段（可是标准VC内容的field），指定此字段后，配合需指定filter_value字段。
  filterField: string;
  // ["VerifiableCredential","DelegateVCRepository","LocationInfo"]
  filterValue?: string;
  // 保留字段，请求增加授权的调用方did身份对应公钥对所有数据参数的签名（目前托管模式可缺省此字段，未来非托管时需请求端签名，需填此字段）
  signature?: string;
  // 读取目标证书VC的id，通过配置此参数可以直接找到目标VC。
  verifiableClaimId?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      authDidList: 'auth_did_list',
      bizCode: 'biz_code',
      did: 'did',
      filterField: 'filter_field',
      filterValue: 'filter_value',
      signature: 'signature',
      verifiableClaimId: 'verifiable_claim_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      authDidList: { 'type': 'array', 'itemType': 'string' },
      bizCode: 'string',
      did: 'string',
      filterField: 'string',
      filterValue: 'string',
      signature: 'string',
      verifiableClaimId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDidVcrepositoryAuthResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDidVcrepositoryFilterandreadRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 请求读取数据的did。
  did: string;
  // 配合owner_did字段一起使用，指定查询目标VC时的过滤字段（可是标准VC内容的字段），指定此字段后，配合需指定filter_value字段。
  filterField: string;
  // ["VerifiableCredential","DelegateVCRepository","LocationInfo"]
  filterValue: string;
  // 保留字段，请求读的did身份对应公钥对所有数据参数的签名（目前托管模式可缺省此字段，未来非托管时需请求端签名，需填此字段）
  signature?: string;
  // 目标VC的subject字段，参与过滤条件。
  subjectDid: string;
  // 场景码，找dis工作人员进行分配
  bizCode?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      did: 'did',
      filterField: 'filter_field',
      filterValue: 'filter_value',
      signature: 'signature',
      subjectDid: 'subject_did',
      bizCode: 'biz_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      did: 'string',
      filterField: 'string',
      filterValue: 'string',
      signature: 'string',
      subjectDid: 'string',
      bizCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDidVcrepositoryFilterandreadResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 可验证声明的完整声明 {"content":{"verion":"0.7.0","issuer":"xxxx","subject":"xxxx","expire":1530735444,"issucanceDate":1530735000,"id":"XXXX","claim":{//用户自定义},"status":{"type":"XXXX","id":"XXXXX"}},"proof":{"type":"ecdsa","created":"2018-06-18T21:19:10Z","verificationMethod":"XXXX","signatureValue":"XXXXX"}}
  verifiableClaimContent?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      verifiableClaimContent: 'verifiable_claim_content',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      verifiableClaimContent: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDidVcrepositoryReadwithvcidRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 请求读取数据的did。
  did: string;
  // 保留字段，请求读的did身份对应公钥对所有数据参数的签名（目前托管模式可缺省此字段，未来非托管时需请求端签名，需填此字段）
  signature?: string;
  // 要查询的这个vc属于哪个did，如果未指定，did会尝试从默认vc仓库获取
  subjectDid?: string;
  // 通过指定目标证书VC的唯一verifiable_claim_id来读取内容。
  verifiableClaimId: string;
  // 场景码，找dis工作人员进行分配
  bizCode?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      did: 'did',
      signature: 'signature',
      subjectDid: 'subject_did',
      verifiableClaimId: 'verifiable_claim_id',
      bizCode: 'biz_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      did: 'string',
      signature: 'string',
      subjectDid: 'string',
      verifiableClaimId: 'string',
      bizCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDidVcrepositoryReadwithvcidResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 可验证声明的完整声明 {"content":{"verion":"0.7.0","issuer":"xxxx","subject":"xxxx","expire":1530735444,"issucanceDate":1530735000,"id":"XXXX","claim":{//用户自定义},"status":{"type":"XXXX","id":"XXXXX"}},"proof":{"type":"ecdsa","created":"2018-06-18T21:19:10Z","verificationMethod":"XXXX","signatureValue":"XXXXX"}}
  verifiableClaimContent?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      verifiableClaimContent: 'verifiable_claim_content',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      verifiableClaimContent: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDidVcrepositoryReadwithdefineidRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 自定义的业务id，通常此字段不是"vc:mychain:"前缀开头，会使用如下规则生成最终verifiable_claim_id： verifiable_claim_id = "vc:mychain:" + SHA256(Joiner.on(":").join(issuer_did, subject_did, define_id)); 此表达式参与SHA256的 define_id 为用户指定的当前参数。
  defineId: string;
  // 请求读取数据的did。
  did: string;
  // 目标证书VC的颁发者did。
  issuerDid: string;
  // 保留字段，请求读的did身份对应公钥对所有数据参数的签名（目前托管模式可缺省此字段，未来非托管时需请求端签名，需填此字段）
  signature?: string;
  // 目标证书VC的颁发目标did。
  subjectDid: string;
  // 场景码，找dis工作人员进行分配
  bizCode?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      defineId: 'define_id',
      did: 'did',
      issuerDid: 'issuer_did',
      signature: 'signature',
      subjectDid: 'subject_did',
      bizCode: 'biz_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      defineId: 'string',
      did: 'string',
      issuerDid: 'string',
      signature: 'string',
      subjectDid: 'string',
      bizCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDidVcrepositoryReadwithdefineidResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 可验证声明的完整声明 {"content":{"verion":"0.7.0","issuer":"xxxx","subject":"xxxx","expire":1530735444,"issucanceDate":1530735000,"id":"XXXX","claim":{//用户自定义},"status":{"type":"XXXX","id":"XXXXX"}},"proof":{"type":"ecdsa","created":"2018-06-18T21:19:10Z","verificationMethod":"XXXX","signatureValue":"XXXXX"}}
  verifiableClaimContent?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      verifiableClaimContent: 'verifiable_claim_content',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      verifiableClaimContent: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDidVcrepositoryAuthwithvcidRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 配置此did列表，为这些did分配读取目标VC的权限，如果目标VC存储时是明文存储，则操作失败（无需做此权限管控）。
  authDidList: string;
  // 场景码，找dis工作人员进行分配
  bizCode?: string;
  // 目标VC的owner，也就是VC内容中的subject did身份。
  did: string;
  // 保留字段，请求增加授权的调用方did身份对应公钥对所有数据参数的签名（目前托管模式可缺省此字段，未来非托管时需请求端签名，需填此字段）
  signature?: string;
  // 通过指定目标证书VC的唯一verifiable_claim_id来找到目标证书VC并新增授权。
  verifiableClaimId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      authDidList: 'auth_did_list',
      bizCode: 'biz_code',
      did: 'did',
      signature: 'signature',
      verifiableClaimId: 'verifiable_claim_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      authDidList: 'string',
      bizCode: 'string',
      did: 'string',
      signature: 'string',
      verifiableClaimId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDidVcrepositoryAuthwithvcidResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDidVcrepositoryAuthwithdefineidRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 配置此did列表，为这些did分配读取目标VC的权限，如果目标VC存储时是明文存储，则操作失败（无需做此权限管控）。
  authDidList: string;
  // 场景码，找dis工作人员进行分配
  bizCode?: string;
  // 自定义的业务id，通常此字段不是"vc:mychain:"前缀开头，会使用如下规则生成最终verifiable_claim_id： verifiable_claim_id = "vc:mychain:" + SHA256(Joiner.on(":").join(issuer_did, subject_did, define_id)); 此表达式参与SHA256的 define_id 为用户指定的当前参数。
  defineId: string;
  // 请求操作的did，也是目标VC的owner，也就是VC内容中的subject did身份。
  did: string;
  // 目标证书的颁发者did。
  issuerDid: string;
  // 保留字段，请求增加授权的调用方did身份对应公钥对所有数据参数的签名（目前托管模式可缺省此字段，未来非托管时需请求端签名，需填此字段）
  signature?: string;
  // 目标证书VC的颁发目标did。
  subjectDid: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      authDidList: 'auth_did_list',
      bizCode: 'biz_code',
      defineId: 'define_id',
      did: 'did',
      issuerDid: 'issuer_did',
      signature: 'signature',
      subjectDid: 'subject_did',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      authDidList: 'string',
      bizCode: 'string',
      defineId: 'string',
      did: 'string',
      issuerDid: 'string',
      signature: 'string',
      subjectDid: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDidVcrepositoryAuthwithdefineidResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDidAgentServicetypeRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 枚举类型，描述访问服务的方式
  accessMode?: string;
  // 对服务的文字描述，<1000个字符
  description?: string;
  // 服务类型创建者did
  did: string;
  // {
  //   "item1":"",
  //   "item2":"",
  //   ...
  // }
  serviceInput?: string;
  // {
  //    "item1":""
  //    "item2":""
  //    ...
  // }
  serviceOutput?: string;
  // 自定义服务类型，字符数16～32个
  serviceType: string;
  // 场景码，找dis工作人员进行分配
  bizCode?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      accessMode: 'access_mode',
      description: 'description',
      did: 'did',
      serviceInput: 'service_input',
      serviceOutput: 'service_output',
      serviceType: 'service_type',
      bizCode: 'biz_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      accessMode: 'string',
      description: 'string',
      did: 'string',
      serviceInput: 'string',
      serviceOutput: 'string',
      serviceType: 'string',
      bizCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDidAgentServicetypeResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 创建成功之后，返回服务类型名
  serviceType?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      serviceType: 'service_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      serviceType: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryDidAgentServicetypeRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 查询者did
  did: string;
  // 指定查询的服务类型名
  serviceType: string;
  // 场景码，找dis工作人员进行分配
  bizCode?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      did: 'did',
      serviceType: 'service_type',
      bizCode: 'biz_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      did: 'string',
      serviceType: 'string',
      bizCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryDidAgentServicetypeResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 服务类型定义列表
  serviceTypes?: string[];
  // 总共有几项
  totalNumber?: number;
  // 总共有几页
  totalPage?: number;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      serviceTypes: 'service_types',
      totalNumber: 'total_number',
      totalPage: 'total_page',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      serviceTypes: { 'type': 'array', 'itemType': 'string' },
      totalNumber: 'number',
      totalPage: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateDidServicesRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 新增的服务信息
  addSevices?: DidDocServicesInfo[];
  // 要删除的服务id列表
  delServices?: string[];
  // 指定要更新的did
  did: string;
  // did类型，个人|企业|设备(IOT)
  didType: string;
  // 场景码，找dis工作人员进行分配
  bizCode?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      addSevices: 'add_sevices',
      delServices: 'del_services',
      did: 'did',
      didType: 'did_type',
      bizCode: 'biz_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      addSevices: { 'type': 'array', 'itemType': DidDocServicesInfo },
      delServices: { 'type': 'array', 'itemType': 'string' },
      did: 'string',
      didType: 'string',
      bizCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateDidServicesResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 更新后的did doc
  didDoc?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      didDoc: 'did_doc',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      didDoc: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryDidAgentServicediscoveryRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 查询页数
  pageNum: number;
  // 需要查找的服务类型
  serviceType: string;
  // 场景码，找dis工作人员进行分配
  // 
  bizCode?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      pageNum: 'page_num',
      serviceType: 'service_type',
      bizCode: 'biz_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      pageNum: 'number',
      serviceType: 'string',
      bizCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryDidAgentServicediscoveryResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 当前页数
  currentPage?: number;
  // 服务列表
  services?: DisServiceInfo[];
  // 总个数
  totalNum?: number;
  // 总页数
  totalPage?: number;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      currentPage: 'current_page',
      services: 'services',
      totalNum: 'total_num',
      totalPage: 'total_page',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      currentPage: 'number',
      services: { 'type': 'array', 'itemType': DisServiceInfo },
      totalNum: 'number',
      totalPage: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDidVerifiableclaimIssuerandsaveRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 颁发证书声明
  bareClaim: BareClaim;
  // 过期时间
  expire: number;
  // 由谁来颁发，该did必须为调用者自己或者自己代理的did
  issuer: string;
  // 为哪个did颁发
  subject: string;
  // 验证声明类型，目前默认VerifiableCredential
  type?: string[];
  // 验证声明状态方式，目前只支持直接通过声明id上链查找状态方式，后续会支持更多方式
  verifyStatusType?: string;
  // 场景码，找dis工作人员进行分配
  bizCode?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bareClaim: 'bare_claim',
      expire: 'expire',
      issuer: 'issuer',
      subject: 'subject',
      type: 'type',
      verifyStatusType: 'verify_status_type',
      bizCode: 'biz_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bareClaim: BareClaim,
      expire: 'number',
      issuer: 'string',
      subject: 'string',
      type: { 'type': 'array', 'itemType': 'string' },
      verifyStatusType: 'string',
      bizCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDidVerifiableclaimIssuerandsaveResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 可验证声明的完整声明 {"content":{"verion":"0.7.0","issuer":"xxxx","subject":"xxxx","expire":1530735444,"issucanceDate":1530735000,"id":"XXXX","claim":{//用户自定义},"status":{"type":"XXXX","id":"XXXXX"}},"proof":{"type":"ecdsa","created":"2018-06-18T21:19:10Z","verificationMethod":"XXXX","signatureValue":"XXXXX"}}
  verifiableClaimContent?: string;
  // 声明id
  verifiableClaimId?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      verifiableClaimContent: 'verifiable_claim_content',
      verifiableClaimId: 'verifiable_claim_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      verifiableClaimContent: 'string',
      verifiableClaimId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDidVcrepositoryVctransmitRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 用户did标示
  did: string;
  // 实际参数
  payload: VcTransmitPayload;
  // 场景码，找dis工作人员进行分配
  bizCode?: string;
  // transmit在底层vc仓库使用时候是否需要使用did密钥进行信封封装加密，如果设定true则不需要底层信封加密，需要调用方执行vcContent的加密保护。
  notEncrypt?: boolean;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      did: 'did',
      payload: 'payload',
      bizCode: 'biz_code',
      notEncrypt: 'not_encrypt',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      did: 'string',
      payload: VcTransmitPayload,
      bizCode: 'string',
      notEncrypt: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDidVcrepositoryVctransmitResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 具体传输结果
  result?: VcTransmitResult[];
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: { 'type': 'array', 'itemType': VcTransmitResult },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDidPersonWithtwometaRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 身份证号码
  certNo: string;
  // 扩展字段
  extensionInfo?: string;
  // 姓名
  name: string;
  // 名称
  ownerName?: string;
  // 自定义个人唯一id，个人在自有模式下的唯一号，调用者需要保证其唯一性
  ownerUid: string;
  // 场景码，找dis工作人员进行分配
  bizCode?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      certNo: 'cert_no',
      extensionInfo: 'extension_info',
      name: 'name',
      ownerName: 'owner_name',
      ownerUid: 'owner_uid',
      bizCode: 'biz_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      certNo: 'string',
      extensionInfo: 'string',
      name: 'string',
      ownerName: 'string',
      ownerUid: 'string',
      bizCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDidPersonWithtwometaResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 生成的did字符串
  did?: string;
  // 颁发的vcId
  vcId?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      did: 'did',
      vcId: 'vc_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      did: 'string',
      vcId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDidCorporateWithtwometaRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 企业名称
  epCertName: string;
  // 企业证件号
  epCertNo: string;
  // {
  //   "nation": "CN", //企业注册地址
  //   "type": "LimitedCompany", //企业类型
  //   "name": "演示用户名", //必选字段，企业名
  //   "licenceNo": "1111", //营业执照
  //   "address": "1111", //企业地址
  //   "parentName": "", //<-必选字段 业务方名 需要提前协商
  //   "linkType": "indirect", //<- 连接类型，direct直链企业， indirect间链企业
  //   "certifyDate": "2019-1-1", //证书颁发时间
  //   "licenceExpireDate": "2020-1-1", //证书到期时间
  //   "businessScope": "1111", //企业经营范围
  //   "businessAddress": "1111", //企业经营地址
  //   "corporateBusinessType": 0, //<- 企业类型：0 一般企业， 1 个人商户
  //   "channelName": "" //<- 必选字段 业务渠道 需要提前沟通
  // }
  extensionInfo?: string;
  // 名称
  // 
  ownerName?: string;
  // 自定义企业唯一id，企业在自有模式下的唯一号，调用者需要保证其唯一性
  ownerUid: string;
  // 场景码，找dis工作人员进行分配
  bizCode?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      epCertName: 'ep_cert_name',
      epCertNo: 'ep_cert_no',
      extensionInfo: 'extension_info',
      ownerName: 'owner_name',
      ownerUid: 'owner_uid',
      bizCode: 'biz_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      epCertName: 'string',
      epCertNo: 'string',
      extensionInfo: 'string',
      ownerName: 'string',
      ownerUid: 'string',
      bizCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDidCorporateWithtwometaResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 生成的did
  // 
  did?: string;
  // 颁发的vcId
  vcId?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      did: 'did',
      vcId: 'vc_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      did: 'string',
      vcId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDidCorporateWithfourmetaRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 企业名称
  // 
  epCertName: string;
  // 企业证件号
  // 
  epCertNo: string;
  // { "nation": "CN", //企业注册地址 "type": "LimitedCompany", //企业类型 "name": "演示用户名", //必选字段，企业名 "licenceNo": "1111", //营业执照 "address": "1111", //企业地址 "parentName": "", //<-必选字段 业务方名 需要提前协商 "linkType": "indirect", //<- 连接类型，direct直链企业， indirect间链企业 "certifyDate": "2019-1-1", //证书颁发时间 "licenceExpireDate": "2020-1-1", //证书到期时间 "businessScope": "1111", //企业经营范围 "businessAddress": "1111", //企业经营地址 "corporateBusinessType": 0, //<- 企业类型：0 一般企业， 1 个人商户 "channelName": "" //<- 必选字段 业务渠道 需要提前沟通 }
  // 
  extensionInfo?: string;
  // 法人姓名
  // 
  legalPersonCertName: string;
  // 法人身份证件号
  legalPersonCertNo: string;
  // 名称
  // 
  ownerName?: string;
  // 自定义企业唯一id，企业在自有模式下的唯一号，调用者需要保证其唯一性
  ownerUid: string;
  // 场景码，找dis工作人员进行分配
  bizCode?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      epCertName: 'ep_cert_name',
      epCertNo: 'ep_cert_no',
      extensionInfo: 'extension_info',
      legalPersonCertName: 'legal_person_cert_name',
      legalPersonCertNo: 'legal_person_cert_no',
      ownerName: 'owner_name',
      ownerUid: 'owner_uid',
      bizCode: 'biz_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      epCertName: 'string',
      epCertNo: 'string',
      extensionInfo: 'string',
      legalPersonCertName: 'string',
      legalPersonCertNo: 'string',
      ownerName: 'string',
      ownerUid: 'string',
      bizCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDidCorporateWithfourmetaResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 生成的did
  // 
  did?: string;
  // 颁发的vcId
  // 
  vcId?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      did: 'did',
      vcId: 'vc_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      did: 'string',
      vcId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDidPersonWithfourmetaRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 银行卡号
  bankCard: string;
  // 身份证号码
  // 
  certNo: string;
  // 扩展字段
  // 
  extensionInfo?: string;
  // 手机号码
  // 
  mobile: string;
  // 姓名
  // 
  name: string;
  // 名称
  // 
  ownerName?: string;
  // 自定义个人唯一id，个人在自有模式下的唯一号，调用者需要保证其唯一性
  ownerUid: string;
  // 场景码，找dis工作人员进行分配
  bizCode?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bankCard: 'bank_card',
      certNo: 'cert_no',
      extensionInfo: 'extension_info',
      mobile: 'mobile',
      name: 'name',
      ownerName: 'owner_name',
      ownerUid: 'owner_uid',
      bizCode: 'biz_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bankCard: 'string',
      certNo: 'string',
      extensionInfo: 'string',
      mobile: 'string',
      name: 'string',
      ownerName: 'string',
      ownerUid: 'string',
      bizCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDidPersonWithfourmetaResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 生成的did字符串
  // 
  did?: string;
  // 颁发的vcId
  // 
  vcId?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      did: 'did',
      vcId: 'vc_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      did: 'string',
      vcId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDidCorporateTwometaRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 颁发证书的subject did
  // 
  did: string;
  // 企业名称   
  epCertName: string;
  // 企业证件号
  // 
  epCertNo: string;
  // 场景码，找dis工作人员进行分配
  bizCode?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      did: 'did',
      epCertName: 'ep_cert_name',
      epCertNo: 'ep_cert_no',
      bizCode: 'biz_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      did: 'string',
      epCertName: 'string',
      epCertNo: 'string',
      bizCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDidCorporateTwometaResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // vc id，可通过该字符串来查询vc具体内容
  vcId?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      vcId: 'vc_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      vcId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDidCorporateThreemetaRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 证书的subject did
  // 
  did: string;
  // 企业名称
  // 
  epCertName: string;
  // 企业证件号
  // 
  epCertNo: string;
  // 法人姓名
  // 
  legalPersonCertName: string;
  // 场景码，找dis工作人员进行分配
  bizCode?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      did: 'did',
      epCertName: 'ep_cert_name',
      epCertNo: 'ep_cert_no',
      legalPersonCertName: 'legal_person_cert_name',
      bizCode: 'biz_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      did: 'string',
      epCertName: 'string',
      epCertNo: 'string',
      legalPersonCertName: 'string',
      bizCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDidCorporateThreemetaResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // vc id，可通过该字符串来查询vc具体内容
  // 
  vcId?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      vcId: 'vc_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      vcId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDidCorporateFourmetaRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 颁发证书的subject did
  // 
  did: string;
  // 企业名称
  // 
  epCertName: string;
  // 企业证件号
  // 
  epCertNo: string;
  // 法人姓名
  // 
  legalPersonCertName: string;
  // 法人身份证件号
  // 
  legalPersonCertNo: string;
  // 场景码，找dis工作人员进行分配
  bizCode?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      did: 'did',
      epCertName: 'ep_cert_name',
      epCertNo: 'ep_cert_no',
      legalPersonCertName: 'legal_person_cert_name',
      legalPersonCertNo: 'legal_person_cert_no',
      bizCode: 'biz_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      did: 'string',
      epCertName: 'string',
      epCertNo: 'string',
      legalPersonCertName: 'string',
      legalPersonCertNo: 'string',
      bizCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDidCorporateFourmetaResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // vc id，可通过该字符串来查询vc具体内容
  // 
  vcId?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      vcId: 'vc_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      vcId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDidCertificationFourmetaRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 银行卡号
  // 
  bankCard: string;
  // 身份证号码
  // 
  certNo: string;
  // 证书的subject did
  // 
  did: string;
  // 手机号码
  // 
  mobile: string;
  // 姓名
  // 
  name: string;
  // 场景码，找dis工作人员进行分配
  bizCode?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bankCard: 'bank_card',
      certNo: 'cert_no',
      did: 'did',
      mobile: 'mobile',
      name: 'name',
      bizCode: 'biz_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bankCard: 'string',
      certNo: 'string',
      did: 'string',
      mobile: 'string',
      name: 'string',
      bizCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDidCertificationFourmetaResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // vc id，可通过该字符串来查询vc具体内容
  // 
  vcId?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      vcId: 'vc_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      vcId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryDidVcrepositoryFuzzyquerywithdefinedidRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 自定义的业务id，通常此字段不是"vc:mychain:"前缀开头，会使用如下规则生成最终verifiable_claim_id： verifiable_claim_id = "vc:mychain:" + SHA256(Joiner.on(":").join(issuer_did, subject_did, define_id)); 此表达式参与SHA256的 define_id 为用户指定的当前参数。查询时使用verifiable_claim_id*
  defineId: string;
  // 请求读取数据的did
  did: string;
  // 目标证书VC的颁发者did。
  issuerDid: string;
  // 目标证书VC的颁发目标did。
  // 
  subjectDid: string;
  // 场景码，找dis工作人员进行分配
  bizCode?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      defineId: 'define_id',
      did: 'did',
      issuerDid: 'issuer_did',
      subjectDid: 'subject_did',
      bizCode: 'biz_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      defineId: 'string',
      did: 'string',
      issuerDid: 'string',
      subjectDid: 'string',
      bizCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryDidVcrepositoryFuzzyquerywithdefinedidResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 可验证声明的完整声明列表
  verifiableClaimContent?: string[];
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      verifiableClaimContent: 'verifiable_claim_content',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      verifiableClaimContent: { 'type': 'array', 'itemType': 'string' },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDidCommonAgentcreateRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 场景码，找dis工作人员进行分配
  bizCode?: string;
  // 自定信息
  extensionInfo?: string;
  // 所有需要关联的外键，外键必须已did auth key controller的did作为前缀+“sidekey:”+外键
  indexs?: string[];
  // 名称
  ownerName: string;
  // 唯一号，比如可以是hash(证件类型+企业营业执照号) 计算出来的唯一值等
  ownerUid: string;
  // 携带自己定义的服务类型
  services?: DidDocServicesInfo[];
  // 指定did的类型
  entityType?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizCode: 'biz_code',
      extensionInfo: 'extension_info',
      indexs: 'indexs',
      ownerName: 'owner_name',
      ownerUid: 'owner_uid',
      services: 'services',
      entityType: 'entity_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizCode: 'string',
      extensionInfo: 'string',
      indexs: { 'type': 'array', 'itemType': 'string' },
      ownerName: 'string',
      ownerUid: 'string',
      services: { 'type': 'array', 'itemType': DidDocServicesInfo },
      entityType: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDidCommonAgentcreateResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 生成的did字符串
  did?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      did: 'did',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      did: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDidCorporateFaceauthRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 回调通知地址
  callBackUrl?: string;
  // 企业名称
  epCertName: string;
  // 企业证件号
  epCertNo: string;
  // 企业证件类型（NATIONAL_LEGAL（工商注册号）或 NATIONAL_LEGAL_MERGE （ 社会统一信用代码））
  epCertType: string;
  // { "nation": "CN", //企业注册地址 "type": "LimitedCompany", //企业类型 "name": "演示用户名", //必选字段，企业名 "licenceNo": "1111", //营业执照 "address": "1111", //企业地址 "parentName": "", //<-必选字段 业务方名 需要提前协商 "linkType": "indirect", //<- 连接类型，direct直链企业， indirect间链企业 "certifyDate": "2019-1-1", //证书颁发时间 "licenceExpireDate": "2020-1-1", //证书到期时间 "businessScope": "1111", //企业经营范围 "businessAddress": "1111", //企业经营地址 "corporateBusinessType": 0, //<- 企业类型：0 一般企业， 1 个人商户 "channelName": "" //<- 必选字段 业务渠道 需要提前沟通 }
  extensionInfo?: string;
  // 企业法人
  legalPersonCertName: string;
  // 法人身份证号
  legalPersonCertNo: string;
  // 认证完成后回跳地址
  merchantUrl?: string;
  // 名称
  ownerName?: string;
  // 自定义企业唯一id，企业在自有模式下的唯一号，调用者需要保证其唯一性
  ownerUid?: string;
  // 场景码，找dis工作人员进行分配	
  bizCode?: string;
  // 产品渲染方式：H5、NATIVE 或 PC, 默认为H5
  group?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      callBackUrl: 'call_back_url',
      epCertName: 'ep_cert_name',
      epCertNo: 'ep_cert_no',
      epCertType: 'ep_cert_type',
      extensionInfo: 'extension_info',
      legalPersonCertName: 'legal_person_cert_name',
      legalPersonCertNo: 'legal_person_cert_no',
      merchantUrl: 'merchant_url',
      ownerName: 'owner_name',
      ownerUid: 'owner_uid',
      bizCode: 'biz_code',
      group: 'group',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      callBackUrl: 'string',
      epCertName: 'string',
      epCertNo: 'string',
      epCertType: 'string',
      extensionInfo: 'string',
      legalPersonCertName: 'string',
      legalPersonCertNo: 'string',
      merchantUrl: 'string',
      ownerName: 'string',
      ownerUid: 'string',
      bizCode: 'string',
      group: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDidCorporateFaceauthResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 认证ID
  certifyId?: string;
  // 二维码URL，用户支付宝扫一扫实人认证
  certifyUrl?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      certifyId: 'certify_id',
      certifyUrl: 'certify_url',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      certifyId: 'string',
      certifyUrl: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryDidCorporateFaceauthRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 认证ID，用于查询认证结果
  // 
  certifyId: string;
  // 场景码，找dis工作人员进行分配
  bizCode?: string;
  // 产品渲染方式：H5、NATIVE 或 PC
  group?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      certifyId: 'certify_id',
      bizCode: 'biz_code',
      group: 'group',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      certifyId: 'string',
      bizCode: 'string',
      group: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryDidCorporateFaceauthResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 生成的did
  did?: string;
  // vc id，可通过该字符串来查询vc具体内容
  vcId?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      did: 'did',
      vcId: 'vc_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      did: 'string',
      vcId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteDidVcrepositoryVcRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 要删除的vc owner
  did: string;
  // 带删除的VC列表
  vcList: string[];
  // 场景码，找dis工作人员进行分配
  bizCode?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      did: 'did',
      vcList: 'vc_list',
      bizCode: 'biz_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      did: 'string',
      vcList: { 'type': 'array', 'itemType': 'string' },
      bizCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteDidVcrepositoryVcResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDidZkpverifiableclaimProofRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 场景码，找dis工作人员进行分配
  bizCode?: string;
  // vc对应的授予者
  subject: string;
  // vc原文
  vc: string;
  // zkp证明生成信息
  zkpInfo: DidZKPInfo[];
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizCode: 'biz_code',
      subject: 'subject',
      vc: 'vc',
      zkpInfo: 'zkp_info',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizCode: 'string',
      subject: 'string',
      vc: 'string',
      zkpInfo: { 'type': 'array', 'itemType': DidZKPInfo },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDidZkpverifiableclaimProofResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 替换为zkp证明的VC
  zkpVc?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      zkpVc: 'zkp_vc',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      zkpVc: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class VerifyDidZkpverifiableclaimProofRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 场景码，找dis工作人员进行分配
  bizCode?: string;
  // 包含ZKP Proof的可验证声明
  vc: string;
  // ZKP验证信息
  verifyZkpProof: DidZKPInfo[];
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizCode: 'biz_code',
      vc: 'vc',
      verifyZkpProof: 'verify_zkp_proof',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizCode: 'string',
      vc: 'string',
      verifyZkpProof: { 'type': 'array', 'itemType': DidZKPInfo },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class VerifyDidZkpverifiableclaimProofResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDidPersonFacevrfRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 场景码，通常针对性特别支持，或者防止多调用方使用相同租户身份的情况下用bizCode做区分。
  bizCode?: string;
  // 请求的唯一标识，通常为32字符宽度的字符串内容，也可以只用UUID，此参数通常用来支持幂等，或者排查问题，调用方可以使用业务流水号。
  bizId: string;
  // 姓名字段，真实姓名，不可包含空格等特殊字符。
  certName: string;
  // 证件号码，要求带有字母的情况使用大写字母。
  certNo: string;
  // 份信息来源类型，当前仅支持证件（CERT_INFO）
  identityType: string;
  // 证件类型，当前仅支持身份证（IDENTITY_CARD）
  certType: string;
  // metainfo 环境参数，需要通过客户端 SDK 获取
  metaInfo: string;
  // OCR 能力对两个扩展参数，map的json格式：tradeParam_needOcr=true tradeParam_verifyStageCheckUsable=true
  externParam?: string;
  // DID未来创建锚定的用户身份唯一关联，如果不设置此参数则使用二要素拼接后的哈希值 SHA256("张三"+"210282*****X") 来进行关联创建DID，并且支持幂等。
  uid?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizCode: 'biz_code',
      bizId: 'biz_id',
      certName: 'cert_name',
      certNo: 'cert_no',
      identityType: 'identity_type',
      certType: 'cert_type',
      metaInfo: 'meta_info',
      externParam: 'extern_param',
      uid: 'uid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizCode: 'string',
      bizId: 'string',
      certName: 'string',
      certNo: 'string',
      identityType: 'string',
      certType: 'string',
      metaInfo: 'string',
      externParam: 'string',
      uid: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDidPersonFacevrfResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 可信实人认证的唯一标识，返回后用于移动端进行唤起刷脸，也用于后续查询认证结果的关键入参。
  certifyId?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      certifyId: 'certify_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      certifyId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryDidPersonFacevrfRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 可能由于租户ID被多个调用方公用时候，使用bizCode作为隔离区分。
  bizCode?: string;
  // 可信实人认证的唯一标识，用于核心查询认证结果的唯一标识。
  certifyId: string;
  // 认证材料（人脸图像，如移动端采集认证后获得的人脸图像）的哈希
  materialHash?: string;
  // 请求的唯一标识，通常为32字符宽度的字符串内容，也可以只用UUID，此参数通常用来支持幂等，或者排查问题，调用方可以使用业务流水号。
  // 与创建申请认证的接口的bizId目前不强校验一致性。
  bizId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizCode: 'biz_code',
      certifyId: 'certify_id',
      materialHash: 'material_hash',
      bizId: 'biz_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizCode: 'string',
      certifyId: 'string',
      materialHash: 'string',
      bizId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryDidPersonFacevrfResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 认证是否通过。
  passed?: string;
  // 认证材料哈希是否匹配。 如果有传入材料哈希参数，匹配则返回值为 T；不匹配则返回值为 F。如果无材料哈希参数传入，则返回空。
  materialMatched?: string;
  // 身份信息，目前只有在ocr的场景下才有返回。
  // certName/certNo：本次认证通过的姓名和身份证；ocrInfo：本次OCR识别的结果，包含如下信息："address": 地址"nationality": 名族"num":身份证号码"sex":性别"name": 名称"birth": 生日"issue": 签发机关"endDate":到期日"startDate":发证日期；注意:认证通过的信息和OCR识别的信息可能不一致
  identityInfo?: string;
  // 长度不超过128字符的分布式数字身份DID
  did?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      passed: 'passed',
      materialMatched: 'material_matched',
      identityInfo: 'identity_info',
      did: 'did',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      passed: 'string',
      materialMatched: 'string',
      identityInfo: 'string',
      did: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDidPersonFacevrfminiappRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 场景码，通常针对性特别支持，或者防止多调用方使用相同租户身份的情况下用bizCode做区分。
  bizCode?: string;
  // 请求的唯一标识，通常为32字符宽度的字符串内容，也可以只用UUID，此参数通常用来支持幂等，或者排查问题，调用方可以使用业务流水号。
  bizId: string;
  // 姓名字段，真实姓名，不可包含空格等特殊字符。
  certName: string;
  // 证件号码，要求带有字母的情况使用大写字母。
  certNo: string;
  // 身份信息来源类型，当前仅支持证件（CERT_INFO）
  identityType: string;
  // 证件类型，当前仅支持身份证（IDENTITY_CARD）
  certType: string;
  // 认证结束回跳地址
  returnUrl: string;
  // DID未来创建锚定的用户身份唯一关联，如果不设置此参数则使用二要素拼接后的哈希值 SHA256("张三"+"210282*****X") 来进行关联创建DID，并且支持幂等。
  uid?: string;
  // 刷脸类型，目前只支持FACE_SDK、FACE
  faceType?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizCode: 'biz_code',
      bizId: 'biz_id',
      certName: 'cert_name',
      certNo: 'cert_no',
      identityType: 'identity_type',
      certType: 'cert_type',
      returnUrl: 'return_url',
      uid: 'uid',
      faceType: 'face_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizCode: 'string',
      bizId: 'string',
      certName: 'string',
      certNo: 'string',
      identityType: 'string',
      certType: 'string',
      returnUrl: 'string',
      uid: 'string',
      faceType: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDidPersonFacevrfminiappResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 查询刷脸结果唯一标识
  certifyId?: string;
  // 认证流程入口 URL。
  certifyUrl?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      certifyId: 'certify_id',
      certifyUrl: 'certify_url',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      certifyId: 'string',
      certifyUrl: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryDidPersonFacevrfminiappRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 可能由于租户ID被多个调用方公用时候，使用bizCode作为隔离区分。
  bizCode?: string;
  // 请求的唯一标识，通常为32字符宽度的字符串内容，也可以只用UUID，此参数通常用来支持幂等，或者排查问题，调用方可以使用业务流水号。 与创建申请认证的接口的bizId目前不强校验一致性。
  bizId: string;
  // 可信实人认证的唯一标识，用于核心查询认证结果的唯一标识。
  certifyId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizCode: 'biz_code',
      bizId: 'biz_id',
      certifyId: 'certify_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizCode: 'string',
      bizId: 'string',
      certifyId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryDidPersonFacevrfminiappResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 认证是否通过。
  passed?: string;
  // 长度不超过128字符的分布式数字身份DID
  did?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      passed: 'passed',
      did: 'did',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      passed: 'string',
      did: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDidVcrepositoryIssuenewocpRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 配置此列表，则说明需要DIS对证书声明内容加密处理，并且控制访问权限，此列表为初始配置的did名单，拥有对此颁发证书的读取权限。 如果不配置此列表，则DIS默认将明文存储此证书，任何did都可以访问此证书声明内容。
  authDidList?: string[];
  // 颁发证书声明的原始声明内容，其中claim字段为json格式
  // 
  bareClaim: BareClaim;
  // 过期时间，如果用不过期可以设置为：-1。 注意如果证书过期，则无法再通过VC Repository读取访问此证书内容。
  expire: number;
  // 颁发证书方，该did必须为调用者自己或者自己代理的did。
  // 
  issuer: string;
  // 1 - 指定id将被按照verifiable_claim_id = "vc:mychain:" + SHA256(Joiner.on(":").join(subject, verifiable_claim_id.substring(0,50)))+verifiable_claim_id.substring(50);此表达式参与SHA256的 verifiable_claim_id 为用户指定的参数。
  specifiedClaimIdType?: number;
  // 颁发证书的目标did，此目标did将拥有存储到VC Repository的数据管控权限，比如：授权给其它did读取此证书的权限。
  subject: string;
  // 通过层级定义的证书类型说明，在使用VC Repository的情况下默认为：["VerifiableCredential","DelegateVCRepository"]。 如果用户希望通过type来过滤读取证书VC，那么可以在此列表后面追加层次定义说明，方便后续读取证书在VC Repository进行过滤。（如果读取方已知verifiable_claim_id可以直接过滤读取）
  type?: string[];
  // 如果指定，最终会使用此id会参与生成的证书的verifiable_claim_id，但是调用方需要保证设置值的唯一性，重复的id会引起最终verifiable_claim_id重复，导致被拒绝颁发证书。 如果不指定，则会随机生成一个规范的verifiable_claim_id。 verifiable_claim_id = "vc:mychain:" + SHA256(Joiner.on(":").join(subject, verifiable_claim_id)); 此表达式参与SHA256的 verifiable_claim_id 为用户指定的参数。
  verifiableClaimId?: string;
  // 验证声明状态方式，目前只支持直接通过声明id上链查找状态方式，后续会支持更多方式
  verifyStatusType?: string;
  // 场景码，找dis工作人员进行分配
  // 
  bizCode?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      authDidList: 'auth_did_list',
      bareClaim: 'bare_claim',
      expire: 'expire',
      issuer: 'issuer',
      specifiedClaimIdType: 'specified_claim_id_type',
      subject: 'subject',
      type: 'type',
      verifiableClaimId: 'verifiable_claim_id',
      verifyStatusType: 'verify_status_type',
      bizCode: 'biz_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      authDidList: { 'type': 'array', 'itemType': 'string' },
      bareClaim: BareClaim,
      expire: 'number',
      issuer: 'string',
      specifiedClaimIdType: 'number',
      subject: 'string',
      type: { 'type': 'array', 'itemType': 'string' },
      verifiableClaimId: 'string',
      verifyStatusType: 'string',
      bizCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDidVcrepositoryIssuenewocpResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 可验证声明的完整声明 {"content":{"verion":"0.7.0","issuer":"xxxx","subject":"xxxx","expire":1530735444,"issucanceDate":1530735000,"id":"XXXX","claim":{//用户自定义},"status":{"type":"XXXX","id":"XXXXX"}},"proof":{"type":"ecdsa","created":"2018-06-18T21:19:10Z","verificationMethod":"XXXX","signatureValue":"XXXXX"}}
  verifiableClaimContent?: string;
  // 颁发的证书唯一id，颁发成功后返回。
  // 
  verifiableClaimId?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      verifiableClaimContent: 'verifiable_claim_content',
      verifiableClaimId: 'verifiable_claim_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      verifiableClaimContent: 'string',
      verifiableClaimId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDidVerifiableclaimIssurenewocpRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 颁发证书声明
  bareClaim: BareClaim;
  // 过期时间
  expire: number;
  // 由谁来颁发，该did必须为调用者自己或者自己代理的did
  issuer: string;
  // 为哪个did颁发
  subject: string;
  // 验证声明类型，目前默认VerifiableCredential
  type?: string[];
  // 验证声明状态方式，目前只支持直接通过声明id上链查找状态方式，后续会支持更多方式
  verifyStatusType?: string;
  // 场景码，找dis工作人员进行分配
  bizCode?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bareClaim: 'bare_claim',
      expire: 'expire',
      issuer: 'issuer',
      subject: 'subject',
      type: 'type',
      verifyStatusType: 'verify_status_type',
      bizCode: 'biz_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bareClaim: BareClaim,
      expire: 'number',
      issuer: 'string',
      subject: 'string',
      type: { 'type': 'array', 'itemType': 'string' },
      verifyStatusType: 'string',
      bizCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDidVerifiableclaimIssurenewocpResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 可验证声明的完整声明 {"content":{"verion":"0.7.0","issuer":"xxxx","subject":"xxxx","expire":1530735444,"issucanceDate":1530735000,"id":"XXXX","claim":{//用户自定义},"status":{"type":"XXXX","id":"XXXXX"}},"proof":{"type":"ecdsa","created":"2018-06-18T21:19:10Z","verificationMethod":"XXXX","signatureValue":"XXXXX"}}
  verifiableClaimContent?: string;
  // 声明id
  verifiableClaimId?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      verifiableClaimContent: 'verifiable_claim_content',
      verifiableClaimId: 'verifiable_claim_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      verifiableClaimContent: 'string',
      verifiableClaimId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDidPersonWithtwometanewocpRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 身份证号码
  certNo: string;
  // 扩展字段
  extensionInfo?: string;
  // 姓名
  name: string;
  // 名称
  ownerName?: string;
  // 自定义个人唯一id，个人在自有模式下的唯一号，调用者需要保证其唯一性
  ownerUid: string;
  // 场景码，找dis工作人员进行分配
  bizCode?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      certNo: 'cert_no',
      extensionInfo: 'extension_info',
      name: 'name',
      ownerName: 'owner_name',
      ownerUid: 'owner_uid',
      bizCode: 'biz_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      certNo: 'string',
      extensionInfo: 'string',
      name: 'string',
      ownerName: 'string',
      ownerUid: 'string',
      bizCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDidPersonWithtwometanewocpResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 生成的did字符串
  did?: string;
  // 颁发的vcId
  vcId?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      did: 'did',
      vcId: 'vc_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      did: 'string',
      vcId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDidPersonWiththreemetanewocpRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 身份证号码
  certNo: string;
  // 扩展字段
  extensionInfo?: string;
  // 手机号码
  mobile: string;
  // 姓名
  name: string;
  // 名称
  ownerName?: string;
  // 自定义个人唯一id，个人在自有模式下的唯一号，调用者需要保证其唯一性
  ownerUid: string;
  // 场景码，找dis工作人员进行分配
  bizCode?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      certNo: 'cert_no',
      extensionInfo: 'extension_info',
      mobile: 'mobile',
      name: 'name',
      ownerName: 'owner_name',
      ownerUid: 'owner_uid',
      bizCode: 'biz_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      certNo: 'string',
      extensionInfo: 'string',
      mobile: 'string',
      name: 'string',
      ownerName: 'string',
      ownerUid: 'string',
      bizCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDidPersonWiththreemetanewocpResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 生成的did字符串
  did?: string;
  // 颁发的vcId
  vcId?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      did: 'did',
      vcId: 'vc_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      did: 'string',
      vcId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDidIdentificationFaceauthnewocpRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 认证类型,枚举值 PC_AUTH、APP_AUTH
  authType: string;
  // 颁发证书的subject did
  did: string;
  // 用户身份信息
  identityParam: IdentityParam;
  // 认证接口回调路径，POST接口 请求示例： { "certifyId":"0242de204e1a2c3ed6ee5e21d8a57a4c", "did":"xxxxx","vcId":"xxxxx" }
  returnUrl?: string;
  // 场景码，找dis工作人员进行分配
  bizCode?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      authType: 'auth_type',
      did: 'did',
      identityParam: 'identity_param',
      returnUrl: 'return_url',
      bizCode: 'biz_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      authType: 'string',
      did: 'string',
      identityParam: IdentityParam,
      returnUrl: 'string',
      bizCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDidIdentificationFaceauthnewocpResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 认证ID
  certifyId?: string;
  // 二维码URL，用户支付宝扫一扫实人认证
  certifyUrl?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      certifyId: 'certify_id',
      certifyUrl: 'certify_url',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      certifyId: 'string',
      certifyUrl: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDidPersonFacevrfnewocpRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 场景码，通常针对性特别支持，或者防止多调用方使用相同租户身份的情况下用bizCode做区分。
  bizCode?: string;
  // 请求的唯一标识，通常为32字符宽度的字符串内容，也可以只用UUID，此参数通常用来支持幂等，或者排查问题，调用方可以使用业务流水号。
  bizId: string;
  // 姓名字段，真实姓名，不可包含空格等特殊字符。
  certName: string;
  // 证件号码，要求带有字母的情况使用大写字母。
  certNo: string;
  // 份信息来源类型，当前仅支持证件（CERT_INFO）
  identityType: string;
  // 证件类型，当前仅支持身份证（IDENTITY_CARD）
  certType: string;
  // metainfo 环境参数，需要通过客户端 SDK 获取
  metaInfo: string;
  // OCR 能力对两个扩展参数，map的json格式：tradeParam_needOcr=true tradeParam_verifyStageCheckUsable=true
  externParam?: string;
  // DID未来创建锚定的用户身份唯一关联，如果不设置此参数则使用二要素拼接后的哈希值 SHA256("张三"+"210282*****X") 来进行关联创建DID，并且支持幂等。
  uid?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizCode: 'biz_code',
      bizId: 'biz_id',
      certName: 'cert_name',
      certNo: 'cert_no',
      identityType: 'identity_type',
      certType: 'cert_type',
      metaInfo: 'meta_info',
      externParam: 'extern_param',
      uid: 'uid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizCode: 'string',
      bizId: 'string',
      certName: 'string',
      certNo: 'string',
      identityType: 'string',
      certType: 'string',
      metaInfo: 'string',
      externParam: 'string',
      uid: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDidPersonFacevrfnewocpResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 可信实人认证的唯一标识，返回后用于移动端进行唤起刷脸，也用于后续查询认证结果的关键入参。
  certifyId?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      certifyId: 'certify_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      certifyId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDidPersonFacevrfminiappnewocpRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 场景码，通常针对性特别支持，或者防止多调用方使用相同租户身份的情况下用bizCode做区分。
  bizCode?: string;
  // 请求的唯一标识，通常为32字符宽度的字符串内容，也可以只用UUID，此参数通常用来支持幂等，或者排查问题，调用方可以使用业务流水号。
  bizId: string;
  // 姓名字段，真实姓名，不可包含空格等特殊字符。
  certName: string;
  // 证件号码，要求带有字母的情况使用大写字母。
  certNo: string;
  // 身份信息来源类型，当前仅支持证件（CERT_INFO）
  identityType: string;
  // 证件类型，当前仅支持身份证（IDENTITY_CARD）
  certType: string;
  // 认证结束回跳地址
  returnUrl: string;
  // DID未来创建锚定的用户身份唯一关联，如果不设置此参数则使用二要素拼接后的哈希值 SHA256("张三"+"210282*****X") 来进行关联创建DID，并且支持幂等。
  uid?: string;
  // 刷脸类型，目前只支持FACE_SDK、FACE，默认FACE_SDK
  faceType?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizCode: 'biz_code',
      bizId: 'biz_id',
      certName: 'cert_name',
      certNo: 'cert_no',
      identityType: 'identity_type',
      certType: 'cert_type',
      returnUrl: 'return_url',
      uid: 'uid',
      faceType: 'face_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizCode: 'string',
      bizId: 'string',
      certName: 'string',
      certNo: 'string',
      identityType: 'string',
      certType: 'string',
      returnUrl: 'string',
      uid: 'string',
      faceType: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDidPersonFacevrfminiappnewocpResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 查询刷脸结果唯一标识
  certifyId?: string;
  // 认证流程入口 URL。
  certifyUrl?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      certifyId: 'certify_id',
      certifyUrl: 'certify_url',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      certifyId: 'string',
      certifyUrl: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDidCertificationThreemetanewocpRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 身份证号码
  certNo: string;
  // 证书的subject did，不给此参数时候三要素验证不颁发vc
  did?: string;
  // 手机号码
  mobile: string;
  // 姓名
  name: string;
  // 场景码，找dis工作人员进行分配
  bizCode?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      certNo: 'cert_no',
      did: 'did',
      mobile: 'mobile',
      name: 'name',
      bizCode: 'biz_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      certNo: 'string',
      did: 'string',
      mobile: 'string',
      name: 'string',
      bizCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDidCertificationThreemetanewocpResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // vc id，可通过该字符串来查询vc具体内容
  vcId?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      vcId: 'vc_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      vcId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ImportDidAldabaRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 待迁移did
  did: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      did: 'did',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      did: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ImportDidAldabaResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDidDtxPersonRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 唯一号，比如可以是hash(证件类型+企业营业执照号) 计算出来的唯一值等
  ownerUid: string;
  // 场景码，找dis工作人员进行分配
  // 
  bizCode?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      ownerUid: 'owner_uid',
      bizCode: 'biz_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      ownerUid: 'string',
      bizCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDidDtxPersonResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 生成的did字符串
  // 
  did?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      did: 'did',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      did: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AddDidDtxPkRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 待操作的did
  did: string;
  // 待添加公钥
  publicKey: string;
  // keyId
  keyId: string;
  // 需要传输给业务服务的JSON字段
  // 
  extension?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      did: 'did',
      publicKey: 'public_key',
      keyId: 'key_id',
      extension: 'extension',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      did: 'string',
      publicKey: 'string',
      keyId: 'string',
      extension: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AddDidDtxPkResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDidDtxVcRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // vc原文
  vc: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      vc: 'vc',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      vc: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDidDtxVcResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartMydidcommunAgencySettleinRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 企业名称
  epCertName: string;
  // 企业证件号
  epCertNo: string;
  // 法人姓名
  legalPersonCertName: string;
  // 事件通知地址
  notificationUrl?: string;
  // 公钥
  publicKey: string;
  // 恢复公钥
  recoverKey: string;
  // 业务码，接入时需要找数据隐私服务分配
  bizCode?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      epCertName: 'ep_cert_name',
      epCertNo: 'ep_cert_no',
      legalPersonCertName: 'legal_person_cert_name',
      notificationUrl: 'notification_url',
      publicKey: 'public_key',
      recoverKey: 'recover_key',
      bizCode: 'biz_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      epCertName: 'string',
      epCertNo: 'string',
      legalPersonCertName: 'string',
      notificationUrl: 'string',
      publicKey: 'string',
      recoverKey: 'string',
      bizCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartMydidcommunAgencySettleinResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 生成的did
  did?: string;
  // 生成的did doc
  doc?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      did: 'did',
      doc: 'doc',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      did: 'string',
      doc: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartMydidcommunAgencyChoicetappRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 入驻时候生成的did
  did: string;
  // 服务ID
  serviceId: string;
  // 选择tapp的名称
  tappName: string;
  // tapp版本
  tappVersion: number;
  // 业务码，需要接入时联系数据隐私服务分配
  bizCode?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      did: 'did',
      serviceId: 'service_id',
      tappName: 'tapp_name',
      tappVersion: 'tapp_version',
      bizCode: 'biz_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      did: 'string',
      serviceId: 'string',
      tappName: 'string',
      tappVersion: 'number',
      bizCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartMydidcommunAgencyChoicetappResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // doc当前版本
  preVersion?: number;
  // 生成的tapp info
  serviceEndpoint?: string;
  // 生成的serviceId
  serviceId?: string;
  // service 类型
  serviceType?: string;
  // EXIST 该tapp和serviceid已经包含在did doc中；
  // CONFLICT 该serviceid已经存在，但信息与此次不一致；
  // VALID 正常
  desc?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      preVersion: 'pre_version',
      serviceEndpoint: 'service_endpoint',
      serviceId: 'service_id',
      serviceType: 'service_type',
      desc: 'desc',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      preVersion: 'number',
      serviceEndpoint: 'string',
      serviceId: 'string',
      serviceType: 'string',
      desc: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartMydidcommunAgencyuserPersonjoinRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 身份证号码
  certNo: string;
  // 姓名
  name: string;
  // 事件通知地址
  notificationUrl: string;
  // 公钥	
  publicKey: string;
  // 恢复公钥	
  recoverKey: string;
  // 选择的TAPP列表
  tappInfoList?: ChoiceTappInfo[];
  // 业务码，接入时需要找数据隐私服务分配
  bizCode?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      certNo: 'cert_no',
      name: 'name',
      notificationUrl: 'notification_url',
      publicKey: 'public_key',
      recoverKey: 'recover_key',
      tappInfoList: 'tapp_info_list',
      bizCode: 'biz_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      certNo: 'string',
      name: 'string',
      notificationUrl: 'string',
      publicKey: 'string',
      recoverKey: 'string',
      tappInfoList: { 'type': 'array', 'itemType': ChoiceTappInfo },
      bizCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartMydidcommunAgencyuserPersonjoinResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 生成的did
  did?: string;
  // 生成的did doc
  doc?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      did: 'did',
      doc: 'doc',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      did: 'string',
      doc: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartMydidcommunAgencyuserCorporatejoinRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 企业名称
  epCertName: string;
  // 企业证件号
  epCertNo: string;
  // 法人姓名
  legalPersonCertName: string;
  // 事件通知地址
  notificationUrl: string;
  // 公钥	
  publicKey: string;
  // 恢复公钥	
  recoverKey: string;
  // 选择的tapp列表
  tappInfoList?: ChoiceTappInfo[];
  // 业务码，接入时需要找数据隐私服务分配
  bizCode?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      epCertName: 'ep_cert_name',
      epCertNo: 'ep_cert_no',
      legalPersonCertName: 'legal_person_cert_name',
      notificationUrl: 'notification_url',
      publicKey: 'public_key',
      recoverKey: 'recover_key',
      tappInfoList: 'tapp_info_list',
      bizCode: 'biz_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      epCertName: 'string',
      epCertNo: 'string',
      legalPersonCertName: 'string',
      notificationUrl: 'string',
      publicKey: 'string',
      recoverKey: 'string',
      tappInfoList: { 'type': 'array', 'itemType': ChoiceTappInfo },
      bizCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartMydidcommunAgencyuserCorporatejoinResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 生成的did
  did?: string;
  // 生成的did doc
  doc?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      did: 'did',
      doc: 'doc',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      did: 'string',
      doc: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateMydidcommunAgencyDocRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 入驻时候生成的did
  did: string;
  // 对参数进行构造签名
  operationSign: string;
  // doc当前版本
  preVersion: number;
  // doc中服务信息列表
  serviceList: DisServicesInfo[];
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      did: 'did',
      operationSign: 'operation_sign',
      preVersion: 'pre_version',
      serviceList: 'service_list',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      did: 'string',
      operationSign: 'string',
      preVersion: 'number',
      serviceList: { 'type': 'array', 'itemType': DisServicesInfo },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateMydidcommunAgencyDocResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartMydidcommunAgencyDatatransmitstartRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 发送者的did
  did: string;
  // 数字资产的owner did
  ownerDid?: string;
  // 具体调用Tapp的参数数组，json格式
  params: string;
  // 数据处理tapp id
  processTappId?: string;
  // 处理tapp的function
  processTappMethod?: string;
  // 读取数据的tapp id
  readTappId: string;
  // 读取数据的Tapp中对应的Method
  readTappMethod: string;
  // 数据资产传输目标did
  targetDid: string;
  // 发起流程的唯一号，系统将更加这个唯一号保持幂等
  processId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      did: 'did',
      ownerDid: 'owner_did',
      params: 'params',
      processTappId: 'process_tapp_id',
      processTappMethod: 'process_tapp_method',
      readTappId: 'read_tapp_id',
      readTappMethod: 'read_tapp_method',
      targetDid: 'target_did',
      processId: 'process_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      did: 'string',
      ownerDid: 'string',
      params: 'string',
      processTappId: 'string',
      processTappMethod: 'string',
      readTappId: 'string',
      readTappMethod: 'string',
      targetDid: 'string',
      processId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartMydidcommunAgencyDatatransmitstartResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 发起之后返回的任务ID
  taskId?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      taskId: 'task_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      taskId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartMydidcommunAgencyDatatransmitcontinueRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 调用tapp时传输的参数
  params: string;
  // 之前触发主动发送数据流程返回的taskid
  taskId: string;
  // 发送者的did声明
  did: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      params: 'params',
      taskId: 'task_id',
      did: 'did',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      params: 'string',
      taskId: 'string',
      did: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartMydidcommunAgencyDatatransmitcontinueResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 主动发起数据传输流程的task id
  taskId?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      taskId: 'task_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      taskId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartMydidcommunAgencyDataapplicationRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 申请的数据ID，该字段由两部分组成ownerdid#service-id(did doc中表示对应数据资产的serviceid)
  dataId: string;
  // 主动发起申请数据流程的请求者did
  did: string;
  // 申请数据时增加的说明，比如说明本次申请数据的原因，等描述
  message?: string;
  // 申请者在申请数据的时候，申明自己将使用那种方式处理申请到的数据。如果该字段为0表示要得到原始数据。
  // 该字段形式与dataId类似
  processDataId?: string;
  // 发起申请的申请id，系统将基于该id保持幂等
  processId: string;
  // 数据申请到之后最终发送给谁的did
  targetDid: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      dataId: 'data_id',
      did: 'did',
      message: 'message',
      processDataId: 'process_data_id',
      processId: 'process_id',
      targetDid: 'target_did',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      dataId: 'string',
      did: 'string',
      message: 'string',
      processDataId: 'string',
      processId: 'string',
      targetDid: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartMydidcommunAgencyDataapplicationResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 本次请求对应的任务ID，后续消息通知时会携带该字段，方便业务系统进行对应
  taskId?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      taskId: 'task_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      taskId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartMydidcommunAgencyChoicetapplistRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 入驻时候生成的did
  did: string;
  // 选择的tapp信息列表
  tappInfos: ChoiceTappInfo[];
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      did: 'did',
      tappInfos: 'tapp_infos',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      did: 'string',
      tappInfos: { 'type': 'array', 'itemType': ChoiceTappInfo },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartMydidcommunAgencyChoicetapplistResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 之前did的版本号，在更新时会使用到
  preVersion?: number;
  // 对应servic info
  serviceList?: DisServicesInfo[];
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      preVersion: 'pre_version',
      serviceList: 'service_list',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      preVersion: 'number',
      serviceList: { 'type': 'array', 'itemType': DisServicesInfo },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartMydidcommunAgencyDataassertregisterRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 审批流程节点
  approvers: string[];
  // 数据资产的Owner
  did: string;
  // 数据资产id
  serviceId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      approvers: 'approvers',
      did: 'did',
      serviceId: 'service_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      approvers: { 'type': 'array', 'itemType': 'string' },
      did: 'string',
      serviceId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartMydidcommunAgencyDataassertregisterResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 数据资产ID
  dataId?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      dataId: 'data_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      dataId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartMydidcommunAgencyAuthRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 发起者did
  did: string;
  // 用户在本地构造的发起数据授权申请的消息
  requestRaw: string;
  // 业务码，需要接入时联系数据隐私服务分配
  bizCode?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      did: 'did',
      requestRaw: 'request_raw',
      bizCode: 'biz_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      did: 'string',
      requestRaw: 'string',
      bizCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartMydidcommunAgencyAuthResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 授权返回值
  result?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartMydidcommunAgencyProcessauthRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 处理人did
  did: string;
  // 处理授权的原始请求流
  requestRaw: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      did: 'did',
      requestRaw: 'request_raw',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      did: 'string',
      requestRaw: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartMydidcommunAgencyProcessauthResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 授权处理后的结果
  result?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryMydidcommunAgencyProcessauthRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 审批流水号
  processId: string;
  // 查询者did
  did: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      processId: 'process_id',
      did: 'did',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      processId: 'string',
      did: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryMydidcommunAgencyProcessauthResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 审批流当前状态
  result?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryMydidcommunAgencyServicetypeinfoRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 带查询的服务类型
  serviceType: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      serviceType: 'service_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      serviceType: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryMydidcommunAgencyServicetypeinfoResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 对应算法的入口函数名
  method?: string;
  // 服务对应的具体的Tapp或者算法名
  name?: string;
  // 表示服务的实际处理类型，目前是Data_Tapp
  // 
  serviceModel?: string;
  // 对应name的算法当前版本
  version?: number;
  // serviceType所对应版本的publickey
  publicKey?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      method: 'method',
      name: 'name',
      serviceModel: 'service_model',
      version: 'version',
      publicKey: 'public_key',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      method: 'string',
      name: 'string',
      serviceModel: 'string',
      version: 'number',
      publicKey: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryMydidcommunAgencyTaskresultfileRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 文件在数据隐私服务中标示
  fileMark: string;
  // 结果文件拥有者did
  did: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      fileMark: 'file_mark',
      did: 'did',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      fileMark: 'string',
      did: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryMydidcommunAgencyTaskresultfileResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 文件临时路径
  fileUrl?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      fileUrl: 'file_url',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      fileUrl: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyMydidcommunTaskServicetypeRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 需要被授权人的DID
  targetDid: string;
  // 申请发起人的DID
  did: string;
  // 需要被授权使用的服务类型
  serviceType: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      targetDid: 'target_did',
      did: 'did',
      serviceType: 'service_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      targetDid: 'string',
      did: 'string',
      serviceType: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ApplyMydidcommunTaskServicetypeResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 用于查询异步处理流程的任务ID
  taskId?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      taskId: 'task_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      taskId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetMydidcommunTaskTaskresultRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 任务ID
  taskId: string;
  // 申请人did（只有任务发起人才能查询执行结果）
  did: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      taskId: 'task_id',
      did: 'did',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      taskId: 'string',
      did: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetMydidcommunTaskTaskresultResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 任务ID
  taskId?: string;
  // FINISH 执行成功
  // CANCEL 执行失败
  // 只有FINISH 和CANCEL为最终状态，其他均为中间状态
  status?: string;
  // json序列化后的，任务执行结果，对不同的任务格式会有不同
  // 如：
  // - 代理VC的任务，返回值结构为{"vc":"1111111"}
  // - 获取数据的任务，返回值结构为{"response":{"output":"xxxx","status":"FINISH"}}
  dataResult?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      taskId: 'task_id',
      status: 'status',
      dataResult: 'data_result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      taskId: 'string',
      status: 'string',
      dataResult: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AddMydidcommunAssetDataRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 数据实际存储路径
  dataPath: string;
  // 请求发起人的did
  did: string;
  // 所注册的资产所有者DID，要注意资产所有者DID需与授权发起方DID相同
  ownerDid: string;
  // 数据所对应的业务类型
  serviceType: string;
  // 临时字段，数据文件的md5哈希值，在隐私服务无法直接读取数据时，由用户提供
  dataHash?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      dataPath: 'data_path',
      did: 'did',
      ownerDid: 'owner_did',
      serviceType: 'service_type',
      dataHash: 'data_hash',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      dataPath: 'string',
      did: 'string',
      ownerDid: 'string',
      serviceType: 'string',
      dataHash: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AddMydidcommunAssetDataResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 数据DID，用于唯一标示数据
  dataDid?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      dataDid: 'data_did',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      dataDid: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartMydidcommunTaskGetdataRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 要获取的数据ID
  dataDid: string;
  // 申请获得的数据的用户DID，将用该DID公钥加密原始数据
  targetDid: string;
  // 授权数据申请方读取该数据的VC
  vc: string;
  // 请求发起人的did
  did: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      dataDid: 'data_did',
      targetDid: 'target_did',
      vc: 'vc',
      did: 'did',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      dataDid: 'string',
      targetDid: 'string',
      vc: 'string',
      did: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartMydidcommunTaskGetdataResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 对应任务的ID
  taskId?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      taskId: 'task_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      taskId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartMydidcommunInstitutionSettleinRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 入驻时选择的业务码，这个码需要在机构入驻时与数据隐私服务确认之后填写
  bizCode?: string;
  // 机构唯一编号
  institiutionNo?: string;
  // 机构实际名称
  institutionName: string;
  // 接受数据隐私服务回调通知的URL，如果地址是https的，那么该地址必须提供有效的证书
  notificationUrl?: string;
  // 机构和数据隐私服务进行通讯的非对称密钥对中的公钥
  publicKey: string;
  // 恢复密钥公钥，可用于以后修改通讯公钥用，不要和通讯公钥一样
  recoverKey: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizCode: 'biz_code',
      institiutionNo: 'institiution_no',
      institutionName: 'institution_name',
      notificationUrl: 'notification_url',
      publicKey: 'public_key',
      recoverKey: 'recover_key',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizCode: 'string',
      institiutionNo: 'string',
      institutionName: 'string',
      notificationUrl: 'string',
      publicKey: 'string',
      recoverKey: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartMydidcommunInstitutionSettleinResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 机构入驻后，会为其分配唯一的区块链数字身份，这里是数字身份的ID，后续接口都需要用这个id作为参数
  did?: string;
  // 是对数字身份did的描述，主要包括通讯公钥，和恢复公钥，以及会调url
  doc?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      did: 'did',
      doc: 'doc',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      did: 'string',
      doc: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetMydidcommunWorkergroupSyncRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 计算集群群组代号
  groupCode: string;
  // 环境名称
  env: string;
  // 主节点
  masterNode: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      groupCode: 'group_code',
      env: 'env',
      masterNode: 'master_node',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      groupCode: 'string',
      env: 'string',
      masterNode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetMydidcommunWorkergroupSyncResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 序列化后的同步任务
  data?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      data: 'data',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      data: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetMydidcommunWorkergroupPodRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 部署ID
  podId: number;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      podId: 'pod_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      podId: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetMydidcommunWorkergroupPodResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 序列化后的部署
  data?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      data: 'data',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      data: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FinishMydidcommunWorkergroupSyncRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 部署ID
  podId: number;
  // 任务ID
  taskId: number;
  // 是否同步成功
  isSuccess: boolean;
  // 处理消息
  msg: string;
  // 负责更新的节点名
  masterNode: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      podId: 'pod_id',
      taskId: 'task_id',
      isSuccess: 'is_success',
      msg: 'msg',
      masterNode: 'master_node',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      podId: 'number',
      taskId: 'number',
      isSuccess: 'boolean',
      msg: 'string',
      masterNode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class FinishMydidcommunWorkergroupSyncResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetMydidcommunWorkergroupTappRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // TAPPInstance所对应的部署ID
  podId: number;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      podId: 'pod_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      podId: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetMydidcommunWorkergroupTappResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // TAPP部署详情
  data?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      data: 'data',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      data: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateMydidcommunWorkergroupTappRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // TAPP部署实例ID
  tappInstanceId: number;
  // TAPP部署公钥
  publicKey: string;
  // TAPP部署在mytf中的版本号
  tappVersion: number;
  // mytf部署后返回的TAPP哈希
  hash: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      tappInstanceId: 'tapp_instance_id',
      publicKey: 'public_key',
      tappVersion: 'tapp_version',
      hash: 'hash',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      tappInstanceId: 'number',
      publicKey: 'string',
      tappVersion: 'number',
      hash: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateMydidcommunWorkergroupTappResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryMydidcommunWorkergroupWorkflowRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 工作流对应的部署Id
  podId: number;
  // 版本号
  podVersion: number;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      podId: 'pod_id',
      podVersion: 'pod_version',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      podId: 'number',
      podVersion: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryMydidcommunWorkergroupWorkflowResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 工作流配置
  data?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      data: 'data',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      data: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SyncMydidcommunWorkergroupGroupRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 计算集群明称
  workerGroup: string;
  // 计算集群环境
  env: string;
  // 执行状态上报
  metrics: string;
  // 执行器code
  executorList: string[];
  // 主节点名
  masterNode: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      workerGroup: 'worker_group',
      env: 'env',
      metrics: 'metrics',
      executorList: 'executor_list',
      masterNode: 'master_node',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      workerGroup: 'string',
      env: 'string',
      metrics: 'string',
      executorList: { 'type': 'array', 'itemType': 'string' },
      masterNode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SyncMydidcommunWorkergroupGroupResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListMydidcommunWorkergroupPodversionRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 部署id
  podId: number;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      podId: 'pod_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      podId: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListMydidcommunWorkergroupPodversionResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 版本列表
  data?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      data: 'data',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      data: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SaveMydidIdaasDidserviceRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // uuid
  uuid: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      uuid: 'uuid',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      uuid: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SaveMydidIdaasDidserviceResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // did
  did?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      did: 'did',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      did: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryDidNotificationDideventRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 指定关注的did
  did: string;
  // 起始偏移量
  offset: number;
  // 场景码，找dis工作人员进行分配
  bizCode?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      did: 'did',
      offset: 'offset',
      bizCode: 'biz_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      did: 'string',
      offset: 'number',
      bizCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryDidNotificationDideventResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 相关事件列表
  events?: DidEvent[];
  // 是否还有待同步事件
  hasMore?: boolean;
  // 下次事件拉取开始的offset
  nextOffset?: number;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      events: 'events',
      hasMore: 'has_more',
      nextOffset: 'next_offset',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      events: { 'type': 'array', 'itemType': DidEvent },
      hasMore: 'boolean',
      nextOffset: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryDidNotificationVceventRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 指定关注的did
  did: string;
  // 开始 同步事件的起始偏移量
  offset: number;
  // 场景码，找dis工作人员进行分配
  bizCode?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      did: 'did',
      offset: 'offset',
      bizCode: 'biz_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      did: 'string',
      offset: 'number',
      bizCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryDidNotificationVceventResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // vc事件列表
  events?: VCEvent[];
  // 是否有更多事件待同步
  hasMore?: boolean;
  // 下次拉取事件的起始偏移量
  nextOffset?: number;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      events: 'events',
      hasMore: 'has_more',
      nextOffset: 'next_offset',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      events: { 'type': 'array', 'itemType': VCEvent },
      hasMore: 'boolean',
      nextOffset: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryDidNotificationFulldidRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // did描述符
  did: string;
  // 页数
  pageNum: number;
  // 使用使用的did私钥对传参进行签名，签名方法可以联系开发人员
  requestSignature: string;
  // 场景码，找dis工作人员进行分配
  bizCode?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      did: 'did',
      pageNum: 'page_num',
      requestSignature: 'request_signature',
      bizCode: 'biz_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      did: 'string',
      pageNum: 'number',
      requestSignature: 'string',
      bizCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryDidNotificationFulldidResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // did详情
  list?: DidDetail[];
  // 总体数量
  totalNum?: number;
  // 总页数
  totalPage?: number;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      list: 'list',
      totalNum: 'total_num',
      totalPage: 'total_page',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      list: { 'type': 'array', 'itemType': DidDetail },
      totalNum: 'number',
      totalPage: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDidIdentityCorporateRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 扩展字段
  extensionInfo?: string;
  // 公钥
  publicKey: string;
  // 恢复公钥
  recoveryKey: string;
  // uid
  userId: string;
  // 持有者名字
  userName?: string;
  // 场景码，找dis工作人员进行分配
  bizCode?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      extensionInfo: 'extension_info',
      publicKey: 'public_key',
      recoveryKey: 'recovery_key',
      userId: 'user_id',
      userName: 'user_name',
      bizCode: 'biz_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      extensionInfo: 'string',
      publicKey: 'string',
      recoveryKey: 'string',
      userId: 'string',
      userName: 'string',
      bizCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDidIdentityCorporateResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // did
  did?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      did: 'did',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      did: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InitDidAdddidHashRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 客户did
  did: string;
  // {\"creator\":\"did:mychain:93496ea09e022cdf21a0df15d2bfb3102985eb64016af5fb14a2e24a9ab1a73a\",\"created\":\"2019-08-08T13:52:02+0800\",\"service\":[{\"id\":\"didauth-1\",\"serviceEndpoint\":\"auth.mydid.agent.com\",\"type\":\"DidAuthService\"},{\"id\":\"vcrepository-1\",\"serviceEndpoint\":\"auth.mydid.agent.com\",\"type\":\"VerifiableClaimRepository\"},{\"id\":\"oneBid-1\",\"serviceEndpoint\":\"[{\\\"uid\\\":\\\"z50Uid\\\",\\\"tenancyId\\\":\\\"z50\\\",\\\"version\\\":\\\"v1.0\\\",\\\"releated\\\":{\\\"releatedHash\\\":\\\"hash(关联结果)\\\",\\\"releatedInfo\\\":\\\"AES(核身过程)+version\\\"}}]\",\"type\":\"oneBid\"}],\"id\":\"did:mychain:4145aac009d5e94ad68c16bd56af0bf65a0437b49046529a142de8b385ee71c1\",\"publicKey\":[{\"controller\":\"did:mychain:93496ea09e022cdf21a0df15d2bfb3102985eb64016af5fb14a2e24a9ab1a73a\",\"id\":\"keys-1\",\"publicKey\":\"f498ee29763dd24cd8324c6e861d82ef558e7d6dac10be8b99f5c33934d5cc4f5ff49861a235c7fd4c99a99265d777e657e747164e5549195003878c7222bdcc\",\"type\":\"Secp256k1VerificationKey2018\"}],\"@context\":\"https://w3id.org/did/v1\",\"updated\":\"2019-08-08T13:52:02+0800\",\"authentication\":[\"keys-1\"]}"])
  diddoc: string;
  // 使用私钥对消息中其他字段进行签名
  requestSignature: string;
  // 场景码，找dis工作人员进行分配
  bizCode?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      did: 'did',
      diddoc: 'diddoc',
      requestSignature: 'request_signature',
      bizCode: 'biz_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      did: 'string',
      diddoc: 'string',
      requestSignature: 'string',
      bizCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InitDidAdddidHashResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 待签名的交易hash
  hash?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      hash: 'hash',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      hash: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDidAdddidExecuteRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // did
  did: string;
  // 操作描述
  operation: string;
  // 操作的具体参数
  payload: DidAddDoc;
  // 使用私钥对消息中其他字段进行签名
  requestSignature: string;
  // 场景码，找dis工作人员进行分配
  bizCode?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      did: 'did',
      operation: 'operation',
      payload: 'payload',
      requestSignature: 'request_signature',
      bizCode: 'biz_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      did: 'string',
      operation: 'string',
      payload: DidAddDoc,
      requestSignature: 'string',
      bizCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDidAdddidExecuteResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InitDidAddvcHashRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 可验证声明hash
  contentHash: string;
  // 发起该交易的did
  did: string;
  // issuer did对应的hash
  issuerHash: string;
  // 使用私钥对消息中其他字段进行签名
  requestSignature: string;
  // valid or invalid
  status: string;
  // subject的did计算的hash
  subjectHash: string;
  // 可验证声明id
  vcid: string;
  // 场景码，找dis工作人员进行分配
  bizCode?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      contentHash: 'content_hash',
      did: 'did',
      issuerHash: 'issuer_hash',
      requestSignature: 'request_signature',
      status: 'status',
      subjectHash: 'subject_hash',
      vcid: 'vcid',
      bizCode: 'biz_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      contentHash: 'string',
      did: 'string',
      issuerHash: 'string',
      requestSignature: 'string',
      status: 'string',
      subjectHash: 'string',
      vcid: 'string',
      bizCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InitDidAddvcHashResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 添加vc的交易hash值
  hash?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      hash: 'hash',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      hash: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDidAddvcExecuteRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 发起该交易的did
  did: string;
  // 操作名
  operation: string;
  // 创建VC具体参数
  payload: AddVC;
  // 使用私钥对消息中其他字段进行签名
  requestSignature: string;
  // 场景码，找dis工作人员进行分配
  bizCode?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      did: 'did',
      operation: 'operation',
      payload: 'payload',
      requestSignature: 'request_signature',
      bizCode: 'biz_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      did: 'string',
      operation: 'string',
      payload: AddVC,
      requestSignature: 'string',
      bizCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDidAddvcExecuteResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InitDidUpdatevcstatusHashRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 交易发起者did
  did: string;
  // 使用私钥对消息中其他字段进行签名
  requestSignature: string;
  // valid or invalid
  status: string;
  // 可验证声明id
  vcid: string;
  // 场景码，找dis工作人员进行分配
  bizCode?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      did: 'did',
      requestSignature: 'request_signature',
      status: 'status',
      vcid: 'vcid',
      bizCode: 'biz_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      did: 'string',
      requestSignature: 'string',
      status: 'string',
      vcid: 'string',
      bizCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InitDidUpdatevcstatusHashResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 交易hash
  hash?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      hash: 'hash',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      hash: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDidUpdatevcstatusExecuteRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 交易发起者did
  did: string;
  // 使用私钥对消息中其他字段进行签名
  requestSignature: string;
  // 交易hash的签名
  signature: string;
  // valid or invalid
  status: string;
  // 可验证声明id
  vcid: string;
  // 场景码，找dis工作人员进行分配
  bizCode?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      did: 'did',
      requestSignature: 'request_signature',
      signature: 'signature',
      status: 'status',
      vcid: 'vcid',
      bizCode: 'biz_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      did: 'string',
      requestSignature: 'string',
      signature: 'string',
      status: 'string',
      vcid: 'string',
      bizCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDidUpdatevcstatusExecuteResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InitDidUpdatedidHashRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 发起者did
  did: string;
  // did doc
  doc: string;
  // 使用私钥对消息中其他字段进行签名
  requestSignature: string;
  // 场景码，找dis工作人员进行分配
  bizCode?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      did: 'did',
      doc: 'doc',
      requestSignature: 'request_signature',
      bizCode: 'biz_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      did: 'string',
      doc: 'string',
      requestSignature: 'string',
      bizCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InitDidUpdatedidHashResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 交易hash
  hash?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      hash: 'hash',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      hash: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDidUpdatedidExecuteRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // did
  did: string;
  // did doc
  doc: string;
  // 使用私钥对消息中其他字段进行签名
  requestSignature: string;
  //  交易hash签名
  signature: string;
  // 场景码，找dis工作人员进行分配
  bizCode?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      did: 'did',
      doc: 'doc',
      requestSignature: 'request_signature',
      signature: 'signature',
      bizCode: 'biz_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      did: 'string',
      doc: 'string',
      requestSignature: 'string',
      signature: 'string',
      bizCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDidUpdatedidExecuteResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryDidDiddocDirectRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 发起者did
  did: string;
  // 待查询did
  queryDid: string;
  // 请求中其他字段的签名
  requestSignature: string;
  // 场景码，找dis工作人员进行分配
  bizCode?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      did: 'did',
      queryDid: 'query_did',
      requestSignature: 'request_signature',
      bizCode: 'biz_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      did: 'string',
      queryDid: 'string',
      requestSignature: 'string',
      bizCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryDidDiddocDirectResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // did doc
  doc?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      doc: 'doc',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      doc: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryDidVcDirectRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 发起者did
  did: string;
  // 请求中其他字段的签名
  requestSignature: string;
  // 可验证声明id
  vcid: string;
  // 场景码，找dis工作人员进行分配
  bizCode?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      did: 'did',
      requestSignature: 'request_signature',
      vcid: 'vcid',
      bizCode: 'biz_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      did: 'string',
      requestSignature: 'string',
      vcid: 'string',
      bizCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryDidVcDirectResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // vc内容hash值
  contentHash?: string;
  // vc的状态
  status?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      contentHash: 'content_hash',
      status: 'status',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      contentHash: 'string',
      status: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDidIdentityPersonRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 扩展字段
  extensionInfo?: string;
  // 公钥
  publicKey: string;
  // 恢复公钥
  recoveryKey: string;
  // 用户id
  userId: string;
  // 用户名称
  userName?: string;
  // 场景码，找dis工作人员进行分配
  bizCode?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      extensionInfo: 'extension_info',
      publicKey: 'public_key',
      recoveryKey: 'recovery_key',
      userId: 'user_id',
      userName: 'user_name',
      bizCode: 'biz_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      extensionInfo: 'string',
      publicKey: 'string',
      recoveryKey: 'string',
      userId: 'string',
      userName: 'string',
      bizCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDidIdentityPersonResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // did
  did?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      did: 'did',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      did: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateDidUpdatedidAuthkeyRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // did描述符
  did: string;
  // 具体操作名
  operation: string;
  // 更新Auth 操作具体描述
  payload: UpdateDidAuthPayload;
  // sig(hash(operation+payload+did))  使用sdk生成方式
  requestSignature: string;
  // 场景码，找dis工作人员进行分配
  bizCode?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      did: 'did',
      operation: 'operation',
      payload: 'payload',
      requestSignature: 'request_signature',
      bizCode: 'biz_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      did: 'string',
      operation: 'string',
      payload: UpdateDidAuthPayload,
      requestSignature: 'string',
      bizCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateDidUpdatedidAuthkeyResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateDidUpdatedidServiceRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // did描述符
  did: string;
  // 更新did service endpoint
  operation: string;
  // update did service的payload
  payload: UpdateDidService;
  // sig(hash(operation+payload+did)) 使用sdk生成方式
  requestSignature: string;
  // 场景码，找dis工作人员进行分配
  bizCode?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      did: 'did',
      operation: 'operation',
      payload: 'payload',
      requestSignature: 'request_signature',
      bizCode: 'biz_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      did: 'string',
      operation: 'string',
      payload: UpdateDidService,
      requestSignature: 'string',
      bizCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateDidUpdatedidServiceResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AddDidUpdatedidServiceRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 待处理did
  did: string;
  // 具体操作名
  operation: string;
  // 添加的did service info
  payload: UpdateDidService;
  // sig(hash(operation+payload+did)) 使用sdk生成方式
  requestSignature: string;
  // 场景码，找dis工作人员进行分配
  bizCode?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      did: 'did',
      operation: 'operation',
      payload: 'payload',
      requestSignature: 'request_signature',
      bizCode: 'biz_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      did: 'string',
      operation: 'string',
      payload: UpdateDidService,
      requestSignature: 'string',
      bizCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AddDidUpdatedidServiceResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteDidUpdatedidServiceRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 待处理did
  did: string;
  // 具体操作名
  operation: string;
  // 删除did service操作信息
  payload: DidDeleteService;
  // sig(hash(operation+payload+did)) 使用sdk生成方式签名
  requestSignature: string;
  // 场景码，找dis工作人员进行分配
  bizCode?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      did: 'did',
      operation: 'operation',
      payload: 'payload',
      requestSignature: 'request_signature',
      bizCode: 'biz_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      did: 'string',
      operation: 'string',
      payload: DidDeleteService,
      requestSignature: 'string',
      bizCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeleteDidUpdatedidServiceResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateDidUpdatevcStatusRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // did描述符
  did: string;
  // 可验证声明更新
  operation: string;
  // 更新可验证声明状态
  payload: UpdateVCStatus;
  // sig(hash(operation+payload+did)) 使用sdk生成方式
  requestSignature: string;
  // 场景码，找dis工作人员进行分配
  bizCode?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      did: 'did',
      operation: 'operation',
      payload: 'payload',
      requestSignature: 'request_signature',
      bizCode: 'biz_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      did: 'string',
      operation: 'string',
      payload: UpdateVCStatus,
      requestSignature: 'string',
      bizCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateDidUpdatevcStatusResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class OpenDidResolverServiceRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 扩展字段
  specification?: string;
  // 需要开通服务的租户id
  tenantId: string;
  // 场景码，找dis工作人员进行分配
  bizCode?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      specification: 'specification',
      tenantId: 'tenant_id',
      bizCode: 'biz_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      specification: 'string',
      tenantId: 'string',
      bizCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class OpenDidResolverServiceResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StopDidResolverServiceRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 扩展字段
  specification?: string;
  // 需要关闭resolver服务的租户id
  tenantId: string;
  // 场景码，找dis工作人员进行分配
  bizCode?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      specification: 'specification',
      tenantId: 'tenant_id',
      bizCode: 'biz_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      specification: 'string',
      tenantId: 'string',
      bizCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StopDidResolverServiceResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDidDerivedidExecuteRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 发起该交易的根DID
  did: string;
  // 操作名
  operation: string;
  // derive did的参数
  payload: DeriveDid;
  // 使用私钥对消息中其他字段进行签名
  requestSignature: string;
  // 场景码，找dis工作人员进行分配
  bizCode?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      did: 'did',
      operation: 'operation',
      payload: 'payload',
      requestSignature: 'request_signature',
      bizCode: 'biz_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      did: 'string',
      operation: 'string',
      payload: DeriveDid,
      requestSignature: 'string',
      bizCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartDidDerivedidExecuteResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ExecDidAccesscontrolAuthorizeRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 发起授权的did
  fromdid: string;
  // 对其他字段的签名
  requestSignature: string;
  // 被授权的did
  todid: string;
  // 授权的权限类型
  type: string[];
  // 场景码，找dis工作人员进行分配
  bizCode?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      fromdid: 'fromdid',
      requestSignature: 'request_signature',
      todid: 'todid',
      type: 'type',
      bizCode: 'biz_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      fromdid: 'string',
      requestSignature: 'string',
      todid: 'string',
      type: { 'type': 'array', 'itemType': 'string' },
      bizCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ExecDidAccesscontrolAuthorizeResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ExecDidAccesscontrolCheckRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 发起鉴权请求的did
  fromdid: string;
  // 发起者用私钥对请求其他字段的签名
  requestSignature: string;
  // 被鉴定权限的did
  todid: string;
  // 鉴定的权限类别
  type: string[];
  // 场景码，找dis工作人员进行分配
  bizCode?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      fromdid: 'fromdid',
      requestSignature: 'request_signature',
      todid: 'todid',
      type: 'type',
      bizCode: 'biz_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      fromdid: 'string',
      requestSignature: 'string',
      todid: 'string',
      type: { 'type': 'array', 'itemType': 'string' },
      bizCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ExecDidAccesscontrolCheckResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ExecDidAccesscontrolUpdateRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 发起请求的did
  fromdid: string;
  // 发起者私钥对其他字段的签名
  requestSignature: string;
  // 被更新权限的did
  todid: string;
  // 更新后的权限
  type: string[];
  // 场景码，找dis工作人员进行分配
  bizCode?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      fromdid: 'fromdid',
      requestSignature: 'request_signature',
      todid: 'todid',
      type: 'type',
      bizCode: 'biz_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      fromdid: 'string',
      requestSignature: 'string',
      todid: 'string',
      type: { 'type': 'array', 'itemType': 'string' },
      bizCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ExecDidAccesscontrolUpdateResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDidIdentityIotRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 扩展字段
  extensionInfo?: string;
  // 公钥
  publicKey: string;
  // 恢复秘钥
  recoveryKey: string;
  // id
  userId: string;
  // user name
  userName?: string;
  // 场景码，找dis工作人员进行分配
  bizCode?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      extensionInfo: 'extension_info',
      publicKey: 'public_key',
      recoveryKey: 'recovery_key',
      userId: 'user_id',
      userName: 'user_name',
      bizCode: 'biz_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      extensionInfo: 'string',
      publicKey: 'string',
      recoveryKey: 'string',
      userId: 'string',
      userName: 'string',
      bizCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDidIdentityIotResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 返回创建的did
  did?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      did: 'did',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      did: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ExecDidServicetypeCreateRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 发起该交易的did
  did: string;
  // 创建服务类型
  operation: string;
  // 新增服务类型的定义Json 字符串
  // {
  //   "@context": {
  //     "version": 1,
  //     "id": "{ServiceTypeName}", //<- 50 Byte
  //     "type": "ServiceType", //<- 固定值
  //     "serviceInput": "", //<- 入参描述
  //     "serviceOutput": "", //<- 出参描述
  //     "accessMode": "", //<- 访问模式
  //     "description": "" //<- 服务描述
  //   },
  //    "controller": "{Creator`s did}" // <- 创建者did，只有该创建者才能修改服务类型定义
  // }
  payload: string;
  // 使用私钥对消息中其他字段进行签名
  requestSignature: string;
  // 场景码，找dis工作人员进行分配
  bizCode?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      did: 'did',
      operation: 'operation',
      payload: 'payload',
      requestSignature: 'request_signature',
      bizCode: 'biz_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      did: 'string',
      operation: 'string',
      payload: 'string',
      requestSignature: 'string',
      bizCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ExecDidServicetypeCreateResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 服务注册成功之后返回注册的服务类型名
  serviceType?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      serviceType: 'service_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      serviceType: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDidIdentityCommonRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 场景码，找dis工作人员进行分配
  bizCode?: string;
  // 扩展字段
  extensionInfo?: string;
  // 公钥
  publicKey: string;
  // 恢复公钥
  recoveryKey: string;
  // user_id
  userId: string;
  // 名称
  userName?: string;
  // 通用DID类型 Person Corporate Devices Data Common
  entityType?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizCode: 'biz_code',
      extensionInfo: 'extension_info',
      publicKey: 'public_key',
      recoveryKey: 'recovery_key',
      userId: 'user_id',
      userName: 'user_name',
      entityType: 'entity_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizCode: 'string',
      extensionInfo: 'string',
      publicKey: 'string',
      recoveryKey: 'string',
      userId: 'string',
      userName: 'string',
      entityType: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateDidIdentityCommonResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // did
  did?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      did: 'did',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      did: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ConfirmVcVcrepoVctransmitRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 请求发起者did
  did: string;
  // vc_transmit_cnf
  operation: string;
  // VC传输确认请求参数
  payload: VcTransmitCnf[];
  // 签名
  signature: string;
  // 场景码，找dis工作人员进行分配
  bizCode?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      did: 'did',
      operation: 'operation',
      payload: 'payload',
      signature: 'signature',
      bizCode: 'biz_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      did: 'string',
      operation: 'string',
      payload: { 'type': 'array', 'itemType': VcTransmitCnf },
      signature: 'string',
      bizCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ConfirmVcVcrepoVctransmitResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 传输结果
  result?: VcTransmitResult[];
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: { 'type': 'array', 'itemType': VcTransmitResult },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateDidUpdatedidPubkeyRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 场景码，找dis工作人员进行分配
  bizCode?: string;
  // did描述符
  did: string;
  // 具体操作名
  operation: string;
  // 需要更新的新的公钥，仅在未完成上链的DID 才能做这个更新
  publicKey: string;
  // sig(hash(operation+payload+did)) 使用sdk生成方式
  requestSignature: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizCode: 'biz_code',
      did: 'did',
      operation: 'operation',
      publicKey: 'public_key',
      requestSignature: 'request_signature',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizCode: 'string',
      did: 'string',
      operation: 'string',
      publicKey: 'string',
      requestSignature: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateDidUpdatedidPubkeyResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AddDidUpdatedidServicelistRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 场景码，找dis工作人员进行分配
  bizCode?: string;
  // 待处理did
  did: string;
  // 具体操作名
  operation: string;
  // 更新ServiceList
  payload: UpdateDidServiceList;
  // sig(hash(operation+payload+did)) 使用sdk生成方式
  requestSignature: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizCode: 'biz_code',
      did: 'did',
      operation: 'operation',
      payload: 'payload',
      requestSignature: 'request_signature',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizCode: 'string',
      did: 'string',
      operation: 'string',
      payload: UpdateDidServiceList,
      requestSignature: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class AddDidUpdatedidServicelistResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartVcVcrepositoryWriteRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 指定情况跟随 auth_did_list，如果auth_did_list不指定，则此字段无需指定，否则是与auth_did_list长度相同，并且对应auth_did_list的did的公钥加密AES密钥的结果
  authAccessKeyList?: string[];
  // 配置此列表，则说明需要并且控制访问权限，此列表为初始配置的did名单，拥有对此颁发证书的读取权限。 如果不配置此列表，则默认将明文存储此证书，任何did都可以访问此证书声明内容。
  authDidList?: string[];
  // 写入VC数据的did，通常为证书VC的颁发者issuer的did。
  did: string;
  // 对当前VC Repository操作的描述，signature字段需要包含此操作的描述，最终会记录在VC Repository连接的链上，可追溯此operation操作记录。
  operation: string;
  // 写数据的did对应使用公钥做的数据签名，确保数据准确性。
  signature: string;
  // 可验证声明的完整声明，其中claim字段可以已被加密保护 {"content":{"verion":"0.7.0","issuer":"xxxx","subject":"xxxx","expire":1530735444,"issucanceDate":1530735000,"id":"XXXX","claim":{//用户自定义，可加密处理},"status":{"type":"XXXX","id":"XXXXX"}},"proof":{"type":"ecdsa","created":"2018-06-18T21:19:10Z","verificationMethod":"XXXX","signatureValue":"XXXXX"}}
  vcContent: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      authAccessKeyList: 'auth_access_key_list',
      authDidList: 'auth_did_list',
      did: 'did',
      operation: 'operation',
      signature: 'signature',
      vcContent: 'vc_content',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      authAccessKeyList: { 'type': 'array', 'itemType': 'string' },
      authDidList: { 'type': 'array', 'itemType': 'string' },
      did: 'string',
      operation: 'string',
      signature: 'string',
      vcContent: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartVcVcrepositoryWriteResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // true:操作成功，false:操作失败
  result?: boolean;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartVcVcrepositoryReadRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 提交请求的did，通常是在授权列表中的did才具有读取权限。
  did: string;
  // 对当前VC Repository操作的描述，signature字段需要包含此操作的描述，最终会记录在VC Repository连接的链上，可追溯此operation操作记录。
  operation: string;
  // 读数据请求的did对应使用公钥做的数据签名，确保数据准确性，签名包含operation字段，会一起上链。
  signature: string;
  // 目标读取VC的唯一id标识。
  verifiableClaimId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      did: 'did',
      operation: 'operation',
      signature: 'signature',
      verifiableClaimId: 'verifiable_claim_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      did: 'string',
      operation: 'string',
      signature: 'string',
      verifiableClaimId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartVcVcrepositoryReadResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 密文加密16进制表示的字符串，是请求方did对应的didDoc中的公钥加密AES密钥的结果，使用标准信封加密的方式，AES密钥用于解密verifiable_claim_content的claim字段，如果此auth_access_key是空字符串，则说明verifiable_claim_content的内容是明文。
  authAccessKey?: string;
  // 可验证声明的完整声明 {"content":{"verion":"0.7.0","issuer":"xxxx","subject":"xxxx","expire":1530735444,"issucanceDate":1530735000,"id":"XXXX","claim":{//用户自定义，可能为密文},"status":{"type":"XXXX","id":"XXXXX"}},"proof":{"type":"ecdsa","created":"2018-06-18T21:19:10Z","verificationMethod":"XXXX","signatureValue":"XXXXX"}}
  verifiableClaimContent?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      authAccessKey: 'auth_access_key',
      verifiableClaimContent: 'verifiable_claim_content',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      authAccessKey: 'string',
      verifiableClaimContent: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartVcVcrepositoryAuthRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 指定情况跟随 auth_did_list，如果auth_did_list不指定，则此字段无需指定，否则是与auth_did_list长度相同，并且对应auth_did_list的did的公钥加密AES密钥的结果。
  authAccessKeyList: string[];
  // 本次追加授权的did列表
  authDidList: string[];
  // 提交请求的did，通常是目标VC的subject did，也就是VC的owner。
  did: string;
  // 对当前VC Repository操作的描述，signature字段需要包含此操作的描述，最终会记录在VC Repository连接的链上，可追溯此operation操作记录。
  operation: string;
  // 读数据请求的did对应使用公钥做的数据签名，确保数据准确性，签名包含operation字段，会一起上链。
  signature: string;
  // 目标VC的唯一id标识。
  verifiableClaimId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      authAccessKeyList: 'auth_access_key_list',
      authDidList: 'auth_did_list',
      did: 'did',
      operation: 'operation',
      signature: 'signature',
      verifiableClaimId: 'verifiable_claim_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      authAccessKeyList: { 'type': 'array', 'itemType': 'string' },
      authDidList: { 'type': 'array', 'itemType': 'string' },
      did: 'string',
      operation: 'string',
      signature: 'string',
      verifiableClaimId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartVcVcrepositoryAuthResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // true：操作成功，false：操作失败
  result?: boolean;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartVcVcrepoUserRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 用户did标示
  did: string;
  // 操作缩写
  operation: string;
  // 注册用户实际参数
  payload: VcUserRegisterPayload;
  // 用户使用私钥对参数进行签名
  signature: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      did: 'did',
      operation: 'operation',
      payload: 'payload',
      signature: 'signature',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      did: 'string',
      operation: 'string',
      payload: VcUserRegisterPayload,
      signature: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartVcVcrepoUserResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateVcVcrepoUserRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 用户did标示
  did: string;
  // 操作缩写
  operation: string;
  // 更新的user信息
  payload: VcUserRegisterPayload;
  // 用户使用私钥对参数进行签名
  signature: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      did: 'did',
      operation: 'operation',
      payload: 'payload',
      signature: 'signature',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      did: 'string',
      operation: 'string',
      payload: VcUserRegisterPayload,
      signature: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class UpdateVcVcrepoUserResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartVcVcrepoVctransmitRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 用户did标示
  did: string;
  // 操作缩写
  operation: string;
  // 实际参数
  payload: VcTransmitPayload;
  // 用户使用私钥对参数进行签名
  signature: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      did: 'did',
      operation: 'operation',
      payload: 'payload',
      signature: 'signature',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      did: 'string',
      operation: 'string',
      payload: VcTransmitPayload,
      signature: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartVcVcrepoVctransmitResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 具体传输结果
  result?: VcTransmitResult[];
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      result: 'result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      result: { 'type': 'array', 'itemType': VcTransmitResult },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartVcVcrepoControlleradduserRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // controller did标示
  controller: string;
  // 操作缩写
  operation: string;
  // 实际参数
  payload: VcControllerAddUserRegisterPayload;
  // controller使用私钥对参数进行签名
  signature: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      controller: 'controller',
      operation: 'operation',
      payload: 'payload',
      signature: 'signature',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      controller: 'string',
      operation: 'string',
      payload: VcControllerAddUserRegisterPayload,
      signature: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartVcVcrepoControlleradduserResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartVcVcrepoVccontentsaveRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 发起者did
  did: string;
  // 操作缩写
  operation: string;
  // vc原文内容
  payload: string;
  // 用户使用私钥对参数进行签名
  signature: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      did: 'did',
      operation: 'operation',
      payload: 'payload',
      signature: 'signature',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      did: 'string',
      operation: 'string',
      payload: 'string',
      signature: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartVcVcrepoVccontentsaveResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartVcRepoReadwithvcidRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 发起者did
  did: string;
  // 操作缩写
  operation: string;
  // vcid
  payload: string;
  // 用户使用私钥对参数进行签名
  signature: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      did: 'did',
      operation: 'operation',
      payload: 'payload',
      signature: 'signature',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      did: 'string',
      operation: 'string',
      payload: 'string',
      signature: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartVcRepoReadwithvcidResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // vc原文
  vc?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      vc: 'vc',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      vc: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InitVcVcrepoVctransmitRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // vc传输发起人did
  did: string;
  // vc_transmit_init
  operation: string;
  // 使用对应的did私钥进行签名
  signature: string;
  // 可验证声明id
  vcId: string;
  // 传递目标
  verifiers: VcTransmitTargetStruct[];
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      did: 'did',
      operation: 'operation',
      signature: 'signature',
      vcId: 'vc_id',
      verifiers: 'verifiers',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      did: 'string',
      operation: 'string',
      signature: 'string',
      vcId: 'string',
      verifiers: { 'type': 'array', 'itemType': VcTransmitTargetStruct },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InitVcVcrepoVctransmitResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 非托管模式下传输vc初始化结果
  initResult?: VcTransmitInitResult[];
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      initResult: 'init_result',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      initResult: { 'type': 'array', 'itemType': VcTransmitInitResult },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InitIdentificationFaceauthRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 认证类型,枚举值
  // PC_AUTH、APP_AUTH
  authType: string;
  //    用户身份信息
  identityParam: IdentityParam;
  // 认证接口回调路径，POST接口
  // 请求示例：
  // {
  //   "certifyId":"0242de204e1a2c3ed6ee5e21d8a57a4c",
  //   "status":3,
  // }
  returnUrl?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      authType: 'auth_type',
      identityParam: 'identity_param',
      returnUrl: 'return_url',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      authType: 'string',
      identityParam: IdentityParam,
      returnUrl: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InitIdentificationFaceauthResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 认证ID
  certifyId?: string;
  // 二维码URL，用户支付宝扫一扫实人认证
  // 
  certifyUrl?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      certifyId: 'certify_id',
      certifyUrl: 'certify_url',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      certifyId: 'string',
      certifyUrl: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryIdentificationFaceauthRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 认证ID，用于查询认证结果
  certifyId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      certifyId: 'certify_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      certifyId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryIdentificationFaceauthResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 认证ID
  certifyId?: string;
  // 认证状态，枚举值如下：
  // 值为1，认证初始化成功
  // 值为2，认证链接获取成功
  // 值为3，认证通过
  status?: number;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      certifyId: 'certify_id',
      status: 'status',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      certifyId: 'string',
      status: 'number',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InitNotaryTransactionRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 客户的身份信息
  customer: IdentityParam;
  // 扩展字段
  properties?: string;
  // 托管用户信息
  trustee?: IdentityParam;
  // 是否使⽤用可信时间戳，默认为false
  tsr?: boolean;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      customer: 'customer',
      properties: 'properties',
      trustee: 'trustee',
      tsr: 'tsr',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      customer: IdentityParam,
      properties: 'string',
      trustee: IdentityParam,
      tsr: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InitNotaryTransactionResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 返回全局唯⼀的事务ID
  token?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      token: 'token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      token: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetNotaryTransactionRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 存证事务ID
  token: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      token: 'token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      token: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetNotaryTransactionResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 存证信息下载地址
  downloadUrl?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      downloadUrl: 'download_url',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      downloadUrl: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SendNotaryTransactionTextRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 存证元数据
  meta: NotaryMetaParam;
  // 存证内容
  notaryContent: string;
  // 是否使用可信时间戳
  tsr?: boolean;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      meta: 'meta',
      notaryContent: 'notary_content',
      tsr: 'tsr',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      meta: NotaryMetaParam,
      notaryContent: 'string',
      tsr: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class SendNotaryTransactionTextResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 存证凭据txHash，通过此凭据查询存证
  transactionHash?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      transactionHash: 'transaction_hash',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      transactionHash: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetNotaryTransactionTextRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 存证凭据
  transactionHash: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      transactionHash: 'transaction_hash',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      transactionHash: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetNotaryTransactionTextResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 存证文本
  content?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      content: 'content',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      content: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateNotaryTokenRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 用户身份识别信息
  customer: Identity;
  // 接口调用者身份信息
  entity?: Identity;
  // 扩展属性
  properties?: string;
  // 业务子类型标识
  subBizId?: string;
  // 是否使用可信时间戳，默认为false
  tsr?: boolean;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      customer: 'customer',
      entity: 'entity',
      properties: 'properties',
      subBizId: 'sub_biz_id',
      tsr: 'tsr',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      customer: Identity,
      entity: Identity,
      properties: 'string',
      subBizId: 'string',
      tsr: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateNotaryTokenResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 返回事务ID，全局唯一
  transactionId?: string;
  // 可信时间信息
  tsr?: TsrResponse;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      transactionId: 'transaction_id',
      tsr: 'tsr',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      transactionId: 'string',
      tsr: TsrResponse,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetNotaryTransRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 存证事务ID
  token: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      token: 'token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      token: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetNotaryTransResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 返回文件下载路径列表
  fileUrl?: string[];
  // 存证事务ID
  token?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      fileUrl: 'file_url',
      token: 'token',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      fileUrl: { 'type': 'array', 'itemType': 'string' },
      token: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateNotaryTextRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 存证地点(如手机硬件ID，Wi-Fi地址，GPS位置，IP地址)
  location?: Location;
  // 存证内容
  notaryContent: string;
  // 描述本条存证在存证事务中的阶段，用户可自行维护
  phase: string;
  // 扩展属性
  properties: string;
  // 存证事务id
  token: string;
  // 是否使用可信时间戳，默认为false
  tsr?: boolean;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      location: 'location',
      notaryContent: 'notary_content',
      phase: 'phase',
      properties: 'properties',
      token: 'token',
      tsr: 'tsr',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      location: Location,
      notaryContent: 'string',
      phase: 'string',
      properties: 'string',
      token: 'string',
      tsr: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateNotaryTextResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 可信时间信息
  tsr?: TsrResponse;
  // 存证凭据
  txHash?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      tsr: 'tsr',
      txHash: 'tx_hash',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      tsr: TsrResponse,
      txHash: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetNotaryTextRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 存证地点(如手机硬件ID，Wi-Fi地址，GPS位置，IP地址)
  location?: Location;
  // 描述本条存证在存证事务中的阶段，用户可自行维护
  phase?: string;
  // 扩展属性
  properties?: string;
  // 存证事务id
  token?: string;
  // 存证凭据
  txHash: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      location: 'location',
      phase: 'phase',
      properties: 'properties',
      token: 'token',
      txHash: 'tx_hash',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      location: Location,
      phase: 'string',
      properties: 'string',
      token: 'string',
      txHash: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetNotaryTextResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 存证信息
  content?: string;
  // 可信信息
  tsr?: TsrResponse;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      content: 'content',
      tsr: 'tsr',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      content: 'string',
      tsr: TsrResponse,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateNotaryFileRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 存证地点(如手机硬件ID，Wi-Fi地址，GPS位置，IP地址)
  location?: Location;
  // base64加密后的存证文件内容
  notaryFile: string;
  // 存证文件名称
  notaryName: string;
  // 描述本条存证在存证事务中的阶段，用户可自行维护
  phase: string;
  // 扩展属性
  properties?: string;
  // 存证事务ID
  token: string;
  // 是否使用可信时间戳，默认为false
  tsr?: boolean;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      location: 'location',
      notaryFile: 'notary_file',
      notaryName: 'notary_name',
      phase: 'phase',
      properties: 'properties',
      token: 'token',
      tsr: 'tsr',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      location: Location,
      notaryFile: 'string',
      notaryName: 'string',
      phase: 'string',
      properties: 'string',
      token: 'string',
      tsr: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateNotaryFileResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 可信时间信息
  tsr?: TsrResponse;
  // 存证凭证
  txHash?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      tsr: 'tsr',
      txHash: 'tx_hash',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      tsr: TsrResponse,
      txHash: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetNotaryFileRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 存证地点(如手机硬件ID，Wi-Fi地址，GPS位置，IP地址)
  location?: Location;
  // 描述本条存证在存证事务中的阶段，用户可自行维护
  phase: string;
  // 扩展属性
  properties?: string;
  // 存证事务ID
  token: string;
  // 存证凭据
  txHash: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      location: 'location',
      phase: 'phase',
      properties: 'properties',
      token: 'token',
      txHash: 'tx_hash',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      location: Location,
      phase: 'string',
      properties: 'string',
      token: 'string',
      txHash: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetNotaryFileResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 文件下载地址
  ossPath?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      ossPath: 'oss_path',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      ossPath: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateNotarySourceRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 存证地点(如手机硬件ID，Wi-Fi地址，GPS位置，IP地址)
  location?: Location;
  // 描述本条存证在存证事务中的阶段，用户可自行维护
  phase: string;
  // 扩展属性
  properties?: string;
  // 原文文件描述
  sourceDesc: string;
  // base64加密后的原文文件内容
  sourceFile: string;
  // 存证原文名称
  sourceName: string;
  // 存证事务ID
  token: string;
  // 是否使用可信时间戳，默认为false
  tsr?: boolean;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      location: 'location',
      phase: 'phase',
      properties: 'properties',
      sourceDesc: 'source_desc',
      sourceFile: 'source_file',
      sourceName: 'source_name',
      token: 'token',
      tsr: 'tsr',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      location: Location,
      phase: 'string',
      properties: 'string',
      sourceDesc: 'string',
      sourceFile: 'string',
      sourceName: 'string',
      token: 'string',
      tsr: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateNotarySourceResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 可信时间信息
  tsr?: TsrResponse;
  // 存证凭据
  txHash?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      tsr: 'tsr',
      txHash: 'tx_hash',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      tsr: TsrResponse,
      txHash: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetNotarySourceRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 存证地点(如手机硬件ID，Wi-Fi地址，GPS位置，IP地址)
  location?: Location;
  // 描述本条存证在存证事务中的阶段，用户可自行维护
  phase: string;
  // 扩展属性
  properties?: string;
  // 存证事务id
  token: string;
  // 存证凭据
  txHash: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      location: 'location',
      phase: 'phase',
      properties: 'properties',
      token: 'token',
      txHash: 'tx_hash',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      location: Location,
      phase: 'string',
      properties: 'string',
      token: 'string',
      txHash: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetNotarySourceResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 文件下载地址
  ossPath?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      ossPath: 'oss_path',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      ossPath: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryNotaryTestRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // test
  userName: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      userName: 'user_name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      userName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryNotaryTestResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // test
  resp?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      resp: 'resp',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      resp: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InitNotaryOpenapiMerchantRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 认证来源，PC_AUTH或APP_AUTH
  authType: string;
  // 认证成功页面回跳地址（只在移动端跳转，PC暂不支持）
  callbackUrl?: string;
  // 企业名称
  epCertName: string;
  // 企业统一社会信用代码
  epCertNo: string;
  // 企业证件类型，目前只支持企业营业执照类型，值为NATIONAL_LEGAL_MERGE
  epCertType: string;
  // 认证类型，目前只支持企业认证信息，值为EP_CERT_INFO
  identityType: string;
  // 法人姓名
  legalPersonCertName: string;
  // 法人身份证号
  legalPersonCertNo: string;
  // 法人认证证件类型，目前只支持身份证，值为IDENTITY_CARD
  legalPersonCertType: string;
  // 认证成功回调地址
  returnUrl?: string;
  // 商户请求的唯一标志，商户要保证其唯一性。值为32位长度的字母数字下划线组合
  transactionId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      authType: 'auth_type',
      callbackUrl: 'callback_url',
      epCertName: 'ep_cert_name',
      epCertNo: 'ep_cert_no',
      epCertType: 'ep_cert_type',
      identityType: 'identity_type',
      legalPersonCertName: 'legal_person_cert_name',
      legalPersonCertNo: 'legal_person_cert_no',
      legalPersonCertType: 'legal_person_cert_type',
      returnUrl: 'return_url',
      transactionId: 'transaction_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      authType: 'string',
      callbackUrl: 'string',
      epCertName: 'string',
      epCertNo: 'string',
      epCertType: 'string',
      identityType: 'string',
      legalPersonCertName: 'string',
      legalPersonCertNo: 'string',
      legalPersonCertType: 'string',
      returnUrl: 'string',
      transactionId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InitNotaryOpenapiMerchantResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 本次认证的唯一标识，商户需要记录，后续的操作都需要用到
  bizNo?: string;
  // 生成的认证地址，需要转换成二维码通过支付宝APP打开
  verifyUrl?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      bizNo: 'biz_no',
      verifyUrl: 'verify_url',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      bizNo: 'string',
      verifyUrl: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryNotaryOpenapiMerchantRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 查询唯一ID，初始化获取认证地址时生成
  bizNo: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizNo: 'biz_no',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizNo: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryNotaryOpenapiMerchantResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 查询的biz_no
  bizNo?: string;
  // 认证状态：认证是否通过。通过为true，不通过为false
  passed?: boolean;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      bizNo: 'biz_no',
      passed: 'passed',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      bizNo: 'string',
      passed: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeployNotaryLeaseContractRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 租赁服务平台部署的合约Id名称
  contractId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      contractId: 'contract_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      contractId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class DeployNotaryLeaseContractResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 状态码 0表示成功
  code?: number;
  // 错误信息
  errMessage?: string;
  // 部署合约对应的区块链交易哈希
  responseData?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      code: 'code',
      errMessage: 'err_message',
      responseData: 'response_data',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      code: 'number',
      errMessage: 'string',
      responseData: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateOpenchainWebsitServiceRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 商户code,如法人的唯一id
  merchantCode: string;
  // 商户名称
  merchantName: string;
  // 租户code
  tenantId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      merchantCode: 'merchant_code',
      merchantName: 'merchant_name',
      tenantId: 'tenant_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      merchantCode: 'string',
      merchantName: 'string',
      tenantId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateOpenchainWebsitServiceResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CheckOpenchainCorporateFaceRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 企业名称
  epCertName: string;
  // 企业证件
  epCertNo: string;
  // 企业证件类型（NATIONAL_LEGAL（工商注册号）或 NATIONAL_LEGAL_MERGE （ 社会统一信用代码））
  epCertType: string;
  // 企业法人名称
  legalPersonCertName: string;
  // 法人身份证号
  legalPersonCertNo: string;
  // 商户code
  merchantCode: string;
  // 店铺描述
  shopDesc?: string;
  // 店铺图片地址
  shopSitImage?: string;
  // 店铺url地址
  shopWebUrl?: string;
  // 租户code
  tenantId: string;
  // 网站id，为网站产品唯一标识
  webSitId: string;
  // 网站域名
  webSitUrl: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      epCertName: 'ep_cert_name',
      epCertNo: 'ep_cert_no',
      epCertType: 'ep_cert_type',
      legalPersonCertName: 'legal_person_cert_name',
      legalPersonCertNo: 'legal_person_cert_no',
      merchantCode: 'merchant_code',
      shopDesc: 'shop_desc',
      shopSitImage: 'shop_sit_image',
      shopWebUrl: 'shop_web_url',
      tenantId: 'tenant_id',
      webSitId: 'web_sit_id',
      webSitUrl: 'web_sit_url',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      epCertName: 'string',
      epCertNo: 'string',
      epCertType: 'string',
      legalPersonCertName: 'string',
      legalPersonCertNo: 'string',
      merchantCode: 'string',
      shopDesc: 'string',
      shopSitImage: 'string',
      shopWebUrl: 'string',
      tenantId: 'string',
      webSitId: 'string',
      webSitUrl: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CheckOpenchainCorporateFaceResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 认证id
  certifyId?: string;
  // 二维码URL，用户支付宝扫一扫实人认证
  certifyUrl?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      certifyId: 'certify_id',
      certifyUrl: 'certify_url',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      certifyId: 'string',
      certifyUrl: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryOpenchainCorporateFaceRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 认证id
  certifyId: string;
  // 租户code
  tenantId: string;
  // 商户code
  merchantCode: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      certifyId: 'certify_id',
      tenantId: 'tenant_id',
      merchantCode: 'merchant_code',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      certifyId: 'string',
      tenantId: 'string',
      merchantCode: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryOpenchainCorporateFaceResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 访问授权宝的url
  authedUrl?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      authedUrl: 'authed_url',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      authedUrl: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryOpenchainUserDataRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 租户code
  tenantId: string;
  // 商户code
  merchantCode: string;
  // 网站sitid
  websitId: string;
  // 查询的开始时间
  startTime: string;
  // 查询的截止时间
  endTime: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      tenantId: 'tenant_id',
      merchantCode: 'merchant_code',
      websitId: 'websit_id',
      startTime: 'start_time',
      endTime: 'end_time',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      tenantId: 'string',
      merchantCode: 'string',
      websitId: 'string',
      startTime: 'string',
      endTime: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryOpenchainUserDataResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 用户数据
  userData?: OCUserData[];
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      userData: 'user_data',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      userData: { 'type': 'array', 'itemType': OCUserData },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryIdentificationRiskThreemetaRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 被核验人身份证号码
  certNo: string;
  // 被核验人手机号码
  mobile: string;
  // 被核验人姓名
  name: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      certNo: 'cert_no',
      mobile: 'mobile',
      name: 'name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      certNo: 'string',
      mobile: 'string',
      name: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryIdentificationRiskThreemetaResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 是否通过
  accepted?: boolean;
  //  
  verifyUrl?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      accepted: 'accepted',
      verifyUrl: 'verify_url',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      accepted: 'boolean',
      verifyUrl: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CheckContentRiskTextRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 文本内容
  content: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      content: 'content',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      content: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CheckContentRiskTextResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 风险等级
  riskLevel?: string;
  // 风险类型
  riskType?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      riskLevel: 'risk_level',
      riskType: 'risk_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      riskLevel: 'string',
      riskType: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryIdentificationRiskTwometaRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 被核验人身份证号码
  certNo: string;
  // 被核验人姓名
  name: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      certNo: 'cert_no',
      name: 'name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      certNo: 'string',
      name: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryIdentificationRiskTwometaResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 是否通过
  accepted?: boolean;
  //  
  verifyUrl?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      accepted: 'accepted',
      verifyUrl: 'verify_url',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      accepted: 'boolean',
      verifyUrl: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryIdentificationRiskFourmetaRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 被核验人银行卡号
  bankCardNo: string;
  // 被核验人身份证号码
  certNo: string;
  // 被核验人手机号码
  mobile: string;
  // 被核验人姓名
  name: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bankCardNo: 'bank_card_no',
      certNo: 'cert_no',
      mobile: 'mobile',
      name: 'name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bankCardNo: 'string',
      certNo: 'string',
      mobile: 'string',
      name: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryIdentificationRiskFourmetaResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 是否通过
  accepted?: boolean;
  //  
  verifyUrl?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      accepted: 'accepted',
      verifyUrl: 'verify_url',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      accepted: 'boolean',
      verifyUrl: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateNotaryRawTextRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 如果已经在链上有账户，可以直接使用已有的账户进行存证。如果为空，服务端会在链上创建一个
  accountId?: string;
  // 链的唯一性标示，请联系baas平台获取
  bizid: string;
  // 存证内容
  content: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      accountId: 'account_id',
      bizid: 'bizid',
      content: 'content',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      accountId: 'string',
      bizid: 'string',
      content: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateNotaryRawTextResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 存证使用的链上账户
  accountId?: string;
  // 存证哈希
  transactionHash?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      accountId: 'account_id',
      transactionHash: 'transaction_hash',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      accountId: 'string',
      transactionHash: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetNotaryRawTextRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 区块链的唯一性标示
  bizid: string;
  // 存证哈希
  transactionHash: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizid: 'bizid',
      transactionHash: 'transaction_hash',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizid: 'string',
      transactionHash: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class GetNotaryRawTextResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 存证内容
  content?: string;
  // 存证时间
  notaryDate?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      content: 'content',
      notaryDate: 'notary_date',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      content: 'string',
      notaryDate: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryIdentificationRiskMaskRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 被核验人身份证号码后四位
  certNo: string;
  // 被核验人手机号码
  mobile: string;
  // 被核验人姓名的一部分
  name: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      certNo: 'cert_no',
      mobile: 'mobile',
      name: 'name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      certNo: 'string',
      mobile: 'string',
      name: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryIdentificationRiskMaskResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 是否通过
  // 
  accepted?: boolean;
  //  
  verifyUrl?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      accepted: 'accepted',
      verifyUrl: 'verify_url',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      accepted: 'boolean',
      verifyUrl: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InitIdentificationEnterpriseFaceauthRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 用于内部统计的参数，外部用户请忽略
  bizInfo?: BizInfo;
  // 回调通知地址
  callBackUrl?: string;
  // 企业名称
  epCertName: string;
  // 企业证件号
  epCertNo: string;
  // 企业证件类型（NATIONAL_LEGAL（工商注册号）或 NATIONAL_LEGAL_MERGE （ 社会统一信用代码））
  epCertType: string;
  // 企业法人姓名
  legalPersonCertName: string;
  // 企业法人身份证号（目前只支持身份证号）
  legalPersonCertNo: string;
  // 认证完成后回跳地址
  merchantUrl?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizInfo: 'biz_info',
      callBackUrl: 'call_back_url',
      epCertName: 'ep_cert_name',
      epCertNo: 'ep_cert_no',
      epCertType: 'ep_cert_type',
      legalPersonCertName: 'legal_person_cert_name',
      legalPersonCertNo: 'legal_person_cert_no',
      merchantUrl: 'merchant_url',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizInfo: BizInfo,
      callBackUrl: 'string',
      epCertName: 'string',
      epCertNo: 'string',
      epCertType: 'string',
      legalPersonCertName: 'string',
      legalPersonCertNo: 'string',
      merchantUrl: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class InitIdentificationEnterpriseFaceauthResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 本次认证的业务唯一性标示
  bizNo?: string;
  // 认证url
  verifyUrl?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      bizNo: 'biz_no',
      verifyUrl: 'verify_url',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      bizNo: 'string',
      verifyUrl: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryIdentificationEnterpriseFaceauthRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 认证的唯一性标示
  bizNo: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizNo: 'biz_no',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizNo: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryIdentificationEnterpriseFaceauthResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 认证的唯一性标示
  bizNo?: string;
  // 认证失败错误码
  failedCode?: string;
  // 认证失败原因信息
  failedMessage?: string;
  // 是否认证通过
  passed?: boolean;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      bizNo: 'biz_no',
      failedCode: 'failed_code',
      failedMessage: 'failed_message',
      passed: 'passed',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      bizNo: 'string',
      failedCode: 'string',
      failedMessage: 'string',
      passed: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryIdentificationEnterpriseFourmetaRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 企业名称
  epCertName: string;
  // 企业证件号
  epCertNo: string;
  // 企业证件类型（NATIONAL_LEGAL（工商注册号）或 NATIONAL_LEGAL_MERGE （ 社会统一信用代码））
  epCertType: string;
  // 法人姓名
  legalPersonCertName: string;
  // 企业法人身份证号码
  legalPersonCertNo: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      epCertName: 'ep_cert_name',
      epCertNo: 'ep_cert_no',
      epCertType: 'ep_cert_type',
      legalPersonCertName: 'legal_person_cert_name',
      legalPersonCertNo: 'legal_person_cert_no',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      epCertName: 'string',
      epCertNo: 'string',
      epCertType: 'string',
      legalPersonCertName: 'string',
      legalPersonCertNo: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryIdentificationEnterpriseFourmetaResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 经营状态
  enterpriseStatus?: string;
  // 营业期限
  openTime?: string;
  // 认证是否通过
  passed?: boolean;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      enterpriseStatus: 'enterprise_status',
      openTime: 'open_time',
      passed: 'passed',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      enterpriseStatus: 'string',
      openTime: 'string',
      passed: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryIdentificationEnterpriseThreemetaRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 企业名称
  epCertName: string;
  // 企业证件号
  epCertNo: string;
  // 证件类型
  epCertType: string;
  // 法人姓名
  legalPersonCertName: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      epCertName: 'ep_cert_name',
      epCertNo: 'ep_cert_no',
      epCertType: 'ep_cert_type',
      legalPersonCertName: 'legal_person_cert_name',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      epCertName: 'string',
      epCertNo: 'string',
      epCertType: 'string',
      legalPersonCertName: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryIdentificationEnterpriseThreemetaResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 经营状态
  enterpriseStatus?: string;
  // 营业期限
  openTime?: string;
  // 认证是否通过
  passed?: boolean;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      enterpriseStatus: 'enterprise_status',
      openTime: 'open_time',
      passed: 'passed',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      enterpriseStatus: 'string',
      openTime: 'string',
      passed: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryIdentificationEnterpriseTwometaRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 企业名称
  epCertName: string;
  // 企业证件号
  epCertNo: string;
  // 企业证件类型（NATIONAL_LEGAL（工商注册号）或 NATIONAL_LEGAL_MERGE （ 社会统一信用代码）
  epCertType: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      epCertName: 'ep_cert_name',
      epCertNo: 'ep_cert_no',
      epCertType: 'ep_cert_type',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      epCertName: 'string',
      epCertNo: 'string',
      epCertType: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryIdentificationEnterpriseTwometaResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 经营状态
  enterpriseStatus?: string;
  // 营业期限
  openTime?: string;
  // 认证是否通过
  passed?: boolean;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      enterpriseStatus: 'enterprise_status',
      openTime: 'open_time',
      passed: 'passed',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      enterpriseStatus: 'string',
      openTime: 'string',
      passed: 'boolean',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartMydidDidThreeelementRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 客户自有用户的唯一id
  custumorUid: string;
  // 实名认证身份证号
  verifyInfoId: string;
  // 实名认证用户名
  verifyInfoName: string;
  // 电话号码
  verifyInfoPhone: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      custumorUid: 'custumor_uid',
      verifyInfoId: 'verify_info_id',
      verifyInfoName: 'verify_info_name',
      verifyInfoPhone: 'verify_info_phone',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      custumorUid: 'string',
      verifyInfoId: 'string',
      verifyInfoName: 'string',
      verifyInfoPhone: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class StartMydidDidThreeelementResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 如果创建成功，会返回创建之后的did
  did?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      did: 'did',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      did: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListWaasDidValidpublickeysRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 用户数字身份ID
  did?: string;
  // 姓名
  name?: string;
  // 证件号码
  certNo?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      did: 'did',
      name: 'name',
      certNo: 'cert_no',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      did: 'string',
      name: 'string',
      certNo: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class ListWaasDidValidpublickeysResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 用户数字身份ID
  did?: string;
  // 公钥信息列表
  validPubKeys?: PublicKeyInfo[];
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      did: 'did',
      validPubKeys: 'valid_pub_keys',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      did: 'string',
      validPubKeys: { 'type': 'array', 'itemType': PublicKeyInfo },
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryWaasDidPublickeyRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 用户数字身份ID
  did: string;
  // 公钥id
  keyId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      did: 'did',
      keyId: 'key_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      did: 'string',
      keyId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryWaasDidPublickeyResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 公钥信息
  publicKeyInfo?: PublicKeyInfo;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      publicKeyInfo: 'public_key_info',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      publicKeyInfo: PublicKeyInfo,
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class RegisterWaasBusinessRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 业务场景名称
  bizName: string;
  // 业务场景公钥
  publicKey: string;
  // 业务场景运行dcep合约的链id
  chainId: string;
  // 数据资产展示首页
  indexUrl: string;
  // 与waas交互地址，waas服务会推送相关消息至该链接
  interactionUrl: string;
  // 业务场景描述
  businessDesc: string;
  // 扩展字段
  extension?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      bizName: 'biz_name',
      publicKey: 'public_key',
      chainId: 'chain_id',
      indexUrl: 'index_url',
      interactionUrl: 'interaction_url',
      businessDesc: 'business_desc',
      extension: 'extension',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      bizName: 'string',
      publicKey: 'string',
      chainId: 'string',
      indexUrl: 'string',
      interactionUrl: 'string',
      businessDesc: 'string',
      extension: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class RegisterWaasBusinessResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // waas生成的对应的业务合作方id
  businessId?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      businessId: 'business_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      businessId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryWaasBusinessTransferbodyRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 业务合作方id
  businessId: string;
  // 转账用户的did
  did: string;
  // 业务转账id
  businessOrderId: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      businessId: 'business_id',
      did: 'did',
      businessOrderId: 'business_order_id',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      businessId: 'string',
      did: 'string',
      businessOrderId: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class QueryWaasBusinessTransferbodyResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // dcep的data参数，包含用户签名信息
  chainBody?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      chainBody: 'chain_body',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      chainBody: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class NotifyWaasBusinessOrderRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  productInstanceId?: string;
  // 业务合作方id
  businessId: string;
  // 转账用户的did
  did: string;
  // 业务转账订单id
  businessOrderId: string;
  // 订单结果
  result: string;
  // 结果描述
  resultMessage?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      productInstanceId: 'product_instance_id',
      businessId: 'business_id',
      did: 'did',
      businessOrderId: 'business_order_id',
      result: 'result',
      resultMessage: 'result_message',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      productInstanceId: 'string',
      businessId: 'string',
      did: 'string',
      businessOrderId: 'string',
      result: 'string',
      resultMessage: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class NotifyWaasBusinessOrderResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateAntcloudGatewayxFileUploadRequest extends $tea.Model {
  // OAuth模式下的授权token
  authToken?: string;
  // 上传文件作用的openapi method
  apiCode: string;
  // 文件标签，多个标签;分割
  fileLabel?: string;
  // 自定义的文件元数据
  fileMetadata?: string;
  // 文件名，不传则随机生成文件名
  fileName?: string;
  // 文件的多媒体类型
  mimeType?: string;
  // 产品方的api归属集群，即productInstanceId
  apiCluster?: string;
  static names(): { [key: string]: string } {
    return {
      authToken: 'auth_token',
      apiCode: 'api_code',
      fileLabel: 'file_label',
      fileMetadata: 'file_metadata',
      fileName: 'file_name',
      mimeType: 'mime_type',
      apiCluster: 'api_cluster',
    };
  }

  static types(): { [key: string]: any } {
    return {
      authToken: 'string',
      apiCode: 'string',
      fileLabel: 'string',
      fileMetadata: 'string',
      fileName: 'string',
      mimeType: 'string',
      apiCluster: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}

export class CreateAntcloudGatewayxFileUploadResponse extends $tea.Model {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string;
  // 结果码，一般OK表示调用成功
  resultCode?: string;
  // 异常信息的文本描述
  resultMsg?: string;
  // 上传有效期
  expiredTime?: string;
  // 32位文件唯一id
  fileId?: string;
  // 放入http请求头里
  uploadHeaders?: XNameValuePair[];
  // 文件上传地址
  uploadUrl?: string;
  static names(): { [key: string]: string } {
    return {
      reqMsgId: 'req_msg_id',
      resultCode: 'result_code',
      resultMsg: 'result_msg',
      expiredTime: 'expired_time',
      fileId: 'file_id',
      uploadHeaders: 'upload_headers',
      uploadUrl: 'upload_url',
    };
  }

  static types(): { [key: string]: any } {
    return {
      reqMsgId: 'string',
      resultCode: 'string',
      resultMsg: 'string',
      expiredTime: 'string',
      fileId: 'string',
      uploadHeaders: { 'type': 'array', 'itemType': XNameValuePair },
      uploadUrl: 'string',
    };
  }

  constructor(map?: { [key: string]: any }) {
    super(map);
  }
}


export default class Client {
  _endpoint: string;
  _regionId: string;
  _accessKeyId: string;
  _accessKeySecret: string;
  _protocol: string;
  _userAgent: string;
  _readTimeout: number;
  _connectTimeout: number;
  _httpProxy: string;
  _httpsProxy: string;
  _socks5Proxy: string;
  _socks5NetWork: string;
  _noProxy: string;
  _maxIdleConns: number;
  _securityToken: string;
  _maxIdleTimeMillis: number;
  _keepAliveDurationMillis: number;
  _maxRequests: number;
  _maxRequestsPerHost: number;

  /**
   * Init client with Config
   * @param config config contains the necessary information to create a client
   */
  constructor(config: Config) {
    if (Util.isUnset(config)) {
      throw $tea.newError({
        code: "ParameterMissing",
        message: "'config' can not be unset",
      });
    }

    this._accessKeyId = config.accessKeyId;
    this._accessKeySecret = config.accessKeySecret;
    this._securityToken = config.securityToken;
    this._endpoint = config.endpoint;
    this._protocol = config.protocol;
    this._userAgent = config.userAgent;
    this._readTimeout = Util.defaultNumber(config.readTimeout, 20000);
    this._connectTimeout = Util.defaultNumber(config.connectTimeout, 20000);
    this._httpProxy = config.httpProxy;
    this._httpsProxy = config.httpsProxy;
    this._noProxy = config.noProxy;
    this._socks5Proxy = config.socks5Proxy;
    this._socks5NetWork = config.socks5NetWork;
    this._maxIdleConns = Util.defaultNumber(config.maxIdleConns, 60000);
    this._maxIdleTimeMillis = Util.defaultNumber(config.maxIdleTimeMillis, 5);
    this._keepAliveDurationMillis = Util.defaultNumber(config.keepAliveDurationMillis, 5000);
    this._maxRequests = Util.defaultNumber(config.maxRequests, 100);
    this._maxRequestsPerHost = Util.defaultNumber(config.maxRequestsPerHost, 100);
  }

  /**
   * Encapsulate the request and invoke the network
   * @param action api name
   * @param protocol http or https
   * @param method e.g. GET
   * @param pathname pathname of every api
   * @param request which contains request params
   * @param runtime which controls some details of call api, such as retry times
   * @return the response
   */
  async doRequest(version: string, action: string, protocol: string, method: string, pathname: string, request: {[key: string]: any}, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<{[key: string]: any}> {
    let _runtime: { [key: string]: any } = {
      timeouted: "retry",
      readTimeout: Util.defaultNumber(runtime.readTimeout, this._readTimeout),
      connectTimeout: Util.defaultNumber(runtime.connectTimeout, this._connectTimeout),
      httpProxy: Util.defaultString(runtime.httpProxy, this._httpProxy),
      httpsProxy: Util.defaultString(runtime.httpsProxy, this._httpsProxy),
      noProxy: Util.defaultString(runtime.noProxy, this._noProxy),
      maxIdleConns: Util.defaultNumber(runtime.maxIdleConns, this._maxIdleConns),
      maxIdleTimeMillis: this._maxIdleTimeMillis,
      keepAliveDuration: this._keepAliveDurationMillis,
      maxRequests: this._maxRequests,
      maxRequestsPerHost: this._maxRequestsPerHost,
      retry: {
        retryable: runtime.autoretry,
        maxAttempts: Util.defaultNumber(runtime.maxAttempts, 3),
      },
      backoff: {
        policy: Util.defaultString(runtime.backoffPolicy, "no"),
        period: Util.defaultNumber(runtime.backoffPeriod, 1),
      },
      ignoreSSL: runtime.ignoreSSL,
    }

    let _lastRequest = null;
    let _now = Date.now();
    let _retryTimes = 0;
    while ($tea.allowRetry(_runtime['retry'], _retryTimes, _now)) {
      if (_retryTimes > 0) {
        let _backoffTime = $tea.getBackoffTime(_runtime['backoff'], _retryTimes);
        if (_backoffTime > 0) {
          await $tea.sleep(_backoffTime);
        }
      }

      _retryTimes = _retryTimes + 1;
      try {
        let request_ = new $tea.Request();
        request_.protocol = Util.defaultString(this._protocol, protocol);
        request_.method = method;
        request_.pathname = pathname;
        request_.query = {
          method: action,
          version: version,
          sign_type: "HmacSHA1",
          req_time: AntchainUtil.getTimestamp(),
          req_msg_id: AntchainUtil.getNonce(),
          access_key: this._accessKeyId,
          base_sdk_version: "TeaSDK-2.0",
          sdk_version: "1.28.43",
          _prod_code: "BLOCKCHAIN",
          _prod_channel: "undefined",
        };
        if (!Util.empty(this._securityToken)) {
          request_.query["security_token"] = this._securityToken;
        }

        request_.headers = {
          host: Util.defaultString(this._endpoint, "openapi.antchain.antgroup.com"),
          'user-agent': Util.getUserAgent(this._userAgent),
          ...headers,
        };
        let tmp = Util.anyifyMapValue(RPCUtil.query(request));
        request_.body = new $tea.BytesReadable(Util.toFormString(tmp));
        request_.headers["content-type"] = "application/x-www-form-urlencoded";
        let signedParam = {
          ...request_.query,
          ...RPCUtil.query(request),
        };
        request_.query["sign"] = AntchainUtil.getSignature(signedParam, this._accessKeySecret);
        _lastRequest = request_;
        let response_ = await $tea.doAction(request_, _runtime);

        let raw = await Util.readAsString(response_.body);
        let obj = Util.parseJSON(raw);
        let res = Util.assertAsMap(obj);
        let resp = Util.assertAsMap(res["response"]);
        if (AntchainUtil.hasError(raw, this._accessKeySecret)) {
          throw $tea.newError({
            message: resp["result_msg"],
            data: resp,
            code: resp["result_code"],
          });
        }

        return resp;
      } catch (ex) {
        if ($tea.isRetryable(ex)) {
          continue;
        }
        throw ex;
      }
    }

    throw $tea.newUnretryableError(_lastRequest);
  }

  /**
   * Description: 将用户自有账户导入到链上
   * Summary: 自有账户映射到链上
   */
  async startAccountMapping(request: StartAccountMappingRequest): Promise<StartAccountMappingResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.startAccountMappingEx(request, headers, runtime);
  }

  /**
   * Description: 将用户自有账户导入到链上
   * Summary: 自有账户映射到链上
   */
  async startAccountMappingEx(request: StartAccountMappingRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<StartAccountMappingResponse> {
    Util.validateModel(request);
    return $tea.cast<StartAccountMappingResponse>(await this.doRequest("1.0", "baas.account.mapping.start", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new StartAccountMappingResponse({}));
  }

  /**
   * Description: 自有账户到链上账户的批量映射接口
   * Summary: 自有账户到链上账户的批量映射
   */
  async batchcreateAccountMapping(request: BatchcreateAccountMappingRequest): Promise<BatchcreateAccountMappingResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.batchcreateAccountMappingEx(request, headers, runtime);
  }

  /**
   * Description: 自有账户到链上账户的批量映射接口
   * Summary: 自有账户到链上账户的批量映射
   */
  async batchcreateAccountMappingEx(request: BatchcreateAccountMappingRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<BatchcreateAccountMappingResponse> {
    Util.validateModel(request);
    return $tea.cast<BatchcreateAccountMappingResponse>(await this.doRequest("1.0", "baas.account.mapping.batchcreate", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new BatchcreateAccountMappingResponse({}));
  }

  /**
   * Description: 为用户生成签名的接口
   * Summary: 为用户生成签名
   */
  async startAccountSignature(request: StartAccountSignatureRequest): Promise<StartAccountSignatureResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.startAccountSignatureEx(request, headers, runtime);
  }

  /**
   * Description: 为用户生成签名的接口
   * Summary: 为用户生成签名
   */
  async startAccountSignatureEx(request: StartAccountSignatureRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<StartAccountSignatureResponse> {
    Util.validateModel(request);
    return $tea.cast<StartAccountSignatureResponse>(await this.doRequest("1.0", "baas.account.signature.start", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new StartAccountSignatureResponse({}));
  }

  /**
   * Description: 查询批量映射结果的接口
   * Summary: 查询批量映射的结果
   */
  async queryAccountMappingresult(request: QueryAccountMappingresultRequest): Promise<QueryAccountMappingresultResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryAccountMappingresultEx(request, headers, runtime);
  }

  /**
   * Description: 查询批量映射结果的接口
   * Summary: 查询批量映射的结果
   */
  async queryAccountMappingresultEx(request: QueryAccountMappingresultRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryAccountMappingresultResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryAccountMappingresultResponse>(await this.doRequest("1.0", "baas.account.mappingresult.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryAccountMappingresultResponse({}));
  }

  /**
   * Description: 查询商户下账户在链上账号映射情况
   * Summary: 单个查询用户映射情况信息
   */
  async queryAccountMapping(request: QueryAccountMappingRequest): Promise<QueryAccountMappingResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryAccountMappingEx(request, headers, runtime);
  }

  /**
   * Description: 查询商户下账户在链上账号映射情况
   * Summary: 单个查询用户映射情况信息
   */
  async queryAccountMappingEx(request: QueryAccountMappingRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryAccountMappingResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryAccountMappingResponse>(await this.doRequest("1.0", "baas.account.mapping.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryAccountMappingResponse({}));
  }

  /**
   * Description: 批量查询商户下已映射的账户信息
   * Summary: 批量查询商户下已映射的账户信息
   */
  async batchqueryAccountMapping(request: BatchqueryAccountMappingRequest): Promise<BatchqueryAccountMappingResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.batchqueryAccountMappingEx(request, headers, runtime);
  }

  /**
   * Description: 批量查询商户下已映射的账户信息
   * Summary: 批量查询商户下已映射的账户信息
   */
  async batchqueryAccountMappingEx(request: BatchqueryAccountMappingRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<BatchqueryAccountMappingResponse> {
    Util.validateModel(request);
    return $tea.cast<BatchqueryAccountMappingResponse>(await this.doRequest("1.0", "baas.account.mapping.batchquery", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new BatchqueryAccountMappingResponse({}));
  }

  /**
   * Description: 用户信息存储
   * Summary: 用户信息存储
   */
  async createAccountMappingInfo(request: CreateAccountMappingInfoRequest): Promise<CreateAccountMappingInfoResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.createAccountMappingInfoEx(request, headers, runtime);
  }

  /**
   * Description: 用户信息存储
   * Summary: 用户信息存储
   */
  async createAccountMappingInfoEx(request: CreateAccountMappingInfoRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CreateAccountMappingInfoResponse> {
    Util.validateModel(request);
    return $tea.cast<CreateAccountMappingInfoResponse>(await this.doRequest("1.0", "baas.account.mapping.info.create", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CreateAccountMappingInfoResponse({}));
  }

  /**
   * Description: 批量创建用户信息
   * Summary: 批量创建用户信息
   */
  async batchcreateAccountMappingInfo(request: BatchcreateAccountMappingInfoRequest): Promise<BatchcreateAccountMappingInfoResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.batchcreateAccountMappingInfoEx(request, headers, runtime);
  }

  /**
   * Description: 批量创建用户信息
   * Summary: 批量创建用户信息
   */
  async batchcreateAccountMappingInfoEx(request: BatchcreateAccountMappingInfoRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<BatchcreateAccountMappingInfoResponse> {
    Util.validateModel(request);
    return $tea.cast<BatchcreateAccountMappingInfoResponse>(await this.doRequest("1.0", "baas.account.mapping.info.batchcreate", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new BatchcreateAccountMappingInfoResponse({}));
  }

  /**
   * Description: 获取用户的密钥对。
  公钥为明文公钥
  私钥为密文，需要用户在本地再做一次解密才能得到真正的私钥
   * Summary: 获取用户biz key
   */
  async getAkdfUserbizkey(request: GetAkdfUserbizkeyRequest): Promise<GetAkdfUserbizkeyResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.getAkdfUserbizkeyEx(request, headers, runtime);
  }

  /**
   * Description: 获取用户的密钥对。
  公钥为明文公钥
  私钥为密文，需要用户在本地再做一次解密才能得到真正的私钥
   * Summary: 获取用户biz key
   */
  async getAkdfUserbizkeyEx(request: GetAkdfUserbizkeyRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<GetAkdfUserbizkeyResponse> {
    Util.validateModel(request);
    return $tea.cast<GetAkdfUserbizkeyResponse>(await this.doRequest("1.0", "baas.akdf.userbizkey.get", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new GetAkdfUserbizkeyResponse({}));
  }

  /**
   * Description: 列出用户在某条链上所有的密钥
   * Summary: 列出密钥
   */
  async listAkdfUserbizkey(request: ListAkdfUserbizkeyRequest): Promise<ListAkdfUserbizkeyResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.listAkdfUserbizkeyEx(request, headers, runtime);
  }

  /**
   * Description: 列出用户在某条链上所有的密钥
   * Summary: 列出密钥
   */
  async listAkdfUserbizkeyEx(request: ListAkdfUserbizkeyRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<ListAkdfUserbizkeyResponse> {
    Util.validateModel(request);
    return $tea.cast<ListAkdfUserbizkeyResponse>(await this.doRequest("1.0", "baas.akdf.userbizkey.list", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new ListAkdfUserbizkeyResponse({}));
  }

  /**
   * Description: 根据用户选择的规则和订单类型，生成instanceId给commondriver
   * Summary: 下单
   */
  async checkBlockchainOrder(request: CheckBlockchainOrderRequest): Promise<CheckBlockchainOrderResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.checkBlockchainOrderEx(request, headers, runtime);
  }

  /**
   * Description: 根据用户选择的规则和订单类型，生成instanceId给commondriver
   * Summary: 下单
   */
  async checkBlockchainOrderEx(request: CheckBlockchainOrderRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CheckBlockchainOrderResponse> {
    Util.validateModel(request);
    return $tea.cast<CheckBlockchainOrderResponse>(await this.doRequest("1.0", "baas.blockchain.order.check", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CheckBlockchainOrderResponse({}));
  }

  /**
   * Description: 下单前校验
   * Summary: 下单前校验
   */
  async verifyBlockchainOrder(request: VerifyBlockchainOrderRequest): Promise<VerifyBlockchainOrderResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.verifyBlockchainOrderEx(request, headers, runtime);
  }

  /**
   * Description: 下单前校验
   * Summary: 下单前校验
   */
  async verifyBlockchainOrderEx(request: VerifyBlockchainOrderRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<VerifyBlockchainOrderResponse> {
    Util.validateModel(request);
    return $tea.cast<VerifyBlockchainOrderResponse>(await this.doRequest("1.0", "baas.blockchain.order.verify", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new VerifyBlockchainOrderResponse({}));
  }

  /**
   * Description: 退款
   * Summary: 退款
   */
  async invalidateBlockchainOrder(request: InvalidateBlockchainOrderRequest): Promise<InvalidateBlockchainOrderResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.invalidateBlockchainOrderEx(request, headers, runtime);
  }

  /**
   * Description: 退款
   * Summary: 退款
   */
  async invalidateBlockchainOrderEx(request: InvalidateBlockchainOrderRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<InvalidateBlockchainOrderResponse> {
    Util.validateModel(request);
    return $tea.cast<InvalidateBlockchainOrderResponse>(await this.doRequest("1.0", "baas.blockchain.order.invalidate", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new InvalidateBlockchainOrderResponse({}));
  }

  /**
   * Description: 删除物理资源
   * Summary: 删除物理资源
   */
  async releaseBlockchainOrderPhysical(request: ReleaseBlockchainOrderPhysicalRequest): Promise<ReleaseBlockchainOrderPhysicalResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.releaseBlockchainOrderPhysicalEx(request, headers, runtime);
  }

  /**
   * Description: 删除物理资源
   * Summary: 删除物理资源
   */
  async releaseBlockchainOrderPhysicalEx(request: ReleaseBlockchainOrderPhysicalRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<ReleaseBlockchainOrderPhysicalResponse> {
    Util.validateModel(request);
    return $tea.cast<ReleaseBlockchainOrderPhysicalResponse>(await this.doRequest("1.0", "baas.blockchain.order.physical.release", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new ReleaseBlockchainOrderPhysicalResponse({}));
  }

  /**
   * Description: 逻辑资源删除
   * Summary: 逻辑资源删除
   */
  async releaseBlockchainOrderLogical(request: ReleaseBlockchainOrderLogicalRequest): Promise<ReleaseBlockchainOrderLogicalResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.releaseBlockchainOrderLogicalEx(request, headers, runtime);
  }

  /**
   * Description: 逻辑资源删除
   * Summary: 逻辑资源删除
   */
  async releaseBlockchainOrderLogicalEx(request: ReleaseBlockchainOrderLogicalRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<ReleaseBlockchainOrderLogicalResponse> {
    Util.validateModel(request);
    return $tea.cast<ReleaseBlockchainOrderLogicalResponse>(await this.doRequest("1.0", "baas.blockchain.order.logical.release", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new ReleaseBlockchainOrderLogicalResponse({}));
  }

  /**
   * Description: 资源检查
   * Summary: 资源检查
   */
  async checkBlockchainResource(request: CheckBlockchainResourceRequest): Promise<CheckBlockchainResourceResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.checkBlockchainResourceEx(request, headers, runtime);
  }

  /**
   * Description: 资源检查
   * Summary: 资源检查
   */
  async checkBlockchainResourceEx(request: CheckBlockchainResourceRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CheckBlockchainResourceResponse> {
    Util.validateModel(request);
    return $tea.cast<CheckBlockchainResourceResponse>(await this.doRequest("1.0", "baas.blockchain.resource.check", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CheckBlockchainResourceResponse({}));
  }

  /**
   * Description: 补齐商品信息
   * Summary: 补齐商品信息
   */
  async confirmBlockchainOrder(request: ConfirmBlockchainOrderRequest): Promise<ConfirmBlockchainOrderResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.confirmBlockchainOrderEx(request, headers, runtime);
  }

  /**
   * Description: 补齐商品信息
   * Summary: 补齐商品信息
   */
  async confirmBlockchainOrderEx(request: ConfirmBlockchainOrderRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<ConfirmBlockchainOrderResponse> {
    Util.validateModel(request);
    return $tea.cast<ConfirmBlockchainOrderResponse>(await this.doRequest("1.0", "baas.blockchain.order.confirm", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new ConfirmBlockchainOrderResponse({}));
  }

  /**
   * Description: 检查
   * Summary: 检查
   */
  async connectBlockchainOrder(request: ConnectBlockchainOrderRequest): Promise<ConnectBlockchainOrderResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.connectBlockchainOrderEx(request, headers, runtime);
  }

  /**
   * Description: 检查
   * Summary: 检查
   */
  async connectBlockchainOrderEx(request: ConnectBlockchainOrderRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<ConnectBlockchainOrderResponse> {
    Util.validateModel(request);
    return $tea.cast<ConnectBlockchainOrderResponse>(await this.doRequest("1.0", "baas.blockchain.order.connect", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new ConnectBlockchainOrderResponse({}));
  }

  /**
   * Description: 阿里云区块链订单创建接口
   * Summary: 阿里云区块链订单创建接口
   */
  async execBlockchainOrder(request: ExecBlockchainOrderRequest): Promise<ExecBlockchainOrderResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.execBlockchainOrderEx(request, headers, runtime);
  }

  /**
   * Description: 阿里云区块链订单创建接口
   * Summary: 阿里云区块链订单创建接口
   */
  async execBlockchainOrderEx(request: ExecBlockchainOrderRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<ExecBlockchainOrderResponse> {
    Util.validateModel(request);
    return $tea.cast<ExecBlockchainOrderResponse>(await this.doRequest("1.0", "baas.blockchain.order.exec", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new ExecBlockchainOrderResponse({}));
  }

  /**
   * Description: 创建联盟
   * Summary: 创建联盟
   */
  async createUnionUnion(request: CreateUnionUnionRequest): Promise<CreateUnionUnionResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.createUnionUnionEx(request, headers, runtime);
  }

  /**
   * Description: 创建联盟
   * Summary: 创建联盟
   */
  async createUnionUnionEx(request: CreateUnionUnionRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CreateUnionUnionResponse> {
    Util.validateModel(request);
    return $tea.cast<CreateUnionUnionResponse>(await this.doRequest("1.0", "baas.union.union.create", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CreateUnionUnionResponse({}));
  }

  /**
   * Description: 删除联盟
   * Summary: 删除联盟
   */
  async deleteUnionUnion(request: DeleteUnionUnionRequest): Promise<DeleteUnionUnionResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.deleteUnionUnionEx(request, headers, runtime);
  }

  /**
   * Description: 删除联盟
   * Summary: 删除联盟
   */
  async deleteUnionUnionEx(request: DeleteUnionUnionRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<DeleteUnionUnionResponse> {
    Util.validateModel(request);
    return $tea.cast<DeleteUnionUnionResponse>(await this.doRequest("1.0", "baas.union.union.delete", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new DeleteUnionUnionResponse({}));
  }

  /**
   * Description: 联盟更新
   * Summary: 联盟更新
   */
  async updateUnionUnion(request: UpdateUnionUnionRequest): Promise<UpdateUnionUnionResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.updateUnionUnionEx(request, headers, runtime);
  }

  /**
   * Description: 联盟更新
   * Summary: 联盟更新
   */
  async updateUnionUnionEx(request: UpdateUnionUnionRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<UpdateUnionUnionResponse> {
    Util.validateModel(request);
    return $tea.cast<UpdateUnionUnionResponse>(await this.doRequest("1.0", "baas.union.union.update", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new UpdateUnionUnionResponse({}));
  }

  /**
   * Description: 联盟查询
   * Summary: 联盟查询
   */
  async queryUnionUnion(request: QueryUnionUnionRequest): Promise<QueryUnionUnionResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryUnionUnionEx(request, headers, runtime);
  }

  /**
   * Description: 联盟查询
   * Summary: 联盟查询
   */
  async queryUnionUnionEx(request: QueryUnionUnionRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryUnionUnionResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryUnionUnionResponse>(await this.doRequest("1.0", "baas.union.union.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryUnionUnionResponse({}));
  }

  /**
   * Description: 联盟邀请用户
   * Summary: 联盟邀请用户
   */
  async applyUnionMember(request: ApplyUnionMemberRequest): Promise<ApplyUnionMemberResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.applyUnionMemberEx(request, headers, runtime);
  }

  /**
   * Description: 联盟邀请用户
   * Summary: 联盟邀请用户
   */
  async applyUnionMemberEx(request: ApplyUnionMemberRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<ApplyUnionMemberResponse> {
    Util.validateModel(request);
    return $tea.cast<ApplyUnionMemberResponse>(await this.doRequest("1.0", "baas.union.member.apply", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new ApplyUnionMemberResponse({}));
  }

  /**
   * Description: 阿里云联盟成员加入
   * Summary: 阿里云联盟成员加入
   */
  async confirmUnionMember(request: ConfirmUnionMemberRequest): Promise<ConfirmUnionMemberResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.confirmUnionMemberEx(request, headers, runtime);
  }

  /**
   * Description: 阿里云联盟成员加入
   * Summary: 阿里云联盟成员加入
   */
  async confirmUnionMemberEx(request: ConfirmUnionMemberRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<ConfirmUnionMemberResponse> {
    Util.validateModel(request);
    return $tea.cast<ConfirmUnionMemberResponse>(await this.doRequest("1.0", "baas.union.member.confirm", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new ConfirmUnionMemberResponse({}));
  }

  /**
   * Description: 获取联盟内的蚂蚁区块链列表
   * Summary: 获取联盟内的蚂蚁区块链列表
   */
  async queryUnionChain(request: QueryUnionChainRequest): Promise<QueryUnionChainResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryUnionChainEx(request, headers, runtime);
  }

  /**
   * Description: 获取联盟内的蚂蚁区块链列表
   * Summary: 获取联盟内的蚂蚁区块链列表
   */
  async queryUnionChainEx(request: QueryUnionChainRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryUnionChainResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryUnionChainResponse>(await this.doRequest("1.0", "baas.union.chain.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryUnionChainResponse({}));
  }

  /**
   * Description: 获取联盟成员列表
   * Summary: 获取联盟成员列表
   */
  async queryUnionMember(request: QueryUnionMemberRequest): Promise<QueryUnionMemberResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryUnionMemberEx(request, headers, runtime);
  }

  /**
   * Description: 获取联盟成员列表
   * Summary: 获取联盟成员列表
   */
  async queryUnionMemberEx(request: QueryUnionMemberRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryUnionMemberResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryUnionMemberResponse>(await this.doRequest("1.0", "baas.union.member.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryUnionMemberResponse({}));
  }

  /**
   * Description: 更新联盟成员属性
   * Summary: 更新联盟成员属性
   */
  async updateUnionMember(request: UpdateUnionMemberRequest): Promise<UpdateUnionMemberResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.updateUnionMemberEx(request, headers, runtime);
  }

  /**
   * Description: 更新联盟成员属性
   * Summary: 更新联盟成员属性
   */
  async updateUnionMemberEx(request: UpdateUnionMemberRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<UpdateUnionMemberResponse> {
    Util.validateModel(request);
    return $tea.cast<UpdateUnionMemberResponse>(await this.doRequest("1.0", "baas.union.member.update", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new UpdateUnionMemberResponse({}));
  }

  /**
   * Description: 更新区块链的名称
   * Summary: 更新区块链的名称
   */
  async updateChainNameAnt(request: UpdateChainNameAntRequest): Promise<UpdateChainNameAntResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.updateChainNameAntEx(request, headers, runtime);
  }

  /**
   * Description: 更新区块链的名称
   * Summary: 更新区块链的名称
   */
  async updateChainNameAntEx(request: UpdateChainNameAntRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<UpdateChainNameAntResponse> {
    Util.validateModel(request);
    return $tea.cast<UpdateChainNameAntResponse>(await this.doRequest("1.0", "baas.chain.name.ant.update", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new UpdateChainNameAntResponse({}));
  }

  /**
   * Description: 手工创建区块链证书
   * Summary: 手工创建区块链证书
   */
  async createChainCertAnt(request: CreateChainCertAntRequest): Promise<CreateChainCertAntResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.createChainCertAntEx(request, headers, runtime);
  }

  /**
   * Description: 手工创建区块链证书
   * Summary: 手工创建区块链证书
   */
  async createChainCertAntEx(request: CreateChainCertAntRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CreateChainCertAntResponse> {
    Util.validateModel(request);
    return $tea.cast<CreateChainCertAntResponse>(await this.doRequest("1.0", "baas.chain.cert.ant.create", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CreateChainCertAntResponse({}));
  }

  /**
   * Description: 自动申请区块链证书
   * Summary: 自动申请区块链证书
   */
  async applyChainCertAnt(request: ApplyChainCertAntRequest): Promise<ApplyChainCertAntResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.applyChainCertAntEx(request, headers, runtime);
  }

  /**
   * Description: 自动申请区块链证书
   * Summary: 自动申请区块链证书
   */
  async applyChainCertAntEx(request: ApplyChainCertAntRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<ApplyChainCertAntResponse> {
    Util.validateModel(request);
    return $tea.cast<ApplyChainCertAntResponse>(await this.doRequest("1.0", "baas.chain.cert.ant.apply", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new ApplyChainCertAntResponse({}));
  }

  /**
   * Description: 人工申请区块链证书
   * Summary: 人工申请区块链证书
   */
  async createChainPublicCert(request: CreateChainPublicCertRequest): Promise<CreateChainPublicCertResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.createChainPublicCertEx(request, headers, runtime);
  }

  /**
   * Description: 人工申请区块链证书
   * Summary: 人工申请区块链证书
   */
  async createChainPublicCertEx(request: CreateChainPublicCertRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CreateChainPublicCertResponse> {
    Util.validateModel(request);
    return $tea.cast<CreateChainPublicCertResponse>(await this.doRequest("1.0", "baas.chain.public.cert.create", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CreateChainPublicCertResponse({}));
  }

  /**
   * Description: 自动创建区块链证书
   * Summary: 自动创建区块链证书
   */
  async applyChainPublicCert(request: ApplyChainPublicCertRequest): Promise<ApplyChainPublicCertResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.applyChainPublicCertEx(request, headers, runtime);
  }

  /**
   * Description: 自动创建区块链证书
   * Summary: 自动创建区块链证书
   */
  async applyChainPublicCertEx(request: ApplyChainPublicCertRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<ApplyChainPublicCertResponse> {
    Util.validateModel(request);
    return $tea.cast<ApplyChainPublicCertResponse>(await this.doRequest("1.0", "baas.chain.public.cert.apply", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new ApplyChainPublicCertResponse({}));
  }

  /**
   * Description: 免费体验链重置证书
   * Summary: 免费体验链重置证书
   */
  async reinitChainPublicCert(request: ReinitChainPublicCertRequest): Promise<ReinitChainPublicCertResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.reinitChainPublicCertEx(request, headers, runtime);
  }

  /**
   * Description: 免费体验链重置证书
   * Summary: 免费体验链重置证书
   */
  async reinitChainPublicCertEx(request: ReinitChainPublicCertRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<ReinitChainPublicCertResponse> {
    Util.validateModel(request);
    return $tea.cast<ReinitChainPublicCertResponse>(await this.doRequest("1.0", "baas.chain.public.cert.reinit", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new ReinitChainPublicCertResponse({}));
  }

  /**
   * Description: 免费体验链创建账户
   * Summary: 免费体验链创建账户
   */
  async createChainPublicAccount(request: CreateChainPublicAccountRequest): Promise<CreateChainPublicAccountResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.createChainPublicAccountEx(request, headers, runtime);
  }

  /**
   * Description: 免费体验链创建账户
   * Summary: 免费体验链创建账户
   */
  async createChainPublicAccountEx(request: CreateChainPublicAccountRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CreateChainPublicAccountResponse> {
    Util.validateModel(request);
    return $tea.cast<CreateChainPublicAccountResponse>(await this.doRequest("1.0", "baas.chain.public.account.create", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CreateChainPublicAccountResponse({}));
  }

  /**
   * Description: 自动创建链上账户
   * Summary: 自动创建链上账户
   */
  async applyChainPublicAccount(request: ApplyChainPublicAccountRequest): Promise<ApplyChainPublicAccountResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.applyChainPublicAccountEx(request, headers, runtime);
  }

  /**
   * Description: 自动创建链上账户
   * Summary: 自动创建链上账户
   */
  async applyChainPublicAccountEx(request: ApplyChainPublicAccountRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<ApplyChainPublicAccountResponse> {
    Util.validateModel(request);
    return $tea.cast<ApplyChainPublicAccountResponse>(await this.doRequest("1.0", "baas.chain.public.account.apply", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new ApplyChainPublicAccountResponse({}));
  }

  /**
   * Description: 免费体验链查询
   * Summary: 免费体验链查询
   */
  async queryChainPublic(request: QueryChainPublicRequest): Promise<QueryChainPublicResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryChainPublicEx(request, headers, runtime);
  }

  /**
   * Description: 免费体验链查询
   * Summary: 免费体验链查询
   */
  async queryChainPublicEx(request: QueryChainPublicRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryChainPublicResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryChainPublicResponse>(await this.doRequest("1.0", "baas.chain.public.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryChainPublicResponse({}));
  }

  /**
   * Description: 免费体验链证书下载
   * Summary: 免费体验链证书下载
   */
  async downloadChainPublicCert(request: DownloadChainPublicCertRequest): Promise<DownloadChainPublicCertResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.downloadChainPublicCertEx(request, headers, runtime);
  }

  /**
   * Description: 免费体验链证书下载
   * Summary: 免费体验链证书下载
   */
  async downloadChainPublicCertEx(request: DownloadChainPublicCertRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<DownloadChainPublicCertResponse> {
    Util.validateModel(request);
    return $tea.cast<DownloadChainPublicCertResponse>(await this.doRequest("1.0", "baas.chain.public.cert.download", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new DownloadChainPublicCertResponse({}));
  }

  /**
   * Description: 手工创建账户
   * Summary: 手工创建账户
   */
  async createChainAccountAnt(request: CreateChainAccountAntRequest): Promise<CreateChainAccountAntResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.createChainAccountAntEx(request, headers, runtime);
  }

  /**
   * Description: 手工创建账户
   * Summary: 手工创建账户
   */
  async createChainAccountAntEx(request: CreateChainAccountAntRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CreateChainAccountAntResponse> {
    Util.validateModel(request);
    return $tea.cast<CreateChainAccountAntResponse>(await this.doRequest("1.0", "baas.chain.account.ant.create", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CreateChainAccountAntResponse({}));
  }

  /**
   * Description: 自动创建账户
   * Summary: 自动创建账户
   */
  async applyChainAccountAnt(request: ApplyChainAccountAntRequest): Promise<ApplyChainAccountAntResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.applyChainAccountAntEx(request, headers, runtime);
  }

  /**
   * Description: 自动创建账户
   * Summary: 自动创建账户
   */
  async applyChainAccountAntEx(request: ApplyChainAccountAntRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<ApplyChainAccountAntResponse> {
    Util.validateModel(request);
    return $tea.cast<ApplyChainAccountAntResponse>(await this.doRequest("1.0", "baas.chain.account.ant.apply", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new ApplyChainAccountAntResponse({}));
  }

  /**
   * Description: 查询链上账户列表
   * Summary: 查询链上账户列表
   */
  async queryChainAccountAnt(request: QueryChainAccountAntRequest): Promise<QueryChainAccountAntResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryChainAccountAntEx(request, headers, runtime);
  }

  /**
   * Description: 查询链上账户列表
   * Summary: 查询链上账户列表
   */
  async queryChainAccountAntEx(request: QueryChainAccountAntRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryChainAccountAntResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryChainAccountAntResponse>(await this.doRequest("1.0", "baas.chain.account.ant.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryChainAccountAntResponse({}));
  }

  /**
   * Description: 区块链证书下载
   * Summary: 区块链证书下载
   */
  async downloadChainCertAnt(request: DownloadChainCertAntRequest): Promise<DownloadChainCertAntResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.downloadChainCertAntEx(request, headers, runtime);
  }

  /**
   * Description: 区块链证书下载
   * Summary: 区块链证书下载
   */
  async downloadChainCertAntEx(request: DownloadChainCertAntRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<DownloadChainCertAntResponse> {
    Util.validateModel(request);
    return $tea.cast<DownloadChainCertAntResponse>(await this.doRequest("1.0", "baas.chain.cert.ant.download", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new DownloadChainCertAntResponse({}));
  }

  /**
   * Description: 阿里云链节点查询
   * Summary: 阿里云链节点查询
   */
  async queryChainNodeAnt(request: QueryChainNodeAntRequest): Promise<QueryChainNodeAntResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryChainNodeAntEx(request, headers, runtime);
  }

  /**
   * Description: 阿里云链节点查询
   * Summary: 阿里云链节点查询
   */
  async queryChainNodeAntEx(request: QueryChainNodeAntRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryChainNodeAntResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryChainNodeAntResponse>(await this.doRequest("1.0", "baas.chain.node.ant.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryChainNodeAntResponse({}));
  }

  /**
   * Description: 区块链链上账户冻结
   * Summary: 区块链链上账户冻结
   */
  async freezeChainAccountAnt(request: FreezeChainAccountAntRequest): Promise<FreezeChainAccountAntResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.freezeChainAccountAntEx(request, headers, runtime);
  }

  /**
   * Description: 区块链链上账户冻结
   * Summary: 区块链链上账户冻结
   */
  async freezeChainAccountAntEx(request: FreezeChainAccountAntRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<FreezeChainAccountAntResponse> {
    Util.validateModel(request);
    return $tea.cast<FreezeChainAccountAntResponse>(await this.doRequest("1.0", "baas.chain.account.ant.freeze", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new FreezeChainAccountAntResponse({}));
  }

  /**
   * Description: 蚂蚁区块链账户解冻
   * Summary: 蚂蚁区块链账户解冻
   */
  async unfreezeChainAccountAnt(request: UnfreezeChainAccountAntRequest): Promise<UnfreezeChainAccountAntResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.unfreezeChainAccountAntEx(request, headers, runtime);
  }

  /**
   * Description: 蚂蚁区块链账户解冻
   * Summary: 蚂蚁区块链账户解冻
   */
  async unfreezeChainAccountAntEx(request: UnfreezeChainAccountAntRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<UnfreezeChainAccountAntResponse> {
    Util.validateModel(request);
    return $tea.cast<UnfreezeChainAccountAntResponse>(await this.doRequest("1.0", "baas.chain.account.ant.unfreeze", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new UnfreezeChainAccountAntResponse({}));
  }

  /**
   * Description: 区块链证书重置
   * Summary: 区块链证书重置
   */
  async reinitChainCertAnt(request: ReinitChainCertAntRequest): Promise<ReinitChainCertAntResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.reinitChainCertAntEx(request, headers, runtime);
  }

  /**
   * Description: 区块链证书重置
   * Summary: 区块链证书重置
   */
  async reinitChainCertAntEx(request: ReinitChainCertAntRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<ReinitChainCertAntResponse> {
    Util.validateModel(request);
    return $tea.cast<ReinitChainCertAntResponse>(await this.doRequest("1.0", "baas.chain.cert.ant.reinit", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new ReinitChainCertAntResponse({}));
  }

  /**
   * Description: 区块链证书查询
   * Summary: 区块链证书查询
   */
  async queryChainCertAnt(request: QueryChainCertAntRequest): Promise<QueryChainCertAntResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryChainCertAntEx(request, headers, runtime);
  }

  /**
   * Description: 区块链证书查询
   * Summary: 区块链证书查询
   */
  async queryChainCertAntEx(request: QueryChainCertAntRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryChainCertAntResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryChainCertAntResponse>(await this.doRequest("1.0", "baas.chain.cert.ant.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryChainCertAntResponse({}));
  }

  /**
   * Description: 阿里云浏览器信息查询
   * Summary: 阿里云浏览器信息查询
   */
  async queryChainBrowserInfo(request: QueryChainBrowserInfoRequest): Promise<QueryChainBrowserInfoResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryChainBrowserInfoEx(request, headers, runtime);
  }

  /**
   * Description: 阿里云浏览器信息查询
   * Summary: 阿里云浏览器信息查询
   */
  async queryChainBrowserInfoEx(request: QueryChainBrowserInfoRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryChainBrowserInfoResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryChainBrowserInfoResponse>(await this.doRequest("1.0", "baas.chain.browser.info.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryChainBrowserInfoResponse({}));
  }

  /**
   * Description: 阿里云最新区块链信息查询
   * Summary: 阿里云最新区块链信息查询
   */
  async queryChainBrowserBlocks(request: QueryChainBrowserBlocksRequest): Promise<QueryChainBrowserBlocksResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryChainBrowserBlocksEx(request, headers, runtime);
  }

  /**
   * Description: 阿里云最新区块链信息查询
   * Summary: 阿里云最新区块链信息查询
   */
  async queryChainBrowserBlocksEx(request: QueryChainBrowserBlocksRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryChainBrowserBlocksResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryChainBrowserBlocksResponse>(await this.doRequest("1.0", "baas.chain.browser.blocks.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryChainBrowserBlocksResponse({}));
  }

  /**
   * Description: 阿里云最新交易查询
   * Summary: 阿里云最新交易查询
   */
  async queryChainBrowserTransactions(request: QueryChainBrowserTransactionsRequest): Promise<QueryChainBrowserTransactionsResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryChainBrowserTransactionsEx(request, headers, runtime);
  }

  /**
   * Description: 阿里云最新交易查询
   * Summary: 阿里云最新交易查询
   */
  async queryChainBrowserTransactionsEx(request: QueryChainBrowserTransactionsRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryChainBrowserTransactionsResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryChainBrowserTransactionsResponse>(await this.doRequest("1.0", "baas.chain.browser.transactions.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryChainBrowserTransactionsResponse({}));
  }

  /**
   * Description: 阿里云最新区块交易信息查询
   * Summary: 阿里云最新区块交易信息查询
   */
  async batchqueryChainBrowserTransaction(request: BatchqueryChainBrowserTransactionRequest): Promise<BatchqueryChainBrowserTransactionResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.batchqueryChainBrowserTransactionEx(request, headers, runtime);
  }

  /**
   * Description: 阿里云最新区块交易信息查询
   * Summary: 阿里云最新区块交易信息查询
   */
  async batchqueryChainBrowserTransactionEx(request: BatchqueryChainBrowserTransactionRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<BatchqueryChainBrowserTransactionResponse> {
    Util.validateModel(request);
    return $tea.cast<BatchqueryChainBrowserTransactionResponse>(await this.doRequest("1.0", "baas.chain.browser.transaction.batchquery", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new BatchqueryChainBrowserTransactionResponse({}));
  }

  /**
   * Description: 阿里云区块链交易收据查询
   * Summary: 阿里云区块链交易收据查询
   */
  async queryChainBrowserReceipt(request: QueryChainBrowserReceiptRequest): Promise<QueryChainBrowserReceiptResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryChainBrowserReceiptEx(request, headers, runtime);
  }

  /**
   * Description: 阿里云区块链交易收据查询
   * Summary: 阿里云区块链交易收据查询
   */
  async queryChainBrowserReceiptEx(request: QueryChainBrowserReceiptRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryChainBrowserReceiptResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryChainBrowserReceiptResponse>(await this.doRequest("1.0", "baas.chain.browser.receipt.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryChainBrowserReceiptResponse({}));
  }

  /**
   * Description: 阿里云区块链交易查询
   * Summary: 阿里云区块链交易查询
   */
  async queryChainBrowserTransaction(request: QueryChainBrowserTransactionRequest): Promise<QueryChainBrowserTransactionResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryChainBrowserTransactionEx(request, headers, runtime);
  }

  /**
   * Description: 阿里云区块链交易查询
   * Summary: 阿里云区块链交易查询
   */
  async queryChainBrowserTransactionEx(request: QueryChainBrowserTransactionRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryChainBrowserTransactionResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryChainBrowserTransactionResponse>(await this.doRequest("1.0", "baas.chain.browser.transaction.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryChainBrowserTransactionResponse({}));
  }

  /**
   * Description: 阿里云区块链的区块信息
   * Summary: 阿里云区块链的区块信息
   */
  async queryChainBrowserBlock(request: QueryChainBrowserBlockRequest): Promise<QueryChainBrowserBlockResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryChainBrowserBlockEx(request, headers, runtime);
  }

  /**
   * Description: 阿里云区块链的区块信息
   * Summary: 阿里云区块链的区块信息
   */
  async queryChainBrowserBlockEx(request: QueryChainBrowserBlockRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryChainBrowserBlockResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryChainBrowserBlockResponse>(await this.doRequest("1.0", "baas.chain.browser.block.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryChainBrowserBlockResponse({}));
  }

  /**
   * Description: 阿里云售卖区信息查询
   * Summary: 阿里云售卖区信息查询
   */
  async queryChainResouceRegion(request: QueryChainResouceRegionRequest): Promise<QueryChainResouceRegionResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryChainResouceRegionEx(request, headers, runtime);
  }

  /**
   * Description: 阿里云售卖区信息查询
   * Summary: 阿里云售卖区信息查询
   */
  async queryChainResouceRegionEx(request: QueryChainResouceRegionRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryChainResouceRegionResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryChainResouceRegionResponse>(await this.doRequest("1.0", "baas.chain.resouce.region.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryChainResouceRegionResponse({}));
  }

  /**
   * Description: 阿里云资源类型查询
   * Summary: 阿里云资源类型查询
   */
  async queryChainResourceType(request: QueryChainResourceTypeRequest): Promise<QueryChainResourceTypeResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryChainResourceTypeEx(request, headers, runtime);
  }

  /**
   * Description: 阿里云资源类型查询
   * Summary: 阿里云资源类型查询
   */
  async queryChainResourceTypeEx(request: QueryChainResourceTypeRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryChainResourceTypeResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryChainResourceTypeResponse>(await this.doRequest("1.0", "baas.chain.resource.type.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryChainResourceTypeResponse({}));
  }

  /**
   * Description: 阿里云区块链售卖资源查询
   * Summary: 阿里云区块链售卖资源查询
   */
  async queryChainResouceSale(request: QueryChainResouceSaleRequest): Promise<QueryChainResouceSaleResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryChainResouceSaleEx(request, headers, runtime);
  }

  /**
   * Description: 阿里云区块链售卖资源查询
   * Summary: 阿里云区块链售卖资源查询
   */
  async queryChainResouceSaleEx(request: QueryChainResouceSaleRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryChainResouceSaleResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryChainResouceSaleResponse>(await this.doRequest("1.0", "baas.chain.resouce.sale.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryChainResouceSaleResponse({}));
  }

  /**
   * Description: 阿里云区块链配置信息查询
   * Summary: 阿里云区块链配置信息查询
   */
  async queryChainResourceConfig(request: QueryChainResourceConfigRequest): Promise<QueryChainResourceConfigResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryChainResourceConfigEx(request, headers, runtime);
  }

  /**
   * Description: 阿里云区块链配置信息查询
   * Summary: 阿里云区块链配置信息查询
   */
  async queryChainResourceConfigEx(request: QueryChainResourceConfigRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryChainResourceConfigResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryChainResourceConfigResponse>(await this.doRequest("1.0", "baas.chain.resource.config.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryChainResourceConfigResponse({}));
  }

  /**
   * Description: 阿里云区块链交易统计信息
   * Summary: 阿里云区块链交易统计信息
   */
  async queryChainBrowserStatistics(request: QueryChainBrowserStatisticsRequest): Promise<QueryChainBrowserStatisticsResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryChainBrowserStatisticsEx(request, headers, runtime);
  }

  /**
   * Description: 阿里云区块链交易统计信息
   * Summary: 阿里云区块链交易统计信息
   */
  async queryChainBrowserStatisticsEx(request: QueryChainBrowserStatisticsRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryChainBrowserStatisticsResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryChainBrowserStatisticsResponse>(await this.doRequest("1.0", "baas.chain.browser.statistics.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryChainBrowserStatisticsResponse({}));
  }

  /**
   * Description: 阿里云区块链交易执行交易
   * Summary: 阿里云区块链交易执行交易
   */
  async execChainPublicContract(request: ExecChainPublicContractRequest): Promise<ExecChainPublicContractResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.execChainPublicContractEx(request, headers, runtime);
  }

  /**
   * Description: 阿里云区块链交易执行交易
   * Summary: 阿里云区块链交易执行交易
   */
  async execChainPublicContractEx(request: ExecChainPublicContractRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<ExecChainPublicContractResponse> {
    Util.validateModel(request);
    return $tea.cast<ExecChainPublicContractResponse>(await this.doRequest("1.0", "baas.chain.public.contract.exec", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new ExecChainPublicContractResponse({}));
  }

  /**
   * Description: 阿里云免费体验链的cloudIde查询
   * Summary: 阿里云免费体验链的cloudIde查询
   */
  async queryChainPublicIde(request: QueryChainPublicIdeRequest): Promise<QueryChainPublicIdeResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryChainPublicIdeEx(request, headers, runtime);
  }

  /**
   * Description: 阿里云免费体验链的cloudIde查询
   * Summary: 阿里云免费体验链的cloudIde查询
   */
  async queryChainPublicIdeEx(request: QueryChainPublicIdeRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryChainPublicIdeResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryChainPublicIdeResponse>(await this.doRequest("1.0", "baas.chain.public.ide.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryChainPublicIdeResponse({}));
  }

  /**
   * Description: 阿里云免费体验链合约文件和内容查询
   * Summary: 阿里云免费体验链合约文件和内容查询
   */
  async queryChainPublicContent(request: QueryChainPublicContentRequest): Promise<QueryChainPublicContentResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryChainPublicContentEx(request, headers, runtime);
  }

  /**
   * Description: 阿里云免费体验链合约文件和内容查询
   * Summary: 阿里云免费体验链合约文件和内容查询
   */
  async queryChainPublicContentEx(request: QueryChainPublicContentRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryChainPublicContentResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryChainPublicContentResponse>(await this.doRequest("1.0", "baas.chain.public.content.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryChainPublicContentResponse({}));
  }

  /**
   * Description: 阿里云合约工程创建
   * Summary: 阿里云合约工程创建
   */
  async createChainContractProject(request: CreateChainContractProjectRequest): Promise<CreateChainContractProjectResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.createChainContractProjectEx(request, headers, runtime);
  }

  /**
   * Description: 阿里云合约工程创建
   * Summary: 阿里云合约工程创建
   */
  async createChainContractProjectEx(request: CreateChainContractProjectRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CreateChainContractProjectResponse> {
    Util.validateModel(request);
    return $tea.cast<CreateChainContractProjectResponse>(await this.doRequest("1.0", "baas.chain.contract.project.create", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CreateChainContractProjectResponse({}));
  }

  /**
   * Description: 阿里云合约工程删除
   * Summary: 阿里云合约工程删除
   */
  async deleteChainContractProject(request: DeleteChainContractProjectRequest): Promise<DeleteChainContractProjectResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.deleteChainContractProjectEx(request, headers, runtime);
  }

  /**
   * Description: 阿里云合约工程删除
   * Summary: 阿里云合约工程删除
   */
  async deleteChainContractProjectEx(request: DeleteChainContractProjectRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<DeleteChainContractProjectResponse> {
    Util.validateModel(request);
    return $tea.cast<DeleteChainContractProjectResponse>(await this.doRequest("1.0", "baas.chain.contract.project.delete", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new DeleteChainContractProjectResponse({}));
  }

  /**
   * Description: 复制阿里云合约工程
   * Summary: 复制阿里云合约工程
   */
  async cloneChainContractProject(request: CloneChainContractProjectRequest): Promise<CloneChainContractProjectResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.cloneChainContractProjectEx(request, headers, runtime);
  }

  /**
   * Description: 复制阿里云合约工程
   * Summary: 复制阿里云合约工程
   */
  async cloneChainContractProjectEx(request: CloneChainContractProjectRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CloneChainContractProjectResponse> {
    Util.validateModel(request);
    return $tea.cast<CloneChainContractProjectResponse>(await this.doRequest("1.0", "baas.chain.contract.project.clone", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CloneChainContractProjectResponse({}));
  }

  /**
   * Description: 阿里云合约工程信息查询
   * Summary: 阿里云合约工程信息查询
   */
  async queryChainContractProject(request: QueryChainContractProjectRequest): Promise<QueryChainContractProjectResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryChainContractProjectEx(request, headers, runtime);
  }

  /**
   * Description: 阿里云合约工程信息查询
   * Summary: 阿里云合约工程信息查询
   */
  async queryChainContractProjectEx(request: QueryChainContractProjectRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryChainContractProjectResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryChainContractProjectResponse>(await this.doRequest("1.0", "baas.chain.contract.project.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryChainContractProjectResponse({}));
  }

  /**
   * Description: 复制阿里云合约工程
   * Summary: 复制阿里云合约工程
   */
  async retryChainContractProject(request: RetryChainContractProjectRequest): Promise<RetryChainContractProjectResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.retryChainContractProjectEx(request, headers, runtime);
  }

  /**
   * Description: 复制阿里云合约工程
   * Summary: 复制阿里云合约工程
   */
  async retryChainContractProjectEx(request: RetryChainContractProjectRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<RetryChainContractProjectResponse> {
    Util.validateModel(request);
    return $tea.cast<RetryChainContractProjectResponse>(await this.doRequest("1.0", "baas.chain.contract.project.retry", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new RetryChainContractProjectResponse({}));
  }

  /**
   * Description: 更新阿里云区块链的合约工程
   * Summary: 更新阿里云区块链的合约工程
   */
  async updateChainContractProject(request: UpdateChainContractProjectRequest): Promise<UpdateChainContractProjectResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.updateChainContractProjectEx(request, headers, runtime);
  }

  /**
   * Description: 更新阿里云区块链的合约工程
   * Summary: 更新阿里云区块链的合约工程
   */
  async updateChainContractProjectEx(request: UpdateChainContractProjectRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<UpdateChainContractProjectResponse> {
    Util.validateModel(request);
    return $tea.cast<UpdateChainContractProjectResponse>(await this.doRequest("1.0", "baas.chain.contract.project.update", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new UpdateChainContractProjectResponse({}));
  }

  /**
   * Description: 创建合约文件内容
   * Summary: 创建合约文件内容
   */
  async createChainContractContent(request: CreateChainContractContentRequest): Promise<CreateChainContractContentResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.createChainContractContentEx(request, headers, runtime);
  }

  /**
   * Description: 创建合约文件内容
   * Summary: 创建合约文件内容
   */
  async createChainContractContentEx(request: CreateChainContractContentRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CreateChainContractContentResponse> {
    Util.validateModel(request);
    return $tea.cast<CreateChainContractContentResponse>(await this.doRequest("1.0", "baas.chain.contract.content.create", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CreateChainContractContentResponse({}));
  }

  /**
   * Description: 更新阿里云合约文件内容
   * Summary: 更新阿里云合约文件内容
   */
  async updateChainContractContent(request: UpdateChainContractContentRequest): Promise<UpdateChainContractContentResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.updateChainContractContentEx(request, headers, runtime);
  }

  /**
   * Description: 更新阿里云合约文件内容
   * Summary: 更新阿里云合约文件内容
   */
  async updateChainContractContentEx(request: UpdateChainContractContentRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<UpdateChainContractContentResponse> {
    Util.validateModel(request);
    return $tea.cast<UpdateChainContractContentResponse>(await this.doRequest("1.0", "baas.chain.contract.content.update", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new UpdateChainContractContentResponse({}));
  }

  /**
   * Description: 阿里云合约文件信息查询
   * Summary: 阿里云合约文件信息查询
   */
  async queryChainContractContent(request: QueryChainContractContentRequest): Promise<QueryChainContractContentResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryChainContractContentEx(request, headers, runtime);
  }

  /**
   * Description: 阿里云合约文件信息查询
   * Summary: 阿里云合约文件信息查询
   */
  async queryChainContractContentEx(request: QueryChainContractContentRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryChainContractContentResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryChainContractContentResponse>(await this.doRequest("1.0", "baas.chain.contract.content.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryChainContractContentResponse({}));
  }

  /**
   * Description: 阿里云区块链合约执行接口
   * Summary: 阿里云区块链合约执行
   */
  async execChainContract(request: ExecChainContractRequest): Promise<ExecChainContractResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.execChainContractEx(request, headers, runtime);
  }

  /**
   * Description: 阿里云区块链合约执行接口
   * Summary: 阿里云区块链合约执行
   */
  async execChainContractEx(request: ExecChainContractRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<ExecChainContractResponse> {
    Util.validateModel(request);
    return $tea.cast<ExecChainContractResponse>(await this.doRequest("1.0", "baas.chain.contract.exec", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new ExecChainContractResponse({}));
  }

  /**
   * Description: 阿里云区块链CloudIde配置查询
   * Summary: 阿里云区块链CloudIde配置查询
   */
  async queryChainIde(request: QueryChainIdeRequest): Promise<QueryChainIdeResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryChainIdeEx(request, headers, runtime);
  }

  /**
   * Description: 阿里云区块链CloudIde配置查询
   * Summary: 阿里云区块链CloudIde配置查询
   */
  async queryChainIdeEx(request: QueryChainIdeRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryChainIdeResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryChainIdeResponse>(await this.doRequest("1.0", "baas.chain.ide.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryChainIdeResponse({}));
  }

  /**
   * Description: 阿里云区块链合约文件删除
   * Summary: 阿里云区块链合约文件删除
   */
  async deleteChainContractContent(request: DeleteChainContractContentRequest): Promise<DeleteChainContractContentResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.deleteChainContractContentEx(request, headers, runtime);
  }

  /**
   * Description: 阿里云区块链合约文件删除
   * Summary: 阿里云区块链合约文件删除
   */
  async deleteChainContractContentEx(request: DeleteChainContractContentRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<DeleteChainContractContentResponse> {
    Util.validateModel(request);
    return $tea.cast<DeleteChainContractContentResponse>(await this.doRequest("1.0", "baas.chain.contract.content.delete", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new DeleteChainContractContentResponse({}));
  }

  /**
   * Description: 阿里云区块链小程序用户权限添加
   * Summary: 阿里云区块链小程序用户权限添加
   */
  async batchcreateChainMiniappUser(request: BatchcreateChainMiniappUserRequest): Promise<BatchcreateChainMiniappUserResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.batchcreateChainMiniappUserEx(request, headers, runtime);
  }

  /**
   * Description: 阿里云区块链小程序用户权限添加
   * Summary: 阿里云区块链小程序用户权限添加
   */
  async batchcreateChainMiniappUserEx(request: BatchcreateChainMiniappUserRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<BatchcreateChainMiniappUserResponse> {
    Util.validateModel(request);
    return $tea.cast<BatchcreateChainMiniappUserResponse>(await this.doRequest("1.0", "baas.chain.miniapp.user.batchcreate", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new BatchcreateChainMiniappUserResponse({}));
  }

  /**
   * Description: 阿里云区块链小程序用户权限删除
   * Summary: 阿里云区块链小程序用户权限删除
   */
  async deleteChainMiniappUser(request: DeleteChainMiniappUserRequest): Promise<DeleteChainMiniappUserResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.deleteChainMiniappUserEx(request, headers, runtime);
  }

  /**
   * Description: 阿里云区块链小程序用户权限删除
   * Summary: 阿里云区块链小程序用户权限删除
   */
  async deleteChainMiniappUserEx(request: DeleteChainMiniappUserRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<DeleteChainMiniappUserResponse> {
    Util.validateModel(request);
    return $tea.cast<DeleteChainMiniappUserResponse>(await this.doRequest("1.0", "baas.chain.miniapp.user.delete", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new DeleteChainMiniappUserResponse({}));
  }

  /**
   * Description: 阿里云区块链所有用户权限查询
   * Summary: 阿里云区块链所有用户权限查询
   */
  async batchqueryChainMiniappUser(request: BatchqueryChainMiniappUserRequest): Promise<BatchqueryChainMiniappUserResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.batchqueryChainMiniappUserEx(request, headers, runtime);
  }

  /**
   * Description: 阿里云区块链所有用户权限查询
   * Summary: 阿里云区块链所有用户权限查询
   */
  async batchqueryChainMiniappUserEx(request: BatchqueryChainMiniappUserRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<BatchqueryChainMiniappUserResponse> {
    Util.validateModel(request);
    return $tea.cast<BatchqueryChainMiniappUserResponse>(await this.doRequest("1.0", "baas.chain.miniapp.user.batchquery", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new BatchqueryChainMiniappUserResponse({}));
  }

  /**
   * Description: 阿里云区块链小程序权限控制查询
   * Summary: 阿里云区块链小程序权限控制查询
   */
  async queryChainMiniappAuthorization(request: QueryChainMiniappAuthorizationRequest): Promise<QueryChainMiniappAuthorizationResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryChainMiniappAuthorizationEx(request, headers, runtime);
  }

  /**
   * Description: 阿里云区块链小程序权限控制查询
   * Summary: 阿里云区块链小程序权限控制查询
   */
  async queryChainMiniappAuthorizationEx(request: QueryChainMiniappAuthorizationRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryChainMiniappAuthorizationResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryChainMiniappAuthorizationResponse>(await this.doRequest("1.0", "baas.chain.miniapp.authorization.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryChainMiniappAuthorizationResponse({}));
  }

  /**
   * Description: 阿里云区块链小程序权限控制变更
   * Summary: 阿里云区块链小程序权限控制变更
   */
  async updateChainMiniappAuthorization(request: UpdateChainMiniappAuthorizationRequest): Promise<UpdateChainMiniappAuthorizationResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.updateChainMiniappAuthorizationEx(request, headers, runtime);
  }

  /**
   * Description: 阿里云区块链小程序权限控制变更
   * Summary: 阿里云区块链小程序权限控制变更
   */
  async updateChainMiniappAuthorizationEx(request: UpdateChainMiniappAuthorizationRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<UpdateChainMiniappAuthorizationResponse> {
    Util.validateModel(request);
    return $tea.cast<UpdateChainMiniappAuthorizationResponse>(await this.doRequest("1.0", "baas.chain.miniapp.authorization.update", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new UpdateChainMiniappAuthorizationResponse({}));
  }

  /**
   * Description: 阿里云区块链小程序交易查询
   * Summary: 阿里云区块链小程序交易查询
   */
  async queryChainMiniappTransaction(request: QueryChainMiniappTransactionRequest): Promise<QueryChainMiniappTransactionResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryChainMiniappTransactionEx(request, headers, runtime);
  }

  /**
   * Description: 阿里云区块链小程序交易查询
   * Summary: 阿里云区块链小程序交易查询
   */
  async queryChainMiniappTransactionEx(request: QueryChainMiniappTransactionRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryChainMiniappTransactionResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryChainMiniappTransactionResponse>(await this.doRequest("1.0", "baas.chain.miniapp.transaction.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryChainMiniappTransactionResponse({}));
  }

  /**
   * Description: 阿里云区块链小程序交易查询的记录
   * Summary: 阿里云区块链小程序交易查询的记录
   */
  async queryChainMiniappLog(request: QueryChainMiniappLogRequest): Promise<QueryChainMiniappLogResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryChainMiniappLogEx(request, headers, runtime);
  }

  /**
   * Description: 阿里云区块链小程序交易查询的记录
   * Summary: 阿里云区块链小程序交易查询的记录
   */
  async queryChainMiniappLogEx(request: QueryChainMiniappLogRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryChainMiniappLogResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryChainMiniappLogResponse>(await this.doRequest("1.0", "baas.chain.miniapp.log.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryChainMiniappLogResponse({}));
  }

  /**
   * Description: 阿里云生成小程序二维码
   * Summary: 阿里云生成小程序二维码
   */
  async createChainMiniappCode(request: CreateChainMiniappCodeRequest): Promise<CreateChainMiniappCodeResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.createChainMiniappCodeEx(request, headers, runtime);
  }

  /**
   * Description: 阿里云生成小程序二维码
   * Summary: 阿里云生成小程序二维码
   */
  async createChainMiniappCodeEx(request: CreateChainMiniappCodeRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CreateChainMiniappCodeResponse> {
    Util.validateModel(request);
    return $tea.cast<CreateChainMiniappCodeResponse>(await this.doRequest("1.0", "baas.chain.miniapp.code.create", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CreateChainMiniappCodeResponse({}));
  }

  /**
   * Description: 阿里云售卖页联盟信息查询
   * Summary: 阿里云售卖页联盟信息查询
   */
  async queryUnionBuy(request: QueryUnionBuyRequest): Promise<QueryUnionBuyResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryUnionBuyEx(request, headers, runtime);
  }

  /**
   * Description: 阿里云售卖页联盟信息查询
   * Summary: 阿里云售卖页联盟信息查询
   */
  async queryUnionBuyEx(request: QueryUnionBuyRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryUnionBuyResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryUnionBuyResponse>(await this.doRequest("1.0", "baas.union.buy.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryUnionBuyResponse({}));
  }

  /**
   * Description: 阿里云国内站免费体验链Rest查询
   * Summary: 阿里云国内站免费体验链Rest查询
   */
  async queryChainPublicRest(request: QueryChainPublicRestRequest): Promise<QueryChainPublicRestResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryChainPublicRestEx(request, headers, runtime);
  }

  /**
   * Description: 阿里云国内站免费体验链Rest查询
   * Summary: 阿里云国内站免费体验链Rest查询
   */
  async queryChainPublicRestEx(request: QueryChainPublicRestRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryChainPublicRestResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryChainPublicRestResponse>(await this.doRequest("1.0", "baas.chain.public.rest.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryChainPublicRestResponse({}));
  }

  /**
   * Description: 阿里云国内站免费体验链申请Rest
   * Summary: 阿里云国内站免费体验链申请Rest
   */
  async applyChainPublicRest(request: ApplyChainPublicRestRequest): Promise<ApplyChainPublicRestResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.applyChainPublicRestEx(request, headers, runtime);
  }

  /**
   * Description: 阿里云国内站免费体验链申请Rest
   * Summary: 阿里云国内站免费体验链申请Rest
   */
  async applyChainPublicRestEx(request: ApplyChainPublicRestRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<ApplyChainPublicRestResponse> {
    Util.validateModel(request);
    return $tea.cast<ApplyChainPublicRestResponse>(await this.doRequest("1.0", "baas.chain.public.rest.apply", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new ApplyChainPublicRestResponse({}));
  }

  /**
   * Description: 阿里云国内站重置Rest
   * Summary: 阿里云国内站重置Rest
   */
  async reinitChainPublicRest(request: ReinitChainPublicRestRequest): Promise<ReinitChainPublicRestResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.reinitChainPublicRestEx(request, headers, runtime);
  }

  /**
   * Description: 阿里云国内站重置Rest
   * Summary: 阿里云国内站重置Rest
   */
  async reinitChainPublicRestEx(request: ReinitChainPublicRestRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<ReinitChainPublicRestResponse> {
    Util.validateModel(request);
    return $tea.cast<ReinitChainPublicRestResponse>(await this.doRequest("1.0", "baas.chain.public.rest.reinit", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new ReinitChainPublicRestResponse({}));
  }

  /**
   * Description: 阿里云国内站区块链rest查询
   * Summary: 阿里云国内站区块链rest查询
   */
  async queryChainRestAnt(request: QueryChainRestAntRequest): Promise<QueryChainRestAntResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryChainRestAntEx(request, headers, runtime);
  }

  /**
   * Description: 阿里云国内站区块链rest查询
   * Summary: 阿里云国内站区块链rest查询
   */
  async queryChainRestAntEx(request: QueryChainRestAntRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryChainRestAntResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryChainRestAntResponse>(await this.doRequest("1.0", "baas.chain.rest.ant.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryChainRestAntResponse({}));
  }

  /**
   * Description: 阿里云国内站区块链rest申请
   * Summary: 阿里云国内站区块链rest申请
   */
  async applyChainRestAnt(request: ApplyChainRestAntRequest): Promise<ApplyChainRestAntResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.applyChainRestAntEx(request, headers, runtime);
  }

  /**
   * Description: 阿里云国内站区块链rest申请
   * Summary: 阿里云国内站区块链rest申请
   */
  async applyChainRestAntEx(request: ApplyChainRestAntRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<ApplyChainRestAntResponse> {
    Util.validateModel(request);
    return $tea.cast<ApplyChainRestAntResponse>(await this.doRequest("1.0", "baas.chain.rest.ant.apply", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new ApplyChainRestAntResponse({}));
  }

  /**
   * Description: 阿里云国内站区块链重置Rest
   * Summary: 阿里云国内站区块链重置Rest
   */
  async reinitChainRestAnt(request: ReinitChainRestAntRequest): Promise<ReinitChainRestAntResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.reinitChainRestAntEx(request, headers, runtime);
  }

  /**
   * Description: 阿里云国内站区块链重置Rest
   * Summary: 阿里云国内站区块链重置Rest
   */
  async reinitChainRestAntEx(request: ReinitChainRestAntRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<ReinitChainRestAntResponse> {
    Util.validateModel(request);
    return $tea.cast<ReinitChainRestAntResponse>(await this.doRequest("1.0", "baas.chain.rest.ant.reinit", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new ReinitChainRestAntResponse({}));
  }

  /**
   * Description: 阿里云国内站公共链重置rest发送验证码
   * Summary: 阿里云国内站公共链重置rest发送验证码
   */
  async sendChainPublicRest(request: SendChainPublicRestRequest): Promise<SendChainPublicRestResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.sendChainPublicRestEx(request, headers, runtime);
  }

  /**
   * Description: 阿里云国内站公共链重置rest发送验证码
   * Summary: 阿里云国内站公共链重置rest发送验证码
   */
  async sendChainPublicRestEx(request: SendChainPublicRestRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<SendChainPublicRestResponse> {
    Util.validateModel(request);
    return $tea.cast<SendChainPublicRestResponse>(await this.doRequest("1.0", "baas.chain.public.rest.send", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new SendChainPublicRestResponse({}));
  }

  /**
   * Description: 阿里云国内站区块链重置rest发送验证码
   * Summary: 阿里云国内站区块链重置rest发送验证码
   */
  async sendChainRestAnt(request: SendChainRestAntRequest): Promise<SendChainRestAntResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.sendChainRestAntEx(request, headers, runtime);
  }

  /**
   * Description: 阿里云国内站区块链重置rest发送验证码
   * Summary: 阿里云国内站区块链重置rest发送验证码
   */
  async sendChainRestAntEx(request: SendChainRestAntRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<SendChainRestAntResponse> {
    Util.validateModel(request);
    return $tea.cast<SendChainRestAntResponse>(await this.doRequest("1.0", "baas.chain.rest.ant.send", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new SendChainRestAntResponse({}));
  }

  /**
   * Description: 阿里云子链列表查询
   * Summary: 阿里云子链列表查询
   */
  async queryChainSubnet(request: QueryChainSubnetRequest): Promise<QueryChainSubnetResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryChainSubnetEx(request, headers, runtime);
  }

  /**
   * Description: 阿里云子链列表查询
   * Summary: 阿里云子链列表查询
   */
  async queryChainSubnetEx(request: QueryChainSubnetRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryChainSubnetResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryChainSubnetResponse>(await this.doRequest("1.0", "baas.chain.subnet.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryChainSubnetResponse({}));
  }

  /**
   * Description: 阿里云子链创建的前置检查
   * Summary: 阿里云子链创建的前置检查
   */
  async checkChainSubnetCreate(request: CheckChainSubnetCreateRequest): Promise<CheckChainSubnetCreateResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.checkChainSubnetCreateEx(request, headers, runtime);
  }

  /**
   * Description: 阿里云子链创建的前置检查
   * Summary: 阿里云子链创建的前置检查
   */
  async checkChainSubnetCreateEx(request: CheckChainSubnetCreateRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CheckChainSubnetCreateResponse> {
    Util.validateModel(request);
    return $tea.cast<CheckChainSubnetCreateResponse>(await this.doRequest("1.0", "baas.chain.subnet.create.check", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CheckChainSubnetCreateResponse({}));
  }

  /**
   * Description: 阿里云子链创建
   * Summary: 阿里云子链创建
   */
  async createChainSubnet(request: CreateChainSubnetRequest): Promise<CreateChainSubnetResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.createChainSubnetEx(request, headers, runtime);
  }

  /**
   * Description: 阿里云子链创建
   * Summary: 阿里云子链创建
   */
  async createChainSubnetEx(request: CreateChainSubnetRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CreateChainSubnetResponse> {
    Util.validateModel(request);
    return $tea.cast<CreateChainSubnetResponse>(await this.doRequest("1.0", "baas.chain.subnet.create", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CreateChainSubnetResponse({}));
  }

  /**
   * Description: 阿里云子链的启动
   * Summary: 阿里云子链的启动
   */
  async execChainSubnet(request: ExecChainSubnetRequest): Promise<ExecChainSubnetResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.execChainSubnetEx(request, headers, runtime);
  }

  /**
   * Description: 阿里云子链的启动
   * Summary: 阿里云子链的启动
   */
  async execChainSubnetEx(request: ExecChainSubnetRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<ExecChainSubnetResponse> {
    Util.validateModel(request);
    return $tea.cast<ExecChainSubnetResponse>(await this.doRequest("1.0", "baas.chain.subnet.exec", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new ExecChainSubnetResponse({}));
  }

  /**
   * Description: 阿里云子链名称修改
   * Summary: 阿里云子链名称修改
   */
  async updateChainSubnetName(request: UpdateChainSubnetNameRequest): Promise<UpdateChainSubnetNameResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.updateChainSubnetNameEx(request, headers, runtime);
  }

  /**
   * Description: 阿里云子链名称修改
   * Summary: 阿里云子链名称修改
   */
  async updateChainSubnetNameEx(request: UpdateChainSubnetNameRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<UpdateChainSubnetNameResponse> {
    Util.validateModel(request);
    return $tea.cast<UpdateChainSubnetNameResponse>(await this.doRequest("1.0", "baas.chain.subnet.name.update", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new UpdateChainSubnetNameResponse({}));
  }

  /**
   * Description: 阿里云子链节点信息查询
   * Summary: 阿里云子链节点信息查询
   */
  async queryChainSubnetNode(request: QueryChainSubnetNodeRequest): Promise<QueryChainSubnetNodeResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryChainSubnetNodeEx(request, headers, runtime);
  }

  /**
   * Description: 阿里云子链节点信息查询
   * Summary: 阿里云子链节点信息查询
   */
  async queryChainSubnetNodeEx(request: QueryChainSubnetNodeRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryChainSubnetNodeResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryChainSubnetNodeResponse>(await this.doRequest("1.0", "baas.chain.subnet.node.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryChainSubnetNodeResponse({}));
  }

  /**
   * Description: 阿里云子链的节点删除
   * Summary: 阿里云子链的节点删除
   */
  async deleteChainSubnetNode(request: DeleteChainSubnetNodeRequest): Promise<DeleteChainSubnetNodeResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.deleteChainSubnetNodeEx(request, headers, runtime);
  }

  /**
   * Description: 阿里云子链的节点删除
   * Summary: 阿里云子链的节点删除
   */
  async deleteChainSubnetNodeEx(request: DeleteChainSubnetNodeRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<DeleteChainSubnetNodeResponse> {
    Util.validateModel(request);
    return $tea.cast<DeleteChainSubnetNodeResponse>(await this.doRequest("1.0", "baas.chain.subnet.node.delete", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new DeleteChainSubnetNodeResponse({}));
  }

  /**
   * Description: 阿里云子链节点添加的前置检查
   * Summary: 阿里云子链节点添加的前置检查
   */
  async checkChainSubnetNode(request: CheckChainSubnetNodeRequest): Promise<CheckChainSubnetNodeResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.checkChainSubnetNodeEx(request, headers, runtime);
  }

  /**
   * Description: 阿里云子链节点添加的前置检查
   * Summary: 阿里云子链节点添加的前置检查
   */
  async checkChainSubnetNodeEx(request: CheckChainSubnetNodeRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CheckChainSubnetNodeResponse> {
    Util.validateModel(request);
    return $tea.cast<CheckChainSubnetNodeResponse>(await this.doRequest("1.0", "baas.chain.subnet.node.check", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CheckChainSubnetNodeResponse({}));
  }

  /**
   * Description: 阿里云子链节点添加
   * Summary: 阿里云子链节点添加
   */
  async addChainSubnetNode(request: AddChainSubnetNodeRequest): Promise<AddChainSubnetNodeResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.addChainSubnetNodeEx(request, headers, runtime);
  }

  /**
   * Description: 阿里云子链节点添加
   * Summary: 阿里云子链节点添加
   */
  async addChainSubnetNodeEx(request: AddChainSubnetNodeRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<AddChainSubnetNodeResponse> {
    Util.validateModel(request);
    return $tea.cast<AddChainSubnetNodeResponse>(await this.doRequest("1.0", "baas.chain.subnet.node.add", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new AddChainSubnetNodeResponse({}));
  }

  /**
   * Description: 阿里云子链机构列表查询
   * Summary: 阿里云子链机构列表查询
   */
  async queryChainSubnetMember(request: QueryChainSubnetMemberRequest): Promise<QueryChainSubnetMemberResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryChainSubnetMemberEx(request, headers, runtime);
  }

  /**
   * Description: 阿里云子链机构列表查询
   * Summary: 阿里云子链机构列表查询
   */
  async queryChainSubnetMemberEx(request: QueryChainSubnetMemberRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryChainSubnetMemberResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryChainSubnetMemberResponse>(await this.doRequest("1.0", "baas.chain.subnet.member.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryChainSubnetMemberResponse({}));
  }

  /**
   * Description: 阿里云子链成员删除
   * Summary: 阿里云子链成员删除
   */
  async deleteChainSubnetMember(request: DeleteChainSubnetMemberRequest): Promise<DeleteChainSubnetMemberResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.deleteChainSubnetMemberEx(request, headers, runtime);
  }

  /**
   * Description: 阿里云子链成员删除
   * Summary: 阿里云子链成员删除
   */
  async deleteChainSubnetMemberEx(request: DeleteChainSubnetMemberRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<DeleteChainSubnetMemberResponse> {
    Util.validateModel(request);
    return $tea.cast<DeleteChainSubnetMemberResponse>(await this.doRequest("1.0", "baas.chain.subnet.member.delete", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new DeleteChainSubnetMemberResponse({}));
  }

  /**
   * Description: 阿里云子链成员添加前校验
   * Summary: 阿里云子链成员添加前校验
   */
  async checkChainSubnetMember(request: CheckChainSubnetMemberRequest): Promise<CheckChainSubnetMemberResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.checkChainSubnetMemberEx(request, headers, runtime);
  }

  /**
   * Description: 阿里云子链成员添加前校验
   * Summary: 阿里云子链成员添加前校验
   */
  async checkChainSubnetMemberEx(request: CheckChainSubnetMemberRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CheckChainSubnetMemberResponse> {
    Util.validateModel(request);
    return $tea.cast<CheckChainSubnetMemberResponse>(await this.doRequest("1.0", "baas.chain.subnet.member.check", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CheckChainSubnetMemberResponse({}));
  }

  /**
   * Description: 阿里云子链成员添加
   * Summary: 阿里云子链成员添加
   */
  async addChainSubnetMember(request: AddChainSubnetMemberRequest): Promise<AddChainSubnetMemberResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.addChainSubnetMemberEx(request, headers, runtime);
  }

  /**
   * Description: 阿里云子链成员添加
   * Summary: 阿里云子链成员添加
   */
  async addChainSubnetMemberEx(request: AddChainSubnetMemberRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<AddChainSubnetMemberResponse> {
    Util.validateModel(request);
    return $tea.cast<AddChainSubnetMemberResponse>(await this.doRequest("1.0", "baas.chain.subnet.member.add", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new AddChainSubnetMemberResponse({}));
  }

  /**
   * Description: 阿里云子链REST开通
   * Summary: 阿里云子链REST开通
   */
  async applyChainSubnetRest(request: ApplyChainSubnetRestRequest): Promise<ApplyChainSubnetRestResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.applyChainSubnetRestEx(request, headers, runtime);
  }

  /**
   * Description: 阿里云子链REST开通
   * Summary: 阿里云子链REST开通
   */
  async applyChainSubnetRestEx(request: ApplyChainSubnetRestRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<ApplyChainSubnetRestResponse> {
    Util.validateModel(request);
    return $tea.cast<ApplyChainSubnetRestResponse>(await this.doRequest("1.0", "baas.chain.subnet.rest.apply", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new ApplyChainSubnetRestResponse({}));
  }

  /**
   * Description: 阿里云数据导出任务查询
   * Summary: 阿里云数据导出任务查询
   */
  async queryChainDataexportTask(request: QueryChainDataexportTaskRequest): Promise<QueryChainDataexportTaskResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryChainDataexportTaskEx(request, headers, runtime);
  }

  /**
   * Description: 阿里云数据导出任务查询
   * Summary: 阿里云数据导出任务查询
   */
  async queryChainDataexportTaskEx(request: QueryChainDataexportTaskRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryChainDataexportTaskResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryChainDataexportTaskResponse>(await this.doRequest("1.0", "baas.chain.dataexport.task.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryChainDataexportTaskResponse({}));
  }

  /**
   * Description: 阿里云数据导出服务，列出所有导出任务功能接口
   * Summary: 列出所有导出任务接口
   */
  async queryChainDataExport(request: QueryChainDataExportRequest): Promise<QueryChainDataExportResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryChainDataExportEx(request, headers, runtime);
  }

  /**
   * Description: 阿里云数据导出服务，列出所有导出任务功能接口
   * Summary: 列出所有导出任务接口
   */
  async queryChainDataExportEx(request: QueryChainDataExportRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryChainDataExportResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryChainDataExportResponse>(await this.doRequest("1.0", "baas.chain.data.export.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryChainDataExportResponse({}));
  }

  /**
   * Description: 阿里云数据导出需求创建数据导出任务
   * Summary: 创建数据导出任务
   */
  async createChainDataexportTask(request: CreateChainDataexportTaskRequest): Promise<CreateChainDataexportTaskResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.createChainDataexportTaskEx(request, headers, runtime);
  }

  /**
   * Description: 阿里云数据导出需求创建数据导出任务
   * Summary: 创建数据导出任务
   */
  async createChainDataexportTaskEx(request: CreateChainDataexportTaskRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CreateChainDataexportTaskResponse> {
    Util.validateModel(request);
    return $tea.cast<CreateChainDataexportTaskResponse>(await this.doRequest("1.0", "baas.chain.dataexport.task.create", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CreateChainDataexportTaskResponse({}));
  }

  /**
   * Description: 获取预览数据（第一步：生成任务ID）
   * Summary: 获取预览数据（第一步：生成任务ID）
   */
  async createChainTaskId(request: CreateChainTaskIdRequest): Promise<CreateChainTaskIdResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.createChainTaskIdEx(request, headers, runtime);
  }

  /**
   * Description: 获取预览数据（第一步：生成任务ID）
   * Summary: 获取预览数据（第一步：生成任务ID）
   */
  async createChainTaskIdEx(request: CreateChainTaskIdRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CreateChainTaskIdResponse> {
    Util.validateModel(request);
    return $tea.cast<CreateChainTaskIdResponse>(await this.doRequest("1.0", "baas.chain.task.id.create", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CreateChainTaskIdResponse({}));
  }

  /**
   * Description: 获取预览数据（第二步：根据任务ID获取预览数据结果）
   * Summary: 根据任务ID获取预览数据结果
   */
  async queryChainDataPreview(request: QueryChainDataPreviewRequest): Promise<QueryChainDataPreviewResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryChainDataPreviewEx(request, headers, runtime);
  }

  /**
   * Description: 获取预览数据（第二步：根据任务ID获取预览数据结果）
   * Summary: 根据任务ID获取预览数据结果
   */
  async queryChainDataPreviewEx(request: QueryChainDataPreviewRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryChainDataPreviewResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryChainDataPreviewResponse>(await this.doRequest("1.0", "baas.chain.data.preview.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryChainDataPreviewResponse({}));
  }

  /**
   * Description: 根据预览数据获取默认映射关系
   * Summary: 根据预览数据获取默认映射关系
   */
  async queryChainMappingRelationship(request: QueryChainMappingRelationshipRequest): Promise<QueryChainMappingRelationshipResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryChainMappingRelationshipEx(request, headers, runtime);
  }

  /**
   * Description: 根据预览数据获取默认映射关系
   * Summary: 根据预览数据获取默认映射关系
   */
  async queryChainMappingRelationshipEx(request: QueryChainMappingRelationshipRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryChainMappingRelationshipResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryChainMappingRelationshipResponse>(await this.doRequest("1.0", "baas.chain.mapping.relationship.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryChainMappingRelationshipResponse({}));
  }

  /**
   * Description: 创建导出MySQL任务失败，获取 Create Table 语句
   * Summary: 获取 Create Table 语句
   */
  async createChainTableSql(request: CreateChainTableSqlRequest): Promise<CreateChainTableSqlResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.createChainTableSqlEx(request, headers, runtime);
  }

  /**
   * Description: 创建导出MySQL任务失败，获取 Create Table 语句
   * Summary: 获取 Create Table 语句
   */
  async createChainTableSqlEx(request: CreateChainTableSqlRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CreateChainTableSqlResponse> {
    Util.validateModel(request);
    return $tea.cast<CreateChainTableSqlResponse>(await this.doRequest("1.0", "baas.chain.table.sql.create", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CreateChainTableSqlResponse({}));
  }

  /**
   * Description: 修改导出任务状态（启动、暂停、删除）
   * Summary: 修改导出任务状态（启动、暂停、删除）
   */
  async updateChainDataexportStatus(request: UpdateChainDataexportStatusRequest): Promise<UpdateChainDataexportStatusResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.updateChainDataexportStatusEx(request, headers, runtime);
  }

  /**
   * Description: 修改导出任务状态（启动、暂停、删除）
   * Summary: 修改导出任务状态（启动、暂停、删除）
   */
  async updateChainDataexportStatusEx(request: UpdateChainDataexportStatusRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<UpdateChainDataexportStatusResponse> {
    Util.validateModel(request);
    return $tea.cast<UpdateChainDataexportStatusResponse>(await this.doRequest("1.0", "baas.chain.dataexport.status.update", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new UpdateChainDataexportStatusResponse({}));
  }

  /**
   * Description: 修改导出任务（名称、描述、告警地址）
   * Summary: 修改导出任务（名称、描述、告警地址）
   */
  async updateChainDataexportTask(request: UpdateChainDataexportTaskRequest): Promise<UpdateChainDataexportTaskResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.updateChainDataexportTaskEx(request, headers, runtime);
  }

  /**
   * Description: 修改导出任务（名称、描述、告警地址）
   * Summary: 修改导出任务（名称、描述、告警地址）
   */
  async updateChainDataexportTaskEx(request: UpdateChainDataexportTaskRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<UpdateChainDataexportTaskResponse> {
    Util.validateModel(request);
    return $tea.cast<UpdateChainDataexportTaskResponse>(await this.doRequest("1.0", "baas.chain.dataexport.task.update", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new UpdateChainDataexportTaskResponse({}));
  }

  /**
   * Description: 分页失败的展示日志（过滤器：待处理、成功、已忽略）
   * Summary: 分页失败的展示日志
   */
  async queryChainFailureLog(request: QueryChainFailureLogRequest): Promise<QueryChainFailureLogResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryChainFailureLogEx(request, headers, runtime);
  }

  /**
   * Description: 分页失败的展示日志（过滤器：待处理、成功、已忽略）
   * Summary: 分页失败的展示日志
   */
  async queryChainFailureLogEx(request: QueryChainFailureLogRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryChainFailureLogResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryChainFailureLogResponse>(await this.doRequest("1.0", "baas.chain.failure.log.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryChainFailureLogResponse({}));
  }

  /**
   * Description: 批量处理失败日志（重试/忽略）
   * Summary: 批量处理失败日志（重试/忽略）
   */
  async updateChainFailureLog(request: UpdateChainFailureLogRequest): Promise<UpdateChainFailureLogResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.updateChainFailureLogEx(request, headers, runtime);
  }

  /**
   * Description: 批量处理失败日志（重试/忽略）
   * Summary: 批量处理失败日志（重试/忽略）
   */
  async updateChainFailureLogEx(request: UpdateChainFailureLogRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<UpdateChainFailureLogResponse> {
    Util.validateModel(request);
    return $tea.cast<UpdateChainFailureLogResponse>(await this.doRequest("1.0", "baas.chain.failure.log.update", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new UpdateChainFailureLogResponse({}));
  }

  /**
   * Description: 列出当前用户的托管MQ实例
   * Summary: 列出当前用户的托管MQ实例
   */
  async queryChainManagedMq(request: QueryChainManagedMqRequest): Promise<QueryChainManagedMqResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryChainManagedMqEx(request, headers, runtime);
  }

  /**
   * Description: 列出当前用户的托管MQ实例
   * Summary: 列出当前用户的托管MQ实例
   */
  async queryChainManagedMqEx(request: QueryChainManagedMqRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryChainManagedMqResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryChainManagedMqResponse>(await this.doRequest("1.0", "baas.chain.managed.mq.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryChainManagedMqResponse({}));
  }

  /**
   * Description: 初始化托管 MQ 实例
   * Summary: 初始化托管 MQ 实例
   */
  async initChainManagedMq(request: InitChainManagedMqRequest): Promise<InitChainManagedMqResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.initChainManagedMqEx(request, headers, runtime);
  }

  /**
   * Description: 初始化托管 MQ 实例
   * Summary: 初始化托管 MQ 实例
   */
  async initChainManagedMqEx(request: InitChainManagedMqRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<InitChainManagedMqResponse> {
    Util.validateModel(request);
    return $tea.cast<InitChainManagedMqResponse>(await this.doRequest("1.0", "baas.chain.managed.mq.init", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new InitChainManagedMqResponse({}));
  }

  /**
   * Description: 查询蚂蚁链用途列表接口
   * Summary: 查询蚂蚁链用途列表
   */
  async queryChainUseDeclaration(request: QueryChainUseDeclarationRequest): Promise<QueryChainUseDeclarationResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryChainUseDeclarationEx(request, headers, runtime);
  }

  /**
   * Description: 查询蚂蚁链用途列表接口
   * Summary: 查询蚂蚁链用途列表
   */
  async queryChainUseDeclarationEx(request: QueryChainUseDeclarationRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryChainUseDeclarationResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryChainUseDeclarationResponse>(await this.doRequest("1.0", "baas.chain.use.declaration.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryChainUseDeclarationResponse({}));
  }

  /**
   * Description: 选择蚂蚁链用途列表中的某项，进行提交申报接口
   * Summary: 选择蚂蚁链用途列表中的某项，进行提交申报
   */
  async applyChainUseDeclaration(request: ApplyChainUseDeclarationRequest): Promise<ApplyChainUseDeclarationResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.applyChainUseDeclarationEx(request, headers, runtime);
  }

  /**
   * Description: 选择蚂蚁链用途列表中的某项，进行提交申报接口
   * Summary: 选择蚂蚁链用途列表中的某项，进行提交申报
   */
  async applyChainUseDeclarationEx(request: ApplyChainUseDeclarationRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<ApplyChainUseDeclarationResponse> {
    Util.validateModel(request);
    return $tea.cast<ApplyChainUseDeclarationResponse>(await this.doRequest("1.0", "baas.chain.use.declaration.apply", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new ApplyChainUseDeclarationResponse({}));
  }

  /**
   * Description: 展示用户添加申报的记录接口
   * Summary: 展示用户添加申报的记录
   */
  async queryChainUseList(request: QueryChainUseListRequest): Promise<QueryChainUseListResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryChainUseListEx(request, headers, runtime);
  }

  /**
   * Description: 展示用户添加申报的记录接口
   * Summary: 展示用户添加申报的记录
   */
  async queryChainUseListEx(request: QueryChainUseListRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryChainUseListResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryChainUseListResponse>(await this.doRequest("1.0", "baas.chain.use.list.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryChainUseListResponse({}));
  }

  /**
   * Description: BaaS用途申报敏感词检查接口
   * Summary: BaaS用途申报敏感词检查
   */
  async checkChainSensitiveWords(request: CheckChainSensitiveWordsRequest): Promise<CheckChainSensitiveWordsResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.checkChainSensitiveWordsEx(request, headers, runtime);
  }

  /**
   * Description: BaaS用途申报敏感词检查接口
   * Summary: BaaS用途申报敏感词检查
   */
  async checkChainSensitiveWordsEx(request: CheckChainSensitiveWordsRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CheckChainSensitiveWordsResponse> {
    Util.validateModel(request);
    return $tea.cast<CheckChainSensitiveWordsResponse>(await this.doRequest("1.0", "baas.chain.sensitive.words.check", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CheckChainSensitiveWordsResponse({}));
  }

  /**
   * Description: 阿里云MyChain创建托管账户
   * Summary: 阿里云MyChain创建托管账户
   */
  async createChainAccountAntkms(request: CreateChainAccountAntkmsRequest): Promise<CreateChainAccountAntkmsResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.createChainAccountAntkmsEx(request, headers, runtime);
  }

  /**
   * Description: 阿里云MyChain创建托管账户
   * Summary: 阿里云MyChain创建托管账户
   */
  async createChainAccountAntkmsEx(request: CreateChainAccountAntkmsRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CreateChainAccountAntkmsResponse> {
    Util.validateModel(request);
    return $tea.cast<CreateChainAccountAntkmsResponse>(await this.doRequest("1.0", "baas.chain.account.antkms.create", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CreateChainAccountAntkmsResponse({}));
  }

  /**
   * Description: 阿里云渠道链相关商业化服务开通，后台经由ocp转发，实现计量计费
   * Summary: 阿里云渠道链相关商业化服务开通
   */
  async openChainService(request: OpenChainServiceRequest): Promise<OpenChainServiceResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.openChainServiceEx(request, headers, runtime);
  }

  /**
   * Description: 阿里云渠道链相关商业化服务开通，后台经由ocp转发，实现计量计费
   * Summary: 阿里云渠道链相关商业化服务开通
   */
  async openChainServiceEx(request: OpenChainServiceRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<OpenChainServiceResponse> {
    Util.validateModel(request);
    return $tea.cast<OpenChainServiceResponse>(await this.doRequest("1.0", "baas.chain.service.open", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new OpenChainServiceResponse({}));
  }

  /**
   * Description: 阿里云渠道链相关商业化服务开通结果查询
   * Summary: 阿里云渠道链相关商业化服务开通结果查询
   */
  async checkChainService(request: CheckChainServiceRequest): Promise<CheckChainServiceResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.checkChainServiceEx(request, headers, runtime);
  }

  /**
   * Description: 阿里云渠道链相关商业化服务开通结果查询
   * Summary: 阿里云渠道链相关商业化服务开通结果查询
   */
  async checkChainServiceEx(request: CheckChainServiceRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CheckChainServiceResponse> {
    Util.validateModel(request);
    return $tea.cast<CheckChainServiceResponse>(await this.doRequest("1.0", "baas.chain.service.check", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CheckChainServiceResponse({}));
  }

  /**
   * Description: 阿里云渠道链相关商业化服务开通，后台经由ocp转发，实现服务关闭
   * Summary: 阿里云渠道链相关商业化服务关闭
   */
  async closeChainService(request: CloseChainServiceRequest): Promise<CloseChainServiceResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.closeChainServiceEx(request, headers, runtime);
  }

  /**
   * Description: 阿里云渠道链相关商业化服务开通，后台经由ocp转发，实现服务关闭
   * Summary: 阿里云渠道链相关商业化服务关闭
   */
  async closeChainServiceEx(request: CloseChainServiceRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CloseChainServiceResponse> {
    Util.validateModel(request);
    return $tea.cast<CloseChainServiceResponse>(await this.doRequest("1.0", "baas.chain.service.close", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CloseChainServiceResponse({}));
  }

  /**
   * Description: 企业通过调用该接口准备接入反洗钱信息共享平台
   * Summary: 反洗钱信息共享平台入驻接口
   */
  async startAmlCorporationJoinprepare(request: StartAmlCorporationJoinprepareRequest): Promise<StartAmlCorporationJoinprepareResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.startAmlCorporationJoinprepareEx(request, headers, runtime);
  }

  /**
   * Description: 企业通过调用该接口准备接入反洗钱信息共享平台
   * Summary: 反洗钱信息共享平台入驻接口
   */
  async startAmlCorporationJoinprepareEx(request: StartAmlCorporationJoinprepareRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<StartAmlCorporationJoinprepareResponse> {
    Util.validateModel(request);
    return $tea.cast<StartAmlCorporationJoinprepareResponse>(await this.doRequest("1.0", "baas.aml.corporation.joinprepare.start", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new StartAmlCorporationJoinprepareResponse({}));
  }

  /**
   * Description: 反洗钱信息共享平台确认加盟接口，用户在准备阶段确认了平台安全性之后可以确认入驻
   * Summary: 反洗钱信息共享平台确认加盟接口
   */
  async startAmlCorporationJoincommit(request: StartAmlCorporationJoincommitRequest): Promise<StartAmlCorporationJoincommitResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.startAmlCorporationJoincommitEx(request, headers, runtime);
  }

  /**
   * Description: 反洗钱信息共享平台确认加盟接口，用户在准备阶段确认了平台安全性之后可以确认入驻
   * Summary: 反洗钱信息共享平台确认加盟接口
   */
  async startAmlCorporationJoincommitEx(request: StartAmlCorporationJoincommitRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<StartAmlCorporationJoincommitResponse> {
    Util.validateModel(request);
    return $tea.cast<StartAmlCorporationJoincommitResponse>(await this.doRequest("1.0", "baas.aml.corporation.joincommit.start", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new StartAmlCorporationJoincommitResponse({}));
  }

  /**
   * Description: 反洗钱系统二要素实名认证
   * Summary: 反洗钱系统二要素实名认证
   */
  async startAmlPersonTwofactor(request: StartAmlPersonTwofactorRequest): Promise<StartAmlPersonTwofactorResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.startAmlPersonTwofactorEx(request, headers, runtime);
  }

  /**
   * Description: 反洗钱系统二要素实名认证
   * Summary: 反洗钱系统二要素实名认证
   */
  async startAmlPersonTwofactorEx(request: StartAmlPersonTwofactorRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<StartAmlPersonTwofactorResponse> {
    Util.validateModel(request);
    return $tea.cast<StartAmlPersonTwofactorResponse>(await this.doRequest("1.0", "baas.aml.person.twofactor.start", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new StartAmlPersonTwofactorResponse({}));
  }

  /**
   * Description: 简单存证
   * Summary: 简单存证
   */
  async saveBusinessDeposit(request: SaveBusinessDepositRequest): Promise<SaveBusinessDepositResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.saveBusinessDepositEx(request, headers, runtime);
  }

  /**
   * Description: 简单存证
   * Summary: 简单存证
   */
  async saveBusinessDepositEx(request: SaveBusinessDepositRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<SaveBusinessDepositResponse> {
    Util.validateModel(request);
    return $tea.cast<SaveBusinessDepositResponse>(await this.doRequest("1.0", "baas.business.deposit.save", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new SaveBusinessDepositResponse({}));
  }

  /**
   * Description: 存储带有描述性的数据
   * Summary: 存储带有描述性的数据
   */
  async saveBusinessDepositMetadata(request: SaveBusinessDepositMetadataRequest): Promise<SaveBusinessDepositMetadataResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.saveBusinessDepositMetadataEx(request, headers, runtime);
  }

  /**
   * Description: 存储带有描述性的数据
   * Summary: 存储带有描述性的数据
   */
  async saveBusinessDepositMetadataEx(request: SaveBusinessDepositMetadataRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<SaveBusinessDepositMetadataResponse> {
    Util.validateModel(request);
    return $tea.cast<SaveBusinessDepositMetadataResponse>(await this.doRequest("1.0", "baas.business.deposit.metadata.save", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new SaveBusinessDepositMetadataResponse({}));
  }

  /**
   * Description: 将存证的数据在链上加密
   * Summary: 将存证的数据在链上加密
   */
  async saveBusinessDepositEncrypt(request: SaveBusinessDepositEncryptRequest): Promise<SaveBusinessDepositEncryptResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.saveBusinessDepositEncryptEx(request, headers, runtime);
  }

  /**
   * Description: 将存证的数据在链上加密
   * Summary: 将存证的数据在链上加密
   */
  async saveBusinessDepositEncryptEx(request: SaveBusinessDepositEncryptRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<SaveBusinessDepositEncryptResponse> {
    Util.validateModel(request);
    return $tea.cast<SaveBusinessDepositEncryptResponse>(await this.doRequest("1.0", "baas.business.deposit.encrypt.save", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new SaveBusinessDepositEncryptResponse({}));
  }

  /**
   * Description: 存证带有描述性的数据并加密
   * Summary: 存证带有描述性的数据并加密
   */
  async saveBusinessDepositEncryptmetadata(request: SaveBusinessDepositEncryptmetadataRequest): Promise<SaveBusinessDepositEncryptmetadataResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.saveBusinessDepositEncryptmetadataEx(request, headers, runtime);
  }

  /**
   * Description: 存证带有描述性的数据并加密
   * Summary: 存证带有描述性的数据并加密
   */
  async saveBusinessDepositEncryptmetadataEx(request: SaveBusinessDepositEncryptmetadataRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<SaveBusinessDepositEncryptmetadataResponse> {
    Util.validateModel(request);
    return $tea.cast<SaveBusinessDepositEncryptmetadataResponse>(await this.doRequest("1.0", "baas.business.deposit.encryptmetadata.save", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new SaveBusinessDepositEncryptmetadataResponse({}));
  }

  /**
   * Description: 通过授权宝创建did
   * Summary: 创建did
   */
  async createBusinessDid(request: CreateBusinessDidRequest): Promise<CreateBusinessDidResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.createBusinessDidEx(request, headers, runtime);
  }

  /**
   * Description: 通过授权宝创建did
   * Summary: 创建did
   */
  async createBusinessDidEx(request: CreateBusinessDidRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CreateBusinessDidResponse> {
    Util.validateModel(request);
    return $tea.cast<CreateBusinessDidResponse>(await this.doRequest("1.0", "baas.business.did.create", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CreateBusinessDidResponse({}));
  }

  /**
   * Description: 根据did创建链上账户
   * Summary: 根据did创建链上账户
   */
  async createBusinessBizaccount(request: CreateBusinessBizaccountRequest): Promise<CreateBusinessBizaccountResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.createBusinessBizaccountEx(request, headers, runtime);
  }

  /**
   * Description: 根据did创建链上账户
   * Summary: 根据did创建链上账户
   */
  async createBusinessBizaccountEx(request: CreateBusinessBizaccountRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CreateBusinessBizaccountResponse> {
    Util.validateModel(request);
    return $tea.cast<CreateBusinessBizaccountResponse>(await this.doRequest("1.0", "baas.business.bizaccount.create", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CreateBusinessBizaccountResponse({}));
  }

  /**
   * Description: 查询存证数据
   * Summary: 查询存证数据
   */
  async queryBusinessDeposit(request: QueryBusinessDepositRequest): Promise<QueryBusinessDepositResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryBusinessDepositEx(request, headers, runtime);
  }

  /**
   * Description: 查询存证数据
   * Summary: 查询存证数据
   */
  async queryBusinessDepositEx(request: QueryBusinessDepositRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryBusinessDepositResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryBusinessDepositResponse>(await this.doRequest("1.0", "baas.business.deposit.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryBusinessDepositResponse({}));
  }

  /**
   * Description: 授权存证数据
   * Summary: 授权存证数据
   */
  async authBusinessDepositdata(request: AuthBusinessDepositdataRequest): Promise<AuthBusinessDepositdataResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.authBusinessDepositdataEx(request, headers, runtime);
  }

  /**
   * Description: 授权存证数据
   * Summary: 授权存证数据
   */
  async authBusinessDepositdataEx(request: AuthBusinessDepositdataRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<AuthBusinessDepositdataResponse> {
    Util.validateModel(request);
    return $tea.cast<AuthBusinessDepositdataResponse>(await this.doRequest("1.0", "baas.business.depositdata.auth", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new AuthBusinessDepositdataResponse({}));
  }

  /**
   * Description: 创建部署合约
   * Summary: 创建部署合约
   */
  async createBusinessContractDeploy(request: CreateBusinessContractDeployRequest): Promise<CreateBusinessContractDeployResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.createBusinessContractDeployEx(request, headers, runtime);
  }

  /**
   * Description: 创建部署合约
   * Summary: 创建部署合约
   */
  async createBusinessContractDeployEx(request: CreateBusinessContractDeployRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CreateBusinessContractDeployResponse> {
    Util.validateModel(request);
    return $tea.cast<CreateBusinessContractDeployResponse>(await this.doRequest("1.0", "baas.business.contract.deploy.create", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CreateBusinessContractDeployResponse({}));
  }

  /**
   * Description: 普通合约接口调用
   * Summary: 普通合约接口调用
   */
  async createBusinessContractnormalcall(request: CreateBusinessContractnormalcallRequest): Promise<CreateBusinessContractnormalcallResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.createBusinessContractnormalcallEx(request, headers, runtime);
  }

  /**
   * Description: 普通合约接口调用
   * Summary: 普通合约接口调用
   */
  async createBusinessContractnormalcallEx(request: CreateBusinessContractnormalcallRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CreateBusinessContractnormalcallResponse> {
    Util.validateModel(request);
    return $tea.cast<CreateBusinessContractnormalcallResponse>(await this.doRequest("1.0", "baas.business.contractnormalcall.create", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CreateBusinessContractnormalcallResponse({}));
  }

  /**
   * Description: 调用加密合约接口
   * Summary: 调用加密合约接口
   */
  async createBusinessContractencryptcall(request: CreateBusinessContractencryptcallRequest): Promise<CreateBusinessContractencryptcallResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.createBusinessContractencryptcallEx(request, headers, runtime);
  }

  /**
   * Description: 调用加密合约接口
   * Summary: 调用加密合约接口
   */
  async createBusinessContractencryptcallEx(request: CreateBusinessContractencryptcallRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CreateBusinessContractencryptcallResponse> {
    Util.validateModel(request);
    return $tea.cast<CreateBusinessContractencryptcallResponse>(await this.doRequest("1.0", "baas.business.contractencryptcall.create", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CreateBusinessContractencryptcallResponse({}));
  }

  /**
   * Description: 查询交易receipt
   * Summary: 查询交易receipt
   */
  async queryBusinessContractreceipt(request: QueryBusinessContractreceiptRequest): Promise<QueryBusinessContractreceiptResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryBusinessContractreceiptEx(request, headers, runtime);
  }

  /**
   * Description: 查询交易receipt
   * Summary: 查询交易receipt
   */
  async queryBusinessContractreceiptEx(request: QueryBusinessContractreceiptRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryBusinessContractreceiptResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryBusinessContractreceiptResponse>(await this.doRequest("1.0", "baas.business.contractreceipt.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryBusinessContractreceiptResponse({}));
  }

  /**
   * Description: 查询加密的receipt
   * Summary: 查询加密的receipt
   */
  async queryBusinessContractencryptreceipt(request: QueryBusinessContractencryptreceiptRequest): Promise<QueryBusinessContractencryptreceiptResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryBusinessContractencryptreceiptEx(request, headers, runtime);
  }

  /**
   * Description: 查询加密的receipt
   * Summary: 查询加密的receipt
   */
  async queryBusinessContractencryptreceiptEx(request: QueryBusinessContractencryptreceiptRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryBusinessContractencryptreceiptResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryBusinessContractencryptreceiptResponse>(await this.doRequest("1.0", "baas.business.contractencryptreceipt.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryBusinessContractencryptreceiptResponse({}));
  }

  /**
   * Description: 查询合约加密内容的方法
   * Summary: 查询合约加密内容的方法
   */
  async queryBusinessContractencryptmethod(request: QueryBusinessContractencryptmethodRequest): Promise<QueryBusinessContractencryptmethodResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryBusinessContractencryptmethodEx(request, headers, runtime);
  }

  /**
   * Description: 查询合约加密内容的方法
   * Summary: 查询合约加密内容的方法
   */
  async queryBusinessContractencryptmethodEx(request: QueryBusinessContractencryptmethodRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryBusinessContractencryptmethodResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryBusinessContractencryptmethodResponse>(await this.doRequest("1.0", "baas.business.contractencryptmethod.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryBusinessContractencryptmethodResponse({}));
  }

  /**
   * Description: 部署业务共识合约
   * Summary: 部署业务共识合约
   */
  async deployBusinessAgreement(request: DeployBusinessAgreementRequest): Promise<DeployBusinessAgreementResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.deployBusinessAgreementEx(request, headers, runtime);
  }

  /**
   * Description: 部署业务共识合约
   * Summary: 部署业务共识合约
   */
  async deployBusinessAgreementEx(request: DeployBusinessAgreementRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<DeployBusinessAgreementResponse> {
    Util.validateModel(request);
    return $tea.cast<DeployBusinessAgreementResponse>(await this.doRequest("1.0", "baas.business.agreement.deploy", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new DeployBusinessAgreementResponse({}));
  }

  /**
   * Description: 创建业务共识模板
   * Summary: 创建业务共识模板
   */
  async createBusinessAgreementRegistertemplate(request: CreateBusinessAgreementRegistertemplateRequest): Promise<CreateBusinessAgreementRegistertemplateResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.createBusinessAgreementRegistertemplateEx(request, headers, runtime);
  }

  /**
   * Description: 创建业务共识模板
   * Summary: 创建业务共识模板
   */
  async createBusinessAgreementRegistertemplateEx(request: CreateBusinessAgreementRegistertemplateRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CreateBusinessAgreementRegistertemplateResponse> {
    Util.validateModel(request);
    return $tea.cast<CreateBusinessAgreementRegistertemplateResponse>(await this.doRequest("1.0", "baas.business.agreement.registertemplate.create", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CreateBusinessAgreementRegistertemplateResponse({}));
  }

  /**
   * Description: 注册业务共识实例
   * Summary: 注册业务共识实例
   */
  async createBusinessAgreementRegister(request: CreateBusinessAgreementRegisterRequest): Promise<CreateBusinessAgreementRegisterResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.createBusinessAgreementRegisterEx(request, headers, runtime);
  }

  /**
   * Description: 注册业务共识实例
   * Summary: 注册业务共识实例
   */
  async createBusinessAgreementRegisterEx(request: CreateBusinessAgreementRegisterRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CreateBusinessAgreementRegisterResponse> {
    Util.validateModel(request);
    return $tea.cast<CreateBusinessAgreementRegisterResponse>(await this.doRequest("1.0", "baas.business.agreement.register.create", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CreateBusinessAgreementRegisterResponse({}));
  }

  /**
   * Description: 对业务共识key进行签名认可
   * Summary: 对业务共识key进行签名认可
   */
  async createBusinessAgreementSign(request: CreateBusinessAgreementSignRequest): Promise<CreateBusinessAgreementSignResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.createBusinessAgreementSignEx(request, headers, runtime);
  }

  /**
   * Description: 对业务共识key进行签名认可
   * Summary: 对业务共识key进行签名认可
   */
  async createBusinessAgreementSignEx(request: CreateBusinessAgreementSignRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CreateBusinessAgreementSignResponse> {
    Util.validateModel(request);
    return $tea.cast<CreateBusinessAgreementSignResponse>(await this.doRequest("1.0", "baas.business.agreement.sign.create", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CreateBusinessAgreementSignResponse({}));
  }

  /**
   * Description: 查询业务共识当前状态
   * Summary: 查询业务共识当前状态
   */
  async queryBusinessAgreement(request: QueryBusinessAgreementRequest): Promise<QueryBusinessAgreementResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryBusinessAgreementEx(request, headers, runtime);
  }

  /**
   * Description: 查询业务共识当前状态
   * Summary: 查询业务共识当前状态
   */
  async queryBusinessAgreementEx(request: QueryBusinessAgreementRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryBusinessAgreementResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryBusinessAgreementResponse>(await this.doRequest("1.0", "baas.business.agreement.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryBusinessAgreementResponse({}));
  }

  /**
   * Description: 对合约隐私key授权
   * Summary: 对合约隐私key授权
   */
  async createBusinessContractGrantdid(request: CreateBusinessContractGrantdidRequest): Promise<CreateBusinessContractGrantdidResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.createBusinessContractGrantdidEx(request, headers, runtime);
  }

  /**
   * Description: 对合约隐私key授权
   * Summary: 对合约隐私key授权
   */
  async createBusinessContractGrantdidEx(request: CreateBusinessContractGrantdidRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CreateBusinessContractGrantdidResponse> {
    Util.validateModel(request);
    return $tea.cast<CreateBusinessContractGrantdidResponse>(await this.doRequest("1.0", "baas.business.contract.grantdid.create", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CreateBusinessContractGrantdidResponse({}));
  }

  /**
   * Description: 查询被加密的存证数据
   * Summary: 查询被加密的存证数据
   */
  async queryBusinessDepositEncryptedmetadata(request: QueryBusinessDepositEncryptedmetadataRequest): Promise<QueryBusinessDepositEncryptedmetadataResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryBusinessDepositEncryptedmetadataEx(request, headers, runtime);
  }

  /**
   * Description: 查询被加密的存证数据
   * Summary: 查询被加密的存证数据
   */
  async queryBusinessDepositEncryptedmetadataEx(request: QueryBusinessDepositEncryptedmetadataRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryBusinessDepositEncryptedmetadataResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryBusinessDepositEncryptedmetadataResponse>(await this.doRequest("1.0", "baas.business.deposit.encryptedmetadata.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryBusinessDepositEncryptedmetadataResponse({}));
  }

  /**
   * Description: 授权存证数据给对应的组织机构，该组织下所有的人员都可以查询该存证数据的原内容
   * Summary: 授权存证数据给对应的组织机构
   */
  async authBusinessDepositdataCorp(request: AuthBusinessDepositdataCorpRequest): Promise<AuthBusinessDepositdataCorpResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.authBusinessDepositdataCorpEx(request, headers, runtime);
  }

  /**
   * Description: 授权存证数据给对应的组织机构，该组织下所有的人员都可以查询该存证数据的原内容
   * Summary: 授权存证数据给对应的组织机构
   */
  async authBusinessDepositdataCorpEx(request: AuthBusinessDepositdataCorpRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<AuthBusinessDepositdataCorpResponse> {
    Util.validateModel(request);
    return $tea.cast<AuthBusinessDepositdataCorpResponse>(await this.doRequest("1.0", "baas.business.depositdata.corp.auth", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new AuthBusinessDepositdataCorpResponse({}));
  }

  /**
   * Description: 取消存证数据授权给账户
   * Summary: 取消存证数据授权给账户
   */
  async cancelBusinessDepositGrantdid(request: CancelBusinessDepositGrantdidRequest): Promise<CancelBusinessDepositGrantdidResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.cancelBusinessDepositGrantdidEx(request, headers, runtime);
  }

  /**
   * Description: 取消存证数据授权给账户
   * Summary: 取消存证数据授权给账户
   */
  async cancelBusinessDepositGrantdidEx(request: CancelBusinessDepositGrantdidRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CancelBusinessDepositGrantdidResponse> {
    Util.validateModel(request);
    return $tea.cast<CancelBusinessDepositGrantdidResponse>(await this.doRequest("1.0", "baas.business.deposit.grantdid.cancel", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CancelBusinessDepositGrantdidResponse({}));
  }

  /**
   * Description: 取消存证授权给组织机构
   * Summary: 取消存证授权给组织机构
   */
  async cancelBusinessDepositGrantcorp(request: CancelBusinessDepositGrantcorpRequest): Promise<CancelBusinessDepositGrantcorpResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.cancelBusinessDepositGrantcorpEx(request, headers, runtime);
  }

  /**
   * Description: 取消存证授权给组织机构
   * Summary: 取消存证授权给组织机构
   */
  async cancelBusinessDepositGrantcorpEx(request: CancelBusinessDepositGrantcorpRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CancelBusinessDepositGrantcorpResponse> {
    Util.validateModel(request);
    return $tea.cast<CancelBusinessDepositGrantcorpResponse>(await this.doRequest("1.0", "baas.business.deposit.grantcorp.cancel", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CancelBusinessDepositGrantcorpResponse({}));
  }

  /**
   * Description: 授权合约内加密字段给机构，机构下的所有人都有权限访问该数据
   * Summary: 授权合约内加密字段给机构
   */
  async createBusinessContractGrantcorp(request: CreateBusinessContractGrantcorpRequest): Promise<CreateBusinessContractGrantcorpResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.createBusinessContractGrantcorpEx(request, headers, runtime);
  }

  /**
   * Description: 授权合约内加密字段给机构，机构下的所有人都有权限访问该数据
   * Summary: 授权合约内加密字段给机构
   */
  async createBusinessContractGrantcorpEx(request: CreateBusinessContractGrantcorpRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CreateBusinessContractGrantcorpResponse> {
    Util.validateModel(request);
    return $tea.cast<CreateBusinessContractGrantcorpResponse>(await this.doRequest("1.0", "baas.business.contract.grantcorp.create", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CreateBusinessContractGrantcorpResponse({}));
  }

  /**
   * Description: 取消授权did查询加密数据
   * Summary: 取消授权did查询加密数据
   */
  async cancelBusinessContractGrantdid(request: CancelBusinessContractGrantdidRequest): Promise<CancelBusinessContractGrantdidResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.cancelBusinessContractGrantdidEx(request, headers, runtime);
  }

  /**
   * Description: 取消授权did查询加密数据
   * Summary: 取消授权did查询加密数据
   */
  async cancelBusinessContractGrantdidEx(request: CancelBusinessContractGrantdidRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CancelBusinessContractGrantdidResponse> {
    Util.validateModel(request);
    return $tea.cast<CancelBusinessContractGrantdidResponse>(await this.doRequest("1.0", "baas.business.contract.grantdid.cancel", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CancelBusinessContractGrantdidResponse({}));
  }

  /**
   * Description: 取消授权给组织机构
   * Summary: 取消授权给组织机构
   */
  async cancelBusinessContractGrantcorp(request: CancelBusinessContractGrantcorpRequest): Promise<CancelBusinessContractGrantcorpResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.cancelBusinessContractGrantcorpEx(request, headers, runtime);
  }

  /**
   * Description: 取消授权给组织机构
   * Summary: 取消授权给组织机构
   */
  async cancelBusinessContractGrantcorpEx(request: CancelBusinessContractGrantcorpRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CancelBusinessContractGrantcorpResponse> {
    Util.validateModel(request);
    return $tea.cast<CancelBusinessContractGrantcorpResponse>(await this.doRequest("1.0", "baas.business.contract.grantcorp.cancel", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CancelBusinessContractGrantcorpResponse({}));
  }

  /**
   * Description: 业务中台测试接口
   * Summary: 业务中台测试接口
   */
  async importPlatformTestregionTestfunc(request: ImportPlatformTestregionTestfuncRequest): Promise<ImportPlatformTestregionTestfuncResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.importPlatformTestregionTestfuncEx(request, headers, runtime);
  }

  /**
   * Description: 业务中台测试接口
   * Summary: 业务中台测试接口
   */
  async importPlatformTestregionTestfuncEx(request: ImportPlatformTestregionTestfuncRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<ImportPlatformTestregionTestfuncResponse> {
    Util.validateModel(request);
    return $tea.cast<ImportPlatformTestregionTestfuncResponse>(await this.doRequest("1.0", "baas.platform.testregion.testfunc.import", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new ImportPlatformTestregionTestfuncResponse({}));
  }

  /**
   * Description: 存证创建账户
   * Summary: 存证创建账户
   */
  async createPlatformDepositAccount(request: CreatePlatformDepositAccountRequest): Promise<CreatePlatformDepositAccountResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.createPlatformDepositAccountEx(request, headers, runtime);
  }

  /**
   * Description: 存证创建账户
   * Summary: 存证创建账户
   */
  async createPlatformDepositAccountEx(request: CreatePlatformDepositAccountRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CreatePlatformDepositAccountResponse> {
    Util.validateModel(request);
    return $tea.cast<CreatePlatformDepositAccountResponse>(await this.doRequest("1.0", "baas.platform.deposit.account.create", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CreatePlatformDepositAccountResponse({}));
  }

  /**
   * Description: 存证创建did
   * Summary: 存证创建did
   */
  async createPlatformDepositDid(request: CreatePlatformDepositDidRequest): Promise<CreatePlatformDepositDidResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.createPlatformDepositDidEx(request, headers, runtime);
  }

  /**
   * Description: 存证创建did
   * Summary: 存证创建did
   */
  async createPlatformDepositDidEx(request: CreatePlatformDepositDidRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CreatePlatformDepositDidResponse> {
    Util.validateModel(request);
    return $tea.cast<CreatePlatformDepositDidResponse>(await this.doRequest("1.0", "baas.platform.deposit.did.create", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CreatePlatformDepositDidResponse({}));
  }

  /**
   * Description: 普通数据存证
   * Summary: 普通数据存证
   */
  async savePlatformDepositDeposit(request: SavePlatformDepositDepositRequest): Promise<SavePlatformDepositDepositResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.savePlatformDepositDepositEx(request, headers, runtime);
  }

  /**
   * Description: 普通数据存证
   * Summary: 普通数据存证
   */
  async savePlatformDepositDepositEx(request: SavePlatformDepositDepositRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<SavePlatformDepositDepositResponse> {
    Util.validateModel(request);
    return $tea.cast<SavePlatformDepositDepositResponse>(await this.doRequest("1.0", "baas.platform.deposit.deposit.save", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new SavePlatformDepositDepositResponse({}));
  }

  /**
   * Description: 为企业创建did
   * Summary: 为企业创建did
   */
  async createPlatformDepositCorpdid(request: CreatePlatformDepositCorpdidRequest): Promise<CreatePlatformDepositCorpdidResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.createPlatformDepositCorpdidEx(request, headers, runtime);
  }

  /**
   * Description: 为企业创建did
   * Summary: 为企业创建did
   */
  async createPlatformDepositCorpdidEx(request: CreatePlatformDepositCorpdidRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CreatePlatformDepositCorpdidResponse> {
    Util.validateModel(request);
    return $tea.cast<CreatePlatformDepositCorpdidResponse>(await this.doRequest("1.0", "baas.platform.deposit.corpdid.create", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CreatePlatformDepositCorpdidResponse({}));
  }

  /**
   * Description: 用于对用户的账户映射，输入用户名、账户、手机号等信息，返回用户的链上身份信息
   * Summary: 用户账号映射
   */
  async createDigitalassetartAccount(request: CreateDigitalassetartAccountRequest): Promise<CreateDigitalassetartAccountResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.createDigitalassetartAccountEx(request, headers, runtime);
  }

  /**
   * Description: 用于对用户的账户映射，输入用户名、账户、手机号等信息，返回用户的链上身份信息
   * Summary: 用户账号映射
   */
  async createDigitalassetartAccountEx(request: CreateDigitalassetartAccountRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CreateDigitalassetartAccountResponse> {
    Util.validateModel(request);
    return $tea.cast<CreateDigitalassetartAccountResponse>(await this.doRequest("1.0", "baas.digitalassetart.account.create", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CreateDigitalassetartAccountResponse({}));
  }

  /**
   * Description: 批量账户映射
   * Summary: 批量账户映射
   */
  async batchcreateDigitalassetartAccount(request: BatchcreateDigitalassetartAccountRequest): Promise<BatchcreateDigitalassetartAccountResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.batchcreateDigitalassetartAccountEx(request, headers, runtime);
  }

  /**
   * Description: 批量账户映射
   * Summary: 批量账户映射
   */
  async batchcreateDigitalassetartAccountEx(request: BatchcreateDigitalassetartAccountRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<BatchcreateDigitalassetartAccountResponse> {
    Util.validateModel(request);
    return $tea.cast<BatchcreateDigitalassetartAccountResponse>(await this.doRequest("1.0", "baas.digitalassetart.account.batchcreate", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new BatchcreateDigitalassetartAccountResponse({}));
  }

  /**
   * Description: 创建艺术品
   * Summary: 创建艺术品
   */
  async createDigitalassetartArtCreate(request: CreateDigitalassetartArtCreateRequest): Promise<CreateDigitalassetartArtCreateResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.createDigitalassetartArtCreateEx(request, headers, runtime);
  }

  /**
   * Description: 创建艺术品
   * Summary: 创建艺术品
   */
  async createDigitalassetartArtCreateEx(request: CreateDigitalassetartArtCreateRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CreateDigitalassetartArtCreateResponse> {
    Util.validateModel(request);
    return $tea.cast<CreateDigitalassetartArtCreateResponse>(await this.doRequest("1.0", "baas.digitalassetart.art.create.create", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CreateDigitalassetartArtCreateResponse({}));
  }

  /**
   * Description: 将艺术品从创建状态改为发行状态，只有在发行状态的艺术品才能进行各种交易
   * Summary: 发行艺术品
   */
  async setDigitalassetartArtIssue(request: SetDigitalassetartArtIssueRequest): Promise<SetDigitalassetartArtIssueResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.setDigitalassetartArtIssueEx(request, headers, runtime);
  }

  /**
   * Description: 将艺术品从创建状态改为发行状态，只有在发行状态的艺术品才能进行各种交易
   * Summary: 发行艺术品
   */
  async setDigitalassetartArtIssueEx(request: SetDigitalassetartArtIssueRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<SetDigitalassetartArtIssueResponse> {
    Util.validateModel(request);
    return $tea.cast<SetDigitalassetartArtIssueResponse>(await this.doRequest("1.0", "baas.digitalassetart.art.issue.set", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new SetDigitalassetartArtIssueResponse({}));
  }

  /**
   * Description: 将该艺术品发布到交易所
   * Summary: 将该艺术品发布到交易所
   */
  async setDigitalassetartArtIssuetoexchange(request: SetDigitalassetartArtIssuetoexchangeRequest): Promise<SetDigitalassetartArtIssuetoexchangeResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.setDigitalassetartArtIssuetoexchangeEx(request, headers, runtime);
  }

  /**
   * Description: 将该艺术品发布到交易所
   * Summary: 将该艺术品发布到交易所
   */
  async setDigitalassetartArtIssuetoexchangeEx(request: SetDigitalassetartArtIssuetoexchangeRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<SetDigitalassetartArtIssuetoexchangeResponse> {
    Util.validateModel(request);
    return $tea.cast<SetDigitalassetartArtIssuetoexchangeResponse>(await this.doRequest("1.0", "baas.digitalassetart.art.issuetoexchange.set", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new SetDigitalassetartArtIssuetoexchangeResponse({}));
  }

  /**
   * Description: 艺术品本链交易
   * Summary: 艺术品本链交易
   */
  async setDigitalassetartArtTrade(request: SetDigitalassetartArtTradeRequest): Promise<SetDigitalassetartArtTradeResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.setDigitalassetartArtTradeEx(request, headers, runtime);
  }

  /**
   * Description: 艺术品本链交易
   * Summary: 艺术品本链交易
   */
  async setDigitalassetartArtTradeEx(request: SetDigitalassetartArtTradeRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<SetDigitalassetartArtTradeResponse> {
    Util.validateModel(request);
    return $tea.cast<SetDigitalassetartArtTradeResponse>(await this.doRequest("1.0", "baas.digitalassetart.art.trade.set", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new SetDigitalassetartArtTradeResponse({}));
  }

  /**
   * Description: 在交易所交易艺术品
   * Summary: 在交易所交易艺术品
   */
  async setDigitalassetartArtTradeonexchange(request: SetDigitalassetartArtTradeonexchangeRequest): Promise<SetDigitalassetartArtTradeonexchangeResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.setDigitalassetartArtTradeonexchangeEx(request, headers, runtime);
  }

  /**
   * Description: 在交易所交易艺术品
   * Summary: 在交易所交易艺术品
   */
  async setDigitalassetartArtTradeonexchangeEx(request: SetDigitalassetartArtTradeonexchangeRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<SetDigitalassetartArtTradeonexchangeResponse> {
    Util.validateModel(request);
    return $tea.cast<SetDigitalassetartArtTradeonexchangeResponse>(await this.doRequest("1.0", "baas.digitalassetart.art.tradeonexchange.set", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new SetDigitalassetartArtTradeonexchangeResponse({}));
  }

  /**
   * Description: 冻结艺术品
   * Summary: 冻结艺术品
   */
  async freezeDigitalassetartArtAccount(request: FreezeDigitalassetartArtAccountRequest): Promise<FreezeDigitalassetartArtAccountResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.freezeDigitalassetartArtAccountEx(request, headers, runtime);
  }

  /**
   * Description: 冻结艺术品
   * Summary: 冻结艺术品
   */
  async freezeDigitalassetartArtAccountEx(request: FreezeDigitalassetartArtAccountRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<FreezeDigitalassetartArtAccountResponse> {
    Util.validateModel(request);
    return $tea.cast<FreezeDigitalassetartArtAccountResponse>(await this.doRequest("1.0", "baas.digitalassetart.art.account.freeze", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new FreezeDigitalassetartArtAccountResponse({}));
  }

  /**
   * Description: 艺术品解冻
   * Summary: 艺术品解冻
   */
  async unfreezeDigitalassetartArtAccount(request: UnfreezeDigitalassetartArtAccountRequest): Promise<UnfreezeDigitalassetartArtAccountResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.unfreezeDigitalassetartArtAccountEx(request, headers, runtime);
  }

  /**
   * Description: 艺术品解冻
   * Summary: 艺术品解冻
   */
  async unfreezeDigitalassetartArtAccountEx(request: UnfreezeDigitalassetartArtAccountRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<UnfreezeDigitalassetartArtAccountResponse> {
    Util.validateModel(request);
    return $tea.cast<UnfreezeDigitalassetartArtAccountResponse>(await this.doRequest("1.0", "baas.digitalassetart.art.account.unfreeze", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new UnfreezeDigitalassetartArtAccountResponse({}));
  }

  /**
   * Description: 取消在交易所发布艺术品
   * Summary: 取消在交易所发布艺术品
   */
  async setDigitalassetartArtUnissuetoexchange(request: SetDigitalassetartArtUnissuetoexchangeRequest): Promise<SetDigitalassetartArtUnissuetoexchangeResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.setDigitalassetartArtUnissuetoexchangeEx(request, headers, runtime);
  }

  /**
   * Description: 取消在交易所发布艺术品
   * Summary: 取消在交易所发布艺术品
   */
  async setDigitalassetartArtUnissuetoexchangeEx(request: SetDigitalassetartArtUnissuetoexchangeRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<SetDigitalassetartArtUnissuetoexchangeResponse> {
    Util.validateModel(request);
    return $tea.cast<SetDigitalassetartArtUnissuetoexchangeResponse>(await this.doRequest("1.0", "baas.digitalassetart.art.unissuetoexchange.set", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new SetDigitalassetartArtUnissuetoexchangeResponse({}));
  }

  /**
   * Description: 查询艺术品信息
   * Summary: 查询艺术品信息
   */
  async queryDigitalassetartArt(request: QueryDigitalassetartArtRequest): Promise<QueryDigitalassetartArtResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryDigitalassetartArtEx(request, headers, runtime);
  }

  /**
   * Description: 查询艺术品信息
   * Summary: 查询艺术品信息
   */
  async queryDigitalassetartArtEx(request: QueryDigitalassetartArtRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryDigitalassetartArtResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryDigitalassetartArtResponse>(await this.doRequest("1.0", "baas.digitalassetart.art.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryDigitalassetartArtResponse({}));
  }

  /**
   * Description: 数字资产管理平台业务方账户映射接口
   * Summary: 数字资产管理平台业务方账户映射
   */
  async createDigitalassetExchangeAccountmap(request: CreateDigitalassetExchangeAccountmapRequest): Promise<CreateDigitalassetExchangeAccountmapResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.createDigitalassetExchangeAccountmapEx(request, headers, runtime);
  }

  /**
   * Description: 数字资产管理平台业务方账户映射接口
   * Summary: 数字资产管理平台业务方账户映射
   */
  async createDigitalassetExchangeAccountmapEx(request: CreateDigitalassetExchangeAccountmapRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CreateDigitalassetExchangeAccountmapResponse> {
    Util.validateModel(request);
    return $tea.cast<CreateDigitalassetExchangeAccountmapResponse>(await this.doRequest("1.0", "baas.digitalasset.exchange.accountmap.create", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CreateDigitalassetExchangeAccountmapResponse({}));
  }

  /**
   * Description: 数字资产管理平台用户账户批量映射接口
   * Summary: 数字资产管理平台用户账户批量映射
   */
  async batchcreateDigitalassetExchangeAccountmap(request: BatchcreateDigitalassetExchangeAccountmapRequest): Promise<BatchcreateDigitalassetExchangeAccountmapResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.batchcreateDigitalassetExchangeAccountmapEx(request, headers, runtime);
  }

  /**
   * Description: 数字资产管理平台用户账户批量映射接口
   * Summary: 数字资产管理平台用户账户批量映射
   */
  async batchcreateDigitalassetExchangeAccountmapEx(request: BatchcreateDigitalassetExchangeAccountmapRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<BatchcreateDigitalassetExchangeAccountmapResponse> {
    Util.validateModel(request);
    return $tea.cast<BatchcreateDigitalassetExchangeAccountmapResponse>(await this.doRequest("1.0", "baas.digitalasset.exchange.accountmap.batchcreate", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new BatchcreateDigitalassetExchangeAccountmapResponse({}));
  }

  /**
   * Description: 数字资产管理平台版通解限接口
   * Summary: 数字资产管理平台版通解限
   */
  async startDigitalassetExchangeUnfreeze(request: StartDigitalassetExchangeUnfreezeRequest): Promise<StartDigitalassetExchangeUnfreezeResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.startDigitalassetExchangeUnfreezeEx(request, headers, runtime);
  }

  /**
   * Description: 数字资产管理平台版通解限接口
   * Summary: 数字资产管理平台版通解限
   */
  async startDigitalassetExchangeUnfreezeEx(request: StartDigitalassetExchangeUnfreezeRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<StartDigitalassetExchangeUnfreezeResponse> {
    Util.validateModel(request);
    return $tea.cast<StartDigitalassetExchangeUnfreezeResponse>(await this.doRequest("1.0", "baas.digitalasset.exchange.unfreeze.start", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new StartDigitalassetExchangeUnfreezeResponse({}));
  }

  /**
   * Description: 数字资产管理平台资源管理 处理用户、版通的锁定与解锁
  1. ep_code有值，user_account为空时，对指定版通进行锁定解锁操作
  2. ep_code为空，user_account有值时，对指定账户进行锁定解锁操作
  3. ep_code，user_account均有值时，对指定账户的版通进行锁定解锁操作
  4. ep_code，user_account均为空时，对全交易所进行锁定解锁操作，需谨慎
   * Summary: 数字资产管理平台资源管理
   */
  async startDigitalassetExchangeLockposition(request: StartDigitalassetExchangeLockpositionRequest): Promise<StartDigitalassetExchangeLockpositionResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.startDigitalassetExchangeLockpositionEx(request, headers, runtime);
  }

  /**
   * Description: 数字资产管理平台资源管理 处理用户、版通的锁定与解锁
  1. ep_code有值，user_account为空时，对指定版通进行锁定解锁操作
  2. ep_code为空，user_account有值时，对指定账户进行锁定解锁操作
  3. ep_code，user_account均有值时，对指定账户的版通进行锁定解锁操作
  4. ep_code，user_account均为空时，对全交易所进行锁定解锁操作，需谨慎
   * Summary: 数字资产管理平台资源管理
   */
  async startDigitalassetExchangeLockpositionEx(request: StartDigitalassetExchangeLockpositionRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<StartDigitalassetExchangeLockpositionResponse> {
    Util.validateModel(request);
    return $tea.cast<StartDigitalassetExchangeLockpositionResponse>(await this.doRequest("1.0", "baas.digitalasset.exchange.lockposition.start", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new StartDigitalassetExchangeLockpositionResponse({}));
  }

  /**
   * Description: 数字资产管理平台版通发行接口
   * Summary: 数字资产管理平台版通发行
   */
  async createDigitalassetExchangeEpissue(request: CreateDigitalassetExchangeEpissueRequest): Promise<CreateDigitalassetExchangeEpissueResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.createDigitalassetExchangeEpissueEx(request, headers, runtime);
  }

  /**
   * Description: 数字资产管理平台版通发行接口
   * Summary: 数字资产管理平台版通发行
   */
  async createDigitalassetExchangeEpissueEx(request: CreateDigitalassetExchangeEpissueRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CreateDigitalassetExchangeEpissueResponse> {
    Util.validateModel(request);
    return $tea.cast<CreateDigitalassetExchangeEpissueResponse>(await this.doRequest("1.0", "baas.digitalasset.exchange.epissue.create", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CreateDigitalassetExchangeEpissueResponse({}));
  }

  /**
   * Description: 数字资产管理平台版通存量发行接口
   * Summary: 数字资产管理平台版通存量发行
   */
  async createDigitalassetExchangeEpstockissue(request: CreateDigitalassetExchangeEpstockissueRequest): Promise<CreateDigitalassetExchangeEpstockissueResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.createDigitalassetExchangeEpstockissueEx(request, headers, runtime);
  }

  /**
   * Description: 数字资产管理平台版通存量发行接口
   * Summary: 数字资产管理平台版通存量发行
   */
  async createDigitalassetExchangeEpstockissueEx(request: CreateDigitalassetExchangeEpstockissueRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CreateDigitalassetExchangeEpstockissueResponse> {
    Util.validateModel(request);
    return $tea.cast<CreateDigitalassetExchangeEpstockissueResponse>(await this.doRequest("1.0", "baas.digitalasset.exchange.epstockissue.create", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CreateDigitalassetExchangeEpstockissueResponse({}));
  }

  /**
   * Description: 数字资产管理平台版通批发接口
   * Summary: 数字资产管理平台版通批发
   */
  async startDigitalassetExchangeEpwholesale(request: StartDigitalassetExchangeEpwholesaleRequest): Promise<StartDigitalassetExchangeEpwholesaleResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.startDigitalassetExchangeEpwholesaleEx(request, headers, runtime);
  }

  /**
   * Description: 数字资产管理平台版通批发接口
   * Summary: 数字资产管理平台版通批发
   */
  async startDigitalassetExchangeEpwholesaleEx(request: StartDigitalassetExchangeEpwholesaleRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<StartDigitalassetExchangeEpwholesaleResponse> {
    Util.validateModel(request);
    return $tea.cast<StartDigitalassetExchangeEpwholesaleResponse>(await this.doRequest("1.0", "baas.digitalasset.exchange.epwholesale.start", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new StartDigitalassetExchangeEpwholesaleResponse({}));
  }

  /**
   * Description: 数字资产管理平台版通信息查询接口
   * Summary: 数字资产管理平台版通信息查询
   */
  async queryDigitalassetExchangeEpinfo(request: QueryDigitalassetExchangeEpinfoRequest): Promise<QueryDigitalassetExchangeEpinfoResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryDigitalassetExchangeEpinfoEx(request, headers, runtime);
  }

  /**
   * Description: 数字资产管理平台版通信息查询接口
   * Summary: 数字资产管理平台版通信息查询
   */
  async queryDigitalassetExchangeEpinfoEx(request: QueryDigitalassetExchangeEpinfoRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryDigitalassetExchangeEpinfoResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryDigitalassetExchangeEpinfoResponse>(await this.doRequest("1.0", "baas.digitalasset.exchange.epinfo.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryDigitalassetExchangeEpinfoResponse({}));
  }

  /**
   * Description: 数字资产管理平台交易查询接口
  1. ep_code有值，user_account为空时，查询版通的交易信息
  2. ep_code为空，user_account有值时，查询账户的交易信息
  3. ep_code，user_account均有值时，查询账户下指定版通的交易信息
   * Summary: 数字资产管理平台交易查询
   */
  async queryDigitalassetExchangeEptrade(request: QueryDigitalassetExchangeEptradeRequest): Promise<QueryDigitalassetExchangeEptradeResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryDigitalassetExchangeEptradeEx(request, headers, runtime);
  }

  /**
   * Description: 数字资产管理平台交易查询接口
  1. ep_code有值，user_account为空时，查询版通的交易信息
  2. ep_code为空，user_account有值时，查询账户的交易信息
  3. ep_code，user_account均有值时，查询账户下指定版通的交易信息
   * Summary: 数字资产管理平台交易查询
   */
  async queryDigitalassetExchangeEptradeEx(request: QueryDigitalassetExchangeEptradeRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryDigitalassetExchangeEptradeResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryDigitalassetExchangeEptradeResponse>(await this.doRequest("1.0", "baas.digitalasset.exchange.eptrade.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryDigitalassetExchangeEptradeResponse({}));
  }

  /**
   * Description: 数字资产管理平台账户信息查询接口
   * Summary: 数字资产管理平台账户信息查询
   */
  async queryDigitalassetExchangeEpaccount(request: QueryDigitalassetExchangeEpaccountRequest): Promise<QueryDigitalassetExchangeEpaccountResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryDigitalassetExchangeEpaccountEx(request, headers, runtime);
  }

  /**
   * Description: 数字资产管理平台账户信息查询接口
   * Summary: 数字资产管理平台账户信息查询
   */
  async queryDigitalassetExchangeEpaccountEx(request: QueryDigitalassetExchangeEpaccountRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryDigitalassetExchangeEpaccountResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryDigitalassetExchangeEpaccountResponse>(await this.doRequest("1.0", "baas.digitalasset.exchange.epaccount.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryDigitalassetExchangeEpaccountResponse({}));
  }

  /**
   * Description: 数字资产管理平台交易接口
   * Summary: 数字资产管理平台交易
   */
  async startDigitalassetExchangeEptrade(request: StartDigitalassetExchangeEptradeRequest): Promise<StartDigitalassetExchangeEptradeResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.startDigitalassetExchangeEptradeEx(request, headers, runtime);
  }

  /**
   * Description: 数字资产管理平台交易接口
   * Summary: 数字资产管理平台交易
   */
  async startDigitalassetExchangeEptradeEx(request: StartDigitalassetExchangeEptradeRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<StartDigitalassetExchangeEptradeResponse> {
    Util.validateModel(request);
    return $tea.cast<StartDigitalassetExchangeEptradeResponse>(await this.doRequest("1.0", "baas.digitalasset.exchange.eptrade.start", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new StartDigitalassetExchangeEptradeResponse({}));
  }

  /**
   * Description: 数字资产管理平台版通回购接口
   * Summary: 数字资产管理平台版通回购
   */
  async startDigitalassetExchangeEpbuyback(request: StartDigitalassetExchangeEpbuybackRequest): Promise<StartDigitalassetExchangeEpbuybackResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.startDigitalassetExchangeEpbuybackEx(request, headers, runtime);
  }

  /**
   * Description: 数字资产管理平台版通回购接口
   * Summary: 数字资产管理平台版通回购
   */
  async startDigitalassetExchangeEpbuybackEx(request: StartDigitalassetExchangeEpbuybackRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<StartDigitalassetExchangeEpbuybackResponse> {
    Util.validateModel(request);
    return $tea.cast<StartDigitalassetExchangeEpbuybackResponse>(await this.doRequest("1.0", "baas.digitalasset.exchange.epbuyback.start", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new StartDigitalassetExchangeEpbuybackResponse({}));
  }

  /**
   * Description: 创建用户接口
   * Summary: 创建用户接口
   */
  async createDistributionUser(request: CreateDistributionUserRequest): Promise<CreateDistributionUserResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.createDistributionUserEx(request, headers, runtime);
  }

  /**
   * Description: 创建用户接口
   * Summary: 创建用户接口
   */
  async createDistributionUserEx(request: CreateDistributionUserRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CreateDistributionUserResponse> {
    Util.validateModel(request);
    return $tea.cast<CreateDistributionUserResponse>(await this.doRequest("1.0", "baas.distribution.user.create", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CreateDistributionUserResponse({}));
  }

  /**
   * Description: 用户下级分销关系查询
   * Summary: 用户下级分销关系查询
   */
  async queryDistributionUserTeam(request: QueryDistributionUserTeamRequest): Promise<QueryDistributionUserTeamResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryDistributionUserTeamEx(request, headers, runtime);
  }

  /**
   * Description: 用户下级分销关系查询
   * Summary: 用户下级分销关系查询
   */
  async queryDistributionUserTeamEx(request: QueryDistributionUserTeamRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryDistributionUserTeamResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryDistributionUserTeamResponse>(await this.doRequest("1.0", "baas.distribution.user.team.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryDistributionUserTeamResponse({}));
  }

  /**
   * Description: 创建商户接口
   * Summary: 创建商户
   */
  async createDistributionShop(request: CreateDistributionShopRequest): Promise<CreateDistributionShopResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.createDistributionShopEx(request, headers, runtime);
  }

  /**
   * Description: 创建商户接口
   * Summary: 创建商户
   */
  async createDistributionShopEx(request: CreateDistributionShopRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CreateDistributionShopResponse> {
    Util.validateModel(request);
    return $tea.cast<CreateDistributionShopResponse>(await this.doRequest("1.0", "baas.distribution.shop.create", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CreateDistributionShopResponse({}));
  }

  /**
   * Description: 用户之间分销关系建立
   * Summary: 用户之间分销关系建立
   */
  async createDistributionUserRelation(request: CreateDistributionUserRelationRequest): Promise<CreateDistributionUserRelationResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.createDistributionUserRelationEx(request, headers, runtime);
  }

  /**
   * Description: 用户之间分销关系建立
   * Summary: 用户之间分销关系建立
   */
  async createDistributionUserRelationEx(request: CreateDistributionUserRelationRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CreateDistributionUserRelationResponse> {
    Util.validateModel(request);
    return $tea.cast<CreateDistributionUserRelationResponse>(await this.doRequest("1.0", "baas.distribution.user.relation.create", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CreateDistributionUserRelationResponse({}));
  }

  /**
   * Description: 营销分销合约初始化
   * Summary: 营销分销合约初始化
   */
  async initDistributionContract(request: InitDistributionContractRequest): Promise<InitDistributionContractResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.initDistributionContractEx(request, headers, runtime);
  }

  /**
   * Description: 营销分销合约初始化
   * Summary: 营销分销合约初始化
   */
  async initDistributionContractEx(request: InitDistributionContractRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<InitDistributionContractResponse> {
    Util.validateModel(request);
    return $tea.cast<InitDistributionContractResponse>(await this.doRequest("1.0", "baas.distribution.contract.init", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new InitDistributionContractResponse({}));
  }

  /**
   * Description: 营销分销平台商品创建
   * Summary: 营销分销平台商品创建
   */
  async createDistributionProductItem(request: CreateDistributionProductItemRequest): Promise<CreateDistributionProductItemResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.createDistributionProductItemEx(request, headers, runtime);
  }

  /**
   * Description: 营销分销平台商品创建
   * Summary: 营销分销平台商品创建
   */
  async createDistributionProductItemEx(request: CreateDistributionProductItemRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CreateDistributionProductItemResponse> {
    Util.validateModel(request);
    return $tea.cast<CreateDistributionProductItemResponse>(await this.doRequest("1.0", "baas.distribution.product.item.create", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CreateDistributionProductItemResponse({}));
  }

  /**
   * Description: 营销分销平台商品查询
   * Summary: 营销分销平台商品查询
   */
  async queryDistributionProductItem(request: QueryDistributionProductItemRequest): Promise<QueryDistributionProductItemResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryDistributionProductItemEx(request, headers, runtime);
  }

  /**
   * Description: 营销分销平台商品查询
   * Summary: 营销分销平台商品查询
   */
  async queryDistributionProductItemEx(request: QueryDistributionProductItemRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryDistributionProductItemResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryDistributionProductItemResponse>(await this.doRequest("1.0", "baas.distribution.product.item.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryDistributionProductItemResponse({}));
  }

  /**
   * Description: 营销分销平台推广人钱包更新
   * Summary: 营销分销平台推广人钱包更新
   */
  async updateDistributionFundPromoter(request: UpdateDistributionFundPromoterRequest): Promise<UpdateDistributionFundPromoterResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.updateDistributionFundPromoterEx(request, headers, runtime);
  }

  /**
   * Description: 营销分销平台推广人钱包更新
   * Summary: 营销分销平台推广人钱包更新
   */
  async updateDistributionFundPromoterEx(request: UpdateDistributionFundPromoterRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<UpdateDistributionFundPromoterResponse> {
    Util.validateModel(request);
    return $tea.cast<UpdateDistributionFundPromoterResponse>(await this.doRequest("1.0", "baas.distribution.fund.promoter.update", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new UpdateDistributionFundPromoterResponse({}));
  }

  /**
   * Description: 营销分销平台商户账户更新
   * Summary: 营销分销平台商户账户更新
   */
  async updateDistributionFundShop(request: UpdateDistributionFundShopRequest): Promise<UpdateDistributionFundShopResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.updateDistributionFundShopEx(request, headers, runtime);
  }

  /**
   * Description: 营销分销平台商户账户更新
   * Summary: 营销分销平台商户账户更新
   */
  async updateDistributionFundShopEx(request: UpdateDistributionFundShopRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<UpdateDistributionFundShopResponse> {
    Util.validateModel(request);
    return $tea.cast<UpdateDistributionFundShopResponse>(await this.doRequest("1.0", "baas.distribution.fund.shop.update", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new UpdateDistributionFundShopResponse({}));
  }

  /**
   * Description: 营销分销平台推广人账户查询
   * Summary: 营销分销平台推广人账户查询
   */
  async queryDistributionFundPromoter(request: QueryDistributionFundPromoterRequest): Promise<QueryDistributionFundPromoterResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryDistributionFundPromoterEx(request, headers, runtime);
  }

  /**
   * Description: 营销分销平台推广人账户查询
   * Summary: 营销分销平台推广人账户查询
   */
  async queryDistributionFundPromoterEx(request: QueryDistributionFundPromoterRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryDistributionFundPromoterResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryDistributionFundPromoterResponse>(await this.doRequest("1.0", "baas.distribution.fund.promoter.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryDistributionFundPromoterResponse({}));
  }

  /**
   * Description: 营销分销平台商户账户查询
   * Summary: 营销分销平台商户账户查询
   */
  async queryDistributionFundShop(request: QueryDistributionFundShopRequest): Promise<QueryDistributionFundShopResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryDistributionFundShopEx(request, headers, runtime);
  }

  /**
   * Description: 营销分销平台商户账户查询
   * Summary: 营销分销平台商户账户查询
   */
  async queryDistributionFundShopEx(request: QueryDistributionFundShopRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryDistributionFundShopResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryDistributionFundShopResponse>(await this.doRequest("1.0", "baas.distribution.fund.shop.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryDistributionFundShopResponse({}));
  }

  /**
   * Description: 营销分销平台推广人账户流水查询
   * Summary: 营销分销平台推广人账户流水查询
   */
  async queryDistributionFundPromoterflow(request: QueryDistributionFundPromoterflowRequest): Promise<QueryDistributionFundPromoterflowResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryDistributionFundPromoterflowEx(request, headers, runtime);
  }

  /**
   * Description: 营销分销平台推广人账户流水查询
   * Summary: 营销分销平台推广人账户流水查询
   */
  async queryDistributionFundPromoterflowEx(request: QueryDistributionFundPromoterflowRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryDistributionFundPromoterflowResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryDistributionFundPromoterflowResponse>(await this.doRequest("1.0", "baas.distribution.fund.promoterflow.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryDistributionFundPromoterflowResponse({}));
  }

  /**
   * Description: 营销分销平台推广订单创建
   * Summary: 营销分销平台推广订单创建
   */
  async createDistributionOrderPromoter(request: CreateDistributionOrderPromoterRequest): Promise<CreateDistributionOrderPromoterResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.createDistributionOrderPromoterEx(request, headers, runtime);
  }

  /**
   * Description: 营销分销平台推广订单创建
   * Summary: 营销分销平台推广订单创建
   */
  async createDistributionOrderPromoterEx(request: CreateDistributionOrderPromoterRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CreateDistributionOrderPromoterResponse> {
    Util.validateModel(request);
    return $tea.cast<CreateDistributionOrderPromoterResponse>(await this.doRequest("1.0", "baas.distribution.order.promoter.create", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CreateDistributionOrderPromoterResponse({}));
  }

  /**
   * Description: 营销分销平台购买订单创建
   * Summary: 营销分销平台购买订单创建
   */
  async createDistributionOrderTrade(request: CreateDistributionOrderTradeRequest): Promise<CreateDistributionOrderTradeResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.createDistributionOrderTradeEx(request, headers, runtime);
  }

  /**
   * Description: 营销分销平台购买订单创建
   * Summary: 营销分销平台购买订单创建
   */
  async createDistributionOrderTradeEx(request: CreateDistributionOrderTradeRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CreateDistributionOrderTradeResponse> {
    Util.validateModel(request);
    return $tea.cast<CreateDistributionOrderTradeResponse>(await this.doRequest("1.0", "baas.distribution.order.trade.create", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CreateDistributionOrderTradeResponse({}));
  }

  /**
   * Description: 营销分销平台推广订单查询
   * Summary: 营销分销平台推广订单查询
   */
  async queryDistributionOrderPromoter(request: QueryDistributionOrderPromoterRequest): Promise<QueryDistributionOrderPromoterResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryDistributionOrderPromoterEx(request, headers, runtime);
  }

  /**
   * Description: 营销分销平台推广订单查询
   * Summary: 营销分销平台推广订单查询
   */
  async queryDistributionOrderPromoterEx(request: QueryDistributionOrderPromoterRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryDistributionOrderPromoterResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryDistributionOrderPromoterResponse>(await this.doRequest("1.0", "baas.distribution.order.promoter.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryDistributionOrderPromoterResponse({}));
  }

  /**
   * Description: 营销分销平台订单返佣信息查询
   * Summary: 营销分销平台订单返佣信息查询
   */
  async queryDistributionOrderRakeback(request: QueryDistributionOrderRakebackRequest): Promise<QueryDistributionOrderRakebackResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryDistributionOrderRakebackEx(request, headers, runtime);
  }

  /**
   * Description: 营销分销平台订单返佣信息查询
   * Summary: 营销分销平台订单返佣信息查询
   */
  async queryDistributionOrderRakebackEx(request: QueryDistributionOrderRakebackRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryDistributionOrderRakebackResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryDistributionOrderRakebackResponse>(await this.doRequest("1.0", "baas.distribution.order.rakeback.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryDistributionOrderRakebackResponse({}));
  }

  /**
   * Description: 营销分销平台购买订单查询
   * Summary: 营销分销平台购买订单查询
   */
  async queryDistributionOrderTrade(request: QueryDistributionOrderTradeRequest): Promise<QueryDistributionOrderTradeResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryDistributionOrderTradeEx(request, headers, runtime);
  }

  /**
   * Description: 营销分销平台购买订单查询
   * Summary: 营销分销平台购买订单查询
   */
  async queryDistributionOrderTradeEx(request: QueryDistributionOrderTradeRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryDistributionOrderTradeResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryDistributionOrderTradeResponse>(await this.doRequest("1.0", "baas.distribution.order.trade.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryDistributionOrderTradeResponse({}));
  }

  /**
   * Description: DIS 分布式数字身份申请
   * Summary: DIS 分布式数字身份申请
   */
  async createLogisticFinanceDis(request: CreateLogisticFinanceDisRequest): Promise<CreateLogisticFinanceDisResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.createLogisticFinanceDisEx(request, headers, runtime);
  }

  /**
   * Description: DIS 分布式数字身份申请
   * Summary: DIS 分布式数字身份申请
   */
  async createLogisticFinanceDisEx(request: CreateLogisticFinanceDisRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CreateLogisticFinanceDisResponse> {
    Util.validateModel(request);
    return $tea.cast<CreateLogisticFinanceDisResponse>(await this.doRequest("1.0", "baas.logistic.finance.dis.create", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CreateLogisticFinanceDisResponse({}));
  }

  /**
   * Description: 查询 DIS 分布式数字身份列表
   * Summary: 查询 DIS 分布式数字身份列表
   */
  async listLogisticFinanceDis(request: ListLogisticFinanceDisRequest): Promise<ListLogisticFinanceDisResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.listLogisticFinanceDisEx(request, headers, runtime);
  }

  /**
   * Description: 查询 DIS 分布式数字身份列表
   * Summary: 查询 DIS 分布式数字身份列表
   */
  async listLogisticFinanceDisEx(request: ListLogisticFinanceDisRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<ListLogisticFinanceDisResponse> {
    Util.validateModel(request);
    return $tea.cast<ListLogisticFinanceDisResponse>(await this.doRequest("1.0", "baas.logistic.finance.dis.list", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new ListLogisticFinanceDisResponse({}));
  }

  /**
   * Description: 为成员颁发可验证声明用于允许指定成员有访问数据的权限
   * Summary: 颁发可验证声明
   */
  async createLogisticFinanceDisvc(request: CreateLogisticFinanceDisvcRequest): Promise<CreateLogisticFinanceDisvcResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.createLogisticFinanceDisvcEx(request, headers, runtime);
  }

  /**
   * Description: 为成员颁发可验证声明用于允许指定成员有访问数据的权限
   * Summary: 颁发可验证声明
   */
  async createLogisticFinanceDisvcEx(request: CreateLogisticFinanceDisvcRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CreateLogisticFinanceDisvcResponse> {
    Util.validateModel(request);
    return $tea.cast<CreateLogisticFinanceDisvcResponse>(await this.doRequest("1.0", "baas.logistic.finance.disvc.create", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CreateLogisticFinanceDisvcResponse({}));
  }

  /**
   * Description: 查询颁发的可验证声明完整声明内容
   * Summary: 查询颁发的可验证声明
   */
  async queryLogisticFinanceDisvc(request: QueryLogisticFinanceDisvcRequest): Promise<QueryLogisticFinanceDisvcResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryLogisticFinanceDisvcEx(request, headers, runtime);
  }

  /**
   * Description: 查询颁发的可验证声明完整声明内容
   * Summary: 查询颁发的可验证声明
   */
  async queryLogisticFinanceDisvcEx(request: QueryLogisticFinanceDisvcRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryLogisticFinanceDisvcResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryLogisticFinanceDisvcResponse>(await this.doRequest("1.0", "baas.logistic.finance.disvc.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryLogisticFinanceDisvcResponse({}));
  }

  /**
   * Description: 物流金融平台用户账户映射
   * Summary: 物流金融平台用户账户映射
   */
  async createLogisticFinanceAccount(request: CreateLogisticFinanceAccountRequest): Promise<CreateLogisticFinanceAccountResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.createLogisticFinanceAccountEx(request, headers, runtime);
  }

  /**
   * Description: 物流金融平台用户账户映射
   * Summary: 物流金融平台用户账户映射
   */
  async createLogisticFinanceAccountEx(request: CreateLogisticFinanceAccountRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CreateLogisticFinanceAccountResponse> {
    Util.validateModel(request);
    return $tea.cast<CreateLogisticFinanceAccountResponse>(await this.doRequest("1.0", "baas.logistic.finance.account.create", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CreateLogisticFinanceAccountResponse({}));
  }

  /**
   * Description: 物流金融平台账户批量映射
   * Summary: 物流金融平台账户批量映射
   */
  async batchcreateLogisticFinanceAccount(request: BatchcreateLogisticFinanceAccountRequest): Promise<BatchcreateLogisticFinanceAccountResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.batchcreateLogisticFinanceAccountEx(request, headers, runtime);
  }

  /**
   * Description: 物流金融平台账户批量映射
   * Summary: 物流金融平台账户批量映射
   */
  async batchcreateLogisticFinanceAccountEx(request: BatchcreateLogisticFinanceAccountRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<BatchcreateLogisticFinanceAccountResponse> {
    Util.validateModel(request);
    return $tea.cast<BatchcreateLogisticFinanceAccountResponse>(await this.doRequest("1.0", "baas.logistic.finance.account.batchcreate", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new BatchcreateLogisticFinanceAccountResponse({}));
  }

  /**
   * Description: 物流金融平台物流运单创建
   * Summary: 物流金融平台物流运单创建
   */
  async createLogisticFinanceOrder(request: CreateLogisticFinanceOrderRequest): Promise<CreateLogisticFinanceOrderResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.createLogisticFinanceOrderEx(request, headers, runtime);
  }

  /**
   * Description: 物流金融平台物流运单创建
   * Summary: 物流金融平台物流运单创建
   */
  async createLogisticFinanceOrderEx(request: CreateLogisticFinanceOrderRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CreateLogisticFinanceOrderResponse> {
    Util.validateModel(request);
    return $tea.cast<CreateLogisticFinanceOrderResponse>(await this.doRequest("1.0", "baas.logistic.finance.order.create", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CreateLogisticFinanceOrderResponse({}));
  }

  /**
   * Description: 物流金融平台运单完成
   * Summary: 物流金融平台运单完成
   */
  async finishLogisticFinanceOrder(request: FinishLogisticFinanceOrderRequest): Promise<FinishLogisticFinanceOrderResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.finishLogisticFinanceOrderEx(request, headers, runtime);
  }

  /**
   * Description: 物流金融平台运单完成
   * Summary: 物流金融平台运单完成
   */
  async finishLogisticFinanceOrderEx(request: FinishLogisticFinanceOrderRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<FinishLogisticFinanceOrderResponse> {
    Util.validateModel(request);
    return $tea.cast<FinishLogisticFinanceOrderResponse>(await this.doRequest("1.0", "baas.logistic.finance.order.finish", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new FinishLogisticFinanceOrderResponse({}));
  }

  /**
   * Description: 物流金融平台支付订单创建
   * Summary: 物流金融平台支付订单创建
   */
  async createLogisticFinancePayorder(request: CreateLogisticFinancePayorderRequest): Promise<CreateLogisticFinancePayorderResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.createLogisticFinancePayorderEx(request, headers, runtime);
  }

  /**
   * Description: 物流金融平台支付订单创建
   * Summary: 物流金融平台支付订单创建
   */
  async createLogisticFinancePayorderEx(request: CreateLogisticFinancePayorderRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CreateLogisticFinancePayorderResponse> {
    Util.validateModel(request);
    return $tea.cast<CreateLogisticFinancePayorderResponse>(await this.doRequest("1.0", "baas.logistic.finance.payorder.create", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CreateLogisticFinancePayorderResponse({}));
  }

  /**
   * Description: 物流金融平台订单状态查询
   * Summary: 物流金融平台订单状态查询
   */
  async queryLogisticFinanceOrder(request: QueryLogisticFinanceOrderRequest): Promise<QueryLogisticFinanceOrderResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryLogisticFinanceOrderEx(request, headers, runtime);
  }

  /**
   * Description: 物流金融平台订单状态查询
   * Summary: 物流金融平台订单状态查询
   */
  async queryLogisticFinanceOrderEx(request: QueryLogisticFinanceOrderRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryLogisticFinanceOrderResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryLogisticFinanceOrderResponse>(await this.doRequest("1.0", "baas.logistic.finance.order.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryLogisticFinanceOrderResponse({}));
  }

  /**
   * Description: 物流金融平台发票订单创建
   * Summary: 物流金融平台发票订单创建
   */
  async createLogisticFinanceBillorder(request: CreateLogisticFinanceBillorderRequest): Promise<CreateLogisticFinanceBillorderResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.createLogisticFinanceBillorderEx(request, headers, runtime);
  }

  /**
   * Description: 物流金融平台发票订单创建
   * Summary: 物流金融平台发票订单创建
   */
  async createLogisticFinanceBillorderEx(request: CreateLogisticFinanceBillorderRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CreateLogisticFinanceBillorderResponse> {
    Util.validateModel(request);
    return $tea.cast<CreateLogisticFinanceBillorderResponse>(await this.doRequest("1.0", "baas.logistic.finance.billorder.create", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CreateLogisticFinanceBillorderResponse({}));
  }

  /**
   * Description: 物流金融平台运单轨迹信息导入
   * Summary: 物流金融平台运单轨迹信息导入
   */
  async importLogisticFinanceLocation(request: ImportLogisticFinanceLocationRequest): Promise<ImportLogisticFinanceLocationResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.importLogisticFinanceLocationEx(request, headers, runtime);
  }

  /**
   * Description: 物流金融平台运单轨迹信息导入
   * Summary: 物流金融平台运单轨迹信息导入
   */
  async importLogisticFinanceLocationEx(request: ImportLogisticFinanceLocationRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<ImportLogisticFinanceLocationResponse> {
    Util.validateModel(request);
    return $tea.cast<ImportLogisticFinanceLocationResponse>(await this.doRequest("1.0", "baas.logistic.finance.location.import", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new ImportLogisticFinanceLocationResponse({}));
  }

  /**
   * Description: 物流金融平台创建货主DIS
   * Summary: 物流金融平台创建货主DIS
   */
  async createLogisticFinanceConsignor(request: CreateLogisticFinanceConsignorRequest): Promise<CreateLogisticFinanceConsignorResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.createLogisticFinanceConsignorEx(request, headers, runtime);
  }

  /**
   * Description: 物流金融平台创建货主DIS
   * Summary: 物流金融平台创建货主DIS
   */
  async createLogisticFinanceConsignorEx(request: CreateLogisticFinanceConsignorRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CreateLogisticFinanceConsignorResponse> {
    Util.validateModel(request);
    return $tea.cast<CreateLogisticFinanceConsignorResponse>(await this.doRequest("1.0", "baas.logistic.finance.consignor.create", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CreateLogisticFinanceConsignorResponse({}));
  }

  /**
   * Description: 物流金融平台创建无车承运平台DIS
   * Summary: 物流金融平台创建无车承运平台DIS
   */
  async createLogisticFinancePlatform(request: CreateLogisticFinancePlatformRequest): Promise<CreateLogisticFinancePlatformResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.createLogisticFinancePlatformEx(request, headers, runtime);
  }

  /**
   * Description: 物流金融平台创建无车承运平台DIS
   * Summary: 物流金融平台创建无车承运平台DIS
   */
  async createLogisticFinancePlatformEx(request: CreateLogisticFinancePlatformRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CreateLogisticFinancePlatformResponse> {
    Util.validateModel(request);
    return $tea.cast<CreateLogisticFinancePlatformResponse>(await this.doRequest("1.0", "baas.logistic.finance.platform.create", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CreateLogisticFinancePlatformResponse({}));
  }

  /**
   * Description: 物流金融平台代理创建无车承运平台DIS
   * Summary: 物流金融平台代理创建无车承运平台DIS
   */
  async createLogistFinanceAgentplatform(request: CreateLogistFinanceAgentplatformRequest): Promise<CreateLogistFinanceAgentplatformResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.createLogistFinanceAgentplatformEx(request, headers, runtime);
  }

  /**
   * Description: 物流金融平台代理创建无车承运平台DIS
   * Summary: 物流金融平台代理创建无车承运平台DIS
   */
  async createLogistFinanceAgentplatformEx(request: CreateLogistFinanceAgentplatformRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CreateLogistFinanceAgentplatformResponse> {
    Util.validateModel(request);
    return $tea.cast<CreateLogistFinanceAgentplatformResponse>(await this.doRequest("1.0", "baas.logist.finance.agentplatform.create", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CreateLogistFinanceAgentplatformResponse({}));
  }

  /**
   * Description: 物流金融平台创建司机DIS
   * Summary: 物流金融平台创建司机DIS
   */
  async createLogisticFinanceDriver(request: CreateLogisticFinanceDriverRequest): Promise<CreateLogisticFinanceDriverResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.createLogisticFinanceDriverEx(request, headers, runtime);
  }

  /**
   * Description: 物流金融平台创建司机DIS
   * Summary: 物流金融平台创建司机DIS
   */
  async createLogisticFinanceDriverEx(request: CreateLogisticFinanceDriverRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CreateLogisticFinanceDriverResponse> {
    Util.validateModel(request);
    return $tea.cast<CreateLogisticFinanceDriverResponse>(await this.doRequest("1.0", "baas.logistic.finance.driver.create", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CreateLogisticFinanceDriverResponse({}));
  }

  /**
   * Description: 物流金融平台创建货源订单
   * Summary: 物流金融平台创建货源订单
   */
  async createLogisticFinanceCargoorder(request: CreateLogisticFinanceCargoorderRequest): Promise<CreateLogisticFinanceCargoorderResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.createLogisticFinanceCargoorderEx(request, headers, runtime);
  }

  /**
   * Description: 物流金融平台创建货源订单
   * Summary: 物流金融平台创建货源订单
   */
  async createLogisticFinanceCargoorderEx(request: CreateLogisticFinanceCargoorderRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CreateLogisticFinanceCargoorderResponse> {
    Util.validateModel(request);
    return $tea.cast<CreateLogisticFinanceCargoorderResponse>(await this.doRequest("1.0", "baas.logistic.finance.cargoorder.create", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CreateLogisticFinanceCargoorderResponse({}));
  }

  /**
   * Description: 物流金融平台货源支付订单创建
   * Summary: 物流金融平台货源支付订单创建
   */
  async createLogisticFinanceCargopayorder(request: CreateLogisticFinanceCargopayorderRequest): Promise<CreateLogisticFinanceCargopayorderResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.createLogisticFinanceCargopayorderEx(request, headers, runtime);
  }

  /**
   * Description: 物流金融平台货源支付订单创建
   * Summary: 物流金融平台货源支付订单创建
   */
  async createLogisticFinanceCargopayorderEx(request: CreateLogisticFinanceCargopayorderRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CreateLogisticFinanceCargopayorderResponse> {
    Util.validateModel(request);
    return $tea.cast<CreateLogisticFinanceCargopayorderResponse>(await this.doRequest("1.0", "baas.logistic.finance.cargopayorder.create", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CreateLogisticFinanceCargopayorderResponse({}));
  }

  /**
   * Description: 创建蚂蚁区块链实例
   * Summary: 创建蚂蚁区块链实例
   */
  async createOcpProduct(request: CreateOcpProductRequest): Promise<CreateOcpProductResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.createOcpProductEx(request, headers, runtime);
  }

  /**
   * Description: 创建蚂蚁区块链实例
   * Summary: 创建蚂蚁区块链实例
   */
  async createOcpProductEx(request: CreateOcpProductRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CreateOcpProductResponse> {
    Util.validateModel(request);
    return $tea.cast<CreateOcpProductResponse>(await this.doRequest("1.0", "baas.ocp.product.create", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CreateOcpProductResponse({}));
  }

  /**
   * Description: 变配，对已有的实例进行规格变更操作。
   * Summary: 对已有的实例进行规格变更操作
   */
  async updateOcpProduct(request: UpdateOcpProductRequest): Promise<UpdateOcpProductResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.updateOcpProductEx(request, headers, runtime);
  }

  /**
   * Description: 变配，对已有的实例进行规格变更操作。
   * Summary: 对已有的实例进行规格变更操作
   */
  async updateOcpProductEx(request: UpdateOcpProductRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<UpdateOcpProductResponse> {
    Util.validateModel(request);
    return $tea.cast<UpdateOcpProductResponse>(await this.doRequest("1.0", "baas.ocp.product.update", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new UpdateOcpProductResponse({}));
  }

  /**
   * Description: 用户主动删除实例或欠费逾期平台按照约定进行强制删除。
   * Summary: 释放资源
   */
  async closeOcpProduct(request: CloseOcpProductRequest): Promise<CloseOcpProductResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.closeOcpProductEx(request, headers, runtime);
  }

  /**
   * Description: 用户主动删除实例或欠费逾期平台按照约定进行强制删除。
   * Summary: 释放资源
   */
  async closeOcpProductEx(request: CloseOcpProductRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CloseOcpProductResponse> {
    Util.validateModel(request);
    return $tea.cast<CloseOcpProductResponse>(await this.doRequest("1.0", "baas.ocp.product.close", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CloseOcpProductResponse({}));
  }

  /**
   * Description: 用户对欠费或者到期实例进行续费操作后，平台会通知产品解除对用户指定实例的操作限制。即恢复正常服务能力。
   * Summary: 恢复资源
   */
  async enableOcpProduct(request: EnableOcpProductRequest): Promise<EnableOcpProductResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.enableOcpProductEx(request, headers, runtime);
  }

  /**
   * Description: 用户对欠费或者到期实例进行续费操作后，平台会通知产品解除对用户指定实例的操作限制。即恢复正常服务能力。
   * Summary: 恢复资源
   */
  async enableOcpProductEx(request: EnableOcpProductRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<EnableOcpProductResponse> {
    Util.validateModel(request);
    return $tea.cast<EnableOcpProductResponse>(await this.doRequest("1.0", "baas.ocp.product.enable", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new EnableOcpProductResponse({}));
  }

  /**
   * Description: 用户资源到期或欠费情况下会对资源先进行停服操作，用于限制用户使用但不能删除用户数据！不同的产品可以根据自身的功能进行不同的限制。
   * Summary: 停止服务
   */
  async stopOcpProduct(request: StopOcpProductRequest): Promise<StopOcpProductResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.stopOcpProductEx(request, headers, runtime);
  }

  /**
   * Description: 用户资源到期或欠费情况下会对资源先进行停服操作，用于限制用户使用但不能删除用户数据！不同的产品可以根据自身的功能进行不同的限制。
   * Summary: 停止服务
   */
  async stopOcpProductEx(request: StopOcpProductRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<StopOcpProductResponse> {
    Util.validateModel(request);
    return $tea.cast<StopOcpProductResponse>(await this.doRequest("1.0", "baas.ocp.product.stop", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new StopOcpProductResponse({}));
  }

  /**
   * Description: 售卖页面加载产品个性化内容，比如：类目、库存等，用于辅助用户选择。用户下单后参数会下发给产品方
   * Summary: 加载售卖页自定义参数
   */
  async initOcpProduct(request: InitOcpProductRequest): Promise<InitOcpProductResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.initOcpProductEx(request, headers, runtime);
  }

  /**
   * Description: 售卖页面加载产品个性化内容，比如：类目、库存等，用于辅助用户选择。用户下单后参数会下发给产品方
   * Summary: 加载售卖页自定义参数
   */
  async initOcpProductEx(request: InitOcpProductRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<InitOcpProductResponse> {
    Util.validateModel(request);
    return $tea.cast<InitOcpProductResponse>(await this.doRequest("1.0", "baas.ocp.product.init", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new InitOcpProductResponse({}));
  }

  /**
   * Description: 查询商业化产品的状态
   * Summary: 查询商业化产品的状态
   */
  async queryOcpProduct(request: QueryOcpProductRequest): Promise<QueryOcpProductResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryOcpProductEx(request, headers, runtime);
  }

  /**
   * Description: 查询商业化产品的状态
   * Summary: 查询商业化产品的状态
   */
  async queryOcpProductEx(request: QueryOcpProductRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryOcpProductResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryOcpProductResponse>(await this.doRequest("1.0", "baas.ocp.product.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryOcpProductResponse({}));
  }

  /**
   * Description: 开通商业化服务
   * Summary: 开通商业化服务
   */
  async openOcpProduct(request: OpenOcpProductRequest): Promise<OpenOcpProductResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.openOcpProductEx(request, headers, runtime);
  }

  /**
   * Description: 开通商业化服务
   * Summary: 开通商业化服务
   */
  async openOcpProductEx(request: OpenOcpProductRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<OpenOcpProductResponse> {
    Util.validateModel(request);
    return $tea.cast<OpenOcpProductResponse>(await this.doRequest("1.0", "baas.ocp.product.open", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new OpenOcpProductResponse({}));
  }

  /**
   * Description: 创建商业化产品实例
   * Summary: 创建商业化产品实例
   */
  async createOcpProducts(request: CreateOcpProductsRequest): Promise<CreateOcpProductsResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.createOcpProductsEx(request, headers, runtime);
  }

  /**
   * Description: 创建商业化产品实例
   * Summary: 创建商业化产品实例
   */
  async createOcpProductsEx(request: CreateOcpProductsRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CreateOcpProductsResponse> {
    Util.validateModel(request);
    return $tea.cast<CreateOcpProductsResponse>(await this.doRequest("1.0", "baas.ocp.products.create", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CreateOcpProductsResponse({}));
  }

  /**
   * Description: 回调接口，产品侧主动通知ocp，产品状态变更。
   * Summary: 主动通知ocp，产品状态变更
   */
  async callbackOcpProduct(request: CallbackOcpProductRequest): Promise<CallbackOcpProductResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.callbackOcpProductEx(request, headers, runtime);
  }

  /**
   * Description: 回调接口，产品侧主动通知ocp，产品状态变更。
   * Summary: 主动通知ocp，产品状态变更
   */
  async callbackOcpProductEx(request: CallbackOcpProductRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CallbackOcpProductResponse> {
    Util.validateModel(request);
    return $tea.cast<CallbackOcpProductResponse>(await this.doRequest("1.0", "baas.ocp.product.callback", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CallbackOcpProductResponse({}));
  }

  /**
   * Description: 检查任务状态
   * Summary: 检查任务状态
   */
  async checkOcpTask(request: CheckOcpTaskRequest): Promise<CheckOcpTaskResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.checkOcpTaskEx(request, headers, runtime);
  }

  /**
   * Description: 检查任务状态
   * Summary: 检查任务状态
   */
  async checkOcpTaskEx(request: CheckOcpTaskRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CheckOcpTaskResponse> {
    Util.validateModel(request);
    return $tea.cast<CheckOcpTaskResponse>(await this.doRequest("1.0", "baas.ocp.task.check", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CheckOcpTaskResponse({}));
  }

  /**
   * Description: 商业化产品相关任务下发
   * Summary: 任务下发
   */
  async execOcpTask(request: ExecOcpTaskRequest): Promise<ExecOcpTaskResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.execOcpTaskEx(request, headers, runtime);
  }

  /**
   * Description: 商业化产品相关任务下发
   * Summary: 任务下发
   */
  async execOcpTaskEx(request: ExecOcpTaskRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<ExecOcpTaskResponse> {
    Util.validateModel(request);
    return $tea.cast<ExecOcpTaskResponse>(await this.doRequest("1.0", "baas.ocp.task.exec", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new ExecOcpTaskResponse({}));
  }

  /**
   * Description: 区块链实例创建（内部）
   * Summary: 区块链创建（内部）
   */
  async createBlockchainInstanceInner(request: CreateBlockchainInstanceInnerRequest): Promise<CreateBlockchainInstanceInnerResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.createBlockchainInstanceInnerEx(request, headers, runtime);
  }

  /**
   * Description: 区块链实例创建（内部）
   * Summary: 区块链创建（内部）
   */
  async createBlockchainInstanceInnerEx(request: CreateBlockchainInstanceInnerRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CreateBlockchainInstanceInnerResponse> {
    Util.validateModel(request);
    return $tea.cast<CreateBlockchainInstanceInnerResponse>(await this.doRequest("1.0", "baas.blockchain.instance.inner.create", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CreateBlockchainInstanceInnerResponse({}));
  }

  /**
   * Description: 蚂蚁区块链通过实例查询链id
   * Summary: 蚂蚁区块链通过实例查询链id
   */
  async queryBlockchainInstanceBizid(request: QueryBlockchainInstanceBizidRequest): Promise<QueryBlockchainInstanceBizidResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryBlockchainInstanceBizidEx(request, headers, runtime);
  }

  /**
   * Description: 蚂蚁区块链通过实例查询链id
   * Summary: 蚂蚁区块链通过实例查询链id
   */
  async queryBlockchainInstanceBizidEx(request: QueryBlockchainInstanceBizidRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryBlockchainInstanceBizidResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryBlockchainInstanceBizidResponse>(await this.doRequest("1.0", "baas.blockchain.instance.bizid.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryBlockchainInstanceBizidResponse({}));
  }

  /**
   * Description: 创建联盟接口
   * Summary: 创建联盟接口
   */
  async createApiConsortium(request: CreateApiConsortiumRequest): Promise<CreateApiConsortiumResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.createApiConsortiumEx(request, headers, runtime);
  }

  /**
   * Description: 创建联盟接口
   * Summary: 创建联盟接口
   */
  async createApiConsortiumEx(request: CreateApiConsortiumRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CreateApiConsortiumResponse> {
    Util.validateModel(request);
    return $tea.cast<CreateApiConsortiumResponse>(await this.doRequest("1.0", "baas.api.consortium.create", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CreateApiConsortiumResponse({}));
  }

  /**
   * Description: 查询链的小程序浏览器授权状态
   * Summary: 查询链的小程序浏览器授权状态
   */
  async queryApiMiniappbrowserAuthtype(request: QueryApiMiniappbrowserAuthtypeRequest): Promise<QueryApiMiniappbrowserAuthtypeResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryApiMiniappbrowserAuthtypeEx(request, headers, runtime);
  }

  /**
   * Description: 查询链的小程序浏览器授权状态
   * Summary: 查询链的小程序浏览器授权状态
   */
  async queryApiMiniappbrowserAuthtypeEx(request: QueryApiMiniappbrowserAuthtypeRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryApiMiniappbrowserAuthtypeResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryApiMiniappbrowserAuthtypeResponse>(await this.doRequest("1.0", "baas.api.miniappbrowser.authtype.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryApiMiniappbrowserAuthtypeResponse({}));
  }

  /**
   * Description: 查询某链当前块高
   * Summary: 查询某链当前块高
   */
  async queryStatisticsPortHeight(request: QueryStatisticsPortHeightRequest): Promise<QueryStatisticsPortHeightResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryStatisticsPortHeightEx(request, headers, runtime);
  }

  /**
   * Description: 查询某链当前块高
   * Summary: 查询某链当前块高
   */
  async queryStatisticsPortHeightEx(request: QueryStatisticsPortHeightRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryStatisticsPortHeightResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryStatisticsPortHeightResponse>(await this.doRequest("1.0", "baas.statistics.port.height.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryStatisticsPortHeightResponse({}));
  }

  /**
   * Description: 查询授权的链id列表
   * Summary: 查询授权的链id列表
   */
  async queryStatisticPortBizid(request: QueryStatisticPortBizidRequest): Promise<QueryStatisticPortBizidResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryStatisticPortBizidEx(request, headers, runtime);
  }

  /**
   * Description: 查询授权的链id列表
   * Summary: 查询授权的链id列表
   */
  async queryStatisticPortBizidEx(request: QueryStatisticPortBizidRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryStatisticPortBizidResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryStatisticPortBizidResponse>(await this.doRequest("1.0", "baas.statistic.port.bizid.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryStatisticPortBizidResponse({}));
  }

  /**
   * Description: 添加存量采集任务
   * Summary: 添加存量采集任务
   */
  async addStatisticsPortTask(request: AddStatisticsPortTaskRequest): Promise<AddStatisticsPortTaskResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.addStatisticsPortTaskEx(request, headers, runtime);
  }

  /**
   * Description: 添加存量采集任务
   * Summary: 添加存量采集任务
   */
  async addStatisticsPortTaskEx(request: AddStatisticsPortTaskRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<AddStatisticsPortTaskResponse> {
    Util.validateModel(request);
    return $tea.cast<AddStatisticsPortTaskResponse>(await this.doRequest("1.0", "baas.statistics.port.task.add", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new AddStatisticsPortTaskResponse({}));
  }

  /**
   * Description: 查询交易列表
   * Summary: 查询交易列表
   */
  async queryApiDwhTransaction(request: QueryApiDwhTransactionRequest): Promise<QueryApiDwhTransactionResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryApiDwhTransactionEx(request, headers, runtime);
  }

  /**
   * Description: 查询交易列表
   * Summary: 查询交易列表
   */
  async queryApiDwhTransactionEx(request: QueryApiDwhTransactionRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryApiDwhTransactionResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryApiDwhTransactionResponse>(await this.doRequest("1.0", "baas.api.dwh.transaction.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryApiDwhTransactionResponse({}));
  }

  /**
   * Description: 根据自定义条件查询用户列表
   * Summary: 查询账户列表
   */
  async queryApiDwhAccount(request: QueryApiDwhAccountRequest): Promise<QueryApiDwhAccountResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryApiDwhAccountEx(request, headers, runtime);
  }

  /**
   * Description: 根据自定义条件查询用户列表
   * Summary: 查询账户列表
   */
  async queryApiDwhAccountEx(request: QueryApiDwhAccountRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryApiDwhAccountResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryApiDwhAccountResponse>(await this.doRequest("1.0", "baas.api.dwh.account.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryApiDwhAccountResponse({}));
  }

  /**
   * Description: 查询合约接口
   * Summary: 查询合约
   */
  async queryApiDwhContract(request: QueryApiDwhContractRequest): Promise<QueryApiDwhContractResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryApiDwhContractEx(request, headers, runtime);
  }

  /**
   * Description: 查询合约接口
   * Summary: 查询合约
   */
  async queryApiDwhContractEx(request: QueryApiDwhContractRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryApiDwhContractResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryApiDwhContractResponse>(await this.doRequest("1.0", "baas.api.dwh.contract.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryApiDwhContractResponse({}));
  }

  /**
   * Description: 单独查询交易
   * Summary: 查询链上交易
   */
  async queryApiDwhbTransaction(request: QueryApiDwhbTransactionRequest): Promise<QueryApiDwhbTransactionResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryApiDwhbTransactionEx(request, headers, runtime);
  }

  /**
   * Description: 单独查询交易
   * Summary: 查询链上交易
   */
  async queryApiDwhbTransactionEx(request: QueryApiDwhbTransactionRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryApiDwhbTransactionResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryApiDwhbTransactionResponse>(await this.doRequest("1.0", "baas.api.dwhb.transaction.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryApiDwhbTransactionResponse({}));
  }

  /**
   * Description: 删除合约
   * Summary: 删除合约
   */
  async deleteCaasContractService(request: DeleteCaasContractServiceRequest): Promise<DeleteCaasContractServiceResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.deleteCaasContractServiceEx(request, headers, runtime);
  }

  /**
   * Description: 删除合约
   * Summary: 删除合约
   */
  async deleteCaasContractServiceEx(request: DeleteCaasContractServiceRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<DeleteCaasContractServiceResponse> {
    Util.validateModel(request);
    return $tea.cast<DeleteCaasContractServiceResponse>(await this.doRequest("1.0", "baas.caas.contract.service.delete", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new DeleteCaasContractServiceResponse({}));
  }

  /**
   * Description: 新建合约服务
   * Summary: 新建合约服务
   */
  async createCaasContractService(request: CreateCaasContractServiceRequest): Promise<CreateCaasContractServiceResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.createCaasContractServiceEx(request, headers, runtime);
  }

  /**
   * Description: 新建合约服务
   * Summary: 新建合约服务
   */
  async createCaasContractServiceEx(request: CreateCaasContractServiceRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CreateCaasContractServiceResponse> {
    Util.validateModel(request);
    return $tea.cast<CreateCaasContractServiceResponse>(await this.doRequest("1.0", "baas.caas.contract.service.create", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CreateCaasContractServiceResponse({}));
  }

  /**
   * Description: 合约列表查询
   * Summary: 合约列表查询
   */
  async pagequeryCaasContractService(request: PagequeryCaasContractServiceRequest): Promise<PagequeryCaasContractServiceResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.pagequeryCaasContractServiceEx(request, headers, runtime);
  }

  /**
   * Description: 合约列表查询
   * Summary: 合约列表查询
   */
  async pagequeryCaasContractServiceEx(request: PagequeryCaasContractServiceRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<PagequeryCaasContractServiceResponse> {
    Util.validateModel(request);
    return $tea.cast<PagequeryCaasContractServiceResponse>(await this.doRequest("1.0", "baas.caas.contract.service.pagequery", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new PagequeryCaasContractServiceResponse({}));
  }

  /**
   * Description: 查询创建实例进度
   * Summary: 查询创建实例进度
   */
  async queryCaasContractService(request: QueryCaasContractServiceRequest): Promise<QueryCaasContractServiceResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryCaasContractServiceEx(request, headers, runtime);
  }

  /**
   * Description: 查询创建实例进度
   * Summary: 查询创建实例进度
   */
  async queryCaasContractServiceEx(request: QueryCaasContractServiceRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryCaasContractServiceResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryCaasContractServiceResponse>(await this.doRequest("1.0", "baas.caas.contract.service.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryCaasContractServiceResponse({}));
  }

  /**
   * Description: 自动化部署合约服务
   * Summary: 自动化部署合约服务
   */
  async deployCaasContractService(request: DeployCaasContractServiceRequest): Promise<DeployCaasContractServiceResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.deployCaasContractServiceEx(request, headers, runtime);
  }

  /**
   * Description: 自动化部署合约服务
   * Summary: 自动化部署合约服务
   */
  async deployCaasContractServiceEx(request: DeployCaasContractServiceRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<DeployCaasContractServiceResponse> {
    Util.validateModel(request);
    return $tea.cast<DeployCaasContractServiceResponse>(await this.doRequest("1.0", "baas.caas.contract.service.deploy", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new DeployCaasContractServiceResponse({}));
  }

  /**
   * Description: 查询合约类型列表
   * Summary: 查询合约类型列表
   */
  async listCaasContractService(request: ListCaasContractServiceRequest): Promise<ListCaasContractServiceResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.listCaasContractServiceEx(request, headers, runtime);
  }

  /**
   * Description: 查询合约类型列表
   * Summary: 查询合约类型列表
   */
  async listCaasContractServiceEx(request: ListCaasContractServiceRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<ListCaasContractServiceResponse> {
    Util.validateModel(request);
    return $tea.cast<ListCaasContractServiceResponse>(await this.doRequest("1.0", "baas.caas.contract.service.list", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new ListCaasContractServiceResponse({}));
  }

  /**
   * Description: 合约详情
   * Summary: 合约详情
   */
  async detailCaasContractService(request: DetailCaasContractServiceRequest): Promise<DetailCaasContractServiceResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.detailCaasContractServiceEx(request, headers, runtime);
  }

  /**
   * Description: 合约详情
   * Summary: 合约详情
   */
  async detailCaasContractServiceEx(request: DetailCaasContractServiceRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<DetailCaasContractServiceResponse> {
    Util.validateModel(request);
    return $tea.cast<DetailCaasContractServiceResponse>(await this.doRequest("1.0", "baas.caas.contract.service.detail", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new DetailCaasContractServiceResponse({}));
  }

  /**
   * Description: 新建应用
   * Summary: 新建应用
   */
  async createCaasApplicationManage(request: CreateCaasApplicationManageRequest): Promise<CreateCaasApplicationManageResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.createCaasApplicationManageEx(request, headers, runtime);
  }

  /**
   * Description: 新建应用
   * Summary: 新建应用
   */
  async createCaasApplicationManageEx(request: CreateCaasApplicationManageRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CreateCaasApplicationManageResponse> {
    Util.validateModel(request);
    return $tea.cast<CreateCaasApplicationManageResponse>(await this.doRequest("1.0", "baas.caas.application.manage.create", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CreateCaasApplicationManageResponse({}));
  }

  /**
   * Description: 应用列表查询
   * Summary: 应用列表查询
   */
  async pagequeryCaasApplicationManage(request: PagequeryCaasApplicationManageRequest): Promise<PagequeryCaasApplicationManageResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.pagequeryCaasApplicationManageEx(request, headers, runtime);
  }

  /**
   * Description: 应用列表查询
   * Summary: 应用列表查询
   */
  async pagequeryCaasApplicationManageEx(request: PagequeryCaasApplicationManageRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<PagequeryCaasApplicationManageResponse> {
    Util.validateModel(request);
    return $tea.cast<PagequeryCaasApplicationManageResponse>(await this.doRequest("1.0", "baas.caas.application.manage.pagequery", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new PagequeryCaasApplicationManageResponse({}));
  }

  /**
   * Description: 查询合约绑定关系
   * Summary: 查询合约绑定关系
   */
  async queryCaasApplicationManage(request: QueryCaasApplicationManageRequest): Promise<QueryCaasApplicationManageResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryCaasApplicationManageEx(request, headers, runtime);
  }

  /**
   * Description: 查询合约绑定关系
   * Summary: 查询合约绑定关系
   */
  async queryCaasApplicationManageEx(request: QueryCaasApplicationManageRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryCaasApplicationManageResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryCaasApplicationManageResponse>(await this.doRequest("1.0", "baas.caas.application.manage.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryCaasApplicationManageResponse({}));
  }

  /**
   * Description: 解除授权
   * Summary: 解除授权
   */
  async unbindCaasApplicationManage(request: UnbindCaasApplicationManageRequest): Promise<UnbindCaasApplicationManageResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.unbindCaasApplicationManageEx(request, headers, runtime);
  }

  /**
   * Description: 解除授权
   * Summary: 解除授权
   */
  async unbindCaasApplicationManageEx(request: UnbindCaasApplicationManageRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<UnbindCaasApplicationManageResponse> {
    Util.validateModel(request);
    return $tea.cast<UnbindCaasApplicationManageResponse>(await this.doRequest("1.0", "baas.caas.application.manage.unbind", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new UnbindCaasApplicationManageResponse({}));
  }

  /**
   * Description: 绑定合约
   * Summary: 绑定合约
   */
  async bindCaasApplicationManage(request: BindCaasApplicationManageRequest): Promise<BindCaasApplicationManageResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.bindCaasApplicationManageEx(request, headers, runtime);
  }

  /**
   * Description: 绑定合约
   * Summary: 绑定合约
   */
  async bindCaasApplicationManageEx(request: BindCaasApplicationManageRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<BindCaasApplicationManageResponse> {
    Util.validateModel(request);
    return $tea.cast<BindCaasApplicationManageResponse>(await this.doRequest("1.0", "baas.caas.application.manage.bind", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new BindCaasApplicationManageResponse({}));
  }

  /**
   * Description: 查看sk
   * Summary: 查看sk
   */
  async getCaasApplicationManage(request: GetCaasApplicationManageRequest): Promise<GetCaasApplicationManageResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.getCaasApplicationManageEx(request, headers, runtime);
  }

  /**
   * Description: 查看sk
   * Summary: 查看sk
   */
  async getCaasApplicationManageEx(request: GetCaasApplicationManageRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<GetCaasApplicationManageResponse> {
    Util.validateModel(request);
    return $tea.cast<GetCaasApplicationManageResponse>(await this.doRequest("1.0", "baas.caas.application.manage.get", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new GetCaasApplicationManageResponse({}));
  }

  /**
   * Description: 智能合约市场列表查询
   * Summary: 智能合约市场列表查询
   */
  async pagequeryCaasContractMarket(request: PagequeryCaasContractMarketRequest): Promise<PagequeryCaasContractMarketResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.pagequeryCaasContractMarketEx(request, headers, runtime);
  }

  /**
   * Description: 智能合约市场列表查询
   * Summary: 智能合约市场列表查询
   */
  async pagequeryCaasContractMarketEx(request: PagequeryCaasContractMarketRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<PagequeryCaasContractMarketResponse> {
    Util.validateModel(request);
    return $tea.cast<PagequeryCaasContractMarketResponse>(await this.doRequest("1.0", "baas.caas.contract.market.pagequery", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new PagequeryCaasContractMarketResponse({}));
  }

  /**
   * Description: 合约部署记录
   * Summary: 合约部署记录
   */
  async createContractRecord(request: CreateContractRecordRequest): Promise<CreateContractRecordResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.createContractRecordEx(request, headers, runtime);
  }

  /**
   * Description: 合约部署记录
   * Summary: 合约部署记录
   */
  async createContractRecordEx(request: CreateContractRecordRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CreateContractRecordResponse> {
    Util.validateModel(request);
    return $tea.cast<CreateContractRecordResponse>(await this.doRequest("1.0", "baas.contract.record.create", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CreateContractRecordResponse({}));
  }

  /**
   * Description: 部署记录详情
   * Summary: 部署记录详情
   */
  async getContractRecord(request: GetContractRecordRequest): Promise<GetContractRecordResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.getContractRecordEx(request, headers, runtime);
  }

  /**
   * Description: 部署记录详情
   * Summary: 部署记录详情
   */
  async getContractRecordEx(request: GetContractRecordRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<GetContractRecordResponse> {
    Util.validateModel(request);
    return $tea.cast<GetContractRecordResponse>(await this.doRequest("1.0", "baas.contract.record.get", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new GetContractRecordResponse({}));
  }

  /**
   * Description: 合约升级更新
   * Summary: 合约升级更新
   */
  async updateContractRecord(request: UpdateContractRecordRequest): Promise<UpdateContractRecordResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.updateContractRecordEx(request, headers, runtime);
  }

  /**
   * Description: 合约升级更新
   * Summary: 合约升级更新
   */
  async updateContractRecordEx(request: UpdateContractRecordRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<UpdateContractRecordResponse> {
    Util.validateModel(request);
    return $tea.cast<UpdateContractRecordResponse>(await this.doRequest("1.0", "baas.contract.record.update", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new UpdateContractRecordResponse({}));
  }

  /**
   * Description: 发布合约服务
   * Summary: 发布合约服务
   */
  async onlineContractRecord(request: OnlineContractRecordRequest): Promise<OnlineContractRecordResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.onlineContractRecordEx(request, headers, runtime);
  }

  /**
   * Description: 发布合约服务
   * Summary: 发布合约服务
   */
  async onlineContractRecordEx(request: OnlineContractRecordRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<OnlineContractRecordResponse> {
    Util.validateModel(request);
    return $tea.cast<OnlineContractRecordResponse>(await this.doRequest("1.0", "baas.contract.record.online", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new OnlineContractRecordResponse({}));
  }

  /**
   * Description: 合约服务下线
   * Summary: 合约服务下线
   */
  async offlineContractRecord(request: OfflineContractRecordRequest): Promise<OfflineContractRecordResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.offlineContractRecordEx(request, headers, runtime);
  }

  /**
   * Description: 合约服务下线
   * Summary: 合约服务下线
   */
  async offlineContractRecordEx(request: OfflineContractRecordRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<OfflineContractRecordResponse> {
    Util.validateModel(request);
    return $tea.cast<OfflineContractRecordResponse>(await this.doRequest("1.0", "baas.contract.record.offline", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new OfflineContractRecordResponse({}));
  }

  /**
   * Description: 查询合约部署记录
   * Summary: 查询合约部署记录
   */
  async queryContractRecord(request: QueryContractRecordRequest): Promise<QueryContractRecordResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryContractRecordEx(request, headers, runtime);
  }

  /**
   * Description: 查询合约部署记录
   * Summary: 查询合约部署记录
   */
  async queryContractRecordEx(request: QueryContractRecordRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryContractRecordResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryContractRecordResponse>(await this.doRequest("1.0", "baas.contract.record.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryContractRecordResponse({}));
  }

  /**
   * Description: 合约代理调用
   * Summary: 合约代理调用
   */
  async execContractDelegate(request: ExecContractDelegateRequest): Promise<ExecContractDelegateResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.execContractDelegateEx(request, headers, runtime);
  }

  /**
   * Description: 合约代理调用
   * Summary: 合约代理调用
   */
  async execContractDelegateEx(request: ExecContractDelegateRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<ExecContractDelegateResponse> {
    Util.validateModel(request);
    return $tea.cast<ExecContractDelegateResponse>(await this.doRequest("1.0", "baas.contract.delegate.exec", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new ExecContractDelegateResponse({}));
  }

  /**
   * Description: 调用合约服务
   * Summary: 调用合约服务
   */
  async execContractService(request: ExecContractServiceRequest): Promise<ExecContractServiceResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.execContractServiceEx(request, headers, runtime);
  }

  /**
   * Description: 调用合约服务
   * Summary: 调用合约服务
   */
  async execContractServiceEx(request: ExecContractServiceRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<ExecContractServiceResponse> {
    Util.validateModel(request);
    return $tea.cast<ExecContractServiceResponse>(await this.doRequest("1.0", "baas.contract.service.exec", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new ExecContractServiceResponse({}));
  }

  /**
   * Description: 获取当前租户具有访问权限的合约链配置列表，方便在client（IDE插件、SDK等）访问合约链
   * Summary: 获取合约链配置
   */
  async getContractConfigChain(request: GetContractConfigChainRequest): Promise<GetContractConfigChainResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.getContractConfigChainEx(request, headers, runtime);
  }

  /**
   * Description: 获取当前租户具有访问权限的合约链配置列表，方便在client（IDE插件、SDK等）访问合约链
   * Summary: 获取合约链配置
   */
  async getContractConfigChainEx(request: GetContractConfigChainRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<GetContractConfigChainResponse> {
    Util.validateModel(request);
    return $tea.cast<GetContractConfigChainResponse>(await this.doRequest("1.0", "baas.contract.config.chain.get", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new GetContractConfigChainResponse({}));
  }

  /**
   * Description: 申请获取一个可以上传文件到oss的url，此url可用时间默认为30秒
   * Summary: 获取oss的可用url上传文件
   */
  async getContractAbiUrl(request: GetContractAbiUrlRequest): Promise<GetContractAbiUrlResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.getContractAbiUrlEx(request, headers, runtime);
  }

  /**
   * Description: 申请获取一个可以上传文件到oss的url，此url可用时间默认为30秒
   * Summary: 获取oss的可用url上传文件
   */
  async getContractAbiUrlEx(request: GetContractAbiUrlRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<GetContractAbiUrlResponse> {
    Util.validateModel(request);
    return $tea.cast<GetContractAbiUrlResponse>(await this.doRequest("1.0", "baas.contract.abi.url.get", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new GetContractAbiUrlResponse({}));
  }

  /**
   * Description: 申请获取一个可以上传bytecode文件到oss的url，此url可用时间默认为30秒
   * Summary: 获取oss的可用url上传文件
   */
  async getContractBytecodeUrl(request: GetContractBytecodeUrlRequest): Promise<GetContractBytecodeUrlResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.getContractBytecodeUrlEx(request, headers, runtime);
  }

  /**
   * Description: 申请获取一个可以上传bytecode文件到oss的url，此url可用时间默认为30秒
   * Summary: 获取oss的可用url上传文件
   */
  async getContractBytecodeUrlEx(request: GetContractBytecodeUrlRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<GetContractBytecodeUrlResponse> {
    Util.validateModel(request);
    return $tea.cast<GetContractBytecodeUrlResponse>(await this.doRequest("1.0", "baas.contract.bytecode.url.get", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new GetContractBytecodeUrlResponse({}));
  }

  /**
   * Description: 上传批量查询数据文件
   * Summary: 上传批量查询数据文件
   */
  async uploadDataFileBatchquery(request: UploadDataFileBatchqueryRequest): Promise<UploadDataFileBatchqueryResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.uploadDataFileBatchqueryEx(request, headers, runtime);
  }

  /**
   * Description: 上传批量查询数据文件
   * Summary: 上传批量查询数据文件
   */
  async uploadDataFileBatchqueryEx(request: UploadDataFileBatchqueryRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<UploadDataFileBatchqueryResponse> {
    if (!Util.isUnset(request.fileObject)) {
      let uploadReq = new CreateAntcloudGatewayxFileUploadRequest({
        authToken: request.authToken,
        apiCode: "baas.data.file.batchquery.upload",
        fileName: request.fileObjectName,
      });
      let uploadResp = await this.createAntcloudGatewayxFileUploadEx(uploadReq, headers, runtime);
      if (!AntchainUtil.isSuccess(uploadResp.resultCode, "ok")) {
        let uploadDataFileBatchqueryResponse = new UploadDataFileBatchqueryResponse({
          reqMsgId: uploadResp.reqMsgId,
          resultCode: uploadResp.resultCode,
          resultMsg: uploadResp.resultMsg,
        });
        return uploadDataFileBatchqueryResponse;
      }

      let uploadHeaders = AntchainUtil.parseUploadHeaders(uploadResp.uploadHeaders);
      await AntchainUtil.putObject(request.fileObject, uploadHeaders, uploadResp.uploadUrl);
      request.fileId = uploadResp.fileId;
      request.fileObject = null;
    }

    Util.validateModel(request);
    return $tea.cast<UploadDataFileBatchqueryResponse>(await this.doRequest("1.0", "baas.data.file.batchquery.upload", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new UploadDataFileBatchqueryResponse({}));
  }

  /**
   * Description: 获取查询数据集任务结果
   * Summary: 获取查询数据集任务结果
   */
  async queryDataResultBatchquery(request: QueryDataResultBatchqueryRequest): Promise<QueryDataResultBatchqueryResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryDataResultBatchqueryEx(request, headers, runtime);
  }

  /**
   * Description: 获取查询数据集任务结果
   * Summary: 获取查询数据集任务结果
   */
  async queryDataResultBatchqueryEx(request: QueryDataResultBatchqueryRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryDataResultBatchqueryResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryDataResultBatchqueryResponse>(await this.doRequest("1.0", "baas.data.result.batchquery.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryDataResultBatchqueryResponse({}));
  }

  /**
   * Description: 数据授权服务创建参与方
   * Summary: 数据授权服务创建参与方
   */
  async createDataauthorizationParticipant(request: CreateDataauthorizationParticipantRequest): Promise<CreateDataauthorizationParticipantResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.createDataauthorizationParticipantEx(request, headers, runtime);
  }

  /**
   * Description: 数据授权服务创建参与方
   * Summary: 数据授权服务创建参与方
   */
  async createDataauthorizationParticipantEx(request: CreateDataauthorizationParticipantRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CreateDataauthorizationParticipantResponse> {
    Util.validateModel(request);
    return $tea.cast<CreateDataauthorizationParticipantResponse>(await this.doRequest("1.0", "baas.dataauthorization.participant.create", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CreateDataauthorizationParticipantResponse({}));
  }

  /**
   * Description: 数据授权服务删除参与方
   * Summary: 数据授权服务删除参与方
   */
  async deleteDataauthorizationParticipant(request: DeleteDataauthorizationParticipantRequest): Promise<DeleteDataauthorizationParticipantResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.deleteDataauthorizationParticipantEx(request, headers, runtime);
  }

  /**
   * Description: 数据授权服务删除参与方
   * Summary: 数据授权服务删除参与方
   */
  async deleteDataauthorizationParticipantEx(request: DeleteDataauthorizationParticipantRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<DeleteDataauthorizationParticipantResponse> {
    Util.validateModel(request);
    return $tea.cast<DeleteDataauthorizationParticipantResponse>(await this.doRequest("1.0", "baas.dataauthorization.participant.delete", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new DeleteDataauthorizationParticipantResponse({}));
  }

  /**
   * Description: 数据授权服务修改用户信息
   * Summary: 数据授权服务修改用户信息
   */
  async updateDataauthorizationParticipant(request: UpdateDataauthorizationParticipantRequest): Promise<UpdateDataauthorizationParticipantResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.updateDataauthorizationParticipantEx(request, headers, runtime);
  }

  /**
   * Description: 数据授权服务修改用户信息
   * Summary: 数据授权服务修改用户信息
   */
  async updateDataauthorizationParticipantEx(request: UpdateDataauthorizationParticipantRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<UpdateDataauthorizationParticipantResponse> {
    Util.validateModel(request);
    return $tea.cast<UpdateDataauthorizationParticipantResponse>(await this.doRequest("1.0", "baas.dataauthorization.participant.update", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new UpdateDataauthorizationParticipantResponse({}));
  }

  /**
   * Description: 数据授权服务查询参与方信息
   * Summary: 数据授权服务查询参与方信息
   */
  async queryDataauthorizationParticipant(request: QueryDataauthorizationParticipantRequest): Promise<QueryDataauthorizationParticipantResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryDataauthorizationParticipantEx(request, headers, runtime);
  }

  /**
   * Description: 数据授权服务查询参与方信息
   * Summary: 数据授权服务查询参与方信息
   */
  async queryDataauthorizationParticipantEx(request: QueryDataauthorizationParticipantRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryDataauthorizationParticipantResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryDataauthorizationParticipantResponse>(await this.doRequest("1.0", "baas.dataauthorization.participant.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryDataauthorizationParticipantResponse({}));
  }

  /**
   * Description: 数据授权服务根据角色获取用户列表
   * Summary: 数据授权服务根据角色获取用户列表
   */
  async listDataauthorizationParticipant(request: ListDataauthorizationParticipantRequest): Promise<ListDataauthorizationParticipantResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.listDataauthorizationParticipantEx(request, headers, runtime);
  }

  /**
   * Description: 数据授权服务根据角色获取用户列表
   * Summary: 数据授权服务根据角色获取用户列表
   */
  async listDataauthorizationParticipantEx(request: ListDataauthorizationParticipantRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<ListDataauthorizationParticipantResponse> {
    Util.validateModel(request);
    return $tea.cast<ListDataauthorizationParticipantResponse>(await this.doRequest("1.0", "baas.dataauthorization.participant.list", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new ListDataauthorizationParticipantResponse({}));
  }

  /**
   * Description: 数据授权服务创建数据目录
   * Summary: 数据授权服务创建数据目录
   */
  async createDataauthorizationDataEntity(request: CreateDataauthorizationDataEntityRequest): Promise<CreateDataauthorizationDataEntityResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.createDataauthorizationDataEntityEx(request, headers, runtime);
  }

  /**
   * Description: 数据授权服务创建数据目录
   * Summary: 数据授权服务创建数据目录
   */
  async createDataauthorizationDataEntityEx(request: CreateDataauthorizationDataEntityRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CreateDataauthorizationDataEntityResponse> {
    Util.validateModel(request);
    return $tea.cast<CreateDataauthorizationDataEntityResponse>(await this.doRequest("1.0", "baas.dataauthorization.data.entity.create", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CreateDataauthorizationDataEntityResponse({}));
  }

  /**
   * Description: 数据授权服务查询数据目录
   * Summary: 数据授权服务查询数据目录
   */
  async queryDataauthorizationDataEntity(request: QueryDataauthorizationDataEntityRequest): Promise<QueryDataauthorizationDataEntityResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryDataauthorizationDataEntityEx(request, headers, runtime);
  }

  /**
   * Description: 数据授权服务查询数据目录
   * Summary: 数据授权服务查询数据目录
   */
  async queryDataauthorizationDataEntityEx(request: QueryDataauthorizationDataEntityRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryDataauthorizationDataEntityResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryDataauthorizationDataEntityResponse>(await this.doRequest("1.0", "baas.dataauthorization.data.entity.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryDataauthorizationDataEntityResponse({}));
  }

  /**
   * Description: 数据授权服务公钥矩阵更新
   * Summary: 数据授权服务公钥矩阵更新
   */
  async updateDataauthorizationPublicKey(request: UpdateDataauthorizationPublicKeyRequest): Promise<UpdateDataauthorizationPublicKeyResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.updateDataauthorizationPublicKeyEx(request, headers, runtime);
  }

  /**
   * Description: 数据授权服务公钥矩阵更新
   * Summary: 数据授权服务公钥矩阵更新
   */
  async updateDataauthorizationPublicKeyEx(request: UpdateDataauthorizationPublicKeyRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<UpdateDataauthorizationPublicKeyResponse> {
    Util.validateModel(request);
    return $tea.cast<UpdateDataauthorizationPublicKeyResponse>(await this.doRequest("1.0", "baas.dataauthorization.public.key.update", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new UpdateDataauthorizationPublicKeyResponse({}));
  }

  /**
   * Description: 数据授权服务公钥矩阵查询
   * Summary: 数据授权服务公钥矩阵查询
   */
  async listDataauthorizationPublicKey(request: ListDataauthorizationPublicKeyRequest): Promise<ListDataauthorizationPublicKeyResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.listDataauthorizationPublicKeyEx(request, headers, runtime);
  }

  /**
   * Description: 数据授权服务公钥矩阵查询
   * Summary: 数据授权服务公钥矩阵查询
   */
  async listDataauthorizationPublicKeyEx(request: ListDataauthorizationPublicKeyRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<ListDataauthorizationPublicKeyResponse> {
    Util.validateModel(request);
    return $tea.cast<ListDataauthorizationPublicKeyResponse>(await this.doRequest("1.0", "baas.dataauthorization.public.key.list", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new ListDataauthorizationPublicKeyResponse({}));
  }

  /**
   * Description: 数据授权服务开通服务
   * Summary: 数据授权服务开通服务
   */
  async openDataauthorizationAuthorizationService(request: OpenDataauthorizationAuthorizationServiceRequest): Promise<OpenDataauthorizationAuthorizationServiceResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.openDataauthorizationAuthorizationServiceEx(request, headers, runtime);
  }

  /**
   * Description: 数据授权服务开通服务
   * Summary: 数据授权服务开通服务
   */
  async openDataauthorizationAuthorizationServiceEx(request: OpenDataauthorizationAuthorizationServiceRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<OpenDataauthorizationAuthorizationServiceResponse> {
    Util.validateModel(request);
    return $tea.cast<OpenDataauthorizationAuthorizationServiceResponse>(await this.doRequest("1.0", "baas.dataauthorization.authorization.service.open", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new OpenDataauthorizationAuthorizationServiceResponse({}));
  }

  /**
   * Description: 数据授权服务关闭租户服务
   * Summary: 数据授权服务关闭租户服务
   */
  async closeDataauthorizationAuthorizationService(request: CloseDataauthorizationAuthorizationServiceRequest): Promise<CloseDataauthorizationAuthorizationServiceResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.closeDataauthorizationAuthorizationServiceEx(request, headers, runtime);
  }

  /**
   * Description: 数据授权服务关闭租户服务
   * Summary: 数据授权服务关闭租户服务
   */
  async closeDataauthorizationAuthorizationServiceEx(request: CloseDataauthorizationAuthorizationServiceRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CloseDataauthorizationAuthorizationServiceResponse> {
    Util.validateModel(request);
    return $tea.cast<CloseDataauthorizationAuthorizationServiceResponse>(await this.doRequest("1.0", "baas.dataauthorization.authorization.service.close", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CloseDataauthorizationAuthorizationServiceResponse({}));
  }

  /**
   * Description: 数据授权服务申请权限
   * Summary: 数据授权服务申请权限
   */
  async applyDataauthorizationAuthorization(request: ApplyDataauthorizationAuthorizationRequest): Promise<ApplyDataauthorizationAuthorizationResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.applyDataauthorizationAuthorizationEx(request, headers, runtime);
  }

  /**
   * Description: 数据授权服务申请权限
   * Summary: 数据授权服务申请权限
   */
  async applyDataauthorizationAuthorizationEx(request: ApplyDataauthorizationAuthorizationRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<ApplyDataauthorizationAuthorizationResponse> {
    Util.validateModel(request);
    return $tea.cast<ApplyDataauthorizationAuthorizationResponse>(await this.doRequest("1.0", "baas.dataauthorization.authorization.apply", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new ApplyDataauthorizationAuthorizationResponse({}));
  }

  /**
   * Description: 数据授权服务流程步骤处理
   * Summary: 数据授权服务流程步骤处理
   */
  async execDataauthorizationProcess(request: ExecDataauthorizationProcessRequest): Promise<ExecDataauthorizationProcessResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.execDataauthorizationProcessEx(request, headers, runtime);
  }

  /**
   * Description: 数据授权服务流程步骤处理
   * Summary: 数据授权服务流程步骤处理
   */
  async execDataauthorizationProcessEx(request: ExecDataauthorizationProcessRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<ExecDataauthorizationProcessResponse> {
    Util.validateModel(request);
    return $tea.cast<ExecDataauthorizationProcessResponse>(await this.doRequest("1.0", "baas.dataauthorization.process.exec", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new ExecDataauthorizationProcessResponse({}));
  }

  /**
   * Description: 数据授权服务取消授权
   * Summary: 数据授权服务取消授权
   */
  async cancelDataauthorizationAuthorization(request: CancelDataauthorizationAuthorizationRequest): Promise<CancelDataauthorizationAuthorizationResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.cancelDataauthorizationAuthorizationEx(request, headers, runtime);
  }

  /**
   * Description: 数据授权服务取消授权
   * Summary: 数据授权服务取消授权
   */
  async cancelDataauthorizationAuthorizationEx(request: CancelDataauthorizationAuthorizationRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CancelDataauthorizationAuthorizationResponse> {
    Util.validateModel(request);
    return $tea.cast<CancelDataauthorizationAuthorizationResponse>(await this.doRequest("1.0", "baas.dataauthorization.authorization.cancel", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CancelDataauthorizationAuthorizationResponse({}));
  }

  /**
   * Description: 数据授权服务权限校验
   * Summary: 数据授权服务权限校验
   */
  async checkDataauthorizationAuthorization(request: CheckDataauthorizationAuthorizationRequest): Promise<CheckDataauthorizationAuthorizationResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.checkDataauthorizationAuthorizationEx(request, headers, runtime);
  }

  /**
   * Description: 数据授权服务权限校验
   * Summary: 数据授权服务权限校验
   */
  async checkDataauthorizationAuthorizationEx(request: CheckDataauthorizationAuthorizationRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CheckDataauthorizationAuthorizationResponse> {
    Util.validateModel(request);
    return $tea.cast<CheckDataauthorizationAuthorizationResponse>(await this.doRequest("1.0", "baas.dataauthorization.authorization.check", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CheckDataauthorizationAuthorizationResponse({}));
  }

  /**
   * Description: 数据授权服务流程信息查询
   * Summary: 数据授权服务流程信息查询
   */
  async queryDataauthorizationProcess(request: QueryDataauthorizationProcessRequest): Promise<QueryDataauthorizationProcessResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryDataauthorizationProcessEx(request, headers, runtime);
  }

  /**
   * Description: 数据授权服务流程信息查询
   * Summary: 数据授权服务流程信息查询
   */
  async queryDataauthorizationProcessEx(request: QueryDataauthorizationProcessRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryDataauthorizationProcessResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryDataauthorizationProcessResponse>(await this.doRequest("1.0", "baas.dataauthorization.process.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryDataauthorizationProcessResponse({}));
  }

  /**
   * Description: 数据授权服务存证数据上链
   * Summary: 数据授权服务存证数据上链
   */
  async sendDataauthorizationDepositData(request: SendDataauthorizationDepositDataRequest): Promise<SendDataauthorizationDepositDataResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.sendDataauthorizationDepositDataEx(request, headers, runtime);
  }

  /**
   * Description: 数据授权服务存证数据上链
   * Summary: 数据授权服务存证数据上链
   */
  async sendDataauthorizationDepositDataEx(request: SendDataauthorizationDepositDataRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<SendDataauthorizationDepositDataResponse> {
    Util.validateModel(request);
    return $tea.cast<SendDataauthorizationDepositDataResponse>(await this.doRequest("1.0", "baas.dataauthorization.deposit.data.send", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new SendDataauthorizationDepositDataResponse({}));
  }

  /**
   * Description: 数据授权服务查询存证数据
   * Summary: 数据授权服务查询存证数据
   */
  async queryDataauthorizationDepositData(request: QueryDataauthorizationDepositDataRequest): Promise<QueryDataauthorizationDepositDataResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryDataauthorizationDepositDataEx(request, headers, runtime);
  }

  /**
   * Description: 数据授权服务查询存证数据
   * Summary: 数据授权服务查询存证数据
   */
  async queryDataauthorizationDepositDataEx(request: QueryDataauthorizationDepositDataRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryDataauthorizationDepositDataResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryDataauthorizationDepositDataResponse>(await this.doRequest("1.0", "baas.dataauthorization.deposit.data.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryDataauthorizationDepositDataResponse({}));
  }

  /**
   * Description: 数据授权服务恢复权限
   * Summary: 数据授权服务恢复权限
   */
  async resumeDataauthorizationAuthorization(request: ResumeDataauthorizationAuthorizationRequest): Promise<ResumeDataauthorizationAuthorizationResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.resumeDataauthorizationAuthorizationEx(request, headers, runtime);
  }

  /**
   * Description: 数据授权服务恢复权限
   * Summary: 数据授权服务恢复权限
   */
  async resumeDataauthorizationAuthorizationEx(request: ResumeDataauthorizationAuthorizationRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<ResumeDataauthorizationAuthorizationResponse> {
    Util.validateModel(request);
    return $tea.cast<ResumeDataauthorizationAuthorizationResponse>(await this.doRequest("1.0", "baas.dataauthorization.authorization.resume", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new ResumeDataauthorizationAuthorizationResponse({}));
  }

  /**
   * Description: 数据授权服务更新数据信息
   * Summary: 数据授权服务更新数据信息
   */
  async updateDataauthorizationDataEntity(request: UpdateDataauthorizationDataEntityRequest): Promise<UpdateDataauthorizationDataEntityResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.updateDataauthorizationDataEntityEx(request, headers, runtime);
  }

  /**
   * Description: 数据授权服务更新数据信息
   * Summary: 数据授权服务更新数据信息
   */
  async updateDataauthorizationDataEntityEx(request: UpdateDataauthorizationDataEntityRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<UpdateDataauthorizationDataEntityResponse> {
    Util.validateModel(request);
    return $tea.cast<UpdateDataauthorizationDataEntityResponse>(await this.doRequest("1.0", "baas.dataauthorization.data.entity.update", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new UpdateDataauthorizationDataEntityResponse({}));
  }

  /**
   * Description: 数据授权服务删除数据对象
   * Summary: 数据授权服务删除数据对象
   */
  async deleteDataauthorizationDataEntity(request: DeleteDataauthorizationDataEntityRequest): Promise<DeleteDataauthorizationDataEntityResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.deleteDataauthorizationDataEntityEx(request, headers, runtime);
  }

  /**
   * Description: 数据授权服务删除数据对象
   * Summary: 数据授权服务删除数据对象
   */
  async deleteDataauthorizationDataEntityEx(request: DeleteDataauthorizationDataEntityRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<DeleteDataauthorizationDataEntityResponse> {
    Util.validateModel(request);
    return $tea.cast<DeleteDataauthorizationDataEntityResponse>(await this.doRequest("1.0", "baas.dataauthorization.data.entity.delete", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new DeleteDataauthorizationDataEntityResponse({}));
  }

  /**
   * Description: 数据授权服务创建自定义ID用户
   * Summary: 数据授权服务创建自定义ID用户
   */
  async createDataauthorizationCustomParticipant(request: CreateDataauthorizationCustomParticipantRequest): Promise<CreateDataauthorizationCustomParticipantResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.createDataauthorizationCustomParticipantEx(request, headers, runtime);
  }

  /**
   * Description: 数据授权服务创建自定义ID用户
   * Summary: 数据授权服务创建自定义ID用户
   */
  async createDataauthorizationCustomParticipantEx(request: CreateDataauthorizationCustomParticipantRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CreateDataauthorizationCustomParticipantResponse> {
    Util.validateModel(request);
    return $tea.cast<CreateDataauthorizationCustomParticipantResponse>(await this.doRequest("1.0", "baas.dataauthorization.custom.participant.create", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CreateDataauthorizationCustomParticipantResponse({}));
  }

  /**
   * Description: 数据授权服务创建自定义ID数据对象
   * Summary: 数据授权服务创建自定义ID数据对象
   */
  async createDataauthorizationCustomData(request: CreateDataauthorizationCustomDataRequest): Promise<CreateDataauthorizationCustomDataResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.createDataauthorizationCustomDataEx(request, headers, runtime);
  }

  /**
   * Description: 数据授权服务创建自定义ID数据对象
   * Summary: 数据授权服务创建自定义ID数据对象
   */
  async createDataauthorizationCustomDataEx(request: CreateDataauthorizationCustomDataRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CreateDataauthorizationCustomDataResponse> {
    Util.validateModel(request);
    return $tea.cast<CreateDataauthorizationCustomDataResponse>(await this.doRequest("1.0", "baas.dataauthorization.custom.data.create", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CreateDataauthorizationCustomDataResponse({}));
  }

  /**
   * Description: 数据授权服务申请权限
   * Summary: 数据授权服务申请权限
   */
  async applyDataauthorizationAuthorizationWithsignature(request: ApplyDataauthorizationAuthorizationWithsignatureRequest): Promise<ApplyDataauthorizationAuthorizationWithsignatureResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.applyDataauthorizationAuthorizationWithsignatureEx(request, headers, runtime);
  }

  /**
   * Description: 数据授权服务申请权限
   * Summary: 数据授权服务申请权限
   */
  async applyDataauthorizationAuthorizationWithsignatureEx(request: ApplyDataauthorizationAuthorizationWithsignatureRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<ApplyDataauthorizationAuthorizationWithsignatureResponse> {
    Util.validateModel(request);
    return $tea.cast<ApplyDataauthorizationAuthorizationWithsignatureResponse>(await this.doRequest("1.0", "baas.dataauthorization.authorization.withsignature.apply", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new ApplyDataauthorizationAuthorizationWithsignatureResponse({}));
  }

  /**
   * Description: 数据授权服务流程步骤处理
   * Summary: 数据授权服务流程步骤处理
   */
  async execDataauthorizationProcessWithsignature(request: ExecDataauthorizationProcessWithsignatureRequest): Promise<ExecDataauthorizationProcessWithsignatureResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.execDataauthorizationProcessWithsignatureEx(request, headers, runtime);
  }

  /**
   * Description: 数据授权服务流程步骤处理
   * Summary: 数据授权服务流程步骤处理
   */
  async execDataauthorizationProcessWithsignatureEx(request: ExecDataauthorizationProcessWithsignatureRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<ExecDataauthorizationProcessWithsignatureResponse> {
    Util.validateModel(request);
    return $tea.cast<ExecDataauthorizationProcessWithsignatureResponse>(await this.doRequest("1.0", "baas.dataauthorization.process.withsignature.exec", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new ExecDataauthorizationProcessWithsignatureResponse({}));
  }

  /**
   * Description: 创建数据模型
   * Summary: 创建数据模型
   */
  async createDataauthorizationDataModel(request: CreateDataauthorizationDataModelRequest): Promise<CreateDataauthorizationDataModelResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.createDataauthorizationDataModelEx(request, headers, runtime);
  }

  /**
   * Description: 创建数据模型
   * Summary: 创建数据模型
   */
  async createDataauthorizationDataModelEx(request: CreateDataauthorizationDataModelRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CreateDataauthorizationDataModelResponse> {
    Util.validateModel(request);
    return $tea.cast<CreateDataauthorizationDataModelResponse>(await this.doRequest("1.0", "baas.dataauthorization.data.model.create", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CreateDataauthorizationDataModelResponse({}));
  }

  /**
   * Description: 数据模型修改
   * Summary: 数据模型修改
   */
  async updateDataauthorizationDataModel(request: UpdateDataauthorizationDataModelRequest): Promise<UpdateDataauthorizationDataModelResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.updateDataauthorizationDataModelEx(request, headers, runtime);
  }

  /**
   * Description: 数据模型修改
   * Summary: 数据模型修改
   */
  async updateDataauthorizationDataModelEx(request: UpdateDataauthorizationDataModelRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<UpdateDataauthorizationDataModelResponse> {
    Util.validateModel(request);
    return $tea.cast<UpdateDataauthorizationDataModelResponse>(await this.doRequest("1.0", "baas.dataauthorization.data.model.update", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new UpdateDataauthorizationDataModelResponse({}));
  }

  /**
   * Description: 删除数据模型
   * Summary: 删除数据模型
   */
  async deleteDataauthorizationDataModel(request: DeleteDataauthorizationDataModelRequest): Promise<DeleteDataauthorizationDataModelResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.deleteDataauthorizationDataModelEx(request, headers, runtime);
  }

  /**
   * Description: 删除数据模型
   * Summary: 删除数据模型
   */
  async deleteDataauthorizationDataModelEx(request: DeleteDataauthorizationDataModelRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<DeleteDataauthorizationDataModelResponse> {
    Util.validateModel(request);
    return $tea.cast<DeleteDataauthorizationDataModelResponse>(await this.doRequest("1.0", "baas.dataauthorization.data.model.delete", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new DeleteDataauthorizationDataModelResponse({}));
  }

  /**
   * Description: 分页查询参与方列表
   * Summary: 分页查询参与方列表
   */
  async listDataauthorizationParticipantPage(request: ListDataauthorizationParticipantPageRequest): Promise<ListDataauthorizationParticipantPageResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.listDataauthorizationParticipantPageEx(request, headers, runtime);
  }

  /**
   * Description: 分页查询参与方列表
   * Summary: 分页查询参与方列表
   */
  async listDataauthorizationParticipantPageEx(request: ListDataauthorizationParticipantPageRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<ListDataauthorizationParticipantPageResponse> {
    Util.validateModel(request);
    return $tea.cast<ListDataauthorizationParticipantPageResponse>(await this.doRequest("1.0", "baas.dataauthorization.participant.page.list", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new ListDataauthorizationParticipantPageResponse({}));
  }

  /**
   * Description: 查询数据模型
   * Summary: 查询数据模型
   */
  async queryDataauthorizationDataModel(request: QueryDataauthorizationDataModelRequest): Promise<QueryDataauthorizationDataModelResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryDataauthorizationDataModelEx(request, headers, runtime);
  }

  /**
   * Description: 查询数据模型
   * Summary: 查询数据模型
   */
  async queryDataauthorizationDataModelEx(request: QueryDataauthorizationDataModelRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryDataauthorizationDataModelResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryDataauthorizationDataModelResponse>(await this.doRequest("1.0", "baas.dataauthorization.data.model.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryDataauthorizationDataModelResponse({}));
  }

  /**
   * Description: 数据模型分页查询
   * Summary: 数据模型分页查询
   */
  async listDataauthorizationDatamodelPage(request: ListDataauthorizationDatamodelPageRequest): Promise<ListDataauthorizationDatamodelPageResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.listDataauthorizationDatamodelPageEx(request, headers, runtime);
  }

  /**
   * Description: 数据模型分页查询
   * Summary: 数据模型分页查询
   */
  async listDataauthorizationDatamodelPageEx(request: ListDataauthorizationDatamodelPageRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<ListDataauthorizationDatamodelPageResponse> {
    Util.validateModel(request);
    return $tea.cast<ListDataauthorizationDatamodelPageResponse>(await this.doRequest("1.0", "baas.dataauthorization.datamodel.page.list", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new ListDataauthorizationDatamodelPageResponse({}));
  }

  /**
   * Description: 查询可注册的数据模型列表
   * Summary: 查询可注册的数据模型列表
   */
  async listDataauthorizationAvailableDatamodel(request: ListDataauthorizationAvailableDatamodelRequest): Promise<ListDataauthorizationAvailableDatamodelResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.listDataauthorizationAvailableDatamodelEx(request, headers, runtime);
  }

  /**
   * Description: 查询可注册的数据模型列表
   * Summary: 查询可注册的数据模型列表
   */
  async listDataauthorizationAvailableDatamodelEx(request: ListDataauthorizationAvailableDatamodelRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<ListDataauthorizationAvailableDatamodelResponse> {
    Util.validateModel(request);
    return $tea.cast<ListDataauthorizationAvailableDatamodelResponse>(await this.doRequest("1.0", "baas.dataauthorization.available.datamodel.list", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new ListDataauthorizationAvailableDatamodelResponse({}));
  }

  /**
   * Description: 根据模型名称、授权状态分页查询。
   * Summary: 数据注册情况查询
   */
  async listDataauthorizationDataentityPage(request: ListDataauthorizationDataentityPageRequest): Promise<ListDataauthorizationDataentityPageResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.listDataauthorizationDataentityPageEx(request, headers, runtime);
  }

  /**
   * Description: 根据模型名称、授权状态分页查询。
   * Summary: 数据注册情况查询
   */
  async listDataauthorizationDataentityPageEx(request: ListDataauthorizationDataentityPageRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<ListDataauthorizationDataentityPageResponse> {
    Util.validateModel(request);
    return $tea.cast<ListDataauthorizationDataentityPageResponse>(await this.doRequest("1.0", "baas.dataauthorization.dataentity.page.list", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new ListDataauthorizationDataentityPageResponse({}));
  }

  /**
   * Description: 直接授权接口
   * Summary: 直接授权接口
   */
  async createDataauthorizationDirectAuthorization(request: CreateDataauthorizationDirectAuthorizationRequest): Promise<CreateDataauthorizationDirectAuthorizationResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.createDataauthorizationDirectAuthorizationEx(request, headers, runtime);
  }

  /**
   * Description: 直接授权接口
   * Summary: 直接授权接口
   */
  async createDataauthorizationDirectAuthorizationEx(request: CreateDataauthorizationDirectAuthorizationRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CreateDataauthorizationDirectAuthorizationResponse> {
    Util.validateModel(request);
    return $tea.cast<CreateDataauthorizationDirectAuthorizationResponse>(await this.doRequest("1.0", "baas.dataauthorization.direct.authorization.create", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CreateDataauthorizationDirectAuthorizationResponse({}));
  }

  /**
   * Description: 授权列表分页查询
   * Summary: 授权列表分页查询
   */
  async listDataauthorizationAuthorizationPage(request: ListDataauthorizationAuthorizationPageRequest): Promise<ListDataauthorizationAuthorizationPageResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.listDataauthorizationAuthorizationPageEx(request, headers, runtime);
  }

  /**
   * Description: 授权列表分页查询
   * Summary: 授权列表分页查询
   */
  async listDataauthorizationAuthorizationPageEx(request: ListDataauthorizationAuthorizationPageRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<ListDataauthorizationAuthorizationPageResponse> {
    Util.validateModel(request);
    return $tea.cast<ListDataauthorizationAuthorizationPageResponse>(await this.doRequest("1.0", "baas.dataauthorization.authorization.page.list", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new ListDataauthorizationAuthorizationPageResponse({}));
  }

  /**
   * Description: 查询已授权的参与方列表
   * Summary: 查询已授权的参与方列表
   */
  async listDataauthorizationAuthparticipantPage(request: ListDataauthorizationAuthparticipantPageRequest): Promise<ListDataauthorizationAuthparticipantPageResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.listDataauthorizationAuthparticipantPageEx(request, headers, runtime);
  }

  /**
   * Description: 查询已授权的参与方列表
   * Summary: 查询已授权的参与方列表
   */
  async listDataauthorizationAuthparticipantPageEx(request: ListDataauthorizationAuthparticipantPageRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<ListDataauthorizationAuthparticipantPageResponse> {
    Util.validateModel(request);
    return $tea.cast<ListDataauthorizationAuthparticipantPageResponse>(await this.doRequest("1.0", "baas.dataauthorization.authparticipant.page.list", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new ListDataauthorizationAuthparticipantPageResponse({}));
  }

  /**
   * Description: 创建数据资产
   * Summary: 创建数据资产
   */
  async createDataauthorizationDataAssert(request: CreateDataauthorizationDataAssertRequest): Promise<CreateDataauthorizationDataAssertResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.createDataauthorizationDataAssertEx(request, headers, runtime);
  }

  /**
   * Description: 创建数据资产
   * Summary: 创建数据资产
   */
  async createDataauthorizationDataAssertEx(request: CreateDataauthorizationDataAssertRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CreateDataauthorizationDataAssertResponse> {
    Util.validateModel(request);
    return $tea.cast<CreateDataauthorizationDataAssertResponse>(await this.doRequest("1.0", "baas.dataauthorization.data.assert.create", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CreateDataauthorizationDataAssertResponse({}));
  }

  /**
   * Description: 数据资产更新
   * Summary: 数据资产更新
   */
  async updateDataauthorizationDataAssert(request: UpdateDataauthorizationDataAssertRequest): Promise<UpdateDataauthorizationDataAssertResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.updateDataauthorizationDataAssertEx(request, headers, runtime);
  }

  /**
   * Description: 数据资产更新
   * Summary: 数据资产更新
   */
  async updateDataauthorizationDataAssertEx(request: UpdateDataauthorizationDataAssertRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<UpdateDataauthorizationDataAssertResponse> {
    Util.validateModel(request);
    return $tea.cast<UpdateDataauthorizationDataAssertResponse>(await this.doRequest("1.0", "baas.dataauthorization.data.assert.update", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new UpdateDataauthorizationDataAssertResponse({}));
  }

  /**
   * Description: 数据资产删除
   * Summary: 数据资产删除
   */
  async deleteDataauthorizationDataAssert(request: DeleteDataauthorizationDataAssertRequest): Promise<DeleteDataauthorizationDataAssertResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.deleteDataauthorizationDataAssertEx(request, headers, runtime);
  }

  /**
   * Description: 数据资产删除
   * Summary: 数据资产删除
   */
  async deleteDataauthorizationDataAssertEx(request: DeleteDataauthorizationDataAssertRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<DeleteDataauthorizationDataAssertResponse> {
    Util.validateModel(request);
    return $tea.cast<DeleteDataauthorizationDataAssertResponse>(await this.doRequest("1.0", "baas.dataauthorization.data.assert.delete", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new DeleteDataauthorizationDataAssertResponse({}));
  }

  /**
   * Description: 授权服务代理授权接口
   * Summary: 代理授权
   */
  async createDataauthorizationAgentAuthorization(request: CreateDataauthorizationAgentAuthorizationRequest): Promise<CreateDataauthorizationAgentAuthorizationResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.createDataauthorizationAgentAuthorizationEx(request, headers, runtime);
  }

  /**
   * Description: 授权服务代理授权接口
   * Summary: 代理授权
   */
  async createDataauthorizationAgentAuthorizationEx(request: CreateDataauthorizationAgentAuthorizationRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CreateDataauthorizationAgentAuthorizationResponse> {
    Util.validateModel(request);
    return $tea.cast<CreateDataauthorizationAgentAuthorizationResponse>(await this.doRequest("1.0", "baas.dataauthorization.agent.authorization.create", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CreateDataauthorizationAgentAuthorizationResponse({}));
  }

  /**
   * Description:  授权列表相信信息查询
   * Summary:  授权列表相信信息查询
   */
  async listDataauthorizationAuthorityCert(request: ListDataauthorizationAuthorityCertRequest): Promise<ListDataauthorizationAuthorityCertResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.listDataauthorizationAuthorityCertEx(request, headers, runtime);
  }

  /**
   * Description:  授权列表相信信息查询
   * Summary:  授权列表相信信息查询
   */
  async listDataauthorizationAuthorityCertEx(request: ListDataauthorizationAuthorityCertRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<ListDataauthorizationAuthorityCertResponse> {
    Util.validateModel(request);
    return $tea.cast<ListDataauthorizationAuthorityCertResponse>(await this.doRequest("1.0", "baas.dataauthorization.authority.cert.list", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new ListDataauthorizationAuthorityCertResponse({}));
  }

  /**
   * Description: 同步存证上链接口
   * Summary: 同步存证上链
   */
  async saveDataauthorizationDepositData(request: SaveDataauthorizationDepositDataRequest): Promise<SaveDataauthorizationDepositDataResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.saveDataauthorizationDepositDataEx(request, headers, runtime);
  }

  /**
   * Description: 同步存证上链接口
   * Summary: 同步存证上链
   */
  async saveDataauthorizationDepositDataEx(request: SaveDataauthorizationDepositDataRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<SaveDataauthorizationDepositDataResponse> {
    Util.validateModel(request);
    return $tea.cast<SaveDataauthorizationDepositDataResponse>(await this.doRequest("1.0", "baas.dataauthorization.deposit.data.save", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new SaveDataauthorizationDepositDataResponse({}));
  }

  /**
   * Description: 启动全量同步
   * Summary: 启动全量同步
   */
  async startDataauthorizationSyncData(request: StartDataauthorizationSyncDataRequest): Promise<StartDataauthorizationSyncDataResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.startDataauthorizationSyncDataEx(request, headers, runtime);
  }

  /**
   * Description: 启动全量同步
   * Summary: 启动全量同步
   */
  async startDataauthorizationSyncDataEx(request: StartDataauthorizationSyncDataRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<StartDataauthorizationSyncDataResponse> {
    Util.validateModel(request);
    return $tea.cast<StartDataauthorizationSyncDataResponse>(await this.doRequest("1.0", "baas.dataauthorization.sync.data.start", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new StartDataauthorizationSyncDataResponse({}));
  }

  /**
   * Description: 通过额交易hash查询，返回hash对应区块链上信息。
   * Summary: 溯源区块查证接口
   */
  async queryTraceabilityTxCheck(request: QueryTraceabilityTxCheckRequest): Promise<QueryTraceabilityTxCheckResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryTraceabilityTxCheckEx(request, headers, runtime);
  }

  /**
   * Description: 通过额交易hash查询，返回hash对应区块链上信息。
   * Summary: 溯源区块查证接口
   */
  async queryTraceabilityTxCheckEx(request: QueryTraceabilityTxCheckRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryTraceabilityTxCheckResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryTraceabilityTxCheckResponse>(await this.doRequest("1.0", "baas.traceability.tx.check.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryTraceabilityTxCheckResponse({}));
  }

  /**
   * Description: 通过链id，获取链的相关信息
   * Summary: 获取链信息接口
   */
  async queryTraceabilityBlockchainInfos(request: QueryTraceabilityBlockchainInfosRequest): Promise<QueryTraceabilityBlockchainInfosResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryTraceabilityBlockchainInfosEx(request, headers, runtime);
  }

  /**
   * Description: 通过链id，获取链的相关信息
   * Summary: 获取链信息接口
   */
  async queryTraceabilityBlockchainInfosEx(request: QueryTraceabilityBlockchainInfosRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryTraceabilityBlockchainInfosResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryTraceabilityBlockchainInfosResponse>(await this.doRequest("1.0", "baas.traceability.blockchain.infos.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryTraceabilityBlockchainInfosResponse({}));
  }

  /**
   * Description: BaaS区块链浏览器添加租户与链的访问权限
   * Summary: BaaS区块链浏览器添加权限
   */
  async saveBlockchainBrowserPrivilege(request: SaveBlockchainBrowserPrivilegeRequest): Promise<SaveBlockchainBrowserPrivilegeResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.saveBlockchainBrowserPrivilegeEx(request, headers, runtime);
  }

  /**
   * Description: BaaS区块链浏览器添加租户与链的访问权限
   * Summary: BaaS区块链浏览器添加权限
   */
  async saveBlockchainBrowserPrivilegeEx(request: SaveBlockchainBrowserPrivilegeRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<SaveBlockchainBrowserPrivilegeResponse> {
    Util.validateModel(request);
    return $tea.cast<SaveBlockchainBrowserPrivilegeResponse>(await this.doRequest("1.0", "baas.blockchain.browser.privilege.save", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new SaveBlockchainBrowserPrivilegeResponse({}));
  }

  /**
   * Description: 查询租户查看某链的权限
   * Summary: 查询租户查看某链的权限
   */
  async queryBlockchainBrowserPrivilege(request: QueryBlockchainBrowserPrivilegeRequest): Promise<QueryBlockchainBrowserPrivilegeResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryBlockchainBrowserPrivilegeEx(request, headers, runtime);
  }

  /**
   * Description: 查询租户查看某链的权限
   * Summary: 查询租户查看某链的权限
   */
  async queryBlockchainBrowserPrivilegeEx(request: QueryBlockchainBrowserPrivilegeRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryBlockchainBrowserPrivilegeResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryBlockchainBrowserPrivilegeResponse>(await this.doRequest("1.0", "baas.blockchain.browser.privilege.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryBlockchainBrowserPrivilegeResponse({}));
  }

  /**
   * Description: BaaS区块链浏览器删除租户与链的访问权限
   * Summary: BaaS区块链浏览器添加权限
   */
  async deleteBlockchainBrowserPrivilege(request: DeleteBlockchainBrowserPrivilegeRequest): Promise<DeleteBlockchainBrowserPrivilegeResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.deleteBlockchainBrowserPrivilegeEx(request, headers, runtime);
  }

  /**
   * Description: BaaS区块链浏览器删除租户与链的访问权限
   * Summary: BaaS区块链浏览器添加权限
   */
  async deleteBlockchainBrowserPrivilegeEx(request: DeleteBlockchainBrowserPrivilegeRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<DeleteBlockchainBrowserPrivilegeResponse> {
    Util.validateModel(request);
    return $tea.cast<DeleteBlockchainBrowserPrivilegeResponse>(await this.doRequest("1.0", "baas.blockchain.browser.privilege.delete", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new DeleteBlockchainBrowserPrivilegeResponse({}));
  }

  /**
   * Description: 生成蚂蚁区块链的交易二维码
   * Summary: 数科生成蚂蚁区块链的交易二维码
   */
  async getBlockchainMiniprogram(request: GetBlockchainMiniprogramRequest): Promise<GetBlockchainMiniprogramResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.getBlockchainMiniprogramEx(request, headers, runtime);
  }

  /**
   * Description: 生成蚂蚁区块链的交易二维码
   * Summary: 数科生成蚂蚁区块链的交易二维码
   */
  async getBlockchainMiniprogramEx(request: GetBlockchainMiniprogramRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<GetBlockchainMiniprogramResponse> {
    Util.validateModel(request);
    return $tea.cast<GetBlockchainMiniprogramResponse>(await this.doRequest("1.0", "baas.blockchain.miniprogram.get", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new GetBlockchainMiniprogramResponse({}));
  }

  /**
   * Description: 蚂蚁区块链的链上交易数据查看权限批量添加
   * Summary: 蚂蚁区块链的链上交易数据查看权限批量添加
   */
  async addBlockchainMiniprogram(request: AddBlockchainMiniprogramRequest): Promise<AddBlockchainMiniprogramResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.addBlockchainMiniprogramEx(request, headers, runtime);
  }

  /**
   * Description: 蚂蚁区块链的链上交易数据查看权限批量添加
   * Summary: 蚂蚁区块链的链上交易数据查看权限批量添加
   */
  async addBlockchainMiniprogramEx(request: AddBlockchainMiniprogramRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<AddBlockchainMiniprogramResponse> {
    Util.validateModel(request);
    return $tea.cast<AddBlockchainMiniprogramResponse>(await this.doRequest("1.0", "baas.blockchain.miniprogram.add", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new AddBlockchainMiniprogramResponse({}));
  }

  /**
   * Description: 获取金融科技BaaS浏览器交易统计信息
   * Summary: 获取金融科技BaaS浏览器交易统计信息
   */
  async queryBrowserTransactionStatistic(request: QueryBrowserTransactionStatisticRequest): Promise<QueryBrowserTransactionStatisticResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryBrowserTransactionStatisticEx(request, headers, runtime);
  }

  /**
   * Description: 获取金融科技BaaS浏览器交易统计信息
   * Summary: 获取金融科技BaaS浏览器交易统计信息
   */
  async queryBrowserTransactionStatisticEx(request: QueryBrowserTransactionStatisticRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryBrowserTransactionStatisticResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryBrowserTransactionStatisticResponse>(await this.doRequest("1.0", "baas.browser.transaction.statistic.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryBrowserTransactionStatisticResponse({}));
  }

  /**
   * Description: 获取金融科技BaaS最新区块信息列表
   * Summary: 获取金融科技BaaS最新区块信息列表
   */
  async queryBrowserBlockLatest(request: QueryBrowserBlockLatestRequest): Promise<QueryBrowserBlockLatestResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryBrowserBlockLatestEx(request, headers, runtime);
  }

  /**
   * Description: 获取金融科技BaaS最新区块信息列表
   * Summary: 获取金融科技BaaS最新区块信息列表
   */
  async queryBrowserBlockLatestEx(request: QueryBrowserBlockLatestRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryBrowserBlockLatestResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryBrowserBlockLatestResponse>(await this.doRequest("1.0", "baas.browser.block.latest.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryBrowserBlockLatestResponse({}));
  }

  /**
   * Description: 获取金融科技BaaS最新交易列表
   * Summary: 获取金融科技BaaS最新交易列表
   */
  async queryBrowserTransactionLatest(request: QueryBrowserTransactionLatestRequest): Promise<QueryBrowserTransactionLatestResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryBrowserTransactionLatestEx(request, headers, runtime);
  }

  /**
   * Description: 获取金融科技BaaS最新交易列表
   * Summary: 获取金融科技BaaS最新交易列表
   */
  async queryBrowserTransactionLatestEx(request: QueryBrowserTransactionLatestRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryBrowserTransactionLatestResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryBrowserTransactionLatestResponse>(await this.doRequest("1.0", "baas.browser.transaction.latest.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryBrowserTransactionLatestResponse({}));
  }

  /**
   * Description: 获取金融科技BaaS区块信息
   * Summary: 获取金融科技BaaS区块信息
   */
  async queryBrowserBlock(request: QueryBrowserBlockRequest): Promise<QueryBrowserBlockResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryBrowserBlockEx(request, headers, runtime);
  }

  /**
   * Description: 获取金融科技BaaS区块信息
   * Summary: 获取金融科技BaaS区块信息
   */
  async queryBrowserBlockEx(request: QueryBrowserBlockRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryBrowserBlockResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryBrowserBlockResponse>(await this.doRequest("1.0", "baas.browser.block.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryBrowserBlockResponse({}));
  }

  /**
   * Description: 获取金融科技BaaS交易信息内容
   * Summary: 获取金融科技BaaS交易信息内容
   */
  async queryBrowserTransaction(request: QueryBrowserTransactionRequest): Promise<QueryBrowserTransactionResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryBrowserTransactionEx(request, headers, runtime);
  }

  /**
   * Description: 获取金融科技BaaS交易信息内容
   * Summary: 获取金融科技BaaS交易信息内容
   */
  async queryBrowserTransactionEx(request: QueryBrowserTransactionRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryBrowserTransactionResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryBrowserTransactionResponse>(await this.doRequest("1.0", "baas.browser.transaction.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryBrowserTransactionResponse({}));
  }

  /**
   * Description: 获取金融科技BaaS交易回执信息
   * Summary: 获取金融科技BaaS交易回执信息
   */
  async queryBrowserTransactionReceipt(request: QueryBrowserTransactionReceiptRequest): Promise<QueryBrowserTransactionReceiptResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryBrowserTransactionReceiptEx(request, headers, runtime);
  }

  /**
   * Description: 获取金融科技BaaS交易回执信息
   * Summary: 获取金融科技BaaS交易回执信息
   */
  async queryBrowserTransactionReceiptEx(request: QueryBrowserTransactionReceiptRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryBrowserTransactionReceiptResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryBrowserTransactionReceiptResponse>(await this.doRequest("1.0", "baas.browser.transaction.receipt.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryBrowserTransactionReceiptResponse({}));
  }

  /**
   * Description: 蚂蚁链节点所有者查询
   * Summary: 蚂蚁链节点所有者查询
   */
  async queryBrowserNodeOwner(request: QueryBrowserNodeOwnerRequest): Promise<QueryBrowserNodeOwnerResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryBrowserNodeOwnerEx(request, headers, runtime);
  }

  /**
   * Description: 蚂蚁链节点所有者查询
   * Summary: 蚂蚁链节点所有者查询
   */
  async queryBrowserNodeOwnerEx(request: QueryBrowserNodeOwnerRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryBrowserNodeOwnerResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryBrowserNodeOwnerResponse>(await this.doRequest("1.0", "baas.browser.node.owner.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryBrowserNodeOwnerResponse({}));
  }

  /**
   * Description: 小程序权限删除
   * Summary: 小程序权限删除
   */
  async deleteBlockchainMiniprogram(request: DeleteBlockchainMiniprogramRequest): Promise<DeleteBlockchainMiniprogramResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.deleteBlockchainMiniprogramEx(request, headers, runtime);
  }

  /**
   * Description: 小程序权限删除
   * Summary: 小程序权限删除
   */
  async deleteBlockchainMiniprogramEx(request: DeleteBlockchainMiniprogramRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<DeleteBlockchainMiniprogramResponse> {
    Util.validateModel(request);
    return $tea.cast<DeleteBlockchainMiniprogramResponse>(await this.doRequest("1.0", "baas.blockchain.miniprogram.delete", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new DeleteBlockchainMiniprogramResponse({}));
  }

  /**
   * Description: 查询用户链上交易移动端查看权限
   * Summary: 查询用户链上交易移动端查看权限
   */
  async queryBlockchainMiniprogram(request: QueryBlockchainMiniprogramRequest): Promise<QueryBlockchainMiniprogramResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryBlockchainMiniprogramEx(request, headers, runtime);
  }

  /**
   * Description: 查询用户链上交易移动端查看权限
   * Summary: 查询用户链上交易移动端查看权限
   */
  async queryBlockchainMiniprogramEx(request: QueryBlockchainMiniprogramRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryBlockchainMiniprogramResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryBlockchainMiniprogramResponse>(await this.doRequest("1.0", "baas.blockchain.miniprogram.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryBlockchainMiniprogramResponse({}));
  }

  /**
   * Description: 物流金融信用流转能力注册开通结果查询
   * Summary: 物流金融信用流转能力注册开通结果查询
   */
  async queryCreditTransferApply(request: QueryCreditTransferApplyRequest): Promise<QueryCreditTransferApplyResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryCreditTransferApplyEx(request, headers, runtime);
  }

  /**
   * Description: 物流金融信用流转能力注册开通结果查询
   * Summary: 物流金融信用流转能力注册开通结果查询
   */
  async queryCreditTransferApplyEx(request: QueryCreditTransferApplyRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryCreditTransferApplyResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryCreditTransferApplyResponse>(await this.doRequest("1.0", "baas.credit.transfer.apply.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryCreditTransferApplyResponse({}));
  }

  /**
   * Description: 物流金融信用流转额度查询，仅显示是否有额度，不会返回具体额度
   * Summary: 物流金融信用流转额度查询
   */
  async queryCreditTransferBalance(request: QueryCreditTransferBalanceRequest): Promise<QueryCreditTransferBalanceResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryCreditTransferBalanceEx(request, headers, runtime);
  }

  /**
   * Description: 物流金融信用流转额度查询，仅显示是否有额度，不会返回具体额度
   * Summary: 物流金融信用流转额度查询
   */
  async queryCreditTransferBalanceEx(request: QueryCreditTransferBalanceRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryCreditTransferBalanceResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryCreditTransferBalanceResponse>(await this.doRequest("1.0", "baas.credit.transfer.balance.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryCreditTransferBalanceResponse({}));
  }

  /**
   * Description: 物流金融信用流转通过id查询发行结果
   * Summary: 物流金融信用流转通过id查询发行结果
   */
  async queryCreditTransferIssuebyid(request: QueryCreditTransferIssuebyidRequest): Promise<QueryCreditTransferIssuebyidResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryCreditTransferIssuebyidEx(request, headers, runtime);
  }

  /**
   * Description: 物流金融信用流转通过id查询发行结果
   * Summary: 物流金融信用流转通过id查询发行结果
   */
  async queryCreditTransferIssuebyidEx(request: QueryCreditTransferIssuebyidRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryCreditTransferIssuebyidResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryCreditTransferIssuebyidResponse>(await this.doRequest("1.0", "baas.credit.transfer.issuebyid.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryCreditTransferIssuebyidResponse({}));
  }

  /**
   * Description: 物流金融根据时间查询信用凭证信息
   * Summary: 物流金融根据时间查询信用流转信息
   */
  async queryCreditTransferIssuebytime(request: QueryCreditTransferIssuebytimeRequest): Promise<QueryCreditTransferIssuebytimeResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryCreditTransferIssuebytimeEx(request, headers, runtime);
  }

  /**
   * Description: 物流金融根据时间查询信用凭证信息
   * Summary: 物流金融根据时间查询信用流转信息
   */
  async queryCreditTransferIssuebytimeEx(request: QueryCreditTransferIssuebytimeRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryCreditTransferIssuebytimeResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryCreditTransferIssuebytimeResponse>(await this.doRequest("1.0", "baas.credit.transfer.issuebytime.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryCreditTransferIssuebytimeResponse({}));
  }

  /**
   * Description: 物流金融信用流转流水查询
   * Summary: 物流金融信用流转流水查询
   */
  async queryCreditTransferStatement(request: QueryCreditTransferStatementRequest): Promise<QueryCreditTransferStatementResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryCreditTransferStatementEx(request, headers, runtime);
  }

  /**
   * Description: 物流金融信用流转流水查询
   * Summary: 物流金融信用流转流水查询
   */
  async queryCreditTransferStatementEx(request: QueryCreditTransferStatementRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryCreditTransferStatementResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryCreditTransferStatementResponse>(await this.doRequest("1.0", "baas.credit.transfer.statement.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryCreditTransferStatementResponse({}));
  }

  /**
   * Description: 物流金融信用流转主站系统回调
   * Summary: 物流金融信用流转主站系统回调
   */
  async callbackCreditTransfer(request: CallbackCreditTransferRequest): Promise<CallbackCreditTransferResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.callbackCreditTransferEx(request, headers, runtime);
  }

  /**
   * Description: 物流金融信用流转主站系统回调
   * Summary: 物流金融信用流转主站系统回调
   */
  async callbackCreditTransferEx(request: CallbackCreditTransferRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CallbackCreditTransferResponse> {
    Util.validateModel(request);
    return $tea.cast<CallbackCreditTransferResponse>(await this.doRequest("1.0", "baas.credit.transfer.callback", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CallbackCreditTransferResponse({}));
  }

  /**
   * Description: 外部业务方可以给DIS的C端小程序用户颁发声明（VC）用户特定场景
   * Summary: 推送业务方给用户颁发的声明内容
   */
  async pushAuthUserVc(request: PushAuthUserVcRequest): Promise<PushAuthUserVcResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.pushAuthUserVcEx(request, headers, runtime);
  }

  /**
   * Description: 外部业务方可以给DIS的C端小程序用户颁发声明（VC）用户特定场景
   * Summary: 推送业务方给用户颁发的声明内容
   */
  async pushAuthUserVcEx(request: PushAuthUserVcRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<PushAuthUserVcResponse> {
    Util.validateModel(request);
    return $tea.cast<PushAuthUserVcResponse>(await this.doRequest("1.0", "baas.auth.user.vc.push", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new PushAuthUserVcResponse({}));
  }

  /**
   * Description: 业务方推送需要用户使用数字身份did授权确认的声明，推送后可根据自定义的业务id（biz_id）来查询状态（另提供接口），进而获取用户授权后的声明。
   * Summary: 推送需要用户端授权的业务声明
   */
  async pushAuthClaimVc(request: PushAuthClaimVcRequest): Promise<PushAuthClaimVcResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.pushAuthClaimVcEx(request, headers, runtime);
  }

  /**
   * Description: 业务方推送需要用户使用数字身份did授权确认的声明，推送后可根据自定义的业务id（biz_id）来查询状态（另提供接口），进而获取用户授权后的声明。
   * Summary: 推送需要用户端授权的业务声明
   */
  async pushAuthClaimVcEx(request: PushAuthClaimVcRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<PushAuthClaimVcResponse> {
    Util.validateModel(request);
    return $tea.cast<PushAuthClaimVcResponse>(await this.doRequest("1.0", "baas.auth.claim.vc.push", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new PushAuthClaimVcResponse({}));
  }

  /**
   * Description: 业务方通过提供二维码的方式引导用户支付宝扫描创建did，然后业务方通过此接口可查询用户新建的did
   * Summary: 通过biz_id获取用户的did
   */
  async pullAuthUserDid(request: PullAuthUserDidRequest): Promise<PullAuthUserDidResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.pullAuthUserDidEx(request, headers, runtime);
  }

  /**
   * Description: 业务方通过提供二维码的方式引导用户支付宝扫描创建did，然后业务方通过此接口可查询用户新建的did
   * Summary: 通过biz_id获取用户的did
   */
  async pullAuthUserDidEx(request: PullAuthUserDidRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<PullAuthUserDidResponse> {
    Util.validateModel(request);
    return $tea.cast<PullAuthUserDidResponse>(await this.doRequest("1.0", "baas.auth.user.did.pull", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new PullAuthUserDidResponse({}));
  }

  /**
   * Description: 业务方通过此接口可以查询，申请用户授权的声明状态，如果用户已授权即可获取到授权后的声明（vc）内容。
   * Summary: 获取申请用户声明的授权结果
   */
  async pullAuthClaimVc(request: PullAuthClaimVcRequest): Promise<PullAuthClaimVcResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.pullAuthClaimVcEx(request, headers, runtime);
  }

  /**
   * Description: 业务方通过此接口可以查询，申请用户授权的声明状态，如果用户已授权即可获取到授权后的声明（vc）内容。
   * Summary: 获取申请用户声明的授权结果
   */
  async pullAuthClaimVcEx(request: PullAuthClaimVcRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<PullAuthClaimVcResponse> {
    Util.validateModel(request);
    return $tea.cast<PullAuthClaimVcResponse>(await this.doRequest("1.0", "baas.auth.claim.vc.pull", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new PullAuthClaimVcResponse({}));
  }

  /**
   * Description: 业务系统通过授权宝服务帮忙给用户创建did，此接口访问需预先在授权宝配置白名单开通。
   * Summary: 给用户创建did，需要指定userId
   */
  async createAuthUserDid(request: CreateAuthUserDidRequest): Promise<CreateAuthUserDidResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.createAuthUserDidEx(request, headers, runtime);
  }

  /**
   * Description: 业务系统通过授权宝服务帮忙给用户创建did，此接口访问需预先在授权宝配置白名单开通。
   * Summary: 给用户创建did，需要指定userId
   */
  async createAuthUserDidEx(request: CreateAuthUserDidRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CreateAuthUserDidResponse> {
    Util.validateModel(request);
    return $tea.cast<CreateAuthUserDidResponse>(await this.doRequest("1.0", "baas.auth.user.did.create", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CreateAuthUserDidResponse({}));
  }

  /**
   * Description: 给企业DID创建DID，通常场景为对授权宝服务的开通，调用方对企业有认证能力。
   * Summary: 创建企业DID，开通授权宝服务
   */
  async createAuthCorporateDid(request: CreateAuthCorporateDidRequest): Promise<CreateAuthCorporateDidResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.createAuthCorporateDidEx(request, headers, runtime);
  }

  /**
   * Description: 给企业DID创建DID，通常场景为对授权宝服务的开通，调用方对企业有认证能力。
   * Summary: 创建企业DID，开通授权宝服务
   */
  async createAuthCorporateDidEx(request: CreateAuthCorporateDidRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CreateAuthCorporateDidResponse> {
    Util.validateModel(request);
    return $tea.cast<CreateAuthCorporateDidResponse>(await this.doRequest("1.0", "baas.auth.corporate.did.create", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CreateAuthCorporateDidResponse({}));
  }

  /**
   * Description: 业务方的C端用户授权颁发“可验证声明”（简称VC）之后，就会异步推送结果给相关业务服务端，如果相关业务服务端没有接收到，或者本地缓存过期，则可以通过此接口到授权宝再次查询目标可验证声明结果情况。
   * Summary: 查询目标可验证声明结果
   */
  async pullAuthWebpageVc(request: PullAuthWebpageVcRequest): Promise<PullAuthWebpageVcResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.pullAuthWebpageVcEx(request, headers, runtime);
  }

  /**
   * Description: 业务方的C端用户授权颁发“可验证声明”（简称VC）之后，就会异步推送结果给相关业务服务端，如果相关业务服务端没有接收到，或者本地缓存过期，则可以通过此接口到授权宝再次查询目标可验证声明结果情况。
   * Summary: 查询目标可验证声明结果
   */
  async pullAuthWebpageVcEx(request: PullAuthWebpageVcRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<PullAuthWebpageVcResponse> {
    Util.validateModel(request);
    return $tea.cast<PullAuthWebpageVcResponse>(await this.doRequest("1.0", "baas.auth.webpage.vc.pull", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new PullAuthWebpageVcResponse({}));
  }

  /**
   * Description: 此接口提供了授权宝这边可用的H5页面的Url，此Url会携带一些参数：授权宝鉴权token(JWT机制生成，内部使用)、bizId(接口入参带入)
   * Summary: 获取授权宝侧的H5授权Url
   */
  async pullAuthWebpageUrl(request: PullAuthWebpageUrlRequest): Promise<PullAuthWebpageUrlResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.pullAuthWebpageUrlEx(request, headers, runtime);
  }

  /**
   * Description: 此接口提供了授权宝这边可用的H5页面的Url，此Url会携带一些参数：授权宝鉴权token(JWT机制生成，内部使用)、bizId(接口入参带入)
   * Summary: 获取授权宝侧的H5授权Url
   */
  async pullAuthWebpageUrlEx(request: PullAuthWebpageUrlRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<PullAuthWebpageUrlResponse> {
    Util.validateModel(request);
    return $tea.cast<PullAuthWebpageUrlResponse>(await this.doRequest("1.0", "baas.auth.webpage.url.pull", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new PullAuthWebpageUrlResponse({}));
  }

  /**
   * Description: 在一些业务场景，指定可验证声明之后，根据bizType的类型，直接发生代理颁发可验证声明的操作。
   * Summary: 给定声明内容并颁发声明
   */
  async startAuthVcAuth(request: StartAuthVcAuthRequest): Promise<StartAuthVcAuthResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.startAuthVcAuthEx(request, headers, runtime);
  }

  /**
   * Description: 在一些业务场景，指定可验证声明之后，根据bizType的类型，直接发生代理颁发可验证声明的操作。
   * Summary: 给定声明内容并颁发声明
   */
  async startAuthVcAuthEx(request: StartAuthVcAuthRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<StartAuthVcAuthResponse> {
    Util.validateModel(request);
    return $tea.cast<StartAuthVcAuthResponse>(await this.doRequest("1.0", "baas.auth.vc.auth.start", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new StartAuthVcAuthResponse({}));
  }

  /**
   * Description: 可验证声明（VC）的拥有者（vcContent中的subject）可以将声明分享权限给其它的DID。
   * Summary: 将目标的声明内容，分享权限给目标的DID
   */
  async startAuthVcShare(request: StartAuthVcShareRequest): Promise<StartAuthVcShareResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.startAuthVcShareEx(request, headers, runtime);
  }

  /**
   * Description: 可验证声明（VC）的拥有者（vcContent中的subject）可以将声明分享权限给其它的DID。
   * Summary: 将目标的声明内容，分享权限给目标的DID
   */
  async startAuthVcShareEx(request: StartAuthVcShareRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<StartAuthVcShareResponse> {
    Util.validateModel(request);
    return $tea.cast<StartAuthVcShareResponse>(await this.doRequest("1.0", "baas.auth.vc.share.start", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new StartAuthVcShareResponse({}));
  }

  /**
   * Description: 通过指定可验证声明id，获取目标可验证声明内容，需要可验证声明的拥有者分享声明才可查询，如果没有权限则获取失败。
   * Summary: 获取目标可验证声明内容
   */
  async queryAuthVcContent(request: QueryAuthVcContentRequest): Promise<QueryAuthVcContentResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryAuthVcContentEx(request, headers, runtime);
  }

  /**
   * Description: 通过指定可验证声明id，获取目标可验证声明内容，需要可验证声明的拥有者分享声明才可查询，如果没有权限则获取失败。
   * Summary: 获取目标可验证声明内容
   */
  async queryAuthVcContentEx(request: QueryAuthVcContentRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryAuthVcContentResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryAuthVcContentResponse>(await this.doRequest("1.0", "baas.auth.vc.content.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryAuthVcContentResponse({}));
  }

  /**
   * Description: 业务系统通过授权宝服务帮忙给C类用户创建did，此接口访问需预先在授权宝配置白名单开通。
   * Summary: 给C类用户建did，需要指定user信息
   */
  async createAuthUserinfoDid(request: CreateAuthUserinfoDidRequest): Promise<CreateAuthUserinfoDidResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.createAuthUserinfoDidEx(request, headers, runtime);
  }

  /**
   * Description: 业务系统通过授权宝服务帮忙给C类用户创建did，此接口访问需预先在授权宝配置白名单开通。
   * Summary: 给C类用户建did，需要指定user信息
   */
  async createAuthUserinfoDidEx(request: CreateAuthUserinfoDidRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CreateAuthUserinfoDidResponse> {
    Util.validateModel(request);
    return $tea.cast<CreateAuthUserinfoDidResponse>(await this.doRequest("1.0", "baas.auth.userinfo.did.create", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CreateAuthUserinfoDidResponse({}));
  }

  /**
   * Description: 声明的持有者可以吊销一个已颁发的可验证声明(VC)
   * Summary: 吊销已颁发声明
   */
  async startAuthVcRevoke(request: StartAuthVcRevokeRequest): Promise<StartAuthVcRevokeResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.startAuthVcRevokeEx(request, headers, runtime);
  }

  /**
   * Description: 声明的持有者可以吊销一个已颁发的可验证声明(VC)
   * Summary: 吊销已颁发声明
   */
  async startAuthVcRevokeEx(request: StartAuthVcRevokeRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<StartAuthVcRevokeResponse> {
    Util.validateModel(request);
    return $tea.cast<StartAuthVcRevokeResponse>(await this.doRequest("1.0", "baas.auth.vc.revoke.start", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new StartAuthVcRevokeResponse({}));
  }

  /**
   * Description: 将可验证声明内的数据资产内容赠送给目标的did
   * Summary: 将vc赠送给一个目标did
   */
  async startAuthVcGive(request: StartAuthVcGiveRequest): Promise<StartAuthVcGiveResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.startAuthVcGiveEx(request, headers, runtime);
  }

  /**
   * Description: 将可验证声明内的数据资产内容赠送给目标的did
   * Summary: 将vc赠送给一个目标did
   */
  async startAuthVcGiveEx(request: StartAuthVcGiveRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<StartAuthVcGiveResponse> {
    Util.validateModel(request);
    return $tea.cast<StartAuthVcGiveResponse>(await this.doRequest("1.0", "baas.auth.vc.give.start", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new StartAuthVcGiveResponse({}));
  }

  /**
   * Description: 提供批量分享可验证声明到目标did
   * Summary: 批量分享VC内容
   */
  async startAuthVcSharebatch(request: StartAuthVcSharebatchRequest): Promise<StartAuthVcSharebatchResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.startAuthVcSharebatchEx(request, headers, runtime);
  }

  /**
   * Description: 提供批量分享可验证声明到目标did
   * Summary: 批量分享VC内容
   */
  async startAuthVcSharebatchEx(request: StartAuthVcSharebatchRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<StartAuthVcSharebatchResponse> {
    Util.validateModel(request);
    return $tea.cast<StartAuthVcSharebatchResponse>(await this.doRequest("1.0", "baas.auth.vc.sharebatch.start", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new StartAuthVcSharebatchResponse({}));
  }

  /**
   * Description: 如果机构没有接入网关能力需要合作方代理在授权宝管理签名能力，可使用此接口。
  初始申请创建此corp did的调用方，有权限申请签名。
   * Summary: 代理签名
   */
  async startAuthCorporateSign(request: StartAuthCorporateSignRequest): Promise<StartAuthCorporateSignResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.startAuthCorporateSignEx(request, headers, runtime);
  }

  /**
   * Description: 如果机构没有接入网关能力需要合作方代理在授权宝管理签名能力，可使用此接口。
  初始申请创建此corp did的调用方，有权限申请签名。
   * Summary: 代理签名
   */
  async startAuthCorporateSignEx(request: StartAuthCorporateSignRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<StartAuthCorporateSignResponse> {
    Util.validateModel(request);
    return $tea.cast<StartAuthCorporateSignResponse>(await this.doRequest("1.0", "baas.auth.corporate.sign.start", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new StartAuthCorporateSignResponse({}));
  }

  /**
   * Description: 在一些业务场景，指定可验证声明之后，提交颁发可验证声明的操作。当前接口支持批量颁发声明，通常支持对多机构的数据授权。
   * Summary: 批量给定声明内容颁发声明，并上链存证
   */
  async startAuthVcBatchauth(request: StartAuthVcBatchauthRequest): Promise<StartAuthVcBatchauthResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.startAuthVcBatchauthEx(request, headers, runtime);
  }

  /**
   * Description: 在一些业务场景，指定可验证声明之后，提交颁发可验证声明的操作。当前接口支持批量颁发声明，通常支持对多机构的数据授权。
   * Summary: 批量给定声明内容颁发声明，并上链存证
   */
  async startAuthVcBatchauthEx(request: StartAuthVcBatchauthRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<StartAuthVcBatchauthResponse> {
    Util.validateModel(request);
    return $tea.cast<StartAuthVcBatchauthResponse>(await this.doRequest("1.0", "baas.auth.vc.batchauth.start", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new StartAuthVcBatchauthResponse({}));
  }

  /**
   * Description: 将已颁发的可验证声明进行吊销，然后重新颁发一个新的可验证声明用于代替原有的业务语义的可验证声明。
   * Summary: 将已颁发的可验证声明进行重置替换
   */
  async startAuthVcReplace(request: StartAuthVcReplaceRequest): Promise<StartAuthVcReplaceResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.startAuthVcReplaceEx(request, headers, runtime);
  }

  /**
   * Description: 将已颁发的可验证声明进行吊销，然后重新颁发一个新的可验证声明用于代替原有的业务语义的可验证声明。
   * Summary: 将已颁发的可验证声明进行重置替换
   */
  async startAuthVcReplaceEx(request: StartAuthVcReplaceRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<StartAuthVcReplaceResponse> {
    Util.validateModel(request);
    return $tea.cast<StartAuthVcReplaceResponse>(await this.doRequest("1.0", "baas.auth.vc.replace.start", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new StartAuthVcReplaceResponse({}));
  }

  /**
   * Description: 推送保单信息
   * Summary: 推送保单信息
   */
  async pushAuthInsurancePolicy(request: PushAuthInsurancePolicyRequest): Promise<PushAuthInsurancePolicyResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.pushAuthInsurancePolicyEx(request, headers, runtime);
  }

  /**
   * Description: 推送保单信息
   * Summary: 推送保单信息
   */
  async pushAuthInsurancePolicyEx(request: PushAuthInsurancePolicyRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<PushAuthInsurancePolicyResponse> {
    Util.validateModel(request);
    return $tea.cast<PushAuthInsurancePolicyResponse>(await this.doRequest("1.0", "baas.auth.insurance.policy.push", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new PushAuthInsurancePolicyResponse({}));
  }

  /**
   * Description: 获取前端sdk使用的token
   * Summary: 获取前端sdk使用的token
   */
  async getAuthFrontendAccesstoken(request: GetAuthFrontendAccesstokenRequest): Promise<GetAuthFrontendAccesstokenResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.getAuthFrontendAccesstokenEx(request, headers, runtime);
  }

  /**
   * Description: 获取前端sdk使用的token
   * Summary: 获取前端sdk使用的token
   */
  async getAuthFrontendAccesstokenEx(request: GetAuthFrontendAccesstokenRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<GetAuthFrontendAccesstokenResponse> {
    Util.validateModel(request);
    return $tea.cast<GetAuthFrontendAccesstokenResponse>(await this.doRequest("1.0", "baas.auth.frontend.accesstoken.get", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new GetAuthFrontendAccesstokenResponse({}));
  }

  /**
   * Description: 获取声明授权链接
   * Summary: 获取声明授权链接
   */
  async createAuthClaimUrl(request: CreateAuthClaimUrlRequest): Promise<CreateAuthClaimUrlResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.createAuthClaimUrlEx(request, headers, runtime);
  }

  /**
   * Description: 获取声明授权链接
   * Summary: 获取声明授权链接
   */
  async createAuthClaimUrlEx(request: CreateAuthClaimUrlRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CreateAuthClaimUrlResponse> {
    Util.validateModel(request);
    return $tea.cast<CreateAuthClaimUrlResponse>(await this.doRequest("1.0", "baas.auth.claim.url.create", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CreateAuthClaimUrlResponse({}));
  }

  /**
   * Description: 行驶证核身授权
   * Summary: 授权宝个人信息授权，行驶证核身授权
   */
  async startAuthVerifyCarinfo(request: StartAuthVerifyCarinfoRequest): Promise<StartAuthVerifyCarinfoResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.startAuthVerifyCarinfoEx(request, headers, runtime);
  }

  /**
   * Description: 行驶证核身授权
   * Summary: 授权宝个人信息授权，行驶证核身授权
   */
  async startAuthVerifyCarinfoEx(request: StartAuthVerifyCarinfoRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<StartAuthVerifyCarinfoResponse> {
    Util.validateModel(request);
    return $tea.cast<StartAuthVerifyCarinfoResponse>(await this.doRequest("1.0", "baas.auth.verify.carinfo.start", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new StartAuthVerifyCarinfoResponse({}));
  }

  /**
   * Description: 驾驶证相关信息核验并核身，并且结合授权宝完成授权。
   * Summary: 授权宝个人信息授权，驾驶证核身授权
   */
  async startAuthVerifyDriverinfo(request: StartAuthVerifyDriverinfoRequest): Promise<StartAuthVerifyDriverinfoResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.startAuthVerifyDriverinfoEx(request, headers, runtime);
  }

  /**
   * Description: 驾驶证相关信息核验并核身，并且结合授权宝完成授权。
   * Summary: 授权宝个人信息授权，驾驶证核身授权
   */
  async startAuthVerifyDriverinfoEx(request: StartAuthVerifyDriverinfoRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<StartAuthVerifyDriverinfoResponse> {
    Util.validateModel(request);
    return $tea.cast<StartAuthVerifyDriverinfoResponse>(await this.doRequest("1.0", "baas.auth.verify.driverinfo.start", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new StartAuthVerifyDriverinfoResponse({}));
  }

  /**
   * Description: 检查车牌是否进行年检，当前状态，以及年检有效期止。
   * Summary: 车检查询核验，目标车牌年检状态
   */
  async startAuthVerifyCarinspect(request: StartAuthVerifyCarinspectRequest): Promise<StartAuthVerifyCarinspectResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.startAuthVerifyCarinspectEx(request, headers, runtime);
  }

  /**
   * Description: 检查车牌是否进行年检，当前状态，以及年检有效期止。
   * Summary: 车检查询核验，目标车牌年检状态
   */
  async startAuthVerifyCarinspectEx(request: StartAuthVerifyCarinspectRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<StartAuthVerifyCarinspectResponse> {
    Util.validateModel(request);
    return $tea.cast<StartAuthVerifyCarinspectResponse>(await this.doRequest("1.0", "baas.auth.verify.carinspect.start", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new StartAuthVerifyCarinspectResponse({}));
  }

  /**
   * Description: 获取授权声明模版
   * Summary: 获取授权声明模版
   */
  async getAuthClaimTemplate(request: GetAuthClaimTemplateRequest): Promise<GetAuthClaimTemplateResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.getAuthClaimTemplateEx(request, headers, runtime);
  }

  /**
   * Description: 获取授权声明模版
   * Summary: 获取授权声明模版
   */
  async getAuthClaimTemplateEx(request: GetAuthClaimTemplateRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<GetAuthClaimTemplateResponse> {
    Util.validateModel(request);
    return $tea.cast<GetAuthClaimTemplateResponse>(await this.doRequest("1.0", "baas.auth.claim.template.get", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new GetAuthClaimTemplateResponse({}));
  }

  /**
   * Description: 通过claim创建vc
   * Summary: 通过claim创建vc
   */
  async createAuthClaimVc(request: CreateAuthClaimVcRequest): Promise<CreateAuthClaimVcResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.createAuthClaimVcEx(request, headers, runtime);
  }

  /**
   * Description: 通过claim创建vc
   * Summary: 通过claim创建vc
   */
  async createAuthClaimVcEx(request: CreateAuthClaimVcRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CreateAuthClaimVcResponse> {
    Util.validateModel(request);
    return $tea.cast<CreateAuthClaimVcResponse>(await this.doRequest("1.0", "baas.auth.claim.vc.create", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CreateAuthClaimVcResponse({}));
  }

  /**
   * Description: 查询vc详情
   * Summary: 查询vc详情
   */
  async queryAuthClaimVc(request: QueryAuthClaimVcRequest): Promise<QueryAuthClaimVcResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryAuthClaimVcEx(request, headers, runtime);
  }

  /**
   * Description: 查询vc详情
   * Summary: 查询vc详情
   */
  async queryAuthClaimVcEx(request: QueryAuthClaimVcRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryAuthClaimVcResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryAuthClaimVcResponse>(await this.doRequest("1.0", "baas.auth.claim.vc.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryAuthClaimVcResponse({}));
  }

  /**
   * Description: 车辆投保日期查询(存量)
   * Summary: 车辆投保日期查询(存量)
   */
  async queryAuthVehicleinsurance(request: QueryAuthVehicleinsuranceRequest): Promise<QueryAuthVehicleinsuranceResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryAuthVehicleinsuranceEx(request, headers, runtime);
  }

  /**
   * Description: 车辆投保日期查询(存量)
   * Summary: 车辆投保日期查询(存量)
   */
  async queryAuthVehicleinsuranceEx(request: QueryAuthVehicleinsuranceRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryAuthVehicleinsuranceResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryAuthVehicleinsuranceResponse>(await this.doRequest("1.0", "baas.auth.vehicleinsurance.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryAuthVehicleinsuranceResponse({}));
  }

  /**
   * Description: 车辆投保日期查询(增量)
   * Summary: 车辆投保日期查询(增量)
   */
  async queryAuthVehicleinsuranceVc(request: QueryAuthVehicleinsuranceVcRequest): Promise<QueryAuthVehicleinsuranceVcResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryAuthVehicleinsuranceVcEx(request, headers, runtime);
  }

  /**
   * Description: 车辆投保日期查询(增量)
   * Summary: 车辆投保日期查询(增量)
   */
  async queryAuthVehicleinsuranceVcEx(request: QueryAuthVehicleinsuranceVcRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryAuthVehicleinsuranceVcResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryAuthVehicleinsuranceVcResponse>(await this.doRequest("1.0", "baas.auth.vehicleinsurance.vc.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryAuthVehicleinsuranceVcResponse({}));
  }

  /**
   * Description: 查询在特定业务bizType下的凭证颁发的统计数据，以及按照day维度的分布情况。
   * Summary: 查询目标场景的凭证颁发的统计数据
   */
  async queryAuthVcStatistics(request: QueryAuthVcStatisticsRequest): Promise<QueryAuthVcStatisticsResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryAuthVcStatisticsEx(request, headers, runtime);
  }

  /**
   * Description: 查询在特定业务bizType下的凭证颁发的统计数据，以及按照day维度的分布情况。
   * Summary: 查询目标场景的凭证颁发的统计数据
   */
  async queryAuthVcStatisticsEx(request: QueryAuthVcStatisticsRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryAuthVcStatisticsResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryAuthVcStatisticsResponse>(await this.doRequest("1.0", "baas.auth.vc.statistics.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryAuthVcStatisticsResponse({}));
  }

  /**
   * Description: 查询目标业务凭证的实时颁发的情况，返回一个列表。
   * Summary: 查询目标业务凭证颁发的实时列表情况
   */
  async queryAuthVcRealtime(request: QueryAuthVcRealtimeRequest): Promise<QueryAuthVcRealtimeResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryAuthVcRealtimeEx(request, headers, runtime);
  }

  /**
   * Description: 查询目标业务凭证的实时颁发的情况，返回一个列表。
   * Summary: 查询目标业务凭证颁发的实时列表情况
   */
  async queryAuthVcRealtimeEx(request: QueryAuthVcRealtimeRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryAuthVcRealtimeResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryAuthVcRealtimeResponse>(await this.doRequest("1.0", "baas.auth.vc.realtime.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryAuthVcRealtimeResponse({}));
  }

  /**
   * Description: 在机构颁发凭证的情况下，机构的可信度和状态会影响颁发的凭证的有效性和影响，因此提供接口查询机构状态。
   * Summary: 特定场景下使用，查询机构状态
   */
  async queryAuthOrgStatus(request: QueryAuthOrgStatusRequest): Promise<QueryAuthOrgStatusResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryAuthOrgStatusEx(request, headers, runtime);
  }

  /**
   * Description: 在机构颁发凭证的情况下，机构的可信度和状态会影响颁发的凭证的有效性和影响，因此提供接口查询机构状态。
   * Summary: 特定场景下使用，查询机构状态
   */
  async queryAuthOrgStatusEx(request: QueryAuthOrgStatusRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryAuthOrgStatusResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryAuthOrgStatusResponse>(await this.doRequest("1.0", "baas.auth.org.status.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryAuthOrgStatusResponse({}));
  }

  /**
   * Description: 预充值交易通过身份的凭证封装的方式在区块链上资产化。
   * Summary: 交易资产的归属
   */
  async startAuthAssetIssue(request: StartAuthAssetIssueRequest): Promise<StartAuthAssetIssueResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.startAuthAssetIssueEx(request, headers, runtime);
  }

  /**
   * Description: 预充值交易通过身份的凭证封装的方式在区块链上资产化。
   * Summary: 交易资产的归属
   */
  async startAuthAssetIssueEx(request: StartAuthAssetIssueRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<StartAuthAssetIssueResponse> {
    Util.validateModel(request);
    return $tea.cast<StartAuthAssetIssueResponse>(await this.doRequest("1.0", "baas.auth.asset.issue.start", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new StartAuthAssetIssueResponse({}));
  }

  /**
   * Description: 查询卡证模板的列表
   * Summary: 查询模板列表
   */
  async allAuthCertTemplate(request: AllAuthCertTemplateRequest): Promise<AllAuthCertTemplateResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.allAuthCertTemplateEx(request, headers, runtime);
  }

  /**
   * Description: 查询卡证模板的列表
   * Summary: 查询模板列表
   */
  async allAuthCertTemplateEx(request: AllAuthCertTemplateRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<AllAuthCertTemplateResponse> {
    Util.validateModel(request);
    return $tea.cast<AllAuthCertTemplateResponse>(await this.doRequest("1.0", "baas.auth.cert.template.all", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new AllAuthCertTemplateResponse({}));
  }

  /**
   * Description: 为客权业务定制化的编辑或新增证书实例，可以绕过审批流程
   * Summary: 编辑或新增证书实例
   */
  async saveAuthCertInstanceforcustom(request: SaveAuthCertInstanceforcustomRequest): Promise<SaveAuthCertInstanceforcustomResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.saveAuthCertInstanceforcustomEx(request, headers, runtime);
  }

  /**
   * Description: 为客权业务定制化的编辑或新增证书实例，可以绕过审批流程
   * Summary: 编辑或新增证书实例
   */
  async saveAuthCertInstanceforcustomEx(request: SaveAuthCertInstanceforcustomRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<SaveAuthCertInstanceforcustomResponse> {
    Util.validateModel(request);
    return $tea.cast<SaveAuthCertInstanceforcustomResponse>(await this.doRequest("1.0", "baas.auth.cert.instanceforcustom.save", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new SaveAuthCertInstanceforcustomResponse({}));
  }

  /**
   * Description: 通过上传的领取人明细文件，为证书实例批量颁发证书
   * Summary: 批量颁发证书
   */
  async batchcreateAuthCert(request: BatchcreateAuthCertRequest): Promise<BatchcreateAuthCertResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.batchcreateAuthCertEx(request, headers, runtime);
  }

  /**
   * Description: 通过上传的领取人明细文件，为证书实例批量颁发证书
   * Summary: 批量颁发证书
   */
  async batchcreateAuthCertEx(request: BatchcreateAuthCertRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<BatchcreateAuthCertResponse> {
    Util.validateModel(request);
    return $tea.cast<BatchcreateAuthCertResponse>(await this.doRequest("1.0", "baas.auth.cert.batchcreate", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new BatchcreateAuthCertResponse({}));
  }

  /**
   * Description: 单个颁发证书
   * Summary: 颁发证书
   */
  async createAuthCert(request: CreateAuthCertRequest): Promise<CreateAuthCertResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.createAuthCertEx(request, headers, runtime);
  }

  /**
   * Description: 单个颁发证书
   * Summary: 颁发证书
   */
  async createAuthCertEx(request: CreateAuthCertRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CreateAuthCertResponse> {
    Util.validateModel(request);
    return $tea.cast<CreateAuthCertResponse>(await this.doRequest("1.0", "baas.auth.cert.create", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CreateAuthCertResponse({}));
  }

  /**
   * Description: 吊销已经颁发的证书
   * Summary: 吊销证书
   */
  async invalidateAuthCert(request: InvalidateAuthCertRequest): Promise<InvalidateAuthCertResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.invalidateAuthCertEx(request, headers, runtime);
  }

  /**
   * Description: 吊销已经颁发的证书
   * Summary: 吊销证书
   */
  async invalidateAuthCertEx(request: InvalidateAuthCertRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<InvalidateAuthCertResponse> {
    Util.validateModel(request);
    return $tea.cast<InvalidateAuthCertResponse>(await this.doRequest("1.0", "baas.auth.cert.invalidate", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new InvalidateAuthCertResponse({}));
  }

  /**
   * Description: 查询批量颁发证书的进度详情
   * Summary: 查询批量颁发证书的进度
   */
  async queryAuthCertProgress(request: QueryAuthCertProgressRequest): Promise<QueryAuthCertProgressResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryAuthCertProgressEx(request, headers, runtime);
  }

  /**
   * Description: 查询批量颁发证书的进度详情
   * Summary: 查询批量颁发证书的进度
   */
  async queryAuthCertProgressEx(request: QueryAuthCertProgressRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryAuthCertProgressResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryAuthCertProgressResponse>(await this.doRequest("1.0", "baas.auth.cert.progress.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryAuthCertProgressResponse({}));
  }

  /**
   * Description: 上传需要批量颁发的证书领取人明细csv文件到oss服务器，并返回文件的路径
   * Summary: 上传领取人明细csv文件
   */
  async uploadAuthCertInstance(request: UploadAuthCertInstanceRequest): Promise<UploadAuthCertInstanceResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.uploadAuthCertInstanceEx(request, headers, runtime);
  }

  /**
   * Description: 上传需要批量颁发的证书领取人明细csv文件到oss服务器，并返回文件的路径
   * Summary: 上传领取人明细csv文件
   */
  async uploadAuthCertInstanceEx(request: UploadAuthCertInstanceRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<UploadAuthCertInstanceResponse> {
    if (!Util.isUnset(request.fileObject)) {
      let uploadReq = new CreateAntcloudGatewayxFileUploadRequest({
        authToken: request.authToken,
        apiCode: "baas.auth.cert.instance.upload",
        fileName: request.fileObjectName,
      });
      let uploadResp = await this.createAntcloudGatewayxFileUploadEx(uploadReq, headers, runtime);
      if (!AntchainUtil.isSuccess(uploadResp.resultCode, "ok")) {
        let uploadAuthCertInstanceResponse = new UploadAuthCertInstanceResponse({
          reqMsgId: uploadResp.reqMsgId,
          resultCode: uploadResp.resultCode,
          resultMsg: uploadResp.resultMsg,
        });
        return uploadAuthCertInstanceResponse;
      }

      let uploadHeaders = AntchainUtil.parseUploadHeaders(uploadResp.uploadHeaders);
      await AntchainUtil.putObject(request.fileObject, uploadHeaders, uploadResp.uploadUrl);
      request.fileId = uploadResp.fileId;
      request.fileObject = null;
    }

    Util.validateModel(request);
    return $tea.cast<UploadAuthCertInstanceResponse>(await this.doRequest("1.0", "baas.auth.cert.instance.upload", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new UploadAuthCertInstanceResponse({}));
  }

  /**
   * Description:  编辑或新增证书实例
   * Summary:  编辑或新增证书实例
   */
  async saveAuthCertInstance(request: SaveAuthCertInstanceRequest): Promise<SaveAuthCertInstanceResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.saveAuthCertInstanceEx(request, headers, runtime);
  }

  /**
   * Description:  编辑或新增证书实例
   * Summary:  编辑或新增证书实例
   */
  async saveAuthCertInstanceEx(request: SaveAuthCertInstanceRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<SaveAuthCertInstanceResponse> {
    Util.validateModel(request);
    return $tea.cast<SaveAuthCertInstanceResponse>(await this.doRequest("1.0", "baas.auth.cert.instance.save", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new SaveAuthCertInstanceResponse({}));
  }

  /**
   * Description: 状态为编辑中的证书实例，调用此接口提交审核
   * Summary: 证书实例提交审核
   */
  async applyAuthCertInstance(request: ApplyAuthCertInstanceRequest): Promise<ApplyAuthCertInstanceResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.applyAuthCertInstanceEx(request, headers, runtime);
  }

  /**
   * Description: 状态为编辑中的证书实例，调用此接口提交审核
   * Summary: 证书实例提交审核
   */
  async applyAuthCertInstanceEx(request: ApplyAuthCertInstanceRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<ApplyAuthCertInstanceResponse> {
    Util.validateModel(request);
    return $tea.cast<ApplyAuthCertInstanceResponse>(await this.doRequest("1.0", "baas.auth.cert.instance.apply", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new ApplyAuthCertInstanceResponse({}));
  }

  /**
   * Description: 向证书平台申请一个oss临时url，用来上传证书领取人csv文件，有效期30分钟
   * Summary: 获取证书领取人csv上传url
   */
  async getAuthCertInstancedataurl(request: GetAuthCertInstancedataurlRequest): Promise<GetAuthCertInstancedataurlResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.getAuthCertInstancedataurlEx(request, headers, runtime);
  }

  /**
   * Description: 向证书平台申请一个oss临时url，用来上传证书领取人csv文件，有效期30分钟
   * Summary: 获取证书领取人csv上传url
   */
  async getAuthCertInstancedataurlEx(request: GetAuthCertInstancedataurlRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<GetAuthCertInstancedataurlResponse> {
    Util.validateModel(request);
    return $tea.cast<GetAuthCertInstancedataurlResponse>(await this.doRequest("1.0", "baas.auth.cert.instancedataurl.get", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new GetAuthCertInstancedataurlResponse({}));
  }

  /**
   * Description: 证书平台创建自定义存证
   * Summary: 证书平台创建存证
   */
  async createAuthCertClaim(request: CreateAuthCertClaimRequest): Promise<CreateAuthCertClaimResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.createAuthCertClaimEx(request, headers, runtime);
  }

  /**
   * Description: 证书平台创建自定义存证
   * Summary: 证书平台创建存证
   */
  async createAuthCertClaimEx(request: CreateAuthCertClaimRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CreateAuthCertClaimResponse> {
    Util.validateModel(request);
    return $tea.cast<CreateAuthCertClaimResponse>(await this.doRequest("1.0", "baas.auth.cert.claim.create", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CreateAuthCertClaimResponse({}));
  }

  /**
   * Description: 证书平台查询用户自定义存证
   * Summary: 证书平台查询用户自定义存证
   */
  async queryAuthCertClaim(request: QueryAuthCertClaimRequest): Promise<QueryAuthCertClaimResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryAuthCertClaimEx(request, headers, runtime);
  }

  /**
   * Description: 证书平台查询用户自定义存证
   * Summary: 证书平台查询用户自定义存证
   */
  async queryAuthCertClaimEx(request: QueryAuthCertClaimRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryAuthCertClaimResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryAuthCertClaimResponse>(await this.doRequest("1.0", "baas.auth.cert.claim.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryAuthCertClaimResponse({}));
  }

  /**
   * Description: 生成查验证书存证的url
   * Summary: 生成查验证书存证的url
   */
  async createAuthCertClaimurl(request: CreateAuthCertClaimurlRequest): Promise<CreateAuthCertClaimurlResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.createAuthCertClaimurlEx(request, headers, runtime);
  }

  /**
   * Description: 生成查验证书存证的url
   * Summary: 生成查验证书存证的url
   */
  async createAuthCertClaimurlEx(request: CreateAuthCertClaimurlRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CreateAuthCertClaimurlResponse> {
    Util.validateModel(request);
    return $tea.cast<CreateAuthCertClaimurlResponse>(await this.doRequest("1.0", "baas.auth.cert.claimurl.create", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CreateAuthCertClaimurlResponse({}));
  }

  /**
   * Description: 获取用户已授权的最近存证信息，在理财风测卡场景获取最近的题目答案
   * Summary: 获取用户已授权的最近存证信息
   */
  async getAuthClaimRecent(request: GetAuthClaimRecentRequest): Promise<GetAuthClaimRecentResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.getAuthClaimRecentEx(request, headers, runtime);
  }

  /**
   * Description: 获取用户已授权的最近存证信息，在理财风测卡场景获取最近的题目答案
   * Summary: 获取用户已授权的最近存证信息
   */
  async getAuthClaimRecentEx(request: GetAuthClaimRecentRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<GetAuthClaimRecentResponse> {
    Util.validateModel(request);
    return $tea.cast<GetAuthClaimRecentResponse>(await this.doRequest("1.0", "baas.auth.claim.recent.get", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new GetAuthClaimRecentResponse({}));
  }

  /**
   * Description: 新的：baas.auth.contract.claim.exec
   * Summary: 合约调用_废弃
   */
  async execAuthContract(request: ExecAuthContractRequest): Promise<ExecAuthContractResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.execAuthContractEx(request, headers, runtime);
  }

  /**
   * Description: 新的：baas.auth.contract.claim.exec
   * Summary: 合约调用_废弃
   */
  async execAuthContractEx(request: ExecAuthContractRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<ExecAuthContractResponse> {
    Util.validateModel(request);
    return $tea.cast<ExecAuthContractResponse>(await this.doRequest("1.0", "baas.auth.contract.exec", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new ExecAuthContractResponse({}));
  }

  /**
   * Description: 查看用户对于某一场景的授权状态
   * Summary: 查看用户授权状态
   */
  async queryAuthSceneAuthstatus(request: QueryAuthSceneAuthstatusRequest): Promise<QueryAuthSceneAuthstatusResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryAuthSceneAuthstatusEx(request, headers, runtime);
  }

  /**
   * Description: 查看用户对于某一场景的授权状态
   * Summary: 查看用户授权状态
   */
  async queryAuthSceneAuthstatusEx(request: QueryAuthSceneAuthstatusRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryAuthSceneAuthstatusResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryAuthSceneAuthstatusResponse>(await this.doRequest("1.0", "baas.auth.scene.authstatus.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryAuthSceneAuthstatusResponse({}));
  }

  /**
   * Description: 使用调用方did注册的vc channel链上账户调用指定合约
   * Summary: 合约调用
   */
  async execAuthContractClaim(request: ExecAuthContractClaimRequest): Promise<ExecAuthContractClaimResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.execAuthContractClaimEx(request, headers, runtime);
  }

  /**
   * Description: 使用调用方did注册的vc channel链上账户调用指定合约
   * Summary: 合约调用
   */
  async execAuthContractClaimEx(request: ExecAuthContractClaimRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<ExecAuthContractClaimResponse> {
    Util.validateModel(request);
    return $tea.cast<ExecAuthContractClaimResponse>(await this.doRequest("1.0", "baas.auth.contract.claim.exec", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new ExecAuthContractClaimResponse({}));
  }

  /**
   * Description: B类用户获取证书查验页面二维码的url
   * Summary: 获取证书查验页面二维码的url
   */
  async createAuthCertDetailpageurl(request: CreateAuthCertDetailpageurlRequest): Promise<CreateAuthCertDetailpageurlResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.createAuthCertDetailpageurlEx(request, headers, runtime);
  }

  /**
   * Description: B类用户获取证书查验页面二维码的url
   * Summary: 获取证书查验页面二维码的url
   */
  async createAuthCertDetailpageurlEx(request: CreateAuthCertDetailpageurlRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CreateAuthCertDetailpageurlResponse> {
    Util.validateModel(request);
    return $tea.cast<CreateAuthCertDetailpageurlResponse>(await this.doRequest("1.0", "baas.auth.cert.detailpageurl.create", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CreateAuthCertDetailpageurlResponse({}));
  }

  /**
   * Description: 用户合约签约接口
   * Summary: 用户合约签约
   */
  async signAuthAgreementUser(request: SignAuthAgreementUserRequest): Promise<SignAuthAgreementUserResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.signAuthAgreementUserEx(request, headers, runtime);
  }

  /**
   * Description: 用户合约签约接口
   * Summary: 用户合约签约
   */
  async signAuthAgreementUserEx(request: SignAuthAgreementUserRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<SignAuthAgreementUserResponse> {
    Util.validateModel(request);
    return $tea.cast<SignAuthAgreementUserResponse>(await this.doRequest("1.0", "baas.auth.agreement.user.sign", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new SignAuthAgreementUserResponse({}));
  }

  /**
   * Description: 给指定用户发放POAP徽章
   * Summary: 给指定用户发放POAP徽章
   */
  async bindAuthPoap(request: BindAuthPoapRequest): Promise<BindAuthPoapResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.bindAuthPoapEx(request, headers, runtime);
  }

  /**
   * Description: 给指定用户发放POAP徽章
   * Summary: 给指定用户发放POAP徽章
   */
  async bindAuthPoapEx(request: BindAuthPoapRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<BindAuthPoapResponse> {
    Util.validateModel(request);
    return $tea.cast<BindAuthPoapResponse>(await this.doRequest("1.0", "baas.auth.poap.bind", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new BindAuthPoapResponse({}));
  }

  /**
   * Description: 根据ID查询POAP徽章详情
   * Summary: 查询POAP徽章详情
   */
  async queryAuthPoap(request: QueryAuthPoapRequest): Promise<QueryAuthPoapResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryAuthPoapEx(request, headers, runtime);
  }

  /**
   * Description: 根据ID查询POAP徽章详情
   * Summary: 查询POAP徽章详情
   */
  async queryAuthPoapEx(request: QueryAuthPoapRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryAuthPoapResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryAuthPoapResponse>(await this.doRequest("1.0", "baas.auth.poap.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryAuthPoapResponse({}));
  }

  /**
   * Description: 授权宝数据授权流程，需要请求方先进行请求记录。
   * Summary: 开启数据授权流程，首先记录授权请求
   */
  async startAuthData(request: StartAuthDataRequest): Promise<StartAuthDataResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.startAuthDataEx(request, headers, runtime);
  }

  /**
   * Description: 授权宝数据授权流程，需要请求方先进行请求记录。
   * Summary: 开启数据授权流程，首先记录授权请求
   */
  async startAuthDataEx(request: StartAuthDataRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<StartAuthDataResponse> {
    Util.validateModel(request);
    return $tea.cast<StartAuthDataResponse>(await this.doRequest("1.0", "baas.auth.data.start", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new StartAuthDataResponse({}));
  }

  /**
   * Description: 授权宝数据授权流程，调用方经过授权之后请求数据
   * Summary: 请求授权的数据，加密传输
   */
  async getAuthData(request: GetAuthDataRequest): Promise<GetAuthDataResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.getAuthDataEx(request, headers, runtime);
  }

  /**
   * Description: 授权宝数据授权流程，调用方经过授权之后请求数据
   * Summary: 请求授权的数据，加密传输
   */
  async getAuthDataEx(request: GetAuthDataRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<GetAuthDataResponse> {
    Util.validateModel(request);
    return $tea.cast<GetAuthDataResponse>(await this.doRequest("1.0", "baas.auth.data.get", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new GetAuthDataResponse({}));
  }

  /**
   * Description: 查询核身结果
   * Summary: 查询核身结果
   */
  async queryAuthIdentityauth(request: QueryAuthIdentityauthRequest): Promise<QueryAuthIdentityauthResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryAuthIdentityauthEx(request, headers, runtime);
  }

  /**
   * Description: 查询核身结果
   * Summary: 查询核身结果
   */
  async queryAuthIdentityauthEx(request: QueryAuthIdentityauthRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryAuthIdentityauthResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryAuthIdentityauthResponse>(await this.doRequest("1.0", "baas.auth.identityauth.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryAuthIdentityauthResponse({}));
  }

  /**
   * Description: 查询证书的详情h5链接
   * Summary: 查询证书的详情h5链接
   */
  async queryAuthCertDetailurl(request: QueryAuthCertDetailurlRequest): Promise<QueryAuthCertDetailurlResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryAuthCertDetailurlEx(request, headers, runtime);
  }

  /**
   * Description: 查询证书的详情h5链接
   * Summary: 查询证书的详情h5链接
   */
  async queryAuthCertDetailurlEx(request: QueryAuthCertDetailurlRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryAuthCertDetailurlResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryAuthCertDetailurlResponse>(await this.doRequest("1.0", "baas.auth.cert.detailurl.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryAuthCertDetailurlResponse({}));
  }

  /**
   * Description: 主站应用同步授权宝权益任务的完成情况
   * Summary: 主站应用同步授权宝权益任务的完成情况
   */
  async notifyAuthTaskStatus(request: NotifyAuthTaskStatusRequest): Promise<NotifyAuthTaskStatusResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.notifyAuthTaskStatusEx(request, headers, runtime);
  }

  /**
   * Description: 主站应用同步授权宝权益任务的完成情况
   * Summary: 主站应用同步授权宝权益任务的完成情况
   */
  async notifyAuthTaskStatusEx(request: NotifyAuthTaskStatusRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<NotifyAuthTaskStatusResponse> {
    Util.validateModel(request);
    return $tea.cast<NotifyAuthTaskStatusResponse>(await this.doRequest("1.0", "baas.auth.task.status.notify", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new NotifyAuthTaskStatusResponse({}));
  }

  /**
   * Description: 任务暂停
   * Summary: 任务暂停
   */
  async pauseAuthTask(request: PauseAuthTaskRequest): Promise<PauseAuthTaskResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.pauseAuthTaskEx(request, headers, runtime);
  }

  /**
   * Description: 任务暂停
   * Summary: 任务暂停
   */
  async pauseAuthTaskEx(request: PauseAuthTaskRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<PauseAuthTaskResponse> {
    Util.validateModel(request);
    return $tea.cast<PauseAuthTaskResponse>(await this.doRequest("1.0", "baas.auth.task.pause", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new PauseAuthTaskResponse({}));
  }

  /**
   * Description: 任务完成
   * Summary: 任务完成
   */
  async finishAuthTask(request: FinishAuthTaskRequest): Promise<FinishAuthTaskResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.finishAuthTaskEx(request, headers, runtime);
  }

  /**
   * Description: 任务完成
   * Summary: 任务完成
   */
  async finishAuthTaskEx(request: FinishAuthTaskRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<FinishAuthTaskResponse> {
    Util.validateModel(request);
    return $tea.cast<FinishAuthTaskResponse>(await this.doRequest("1.0", "baas.auth.task.finish", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new FinishAuthTaskResponse({}));
  }

  /**
   * Description: 任务重启
   * Summary: 任务重启
   */
  async reopenAuthTask(request: ReopenAuthTaskRequest): Promise<ReopenAuthTaskResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.reopenAuthTaskEx(request, headers, runtime);
  }

  /**
   * Description: 任务重启
   * Summary: 任务重启
   */
  async reopenAuthTaskEx(request: ReopenAuthTaskRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<ReopenAuthTaskResponse> {
    Util.validateModel(request);
    return $tea.cast<ReopenAuthTaskResponse>(await this.doRequest("1.0", "baas.auth.task.reopen", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new ReopenAuthTaskResponse({}));
  }

  /**
   * Description: 样本量修改
   * Summary: 样本量修改
   */
  async operateAuthTask(request: OperateAuthTaskRequest): Promise<OperateAuthTaskResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.operateAuthTaskEx(request, headers, runtime);
  }

  /**
   * Description: 样本量修改
   * Summary: 样本量修改
   */
  async operateAuthTaskEx(request: OperateAuthTaskRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<OperateAuthTaskResponse> {
    Util.validateModel(request);
    return $tea.cast<OperateAuthTaskResponse>(await this.doRequest("1.0", "baas.auth.task.operate", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new OperateAuthTaskResponse({}));
  }

  /**
   * Description: 查询人群标签取值范围
   * Summary: 查询人群标签取值范围
   */
  async queryAuthTask(request: QueryAuthTaskRequest): Promise<QueryAuthTaskResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryAuthTaskEx(request, headers, runtime);
  }

  /**
   * Description: 查询人群标签取值范围
   * Summary: 查询人群标签取值范围
   */
  async queryAuthTaskEx(request: QueryAuthTaskRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryAuthTaskResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryAuthTaskResponse>(await this.doRequest("1.0", "baas.auth.task.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryAuthTaskResponse({}));
  }

  /**
   * Description: 人群量级查询
   * Summary: 人群量级查询
   */
  async countAuthTask(request: CountAuthTaskRequest): Promise<CountAuthTaskResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.countAuthTaskEx(request, headers, runtime);
  }

  /**
   * Description: 人群量级查询
   * Summary: 人群量级查询
   */
  async countAuthTaskEx(request: CountAuthTaskRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CountAuthTaskResponse> {
    Util.validateModel(request);
    return $tea.cast<CountAuthTaskResponse>(await this.doRequest("1.0", "baas.auth.task.count", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CountAuthTaskResponse({}));
  }

  /**
   * Description: 人群匹配查询
   * Summary: 人群匹配查询
   */
  async matchAuthTask(request: MatchAuthTaskRequest): Promise<MatchAuthTaskResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.matchAuthTaskEx(request, headers, runtime);
  }

  /**
   * Description: 人群匹配查询
   * Summary: 人群匹配查询
   */
  async matchAuthTaskEx(request: MatchAuthTaskRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<MatchAuthTaskResponse> {
    Util.validateModel(request);
    return $tea.cast<MatchAuthTaskResponse>(await this.doRequest("1.0", "baas.auth.task.match", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new MatchAuthTaskResponse({}));
  }

  /**
   * Description: 问卷任务提交
   * Summary: 问卷任务提交
   */
  async submitAuthTask(request: SubmitAuthTaskRequest): Promise<SubmitAuthTaskResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.submitAuthTaskEx(request, headers, runtime);
  }

  /**
   * Description: 问卷任务提交
   * Summary: 问卷任务提交
   */
  async submitAuthTaskEx(request: SubmitAuthTaskRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<SubmitAuthTaskResponse> {
    Util.validateModel(request);
    return $tea.cast<SubmitAuthTaskResponse>(await this.doRequest("1.0", "baas.auth.task.submit", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new SubmitAuthTaskResponse({}));
  }

  /**
   * Description: 问卷任务详情
   * Summary: 问卷任务详情
   */
  async detailAuthTask(request: DetailAuthTaskRequest): Promise<DetailAuthTaskResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.detailAuthTaskEx(request, headers, runtime);
  }

  /**
   * Description: 问卷任务详情
   * Summary: 问卷任务详情
   */
  async detailAuthTaskEx(request: DetailAuthTaskRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<DetailAuthTaskResponse> {
    Util.validateModel(request);
    return $tea.cast<DetailAuthTaskResponse>(await this.doRequest("1.0", "baas.auth.task.detail", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new DetailAuthTaskResponse({}));
  }

  /**
   * Description: 任务修改
   * Summary: 任务修改
   */
  async updateAuthTask(request: UpdateAuthTaskRequest): Promise<UpdateAuthTaskResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.updateAuthTaskEx(request, headers, runtime);
  }

  /**
   * Description: 任务修改
   * Summary: 任务修改
   */
  async updateAuthTaskEx(request: UpdateAuthTaskRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<UpdateAuthTaskResponse> {
    Util.validateModel(request);
    return $tea.cast<UpdateAuthTaskResponse>(await this.doRequest("1.0", "baas.auth.task.update", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new UpdateAuthTaskResponse({}));
  }

  /**
   * Description: 人群量级查询
   * Summary: 人群量级查询
   */
  async countAuthTaskCrowd(request: CountAuthTaskCrowdRequest): Promise<CountAuthTaskCrowdResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.countAuthTaskCrowdEx(request, headers, runtime);
  }

  /**
   * Description: 人群量级查询
   * Summary: 人群量级查询
   */
  async countAuthTaskCrowdEx(request: CountAuthTaskCrowdRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CountAuthTaskCrowdResponse> {
    Util.validateModel(request);
    return $tea.cast<CountAuthTaskCrowdResponse>(await this.doRequest("1.0", "baas.auth.task.crowd.count", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CountAuthTaskCrowdResponse({}));
  }

  /**
   * Description: 人群匹配查询
   * Summary: 人群匹配查询
   */
  async matchAuthTaskCrowd(request: MatchAuthTaskCrowdRequest): Promise<MatchAuthTaskCrowdResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.matchAuthTaskCrowdEx(request, headers, runtime);
  }

  /**
   * Description: 人群匹配查询
   * Summary: 人群匹配查询
   */
  async matchAuthTaskCrowdEx(request: MatchAuthTaskCrowdRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<MatchAuthTaskCrowdResponse> {
    Util.validateModel(request);
    return $tea.cast<MatchAuthTaskCrowdResponse>(await this.doRequest("1.0", "baas.auth.task.crowd.match", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new MatchAuthTaskCrowdResponse({}));
  }

  /**
   * Description: 人群标签取值范围查询
   * Summary: 人群标签取值范围查询
   */
  async queryAuthTaskLabel(request: QueryAuthTaskLabelRequest): Promise<QueryAuthTaskLabelResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryAuthTaskLabelEx(request, headers, runtime);
  }

  /**
   * Description: 人群标签取值范围查询
   * Summary: 人群标签取值范围查询
   */
  async queryAuthTaskLabelEx(request: QueryAuthTaskLabelRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryAuthTaskLabelResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryAuthTaskLabelResponse>(await this.doRequest("1.0", "baas.auth.task.label.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryAuthTaskLabelResponse({}));
  }

  /**
   * Description: 任务列表查询
   * Summary: 任务列表查询
   */
  async listAuthTask(request: ListAuthTaskRequest): Promise<ListAuthTaskResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.listAuthTaskEx(request, headers, runtime);
  }

  /**
   * Description: 任务列表查询
   * Summary: 任务列表查询
   */
  async listAuthTaskEx(request: ListAuthTaskRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<ListAuthTaskResponse> {
    Util.validateModel(request);
    return $tea.cast<ListAuthTaskResponse>(await this.doRequest("1.0", "baas.auth.task.list", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new ListAuthTaskResponse({}));
  }

  /**
   * Description: 权益退订openAPI接口
   * Summary: 权益退订
   */
  async unbindAuthEquity(request: UnbindAuthEquityRequest): Promise<UnbindAuthEquityResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.unbindAuthEquityEx(request, headers, runtime);
  }

  /**
   * Description: 权益退订openAPI接口
   * Summary: 权益退订
   */
  async unbindAuthEquityEx(request: UnbindAuthEquityRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<UnbindAuthEquityResponse> {
    Util.validateModel(request);
    return $tea.cast<UnbindAuthEquityResponse>(await this.doRequest("1.0", "baas.auth.equity.unbind", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new UnbindAuthEquityResponse({}));
  }

  /**
   * Description: 权益退款
   * Summary: 权益退款接口
   */
  async repayAuthEquity(request: RepayAuthEquityRequest): Promise<RepayAuthEquityResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.repayAuthEquityEx(request, headers, runtime);
  }

  /**
   * Description: 权益退款
   * Summary: 权益退款接口
   */
  async repayAuthEquityEx(request: RepayAuthEquityRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<RepayAuthEquityResponse> {
    Util.validateModel(request);
    return $tea.cast<RepayAuthEquityResponse>(await this.doRequest("1.0", "baas.auth.equity.repay", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new RepayAuthEquityResponse({}));
  }

  /**
   * Description: 授权token校验
   * Summary: 授权token校验
   */
  async verifyAuthTokenValidity(request: VerifyAuthTokenValidityRequest): Promise<VerifyAuthTokenValidityResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.verifyAuthTokenValidityEx(request, headers, runtime);
  }

  /**
   * Description: 授权token校验
   * Summary: 授权token校验
   */
  async verifyAuthTokenValidityEx(request: VerifyAuthTokenValidityRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<VerifyAuthTokenValidityResponse> {
    Util.validateModel(request);
    return $tea.cast<VerifyAuthTokenValidityResponse>(await this.doRequest("1.0", "baas.auth.token.validity.verify", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new VerifyAuthTokenValidityResponse({}));
  }

  /**
   * Description: 核验当前用户是否权益新用户
   * Summary: 权益核验是否新用户
   */
  async verifyAuthBusinessUser(request: VerifyAuthBusinessUserRequest): Promise<VerifyAuthBusinessUserResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.verifyAuthBusinessUserEx(request, headers, runtime);
  }

  /**
   * Description: 核验当前用户是否权益新用户
   * Summary: 权益核验是否新用户
   */
  async verifyAuthBusinessUserEx(request: VerifyAuthBusinessUserRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<VerifyAuthBusinessUserResponse> {
    Util.validateModel(request);
    return $tea.cast<VerifyAuthBusinessUserResponse>(await this.doRequest("1.0", "baas.auth.business.user.verify", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new VerifyAuthBusinessUserResponse({}));
  }

  /**
   * Description: 代运营场景下第三方应用调用该接口推送相关信息，例如车辆信息
   * Summary: 代运营-推送用户授权的相关信息
   */
  async submitAuthBusinessData(request: SubmitAuthBusinessDataRequest): Promise<SubmitAuthBusinessDataResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.submitAuthBusinessDataEx(request, headers, runtime);
  }

  /**
   * Description: 代运营场景下第三方应用调用该接口推送相关信息，例如车辆信息
   * Summary: 代运营-推送用户授权的相关信息
   */
  async submitAuthBusinessDataEx(request: SubmitAuthBusinessDataRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<SubmitAuthBusinessDataResponse> {
    Util.validateModel(request);
    return $tea.cast<SubmitAuthBusinessDataResponse>(await this.doRequest("1.0", "baas.auth.business.data.submit", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new SubmitAuthBusinessDataResponse({}));
  }

  /**
   * Description: 支持调用该接口上传行驶证照片，返回上传链接
   * Summary: 行驶证上传接口
   */
  async uploadAuthBusinessCard(request: UploadAuthBusinessCardRequest): Promise<UploadAuthBusinessCardResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.uploadAuthBusinessCardEx(request, headers, runtime);
  }

  /**
   * Description: 支持调用该接口上传行驶证照片，返回上传链接
   * Summary: 行驶证上传接口
   */
  async uploadAuthBusinessCardEx(request: UploadAuthBusinessCardRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<UploadAuthBusinessCardResponse> {
    Util.validateModel(request);
    return $tea.cast<UploadAuthBusinessCardResponse>(await this.doRequest("1.0", "baas.auth.business.card.upload", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new UploadAuthBusinessCardResponse({}));
  }

  /**
   * Description: 通过指定可验证声明id，获取目标可验证声明链上交易信息，需要可验证声明的拥有者分享声明才可查询，如果没有权限则获取失败。
   * Summary: 获取目标可验证声明链上交易信息
   */
  async queryAuthVcTransaction(request: QueryAuthVcTransactionRequest): Promise<QueryAuthVcTransactionResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryAuthVcTransactionEx(request, headers, runtime);
  }

  /**
   * Description: 通过指定可验证声明id，获取目标可验证声明链上交易信息，需要可验证声明的拥有者分享声明才可查询，如果没有权限则获取失败。
   * Summary: 获取目标可验证声明链上交易信息
   */
  async queryAuthVcTransactionEx(request: QueryAuthVcTransactionRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryAuthVcTransactionResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryAuthVcTransactionResponse>(await this.doRequest("1.0", "baas.auth.vc.transaction.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryAuthVcTransactionResponse({}));
  }

  /**
   * Description: 代运营场景用户确认授权接口
   * Summary: 代运营用户确认授权接口
   */
  async authAuthBusinessUser(request: AuthAuthBusinessUserRequest): Promise<AuthAuthBusinessUserResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.authAuthBusinessUserEx(request, headers, runtime);
  }

  /**
   * Description: 代运营场景用户确认授权接口
   * Summary: 代运营用户确认授权接口
   */
  async authAuthBusinessUserEx(request: AuthAuthBusinessUserRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<AuthAuthBusinessUserResponse> {
    Util.validateModel(request);
    return $tea.cast<AuthAuthBusinessUserResponse>(await this.doRequest("1.0", "baas.auth.business.user.auth", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new AuthAuthBusinessUserResponse({}));
  }

  /**
   * Description: 获取文件上传到OSS的地址和key信息
   * Summary: 获取文件上传到OSS的地址和key信息
   */
  async queryAuthCrowdUploadurl(request: QueryAuthCrowdUploadurlRequest): Promise<QueryAuthCrowdUploadurlResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryAuthCrowdUploadurlEx(request, headers, runtime);
  }

  /**
   * Description: 获取文件上传到OSS的地址和key信息
   * Summary: 获取文件上传到OSS的地址和key信息
   */
  async queryAuthCrowdUploadurlEx(request: QueryAuthCrowdUploadurlRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryAuthCrowdUploadurlResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryAuthCrowdUploadurlResponse>(await this.doRequest("1.0", "baas.auth.crowd.uploadurl.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryAuthCrowdUploadurlResponse({}));
  }

  /**
   * Description: 提交人群上传相关文件信息
   * Summary: 提交
   */
  async submitAuthCrowdUpload(request: SubmitAuthCrowdUploadRequest): Promise<SubmitAuthCrowdUploadResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.submitAuthCrowdUploadEx(request, headers, runtime);
  }

  /**
   * Description: 提交人群上传相关文件信息
   * Summary: 提交
   */
  async submitAuthCrowdUploadEx(request: SubmitAuthCrowdUploadRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<SubmitAuthCrowdUploadResponse> {
    Util.validateModel(request);
    return $tea.cast<SubmitAuthCrowdUploadResponse>(await this.doRequest("1.0", "baas.auth.crowd.upload.submit", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new SubmitAuthCrowdUploadResponse({}));
  }

  /**
   * Description: 上传证书动态图片
   * Summary: 上传证书动态图片
   */
  async uploadAuthCertPhoto(request: UploadAuthCertPhotoRequest): Promise<UploadAuthCertPhotoResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.uploadAuthCertPhotoEx(request, headers, runtime);
  }

  /**
   * Description: 上传证书动态图片
   * Summary: 上传证书动态图片
   */
  async uploadAuthCertPhotoEx(request: UploadAuthCertPhotoRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<UploadAuthCertPhotoResponse> {
    Util.validateModel(request);
    return $tea.cast<UploadAuthCertPhotoResponse>(await this.doRequest("1.0", "baas.auth.cert.photo.upload", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new UploadAuthCertPhotoResponse({}));
  }

  /**
   * Description: 车五项信息提交
   * Summary: 车五项信息提交
   */
  async submitAuthCarinfo(request: SubmitAuthCarinfoRequest): Promise<SubmitAuthCarinfoResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.submitAuthCarinfoEx(request, headers, runtime);
  }

  /**
   * Description: 车五项信息提交
   * Summary: 车五项信息提交
   */
  async submitAuthCarinfoEx(request: SubmitAuthCarinfoRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<SubmitAuthCarinfoResponse> {
    Util.validateModel(request);
    return $tea.cast<SubmitAuthCarinfoResponse>(await this.doRequest("1.0", "baas.auth.carinfo.submit", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new SubmitAuthCarinfoResponse({}));
  }

  /**
   * Description: 通过代理模式为企业创建did
   * Summary: 通过代理模式为企业创建did
   */
  async startDidCorporateAgentcreate(request: StartDidCorporateAgentcreateRequest): Promise<StartDidCorporateAgentcreateResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.startDidCorporateAgentcreateEx(request, headers, runtime);
  }

  /**
   * Description: 通过代理模式为企业创建did
   * Summary: 通过代理模式为企业创建did
   */
  async startDidCorporateAgentcreateEx(request: StartDidCorporateAgentcreateRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<StartDidCorporateAgentcreateResponse> {
    Util.validateModel(request);
    return $tea.cast<StartDidCorporateAgentcreateResponse>(await this.doRequest("1.0", "baas.did.corporate.agentcreate.start", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new StartDidCorporateAgentcreateResponse({}));
  }

  /**
   * Description: 通过代理模式为个人创建did
   * Summary: 通过代理模式为个人创建did
   */
  async startDidPersonAgentcreate(request: StartDidPersonAgentcreateRequest): Promise<StartDidPersonAgentcreateResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.startDidPersonAgentcreateEx(request, headers, runtime);
  }

  /**
   * Description: 通过代理模式为个人创建did
   * Summary: 通过代理模式为个人创建did
   */
  async startDidPersonAgentcreateEx(request: StartDidPersonAgentcreateRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<StartDidPersonAgentcreateResponse> {
    Util.validateModel(request);
    return $tea.cast<StartDidPersonAgentcreateResponse>(await this.doRequest("1.0", "baas.did.person.agentcreate.start", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new StartDidPersonAgentcreateResponse({}));
  }

  /**
   * Description: 直接创建自己的企业did
   * Summary: 直接创建自己的企业did
   */
  async startDidCorporateSelfcreate(request: StartDidCorporateSelfcreateRequest): Promise<StartDidCorporateSelfcreateResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.startDidCorporateSelfcreateEx(request, headers, runtime);
  }

  /**
   * Description: 直接创建自己的企业did
   * Summary: 直接创建自己的企业did
   */
  async startDidCorporateSelfcreateEx(request: StartDidCorporateSelfcreateRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<StartDidCorporateSelfcreateResponse> {
    Util.validateModel(request);
    return $tea.cast<StartDidCorporateSelfcreateResponse>(await this.doRequest("1.0", "baas.did.corporate.selfcreate.start", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new StartDidCorporateSelfcreateResponse({}));
  }

  /**
   * Description: 直接创建自己的个人did
   * Summary: 直接创建自己的个人did
   */
  async startDidPersonSelfcreate(request: StartDidPersonSelfcreateRequest): Promise<StartDidPersonSelfcreateResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.startDidPersonSelfcreateEx(request, headers, runtime);
  }

  /**
   * Description: 直接创建自己的个人did
   * Summary: 直接创建自己的个人did
   */
  async startDidPersonSelfcreateEx(request: StartDidPersonSelfcreateRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<StartDidPersonSelfcreateResponse> {
    Util.validateModel(request);
    return $tea.cast<StartDidPersonSelfcreateResponse>(await this.doRequest("1.0", "baas.did.person.selfcreate.start", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new StartDidPersonSelfcreateResponse({}));
  }

  /**
   * Description: 使用自己或者代理的did为指定did颁发证书
   * Summary: 为指定did颁发证书
   */
  async startDidVerifiableclaimIssure(request: StartDidVerifiableclaimIssureRequest): Promise<StartDidVerifiableclaimIssureResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.startDidVerifiableclaimIssureEx(request, headers, runtime);
  }

  /**
   * Description: 使用自己或者代理的did为指定did颁发证书
   * Summary: 为指定did颁发证书
   */
  async startDidVerifiableclaimIssureEx(request: StartDidVerifiableclaimIssureRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<StartDidVerifiableclaimIssureResponse> {
    Util.validateModel(request);
    return $tea.cast<StartDidVerifiableclaimIssureResponse>(await this.doRequest("1.0", "baas.did.verifiableclaim.issure.start", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new StartDidVerifiableclaimIssureResponse({}));
  }

  /**
   * Description: 验证可验证声明
   * Summary: 验证可验证声明
   */
  async startDidVerifiableclaimVerifier(request: StartDidVerifiableclaimVerifierRequest): Promise<StartDidVerifiableclaimVerifierResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.startDidVerifiableclaimVerifierEx(request, headers, runtime);
  }

  /**
   * Description: 验证可验证声明
   * Summary: 验证可验证声明
   */
  async startDidVerifiableclaimVerifierEx(request: StartDidVerifiableclaimVerifierRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<StartDidVerifiableclaimVerifierResponse> {
    Util.validateModel(request);
    return $tea.cast<StartDidVerifiableclaimVerifierResponse>(await this.doRequest("1.0", "baas.did.verifiableclaim.verifier.start", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new StartDidVerifiableclaimVerifierResponse({}));
  }

  /**
   * Description: 查询did对应的doc
   * Summary: 查询did对应的doc
   */
  async queryDidDoc(request: QueryDidDocRequest): Promise<QueryDidDocResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryDidDocEx(request, headers, runtime);
  }

  /**
   * Description: 查询did对应的doc
   * Summary: 查询did对应的doc
   */
  async queryDidDocEx(request: QueryDidDocRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryDidDocResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryDidDocResponse>(await this.doRequest("1.0", "baas.did.doc.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryDidDocResponse({}));
  }

  /**
   * Description: 更新可验证声明状态
   * Summary: 更新可验证声明状态
   */
  async updateDidVerifiableclaimStatus(request: UpdateDidVerifiableclaimStatusRequest): Promise<UpdateDidVerifiableclaimStatusResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.updateDidVerifiableclaimStatusEx(request, headers, runtime);
  }

  /**
   * Description: 更新可验证声明状态
   * Summary: 更新可验证声明状态
   */
  async updateDidVerifiableclaimStatusEx(request: UpdateDidVerifiableclaimStatusRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<UpdateDidVerifiableclaimStatusResponse> {
    Util.validateModel(request);
    return $tea.cast<UpdateDidVerifiableclaimStatusResponse>(await this.doRequest("1.0", "baas.did.verifiableclaim.status.update", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new UpdateDidVerifiableclaimStatusResponse({}));
  }

  /**
   * Description: 用户更新扩展字段中的扩展字段
   * Summary: 更新doc service中的扩展字段
   */
  async updateDidCorporateExtensionservice(request: UpdateDidCorporateExtensionserviceRequest): Promise<UpdateDidCorporateExtensionserviceResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.updateDidCorporateExtensionserviceEx(request, headers, runtime);
  }

  /**
   * Description: 用户更新扩展字段中的扩展字段
   * Summary: 更新doc service中的扩展字段
   */
  async updateDidCorporateExtensionserviceEx(request: UpdateDidCorporateExtensionserviceRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<UpdateDidCorporateExtensionserviceResponse> {
    Util.validateModel(request);
    return $tea.cast<UpdateDidCorporateExtensionserviceResponse>(await this.doRequest("1.0", "baas.did.corporate.extensionservice.update", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new UpdateDidCorporateExtensionserviceResponse({}));
  }

  /**
   * Description: 设置不通租户在DID中的不同扩展字段
   * Summary: 设置不通租户在DID中的不同扩展字段
   */
  async startDidCorporateCustomerservicetype(request: StartDidCorporateCustomerservicetypeRequest): Promise<StartDidCorporateCustomerservicetypeResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.startDidCorporateCustomerservicetypeEx(request, headers, runtime);
  }

  /**
   * Description: 设置不通租户在DID中的不同扩展字段
   * Summary: 设置不通租户在DID中的不同扩展字段
   */
  async startDidCorporateCustomerservicetypeEx(request: StartDidCorporateCustomerservicetypeRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<StartDidCorporateCustomerservicetypeResponse> {
    Util.validateModel(request);
    return $tea.cast<StartDidCorporateCustomerservicetypeResponse>(await this.doRequest("1.0", "baas.did.corporate.customerservicetype.start", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new StartDidCorporateCustomerservicetypeResponse({}));
  }

  /**
   * Description: 三要素实名认证
   * Summary: 三要素实名认证
   */
  async startDidCertificationThreemeta(request: StartDidCertificationThreemetaRequest): Promise<StartDidCertificationThreemetaResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.startDidCertificationThreemetaEx(request, headers, runtime);
  }

  /**
   * Description: 三要素实名认证
   * Summary: 三要素实名认证
   */
  async startDidCertificationThreemetaEx(request: StartDidCertificationThreemetaRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<StartDidCertificationThreemetaResponse> {
    Util.validateModel(request);
    return $tea.cast<StartDidCertificationThreemetaResponse>(await this.doRequest("1.0", "baas.did.certification.threemeta.start", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new StartDidCertificationThreemetaResponse({}));
  }

  /**
   * Description: 二要素实名认证
   * Summary: 二要素实名认证
   */
  async startDidCertificationTwometa(request: StartDidCertificationTwometaRequest): Promise<StartDidCertificationTwometaResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.startDidCertificationTwometaEx(request, headers, runtime);
  }

  /**
   * Description: 二要素实名认证
   * Summary: 二要素实名认证
   */
  async startDidCertificationTwometaEx(request: StartDidCertificationTwometaRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<StartDidCertificationTwometaResponse> {
    Util.validateModel(request);
    return $tea.cast<StartDidCertificationTwometaResponse>(await this.doRequest("1.0", "baas.did.certification.twometa.start", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new StartDidCertificationTwometaResponse({}));
  }

  /**
   * Description: 通过vcid查询vc内容
   * Summary: 通过vcid查询vc内容
   */
  async queryDidVc(request: QueryDidVcRequest): Promise<QueryDidVcResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryDidVcEx(request, headers, runtime);
  }

  /**
   * Description: 通过vcid查询vc内容
   * Summary: 通过vcid查询vc内容
   */
  async queryDidVcEx(request: QueryDidVcRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryDidVcResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryDidVcResponse>(await this.doRequest("1.0", "baas.did.vc.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryDidVcResponse({}));
  }

  /**
   * Description: 开始实人认证
   * Summary: 开始实人认证
   */
  async startDidIdentificationFaceauth(request: StartDidIdentificationFaceauthRequest): Promise<StartDidIdentificationFaceauthResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.startDidIdentificationFaceauthEx(request, headers, runtime);
  }

  /**
   * Description: 开始实人认证
   * Summary: 开始实人认证
   */
  async startDidIdentificationFaceauthEx(request: StartDidIdentificationFaceauthRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<StartDidIdentificationFaceauthResponse> {
    Util.validateModel(request);
    return $tea.cast<StartDidIdentificationFaceauthResponse>(await this.doRequest("1.0", "baas.did.identification.faceauth.start", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new StartDidIdentificationFaceauthResponse({}));
  }

  /**
   * Description: 查询实人认证结果
   * Summary: 查询实人认证结果
   */
  async queryDidIdentificationFaceauth(request: QueryDidIdentificationFaceauthRequest): Promise<QueryDidIdentificationFaceauthResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryDidIdentificationFaceauthEx(request, headers, runtime);
  }

  /**
   * Description: 查询实人认证结果
   * Summary: 查询实人认证结果
   */
  async queryDidIdentificationFaceauthEx(request: QueryDidIdentificationFaceauthRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryDidIdentificationFaceauthResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryDidIdentificationFaceauthResponse>(await this.doRequest("1.0", "baas.did.identification.faceauth.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryDidIdentificationFaceauthResponse({}));
  }

  /**
   * Description: 用户通过该接口订阅自己关心的did事件
   * Summary: 订阅did事件服务
   */
  async startDidNotificationConsumer(request: StartDidNotificationConsumerRequest): Promise<StartDidNotificationConsumerResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.startDidNotificationConsumerEx(request, headers, runtime);
  }

  /**
   * Description: 用户通过该接口订阅自己关心的did事件
   * Summary: 订阅did事件服务
   */
  async startDidNotificationConsumerEx(request: StartDidNotificationConsumerRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<StartDidNotificationConsumerResponse> {
    Util.validateModel(request);
    return $tea.cast<StartDidNotificationConsumerResponse>(await this.doRequest("1.0", "baas.did.notification.consumer.start", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new StartDidNotificationConsumerResponse({}));
  }

  /**
   * Description: 消费端在重启，或者需要重新拉之前的信息，需要调用这个接口重新注册
   * Summary: 消费端重新启动
   */
  async rebootDidNotificationConsumer(request: RebootDidNotificationConsumerRequest): Promise<RebootDidNotificationConsumerResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.rebootDidNotificationConsumerEx(request, headers, runtime);
  }

  /**
   * Description: 消费端在重启，或者需要重新拉之前的信息，需要调用这个接口重新注册
   * Summary: 消费端重新启动
   */
  async rebootDidNotificationConsumerEx(request: RebootDidNotificationConsumerRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<RebootDidNotificationConsumerResponse> {
    Util.validateModel(request);
    return $tea.cast<RebootDidNotificationConsumerResponse>(await this.doRequest("1.0", "baas.did.notification.consumer.reboot", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new RebootDidNotificationConsumerResponse({}));
  }

  /**
   * Description: 向Dis申请DID号
   * Summary: 非托管模式下创建DID时，申请ID
   */
  async initDidCorporateDirect(request: InitDidCorporateDirectRequest): Promise<InitDidCorporateDirectResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.initDidCorporateDirectEx(request, headers, runtime);
  }

  /**
   * Description: 向Dis申请DID号
   * Summary: 非托管模式下创建DID时，申请ID
   */
  async initDidCorporateDirectEx(request: InitDidCorporateDirectRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<InitDidCorporateDirectResponse> {
    Util.validateModel(request);
    return $tea.cast<InitDidCorporateDirectResponse>(await this.doRequest("1.0", "baas.did.corporate.direct.init", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new InitDidCorporateDirectResponse({}));
  }

  /**
   * Description: 推送或者更新did doc
   * Summary: 推送或者更新did doc
   */
  async pushDidCorporateDirect(request: PushDidCorporateDirectRequest): Promise<PushDidCorporateDirectResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.pushDidCorporateDirectEx(request, headers, runtime);
  }

  /**
   * Description: 推送或者更新did doc
   * Summary: 推送或者更新did doc
   */
  async pushDidCorporateDirectEx(request: PushDidCorporateDirectRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<PushDidCorporateDirectResponse> {
    Util.validateModel(request);
    return $tea.cast<PushDidCorporateDirectResponse>(await this.doRequest("1.0", "baas.did.corporate.direct.push", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new PushDidCorporateDirectResponse({}));
  }

  /**
   * Description: 企业申请did
   * Summary: 申请did
   */
  async initDidCorporateIdentity(request: InitDidCorporateIdentityRequest): Promise<InitDidCorporateIdentityResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.initDidCorporateIdentityEx(request, headers, runtime);
  }

  /**
   * Description: 企业申请did
   * Summary: 申请did
   */
  async initDidCorporateIdentityEx(request: InitDidCorporateIdentityRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<InitDidCorporateIdentityResponse> {
    Util.validateModel(request);
    return $tea.cast<InitDidCorporateIdentityResponse>(await this.doRequest("1.0", "baas.did.corporate.identity.init", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new InitDidCorporateIdentityResponse({}));
  }

  /**
   * Description: 对authchallenge进行响应
   * Summary: 对authchallenge进行响应
   */
  async startDidAgentChallengeresponse(request: StartDidAgentChallengeresponseRequest): Promise<StartDidAgentChallengeresponseResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.startDidAgentChallengeresponseEx(request, headers, runtime);
  }

  /**
   * Description: 对authchallenge进行响应
   * Summary: 对authchallenge进行响应
   */
  async startDidAgentChallengeresponseEx(request: StartDidAgentChallengeresponseRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<StartDidAgentChallengeresponseResponse> {
    Util.validateModel(request);
    return $tea.cast<StartDidAgentChallengeresponseResponse>(await this.doRequest("1.0", "baas.did.agent.challengeresponse.start", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new StartDidAgentChallengeresponseResponse({}));
  }

  /**
   * Description: 验证Auth Response有效性接口
   * Summary: 验证Auth Response有效性
   */
  async startDidAgentVerifyauthresponse(request: StartDidAgentVerifyauthresponseRequest): Promise<StartDidAgentVerifyauthresponseResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.startDidAgentVerifyauthresponseEx(request, headers, runtime);
  }

  /**
   * Description: 验证Auth Response有效性接口
   * Summary: 验证Auth Response有效性
   */
  async startDidAgentVerifyauthresponseEx(request: StartDidAgentVerifyauthresponseRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<StartDidAgentVerifyauthresponseResponse> {
    Util.validateModel(request);
    return $tea.cast<StartDidAgentVerifyauthresponseResponse>(await this.doRequest("1.0", "baas.did.agent.verifyauthresponse.start", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new StartDidAgentVerifyauthresponseResponse({}));
  }

  /**
   * Description: 脱敏身份验证
   * Summary: 脱敏身份验证
   */
  async startDidCertificationMask(request: StartDidCertificationMaskRequest): Promise<StartDidCertificationMaskResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.startDidCertificationMaskEx(request, headers, runtime);
  }

  /**
   * Description: 脱敏身份验证
   * Summary: 脱敏身份验证
   */
  async startDidCertificationMaskEx(request: StartDidCertificationMaskRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<StartDidCertificationMaskResponse> {
    Util.validateModel(request);
    return $tea.cast<StartDidCertificationMaskResponse>(await this.doRequest("1.0", "baas.did.certification.mask.start", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new StartDidCertificationMaskResponse({}));
  }

  /**
   * Description: 管理员为租户开通did服务
   * Summary: 管理员为租户开通did服务
   */
  async openDidAdminService(request: OpenDidAdminServiceRequest): Promise<OpenDidAdminServiceResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.openDidAdminServiceEx(request, headers, runtime);
  }

  /**
   * Description: 管理员为租户开通did服务
   * Summary: 管理员为租户开通did服务
   */
  async openDidAdminServiceEx(request: OpenDidAdminServiceRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<OpenDidAdminServiceResponse> {
    Util.validateModel(request);
    return $tea.cast<OpenDidAdminServiceResponse>(await this.doRequest("1.0", "baas.did.admin.service.open", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new OpenDidAdminServiceResponse({}));
  }

  /**
   * Description: 针对指定租户关闭dis服务
   * Summary: 针对指定租户关闭dis服务
   */
  async stopDidAdminService(request: StopDidAdminServiceRequest): Promise<StopDidAdminServiceResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.stopDidAdminServiceEx(request, headers, runtime);
  }

  /**
   * Description: 针对指定租户关闭dis服务
   * Summary: 针对指定租户关闭dis服务
   */
  async stopDidAdminServiceEx(request: StopDidAdminServiceRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<StopDidAdminServiceResponse> {
    Util.validateModel(request);
    return $tea.cast<StopDidAdminServiceResponse>(await this.doRequest("1.0", "baas.did.admin.service.stop", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new StopDidAdminServiceResponse({}));
  }

  /**
   * Description: 为被托管人进行代理签名
   * Summary: 为被托管人进行代理签名
   */
  async startDidSignatureAgent(request: StartDidSignatureAgentRequest): Promise<StartDidSignatureAgentResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.startDidSignatureAgentEx(request, headers, runtime);
  }

  /**
   * Description: 为被托管人进行代理签名
   * Summary: 为被托管人进行代理签名
   */
  async startDidSignatureAgentEx(request: StartDidSignatureAgentRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<StartDidSignatureAgentResponse> {
    Util.validateModel(request);
    return $tea.cast<StartDidSignatureAgentResponse>(await this.doRequest("1.0", "baas.did.signature.agent.start", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new StartDidSignatureAgentResponse({}));
  }

  /**
   * Description: 对字符串进行验签
   * Summary: 对字符串进行验签
   */
  async checkDidSign(request: CheckDidSignRequest): Promise<CheckDidSignResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.checkDidSignEx(request, headers, runtime);
  }

  /**
   * Description: 对字符串进行验签
   * Summary: 对字符串进行验签
   */
  async checkDidSignEx(request: CheckDidSignRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CheckDidSignResponse> {
    Util.validateModel(request);
    return $tea.cast<CheckDidSignResponse>(await this.doRequest("1.0", "baas.did.sign.check", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CheckDidSignResponse({}));
  }

  /**
   * Description: 根据用户指定路径，展示部分可见的声明，并可以被验证
   * Summary: 根据用户指定路径，展示部分可见声明
   */
  async startDidZkpverifiableclaimVisibility(request: StartDidZkpverifiableclaimVisibilityRequest): Promise<StartDidZkpverifiableclaimVisibilityResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.startDidZkpverifiableclaimVisibilityEx(request, headers, runtime);
  }

  /**
   * Description: 根据用户指定路径，展示部分可见的声明，并可以被验证
   * Summary: 根据用户指定路径，展示部分可见声明
   */
  async startDidZkpverifiableclaimVisibilityEx(request: StartDidZkpverifiableclaimVisibilityRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<StartDidZkpverifiableclaimVisibilityResponse> {
    Util.validateModel(request);
    return $tea.cast<StartDidZkpverifiableclaimVisibilityResponse>(await this.doRequest("1.0", "baas.did.zkpverifiableclaim.visibility.start", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new StartDidZkpverifiableclaimVisibilityResponse({}));
  }

  /**
   * Description: 为指定did添加外键关联，该接口必须被did自己调用或者did的认证密钥管理人调用。
   * Summary: 为指定did添加外键关联
   */
  async startDidAgentSidekey(request: StartDidAgentSidekeyRequest): Promise<StartDidAgentSidekeyResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.startDidAgentSidekeyEx(request, headers, runtime);
  }

  /**
   * Description: 为指定did添加外键关联，该接口必须被did自己调用或者did的认证密钥管理人调用。
   * Summary: 为指定did添加外键关联
   */
  async startDidAgentSidekeyEx(request: StartDidAgentSidekeyRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<StartDidAgentSidekeyResponse> {
    Util.validateModel(request);
    return $tea.cast<StartDidAgentSidekeyResponse>(await this.doRequest("1.0", "baas.did.agent.sidekey.start", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new StartDidAgentSidekeyResponse({}));
  }

  /**
   * Description: 为指定did更新外键关联，该接口必须被did自己调用或者did的认证密钥管理人调用。
   * Summary: 更新指定did的外键
   */
  async updateDidAgentSidekey(request: UpdateDidAgentSidekeyRequest): Promise<UpdateDidAgentSidekeyResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.updateDidAgentSidekeyEx(request, headers, runtime);
  }

  /**
   * Description: 为指定did更新外键关联，该接口必须被did自己调用或者did的认证密钥管理人调用。
   * Summary: 更新指定did的外键
   */
  async updateDidAgentSidekeyEx(request: UpdateDidAgentSidekeyRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<UpdateDidAgentSidekeyResponse> {
    Util.validateModel(request);
    return $tea.cast<UpdateDidAgentSidekeyResponse>(await this.doRequest("1.0", "baas.did.agent.sidekey.update", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new UpdateDidAgentSidekeyResponse({}));
  }

  /**
   * Description: 代理创建did并创建外键
   * Summary: 代理创建did并创建外键
   */
  async startDidCorporateAgentcreatewithsidekey(request: StartDidCorporateAgentcreatewithsidekeyRequest): Promise<StartDidCorporateAgentcreatewithsidekeyResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.startDidCorporateAgentcreatewithsidekeyEx(request, headers, runtime);
  }

  /**
   * Description: 代理创建did并创建外键
   * Summary: 代理创建did并创建外键
   */
  async startDidCorporateAgentcreatewithsidekeyEx(request: StartDidCorporateAgentcreatewithsidekeyRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<StartDidCorporateAgentcreatewithsidekeyResponse> {
    Util.validateModel(request);
    return $tea.cast<StartDidCorporateAgentcreatewithsidekeyResponse>(await this.doRequest("1.0", "baas.did.corporate.agentcreatewithsidekey.start", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new StartDidCorporateAgentcreatewithsidekeyResponse({}));
  }

  /**
   * Description: 更新doc 中的扩展字段并更新外键
   * Summary: 更新doc 中的扩展字段并更新外键
   */
  async updateDidCorporateExtensionservicewithsidekey(request: UpdateDidCorporateExtensionservicewithsidekeyRequest): Promise<UpdateDidCorporateExtensionservicewithsidekeyResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.updateDidCorporateExtensionservicewithsidekeyEx(request, headers, runtime);
  }

  /**
   * Description: 更新doc 中的扩展字段并更新外键
   * Summary: 更新doc 中的扩展字段并更新外键
   */
  async updateDidCorporateExtensionservicewithsidekeyEx(request: UpdateDidCorporateExtensionservicewithsidekeyRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<UpdateDidCorporateExtensionservicewithsidekeyResponse> {
    Util.validateModel(request);
    return $tea.cast<UpdateDidCorporateExtensionservicewithsidekeyResponse>(await this.doRequest("1.0", "baas.did.corporate.extensionservicewithsidekey.update", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new UpdateDidCorporateExtensionservicewithsidekeyResponse({}));
  }

  /**
   * Description: 通过sidekey方式查询对应doc
   * Summary: 通过sidekey方式查询对应doc
   */
  async queryDidDocSidekey(request: QueryDidDocSidekeyRequest): Promise<QueryDidDocSidekeyResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryDidDocSidekeyEx(request, headers, runtime);
  }

  /**
   * Description: 通过sidekey方式查询对应doc
   * Summary: 通过sidekey方式查询对应doc
   */
  async queryDidDocSidekeyEx(request: QueryDidDocSidekeyRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryDidDocSidekeyResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryDidDocSidekeyResponse>(await this.doRequest("1.0", "baas.did.doc.sidekey.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryDidDocSidekeyResponse({}));
  }

  /**
   * Description: 代理创建个人did并创建外键
   * Summary: 代理创建个人did并创建外键
   */
  async startDidPersonAgentcreatewithsidekey(request: StartDidPersonAgentcreatewithsidekeyRequest): Promise<StartDidPersonAgentcreatewithsidekeyResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.startDidPersonAgentcreatewithsidekeyEx(request, headers, runtime);
  }

  /**
   * Description: 代理创建个人did并创建外键
   * Summary: 代理创建个人did并创建外键
   */
  async startDidPersonAgentcreatewithsidekeyEx(request: StartDidPersonAgentcreatewithsidekeyRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<StartDidPersonAgentcreatewithsidekeyResponse> {
    Util.validateModel(request);
    return $tea.cast<StartDidPersonAgentcreatewithsidekeyResponse>(await this.doRequest("1.0", "baas.did.person.agentcreatewithsidekey.start", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new StartDidPersonAgentcreatewithsidekeyResponse({}));
  }

  /**
   * Description: 代理创建IOT did
   * Summary: 代理创建IOT did
   */
  async startDidIotAgentcreate(request: StartDidIotAgentcreateRequest): Promise<StartDidIotAgentcreateResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.startDidIotAgentcreateEx(request, headers, runtime);
  }

  /**
   * Description: 代理创建IOT did
   * Summary: 代理创建IOT did
   */
  async startDidIotAgentcreateEx(request: StartDidIotAgentcreateRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<StartDidIotAgentcreateResponse> {
    Util.validateModel(request);
    return $tea.cast<StartDidIotAgentcreateResponse>(await this.doRequest("1.0", "baas.did.iot.agentcreate.start", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new StartDidIotAgentcreateResponse({}));
  }

  /**
   * Description: 代理创建IOT did并创建外键
   * Summary: 代理创建IOT did并创建外键
   */
  async startDidIotAgentcreatewithsidekey(request: StartDidIotAgentcreatewithsidekeyRequest): Promise<StartDidIotAgentcreatewithsidekeyResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.startDidIotAgentcreatewithsidekeyEx(request, headers, runtime);
  }

  /**
   * Description: 代理创建IOT did并创建外键
   * Summary: 代理创建IOT did并创建外键
   */
  async startDidIotAgentcreatewithsidekeyEx(request: StartDidIotAgentcreatewithsidekeyRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<StartDidIotAgentcreatewithsidekeyResponse> {
    Util.validateModel(request);
    return $tea.cast<StartDidIotAgentcreatewithsidekeyResponse>(await this.doRequest("1.0", "baas.did.iot.agentcreatewithsidekey.start", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new StartDidIotAgentcreatewithsidekeyResponse({}));
  }

  /**
   * Description: 更新IOT类did的扩展字段并更新外键
   * Summary: 更新IOT类did的扩展字段并更新外键
   */
  async updateDidIotExtensionservicewithsidekey(request: UpdateDidIotExtensionservicewithsidekeyRequest): Promise<UpdateDidIotExtensionservicewithsidekeyResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.updateDidIotExtensionservicewithsidekeyEx(request, headers, runtime);
  }

  /**
   * Description: 更新IOT类did的扩展字段并更新外键
   * Summary: 更新IOT类did的扩展字段并更新外键
   */
  async updateDidIotExtensionservicewithsidekeyEx(request: UpdateDidIotExtensionservicewithsidekeyRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<UpdateDidIotExtensionservicewithsidekeyResponse> {
    Util.validateModel(request);
    return $tea.cast<UpdateDidIotExtensionservicewithsidekeyResponse>(await this.doRequest("1.0", "baas.did.iot.extensionservicewithsidekey.update", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new UpdateDidIotExtensionservicewithsidekeyResponse({}));
  }

  /**
   * Description: 更新个人did中的扩展字段并更新外键
   * Summary: 更新个人did中的扩展字段并更新外键
   */
  async updateDidPersonExtensionservicewithsidekey(request: UpdateDidPersonExtensionservicewithsidekeyRequest): Promise<UpdateDidPersonExtensionservicewithsidekeyResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.updateDidPersonExtensionservicewithsidekeyEx(request, headers, runtime);
  }

  /**
   * Description: 更新个人did中的扩展字段并更新外键
   * Summary: 更新个人did中的扩展字段并更新外键
   */
  async updateDidPersonExtensionservicewithsidekeyEx(request: UpdateDidPersonExtensionservicewithsidekeyRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<UpdateDidPersonExtensionservicewithsidekeyResponse> {
    Util.validateModel(request);
    return $tea.cast<UpdateDidPersonExtensionservicewithsidekeyResponse>(await this.doRequest("1.0", "baas.did.person.extensionservicewithsidekey.update", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new UpdateDidPersonExtensionservicewithsidekeyResponse({}));
  }

  /**
   * Description: 通过个人三要素验证后创建个人did，若未通过个人三要素验证，则不创建did并报错
   * Summary: 通过个人三要素验证后创建个人did
   */
  async createDidPersonWiththreemeta(request: CreateDidPersonWiththreemetaRequest): Promise<CreateDidPersonWiththreemetaResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.createDidPersonWiththreemetaEx(request, headers, runtime);
  }

  /**
   * Description: 通过个人三要素验证后创建个人did，若未通过个人三要素验证，则不创建did并报错
   * Summary: 通过个人三要素验证后创建个人did
   */
  async createDidPersonWiththreemetaEx(request: CreateDidPersonWiththreemetaRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CreateDidPersonWiththreemetaResponse> {
    Util.validateModel(request);
    return $tea.cast<CreateDidPersonWiththreemetaResponse>(await this.doRequest("1.0", "baas.did.person.withthreemeta.create", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CreateDidPersonWiththreemetaResponse({}));
  }

  /**
   * Description: 通过企业三要素验证后创建企业did，若未通过企业三要素验证，则不创建did并报错
   * Summary: 通过企业三要素验证后创建企业did
   */
  async createDidCorporateWiththreemeta(request: CreateDidCorporateWiththreemetaRequest): Promise<CreateDidCorporateWiththreemetaResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.createDidCorporateWiththreemetaEx(request, headers, runtime);
  }

  /**
   * Description: 通过企业三要素验证后创建企业did，若未通过企业三要素验证，则不创建did并报错
   * Summary: 通过企业三要素验证后创建企业did
   */
  async createDidCorporateWiththreemetaEx(request: CreateDidCorporateWiththreemetaRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CreateDidCorporateWiththreemetaResponse> {
    Util.validateModel(request);
    return $tea.cast<CreateDidCorporateWiththreemetaResponse>(await this.doRequest("1.0", "baas.did.corporate.withthreemeta.create", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CreateDidCorporateWiththreemetaResponse({}));
  }

  /**
   * Description: 使用自己或者代理的did为指定did颁发证书，同时在VC Repository中对证书VC进行存储。
  支持授权管理，只有被授权的did未来才可以访问获取此颁发的证书数据。
   * Summary: 指定did颁发证书，并存储
   */
  async startDidVcrepositoryIssue(request: StartDidVcrepositoryIssueRequest): Promise<StartDidVcrepositoryIssueResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.startDidVcrepositoryIssueEx(request, headers, runtime);
  }

  /**
   * Description: 使用自己或者代理的did为指定did颁发证书，同时在VC Repository中对证书VC进行存储。
  支持授权管理，只有被授权的did未来才可以访问获取此颁发的证书数据。
   * Summary: 指定did颁发证书，并存储
   */
  async startDidVcrepositoryIssueEx(request: StartDidVcrepositoryIssueRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<StartDidVcrepositoryIssueResponse> {
    Util.validateModel(request);
    return $tea.cast<StartDidVcrepositoryIssueResponse>(await this.doRequest("1.0", "baas.did.vcrepository.issue.start", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new StartDidVcrepositoryIssueResponse({}));
  }

  /**
   * Description: 通过提供verifiable_claim_id来读取目标VC内容，如果调用方不知道目标VC的verifiable_claim_id，则通过配置目标VC的subject_did、issuer_did 和 过滤字段来查询并读取。
  如果调用者不在目标VC的授权名单中，则无法读取目标VC内容。
   * Summary: 读取目标证书数据
   */
  async startDidVcrepositoryRead(request: StartDidVcrepositoryReadRequest): Promise<StartDidVcrepositoryReadResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.startDidVcrepositoryReadEx(request, headers, runtime);
  }

  /**
   * Description: 通过提供verifiable_claim_id来读取目标VC内容，如果调用方不知道目标VC的verifiable_claim_id，则通过配置目标VC的subject_did、issuer_did 和 过滤字段来查询并读取。
  如果调用者不在目标VC的授权名单中，则无法读取目标VC内容。
   * Summary: 读取目标证书数据
   */
  async startDidVcrepositoryReadEx(request: StartDidVcrepositoryReadRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<StartDidVcrepositoryReadResponse> {
    Util.validateModel(request);
    return $tea.cast<StartDidVcrepositoryReadResponse>(await this.doRequest("1.0", "baas.did.vcrepository.read.start", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new StartDidVcrepositoryReadResponse({}));
  }

  /**
   * Description: 调用者需是目标VC的拥有者，也就是目标VC内容中的subject。
  授权新的did读取目标VC的权限。
   * Summary: 对已有vc新增授权did
   */
  async startDidVcrepositoryAuth(request: StartDidVcrepositoryAuthRequest): Promise<StartDidVcrepositoryAuthResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.startDidVcrepositoryAuthEx(request, headers, runtime);
  }

  /**
   * Description: 调用者需是目标VC的拥有者，也就是目标VC内容中的subject。
  授权新的did读取目标VC的权限。
   * Summary: 对已有vc新增授权did
   */
  async startDidVcrepositoryAuthEx(request: StartDidVcrepositoryAuthRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<StartDidVcrepositoryAuthResponse> {
    Util.validateModel(request);
    return $tea.cast<StartDidVcrepositoryAuthResponse>(await this.doRequest("1.0", "baas.did.vcrepository.auth.start", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new StartDidVcrepositoryAuthResponse({}));
  }

  /**
   * Description: 通过配置目标VC的subject_did 和 过滤字段来查询并读取。
  如果调用者不在目标VC的授权名单中，则无法读取目标VC内容。
   * Summary: 查询过滤并读取目标证书数据
   */
  async startDidVcrepositoryFilterandread(request: StartDidVcrepositoryFilterandreadRequest): Promise<StartDidVcrepositoryFilterandreadResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.startDidVcrepositoryFilterandreadEx(request, headers, runtime);
  }

  /**
   * Description: 通过配置目标VC的subject_did 和 过滤字段来查询并读取。
  如果调用者不在目标VC的授权名单中，则无法读取目标VC内容。
   * Summary: 查询过滤并读取目标证书数据
   */
  async startDidVcrepositoryFilterandreadEx(request: StartDidVcrepositoryFilterandreadRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<StartDidVcrepositoryFilterandreadResponse> {
    Util.validateModel(request);
    return $tea.cast<StartDidVcrepositoryFilterandreadResponse>(await this.doRequest("1.0", "baas.did.vcrepository.filterandread.start", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new StartDidVcrepositoryFilterandreadResponse({}));
  }

  /**
   * Description: 通过提供verifiable_claim_id来读取目标VC内容，如果调用者不在目标VC的授权名单中，则无法读取目标VC内容。
  注意通常verifiable_claim_id是“vc:mychain:”为前缀。
   * Summary: 通过vcid读取目标证书数据
   */
  async startDidVcrepositoryReadwithvcid(request: StartDidVcrepositoryReadwithvcidRequest): Promise<StartDidVcrepositoryReadwithvcidResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.startDidVcrepositoryReadwithvcidEx(request, headers, runtime);
  }

  /**
   * Description: 通过提供verifiable_claim_id来读取目标VC内容，如果调用者不在目标VC的授权名单中，则无法读取目标VC内容。
  注意通常verifiable_claim_id是“vc:mychain:”为前缀。
   * Summary: 通过vcid读取目标证书数据
   */
  async startDidVcrepositoryReadwithvcidEx(request: StartDidVcrepositoryReadwithvcidRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<StartDidVcrepositoryReadwithvcidResponse> {
    Util.validateModel(request);
    return $tea.cast<StartDidVcrepositoryReadwithvcidResponse>(await this.doRequest("1.0", "baas.did.vcrepository.readwithvcid.start", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new StartDidVcrepositoryReadwithvcidResponse({}));
  }

  /**
   * Description: 如果业务方在颁发证书VC时，使用了自定义的verifiable_claim_id，则使用此id来读取目标证书内容。
  注意：通常自定义的verifiable_claim_id，不是“vc:mychain:”前缀开始。
   * Summary: 通过自定义id读取目标证书内容
   */
  async startDidVcrepositoryReadwithdefineid(request: StartDidVcrepositoryReadwithdefineidRequest): Promise<StartDidVcrepositoryReadwithdefineidResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.startDidVcrepositoryReadwithdefineidEx(request, headers, runtime);
  }

  /**
   * Description: 如果业务方在颁发证书VC时，使用了自定义的verifiable_claim_id，则使用此id来读取目标证书内容。
  注意：通常自定义的verifiable_claim_id，不是“vc:mychain:”前缀开始。
   * Summary: 通过自定义id读取目标证书内容
   */
  async startDidVcrepositoryReadwithdefineidEx(request: StartDidVcrepositoryReadwithdefineidRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<StartDidVcrepositoryReadwithdefineidResponse> {
    Util.validateModel(request);
    return $tea.cast<StartDidVcrepositoryReadwithdefineidResponse>(await this.doRequest("1.0", "baas.did.vcrepository.readwithdefineid.start", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new StartDidVcrepositoryReadwithdefineidResponse({}));
  }

  /**
   * Description: 通过提供verifiable_claim_id来找到目标VC内容并追加授权did列表，只有调用者是目标VC的subject才能操作。 注意通常verifiable_claim_id是“vc:mychain:”为前缀。
   * Summary: 通过vcid对目标证书追加授权
   */
  async startDidVcrepositoryAuthwithvcid(request: StartDidVcrepositoryAuthwithvcidRequest): Promise<StartDidVcrepositoryAuthwithvcidResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.startDidVcrepositoryAuthwithvcidEx(request, headers, runtime);
  }

  /**
   * Description: 通过提供verifiable_claim_id来找到目标VC内容并追加授权did列表，只有调用者是目标VC的subject才能操作。 注意通常verifiable_claim_id是“vc:mychain:”为前缀。
   * Summary: 通过vcid对目标证书追加授权
   */
  async startDidVcrepositoryAuthwithvcidEx(request: StartDidVcrepositoryAuthwithvcidRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<StartDidVcrepositoryAuthwithvcidResponse> {
    Util.validateModel(request);
    return $tea.cast<StartDidVcrepositoryAuthwithvcidResponse>(await this.doRequest("1.0", "baas.did.vcrepository.authwithvcid.start", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new StartDidVcrepositoryAuthwithvcidResponse({}));
  }

  /**
   * Description: 通过提供业务方自定义id来找到目标VC内容并追加授权did列表，只有调用者是目标VC的subject才能操作。 注意通常自定义id不是“vc:mychain:”前缀。
   * Summary: 通过自定义id对目标证书追加授权
   */
  async startDidVcrepositoryAuthwithdefineid(request: StartDidVcrepositoryAuthwithdefineidRequest): Promise<StartDidVcrepositoryAuthwithdefineidResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.startDidVcrepositoryAuthwithdefineidEx(request, headers, runtime);
  }

  /**
   * Description: 通过提供业务方自定义id来找到目标VC内容并追加授权did列表，只有调用者是目标VC的subject才能操作。 注意通常自定义id不是“vc:mychain:”前缀。
   * Summary: 通过自定义id对目标证书追加授权
   */
  async startDidVcrepositoryAuthwithdefineidEx(request: StartDidVcrepositoryAuthwithdefineidRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<StartDidVcrepositoryAuthwithdefineidResponse> {
    Util.validateModel(request);
    return $tea.cast<StartDidVcrepositoryAuthwithdefineidResponse>(await this.doRequest("1.0", "baas.did.vcrepository.authwithdefineid.start", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new StartDidVcrepositoryAuthwithdefineidResponse({}));
  }

  /**
   * Description: 注册自定义的服务类型，目前只有租户did可以调用
   * Summary: 注册自定义服务类型
   */
  async startDidAgentServicetype(request: StartDidAgentServicetypeRequest): Promise<StartDidAgentServicetypeResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.startDidAgentServicetypeEx(request, headers, runtime);
  }

  /**
   * Description: 注册自定义的服务类型，目前只有租户did可以调用
   * Summary: 注册自定义服务类型
   */
  async startDidAgentServicetypeEx(request: StartDidAgentServicetypeRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<StartDidAgentServicetypeResponse> {
    Util.validateModel(request);
    return $tea.cast<StartDidAgentServicetypeResponse>(await this.doRequest("1.0", "baas.did.agent.servicetype.start", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new StartDidAgentServicetypeResponse({}));
  }

  /**
   * Description: 查询指定服务类型的定义，不支持全量查询
   * Summary: 查询指定服务类型的定义
   */
  async queryDidAgentServicetype(request: QueryDidAgentServicetypeRequest): Promise<QueryDidAgentServicetypeResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryDidAgentServicetypeEx(request, headers, runtime);
  }

  /**
   * Description: 查询指定服务类型的定义，不支持全量查询
   * Summary: 查询指定服务类型的定义
   */
  async queryDidAgentServicetypeEx(request: QueryDidAgentServicetypeRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryDidAgentServicetypeResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryDidAgentServicetypeResponse>(await this.doRequest("1.0", "baas.did.agent.servicetype.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryDidAgentServicetypeResponse({}));
  }

  /**
   * Description: 代理模式下更新企业did doc中service中的字段
   * Summary: 代理更新企业did中的services
   */
  async updateDidServices(request: UpdateDidServicesRequest): Promise<UpdateDidServicesResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.updateDidServicesEx(request, headers, runtime);
  }

  /**
   * Description: 代理模式下更新企业did doc中service中的字段
   * Summary: 代理更新企业did中的services
   */
  async updateDidServicesEx(request: UpdateDidServicesRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<UpdateDidServicesResponse> {
    Util.validateModel(request);
    return $tea.cast<UpdateDidServicesResponse>(await this.doRequest("1.0", "baas.did.services.update", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new UpdateDidServicesResponse({}));
  }

  /**
   * Description: 服务发现
   * Summary: 服务发现
   */
  async queryDidAgentServicediscovery(request: QueryDidAgentServicediscoveryRequest): Promise<QueryDidAgentServicediscoveryResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryDidAgentServicediscoveryEx(request, headers, runtime);
  }

  /**
   * Description: 服务发现
   * Summary: 服务发现
   */
  async queryDidAgentServicediscoveryEx(request: QueryDidAgentServicediscoveryRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryDidAgentServicediscoveryResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryDidAgentServicediscoveryResponse>(await this.doRequest("1.0", "baas.did.agent.servicediscovery.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryDidAgentServicediscoveryResponse({}));
  }

  /**
   * Description: 为指定did颁发证书,并将保存到对应仓库
   * Summary: 为指定did颁发证书,并将保存到对应仓库
   */
  async startDidVerifiableclaimIssuerandsave(request: StartDidVerifiableclaimIssuerandsaveRequest): Promise<StartDidVerifiableclaimIssuerandsaveResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.startDidVerifiableclaimIssuerandsaveEx(request, headers, runtime);
  }

  /**
   * Description: 为指定did颁发证书,并将保存到对应仓库
   * Summary: 为指定did颁发证书,并将保存到对应仓库
   */
  async startDidVerifiableclaimIssuerandsaveEx(request: StartDidVerifiableclaimIssuerandsaveRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<StartDidVerifiableclaimIssuerandsaveResponse> {
    Util.validateModel(request);
    return $tea.cast<StartDidVerifiableclaimIssuerandsaveResponse>(await this.doRequest("1.0", "baas.did.verifiableclaim.issuerandsave.start", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new StartDidVerifiableclaimIssuerandsaveResponse({}));
  }

  /**
   * Description: 通过agent代理通过VC Repo进行VC传输
   * Summary: 通过agent代理进行VC传输
   */
  async startDidVcrepositoryVctransmit(request: StartDidVcrepositoryVctransmitRequest): Promise<StartDidVcrepositoryVctransmitResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.startDidVcrepositoryVctransmitEx(request, headers, runtime);
  }

  /**
   * Description: 通过agent代理通过VC Repo进行VC传输
   * Summary: 通过agent代理进行VC传输
   */
  async startDidVcrepositoryVctransmitEx(request: StartDidVcrepositoryVctransmitRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<StartDidVcrepositoryVctransmitResponse> {
    Util.validateModel(request);
    return $tea.cast<StartDidVcrepositoryVctransmitResponse>(await this.doRequest("1.0", "baas.did.vcrepository.vctransmit.start", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new StartDidVcrepositoryVctransmitResponse({}));
  }

  /**
   * Description: 通过个人二要素验证后创建个人did，若未通过个人二要素验证，则不创建did并报错
   * Summary: 通过个人二要素验证后创建个人did
   */
  async createDidPersonWithtwometa(request: CreateDidPersonWithtwometaRequest): Promise<CreateDidPersonWithtwometaResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.createDidPersonWithtwometaEx(request, headers, runtime);
  }

  /**
   * Description: 通过个人二要素验证后创建个人did，若未通过个人二要素验证，则不创建did并报错
   * Summary: 通过个人二要素验证后创建个人did
   */
  async createDidPersonWithtwometaEx(request: CreateDidPersonWithtwometaRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CreateDidPersonWithtwometaResponse> {
    Util.validateModel(request);
    return $tea.cast<CreateDidPersonWithtwometaResponse>(await this.doRequest("1.0", "baas.did.person.withtwometa.create", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CreateDidPersonWithtwometaResponse({}));
  }

  /**
   * Description: 通过企业二要素验证后创建企业did
   * Summary: 通过企业二要素验证后创建企业did
   */
  async createDidCorporateWithtwometa(request: CreateDidCorporateWithtwometaRequest): Promise<CreateDidCorporateWithtwometaResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.createDidCorporateWithtwometaEx(request, headers, runtime);
  }

  /**
   * Description: 通过企业二要素验证后创建企业did
   * Summary: 通过企业二要素验证后创建企业did
   */
  async createDidCorporateWithtwometaEx(request: CreateDidCorporateWithtwometaRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CreateDidCorporateWithtwometaResponse> {
    Util.validateModel(request);
    return $tea.cast<CreateDidCorporateWithtwometaResponse>(await this.doRequest("1.0", "baas.did.corporate.withtwometa.create", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CreateDidCorporateWithtwometaResponse({}));
  }

  /**
   * Description: 通过企业四要素验证后创建企业did
   * Summary: 通过企业四要素验证后创建企业did
   */
  async createDidCorporateWithfourmeta(request: CreateDidCorporateWithfourmetaRequest): Promise<CreateDidCorporateWithfourmetaResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.createDidCorporateWithfourmetaEx(request, headers, runtime);
  }

  /**
   * Description: 通过企业四要素验证后创建企业did
   * Summary: 通过企业四要素验证后创建企业did
   */
  async createDidCorporateWithfourmetaEx(request: CreateDidCorporateWithfourmetaRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CreateDidCorporateWithfourmetaResponse> {
    Util.validateModel(request);
    return $tea.cast<CreateDidCorporateWithfourmetaResponse>(await this.doRequest("1.0", "baas.did.corporate.withfourmeta.create", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CreateDidCorporateWithfourmetaResponse({}));
  }

  /**
   * Description: 通过个人四要素验证后创建个人did
   * Summary: 通过个人四要素验证后创建个人did
   */
  async createDidPersonWithfourmeta(request: CreateDidPersonWithfourmetaRequest): Promise<CreateDidPersonWithfourmetaResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.createDidPersonWithfourmetaEx(request, headers, runtime);
  }

  /**
   * Description: 通过个人四要素验证后创建个人did
   * Summary: 通过个人四要素验证后创建个人did
   */
  async createDidPersonWithfourmetaEx(request: CreateDidPersonWithfourmetaRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CreateDidPersonWithfourmetaResponse> {
    Util.validateModel(request);
    return $tea.cast<CreateDidPersonWithfourmetaResponse>(await this.doRequest("1.0", "baas.did.person.withfourmeta.create", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CreateDidPersonWithfourmetaResponse({}));
  }

  /**
   * Description: 对did进行企业二要素实名认证
   * Summary: 对did进行企业二要素实名认证
   */
  async startDidCorporateTwometa(request: StartDidCorporateTwometaRequest): Promise<StartDidCorporateTwometaResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.startDidCorporateTwometaEx(request, headers, runtime);
  }

  /**
   * Description: 对did进行企业二要素实名认证
   * Summary: 对did进行企业二要素实名认证
   */
  async startDidCorporateTwometaEx(request: StartDidCorporateTwometaRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<StartDidCorporateTwometaResponse> {
    Util.validateModel(request);
    return $tea.cast<StartDidCorporateTwometaResponse>(await this.doRequest("1.0", "baas.did.corporate.twometa.start", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new StartDidCorporateTwometaResponse({}));
  }

  /**
   * Description: 对did进行企业三要素实名认证
   * Summary: 对did进行企业三要素实名认证
   */
  async startDidCorporateThreemeta(request: StartDidCorporateThreemetaRequest): Promise<StartDidCorporateThreemetaResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.startDidCorporateThreemetaEx(request, headers, runtime);
  }

  /**
   * Description: 对did进行企业三要素实名认证
   * Summary: 对did进行企业三要素实名认证
   */
  async startDidCorporateThreemetaEx(request: StartDidCorporateThreemetaRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<StartDidCorporateThreemetaResponse> {
    Util.validateModel(request);
    return $tea.cast<StartDidCorporateThreemetaResponse>(await this.doRequest("1.0", "baas.did.corporate.threemeta.start", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new StartDidCorporateThreemetaResponse({}));
  }

  /**
   * Description: 对did进行企业四要素实名认证
   * Summary: 对did进行企业四要素实名认证
   */
  async startDidCorporateFourmeta(request: StartDidCorporateFourmetaRequest): Promise<StartDidCorporateFourmetaResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.startDidCorporateFourmetaEx(request, headers, runtime);
  }

  /**
   * Description: 对did进行企业四要素实名认证
   * Summary: 对did进行企业四要素实名认证
   */
  async startDidCorporateFourmetaEx(request: StartDidCorporateFourmetaRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<StartDidCorporateFourmetaResponse> {
    Util.validateModel(request);
    return $tea.cast<StartDidCorporateFourmetaResponse>(await this.doRequest("1.0", "baas.did.corporate.fourmeta.start", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new StartDidCorporateFourmetaResponse({}));
  }

  /**
   * Description: 四要素实名认证
   * Summary: 四要素实名认证
   */
  async startDidCertificationFourmeta(request: StartDidCertificationFourmetaRequest): Promise<StartDidCertificationFourmetaResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.startDidCertificationFourmetaEx(request, headers, runtime);
  }

  /**
   * Description: 四要素实名认证
   * Summary: 四要素实名认证
   */
  async startDidCertificationFourmetaEx(request: StartDidCertificationFourmetaRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<StartDidCertificationFourmetaResponse> {
    Util.validateModel(request);
    return $tea.cast<StartDidCertificationFourmetaResponse>(await this.doRequest("1.0", "baas.did.certification.fourmeta.start", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new StartDidCertificationFourmetaResponse({}));
  }

  /**
   * Description: 模糊查询VC列表
   * Summary: 模糊查询vc
   */
  async queryDidVcrepositoryFuzzyquerywithdefinedid(request: QueryDidVcrepositoryFuzzyquerywithdefinedidRequest): Promise<QueryDidVcrepositoryFuzzyquerywithdefinedidResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryDidVcrepositoryFuzzyquerywithdefinedidEx(request, headers, runtime);
  }

  /**
   * Description: 模糊查询VC列表
   * Summary: 模糊查询vc
   */
  async queryDidVcrepositoryFuzzyquerywithdefinedidEx(request: QueryDidVcrepositoryFuzzyquerywithdefinedidRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryDidVcrepositoryFuzzyquerywithdefinedidResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryDidVcrepositoryFuzzyquerywithdefinedidResponse>(await this.doRequest("1.0", "baas.did.vcrepository.fuzzyquerywithdefinedid.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryDidVcrepositoryFuzzyquerywithdefinedidResponse({}));
  }

  /**
   * Description: 通过代理模式为普通账号创建did
   * Summary: 通过代理模式为普通账号创建did
   */
  async startDidCommonAgentcreate(request: StartDidCommonAgentcreateRequest): Promise<StartDidCommonAgentcreateResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.startDidCommonAgentcreateEx(request, headers, runtime);
  }

  /**
   * Description: 通过代理模式为普通账号创建did
   * Summary: 通过代理模式为普通账号创建did
   */
  async startDidCommonAgentcreateEx(request: StartDidCommonAgentcreateRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<StartDidCommonAgentcreateResponse> {
    Util.validateModel(request);
    return $tea.cast<StartDidCommonAgentcreateResponse>(await this.doRequest("1.0", "baas.did.common.agentcreate.start", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new StartDidCommonAgentcreateResponse({}));
  }

  /**
   * Description: 企业法人刷脸认证
   * Summary: 企业法人刷脸认证
   */
  async startDidCorporateFaceauth(request: StartDidCorporateFaceauthRequest): Promise<StartDidCorporateFaceauthResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.startDidCorporateFaceauthEx(request, headers, runtime);
  }

  /**
   * Description: 企业法人刷脸认证
   * Summary: 企业法人刷脸认证
   */
  async startDidCorporateFaceauthEx(request: StartDidCorporateFaceauthRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<StartDidCorporateFaceauthResponse> {
    Util.validateModel(request);
    return $tea.cast<StartDidCorporateFaceauthResponse>(await this.doRequest("1.0", "baas.did.corporate.faceauth.start", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new StartDidCorporateFaceauthResponse({}));
  }

  /**
   * Description: 查询企业法人实人结果
   * Summary: 查询企业法人实人结果
   */
  async queryDidCorporateFaceauth(request: QueryDidCorporateFaceauthRequest): Promise<QueryDidCorporateFaceauthResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryDidCorporateFaceauthEx(request, headers, runtime);
  }

  /**
   * Description: 查询企业法人实人结果
   * Summary: 查询企业法人实人结果
   */
  async queryDidCorporateFaceauthEx(request: QueryDidCorporateFaceauthRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryDidCorporateFaceauthResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryDidCorporateFaceauthResponse>(await this.doRequest("1.0", "baas.did.corporate.faceauth.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryDidCorporateFaceauthResponse({}));
  }

  /**
   * Description: 用户删除不需要的VC
   * Summary: 用户删除不需要的vc
   */
  async deleteDidVcrepositoryVc(request: DeleteDidVcrepositoryVcRequest): Promise<DeleteDidVcrepositoryVcResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.deleteDidVcrepositoryVcEx(request, headers, runtime);
  }

  /**
   * Description: 用户删除不需要的VC
   * Summary: 用户删除不需要的vc
   */
  async deleteDidVcrepositoryVcEx(request: DeleteDidVcrepositoryVcRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<DeleteDidVcrepositoryVcResponse> {
    Util.validateModel(request);
    return $tea.cast<DeleteDidVcrepositoryVcResponse>(await this.doRequest("1.0", "baas.did.vcrepository.vc.delete", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new DeleteDidVcrepositoryVcResponse({}));
  }

  /**
   * Description:  构造包含零知识 字段的VC
   * Summary: 构造零知识证明的VC
   */
  async startDidZkpverifiableclaimProof(request: StartDidZkpverifiableclaimProofRequest): Promise<StartDidZkpverifiableclaimProofResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.startDidZkpverifiableclaimProofEx(request, headers, runtime);
  }

  /**
   * Description:  构造包含零知识 字段的VC
   * Summary: 构造零知识证明的VC
   */
  async startDidZkpverifiableclaimProofEx(request: StartDidZkpverifiableclaimProofRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<StartDidZkpverifiableclaimProofResponse> {
    Util.validateModel(request);
    return $tea.cast<StartDidZkpverifiableclaimProofResponse>(await this.doRequest("1.0", "baas.did.zkpverifiableclaim.proof.start", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new StartDidZkpverifiableclaimProofResponse({}));
  }

  /**
   * Description: 验证包含ZKP Proof的VC
   * Summary: 验证包含ZKP Proof的VC
   */
  async verifyDidZkpverifiableclaimProof(request: VerifyDidZkpverifiableclaimProofRequest): Promise<VerifyDidZkpverifiableclaimProofResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.verifyDidZkpverifiableclaimProofEx(request, headers, runtime);
  }

  /**
   * Description: 验证包含ZKP Proof的VC
   * Summary: 验证包含ZKP Proof的VC
   */
  async verifyDidZkpverifiableclaimProofEx(request: VerifyDidZkpverifiableclaimProofRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<VerifyDidZkpverifiableclaimProofResponse> {
    Util.validateModel(request);
    return $tea.cast<VerifyDidZkpverifiableclaimProofResponse>(await this.doRequest("1.0", "baas.did.zkpverifiableclaim.proof.verify", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new VerifyDidZkpverifiableclaimProofResponse({}));
  }

  /**
   * Description: 支持移动端APP的安卓和IOS集成SDK进行刷脸认证，在查询query认证结果通过的情况下创建DID身份。
   * Summary: APP移动端刷脸认证成功后创建DID
   */
  async createDidPersonFacevrf(request: CreateDidPersonFacevrfRequest): Promise<CreateDidPersonFacevrfResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.createDidPersonFacevrfEx(request, headers, runtime);
  }

  /**
   * Description: 支持移动端APP的安卓和IOS集成SDK进行刷脸认证，在查询query认证结果通过的情况下创建DID身份。
   * Summary: APP移动端刷脸认证成功后创建DID
   */
  async createDidPersonFacevrfEx(request: CreateDidPersonFacevrfRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CreateDidPersonFacevrfResponse> {
    Util.validateModel(request);
    return $tea.cast<CreateDidPersonFacevrfResponse>(await this.doRequest("1.0", "baas.did.person.facevrf.create", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CreateDidPersonFacevrfResponse({}));
  }

  /**
   * Description: 查询之前发起的实人认证的结果，如果认证通过就创建DID身份并返回。
   * Summary: 查询可信实人认证的结果并创建DID
   */
  async queryDidPersonFacevrf(request: QueryDidPersonFacevrfRequest): Promise<QueryDidPersonFacevrfResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryDidPersonFacevrfEx(request, headers, runtime);
  }

  /**
   * Description: 查询之前发起的实人认证的结果，如果认证通过就创建DID身份并返回。
   * Summary: 查询可信实人认证的结果并创建DID
   */
  async queryDidPersonFacevrfEx(request: QueryDidPersonFacevrfRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryDidPersonFacevrfResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryDidPersonFacevrfResponse>(await this.doRequest("1.0", "baas.did.person.facevrf.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryDidPersonFacevrfResponse({}));
  }

  /**
   * Description: h5或者小程序刷脸认证成功后创建DID
   * Summary: h5或者小程序刷脸认证成功后创建DID
   */
  async createDidPersonFacevrfminiapp(request: CreateDidPersonFacevrfminiappRequest): Promise<CreateDidPersonFacevrfminiappResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.createDidPersonFacevrfminiappEx(request, headers, runtime);
  }

  /**
   * Description: h5或者小程序刷脸认证成功后创建DID
   * Summary: h5或者小程序刷脸认证成功后创建DID
   */
  async createDidPersonFacevrfminiappEx(request: CreateDidPersonFacevrfminiappRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CreateDidPersonFacevrfminiappResponse> {
    Util.validateModel(request);
    return $tea.cast<CreateDidPersonFacevrfminiappResponse>(await this.doRequest("1.0", "baas.did.person.facevrfminiapp.create", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CreateDidPersonFacevrfminiappResponse({}));
  }

  /**
   * Description: 查询之前发起的实人认证的结果，如果认证通过就创建DID身份并返回。
   * Summary: 查询小程序刷脸的结果并创建DID
   */
  async queryDidPersonFacevrfminiapp(request: QueryDidPersonFacevrfminiappRequest): Promise<QueryDidPersonFacevrfminiappResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryDidPersonFacevrfminiappEx(request, headers, runtime);
  }

  /**
   * Description: 查询之前发起的实人认证的结果，如果认证通过就创建DID身份并返回。
   * Summary: 查询小程序刷脸的结果并创建DID
   */
  async queryDidPersonFacevrfminiappEx(request: QueryDidPersonFacevrfminiappRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryDidPersonFacevrfminiappResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryDidPersonFacevrfminiappResponse>(await this.doRequest("1.0", "baas.did.person.facevrfminiapp.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryDidPersonFacevrfminiappResponse({}));
  }

  /**
   * Description: 使用自己或者代理的did为指定did颁发证书，同时在VC Repository中对证书VC进行存储。 支持授权管理，只有被授权的did未来才可以访问获取此颁发的证书数据。
   * Summary: 指定did颁发证书，并存储（新商品）
   */
  async startDidVcrepositoryIssuenewocp(request: StartDidVcrepositoryIssuenewocpRequest): Promise<StartDidVcrepositoryIssuenewocpResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.startDidVcrepositoryIssuenewocpEx(request, headers, runtime);
  }

  /**
   * Description: 使用自己或者代理的did为指定did颁发证书，同时在VC Repository中对证书VC进行存储。 支持授权管理，只有被授权的did未来才可以访问获取此颁发的证书数据。
   * Summary: 指定did颁发证书，并存储（新商品）
   */
  async startDidVcrepositoryIssuenewocpEx(request: StartDidVcrepositoryIssuenewocpRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<StartDidVcrepositoryIssuenewocpResponse> {
    Util.validateModel(request);
    return $tea.cast<StartDidVcrepositoryIssuenewocpResponse>(await this.doRequest("1.0", "baas.did.vcrepository.issuenewocp.start", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new StartDidVcrepositoryIssuenewocpResponse({}));
  }

  /**
   * Description: 使用自己或者代理的did为指定did颁发证书
   * Summary: 为指定did颁发证书（新商品）
   */
  async startDidVerifiableclaimIssurenewocp(request: StartDidVerifiableclaimIssurenewocpRequest): Promise<StartDidVerifiableclaimIssurenewocpResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.startDidVerifiableclaimIssurenewocpEx(request, headers, runtime);
  }

  /**
   * Description: 使用自己或者代理的did为指定did颁发证书
   * Summary: 为指定did颁发证书（新商品）
   */
  async startDidVerifiableclaimIssurenewocpEx(request: StartDidVerifiableclaimIssurenewocpRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<StartDidVerifiableclaimIssurenewocpResponse> {
    Util.validateModel(request);
    return $tea.cast<StartDidVerifiableclaimIssurenewocpResponse>(await this.doRequest("1.0", "baas.did.verifiableclaim.issurenewocp.start", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new StartDidVerifiableclaimIssurenewocpResponse({}));
  }

  /**
   * Description: 通过个人二要素验证后创建个人did，若未通过个人二要素验证，则不创建did并报错
   * Summary: 通过个人二要素验证后创建个人did（新）
   */
  async createDidPersonWithtwometanewocp(request: CreateDidPersonWithtwometanewocpRequest): Promise<CreateDidPersonWithtwometanewocpResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.createDidPersonWithtwometanewocpEx(request, headers, runtime);
  }

  /**
   * Description: 通过个人二要素验证后创建个人did，若未通过个人二要素验证，则不创建did并报错
   * Summary: 通过个人二要素验证后创建个人did（新）
   */
  async createDidPersonWithtwometanewocpEx(request: CreateDidPersonWithtwometanewocpRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CreateDidPersonWithtwometanewocpResponse> {
    Util.validateModel(request);
    return $tea.cast<CreateDidPersonWithtwometanewocpResponse>(await this.doRequest("1.0", "baas.did.person.withtwometanewocp.create", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CreateDidPersonWithtwometanewocpResponse({}));
  }

  /**
   * Description: 通过个人三要素验证后创建个人did，若未通过个人三要素验证，则不创建did并报错
   * Summary: 通过个人三要素验证后创建个人did（新）
   */
  async createDidPersonWiththreemetanewocp(request: CreateDidPersonWiththreemetanewocpRequest): Promise<CreateDidPersonWiththreemetanewocpResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.createDidPersonWiththreemetanewocpEx(request, headers, runtime);
  }

  /**
   * Description: 通过个人三要素验证后创建个人did，若未通过个人三要素验证，则不创建did并报错
   * Summary: 通过个人三要素验证后创建个人did（新）
   */
  async createDidPersonWiththreemetanewocpEx(request: CreateDidPersonWiththreemetanewocpRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CreateDidPersonWiththreemetanewocpResponse> {
    Util.validateModel(request);
    return $tea.cast<CreateDidPersonWiththreemetanewocpResponse>(await this.doRequest("1.0", "baas.did.person.withthreemetanewocp.create", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CreateDidPersonWiththreemetanewocpResponse({}));
  }

  /**
   * Description: 开始实人认证
   * Summary: 开始实人认证（新商品）
   */
  async startDidIdentificationFaceauthnewocp(request: StartDidIdentificationFaceauthnewocpRequest): Promise<StartDidIdentificationFaceauthnewocpResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.startDidIdentificationFaceauthnewocpEx(request, headers, runtime);
  }

  /**
   * Description: 开始实人认证
   * Summary: 开始实人认证（新商品）
   */
  async startDidIdentificationFaceauthnewocpEx(request: StartDidIdentificationFaceauthnewocpRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<StartDidIdentificationFaceauthnewocpResponse> {
    Util.validateModel(request);
    return $tea.cast<StartDidIdentificationFaceauthnewocpResponse>(await this.doRequest("1.0", "baas.did.identification.faceauthnewocp.start", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new StartDidIdentificationFaceauthnewocpResponse({}));
  }

  /**
   * Description: 支持移动端APP的安卓和IOS集成SDK进行刷脸认证，在查询query认证结果通过的情况下创建DID身份。
   * Summary: APP移动端刷脸认证成功后创建DID
   */
  async createDidPersonFacevrfnewocp(request: CreateDidPersonFacevrfnewocpRequest): Promise<CreateDidPersonFacevrfnewocpResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.createDidPersonFacevrfnewocpEx(request, headers, runtime);
  }

  /**
   * Description: 支持移动端APP的安卓和IOS集成SDK进行刷脸认证，在查询query认证结果通过的情况下创建DID身份。
   * Summary: APP移动端刷脸认证成功后创建DID
   */
  async createDidPersonFacevrfnewocpEx(request: CreateDidPersonFacevrfnewocpRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CreateDidPersonFacevrfnewocpResponse> {
    Util.validateModel(request);
    return $tea.cast<CreateDidPersonFacevrfnewocpResponse>(await this.doRequest("1.0", "baas.did.person.facevrfnewocp.create", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CreateDidPersonFacevrfnewocpResponse({}));
  }

  /**
   * Description: h5或者小程序刷脸认证成功后创建DID（新个人刷脸商品）
   * Summary: h5或者小程序刷脸认证成功后创建DID
   */
  async createDidPersonFacevrfminiappnewocp(request: CreateDidPersonFacevrfminiappnewocpRequest): Promise<CreateDidPersonFacevrfminiappnewocpResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.createDidPersonFacevrfminiappnewocpEx(request, headers, runtime);
  }

  /**
   * Description: h5或者小程序刷脸认证成功后创建DID（新个人刷脸商品）
   * Summary: h5或者小程序刷脸认证成功后创建DID
   */
  async createDidPersonFacevrfminiappnewocpEx(request: CreateDidPersonFacevrfminiappnewocpRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CreateDidPersonFacevrfminiappnewocpResponse> {
    Util.validateModel(request);
    return $tea.cast<CreateDidPersonFacevrfminiappnewocpResponse>(await this.doRequest("1.0", "baas.did.person.facevrfminiappnewocp.create", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CreateDidPersonFacevrfminiappnewocpResponse({}));
  }

  /**
   * Description: 三要素实名认证（新商品）
   * Summary: 三要素实名认证
   */
  async startDidCertificationThreemetanewocp(request: StartDidCertificationThreemetanewocpRequest): Promise<StartDidCertificationThreemetanewocpResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.startDidCertificationThreemetanewocpEx(request, headers, runtime);
  }

  /**
   * Description: 三要素实名认证（新商品）
   * Summary: 三要素实名认证
   */
  async startDidCertificationThreemetanewocpEx(request: StartDidCertificationThreemetanewocpRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<StartDidCertificationThreemetanewocpResponse> {
    Util.validateModel(request);
    return $tea.cast<StartDidCertificationThreemetanewocpResponse>(await this.doRequest("1.0", "baas.did.certification.threemetanewocp.start", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new StartDidCertificationThreemetanewocpResponse({}));
  }

  /**
   * Description: 迁移did至aldaba链
   * Summary: 迁移did至aldaba链
   */
  async importDidAldaba(request: ImportDidAldabaRequest): Promise<ImportDidAldabaResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.importDidAldabaEx(request, headers, runtime);
  }

  /**
   * Description: 迁移did至aldaba链
   * Summary: 迁移did至aldaba链
   */
  async importDidAldabaEx(request: ImportDidAldabaRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<ImportDidAldabaResponse> {
    Util.validateModel(request);
    return $tea.cast<ImportDidAldabaResponse>(await this.doRequest("1.0", "baas.did.aldaba.import", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new ImportDidAldabaResponse({}));
  }

  /**
   * Description: 端上密钥生成did，但不doc上链
   * Summary: 端上密钥生成did
   */
  async createDidDtxPerson(request: CreateDidDtxPersonRequest): Promise<CreateDidDtxPersonResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.createDidDtxPersonEx(request, headers, runtime);
  }

  /**
   * Description: 端上密钥生成did，但不doc上链
   * Summary: 端上密钥生成did
   */
  async createDidDtxPersonEx(request: CreateDidDtxPersonRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CreateDidDtxPersonResponse> {
    Util.validateModel(request);
    return $tea.cast<CreateDidDtxPersonResponse>(await this.doRequest("1.0", "baas.did.dtx.person.create", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CreateDidDtxPersonResponse({}));
  }

  /**
   * Description: 添加端上密钥，并上链
   * Summary: 添加端上密钥
   */
  async addDidDtxPk(request: AddDidDtxPkRequest): Promise<AddDidDtxPkResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.addDidDtxPkEx(request, headers, runtime);
  }

  /**
   * Description: 添加端上密钥，并上链
   * Summary: 添加端上密钥
   */
  async addDidDtxPkEx(request: AddDidDtxPkRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<AddDidDtxPkResponse> {
    Util.validateModel(request);
    return $tea.cast<AddDidDtxPkResponse>(await this.doRequest("1.0", "baas.did.dtx.pk.add", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new AddDidDtxPkResponse({}));
  }

  /**
   * Description: 端上密钥颁发vc
   * Summary: 端上密钥颁发vc
   */
  async createDidDtxVc(request: CreateDidDtxVcRequest): Promise<CreateDidDtxVcResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.createDidDtxVcEx(request, headers, runtime);
  }

  /**
   * Description: 端上密钥颁发vc
   * Summary: 端上密钥颁发vc
   */
  async createDidDtxVcEx(request: CreateDidDtxVcRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CreateDidDtxVcResponse> {
    Util.validateModel(request);
    return $tea.cast<CreateDidDtxVcResponse>(await this.doRequest("1.0", "baas.did.dtx.vc.create", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CreateDidDtxVcResponse({}));
  }

  /**
   * Description: 数据隐私服务合作方入驻接口
   * Summary: 数据隐私服务合作方入驻接口
   */
  async startMydidcommunAgencySettlein(request: StartMydidcommunAgencySettleinRequest): Promise<StartMydidcommunAgencySettleinResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.startMydidcommunAgencySettleinEx(request, headers, runtime);
  }

  /**
   * Description: 数据隐私服务合作方入驻接口
   * Summary: 数据隐私服务合作方入驻接口
   */
  async startMydidcommunAgencySettleinEx(request: StartMydidcommunAgencySettleinRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<StartMydidcommunAgencySettleinResponse> {
    Util.validateModel(request);
    return $tea.cast<StartMydidcommunAgencySettleinResponse>(await this.doRequest("1.0", "baas.mydidcommun.agency.settlein.start", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new StartMydidcommunAgencySettleinResponse({}));
  }

  /**
   * Description: 数据隐私服务合作机构选择tapp接口
   * Summary: 数据隐私服务合作机构选择tapp接口
   */
  async startMydidcommunAgencyChoicetapp(request: StartMydidcommunAgencyChoicetappRequest): Promise<StartMydidcommunAgencyChoicetappResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.startMydidcommunAgencyChoicetappEx(request, headers, runtime);
  }

  /**
   * Description: 数据隐私服务合作机构选择tapp接口
   * Summary: 数据隐私服务合作机构选择tapp接口
   */
  async startMydidcommunAgencyChoicetappEx(request: StartMydidcommunAgencyChoicetappRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<StartMydidcommunAgencyChoicetappResponse> {
    Util.validateModel(request);
    return $tea.cast<StartMydidcommunAgencyChoicetappResponse>(await this.doRequest("1.0", "baas.mydidcommun.agency.choicetapp.start", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new StartMydidcommunAgencyChoicetappResponse({}));
  }

  /**
   * Description: 数据隐私服务合作机构下个人用户入驻接口
   * Summary: 数据隐私服务合作机构下个人用户入驻接口
   */
  async startMydidcommunAgencyuserPersonjoin(request: StartMydidcommunAgencyuserPersonjoinRequest): Promise<StartMydidcommunAgencyuserPersonjoinResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.startMydidcommunAgencyuserPersonjoinEx(request, headers, runtime);
  }

  /**
   * Description: 数据隐私服务合作机构下个人用户入驻接口
   * Summary: 数据隐私服务合作机构下个人用户入驻接口
   */
  async startMydidcommunAgencyuserPersonjoinEx(request: StartMydidcommunAgencyuserPersonjoinRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<StartMydidcommunAgencyuserPersonjoinResponse> {
    Util.validateModel(request);
    return $tea.cast<StartMydidcommunAgencyuserPersonjoinResponse>(await this.doRequest("1.0", "baas.mydidcommun.agencyuser.personjoin.start", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new StartMydidcommunAgencyuserPersonjoinResponse({}));
  }

  /**
   * Description: 数据隐私服务合作机构下企业用户入驻接口
   * Summary: 数据隐私服务合作机构下企业用户入驻接口
   */
  async startMydidcommunAgencyuserCorporatejoin(request: StartMydidcommunAgencyuserCorporatejoinRequest): Promise<StartMydidcommunAgencyuserCorporatejoinResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.startMydidcommunAgencyuserCorporatejoinEx(request, headers, runtime);
  }

  /**
   * Description: 数据隐私服务合作机构下企业用户入驻接口
   * Summary: 数据隐私服务合作机构下企业用户入驻接口
   */
  async startMydidcommunAgencyuserCorporatejoinEx(request: StartMydidcommunAgencyuserCorporatejoinRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<StartMydidcommunAgencyuserCorporatejoinResponse> {
    Util.validateModel(request);
    return $tea.cast<StartMydidcommunAgencyuserCorporatejoinResponse>(await this.doRequest("1.0", "baas.mydidcommun.agencyuser.corporatejoin.start", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new StartMydidcommunAgencyuserCorporatejoinResponse({}));
  }

  /**
   * Description: 更新doc service接口
   * Summary: 更新doc service接口
   */
  async updateMydidcommunAgencyDoc(request: UpdateMydidcommunAgencyDocRequest): Promise<UpdateMydidcommunAgencyDocResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.updateMydidcommunAgencyDocEx(request, headers, runtime);
  }

  /**
   * Description: 更新doc service接口
   * Summary: 更新doc service接口
   */
  async updateMydidcommunAgencyDocEx(request: UpdateMydidcommunAgencyDocRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<UpdateMydidcommunAgencyDocResponse> {
    Util.validateModel(request);
    return $tea.cast<UpdateMydidcommunAgencyDocResponse>(await this.doRequest("1.0", "baas.mydidcommun.agency.doc.update", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new UpdateMydidcommunAgencyDocResponse({}));
  }

  /**
   * Description: 主动发起数据传输流程请求
   * Summary: 主动发起数据安全传输流程
   */
  async startMydidcommunAgencyDatatransmitstart(request: StartMydidcommunAgencyDatatransmitstartRequest): Promise<StartMydidcommunAgencyDatatransmitstartResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.startMydidcommunAgencyDatatransmitstartEx(request, headers, runtime);
  }

  /**
   * Description: 主动发起数据传输流程请求
   * Summary: 主动发起数据安全传输流程
   */
  async startMydidcommunAgencyDatatransmitstartEx(request: StartMydidcommunAgencyDatatransmitstartRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<StartMydidcommunAgencyDatatransmitstartResponse> {
    Util.validateModel(request);
    return $tea.cast<StartMydidcommunAgencyDatatransmitstartResponse>(await this.doRequest("1.0", "baas.mydidcommun.agency.datatransmitstart.start", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new StartMydidcommunAgencyDatatransmitstartResponse({}));
  }

  /**
   * Description: 继续触发主动发起数据安全传输流程
   * Summary: 继续触发主动发起数据安全传输流程
   */
  async startMydidcommunAgencyDatatransmitcontinue(request: StartMydidcommunAgencyDatatransmitcontinueRequest): Promise<StartMydidcommunAgencyDatatransmitcontinueResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.startMydidcommunAgencyDatatransmitcontinueEx(request, headers, runtime);
  }

  /**
   * Description: 继续触发主动发起数据安全传输流程
   * Summary: 继续触发主动发起数据安全传输流程
   */
  async startMydidcommunAgencyDatatransmitcontinueEx(request: StartMydidcommunAgencyDatatransmitcontinueRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<StartMydidcommunAgencyDatatransmitcontinueResponse> {
    Util.validateModel(request);
    return $tea.cast<StartMydidcommunAgencyDatatransmitcontinueResponse>(await this.doRequest("1.0", "baas.mydidcommun.agency.datatransmitcontinue.start", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new StartMydidcommunAgencyDatatransmitcontinueResponse({}));
  }

  /**
   * Description: 主动发起申请数据资产的流程
   * Summary: 主动发起申请数据资产的流程
   */
  async startMydidcommunAgencyDataapplication(request: StartMydidcommunAgencyDataapplicationRequest): Promise<StartMydidcommunAgencyDataapplicationResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.startMydidcommunAgencyDataapplicationEx(request, headers, runtime);
  }

  /**
   * Description: 主动发起申请数据资产的流程
   * Summary: 主动发起申请数据资产的流程
   */
  async startMydidcommunAgencyDataapplicationEx(request: StartMydidcommunAgencyDataapplicationRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<StartMydidcommunAgencyDataapplicationResponse> {
    Util.validateModel(request);
    return $tea.cast<StartMydidcommunAgencyDataapplicationResponse>(await this.doRequest("1.0", "baas.mydidcommun.agency.dataapplication.start", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new StartMydidcommunAgencyDataapplicationResponse({}));
  }

  /**
   * Description: 据隐私服务合作机构选择多个tapp接口
   * Summary: 据隐私服务合作机构选择多个tapp接口
   */
  async startMydidcommunAgencyChoicetapplist(request: StartMydidcommunAgencyChoicetapplistRequest): Promise<StartMydidcommunAgencyChoicetapplistResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.startMydidcommunAgencyChoicetapplistEx(request, headers, runtime);
  }

  /**
   * Description: 据隐私服务合作机构选择多个tapp接口
   * Summary: 据隐私服务合作机构选择多个tapp接口
   */
  async startMydidcommunAgencyChoicetapplistEx(request: StartMydidcommunAgencyChoicetapplistRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<StartMydidcommunAgencyChoicetapplistResponse> {
    Util.validateModel(request);
    return $tea.cast<StartMydidcommunAgencyChoicetapplistResponse>(await this.doRequest("1.0", "baas.mydidcommun.agency.choicetapplist.start", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new StartMydidcommunAgencyChoicetapplistResponse({}));
  }

  /**
   * Description: 定义数据资产审批流程
   * Summary: 定义数据资产审批流程
   */
  async startMydidcommunAgencyDataassertregister(request: StartMydidcommunAgencyDataassertregisterRequest): Promise<StartMydidcommunAgencyDataassertregisterResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.startMydidcommunAgencyDataassertregisterEx(request, headers, runtime);
  }

  /**
   * Description: 定义数据资产审批流程
   * Summary: 定义数据资产审批流程
   */
  async startMydidcommunAgencyDataassertregisterEx(request: StartMydidcommunAgencyDataassertregisterRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<StartMydidcommunAgencyDataassertregisterResponse> {
    Util.validateModel(request);
    return $tea.cast<StartMydidcommunAgencyDataassertregisterResponse>(await this.doRequest("1.0", "baas.mydidcommun.agency.dataassertregister.start", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new StartMydidcommunAgencyDataassertregisterResponse({}));
  }

  /**
   * Description: 发起数据授权
   * Summary: 发起数据授权
   */
  async startMydidcommunAgencyAuth(request: StartMydidcommunAgencyAuthRequest): Promise<StartMydidcommunAgencyAuthResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.startMydidcommunAgencyAuthEx(request, headers, runtime);
  }

  /**
   * Description: 发起数据授权
   * Summary: 发起数据授权
   */
  async startMydidcommunAgencyAuthEx(request: StartMydidcommunAgencyAuthRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<StartMydidcommunAgencyAuthResponse> {
    Util.validateModel(request);
    return $tea.cast<StartMydidcommunAgencyAuthResponse>(await this.doRequest("1.0", "baas.mydidcommun.agency.auth.start", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new StartMydidcommunAgencyAuthResponse({}));
  }

  /**
   * Description: 处理授权流程
   * Summary: 处理授权流程
   */
  async startMydidcommunAgencyProcessauth(request: StartMydidcommunAgencyProcessauthRequest): Promise<StartMydidcommunAgencyProcessauthResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.startMydidcommunAgencyProcessauthEx(request, headers, runtime);
  }

  /**
   * Description: 处理授权流程
   * Summary: 处理授权流程
   */
  async startMydidcommunAgencyProcessauthEx(request: StartMydidcommunAgencyProcessauthRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<StartMydidcommunAgencyProcessauthResponse> {
    Util.validateModel(request);
    return $tea.cast<StartMydidcommunAgencyProcessauthResponse>(await this.doRequest("1.0", "baas.mydidcommun.agency.processauth.start", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new StartMydidcommunAgencyProcessauthResponse({}));
  }

  /**
   * Description: 查询授权当前状态
   * Summary: 查询授权当前状态
   */
  async queryMydidcommunAgencyProcessauth(request: QueryMydidcommunAgencyProcessauthRequest): Promise<QueryMydidcommunAgencyProcessauthResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryMydidcommunAgencyProcessauthEx(request, headers, runtime);
  }

  /**
   * Description: 查询授权当前状态
   * Summary: 查询授权当前状态
   */
  async queryMydidcommunAgencyProcessauthEx(request: QueryMydidcommunAgencyProcessauthRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryMydidcommunAgencyProcessauthResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryMydidcommunAgencyProcessauthResponse>(await this.doRequest("1.0", "baas.mydidcommun.agency.processauth.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryMydidcommunAgencyProcessauthResponse({}));
  }

  /**
   * Description: 通过serviceType查找其对应信息
   * Summary: 通过serviceType查找其对应信息
   */
  async queryMydidcommunAgencyServicetypeinfo(request: QueryMydidcommunAgencyServicetypeinfoRequest): Promise<QueryMydidcommunAgencyServicetypeinfoResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryMydidcommunAgencyServicetypeinfoEx(request, headers, runtime);
  }

  /**
   * Description: 通过serviceType查找其对应信息
   * Summary: 通过serviceType查找其对应信息
   */
  async queryMydidcommunAgencyServicetypeinfoEx(request: QueryMydidcommunAgencyServicetypeinfoRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryMydidcommunAgencyServicetypeinfoResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryMydidcommunAgencyServicetypeinfoResponse>(await this.doRequest("1.0", "baas.mydidcommun.agency.servicetypeinfo.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryMydidcommunAgencyServicetypeinfoResponse({}));
  }

  /**
   * Description: 查询任务执行结果文件
   * Summary: 查询任务执行结果文件
   */
  async queryMydidcommunAgencyTaskresultfile(request: QueryMydidcommunAgencyTaskresultfileRequest): Promise<QueryMydidcommunAgencyTaskresultfileResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryMydidcommunAgencyTaskresultfileEx(request, headers, runtime);
  }

  /**
   * Description: 查询任务执行结果文件
   * Summary: 查询任务执行结果文件
   */
  async queryMydidcommunAgencyTaskresultfileEx(request: QueryMydidcommunAgencyTaskresultfileRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryMydidcommunAgencyTaskresultfileResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryMydidcommunAgencyTaskresultfileResponse>(await this.doRequest("1.0", "baas.mydidcommun.agency.taskresultfile.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryMydidcommunAgencyTaskresultfileResponse({}));
  }

  /**
   * Description: 任务执行 - 为目标用户申请某一服务类型的调用权限
   * Summary: 服务类型权限申请
   */
  async applyMydidcommunTaskServicetype(request: ApplyMydidcommunTaskServicetypeRequest): Promise<ApplyMydidcommunTaskServicetypeResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.applyMydidcommunTaskServicetypeEx(request, headers, runtime);
  }

  /**
   * Description: 任务执行 - 为目标用户申请某一服务类型的调用权限
   * Summary: 服务类型权限申请
   */
  async applyMydidcommunTaskServicetypeEx(request: ApplyMydidcommunTaskServicetypeRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<ApplyMydidcommunTaskServicetypeResponse> {
    Util.validateModel(request);
    return $tea.cast<ApplyMydidcommunTaskServicetypeResponse>(await this.doRequest("1.0", "baas.mydidcommun.task.servicetype.apply", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new ApplyMydidcommunTaskServicetypeResponse({}));
  }

  /**
   * Description: 通过任务Id获取任务执行结果
   * Summary: 获取任务执行结果
   */
  async getMydidcommunTaskTaskresult(request: GetMydidcommunTaskTaskresultRequest): Promise<GetMydidcommunTaskTaskresultResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.getMydidcommunTaskTaskresultEx(request, headers, runtime);
  }

  /**
   * Description: 通过任务Id获取任务执行结果
   * Summary: 获取任务执行结果
   */
  async getMydidcommunTaskTaskresultEx(request: GetMydidcommunTaskTaskresultRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<GetMydidcommunTaskTaskresultResponse> {
    Util.validateModel(request);
    return $tea.cast<GetMydidcommunTaskTaskresultResponse>(await this.doRequest("1.0", "baas.mydidcommun.task.taskresult.get", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new GetMydidcommunTaskTaskresultResponse({}));
  }

  /**
   * Description: 注册数据资产
   * Summary: 添加数据资产
   */
  async addMydidcommunAssetData(request: AddMydidcommunAssetDataRequest): Promise<AddMydidcommunAssetDataResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.addMydidcommunAssetDataEx(request, headers, runtime);
  }

  /**
   * Description: 注册数据资产
   * Summary: 添加数据资产
   */
  async addMydidcommunAssetDataEx(request: AddMydidcommunAssetDataRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<AddMydidcommunAssetDataResponse> {
    Util.validateModel(request);
    return $tea.cast<AddMydidcommunAssetDataResponse>(await this.doRequest("1.0", "baas.mydidcommun.asset.data.add", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new AddMydidcommunAssetDataResponse({}));
  }

  /**
   * Description: 开始获取数据任务流程
   * Summary: 执行获取数据接口
   */
  async startMydidcommunTaskGetdata(request: StartMydidcommunTaskGetdataRequest): Promise<StartMydidcommunTaskGetdataResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.startMydidcommunTaskGetdataEx(request, headers, runtime);
  }

  /**
   * Description: 开始获取数据任务流程
   * Summary: 执行获取数据接口
   */
  async startMydidcommunTaskGetdataEx(request: StartMydidcommunTaskGetdataRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<StartMydidcommunTaskGetdataResponse> {
    Util.validateModel(request);
    return $tea.cast<StartMydidcommunTaskGetdataResponse>(await this.doRequest("1.0", "baas.mydidcommun.task.getdata.start", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new StartMydidcommunTaskGetdataResponse({}));
  }

  /**
   * Description: 针对线下入驻，或者无法提供四要素的机构入驻
   * Summary: 机构入驻数据隐私服务
   */
  async startMydidcommunInstitutionSettlein(request: StartMydidcommunInstitutionSettleinRequest): Promise<StartMydidcommunInstitutionSettleinResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.startMydidcommunInstitutionSettleinEx(request, headers, runtime);
  }

  /**
   * Description: 针对线下入驻，或者无法提供四要素的机构入驻
   * Summary: 机构入驻数据隐私服务
   */
  async startMydidcommunInstitutionSettleinEx(request: StartMydidcommunInstitutionSettleinRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<StartMydidcommunInstitutionSettleinResponse> {
    Util.validateModel(request);
    return $tea.cast<StartMydidcommunInstitutionSettleinResponse>(await this.doRequest("1.0", "baas.mydidcommun.institution.settlein.start", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new StartMydidcommunInstitutionSettleinResponse({}));
  }

  /**
   * Description: 计算集群 - 部署同步 - 获取一个需要同步的部署任务
   * Summary: 计算集群-部署同步-获取一个需要同步任务
   */
  async getMydidcommunWorkergroupSync(request: GetMydidcommunWorkergroupSyncRequest): Promise<GetMydidcommunWorkergroupSyncResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.getMydidcommunWorkergroupSyncEx(request, headers, runtime);
  }

  /**
   * Description: 计算集群 - 部署同步 - 获取一个需要同步的部署任务
   * Summary: 计算集群-部署同步-获取一个需要同步任务
   */
  async getMydidcommunWorkergroupSyncEx(request: GetMydidcommunWorkergroupSyncRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<GetMydidcommunWorkergroupSyncResponse> {
    Util.validateModel(request);
    return $tea.cast<GetMydidcommunWorkergroupSyncResponse>(await this.doRequest("1.0", "baas.mydidcommun.workergroup.sync.get", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new GetMydidcommunWorkergroupSyncResponse({}));
  }

  /**
   * Description: 通过部署ID获取部署详情
   * Summary: 计算集群-部署-获取部署详情
   */
  async getMydidcommunWorkergroupPod(request: GetMydidcommunWorkergroupPodRequest): Promise<GetMydidcommunWorkergroupPodResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.getMydidcommunWorkergroupPodEx(request, headers, runtime);
  }

  /**
   * Description: 通过部署ID获取部署详情
   * Summary: 计算集群-部署-获取部署详情
   */
  async getMydidcommunWorkergroupPodEx(request: GetMydidcommunWorkergroupPodRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<GetMydidcommunWorkergroupPodResponse> {
    Util.validateModel(request);
    return $tea.cast<GetMydidcommunWorkergroupPodResponse>(await this.doRequest("1.0", "baas.mydidcommun.workergroup.pod.get", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new GetMydidcommunWorkergroupPodResponse({}));
  }

  /**
   * Description: 计算集群-部署同步-设置同步任务完成
   * Summary: 计算集群-部署同步-设置同步任务完成
   */
  async finishMydidcommunWorkergroupSync(request: FinishMydidcommunWorkergroupSyncRequest): Promise<FinishMydidcommunWorkergroupSyncResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.finishMydidcommunWorkergroupSyncEx(request, headers, runtime);
  }

  /**
   * Description: 计算集群-部署同步-设置同步任务完成
   * Summary: 计算集群-部署同步-设置同步任务完成
   */
  async finishMydidcommunWorkergroupSyncEx(request: FinishMydidcommunWorkergroupSyncRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<FinishMydidcommunWorkergroupSyncResponse> {
    Util.validateModel(request);
    return $tea.cast<FinishMydidcommunWorkergroupSyncResponse>(await this.doRequest("1.0", "baas.mydidcommun.workergroup.sync.finish", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new FinishMydidcommunWorkergroupSyncResponse({}));
  }

  /**
   * Description: 计算集群-部署同步-获取TAPP部署详情
   * Summary: 计算集群-TAPP-获取TAPP部署
   */
  async getMydidcommunWorkergroupTapp(request: GetMydidcommunWorkergroupTappRequest): Promise<GetMydidcommunWorkergroupTappResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.getMydidcommunWorkergroupTappEx(request, headers, runtime);
  }

  /**
   * Description: 计算集群-部署同步-获取TAPP部署详情
   * Summary: 计算集群-TAPP-获取TAPP部署
   */
  async getMydidcommunWorkergroupTappEx(request: GetMydidcommunWorkergroupTappRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<GetMydidcommunWorkergroupTappResponse> {
    Util.validateModel(request);
    return $tea.cast<GetMydidcommunWorkergroupTappResponse>(await this.doRequest("1.0", "baas.mydidcommun.workergroup.tapp.get", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new GetMydidcommunWorkergroupTappResponse({}));
  }

  /**
   * Description: 更新TAPP部署的信息，包括公钥哈希等
   * Summary: 计算集群-TAPP-更新TAPP信息
   */
  async updateMydidcommunWorkergroupTapp(request: UpdateMydidcommunWorkergroupTappRequest): Promise<UpdateMydidcommunWorkergroupTappResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.updateMydidcommunWorkergroupTappEx(request, headers, runtime);
  }

  /**
   * Description: 更新TAPP部署的信息，包括公钥哈希等
   * Summary: 计算集群-TAPP-更新TAPP信息
   */
  async updateMydidcommunWorkergroupTappEx(request: UpdateMydidcommunWorkergroupTappRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<UpdateMydidcommunWorkergroupTappResponse> {
    Util.validateModel(request);
    return $tea.cast<UpdateMydidcommunWorkergroupTappResponse>(await this.doRequest("1.0", "baas.mydidcommun.workergroup.tapp.update", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new UpdateMydidcommunWorkergroupTappResponse({}));
  }

  /**
   * Description: 获取工作流的所有在线版本的配置
   * Summary: 计算集群-工作流-获取工作流配置
   */
  async queryMydidcommunWorkergroupWorkflow(request: QueryMydidcommunWorkergroupWorkflowRequest): Promise<QueryMydidcommunWorkergroupWorkflowResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryMydidcommunWorkergroupWorkflowEx(request, headers, runtime);
  }

  /**
   * Description: 获取工作流的所有在线版本的配置
   * Summary: 计算集群-工作流-获取工作流配置
   */
  async queryMydidcommunWorkergroupWorkflowEx(request: QueryMydidcommunWorkergroupWorkflowRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryMydidcommunWorkergroupWorkflowResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryMydidcommunWorkergroupWorkflowResponse>(await this.doRequest("1.0", "baas.mydidcommun.workergroup.workflow.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryMydidcommunWorkergroupWorkflowResponse({}));
  }

  /**
   * Description: 同步集群状态
   * Summary: 计算集群-集群-同步集群状态
   */
  async syncMydidcommunWorkergroupGroup(request: SyncMydidcommunWorkergroupGroupRequest): Promise<SyncMydidcommunWorkergroupGroupResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.syncMydidcommunWorkergroupGroupEx(request, headers, runtime);
  }

  /**
   * Description: 同步集群状态
   * Summary: 计算集群-集群-同步集群状态
   */
  async syncMydidcommunWorkergroupGroupEx(request: SyncMydidcommunWorkergroupGroupRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<SyncMydidcommunWorkergroupGroupResponse> {
    Util.validateModel(request);
    return $tea.cast<SyncMydidcommunWorkergroupGroupResponse>(await this.doRequest("1.0", "baas.mydidcommun.workergroup.group.sync", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new SyncMydidcommunWorkergroupGroupResponse({}));
  }

  /**
   * Description: 计算集群-部署版本-获取版本列表
   * Summary: 计算集群-部署版本-获取版本列表
   */
  async listMydidcommunWorkergroupPodversion(request: ListMydidcommunWorkergroupPodversionRequest): Promise<ListMydidcommunWorkergroupPodversionResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.listMydidcommunWorkergroupPodversionEx(request, headers, runtime);
  }

  /**
   * Description: 计算集群-部署版本-获取版本列表
   * Summary: 计算集群-部署版本-获取版本列表
   */
  async listMydidcommunWorkergroupPodversionEx(request: ListMydidcommunWorkergroupPodversionRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<ListMydidcommunWorkergroupPodversionResponse> {
    Util.validateModel(request);
    return $tea.cast<ListMydidcommunWorkergroupPodversionResponse>(await this.doRequest("1.0", "baas.mydidcommun.workergroup.podversion.list", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new ListMydidcommunWorkergroupPodversionResponse({}));
  }

  /**
   * Description: did创建
   * Summary: did创建
   */
  async saveMydidIdaasDidservice(request: SaveMydidIdaasDidserviceRequest): Promise<SaveMydidIdaasDidserviceResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.saveMydidIdaasDidserviceEx(request, headers, runtime);
  }

  /**
   * Description: did创建
   * Summary: did创建
   */
  async saveMydidIdaasDidserviceEx(request: SaveMydidIdaasDidserviceRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<SaveMydidIdaasDidserviceResponse> {
    Util.validateModel(request);
    return $tea.cast<SaveMydidIdaasDidserviceResponse>(await this.doRequest("1.0", "baas.mydid.idaas.didservice.save", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new SaveMydidIdaasDidserviceResponse({}));
  }

  /**
   * Description: 消息端主动拉取did event
   * Summary: 消息端主动拉取did event
   */
  async queryDidNotificationDidevent(request: QueryDidNotificationDideventRequest): Promise<QueryDidNotificationDideventResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryDidNotificationDideventEx(request, headers, runtime);
  }

  /**
   * Description: 消息端主动拉取did event
   * Summary: 消息端主动拉取did event
   */
  async queryDidNotificationDideventEx(request: QueryDidNotificationDideventRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryDidNotificationDideventResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryDidNotificationDideventResponse>(await this.doRequest("1.0", "baas.did.notification.didevent.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryDidNotificationDideventResponse({}));
  }

  /**
   * Description: 主动拉取vc事件
   * Summary: 主动拉取vc事件
   */
  async queryDidNotificationVcevent(request: QueryDidNotificationVceventRequest): Promise<QueryDidNotificationVceventResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryDidNotificationVceventEx(request, headers, runtime);
  }

  /**
   * Description: 主动拉取vc事件
   * Summary: 主动拉取vc事件
   */
  async queryDidNotificationVceventEx(request: QueryDidNotificationVceventRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryDidNotificationVceventResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryDidNotificationVceventResponse>(await this.doRequest("1.0", "baas.did.notification.vcevent.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryDidNotificationVceventResponse({}));
  }

  /**
   * Description: 获取did全量数据
   * Summary: 获取did全量数据
   */
  async queryDidNotificationFulldid(request: QueryDidNotificationFulldidRequest): Promise<QueryDidNotificationFulldidResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryDidNotificationFulldidEx(request, headers, runtime);
  }

  /**
   * Description: 获取did全量数据
   * Summary: 获取did全量数据
   */
  async queryDidNotificationFulldidEx(request: QueryDidNotificationFulldidRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryDidNotificationFulldidResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryDidNotificationFulldidResponse>(await this.doRequest("1.0", "baas.did.notification.fulldid.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryDidNotificationFulldidResponse({}));
  }

  /**
   * Description: 非托管模式下创建企业did账户
   * Summary: 非托管模式下创建企业did账户
   */
  async createDidIdentityCorporate(request: CreateDidIdentityCorporateRequest): Promise<CreateDidIdentityCorporateResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.createDidIdentityCorporateEx(request, headers, runtime);
  }

  /**
   * Description: 非托管模式下创建企业did账户
   * Summary: 非托管模式下创建企业did账户
   */
  async createDidIdentityCorporateEx(request: CreateDidIdentityCorporateRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CreateDidIdentityCorporateResponse> {
    Util.validateModel(request);
    return $tea.cast<CreateDidIdentityCorporateResponse>(await this.doRequest("1.0", "baas.did.identity.corporate.create", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CreateDidIdentityCorporateResponse({}));
  }

  /**
   * Description: 计算上链交易hash
   * Summary: add did doc上链交易hash
   */
  async initDidAdddidHash(request: InitDidAdddidHashRequest): Promise<InitDidAdddidHashResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.initDidAdddidHashEx(request, headers, runtime);
  }

  /**
   * Description: 计算上链交易hash
   * Summary: add did doc上链交易hash
   */
  async initDidAdddidHashEx(request: InitDidAdddidHashRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<InitDidAdddidHashResponse> {
    Util.validateModel(request);
    return $tea.cast<InitDidAdddidHashResponse>(await this.doRequest("1.0", "baas.did.adddid.hash.init", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new InitDidAdddidHashResponse({}));
  }

  /**
   * Description: 将diddoc写入DIS链
   * Summary: 将diddoc写入DIS链
   */
  async startDidAdddidExecute(request: StartDidAdddidExecuteRequest): Promise<StartDidAdddidExecuteResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.startDidAdddidExecuteEx(request, headers, runtime);
  }

  /**
   * Description: 将diddoc写入DIS链
   * Summary: 将diddoc写入DIS链
   */
  async startDidAdddidExecuteEx(request: StartDidAdddidExecuteRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<StartDidAdddidExecuteResponse> {
    Util.validateModel(request);
    return $tea.cast<StartDidAdddidExecuteResponse>(await this.doRequest("1.0", "baas.did.adddid.execute.start", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new StartDidAdddidExecuteResponse({}));
  }

  /**
   * Description: 可验证声明上链之前计算其hash
   * Summary: 可验证声明上链之前计算其hash
   */
  async initDidAddvcHash(request: InitDidAddvcHashRequest): Promise<InitDidAddvcHashResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.initDidAddvcHashEx(request, headers, runtime);
  }

  /**
   * Description: 可验证声明上链之前计算其hash
   * Summary: 可验证声明上链之前计算其hash
   */
  async initDidAddvcHashEx(request: InitDidAddvcHashRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<InitDidAddvcHashResponse> {
    Util.validateModel(request);
    return $tea.cast<InitDidAddvcHashResponse>(await this.doRequest("1.0", "baas.did.addvc.hash.init", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new InitDidAddvcHashResponse({}));
  }

  /**
   * Description: 实际执行可验证声明上链
   * Summary: 实际执行可验证声明上链
   */
  async startDidAddvcExecute(request: StartDidAddvcExecuteRequest): Promise<StartDidAddvcExecuteResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.startDidAddvcExecuteEx(request, headers, runtime);
  }

  /**
   * Description: 实际执行可验证声明上链
   * Summary: 实际执行可验证声明上链
   */
  async startDidAddvcExecuteEx(request: StartDidAddvcExecuteRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<StartDidAddvcExecuteResponse> {
    Util.validateModel(request);
    return $tea.cast<StartDidAddvcExecuteResponse>(await this.doRequest("1.0", "baas.did.addvc.execute.start", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new StartDidAddvcExecuteResponse({}));
  }

  /**
   * Description: 计算更新VC状态交易hash
   * Summary: 计算更新VC状态交易hash
   */
  async initDidUpdatevcstatusHash(request: InitDidUpdatevcstatusHashRequest): Promise<InitDidUpdatevcstatusHashResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.initDidUpdatevcstatusHashEx(request, headers, runtime);
  }

  /**
   * Description: 计算更新VC状态交易hash
   * Summary: 计算更新VC状态交易hash
   */
  async initDidUpdatevcstatusHashEx(request: InitDidUpdatevcstatusHashRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<InitDidUpdatevcstatusHashResponse> {
    Util.validateModel(request);
    return $tea.cast<InitDidUpdatevcstatusHashResponse>(await this.doRequest("1.0", "baas.did.updatevcstatus.hash.init", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new InitDidUpdatevcstatusHashResponse({}));
  }

  /**
   * Description: 更新VC状态
   * Summary: 更新VC状态
   */
  async startDidUpdatevcstatusExecute(request: StartDidUpdatevcstatusExecuteRequest): Promise<StartDidUpdatevcstatusExecuteResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.startDidUpdatevcstatusExecuteEx(request, headers, runtime);
  }

  /**
   * Description: 更新VC状态
   * Summary: 更新VC状态
   */
  async startDidUpdatevcstatusExecuteEx(request: StartDidUpdatevcstatusExecuteRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<StartDidUpdatevcstatusExecuteResponse> {
    Util.validateModel(request);
    return $tea.cast<StartDidUpdatevcstatusExecuteResponse>(await this.doRequest("1.0", "baas.did.updatevcstatus.execute.start", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new StartDidUpdatevcstatusExecuteResponse({}));
  }

  /**
   * Description: 计算更新did交易hash
   * Summary: 计算更新did交易hash
   */
  async initDidUpdatedidHash(request: InitDidUpdatedidHashRequest): Promise<InitDidUpdatedidHashResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.initDidUpdatedidHashEx(request, headers, runtime);
  }

  /**
   * Description: 计算更新did交易hash
   * Summary: 计算更新did交易hash
   */
  async initDidUpdatedidHashEx(request: InitDidUpdatedidHashRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<InitDidUpdatedidHashResponse> {
    Util.validateModel(request);
    return $tea.cast<InitDidUpdatedidHashResponse>(await this.doRequest("1.0", "baas.did.updatedid.hash.init", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new InitDidUpdatedidHashResponse({}));
  }

  /**
   * Description: 更新did
   * Summary: 更新did
   */
  async startDidUpdatedidExecute(request: StartDidUpdatedidExecuteRequest): Promise<StartDidUpdatedidExecuteResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.startDidUpdatedidExecuteEx(request, headers, runtime);
  }

  /**
   * Description: 更新did
   * Summary: 更新did
   */
  async startDidUpdatedidExecuteEx(request: StartDidUpdatedidExecuteRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<StartDidUpdatedidExecuteResponse> {
    Util.validateModel(request);
    return $tea.cast<StartDidUpdatedidExecuteResponse>(await this.doRequest("1.0", "baas.did.updatedid.execute.start", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new StartDidUpdatedidExecuteResponse({}));
  }

  /**
   * Description: 非托管查询did doc
   * Summary: 非托管查询did doc
   */
  async queryDidDiddocDirect(request: QueryDidDiddocDirectRequest): Promise<QueryDidDiddocDirectResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryDidDiddocDirectEx(request, headers, runtime);
  }

  /**
   * Description: 非托管查询did doc
   * Summary: 非托管查询did doc
   */
  async queryDidDiddocDirectEx(request: QueryDidDiddocDirectRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryDidDiddocDirectResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryDidDiddocDirectResponse>(await this.doRequest("1.0", "baas.did.diddoc.direct.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryDidDiddocDirectResponse({}));
  }

  /**
   * Description: 非托管查询可验证声明
   * Summary: 非托管查询可验证声明
   */
  async queryDidVcDirect(request: QueryDidVcDirectRequest): Promise<QueryDidVcDirectResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryDidVcDirectEx(request, headers, runtime);
  }

  /**
   * Description: 非托管查询可验证声明
   * Summary: 非托管查询可验证声明
   */
  async queryDidVcDirectEx(request: QueryDidVcDirectRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryDidVcDirectResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryDidVcDirectResponse>(await this.doRequest("1.0", "baas.did.vc.direct.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryDidVcDirectResponse({}));
  }

  /**
   * Description: 非托管模式下创建个人did账户
   * Summary: 非托管模式下创建个人did账户
   */
  async createDidIdentityPerson(request: CreateDidIdentityPersonRequest): Promise<CreateDidIdentityPersonResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.createDidIdentityPersonEx(request, headers, runtime);
  }

  /**
   * Description: 非托管模式下创建个人did账户
   * Summary: 非托管模式下创建个人did账户
   */
  async createDidIdentityPersonEx(request: CreateDidIdentityPersonRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CreateDidIdentityPersonResponse> {
    Util.validateModel(request);
    return $tea.cast<CreateDidIdentityPersonResponse>(await this.doRequest("1.0", "baas.did.identity.person.create", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CreateDidIdentityPersonResponse({}));
  }

  /**
   * Description: 非托管模式更新did doc中的auth key
   * Summary: 非托管模式更新doc中的auth key
   */
  async updateDidUpdatedidAuthkey(request: UpdateDidUpdatedidAuthkeyRequest): Promise<UpdateDidUpdatedidAuthkeyResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.updateDidUpdatedidAuthkeyEx(request, headers, runtime);
  }

  /**
   * Description: 非托管模式更新did doc中的auth key
   * Summary: 非托管模式更新doc中的auth key
   */
  async updateDidUpdatedidAuthkeyEx(request: UpdateDidUpdatedidAuthkeyRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<UpdateDidUpdatedidAuthkeyResponse> {
    Util.validateModel(request);
    return $tea.cast<UpdateDidUpdatedidAuthkeyResponse>(await this.doRequest("1.0", "baas.did.updatedid.authkey.update", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new UpdateDidUpdatedidAuthkeyResponse({}));
  }

  /**
   * Description: 更新did对应did doc中的service信息
   * Summary: 更新did service信息
   */
  async updateDidUpdatedidService(request: UpdateDidUpdatedidServiceRequest): Promise<UpdateDidUpdatedidServiceResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.updateDidUpdatedidServiceEx(request, headers, runtime);
  }

  /**
   * Description: 更新did对应did doc中的service信息
   * Summary: 更新did service信息
   */
  async updateDidUpdatedidServiceEx(request: UpdateDidUpdatedidServiceRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<UpdateDidUpdatedidServiceResponse> {
    Util.validateModel(request);
    return $tea.cast<UpdateDidUpdatedidServiceResponse>(await this.doRequest("1.0", "baas.did.updatedid.service.update", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new UpdateDidUpdatedidServiceResponse({}));
  }

  /**
   * Description: 添加did doc中的service
   * Summary: 添加did doc中的service
   */
  async addDidUpdatedidService(request: AddDidUpdatedidServiceRequest): Promise<AddDidUpdatedidServiceResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.addDidUpdatedidServiceEx(request, headers, runtime);
  }

  /**
   * Description: 添加did doc中的service
   * Summary: 添加did doc中的service
   */
  async addDidUpdatedidServiceEx(request: AddDidUpdatedidServiceRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<AddDidUpdatedidServiceResponse> {
    Util.validateModel(request);
    return $tea.cast<AddDidUpdatedidServiceResponse>(await this.doRequest("1.0", "baas.did.updatedid.service.add", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new AddDidUpdatedidServiceResponse({}));
  }

  /**
   * Description: 删除did doc中的service信息
   * Summary: 删除did doc中的service信息
   */
  async deleteDidUpdatedidService(request: DeleteDidUpdatedidServiceRequest): Promise<DeleteDidUpdatedidServiceResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.deleteDidUpdatedidServiceEx(request, headers, runtime);
  }

  /**
   * Description: 删除did doc中的service信息
   * Summary: 删除did doc中的service信息
   */
  async deleteDidUpdatedidServiceEx(request: DeleteDidUpdatedidServiceRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<DeleteDidUpdatedidServiceResponse> {
    Util.validateModel(request);
    return $tea.cast<DeleteDidUpdatedidServiceResponse>(await this.doRequest("1.0", "baas.did.updatedid.service.delete", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new DeleteDidUpdatedidServiceResponse({}));
  }

  /**
   * Description: 更新可验证声明状态
   * Summary: 更新可验证声明
   */
  async updateDidUpdatevcStatus(request: UpdateDidUpdatevcStatusRequest): Promise<UpdateDidUpdatevcStatusResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.updateDidUpdatevcStatusEx(request, headers, runtime);
  }

  /**
   * Description: 更新可验证声明状态
   * Summary: 更新可验证声明
   */
  async updateDidUpdatevcStatusEx(request: UpdateDidUpdatevcStatusRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<UpdateDidUpdatevcStatusResponse> {
    Util.validateModel(request);
    return $tea.cast<UpdateDidUpdatevcStatusResponse>(await this.doRequest("1.0", "baas.did.updatevc.status.update", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new UpdateDidUpdatevcStatusResponse({}));
  }

  /**
   * Description: 开通resolver服务接口
   * Summary: 开通resolver服务接口
   */
  async openDidResolverService(request: OpenDidResolverServiceRequest): Promise<OpenDidResolverServiceResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.openDidResolverServiceEx(request, headers, runtime);
  }

  /**
   * Description: 开通resolver服务接口
   * Summary: 开通resolver服务接口
   */
  async openDidResolverServiceEx(request: OpenDidResolverServiceRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<OpenDidResolverServiceResponse> {
    Util.validateModel(request);
    return $tea.cast<OpenDidResolverServiceResponse>(await this.doRequest("1.0", "baas.did.resolver.service.open", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new OpenDidResolverServiceResponse({}));
  }

  /**
   * Description: 停止resolver服务接口
   * Summary: 停止resolver服务接口
   */
  async stopDidResolverService(request: StopDidResolverServiceRequest): Promise<StopDidResolverServiceResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.stopDidResolverServiceEx(request, headers, runtime);
  }

  /**
   * Description: 停止resolver服务接口
   * Summary: 停止resolver服务接口
   */
  async stopDidResolverServiceEx(request: StopDidResolverServiceRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<StopDidResolverServiceResponse> {
    Util.validateModel(request);
    return $tea.cast<StopDidResolverServiceResponse>(await this.doRequest("1.0", "baas.did.resolver.service.stop", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new StopDidResolverServiceResponse({}));
  }

  /**
   * Description: 使用根DID派生子DID并上链
   * Summary: 派生子DID上链
   */
  async startDidDerivedidExecute(request: StartDidDerivedidExecuteRequest): Promise<StartDidDerivedidExecuteResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.startDidDerivedidExecuteEx(request, headers, runtime);
  }

  /**
   * Description: 使用根DID派生子DID并上链
   * Summary: 派生子DID上链
   */
  async startDidDerivedidExecuteEx(request: StartDidDerivedidExecuteRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<StartDidDerivedidExecuteResponse> {
    Util.validateModel(request);
    return $tea.cast<StartDidDerivedidExecuteResponse>(await this.doRequest("1.0", "baas.did.derivedid.execute.start", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new StartDidDerivedidExecuteResponse({}));
  }

  /**
   * Description: 基于DIS的访问控制授权
   * Summary: 访问控制授权
   */
  async execDidAccesscontrolAuthorize(request: ExecDidAccesscontrolAuthorizeRequest): Promise<ExecDidAccesscontrolAuthorizeResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.execDidAccesscontrolAuthorizeEx(request, headers, runtime);
  }

  /**
   * Description: 基于DIS的访问控制授权
   * Summary: 访问控制授权
   */
  async execDidAccesscontrolAuthorizeEx(request: ExecDidAccesscontrolAuthorizeRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<ExecDidAccesscontrolAuthorizeResponse> {
    Util.validateModel(request);
    return $tea.cast<ExecDidAccesscontrolAuthorizeResponse>(await this.doRequest("1.0", "baas.did.accesscontrol.authorize.exec", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new ExecDidAccesscontrolAuthorizeResponse({}));
  }

  /**
   * Description: 对请求的权限进行鉴权，判断是否有该权限
   * Summary: 访问控制鉴权
   */
  async execDidAccesscontrolCheck(request: ExecDidAccesscontrolCheckRequest): Promise<ExecDidAccesscontrolCheckResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.execDidAccesscontrolCheckEx(request, headers, runtime);
  }

  /**
   * Description: 对请求的权限进行鉴权，判断是否有该权限
   * Summary: 访问控制鉴权
   */
  async execDidAccesscontrolCheckEx(request: ExecDidAccesscontrolCheckRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<ExecDidAccesscontrolCheckResponse> {
    Util.validateModel(request);
    return $tea.cast<ExecDidAccesscontrolCheckResponse>(await this.doRequest("1.0", "baas.did.accesscontrol.check.exec", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new ExecDidAccesscontrolCheckResponse({}));
  }

  /**
   * Description: 访问控制中更新权限
   * Summary: 对已授权的did更新权限
   */
  async execDidAccesscontrolUpdate(request: ExecDidAccesscontrolUpdateRequest): Promise<ExecDidAccesscontrolUpdateResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.execDidAccesscontrolUpdateEx(request, headers, runtime);
  }

  /**
   * Description: 访问控制中更新权限
   * Summary: 对已授权的did更新权限
   */
  async execDidAccesscontrolUpdateEx(request: ExecDidAccesscontrolUpdateRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<ExecDidAccesscontrolUpdateResponse> {
    Util.validateModel(request);
    return $tea.cast<ExecDidAccesscontrolUpdateResponse>(await this.doRequest("1.0", "baas.did.accesscontrol.update.exec", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new ExecDidAccesscontrolUpdateResponse({}));
  }

  /**
   * Description: 非托管模式下为iot创建did
   * Summary: 非托管模式下为iot创建did
   */
  async createDidIdentityIot(request: CreateDidIdentityIotRequest): Promise<CreateDidIdentityIotResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.createDidIdentityIotEx(request, headers, runtime);
  }

  /**
   * Description: 非托管模式下为iot创建did
   * Summary: 非托管模式下为iot创建did
   */
  async createDidIdentityIotEx(request: CreateDidIdentityIotRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CreateDidIdentityIotResponse> {
    Util.validateModel(request);
    return $tea.cast<CreateDidIdentityIotResponse>(await this.doRequest("1.0", "baas.did.identity.iot.create", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CreateDidIdentityIotResponse({}));
  }

  /**
   * Description: 非托管模式下的服务类型创建
   * Summary: 非托管模式下的服务类型创建
   */
  async execDidServicetypeCreate(request: ExecDidServicetypeCreateRequest): Promise<ExecDidServicetypeCreateResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.execDidServicetypeCreateEx(request, headers, runtime);
  }

  /**
   * Description: 非托管模式下的服务类型创建
   * Summary: 非托管模式下的服务类型创建
   */
  async execDidServicetypeCreateEx(request: ExecDidServicetypeCreateRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<ExecDidServicetypeCreateResponse> {
    Util.validateModel(request);
    return $tea.cast<ExecDidServicetypeCreateResponse>(await this.doRequest("1.0", "baas.did.servicetype.create.exec", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new ExecDidServicetypeCreateResponse({}));
  }

  /**
   * Description: 非托管模式下创建普通did账户
   * Summary: 非托管模式下创建普通did账户
   */
  async createDidIdentityCommon(request: CreateDidIdentityCommonRequest): Promise<CreateDidIdentityCommonResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.createDidIdentityCommonEx(request, headers, runtime);
  }

  /**
   * Description: 非托管模式下创建普通did账户
   * Summary: 非托管模式下创建普通did账户
   */
  async createDidIdentityCommonEx(request: CreateDidIdentityCommonRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CreateDidIdentityCommonResponse> {
    Util.validateModel(request);
    return $tea.cast<CreateDidIdentityCommonResponse>(await this.doRequest("1.0", "baas.did.identity.common.create", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CreateDidIdentityCommonResponse({}));
  }

  /**
   * Description: VC传输确认请求
   * Summary: VC传输确认请求
   */
  async confirmVcVcrepoVctransmit(request: ConfirmVcVcrepoVctransmitRequest): Promise<ConfirmVcVcrepoVctransmitResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.confirmVcVcrepoVctransmitEx(request, headers, runtime);
  }

  /**
   * Description: VC传输确认请求
   * Summary: VC传输确认请求
   */
  async confirmVcVcrepoVctransmitEx(request: ConfirmVcVcrepoVctransmitRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<ConfirmVcVcrepoVctransmitResponse> {
    Util.validateModel(request);
    return $tea.cast<ConfirmVcVcrepoVctransmitResponse>(await this.doRequest("1.0", "baas.vc.vcrepo.vctransmit.confirm", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new ConfirmVcVcrepoVctransmitResponse({}));
  }

  /**
   * Description: 在非托管模式，要先createDid，然后addDoc，两步都完成才实现DID创建。
  如果第一步成功，第二步失败，无法完全回滚，但是第一步createDid已经绑定了一个pubKey，如果调用方重试，并且用了新的pubKey（可能之前绑定的pubKey因为没有走完流程，没有保存，或者没有中间态，继续重试第二步），就无法重试成功。因此需要给这种极端情况一个更新pubKey的机会，但是需要通过recoveryKey鉴权请求变更。
   * Summary: 非托管更新还未上链did的pub key
   */
  async updateDidUpdatedidPubkey(request: UpdateDidUpdatedidPubkeyRequest): Promise<UpdateDidUpdatedidPubkeyResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.updateDidUpdatedidPubkeyEx(request, headers, runtime);
  }

  /**
   * Description: 在非托管模式，要先createDid，然后addDoc，两步都完成才实现DID创建。
  如果第一步成功，第二步失败，无法完全回滚，但是第一步createDid已经绑定了一个pubKey，如果调用方重试，并且用了新的pubKey（可能之前绑定的pubKey因为没有走完流程，没有保存，或者没有中间态，继续重试第二步），就无法重试成功。因此需要给这种极端情况一个更新pubKey的机会，但是需要通过recoveryKey鉴权请求变更。
   * Summary: 非托管更新还未上链did的pub key
   */
  async updateDidUpdatedidPubkeyEx(request: UpdateDidUpdatedidPubkeyRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<UpdateDidUpdatedidPubkeyResponse> {
    Util.validateModel(request);
    return $tea.cast<UpdateDidUpdatedidPubkeyResponse>(await this.doRequest("1.0", "baas.did.updatedid.pubkey.update", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new UpdateDidUpdatedidPubkeyResponse({}));
  }

  /**
   * Description: 一次增加多个service
   * Summary: 一次增加多个service
   */
  async addDidUpdatedidServicelist(request: AddDidUpdatedidServicelistRequest): Promise<AddDidUpdatedidServicelistResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.addDidUpdatedidServicelistEx(request, headers, runtime);
  }

  /**
   * Description: 一次增加多个service
   * Summary: 一次增加多个service
   */
  async addDidUpdatedidServicelistEx(request: AddDidUpdatedidServicelistRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<AddDidUpdatedidServicelistResponse> {
    Util.validateModel(request);
    return $tea.cast<AddDidUpdatedidServicelistResponse>(await this.doRequest("1.0", "baas.did.updatedid.servicelist.add", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new AddDidUpdatedidServicelistResponse({}));
  }

  /**
   * Description: 存储VC到存储中
   * Summary: 写入VC存储
   */
  async startVcVcrepositoryWrite(request: StartVcVcrepositoryWriteRequest): Promise<StartVcVcrepositoryWriteResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.startVcVcrepositoryWriteEx(request, headers, runtime);
  }

  /**
   * Description: 存储VC到存储中
   * Summary: 写入VC存储
   */
  async startVcVcrepositoryWriteEx(request: StartVcVcrepositoryWriteRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<StartVcVcrepositoryWriteResponse> {
    Util.validateModel(request);
    return $tea.cast<StartVcVcrepositoryWriteResponse>(await this.doRequest("1.0", "baas.vc.vcrepository.write.start", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new StartVcVcrepositoryWriteResponse({}));
  }

  /**
   * Description: 从VC存储中，读取目标的VC内容，前提是调用者的did已经被授予权限。
  如果VC中claim内容已被加密，返回值的verifiable_claim_content的claim字段是密文，需要使用当前调用者的did对应私钥解密auth_access_key获取AES密钥，然后通过AES密钥解密VC内容。
   * Summary: 从VC存储读取已被授权VC内容
   */
  async startVcVcrepositoryRead(request: StartVcVcrepositoryReadRequest): Promise<StartVcVcrepositoryReadResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.startVcVcrepositoryReadEx(request, headers, runtime);
  }

  /**
   * Description: 从VC存储中，读取目标的VC内容，前提是调用者的did已经被授予权限。
  如果VC中claim内容已被加密，返回值的verifiable_claim_content的claim字段是密文，需要使用当前调用者的did对应私钥解密auth_access_key获取AES密钥，然后通过AES密钥解密VC内容。
   * Summary: 从VC存储读取已被授权VC内容
   */
  async startVcVcrepositoryReadEx(request: StartVcVcrepositoryReadRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<StartVcVcrepositoryReadResponse> {
    Util.validateModel(request);
    return $tea.cast<StartVcVcrepositoryReadResponse>(await this.doRequest("1.0", "baas.vc.vcrepository.read.start", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new StartVcVcrepositoryReadResponse({}));
  }

  /**
   * Description: 对已存在的证书VC进行新增授权管理，批量添加did到授权列表中，授权这些did具有读取VC的权限。
  注意：VC的整体auth_did_list的长度将受限制，目前约定不超过30。
   * Summary: 添加已有证书VC的授权列表
   */
  async startVcVcrepositoryAuth(request: StartVcVcrepositoryAuthRequest): Promise<StartVcVcrepositoryAuthResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.startVcVcrepositoryAuthEx(request, headers, runtime);
  }

  /**
   * Description: 对已存在的证书VC进行新增授权管理，批量添加did到授权列表中，授权这些did具有读取VC的权限。
  注意：VC的整体auth_did_list的长度将受限制，目前约定不超过30。
   * Summary: 添加已有证书VC的授权列表
   */
  async startVcVcrepositoryAuthEx(request: StartVcVcrepositoryAuthRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<StartVcVcrepositoryAuthResponse> {
    Util.validateModel(request);
    return $tea.cast<StartVcVcrepositoryAuthResponse>(await this.doRequest("1.0", "baas.vc.vcrepository.auth.start", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new StartVcVcrepositoryAuthResponse({}));
  }

  /**
   * Description: vc repo上的用户注册
   * Summary: vc repo 上的用户注册
   */
  async startVcVcrepoUser(request: StartVcVcrepoUserRequest): Promise<StartVcVcrepoUserResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.startVcVcrepoUserEx(request, headers, runtime);
  }

  /**
   * Description: vc repo上的用户注册
   * Summary: vc repo 上的用户注册
   */
  async startVcVcrepoUserEx(request: StartVcVcrepoUserRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<StartVcVcrepoUserResponse> {
    Util.validateModel(request);
    return $tea.cast<StartVcVcrepoUserResponse>(await this.doRequest("1.0", "baas.vc.vcrepo.user.start", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new StartVcVcrepoUserResponse({}));
  }

  /**
   * Description: VC Repo用户信息更新，可以更新公钥，可以更新vc channel
   * Summary: VC Repo用户信息更新
   */
  async updateVcVcrepoUser(request: UpdateVcVcrepoUserRequest): Promise<UpdateVcVcrepoUserResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.updateVcVcrepoUserEx(request, headers, runtime);
  }

  /**
   * Description: VC Repo用户信息更新，可以更新公钥，可以更新vc channel
   * Summary: VC Repo用户信息更新
   */
  async updateVcVcrepoUserEx(request: UpdateVcVcrepoUserRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<UpdateVcVcrepoUserResponse> {
    Util.validateModel(request);
    return $tea.cast<UpdateVcVcrepoUserResponse>(await this.doRequest("1.0", "baas.vc.vcrepo.user.update", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new UpdateVcVcrepoUserResponse({}));
  }

  /**
   * Description: 指定VC可信传输到指定Verifier
   * Summary: 指定VC可信传输到指定Verifier
   */
  async startVcVcrepoVctransmit(request: StartVcVcrepoVctransmitRequest): Promise<StartVcVcrepoVctransmitResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.startVcVcrepoVctransmitEx(request, headers, runtime);
  }

  /**
   * Description: 指定VC可信传输到指定Verifier
   * Summary: 指定VC可信传输到指定Verifier
   */
  async startVcVcrepoVctransmitEx(request: StartVcVcrepoVctransmitRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<StartVcVcrepoVctransmitResponse> {
    Util.validateModel(request);
    return $tea.cast<StartVcVcrepoVctransmitResponse>(await this.doRequest("1.0", "baas.vc.vcrepo.vctransmit.start", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new StartVcVcrepoVctransmitResponse({}));
  }

  /**
   * Description: 通过controller进行用户注册
   * Summary: 通过controller的用户注册
   */
  async startVcVcrepoControlleradduser(request: StartVcVcrepoControlleradduserRequest): Promise<StartVcVcrepoControlleradduserResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.startVcVcrepoControlleradduserEx(request, headers, runtime);
  }

  /**
   * Description: 通过controller进行用户注册
   * Summary: 通过controller的用户注册
   */
  async startVcVcrepoControlleradduserEx(request: StartVcVcrepoControlleradduserRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<StartVcVcrepoControlleradduserResponse> {
    Util.validateModel(request);
    return $tea.cast<StartVcVcrepoControlleradduserResponse>(await this.doRequest("1.0", "baas.vc.vcrepo.controlleradduser.start", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new StartVcVcrepoControlleradduserResponse({}));
  }

  /**
   * Description: VC存储
   * Summary: VC存储
   */
  async startVcVcrepoVccontentsave(request: StartVcVcrepoVccontentsaveRequest): Promise<StartVcVcrepoVccontentsaveResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.startVcVcrepoVccontentsaveEx(request, headers, runtime);
  }

  /**
   * Description: VC存储
   * Summary: VC存储
   */
  async startVcVcrepoVccontentsaveEx(request: StartVcVcrepoVccontentsaveRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<StartVcVcrepoVccontentsaveResponse> {
    Util.validateModel(request);
    return $tea.cast<StartVcVcrepoVccontentsaveResponse>(await this.doRequest("1.0", "baas.vc.vcrepo.vccontentsave.start", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new StartVcVcrepoVccontentsaveResponse({}));
  }

  /**
   * Description: 根据vcid获取vccontent
   * Summary: 根据vcid获取vccontent
   */
  async startVcRepoReadwithvcid(request: StartVcRepoReadwithvcidRequest): Promise<StartVcRepoReadwithvcidResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.startVcRepoReadwithvcidEx(request, headers, runtime);
  }

  /**
   * Description: 根据vcid获取vccontent
   * Summary: 根据vcid获取vccontent
   */
  async startVcRepoReadwithvcidEx(request: StartVcRepoReadwithvcidRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<StartVcRepoReadwithvcidResponse> {
    Util.validateModel(request);
    return $tea.cast<StartVcRepoReadwithvcidResponse>(await this.doRequest("1.0", "baas.vc.repo.readwithvcid.start", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new StartVcRepoReadwithvcidResponse({}));
  }

  /**
   * Description: vc仓库非托管模式下的VC传输初始化接口
   * Summary: vc仓库非托管模式下的VC传输初始化接口
   */
  async initVcVcrepoVctransmit(request: InitVcVcrepoVctransmitRequest): Promise<InitVcVcrepoVctransmitResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.initVcVcrepoVctransmitEx(request, headers, runtime);
  }

  /**
   * Description: vc仓库非托管模式下的VC传输初始化接口
   * Summary: vc仓库非托管模式下的VC传输初始化接口
   */
  async initVcVcrepoVctransmitEx(request: InitVcVcrepoVctransmitRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<InitVcVcrepoVctransmitResponse> {
    Util.validateModel(request);
    return $tea.cast<InitVcVcrepoVctransmitResponse>(await this.doRequest("1.0", "baas.vc.vcrepo.vctransmit.init", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new InitVcVcrepoVctransmitResponse({}));
  }

  /**
   * Description: 人脸实人认证初始化接口
   * Summary: 人脸实人认证初始化接口
   */
  async initIdentificationFaceauth(request: InitIdentificationFaceauthRequest): Promise<InitIdentificationFaceauthResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.initIdentificationFaceauthEx(request, headers, runtime);
  }

  /**
   * Description: 人脸实人认证初始化接口
   * Summary: 人脸实人认证初始化接口
   */
  async initIdentificationFaceauthEx(request: InitIdentificationFaceauthRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<InitIdentificationFaceauthResponse> {
    Util.validateModel(request);
    return $tea.cast<InitIdentificationFaceauthResponse>(await this.doRequest("1.0", "baas.identification.faceauth.init", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new InitIdentificationFaceauthResponse({}));
  }

  /**
   * Description: 获取人脸实人认证结果
   * Summary: 获取人脸实人认证结果
   */
  async queryIdentificationFaceauth(request: QueryIdentificationFaceauthRequest): Promise<QueryIdentificationFaceauthResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryIdentificationFaceauthEx(request, headers, runtime);
  }

  /**
   * Description: 获取人脸实人认证结果
   * Summary: 获取人脸实人认证结果
   */
  async queryIdentificationFaceauthEx(request: QueryIdentificationFaceauthRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryIdentificationFaceauthResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryIdentificationFaceauthResponse>(await this.doRequest("1.0", "baas.identification.faceauth.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryIdentificationFaceauthResponse({}));
  }

  /**
   * Description: 初始化存证事务: 进⾏行行资格核验，包括调⽤用⽅方账号权限，是否实⼈人等。成功后获得存证事务 ID(Token)
   * Summary: 存证交易初始化
   */
  async initNotaryTransaction(request: InitNotaryTransactionRequest): Promise<InitNotaryTransactionResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.initNotaryTransactionEx(request, headers, runtime);
  }

  /**
   * Description: 初始化存证事务: 进⾏行行资格核验，包括调⽤用⽅方账号权限，是否实⼈人等。成功后获得存证事务 ID(Token)
   * Summary: 存证交易初始化
   */
  async initNotaryTransactionEx(request: InitNotaryTransactionRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<InitNotaryTransactionResponse> {
    Util.validateModel(request);
    return $tea.cast<InitNotaryTransactionResponse>(await this.doRequest("1.0", "baas.notary.transaction.init", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new InitNotaryTransactionResponse({}));
  }

  /**
   * Description: ⽤用户通过存证事务Token，获取事务中所有的存证信息
   * Summary: 获取事务中所有的存证信息
   */
  async getNotaryTransaction(request: GetNotaryTransactionRequest): Promise<GetNotaryTransactionResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.getNotaryTransactionEx(request, headers, runtime);
  }

  /**
   * Description: ⽤用户通过存证事务Token，获取事务中所有的存证信息
   * Summary: 获取事务中所有的存证信息
   */
  async getNotaryTransactionEx(request: GetNotaryTransactionRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<GetNotaryTransactionResponse> {
    Util.validateModel(request);
    return $tea.cast<GetNotaryTransactionResponse>(await this.doRequest("1.0", "baas.notary.transaction.get", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new GetNotaryTransactionResponse({}));
  }

  /**
   * Description: 发起⼀个文本存证，将文本内容存证上链。
   * Summary: 发送文本存证
   */
  async sendNotaryTransactionText(request: SendNotaryTransactionTextRequest): Promise<SendNotaryTransactionTextResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.sendNotaryTransactionTextEx(request, headers, runtime);
  }

  /**
   * Description: 发起⼀个文本存证，将文本内容存证上链。
   * Summary: 发送文本存证
   */
  async sendNotaryTransactionTextEx(request: SendNotaryTransactionTextRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<SendNotaryTransactionTextResponse> {
    Util.validateModel(request);
    return $tea.cast<SendNotaryTransactionTextResponse>(await this.doRequest("1.0", "baas.notary.transaction.text.send", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new SendNotaryTransactionTextResponse({}));
  }

  /**
   * Description: ⽤户通过交易易哈希获取自己上传的文本存证内容
   * Summary: 获取文本存证
   */
  async getNotaryTransactionText(request: GetNotaryTransactionTextRequest): Promise<GetNotaryTransactionTextResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.getNotaryTransactionTextEx(request, headers, runtime);
  }

  /**
   * Description: ⽤户通过交易易哈希获取自己上传的文本存证内容
   * Summary: 获取文本存证
   */
  async getNotaryTransactionTextEx(request: GetNotaryTransactionTextRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<GetNotaryTransactionTextResponse> {
    Util.validateModel(request);
    return $tea.cast<GetNotaryTransactionTextResponse>(await this.doRequest("1.0", "baas.notary.transaction.text.get", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new GetNotaryTransactionTextResponse({}));
  }

  /**
   * Description: 获取存证事务ID
   * Summary: 获取存证事务ID
   */
  async createNotaryToken(request: CreateNotaryTokenRequest): Promise<CreateNotaryTokenResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.createNotaryTokenEx(request, headers, runtime);
  }

  /**
   * Description: 获取存证事务ID
   * Summary: 获取存证事务ID
   */
  async createNotaryTokenEx(request: CreateNotaryTokenRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CreateNotaryTokenResponse> {
    Util.validateModel(request);
    return $tea.cast<CreateNotaryTokenResponse>(await this.doRequest("1.0", "baas.notary.token.create", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CreateNotaryTokenResponse({}));
  }

  /**
   * Description: 通过存证事务Token，获取事务中所有的存证信息
   * Summary: 获取事务中所有的存证信息
   */
  async getNotaryTrans(request: GetNotaryTransRequest): Promise<GetNotaryTransResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.getNotaryTransEx(request, headers, runtime);
  }

  /**
   * Description: 通过存证事务Token，获取事务中所有的存证信息
   * Summary: 获取事务中所有的存证信息
   */
  async getNotaryTransEx(request: GetNotaryTransRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<GetNotaryTransResponse> {
    Util.validateModel(request);
    return $tea.cast<GetNotaryTransResponse>(await this.doRequest("1.0", "baas.notary.trans.get", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new GetNotaryTransResponse({}));
  }

  /**
   * Description: 发起文本存证，将文本内容存证上链
   * Summary: 文本存证，将文本内容存证上链
   */
  async createNotaryText(request: CreateNotaryTextRequest): Promise<CreateNotaryTextResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.createNotaryTextEx(request, headers, runtime);
  }

  /**
   * Description: 发起文本存证，将文本内容存证上链
   * Summary: 文本存证，将文本内容存证上链
   */
  async createNotaryTextEx(request: CreateNotaryTextRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CreateNotaryTextResponse> {
    Util.validateModel(request);
    return $tea.cast<CreateNotaryTextResponse>(await this.doRequest("1.0", "baas.notary.text.create", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CreateNotaryTextResponse({}));
  }

  /**
   * Description: 用户通过交易哈希获取自己上传的文本存证内容
   * Summary: 获取文本存证内容
   */
  async getNotaryText(request: GetNotaryTextRequest): Promise<GetNotaryTextResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.getNotaryTextEx(request, headers, runtime);
  }

  /**
   * Description: 用户通过交易哈希获取自己上传的文本存证内容
   * Summary: 获取文本存证内容
   */
  async getNotaryTextEx(request: GetNotaryTextRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<GetNotaryTextResponse> {
    Util.validateModel(request);
    return $tea.cast<GetNotaryTextResponse>(await this.doRequest("1.0", "baas.notary.text.get", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new GetNotaryTextResponse({}));
  }

  /**
   * Description: 发起文件存证，将文件内容存证上链
   * Summary: 文件内容存证上链
   */
  async createNotaryFile(request: CreateNotaryFileRequest): Promise<CreateNotaryFileResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.createNotaryFileEx(request, headers, runtime);
  }

  /**
   * Description: 发起文件存证，将文件内容存证上链
   * Summary: 文件内容存证上链
   */
  async createNotaryFileEx(request: CreateNotaryFileRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CreateNotaryFileResponse> {
    Util.validateModel(request);
    return $tea.cast<CreateNotaryFileResponse>(await this.doRequest("1.0", "baas.notary.file.create", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CreateNotaryFileResponse({}));
  }

  /**
   * Description: 用户通过交易哈希获取自己上传的文件存证oss下载地址
   * Summary: 获取文件存证oss下载地址
   */
  async getNotaryFile(request: GetNotaryFileRequest): Promise<GetNotaryFileResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.getNotaryFileEx(request, headers, runtime);
  }

  /**
   * Description: 用户通过交易哈希获取自己上传的文件存证oss下载地址
   * Summary: 获取文件存证oss下载地址
   */
  async getNotaryFileEx(request: GetNotaryFileRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<GetNotaryFileResponse> {
    Util.validateModel(request);
    return $tea.cast<GetNotaryFileResponse>(await this.doRequest("1.0", "baas.notary.file.get", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new GetNotaryFileResponse({}));
  }

  /**
   * Description: 发起原文存证，将原文内容存证上链
   * Summary: 原文内容存证
   */
  async createNotarySource(request: CreateNotarySourceRequest): Promise<CreateNotarySourceResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.createNotarySourceEx(request, headers, runtime);
  }

  /**
   * Description: 发起原文存证，将原文内容存证上链
   * Summary: 原文内容存证
   */
  async createNotarySourceEx(request: CreateNotarySourceRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CreateNotarySourceResponse> {
    Util.validateModel(request);
    return $tea.cast<CreateNotarySourceResponse>(await this.doRequest("1.0", "baas.notary.source.create", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CreateNotarySourceResponse({}));
  }

  /**
   * Description: 用户通过交易哈希获取自己上传的原文存证oss下载地址
   * Summary: 获取原文存证oss下载地址
   */
  async getNotarySource(request: GetNotarySourceRequest): Promise<GetNotarySourceResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.getNotarySourceEx(request, headers, runtime);
  }

  /**
   * Description: 用户通过交易哈希获取自己上传的原文存证oss下载地址
   * Summary: 获取原文存证oss下载地址
   */
  async getNotarySourceEx(request: GetNotarySourceRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<GetNotarySourceResponse> {
    Util.validateModel(request);
    return $tea.cast<GetNotarySourceResponse>(await this.doRequest("1.0", "baas.notary.source.get", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new GetNotarySourceResponse({}));
  }

  /**
   * Description: test
   * Summary: test
   */
  async queryNotaryTest(request: QueryNotaryTestRequest): Promise<QueryNotaryTestResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryNotaryTestEx(request, headers, runtime);
  }

  /**
   * Description: test
   * Summary: test
   */
  async queryNotaryTestEx(request: QueryNotaryTestRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryNotaryTestResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryNotaryTestResponse>(await this.doRequest("1.0", "baas.notary.test.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryNotaryTestResponse({}));
  }

  /**
   * Description: 接口定义 https://yuque.antfin-inc.com/antchain/lqq4qz/pnvo46#52f667ab
   * Summary: 企业法人认证初始化接口
   */
  async initNotaryOpenapiMerchant(request: InitNotaryOpenapiMerchantRequest): Promise<InitNotaryOpenapiMerchantResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.initNotaryOpenapiMerchantEx(request, headers, runtime);
  }

  /**
   * Description: 接口定义 https://yuque.antfin-inc.com/antchain/lqq4qz/pnvo46#52f667ab
   * Summary: 企业法人认证初始化接口
   */
  async initNotaryOpenapiMerchantEx(request: InitNotaryOpenapiMerchantRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<InitNotaryOpenapiMerchantResponse> {
    Util.validateModel(request);
    return $tea.cast<InitNotaryOpenapiMerchantResponse>(await this.doRequest("1.0", "baas.notary.openapi.merchant.init", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new InitNotaryOpenapiMerchantResponse({}));
  }

  /**
   * Description: 企业法人认证查询认证状态
   * Summary: 企业法人认证查询认证状态
   */
  async queryNotaryOpenapiMerchant(request: QueryNotaryOpenapiMerchantRequest): Promise<QueryNotaryOpenapiMerchantResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryNotaryOpenapiMerchantEx(request, headers, runtime);
  }

  /**
   * Description: 企业法人认证查询认证状态
   * Summary: 企业法人认证查询认证状态
   */
  async queryNotaryOpenapiMerchantEx(request: QueryNotaryOpenapiMerchantRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryNotaryOpenapiMerchantResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryNotaryOpenapiMerchantResponse>(await this.doRequest("1.0", "baas.notary.openapi.merchant.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryNotaryOpenapiMerchantResponse({}));
  }

  /**
   * Description: 为租赁服务平台部署合约
   * Summary: 为租赁服务平台部署合约
   */
  async deployNotaryLeaseContract(request: DeployNotaryLeaseContractRequest): Promise<DeployNotaryLeaseContractResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.deployNotaryLeaseContractEx(request, headers, runtime);
  }

  /**
   * Description: 为租赁服务平台部署合约
   * Summary: 为租赁服务平台部署合约
   */
  async deployNotaryLeaseContractEx(request: DeployNotaryLeaseContractRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<DeployNotaryLeaseContractResponse> {
    Util.validateModel(request);
    return $tea.cast<DeployNotaryLeaseContractResponse>(await this.doRequest("1.0", "baas.notary.lease.contract.deploy", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new DeployNotaryLeaseContractResponse({}));
  }

  /**
   * Description: 建站服务信息注册
   * Summary: 服务注册
   */
  async createOpenchainWebsitService(request: CreateOpenchainWebsitServiceRequest): Promise<CreateOpenchainWebsitServiceResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.createOpenchainWebsitServiceEx(request, headers, runtime);
  }

  /**
   * Description: 建站服务信息注册
   * Summary: 服务注册
   */
  async createOpenchainWebsitServiceEx(request: CreateOpenchainWebsitServiceRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CreateOpenchainWebsitServiceResponse> {
    Util.validateModel(request);
    return $tea.cast<CreateOpenchainWebsitServiceResponse>(await this.doRequest("1.0", "baas.openchain.websit.service.create", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CreateOpenchainWebsitServiceResponse({}));
  }

  /**
   * Description: 可信建站法人四要素认证
   * Summary: 可信建站法人四要素认证
   */
  async checkOpenchainCorporateFace(request: CheckOpenchainCorporateFaceRequest): Promise<CheckOpenchainCorporateFaceResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.checkOpenchainCorporateFaceEx(request, headers, runtime);
  }

  /**
   * Description: 可信建站法人四要素认证
   * Summary: 可信建站法人四要素认证
   */
  async checkOpenchainCorporateFaceEx(request: CheckOpenchainCorporateFaceRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CheckOpenchainCorporateFaceResponse> {
    Util.validateModel(request);
    return $tea.cast<CheckOpenchainCorporateFaceResponse>(await this.doRequest("1.0", "baas.openchain.corporate.face.check", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CheckOpenchainCorporateFaceResponse({}));
  }

  /**
   * Description: 法人认证4要素结果查询
   * Summary: 法人认证4要素结果查询
   */
  async queryOpenchainCorporateFace(request: QueryOpenchainCorporateFaceRequest): Promise<QueryOpenchainCorporateFaceResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryOpenchainCorporateFaceEx(request, headers, runtime);
  }

  /**
   * Description: 法人认证4要素结果查询
   * Summary: 法人认证4要素结果查询
   */
  async queryOpenchainCorporateFaceEx(request: QueryOpenchainCorporateFaceRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryOpenchainCorporateFaceResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryOpenchainCorporateFaceResponse>(await this.doRequest("1.0", "baas.openchain.corporate.face.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryOpenchainCorporateFaceResponse({}));
  }

  /**
   * Description: 授权用户数据查询
   * Summary: 授权用户数据查询
   */
  async queryOpenchainUserData(request: QueryOpenchainUserDataRequest): Promise<QueryOpenchainUserDataResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryOpenchainUserDataEx(request, headers, runtime);
  }

  /**
   * Description: 授权用户数据查询
   * Summary: 授权用户数据查询
   */
  async queryOpenchainUserDataEx(request: QueryOpenchainUserDataRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryOpenchainUserDataResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryOpenchainUserDataResponse>(await this.doRequest("1.0", "baas.openchain.user.data.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryOpenchainUserDataResponse({}));
  }

  /**
   * Description: 三要素验证身份冒用风险
   * Summary: 三要素验证身份冒用风险
   */
  async queryIdentificationRiskThreemeta(request: QueryIdentificationRiskThreemetaRequest): Promise<QueryIdentificationRiskThreemetaResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryIdentificationRiskThreemetaEx(request, headers, runtime);
  }

  /**
   * Description: 三要素验证身份冒用风险
   * Summary: 三要素验证身份冒用风险
   */
  async queryIdentificationRiskThreemetaEx(request: QueryIdentificationRiskThreemetaRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryIdentificationRiskThreemetaResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryIdentificationRiskThreemetaResponse>(await this.doRequest("1.0", "baas.identification.risk.threemeta.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryIdentificationRiskThreemetaResponse({}));
  }

  /**
   * Description: 文本内容安全扫描
   * Summary: 文本内容安全扫描
   */
  async checkContentRiskText(request: CheckContentRiskTextRequest): Promise<CheckContentRiskTextResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.checkContentRiskTextEx(request, headers, runtime);
  }

  /**
   * Description: 文本内容安全扫描
   * Summary: 文本内容安全扫描
   */
  async checkContentRiskTextEx(request: CheckContentRiskTextRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CheckContentRiskTextResponse> {
    Util.validateModel(request);
    return $tea.cast<CheckContentRiskTextResponse>(await this.doRequest("1.0", "baas.content.risk.text.check", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CheckContentRiskTextResponse({}));
  }

  /**
   * Description: 二要素验证身份冒用风险
   * Summary: 二要素验证身份冒用风险
   */
  async queryIdentificationRiskTwometa(request: QueryIdentificationRiskTwometaRequest): Promise<QueryIdentificationRiskTwometaResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryIdentificationRiskTwometaEx(request, headers, runtime);
  }

  /**
   * Description: 二要素验证身份冒用风险
   * Summary: 二要素验证身份冒用风险
   */
  async queryIdentificationRiskTwometaEx(request: QueryIdentificationRiskTwometaRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryIdentificationRiskTwometaResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryIdentificationRiskTwometaResponse>(await this.doRequest("1.0", "baas.identification.risk.twometa.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryIdentificationRiskTwometaResponse({}));
  }

  /**
   * Description: 四要素验证身份冒用风险
   * Summary: 四要素验证身份冒用风险
   */
  async queryIdentificationRiskFourmeta(request: QueryIdentificationRiskFourmetaRequest): Promise<QueryIdentificationRiskFourmetaResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryIdentificationRiskFourmetaEx(request, headers, runtime);
  }

  /**
   * Description: 四要素验证身份冒用风险
   * Summary: 四要素验证身份冒用风险
   */
  async queryIdentificationRiskFourmetaEx(request: QueryIdentificationRiskFourmetaRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryIdentificationRiskFourmetaResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryIdentificationRiskFourmetaResponse>(await this.doRequest("1.0", "baas.identification.risk.fourmeta.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryIdentificationRiskFourmetaResponse({}));
  }

  /**
   * Description: 原生存证接口
   * Summary: 原生存证接口
   */
  async createNotaryRawText(request: CreateNotaryRawTextRequest): Promise<CreateNotaryRawTextResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.createNotaryRawTextEx(request, headers, runtime);
  }

  /**
   * Description: 原生存证接口
   * Summary: 原生存证接口
   */
  async createNotaryRawTextEx(request: CreateNotaryRawTextRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CreateNotaryRawTextResponse> {
    Util.validateModel(request);
    return $tea.cast<CreateNotaryRawTextResponse>(await this.doRequest("1.0", "baas.notary.raw.text.create", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CreateNotaryRawTextResponse({}));
  }

  /**
   * Description: 获取原生存证内容接口
   * Summary: 获取原生存证内容接口
   */
  async getNotaryRawText(request: GetNotaryRawTextRequest): Promise<GetNotaryRawTextResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.getNotaryRawTextEx(request, headers, runtime);
  }

  /**
   * Description: 获取原生存证内容接口
   * Summary: 获取原生存证内容接口
   */
  async getNotaryRawTextEx(request: GetNotaryRawTextRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<GetNotaryRawTextResponse> {
    Util.validateModel(request);
    return $tea.cast<GetNotaryRawTextResponse>(await this.doRequest("1.0", "baas.notary.raw.text.get", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new GetNotaryRawTextResponse({}));
  }

  /**
   * Description: 脱敏身份验证
   * Summary: 脱敏身份验证
   */
  async queryIdentificationRiskMask(request: QueryIdentificationRiskMaskRequest): Promise<QueryIdentificationRiskMaskResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryIdentificationRiskMaskEx(request, headers, runtime);
  }

  /**
   * Description: 脱敏身份验证
   * Summary: 脱敏身份验证
   */
  async queryIdentificationRiskMaskEx(request: QueryIdentificationRiskMaskRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryIdentificationRiskMaskResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryIdentificationRiskMaskResponse>(await this.doRequest("1.0", "baas.identification.risk.mask.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryIdentificationRiskMaskResponse({}));
  }

  /**
   * Description: 基于法人实人认证的企业四要素认证
   * Summary: 基于法人实人认证的企业四要素认证
   */
  async initIdentificationEnterpriseFaceauth(request: InitIdentificationEnterpriseFaceauthRequest): Promise<InitIdentificationEnterpriseFaceauthResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.initIdentificationEnterpriseFaceauthEx(request, headers, runtime);
  }

  /**
   * Description: 基于法人实人认证的企业四要素认证
   * Summary: 基于法人实人认证的企业四要素认证
   */
  async initIdentificationEnterpriseFaceauthEx(request: InitIdentificationEnterpriseFaceauthRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<InitIdentificationEnterpriseFaceauthResponse> {
    Util.validateModel(request);
    return $tea.cast<InitIdentificationEnterpriseFaceauthResponse>(await this.doRequest("1.0", "baas.identification.enterprise.faceauth.init", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new InitIdentificationEnterpriseFaceauthResponse({}));
  }

  /**
   * Description: 查询企业四要素（实人）认证结果
   * Summary: 查询企业四要素（实人）认证结果
   */
  async queryIdentificationEnterpriseFaceauth(request: QueryIdentificationEnterpriseFaceauthRequest): Promise<QueryIdentificationEnterpriseFaceauthResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryIdentificationEnterpriseFaceauthEx(request, headers, runtime);
  }

  /**
   * Description: 查询企业四要素（实人）认证结果
   * Summary: 查询企业四要素（实人）认证结果
   */
  async queryIdentificationEnterpriseFaceauthEx(request: QueryIdentificationEnterpriseFaceauthRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryIdentificationEnterpriseFaceauthResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryIdentificationEnterpriseFaceauthResponse>(await this.doRequest("1.0", "baas.identification.enterprise.faceauth.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryIdentificationEnterpriseFaceauthResponse({}));
  }

  /**
   * Description: 企业四要素认证
   * Summary: 企业四要素认证
   */
  async queryIdentificationEnterpriseFourmeta(request: QueryIdentificationEnterpriseFourmetaRequest): Promise<QueryIdentificationEnterpriseFourmetaResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryIdentificationEnterpriseFourmetaEx(request, headers, runtime);
  }

  /**
   * Description: 企业四要素认证
   * Summary: 企业四要素认证
   */
  async queryIdentificationEnterpriseFourmetaEx(request: QueryIdentificationEnterpriseFourmetaRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryIdentificationEnterpriseFourmetaResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryIdentificationEnterpriseFourmetaResponse>(await this.doRequest("1.0", "baas.identification.enterprise.fourmeta.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryIdentificationEnterpriseFourmetaResponse({}));
  }

  /**
   * Description: 企业三要素认证（企业名，企业证件号，法人姓名）
   * Summary: 企业三要素认证
   */
  async queryIdentificationEnterpriseThreemeta(request: QueryIdentificationEnterpriseThreemetaRequest): Promise<QueryIdentificationEnterpriseThreemetaResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryIdentificationEnterpriseThreemetaEx(request, headers, runtime);
  }

  /**
   * Description: 企业三要素认证（企业名，企业证件号，法人姓名）
   * Summary: 企业三要素认证
   */
  async queryIdentificationEnterpriseThreemetaEx(request: QueryIdentificationEnterpriseThreemetaRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryIdentificationEnterpriseThreemetaResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryIdentificationEnterpriseThreemetaResponse>(await this.doRequest("1.0", "baas.identification.enterprise.threemeta.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryIdentificationEnterpriseThreemetaResponse({}));
  }

  /**
   * Description: 企业二要素认证（企业名称，企业证件号码）
   * Summary:  企业二要素认证
   */
  async queryIdentificationEnterpriseTwometa(request: QueryIdentificationEnterpriseTwometaRequest): Promise<QueryIdentificationEnterpriseTwometaResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryIdentificationEnterpriseTwometaEx(request, headers, runtime);
  }

  /**
   * Description: 企业二要素认证（企业名称，企业证件号码）
   * Summary:  企业二要素认证
   */
  async queryIdentificationEnterpriseTwometaEx(request: QueryIdentificationEnterpriseTwometaRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryIdentificationEnterpriseTwometaResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryIdentificationEnterpriseTwometaResponse>(await this.doRequest("1.0", "baas.identification.enterprise.twometa.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryIdentificationEnterpriseTwometaResponse({}));
  }

  /**
   * Description: 完成1.三要素认证；2创建did；3.颁发声明（声明该DID已经完成三要素认证）
   * Summary: 三要素认证与did创建接口
   */
  async startMydidDidThreeelement(request: StartMydidDidThreeelementRequest): Promise<StartMydidDidThreeelementResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.startMydidDidThreeelementEx(request, headers, runtime);
  }

  /**
   * Description: 完成1.三要素认证；2创建did；3.颁发声明（声明该DID已经完成三要素认证）
   * Summary: 三要素认证与did创建接口
   */
  async startMydidDidThreeelementEx(request: StartMydidDidThreeelementRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<StartMydidDidThreeelementResponse> {
    Util.validateModel(request);
    return $tea.cast<StartMydidDidThreeelementResponse>(await this.doRequest("1.0", "baas.mydid.did.threeelement.start", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new StartMydidDidThreeelementResponse({}));
  }

  /**
   * Description: 查询用户可用的公钥列表
   * Summary: 查询用户可用的公钥列表
   */
  async listWaasDidValidpublickeys(request: ListWaasDidValidpublickeysRequest): Promise<ListWaasDidValidpublickeysResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.listWaasDidValidpublickeysEx(request, headers, runtime);
  }

  /**
   * Description: 查询用户可用的公钥列表
   * Summary: 查询用户可用的公钥列表
   */
  async listWaasDidValidpublickeysEx(request: ListWaasDidValidpublickeysRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<ListWaasDidValidpublickeysResponse> {
    Util.validateModel(request);
    return $tea.cast<ListWaasDidValidpublickeysResponse>(await this.doRequest("1.0", "baas.waas.did.validpublickeys.list", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new ListWaasDidValidpublickeysResponse({}));
  }

  /**
   * Description: 查询指定公钥信息
   * Summary: 查询指定公钥信息
   */
  async queryWaasDidPublickey(request: QueryWaasDidPublickeyRequest): Promise<QueryWaasDidPublickeyResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryWaasDidPublickeyEx(request, headers, runtime);
  }

  /**
   * Description: 查询指定公钥信息
   * Summary: 查询指定公钥信息
   */
  async queryWaasDidPublickeyEx(request: QueryWaasDidPublickeyRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryWaasDidPublickeyResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryWaasDidPublickeyResponse>(await this.doRequest("1.0", "baas.waas.did.publickey.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryWaasDidPublickeyResponse({}));
  }

  /**
   * Description: 业务注册waas服务
   * Summary: 业务注册waas服务
   */
  async registerWaasBusiness(request: RegisterWaasBusinessRequest): Promise<RegisterWaasBusinessResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.registerWaasBusinessEx(request, headers, runtime);
  }

  /**
   * Description: 业务注册waas服务
   * Summary: 业务注册waas服务
   */
  async registerWaasBusinessEx(request: RegisterWaasBusinessRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<RegisterWaasBusinessResponse> {
    Util.validateModel(request);
    return $tea.cast<RegisterWaasBusinessResponse>(await this.doRequest("1.0", "baas.waas.business.register", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new RegisterWaasBusinessResponse({}));
  }

  /**
   * Description: 为业务合作方提供查询转账时上链信息，里面包含dcep合约传参
   * Summary: 查询转账上链信息
   */
  async queryWaasBusinessTransferbody(request: QueryWaasBusinessTransferbodyRequest): Promise<QueryWaasBusinessTransferbodyResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.queryWaasBusinessTransferbodyEx(request, headers, runtime);
  }

  /**
   * Description: 为业务合作方提供查询转账时上链信息，里面包含dcep合约传参
   * Summary: 查询转账上链信息
   */
  async queryWaasBusinessTransferbodyEx(request: QueryWaasBusinessTransferbodyRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<QueryWaasBusinessTransferbodyResponse> {
    Util.validateModel(request);
    return $tea.cast<QueryWaasBusinessTransferbodyResponse>(await this.doRequest("1.0", "baas.waas.business.transferbody.query", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new QueryWaasBusinessTransferbodyResponse({}));
  }

  /**
   * Description: 业务合作方通知订单上链情况
   * Summary: 业务合作方通知订单上链情况
   */
  async notifyWaasBusinessOrder(request: NotifyWaasBusinessOrderRequest): Promise<NotifyWaasBusinessOrderResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.notifyWaasBusinessOrderEx(request, headers, runtime);
  }

  /**
   * Description: 业务合作方通知订单上链情况
   * Summary: 业务合作方通知订单上链情况
   */
  async notifyWaasBusinessOrderEx(request: NotifyWaasBusinessOrderRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<NotifyWaasBusinessOrderResponse> {
    Util.validateModel(request);
    return $tea.cast<NotifyWaasBusinessOrderResponse>(await this.doRequest("1.0", "baas.waas.business.order.notify", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new NotifyWaasBusinessOrderResponse({}));
  }

  /**
   * Description: 创建HTTP PUT提交的文件上传
   * Summary: 文件上传创建
   */
  async createAntcloudGatewayxFileUpload(request: CreateAntcloudGatewayxFileUploadRequest): Promise<CreateAntcloudGatewayxFileUploadResponse> {
    let runtime = new $Util.RuntimeOptions({ });
    let headers : {[key: string ]: string} = { };
    return await this.createAntcloudGatewayxFileUploadEx(request, headers, runtime);
  }

  /**
   * Description: 创建HTTP PUT提交的文件上传
   * Summary: 文件上传创建
   */
  async createAntcloudGatewayxFileUploadEx(request: CreateAntcloudGatewayxFileUploadRequest, headers: {[key: string ]: string}, runtime: $Util.RuntimeOptions): Promise<CreateAntcloudGatewayxFileUploadResponse> {
    Util.validateModel(request);
    return $tea.cast<CreateAntcloudGatewayxFileUploadResponse>(await this.doRequest("1.0", "antcloud.gatewayx.file.upload.create", "HTTPS", "POST", `/gateway.do`, $tea.toMap(request), headers, runtime), new CreateAntcloudGatewayxFileUploadResponse({}));
  }

}
