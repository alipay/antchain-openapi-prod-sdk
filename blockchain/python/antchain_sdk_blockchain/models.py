# -*- coding: utf-8 -*-
# This file is auto-generated, don't edit it. Thanks.
from Tea.model import TeaModel
from typing import List


class Config(TeaModel):
    """
    Model for initing client
    """
    def __init__(
        self,
        access_key_id: str = None,
        access_key_secret: str = None,
        security_token: str = None,
        protocol: str = None,
        read_timeout: int = None,
        connect_timeout: int = None,
        http_proxy: str = None,
        https_proxy: str = None,
        endpoint: str = None,
        no_proxy: str = None,
        max_idle_conns: int = None,
        user_agent: str = None,
        socks_5proxy: str = None,
        socks_5net_work: str = None,
        max_idle_time_millis: int = None,
        keep_alive_duration_millis: int = None,
        max_requests: int = None,
        max_requests_per_host: int = None,
    ):
        # accesskey id
        self.access_key_id = access_key_id
        # accesskey secret
        self.access_key_secret = access_key_secret
        # security token
        self.security_token = security_token
        # http protocol
        self.protocol = protocol
        # read timeout
        self.read_timeout = read_timeout
        # connect timeout
        self.connect_timeout = connect_timeout
        # http proxy
        self.http_proxy = http_proxy
        # https proxy
        self.https_proxy = https_proxy
        # endpoint
        self.endpoint = endpoint
        # proxy white list
        self.no_proxy = no_proxy
        # max idle conns
        self.max_idle_conns = max_idle_conns
        # user agent
        self.user_agent = user_agent
        # socks5 proxy
        self.socks_5proxy = socks_5proxy
        # socks5 network
        self.socks_5net_work = socks_5net_work
        # 长链接最大空闲时长
        self.max_idle_time_millis = max_idle_time_millis
        # 长链接最大连接时长
        self.keep_alive_duration_millis = keep_alive_duration_millis
        # 最大连接数（长链接最大总数）
        self.max_requests = max_requests
        # 每个目标主机的最大连接数（分主机域名的长链接最大总数
        self.max_requests_per_host = max_requests_per_host

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.access_key_id is not None:
            result['accessKeyId'] = self.access_key_id
        if self.access_key_secret is not None:
            result['accessKeySecret'] = self.access_key_secret
        if self.security_token is not None:
            result['securityToken'] = self.security_token
        if self.protocol is not None:
            result['protocol'] = self.protocol
        if self.read_timeout is not None:
            result['readTimeout'] = self.read_timeout
        if self.connect_timeout is not None:
            result['connectTimeout'] = self.connect_timeout
        if self.http_proxy is not None:
            result['httpProxy'] = self.http_proxy
        if self.https_proxy is not None:
            result['httpsProxy'] = self.https_proxy
        if self.endpoint is not None:
            result['endpoint'] = self.endpoint
        if self.no_proxy is not None:
            result['noProxy'] = self.no_proxy
        if self.max_idle_conns is not None:
            result['maxIdleConns'] = self.max_idle_conns
        if self.user_agent is not None:
            result['userAgent'] = self.user_agent
        if self.socks_5proxy is not None:
            result['socks5Proxy'] = self.socks_5proxy
        if self.socks_5net_work is not None:
            result['socks5NetWork'] = self.socks_5net_work
        if self.max_idle_time_millis is not None:
            result['maxIdleTimeMillis'] = self.max_idle_time_millis
        if self.keep_alive_duration_millis is not None:
            result['keepAliveDurationMillis'] = self.keep_alive_duration_millis
        if self.max_requests is not None:
            result['maxRequests'] = self.max_requests
        if self.max_requests_per_host is not None:
            result['maxRequestsPerHost'] = self.max_requests_per_host
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('accessKeyId') is not None:
            self.access_key_id = m.get('accessKeyId')
        if m.get('accessKeySecret') is not None:
            self.access_key_secret = m.get('accessKeySecret')
        if m.get('securityToken') is not None:
            self.security_token = m.get('securityToken')
        if m.get('protocol') is not None:
            self.protocol = m.get('protocol')
        if m.get('readTimeout') is not None:
            self.read_timeout = m.get('readTimeout')
        if m.get('connectTimeout') is not None:
            self.connect_timeout = m.get('connectTimeout')
        if m.get('httpProxy') is not None:
            self.http_proxy = m.get('httpProxy')
        if m.get('httpsProxy') is not None:
            self.https_proxy = m.get('httpsProxy')
        if m.get('endpoint') is not None:
            self.endpoint = m.get('endpoint')
        if m.get('noProxy') is not None:
            self.no_proxy = m.get('noProxy')
        if m.get('maxIdleConns') is not None:
            self.max_idle_conns = m.get('maxIdleConns')
        if m.get('userAgent') is not None:
            self.user_agent = m.get('userAgent')
        if m.get('socks5Proxy') is not None:
            self.socks_5proxy = m.get('socks5Proxy')
        if m.get('socks5NetWork') is not None:
            self.socks_5net_work = m.get('socks5NetWork')
        if m.get('maxIdleTimeMillis') is not None:
            self.max_idle_time_millis = m.get('maxIdleTimeMillis')
        if m.get('keepAliveDurationMillis') is not None:
            self.keep_alive_duration_millis = m.get('keepAliveDurationMillis')
        if m.get('maxRequests') is not None:
            self.max_requests = m.get('maxRequests')
        if m.get('maxRequestsPerHost') is not None:
            self.max_requests_per_host = m.get('maxRequestsPerHost')
        return self


class BlockchainBrowserTransactionContract(TeaModel):
    def __init__(
        self,
        data: str = None,
        from_: str = None,
        to: str = None,
        gas: int = None,
        hash: str = None,
        nonce: str = None,
        period: int = None,
        signature_list: List[str] = None,
        timestamp: int = None,
        transaction_type: str = None,
        value: int = None,
    ):
        # data
        self.data = data
        # from
        self.from_ = from_
        # to
        self.to = to
        # gas
        self.gas = gas
        # hash
        self.hash = hash
        # nonce
        self.nonce = nonce
        # period
        self.period = period
        # signature_list
        self.signature_list = signature_list
        # timestamp
        self.timestamp = timestamp
        # transaction_type
        self.transaction_type = transaction_type
        # value
        self.value = value

    def validate(self):
        self.validate_required(self.data, 'data')
        self.validate_required(self.from_, 'from_')
        self.validate_required(self.to, 'to')
        self.validate_required(self.gas, 'gas')
        self.validate_required(self.hash, 'hash')
        self.validate_required(self.nonce, 'nonce')
        self.validate_required(self.period, 'period')
        self.validate_required(self.signature_list, 'signature_list')
        self.validate_required(self.timestamp, 'timestamp')
        self.validate_required(self.transaction_type, 'transaction_type')
        self.validate_required(self.value, 'value')

    def to_map(self):
        result = dict()
        if self.data is not None:
            result['data'] = self.data
        if self.from_ is not None:
            result['from'] = self.from_
        if self.to is not None:
            result['to'] = self.to
        if self.gas is not None:
            result['gas'] = self.gas
        if self.hash is not None:
            result['hash'] = self.hash
        if self.nonce is not None:
            result['nonce'] = self.nonce
        if self.period is not None:
            result['period'] = self.period
        if self.signature_list is not None:
            result['signature_list'] = self.signature_list
        if self.timestamp is not None:
            result['timestamp'] = self.timestamp
        if self.transaction_type is not None:
            result['transaction_type'] = self.transaction_type
        if self.value is not None:
            result['value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            self.data = m.get('data')
        if m.get('from') is not None:
            self.from_ = m.get('from')
        if m.get('to') is not None:
            self.to = m.get('to')
        if m.get('gas') is not None:
            self.gas = m.get('gas')
        if m.get('hash') is not None:
            self.hash = m.get('hash')
        if m.get('nonce') is not None:
            self.nonce = m.get('nonce')
        if m.get('period') is not None:
            self.period = m.get('period')
        if m.get('signature_list') is not None:
            self.signature_list = m.get('signature_list')
        if m.get('timestamp') is not None:
            self.timestamp = m.get('timestamp')
        if m.get('transaction_type') is not None:
            self.transaction_type = m.get('transaction_type')
        if m.get('value') is not None:
            self.value = m.get('value')
        return self


class ProcessNode(TeaModel):
    def __init__(
        self,
        node_id: str = None,
        node_name: str = None,
        node_num: int = None,
    ):
        # 审批节点ID
        self.node_id = node_id
        # 节点名称
        self.node_name = node_name
        # 节点序号，从1开始编号
        self.node_num = node_num

    def validate(self):
        self.validate_required(self.node_id, 'node_id')
        if self.node_id is not None:
            self.validate_max_length(self.node_id, 'node_id', 100)
        self.validate_required(self.node_name, 'node_name')
        if self.node_name is not None:
            self.validate_max_length(self.node_name, 'node_name', 64)
        self.validate_required(self.node_num, 'node_num')
        if self.node_num is not None:
            self.validate_minimum(self.node_num, 'node_num', 1)

    def to_map(self):
        result = dict()
        if self.node_id is not None:
            result['node_id'] = self.node_id
        if self.node_name is not None:
            result['node_name'] = self.node_name
        if self.node_num is not None:
            result['node_num'] = self.node_num
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('node_id') is not None:
            self.node_id = m.get('node_id')
        if m.get('node_name') is not None:
            self.node_name = m.get('node_name')
        if m.get('node_num') is not None:
            self.node_num = m.get('node_num')
        return self


class Participant(TeaModel):
    def __init__(
        self,
        biz_uid: str = None,
        blockchain_id: str = None,
        create_time: int = None,
        credit_number: str = None,
        extension_info: str = None,
        name: str = None,
        notification_service: str = None,
        participant_id: str = None,
        public_info: str = None,
        role: List[str] = None,
        space_id: str = None,
        status: str = None,
        update_time: int = None,
        account: str = None,
    ):
        # 业务系统唯一标示
        self.biz_uid = biz_uid
        # 区块链ID
        self.blockchain_id = blockchain_id
        # 创建时间
        self.create_time = create_time
        # 信用代码
        self.credit_number = credit_number
        # 扩展信息，标准JSON格式
        self.extension_info = extension_info
        # 参与方名字
        self.name = name
        # 回调通知服务地址
        self.notification_service = notification_service
        # 参与方ID
        self.participant_id = participant_id
        # DID  doc中的公开信息
        self.public_info = public_info
        # 参与方角色列表
        self.role = role
        # 空间ID
        self.space_id = space_id
        # 参与方状态
        self.status = status
        # 更新时间
        self.update_time = update_time
        # 账户名称
        self.account = account

    def validate(self):
        if self.biz_uid is not None:
            self.validate_max_length(self.biz_uid, 'biz_uid', 64)
        self.validate_required(self.create_time, 'create_time')
        self.validate_required(self.name, 'name')
        if self.name is not None:
            self.validate_max_length(self.name, 'name', 64)
        self.validate_required(self.participant_id, 'participant_id')
        if self.participant_id is not None:
            self.validate_max_length(self.participant_id, 'participant_id', 100)
        self.validate_required(self.role, 'role')
        self.validate_required(self.update_time, 'update_time')

    def to_map(self):
        result = dict()
        if self.biz_uid is not None:
            result['biz_uid'] = self.biz_uid
        if self.blockchain_id is not None:
            result['blockchain_id'] = self.blockchain_id
        if self.create_time is not None:
            result['create_time'] = self.create_time
        if self.credit_number is not None:
            result['credit_number'] = self.credit_number
        if self.extension_info is not None:
            result['extension_info'] = self.extension_info
        if self.name is not None:
            result['name'] = self.name
        if self.notification_service is not None:
            result['notification_service'] = self.notification_service
        if self.participant_id is not None:
            result['participant_id'] = self.participant_id
        if self.public_info is not None:
            result['public_info'] = self.public_info
        if self.role is not None:
            result['role'] = self.role
        if self.space_id is not None:
            result['space_id'] = self.space_id
        if self.status is not None:
            result['status'] = self.status
        if self.update_time is not None:
            result['update_time'] = self.update_time
        if self.account is not None:
            result['account'] = self.account
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('biz_uid') is not None:
            self.biz_uid = m.get('biz_uid')
        if m.get('blockchain_id') is not None:
            self.blockchain_id = m.get('blockchain_id')
        if m.get('create_time') is not None:
            self.create_time = m.get('create_time')
        if m.get('credit_number') is not None:
            self.credit_number = m.get('credit_number')
        if m.get('extension_info') is not None:
            self.extension_info = m.get('extension_info')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('notification_service') is not None:
            self.notification_service = m.get('notification_service')
        if m.get('participant_id') is not None:
            self.participant_id = m.get('participant_id')
        if m.get('public_info') is not None:
            self.public_info = m.get('public_info')
        if m.get('role') is not None:
            self.role = m.get('role')
        if m.get('space_id') is not None:
            self.space_id = m.get('space_id')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('update_time') is not None:
            self.update_time = m.get('update_time')
        if m.get('account') is not None:
            self.account = m.get('account')
        return self


class DataEntity(TeaModel):
    def __init__(
        self,
        auth_status: str = None,
        biz_uid: str = None,
        blockchain_id: str = None,
        category: str = None,
        data_id: str = None,
        data_model_id: str = None,
        extension_info: str = None,
        name: str = None,
        owner_id: str = None,
        process_template: List[ProcessNode] = None,
        status: str = None,
        create_time: int = None,
        update_time: int = None,
    ):
        # 授权状态
        self.auth_status = auth_status
        # 业务系统唯一标示
        self.biz_uid = biz_uid
        # 区块链ID
        self.blockchain_id = blockchain_id
        # 数据类别
        self.category = category
        # 数据ID
        self.data_id = data_id
        # 数据模型ID
        self.data_model_id = data_model_id
        # 扩展信息，标准JSON格式
        self.extension_info = extension_info
        # 数据名称
        self.name = name
        # 数据所有者ID
        self.owner_id = owner_id
        # 流程节点信息
        self.process_template = process_template
        # 数据状态
        self.status = status
        # 创建时间
        self.create_time = create_time
        # 修改时间
        self.update_time = update_time

    def validate(self):
        if self.biz_uid is not None:
            self.validate_max_length(self.biz_uid, 'biz_uid', 64)
        self.validate_required(self.category, 'category')
        if self.category is not None:
            self.validate_max_length(self.category, 'category', 32)
        self.validate_required(self.data_id, 'data_id')
        if self.data_id is not None:
            self.validate_max_length(self.data_id, 'data_id', 100)
        self.validate_required(self.name, 'name')
        if self.name is not None:
            self.validate_max_length(self.name, 'name', 64)
        self.validate_required(self.owner_id, 'owner_id')
        if self.owner_id is not None:
            self.validate_max_length(self.owner_id, 'owner_id', 100)
        if self.process_template:
            for k in self.process_template:
                if k:
                    k.validate()
        if self.status is not None:
            self.validate_max_length(self.status, 'status', 16)
        self.validate_required(self.create_time, 'create_time')

    def to_map(self):
        result = dict()
        if self.auth_status is not None:
            result['auth_status'] = self.auth_status
        if self.biz_uid is not None:
            result['biz_uid'] = self.biz_uid
        if self.blockchain_id is not None:
            result['blockchain_id'] = self.blockchain_id
        if self.category is not None:
            result['category'] = self.category
        if self.data_id is not None:
            result['data_id'] = self.data_id
        if self.data_model_id is not None:
            result['data_model_id'] = self.data_model_id
        if self.extension_info is not None:
            result['extension_info'] = self.extension_info
        if self.name is not None:
            result['name'] = self.name
        if self.owner_id is not None:
            result['owner_id'] = self.owner_id
        result['process_template'] = []
        if self.process_template is not None:
            for k in self.process_template:
                result['process_template'].append(k.to_map() if k else None)
        if self.status is not None:
            result['status'] = self.status
        if self.create_time is not None:
            result['create_time'] = self.create_time
        if self.update_time is not None:
            result['update_time'] = self.update_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_status') is not None:
            self.auth_status = m.get('auth_status')
        if m.get('biz_uid') is not None:
            self.biz_uid = m.get('biz_uid')
        if m.get('blockchain_id') is not None:
            self.blockchain_id = m.get('blockchain_id')
        if m.get('category') is not None:
            self.category = m.get('category')
        if m.get('data_id') is not None:
            self.data_id = m.get('data_id')
        if m.get('data_model_id') is not None:
            self.data_model_id = m.get('data_model_id')
        if m.get('extension_info') is not None:
            self.extension_info = m.get('extension_info')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('owner_id') is not None:
            self.owner_id = m.get('owner_id')
        self.process_template = []
        if m.get('process_template') is not None:
            for k in m.get('process_template'):
                temp_model = ProcessNode()
                self.process_template.append(temp_model.from_map(k))
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('create_time') is not None:
            self.create_time = m.get('create_time')
        if m.get('update_time') is not None:
            self.update_time = m.get('update_time')
        return self


class NodeDetail(TeaModel):
    def __init__(
        self,
        comment: str = None,
        node_id: str = None,
        node_name: str = None,
        node_status: str = None,
        operate_time: int = None,
        extension_info: str = None,
    ):
        # 节点审批意见
        self.comment = comment
        # 节点ID
        self.node_id = node_id
        # 节点名称
        self.node_name = node_name
        # 节点状态
        self.node_status = node_status
        # 节点审批时间
        self.operate_time = operate_time
        # 扩展参数
        self.extension_info = extension_info

    def validate(self):
        self.validate_required(self.comment, 'comment')
        self.validate_required(self.node_id, 'node_id')
        self.validate_required(self.node_name, 'node_name')
        self.validate_required(self.node_status, 'node_status')
        self.validate_required(self.operate_time, 'operate_time')

    def to_map(self):
        result = dict()
        if self.comment is not None:
            result['comment'] = self.comment
        if self.node_id is not None:
            result['node_id'] = self.node_id
        if self.node_name is not None:
            result['node_name'] = self.node_name
        if self.node_status is not None:
            result['node_status'] = self.node_status
        if self.operate_time is not None:
            result['operate_time'] = self.operate_time
        if self.extension_info is not None:
            result['extension_info'] = self.extension_info
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('comment') is not None:
            self.comment = m.get('comment')
        if m.get('node_id') is not None:
            self.node_id = m.get('node_id')
        if m.get('node_name') is not None:
            self.node_name = m.get('node_name')
        if m.get('node_status') is not None:
            self.node_status = m.get('node_status')
        if m.get('operate_time') is not None:
            self.operate_time = m.get('operate_time')
        if m.get('extension_info') is not None:
            self.extension_info = m.get('extension_info')
        return self


class ALiYunDownloadPath(TeaModel):
    def __init__(
        self,
        client_crt_url: str = None,
        trust_ca_url: str = None,
        ca_crt_url: str = None,
        sdk_url: str = None,
    ):
        # client_crt_url
        self.client_crt_url = client_crt_url
        # trust_ca_url
        self.trust_ca_url = trust_ca_url
        # ca_crt_url
        self.ca_crt_url = ca_crt_url
        # sdk_url
        self.sdk_url = sdk_url

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.client_crt_url is not None:
            result['client_crt_url'] = self.client_crt_url
        if self.trust_ca_url is not None:
            result['trust_ca_url'] = self.trust_ca_url
        if self.ca_crt_url is not None:
            result['ca_crt_url'] = self.ca_crt_url
        if self.sdk_url is not None:
            result['sdk_url'] = self.sdk_url
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('client_crt_url') is not None:
            self.client_crt_url = m.get('client_crt_url')
        if m.get('trust_ca_url') is not None:
            self.trust_ca_url = m.get('trust_ca_url')
        if m.get('ca_crt_url') is not None:
            self.ca_crt_url = m.get('ca_crt_url')
        if m.get('sdk_url') is not None:
            self.sdk_url = m.get('sdk_url')
        return self


class DataModel(TeaModel):
    def __init__(
        self,
        biz_uid: str = None,
        space_id: str = None,
        create_time: int = None,
        description: str = None,
        field_detail: str = None,
        model_biz_id: str = None,
        model_id: str = None,
        name: str = None,
        submitter: Participant = None,
        update_time: int = None,
        status: str = None,
    ):
        # 业务系统唯一标示
        self.biz_uid = biz_uid
        # 空间ID
        self.space_id = space_id
        # 创建时间
        self.create_time = create_time
        # 数据模型描述
        self.description = description
        # 模型字段详细信息
        self.field_detail = field_detail
        # 数据模型业务ID
        self.model_biz_id = model_biz_id
        # 数据模型ID
        self.model_id = model_id
        # 数据模型名称
        self.name = name
        # 提交人
        self.submitter = submitter
        # 更新时间
        self.update_time = update_time
        # 状态
        self.status = status

    def validate(self):
        self.validate_required(self.space_id, 'space_id')
        self.validate_required(self.create_time, 'create_time')
        self.validate_required(self.field_detail, 'field_detail')
        self.validate_required(self.model_id, 'model_id')
        self.validate_required(self.name, 'name')
        self.validate_required(self.submitter, 'submitter')
        if self.submitter:
            self.submitter.validate()
        self.validate_required(self.update_time, 'update_time')
        self.validate_required(self.status, 'status')

    def to_map(self):
        result = dict()
        if self.biz_uid is not None:
            result['biz_uid'] = self.biz_uid
        if self.space_id is not None:
            result['space_id'] = self.space_id
        if self.create_time is not None:
            result['create_time'] = self.create_time
        if self.description is not None:
            result['description'] = self.description
        if self.field_detail is not None:
            result['field_detail'] = self.field_detail
        if self.model_biz_id is not None:
            result['model_biz_id'] = self.model_biz_id
        if self.model_id is not None:
            result['model_id'] = self.model_id
        if self.name is not None:
            result['name'] = self.name
        if self.submitter is not None:
            result['submitter'] = self.submitter.to_map()
        if self.update_time is not None:
            result['update_time'] = self.update_time
        if self.status is not None:
            result['status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('biz_uid') is not None:
            self.biz_uid = m.get('biz_uid')
        if m.get('space_id') is not None:
            self.space_id = m.get('space_id')
        if m.get('create_time') is not None:
            self.create_time = m.get('create_time')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('field_detail') is not None:
            self.field_detail = m.get('field_detail')
        if m.get('model_biz_id') is not None:
            self.model_biz_id = m.get('model_biz_id')
        if m.get('model_id') is not None:
            self.model_id = m.get('model_id')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('submitter') is not None:
            temp_model = Participant()
            self.submitter = temp_model.from_map(m['submitter'])
        if m.get('update_time') is not None:
            self.update_time = m.get('update_time')
        if m.get('status') is not None:
            self.status = m.get('status')
        return self


class ALiYunAntChain(TeaModel):
    def __init__(
        self,
        ant_chain_id: str = None,
        ant_chain_name: str = None,
        chain_type: str = None,
        cipher_suit: str = None,
        create_time: int = None,
        expire_time: int = None,
        instance_id: str = None,
        is_admin: bool = None,
        member_status: str = None,
        merkle_tree_suit: str = None,
        network: str = None,
        node_num: int = None,
        region_id: str = None,
        resource_size: str = None,
        rest_status: str = None,
        tls_algo: str = None,
        version: str = None,
        monitor_status: bool = None,
    ):
        # ant_chain_id
        self.ant_chain_id = ant_chain_id
        # 链名称
        self.ant_chain_name = ant_chain_name
        # 链的类型
        self.chain_type = chain_type
        # cipher_suit
        self.cipher_suit = cipher_suit
        # 创建时间
        self.create_time = create_time
        # expire_time
        self.expire_time = expire_time
        # instance_id
        self.instance_id = instance_id
        # is_admin
        self.is_admin = is_admin
        # 成员状态
        self.member_status = member_status
        # merkle_tree_suit
        self.merkle_tree_suit = merkle_tree_suit
        # Network
        self.network = network
        # 节点数
        self.node_num = node_num
        # 区域信息
        self.region_id = region_id
        # 链的资源大小
        self.resource_size = resource_size
        # rest_status
        self.rest_status = rest_status
        # 算法参数
        self.tls_algo = tls_algo
        # 版本信息
        self.version = version
        # monitor_status
        self.monitor_status = monitor_status

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.ant_chain_id is not None:
            result['ant_chain_id'] = self.ant_chain_id
        if self.ant_chain_name is not None:
            result['ant_chain_name'] = self.ant_chain_name
        if self.chain_type is not None:
            result['chain_type'] = self.chain_type
        if self.cipher_suit is not None:
            result['cipher_suit'] = self.cipher_suit
        if self.create_time is not None:
            result['create_time'] = self.create_time
        if self.expire_time is not None:
            result['expire_time'] = self.expire_time
        if self.instance_id is not None:
            result['instance_id'] = self.instance_id
        if self.is_admin is not None:
            result['is_admin'] = self.is_admin
        if self.member_status is not None:
            result['member_status'] = self.member_status
        if self.merkle_tree_suit is not None:
            result['merkle_tree_suit'] = self.merkle_tree_suit
        if self.network is not None:
            result['network'] = self.network
        if self.node_num is not None:
            result['node_num'] = self.node_num
        if self.region_id is not None:
            result['region_id'] = self.region_id
        if self.resource_size is not None:
            result['resource_size'] = self.resource_size
        if self.rest_status is not None:
            result['rest_status'] = self.rest_status
        if self.tls_algo is not None:
            result['tls_algo'] = self.tls_algo
        if self.version is not None:
            result['version'] = self.version
        if self.monitor_status is not None:
            result['monitor_status'] = self.monitor_status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ant_chain_id') is not None:
            self.ant_chain_id = m.get('ant_chain_id')
        if m.get('ant_chain_name') is not None:
            self.ant_chain_name = m.get('ant_chain_name')
        if m.get('chain_type') is not None:
            self.chain_type = m.get('chain_type')
        if m.get('cipher_suit') is not None:
            self.cipher_suit = m.get('cipher_suit')
        if m.get('create_time') is not None:
            self.create_time = m.get('create_time')
        if m.get('expire_time') is not None:
            self.expire_time = m.get('expire_time')
        if m.get('instance_id') is not None:
            self.instance_id = m.get('instance_id')
        if m.get('is_admin') is not None:
            self.is_admin = m.get('is_admin')
        if m.get('member_status') is not None:
            self.member_status = m.get('member_status')
        if m.get('merkle_tree_suit') is not None:
            self.merkle_tree_suit = m.get('merkle_tree_suit')
        if m.get('network') is not None:
            self.network = m.get('network')
        if m.get('node_num') is not None:
            self.node_num = m.get('node_num')
        if m.get('region_id') is not None:
            self.region_id = m.get('region_id')
        if m.get('resource_size') is not None:
            self.resource_size = m.get('resource_size')
        if m.get('rest_status') is not None:
            self.rest_status = m.get('rest_status')
        if m.get('tls_algo') is not None:
            self.tls_algo = m.get('tls_algo')
        if m.get('version') is not None:
            self.version = m.get('version')
        if m.get('monitor_status') is not None:
            self.monitor_status = m.get('monitor_status')
        return self


class ALiYunAccount(TeaModel):
    def __init__(
        self,
        ant_chain_id: str = None,
        account: str = None,
        account_public_key: str = None,
        account_recovery_key: str = None,
        account_status: str = None,
    ):
        # ant_chain_id
        self.ant_chain_id = ant_chain_id
        # account
        self.account = account
        # account_public_key
        self.account_public_key = account_public_key
        # account_recovery_key
        self.account_recovery_key = account_recovery_key
        # account_status
        self.account_status = account_status

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.ant_chain_id is not None:
            result['ant_chain_id'] = self.ant_chain_id
        if self.account is not None:
            result['account'] = self.account
        if self.account_public_key is not None:
            result['account_public_key'] = self.account_public_key
        if self.account_recovery_key is not None:
            result['account_recovery_key'] = self.account_recovery_key
        if self.account_status is not None:
            result['account_status'] = self.account_status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ant_chain_id') is not None:
            self.ant_chain_id = m.get('ant_chain_id')
        if m.get('account') is not None:
            self.account = m.get('account')
        if m.get('account_public_key') is not None:
            self.account_public_key = m.get('account_public_key')
        if m.get('account_recovery_key') is not None:
            self.account_recovery_key = m.get('account_recovery_key')
        if m.get('account_status') is not None:
            self.account_status = m.get('account_status')
        return self


class ALiYunMember(TeaModel):
    def __init__(
        self,
        join_time: int = None,
        member_id: str = None,
        member_name: str = None,
        role: str = None,
        status: str = None,
    ):
        # 加入时间
        self.join_time = join_time
        # 成员id
        self.member_id = member_id
        # 成员名称
        self.member_name = member_name
        # 角色
        self.role = role
        # 状态
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.join_time is not None:
            result['join_time'] = self.join_time
        if self.member_id is not None:
            result['member_id'] = self.member_id
        if self.member_name is not None:
            result['member_name'] = self.member_name
        if self.role is not None:
            result['role'] = self.role
        if self.status is not None:
            result['status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('join_time') is not None:
            self.join_time = m.get('join_time')
        if m.get('member_id') is not None:
            self.member_id = m.get('member_id')
        if m.get('member_name') is not None:
            self.member_name = m.get('member_name')
        if m.get('role') is not None:
            self.role = m.get('role')
        if m.get('status') is not None:
            self.status = m.get('status')
        return self


class ALiYunContractProject(TeaModel):
    def __init__(
        self,
        consortium_id: str = None,
        create_time: int = None,
        project_description: str = None,
        project_id: str = None,
        project_name: str = None,
        project_version: str = None,
        update_time: int = None,
    ):
        # consortium_id
        self.consortium_id = consortium_id
        # create_time
        self.create_time = create_time
        # project_description
        self.project_description = project_description
        # project_id
        self.project_id = project_id
        # project_name
        self.project_name = project_name
        # project_version
        self.project_version = project_version
        # update_time
        self.update_time = update_time

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.consortium_id is not None:
            result['consortium_id'] = self.consortium_id
        if self.create_time is not None:
            result['create_time'] = self.create_time
        if self.project_description is not None:
            result['project_description'] = self.project_description
        if self.project_id is not None:
            result['project_id'] = self.project_id
        if self.project_name is not None:
            result['project_name'] = self.project_name
        if self.project_version is not None:
            result['project_version'] = self.project_version
        if self.update_time is not None:
            result['update_time'] = self.update_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('consortium_id') is not None:
            self.consortium_id = m.get('consortium_id')
        if m.get('create_time') is not None:
            self.create_time = m.get('create_time')
        if m.get('project_description') is not None:
            self.project_description = m.get('project_description')
        if m.get('project_id') is not None:
            self.project_id = m.get('project_id')
        if m.get('project_name') is not None:
            self.project_name = m.get('project_name')
        if m.get('project_version') is not None:
            self.project_version = m.get('project_version')
        if m.get('update_time') is not None:
            self.update_time = m.get('update_time')
        return self


class ALiYunNotaryBlockchain(TeaModel):
    def __init__(
        self,
        name: str = None,
        bizid: str = None,
        chain_type: str = None,
        node_num: int = None,
        member_status: str = None,
        block_height: int = None,
        transactions: int = None,
        network: str = None,
        version: str = None,
    ):
        # name
        self.name = name
        # bizid
        self.bizid = bizid
        # chain_type
        self.chain_type = chain_type
        # node_num
        self.node_num = node_num
        # member_status
        self.member_status = member_status
        # block_height
        self.block_height = block_height
        # transactions
        self.transactions = transactions
        # network
        self.network = network
        # version
        self.version = version

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.name is not None:
            result['name'] = self.name
        if self.bizid is not None:
            result['bizid'] = self.bizid
        if self.chain_type is not None:
            result['chain_type'] = self.chain_type
        if self.node_num is not None:
            result['node_num'] = self.node_num
        if self.member_status is not None:
            result['member_status'] = self.member_status
        if self.block_height is not None:
            result['block_height'] = self.block_height
        if self.transactions is not None:
            result['transactions'] = self.transactions
        if self.network is not None:
            result['network'] = self.network
        if self.version is not None:
            result['version'] = self.version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('bizid') is not None:
            self.bizid = m.get('bizid')
        if m.get('chain_type') is not None:
            self.chain_type = m.get('chain_type')
        if m.get('node_num') is not None:
            self.node_num = m.get('node_num')
        if m.get('member_status') is not None:
            self.member_status = m.get('member_status')
        if m.get('block_height') is not None:
            self.block_height = m.get('block_height')
        if m.get('transactions') is not None:
            self.transactions = m.get('transactions')
        if m.get('network') is not None:
            self.network = m.get('network')
        if m.get('version') is not None:
            self.version = m.get('version')
        return self


class KeyValuePair(TeaModel):
    def __init__(
        self,
        key: str = None,
        value: str = None,
    ):
        # 键名
        self.key = key
        # 值
        self.value = value

    def validate(self):
        self.validate_required(self.key, 'key')
        self.validate_required(self.value, 'value')

    def to_map(self):
        result = dict()
        if self.key is not None:
            result['key'] = self.key
        if self.value is not None:
            result['value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('key') is not None:
            self.key = m.get('key')
        if m.get('value') is not None:
            self.value = m.get('value')
        return self


class ALiYunChainMiniAppAuthorizedUser(TeaModel):
    def __init__(
        self,
        phone: str = None,
        gmt_authorized: str = None,
    ):
        # phone
        self.phone = phone
        # gmt_authorized
        self.gmt_authorized = gmt_authorized

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.phone is not None:
            result['phone'] = self.phone
        if self.gmt_authorized is not None:
            result['gmt_authorized'] = self.gmt_authorized
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('phone') is not None:
            self.phone = m.get('phone')
        if m.get('gmt_authorized') is not None:
            self.gmt_authorized = m.get('gmt_authorized')
        return self


class ALiYunChainNodeInfo(TeaModel):
    def __init__(
        self,
        block_height: int = None,
        node_name: str = None,
        status: bool = None,
        version: str = None,
    ):
        # block_height
        self.block_height = block_height
        # node_name
        self.node_name = node_name
        # status
        self.status = status
        # version
        self.version = version

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.block_height is not None:
            result['block_height'] = self.block_height
        if self.node_name is not None:
            result['node_name'] = self.node_name
        if self.status is not None:
            result['status'] = self.status
        if self.version is not None:
            result['version'] = self.version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('block_height') is not None:
            self.block_height = m.get('block_height')
        if m.get('node_name') is not None:
            self.node_name = m.get('node_name')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('version') is not None:
            self.version = m.get('version')
        return self


class AccountMappingInfo(TeaModel):
    def __init__(
        self,
        bc_account: str = None,
        binding_status: int = None,
        status: int = None,
        uid: str = None,
    ):
        # 链上账户id
        self.bc_account = bc_account
        # 账户绑定状态，1为未绑定，2为绑定成功
        self.binding_status = binding_status
        # 1是激活状态，2是冻结状态
        self.status = status
        # 账户唯一标示
        self.uid = uid

    def validate(self):
        self.validate_required(self.bc_account, 'bc_account')
        self.validate_required(self.binding_status, 'binding_status')
        self.validate_required(self.status, 'status')
        self.validate_required(self.uid, 'uid')

    def to_map(self):
        result = dict()
        if self.bc_account is not None:
            result['bc_account'] = self.bc_account
        if self.binding_status is not None:
            result['binding_status'] = self.binding_status
        if self.status is not None:
            result['status'] = self.status
        if self.uid is not None:
            result['uid'] = self.uid
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('bc_account') is not None:
            self.bc_account = m.get('bc_account')
        if m.get('binding_status') is not None:
            self.binding_status = m.get('binding_status')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('uid') is not None:
            self.uid = m.get('uid')
        return self


class DidServiceInfo(TeaModel):
    def __init__(
        self,
        end_point: str = None,
        extension_info: str = None,
    ):
        # 服务的end point info
        self.end_point = end_point
        # 扩展字段信息
        self.extension_info = extension_info

    def validate(self):
        self.validate_required(self.end_point, 'end_point')
        self.validate_required(self.extension_info, 'extension_info')

    def to_map(self):
        result = dict()
        if self.end_point is not None:
            result['end_point'] = self.end_point
        if self.extension_info is not None:
            result['extension_info'] = self.extension_info
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('end_point') is not None:
            self.end_point = m.get('end_point')
        if m.get('extension_info') is not None:
            self.extension_info = m.get('extension_info')
        return self


class ALiYunOldContractBlockchain(TeaModel):
    def __init__(
        self,
        name: str = None,
        bizid: str = None,
        chain_type: str = None,
        node_num: int = None,
        member_status: str = None,
        block_height: int = None,
        transactions: int = None,
        network: str = None,
        version: str = None,
    ):
        # name
        self.name = name
        # bizid
        self.bizid = bizid
        # chain_type
        self.chain_type = chain_type
        # node_num
        self.node_num = node_num
        # member_status
        self.member_status = member_status
        # block_height
        self.block_height = block_height
        # transactions
        self.transactions = transactions
        # network
        self.network = network
        # version
        self.version = version

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.name is not None:
            result['name'] = self.name
        if self.bizid is not None:
            result['bizid'] = self.bizid
        if self.chain_type is not None:
            result['chain_type'] = self.chain_type
        if self.node_num is not None:
            result['node_num'] = self.node_num
        if self.member_status is not None:
            result['member_status'] = self.member_status
        if self.block_height is not None:
            result['block_height'] = self.block_height
        if self.transactions is not None:
            result['transactions'] = self.transactions
        if self.network is not None:
            result['network'] = self.network
        if self.version is not None:
            result['version'] = self.version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('bizid') is not None:
            self.bizid = m.get('bizid')
        if m.get('chain_type') is not None:
            self.chain_type = m.get('chain_type')
        if m.get('node_num') is not None:
            self.node_num = m.get('node_num')
        if m.get('member_status') is not None:
            self.member_status = m.get('member_status')
        if m.get('block_height') is not None:
            self.block_height = m.get('block_height')
        if m.get('transactions') is not None:
            self.transactions = m.get('transactions')
        if m.get('network') is not None:
            self.network = m.get('network')
        if m.get('version') is not None:
            self.version = m.get('version')
        return self


class DisServicesInfo(TeaModel):
    def __init__(
        self,
        extesion: str = None,
        id: str = None,
        service_endpoint: str = None,
        type: str = None,
        desc: str = None,
    ):
        # did doc service扩展字段
        self.extesion = extesion
        # did doc service id
        self.id = id
        # 服务endpoint
        self.service_endpoint = service_endpoint
        # service type
        self.type = type
        # EXIST
        # CONFLICT
        # VALID
        # INVALID
        self.desc = desc

    def validate(self):
        self.validate_required(self.id, 'id')
        self.validate_required(self.service_endpoint, 'service_endpoint')
        self.validate_required(self.type, 'type')

    def to_map(self):
        result = dict()
        if self.extesion is not None:
            result['extesion'] = self.extesion
        if self.id is not None:
            result['id'] = self.id
        if self.service_endpoint is not None:
            result['service_endpoint'] = self.service_endpoint
        if self.type is not None:
            result['type'] = self.type
        if self.desc is not None:
            result['desc'] = self.desc
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('extesion') is not None:
            self.extesion = m.get('extesion')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('service_endpoint') is not None:
            self.service_endpoint = m.get('service_endpoint')
        if m.get('type') is not None:
            self.type = m.get('type')
        if m.get('desc') is not None:
            self.desc = m.get('desc')
        return self


class BlockchainBrowserTransaction(TeaModel):
    def __init__(
        self,
        bizid: str = None,
        block_hash: str = None,
        category: int = None,
        create_time: int = None,
        from_: str = None,
        gas_used: int = None,
        hash: str = None,
        height: int = None,
        reference_count: int = None,
        to: str = None,
        transaction_type: str = None,
        block_version: int = None,
        blockchain_name: str = None,
        blockchain_status: bool = None,
        content: str = None,
        hash_status: bool = None,
        type: int = None,
        transaction_contract: BlockchainBrowserTransactionContract = None,
    ):
        # bizid
        self.bizid = bizid
        # block_hash
        self.block_hash = block_hash
        # category
        self.category = category
        # create_time
        self.create_time = create_time
        # from
        self.from_ = from_
        # gas_used
        self.gas_used = gas_used
        # hash
        self.hash = hash
        # height
        self.height = height
        # reference_count
        self.reference_count = reference_count
        # to
        self.to = to
        # transaction_type
        self.transaction_type = transaction_type
        # block_version
        self.block_version = block_version
        # blockchain_name
        self.blockchain_name = blockchain_name
        # blockchain_status
        self.blockchain_status = blockchain_status
        # content
        self.content = content
        # hash_status
        self.hash_status = hash_status
        # type
        self.type = type
        # transaction_contract
        self.transaction_contract = transaction_contract

    def validate(self):
        self.validate_required(self.bizid, 'bizid')
        self.validate_required(self.block_hash, 'block_hash')
        self.validate_required(self.category, 'category')
        self.validate_required(self.create_time, 'create_time')
        self.validate_required(self.from_, 'from_')
        self.validate_required(self.gas_used, 'gas_used')
        self.validate_required(self.hash, 'hash')
        self.validate_required(self.height, 'height')
        self.validate_required(self.reference_count, 'reference_count')
        self.validate_required(self.to, 'to')
        self.validate_required(self.transaction_type, 'transaction_type')
        self.validate_required(self.block_version, 'block_version')
        self.validate_required(self.blockchain_name, 'blockchain_name')
        self.validate_required(self.blockchain_status, 'blockchain_status')
        self.validate_required(self.content, 'content')
        self.validate_required(self.hash_status, 'hash_status')
        self.validate_required(self.type, 'type')
        self.validate_required(self.transaction_contract, 'transaction_contract')
        if self.transaction_contract:
            self.transaction_contract.validate()

    def to_map(self):
        result = dict()
        if self.bizid is not None:
            result['bizid'] = self.bizid
        if self.block_hash is not None:
            result['block_hash'] = self.block_hash
        if self.category is not None:
            result['category'] = self.category
        if self.create_time is not None:
            result['create_time'] = self.create_time
        if self.from_ is not None:
            result['from'] = self.from_
        if self.gas_used is not None:
            result['gas_used'] = self.gas_used
        if self.hash is not None:
            result['hash'] = self.hash
        if self.height is not None:
            result['height'] = self.height
        if self.reference_count is not None:
            result['reference_count'] = self.reference_count
        if self.to is not None:
            result['to'] = self.to
        if self.transaction_type is not None:
            result['transaction_type'] = self.transaction_type
        if self.block_version is not None:
            result['block_version'] = self.block_version
        if self.blockchain_name is not None:
            result['blockchain_name'] = self.blockchain_name
        if self.blockchain_status is not None:
            result['blockchain_status'] = self.blockchain_status
        if self.content is not None:
            result['content'] = self.content
        if self.hash_status is not None:
            result['hash_status'] = self.hash_status
        if self.type is not None:
            result['type'] = self.type
        if self.transaction_contract is not None:
            result['transaction_contract'] = self.transaction_contract.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('bizid') is not None:
            self.bizid = m.get('bizid')
        if m.get('block_hash') is not None:
            self.block_hash = m.get('block_hash')
        if m.get('category') is not None:
            self.category = m.get('category')
        if m.get('create_time') is not None:
            self.create_time = m.get('create_time')
        if m.get('from') is not None:
            self.from_ = m.get('from')
        if m.get('gas_used') is not None:
            self.gas_used = m.get('gas_used')
        if m.get('hash') is not None:
            self.hash = m.get('hash')
        if m.get('height') is not None:
            self.height = m.get('height')
        if m.get('reference_count') is not None:
            self.reference_count = m.get('reference_count')
        if m.get('to') is not None:
            self.to = m.get('to')
        if m.get('transaction_type') is not None:
            self.transaction_type = m.get('transaction_type')
        if m.get('block_version') is not None:
            self.block_version = m.get('block_version')
        if m.get('blockchain_name') is not None:
            self.blockchain_name = m.get('blockchain_name')
        if m.get('blockchain_status') is not None:
            self.blockchain_status = m.get('blockchain_status')
        if m.get('content') is not None:
            self.content = m.get('content')
        if m.get('hash_status') is not None:
            self.hash_status = m.get('hash_status')
        if m.get('type') is not None:
            self.type = m.get('type')
        if m.get('transaction_contract') is not None:
            temp_model = BlockchainBrowserTransactionContract()
            self.transaction_contract = temp_model.from_map(m['transaction_contract'])
        return self


class ALiYunTransactionSummary(TeaModel):
    def __init__(
        self,
        alias: str = None,
        hash: str = None,
        trans_type_v6: str = None,
        trans_type_v10: str = None,
        category: int = None,
        height: int = None,
        block_hash: str = None,
        create_time: int = None,
        reference_count: int = None,
        from_: str = None,
        to: str = None,
        gas_used: int = None,
    ):
        # alias
        self.alias = alias
        # hash
        self.hash = hash
        # trans_type_v6
        self.trans_type_v6 = trans_type_v6
        # trans_type_v10
        self.trans_type_v10 = trans_type_v10
        # category
        self.category = category
        # height
        self.height = height
        # block_hash
        self.block_hash = block_hash
        # create_time
        self.create_time = create_time
        # reference_count
        self.reference_count = reference_count
        # from
        self.from_ = from_
        # to
        self.to = to
        # gas_used
        self.gas_used = gas_used

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.alias is not None:
            result['alias'] = self.alias
        if self.hash is not None:
            result['hash'] = self.hash
        if self.trans_type_v6 is not None:
            result['trans_type_v6'] = self.trans_type_v6
        if self.trans_type_v10 is not None:
            result['trans_type_v10'] = self.trans_type_v10
        if self.category is not None:
            result['category'] = self.category
        if self.height is not None:
            result['height'] = self.height
        if self.block_hash is not None:
            result['block_hash'] = self.block_hash
        if self.create_time is not None:
            result['create_time'] = self.create_time
        if self.reference_count is not None:
            result['reference_count'] = self.reference_count
        if self.from_ is not None:
            result['from'] = self.from_
        if self.to is not None:
            result['to'] = self.to
        if self.gas_used is not None:
            result['gas_used'] = self.gas_used
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('alias') is not None:
            self.alias = m.get('alias')
        if m.get('hash') is not None:
            self.hash = m.get('hash')
        if m.get('trans_type_v6') is not None:
            self.trans_type_v6 = m.get('trans_type_v6')
        if m.get('trans_type_v10') is not None:
            self.trans_type_v10 = m.get('trans_type_v10')
        if m.get('category') is not None:
            self.category = m.get('category')
        if m.get('height') is not None:
            self.height = m.get('height')
        if m.get('block_hash') is not None:
            self.block_hash = m.get('block_hash')
        if m.get('create_time') is not None:
            self.create_time = m.get('create_time')
        if m.get('reference_count') is not None:
            self.reference_count = m.get('reference_count')
        if m.get('from') is not None:
            self.from_ = m.get('from')
        if m.get('to') is not None:
            self.to = m.get('to')
        if m.get('gas_used') is not None:
            self.gas_used = m.get('gas_used')
        return self


class ALiYunCertificateApplication(TeaModel):
    def __init__(
        self,
        ant_chain_id: str = None,
        username: str = None,
        createtime: int = None,
        updatetime: int = None,
        bid: str = None,
        status: str = None,
    ):
        # ant_chain_id
        self.ant_chain_id = ant_chain_id
        # username
        self.username = username
        # createtime
        self.createtime = createtime
        # updatetime
        self.updatetime = updatetime
        # bid
        self.bid = bid
        # status
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.ant_chain_id is not None:
            result['ant_chain_id'] = self.ant_chain_id
        if self.username is not None:
            result['username'] = self.username
        if self.createtime is not None:
            result['createtime'] = self.createtime
        if self.updatetime is not None:
            result['updatetime'] = self.updatetime
        if self.bid is not None:
            result['bid'] = self.bid
        if self.status is not None:
            result['status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ant_chain_id') is not None:
            self.ant_chain_id = m.get('ant_chain_id')
        if m.get('username') is not None:
            self.username = m.get('username')
        if m.get('createtime') is not None:
            self.createtime = m.get('createtime')
        if m.get('updatetime') is not None:
            self.updatetime = m.get('updatetime')
        if m.get('bid') is not None:
            self.bid = m.get('bid')
        if m.get('status') is not None:
            self.status = m.get('status')
        return self


class ALiYunContractBlockchain(TeaModel):
    def __init__(
        self,
        name: str = None,
        bizid: str = None,
        chain_type: str = None,
        node_num: int = None,
        member_status: str = None,
        block_height: int = None,
        transactions: int = None,
        network: str = None,
        version: str = None,
    ):
        # name
        self.name = name
        # bizid
        self.bizid = bizid
        # chain_type
        self.chain_type = chain_type
        # node_num
        self.node_num = node_num
        # member_status
        self.member_status = member_status
        # block_height
        self.block_height = block_height
        # transactions
        self.transactions = transactions
        # network
        self.network = network
        # version
        self.version = version

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.name is not None:
            result['name'] = self.name
        if self.bizid is not None:
            result['bizid'] = self.bizid
        if self.chain_type is not None:
            result['chain_type'] = self.chain_type
        if self.node_num is not None:
            result['node_num'] = self.node_num
        if self.member_status is not None:
            result['member_status'] = self.member_status
        if self.block_height is not None:
            result['block_height'] = self.block_height
        if self.transactions is not None:
            result['transactions'] = self.transactions
        if self.network is not None:
            result['network'] = self.network
        if self.version is not None:
            result['version'] = self.version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('bizid') is not None:
            self.bizid = m.get('bizid')
        if m.get('chain_type') is not None:
            self.chain_type = m.get('chain_type')
        if m.get('node_num') is not None:
            self.node_num = m.get('node_num')
        if m.get('member_status') is not None:
            self.member_status = m.get('member_status')
        if m.get('block_height') is not None:
            self.block_height = m.get('block_height')
        if m.get('transactions') is not None:
            self.transactions = m.get('transactions')
        if m.get('network') is not None:
            self.network = m.get('network')
        if m.get('version') is not None:
            self.version = m.get('version')
        return self


class ALiYunTransaction(TeaModel):
    def __init__(
        self,
        tx_type: str = None,
        data: str = None,
        hash: str = None,
        from_: str = None,
        to: str = None,
        timestamp: int = None,
        period: int = None,
        nonce: str = None,
        gas: str = None,
        value: str = None,
        signatures: List[str] = None,
        extentions: List[str] = None,
    ):
        # tx_type
        self.tx_type = tx_type
        # data
        self.data = data
        # hash
        self.hash = hash
        # from
        self.from_ = from_
        # to
        self.to = to
        # timestamp
        self.timestamp = timestamp
        # period
        self.period = period
        # nonce
        self.nonce = nonce
        # gas
        self.gas = gas
        # value
        self.value = value
        # signatures
        self.signatures = signatures
        # extentions
        self.extentions = extentions

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.tx_type is not None:
            result['tx_type'] = self.tx_type
        if self.data is not None:
            result['data'] = self.data
        if self.hash is not None:
            result['hash'] = self.hash
        if self.from_ is not None:
            result['from'] = self.from_
        if self.to is not None:
            result['to'] = self.to
        if self.timestamp is not None:
            result['timestamp'] = self.timestamp
        if self.period is not None:
            result['period'] = self.period
        if self.nonce is not None:
            result['nonce'] = self.nonce
        if self.gas is not None:
            result['gas'] = self.gas
        if self.value is not None:
            result['value'] = self.value
        if self.signatures is not None:
            result['signatures'] = self.signatures
        if self.extentions is not None:
            result['extentions'] = self.extentions
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('tx_type') is not None:
            self.tx_type = m.get('tx_type')
        if m.get('data') is not None:
            self.data = m.get('data')
        if m.get('hash') is not None:
            self.hash = m.get('hash')
        if m.get('from') is not None:
            self.from_ = m.get('from')
        if m.get('to') is not None:
            self.to = m.get('to')
        if m.get('timestamp') is not None:
            self.timestamp = m.get('timestamp')
        if m.get('period') is not None:
            self.period = m.get('period')
        if m.get('nonce') is not None:
            self.nonce = m.get('nonce')
        if m.get('gas') is not None:
            self.gas = m.get('gas')
        if m.get('value') is not None:
            self.value = m.get('value')
        if m.get('signatures') is not None:
            self.signatures = m.get('signatures')
        if m.get('extentions') is not None:
            self.extentions = m.get('extentions')
        return self


class DidDocServicesInfo(TeaModel):
    def __init__(
        self,
        extension: str = None,
        id: str = None,
        service_endpoint: str = None,
        type: str = None,
    ):
        # 服务的扩展字段
        self.extension = extension
        # 服务ID，必须保证该服务ID在did doc中是唯一的。对于保留类型服务：
        # DidAuthService， 有且只能有一个，并且id必须为didauth-1；
        # VerifiableClaimRepository， 有且只有一个，并且id必须为vcrepository-1;
        self.id = id
        # 服务的可访问地址
        self.service_endpoint = service_endpoint
        # 服务类型，必须是已经注册的服务类型，或者是默认保留的服务类型
        self.type = type

    def validate(self):
        self.validate_required(self.id, 'id')
        self.validate_required(self.service_endpoint, 'service_endpoint')
        self.validate_required(self.type, 'type')

    def to_map(self):
        result = dict()
        if self.extension is not None:
            result['extension'] = self.extension
        if self.id is not None:
            result['id'] = self.id
        if self.service_endpoint is not None:
            result['service_endpoint'] = self.service_endpoint
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('extension') is not None:
            self.extension = m.get('extension')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('service_endpoint') is not None:
            self.service_endpoint = m.get('service_endpoint')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class ContractIdeConfig(TeaModel):
    def __init__(
        self,
        account_name: str = None,
        bizid: str = None,
        chain_name: str = None,
        host: str = None,
        is_wasm: bool = None,
        port: str = None,
        private_key: str = None,
        rsa_public_key: str = None,
        version: str = None,
    ):
        # 合约链的一个已创建的测试账户
        self.account_name = account_name
        # 区块链唯一标识
        self.bizid = bizid
        # 合约链的名字
        self.chain_name = chain_name
        # 目标合约链的host地址
        self.host = host
        # 说明是否开启wasm合约功能
        self.is_wasm = is_wasm
        # 目标合约链服务公开的端口号
        self.port = port
        # 合约链已创建的测试账户的密钥
        self.private_key = private_key
        # 如果是TEE硬件隐私合约链，会包含此字段内容
        self.rsa_public_key = rsa_public_key
        # 合约链的版本说明
        self.version = version

    def validate(self):
        self.validate_required(self.account_name, 'account_name')
        self.validate_required(self.bizid, 'bizid')
        self.validate_required(self.chain_name, 'chain_name')
        self.validate_required(self.host, 'host')
        self.validate_required(self.port, 'port')
        self.validate_required(self.private_key, 'private_key')

    def to_map(self):
        result = dict()
        if self.account_name is not None:
            result['account_name'] = self.account_name
        if self.bizid is not None:
            result['bizid'] = self.bizid
        if self.chain_name is not None:
            result['chain_name'] = self.chain_name
        if self.host is not None:
            result['host'] = self.host
        if self.is_wasm is not None:
            result['is_wasm'] = self.is_wasm
        if self.port is not None:
            result['port'] = self.port
        if self.private_key is not None:
            result['private_key'] = self.private_key
        if self.rsa_public_key is not None:
            result['rsa_public_key'] = self.rsa_public_key
        if self.version is not None:
            result['version'] = self.version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('account_name') is not None:
            self.account_name = m.get('account_name')
        if m.get('bizid') is not None:
            self.bizid = m.get('bizid')
        if m.get('chain_name') is not None:
            self.chain_name = m.get('chain_name')
        if m.get('host') is not None:
            self.host = m.get('host')
        if m.get('is_wasm') is not None:
            self.is_wasm = m.get('is_wasm')
        if m.get('port') is not None:
            self.port = m.get('port')
        if m.get('private_key') is not None:
            self.private_key = m.get('private_key')
        if m.get('rsa_public_key') is not None:
            self.rsa_public_key = m.get('rsa_public_key')
        if m.get('version') is not None:
            self.version = m.get('version')
        return self


class VcTransmitTargetStruct(TeaModel):
    def __init__(
        self,
        public_key: str = None,
        vc_channel: str = None,
        verifier_did: str = None,
    ):
        # 目标did的公钥
        self.public_key = public_key
        # 传输vc使用的区块链id
        self.vc_channel = vc_channel
        # 验证者did
        self.verifier_did = verifier_did

    def validate(self):
        if self.vc_channel is not None:
            self.validate_max_length(self.vc_channel, 'vc_channel', 32)
        self.validate_required(self.verifier_did, 'verifier_did')

    def to_map(self):
        result = dict()
        if self.public_key is not None:
            result['public_key'] = self.public_key
        if self.vc_channel is not None:
            result['vc_channel'] = self.vc_channel
        if self.verifier_did is not None:
            result['verifier_did'] = self.verifier_did
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('public_key') is not None:
            self.public_key = m.get('public_key')
        if m.get('vc_channel') is not None:
            self.vc_channel = m.get('vc_channel')
        if m.get('verifier_did') is not None:
            self.verifier_did = m.get('verifier_did')
        return self


class ALiYunAntConsortium(TeaModel):
    def __init__(
        self,
        chain_num: int = None,
        member_num: int = None,
        create_time: int = None,
        role: str = None,
        consortium_id: str = None,
        status: str = None,
        consortium_name: str = None,
        consortium_description: str = None,
        is_empty_consortium: bool = None,
    ):
        # 链的数量
        self.chain_num = chain_num
        # 成员数量
        self.member_num = member_num
        # 时间戳
        self.create_time = create_time
        # 角色
        self.role = role
        # 联盟id
        self.consortium_id = consortium_id
        # 状态值
        self.status = status
        # 联盟名称
        self.consortium_name = consortium_name
        # 联盟描述
        self.consortium_description = consortium_description
        # 是否为空联盟
        self.is_empty_consortium = is_empty_consortium

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.chain_num is not None:
            result['chain_num'] = self.chain_num
        if self.member_num is not None:
            result['member_num'] = self.member_num
        if self.create_time is not None:
            result['create_time'] = self.create_time
        if self.role is not None:
            result['role'] = self.role
        if self.consortium_id is not None:
            result['consortium_id'] = self.consortium_id
        if self.status is not None:
            result['status'] = self.status
        if self.consortium_name is not None:
            result['consortium_name'] = self.consortium_name
        if self.consortium_description is not None:
            result['consortium_description'] = self.consortium_description
        if self.is_empty_consortium is not None:
            result['is_empty_consortium'] = self.is_empty_consortium
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('chain_num') is not None:
            self.chain_num = m.get('chain_num')
        if m.get('member_num') is not None:
            self.member_num = m.get('member_num')
        if m.get('create_time') is not None:
            self.create_time = m.get('create_time')
        if m.get('role') is not None:
            self.role = m.get('role')
        if m.get('consortium_id') is not None:
            self.consortium_id = m.get('consortium_id')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('consortium_name') is not None:
            self.consortium_name = m.get('consortium_name')
        if m.get('consortium_description') is not None:
            self.consortium_description = m.get('consortium_description')
        if m.get('is_empty_consortium') is not None:
            self.is_empty_consortium = m.get('is_empty_consortium')
        return self


class ALiYunPagination(TeaModel):
    def __init__(
        self,
        page_size: int = None,
        page_number: int = None,
        total_count: int = None,
    ):
        # 分页大小
        self.page_size = page_size
        # 分页编号
        self.page_number = page_number
        # 总数大小
        self.total_count = total_count

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.page_number is not None:
            result['page_number'] = self.page_number
        if self.total_count is not None:
            result['total_count'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('page_number') is not None:
            self.page_number = m.get('page_number')
        if m.get('total_count') is not None:
            self.total_count = m.get('total_count')
        return self


class EPTradeInfo(TeaModel):
    def __init__(
        self,
        ep_code: str = None,
        tx_code: str = None,
        tx_from: str = None,
        tx_time: int = None,
        tx_to: str = None,
        tx_value: int = None,
    ):
        # 版通代码
        self.ep_code = ep_code
        # 版通交易号
        self.tx_code = tx_code
        # 卖方账户
        self.tx_from = tx_from
        # 交易时间戳
        self.tx_time = tx_time
        # 买方账户
        self.tx_to = tx_to
        # 交易数量
        self.tx_value = tx_value

    def validate(self):
        self.validate_required(self.ep_code, 'ep_code')
        self.validate_required(self.tx_code, 'tx_code')
        self.validate_required(self.tx_from, 'tx_from')
        self.validate_required(self.tx_time, 'tx_time')
        self.validate_required(self.tx_to, 'tx_to')
        self.validate_required(self.tx_value, 'tx_value')

    def to_map(self):
        result = dict()
        if self.ep_code is not None:
            result['ep_code'] = self.ep_code
        if self.tx_code is not None:
            result['tx_code'] = self.tx_code
        if self.tx_from is not None:
            result['tx_from'] = self.tx_from
        if self.tx_time is not None:
            result['tx_time'] = self.tx_time
        if self.tx_to is not None:
            result['tx_to'] = self.tx_to
        if self.tx_value is not None:
            result['tx_value'] = self.tx_value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ep_code') is not None:
            self.ep_code = m.get('ep_code')
        if m.get('tx_code') is not None:
            self.tx_code = m.get('tx_code')
        if m.get('tx_from') is not None:
            self.tx_from = m.get('tx_from')
        if m.get('tx_time') is not None:
            self.tx_time = m.get('tx_time')
        if m.get('tx_to') is not None:
            self.tx_to = m.get('tx_to')
        if m.get('tx_value') is not None:
            self.tx_value = m.get('tx_value')
        return self


class ALiYunDeleteResource(TeaModel):
    def __init__(
        self,
        data: bool = None,
        success: bool = None,
    ):
        # data
        self.data = data
        # success
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.data is not None:
            result['data'] = self.data
        if self.success is not None:
            result['success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            self.data = m.get('data')
        if m.get('success') is not None:
            self.success = m.get('success')
        return self


class TappInfo(TeaModel):
    def __init__(
        self,
        taap_id: str = None,
        tapp_version: int = None,
    ):
        # C3S可信计算TAPP应用标识
        self.taap_id = taap_id
        # C3S可信计算TAPP版本
        self.tapp_version = tapp_version

    def validate(self):
        self.validate_required(self.taap_id, 'taap_id')
        self.validate_required(self.tapp_version, 'tapp_version')

    def to_map(self):
        result = dict()
        if self.taap_id is not None:
            result['taap_id'] = self.taap_id
        if self.tapp_version is not None:
            result['tapp_version'] = self.tapp_version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('taap_id') is not None:
            self.taap_id = m.get('taap_id')
        if m.get('tapp_version') is not None:
            self.tapp_version = m.get('tapp_version')
        return self


class ALiYunChainRegion(TeaModel):
    def __init__(
        self,
        region_id: str = None,
        region_name: str = None,
    ):
        # region_id
        self.region_id = region_id
        # region_name
        self.region_name = region_name

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.region_id is not None:
            result['region_id'] = self.region_id
        if self.region_name is not None:
            result['region_name'] = self.region_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('region_id') is not None:
            self.region_id = m.get('region_id')
        if m.get('region_name') is not None:
            self.region_name = m.get('region_name')
        return self


class ALiYunChainMiniAppTransaction(TeaModel):
    def __init__(
        self,
        authorized: bool = None,
        transaction_response: str = None,
        transaction_receipt: str = None,
    ):
        # authorized
        self.authorized = authorized
        # transaction_response
        self.transaction_response = transaction_response
        # transaction_receipt
        self.transaction_receipt = transaction_receipt

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.authorized is not None:
            result['authorized'] = self.authorized
        if self.transaction_response is not None:
            result['transaction_response'] = self.transaction_response
        if self.transaction_receipt is not None:
            result['transaction_receipt'] = self.transaction_receipt
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('authorized') is not None:
            self.authorized = m.get('authorized')
        if m.get('transaction_response') is not None:
            self.transaction_response = m.get('transaction_response')
        if m.get('transaction_receipt') is not None:
            self.transaction_receipt = m.get('transaction_receipt')
        return self


class UpdateDidAuthPayload(TeaModel):
    def __init__(
        self,
        controller: str = None,
        previous_auth_key_expire: str = None,
        previous_version: int = None,
        public_key_id: str = None,
        public_key_type: str = None,
        value: str = None,
    ):
        # 新公钥的实际控制者
        self.controller = controller
        # 旧Auth Key的过期时间
        self.previous_auth_key_expire = previous_auth_key_expire
        # 更新Did doc的版本
        self.previous_version = previous_version
        # 新DID Auth key的public key id
        self.public_key_id = public_key_id
        # 密钥对生成算法
        self.public_key_type = public_key_type
        # 公钥的实际值
        self.value = value

    def validate(self):
        self.validate_required(self.controller, 'controller')
        self.validate_required(self.previous_auth_key_expire, 'previous_auth_key_expire')
        self.validate_required(self.previous_version, 'previous_version')
        self.validate_required(self.public_key_id, 'public_key_id')
        self.validate_required(self.public_key_type, 'public_key_type')
        self.validate_required(self.value, 'value')

    def to_map(self):
        result = dict()
        if self.controller is not None:
            result['controller'] = self.controller
        if self.previous_auth_key_expire is not None:
            result['previous_auth_key_expire'] = self.previous_auth_key_expire
        if self.previous_version is not None:
            result['previous_version'] = self.previous_version
        if self.public_key_id is not None:
            result['public_key_id'] = self.public_key_id
        if self.public_key_type is not None:
            result['public_key_type'] = self.public_key_type
        if self.value is not None:
            result['value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('controller') is not None:
            self.controller = m.get('controller')
        if m.get('previous_auth_key_expire') is not None:
            self.previous_auth_key_expire = m.get('previous_auth_key_expire')
        if m.get('previous_version') is not None:
            self.previous_version = m.get('previous_version')
        if m.get('public_key_id') is not None:
            self.public_key_id = m.get('public_key_id')
        if m.get('public_key_type') is not None:
            self.public_key_type = m.get('public_key_type')
        if m.get('value') is not None:
            self.value = m.get('value')
        return self


class CreditTransferStatementInfo(TeaModel):
    def __init__(
        self,
        credit_limit: str = None,
        expire_date: str = None,
        from_did: str = None,
        issue_date: str = None,
        issue_id: str = None,
        state_type: str = None,
        to_did: str = None,
    ):
        # 信用凭证额度
        self.credit_limit = credit_limit
        # 信用凭证到期时间
        self.expire_date = expire_date
        # 凭证来源方did
        self.from_did = from_did
        # 信用凭证发起时间
        self.issue_date = issue_date
        # 信用流转凭证
        self.issue_id = issue_id
        # 流水类型
        self.state_type = state_type
        # 凭证流转方did
        self.to_did = to_did

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.credit_limit is not None:
            result['credit_limit'] = self.credit_limit
        if self.expire_date is not None:
            result['expire_date'] = self.expire_date
        if self.from_did is not None:
            result['from_did'] = self.from_did
        if self.issue_date is not None:
            result['issue_date'] = self.issue_date
        if self.issue_id is not None:
            result['issue_id'] = self.issue_id
        if self.state_type is not None:
            result['state_type'] = self.state_type
        if self.to_did is not None:
            result['to_did'] = self.to_did
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('credit_limit') is not None:
            self.credit_limit = m.get('credit_limit')
        if m.get('expire_date') is not None:
            self.expire_date = m.get('expire_date')
        if m.get('from_did') is not None:
            self.from_did = m.get('from_did')
        if m.get('issue_date') is not None:
            self.issue_date = m.get('issue_date')
        if m.get('issue_id') is not None:
            self.issue_id = m.get('issue_id')
        if m.get('state_type') is not None:
            self.state_type = m.get('state_type')
        if m.get('to_did') is not None:
            self.to_did = m.get('to_did')
        return self


class ALiYunChainAccount(TeaModel):
    def __init__(
        self,
        account_private_key: str = None,
        account_public_key: str = None,
        account_recover_private_key: str = None,
        account_recover_public_key: str = None,
        ant_chain_id: str = None,
        account: str = None,
    ):
        # account_private_key
        self.account_private_key = account_private_key
        # account_public_key
        self.account_public_key = account_public_key
        # account_recover_private_key
        self.account_recover_private_key = account_recover_private_key
        # account_recover_public_key
        self.account_recover_public_key = account_recover_public_key
        # ant_chain_id
        self.ant_chain_id = ant_chain_id
        # account
        self.account = account

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.account_private_key is not None:
            result['account_private_key'] = self.account_private_key
        if self.account_public_key is not None:
            result['account_public_key'] = self.account_public_key
        if self.account_recover_private_key is not None:
            result['account_recover_private_key'] = self.account_recover_private_key
        if self.account_recover_public_key is not None:
            result['account_recover_public_key'] = self.account_recover_public_key
        if self.ant_chain_id is not None:
            result['ant_chain_id'] = self.ant_chain_id
        if self.account is not None:
            result['account'] = self.account
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('account_private_key') is not None:
            self.account_private_key = m.get('account_private_key')
        if m.get('account_public_key') is not None:
            self.account_public_key = m.get('account_public_key')
        if m.get('account_recover_private_key') is not None:
            self.account_recover_private_key = m.get('account_recover_private_key')
        if m.get('account_recover_public_key') is not None:
            self.account_recover_public_key = m.get('account_recover_public_key')
        if m.get('ant_chain_id') is not None:
            self.ant_chain_id = m.get('ant_chain_id')
        if m.get('account') is not None:
            self.account = m.get('account')
        return self


class Identity(TeaModel):
    def __init__(
        self,
        agent: str = None,
        agent_id: str = None,
        cert_name: str = None,
        cert_no: str = None,
        cert_type: str = None,
        legal_person: str = None,
        legal_person_id: str = None,
        mobile_no: str = None,
        properties: str = None,
        user_type: str = None,
    ):
        # 经办人姓名，企业认证必选
        self.agent = agent
        # 经办人身份证
        self.agent_id = agent_id
        # 用户名称
        self.cert_name = cert_name
        # 证件号
        self.cert_no = cert_no
        # 证件类型，个人只支持身份证IDENTITY_CARD，企业支持UNIFIED_SOCIAL_CREDIT_CODE（统一社会信用代码）和ENTERPRISE_REGISTERED_NUMBER（企业工商注册号
        self.cert_type = cert_type
        # 法人姓名，企业认证必选
        self.legal_person = legal_person
        # 法人身份证,  企业认证必选
        self.legal_person_id = legal_person_id
        # 用户手机号码
        self.mobile_no = mobile_no
        # 扩展属性
        self.properties = properties
        # 用户类型，PERSON或者ENTERPRISE
        self.user_type = user_type

    def validate(self):
        self.validate_required(self.cert_name, 'cert_name')
        self.validate_required(self.cert_no, 'cert_no')
        self.validate_required(self.cert_type, 'cert_type')
        self.validate_required(self.user_type, 'user_type')

    def to_map(self):
        result = dict()
        if self.agent is not None:
            result['agent'] = self.agent
        if self.agent_id is not None:
            result['agent_id'] = self.agent_id
        if self.cert_name is not None:
            result['cert_name'] = self.cert_name
        if self.cert_no is not None:
            result['cert_no'] = self.cert_no
        if self.cert_type is not None:
            result['cert_type'] = self.cert_type
        if self.legal_person is not None:
            result['legal_person'] = self.legal_person
        if self.legal_person_id is not None:
            result['legal_person_id'] = self.legal_person_id
        if self.mobile_no is not None:
            result['mobile_no'] = self.mobile_no
        if self.properties is not None:
            result['properties'] = self.properties
        if self.user_type is not None:
            result['user_type'] = self.user_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('agent') is not None:
            self.agent = m.get('agent')
        if m.get('agent_id') is not None:
            self.agent_id = m.get('agent_id')
        if m.get('cert_name') is not None:
            self.cert_name = m.get('cert_name')
        if m.get('cert_no') is not None:
            self.cert_no = m.get('cert_no')
        if m.get('cert_type') is not None:
            self.cert_type = m.get('cert_type')
        if m.get('legal_person') is not None:
            self.legal_person = m.get('legal_person')
        if m.get('legal_person_id') is not None:
            self.legal_person_id = m.get('legal_person_id')
        if m.get('mobile_no') is not None:
            self.mobile_no = m.get('mobile_no')
        if m.get('properties') is not None:
            self.properties = m.get('properties')
        if m.get('user_type') is not None:
            self.user_type = m.get('user_type')
        return self


class ALiYunChainRest(TeaModel):
    def __init__(
        self,
        access_id: str = None,
        create_time: int = None,
        rest: str = None,
        update_time: int = None,
    ):
        # access_id
        self.access_id = access_id
        # create_time
        self.create_time = create_time
        # rest
        self.rest = rest
        # update_time
        self.update_time = update_time

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.access_id is not None:
            result['access_id'] = self.access_id
        if self.create_time is not None:
            result['create_time'] = self.create_time
        if self.rest is not None:
            result['rest'] = self.rest
        if self.update_time is not None:
            result['update_time'] = self.update_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('access_id') is not None:
            self.access_id = m.get('access_id')
        if m.get('create_time') is not None:
            self.create_time = m.get('create_time')
        if m.get('rest') is not None:
            self.rest = m.get('rest')
        if m.get('update_time') is not None:
            self.update_time = m.get('update_time')
        return self


class BlockchainBrowserTransactionReceipt(TeaModel):
    def __init__(
        self,
        data: str = None,
        gas_used: int = None,
        logs: List[str] = None,
        result: int = None,
    ):
        # data
        self.data = data
        # gas_used
        self.gas_used = gas_used
        # logs
        self.logs = logs
        # result
        self.result = result

    def validate(self):
        self.validate_required(self.data, 'data')
        self.validate_required(self.gas_used, 'gas_used')
        self.validate_required(self.logs, 'logs')
        self.validate_required(self.result, 'result')

    def to_map(self):
        result = dict()
        if self.data is not None:
            result['data'] = self.data
        if self.gas_used is not None:
            result['gas_used'] = self.gas_used
        if self.logs is not None:
            result['logs'] = self.logs
        if self.result is not None:
            result['result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            self.data = m.get('data')
        if m.get('gas_used') is not None:
            self.gas_used = m.get('gas_used')
        if m.get('logs') is not None:
            self.logs = m.get('logs')
        if m.get('result') is not None:
            self.result = m.get('result')
        return self


class PublicKey(TeaModel):
    def __init__(
        self,
        issuer_id: str = None,
        public_key_content: str = None,
        recipient_id: str = None,
    ):
        # 公钥颁发者ID
        self.issuer_id = issuer_id
        # 公钥内容
        self.public_key_content = public_key_content
        # 公钥接受者ID
        self.recipient_id = recipient_id

    def validate(self):
        self.validate_required(self.issuer_id, 'issuer_id')
        if self.issuer_id is not None:
            self.validate_max_length(self.issuer_id, 'issuer_id', 100)
        self.validate_required(self.public_key_content, 'public_key_content')
        self.validate_required(self.recipient_id, 'recipient_id')
        if self.recipient_id is not None:
            self.validate_max_length(self.recipient_id, 'recipient_id', 100)

    def to_map(self):
        result = dict()
        if self.issuer_id is not None:
            result['issuer_id'] = self.issuer_id
        if self.public_key_content is not None:
            result['public_key_content'] = self.public_key_content
        if self.recipient_id is not None:
            result['recipient_id'] = self.recipient_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('issuer_id') is not None:
            self.issuer_id = m.get('issuer_id')
        if m.get('public_key_content') is not None:
            self.public_key_content = m.get('public_key_content')
        if m.get('recipient_id') is not None:
            self.recipient_id = m.get('recipient_id')
        return self


class ALiYunChainInfo(TeaModel):
    def __init__(
        self,
        abnormal_nodes: int = None,
        ant_chain_id: str = None,
        block_height: int = None,
        create_time: int = None,
        is_role: bool = None,
        node_number: int = None,
        normal: bool = None,
        transaction_sum: int = None,
        version: str = None,
        node_infos: List[ALiYunChainNodeInfo] = None,
    ):
        # abnormal_nodes
        self.abnormal_nodes = abnormal_nodes
        # ant_chain_id
        self.ant_chain_id = ant_chain_id
        # block_height
        self.block_height = block_height
        # create_time
        self.create_time = create_time
        # is_role
        self.is_role = is_role
        # node_number
        self.node_number = node_number
        # normal
        self.normal = normal
        # transaction_sum
        self.transaction_sum = transaction_sum
        # Version
        self.version = version
        # node_infos
        self.node_infos = node_infos

    def validate(self):
        if self.node_infos:
            for k in self.node_infos:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.abnormal_nodes is not None:
            result['abnormal_nodes'] = self.abnormal_nodes
        if self.ant_chain_id is not None:
            result['ant_chain_id'] = self.ant_chain_id
        if self.block_height is not None:
            result['block_height'] = self.block_height
        if self.create_time is not None:
            result['create_time'] = self.create_time
        if self.is_role is not None:
            result['is_role'] = self.is_role
        if self.node_number is not None:
            result['node_number'] = self.node_number
        if self.normal is not None:
            result['normal'] = self.normal
        if self.transaction_sum is not None:
            result['transaction_sum'] = self.transaction_sum
        if self.version is not None:
            result['version'] = self.version
        result['node_infos'] = []
        if self.node_infos is not None:
            for k in self.node_infos:
                result['node_infos'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('abnormal_nodes') is not None:
            self.abnormal_nodes = m.get('abnormal_nodes')
        if m.get('ant_chain_id') is not None:
            self.ant_chain_id = m.get('ant_chain_id')
        if m.get('block_height') is not None:
            self.block_height = m.get('block_height')
        if m.get('create_time') is not None:
            self.create_time = m.get('create_time')
        if m.get('is_role') is not None:
            self.is_role = m.get('is_role')
        if m.get('node_number') is not None:
            self.node_number = m.get('node_number')
        if m.get('normal') is not None:
            self.normal = m.get('normal')
        if m.get('transaction_sum') is not None:
            self.transaction_sum = m.get('transaction_sum')
        if m.get('version') is not None:
            self.version = m.get('version')
        self.node_infos = []
        if m.get('node_infos') is not None:
            for k in m.get('node_infos'):
                temp_model = ALiYunChainNodeInfo()
                self.node_infos.append(temp_model.from_map(k))
        return self


class BaasUnionInfo(TeaModel):
    def __init__(
        self,
        union_name: str = None,
        union_description: str = None,
        union_user: str = None,
        union_user_cell: str = None,
        union_user_mail: str = None,
    ):
        # 联盟名称
        self.union_name = union_name
        # 描述
        self.union_description = union_description
        # 联系人
        self.union_user = union_user
        # 联盟联系人手机号码
        self.union_user_cell = union_user_cell
        # 联盟联系人邮箱
        self.union_user_mail = union_user_mail

    def validate(self):
        self.validate_required(self.union_name, 'union_name')
        self.validate_required(self.union_description, 'union_description')
        self.validate_required(self.union_user, 'union_user')
        self.validate_required(self.union_user_cell, 'union_user_cell')
        self.validate_required(self.union_user_mail, 'union_user_mail')

    def to_map(self):
        result = dict()
        if self.union_name is not None:
            result['union_name'] = self.union_name
        if self.union_description is not None:
            result['union_description'] = self.union_description
        if self.union_user is not None:
            result['union_user'] = self.union_user
        if self.union_user_cell is not None:
            result['union_user_cell'] = self.union_user_cell
        if self.union_user_mail is not None:
            result['union_user_mail'] = self.union_user_mail
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('union_name') is not None:
            self.union_name = m.get('union_name')
        if m.get('union_description') is not None:
            self.union_description = m.get('union_description')
        if m.get('union_user') is not None:
            self.union_user = m.get('union_user')
        if m.get('union_user_cell') is not None:
            self.union_user_cell = m.get('union_user_cell')
        if m.get('union_user_mail') is not None:
            self.union_user_mail = m.get('union_user_mail')
        return self


class Location(TeaModel):
    def __init__(
        self,
        city: str = None,
        imei: str = None,
        imsi: str = None,
        ip: str = None,
        latitude: str = None,
        longitude: str = None,
        propertities: str = None,
        wifi_mac: str = None,
    ):
        # 所在城市
        self.city = city
        # 操作IMEI
        self.imei = imei
        # 操作IMSI
        self.imsi = imsi
        # 操作IP地址
        self.ip = ip
        # 纬度
        self.latitude = latitude
        # 经度
        self.longitude = longitude
        # 扩展属性
        self.propertities = propertities
        # 操作Wi-Fi物理地址
        self.wifi_mac = wifi_mac

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.city is not None:
            result['city'] = self.city
        if self.imei is not None:
            result['imei'] = self.imei
        if self.imsi is not None:
            result['imsi'] = self.imsi
        if self.ip is not None:
            result['ip'] = self.ip
        if self.latitude is not None:
            result['latitude'] = self.latitude
        if self.longitude is not None:
            result['longitude'] = self.longitude
        if self.propertities is not None:
            result['propertities'] = self.propertities
        if self.wifi_mac is not None:
            result['wifi_mac'] = self.wifi_mac
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('city') is not None:
            self.city = m.get('city')
        if m.get('imei') is not None:
            self.imei = m.get('imei')
        if m.get('imsi') is not None:
            self.imsi = m.get('imsi')
        if m.get('ip') is not None:
            self.ip = m.get('ip')
        if m.get('latitude') is not None:
            self.latitude = m.get('latitude')
        if m.get('longitude') is not None:
            self.longitude = m.get('longitude')
        if m.get('propertities') is not None:
            self.propertities = m.get('propertities')
        if m.get('wifi_mac') is not None:
            self.wifi_mac = m.get('wifi_mac')
        return self


class VcTransmitPayload(TeaModel):
    def __init__(
        self,
        target_verifier: List[VcTransmitTargetStruct] = None,
        vc_id: str = None,
        vc_content: str = None,
    ):
        # 目标did相关信息列表
        self.target_verifier = target_verifier
        # 要传输的vc_id
        self.vc_id = vc_id
        # vc原文，如果vc原文出现在传输接口，那么VC仓库不会从本地查找，而是直接将传输的VC上链
        self.vc_content = vc_content

    def validate(self):
        self.validate_required(self.target_verifier, 'target_verifier')
        if self.target_verifier:
            for k in self.target_verifier:
                if k:
                    k.validate()
        self.validate_required(self.vc_id, 'vc_id')

    def to_map(self):
        result = dict()
        result['target_verifier'] = []
        if self.target_verifier is not None:
            for k in self.target_verifier:
                result['target_verifier'].append(k.to_map() if k else None)
        if self.vc_id is not None:
            result['vc_id'] = self.vc_id
        if self.vc_content is not None:
            result['vc_content'] = self.vc_content
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.target_verifier = []
        if m.get('target_verifier') is not None:
            for k in m.get('target_verifier'):
                temp_model = VcTransmitTargetStruct()
                self.target_verifier.append(temp_model.from_map(k))
        if m.get('vc_id') is not None:
            self.vc_id = m.get('vc_id')
        if m.get('vc_content') is not None:
            self.vc_content = m.get('vc_content')
        return self


class VcShareResult(TeaModel):
    def __init__(
        self,
        vc_id: str = None,
        target_did: str = None,
        tx_hash: str = None,
        status: bool = None,
        msg: str = None,
    ):
        # 目标分享的VC的id
        self.vc_id = vc_id
        # 分享给目标接受者的did
        self.target_did = target_did
        # 分享链上VC数据的交易hash，可用于直连区块链查询交易内容时使用。
        self.tx_hash = tx_hash
        # 分享是否成功，true：成功，false：失败
        self.status = status
        # 失败的对应原因信息
        self.msg = msg

    def validate(self):
        self.validate_required(self.vc_id, 'vc_id')
        self.validate_required(self.target_did, 'target_did')
        self.validate_required(self.status, 'status')

    def to_map(self):
        result = dict()
        if self.vc_id is not None:
            result['vc_id'] = self.vc_id
        if self.target_did is not None:
            result['target_did'] = self.target_did
        if self.tx_hash is not None:
            result['tx_hash'] = self.tx_hash
        if self.status is not None:
            result['status'] = self.status
        if self.msg is not None:
            result['msg'] = self.msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('vc_id') is not None:
            self.vc_id = m.get('vc_id')
        if m.get('target_did') is not None:
            self.target_did = m.get('target_did')
        if m.get('tx_hash') is not None:
            self.tx_hash = m.get('tx_hash')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('msg') is not None:
            self.msg = m.get('msg')
        return self


class VcTransmitInitResult(TeaModel):
    def __init__(
        self,
        is_success: bool = None,
        message: str = None,
        target_verifier: str = None,
        need_signature_tx_hash: str = None,
    ):
        # 初始化成功与否
        self.is_success = is_success
        # 失败时返回的额外信息
        self.message = message
        # 接受者did
        self.target_verifier = target_verifier
        # 待签名的交易hash
        self.need_signature_tx_hash = need_signature_tx_hash

    def validate(self):
        self.validate_required(self.is_success, 'is_success')
        self.validate_required(self.message, 'message')
        self.validate_required(self.target_verifier, 'target_verifier')
        self.validate_required(self.need_signature_tx_hash, 'need_signature_tx_hash')

    def to_map(self):
        result = dict()
        if self.is_success is not None:
            result['is_success'] = self.is_success
        if self.message is not None:
            result['message'] = self.message
        if self.target_verifier is not None:
            result['target_verifier'] = self.target_verifier
        if self.need_signature_tx_hash is not None:
            result['need_signature_tx_hash'] = self.need_signature_tx_hash
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('is_success') is not None:
            self.is_success = m.get('is_success')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('target_verifier') is not None:
            self.target_verifier = m.get('target_verifier')
        if m.get('need_signature_tx_hash') is not None:
            self.need_signature_tx_hash = m.get('need_signature_tx_hash')
        return self


class DiscreteValue(TeaModel):
    def __init__(
        self,
        sort_id: int = None,
        text: str = None,
        tips: str = None,
        unit: str = None,
        value: str = None,
    ):
        # 排序id
        self.sort_id = sort_id
        # 字段描述
        self.text = text
        # 提示信息
        self.tips = tips
        # 单位信息
        self.unit = unit
        # 值内容
        self.value = value

    def validate(self):
        self.validate_required(self.text, 'text')
        self.validate_required(self.value, 'value')

    def to_map(self):
        result = dict()
        if self.sort_id is not None:
            result['sort_id'] = self.sort_id
        if self.text is not None:
            result['text'] = self.text
        if self.tips is not None:
            result['tips'] = self.tips
        if self.unit is not None:
            result['unit'] = self.unit
        if self.value is not None:
            result['value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('sort_id') is not None:
            self.sort_id = m.get('sort_id')
        if m.get('text') is not None:
            self.text = m.get('text')
        if m.get('tips') is not None:
            self.tips = m.get('tips')
        if m.get('unit') is not None:
            self.unit = m.get('unit')
        if m.get('value') is not None:
            self.value = m.get('value')
        return self


class ALiYunChainMiniAppCodeCreate(TeaModel):
    def __init__(
        self,
        ant_chain_id: str = None,
        transaction_hash: str = None,
        base_64qrcode_png: str = None,
        q_rcode_content: str = None,
    ):
        # ant_chain_id
        self.ant_chain_id = ant_chain_id
        # transaction_hash
        self.transaction_hash = transaction_hash
        # base64_q_r_code_p_n_g
        self.base_64qrcode_png = base_64qrcode_png
        # q_r_code_content
        self.q_rcode_content = q_rcode_content

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.ant_chain_id is not None:
            result['ant_chain_id'] = self.ant_chain_id
        if self.transaction_hash is not None:
            result['transaction_hash'] = self.transaction_hash
        if self.base_64qrcode_png is not None:
            result['base64_q_r_code_p_n_g'] = self.base_64qrcode_png
        if self.q_rcode_content is not None:
            result['q_r_code_content'] = self.q_rcode_content
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ant_chain_id') is not None:
            self.ant_chain_id = m.get('ant_chain_id')
        if m.get('transaction_hash') is not None:
            self.transaction_hash = m.get('transaction_hash')
        if m.get('base64_q_r_code_p_n_g') is not None:
            self.base_64qrcode_png = m.get('base64_q_r_code_p_n_g')
        if m.get('q_r_code_content') is not None:
            self.q_rcode_content = m.get('q_r_code_content')
        return self


class UserInfoParam(TeaModel):
    def __init__(
        self,
        phone: str = None,
        user_account: str = None,
        user_name: str = None,
    ):
        # 用户手机号信息
        self.phone = phone
        # 用户账号信息
        self.user_account = user_account
        # 用户名称
        self.user_name = user_name

    def validate(self):
        self.validate_required(self.phone, 'phone')
        self.validate_required(self.user_account, 'user_account')
        self.validate_required(self.user_name, 'user_name')

    def to_map(self):
        result = dict()
        if self.phone is not None:
            result['phone'] = self.phone
        if self.user_account is not None:
            result['user_account'] = self.user_account
        if self.user_name is not None:
            result['user_name'] = self.user_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('phone') is not None:
            self.phone = m.get('phone')
        if m.get('user_account') is not None:
            self.user_account = m.get('user_account')
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        return self


class ServiceDiscoveryResult(TeaModel):
    def __init__(
        self,
        did: str = None,
        services: List[DidDocServicesInfo] = None,
    ):
        # 提供该服务能力的did
        self.did = did
        # 提供该服务能力的endpoint信息
        self.services = services

    def validate(self):
        self.validate_required(self.did, 'did')
        self.validate_required(self.services, 'services')
        if self.services:
            for k in self.services:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.did is not None:
            result['did'] = self.did
        result['services'] = []
        if self.services is not None:
            for k in self.services:
                result['services'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('did') is not None:
            self.did = m.get('did')
        self.services = []
        if m.get('services') is not None:
            for k in m.get('services'):
                temp_model = DidDocServicesInfo()
                self.services.append(temp_model.from_map(k))
        return self


class DisServiceInfo(TeaModel):
    def __init__(
        self,
        controller: str = None,
        end_point: str = None,
        service_id: str = None,
        service_type: str = None,
    ):
        # 提供服务的did
        self.controller = controller
        # 服务地址
        self.end_point = end_point
        # 服务id
        self.service_id = service_id
        # 服务类型
        self.service_type = service_type

    def validate(self):
        self.validate_required(self.controller, 'controller')
        self.validate_required(self.end_point, 'end_point')
        self.validate_required(self.service_id, 'service_id')
        self.validate_required(self.service_type, 'service_type')

    def to_map(self):
        result = dict()
        if self.controller is not None:
            result['controller'] = self.controller
        if self.end_point is not None:
            result['end_point'] = self.end_point
        if self.service_id is not None:
            result['service_id'] = self.service_id
        if self.service_type is not None:
            result['service_type'] = self.service_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('controller') is not None:
            self.controller = m.get('controller')
        if m.get('end_point') is not None:
            self.end_point = m.get('end_point')
        if m.get('service_id') is not None:
            self.service_id = m.get('service_id')
        if m.get('service_type') is not None:
            self.service_type = m.get('service_type')
        return self


class ContractEncryptKeyItem(TeaModel):
    def __init__(
        self,
        key: str = None,
        type: int = None,
        value: str = None,
    ):
        # 字段对应的id
        self.key = key
        # 0:encrypt_text,
        # 1:encrypt_array_text,
        # 2:encrypt_int
        # 3:encrypt_array_int
        self.type = type
        # 字段对应的数据
        self.value = value

    def validate(self):
        self.validate_required(self.key, 'key')
        self.validate_required(self.type, 'type')
        self.validate_required(self.value, 'value')

    def to_map(self):
        result = dict()
        if self.key is not None:
            result['key'] = self.key
        if self.type is not None:
            result['type'] = self.type
        if self.value is not None:
            result['value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('key') is not None:
            self.key = m.get('key')
        if m.get('type') is not None:
            self.type = m.get('type')
        if m.get('value') is not None:
            self.value = m.get('value')
        return self


class BareClaim(TeaModel):
    def __init__(
        self,
        claim: str = None,
        type: str = None,
    ):
        # 下面的内容由调用者自己定义，建议只存放必要的声明信息，不要放置敏感数据
        self.claim = claim
        # 证书类型
        self.type = type

    def validate(self):
        self.validate_required(self.claim, 'claim')

    def to_map(self):
        result = dict()
        if self.claim is not None:
            result['claim'] = self.claim
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('claim') is not None:
            self.claim = m.get('claim')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class AccountMap(TeaModel):
    def __init__(
        self,
        bizid: str = None,
        entity_info_type: int = None,
        entity_info_value: str = None,
        full_name: str = None,
        status: int = None,
        target_name: str = None,
        type: int = None,
        uid: str = None,
    ):
        # 要映射的链对应的唯一id
        self.bizid = bizid
        # 0: 身份证；1：手机；2: 电子邮箱；3: 企业营业执照号
        self.entity_info_type = entity_info_type
        # 对应entity_info_type的具体值
        # 
        self.entity_info_value = entity_info_value
        # 账户对应实体的全名
        self.full_name = full_name
        # 该账户在指定链上的状态1，激活，2，冻结，新建账户只能为1
        self.status = status
        # 希望映射后在链上的账户名
        self.target_name = target_name
        # 该账户对应实体的类型：0， 个人； 1， 企业
        self.type = type
        # 自有系统中该账户的唯一标示
        self.uid = uid

    def validate(self):
        self.validate_required(self.bizid, 'bizid')
        self.validate_required(self.status, 'status')
        self.validate_required(self.uid, 'uid')

    def to_map(self):
        result = dict()
        if self.bizid is not None:
            result['bizid'] = self.bizid
        if self.entity_info_type is not None:
            result['entity_info_type'] = self.entity_info_type
        if self.entity_info_value is not None:
            result['entity_info_value'] = self.entity_info_value
        if self.full_name is not None:
            result['full_name'] = self.full_name
        if self.status is not None:
            result['status'] = self.status
        if self.target_name is not None:
            result['target_name'] = self.target_name
        if self.type is not None:
            result['type'] = self.type
        if self.uid is not None:
            result['uid'] = self.uid
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('bizid') is not None:
            self.bizid = m.get('bizid')
        if m.get('entity_info_type') is not None:
            self.entity_info_type = m.get('entity_info_type')
        if m.get('entity_info_value') is not None:
            self.entity_info_value = m.get('entity_info_value')
        if m.get('full_name') is not None:
            self.full_name = m.get('full_name')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('target_name') is not None:
            self.target_name = m.get('target_name')
        if m.get('type') is not None:
            self.type = m.get('type')
        if m.get('uid') is not None:
            self.uid = m.get('uid')
        return self


class TransactionInfo(TeaModel):
    def __init__(
        self,
        timestamp: int = None,
        hash: str = None,
        height: int = None,
        blockhash: str = None,
        from_: str = None,
        to: str = None,
        txtype: int = None,
        value: int = None,
        logs: str = None,
        gasused: int = None,
        result: str = None,
        json: str = None,
    ):
        # 交易时间戳
        self.timestamp = timestamp
        # 交易hash
        self.hash = hash
        # 交易块高
        self.height = height
        # 交易所在块高
        self.blockhash = blockhash
        # 交易来源
        self.from_ = from_
        # 交易地址
        self.to = to
        # 交易类型
        self.txtype = txtype
        # 转账额度
        self.value = value
        # logs
        self.logs = logs
        # 燃料消耗
        self.gasused = gasused
        # result
        self.result = result
        # 拓展json字段
        self.json = json

    def validate(self):
        self.validate_required(self.timestamp, 'timestamp')
        self.validate_required(self.hash, 'hash')
        self.validate_required(self.height, 'height')
        self.validate_required(self.blockhash, 'blockhash')
        self.validate_required(self.from_, 'from_')
        self.validate_required(self.to, 'to')
        self.validate_required(self.txtype, 'txtype')
        self.validate_required(self.value, 'value')
        self.validate_required(self.logs, 'logs')
        self.validate_required(self.gasused, 'gasused')
        self.validate_required(self.result, 'result')
        self.validate_required(self.json, 'json')

    def to_map(self):
        result = dict()
        if self.timestamp is not None:
            result['timestamp'] = self.timestamp
        if self.hash is not None:
            result['hash'] = self.hash
        if self.height is not None:
            result['height'] = self.height
        if self.blockhash is not None:
            result['blockhash'] = self.blockhash
        if self.from_ is not None:
            result['from'] = self.from_
        if self.to is not None:
            result['to'] = self.to
        if self.txtype is not None:
            result['txtype'] = self.txtype
        if self.value is not None:
            result['value'] = self.value
        if self.logs is not None:
            result['logs'] = self.logs
        if self.gasused is not None:
            result['gasused'] = self.gasused
        if self.result is not None:
            result['result'] = self.result
        if self.json is not None:
            result['json'] = self.json
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('timestamp') is not None:
            self.timestamp = m.get('timestamp')
        if m.get('hash') is not None:
            self.hash = m.get('hash')
        if m.get('height') is not None:
            self.height = m.get('height')
        if m.get('blockhash') is not None:
            self.blockhash = m.get('blockhash')
        if m.get('from') is not None:
            self.from_ = m.get('from')
        if m.get('to') is not None:
            self.to = m.get('to')
        if m.get('txtype') is not None:
            self.txtype = m.get('txtype')
        if m.get('value') is not None:
            self.value = m.get('value')
        if m.get('logs') is not None:
            self.logs = m.get('logs')
        if m.get('gasused') is not None:
            self.gasused = m.get('gasused')
        if m.get('result') is not None:
            self.result = m.get('result')
        if m.get('json') is not None:
            self.json = m.get('json')
        return self


class ALiYunAccountList(TeaModel):
    def __init__(
        self,
        pagination: ALiYunPagination = None,
        accounts: List[ALiYunAccount] = None,
    ):
        # pagination
        self.pagination = pagination
        # accounts
        self.accounts = accounts

    def validate(self):
        if self.pagination:
            self.pagination.validate()
        if self.accounts:
            for k in self.accounts:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.pagination is not None:
            result['pagination'] = self.pagination.to_map()
        result['accounts'] = []
        if self.accounts is not None:
            for k in self.accounts:
                result['accounts'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('pagination') is not None:
            temp_model = ALiYunPagination()
            self.pagination = temp_model.from_map(m['pagination'])
        self.accounts = []
        if m.get('accounts') is not None:
            for k in m.get('accounts'):
                temp_model = ALiYunAccount()
                self.accounts.append(temp_model.from_map(k))
        return self


class TsrResponse(TeaModel):
    def __init__(
        self,
        hashed_message: str = None,
        hash_algorithm: str = None,
        ts: str = None,
    ):
        # hash后的信息
        self.hashed_message = hashed_message
        # 哈希算法
        self.hash_algorithm = hash_algorithm
        # 时间
        self.ts = ts

    def validate(self):
        self.validate_required(self.hashed_message, 'hashed_message')
        self.validate_required(self.hash_algorithm, 'hash_algorithm')
        self.validate_required(self.ts, 'ts')

    def to_map(self):
        result = dict()
        if self.hashed_message is not None:
            result['hashed_message'] = self.hashed_message
        if self.hash_algorithm is not None:
            result['hash_algorithm'] = self.hash_algorithm
        if self.ts is not None:
            result['ts'] = self.ts
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('hashed_message') is not None:
            self.hashed_message = m.get('hashed_message')
        if m.get('hash_algorithm') is not None:
            self.hash_algorithm = m.get('hash_algorithm')
        if m.get('ts') is not None:
            self.ts = m.get('ts')
        return self


class ALiYunUnion(TeaModel):
    def __init__(
        self,
        ant_chains: List[ALiYunAntChain] = None,
        ant_consortiums: List[ALiYunAntConsortium] = None,
        consortium_id: str = None,
        members: List[ALiYunMember] = None,
        pagination: ALiYunPagination = None,
        is_exist: bool = None,
    ):
        # 联盟内链的集合
        self.ant_chains = ant_chains
        # 联盟信息
        self.ant_consortiums = ant_consortiums
        # 联盟Id
        self.consortium_id = consortium_id
        # 联盟成员信息
        self.members = members
        # 阿里云分页属性
        self.pagination = pagination
        # is_exist
        self.is_exist = is_exist

    def validate(self):
        if self.ant_chains:
            for k in self.ant_chains:
                if k:
                    k.validate()
        if self.ant_consortiums:
            for k in self.ant_consortiums:
                if k:
                    k.validate()
        if self.members:
            for k in self.members:
                if k:
                    k.validate()
        if self.pagination:
            self.pagination.validate()

    def to_map(self):
        result = dict()
        result['ant_chains'] = []
        if self.ant_chains is not None:
            for k in self.ant_chains:
                result['ant_chains'].append(k.to_map() if k else None)
        result['ant_consortiums'] = []
        if self.ant_consortiums is not None:
            for k in self.ant_consortiums:
                result['ant_consortiums'].append(k.to_map() if k else None)
        if self.consortium_id is not None:
            result['consortium_id'] = self.consortium_id
        result['members'] = []
        if self.members is not None:
            for k in self.members:
                result['members'].append(k.to_map() if k else None)
        if self.pagination is not None:
            result['pagination'] = self.pagination.to_map()
        if self.is_exist is not None:
            result['is_exist'] = self.is_exist
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.ant_chains = []
        if m.get('ant_chains') is not None:
            for k in m.get('ant_chains'):
                temp_model = ALiYunAntChain()
                self.ant_chains.append(temp_model.from_map(k))
        self.ant_consortiums = []
        if m.get('ant_consortiums') is not None:
            for k in m.get('ant_consortiums'):
                temp_model = ALiYunAntConsortium()
                self.ant_consortiums.append(temp_model.from_map(k))
        if m.get('consortium_id') is not None:
            self.consortium_id = m.get('consortium_id')
        self.members = []
        if m.get('members') is not None:
            for k in m.get('members'):
                temp_model = ALiYunMember()
                self.members.append(temp_model.from_map(k))
        if m.get('pagination') is not None:
            temp_model = ALiYunPagination()
            self.pagination = temp_model.from_map(m['pagination'])
        if m.get('is_exist') is not None:
            self.is_exist = m.get('is_exist')
        return self


class VcShareStruct(TeaModel):
    def __init__(
        self,
        vc_id: str = None,
        owner_did: str = None,
        index: str = None,
        signature: str = None,
    ):
        # 分享的目标VC的id
        self.vc_id = vc_id
        # 目标的VC持有者的did
        self.owner_did = owner_did
        # 在支持声明的claim字段级别分享能力时使用，可以指定哪些字段隐藏，哪些字段分享。示例中标记为”1“的是隐藏，”0“的是分享明文。
        self.index = index
        # 非托管模式下owner_did的签名，作为授权凭证
        self.signature = signature

    def validate(self):
        self.validate_required(self.vc_id, 'vc_id')
        self.validate_required(self.owner_did, 'owner_did')

    def to_map(self):
        result = dict()
        if self.vc_id is not None:
            result['vc_id'] = self.vc_id
        if self.owner_did is not None:
            result['owner_did'] = self.owner_did
        if self.index is not None:
            result['index'] = self.index
        if self.signature is not None:
            result['signature'] = self.signature
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('vc_id') is not None:
            self.vc_id = m.get('vc_id')
        if m.get('owner_did') is not None:
            self.owner_did = m.get('owner_did')
        if m.get('index') is not None:
            self.index = m.get('index')
        if m.get('signature') is not None:
            self.signature = m.get('signature')
        return self


class BlockchainBrowserNodeOwner(TeaModel):
    def __init__(
        self,
        node_id: str = None,
        node_ip: str = None,
        node_name: str = None,
        node_owner: str = None,
        node_port: str = None,
        node_source: str = None,
        node_state: str = None,
        node_type: str = None,
        node_disk_used: str = None,
        node_disk_total: str = None,
    ):
        # node_id
        self.node_id = node_id
        # node_ip
        self.node_ip = node_ip
        # node_name
        self.node_name = node_name
        # node_owner
        self.node_owner = node_owner
        # node_port
        self.node_port = node_port
        # node_source
        self.node_source = node_source
        # node_state
        self.node_state = node_state
        # node_type
        self.node_type = node_type
        # 节点已使用的存储空间
        self.node_disk_used = node_disk_used
        # 节点的总存储空间
        self.node_disk_total = node_disk_total

    def validate(self):
        self.validate_required(self.node_id, 'node_id')
        self.validate_required(self.node_ip, 'node_ip')
        self.validate_required(self.node_name, 'node_name')
        self.validate_required(self.node_owner, 'node_owner')
        self.validate_required(self.node_port, 'node_port')
        self.validate_required(self.node_source, 'node_source')
        self.validate_required(self.node_state, 'node_state')
        self.validate_required(self.node_type, 'node_type')
        self.validate_required(self.node_disk_used, 'node_disk_used')
        self.validate_required(self.node_disk_total, 'node_disk_total')

    def to_map(self):
        result = dict()
        if self.node_id is not None:
            result['node_id'] = self.node_id
        if self.node_ip is not None:
            result['node_ip'] = self.node_ip
        if self.node_name is not None:
            result['node_name'] = self.node_name
        if self.node_owner is not None:
            result['node_owner'] = self.node_owner
        if self.node_port is not None:
            result['node_port'] = self.node_port
        if self.node_source is not None:
            result['node_source'] = self.node_source
        if self.node_state is not None:
            result['node_state'] = self.node_state
        if self.node_type is not None:
            result['node_type'] = self.node_type
        if self.node_disk_used is not None:
            result['node_disk_used'] = self.node_disk_used
        if self.node_disk_total is not None:
            result['node_disk_total'] = self.node_disk_total
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('node_id') is not None:
            self.node_id = m.get('node_id')
        if m.get('node_ip') is not None:
            self.node_ip = m.get('node_ip')
        if m.get('node_name') is not None:
            self.node_name = m.get('node_name')
        if m.get('node_owner') is not None:
            self.node_owner = m.get('node_owner')
        if m.get('node_port') is not None:
            self.node_port = m.get('node_port')
        if m.get('node_source') is not None:
            self.node_source = m.get('node_source')
        if m.get('node_state') is not None:
            self.node_state = m.get('node_state')
        if m.get('node_type') is not None:
            self.node_type = m.get('node_type')
        if m.get('node_disk_used') is not None:
            self.node_disk_used = m.get('node_disk_used')
        if m.get('node_disk_total') is not None:
            self.node_disk_total = m.get('node_disk_total')
        return self


class EPIssueHisInfo(TeaModel):
    def __init__(
        self,
        issue_date: int = None,
        offline_issue_amount: int = None,
        online_issue_amount: int = None,
        self_issue_amount: int = None,
    ):
        # 版通发行日期时间戳
        self.issue_date = issue_date
        # 版通线下发行量
        self.offline_issue_amount = offline_issue_amount
        # 版通线上发行量
        self.online_issue_amount = online_issue_amount
        # 版通自持发行量
        self.self_issue_amount = self_issue_amount

    def validate(self):
        self.validate_required(self.issue_date, 'issue_date')
        self.validate_required(self.offline_issue_amount, 'offline_issue_amount')
        self.validate_required(self.online_issue_amount, 'online_issue_amount')
        self.validate_required(self.self_issue_amount, 'self_issue_amount')

    def to_map(self):
        result = dict()
        if self.issue_date is not None:
            result['issue_date'] = self.issue_date
        if self.offline_issue_amount is not None:
            result['offline_issue_amount'] = self.offline_issue_amount
        if self.online_issue_amount is not None:
            result['online_issue_amount'] = self.online_issue_amount
        if self.self_issue_amount is not None:
            result['self_issue_amount'] = self.self_issue_amount
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('issue_date') is not None:
            self.issue_date = m.get('issue_date')
        if m.get('offline_issue_amount') is not None:
            self.offline_issue_amount = m.get('offline_issue_amount')
        if m.get('online_issue_amount') is not None:
            self.online_issue_amount = m.get('online_issue_amount')
        if m.get('self_issue_amount') is not None:
            self.self_issue_amount = m.get('self_issue_amount')
        return self


class ALiYunChainCloudIdeConfig(TeaModel):
    def __init__(
        self,
        bizid: str = None,
        name: str = None,
        trial_account: str = None,
        trial_account_private_key: str = None,
        ant_chain_id: str = None,
        ant_chain_name: str = None,
        version: str = None,
    ):
        # bizid
        self.bizid = bizid
        # name
        self.name = name
        # trial_account
        self.trial_account = trial_account
        # trial_account_private_key
        self.trial_account_private_key = trial_account_private_key
        # ant_chain_id
        self.ant_chain_id = ant_chain_id
        # ant_chain_name
        self.ant_chain_name = ant_chain_name
        # version
        self.version = version

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.bizid is not None:
            result['bizid'] = self.bizid
        if self.name is not None:
            result['name'] = self.name
        if self.trial_account is not None:
            result['trial_account'] = self.trial_account
        if self.trial_account_private_key is not None:
            result['trial_account_private_key'] = self.trial_account_private_key
        if self.ant_chain_id is not None:
            result['ant_chain_id'] = self.ant_chain_id
        if self.ant_chain_name is not None:
            result['ant_chain_name'] = self.ant_chain_name
        if self.version is not None:
            result['version'] = self.version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('bizid') is not None:
            self.bizid = m.get('bizid')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('trial_account') is not None:
            self.trial_account = m.get('trial_account')
        if m.get('trial_account_private_key') is not None:
            self.trial_account_private_key = m.get('trial_account_private_key')
        if m.get('ant_chain_id') is not None:
            self.ant_chain_id = m.get('ant_chain_id')
        if m.get('ant_chain_name') is not None:
            self.ant_chain_name = m.get('ant_chain_name')
        if m.get('version') is not None:
            self.version = m.get('version')
        return self


class ALiYunChainBlock(TeaModel):
    def __init__(
        self,
        ant_chain_id: str = None,
        block_hash: str = None,
        create_time: int = None,
        height: int = None,
        previous_hash: str = None,
        root_tx_hash: str = None,
        transaction_size: int = None,
        trans_summary_list: List[ALiYunTransactionSummary] = None,
        version: int = None,
    ):
        # ant_chain_id
        self.ant_chain_id = ant_chain_id
        # block_hash
        self.block_hash = block_hash
        # create_time
        self.create_time = create_time
        # height
        self.height = height
        # previous_hash
        self.previous_hash = previous_hash
        # root_tx_hash
        self.root_tx_hash = root_tx_hash
        # transaction_size
        self.transaction_size = transaction_size
        # trans_summary_list
        self.trans_summary_list = trans_summary_list
        # Version
        self.version = version

    def validate(self):
        if self.trans_summary_list:
            for k in self.trans_summary_list:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.ant_chain_id is not None:
            result['ant_chain_id'] = self.ant_chain_id
        if self.block_hash is not None:
            result['block_hash'] = self.block_hash
        if self.create_time is not None:
            result['create_time'] = self.create_time
        if self.height is not None:
            result['height'] = self.height
        if self.previous_hash is not None:
            result['previous_hash'] = self.previous_hash
        if self.root_tx_hash is not None:
            result['root_tx_hash'] = self.root_tx_hash
        if self.transaction_size is not None:
            result['transaction_size'] = self.transaction_size
        result['trans_summary_list'] = []
        if self.trans_summary_list is not None:
            for k in self.trans_summary_list:
                result['trans_summary_list'].append(k.to_map() if k else None)
        if self.version is not None:
            result['version'] = self.version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ant_chain_id') is not None:
            self.ant_chain_id = m.get('ant_chain_id')
        if m.get('block_hash') is not None:
            self.block_hash = m.get('block_hash')
        if m.get('create_time') is not None:
            self.create_time = m.get('create_time')
        if m.get('height') is not None:
            self.height = m.get('height')
        if m.get('previous_hash') is not None:
            self.previous_hash = m.get('previous_hash')
        if m.get('root_tx_hash') is not None:
            self.root_tx_hash = m.get('root_tx_hash')
        if m.get('transaction_size') is not None:
            self.transaction_size = m.get('transaction_size')
        self.trans_summary_list = []
        if m.get('trans_summary_list') is not None:
            for k in m.get('trans_summary_list'):
                temp_model = ALiYunTransactionSummary()
                self.trans_summary_list.append(temp_model.from_map(k))
        if m.get('version') is not None:
            self.version = m.get('version')
        return self


class BizInfo(TeaModel):
    def __init__(
        self,
        client_tenent: str = None,
        code: str = None,
    ):
        # BPWZPFCN
        self.client_tenent = client_tenent
        # 业务代码
        self.code = code

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.client_tenent is not None:
            result['client_tenent'] = self.client_tenent
        if self.code is not None:
            result['code'] = self.code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('client_tenent') is not None:
            self.client_tenent = m.get('client_tenent')
        if m.get('code') is not None:
            self.code = m.get('code')
        return self


class DidZKPInfo(TeaModel):
    def __init__(
        self,
        path: str = None,
        public_inputs: str = None,
        zkp_type: str = None,
    ):
        # 需要生成证明的路径
        self.path = path
        # 生成ZKP证明的公共信息
        self.public_inputs = public_inputs
        # zkp方法
        self.zkp_type = zkp_type

    def validate(self):
        self.validate_required(self.path, 'path')
        self.validate_required(self.public_inputs, 'public_inputs')
        self.validate_required(self.zkp_type, 'zkp_type')

    def to_map(self):
        result = dict()
        if self.path is not None:
            result['path'] = self.path
        if self.public_inputs is not None:
            result['public_inputs'] = self.public_inputs
        if self.zkp_type is not None:
            result['zkp_type'] = self.zkp_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('path') is not None:
            self.path = m.get('path')
        if m.get('public_inputs') is not None:
            self.public_inputs = m.get('public_inputs')
        if m.get('zkp_type') is not None:
            self.zkp_type = m.get('zkp_type')
        return self


class ContractInfo(TeaModel):
    def __init__(
        self,
        contract: str = None,
        hash: str = None,
        timestamp: int = None,
    ):
        # 合约地址
        self.contract = contract
        # 部署hash
        self.hash = hash
        # 合约部署时间
        self.timestamp = timestamp

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.contract is not None:
            result['contract'] = self.contract
        if self.hash is not None:
            result['hash'] = self.hash
        if self.timestamp is not None:
            result['timestamp'] = self.timestamp
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('contract') is not None:
            self.contract = m.get('contract')
        if m.get('hash') is not None:
            self.hash = m.get('hash')
        if m.get('timestamp') is not None:
            self.timestamp = m.get('timestamp')
        return self


class DidEvent(TeaModel):
    def __init__(
        self,
        action: str = None,
        did: str = None,
        did_doc: str = None,
        from_: str = None,
        height: int = None,
        tx_hash: str = None,
        tx_index: int = None,
    ):
        # 事件对应的合约方法
        self.action = action
        # 对应did
        self.did = did
        # did对应doc
        self.did_doc = did_doc
        # 本次事件的触发者
        self.from_ = from_
        # 6500
        self.height = height
        # 交易hash
        self.tx_hash = tx_hash
        # 交易在区块中的index
        self.tx_index = tx_index

    def validate(self):
        self.validate_required(self.action, 'action')
        self.validate_required(self.did, 'did')
        self.validate_required(self.did_doc, 'did_doc')
        self.validate_required(self.from_, 'from_')
        self.validate_required(self.height, 'height')
        self.validate_required(self.tx_hash, 'tx_hash')
        self.validate_required(self.tx_index, 'tx_index')

    def to_map(self):
        result = dict()
        if self.action is not None:
            result['action'] = self.action
        if self.did is not None:
            result['did'] = self.did
        if self.did_doc is not None:
            result['did_doc'] = self.did_doc
        if self.from_ is not None:
            result['from'] = self.from_
        if self.height is not None:
            result['height'] = self.height
        if self.tx_hash is not None:
            result['tx_hash'] = self.tx_hash
        if self.tx_index is not None:
            result['tx_index'] = self.tx_index
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('action') is not None:
            self.action = m.get('action')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('did_doc') is not None:
            self.did_doc = m.get('did_doc')
        if m.get('from') is not None:
            self.from_ = m.get('from')
        if m.get('height') is not None:
            self.height = m.get('height')
        if m.get('tx_hash') is not None:
            self.tx_hash = m.get('tx_hash')
        if m.get('tx_index') is not None:
            self.tx_index = m.get('tx_index')
        return self


class DidAddDoc(TeaModel):
    def __init__(
        self,
        doc: str = None,
    ):
        # did doc content
        self.doc = doc

    def validate(self):
        self.validate_required(self.doc, 'doc')

    def to_map(self):
        result = dict()
        if self.doc is not None:
            result['doc'] = self.doc
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('doc') is not None:
            self.doc = m.get('doc')
        return self


class ExchangeAccountMap(TeaModel):
    def __init__(
        self,
        phone: str = None,
        user_account: str = None,
        user_name: str = None,
    ):
        # 用户联系方式
        self.phone = phone
        # 用户账户
        self.user_account = user_account
        # 用户名称
        self.user_name = user_name

    def validate(self):
        self.validate_required(self.phone, 'phone')
        self.validate_required(self.user_account, 'user_account')
        self.validate_required(self.user_name, 'user_name')

    def to_map(self):
        result = dict()
        if self.phone is not None:
            result['phone'] = self.phone
        if self.user_account is not None:
            result['user_account'] = self.user_account
        if self.user_name is not None:
            result['user_name'] = self.user_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('phone') is not None:
            self.phone = m.get('phone')
        if m.get('user_account') is not None:
            self.user_account = m.get('user_account')
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        return self


class DidServiceType(TeaModel):
    def __init__(
        self,
        access_mode: str = None,
        description: str = None,
        did: str = None,
        service_input: str = None,
        service_output: str = None,
        service_type: str = None,
    ):
        # 枚举类型，描述访问服务的方式
        self.access_mode = access_mode
        # 对服务的文字描述，<1000个字符
        self.description = description
        # 服务类型创建者did
        self.did = did
        # { "item1":"", "item2":"",...
        self.service_input = service_input
        # 返回值类型描述，json形式
        self.service_output = service_output
        # 自定义服务类型，字符数16～32个
        self.service_type = service_type

    def validate(self):
        if self.description is not None:
            self.validate_max_length(self.description, 'description', 1000)
        self.validate_required(self.did, 'did')
        self.validate_required(self.service_type, 'service_type')

    def to_map(self):
        result = dict()
        if self.access_mode is not None:
            result['access_mode'] = self.access_mode
        if self.description is not None:
            result['description'] = self.description
        if self.did is not None:
            result['did'] = self.did
        if self.service_input is not None:
            result['service_input'] = self.service_input
        if self.service_output is not None:
            result['service_output'] = self.service_output
        if self.service_type is not None:
            result['service_type'] = self.service_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('access_mode') is not None:
            self.access_mode = m.get('access_mode')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('service_input') is not None:
            self.service_input = m.get('service_input')
        if m.get('service_output') is not None:
            self.service_output = m.get('service_output')
        if m.get('service_type') is not None:
            self.service_type = m.get('service_type')
        return self


class ALiYunChainMiniAppAuthorization(TeaModel):
    def __init__(
        self,
        ant_chain_id: str = None,
        q_rcode_type: str = None,
        authorization_type: str = None,
    ):
        # ant_chain_id
        self.ant_chain_id = ant_chain_id
        # q_r_code_type
        self.q_rcode_type = q_rcode_type
        # authorization_type
        self.authorization_type = authorization_type

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.ant_chain_id is not None:
            result['ant_chain_id'] = self.ant_chain_id
        if self.q_rcode_type is not None:
            result['q_r_code_type'] = self.q_rcode_type
        if self.authorization_type is not None:
            result['authorization_type'] = self.authorization_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ant_chain_id') is not None:
            self.ant_chain_id = m.get('ant_chain_id')
        if m.get('q_r_code_type') is not None:
            self.q_rcode_type = m.get('q_r_code_type')
        if m.get('authorization_type') is not None:
            self.authorization_type = m.get('authorization_type')
        return self


class ALiYunLatestTransaction(TeaModel):
    def __init__(
        self,
        hash: str = None,
        transaction_v10type: str = None,
        trans_type_v6: str = None,
        from_: str = None,
        to: str = None,
        create_time: int = None,
    ):
        # hash
        self.hash = hash
        # transaction_v10_type
        self.transaction_v10type = transaction_v10type
        # trans_type_v6
        self.trans_type_v6 = trans_type_v6
        # from
        self.from_ = from_
        # to
        self.to = to
        # create_time
        self.create_time = create_time

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.hash is not None:
            result['hash'] = self.hash
        if self.transaction_v10type is not None:
            result['transaction_v10_type'] = self.transaction_v10type
        if self.trans_type_v6 is not None:
            result['trans_type_v6'] = self.trans_type_v6
        if self.from_ is not None:
            result['from'] = self.from_
        if self.to is not None:
            result['to'] = self.to
        if self.create_time is not None:
            result['create_time'] = self.create_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('hash') is not None:
            self.hash = m.get('hash')
        if m.get('transaction_v10_type') is not None:
            self.transaction_v10type = m.get('transaction_v10_type')
        if m.get('trans_type_v6') is not None:
            self.trans_type_v6 = m.get('trans_type_v6')
        if m.get('from') is not None:
            self.from_ = m.get('from')
        if m.get('to') is not None:
            self.to = m.get('to')
        if m.get('create_time') is not None:
            self.create_time = m.get('create_time')
        return self


class ProcessInfo(TeaModel):
    def __init__(
        self,
        current_node: int = None,
        extension_info: str = None,
        nodes: List[NodeDetail] = None,
        process_id: str = None,
        process_status: str = None,
        total_count: int = None,
        data_id: str = None,
    ):
        # 当前处理节点
        self.current_node = current_node
        # 扩展信息
        self.extension_info = extension_info
        # 节点列表
        self.nodes = nodes
        # 流程ID
        self.process_id = process_id
        # 流程状态
        self.process_status = process_status
        # 流程节点总数
        self.total_count = total_count
        # 数据对象ID
        self.data_id = data_id

    def validate(self):
        self.validate_required(self.current_node, 'current_node')
        if self.current_node is not None:
            self.validate_minimum(self.current_node, 'current_node', 0)
        self.validate_required(self.nodes, 'nodes')
        if self.nodes:
            for k in self.nodes:
                if k:
                    k.validate()
        self.validate_required(self.process_id, 'process_id')
        self.validate_required(self.process_status, 'process_status')
        self.validate_required(self.total_count, 'total_count')
        if self.total_count is not None:
            self.validate_minimum(self.total_count, 'total_count', 0)
        self.validate_required(self.data_id, 'data_id')

    def to_map(self):
        result = dict()
        if self.current_node is not None:
            result['current_node'] = self.current_node
        if self.extension_info is not None:
            result['extension_info'] = self.extension_info
        result['nodes'] = []
        if self.nodes is not None:
            for k in self.nodes:
                result['nodes'].append(k.to_map() if k else None)
        if self.process_id is not None:
            result['process_id'] = self.process_id
        if self.process_status is not None:
            result['process_status'] = self.process_status
        if self.total_count is not None:
            result['total_count'] = self.total_count
        if self.data_id is not None:
            result['data_id'] = self.data_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('current_node') is not None:
            self.current_node = m.get('current_node')
        if m.get('extension_info') is not None:
            self.extension_info = m.get('extension_info')
        self.nodes = []
        if m.get('nodes') is not None:
            for k in m.get('nodes'):
                temp_model = NodeDetail()
                self.nodes.append(temp_model.from_map(k))
        if m.get('process_id') is not None:
            self.process_id = m.get('process_id')
        if m.get('process_status') is not None:
            self.process_status = m.get('process_status')
        if m.get('total_count') is not None:
            self.total_count = m.get('total_count')
        if m.get('data_id') is not None:
            self.data_id = m.get('data_id')
        return self


class ItemDto(TeaModel):
    def __init__(
        self,
        product_id: str = None,
        shop_id: str = None,
        tx_hash: str = None,
    ):
        # 商品id
        self.product_id = product_id
        # 商户id
        self.shop_id = shop_id
        # 链上地址
        self.tx_hash = tx_hash

    def validate(self):
        self.validate_required(self.product_id, 'product_id')
        self.validate_required(self.shop_id, 'shop_id')
        self.validate_required(self.tx_hash, 'tx_hash')

    def to_map(self):
        result = dict()
        if self.product_id is not None:
            result['product_id'] = self.product_id
        if self.shop_id is not None:
            result['shop_id'] = self.shop_id
        if self.tx_hash is not None:
            result['tx_hash'] = self.tx_hash
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('product_id') is not None:
            self.product_id = m.get('product_id')
        if m.get('shop_id') is not None:
            self.shop_id = m.get('shop_id')
        if m.get('tx_hash') is not None:
            self.tx_hash = m.get('tx_hash')
        return self


class ALiYunTransactionReceipt(TeaModel):
    def __init__(
        self,
        data: str = None,
        gas_used: str = None,
        result: int = None,
        logs: List[str] = None,
    ):
        # data
        self.data = data
        # gas_used
        self.gas_used = gas_used
        # result
        self.result = result
        # logs
        self.logs = logs

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.data is not None:
            result['data'] = self.data
        if self.gas_used is not None:
            result['gas_used'] = self.gas_used
        if self.result is not None:
            result['result'] = self.result
        if self.logs is not None:
            result['logs'] = self.logs
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data') is not None:
            self.data = m.get('data')
        if m.get('gas_used') is not None:
            self.gas_used = m.get('gas_used')
        if m.get('result') is not None:
            self.result = m.get('result')
        if m.get('logs') is not None:
            self.logs = m.get('logs')
        return self


class ALiYunOrderResult(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        data: str = None,
        success: bool = None,
        code: str = None,
        message: str = None,
        synchro: bool = None,
    ):
        # request_id
        self.request_id = request_id
        # data
        self.data = data
        # success
        self.success = success
        # code
        self.code = code
        # message
        self.message = message
        # synchro
        self.synchro = synchro

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.request_id is not None:
            result['request_id'] = self.request_id
        if self.data is not None:
            result['data'] = self.data
        if self.success is not None:
            result['success'] = self.success
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.synchro is not None:
            result['synchro'] = self.synchro
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('request_id') is not None:
            self.request_id = m.get('request_id')
        if m.get('data') is not None:
            self.data = m.get('data')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('synchro') is not None:
            self.synchro = m.get('synchro')
        return self


class AccountInfoWithBiz(TeaModel):
    def __init__(
        self,
        address: str = None,
        biz_code: str = None,
        biz_name: str = None,
        biz_type: str = None,
        create_time: str = None,
        end_time: str = None,
        extension: str = None,
        group_code: str = None,
        group_name: str = None,
        identity_type: int = None,
        identity_value: str = None,
        label: str = None,
        parent: str = None,
        stat_date: str = None,
        user_id: str = None,
        user_name: str = None,
        user_type: str = None,
    ):
        # 注册地址
        self.address = address
        # 业务场景code
        self.biz_code = biz_code
        # 业务名称
        self.biz_name = biz_name
        # 业务类型，预留
        self.biz_type = biz_type
        # 用户创建时间，格式yyyy-MM-dd HH:mm:ss
        self.create_time = create_time
        # 用户注销时间，格式yyyy-MM-dd HH:mm:ss
        self.end_time = end_time
        # 扩展字段，使用json格式
        self.extension = extension
        # 业务组code
        self.group_code = group_code
        # 业务组名称
        self.group_name = group_name
        # 唯一标示类型，0:统一信用代码,1:开票机构代码,2:身份证号
        self.identity_type = identity_type
        # 唯一标示码
        self.identity_value = identity_value
        # 用户标签
        self.label = label
        # 间连用户的上层直连用户名称
        self.parent = parent
        # 统计时间，时间格式：yyyy-MM-dd HH:mm:ss
        self.stat_date = stat_date
        # 用户id
        self.user_id = user_id
        # 用户或企业名称
        self.user_name = user_name
        # 用户类型：direct直连，indirect间连，partner合作伙伴
        self.user_type = user_type

    def validate(self):
        self.validate_required(self.biz_code, 'biz_code')
        self.validate_required(self.biz_name, 'biz_name')
        if self.extension is not None:
            self.validate_max_length(self.extension, 'extension', 200)
        self.validate_required(self.group_code, 'group_code')
        self.validate_required(self.group_name, 'group_name')

    def to_map(self):
        result = dict()
        if self.address is not None:
            result['address'] = self.address
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        if self.biz_name is not None:
            result['biz_name'] = self.biz_name
        if self.biz_type is not None:
            result['biz_type'] = self.biz_type
        if self.create_time is not None:
            result['create_time'] = self.create_time
        if self.end_time is not None:
            result['end_time'] = self.end_time
        if self.extension is not None:
            result['extension'] = self.extension
        if self.group_code is not None:
            result['group_code'] = self.group_code
        if self.group_name is not None:
            result['group_name'] = self.group_name
        if self.identity_type is not None:
            result['identity_type'] = self.identity_type
        if self.identity_value is not None:
            result['identity_value'] = self.identity_value
        if self.label is not None:
            result['label'] = self.label
        if self.parent is not None:
            result['parent'] = self.parent
        if self.stat_date is not None:
            result['stat_date'] = self.stat_date
        if self.user_id is not None:
            result['user_id'] = self.user_id
        if self.user_name is not None:
            result['user_name'] = self.user_name
        if self.user_type is not None:
            result['user_type'] = self.user_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('address') is not None:
            self.address = m.get('address')
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        if m.get('biz_name') is not None:
            self.biz_name = m.get('biz_name')
        if m.get('biz_type') is not None:
            self.biz_type = m.get('biz_type')
        if m.get('create_time') is not None:
            self.create_time = m.get('create_time')
        if m.get('end_time') is not None:
            self.end_time = m.get('end_time')
        if m.get('extension') is not None:
            self.extension = m.get('extension')
        if m.get('group_code') is not None:
            self.group_code = m.get('group_code')
        if m.get('group_name') is not None:
            self.group_name = m.get('group_name')
        if m.get('identity_type') is not None:
            self.identity_type = m.get('identity_type')
        if m.get('identity_value') is not None:
            self.identity_value = m.get('identity_value')
        if m.get('label') is not None:
            self.label = m.get('label')
        if m.get('parent') is not None:
            self.parent = m.get('parent')
        if m.get('stat_date') is not None:
            self.stat_date = m.get('stat_date')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        if m.get('user_type') is not None:
            self.user_type = m.get('user_type')
        return self


class NotaryTransaction(TeaModel):
    def __init__(
        self,
        content: str = None,
        transaction_hash: str = None,
        type: str = None,
    ):
        # 如果存证类型为text, 则为存证内容
        # 如果存证类型为file,则为存证文件临时下载地址
        self.content = content
        # 链上存证哈希
        self.transaction_hash = transaction_hash
        # 存证类型
        self.type = type

    def validate(self):
        self.validate_required(self.content, 'content')
        self.validate_required(self.transaction_hash, 'transaction_hash')
        self.validate_required(self.type, 'type')

    def to_map(self):
        result = dict()
        if self.content is not None:
            result['content'] = self.content
        if self.transaction_hash is not None:
            result['transaction_hash'] = self.transaction_hash
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('content') is not None:
            self.content = m.get('content')
        if m.get('transaction_hash') is not None:
            self.transaction_hash = m.get('transaction_hash')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class ContractRecord(TeaModel):
    def __init__(
        self,
        abi_oss_key: str = None,
        abi_oss_url: str = None,
        bizid: str = None,
        blockchain_name: str = None,
        bytecode_oss_key: str = None,
        bytecode_oss_url: str = None,
        identity: str = None,
        instance_name: str = None,
        name: str = None,
        publish: int = None,
        tx_hash: str = None,
        type: str = None,
    ):
        # abi对应oss key
        self.abi_oss_key = abi_oss_key
        # abi oss 地址
        self.abi_oss_url = abi_oss_url
        # 区块链唯一标识
        self.bizid = bizid
        # 区块链名称
        self.blockchain_name = blockchain_name
        # bytecode对应oss key
        self.bytecode_oss_key = bytecode_oss_key
        # bytecode oss 地址
        self.bytecode_oss_url = bytecode_oss_url
        # 16进制表示的合约identity
        self.identity = identity
        # 合约代码中定义的合约实例名，比如solidity的contract 关键字后面的命名
        self.instance_name = instance_name
        # 合约名称
        self.name = name
        # 发布状态，1未发布，3已发布
        self.publish = publish
        # 交易hash
        self.tx_hash = tx_hash
        # solidity|cpp|go
        self.type = type

    def validate(self):
        self.validate_required(self.abi_oss_key, 'abi_oss_key')
        self.validate_required(self.bizid, 'bizid')
        self.validate_required(self.blockchain_name, 'blockchain_name')
        self.validate_required(self.bytecode_oss_key, 'bytecode_oss_key')
        self.validate_required(self.identity, 'identity')
        self.validate_required(self.instance_name, 'instance_name')
        self.validate_required(self.name, 'name')
        self.validate_required(self.publish, 'publish')
        self.validate_required(self.tx_hash, 'tx_hash')
        self.validate_required(self.type, 'type')

    def to_map(self):
        result = dict()
        if self.abi_oss_key is not None:
            result['abi_oss_key'] = self.abi_oss_key
        if self.abi_oss_url is not None:
            result['abi_oss_url'] = self.abi_oss_url
        if self.bizid is not None:
            result['bizid'] = self.bizid
        if self.blockchain_name is not None:
            result['blockchain_name'] = self.blockchain_name
        if self.bytecode_oss_key is not None:
            result['bytecode_oss_key'] = self.bytecode_oss_key
        if self.bytecode_oss_url is not None:
            result['bytecode_oss_url'] = self.bytecode_oss_url
        if self.identity is not None:
            result['identity'] = self.identity
        if self.instance_name is not None:
            result['instance_name'] = self.instance_name
        if self.name is not None:
            result['name'] = self.name
        if self.publish is not None:
            result['publish'] = self.publish
        if self.tx_hash is not None:
            result['tx_hash'] = self.tx_hash
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('abi_oss_key') is not None:
            self.abi_oss_key = m.get('abi_oss_key')
        if m.get('abi_oss_url') is not None:
            self.abi_oss_url = m.get('abi_oss_url')
        if m.get('bizid') is not None:
            self.bizid = m.get('bizid')
        if m.get('blockchain_name') is not None:
            self.blockchain_name = m.get('blockchain_name')
        if m.get('bytecode_oss_key') is not None:
            self.bytecode_oss_key = m.get('bytecode_oss_key')
        if m.get('bytecode_oss_url') is not None:
            self.bytecode_oss_url = m.get('bytecode_oss_url')
        if m.get('identity') is not None:
            self.identity = m.get('identity')
        if m.get('instance_name') is not None:
            self.instance_name = m.get('instance_name')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('publish') is not None:
            self.publish = m.get('publish')
        if m.get('tx_hash') is not None:
            self.tx_hash = m.get('tx_hash')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class ALiYunChain(TeaModel):
    def __init__(
        self,
        notary_blockchain: ALiYunNotaryBlockchain = None,
        contract_blockchain: ALiYunContractBlockchain = None,
        old_contract_blockchain: ALiYunOldContractBlockchain = None,
    ):
        # notary_blockchain
        self.notary_blockchain = notary_blockchain
        # contract_blockchain
        self.contract_blockchain = contract_blockchain
        # old_contract_blockchain
        self.old_contract_blockchain = old_contract_blockchain

    def validate(self):
        if self.notary_blockchain:
            self.notary_blockchain.validate()
        if self.contract_blockchain:
            self.contract_blockchain.validate()
        if self.old_contract_blockchain:
            self.old_contract_blockchain.validate()

    def to_map(self):
        result = dict()
        if self.notary_blockchain is not None:
            result['notary_blockchain'] = self.notary_blockchain.to_map()
        if self.contract_blockchain is not None:
            result['contract_blockchain'] = self.contract_blockchain.to_map()
        if self.old_contract_blockchain is not None:
            result['old_contract_blockchain'] = self.old_contract_blockchain.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('notary_blockchain') is not None:
            temp_model = ALiYunNotaryBlockchain()
            self.notary_blockchain = temp_model.from_map(m['notary_blockchain'])
        if m.get('contract_blockchain') is not None:
            temp_model = ALiYunContractBlockchain()
            self.contract_blockchain = temp_model.from_map(m['contract_blockchain'])
        if m.get('old_contract_blockchain') is not None:
            temp_model = ALiYunOldContractBlockchain()
            self.old_contract_blockchain = temp_model.from_map(m['old_contract_blockchain'])
        return self


class RakeBackInfo(TeaModel):
    def __init__(
        self,
        level: int = None,
        parent_id: str = None,
        promoter_id: str = None,
        quota: str = None,
        rate: str = None,
    ):
        # 推广层级
        self.level = level
        # 上级推广订单id
        self.parent_id = parent_id
        # 推广人id
        self.promoter_id = promoter_id
        # 返佣额度
        self.quota = quota
        # 返佣比例 10表示10%\
        self.rate = rate

    def validate(self):
        self.validate_required(self.level, 'level')
        self.validate_required(self.parent_id, 'parent_id')
        self.validate_required(self.promoter_id, 'promoter_id')
        self.validate_required(self.quota, 'quota')
        self.validate_required(self.rate, 'rate')

    def to_map(self):
        result = dict()
        if self.level is not None:
            result['level'] = self.level
        if self.parent_id is not None:
            result['parent_id'] = self.parent_id
        if self.promoter_id is not None:
            result['promoter_id'] = self.promoter_id
        if self.quota is not None:
            result['quota'] = self.quota
        if self.rate is not None:
            result['rate'] = self.rate
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('level') is not None:
            self.level = m.get('level')
        if m.get('parent_id') is not None:
            self.parent_id = m.get('parent_id')
        if m.get('promoter_id') is not None:
            self.promoter_id = m.get('promoter_id')
        if m.get('quota') is not None:
            self.quota = m.get('quota')
        if m.get('rate') is not None:
            self.rate = m.get('rate')
        return self


class ChoiceTappInfo(TeaModel):
    def __init__(
        self,
        tapp_name: str = None,
        tapp_version: int = None,
        service_id: str = None,
    ):
        # 选择的tapp的名字
        self.tapp_name = tapp_name
        # 版本号，如果不填就选择最新的版本
        self.tapp_version = tapp_version
        # 该tapp将被声明在did doc中的id
        self.service_id = service_id

    def validate(self):
        self.validate_required(self.tapp_name, 'tapp_name')
        self.validate_required(self.service_id, 'service_id')

    def to_map(self):
        result = dict()
        if self.tapp_name is not None:
            result['tapp_name'] = self.tapp_name
        if self.tapp_version is not None:
            result['tapp_version'] = self.tapp_version
        if self.service_id is not None:
            result['service_id'] = self.service_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('tapp_name') is not None:
            self.tapp_name = m.get('tapp_name')
        if m.get('tapp_version') is not None:
            self.tapp_version = m.get('tapp_version')
        if m.get('service_id') is not None:
            self.service_id = m.get('service_id')
        return self


class PublicKeyRelation(TeaModel):
    def __init__(
        self,
        issuer_id: str = None,
        recipient_id: str = None,
    ):
        # 公钥颁发者ID
        self.issuer_id = issuer_id
        # 公钥接受者ID
        self.recipient_id = recipient_id

    def validate(self):
        self.validate_required(self.issuer_id, 'issuer_id')
        self.validate_required(self.recipient_id, 'recipient_id')

    def to_map(self):
        result = dict()
        if self.issuer_id is not None:
            result['issuer_id'] = self.issuer_id
        if self.recipient_id is not None:
            result['recipient_id'] = self.recipient_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('issuer_id') is not None:
            self.issuer_id = m.get('issuer_id')
        if m.get('recipient_id') is not None:
            self.recipient_id = m.get('recipient_id')
        return self


class VcTransmitCnf(TeaModel):
    def __init__(
        self,
        signature: str = None,
        tx_hash: str = None,
        verifier_id: str = None,
    ):
        # 针对tx_hash的签名
        self.signature = signature
        # 交易hash
        self.tx_hash = tx_hash
        # vc传输目标did
        self.verifier_id = verifier_id

    def validate(self):
        self.validate_required(self.signature, 'signature')
        self.validate_required(self.tx_hash, 'tx_hash')
        self.validate_required(self.verifier_id, 'verifier_id')

    def to_map(self):
        result = dict()
        if self.signature is not None:
            result['signature'] = self.signature
        if self.tx_hash is not None:
            result['tx_hash'] = self.tx_hash
        if self.verifier_id is not None:
            result['verifier_id'] = self.verifier_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('signature') is not None:
            self.signature = m.get('signature')
        if m.get('tx_hash') is not None:
            self.tx_hash = m.get('tx_hash')
        if m.get('verifier_id') is not None:
            self.verifier_id = m.get('verifier_id')
        return self


class VcUserRegisterPayload(TeaModel):
    def __init__(
        self,
        public_key: str = None,
        vc_channel: str = None,
    ):
        # 用户did对应的授权公钥
        self.public_key = public_key
        # 业务区块连的bizid
        self.vc_channel = vc_channel

    def validate(self):
        if self.vc_channel is not None:
            self.validate_max_length(self.vc_channel, 'vc_channel', 32)

    def to_map(self):
        result = dict()
        if self.public_key is not None:
            result['public_key'] = self.public_key
        if self.vc_channel is not None:
            result['vc_channel'] = self.vc_channel
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('public_key') is not None:
            self.public_key = m.get('public_key')
        if m.get('vc_channel') is not None:
            self.vc_channel = m.get('vc_channel')
        return self


class TransactionPo(TeaModel):
    def __init__(
        self,
        block_hash: str = None,
        from_: str = None,
        gas_used: int = None,
        hash: str = None,
        height: int = None,
        result: str = None,
        timestamp: int = None,
        to: str = None,
        tx_type: int = None,
        value: int = None,
    ):
        # 交易所在块hash
        self.block_hash = block_hash
        # 交易来源
        self.from_ = from_
        # gas消耗
        self.gas_used = gas_used
        # 交易hash
        self.hash = hash
        # 交易所在块 块高
        self.height = height
        # 交易返回结果
        self.result = result
        # 交易时间
        self.timestamp = timestamp
        # 交易地址
        self.to = to
        # 交易类型 同SDK
        self.tx_type = tx_type
        # 转账额度
        self.value = value

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.block_hash is not None:
            result['block_hash'] = self.block_hash
        if self.from_ is not None:
            result['from'] = self.from_
        if self.gas_used is not None:
            result['gas_used'] = self.gas_used
        if self.hash is not None:
            result['hash'] = self.hash
        if self.height is not None:
            result['height'] = self.height
        if self.result is not None:
            result['result'] = self.result
        if self.timestamp is not None:
            result['timestamp'] = self.timestamp
        if self.to is not None:
            result['to'] = self.to
        if self.tx_type is not None:
            result['tx_type'] = self.tx_type
        if self.value is not None:
            result['value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('block_hash') is not None:
            self.block_hash = m.get('block_hash')
        if m.get('from') is not None:
            self.from_ = m.get('from')
        if m.get('gas_used') is not None:
            self.gas_used = m.get('gas_used')
        if m.get('hash') is not None:
            self.hash = m.get('hash')
        if m.get('height') is not None:
            self.height = m.get('height')
        if m.get('result') is not None:
            self.result = m.get('result')
        if m.get('timestamp') is not None:
            self.timestamp = m.get('timestamp')
        if m.get('to') is not None:
            self.to = m.get('to')
        if m.get('tx_type') is not None:
            self.tx_type = m.get('tx_type')
        if m.get('value') is not None:
            self.value = m.get('value')
        return self


class AccountInfo(TeaModel):
    def __init__(
        self,
        ep_amount: int = None,
        ep_code: str = None,
    ):
        # 版通数量
        self.ep_amount = ep_amount
        # 版通代码
        self.ep_code = ep_code

    def validate(self):
        self.validate_required(self.ep_amount, 'ep_amount')
        self.validate_required(self.ep_code, 'ep_code')

    def to_map(self):
        result = dict()
        if self.ep_amount is not None:
            result['ep_amount'] = self.ep_amount
        if self.ep_code is not None:
            result['ep_code'] = self.ep_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ep_amount') is not None:
            self.ep_amount = m.get('ep_amount')
        if m.get('ep_code') is not None:
            self.ep_code = m.get('ep_code')
        return self


class DeriveDid(TeaModel):
    def __init__(
        self,
        childdid: str = None,
        childdiddoc: str = None,
        code: str = None,
    ):
        # 派生的子did
        self.childdid = childdid
        # 子did 的did doc
        self.childdiddoc = childdiddoc
        # 用户输入用于派生子did的派生码
        self.code = code

    def validate(self):
        self.validate_required(self.childdid, 'childdid')
        self.validate_required(self.childdiddoc, 'childdiddoc')
        self.validate_required(self.code, 'code')

    def to_map(self):
        result = dict()
        if self.childdid is not None:
            result['childdid'] = self.childdid
        if self.childdiddoc is not None:
            result['childdiddoc'] = self.childdiddoc
        if self.code is not None:
            result['code'] = self.code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('childdid') is not None:
            self.childdid = m.get('childdid')
        if m.get('childdiddoc') is not None:
            self.childdiddoc = m.get('childdiddoc')
        if m.get('code') is not None:
            self.code = m.get('code')
        return self


class DidDetail(TeaModel):
    def __init__(
        self,
        controller: str = None,
        did: str = None,
        did_doc: str = None,
    ):
        # 控制者的did描述符
        self.controller = controller
        # did描述符
        self.did = did
        # did doc
        self.did_doc = did_doc

    def validate(self):
        self.validate_required(self.controller, 'controller')
        self.validate_required(self.did, 'did')
        self.validate_required(self.did_doc, 'did_doc')

    def to_map(self):
        result = dict()
        if self.controller is not None:
            result['controller'] = self.controller
        if self.did is not None:
            result['did'] = self.did
        if self.did_doc is not None:
            result['did_doc'] = self.did_doc
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('controller') is not None:
            self.controller = m.get('controller')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('did_doc') is not None:
            self.did_doc = m.get('did_doc')
        return self


class ALiYunChainStatics(TeaModel):
    def __init__(
        self,
        alias: str = None,
        dt: int = None,
        trans_count: int = None,
        last_sum_block_height: int = None,
        creat_time: int = None,
    ):
        # alias
        self.alias = alias
        # Dt
        self.dt = dt
        # trans_count
        self.trans_count = trans_count
        # last_sum_block_height
        self.last_sum_block_height = last_sum_block_height
        # creat_time
        self.creat_time = creat_time

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.alias is not None:
            result['alias'] = self.alias
        if self.dt is not None:
            result['dt'] = self.dt
        if self.trans_count is not None:
            result['trans_count'] = self.trans_count
        if self.last_sum_block_height is not None:
            result['last_sum_block_height'] = self.last_sum_block_height
        if self.creat_time is not None:
            result['creat_time'] = self.creat_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('alias') is not None:
            self.alias = m.get('alias')
        if m.get('dt') is not None:
            self.dt = m.get('dt')
        if m.get('trans_count') is not None:
            self.trans_count = m.get('trans_count')
        if m.get('last_sum_block_height') is not None:
            self.last_sum_block_height = m.get('last_sum_block_height')
        if m.get('creat_time') is not None:
            self.creat_time = m.get('creat_time')
        return self


class ALiYunTransactionResult(TeaModel):
    def __init__(
        self,
        block_hash: str = None,
        block_height: int = None,
        block_version: str = None,
        create_time: int = None,
        hash: str = None,
        transaction: ALiYunTransaction = None,
    ):
        # block_hash
        self.block_hash = block_hash
        # block_height
        self.block_height = block_height
        # block_version
        self.block_version = block_version
        # create_time
        self.create_time = create_time
        # hash
        self.hash = hash
        # Transaction
        self.transaction = transaction

    def validate(self):
        if self.transaction:
            self.transaction.validate()

    def to_map(self):
        result = dict()
        if self.block_hash is not None:
            result['block_hash'] = self.block_hash
        if self.block_height is not None:
            result['block_height'] = self.block_height
        if self.block_version is not None:
            result['block_version'] = self.block_version
        if self.create_time is not None:
            result['create_time'] = self.create_time
        if self.hash is not None:
            result['hash'] = self.hash
        if self.transaction is not None:
            result['transaction'] = self.transaction.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('block_hash') is not None:
            self.block_hash = m.get('block_hash')
        if m.get('block_height') is not None:
            self.block_height = m.get('block_height')
        if m.get('block_version') is not None:
            self.block_version = m.get('block_version')
        if m.get('create_time') is not None:
            self.create_time = m.get('create_time')
        if m.get('hash') is not None:
            self.hash = m.get('hash')
        if m.get('transaction') is not None:
            temp_model = ALiYunTransaction()
            self.transaction = temp_model.from_map(m['transaction'])
        return self


class AuthorizationRule(TeaModel):
    def __init__(
        self,
        source: str = None,
        index: str = None,
        type: str = None,
        expression: str = None,
        content: str = None,
    ):
        # 规则来源
        self.source = source
        # 规则索引
        self.index = index
        # 规则类型
        self.type = type
        # 规则表达式
        self.expression = expression
        # 规则内容
        self.content = content

    def validate(self):
        self.validate_required(self.source, 'source')
        self.validate_required(self.index, 'index')
        self.validate_required(self.type, 'type')
        self.validate_required(self.expression, 'expression')
        self.validate_required(self.content, 'content')

    def to_map(self):
        result = dict()
        if self.source is not None:
            result['source'] = self.source
        if self.index is not None:
            result['index'] = self.index
        if self.type is not None:
            result['type'] = self.type
        if self.expression is not None:
            result['expression'] = self.expression
        if self.content is not None:
            result['content'] = self.content
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('source') is not None:
            self.source = m.get('source')
        if m.get('index') is not None:
            self.index = m.get('index')
        if m.get('type') is not None:
            self.type = m.get('type')
        if m.get('expression') is not None:
            self.expression = m.get('expression')
        if m.get('content') is not None:
            self.content = m.get('content')
        return self


class AddVC(TeaModel):
    def __init__(
        self,
        content_hash: str = None,
        issuer_hash: str = None,
        status: str = None,
        subject_hash: str = None,
        vc_id: str = None,
    ):
        # vc原文hash
        self.content_hash = content_hash
        # issuer后缀的hash值
        self.issuer_hash = issuer_hash
        # valid or invalid
        self.status = status
        # 接收者后缀hash值
        self.subject_hash = subject_hash
        # 可验证声明id
        self.vc_id = vc_id

    def validate(self):
        self.validate_required(self.content_hash, 'content_hash')
        self.validate_required(self.issuer_hash, 'issuer_hash')
        self.validate_required(self.status, 'status')
        self.validate_required(self.subject_hash, 'subject_hash')
        self.validate_required(self.vc_id, 'vc_id')

    def to_map(self):
        result = dict()
        if self.content_hash is not None:
            result['content_hash'] = self.content_hash
        if self.issuer_hash is not None:
            result['issuer_hash'] = self.issuer_hash
        if self.status is not None:
            result['status'] = self.status
        if self.subject_hash is not None:
            result['subject_hash'] = self.subject_hash
        if self.vc_id is not None:
            result['vc_id'] = self.vc_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('content_hash') is not None:
            self.content_hash = m.get('content_hash')
        if m.get('issuer_hash') is not None:
            self.issuer_hash = m.get('issuer_hash')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('subject_hash') is not None:
            self.subject_hash = m.get('subject_hash')
        if m.get('vc_id') is not None:
            self.vc_id = m.get('vc_id')
        return self


class ALiYunChainExecuteOrder(TeaModel):
    def __init__(
        self,
        user_request_id: str = None,
        data: str = None,
        success: bool = None,
        code: str = None,
        message: str = None,
        synchro: bool = None,
    ):
        # user_request_id
        self.user_request_id = user_request_id
        # data
        self.data = data
        # success
        self.success = success
        # code
        self.code = code
        # message
        self.message = message
        # synchro
        self.synchro = synchro

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.user_request_id is not None:
            result['user_request_id'] = self.user_request_id
        if self.data is not None:
            result['data'] = self.data
        if self.success is not None:
            result['success'] = self.success
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.synchro is not None:
            result['synchro'] = self.synchro
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('user_request_id') is not None:
            self.user_request_id = m.get('user_request_id')
        if m.get('data') is not None:
            self.data = m.get('data')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('synchro') is not None:
            self.synchro = m.get('synchro')
        return self


class UpdateVCStatus(TeaModel):
    def __init__(
        self,
        status: str = None,
        vc_id: str = None,
    ):
        # valid or invalid
        self.status = status
        # 可验证声明id
        self.vc_id = vc_id

    def validate(self):
        self.validate_required(self.status, 'status')
        self.validate_required(self.vc_id, 'vc_id')

    def to_map(self):
        result = dict()
        if self.status is not None:
            result['status'] = self.status
        if self.vc_id is not None:
            result['vc_id'] = self.vc_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('vc_id') is not None:
            self.vc_id = m.get('vc_id')
        return self


class ALiYunChainConfigOption(TeaModel):
    def __init__(
        self,
        config_option: str = None,
        show_name: str = None,
        enable: bool = None,
    ):
        # config_option
        self.config_option = config_option
        # show_name
        self.show_name = show_name
        # enable
        self.enable = enable

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.config_option is not None:
            result['config_option'] = self.config_option
        if self.show_name is not None:
            result['show_name'] = self.show_name
        if self.enable is not None:
            result['enable'] = self.enable
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('config_option') is not None:
            self.config_option = m.get('config_option')
        if m.get('show_name') is not None:
            self.show_name = m.get('show_name')
        if m.get('enable') is not None:
            self.enable = m.get('enable')
        return self


class LogisticFinUser(TeaModel):
    def __init__(
        self,
        drawee_tax_no: str = None,
        org_id: str = None,
        user_id: str = None,
    ):
        # 纳税人识别号
        self.drawee_tax_no = drawee_tax_no
        # 业务方企业id
        self.org_id = org_id
        # 业务方用户id
        self.user_id = user_id

    def validate(self):
        self.validate_required(self.drawee_tax_no, 'drawee_tax_no')
        self.validate_required(self.org_id, 'org_id')
        self.validate_required(self.user_id, 'user_id')

    def to_map(self):
        result = dict()
        if self.drawee_tax_no is not None:
            result['drawee_tax_no'] = self.drawee_tax_no
        if self.org_id is not None:
            result['org_id'] = self.org_id
        if self.user_id is not None:
            result['user_id'] = self.user_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('drawee_tax_no') is not None:
            self.drawee_tax_no = m.get('drawee_tax_no')
        if m.get('org_id') is not None:
            self.org_id = m.get('org_id')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        return self


class BlockchainBrowserLatestTransaction(TeaModel):
    def __init__(
        self,
        create_time: int = None,
        from_: str = None,
        to: str = None,
        hash: str = None,
        transaction_type: str = None,
    ):
        # create_time
        self.create_time = create_time
        # from
        self.from_ = from_
        # to
        self.to = to
        # hash
        self.hash = hash
        # transactionV10Type
        self.transaction_type = transaction_type

    def validate(self):
        self.validate_required(self.create_time, 'create_time')
        self.validate_required(self.from_, 'from_')
        self.validate_required(self.to, 'to')
        self.validate_required(self.hash, 'hash')
        self.validate_required(self.transaction_type, 'transaction_type')

    def to_map(self):
        result = dict()
        if self.create_time is not None:
            result['create_time'] = self.create_time
        if self.from_ is not None:
            result['from'] = self.from_
        if self.to is not None:
            result['to'] = self.to
        if self.hash is not None:
            result['hash'] = self.hash
        if self.transaction_type is not None:
            result['transaction_type'] = self.transaction_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('create_time') is not None:
            self.create_time = m.get('create_time')
        if m.get('from') is not None:
            self.from_ = m.get('from')
        if m.get('to') is not None:
            self.to = m.get('to')
        if m.get('hash') is not None:
            self.hash = m.get('hash')
        if m.get('transaction_type') is not None:
            self.transaction_type = m.get('transaction_type')
        return self


class UpdateDidServiceList(TeaModel):
    def __init__(
        self,
        previous_version: int = None,
        service_list: List[DisServicesInfo] = None,
    ):
        # 待更新did之前的版本号
        self.previous_version = previous_version
        # 服务信息列表
        self.service_list = service_list

    def validate(self):
        self.validate_required(self.previous_version, 'previous_version')
        self.validate_required(self.service_list, 'service_list')
        if self.service_list:
            for k in self.service_list:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.previous_version is not None:
            result['previous_version'] = self.previous_version
        result['service_list'] = []
        if self.service_list is not None:
            for k in self.service_list:
                result['service_list'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('previous_version') is not None:
            self.previous_version = m.get('previous_version')
        self.service_list = []
        if m.get('service_list') is not None:
            for k in m.get('service_list'):
                temp_model = DisServicesInfo()
                self.service_list.append(temp_model.from_map(k))
        return self


class ALiYunCertificateApplications(TeaModel):
    def __init__(
        self,
        pagination: ALiYunPagination = None,
        certificate_applications: List[ALiYunCertificateApplication] = None,
    ):
        # pagination
        self.pagination = pagination
        # certificate_application
        self.certificate_applications = certificate_applications

    def validate(self):
        if self.pagination:
            self.pagination.validate()
        if self.certificate_applications:
            for k in self.certificate_applications:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.pagination is not None:
            result['pagination'] = self.pagination.to_map()
        result['certificate_applications'] = []
        if self.certificate_applications is not None:
            for k in self.certificate_applications:
                result['certificate_applications'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('pagination') is not None:
            temp_model = ALiYunPagination()
            self.pagination = temp_model.from_map(m['pagination'])
        self.certificate_applications = []
        if m.get('certificate_applications') is not None:
            for k in m.get('certificate_applications'):
                temp_model = ALiYunCertificateApplication()
                self.certificate_applications.append(temp_model.from_map(k))
        return self


class Claim(TeaModel):
    def __init__(
        self,
        claim_content: str = None,
        claim_type: str = None,
        expire: int = None,
        did: str = None,
        name: str = None,
    ):
        # 一个json的string，内容包含具体需要的声明，不同业务场景不同。
        self.claim_content = claim_content
        # 如果在相同的biz_type下，还需要针对声明claim进行细化划分，可以使用此字段。
        self.claim_type = claim_type
        # 申请声明颁发后的有效期，可选参数，如果不指定则默认申请永久有效。
        self.expire = expire
        # 授权颁发可验证声明的目标did信息，通常为机构或组织的did
        self.did = did
        # 目标待授权的名称，标定唯一性，与claim内容配合使用，如果不指定did可以考虑使用此字段。
        self.name = name

    def validate(self):
        self.validate_required(self.claim_content, 'claim_content')

    def to_map(self):
        result = dict()
        if self.claim_content is not None:
            result['claim_content'] = self.claim_content
        if self.claim_type is not None:
            result['claim_type'] = self.claim_type
        if self.expire is not None:
            result['expire'] = self.expire
        if self.did is not None:
            result['did'] = self.did
        if self.name is not None:
            result['name'] = self.name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('claim_content') is not None:
            self.claim_content = m.get('claim_content')
        if m.get('claim_type') is not None:
            self.claim_type = m.get('claim_type')
        if m.get('expire') is not None:
            self.expire = m.get('expire')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('name') is not None:
            self.name = m.get('name')
        return self


class BlockchainBrowserTransactionStatistic(TeaModel):
    def __init__(
        self,
        bizid: str = None,
        create_time: int = None,
        date_time: str = None,
        last_sum_block_height: int = None,
        trans_count: int = None,
    ):
        # 蚂蚁链id
        self.bizid = bizid
        # 开始时间
        self.create_time = create_time
        # 时间点
        self.date_time = date_time
        # 统计时间内最新块高度
        self.last_sum_block_height = last_sum_block_height
        # 统计周期内交易的数量
        self.trans_count = trans_count

    def validate(self):
        self.validate_required(self.bizid, 'bizid')
        self.validate_required(self.create_time, 'create_time')
        self.validate_required(self.date_time, 'date_time')
        self.validate_required(self.last_sum_block_height, 'last_sum_block_height')
        self.validate_required(self.trans_count, 'trans_count')

    def to_map(self):
        result = dict()
        if self.bizid is not None:
            result['bizid'] = self.bizid
        if self.create_time is not None:
            result['create_time'] = self.create_time
        if self.date_time is not None:
            result['date_time'] = self.date_time
        if self.last_sum_block_height is not None:
            result['last_sum_block_height'] = self.last_sum_block_height
        if self.trans_count is not None:
            result['trans_count'] = self.trans_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('bizid') is not None:
            self.bizid = m.get('bizid')
        if m.get('create_time') is not None:
            self.create_time = m.get('create_time')
        if m.get('date_time') is not None:
            self.date_time = m.get('date_time')
        if m.get('last_sum_block_height') is not None:
            self.last_sum_block_height = m.get('last_sum_block_height')
        if m.get('trans_count') is not None:
            self.trans_count = m.get('trans_count')
        return self


class CapitalInfo(TeaModel):
    def __init__(
        self,
        balance_log: str = None,
        shop_id: str = None,
        time_log: int = None,
        tx_hash: str = None,
    ):
        # 记录流水额度
        self.balance_log = balance_log
        # 商户id
        self.shop_id = shop_id
        # 记录时间
        self.time_log = time_log
        # 链上地址
        self.tx_hash = tx_hash

    def validate(self):
        self.validate_required(self.balance_log, 'balance_log')
        self.validate_required(self.shop_id, 'shop_id')
        self.validate_required(self.time_log, 'time_log')
        self.validate_required(self.tx_hash, 'tx_hash')

    def to_map(self):
        result = dict()
        if self.balance_log is not None:
            result['balance_log'] = self.balance_log
        if self.shop_id is not None:
            result['shop_id'] = self.shop_id
        if self.time_log is not None:
            result['time_log'] = self.time_log
        if self.tx_hash is not None:
            result['tx_hash'] = self.tx_hash
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('balance_log') is not None:
            self.balance_log = m.get('balance_log')
        if m.get('shop_id') is not None:
            self.shop_id = m.get('shop_id')
        if m.get('time_log') is not None:
            self.time_log = m.get('time_log')
        if m.get('tx_hash') is not None:
            self.tx_hash = m.get('tx_hash')
        return self


class VcControllerAddUserRegisterPayload(TeaModel):
    def __init__(
        self,
        did: str = None,
        public_key: str = None,
        vc_channel: str = None,
    ):
        # 注册用户did
        self.did = did
        # 用户did对应的授权公钥
        self.public_key = public_key
        # 业务区块连的bizid
        self.vc_channel = vc_channel

    def validate(self):
        self.validate_required(self.did, 'did')
        self.validate_required(self.public_key, 'public_key')
        if self.vc_channel is not None:
            self.validate_max_length(self.vc_channel, 'vc_channel', 32)

    def to_map(self):
        result = dict()
        if self.did is not None:
            result['did'] = self.did
        if self.public_key is not None:
            result['public_key'] = self.public_key
        if self.vc_channel is not None:
            result['vc_channel'] = self.vc_channel
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('public_key') is not None:
            self.public_key = m.get('public_key')
        if m.get('vc_channel') is not None:
            self.vc_channel = m.get('vc_channel')
        return self


class AccountPo(TeaModel):
    def __init__(
        self,
        account: str = None,
        create_time: int = None,
        hash: str = None,
        parent: str = None,
    ):
        # 账户 hash
        self.account = account
        # 账户创建时间
        self.create_time = create_time
        # 创建该账户的交易hash
        self.hash = hash
        # 创建该账户的 账户hash
        self.parent = parent

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.account is not None:
            result['account'] = self.account
        if self.create_time is not None:
            result['create_time'] = self.create_time
        if self.hash is not None:
            result['hash'] = self.hash
        if self.parent is not None:
            result['parent'] = self.parent
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('account') is not None:
            self.account = m.get('account')
        if m.get('create_time') is not None:
            self.create_time = m.get('create_time')
        if m.get('hash') is not None:
            self.hash = m.get('hash')
        if m.get('parent') is not None:
            self.parent = m.get('parent')
        return self


class ListDataEntityResult(TeaModel):
    def __init__(
        self,
        data_model: DataModel = None,
        data_entity: DataEntity = None,
    ):
        # 数据模型信息
        self.data_model = data_model
        # 数据资产信息
        self.data_entity = data_entity

    def validate(self):
        self.validate_required(self.data_model, 'data_model')
        if self.data_model:
            self.data_model.validate()
        self.validate_required(self.data_entity, 'data_entity')
        if self.data_entity:
            self.data_entity.validate()

    def to_map(self):
        result = dict()
        if self.data_model is not None:
            result['data_model'] = self.data_model.to_map()
        if self.data_entity is not None:
            result['data_entity'] = self.data_entity.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('data_model') is not None:
            temp_model = DataModel()
            self.data_model = temp_model.from_map(m['data_model'])
        if m.get('data_entity') is not None:
            temp_model = DataEntity()
            self.data_entity = temp_model.from_map(m['data_entity'])
        return self


class ALiYunChainMiniAppLog(TeaModel):
    def __init__(
        self,
        access_count: int = None,
        access_alipay_account_count: int = None,
    ):
        # access_count
        self.access_count = access_count
        # access_alipay_account_count
        self.access_alipay_account_count = access_alipay_account_count

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.access_count is not None:
            result['access_count'] = self.access_count
        if self.access_alipay_account_count is not None:
            result['access_alipay_account_count'] = self.access_alipay_account_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('access_count') is not None:
            self.access_count = m.get('access_count')
        if m.get('access_alipay_account_count') is not None:
            self.access_alipay_account_count = m.get('access_alipay_account_count')
        return self


class EntityInfo(TeaModel):
    def __init__(
        self,
        type: int = None,
        value: str = None,
    ):
        # 0，身份证；1，电话；2，email，3，企业营业执照号
        self.type = type
        # 具体号码
        self.value = value

    def validate(self):
        self.validate_required(self.type, 'type')
        self.validate_required(self.value, 'value')

    def to_map(self):
        result = dict()
        if self.type is not None:
            result['type'] = self.type
        if self.value is not None:
            result['value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('type') is not None:
            self.type = m.get('type')
        if m.get('value') is not None:
            self.value = m.get('value')
        return self


class MyChainInfo(TeaModel):
    def __init__(
        self,
        biz_id: str = None,
        tenant: str = None,
    ):
        # 链id
        self.biz_id = biz_id
        # 授权租户id
        self.tenant = tenant

    def validate(self):
        self.validate_required(self.biz_id, 'biz_id')
        self.validate_required(self.tenant, 'tenant')

    def to_map(self):
        result = dict()
        if self.biz_id is not None:
            result['biz_id'] = self.biz_id
        if self.tenant is not None:
            result['tenant'] = self.tenant
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('biz_id') is not None:
            self.biz_id = m.get('biz_id')
        if m.get('tenant') is not None:
            self.tenant = m.get('tenant')
        return self


class NotaryMetaParam(TeaModel):
    def __init__(
        self,
        phase: str = None,
        properties: str = None,
        token: str = None,
    ):
        # 描述本条存证在存证事务中的阶段，用户可自行维护
        self.phase = phase
        # 扩展字段
        self.properties = properties
        # 全局唯一的存证事务ID
        self.token = token

    def validate(self):
        self.validate_required(self.phase, 'phase')
        self.validate_required(self.token, 'token')

    def to_map(self):
        result = dict()
        if self.phase is not None:
            result['phase'] = self.phase
        if self.properties is not None:
            result['properties'] = self.properties
        if self.token is not None:
            result['token'] = self.token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('phase') is not None:
            self.phase = m.get('phase')
        if m.get('properties') is not None:
            self.properties = m.get('properties')
        if m.get('token') is not None:
            self.token = m.get('token')
        return self


class IssueInfo(TeaModel):
    def __init__(
        self,
        batch_id: str = None,
        contract_id: str = None,
        credit_limit: str = None,
        err_msg: str = None,
        expire_date: str = None,
        issue_date: str = None,
        issue_id: str = None,
        status: int = None,
        waybill_id: str = None,
    ):
        # 信用流转批次号
        self.batch_id = batch_id
        # 合同编号
        self.contract_id = contract_id
        # 信用凭证额度
        self.credit_limit = credit_limit
        # 失败原因信息
        self.err_msg = err_msg
        # 信用凭证到期时间
        self.expire_date = expire_date
        # 信用凭证发起时间
        self.issue_date = issue_date
        # 信用流转凭证
        self.issue_id = issue_id
        # 发行结果状态
        # -1:发行失败状态， 0:未完成状态， 1:已发行状态
        self.status = status
        # 发行信用流转的运单号
        self.waybill_id = waybill_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.batch_id is not None:
            result['batch_id'] = self.batch_id
        if self.contract_id is not None:
            result['contract_id'] = self.contract_id
        if self.credit_limit is not None:
            result['credit_limit'] = self.credit_limit
        if self.err_msg is not None:
            result['err_msg'] = self.err_msg
        if self.expire_date is not None:
            result['expire_date'] = self.expire_date
        if self.issue_date is not None:
            result['issue_date'] = self.issue_date
        if self.issue_id is not None:
            result['issue_id'] = self.issue_id
        if self.status is not None:
            result['status'] = self.status
        if self.waybill_id is not None:
            result['waybill_id'] = self.waybill_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('batch_id') is not None:
            self.batch_id = m.get('batch_id')
        if m.get('contract_id') is not None:
            self.contract_id = m.get('contract_id')
        if m.get('credit_limit') is not None:
            self.credit_limit = m.get('credit_limit')
        if m.get('err_msg') is not None:
            self.err_msg = m.get('err_msg')
        if m.get('expire_date') is not None:
            self.expire_date = m.get('expire_date')
        if m.get('issue_date') is not None:
            self.issue_date = m.get('issue_date')
        if m.get('issue_id') is not None:
            self.issue_id = m.get('issue_id')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('waybill_id') is not None:
            self.waybill_id = m.get('waybill_id')
        return self


class ValueUnitPair(TeaModel):
    def __init__(
        self,
        value: int = None,
        unit: str = None,
    ):
        # 数值
        self.value = value
        # 单位
        self.unit = unit

    def validate(self):
        self.validate_required(self.value, 'value')
        self.validate_required(self.unit, 'unit')

    def to_map(self):
        result = dict()
        if self.value is not None:
            result['value'] = self.value
        if self.unit is not None:
            result['unit'] = self.unit
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('value') is not None:
            self.value = m.get('value')
        if m.get('unit') is not None:
            self.unit = m.get('unit')
        return self


class AccountWholesaleParam(TeaModel):
    def __init__(
        self,
        ep_amount: int = None,
        user_account: str = None,
    ):
        # 批发数量
        self.ep_amount = ep_amount
        # 用户账户
        self.user_account = user_account

    def validate(self):
        self.validate_required(self.ep_amount, 'ep_amount')
        self.validate_required(self.user_account, 'user_account')

    def to_map(self):
        result = dict()
        if self.ep_amount is not None:
            result['ep_amount'] = self.ep_amount
        if self.user_account is not None:
            result['user_account'] = self.user_account
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ep_amount') is not None:
            self.ep_amount = m.get('ep_amount')
        if m.get('user_account') is not None:
            self.user_account = m.get('user_account')
        return self


class ALiYunChainBlockInfo(TeaModel):
    def __init__(
        self,
        alias: str = None,
        block_hash: str = None,
        root_tx_hash: str = None,
        height: int = None,
        previous_hash: str = None,
        create_time: int = None,
        biz_data: str = None,
        transaction_size: int = None,
        version: int = None,
        size: int = None,
    ):
        # alias
        self.alias = alias
        # block_hash
        self.block_hash = block_hash
        # root_tx_hash
        self.root_tx_hash = root_tx_hash
        # height
        self.height = height
        # previous_hash
        self.previous_hash = previous_hash
        # create_time
        self.create_time = create_time
        # biz_data
        self.biz_data = biz_data
        # transaction_size
        self.transaction_size = transaction_size
        # version
        self.version = version
        # size
        self.size = size

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.alias is not None:
            result['alias'] = self.alias
        if self.block_hash is not None:
            result['block_hash'] = self.block_hash
        if self.root_tx_hash is not None:
            result['root_tx_hash'] = self.root_tx_hash
        if self.height is not None:
            result['height'] = self.height
        if self.previous_hash is not None:
            result['previous_hash'] = self.previous_hash
        if self.create_time is not None:
            result['create_time'] = self.create_time
        if self.biz_data is not None:
            result['biz_data'] = self.biz_data
        if self.transaction_size is not None:
            result['transaction_size'] = self.transaction_size
        if self.version is not None:
            result['version'] = self.version
        if self.size is not None:
            result['size'] = self.size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('alias') is not None:
            self.alias = m.get('alias')
        if m.get('block_hash') is not None:
            self.block_hash = m.get('block_hash')
        if m.get('root_tx_hash') is not None:
            self.root_tx_hash = m.get('root_tx_hash')
        if m.get('height') is not None:
            self.height = m.get('height')
        if m.get('previous_hash') is not None:
            self.previous_hash = m.get('previous_hash')
        if m.get('create_time') is not None:
            self.create_time = m.get('create_time')
        if m.get('biz_data') is not None:
            self.biz_data = m.get('biz_data')
        if m.get('transaction_size') is not None:
            self.transaction_size = m.get('transaction_size')
        if m.get('version') is not None:
            self.version = m.get('version')
        if m.get('size') is not None:
            self.size = m.get('size')
        return self


class ALiYunHandleBabelMns(TeaModel):
    def __init__(
        self,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        # message
        self.message = message
        # request_id
        self.request_id = request_id
        # success
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.message is not None:
            result['message'] = self.message
        if self.request_id is not None:
            result['request_id'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('request_id') is not None:
            self.request_id = m.get('request_id')
        if m.get('success') is not None:
            self.success = m.get('success')
        return self


class UpdateDidService(TeaModel):
    def __init__(
        self,
        previous_version: int = None,
        service_id: str = None,
        service_info: DidServiceInfo = None,
        service_type: str = None,
    ):
        # 待更新did之前的版本号
        self.previous_version = previous_version
        # did doc中的service id
        self.service_id = service_id
        # 服务信息
        self.service_info = service_info
        # 服务类型
        self.service_type = service_type

    def validate(self):
        self.validate_required(self.previous_version, 'previous_version')
        self.validate_required(self.service_id, 'service_id')
        self.validate_required(self.service_info, 'service_info')
        if self.service_info:
            self.service_info.validate()
        self.validate_required(self.service_type, 'service_type')

    def to_map(self):
        result = dict()
        if self.previous_version is not None:
            result['previous_version'] = self.previous_version
        if self.service_id is not None:
            result['service_id'] = self.service_id
        if self.service_info is not None:
            result['service_info'] = self.service_info.to_map()
        if self.service_type is not None:
            result['service_type'] = self.service_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('previous_version') is not None:
            self.previous_version = m.get('previous_version')
        if m.get('service_id') is not None:
            self.service_id = m.get('service_id')
        if m.get('service_info') is not None:
            temp_model = DidServiceInfo()
            self.service_info = temp_model.from_map(m['service_info'])
        if m.get('service_type') is not None:
            self.service_type = m.get('service_type')
        return self


class AccountMappingResult(TeaModel):
    def __init__(
        self,
        baccount: str = None,
        message: str = None,
        status: str = None,
        uid: str = None,
    ):
        # 该账户在链上的唯一标示
        self.baccount = baccount
        # 当前账户映射结果描述语句
        self.message = message
        # 状态描述符
        self.status = status
        # 自有系统中该账户唯一标示
        self.uid = uid

    def validate(self):
        self.validate_required(self.baccount, 'baccount')
        self.validate_required(self.message, 'message')
        self.validate_required(self.status, 'status')
        self.validate_required(self.uid, 'uid')

    def to_map(self):
        result = dict()
        if self.baccount is not None:
            result['baccount'] = self.baccount
        if self.message is not None:
            result['message'] = self.message
        if self.status is not None:
            result['status'] = self.status
        if self.uid is not None:
            result['uid'] = self.uid
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('baccount') is not None:
            self.baccount = m.get('baccount')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('uid') is not None:
            self.uid = m.get('uid')
        return self


class IdentityParam(TeaModel):
    def __init__(
        self,
        agent: str = None,
        agent_id: str = None,
        cert_name: str = None,
        cert_no: str = None,
        cert_type: str = None,
        legal_person: str = None,
        legal_person_id: str = None,
        mobile_no: str = None,
        properties: str = None,
        user_type: str = None,
    ):
        # 经办人姓名
        self.agent = agent
        # 经办人身份证号
        self.agent_id = agent_id
        # 用户的姓名
        self.cert_name = cert_name
        # 用户的身份证号
        self.cert_no = cert_no
        # 用户证件类型，目前只支持IDENTITY_CARD
        self.cert_type = cert_type
        # 法人姓名，企业认证必选
        self.legal_person = legal_person
        # 法人身份证，企业认证必选
        self.legal_person_id = legal_person_id
        # 手机号码
        self.mobile_no = mobile_no
        # 扩展属性字段
        self.properties = properties
        # 用户类型，默认为PERSON
        self.user_type = user_type

    def validate(self):
        self.validate_required(self.cert_name, 'cert_name')
        self.validate_required(self.cert_no, 'cert_no')
        self.validate_required(self.cert_type, 'cert_type')

    def to_map(self):
        result = dict()
        if self.agent is not None:
            result['agent'] = self.agent
        if self.agent_id is not None:
            result['agent_id'] = self.agent_id
        if self.cert_name is not None:
            result['cert_name'] = self.cert_name
        if self.cert_no is not None:
            result['cert_no'] = self.cert_no
        if self.cert_type is not None:
            result['cert_type'] = self.cert_type
        if self.legal_person is not None:
            result['legal_person'] = self.legal_person
        if self.legal_person_id is not None:
            result['legal_person_id'] = self.legal_person_id
        if self.mobile_no is not None:
            result['mobile_no'] = self.mobile_no
        if self.properties is not None:
            result['properties'] = self.properties
        if self.user_type is not None:
            result['user_type'] = self.user_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('agent') is not None:
            self.agent = m.get('agent')
        if m.get('agent_id') is not None:
            self.agent_id = m.get('agent_id')
        if m.get('cert_name') is not None:
            self.cert_name = m.get('cert_name')
        if m.get('cert_no') is not None:
            self.cert_no = m.get('cert_no')
        if m.get('cert_type') is not None:
            self.cert_type = m.get('cert_type')
        if m.get('legal_person') is not None:
            self.legal_person = m.get('legal_person')
        if m.get('legal_person_id') is not None:
            self.legal_person_id = m.get('legal_person_id')
        if m.get('mobile_no') is not None:
            self.mobile_no = m.get('mobile_no')
        if m.get('properties') is not None:
            self.properties = m.get('properties')
        if m.get('user_type') is not None:
            self.user_type = m.get('user_type')
        return self


class UserBizKeyInfo(TeaModel):
    def __init__(
        self,
        granted_user: List[str] = None,
        key_name: str = None,
    ):
        # 拥有该密钥的用户列表
        self.granted_user = granted_user
        # 密钥名称
        self.key_name = key_name

    def validate(self):
        self.validate_required(self.granted_user, 'granted_user')
        self.validate_required(self.key_name, 'key_name')

    def to_map(self):
        result = dict()
        if self.granted_user is not None:
            result['granted_user'] = self.granted_user
        if self.key_name is not None:
            result['key_name'] = self.key_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('granted_user') is not None:
            self.granted_user = m.get('granted_user')
        if m.get('key_name') is not None:
            self.key_name = m.get('key_name')
        return self


class Curve(TeaModel):
    def __init__(
        self,
        date: str = None,
        value: str = None,
    ):
        # 分布以day为单位的日期
        self.date = date
        # 以day为单位的一天凭证颁发的数据量统计。
        self.value = value

    def validate(self):
        self.validate_required(self.date, 'date')
        self.validate_required(self.value, 'value')

    def to_map(self):
        result = dict()
        if self.date is not None:
            result['date'] = self.date
        if self.value is not None:
            result['value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('date') is not None:
            self.date = m.get('date')
        if m.get('value') is not None:
            self.value = m.get('value')
        return self


class ALiYunChainDownload(TeaModel):
    def __init__(
        self,
        private_key: str = None,
        download_path: ALiYunDownloadPath = None,
    ):
        # private_key
        self.private_key = private_key
        # download_path
        self.download_path = download_path

    def validate(self):
        if self.download_path:
            self.download_path.validate()

    def to_map(self):
        result = dict()
        if self.private_key is not None:
            result['private_key'] = self.private_key
        if self.download_path is not None:
            result['download_path'] = self.download_path.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('private_key') is not None:
            self.private_key = m.get('private_key')
        if m.get('download_path') is not None:
            temp_model = ALiYunDownloadPath()
            self.download_path = temp_model.from_map(m['download_path'])
        return self


class DidDeleteService(TeaModel):
    def __init__(
        self,
        previous_version: int = None,
        service_id: str = None,
    ):
        # 修改前did doc版本
        self.previous_version = previous_version
        # 指定服务的id
        self.service_id = service_id

    def validate(self):
        self.validate_required(self.previous_version, 'previous_version')
        self.validate_required(self.service_id, 'service_id')

    def to_map(self):
        result = dict()
        if self.previous_version is not None:
            result['previous_version'] = self.previous_version
        if self.service_id is not None:
            result['service_id'] = self.service_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('previous_version') is not None:
            self.previous_version = m.get('previous_version')
        if m.get('service_id') is not None:
            self.service_id = m.get('service_id')
        return self


class ALiYunChainResouceForSale(TeaModel):
    def __init__(
        self,
        region_id: str = None,
        type_list: List[str] = None,
    ):
        # region_id
        self.region_id = region_id
        # type_list
        self.type_list = type_list

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.region_id is not None:
            result['region_id'] = self.region_id
        if self.type_list is not None:
            result['type_list'] = self.type_list
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('region_id') is not None:
            self.region_id = m.get('region_id')
        if m.get('type_list') is not None:
            self.type_list = m.get('type_list')
        return self


class AuthorizationDetail(TeaModel):
    def __init__(
        self,
        authority_cert_id: str = None,
        authorization_id: str = None,
        block_num: int = None,
        expire: int = None,
        issuance_time: int = None,
        issuer: Participant = None,
        subject: Participant = None,
        tx_hash: str = None,
        owner: Participant = None,
    ):
        # 授权凭证ID
        self.authority_cert_id = authority_cert_id
        # 授权ID
        self.authorization_id = authorization_id
        # 区块号
        self.block_num = block_num
        # 过期时间
        self.expire = expire
        # 授权时间
        self.issuance_time = issuance_time
        # 授权人
        self.issuer = issuer
        # 被授权人
        self.subject = subject
        # 哈希
        self.tx_hash = tx_hash
        # 资产所有者
        self.owner = owner

    def validate(self):
        self.validate_required(self.authority_cert_id, 'authority_cert_id')
        self.validate_required(self.block_num, 'block_num')
        self.validate_required(self.issuance_time, 'issuance_time')
        self.validate_required(self.issuer, 'issuer')
        if self.issuer:
            self.issuer.validate()
        self.validate_required(self.subject, 'subject')
        if self.subject:
            self.subject.validate()
        self.validate_required(self.tx_hash, 'tx_hash')
        self.validate_required(self.owner, 'owner')
        if self.owner:
            self.owner.validate()

    def to_map(self):
        result = dict()
        if self.authority_cert_id is not None:
            result['authority_cert_id'] = self.authority_cert_id
        if self.authorization_id is not None:
            result['authorization_id'] = self.authorization_id
        if self.block_num is not None:
            result['block_num'] = self.block_num
        if self.expire is not None:
            result['expire'] = self.expire
        if self.issuance_time is not None:
            result['issuance_time'] = self.issuance_time
        if self.issuer is not None:
            result['issuer'] = self.issuer.to_map()
        if self.subject is not None:
            result['subject'] = self.subject.to_map()
        if self.tx_hash is not None:
            result['tx_hash'] = self.tx_hash
        if self.owner is not None:
            result['owner'] = self.owner.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('authority_cert_id') is not None:
            self.authority_cert_id = m.get('authority_cert_id')
        if m.get('authorization_id') is not None:
            self.authorization_id = m.get('authorization_id')
        if m.get('block_num') is not None:
            self.block_num = m.get('block_num')
        if m.get('expire') is not None:
            self.expire = m.get('expire')
        if m.get('issuance_time') is not None:
            self.issuance_time = m.get('issuance_time')
        if m.get('issuer') is not None:
            temp_model = Participant()
            self.issuer = temp_model.from_map(m['issuer'])
        if m.get('subject') is not None:
            temp_model = Participant()
            self.subject = temp_model.from_map(m['subject'])
        if m.get('tx_hash') is not None:
            self.tx_hash = m.get('tx_hash')
        if m.get('owner') is not None:
            temp_model = Participant()
            self.owner = temp_model.from_map(m['owner'])
        return self


class UserMetaInfo(TeaModel):
    def __init__(
        self,
        type: str = None,
        data: List[KeyValuePair] = None,
    ):
        # 用户身份信息类型
        self.type = type
        # 用户身份信息
        self.data = data

    def validate(self):
        self.validate_required(self.type, 'type')
        self.validate_required(self.data, 'data')
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.type is not None:
            result['type'] = self.type
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('type') is not None:
            self.type = m.get('type')
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = KeyValuePair()
                self.data.append(temp_model.from_map(k))
        return self


class BlockchainBrowserLatestBlock(TeaModel):
    def __init__(
        self,
        bizid: str = None,
        block_hash: str = None,
        create_time: int = None,
        height: int = None,
        previous_hash: str = None,
        root_tx_hash: str = None,
        size: int = None,
        transaction_size: int = None,
        version: int = None,
    ):
        # bizid
        self.bizid = bizid
        # block_hash
        self.block_hash = block_hash
        # create_time
        self.create_time = create_time
        # height
        self.height = height
        # previous_hash
        self.previous_hash = previous_hash
        # root_tx_hash
        self.root_tx_hash = root_tx_hash
        # size
        self.size = size
        # transaction_size
        self.transaction_size = transaction_size
        # version
        self.version = version

    def validate(self):
        self.validate_required(self.bizid, 'bizid')
        self.validate_required(self.block_hash, 'block_hash')
        self.validate_required(self.create_time, 'create_time')
        self.validate_required(self.height, 'height')
        self.validate_required(self.previous_hash, 'previous_hash')
        self.validate_required(self.root_tx_hash, 'root_tx_hash')
        self.validate_required(self.size, 'size')
        self.validate_required(self.transaction_size, 'transaction_size')
        self.validate_required(self.version, 'version')

    def to_map(self):
        result = dict()
        if self.bizid is not None:
            result['bizid'] = self.bizid
        if self.block_hash is not None:
            result['block_hash'] = self.block_hash
        if self.create_time is not None:
            result['create_time'] = self.create_time
        if self.height is not None:
            result['height'] = self.height
        if self.previous_hash is not None:
            result['previous_hash'] = self.previous_hash
        if self.root_tx_hash is not None:
            result['root_tx_hash'] = self.root_tx_hash
        if self.size is not None:
            result['size'] = self.size
        if self.transaction_size is not None:
            result['transaction_size'] = self.transaction_size
        if self.version is not None:
            result['version'] = self.version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('bizid') is not None:
            self.bizid = m.get('bizid')
        if m.get('block_hash') is not None:
            self.block_hash = m.get('block_hash')
        if m.get('create_time') is not None:
            self.create_time = m.get('create_time')
        if m.get('height') is not None:
            self.height = m.get('height')
        if m.get('previous_hash') is not None:
            self.previous_hash = m.get('previous_hash')
        if m.get('root_tx_hash') is not None:
            self.root_tx_hash = m.get('root_tx_hash')
        if m.get('size') is not None:
            self.size = m.get('size')
        if m.get('transaction_size') is not None:
            self.transaction_size = m.get('transaction_size')
        if m.get('version') is not None:
            self.version = m.get('version')
        return self


class BlockchainBrowserBlock(TeaModel):
    def __init__(
        self,
        bizid: str = None,
        blockchain_name: str = None,
        blockchain_status: bool = None,
        block_hash: str = None,
        create_time: int = None,
        hash_status: bool = None,
        height: int = None,
        previous_hash: str = None,
        root_tx_hash: str = None,
        transaction_list: List[BlockchainBrowserTransaction] = None,
        transaction_size: int = None,
    ):
        # bizid
        self.bizid = bizid
        # blockchain_name
        self.blockchain_name = blockchain_name
        # blockchain_status
        self.blockchain_status = blockchain_status
        # block_hash
        self.block_hash = block_hash
        # create_time
        self.create_time = create_time
        # hash_status
        self.hash_status = hash_status
        # height
        self.height = height
        # previous_hash
        self.previous_hash = previous_hash
        # root_tx_hash
        self.root_tx_hash = root_tx_hash
        # transaction_list
        self.transaction_list = transaction_list
        # transaction_size
        self.transaction_size = transaction_size

    def validate(self):
        self.validate_required(self.bizid, 'bizid')
        self.validate_required(self.blockchain_name, 'blockchain_name')
        self.validate_required(self.blockchain_status, 'blockchain_status')
        self.validate_required(self.block_hash, 'block_hash')
        self.validate_required(self.create_time, 'create_time')
        self.validate_required(self.hash_status, 'hash_status')
        self.validate_required(self.height, 'height')
        self.validate_required(self.previous_hash, 'previous_hash')
        self.validate_required(self.root_tx_hash, 'root_tx_hash')
        self.validate_required(self.transaction_list, 'transaction_list')
        if self.transaction_list:
            for k in self.transaction_list:
                if k:
                    k.validate()
        self.validate_required(self.transaction_size, 'transaction_size')

    def to_map(self):
        result = dict()
        if self.bizid is not None:
            result['bizid'] = self.bizid
        if self.blockchain_name is not None:
            result['blockchain_name'] = self.blockchain_name
        if self.blockchain_status is not None:
            result['blockchain_status'] = self.blockchain_status
        if self.block_hash is not None:
            result['block_hash'] = self.block_hash
        if self.create_time is not None:
            result['create_time'] = self.create_time
        if self.hash_status is not None:
            result['hash_status'] = self.hash_status
        if self.height is not None:
            result['height'] = self.height
        if self.previous_hash is not None:
            result['previous_hash'] = self.previous_hash
        if self.root_tx_hash is not None:
            result['root_tx_hash'] = self.root_tx_hash
        result['transaction_list'] = []
        if self.transaction_list is not None:
            for k in self.transaction_list:
                result['transaction_list'].append(k.to_map() if k else None)
        if self.transaction_size is not None:
            result['transaction_size'] = self.transaction_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('bizid') is not None:
            self.bizid = m.get('bizid')
        if m.get('blockchain_name') is not None:
            self.blockchain_name = m.get('blockchain_name')
        if m.get('blockchain_status') is not None:
            self.blockchain_status = m.get('blockchain_status')
        if m.get('block_hash') is not None:
            self.block_hash = m.get('block_hash')
        if m.get('create_time') is not None:
            self.create_time = m.get('create_time')
        if m.get('hash_status') is not None:
            self.hash_status = m.get('hash_status')
        if m.get('height') is not None:
            self.height = m.get('height')
        if m.get('previous_hash') is not None:
            self.previous_hash = m.get('previous_hash')
        if m.get('root_tx_hash') is not None:
            self.root_tx_hash = m.get('root_tx_hash')
        self.transaction_list = []
        if m.get('transaction_list') is not None:
            for k in m.get('transaction_list'):
                temp_model = BlockchainBrowserTransaction()
                self.transaction_list.append(temp_model.from_map(k))
        if m.get('transaction_size') is not None:
            self.transaction_size = m.get('transaction_size')
        return self


class CreateBlockchainInfo(TeaModel):
    def __init__(
        self,
        bizid: str = None,
        blockchain_status: str = None,
        blockchain_type: str = None,
        blockchain_name: str = None,
        blockchan_node_num: int = None,
        blockchain_create_time: int = None,
    ):
        # 链id
        self.bizid = bizid
        # 链的状态
        self.blockchain_status = blockchain_status
        # 链的类型
        self.blockchain_type = blockchain_type
        # 链的名称
        self.blockchain_name = blockchain_name
        # 节点数量
        self.blockchan_node_num = blockchan_node_num
        # 创建时间
        self.blockchain_create_time = blockchain_create_time

    def validate(self):
        self.validate_required(self.bizid, 'bizid')
        self.validate_required(self.blockchain_status, 'blockchain_status')
        self.validate_required(self.blockchain_type, 'blockchain_type')
        self.validate_required(self.blockchain_name, 'blockchain_name')
        self.validate_required(self.blockchan_node_num, 'blockchan_node_num')
        self.validate_required(self.blockchain_create_time, 'blockchain_create_time')

    def to_map(self):
        result = dict()
        if self.bizid is not None:
            result['bizid'] = self.bizid
        if self.blockchain_status is not None:
            result['blockchain_status'] = self.blockchain_status
        if self.blockchain_type is not None:
            result['blockchain_type'] = self.blockchain_type
        if self.blockchain_name is not None:
            result['blockchain_name'] = self.blockchain_name
        if self.blockchan_node_num is not None:
            result['blockchan_node_num'] = self.blockchan_node_num
        if self.blockchain_create_time is not None:
            result['blockchain_create_time'] = self.blockchain_create_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('bizid') is not None:
            self.bizid = m.get('bizid')
        if m.get('blockchain_status') is not None:
            self.blockchain_status = m.get('blockchain_status')
        if m.get('blockchain_type') is not None:
            self.blockchain_type = m.get('blockchain_type')
        if m.get('blockchain_name') is not None:
            self.blockchain_name = m.get('blockchain_name')
        if m.get('blockchan_node_num') is not None:
            self.blockchan_node_num = m.get('blockchan_node_num')
        if m.get('blockchain_create_time') is not None:
            self.blockchain_create_time = m.get('blockchain_create_time')
        return self


class VCEvent(TeaModel):
    def __init__(
        self,
        action: str = None,
        from_: str = None,
        height: int = None,
        issuer: str = None,
        status: str = None,
        subjec: str = None,
        tx_hash: str = None,
        tx_index: int = None,
        vc_hash: str = None,
        vc_id: str = None,
    ):
        # 事件对应的合约方法
        self.action = action
        # 本次事件的触发者
        self.from_ = from_
        # 事件在区块的高度
        self.height = height
        # 该VC的颁发者
        self.issuer = issuer
        # 有效，或者无效
        self.status = status
        # 该vc的接受者
        self.subjec = subjec
        # 交易hash
        # 
        self.tx_hash = tx_hash
        # 交易在区块中的index
        self.tx_index = tx_index
        # 可验证声明Hash值
        self.vc_hash = vc_hash
        # vcid
        self.vc_id = vc_id

    def validate(self):
        self.validate_required(self.action, 'action')
        self.validate_required(self.from_, 'from_')
        self.validate_required(self.height, 'height')
        self.validate_required(self.issuer, 'issuer')
        self.validate_required(self.status, 'status')
        self.validate_required(self.subjec, 'subjec')
        self.validate_required(self.tx_hash, 'tx_hash')
        self.validate_required(self.tx_index, 'tx_index')
        self.validate_required(self.vc_hash, 'vc_hash')
        self.validate_required(self.vc_id, 'vc_id')

    def to_map(self):
        result = dict()
        if self.action is not None:
            result['action'] = self.action
        if self.from_ is not None:
            result['from'] = self.from_
        if self.height is not None:
            result['height'] = self.height
        if self.issuer is not None:
            result['issuer'] = self.issuer
        if self.status is not None:
            result['status'] = self.status
        if self.subjec is not None:
            result['subjec'] = self.subjec
        if self.tx_hash is not None:
            result['tx_hash'] = self.tx_hash
        if self.tx_index is not None:
            result['tx_index'] = self.tx_index
        if self.vc_hash is not None:
            result['vc_hash'] = self.vc_hash
        if self.vc_id is not None:
            result['vc_id'] = self.vc_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('action') is not None:
            self.action = m.get('action')
        if m.get('from') is not None:
            self.from_ = m.get('from')
        if m.get('height') is not None:
            self.height = m.get('height')
        if m.get('issuer') is not None:
            self.issuer = m.get('issuer')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('subjec') is not None:
            self.subjec = m.get('subjec')
        if m.get('tx_hash') is not None:
            self.tx_hash = m.get('tx_hash')
        if m.get('tx_index') is not None:
            self.tx_index = m.get('tx_index')
        if m.get('vc_hash') is not None:
            self.vc_hash = m.get('vc_hash')
        if m.get('vc_id') is not None:
            self.vc_id = m.get('vc_id')
        return self


class Result(TeaModel):
    def __init__(
        self,
        consortium_id: str = None,
    ):
        # 联盟id
        self.consortium_id = consortium_id

    def validate(self):
        self.validate_required(self.consortium_id, 'consortium_id')

    def to_map(self):
        result = dict()
        if self.consortium_id is not None:
            result['consortium_id'] = self.consortium_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('consortium_id') is not None:
            self.consortium_id = m.get('consortium_id')
        return self


class VcTransmitResult(TeaModel):
    def __init__(
        self,
        is_success: bool = None,
        message: str = None,
        target_verifier: str = None,
        tx_hash: str = None,
    ):
        # 成功或者失败
        self.is_success = is_success
        # 失败信息
        self.message = message
        # 验证verifier did
        self.target_verifier = target_verifier
        # 交易hash
        self.tx_hash = tx_hash

    def validate(self):
        self.validate_required(self.is_success, 'is_success')
        self.validate_required(self.target_verifier, 'target_verifier')

    def to_map(self):
        result = dict()
        if self.is_success is not None:
            result['is_success'] = self.is_success
        if self.message is not None:
            result['message'] = self.message
        if self.target_verifier is not None:
            result['target_verifier'] = self.target_verifier
        if self.tx_hash is not None:
            result['tx_hash'] = self.tx_hash
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('is_success') is not None:
            self.is_success = m.get('is_success')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('target_verifier') is not None:
            self.target_verifier = m.get('target_verifier')
        if m.get('tx_hash') is not None:
            self.tx_hash = m.get('tx_hash')
        return self


class ALiYunContractProjectDuplicate(TeaModel):
    def __init__(
        self,
        id: str = None,
        consortium_id: str = None,
        gmt_create: int = None,
        gmt_modified: int = None,
        name: str = None,
        version: str = None,
        description: str = None,
    ):
        # id
        self.id = id
        # consortium_id
        self.consortium_id = consortium_id
        # gmt_create
        self.gmt_create = gmt_create
        # gmt_modified
        self.gmt_modified = gmt_modified
        # name
        self.name = name
        # version
        self.version = version
        # description
        self.description = description

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.consortium_id is not None:
            result['consortium_id'] = self.consortium_id
        if self.gmt_create is not None:
            result['gmt_create'] = self.gmt_create
        if self.gmt_modified is not None:
            result['gmt_modified'] = self.gmt_modified
        if self.name is not None:
            result['name'] = self.name
        if self.version is not None:
            result['version'] = self.version
        if self.description is not None:
            result['description'] = self.description
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('consortium_id') is not None:
            self.consortium_id = m.get('consortium_id')
        if m.get('gmt_create') is not None:
            self.gmt_create = m.get('gmt_create')
        if m.get('gmt_modified') is not None:
            self.gmt_modified = m.get('gmt_modified')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('version') is not None:
            self.version = m.get('version')
        if m.get('description') is not None:
            self.description = m.get('description')
        return self


class PresignedUrlPolicy(TeaModel):
    def __init__(
        self,
        access_id: str = None,
        callback: str = None,
        dir: str = None,
        expire: str = None,
        host: str = None,
        policy: str = None,
        signature: str = None,
    ):
        # oss访问的临时access id
        self.access_id = access_id
        # 一个需要回调通知服务端的方法名，非必填
        self.callback = callback
        # oss上的文件存放路径
        self.dir = dir
        # url超期的时间戳说明
        self.expire = expire
        # oss的地址
        self.host = host
        # 被base64编码的policy内容
        self.policy = policy
        # 签名结果
        self.signature = signature

    def validate(self):
        self.validate_required(self.access_id, 'access_id')
        self.validate_required(self.dir, 'dir')
        self.validate_required(self.expire, 'expire')
        self.validate_required(self.host, 'host')
        self.validate_required(self.policy, 'policy')
        self.validate_required(self.signature, 'signature')

    def to_map(self):
        result = dict()
        if self.access_id is not None:
            result['access_id'] = self.access_id
        if self.callback is not None:
            result['callback'] = self.callback
        if self.dir is not None:
            result['dir'] = self.dir
        if self.expire is not None:
            result['expire'] = self.expire
        if self.host is not None:
            result['host'] = self.host
        if self.policy is not None:
            result['policy'] = self.policy
        if self.signature is not None:
            result['signature'] = self.signature
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('access_id') is not None:
            self.access_id = m.get('access_id')
        if m.get('callback') is not None:
            self.callback = m.get('callback')
        if m.get('dir') is not None:
            self.dir = m.get('dir')
        if m.get('expire') is not None:
            self.expire = m.get('expire')
        if m.get('host') is not None:
            self.host = m.get('host')
        if m.get('policy') is not None:
            self.policy = m.get('policy')
        if m.get('signature') is not None:
            self.signature = m.get('signature')
        return self


class LogisticLocation(TeaModel):
    def __init__(
        self,
        address: str = None,
        city_code: str = None,
        lat: str = None,
        lon: str = None,
        track_time: int = None,
    ):
        # 结构化地址信息,规则遵循：国家、省份、城市、区县、城镇、乡村、街道、门牌号码、屋邨、大厦
        self.address = address
        # 行政区划代码
        self.city_code = city_code
        # 纬度
        self.lat = lat
        # 经度
        self.lon = lon
        # 轨迹时间戳
        self.track_time = track_time

    def validate(self):
        self.validate_required(self.lat, 'lat')
        self.validate_required(self.lon, 'lon')
        self.validate_required(self.track_time, 'track_time')

    def to_map(self):
        result = dict()
        if self.address is not None:
            result['address'] = self.address
        if self.city_code is not None:
            result['city_code'] = self.city_code
        if self.lat is not None:
            result['lat'] = self.lat
        if self.lon is not None:
            result['lon'] = self.lon
        if self.track_time is not None:
            result['track_time'] = self.track_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('address') is not None:
            self.address = m.get('address')
        if m.get('city_code') is not None:
            self.city_code = m.get('city_code')
        if m.get('lat') is not None:
            self.lat = m.get('lat')
        if m.get('lon') is not None:
            self.lon = m.get('lon')
        if m.get('track_time') is not None:
            self.track_time = m.get('track_time')
        return self


class OCUserData(TeaModel):
    def __init__(
        self,
        create_time: str = None,
        phone_number: str = None,
        user_name: str = None,
    ):
        # 创建时间
        self.create_time = create_time
        # 手机号
        self.phone_number = phone_number
        # 用户姓名
        self.user_name = user_name

    def validate(self):
        self.validate_required(self.create_time, 'create_time')
        if self.create_time is not None:
            self.validate_pattern(self.create_time, 'create_time', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')
        self.validate_required(self.phone_number, 'phone_number')
        self.validate_required(self.user_name, 'user_name')

    def to_map(self):
        result = dict()
        if self.create_time is not None:
            result['create_time'] = self.create_time
        if self.phone_number is not None:
            result['phone_number'] = self.phone_number
        if self.user_name is not None:
            result['user_name'] = self.user_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('create_time') is not None:
            self.create_time = m.get('create_time')
        if m.get('phone_number') is not None:
            self.phone_number = m.get('phone_number')
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        return self


class QueryMappingBatchResult(TeaModel):
    def __init__(
        self,
        accounts: List[AccountMappingInfo] = None,
        total_num: int = None,
        total_page: int = None,
    ):
        # 本次查询获取的账户信息
        self.accounts = accounts
        # 该商户下总共映射账户的数量
        self.total_num = total_num
        # 该商户下账户信息的总页数
        self.total_page = total_page

    def validate(self):
        self.validate_required(self.accounts, 'accounts')
        if self.accounts:
            for k in self.accounts:
                if k:
                    k.validate()
        self.validate_required(self.total_num, 'total_num')
        self.validate_required(self.total_page, 'total_page')

    def to_map(self):
        result = dict()
        result['accounts'] = []
        if self.accounts is not None:
            for k in self.accounts:
                result['accounts'].append(k.to_map() if k else None)
        if self.total_num is not None:
            result['total_num'] = self.total_num
        if self.total_page is not None:
            result['total_page'] = self.total_page
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.accounts = []
        if m.get('accounts') is not None:
            for k in m.get('accounts'):
                temp_model = AccountMappingInfo()
                self.accounts.append(temp_model.from_map(k))
        if m.get('total_num') is not None:
            self.total_num = m.get('total_num')
        if m.get('total_page') is not None:
            self.total_page = m.get('total_page')
        return self


class Item(TeaModel):
    def __init__(
        self,
        desc: str = None,
        ext_info: str = None,
        key: str = None,
        title: str = None,
        type: str = None,
    ):
        # 溯源项的具体内容
        self.desc = desc
        # 扩展信息 ，json格式
        self.ext_info = ext_info
        # 溯源项的键值
        self.key = key
        # 溯源项的中文标题
        self.title = title
        # 内容类型
        self.type = type

    def validate(self):
        self.validate_required(self.desc, 'desc')
        self.validate_required(self.ext_info, 'ext_info')
        self.validate_required(self.key, 'key')
        self.validate_required(self.title, 'title')
        self.validate_required(self.type, 'type')

    def to_map(self):
        result = dict()
        if self.desc is not None:
            result['desc'] = self.desc
        if self.ext_info is not None:
            result['ext_info'] = self.ext_info
        if self.key is not None:
            result['key'] = self.key
        if self.title is not None:
            result['title'] = self.title
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('desc') is not None:
            self.desc = m.get('desc')
        if m.get('ext_info') is not None:
            self.ext_info = m.get('ext_info')
        if m.get('key') is not None:
            self.key = m.get('key')
        if m.get('title') is not None:
            self.title = m.get('title')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class ALiYunContractProjects(TeaModel):
    def __init__(
        self,
        pagination: ALiYunPagination = None,
        contract_projects: List[ALiYunContractProject] = None,
    ):
        # pagination
        self.pagination = pagination
        # contract_projects
        self.contract_projects = contract_projects

    def validate(self):
        if self.pagination:
            self.pagination.validate()
        if self.contract_projects:
            for k in self.contract_projects:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.pagination is not None:
            result['pagination'] = self.pagination.to_map()
        result['contract_projects'] = []
        if self.contract_projects is not None:
            for k in self.contract_projects:
                result['contract_projects'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('pagination') is not None:
            temp_model = ALiYunPagination()
            self.pagination = temp_model.from_map(m['pagination'])
        self.contract_projects = []
        if m.get('contract_projects') is not None:
            for k in m.get('contract_projects'):
                temp_model = ALiYunContractProject()
                self.contract_projects.append(temp_model.from_map(k))
        return self


class FundInfo(TeaModel):
    def __init__(
        self,
        balance: str = None,
        settle_quota: str = None,
        shop_id: str = None,
    ):
        # 可提现余额
        self.balance = balance
        # 待结算额度
        self.settle_quota = settle_quota
        # 商户id
        self.shop_id = shop_id

    def validate(self):
        self.validate_required(self.balance, 'balance')
        self.validate_required(self.settle_quota, 'settle_quota')
        self.validate_required(self.shop_id, 'shop_id')

    def to_map(self):
        result = dict()
        if self.balance is not None:
            result['balance'] = self.balance
        if self.settle_quota is not None:
            result['settle_quota'] = self.settle_quota
        if self.shop_id is not None:
            result['shop_id'] = self.shop_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('balance') is not None:
            self.balance = m.get('balance')
        if m.get('settle_quota') is not None:
            self.settle_quota = m.get('settle_quota')
        if m.get('shop_id') is not None:
            self.shop_id = m.get('shop_id')
        return self


class ALiYunBuyUnion(TeaModel):
    def __init__(
        self,
        consortium_name: str = None,
        consortium_id: str = None,
    ):
        # consortium_name
        self.consortium_name = consortium_name
        # consortium_id
        self.consortium_id = consortium_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.consortium_name is not None:
            result['consortium_name'] = self.consortium_name
        if self.consortium_id is not None:
            result['consortium_id'] = self.consortium_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('consortium_name') is not None:
            self.consortium_name = m.get('consortium_name')
        if m.get('consortium_id') is not None:
            self.consortium_id = m.get('consortium_id')
        return self


class ProcessResult(TeaModel):
    def __init__(
        self,
        extension: str = None,
        message: str = None,
        next: str = None,
        process_id: str = None,
        status: str = None,
        data_id: str = None,
    ):
        # 申请权限的扩展参数
        self.extension = extension
        # 申请权限原因
        self.message = message
        # 下一个处理节点ID
        self.next = next
        # 流程ID
        self.process_id = process_id
        # 流程状态
        self.status = status
        # 数据对象ID
        self.data_id = data_id

    def validate(self):
        self.validate_required(self.process_id, 'process_id')
        self.validate_required(self.status, 'status')
        self.validate_required(self.data_id, 'data_id')

    def to_map(self):
        result = dict()
        if self.extension is not None:
            result['extension'] = self.extension
        if self.message is not None:
            result['message'] = self.message
        if self.next is not None:
            result['next'] = self.next
        if self.process_id is not None:
            result['process_id'] = self.process_id
        if self.status is not None:
            result['status'] = self.status
        if self.data_id is not None:
            result['data_id'] = self.data_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('extension') is not None:
            self.extension = m.get('extension')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('next') is not None:
            self.next = m.get('next')
        if m.get('process_id') is not None:
            self.process_id = m.get('process_id')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('data_id') is not None:
            self.data_id = m.get('data_id')
        return self


class ContractIdeConfigResult(TeaModel):
    def __init__(
        self,
        contract_ide_config_list: List[ContractIdeConfig] = None,
    ):
        # 合约链的配置信息，可包含多个合约链的配置
        self.contract_ide_config_list = contract_ide_config_list

    def validate(self):
        self.validate_required(self.contract_ide_config_list, 'contract_ide_config_list')
        if self.contract_ide_config_list:
            for k in self.contract_ide_config_list:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        result['contract_ide_config_list'] = []
        if self.contract_ide_config_list is not None:
            for k in self.contract_ide_config_list:
                result['contract_ide_config_list'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.contract_ide_config_list = []
        if m.get('contract_ide_config_list') is not None:
            for k in m.get('contract_ide_config_list'):
                temp_model = ContractIdeConfig()
                self.contract_ide_config_list.append(temp_model.from_map(k))
        return self


class ALiYunChainContractContent(TeaModel):
    def __init__(
        self,
        content: str = None,
        content_id: str = None,
        content_name: str = None,
        create_time: int = None,
        is_directory: bool = None,
        parent_content_id: str = None,
        project_id: str = None,
        update_time: int = None,
    ):
        # content
        self.content = content
        # content_id
        self.content_id = content_id
        # content_name
        self.content_name = content_name
        # create_time
        self.create_time = create_time
        # is_directory
        self.is_directory = is_directory
        # parent_content_id
        self.parent_content_id = parent_content_id
        # project_id
        self.project_id = project_id
        # update_time
        self.update_time = update_time

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.content is not None:
            result['content'] = self.content
        if self.content_id is not None:
            result['content_id'] = self.content_id
        if self.content_name is not None:
            result['content_name'] = self.content_name
        if self.create_time is not None:
            result['create_time'] = self.create_time
        if self.is_directory is not None:
            result['is_directory'] = self.is_directory
        if self.parent_content_id is not None:
            result['parent_content_id'] = self.parent_content_id
        if self.project_id is not None:
            result['project_id'] = self.project_id
        if self.update_time is not None:
            result['update_time'] = self.update_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('content') is not None:
            self.content = m.get('content')
        if m.get('content_id') is not None:
            self.content_id = m.get('content_id')
        if m.get('content_name') is not None:
            self.content_name = m.get('content_name')
        if m.get('create_time') is not None:
            self.create_time = m.get('create_time')
        if m.get('is_directory') is not None:
            self.is_directory = m.get('is_directory')
        if m.get('parent_content_id') is not None:
            self.parent_content_id = m.get('parent_content_id')
        if m.get('project_id') is not None:
            self.project_id = m.get('project_id')
        if m.get('update_time') is not None:
            self.update_time = m.get('update_time')
        return self


class MiniAppBrowserAuthType(TeaModel):
    def __init__(
        self,
        auth_type: str = None,
    ):
        # 授权类型
        self.auth_type = auth_type

    def validate(self):
        self.validate_required(self.auth_type, 'auth_type')

    def to_map(self):
        result = dict()
        if self.auth_type is not None:
            result['auth_type'] = self.auth_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_type') is not None:
            self.auth_type = m.get('auth_type')
        return self


class DistributionUser(TeaModel):
    def __init__(
        self,
        create_time: str = None,
        mobile: str = None,
        user_id: str = None,
    ):
        # 用户创建时间
        self.create_time = create_time
        # 用户手机号
        self.mobile = mobile
        # 用户唯一标识
        self.user_id = user_id

    def validate(self):
        self.validate_required(self.create_time, 'create_time')
        self.validate_required(self.mobile, 'mobile')
        self.validate_required(self.user_id, 'user_id')

    def to_map(self):
        result = dict()
        if self.create_time is not None:
            result['create_time'] = self.create_time
        if self.mobile is not None:
            result['mobile'] = self.mobile
        if self.user_id is not None:
            result['user_id'] = self.user_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('create_time') is not None:
            self.create_time = m.get('create_time')
        if m.get('mobile') is not None:
            self.mobile = m.get('mobile')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        return self


class ALiYunChainMiniAppUserPrivilege(TeaModel):
    def __init__(
        self,
        ant_chain_id: str = None,
        q_rcode_type: str = None,
        authorization_type: str = None,
        pagination: ALiYunPagination = None,
        authorized_user_list: List[ALiYunChainMiniAppAuthorizedUser] = None,
    ):
        # ant_chain_id
        self.ant_chain_id = ant_chain_id
        # q_r_code_type
        self.q_rcode_type = q_rcode_type
        # authorization_type
        self.authorization_type = authorization_type
        # pagination
        self.pagination = pagination
        # ALiYunChainMiniAppAuthorizedUser
        self.authorized_user_list = authorized_user_list

    def validate(self):
        if self.pagination:
            self.pagination.validate()
        if self.authorized_user_list:
            for k in self.authorized_user_list:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.ant_chain_id is not None:
            result['ant_chain_id'] = self.ant_chain_id
        if self.q_rcode_type is not None:
            result['q_r_code_type'] = self.q_rcode_type
        if self.authorization_type is not None:
            result['authorization_type'] = self.authorization_type
        if self.pagination is not None:
            result['pagination'] = self.pagination.to_map()
        result['authorized_user_list'] = []
        if self.authorized_user_list is not None:
            for k in self.authorized_user_list:
                result['authorized_user_list'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ant_chain_id') is not None:
            self.ant_chain_id = m.get('ant_chain_id')
        if m.get('q_r_code_type') is not None:
            self.q_rcode_type = m.get('q_r_code_type')
        if m.get('authorization_type') is not None:
            self.authorization_type = m.get('authorization_type')
        if m.get('pagination') is not None:
            temp_model = ALiYunPagination()
            self.pagination = temp_model.from_map(m['pagination'])
        self.authorized_user_list = []
        if m.get('authorized_user_list') is not None:
            for k in m.get('authorized_user_list'):
                temp_model = ALiYunChainMiniAppAuthorizedUser()
                self.authorized_user_list.append(temp_model.from_map(k))
        return self


class DepositMetaDataItem(TeaModel):
    def __init__(
        self,
        desc: str = None,
        key: str = None,
        type: int = None,
        value: str = None,
    ):
        # 结构化存证时该item的描述
        self.desc = desc
        # 结构化存证该数据字段的唯一索引
        self.key = key
        # 结构化存证时该item的类型
        # 0 text
        # 1 encrypt text
        # 2 txHash
        # 3 image url
        # 4 vedio url
        # 5 map url
        self.type = type
        # 结构化数据存证时，该item的值
        self.value = value

    def validate(self):
        self.validate_required(self.desc, 'desc')
        self.validate_required(self.key, 'key')
        self.validate_required(self.type, 'type')
        self.validate_required(self.value, 'value')

    def to_map(self):
        result = dict()
        if self.desc is not None:
            result['desc'] = self.desc
        if self.key is not None:
            result['key'] = self.key
        if self.type is not None:
            result['type'] = self.type
        if self.value is not None:
            result['value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('desc') is not None:
            self.desc = m.get('desc')
        if m.get('key') is not None:
            self.key = m.get('key')
        if m.get('type') is not None:
            self.type = m.get('type')
        if m.get('value') is not None:
            self.value = m.get('value')
        return self


class OrderResult(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        success: bool = None,
    ):
        # 事例id
        self.instance_id = instance_id
        # 是否成功
        self.success = success

    def validate(self):
        self.validate_required(self.instance_id, 'instance_id')
        self.validate_required(self.success, 'success')

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['instance_id'] = self.instance_id
        if self.success is not None:
            result['success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('instance_id') is not None:
            self.instance_id = m.get('instance_id')
        if m.get('success') is not None:
            self.success = m.get('success')
        return self


class ALiYunChainResouceType(TeaModel):
    def __init__(
        self,
        type_id: int = None,
        cpu: int = None,
        memory: int = None,
        disk: int = None,
    ):
        # type_id
        self.type_id = type_id
        # cpu
        self.cpu = cpu
        # memory
        self.memory = memory
        # disk
        self.disk = disk

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.type_id is not None:
            result['type_id'] = self.type_id
        if self.cpu is not None:
            result['cpu'] = self.cpu
        if self.memory is not None:
            result['memory'] = self.memory
        if self.disk is not None:
            result['disk'] = self.disk
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('type_id') is not None:
            self.type_id = m.get('type_id')
        if m.get('cpu') is not None:
            self.cpu = m.get('cpu')
        if m.get('memory') is not None:
            self.memory = m.get('memory')
        if m.get('disk') is not None:
            self.disk = m.get('disk')
        return self


class NodeInfo(TeaModel):
    def __init__(
        self,
        blockheight: int = None,
        nodename: str = None,
        status: bool = None,
        version: str = None,
    ):
        # 链的区块高度
        self.blockheight = blockheight
        # 节点名称
        self.nodename = nodename
        # 节点健康状况
        self.status = status
        # 节点版本
        self.version = version

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.blockheight is not None:
            result['blockheight'] = self.blockheight
        if self.nodename is not None:
            result['nodename'] = self.nodename
        if self.status is not None:
            result['status'] = self.status
        if self.version is not None:
            result['version'] = self.version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('blockheight') is not None:
            self.blockheight = m.get('blockheight')
        if m.get('nodename') is not None:
            self.nodename = m.get('nodename')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('version') is not None:
            self.version = m.get('version')
        return self


class VcContent(TeaModel):
    def __init__(
        self,
        vc_id: str = None,
        vc_content: str = None,
        status: str = None,
        did: str = None,
        message: str = None,
    ):
        # 可验证声明的唯一标识id，status 为 “1” 时候非空
        self.vc_id = vc_id
        # 可验证声明完整内容， status 为 “1” 时候非空
        self.vc_content = vc_content
        # 可验证声明的颁发状态说明： -1：颁发失败，0：未授权 1：授权成功，此时vc_content字段会包含授权后的声明内容，其它状态码，待定义后增加。
        self.status = status
        # 被颁发当前可验证声明的目标did
        self.did = did
        # 如果status 是 “-1”，则说明当前可验证声明颁发失败，此字段说明失败原因。
        self.message = message

    def validate(self):
        self.validate_required(self.vc_id, 'vc_id')
        self.validate_required(self.vc_content, 'vc_content')
        self.validate_required(self.status, 'status')

    def to_map(self):
        result = dict()
        if self.vc_id is not None:
            result['vc_id'] = self.vc_id
        if self.vc_content is not None:
            result['vc_content'] = self.vc_content
        if self.status is not None:
            result['status'] = self.status
        if self.did is not None:
            result['did'] = self.did
        if self.message is not None:
            result['message'] = self.message
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('vc_id') is not None:
            self.vc_id = m.get('vc_id')
        if m.get('vc_content') is not None:
            self.vc_content = m.get('vc_content')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('message') is not None:
            self.message = m.get('message')
        return self


class DidInfo(TeaModel):
    def __init__(
        self,
        did: str = None,
        name: str = None,
    ):
        # 分布式数字身份id
        self.did = did
        # 分布式数字身份对应的用户名称
        self.name = name

    def validate(self):
        self.validate_required(self.did, 'did')
        self.validate_required(self.name, 'name')

    def to_map(self):
        result = dict()
        if self.did is not None:
            result['did'] = self.did
        if self.name is not None:
            result['name'] = self.name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('name') is not None:
            self.name = m.get('name')
        return self


class StartAccountMappingRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        account: AccountMap = None,
        extension: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 映射账户详细信息
        self.account = account
        # 扩展信息
        self.extension = extension

    def validate(self):
        self.validate_required(self.account, 'account')
        if self.account:
            self.account.validate()
        self.validate_required(self.extension, 'extension')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.account is not None:
            result['account'] = self.account.to_map()
        if self.extension is not None:
            result['extension'] = self.extension
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('account') is not None:
            temp_model = AccountMap()
            self.account = temp_model.from_map(m['account'])
        if m.get('extension') is not None:
            self.extension = m.get('extension')
        return self


class StartAccountMappingResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: AccountMappingResult = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 映射结果
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('data') is not None:
            temp_model = AccountMappingResult()
            self.data = temp_model.from_map(m['data'])
        return self


class BatchcreateAccountMappingRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        data: List[AccountMap] = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 待映射处理的账户信息列表
        self.data = data

    def validate(self):
        self.validate_required(self.data, 'data')
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = AccountMap()
                self.data.append(temp_model.from_map(k))
        return self


class BatchcreateAccountMappingResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        batch_id: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 当前请求分配的请求ID，可以通过这个值查询映射结果
        self.batch_id = batch_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.batch_id is not None:
            result['batch_id'] = self.batch_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('batch_id') is not None:
            self.batch_id = m.get('batch_id')
        return self


class StartAccountSignatureRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        algorithm: str = None,
        bizid: str = None,
        data: str = None,
        uid: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 加密算法
        self.algorithm = algorithm
        # 区块链唯一标示
        self.bizid = bizid
        # 用户需要签名的原始数据
        self.data = data
        # 签名账户在原系统中的唯一标示
        self.uid = uid

    def validate(self):
        self.validate_required(self.algorithm, 'algorithm')
        self.validate_required(self.bizid, 'bizid')
        self.validate_required(self.data, 'data')
        self.validate_required(self.uid, 'uid')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.algorithm is not None:
            result['algorithm'] = self.algorithm
        if self.bizid is not None:
            result['bizid'] = self.bizid
        if self.data is not None:
            result['data'] = self.data
        if self.uid is not None:
            result['uid'] = self.uid
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('algorithm') is not None:
            self.algorithm = m.get('algorithm')
        if m.get('bizid') is not None:
            self.bizid = m.get('bizid')
        if m.get('data') is not None:
            self.data = m.get('data')
        if m.get('uid') is not None:
            self.uid = m.get('uid')
        return self


class StartAccountSignatureResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        signature: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 签名
        self.signature = signature

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.signature is not None:
            result['signature'] = self.signature
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('signature') is not None:
            self.signature = m.get('signature')
        return self


class QueryAccountMappingresultRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        batch_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 查询之前对应批量映射请求的映射结果
        self.batch_id = batch_id

    def validate(self):
        self.validate_required(self.batch_id, 'batch_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.batch_id is not None:
            result['batch_id'] = self.batch_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('batch_id') is not None:
            self.batch_id = m.get('batch_id')
        return self


class QueryAccountMappingresultResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: List[AccountMappingResult] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 映射结果列表
        self.data = data

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = AccountMappingResult()
                self.data.append(temp_model.from_map(k))
        return self


class QueryAccountMappingRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        bizid: str = None,
        uid: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 要映射的链对应的唯一id
        self.bizid = bizid
        # 自有系统中该账户唯一标示
        self.uid = uid

    def validate(self):
        self.validate_required(self.bizid, 'bizid')
        self.validate_required(self.uid, 'uid')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.bizid is not None:
            result['bizid'] = self.bizid
        if self.uid is not None:
            result['uid'] = self.uid
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('bizid') is not None:
            self.bizid = m.get('bizid')
        if m.get('uid') is not None:
            self.uid = m.get('uid')
        return self


class QueryAccountMappingResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: AccountMappingInfo = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 该用户信息
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('data') is not None:
            temp_model = AccountMappingInfo()
            self.data = temp_model.from_map(m['data'])
        return self


class BatchqueryAccountMappingRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        bizid: str = None,
        page_num: int = None,
        page_size: int = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 要映射的链对应的唯一id
        self.bizid = bizid
        # 查询页数
        self.page_num = page_num
        # 每页大小
        self.page_size = page_size

    def validate(self):
        self.validate_required(self.bizid, 'bizid')
        self.validate_required(self.page_num, 'page_num')
        if self.page_num is not None:
            self.validate_minimum(self.page_num, 'page_num', 1)
        self.validate_required(self.page_size, 'page_size')
        if self.page_size is not None:
            self.validate_minimum(self.page_size, 'page_size', 1)

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.bizid is not None:
            result['bizid'] = self.bizid
        if self.page_num is not None:
            result['page_num'] = self.page_num
        if self.page_size is not None:
            result['page_size'] = self.page_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('bizid') is not None:
            self.bizid = m.get('bizid')
        if m.get('page_num') is not None:
            self.page_num = m.get('page_num')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        return self


class BatchqueryAccountMappingResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: QueryMappingBatchResult = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 返回查询的数据
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('data') is not None:
            temp_model = QueryMappingBatchResult()
            self.data = temp_model.from_map(m['data'])
        return self


class CreateAccountMappingInfoRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        address: str = None,
        biz_code: str = None,
        biz_name: str = None,
        biz_type: str = None,
        create_time: str = None,
        end_time: str = None,
        extension: str = None,
        group_code: str = None,
        group_name: str = None,
        identity_type: int = None,
        identity_value: str = None,
        label: str = None,
        parent: str = None,
        stat_date: str = None,
        user_id: str = None,
        user_name: str = None,
        user_type: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 注册地址
        self.address = address
        # 业务场景code
        self.biz_code = biz_code
        # 业务名称
        self.biz_name = biz_name
        # 业务类型，预留
        self.biz_type = biz_type
        # 用户创建时间
        self.create_time = create_time
        # 用户注销时间
        self.end_time = end_time
        # 扩展字段，使用json格式
        self.extension = extension
        # 业务组code
        self.group_code = group_code
        # 业务组名称
        self.group_name = group_name
        # 唯一标示类型，0:统一信用代码,1:开票机构代码,2:身份证号
        self.identity_type = identity_type
        # 唯一标示码
        self.identity_value = identity_value
        # 用户标签
        self.label = label
        # 间连用户的上层直连用户名称
        self.parent = parent
        # 统计时间
        self.stat_date = stat_date
        # 用户id
        self.user_id = user_id
        # 用户或企业名称
        self.user_name = user_name
        # 用户类型：direct直连，indirect间连，partner合作伙伴
        self.user_type = user_type

    def validate(self):
        self.validate_required(self.biz_code, 'biz_code')
        self.validate_required(self.biz_name, 'biz_name')
        self.validate_required(self.group_code, 'group_code')
        self.validate_required(self.group_name, 'group_name')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.address is not None:
            result['address'] = self.address
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        if self.biz_name is not None:
            result['biz_name'] = self.biz_name
        if self.biz_type is not None:
            result['biz_type'] = self.biz_type
        if self.create_time is not None:
            result['create_time'] = self.create_time
        if self.end_time is not None:
            result['end_time'] = self.end_time
        if self.extension is not None:
            result['extension'] = self.extension
        if self.group_code is not None:
            result['group_code'] = self.group_code
        if self.group_name is not None:
            result['group_name'] = self.group_name
        if self.identity_type is not None:
            result['identity_type'] = self.identity_type
        if self.identity_value is not None:
            result['identity_value'] = self.identity_value
        if self.label is not None:
            result['label'] = self.label
        if self.parent is not None:
            result['parent'] = self.parent
        if self.stat_date is not None:
            result['stat_date'] = self.stat_date
        if self.user_id is not None:
            result['user_id'] = self.user_id
        if self.user_name is not None:
            result['user_name'] = self.user_name
        if self.user_type is not None:
            result['user_type'] = self.user_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('address') is not None:
            self.address = m.get('address')
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        if m.get('biz_name') is not None:
            self.biz_name = m.get('biz_name')
        if m.get('biz_type') is not None:
            self.biz_type = m.get('biz_type')
        if m.get('create_time') is not None:
            self.create_time = m.get('create_time')
        if m.get('end_time') is not None:
            self.end_time = m.get('end_time')
        if m.get('extension') is not None:
            self.extension = m.get('extension')
        if m.get('group_code') is not None:
            self.group_code = m.get('group_code')
        if m.get('group_name') is not None:
            self.group_name = m.get('group_name')
        if m.get('identity_type') is not None:
            self.identity_type = m.get('identity_type')
        if m.get('identity_value') is not None:
            self.identity_value = m.get('identity_value')
        if m.get('label') is not None:
            self.label = m.get('label')
        if m.get('parent') is not None:
            self.parent = m.get('parent')
        if m.get('stat_date') is not None:
            self.stat_date = m.get('stat_date')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        if m.get('user_type') is not None:
            self.user_type = m.get('user_type')
        return self


class CreateAccountMappingInfoResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        account_id: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 返回id
        self.account_id = account_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.account_id is not None:
            result['account_id'] = self.account_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('account_id') is not None:
            self.account_id = m.get('account_id')
        return self


class BatchcreateAccountMappingInfoRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        list: List[AccountInfoWithBiz] = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 批量上传的用户信息
        self.list = list

    def validate(self):
        self.validate_required(self.list, 'list')
        if self.list:
            for k in self.list:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        result['list'] = []
        if self.list is not None:
            for k in self.list:
                result['list'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        self.list = []
        if m.get('list') is not None:
            for k in m.get('list'):
                temp_model = AccountInfoWithBiz()
                self.list.append(temp_model.from_map(k))
        return self


class BatchcreateAccountMappingInfoResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        accounts: List[str] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 账户id列表
        self.accounts = accounts

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.accounts is not None:
            result['accounts'] = self.accounts
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('accounts') is not None:
            self.accounts = m.get('accounts')
        return self


class GetAkdfUserbizkeyRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        bizid: str = None,
        key_name: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 区块链id
        self.bizid = bizid
        # 密钥名称
        self.key_name = key_name

    def validate(self):
        self.validate_required(self.bizid, 'bizid')
        self.validate_required(self.key_name, 'key_name')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.bizid is not None:
            result['bizid'] = self.bizid
        if self.key_name is not None:
            result['key_name'] = self.key_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('bizid') is not None:
            self.bizid = m.get('bizid')
        if m.get('key_name') is not None:
            self.key_name = m.get('key_name')
        return self


class GetAkdfUserbizkeyResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        bizid: str = None,
        encrypted_private_key: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 区块链id
        self.bizid = bizid
        # 4dY3DnjHPogYcsiVujkdhBRBceY8ZT5cUBP1zRBAZia7WZhJZyHmWbARBAWvy13aB7cNenbBg5D4CnM1gijv5YiSgBgHTC89sag9M7cxxdaRMrvFEA4YpcaunZdd4Q1APBynsDsqmVyzyGnZk5Kez9WBz5PZRyRC3gqCNXhHLLwuJmGCn8aEv3Ar9vsFUQa6qAgNtVVgiDxEYqBNNQc9K51ytdpBX81ph8nzy2ctUvLqi4G7iFU1wVsdd14XS7oz1v54M5Hb2CUTkv7ncXZSnNJYDsGyKAmHiriL2rargNzp6v2nUXhGSrkCVMDCVkZVcpeVFqSxKGatVdkGYUAswt3vtRVCcs
        self.encrypted_private_key = encrypted_private_key

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.bizid is not None:
            result['bizid'] = self.bizid
        if self.encrypted_private_key is not None:
            result['encrypted_private_key'] = self.encrypted_private_key
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('bizid') is not None:
            self.bizid = m.get('bizid')
        if m.get('encrypted_private_key') is not None:
            self.encrypted_private_key = m.get('encrypted_private_key')
        return self


class ListAkdfUserbizkeyRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        bizid: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 区块链id
        self.bizid = bizid

    def validate(self):
        self.validate_required(self.bizid, 'bizid')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.bizid is not None:
            result['bizid'] = self.bizid
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('bizid') is not None:
            self.bizid = m.get('bizid')
        return self


class ListAkdfUserbizkeyResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        bizid: str = None,
        user_biz_key_info: List[UserBizKeyInfo] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 区块链id
        self.bizid = bizid
        # 用户密钥信息
        self.user_biz_key_info = user_biz_key_info

    def validate(self):
        if self.user_biz_key_info:
            for k in self.user_biz_key_info:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.bizid is not None:
            result['bizid'] = self.bizid
        result['user_biz_key_info'] = []
        if self.user_biz_key_info is not None:
            for k in self.user_biz_key_info:
                result['user_biz_key_info'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('bizid') is not None:
            self.bizid = m.get('bizid')
        self.user_biz_key_info = []
        if m.get('user_biz_key_info') is not None:
            for k in m.get('user_biz_key_info'):
                temp_model = UserBizKeyInfo()
                self.user_biz_key_info.append(temp_model.from_map(k))
        return self


class CheckBlockchainOrderRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        data: str = None,
        region_id: str = None,
        user_request_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 参数
        self.data = data
        # region_id
        self.region_id = region_id
        # 用户请求ID
        self.user_request_id = user_request_id

    def validate(self):
        self.validate_required(self.data, 'data')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.data is not None:
            result['data'] = self.data
        if self.region_id is not None:
            result['region_id'] = self.region_id
        if self.user_request_id is not None:
            result['user_request_id'] = self.user_request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('data') is not None:
            self.data = m.get('data')
        if m.get('region_id') is not None:
            self.region_id = m.get('region_id')
        if m.get('user_request_id') is not None:
            self.user_request_id = m.get('user_request_id')
        return self


class CheckBlockchainOrderResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: ALiYunOrderResult = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 阿里云订单结果
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.result is not None:
            result['result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('result') is not None:
            temp_model = ALiYunOrderResult()
            self.result = temp_model.from_map(m['result'])
        return self


class VerifyBlockchainOrderRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        data: str = None,
        region_id: str = None,
        user_request_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 参数信息
        self.data = data
        # 区域信息
        self.region_id = region_id
        # 用户请求id
        self.user_request_id = user_request_id

    def validate(self):
        self.validate_required(self.data, 'data')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.data is not None:
            result['data'] = self.data
        if self.region_id is not None:
            result['region_id'] = self.region_id
        if self.user_request_id is not None:
            result['user_request_id'] = self.user_request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('data') is not None:
            self.data = m.get('data')
        if m.get('region_id') is not None:
            self.region_id = m.get('region_id')
        if m.get('user_request_id') is not None:
            self.user_request_id = m.get('user_request_id')
        return self


class VerifyBlockchainOrderResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: ALiYunOrderResult = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 阿里云请求返回结果
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.result is not None:
            result['result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('result') is not None:
            temp_model = ALiYunOrderResult()
            self.result = temp_model.from_map(m['result'])
        return self


class InvalidateBlockchainOrderRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        data: str = None,
        region_id: str = None,
        user_request_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 参数
        self.data = data
        # 区域信息
        self.region_id = region_id
        # 用户请求信息
        self.user_request_id = user_request_id

    def validate(self):
        self.validate_required(self.data, 'data')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.data is not None:
            result['data'] = self.data
        if self.region_id is not None:
            result['region_id'] = self.region_id
        if self.user_request_id is not None:
            result['user_request_id'] = self.user_request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('data') is not None:
            self.data = m.get('data')
        if m.get('region_id') is not None:
            self.region_id = m.get('region_id')
        if m.get('user_request_id') is not None:
            self.user_request_id = m.get('user_request_id')
        return self


class InvalidateBlockchainOrderResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: ALiYunOrderResult = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 阿里云请求参数
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.result is not None:
            result['result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('result') is not None:
            temp_model = ALiYunOrderResult()
            self.result = temp_model.from_map(m['result'])
        return self


class ReleaseBlockchainOrderPhysicalRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        bid: str = None,
        country: str = None,
        gmt_wakeup: str = None,
        hid: int = None,
        interrupt: bool = None,
        pk: str = None,
        region_id: str = None,
        request_id: str = None,
        task_extra_data: str = None,
        task_identifier: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # bid
        self.bid = bid
        # country
        self.country = country
        # gmt_wakeup
        self.gmt_wakeup = gmt_wakeup
        # hid
        self.hid = hid
        # interrupt
        self.interrupt = interrupt
        # pk
        self.pk = pk
        # region_id
        self.region_id = region_id
        # request_id
        self.request_id = request_id
        # task_extra_data
        self.task_extra_data = task_extra_data
        # task_identifier
        self.task_identifier = task_identifier

    def validate(self):
        self.validate_required(self.bid, 'bid')
        self.validate_required(self.hid, 'hid')
        self.validate_required(self.pk, 'pk')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.bid is not None:
            result['bid'] = self.bid
        if self.country is not None:
            result['country'] = self.country
        if self.gmt_wakeup is not None:
            result['gmt_wakeup'] = self.gmt_wakeup
        if self.hid is not None:
            result['hid'] = self.hid
        if self.interrupt is not None:
            result['interrupt'] = self.interrupt
        if self.pk is not None:
            result['pk'] = self.pk
        if self.region_id is not None:
            result['region_id'] = self.region_id
        if self.request_id is not None:
            result['request_id'] = self.request_id
        if self.task_extra_data is not None:
            result['task_extra_data'] = self.task_extra_data
        if self.task_identifier is not None:
            result['task_identifier'] = self.task_identifier
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('bid') is not None:
            self.bid = m.get('bid')
        if m.get('country') is not None:
            self.country = m.get('country')
        if m.get('gmt_wakeup') is not None:
            self.gmt_wakeup = m.get('gmt_wakeup')
        if m.get('hid') is not None:
            self.hid = m.get('hid')
        if m.get('interrupt') is not None:
            self.interrupt = m.get('interrupt')
        if m.get('pk') is not None:
            self.pk = m.get('pk')
        if m.get('region_id') is not None:
            self.region_id = m.get('region_id')
        if m.get('request_id') is not None:
            self.request_id = m.get('request_id')
        if m.get('task_extra_data') is not None:
            self.task_extra_data = m.get('task_extra_data')
        if m.get('task_identifier') is not None:
            self.task_identifier = m.get('task_identifier')
        return self


class ReleaseBlockchainOrderPhysicalResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        bid: str = None,
        country: str = None,
        gmt_wakeup: str = None,
        hid: int = None,
        interrupt: bool = None,
        invoker: str = None,
        level: int = None,
        message: str = None,
        pk: str = None,
        prompt: str = None,
        request_id: str = None,
        result: ALiYunDeleteResource = None,
        task_extra_data: str = None,
        task_identifier: str = None,
        url: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # bid
        self.bid = bid
        # country
        self.country = country
        # gmt_wakeup
        self.gmt_wakeup = gmt_wakeup
        # hid
        self.hid = hid
        # interrupt
        self.interrupt = interrupt
        # invoker
        self.invoker = invoker
        # level
        self.level = level
        # message
        self.message = message
        # pk
        self.pk = pk
        # prompt
        self.prompt = prompt
        # request_id
        self.request_id = request_id
        # 阿里云请求返回结果
        self.result = result
        # task_extra_data
        self.task_extra_data = task_extra_data
        # task_identifier
        self.task_identifier = task_identifier
        # url
        self.url = url

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.bid is not None:
            result['bid'] = self.bid
        if self.country is not None:
            result['country'] = self.country
        if self.gmt_wakeup is not None:
            result['gmt_wakeup'] = self.gmt_wakeup
        if self.hid is not None:
            result['hid'] = self.hid
        if self.interrupt is not None:
            result['interrupt'] = self.interrupt
        if self.invoker is not None:
            result['invoker'] = self.invoker
        if self.level is not None:
            result['level'] = self.level
        if self.message is not None:
            result['message'] = self.message
        if self.pk is not None:
            result['pk'] = self.pk
        if self.prompt is not None:
            result['prompt'] = self.prompt
        if self.request_id is not None:
            result['request_id'] = self.request_id
        if self.result is not None:
            result['result'] = self.result.to_map()
        if self.task_extra_data is not None:
            result['task_extra_data'] = self.task_extra_data
        if self.task_identifier is not None:
            result['task_identifier'] = self.task_identifier
        if self.url is not None:
            result['url'] = self.url
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('bid') is not None:
            self.bid = m.get('bid')
        if m.get('country') is not None:
            self.country = m.get('country')
        if m.get('gmt_wakeup') is not None:
            self.gmt_wakeup = m.get('gmt_wakeup')
        if m.get('hid') is not None:
            self.hid = m.get('hid')
        if m.get('interrupt') is not None:
            self.interrupt = m.get('interrupt')
        if m.get('invoker') is not None:
            self.invoker = m.get('invoker')
        if m.get('level') is not None:
            self.level = m.get('level')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('pk') is not None:
            self.pk = m.get('pk')
        if m.get('prompt') is not None:
            self.prompt = m.get('prompt')
        if m.get('request_id') is not None:
            self.request_id = m.get('request_id')
        if m.get('result') is not None:
            temp_model = ALiYunDeleteResource()
            self.result = temp_model.from_map(m['result'])
        if m.get('task_extra_data') is not None:
            self.task_extra_data = m.get('task_extra_data')
        if m.get('task_identifier') is not None:
            self.task_identifier = m.get('task_identifier')
        if m.get('url') is not None:
            self.url = m.get('url')
        return self


class ReleaseBlockchainOrderLogicalRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        bid: str = None,
        country: str = None,
        gmt_wakeup: str = None,
        hid: int = None,
        interrupt: bool = None,
        pk: str = None,
        region_id: str = None,
        request_id: str = None,
        task_extra_data: str = None,
        task_identifier: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # bid
        self.bid = bid
        # country
        self.country = country
        # gmt_wakeup
        self.gmt_wakeup = gmt_wakeup
        # hid
        self.hid = hid
        # 中断标识
        self.interrupt = interrupt
        # pk
        self.pk = pk
        # region_id
        self.region_id = region_id
        # request_id
        self.request_id = request_id
        # task_extra_data
        self.task_extra_data = task_extra_data
        # task_identifier
        self.task_identifier = task_identifier

    def validate(self):
        self.validate_required(self.bid, 'bid')
        self.validate_required(self.hid, 'hid')
        self.validate_required(self.pk, 'pk')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.bid is not None:
            result['bid'] = self.bid
        if self.country is not None:
            result['country'] = self.country
        if self.gmt_wakeup is not None:
            result['gmt_wakeup'] = self.gmt_wakeup
        if self.hid is not None:
            result['hid'] = self.hid
        if self.interrupt is not None:
            result['interrupt'] = self.interrupt
        if self.pk is not None:
            result['pk'] = self.pk
        if self.region_id is not None:
            result['region_id'] = self.region_id
        if self.request_id is not None:
            result['request_id'] = self.request_id
        if self.task_extra_data is not None:
            result['task_extra_data'] = self.task_extra_data
        if self.task_identifier is not None:
            result['task_identifier'] = self.task_identifier
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('bid') is not None:
            self.bid = m.get('bid')
        if m.get('country') is not None:
            self.country = m.get('country')
        if m.get('gmt_wakeup') is not None:
            self.gmt_wakeup = m.get('gmt_wakeup')
        if m.get('hid') is not None:
            self.hid = m.get('hid')
        if m.get('interrupt') is not None:
            self.interrupt = m.get('interrupt')
        if m.get('pk') is not None:
            self.pk = m.get('pk')
        if m.get('region_id') is not None:
            self.region_id = m.get('region_id')
        if m.get('request_id') is not None:
            self.request_id = m.get('request_id')
        if m.get('task_extra_data') is not None:
            self.task_extra_data = m.get('task_extra_data')
        if m.get('task_identifier') is not None:
            self.task_identifier = m.get('task_identifier')
        return self


class ReleaseBlockchainOrderLogicalResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        bid: str = None,
        country: str = None,
        data: bool = None,
        gmt_wakeup: str = None,
        hid: int = None,
        interrupt: bool = None,
        invoker: str = None,
        level: int = None,
        message: str = None,
        pk: str = None,
        prompt: str = None,
        reques_id: str = None,
        result: ALiYunDeleteResource = None,
        task_extra_data: str = None,
        task_identifier: str = None,
        url: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # bid
        self.bid = bid
        # country
        self.country = country
        # data
        self.data = data
        # gmt_wakeup
        self.gmt_wakeup = gmt_wakeup
        # hid
        self.hid = hid
        # interrupt
        self.interrupt = interrupt
        # invoker
        self.invoker = invoker
        # level
        self.level = level
        # message
        self.message = message
        # pk
        self.pk = pk
        # prompt
        self.prompt = prompt
        # reques_id
        self.reques_id = reques_id
        # 阿里云请求返回结果
        self.result = result
        # task_extra_data
        self.task_extra_data = task_extra_data
        # task_identifier
        self.task_identifier = task_identifier
        # url
        self.url = url

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.bid is not None:
            result['bid'] = self.bid
        if self.country is not None:
            result['country'] = self.country
        if self.data is not None:
            result['data'] = self.data
        if self.gmt_wakeup is not None:
            result['gmt_wakeup'] = self.gmt_wakeup
        if self.hid is not None:
            result['hid'] = self.hid
        if self.interrupt is not None:
            result['interrupt'] = self.interrupt
        if self.invoker is not None:
            result['invoker'] = self.invoker
        if self.level is not None:
            result['level'] = self.level
        if self.message is not None:
            result['message'] = self.message
        if self.pk is not None:
            result['pk'] = self.pk
        if self.prompt is not None:
            result['prompt'] = self.prompt
        if self.reques_id is not None:
            result['reques_id'] = self.reques_id
        if self.result is not None:
            result['result'] = self.result.to_map()
        if self.task_extra_data is not None:
            result['task_extra_data'] = self.task_extra_data
        if self.task_identifier is not None:
            result['task_identifier'] = self.task_identifier
        if self.url is not None:
            result['url'] = self.url
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('bid') is not None:
            self.bid = m.get('bid')
        if m.get('country') is not None:
            self.country = m.get('country')
        if m.get('data') is not None:
            self.data = m.get('data')
        if m.get('gmt_wakeup') is not None:
            self.gmt_wakeup = m.get('gmt_wakeup')
        if m.get('hid') is not None:
            self.hid = m.get('hid')
        if m.get('interrupt') is not None:
            self.interrupt = m.get('interrupt')
        if m.get('invoker') is not None:
            self.invoker = m.get('invoker')
        if m.get('level') is not None:
            self.level = m.get('level')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('pk') is not None:
            self.pk = m.get('pk')
        if m.get('prompt') is not None:
            self.prompt = m.get('prompt')
        if m.get('reques_id') is not None:
            self.reques_id = m.get('reques_id')
        if m.get('result') is not None:
            temp_model = ALiYunDeleteResource()
            self.result = temp_model.from_map(m['result'])
        if m.get('task_extra_data') is not None:
            self.task_extra_data = m.get('task_extra_data')
        if m.get('task_identifier') is not None:
            self.task_identifier = m.get('task_identifier')
        if m.get('url') is not None:
            self.url = m.get('url')
        return self


class CheckBlockchainResourceRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        bid: str = None,
        country: str = None,
        gmt_wakeup: str = None,
        hid: int = None,
        interrupt: bool = None,
        pk: str = None,
        region_id: str = None,
        request_id: str = None,
        task_extra_data: str = None,
        task_identifier: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # bid
        self.bid = bid
        # country
        self.country = country
        # gmt_wakeup
        self.gmt_wakeup = gmt_wakeup
        # hid
        self.hid = hid
        # interrupt
        self.interrupt = interrupt
        # pk
        self.pk = pk
        # region_id
        self.region_id = region_id
        # request_id
        self.request_id = request_id
        # task_extra_data
        self.task_extra_data = task_extra_data
        # task_identifier
        self.task_identifier = task_identifier

    def validate(self):
        self.validate_required(self.bid, 'bid')
        self.validate_required(self.hid, 'hid')
        self.validate_required(self.pk, 'pk')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.bid is not None:
            result['bid'] = self.bid
        if self.country is not None:
            result['country'] = self.country
        if self.gmt_wakeup is not None:
            result['gmt_wakeup'] = self.gmt_wakeup
        if self.hid is not None:
            result['hid'] = self.hid
        if self.interrupt is not None:
            result['interrupt'] = self.interrupt
        if self.pk is not None:
            result['pk'] = self.pk
        if self.region_id is not None:
            result['region_id'] = self.region_id
        if self.request_id is not None:
            result['request_id'] = self.request_id
        if self.task_extra_data is not None:
            result['task_extra_data'] = self.task_extra_data
        if self.task_identifier is not None:
            result['task_identifier'] = self.task_identifier
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('bid') is not None:
            self.bid = m.get('bid')
        if m.get('country') is not None:
            self.country = m.get('country')
        if m.get('gmt_wakeup') is not None:
            self.gmt_wakeup = m.get('gmt_wakeup')
        if m.get('hid') is not None:
            self.hid = m.get('hid')
        if m.get('interrupt') is not None:
            self.interrupt = m.get('interrupt')
        if m.get('pk') is not None:
            self.pk = m.get('pk')
        if m.get('region_id') is not None:
            self.region_id = m.get('region_id')
        if m.get('request_id') is not None:
            self.request_id = m.get('request_id')
        if m.get('task_extra_data') is not None:
            self.task_extra_data = m.get('task_extra_data')
        if m.get('task_identifier') is not None:
            self.task_identifier = m.get('task_identifier')
        return self


class CheckBlockchainResourceResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        bid: str = None,
        country: str = None,
        gmt_wakeup: str = None,
        hid: int = None,
        interrupt: bool = None,
        invoker: str = None,
        level: int = None,
        message: str = None,
        pk: str = None,
        prompt: str = None,
        request_id: str = None,
        task_extra_data: str = None,
        task_identifier: str = None,
        url: str = None,
        result: ALiYunDeleteResource = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # bid
        self.bid = bid
        # country
        self.country = country
        # gmt_wakeup
        self.gmt_wakeup = gmt_wakeup
        # hid
        self.hid = hid
        # interrupt
        self.interrupt = interrupt
        # invoker
        self.invoker = invoker
        # level
        self.level = level
        # message
        self.message = message
        # pk
        self.pk = pk
        # prompt
        self.prompt = prompt
        # request_id
        self.request_id = request_id
        # task_extra_data
        self.task_extra_data = task_extra_data
        # task_identifier
        self.task_identifier = task_identifier
        # url
        self.url = url
        # 阿里云资源请求返回结果
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.bid is not None:
            result['bid'] = self.bid
        if self.country is not None:
            result['country'] = self.country
        if self.gmt_wakeup is not None:
            result['gmt_wakeup'] = self.gmt_wakeup
        if self.hid is not None:
            result['hid'] = self.hid
        if self.interrupt is not None:
            result['interrupt'] = self.interrupt
        if self.invoker is not None:
            result['invoker'] = self.invoker
        if self.level is not None:
            result['level'] = self.level
        if self.message is not None:
            result['message'] = self.message
        if self.pk is not None:
            result['pk'] = self.pk
        if self.prompt is not None:
            result['prompt'] = self.prompt
        if self.request_id is not None:
            result['request_id'] = self.request_id
        if self.task_extra_data is not None:
            result['task_extra_data'] = self.task_extra_data
        if self.task_identifier is not None:
            result['task_identifier'] = self.task_identifier
        if self.url is not None:
            result['url'] = self.url
        if self.result is not None:
            result['result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('bid') is not None:
            self.bid = m.get('bid')
        if m.get('country') is not None:
            self.country = m.get('country')
        if m.get('gmt_wakeup') is not None:
            self.gmt_wakeup = m.get('gmt_wakeup')
        if m.get('hid') is not None:
            self.hid = m.get('hid')
        if m.get('interrupt') is not None:
            self.interrupt = m.get('interrupt')
        if m.get('invoker') is not None:
            self.invoker = m.get('invoker')
        if m.get('level') is not None:
            self.level = m.get('level')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('pk') is not None:
            self.pk = m.get('pk')
        if m.get('prompt') is not None:
            self.prompt = m.get('prompt')
        if m.get('request_id') is not None:
            self.request_id = m.get('request_id')
        if m.get('task_extra_data') is not None:
            self.task_extra_data = m.get('task_extra_data')
        if m.get('task_identifier') is not None:
            self.task_identifier = m.get('task_identifier')
        if m.get('url') is not None:
            self.url = m.get('url')
        if m.get('result') is not None:
            temp_model = ALiYunDeleteResource()
            self.result = temp_model.from_map(m['result'])
        return self


class ConfirmBlockchainOrderRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        data: str = None,
        region_id: str = None,
        user_request_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # data
        self.data = data
        # region_id
        self.region_id = region_id
        # user_request_id
        self.user_request_id = user_request_id

    def validate(self):
        self.validate_required(self.data, 'data')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.data is not None:
            result['data'] = self.data
        if self.region_id is not None:
            result['region_id'] = self.region_id
        if self.user_request_id is not None:
            result['user_request_id'] = self.user_request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('data') is not None:
            self.data = m.get('data')
        if m.get('region_id') is not None:
            self.region_id = m.get('region_id')
        if m.get('user_request_id') is not None:
            self.user_request_id = m.get('user_request_id')
        return self


class ConfirmBlockchainOrderResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: ALiYunOrderResult = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 阿里云接口返回结果
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.result is not None:
            result['result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('result') is not None:
            temp_model = ALiYunOrderResult()
            self.result = temp_model.from_map(m['result'])
        return self


class ConnectBlockchainOrderRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        message: str = None,
        region_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # message
        self.message = message
        # region_id
        self.region_id = region_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.message is not None:
            result['message'] = self.message
        if self.region_id is not None:
            result['region_id'] = self.region_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('region_id') is not None:
            self.region_id = m.get('region_id')
        return self


class ConnectBlockchainOrderResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: ALiYunHandleBabelMns = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 阿里云请求参数
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.result is not None:
            result['result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('result') is not None:
            temp_model = ALiYunHandleBabelMns()
            self.result = temp_model.from_map(m['result'])
        return self


class ExecBlockchainOrderRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        data: str = None,
        region_id: str = None,
        user_request_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # data
        self.data = data
        # region_id
        self.region_id = region_id
        # user_request_id
        self.user_request_id = user_request_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.data is not None:
            result['data'] = self.data
        if self.region_id is not None:
            result['region_id'] = self.region_id
        if self.user_request_id is not None:
            result['user_request_id'] = self.user_request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('data') is not None:
            self.data = m.get('data')
        if m.get('region_id') is not None:
            self.region_id = m.get('region_id')
        if m.get('user_request_id') is not None:
            self.user_request_id = m.get('user_request_id')
        return self


class ExecBlockchainOrderResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: ALiYunChainExecuteOrder = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # result
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.result is not None:
            result['result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('result') is not None:
            temp_model = ALiYunChainExecuteOrder()
            self.result = temp_model.from_map(m['result'])
        return self


class CreateUnionUnionRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        consortium_description: str = None,
        consortium_name: str = None,
        region_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 联盟描述
        self.consortium_description = consortium_description
        # 联盟名称
        self.consortium_name = consortium_name
        # 区域信息
        self.region_id = region_id

    def validate(self):
        self.validate_required(self.consortium_name, 'consortium_name')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.consortium_description is not None:
            result['consortium_description'] = self.consortium_description
        if self.consortium_name is not None:
            result['consortium_name'] = self.consortium_name
        if self.region_id is not None:
            result['region_id'] = self.region_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('consortium_description') is not None:
            self.consortium_description = m.get('consortium_description')
        if m.get('consortium_name') is not None:
            self.consortium_name = m.get('consortium_name')
        if m.get('region_id') is not None:
            self.region_id = m.get('region_id')
        return self


class CreateUnionUnionResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: ALiYunUnion = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 联盟信息
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.result is not None:
            result['result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('result') is not None:
            temp_model = ALiYunUnion()
            self.result = temp_model.from_map(m['result'])
        return self


class DeleteUnionUnionRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        consortium_id: str = None,
        region_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 联盟ID
        self.consortium_id = consortium_id
        # 区域id
        self.region_id = region_id

    def validate(self):
        self.validate_required(self.consortium_id, 'consortium_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.consortium_id is not None:
            result['consortium_id'] = self.consortium_id
        if self.region_id is not None:
            result['region_id'] = self.region_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('consortium_id') is not None:
            self.consortium_id = m.get('consortium_id')
        if m.get('region_id') is not None:
            self.region_id = m.get('region_id')
        return self


class DeleteUnionUnionResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 结果信息
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.result is not None:
            result['result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('result') is not None:
            self.result = m.get('result')
        return self


class UpdateUnionUnionRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        consortium_id: str = None,
        consortium_name: str = None,
        region_id: str = None,
        consortium_description: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 联盟id
        self.consortium_id = consortium_id
        # 联盟名称
        self.consortium_name = consortium_name
        # 区域信息
        self.region_id = region_id
        # 联盟描述
        self.consortium_description = consortium_description

    def validate(self):
        self.validate_required(self.consortium_id, 'consortium_id')
        self.validate_required(self.consortium_name, 'consortium_name')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.consortium_id is not None:
            result['consortium_id'] = self.consortium_id
        if self.consortium_name is not None:
            result['consortium_name'] = self.consortium_name
        if self.region_id is not None:
            result['region_id'] = self.region_id
        if self.consortium_description is not None:
            result['consortium_description'] = self.consortium_description
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('consortium_id') is not None:
            self.consortium_id = m.get('consortium_id')
        if m.get('consortium_name') is not None:
            self.consortium_name = m.get('consortium_name')
        if m.get('region_id') is not None:
            self.region_id = m.get('region_id')
        if m.get('consortium_description') is not None:
            self.consortium_description = m.get('consortium_description')
        return self


class UpdateUnionUnionResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 结果信息
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.result is not None:
            result['result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('result') is not None:
            self.result = m.get('result')
        return self


class QueryUnionUnionRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        page_number: str = None,
        page_size: str = None,
        region_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 分页编号
        self.page_number = page_number
        # 分页大小
        self.page_size = page_size
        # 区域信息
        self.region_id = region_id

    def validate(self):
        self.validate_required(self.page_size, 'page_size')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.page_number is not None:
            result['page_number'] = self.page_number
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.region_id is not None:
            result['region_id'] = self.region_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('page_number') is not None:
            self.page_number = m.get('page_number')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('region_id') is not None:
            self.region_id = m.get('region_id')
        return self


class QueryUnionUnionResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: ALiYunUnion = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 阿里云联盟查询结果
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.result is not None:
            result['result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('result') is not None:
            temp_model = ALiYunUnion()
            self.result = temp_model.from_map(m['result'])
        return self


class ApplyUnionMemberRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        consortium_id: str = None,
        invite_bid: str = None,
        invite_user_id: int = None,
        region_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 联盟id
        self.consortium_id = consortium_id
        # 被邀请用户的bid
        self.invite_bid = invite_bid
        # 被邀请的用户id
        self.invite_user_id = invite_user_id
        # 区域信息
        self.region_id = region_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.consortium_id is not None:
            result['consortium_id'] = self.consortium_id
        if self.invite_bid is not None:
            result['invite_bid'] = self.invite_bid
        if self.invite_user_id is not None:
            result['invite_user_id'] = self.invite_user_id
        if self.region_id is not None:
            result['region_id'] = self.region_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('consortium_id') is not None:
            self.consortium_id = m.get('consortium_id')
        if m.get('invite_bid') is not None:
            self.invite_bid = m.get('invite_bid')
        if m.get('invite_user_id') is not None:
            self.invite_user_id = m.get('invite_user_id')
        if m.get('region_id') is not None:
            self.region_id = m.get('region_id')
        return self


class ApplyUnionMemberResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 邀请联盟的结果
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.result is not None:
            result['result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('result') is not None:
            self.result = m.get('result')
        return self


class ConfirmUnionMemberRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        code: str = None,
        region_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 邀请码
        self.code = code
        # 区域信息
        self.region_id = region_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.code is not None:
            result['code'] = self.code
        if self.region_id is not None:
            result['region_id'] = self.region_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('region_id') is not None:
            self.region_id = m.get('region_id')
        return self


class ConfirmUnionMemberResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 阿里云联盟成员加入
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.result is not None:
            result['result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('result') is not None:
            self.result = m.get('result')
        return self


class QueryUnionChainRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        consortium_id: str = None,
        page_number: int = None,
        page_size: int = None,
        region_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 联盟id
        self.consortium_id = consortium_id
        # 分页编号
        self.page_number = page_number
        # 分页大小
        self.page_size = page_size
        # region_id
        self.region_id = region_id

    def validate(self):
        self.validate_required(self.consortium_id, 'consortium_id')
        self.validate_required(self.page_size, 'page_size')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.consortium_id is not None:
            result['consortium_id'] = self.consortium_id
        if self.page_number is not None:
            result['page_number'] = self.page_number
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.region_id is not None:
            result['region_id'] = self.region_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('consortium_id') is not None:
            self.consortium_id = m.get('consortium_id')
        if m.get('page_number') is not None:
            self.page_number = m.get('page_number')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('region_id') is not None:
            self.region_id = m.get('region_id')
        return self


class QueryUnionChainResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: ALiYunUnion = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 联盟内链数据
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.result is not None:
            result['result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('result') is not None:
            temp_model = ALiYunUnion()
            self.result = temp_model.from_map(m['result'])
        return self


class QueryUnionMemberRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        consortium_id: str = None,
        page_number: int = None,
        page_size: int = None,
        region_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 联盟id
        self.consortium_id = consortium_id
        # page_number
        self.page_number = page_number
        # page_size
        self.page_size = page_size
        # 区域信息
        self.region_id = region_id

    def validate(self):
        self.validate_required(self.consortium_id, 'consortium_id')
        self.validate_required(self.page_size, 'page_size')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.consortium_id is not None:
            result['consortium_id'] = self.consortium_id
        if self.page_number is not None:
            result['page_number'] = self.page_number
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.region_id is not None:
            result['region_id'] = self.region_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('consortium_id') is not None:
            self.consortium_id = m.get('consortium_id')
        if m.get('page_number') is not None:
            self.page_number = m.get('page_number')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('region_id') is not None:
            self.region_id = m.get('region_id')
        return self


class QueryUnionMemberResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: ALiYunUnion = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 结果信息
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.result is not None:
            result['result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('result') is not None:
            temp_model = ALiYunUnion()
            self.result = temp_model.from_map(m['result'])
        return self


class UpdateUnionMemberRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        region_id: str = None,
        member_name: str = None,
        consortium_id: str = None,
        member_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # region_id
        self.region_id = region_id
        # member_name
        self.member_name = member_name
        # consortium_id
        self.consortium_id = consortium_id
        # member_id
        self.member_id = member_id

    def validate(self):
        self.validate_required(self.member_name, 'member_name')
        self.validate_required(self.consortium_id, 'consortium_id')
        self.validate_required(self.member_id, 'member_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.region_id is not None:
            result['region_id'] = self.region_id
        if self.member_name is not None:
            result['member_name'] = self.member_name
        if self.consortium_id is not None:
            result['consortium_id'] = self.consortium_id
        if self.member_id is not None:
            result['member_id'] = self.member_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('region_id') is not None:
            self.region_id = m.get('region_id')
        if m.get('member_name') is not None:
            self.member_name = m.get('member_name')
        if m.get('consortium_id') is not None:
            self.consortium_id = m.get('consortium_id')
        if m.get('member_id') is not None:
            self.member_id = m.get('member_id')
        return self


class UpdateUnionMemberResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # result
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.result is not None:
            result['result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('result') is not None:
            self.result = m.get('result')
        return self


class UpdateChainNameAntRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        ant_chain_id: str = None,
        ant_chain_name: str = None,
        region_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # ant_chain_id
        self.ant_chain_id = ant_chain_id
        # ant_chain_name
        self.ant_chain_name = ant_chain_name
        # region_id
        self.region_id = region_id

    def validate(self):
        self.validate_required(self.ant_chain_id, 'ant_chain_id')
        self.validate_required(self.ant_chain_name, 'ant_chain_name')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.ant_chain_id is not None:
            result['ant_chain_id'] = self.ant_chain_id
        if self.ant_chain_name is not None:
            result['ant_chain_name'] = self.ant_chain_name
        if self.region_id is not None:
            result['region_id'] = self.region_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('ant_chain_id') is not None:
            self.ant_chain_id = m.get('ant_chain_id')
        if m.get('ant_chain_name') is not None:
            self.ant_chain_name = m.get('ant_chain_name')
        if m.get('region_id') is not None:
            self.region_id = m.get('region_id')
        return self


class UpdateChainNameAntResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # result
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.result is not None:
            result['result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('result') is not None:
            self.result = m.get('result')
        return self


class CreateChainCertAntRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        ant_chain_id: str = None,
        region_id: str = None,
        upload_req: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # ant_chain_id
        self.ant_chain_id = ant_chain_id
        # region_id
        self.region_id = region_id
        # upload_req
        self.upload_req = upload_req

    def validate(self):
        self.validate_required(self.ant_chain_id, 'ant_chain_id')
        self.validate_required(self.upload_req, 'upload_req')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.ant_chain_id is not None:
            result['ant_chain_id'] = self.ant_chain_id
        if self.region_id is not None:
            result['region_id'] = self.region_id
        if self.upload_req is not None:
            result['upload_req'] = self.upload_req
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('ant_chain_id') is not None:
            self.ant_chain_id = m.get('ant_chain_id')
        if m.get('region_id') is not None:
            self.region_id = m.get('region_id')
        if m.get('upload_req') is not None:
            self.upload_req = m.get('upload_req')
        return self


class CreateChainCertAntResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # result
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.result is not None:
            result['result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('result') is not None:
            self.result = m.get('result')
        return self


class ApplyChainCertAntRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        ant_chain_id: str = None,
        common_name: str = None,
        consortium_id: str = None,
        country_name: str = None,
        locality_name: str = None,
        organization_name: str = None,
        organization_unit_name: str = None,
        password: str = None,
        region_id: str = None,
        state_or_province_name: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # ant_chain_id
        self.ant_chain_id = ant_chain_id
        # common_name
        self.common_name = common_name
        # consortium_id
        self.consortium_id = consortium_id
        # country_name
        self.country_name = country_name
        # locality_name
        self.locality_name = locality_name
        # organization_name
        self.organization_name = organization_name
        # organization_unit_name
        self.organization_unit_name = organization_unit_name
        # password
        self.password = password
        # region_id
        self.region_id = region_id
        # state_or_province_name
        self.state_or_province_name = state_or_province_name

    def validate(self):
        self.validate_required(self.ant_chain_id, 'ant_chain_id')
        self.validate_required(self.common_name, 'common_name')
        self.validate_required(self.consortium_id, 'consortium_id')
        self.validate_required(self.country_name, 'country_name')
        self.validate_required(self.locality_name, 'locality_name')
        self.validate_required(self.organization_name, 'organization_name')
        self.validate_required(self.organization_unit_name, 'organization_unit_name')
        self.validate_required(self.password, 'password')
        self.validate_required(self.state_or_province_name, 'state_or_province_name')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.ant_chain_id is not None:
            result['ant_chain_id'] = self.ant_chain_id
        if self.common_name is not None:
            result['common_name'] = self.common_name
        if self.consortium_id is not None:
            result['consortium_id'] = self.consortium_id
        if self.country_name is not None:
            result['country_name'] = self.country_name
        if self.locality_name is not None:
            result['locality_name'] = self.locality_name
        if self.organization_name is not None:
            result['organization_name'] = self.organization_name
        if self.organization_unit_name is not None:
            result['organization_unit_name'] = self.organization_unit_name
        if self.password is not None:
            result['password'] = self.password
        if self.region_id is not None:
            result['region_id'] = self.region_id
        if self.state_or_province_name is not None:
            result['state_or_province_name'] = self.state_or_province_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('ant_chain_id') is not None:
            self.ant_chain_id = m.get('ant_chain_id')
        if m.get('common_name') is not None:
            self.common_name = m.get('common_name')
        if m.get('consortium_id') is not None:
            self.consortium_id = m.get('consortium_id')
        if m.get('country_name') is not None:
            self.country_name = m.get('country_name')
        if m.get('locality_name') is not None:
            self.locality_name = m.get('locality_name')
        if m.get('organization_name') is not None:
            self.organization_name = m.get('organization_name')
        if m.get('organization_unit_name') is not None:
            self.organization_unit_name = m.get('organization_unit_name')
        if m.get('password') is not None:
            self.password = m.get('password')
        if m.get('region_id') is not None:
            self.region_id = m.get('region_id')
        if m.get('state_or_province_name') is not None:
            self.state_or_province_name = m.get('state_or_province_name')
        return self


class ApplyChainCertAntResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: ALiYunChainDownload = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # result
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.result is not None:
            result['result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('result') is not None:
            temp_model = ALiYunChainDownload()
            self.result = temp_model.from_map(m['result'])
        return self


class CreateChainPublicCertRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        bizid: str = None,
        consortium_id: str = None,
        region_id: str = None,
        upload_req: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # bizid
        self.bizid = bizid
        # consortium_id
        self.consortium_id = consortium_id
        # region_id
        self.region_id = region_id
        # upload_req
        self.upload_req = upload_req

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.bizid is not None:
            result['bizid'] = self.bizid
        if self.consortium_id is not None:
            result['consortium_id'] = self.consortium_id
        if self.region_id is not None:
            result['region_id'] = self.region_id
        if self.upload_req is not None:
            result['upload_req'] = self.upload_req
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('bizid') is not None:
            self.bizid = m.get('bizid')
        if m.get('consortium_id') is not None:
            self.consortium_id = m.get('consortium_id')
        if m.get('region_id') is not None:
            self.region_id = m.get('region_id')
        if m.get('upload_req') is not None:
            self.upload_req = m.get('upload_req')
        return self


class CreateChainPublicCertResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # result
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.result is not None:
            result['result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('result') is not None:
            self.result = m.get('result')
        return self


class ApplyChainPublicCertRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        bizid: str = None,
        common_name: str = None,
        country_name: str = None,
        locality_name: str = None,
        organization_name: str = None,
        organization_unit_name: str = None,
        password: str = None,
        region_id: str = None,
        state_or_province_name: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # bizid
        self.bizid = bizid
        # common_name
        self.common_name = common_name
        # country_name
        self.country_name = country_name
        # locality_name
        self.locality_name = locality_name
        # organization_name
        self.organization_name = organization_name
        # organization_unit_name
        self.organization_unit_name = organization_unit_name
        # password
        self.password = password
        # region_id
        self.region_id = region_id
        # state_or_province_name
        self.state_or_province_name = state_or_province_name

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.bizid is not None:
            result['bizid'] = self.bizid
        if self.common_name is not None:
            result['common_name'] = self.common_name
        if self.country_name is not None:
            result['country_name'] = self.country_name
        if self.locality_name is not None:
            result['locality_name'] = self.locality_name
        if self.organization_name is not None:
            result['organization_name'] = self.organization_name
        if self.organization_unit_name is not None:
            result['organization_unit_name'] = self.organization_unit_name
        if self.password is not None:
            result['password'] = self.password
        if self.region_id is not None:
            result['region_id'] = self.region_id
        if self.state_or_province_name is not None:
            result['state_or_province_name'] = self.state_or_province_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('bizid') is not None:
            self.bizid = m.get('bizid')
        if m.get('common_name') is not None:
            self.common_name = m.get('common_name')
        if m.get('country_name') is not None:
            self.country_name = m.get('country_name')
        if m.get('locality_name') is not None:
            self.locality_name = m.get('locality_name')
        if m.get('organization_name') is not None:
            self.organization_name = m.get('organization_name')
        if m.get('organization_unit_name') is not None:
            self.organization_unit_name = m.get('organization_unit_name')
        if m.get('password') is not None:
            self.password = m.get('password')
        if m.get('region_id') is not None:
            self.region_id = m.get('region_id')
        if m.get('state_or_province_name') is not None:
            self.state_or_province_name = m.get('state_or_province_name')
        return self


class ApplyChainPublicCertResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: ALiYunChainDownload = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # result
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.result is not None:
            result['result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('result') is not None:
            temp_model = ALiYunChainDownload()
            self.result = temp_model.from_map(m['result'])
        return self


class ReinitChainPublicCertRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        bizid: str = None,
        region_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # bizid
        self.bizid = bizid
        # region_id
        self.region_id = region_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.bizid is not None:
            result['bizid'] = self.bizid
        if self.region_id is not None:
            result['region_id'] = self.region_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('bizid') is not None:
            self.bizid = m.get('bizid')
        if m.get('region_id') is not None:
            self.region_id = m.get('region_id')
        return self


class ReinitChainPublicCertResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # result
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.result is not None:
            result['result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('result') is not None:
            self.result = m.get('result')
        return self


class CreateChainPublicAccountRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        account: str = None,
        account_pub_key: str = None,
        account_recover_pub_key: str = None,
        bizid: str = None,
        region_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # account
        self.account = account
        # account_pub_key
        self.account_pub_key = account_pub_key
        # account_recover_pub_key
        self.account_recover_pub_key = account_recover_pub_key
        # bizid
        self.bizid = bizid
        # region_id
        self.region_id = region_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.account is not None:
            result['account'] = self.account
        if self.account_pub_key is not None:
            result['account_pub_key'] = self.account_pub_key
        if self.account_recover_pub_key is not None:
            result['account_recover_pub_key'] = self.account_recover_pub_key
        if self.bizid is not None:
            result['bizid'] = self.bizid
        if self.region_id is not None:
            result['region_id'] = self.region_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('account') is not None:
            self.account = m.get('account')
        if m.get('account_pub_key') is not None:
            self.account_pub_key = m.get('account_pub_key')
        if m.get('account_recover_pub_key') is not None:
            self.account_recover_pub_key = m.get('account_recover_pub_key')
        if m.get('bizid') is not None:
            self.bizid = m.get('bizid')
        if m.get('region_id') is not None:
            self.region_id = m.get('region_id')
        return self


class CreateChainPublicAccountResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # result
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.result is not None:
            result['result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('result') is not None:
            self.result = m.get('result')
        return self


class ApplyChainPublicAccountRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        account: str = None,
        bizid: str = None,
        password: str = None,
        recover_password: str = None,
        region_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # account
        self.account = account
        # bizid
        self.bizid = bizid
        # password
        self.password = password
        # recover_password
        self.recover_password = recover_password
        # region_id
        self.region_id = region_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.account is not None:
            result['account'] = self.account
        if self.bizid is not None:
            result['bizid'] = self.bizid
        if self.password is not None:
            result['password'] = self.password
        if self.recover_password is not None:
            result['recover_password'] = self.recover_password
        if self.region_id is not None:
            result['region_id'] = self.region_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('account') is not None:
            self.account = m.get('account')
        if m.get('bizid') is not None:
            self.bizid = m.get('bizid')
        if m.get('password') is not None:
            self.password = m.get('password')
        if m.get('recover_password') is not None:
            self.recover_password = m.get('recover_password')
        if m.get('region_id') is not None:
            self.region_id = m.get('region_id')
        return self


class ApplyChainPublicAccountResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: ALiYunChainAccount = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # result
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.result is not None:
            result['result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('result') is not None:
            temp_model = ALiYunChainAccount()
            self.result = temp_model.from_map(m['result'])
        return self


class QueryChainPublicRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        region_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # region_id
        self.region_id = region_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.region_id is not None:
            result['region_id'] = self.region_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('region_id') is not None:
            self.region_id = m.get('region_id')
        return self


class QueryChainPublicResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: ALiYunChain = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # result
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.result is not None:
            result['result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('result') is not None:
            temp_model = ALiYunChain()
            self.result = temp_model.from_map(m['result'])
        return self


class DownloadChainPublicCertRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        bizid: str = None,
        region_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # bizid
        self.bizid = bizid
        # region_id
        self.region_id = region_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.bizid is not None:
            result['bizid'] = self.bizid
        if self.region_id is not None:
            result['region_id'] = self.region_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('bizid') is not None:
            self.bizid = m.get('bizid')
        if m.get('region_id') is not None:
            self.region_id = m.get('region_id')
        return self


class DownloadChainPublicCertResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: ALiYunDownloadPath = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # result
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.result is not None:
            result['result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('result') is not None:
            temp_model = ALiYunDownloadPath()
            self.result = temp_model.from_map(m['result'])
        return self


class CreateChainAccountAntRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        account: str = None,
        account_pub_key: str = None,
        account_recover_pub_key: str = None,
        ant_chain_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # account
        self.account = account
        # account_pub_key
        self.account_pub_key = account_pub_key
        # account_recover_pub_key
        self.account_recover_pub_key = account_recover_pub_key
        # ant_chain_id
        self.ant_chain_id = ant_chain_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.account is not None:
            result['account'] = self.account
        if self.account_pub_key is not None:
            result['account_pub_key'] = self.account_pub_key
        if self.account_recover_pub_key is not None:
            result['account_recover_pub_key'] = self.account_recover_pub_key
        if self.ant_chain_id is not None:
            result['ant_chain_id'] = self.ant_chain_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('account') is not None:
            self.account = m.get('account')
        if m.get('account_pub_key') is not None:
            self.account_pub_key = m.get('account_pub_key')
        if m.get('account_recover_pub_key') is not None:
            self.account_recover_pub_key = m.get('account_recover_pub_key')
        if m.get('ant_chain_id') is not None:
            self.ant_chain_id = m.get('ant_chain_id')
        return self


class CreateChainAccountAntResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: ALiYunChainAccount = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # result
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.result is not None:
            result['result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('result') is not None:
            temp_model = ALiYunChainAccount()
            self.result = temp_model.from_map(m['result'])
        return self


class ApplyChainAccountAntRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        account: str = None,
        ant_chain_id: str = None,
        password: str = None,
        recover_password: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # account
        self.account = account
        # ant_chain_id
        self.ant_chain_id = ant_chain_id
        # password
        self.password = password
        # recover_password
        self.recover_password = recover_password

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.account is not None:
            result['account'] = self.account
        if self.ant_chain_id is not None:
            result['ant_chain_id'] = self.ant_chain_id
        if self.password is not None:
            result['password'] = self.password
        if self.recover_password is not None:
            result['recover_password'] = self.recover_password
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('account') is not None:
            self.account = m.get('account')
        if m.get('ant_chain_id') is not None:
            self.ant_chain_id = m.get('ant_chain_id')
        if m.get('password') is not None:
            self.password = m.get('password')
        if m.get('recover_password') is not None:
            self.recover_password = m.get('recover_password')
        return self


class ApplyChainAccountAntResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: ALiYunChainAccount = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # result
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.result is not None:
            result['result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('result') is not None:
            temp_model = ALiYunChainAccount()
            self.result = temp_model.from_map(m['result'])
        return self


class QueryChainAccountAntRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        ant_chain_id: str = None,
        page_number: int = None,
        page_size: int = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # ant_chain_id
        self.ant_chain_id = ant_chain_id
        # page_number
        self.page_number = page_number
        # page_size
        self.page_size = page_size

    def validate(self):
        self.validate_required(self.ant_chain_id, 'ant_chain_id')
        self.validate_required(self.page_size, 'page_size')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.ant_chain_id is not None:
            result['ant_chain_id'] = self.ant_chain_id
        if self.page_number is not None:
            result['page_number'] = self.page_number
        if self.page_size is not None:
            result['page_size'] = self.page_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('ant_chain_id') is not None:
            self.ant_chain_id = m.get('ant_chain_id')
        if m.get('page_number') is not None:
            self.page_number = m.get('page_number')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        return self


class QueryChainAccountAntResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: ALiYunAccountList = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # result
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.result is not None:
            result['result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('result') is not None:
            temp_model = ALiYunAccountList()
            self.result = temp_model.from_map(m['result'])
        return self


class DownloadChainCertAntRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        ant_chain_id: str = None,
        region_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # ant_chain_id
        self.ant_chain_id = ant_chain_id
        # region_id
        self.region_id = region_id

    def validate(self):
        self.validate_required(self.ant_chain_id, 'ant_chain_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.ant_chain_id is not None:
            result['ant_chain_id'] = self.ant_chain_id
        if self.region_id is not None:
            result['region_id'] = self.region_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('ant_chain_id') is not None:
            self.ant_chain_id = m.get('ant_chain_id')
        if m.get('region_id') is not None:
            self.region_id = m.get('region_id')
        return self


class DownloadChainCertAntResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: ALiYunDownloadPath = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # result
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.result is not None:
            result['result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('result') is not None:
            temp_model = ALiYunDownloadPath()
            self.result = temp_model.from_map(m['result'])
        return self


class QueryChainNodeAntRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        ant_chain_id: str = None,
        region_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # ant_chain_id
        self.ant_chain_id = ant_chain_id
        # region_id
        self.region_id = region_id

    def validate(self):
        self.validate_required(self.ant_chain_id, 'ant_chain_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.ant_chain_id is not None:
            result['ant_chain_id'] = self.ant_chain_id
        if self.region_id is not None:
            result['region_id'] = self.region_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('ant_chain_id') is not None:
            self.ant_chain_id = m.get('ant_chain_id')
        if m.get('region_id') is not None:
            self.region_id = m.get('region_id')
        return self


class QueryChainNodeAntResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: List[str] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # result
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.result is not None:
            result['result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('result') is not None:
            self.result = m.get('result')
        return self


class FreezeChainAccountAntRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        account: str = None,
        ant_chain_id: str = None,
        region_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # account
        self.account = account
        # ant_chain_id
        self.ant_chain_id = ant_chain_id
        # region_id
        self.region_id = region_id

    def validate(self):
        self.validate_required(self.account, 'account')
        self.validate_required(self.ant_chain_id, 'ant_chain_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.account is not None:
            result['account'] = self.account
        if self.ant_chain_id is not None:
            result['ant_chain_id'] = self.ant_chain_id
        if self.region_id is not None:
            result['region_id'] = self.region_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('account') is not None:
            self.account = m.get('account')
        if m.get('ant_chain_id') is not None:
            self.ant_chain_id = m.get('ant_chain_id')
        if m.get('region_id') is not None:
            self.region_id = m.get('region_id')
        return self


class FreezeChainAccountAntResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # result
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.result is not None:
            result['result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('result') is not None:
            self.result = m.get('result')
        return self


class UnfreezeChainAccountAntRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        account: str = None,
        ant_chain_id: str = None,
        region_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # account
        self.account = account
        # ant_chain_id
        self.ant_chain_id = ant_chain_id
        # region_id
        self.region_id = region_id

    def validate(self):
        self.validate_required(self.ant_chain_id, 'ant_chain_id')
        self.validate_required(self.region_id, 'region_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.account is not None:
            result['account'] = self.account
        if self.ant_chain_id is not None:
            result['ant_chain_id'] = self.ant_chain_id
        if self.region_id is not None:
            result['region_id'] = self.region_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('account') is not None:
            self.account = m.get('account')
        if m.get('ant_chain_id') is not None:
            self.ant_chain_id = m.get('ant_chain_id')
        if m.get('region_id') is not None:
            self.region_id = m.get('region_id')
        return self


class UnfreezeChainAccountAntResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # result
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.result is not None:
            result['result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('result') is not None:
            self.result = m.get('result')
        return self


class ReinitChainCertAntRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        ant_chain_id: str = None,
        region_id: str = None,
        username: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # ant_chain_id
        self.ant_chain_id = ant_chain_id
        # region_id
        self.region_id = region_id
        # username
        self.username = username

    def validate(self):
        self.validate_required(self.ant_chain_id, 'ant_chain_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.ant_chain_id is not None:
            result['ant_chain_id'] = self.ant_chain_id
        if self.region_id is not None:
            result['region_id'] = self.region_id
        if self.username is not None:
            result['username'] = self.username
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('ant_chain_id') is not None:
            self.ant_chain_id = m.get('ant_chain_id')
        if m.get('region_id') is not None:
            self.region_id = m.get('region_id')
        if m.get('username') is not None:
            self.username = m.get('username')
        return self


class ReinitChainCertAntResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # result
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.result is not None:
            result['result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('result') is not None:
            self.result = m.get('result')
        return self


class QueryChainCertAntRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        ant_chain_id: str = None,
        page_number: int = None,
        page_size: int = None,
        region_id: str = None,
        status: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # ant_chain_id
        self.ant_chain_id = ant_chain_id
        # page_number
        self.page_number = page_number
        # page_size
        self.page_size = page_size
        # region_id
        self.region_id = region_id
        # status
        self.status = status

    def validate(self):
        self.validate_required(self.ant_chain_id, 'ant_chain_id')
        self.validate_required(self.page_number, 'page_number')
        self.validate_required(self.page_size, 'page_size')
        self.validate_required(self.status, 'status')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.ant_chain_id is not None:
            result['ant_chain_id'] = self.ant_chain_id
        if self.page_number is not None:
            result['page_number'] = self.page_number
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.region_id is not None:
            result['region_id'] = self.region_id
        if self.status is not None:
            result['status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('ant_chain_id') is not None:
            self.ant_chain_id = m.get('ant_chain_id')
        if m.get('page_number') is not None:
            self.page_number = m.get('page_number')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('region_id') is not None:
            self.region_id = m.get('region_id')
        if m.get('status') is not None:
            self.status = m.get('status')
        return self


class QueryChainCertAntResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: ALiYunCertificateApplications = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # result
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.result is not None:
            result['result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('result') is not None:
            temp_model = ALiYunCertificateApplications()
            self.result = temp_model.from_map(m['result'])
        return self


class QueryChainBrowserInfoRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        ant_chain_id: str = None,
        region_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # ant_chain_id
        self.ant_chain_id = ant_chain_id
        # region_id
        self.region_id = region_id

    def validate(self):
        self.validate_required(self.ant_chain_id, 'ant_chain_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.ant_chain_id is not None:
            result['ant_chain_id'] = self.ant_chain_id
        if self.region_id is not None:
            result['region_id'] = self.region_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('ant_chain_id') is not None:
            self.ant_chain_id = m.get('ant_chain_id')
        if m.get('region_id') is not None:
            self.region_id = m.get('region_id')
        return self


class QueryChainBrowserInfoResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: ALiYunChainInfo = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # result
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.result is not None:
            result['result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('result') is not None:
            temp_model = ALiYunChainInfo()
            self.result = temp_model.from_map(m['result'])
        return self


class QueryChainBrowserBlocksRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        ant_chain_id: str = None,
        region_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # ant_chain_id
        self.ant_chain_id = ant_chain_id
        # region_id
        self.region_id = region_id

    def validate(self):
        self.validate_required(self.ant_chain_id, 'ant_chain_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.ant_chain_id is not None:
            result['ant_chain_id'] = self.ant_chain_id
        if self.region_id is not None:
            result['region_id'] = self.region_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('ant_chain_id') is not None:
            self.ant_chain_id = m.get('ant_chain_id')
        if m.get('region_id') is not None:
            self.region_id = m.get('region_id')
        return self


class QueryChainBrowserBlocksResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: List[ALiYunChainBlockInfo] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # result
        self.result = result

    def validate(self):
        if self.result:
            for k in self.result:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['result'] = []
        if self.result is not None:
            for k in self.result:
                result['result'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.result = []
        if m.get('result') is not None:
            for k in m.get('result'):
                temp_model = ALiYunChainBlockInfo()
                self.result.append(temp_model.from_map(k))
        return self


class QueryChainBrowserTransactionsRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        bizid: str = None,
        start: int = None,
        end: int = None,
        region_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # bizid
        self.bizid = bizid
        # start
        self.start = start
        # end
        self.end = end
        # region_id
        self.region_id = region_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.bizid is not None:
            result['bizid'] = self.bizid
        if self.start is not None:
            result['start'] = self.start
        if self.end is not None:
            result['end'] = self.end
        if self.region_id is not None:
            result['region_id'] = self.region_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('bizid') is not None:
            self.bizid = m.get('bizid')
        if m.get('start') is not None:
            self.start = m.get('start')
        if m.get('end') is not None:
            self.end = m.get('end')
        if m.get('region_id') is not None:
            self.region_id = m.get('region_id')
        return self


class QueryChainBrowserTransactionsResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: List[ALiYunChainStatics] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # result
        self.result = result

    def validate(self):
        if self.result:
            for k in self.result:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['result'] = []
        if self.result is not None:
            for k in self.result:
                result['result'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.result = []
        if m.get('result') is not None:
            for k in m.get('result'):
                temp_model = ALiYunChainStatics()
                self.result.append(temp_model.from_map(k))
        return self


class BatchqueryChainBrowserTransactionRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        ant_chain_id: str = None,
        region_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # ant_chain_id
        self.ant_chain_id = ant_chain_id
        # region_id
        self.region_id = region_id

    def validate(self):
        self.validate_required(self.ant_chain_id, 'ant_chain_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.ant_chain_id is not None:
            result['ant_chain_id'] = self.ant_chain_id
        if self.region_id is not None:
            result['region_id'] = self.region_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('ant_chain_id') is not None:
            self.ant_chain_id = m.get('ant_chain_id')
        if m.get('region_id') is not None:
            self.region_id = m.get('region_id')
        return self


class BatchqueryChainBrowserTransactionResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: List[ALiYunLatestTransaction] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # result
        self.result = result

    def validate(self):
        if self.result:
            for k in self.result:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['result'] = []
        if self.result is not None:
            for k in self.result:
                result['result'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.result = []
        if m.get('result') is not None:
            for k in m.get('result'):
                temp_model = ALiYunLatestTransaction()
                self.result.append(temp_model.from_map(k))
        return self


class QueryChainBrowserReceiptRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        ant_chain_id: str = None,
        hash: str = None,
        region_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # ant_chain_id
        self.ant_chain_id = ant_chain_id
        # hash
        self.hash = hash
        # region_id
        self.region_id = region_id

    def validate(self):
        self.validate_required(self.ant_chain_id, 'ant_chain_id')
        self.validate_required(self.hash, 'hash')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.ant_chain_id is not None:
            result['ant_chain_id'] = self.ant_chain_id
        if self.hash is not None:
            result['hash'] = self.hash
        if self.region_id is not None:
            result['region_id'] = self.region_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('ant_chain_id') is not None:
            self.ant_chain_id = m.get('ant_chain_id')
        if m.get('hash') is not None:
            self.hash = m.get('hash')
        if m.get('region_id') is not None:
            self.region_id = m.get('region_id')
        return self


class QueryChainBrowserReceiptResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: ALiYunTransactionReceipt = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # result
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.result is not None:
            result['result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('result') is not None:
            temp_model = ALiYunTransactionReceipt()
            self.result = temp_model.from_map(m['result'])
        return self


class QueryChainBrowserTransactionRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        ant_chain_id: str = None,
        hash: str = None,
        region_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # ant_chain_id
        self.ant_chain_id = ant_chain_id
        # hash
        self.hash = hash
        # region_id
        self.region_id = region_id

    def validate(self):
        self.validate_required(self.ant_chain_id, 'ant_chain_id')
        self.validate_required(self.hash, 'hash')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.ant_chain_id is not None:
            result['ant_chain_id'] = self.ant_chain_id
        if self.hash is not None:
            result['hash'] = self.hash
        if self.region_id is not None:
            result['region_id'] = self.region_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('ant_chain_id') is not None:
            self.ant_chain_id = m.get('ant_chain_id')
        if m.get('hash') is not None:
            self.hash = m.get('hash')
        if m.get('region_id') is not None:
            self.region_id = m.get('region_id')
        return self


class QueryChainBrowserTransactionResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: ALiYunTransactionResult = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # result
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.result is not None:
            result['result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('result') is not None:
            temp_model = ALiYunTransactionResult()
            self.result = temp_model.from_map(m['result'])
        return self


class QueryChainBrowserBlockRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        ant_chain_id: str = None,
        height: int = None,
        region_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # ant_chain_id
        self.ant_chain_id = ant_chain_id
        # height
        self.height = height
        # region_id
        self.region_id = region_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.ant_chain_id is not None:
            result['ant_chain_id'] = self.ant_chain_id
        if self.height is not None:
            result['height'] = self.height
        if self.region_id is not None:
            result['region_id'] = self.region_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('ant_chain_id') is not None:
            self.ant_chain_id = m.get('ant_chain_id')
        if m.get('height') is not None:
            self.height = m.get('height')
        if m.get('region_id') is not None:
            self.region_id = m.get('region_id')
        return self


class QueryChainBrowserBlockResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: ALiYunChainBlock = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # result
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.result is not None:
            result['result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('result') is not None:
            temp_model = ALiYunChainBlock()
            self.result = temp_model.from_map(m['result'])
        return self


class QueryChainResouceRegionRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        region_id: str = None,
        locale: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # region_id
        self.region_id = region_id
        # locale
        self.locale = locale

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.region_id is not None:
            result['region_id'] = self.region_id
        if self.locale is not None:
            result['locale'] = self.locale
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('region_id') is not None:
            self.region_id = m.get('region_id')
        if m.get('locale') is not None:
            self.locale = m.get('locale')
        return self


class QueryChainResouceRegionResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: List[ALiYunChainRegion] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # result
        self.result = result

    def validate(self):
        if self.result:
            for k in self.result:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['result'] = []
        if self.result is not None:
            for k in self.result:
                result['result'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.result = []
        if m.get('result') is not None:
            for k in m.get('result'):
                temp_model = ALiYunChainRegion()
                self.result.append(temp_model.from_map(k))
        return self


class QueryChainResourceTypeRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        region_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # region_id
        self.region_id = region_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.region_id is not None:
            result['region_id'] = self.region_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('region_id') is not None:
            self.region_id = m.get('region_id')
        return self


class QueryChainResourceTypeResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: List[ALiYunChainResouceType] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # result
        self.result = result

    def validate(self):
        if self.result:
            for k in self.result:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['result'] = []
        if self.result is not None:
            for k in self.result:
                result['result'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.result = []
        if m.get('result') is not None:
            for k in m.get('result'):
                temp_model = ALiYunChainResouceType()
                self.result.append(temp_model.from_map(k))
        return self


class QueryChainResouceSaleRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        region_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # region_id
        self.region_id = region_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.region_id is not None:
            result['region_id'] = self.region_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('region_id') is not None:
            self.region_id = m.get('region_id')
        return self


class QueryChainResouceSaleResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        reslut: ALiYunChainResouceForSale = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # reslut
        self.reslut = reslut

    def validate(self):
        if self.reslut:
            self.reslut.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.reslut is not None:
            result['reslut'] = self.reslut.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('reslut') is not None:
            temp_model = ALiYunChainResouceForSale()
            self.reslut = temp_model.from_map(m['reslut'])
        return self


class QueryChainResourceConfigRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        purpose: str = None,
        region_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # purpose
        self.purpose = purpose
        # region_id
        self.region_id = region_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.purpose is not None:
            result['purpose'] = self.purpose
        if self.region_id is not None:
            result['region_id'] = self.region_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('purpose') is not None:
            self.purpose = m.get('purpose')
        if m.get('region_id') is not None:
            self.region_id = m.get('region_id')
        return self


class QueryChainResourceConfigResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: List[ALiYunChainConfigOption] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # result
        self.result = result

    def validate(self):
        if self.result:
            for k in self.result:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['result'] = []
        if self.result is not None:
            for k in self.result:
                result['result'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.result = []
        if m.get('result') is not None:
            for k in m.get('result'):
                temp_model = ALiYunChainConfigOption()
                self.result.append(temp_model.from_map(k))
        return self


class QueryChainBrowserStatisticsRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        ant_chain_id: str = None,
        start: int = None,
        end: int = None,
        region_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # ant_chain_id
        self.ant_chain_id = ant_chain_id
        # start
        self.start = start
        # end
        self.end = end
        # region_id
        self.region_id = region_id

    def validate(self):
        self.validate_required(self.ant_chain_id, 'ant_chain_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.ant_chain_id is not None:
            result['ant_chain_id'] = self.ant_chain_id
        if self.start is not None:
            result['start'] = self.start
        if self.end is not None:
            result['end'] = self.end
        if self.region_id is not None:
            result['region_id'] = self.region_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('ant_chain_id') is not None:
            self.ant_chain_id = m.get('ant_chain_id')
        if m.get('start') is not None:
            self.start = m.get('start')
        if m.get('end') is not None:
            self.end = m.get('end')
        if m.get('region_id') is not None:
            self.region_id = m.get('region_id')
        return self


class QueryChainBrowserStatisticsResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: List[ALiYunChainStatics] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # result
        self.result = result

    def validate(self):
        if self.result:
            for k in self.result:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['result'] = []
        if self.result is not None:
            for k in self.result:
                result['result'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.result = []
        if m.get('result') is not None:
            for k in m.get('result'):
                temp_model = ALiYunChainStatics()
                self.result.append(temp_model.from_map(k))
        return self


class ExecChainPublicContractRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        bizid: str = None,
        transaction: str = None,
        region_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # bizid
        self.bizid = bizid
        # transaction
        self.transaction = transaction
        # region_id
        self.region_id = region_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.bizid is not None:
            result['bizid'] = self.bizid
        if self.transaction is not None:
            result['transaction'] = self.transaction
        if self.region_id is not None:
            result['region_id'] = self.region_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('bizid') is not None:
            self.bizid = m.get('bizid')
        if m.get('transaction') is not None:
            self.transaction = m.get('transaction')
        if m.get('region_id') is not None:
            self.region_id = m.get('region_id')
        return self


class ExecChainPublicContractResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # result
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.result is not None:
            result['result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('result') is not None:
            self.result = m.get('result')
        return self


class QueryChainPublicIdeRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        bizid: str = None,
        region_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # bizid
        self.bizid = bizid
        # region_id
        self.region_id = region_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.bizid is not None:
            result['bizid'] = self.bizid
        if self.region_id is not None:
            result['region_id'] = self.region_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('bizid') is not None:
            self.bizid = m.get('bizid')
        if m.get('region_id') is not None:
            self.region_id = m.get('region_id')
        return self


class QueryChainPublicIdeResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: List[ALiYunChainCloudIdeConfig] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # result
        self.result = result

    def validate(self):
        if self.result:
            for k in self.result:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['result'] = []
        if self.result is not None:
            for k in self.result:
                result['result'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.result = []
        if m.get('result') is not None:
            for k in m.get('result'):
                temp_model = ALiYunChainCloudIdeConfig()
                self.result.append(temp_model.from_map(k))
        return self


class QueryChainPublicContentRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        region_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # region_id
        self.region_id = region_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.region_id is not None:
            result['region_id'] = self.region_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('region_id') is not None:
            self.region_id = m.get('region_id')
        return self


class QueryChainPublicContentResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # result
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.result is not None:
            result['result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('result') is not None:
            self.result = m.get('result')
        return self


class CreateChainContractProjectRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        region_id: str = None,
        consortium_id: str = None,
        project_name: str = None,
        project_version: str = None,
        project_description: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # region_id
        self.region_id = region_id
        # consortium_id
        self.consortium_id = consortium_id
        # project_name
        self.project_name = project_name
        # project_version
        self.project_version = project_version
        # project_description
        self.project_description = project_description

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.region_id is not None:
            result['region_id'] = self.region_id
        if self.consortium_id is not None:
            result['consortium_id'] = self.consortium_id
        if self.project_name is not None:
            result['project_name'] = self.project_name
        if self.project_version is not None:
            result['project_version'] = self.project_version
        if self.project_description is not None:
            result['project_description'] = self.project_description
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('region_id') is not None:
            self.region_id = m.get('region_id')
        if m.get('consortium_id') is not None:
            self.consortium_id = m.get('consortium_id')
        if m.get('project_name') is not None:
            self.project_name = m.get('project_name')
        if m.get('project_version') is not None:
            self.project_version = m.get('project_version')
        if m.get('project_description') is not None:
            self.project_description = m.get('project_description')
        return self


class CreateChainContractProjectResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: ALiYunContractProject = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # result
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.result is not None:
            result['result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('result') is not None:
            temp_model = ALiYunContractProject()
            self.result = temp_model.from_map(m['result'])
        return self


class DeleteChainContractProjectRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        project_id: str = None,
        region_id: str = None,
        consortium_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # project_id
        self.project_id = project_id
        # region_id
        self.region_id = region_id
        # consortium_id
        self.consortium_id = consortium_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.project_id is not None:
            result['project_id'] = self.project_id
        if self.region_id is not None:
            result['region_id'] = self.region_id
        if self.consortium_id is not None:
            result['consortium_id'] = self.consortium_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('project_id') is not None:
            self.project_id = m.get('project_id')
        if m.get('region_id') is not None:
            self.region_id = m.get('region_id')
        if m.get('consortium_id') is not None:
            self.consortium_id = m.get('consortium_id')
        return self


class DeleteChainContractProjectResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # result
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.result is not None:
            result['result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('result') is not None:
            self.result = m.get('result')
        return self


class CloneChainContractProjectRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        project_description: str = None,
        project_id: str = None,
        project_name: str = None,
        project_version: str = None,
        region_id: str = None,
        consortium_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # project_description
        self.project_description = project_description
        # project_id
        self.project_id = project_id
        # project_name
        self.project_name = project_name
        # project_version
        self.project_version = project_version
        # region_id
        self.region_id = region_id
        # consortium_id
        self.consortium_id = consortium_id

    def validate(self):
        self.validate_required(self.project_description, 'project_description')
        self.validate_required(self.project_id, 'project_id')
        self.validate_required(self.project_name, 'project_name')
        self.validate_required(self.project_version, 'project_version')
        self.validate_required(self.consortium_id, 'consortium_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.project_description is not None:
            result['project_description'] = self.project_description
        if self.project_id is not None:
            result['project_id'] = self.project_id
        if self.project_name is not None:
            result['project_name'] = self.project_name
        if self.project_version is not None:
            result['project_version'] = self.project_version
        if self.region_id is not None:
            result['region_id'] = self.region_id
        if self.consortium_id is not None:
            result['consortium_id'] = self.consortium_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('project_description') is not None:
            self.project_description = m.get('project_description')
        if m.get('project_id') is not None:
            self.project_id = m.get('project_id')
        if m.get('project_name') is not None:
            self.project_name = m.get('project_name')
        if m.get('project_version') is not None:
            self.project_version = m.get('project_version')
        if m.get('region_id') is not None:
            self.region_id = m.get('region_id')
        if m.get('consortium_id') is not None:
            self.consortium_id = m.get('consortium_id')
        return self


class CloneChainContractProjectResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: ALiYunContractProject = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # result
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.result is not None:
            result['result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('result') is not None:
            temp_model = ALiYunContractProject()
            self.result = temp_model.from_map(m['result'])
        return self


class QueryChainContractProjectRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        consortium_id: str = None,
        page_number: int = None,
        page_size: int = None,
        region_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # consortium_id
        self.consortium_id = consortium_id
        # page_number
        self.page_number = page_number
        # page_size
        self.page_size = page_size
        # region_id
        self.region_id = region_id

    def validate(self):
        self.validate_required(self.consortium_id, 'consortium_id')
        self.validate_required(self.page_number, 'page_number')
        self.validate_required(self.page_size, 'page_size')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.consortium_id is not None:
            result['consortium_id'] = self.consortium_id
        if self.page_number is not None:
            result['page_number'] = self.page_number
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.region_id is not None:
            result['region_id'] = self.region_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('consortium_id') is not None:
            self.consortium_id = m.get('consortium_id')
        if m.get('page_number') is not None:
            self.page_number = m.get('page_number')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('region_id') is not None:
            self.region_id = m.get('region_id')
        return self


class QueryChainContractProjectResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: ALiYunContractProjects = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # result
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.result is not None:
            result['result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('result') is not None:
            temp_model = ALiYunContractProjects()
            self.result = temp_model.from_map(m['result'])
        return self


class RetryChainContractProjectRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        description: str = None,
        name: str = None,
        project_id: str = None,
        project_version: str = None,
        region_id: str = None,
        consortium_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # description
        self.description = description
        # name
        self.name = name
        # project_id
        self.project_id = project_id
        # project_version
        self.project_version = project_version
        # region_id
        self.region_id = region_id
        # consortium_id
        self.consortium_id = consortium_id

    def validate(self):
        self.validate_required(self.consortium_id, 'consortium_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.description is not None:
            result['description'] = self.description
        if self.name is not None:
            result['name'] = self.name
        if self.project_id is not None:
            result['project_id'] = self.project_id
        if self.project_version is not None:
            result['project_version'] = self.project_version
        if self.region_id is not None:
            result['region_id'] = self.region_id
        if self.consortium_id is not None:
            result['consortium_id'] = self.consortium_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('project_id') is not None:
            self.project_id = m.get('project_id')
        if m.get('project_version') is not None:
            self.project_version = m.get('project_version')
        if m.get('region_id') is not None:
            self.region_id = m.get('region_id')
        if m.get('consortium_id') is not None:
            self.consortium_id = m.get('consortium_id')
        return self


class RetryChainContractProjectResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: ALiYunContractProjectDuplicate = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # result
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.result is not None:
            result['result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('result') is not None:
            temp_model = ALiYunContractProjectDuplicate()
            self.result = temp_model.from_map(m['result'])
        return self


class UpdateChainContractProjectRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        project_description: str = None,
        project_id: str = None,
        project_name: str = None,
        project_version: str = None,
        region_id: str = None,
        consortium_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # project_description
        self.project_description = project_description
        # project_id
        self.project_id = project_id
        # project_name
        self.project_name = project_name
        # project_version
        self.project_version = project_version
        # region_id
        self.region_id = region_id
        # consortium_id
        self.consortium_id = consortium_id

    def validate(self):
        self.validate_required(self.project_id, 'project_id')
        self.validate_required(self.consortium_id, 'consortium_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.project_description is not None:
            result['project_description'] = self.project_description
        if self.project_id is not None:
            result['project_id'] = self.project_id
        if self.project_name is not None:
            result['project_name'] = self.project_name
        if self.project_version is not None:
            result['project_version'] = self.project_version
        if self.region_id is not None:
            result['region_id'] = self.region_id
        if self.consortium_id is not None:
            result['consortium_id'] = self.consortium_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('project_description') is not None:
            self.project_description = m.get('project_description')
        if m.get('project_id') is not None:
            self.project_id = m.get('project_id')
        if m.get('project_name') is not None:
            self.project_name = m.get('project_name')
        if m.get('project_version') is not None:
            self.project_version = m.get('project_version')
        if m.get('region_id') is not None:
            self.region_id = m.get('region_id')
        if m.get('consortium_id') is not None:
            self.consortium_id = m.get('consortium_id')
        return self


class UpdateChainContractProjectResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # result
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.result is not None:
            result['result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('result') is not None:
            self.result = m.get('result')
        return self


class CreateChainContractContentRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        content: str = None,
        content_name: str = None,
        is_directory: bool = None,
        parent_content_id: str = None,
        project_id: str = None,
        region_id: str = None,
        consortium_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # content
        self.content = content
        # content_name
        self.content_name = content_name
        # is_directory
        self.is_directory = is_directory
        # parent_content_id
        self.parent_content_id = parent_content_id
        # project_id
        self.project_id = project_id
        # region_id
        self.region_id = region_id
        # consortium_id
        self.consortium_id = consortium_id

    def validate(self):
        self.validate_required(self.content_name, 'content_name')
        self.validate_required(self.is_directory, 'is_directory')
        self.validate_required(self.project_id, 'project_id')
        self.validate_required(self.consortium_id, 'consortium_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.content is not None:
            result['content'] = self.content
        if self.content_name is not None:
            result['content_name'] = self.content_name
        if self.is_directory is not None:
            result['is_directory'] = self.is_directory
        if self.parent_content_id is not None:
            result['parent_content_id'] = self.parent_content_id
        if self.project_id is not None:
            result['project_id'] = self.project_id
        if self.region_id is not None:
            result['region_id'] = self.region_id
        if self.consortium_id is not None:
            result['consortium_id'] = self.consortium_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('content') is not None:
            self.content = m.get('content')
        if m.get('content_name') is not None:
            self.content_name = m.get('content_name')
        if m.get('is_directory') is not None:
            self.is_directory = m.get('is_directory')
        if m.get('parent_content_id') is not None:
            self.parent_content_id = m.get('parent_content_id')
        if m.get('project_id') is not None:
            self.project_id = m.get('project_id')
        if m.get('region_id') is not None:
            self.region_id = m.get('region_id')
        if m.get('consortium_id') is not None:
            self.consortium_id = m.get('consortium_id')
        return self


class CreateChainContractContentResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: ALiYunChainContractContent = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # result
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.result is not None:
            result['result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('result') is not None:
            temp_model = ALiYunChainContractContent()
            self.result = temp_model.from_map(m['result'])
        return self


class UpdateChainContractContentRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        content: str = None,
        content_id: str = None,
        content_name: str = None,
        parent_content_id: str = None,
        region_id: str = None,
        consortium_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # content
        self.content = content
        # content_id
        self.content_id = content_id
        # content_name
        self.content_name = content_name
        # parent_content_id
        self.parent_content_id = parent_content_id
        # region_id
        self.region_id = region_id
        # consortium_id
        self.consortium_id = consortium_id

    def validate(self):
        self.validate_required(self.content_id, 'content_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.content is not None:
            result['content'] = self.content
        if self.content_id is not None:
            result['content_id'] = self.content_id
        if self.content_name is not None:
            result['content_name'] = self.content_name
        if self.parent_content_id is not None:
            result['parent_content_id'] = self.parent_content_id
        if self.region_id is not None:
            result['region_id'] = self.region_id
        if self.consortium_id is not None:
            result['consortium_id'] = self.consortium_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('content') is not None:
            self.content = m.get('content')
        if m.get('content_id') is not None:
            self.content_id = m.get('content_id')
        if m.get('content_name') is not None:
            self.content_name = m.get('content_name')
        if m.get('parent_content_id') is not None:
            self.parent_content_id = m.get('parent_content_id')
        if m.get('region_id') is not None:
            self.region_id = m.get('region_id')
        if m.get('consortium_id') is not None:
            self.consortium_id = m.get('consortium_id')
        return self


class UpdateChainContractContentResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # result
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.result is not None:
            result['result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('result') is not None:
            self.result = m.get('result')
        return self


class QueryChainContractContentRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        project_id: str = None,
        region_id: str = None,
        consortium_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # project_id
        self.project_id = project_id
        # region_id
        self.region_id = region_id
        # consortium_id
        self.consortium_id = consortium_id

    def validate(self):
        self.validate_required(self.consortium_id, 'consortium_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.project_id is not None:
            result['project_id'] = self.project_id
        if self.region_id is not None:
            result['region_id'] = self.region_id
        if self.consortium_id is not None:
            result['consortium_id'] = self.consortium_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('project_id') is not None:
            self.project_id = m.get('project_id')
        if m.get('region_id') is not None:
            self.region_id = m.get('region_id')
        if m.get('consortium_id') is not None:
            self.consortium_id = m.get('consortium_id')
        return self


class QueryChainContractContentResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # result
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.result is not None:
            result['result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('result') is not None:
            self.result = m.get('result')
        return self


class ExecChainContractRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        region_id: str = None,
        ant_chain_id: str = None,
        transaction: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # region_id
        self.region_id = region_id
        # ant_chain_id
        self.ant_chain_id = ant_chain_id
        # transaction
        self.transaction = transaction

    def validate(self):
        self.validate_required(self.ant_chain_id, 'ant_chain_id')
        self.validate_required(self.transaction, 'transaction')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.region_id is not None:
            result['region_id'] = self.region_id
        if self.ant_chain_id is not None:
            result['ant_chain_id'] = self.ant_chain_id
        if self.transaction is not None:
            result['transaction'] = self.transaction
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('region_id') is not None:
            self.region_id = m.get('region_id')
        if m.get('ant_chain_id') is not None:
            self.ant_chain_id = m.get('ant_chain_id')
        if m.get('transaction') is not None:
            self.transaction = m.get('transaction')
        return self


class ExecChainContractResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # result
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.result is not None:
            result['result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('result') is not None:
            self.result = m.get('result')
        return self


class QueryChainIdeRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        consortium_id: str = None,
        region_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # consortium_id
        self.consortium_id = consortium_id
        # region_id
        self.region_id = region_id

    def validate(self):
        self.validate_required(self.consortium_id, 'consortium_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.consortium_id is not None:
            result['consortium_id'] = self.consortium_id
        if self.region_id is not None:
            result['region_id'] = self.region_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('consortium_id') is not None:
            self.consortium_id = m.get('consortium_id')
        if m.get('region_id') is not None:
            self.region_id = m.get('region_id')
        return self


class QueryChainIdeResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: List[ALiYunChainCloudIdeConfig] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # result
        self.result = result

    def validate(self):
        if self.result:
            for k in self.result:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['result'] = []
        if self.result is not None:
            for k in self.result:
                result['result'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.result = []
        if m.get('result') is not None:
            for k in m.get('result'):
                temp_model = ALiYunChainCloudIdeConfig()
                self.result.append(temp_model.from_map(k))
        return self


class DeleteChainContractContentRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        content_id: str = None,
        region_id: str = None,
        consortium_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # content_id
        self.content_id = content_id
        # region_id
        self.region_id = region_id
        # consortium_id
        self.consortium_id = consortium_id

    def validate(self):
        self.validate_required(self.content_id, 'content_id')
        self.validate_required(self.consortium_id, 'consortium_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.content_id is not None:
            result['content_id'] = self.content_id
        if self.region_id is not None:
            result['region_id'] = self.region_id
        if self.consortium_id is not None:
            result['consortium_id'] = self.consortium_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('content_id') is not None:
            self.content_id = m.get('content_id')
        if m.get('region_id') is not None:
            self.region_id = m.get('region_id')
        if m.get('consortium_id') is not None:
            self.consortium_id = m.get('consortium_id')
        return self


class DeleteChainContractContentResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # result
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.result is not None:
            result['result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('result') is not None:
            self.result = m.get('result')
        return self


class BatchcreateChainMiniappUserRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        ant_chain_id: str = None,
        phone_list: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # ant_chain_id
        self.ant_chain_id = ant_chain_id
        # phone_list
        self.phone_list = phone_list

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.ant_chain_id is not None:
            result['ant_chain_id'] = self.ant_chain_id
        if self.phone_list is not None:
            result['phone_list'] = self.phone_list
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('ant_chain_id') is not None:
            self.ant_chain_id = m.get('ant_chain_id')
        if m.get('phone_list') is not None:
            self.phone_list = m.get('phone_list')
        return self


class BatchcreateChainMiniappUserResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # result
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.result is not None:
            result['result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('result') is not None:
            self.result = m.get('result')
        return self


class DeleteChainMiniappUserRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        ant_chain_id: str = None,
        phone: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # AntChainId
        self.ant_chain_id = ant_chain_id
        # phone
        self.phone = phone

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.ant_chain_id is not None:
            result['ant_chain_id'] = self.ant_chain_id
        if self.phone is not None:
            result['phone'] = self.phone
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('ant_chain_id') is not None:
            self.ant_chain_id = m.get('ant_chain_id')
        if m.get('phone') is not None:
            self.phone = m.get('phone')
        return self


class DeleteChainMiniappUserResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # result
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.result is not None:
            result['result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('result') is not None:
            self.result = m.get('result')
        return self


class BatchqueryChainMiniappUserRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        ant_chain_id: str = None,
        page_number: int = None,
        page_size: int = None,
        q_rcode_type: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # ant_chain_id
        self.ant_chain_id = ant_chain_id
        # page_number
        self.page_number = page_number
        # page_size
        self.page_size = page_size
        # q_r_code_type
        self.q_rcode_type = q_rcode_type

    def validate(self):
        self.validate_required(self.ant_chain_id, 'ant_chain_id')
        self.validate_required(self.page_number, 'page_number')
        self.validate_required(self.page_size, 'page_size')
        self.validate_required(self.q_rcode_type, 'q_rcode_type')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.ant_chain_id is not None:
            result['ant_chain_id'] = self.ant_chain_id
        if self.page_number is not None:
            result['page_number'] = self.page_number
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.q_rcode_type is not None:
            result['q_r_code_type'] = self.q_rcode_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('ant_chain_id') is not None:
            self.ant_chain_id = m.get('ant_chain_id')
        if m.get('page_number') is not None:
            self.page_number = m.get('page_number')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('q_r_code_type') is not None:
            self.q_rcode_type = m.get('q_r_code_type')
        return self


class BatchqueryChainMiniappUserResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: ALiYunChainMiniAppUserPrivilege = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # result
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.result is not None:
            result['result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('result') is not None:
            temp_model = ALiYunChainMiniAppUserPrivilege()
            self.result = temp_model.from_map(m['result'])
        return self


class QueryChainMiniappAuthorizationRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        ant_chain_id: str = None,
        q_rcode_type: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # ant_chain_id
        self.ant_chain_id = ant_chain_id
        # q_r_code_type
        self.q_rcode_type = q_rcode_type

    def validate(self):
        self.validate_required(self.ant_chain_id, 'ant_chain_id')
        self.validate_required(self.q_rcode_type, 'q_rcode_type')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.ant_chain_id is not None:
            result['ant_chain_id'] = self.ant_chain_id
        if self.q_rcode_type is not None:
            result['q_r_code_type'] = self.q_rcode_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('ant_chain_id') is not None:
            self.ant_chain_id = m.get('ant_chain_id')
        if m.get('q_r_code_type') is not None:
            self.q_rcode_type = m.get('q_r_code_type')
        return self


class QueryChainMiniappAuthorizationResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: ALiYunChainMiniAppAuthorization = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # result
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.result is not None:
            result['result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('result') is not None:
            temp_model = ALiYunChainMiniAppAuthorization()
            self.result = temp_model.from_map(m['result'])
        return self


class UpdateChainMiniappAuthorizationRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        ant_chain_id: str = None,
        q_rcode_type: str = None,
        authorization_type: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # ant_chain_id
        self.ant_chain_id = ant_chain_id
        # q_r_code_type
        self.q_rcode_type = q_rcode_type
        # authorization_type
        self.authorization_type = authorization_type

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.ant_chain_id is not None:
            result['ant_chain_id'] = self.ant_chain_id
        if self.q_rcode_type is not None:
            result['q_r_code_type'] = self.q_rcode_type
        if self.authorization_type is not None:
            result['authorization_type'] = self.authorization_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('ant_chain_id') is not None:
            self.ant_chain_id = m.get('ant_chain_id')
        if m.get('q_r_code_type') is not None:
            self.q_rcode_type = m.get('q_r_code_type')
        if m.get('authorization_type') is not None:
            self.authorization_type = m.get('authorization_type')
        return self


class UpdateChainMiniappAuthorizationResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # result
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.result is not None:
            result['result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('result') is not None:
            self.result = m.get('result')
        return self


class QueryChainMiniappTransactionRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        ant_chain_id: str = None,
        transaction_hash: str = None,
        phone_hash: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # ant_chain_id
        self.ant_chain_id = ant_chain_id
        # transaction_hash
        self.transaction_hash = transaction_hash
        # phone_hash
        self.phone_hash = phone_hash

    def validate(self):
        self.validate_required(self.ant_chain_id, 'ant_chain_id')
        self.validate_required(self.transaction_hash, 'transaction_hash')
        self.validate_required(self.phone_hash, 'phone_hash')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.ant_chain_id is not None:
            result['ant_chain_id'] = self.ant_chain_id
        if self.transaction_hash is not None:
            result['transaction_hash'] = self.transaction_hash
        if self.phone_hash is not None:
            result['phone_hash'] = self.phone_hash
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('ant_chain_id') is not None:
            self.ant_chain_id = m.get('ant_chain_id')
        if m.get('transaction_hash') is not None:
            self.transaction_hash = m.get('transaction_hash')
        if m.get('phone_hash') is not None:
            self.phone_hash = m.get('phone_hash')
        return self


class QueryChainMiniappTransactionResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: ALiYunChainMiniAppTransaction = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # result
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.result is not None:
            result['result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('result') is not None:
            temp_model = ALiYunChainMiniAppTransaction()
            self.result = temp_model.from_map(m['result'])
        return self


class QueryChainMiniappLogRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        ant_chain_id: str = None,
        q_rcode_type: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # ant_chain_id
        self.ant_chain_id = ant_chain_id
        # q_r_code_type
        self.q_rcode_type = q_rcode_type

    def validate(self):
        self.validate_required(self.ant_chain_id, 'ant_chain_id')
        self.validate_required(self.q_rcode_type, 'q_rcode_type')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.ant_chain_id is not None:
            result['ant_chain_id'] = self.ant_chain_id
        if self.q_rcode_type is not None:
            result['q_r_code_type'] = self.q_rcode_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('ant_chain_id') is not None:
            self.ant_chain_id = m.get('ant_chain_id')
        if m.get('q_r_code_type') is not None:
            self.q_rcode_type = m.get('q_r_code_type')
        return self


class QueryChainMiniappLogResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: ALiYunChainMiniAppLog = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # result
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.result is not None:
            result['result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('result') is not None:
            temp_model = ALiYunChainMiniAppLog()
            self.result = temp_model.from_map(m['result'])
        return self


class CreateChainMiniappCodeRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        ant_chain_id: str = None,
        transaction_hash: str = None,
        contract_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # ant_chain_id
        self.ant_chain_id = ant_chain_id
        # transaction_hash
        self.transaction_hash = transaction_hash
        # contract_id
        self.contract_id = contract_id

    def validate(self):
        self.validate_required(self.ant_chain_id, 'ant_chain_id')
        self.validate_required(self.transaction_hash, 'transaction_hash')
        self.validate_required(self.contract_id, 'contract_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.ant_chain_id is not None:
            result['ant_chain_id'] = self.ant_chain_id
        if self.transaction_hash is not None:
            result['transaction_hash'] = self.transaction_hash
        if self.contract_id is not None:
            result['contract_id'] = self.contract_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('ant_chain_id') is not None:
            self.ant_chain_id = m.get('ant_chain_id')
        if m.get('transaction_hash') is not None:
            self.transaction_hash = m.get('transaction_hash')
        if m.get('contract_id') is not None:
            self.contract_id = m.get('contract_id')
        return self


class CreateChainMiniappCodeResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: ALiYunChainMiniAppCodeCreate = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # result
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.result is not None:
            result['result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('result') is not None:
            temp_model = ALiYunChainMiniAppCodeCreate()
            self.result = temp_model.from_map(m['result'])
        return self


class QueryUnionBuyRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        region_id: str = None,
        tenant_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # region_id
        self.region_id = region_id
        # tenant_id
        self.tenant_id = tenant_id

    def validate(self):
        self.validate_required(self.tenant_id, 'tenant_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.region_id is not None:
            result['region_id'] = self.region_id
        if self.tenant_id is not None:
            result['tenant_id'] = self.tenant_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('region_id') is not None:
            self.region_id = m.get('region_id')
        if m.get('tenant_id') is not None:
            self.tenant_id = m.get('tenant_id')
        return self


class QueryUnionBuyResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: List[ALiYunBuyUnion] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # result
        self.result = result

    def validate(self):
        if self.result:
            for k in self.result:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['result'] = []
        if self.result is not None:
            for k in self.result:
                result['result'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.result = []
        if m.get('result') is not None:
            for k in m.get('result'):
                temp_model = ALiYunBuyUnion()
                self.result.append(temp_model.from_map(k))
        return self


class QueryChainPublicRestRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        bizid: str = None,
        region_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # bizid
        self.bizid = bizid
        # region_id
        self.region_id = region_id

    def validate(self):
        self.validate_required(self.bizid, 'bizid')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.bizid is not None:
            result['bizid'] = self.bizid
        if self.region_id is not None:
            result['region_id'] = self.region_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('bizid') is not None:
            self.bizid = m.get('bizid')
        if m.get('region_id') is not None:
            self.region_id = m.get('region_id')
        return self


class QueryChainPublicRestResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: List[ALiYunChainRest] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # AccessId
        self.result = result

    def validate(self):
        if self.result:
            for k in self.result:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['result'] = []
        if self.result is not None:
            for k in self.result:
                result['result'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.result = []
        if m.get('result') is not None:
            for k in m.get('result'):
                temp_model = ALiYunChainRest()
                self.result.append(temp_model.from_map(k))
        return self


class ApplyChainPublicRestRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        bizid: str = None,
        region_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # bizid
        self.bizid = bizid
        # region_id
        self.region_id = region_id

    def validate(self):
        self.validate_required(self.bizid, 'bizid')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.bizid is not None:
            result['bizid'] = self.bizid
        if self.region_id is not None:
            result['region_id'] = self.region_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('bizid') is not None:
            self.bizid = m.get('bizid')
        if m.get('region_id') is not None:
            self.region_id = m.get('region_id')
        return self


class ApplyChainPublicRestResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: ALiYunChainRest = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # result
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.result is not None:
            result['result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('result') is not None:
            temp_model = ALiYunChainRest()
            self.result = temp_model.from_map(m['result'])
        return self


class ReinitChainPublicRestRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        access_id: str = None,
        bizid: str = None,
        region_id: str = None,
        vcode: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # access_id
        self.access_id = access_id
        # bizid
        self.bizid = bizid
        # region_id
        self.region_id = region_id
        # vcode
        self.vcode = vcode

    def validate(self):
        self.validate_required(self.access_id, 'access_id')
        self.validate_required(self.bizid, 'bizid')
        self.validate_required(self.vcode, 'vcode')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.access_id is not None:
            result['access_id'] = self.access_id
        if self.bizid is not None:
            result['bizid'] = self.bizid
        if self.region_id is not None:
            result['region_id'] = self.region_id
        if self.vcode is not None:
            result['vcode'] = self.vcode
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('access_id') is not None:
            self.access_id = m.get('access_id')
        if m.get('bizid') is not None:
            self.bizid = m.get('bizid')
        if m.get('region_id') is not None:
            self.region_id = m.get('region_id')
        if m.get('vcode') is not None:
            self.vcode = m.get('vcode')
        return self


class ReinitChainPublicRestResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: ALiYunChainRest = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # result
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.result is not None:
            result['result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('result') is not None:
            temp_model = ALiYunChainRest()
            self.result = temp_model.from_map(m['result'])
        return self


class QueryChainRestAntRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        ant_chain_id: str = None,
        region_id: str = None,
        consortium_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # ant_chain_id
        self.ant_chain_id = ant_chain_id
        # region_id
        self.region_id = region_id
        # consortium_id
        self.consortium_id = consortium_id

    def validate(self):
        self.validate_required(self.ant_chain_id, 'ant_chain_id')
        self.validate_required(self.consortium_id, 'consortium_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.ant_chain_id is not None:
            result['ant_chain_id'] = self.ant_chain_id
        if self.region_id is not None:
            result['region_id'] = self.region_id
        if self.consortium_id is not None:
            result['consortium_id'] = self.consortium_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('ant_chain_id') is not None:
            self.ant_chain_id = m.get('ant_chain_id')
        if m.get('region_id') is not None:
            self.region_id = m.get('region_id')
        if m.get('consortium_id') is not None:
            self.consortium_id = m.get('consortium_id')
        return self


class QueryChainRestAntResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: List[ALiYunChainRest] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # result
        self.result = result

    def validate(self):
        if self.result:
            for k in self.result:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['result'] = []
        if self.result is not None:
            for k in self.result:
                result['result'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.result = []
        if m.get('result') is not None:
            for k in m.get('result'):
                temp_model = ALiYunChainRest()
                self.result.append(temp_model.from_map(k))
        return self


class ApplyChainRestAntRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        ant_chain_id: str = None,
        region_id: str = None,
        consortium_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # ant_chain_id
        self.ant_chain_id = ant_chain_id
        # region_id
        self.region_id = region_id
        # consortium_id
        self.consortium_id = consortium_id

    def validate(self):
        self.validate_required(self.ant_chain_id, 'ant_chain_id')
        self.validate_required(self.consortium_id, 'consortium_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.ant_chain_id is not None:
            result['ant_chain_id'] = self.ant_chain_id
        if self.region_id is not None:
            result['region_id'] = self.region_id
        if self.consortium_id is not None:
            result['consortium_id'] = self.consortium_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('ant_chain_id') is not None:
            self.ant_chain_id = m.get('ant_chain_id')
        if m.get('region_id') is not None:
            self.region_id = m.get('region_id')
        if m.get('consortium_id') is not None:
            self.consortium_id = m.get('consortium_id')
        return self


class ApplyChainRestAntResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: ALiYunChainRest = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # result
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.result is not None:
            result['result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('result') is not None:
            temp_model = ALiYunChainRest()
            self.result = temp_model.from_map(m['result'])
        return self


class ReinitChainRestAntRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        access_id: str = None,
        ant_chain_id: str = None,
        consortium_id: str = None,
        region_id: str = None,
        vcode: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # access_id
        self.access_id = access_id
        # ant_chain_id
        self.ant_chain_id = ant_chain_id
        # consortium_id
        self.consortium_id = consortium_id
        # region_id
        self.region_id = region_id
        # vcode
        self.vcode = vcode

    def validate(self):
        self.validate_required(self.access_id, 'access_id')
        self.validate_required(self.ant_chain_id, 'ant_chain_id')
        self.validate_required(self.consortium_id, 'consortium_id')
        self.validate_required(self.vcode, 'vcode')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.access_id is not None:
            result['access_id'] = self.access_id
        if self.ant_chain_id is not None:
            result['ant_chain_id'] = self.ant_chain_id
        if self.consortium_id is not None:
            result['consortium_id'] = self.consortium_id
        if self.region_id is not None:
            result['region_id'] = self.region_id
        if self.vcode is not None:
            result['vcode'] = self.vcode
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('access_id') is not None:
            self.access_id = m.get('access_id')
        if m.get('ant_chain_id') is not None:
            self.ant_chain_id = m.get('ant_chain_id')
        if m.get('consortium_id') is not None:
            self.consortium_id = m.get('consortium_id')
        if m.get('region_id') is not None:
            self.region_id = m.get('region_id')
        if m.get('vcode') is not None:
            self.vcode = m.get('vcode')
        return self


class ReinitChainRestAntResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: ALiYunChainRest = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # result
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.result is not None:
            result['result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('result') is not None:
            temp_model = ALiYunChainRest()
            self.result = temp_model.from_map(m['result'])
        return self


class SendChainPublicRestRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        access_id: str = None,
        bizid: str = None,
        region_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # access_id
        self.access_id = access_id
        # bizid
        self.bizid = bizid
        # region_id
        self.region_id = region_id

    def validate(self):
        self.validate_required(self.access_id, 'access_id')
        self.validate_required(self.bizid, 'bizid')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.access_id is not None:
            result['access_id'] = self.access_id
        if self.bizid is not None:
            result['bizid'] = self.bizid
        if self.region_id is not None:
            result['region_id'] = self.region_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('access_id') is not None:
            self.access_id = m.get('access_id')
        if m.get('bizid') is not None:
            self.bizid = m.get('bizid')
        if m.get('region_id') is not None:
            self.region_id = m.get('region_id')
        return self


class SendChainPublicRestResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: bool = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # result
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.result is not None:
            result['result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('result') is not None:
            self.result = m.get('result')
        return self


class SendChainRestAntRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        access_id: str = None,
        ant_chain_id: str = None,
        consortium_id: str = None,
        region_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # access_id
        self.access_id = access_id
        # ant_chain_id
        self.ant_chain_id = ant_chain_id
        # consortium_id
        self.consortium_id = consortium_id
        # region_id
        self.region_id = region_id

    def validate(self):
        self.validate_required(self.access_id, 'access_id')
        self.validate_required(self.ant_chain_id, 'ant_chain_id')
        self.validate_required(self.consortium_id, 'consortium_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.access_id is not None:
            result['access_id'] = self.access_id
        if self.ant_chain_id is not None:
            result['ant_chain_id'] = self.ant_chain_id
        if self.consortium_id is not None:
            result['consortium_id'] = self.consortium_id
        if self.region_id is not None:
            result['region_id'] = self.region_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('access_id') is not None:
            self.access_id = m.get('access_id')
        if m.get('ant_chain_id') is not None:
            self.ant_chain_id = m.get('ant_chain_id')
        if m.get('consortium_id') is not None:
            self.consortium_id = m.get('consortium_id')
        if m.get('region_id') is not None:
            self.region_id = m.get('region_id')
        return self


class SendChainRestAntResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: bool = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # result
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.result is not None:
            result['result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('result') is not None:
            self.result = m.get('result')
        return self


class StartAmlCorporationJoinprepareRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        email: str = None,
        extension: str = None,
        public_key: str = None,
        recovery_key: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 企业加入BaaS创建的反洗钱联盟时使用的邮箱地址
        self.email = email
        # 扩展信息字段
        self.extension = extension
        # 目前支持ECDSA K1公私密钥对
        self.public_key = public_key
        # 数字身份恢复密钥，支持ECDSA K1曲线的公私密钥对
        self.recovery_key = recovery_key

    def validate(self):
        self.validate_required(self.email, 'email')
        self.validate_required(self.public_key, 'public_key')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.email is not None:
            result['email'] = self.email
        if self.extension is not None:
            result['extension'] = self.extension
        if self.public_key is not None:
            result['public_key'] = self.public_key
        if self.recovery_key is not None:
            result['recovery_key'] = self.recovery_key
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('email') is not None:
            self.email = m.get('email')
        if m.get('extension') is not None:
            self.extension = m.get('extension')
        if m.get('public_key') is not None:
            self.public_key = m.get('public_key')
        if m.get('recovery_key') is not None:
            self.recovery_key = m.get('recovery_key')
        return self


class StartAmlCorporationJoinprepareResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        did: str = None,
        mytf_info: str = None,
        tapp_infos: List[str] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 企业在反洗钱联盟中的唯一区块链标示，后续和平台的交互都要通过该标示
        self.did = did
        # mytf的认证信息，加盟方可以验证其有效性
        self.mytf_info = mytf_info
        # 平台提供的各类tapp信息，入驻方需要从中选择自己使用的tapp，并记录下tapp的加密私钥和签名密钥；后续平台发给加盟放的所有信息都会携带签名；而所有发往TAPP的数据都需要使用对应加密公钥进行加密来保证数据安全
        self.tapp_infos = tapp_infos

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.did is not None:
            result['did'] = self.did
        if self.mytf_info is not None:
            result['mytf_info'] = self.mytf_info
        if self.tapp_infos is not None:
            result['tapp_infos'] = self.tapp_infos
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('mytf_info') is not None:
            self.mytf_info = m.get('mytf_info')
        if m.get('tapp_infos') is not None:
            self.tapp_infos = m.get('tapp_infos')
        return self


class StartAmlCorporationJoincommitRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        did: str = None,
        tapp_id: str = None,
        tapp_version: int = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 入驻准备阶段得到的数字标识
        self.did = did
        # 选择采用的TAPP ID编号，如果不填，系统将选择默认的kyc tapp进行执行
        self.tapp_id = tapp_id
        # 对应tapp的版本号。默认选择最新版本
        self.tapp_version = tapp_version

    def validate(self):
        self.validate_required(self.did, 'did')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.did is not None:
            result['did'] = self.did
        if self.tapp_id is not None:
            result['tapp_id'] = self.tapp_id
        if self.tapp_version is not None:
            result['tapp_version'] = self.tapp_version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('tapp_id') is not None:
            self.tapp_id = m.get('tapp_id')
        if m.get('tapp_version') is not None:
            self.tapp_version = m.get('tapp_version')
        return self


class StartAmlCorporationJoincommitResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class StartAmlPersonTwofactorRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        cert_no: str = None,
        cert_type: int = None,
        name: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 完整证件号，与证件类型配对
        self.cert_no = cert_no
        # 证件类型
        # 001，身份证
        # 目前只支持身份证
        self.cert_type = cert_type
        # 张三
        self.name = name

    def validate(self):
        self.validate_required(self.cert_no, 'cert_no')
        self.validate_required(self.cert_type, 'cert_type')
        self.validate_required(self.name, 'name')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.cert_no is not None:
            result['cert_no'] = self.cert_no
        if self.cert_type is not None:
            result['cert_type'] = self.cert_type
        if self.name is not None:
            result['name'] = self.name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('cert_no') is not None:
            self.cert_no = m.get('cert_no')
        if m.get('cert_type') is not None:
            self.cert_type = m.get('cert_type')
        if m.get('name') is not None:
            self.name = m.get('name')
        return self


class StartAmlPersonTwofactorResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        did: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 如果验证通过会为用户创建did
        self.did = did

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.did is not None:
            result['did'] = self.did
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('did') is not None:
            self.did = m.get('did')
        return self


class SaveBusinessDepositRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        biz_id: str = None,
        data: str = None,
        did: str = None,
        key_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 业务链对应的bizId
        # 
        self.biz_id = biz_id
        # 存证的内容
        self.data = data
        # 用户的did地址
        self.did = did
        # 任意用户自定义的keyId(需要唯一)，根据该keyId可以查找存证的内容，若不填则使用txHash作为keyId
        self.key_id = key_id

    def validate(self):
        self.validate_required(self.biz_id, 'biz_id')
        self.validate_required(self.data, 'data')
        self.validate_required(self.did, 'did')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.biz_id is not None:
            result['biz_id'] = self.biz_id
        if self.data is not None:
            result['data'] = self.data
        if self.did is not None:
            result['did'] = self.did
        if self.key_id is not None:
            result['key_id'] = self.key_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('biz_id') is not None:
            self.biz_id = m.get('biz_id')
        if m.get('data') is not None:
            self.data = m.get('data')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('key_id') is not None:
            self.key_id = m.get('key_id')
        return self


class SaveBusinessDepositResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        deposit_id: str = None,
        status: str = None,
        tx_hash: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # bizid+accountid+keyId/txHash 组成的唯一id，用户可以根据该id到服务中查询链上内容
        self.deposit_id = deposit_id
        # 是否存在成功
        self.status = status
        # 链上返回的txHash值
        self.tx_hash = tx_hash

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.deposit_id is not None:
            result['deposit_id'] = self.deposit_id
        if self.status is not None:
            result['status'] = self.status
        if self.tx_hash is not None:
            result['tx_hash'] = self.tx_hash
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('deposit_id') is not None:
            self.deposit_id = m.get('deposit_id')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('tx_hash') is not None:
            self.tx_hash = m.get('tx_hash')
        return self


class SaveBusinessDepositMetadataRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        biz_id: str = None,
        data: List[DepositMetaDataItem] = None,
        did: str = None,
        key_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 业务链对应的bizId
        # 
        self.biz_id = biz_id
        # 具体存证的内容
        self.data = data
        # 用户的did地址
        self.did = did
        # 用户自定义唯一keyId，可用该keyId到业务服务中查询存证内容
        self.key_id = key_id

    def validate(self):
        self.validate_required(self.biz_id, 'biz_id')
        self.validate_required(self.data, 'data')
        if self.data:
            for k in self.data:
                if k:
                    k.validate()
        self.validate_required(self.did, 'did')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.biz_id is not None:
            result['biz_id'] = self.biz_id
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        if self.did is not None:
            result['did'] = self.did
        if self.key_id is not None:
            result['key_id'] = self.key_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('biz_id') is not None:
            self.biz_id = m.get('biz_id')
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = DepositMetaDataItem()
                self.data.append(temp_model.from_map(k))
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('key_id') is not None:
            self.key_id = m.get('key_id')
        return self


class SaveBusinessDepositMetadataResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        deposit_id: str = None,
        status: str = None,
        tx_hash: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 存证id，由bizId+accountId+keyId组成
        self.deposit_id = deposit_id
        # 是否存证成功
        self.status = status
        # 链上存证对应的txHash
        self.tx_hash = tx_hash

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.deposit_id is not None:
            result['deposit_id'] = self.deposit_id
        if self.status is not None:
            result['status'] = self.status
        if self.tx_hash is not None:
            result['tx_hash'] = self.tx_hash
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('deposit_id') is not None:
            self.deposit_id = m.get('deposit_id')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('tx_hash') is not None:
            self.tx_hash = m.get('tx_hash')
        return self


class SaveBusinessDepositEncryptRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        biz_id: str = None,
        data: str = None,
        did: str = None,
        key_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 业务链对应的bizId
        self.biz_id = biz_id
        # 要加密存储的内容
        self.data = data
        # 用户did地址
        self.did = did
        # 业务唯一id，只需要本用户的应用唯一即可，因为最终会与用户的accountId拼接起来
        self.key_id = key_id

    def validate(self):
        self.validate_required(self.biz_id, 'biz_id')
        self.validate_required(self.data, 'data')
        self.validate_required(self.did, 'did')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.biz_id is not None:
            result['biz_id'] = self.biz_id
        if self.data is not None:
            result['data'] = self.data
        if self.did is not None:
            result['did'] = self.did
        if self.key_id is not None:
            result['key_id'] = self.key_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('biz_id') is not None:
            self.biz_id = m.get('biz_id')
        if m.get('data') is not None:
            self.data = m.get('data')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('key_id') is not None:
            self.key_id = m.get('key_id')
        return self


class SaveBusinessDepositEncryptResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        deposit_id: str = None,
        status: str = None,
        tx_hash: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 可以用该id到服务上查询链的信息
        self.deposit_id = deposit_id
        # 是否存证成功
        self.status = status
        # 交易的txHash
        self.tx_hash = tx_hash

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.deposit_id is not None:
            result['deposit_id'] = self.deposit_id
        if self.status is not None:
            result['status'] = self.status
        if self.tx_hash is not None:
            result['tx_hash'] = self.tx_hash
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('deposit_id') is not None:
            self.deposit_id = m.get('deposit_id')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('tx_hash') is not None:
            self.tx_hash = m.get('tx_hash')
        return self


class SaveBusinessDepositEncryptmetadataRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        biz_id: str = None,
        data: str = None,
        did: str = None,
        key_id: str = None,
        metadata: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 业务链对应的bizId
        # 
        self.biz_id = biz_id
        # 要加密的数据
        self.data = data
        # 用户的did身份地址
        self.did = did
        # 业务唯一id，只需要本链本用户所用的业务keyId唯一即可
        self.key_id = key_id
        # 存证内容描述，格式为json，其中type为支持的类型：
        # text：文本类型
        # image：图片类型(待添加)
        # video：视频类型(待添加)
        # txHash：存证引用类型(待添加)
        # map:地图类型(待添加)
        self.metadata = metadata

    def validate(self):
        self.validate_required(self.biz_id, 'biz_id')
        self.validate_required(self.data, 'data')
        self.validate_required(self.did, 'did')
        self.validate_required(self.metadata, 'metadata')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.biz_id is not None:
            result['biz_id'] = self.biz_id
        if self.data is not None:
            result['data'] = self.data
        if self.did is not None:
            result['did'] = self.did
        if self.key_id is not None:
            result['key_id'] = self.key_id
        if self.metadata is not None:
            result['metadata'] = self.metadata
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('biz_id') is not None:
            self.biz_id = m.get('biz_id')
        if m.get('data') is not None:
            self.data = m.get('data')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('key_id') is not None:
            self.key_id = m.get('key_id')
        if m.get('metadata') is not None:
            self.metadata = m.get('metadata')
        return self


class SaveBusinessDepositEncryptmetadataResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        deposit_id: str = None,
        status: str = None,
        tx_hash: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 存证id，由bizId+accountId+keyId组成
        self.deposit_id = deposit_id
        # 是否存证成功
        self.status = status
        # 链上交易的id
        self.tx_hash = tx_hash

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.deposit_id is not None:
            result['deposit_id'] = self.deposit_id
        if self.status is not None:
            result['status'] = self.status
        if self.tx_hash is not None:
            result['tx_hash'] = self.tx_hash
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('deposit_id') is not None:
            self.deposit_id = m.get('deposit_id')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('tx_hash') is not None:
            self.tx_hash = m.get('tx_hash')
        return self


class CreateBusinessDidRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        id_card_number: str = None,
        phone_number: str = None,
        user_name: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 用户身份证号
        self.id_card_number = id_card_number
        # 用户手机号
        self.phone_number = phone_number
        # 用户姓名
        self.user_name = user_name

    def validate(self):
        self.validate_required(self.id_card_number, 'id_card_number')
        self.validate_required(self.phone_number, 'phone_number')
        self.validate_required(self.user_name, 'user_name')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.id_card_number is not None:
            result['id_card_number'] = self.id_card_number
        if self.phone_number is not None:
            result['phone_number'] = self.phone_number
        if self.user_name is not None:
            result['user_name'] = self.user_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('id_card_number') is not None:
            self.id_card_number = m.get('id_card_number')
        if m.get('phone_number') is not None:
            self.phone_number = m.get('phone_number')
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        return self


class CreateBusinessDidResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        biz_id: str = None,
        did: str = None,
        isv_account: str = None,
        status: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 链的业务编号
        self.biz_id = biz_id
        # 生成的did用户身份号
        self.did = did
        # isv创建者身份
        self.isv_account = isv_account
        # 是否创建成功
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.biz_id is not None:
            result['biz_id'] = self.biz_id
        if self.did is not None:
            result['did'] = self.did
        if self.isv_account is not None:
            result['isv_account'] = self.isv_account
        if self.status is not None:
            result['status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('biz_id') is not None:
            self.biz_id = m.get('biz_id')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('isv_account') is not None:
            self.isv_account = m.get('isv_account')
        if m.get('status') is not None:
            self.status = m.get('status')
        return self


class CreateBusinessBizaccountRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        biz_id: str = None,
        did: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 业务链对应的bizId
        self.biz_id = biz_id
        # 申请者对应的did账户
        self.did = did

    def validate(self):
        self.validate_required(self.biz_id, 'biz_id')
        self.validate_required(self.did, 'did')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.biz_id is not None:
            result['biz_id'] = self.biz_id
        if self.did is not None:
            result['did'] = self.did
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('biz_id') is not None:
            self.biz_id = m.get('biz_id')
        if m.get('did') is not None:
            self.did = m.get('did')
        return self


class CreateBusinessBizaccountResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        did: str = None,
        isv_account: str = None,
        kms_id: str = None,
        status: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # did地址
        self.did = did
        # 租户账户
        self.isv_account = isv_account
        # 生成的账户在kms上的密钥id
        # 
        self.kms_id = kms_id
        # 调用接口是否成功
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.did is not None:
            result['did'] = self.did
        if self.isv_account is not None:
            result['isv_account'] = self.isv_account
        if self.kms_id is not None:
            result['kms_id'] = self.kms_id
        if self.status is not None:
            result['status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('isv_account') is not None:
            self.isv_account = m.get('isv_account')
        if m.get('kms_id') is not None:
            self.kms_id = m.get('kms_id')
        if m.get('status') is not None:
            self.status = m.get('status')
        return self


class QueryBusinessDepositRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        biz_id: str = None,
        did: str = None,
        key_id: str = None,
        tx_hash: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 业务链对应的bizId
        # 
        self.biz_id = biz_id
        # 用户did身份
        self.did = did
        # 存证数据业务逻辑id
        self.key_id = key_id
        # 存证数据对应的链上交易哈希，若无则返回最新的交易哈希。
        self.tx_hash = tx_hash

    def validate(self):
        self.validate_required(self.biz_id, 'biz_id')
        self.validate_required(self.did, 'did')
        self.validate_required(self.key_id, 'key_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.biz_id is not None:
            result['biz_id'] = self.biz_id
        if self.did is not None:
            result['did'] = self.did
        if self.key_id is not None:
            result['key_id'] = self.key_id
        if self.tx_hash is not None:
            result['tx_hash'] = self.tx_hash
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('biz_id') is not None:
            self.biz_id = m.get('biz_id')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('key_id') is not None:
            self.key_id = m.get('key_id')
        if m.get('tx_hash') is not None:
            self.tx_hash = m.get('tx_hash')
        return self


class QueryBusinessDepositResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        deposit_data: str = None,
        deposit_id: str = None,
        history_tx_hashes: List[str] = None,
        status: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 具体存证数据
        self.deposit_data = deposit_data
        # 业务逻辑对应的存证id
        self.deposit_id = deposit_id
        # keyId对应的所有相关的历史交易记录
        self.history_tx_hashes = history_tx_hashes
        # 是否查询成功
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.deposit_data is not None:
            result['deposit_data'] = self.deposit_data
        if self.deposit_id is not None:
            result['deposit_id'] = self.deposit_id
        if self.history_tx_hashes is not None:
            result['history_tx_hashes'] = self.history_tx_hashes
        if self.status is not None:
            result['status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('deposit_data') is not None:
            self.deposit_data = m.get('deposit_data')
        if m.get('deposit_id') is not None:
            self.deposit_id = m.get('deposit_id')
        if m.get('history_tx_hashes') is not None:
            self.history_tx_hashes = m.get('history_tx_hashes')
        if m.get('status') is not None:
            self.status = m.get('status')
        return self


class AuthBusinessDepositdataRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        biz_id: str = None,
        did: str = None,
        granted_did: str = None,
        item_key_id: List[str] = None,
        key_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 业务链对应的bizId
        # 
        self.biz_id = biz_id
        # 授权者身份
        self.did = did
        # 被授权者did身份
        self.granted_did = granted_did
        # 被授权的字段
        self.item_key_id = item_key_id
        # 业务逻辑唯一id
        self.key_id = key_id

    def validate(self):
        self.validate_required(self.biz_id, 'biz_id')
        self.validate_required(self.did, 'did')
        self.validate_required(self.granted_did, 'granted_did')
        self.validate_required(self.item_key_id, 'item_key_id')
        self.validate_required(self.key_id, 'key_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.biz_id is not None:
            result['biz_id'] = self.biz_id
        if self.did is not None:
            result['did'] = self.did
        if self.granted_did is not None:
            result['granted_did'] = self.granted_did
        if self.item_key_id is not None:
            result['item_key_id'] = self.item_key_id
        if self.key_id is not None:
            result['key_id'] = self.key_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('biz_id') is not None:
            self.biz_id = m.get('biz_id')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('granted_did') is not None:
            self.granted_did = m.get('granted_did')
        if m.get('item_key_id') is not None:
            self.item_key_id = m.get('item_key_id')
        if m.get('key_id') is not None:
            self.key_id = m.get('key_id')
        return self


class AuthBusinessDepositdataResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        deposit_id: str = None,
        status: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 被授权的逻辑交易
        self.deposit_id = deposit_id
        # 是否授权调用成功
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.deposit_id is not None:
            result['deposit_id'] = self.deposit_id
        if self.status is not None:
            result['status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('deposit_id') is not None:
            self.deposit_id = m.get('deposit_id')
        if m.get('status') is not None:
            self.status = m.get('status')
        return self


class CreateBusinessContractDeployRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        biz_id: str = None,
        contract_code: str = None,
        contract_name: str = None,
        contract_type: int = None,
        did: str = None,
        input_data: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 业务链对应的bizId
        self.biz_id = biz_id
        # 合约代码
        self.contract_code = contract_code
        # 合约名称
        self.contract_name = contract_name
        # 合约类型
        self.contract_type = contract_type
        # 合约部署者did身份
        self.did = did
        # 构造函数传入参数
        self.input_data = input_data

    def validate(self):
        self.validate_required(self.biz_id, 'biz_id')
        self.validate_required(self.contract_code, 'contract_code')
        self.validate_required(self.contract_name, 'contract_name')
        self.validate_required(self.contract_type, 'contract_type')
        self.validate_required(self.did, 'did')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.biz_id is not None:
            result['biz_id'] = self.biz_id
        if self.contract_code is not None:
            result['contract_code'] = self.contract_code
        if self.contract_name is not None:
            result['contract_name'] = self.contract_name
        if self.contract_type is not None:
            result['contract_type'] = self.contract_type
        if self.did is not None:
            result['did'] = self.did
        if self.input_data is not None:
            result['input_data'] = self.input_data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('biz_id') is not None:
            self.biz_id = m.get('biz_id')
        if m.get('contract_code') is not None:
            self.contract_code = m.get('contract_code')
        if m.get('contract_name') is not None:
            self.contract_name = m.get('contract_name')
        if m.get('contract_type') is not None:
            self.contract_type = m.get('contract_type')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('input_data') is not None:
            self.input_data = m.get('input_data')
        return self


class CreateBusinessContractDeployResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: str = None,
        status: int = None,
        tx_hash: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 部署合约返回值
        self.data = data
        # 是否调用成功
        self.status = status
        # 部署合约在链上对应的交易地址
        self.tx_hash = tx_hash

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.data is not None:
            result['data'] = self.data
        if self.status is not None:
            result['status'] = self.status
        if self.tx_hash is not None:
            result['tx_hash'] = self.tx_hash
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('data') is not None:
            self.data = m.get('data')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('tx_hash') is not None:
            self.tx_hash = m.get('tx_hash')
        return self


class CreateBusinessContractnormalcallRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        biz_id: str = None,
        contract_name: str = None,
        contract_type: int = None,
        did: str = None,
        input_data: str = None,
        method_signature: str = None,
        output_type: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 业务链对应的bizId
        # 
        self.biz_id = biz_id
        # 合约名称
        self.contract_name = contract_name
        # 合约类型
        self.contract_type = contract_type
        # 调用合约者身份
        self.did = did
        # 传入参数
        self.input_data = input_data
        # 合约接口名称
        self.method_signature = method_signature
        # 返回值类型
        self.output_type = output_type

    def validate(self):
        self.validate_required(self.biz_id, 'biz_id')
        self.validate_required(self.contract_name, 'contract_name')
        self.validate_required(self.contract_type, 'contract_type')
        self.validate_required(self.did, 'did')
        self.validate_required(self.input_data, 'input_data')
        self.validate_required(self.method_signature, 'method_signature')
        self.validate_required(self.output_type, 'output_type')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.biz_id is not None:
            result['biz_id'] = self.biz_id
        if self.contract_name is not None:
            result['contract_name'] = self.contract_name
        if self.contract_type is not None:
            result['contract_type'] = self.contract_type
        if self.did is not None:
            result['did'] = self.did
        if self.input_data is not None:
            result['input_data'] = self.input_data
        if self.method_signature is not None:
            result['method_signature'] = self.method_signature
        if self.output_type is not None:
            result['output_type'] = self.output_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('biz_id') is not None:
            self.biz_id = m.get('biz_id')
        if m.get('contract_name') is not None:
            self.contract_name = m.get('contract_name')
        if m.get('contract_type') is not None:
            self.contract_type = m.get('contract_type')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('input_data') is not None:
            self.input_data = m.get('input_data')
        if m.get('method_signature') is not None:
            self.method_signature = m.get('method_signature')
        if m.get('output_type') is not None:
            self.output_type = m.get('output_type')
        return self


class CreateBusinessContractnormalcallResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: str = None,
        status: int = None,
        tx_hash: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 调用合约接口返回值
        self.data = data
        # 是否调用成功
        self.status = status
        # 调用合约的交易地址
        self.tx_hash = tx_hash

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.data is not None:
            result['data'] = self.data
        if self.status is not None:
            result['status'] = self.status
        if self.tx_hash is not None:
            result['tx_hash'] = self.tx_hash
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('data') is not None:
            self.data = m.get('data')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('tx_hash') is not None:
            self.tx_hash = m.get('tx_hash')
        return self


class CreateBusinessContractencryptcallRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        biz_id: str = None,
        contract_name: str = None,
        contract_type: int = None,
        data: List[ContractEncryptKeyItem] = None,
        did: str = None,
        method_signature: str = None,
        output_type: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 业务链对应的bizId
        self.biz_id = biz_id
        # 合约名称
        self.contract_name = contract_name
        # 合约类型
        self.contract_type = contract_type
        # 具体数据的定义，加密在服务端，需传入原始值、类型及key等相关信息
        self.data = data
        # 调用合约者用户身份
        self.did = did
        # 合约方法名
        self.method_signature = method_signature
        # 返回值类型
        self.output_type = output_type

    def validate(self):
        self.validate_required(self.biz_id, 'biz_id')
        self.validate_required(self.contract_name, 'contract_name')
        self.validate_required(self.contract_type, 'contract_type')
        self.validate_required(self.data, 'data')
        if self.data:
            for k in self.data:
                if k:
                    k.validate()
        self.validate_required(self.did, 'did')
        self.validate_required(self.method_signature, 'method_signature')
        self.validate_required(self.output_type, 'output_type')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.biz_id is not None:
            result['biz_id'] = self.biz_id
        if self.contract_name is not None:
            result['contract_name'] = self.contract_name
        if self.contract_type is not None:
            result['contract_type'] = self.contract_type
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        if self.did is not None:
            result['did'] = self.did
        if self.method_signature is not None:
            result['method_signature'] = self.method_signature
        if self.output_type is not None:
            result['output_type'] = self.output_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('biz_id') is not None:
            self.biz_id = m.get('biz_id')
        if m.get('contract_name') is not None:
            self.contract_name = m.get('contract_name')
        if m.get('contract_type') is not None:
            self.contract_type = m.get('contract_type')
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = ContractEncryptKeyItem()
                self.data.append(temp_model.from_map(k))
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('method_signature') is not None:
            self.method_signature = m.get('method_signature')
        if m.get('output_type') is not None:
            self.output_type = m.get('output_type')
        return self


class CreateBusinessContractencryptcallResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: str = None,
        status: int = None,
        tx_hash: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 合约返回参数
        self.data = data
        # 是否调用成功
        self.status = status
        # 链上合约交易调用地址
        self.tx_hash = tx_hash

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.data is not None:
            result['data'] = self.data
        if self.status is not None:
            result['status'] = self.status
        if self.tx_hash is not None:
            result['tx_hash'] = self.tx_hash
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('data') is not None:
            self.data = m.get('data')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('tx_hash') is not None:
            self.tx_hash = m.get('tx_hash')
        return self


class QueryBusinessContractreceiptRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        biz_id: str = None,
        did: str = None,
        tx_hash: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 业务链的bizId
        self.biz_id = biz_id
        # 调用者用户did
        self.did = did
        # 链上交易txHash
        self.tx_hash = tx_hash

    def validate(self):
        self.validate_required(self.biz_id, 'biz_id')
        self.validate_required(self.did, 'did')
        self.validate_required(self.tx_hash, 'tx_hash')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.biz_id is not None:
            result['biz_id'] = self.biz_id
        if self.did is not None:
            result['did'] = self.did
        if self.tx_hash is not None:
            result['tx_hash'] = self.tx_hash
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('biz_id') is not None:
            self.biz_id = m.get('biz_id')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('tx_hash') is not None:
            self.tx_hash = m.get('tx_hash')
        return self


class QueryBusinessContractreceiptResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: str = None,
        status: int = None,
        tx_hash: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 链上txHash对应的内容
        self.data = data
        # 接口调用是否成功
        self.status = status
        # 对应的链上交易txHash
        self.tx_hash = tx_hash

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.data is not None:
            result['data'] = self.data
        if self.status is not None:
            result['status'] = self.status
        if self.tx_hash is not None:
            result['tx_hash'] = self.tx_hash
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('data') is not None:
            self.data = m.get('data')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('tx_hash') is not None:
            self.tx_hash = m.get('tx_hash')
        return self


class QueryBusinessContractencryptreceiptRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        biz_id: str = None,
        contract_name: str = None,
        did: str = None,
        tx_hash: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 链的业务bizId
        self.biz_id = biz_id
        # test_contract_name
        self.contract_name = contract_name
        # 调用者用户身份
        self.did = did
        # 交易对应的链上地址
        self.tx_hash = tx_hash

    def validate(self):
        self.validate_required(self.biz_id, 'biz_id')
        self.validate_required(self.contract_name, 'contract_name')
        self.validate_required(self.did, 'did')
        self.validate_required(self.tx_hash, 'tx_hash')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.biz_id is not None:
            result['biz_id'] = self.biz_id
        if self.contract_name is not None:
            result['contract_name'] = self.contract_name
        if self.did is not None:
            result['did'] = self.did
        if self.tx_hash is not None:
            result['tx_hash'] = self.tx_hash
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('biz_id') is not None:
            self.biz_id = m.get('biz_id')
        if m.get('contract_name') is not None:
            self.contract_name = m.get('contract_name')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('tx_hash') is not None:
            self.tx_hash = m.get('tx_hash')
        return self


class QueryBusinessContractencryptreceiptResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: str = None,
        status: int = None,
        tx_hash: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # txHash对应的交易内容
        self.data = data
        # 调用接口是否成功
        self.status = status
        # 交易对应的txHash
        self.tx_hash = tx_hash

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.data is not None:
            result['data'] = self.data
        if self.status is not None:
            result['status'] = self.status
        if self.tx_hash is not None:
            result['tx_hash'] = self.tx_hash
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('data') is not None:
            self.data = m.get('data')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('tx_hash') is not None:
            self.tx_hash = m.get('tx_hash')
        return self


class QueryBusinessContractencryptmethodRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        biz_id: str = None,
        contract_name: str = None,
        contract_type: int = None,
        did: str = None,
        input_data: str = None,
        method_signature: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 合约链所在地址
        self.biz_id = biz_id
        # 合约名称
        self.contract_name = contract_name
        # 合约类型
        self.contract_type = contract_type
        # 用户的did身份
        self.did = did
        # 输入参数
        self.input_data = input_data
        # 查询方法名接口
        self.method_signature = method_signature

    def validate(self):
        self.validate_required(self.biz_id, 'biz_id')
        self.validate_required(self.contract_name, 'contract_name')
        self.validate_required(self.contract_type, 'contract_type')
        self.validate_required(self.did, 'did')
        self.validate_required(self.input_data, 'input_data')
        self.validate_required(self.method_signature, 'method_signature')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.biz_id is not None:
            result['biz_id'] = self.biz_id
        if self.contract_name is not None:
            result['contract_name'] = self.contract_name
        if self.contract_type is not None:
            result['contract_type'] = self.contract_type
        if self.did is not None:
            result['did'] = self.did
        if self.input_data is not None:
            result['input_data'] = self.input_data
        if self.method_signature is not None:
            result['method_signature'] = self.method_signature
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('biz_id') is not None:
            self.biz_id = m.get('biz_id')
        if m.get('contract_name') is not None:
            self.contract_name = m.get('contract_name')
        if m.get('contract_type') is not None:
            self.contract_type = m.get('contract_type')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('input_data') is not None:
            self.input_data = m.get('input_data')
        if m.get('method_signature') is not None:
            self.method_signature = m.get('method_signature')
        return self


class QueryBusinessContractencryptmethodResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: str = None,
        status: int = None,
        tx_hash: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 查询方法返回值
        self.data = data
        # 是否接口调用成功
        self.status = status
        # 该查询方法在链上所发的交易
        self.tx_hash = tx_hash

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.data is not None:
            result['data'] = self.data
        if self.status is not None:
            result['status'] = self.status
        if self.tx_hash is not None:
            result['tx_hash'] = self.tx_hash
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('data') is not None:
            self.data = m.get('data')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('tx_hash') is not None:
            self.tx_hash = m.get('tx_hash')
        return self


class DeployBusinessAgreementRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        biz_id: str = None,
        contract_name: str = None,
        did: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 业务链的id编号
        self.biz_id = biz_id
        # 合约名称
        self.contract_name = contract_name
        # 用户的did身份
        self.did = did

    def validate(self):
        self.validate_required(self.biz_id, 'biz_id')
        self.validate_required(self.contract_name, 'contract_name')
        self.validate_required(self.did, 'did')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.biz_id is not None:
            result['biz_id'] = self.biz_id
        if self.contract_name is not None:
            result['contract_name'] = self.contract_name
        if self.did is not None:
            result['did'] = self.did
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('biz_id') is not None:
            self.biz_id = m.get('biz_id')
        if m.get('contract_name') is not None:
            self.contract_name = m.get('contract_name')
        if m.get('did') is not None:
            self.did = m.get('did')
        return self


class DeployBusinessAgreementResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: str = None,
        status: int = None,
        tx_hash: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 返回值
        self.data = data
        # 0表示成功
        self.status = status
        # 部署合约交易在链上的地址
        self.tx_hash = tx_hash

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.data is not None:
            result['data'] = self.data
        if self.status is not None:
            result['status'] = self.status
        if self.tx_hash is not None:
            result['tx_hash'] = self.tx_hash
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('data') is not None:
            self.data = m.get('data')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('tx_hash') is not None:
            self.tx_hash = m.get('tx_hash')
        return self


class CreateBusinessAgreementRegistertemplateRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        biz_id: str = None,
        contract_name: str = None,
        did: str = None,
        template: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 业务链对应的bizId
        self.biz_id = biz_id
        # 合约名称
        self.contract_name = contract_name
        # 用户did身份
        self.did = did
        # 业务共识模板
        self.template = template

    def validate(self):
        self.validate_required(self.biz_id, 'biz_id')
        self.validate_required(self.contract_name, 'contract_name')
        self.validate_required(self.did, 'did')
        self.validate_required(self.template, 'template')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.biz_id is not None:
            result['biz_id'] = self.biz_id
        if self.contract_name is not None:
            result['contract_name'] = self.contract_name
        if self.did is not None:
            result['did'] = self.did
        if self.template is not None:
            result['template'] = self.template
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('biz_id') is not None:
            self.biz_id = m.get('biz_id')
        if m.get('contract_name') is not None:
            self.contract_name = m.get('contract_name')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('template') is not None:
            self.template = m.get('template')
        return self


class CreateBusinessAgreementRegistertemplateResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: str = None,
        status: int = None,
        tx_hash: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 注册合约模板，链上合约返回值
        self.data = data
        # 是否该接口调用成功
        self.status = status
        # 该调用对应链上的交易地址
        self.tx_hash = tx_hash

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.data is not None:
            result['data'] = self.data
        if self.status is not None:
            result['status'] = self.status
        if self.tx_hash is not None:
            result['tx_hash'] = self.tx_hash
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('data') is not None:
            self.data = m.get('data')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('tx_hash') is not None:
            self.tx_hash = m.get('tx_hash')
        return self


class CreateBusinessAgreementRegisterRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        biz_id: str = None,
        callback_method: str = None,
        contract_id: str = None,
        contract_name: str = None,
        did: str = None,
        key: str = None,
        template_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 业务链的bizId
        self.biz_id = biz_id
        # 回调合约方法
        self.callback_method = callback_method
        # 回调合约名称
        self.contract_id = contract_id
        # 合约名称
        self.contract_name = contract_name
        # 用户身份的did
        self.did = did
        # 回调key
        self.key = key
        # 合约模板id
        self.template_id = template_id

    def validate(self):
        self.validate_required(self.biz_id, 'biz_id')
        self.validate_required(self.callback_method, 'callback_method')
        self.validate_required(self.contract_id, 'contract_id')
        self.validate_required(self.contract_name, 'contract_name')
        self.validate_required(self.did, 'did')
        self.validate_required(self.key, 'key')
        self.validate_required(self.template_id, 'template_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.biz_id is not None:
            result['biz_id'] = self.biz_id
        if self.callback_method is not None:
            result['callback_method'] = self.callback_method
        if self.contract_id is not None:
            result['contract_id'] = self.contract_id
        if self.contract_name is not None:
            result['contract_name'] = self.contract_name
        if self.did is not None:
            result['did'] = self.did
        if self.key is not None:
            result['key'] = self.key
        if self.template_id is not None:
            result['template_id'] = self.template_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('biz_id') is not None:
            self.biz_id = m.get('biz_id')
        if m.get('callback_method') is not None:
            self.callback_method = m.get('callback_method')
        if m.get('contract_id') is not None:
            self.contract_id = m.get('contract_id')
        if m.get('contract_name') is not None:
            self.contract_name = m.get('contract_name')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('key') is not None:
            self.key = m.get('key')
        if m.get('template_id') is not None:
            self.template_id = m.get('template_id')
        return self


class CreateBusinessAgreementRegisterResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: str = None,
        status: int = None,
        tx_hash: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 合约调用返回值
        self.data = data
        # 该接口是否调用成功
        self.status = status
        # 该交易对应的链上地址
        self.tx_hash = tx_hash

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.data is not None:
            result['data'] = self.data
        if self.status is not None:
            result['status'] = self.status
        if self.tx_hash is not None:
            result['tx_hash'] = self.tx_hash
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('data') is not None:
            self.data = m.get('data')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('tx_hash') is not None:
            self.tx_hash = m.get('tx_hash')
        return self


class CreateBusinessAgreementSignRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        biz_id: str = None,
        contract_id: str = None,
        contract_name: str = None,
        did: str = None,
        key: str = None,
        sign_data: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 业务链bizId
        self.biz_id = biz_id
        # 回调合约名称
        self.contract_id = contract_id
        # 业务共识合约名称
        self.contract_name = contract_name
        # 用户did身份
        self.did = did
        # 业务共识唯一标识
        self.key = key
        # 用户签名
        self.sign_data = sign_data

    def validate(self):
        self.validate_required(self.biz_id, 'biz_id')
        self.validate_required(self.contract_id, 'contract_id')
        self.validate_required(self.contract_name, 'contract_name')
        self.validate_required(self.did, 'did')
        self.validate_required(self.key, 'key')
        self.validate_required(self.sign_data, 'sign_data')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.biz_id is not None:
            result['biz_id'] = self.biz_id
        if self.contract_id is not None:
            result['contract_id'] = self.contract_id
        if self.contract_name is not None:
            result['contract_name'] = self.contract_name
        if self.did is not None:
            result['did'] = self.did
        if self.key is not None:
            result['key'] = self.key
        if self.sign_data is not None:
            result['sign_data'] = self.sign_data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('biz_id') is not None:
            self.biz_id = m.get('biz_id')
        if m.get('contract_id') is not None:
            self.contract_id = m.get('contract_id')
        if m.get('contract_name') is not None:
            self.contract_name = m.get('contract_name')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('key') is not None:
            self.key = m.get('key')
        if m.get('sign_data') is not None:
            self.sign_data = m.get('sign_data')
        return self


class CreateBusinessAgreementSignResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: str = None,
        status: int = None,
        tx_hash: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 该合约调用返回值
        self.data = data
        # 该接口是否调用成功，0表示成功
        self.status = status
        # 该调用对应的链上交易地址
        self.tx_hash = tx_hash

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.data is not None:
            result['data'] = self.data
        if self.status is not None:
            result['status'] = self.status
        if self.tx_hash is not None:
            result['tx_hash'] = self.tx_hash
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('data') is not None:
            self.data = m.get('data')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('tx_hash') is not None:
            self.tx_hash = m.get('tx_hash')
        return self


class QueryBusinessAgreementRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        biz_id: str = None,
        contract_id: str = None,
        contract_name: str = None,
        did: str = None,
        key: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 业务共识链id
        self.biz_id = biz_id
        # 回调合约id
        self.contract_id = contract_id
        # 业务共识合约id
        self.contract_name = contract_name
        # 发起者did账户
        self.did = did
        # 业务共识唯一id
        self.key = key

    def validate(self):
        self.validate_required(self.biz_id, 'biz_id')
        self.validate_required(self.contract_id, 'contract_id')
        self.validate_required(self.contract_name, 'contract_name')
        self.validate_required(self.did, 'did')
        self.validate_required(self.key, 'key')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.biz_id is not None:
            result['biz_id'] = self.biz_id
        if self.contract_id is not None:
            result['contract_id'] = self.contract_id
        if self.contract_name is not None:
            result['contract_name'] = self.contract_name
        if self.did is not None:
            result['did'] = self.did
        if self.key is not None:
            result['key'] = self.key
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('biz_id') is not None:
            self.biz_id = m.get('biz_id')
        if m.get('contract_id') is not None:
            self.contract_id = m.get('contract_id')
        if m.get('contract_name') is not None:
            self.contract_name = m.get('contract_name')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('key') is not None:
            self.key = m.get('key')
        return self


class QueryBusinessAgreementResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: str = None,
        status: int = None,
        tx_hash: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 当前该共识的状态信息
        self.data = data
        # 业务共识查询接口是否调用成功，0表示成功
        self.status = status
        # 该接口调用对应的链上交易地址
        self.tx_hash = tx_hash

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.data is not None:
            result['data'] = self.data
        if self.status is not None:
            result['status'] = self.status
        if self.tx_hash is not None:
            result['tx_hash'] = self.tx_hash
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('data') is not None:
            self.data = m.get('data')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('tx_hash') is not None:
            self.tx_hash = m.get('tx_hash')
        return self


class CreateBusinessContractGrantdidRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        biz_id: str = None,
        contract_name: str = None,
        did: str = None,
        due_time: str = None,
        granted_did: str = None,
        item_ids: List[str] = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 租户业务链地址biz_id
        self.biz_id = biz_id
        # 授权的合约名称
        self.contract_name = contract_name
        # 用户did身份
        self.did = did
        # 授权截止日期
        self.due_time = due_time
        # 被授权者身份
        self.granted_did = granted_did
        # 授权的字段
        self.item_ids = item_ids

    def validate(self):
        self.validate_required(self.biz_id, 'biz_id')
        self.validate_required(self.contract_name, 'contract_name')
        self.validate_required(self.did, 'did')
        self.validate_required(self.due_time, 'due_time')
        if self.due_time is not None:
            self.validate_pattern(self.due_time, 'due_time', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')
        self.validate_required(self.granted_did, 'granted_did')
        self.validate_required(self.item_ids, 'item_ids')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.biz_id is not None:
            result['biz_id'] = self.biz_id
        if self.contract_name is not None:
            result['contract_name'] = self.contract_name
        if self.did is not None:
            result['did'] = self.did
        if self.due_time is not None:
            result['due_time'] = self.due_time
        if self.granted_did is not None:
            result['granted_did'] = self.granted_did
        if self.item_ids is not None:
            result['item_ids'] = self.item_ids
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('biz_id') is not None:
            self.biz_id = m.get('biz_id')
        if m.get('contract_name') is not None:
            self.contract_name = m.get('contract_name')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('due_time') is not None:
            self.due_time = m.get('due_time')
        if m.get('granted_did') is not None:
            self.granted_did = m.get('granted_did')
        if m.get('item_ids') is not None:
            self.item_ids = m.get('item_ids')
        return self


class CreateBusinessContractGrantdidResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: str = None,
        status: int = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 成功被授权的字段
        self.data = data
        # 该接口是否调用成功，0表示成功
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.data is not None:
            result['data'] = self.data
        if self.status is not None:
            result['status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('data') is not None:
            self.data = m.get('data')
        if m.get('status') is not None:
            self.status = m.get('status')
        return self


class QueryBusinessDepositEncryptedmetadataRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        biz_id: str = None,
        did: str = None,
        key_id: str = None,
        tx_hash: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 链的业务id
        self.biz_id = biz_id
        # 发起者的did身份
        self.did = did
        # 存证的唯一主键key_id
        self.key_id = key_id
        # 被存证的交易txHash，若不传则默认key_id最近的交易hash
        self.tx_hash = tx_hash

    def validate(self):
        self.validate_required(self.biz_id, 'biz_id')
        self.validate_required(self.did, 'did')
        self.validate_required(self.key_id, 'key_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.biz_id is not None:
            result['biz_id'] = self.biz_id
        if self.did is not None:
            result['did'] = self.did
        if self.key_id is not None:
            result['key_id'] = self.key_id
        if self.tx_hash is not None:
            result['tx_hash'] = self.tx_hash
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('biz_id') is not None:
            self.biz_id = m.get('biz_id')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('key_id') is not None:
            self.key_id = m.get('key_id')
        if m.get('tx_hash') is not None:
            self.tx_hash = m.get('tx_hash')
        return self


class QueryBusinessDepositEncryptedmetadataResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        deposit_data: str = None,
        deposit_id: str = None,
        history_tx_id: List[str] = None,
        status: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 被存证的数据
        self.deposit_data = deposit_data
        # 存证的唯一主键
        self.deposit_id = deposit_id
        # 被存证的主键关联的历史交易
        self.history_tx_id = history_tx_id
        # 是否查询成功
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.deposit_data is not None:
            result['deposit_data'] = self.deposit_data
        if self.deposit_id is not None:
            result['deposit_id'] = self.deposit_id
        if self.history_tx_id is not None:
            result['history_tx_id'] = self.history_tx_id
        if self.status is not None:
            result['status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('deposit_data') is not None:
            self.deposit_data = m.get('deposit_data')
        if m.get('deposit_id') is not None:
            self.deposit_id = m.get('deposit_id')
        if m.get('history_tx_id') is not None:
            self.history_tx_id = m.get('history_tx_id')
        if m.get('status') is not None:
            self.status = m.get('status')
        return self


class AuthBusinessDepositdataCorpRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        biz_id: str = None,
        did: str = None,
        due_time: str = None,
        granted_corp: str = None,
        item_key_id: List[str] = None,
        key_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 被授权的存证数据所在的链
        self.biz_id = biz_id
        # 被授权者的did数字身份
        self.did = did
        # 授权的截止日期，超过该日期后，该组织不再具有访问加密数据的权限
        self.due_time = due_time
        # 被授权的组织名
        self.granted_corp = granted_corp
        # 被授权的字段
        self.item_key_id = item_key_id
        # 被授权的存证内容逻辑主键
        self.key_id = key_id

    def validate(self):
        self.validate_required(self.biz_id, 'biz_id')
        self.validate_required(self.did, 'did')
        self.validate_required(self.due_time, 'due_time')
        if self.due_time is not None:
            self.validate_pattern(self.due_time, 'due_time', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')
        self.validate_required(self.granted_corp, 'granted_corp')
        self.validate_required(self.item_key_id, 'item_key_id')
        self.validate_required(self.key_id, 'key_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.biz_id is not None:
            result['biz_id'] = self.biz_id
        if self.did is not None:
            result['did'] = self.did
        if self.due_time is not None:
            result['due_time'] = self.due_time
        if self.granted_corp is not None:
            result['granted_corp'] = self.granted_corp
        if self.item_key_id is not None:
            result['item_key_id'] = self.item_key_id
        if self.key_id is not None:
            result['key_id'] = self.key_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('biz_id') is not None:
            self.biz_id = m.get('biz_id')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('due_time') is not None:
            self.due_time = m.get('due_time')
        if m.get('granted_corp') is not None:
            self.granted_corp = m.get('granted_corp')
        if m.get('item_key_id') is not None:
            self.item_key_id = m.get('item_key_id')
        if m.get('key_id') is not None:
            self.key_id = m.get('key_id')
        return self


class AuthBusinessDepositdataCorpResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        deposit_id: str = None,
        status: str = None,
        tx_hash: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 被授权的逻辑主字段(biz_id与key_id的拼接）
        self.deposit_id = deposit_id
        # 是否授权成功
        self.status = status
        # deposit_id对应的当前最新的交易
        self.tx_hash = tx_hash

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.deposit_id is not None:
            result['deposit_id'] = self.deposit_id
        if self.status is not None:
            result['status'] = self.status
        if self.tx_hash is not None:
            result['tx_hash'] = self.tx_hash
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('deposit_id') is not None:
            self.deposit_id = m.get('deposit_id')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('tx_hash') is not None:
            self.tx_hash = m.get('tx_hash')
        return self


class CancelBusinessDepositGrantdidRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        did: str = None,
        granted_did: str = None,
        item_key_id: List[str] = None,
        key_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 存证数据的发起者did身份
        self.did = did
        # 取消授权的did数字身份
        self.granted_did = granted_did
        # 取消授权的字段名称
        self.item_key_id = item_key_id
        # 存证数据的主键
        self.key_id = key_id

    def validate(self):
        self.validate_required(self.did, 'did')
        self.validate_required(self.granted_did, 'granted_did')
        self.validate_required(self.item_key_id, 'item_key_id')
        self.validate_required(self.key_id, 'key_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.did is not None:
            result['did'] = self.did
        if self.granted_did is not None:
            result['granted_did'] = self.granted_did
        if self.item_key_id is not None:
            result['item_key_id'] = self.item_key_id
        if self.key_id is not None:
            result['key_id'] = self.key_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('granted_did') is not None:
            self.granted_did = m.get('granted_did')
        if m.get('item_key_id') is not None:
            self.item_key_id = m.get('item_key_id')
        if m.get('key_id') is not None:
            self.key_id = m.get('key_id')
        return self


class CancelBusinessDepositGrantdidResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        deposit_id: str = None,
        status: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 取消授权的主键
        self.deposit_id = deposit_id
        # 取消授权成功
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.deposit_id is not None:
            result['deposit_id'] = self.deposit_id
        if self.status is not None:
            result['status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('deposit_id') is not None:
            self.deposit_id = m.get('deposit_id')
        if m.get('status') is not None:
            self.status = m.get('status')
        return self


class CancelBusinessDepositGrantcorpRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        biz_id: str = None,
        did: str = None,
        granted_corp: str = None,
        item_key_id: List[str] = None,
        key_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 数据存证所在链的业务id
        self.biz_id = biz_id
        # 存证数据的发起者did数字身份
        self.did = did
        # 取消授权的组织名称
        self.granted_corp = granted_corp
        # 取消授权的子列名称
        self.item_key_id = item_key_id
        # 存证数据的逻辑主keyId
        self.key_id = key_id

    def validate(self):
        self.validate_required(self.biz_id, 'biz_id')
        self.validate_required(self.did, 'did')
        self.validate_required(self.granted_corp, 'granted_corp')
        self.validate_required(self.item_key_id, 'item_key_id')
        self.validate_required(self.key_id, 'key_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.biz_id is not None:
            result['biz_id'] = self.biz_id
        if self.did is not None:
            result['did'] = self.did
        if self.granted_corp is not None:
            result['granted_corp'] = self.granted_corp
        if self.item_key_id is not None:
            result['item_key_id'] = self.item_key_id
        if self.key_id is not None:
            result['key_id'] = self.key_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('biz_id') is not None:
            self.biz_id = m.get('biz_id')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('granted_corp') is not None:
            self.granted_corp = m.get('granted_corp')
        if m.get('item_key_id') is not None:
            self.item_key_id = m.get('item_key_id')
        if m.get('key_id') is not None:
            self.key_id = m.get('key_id')
        return self


class CancelBusinessDepositGrantcorpResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        deposit_id: str = None,
        status: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 存证数据的逻辑主id(biz_id与key_id的拼接)
        self.deposit_id = deposit_id
        # 是否取消授权成功
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.deposit_id is not None:
            result['deposit_id'] = self.deposit_id
        if self.status is not None:
            result['status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('deposit_id') is not None:
            self.deposit_id = m.get('deposit_id')
        if m.get('status') is not None:
            self.status = m.get('status')
        return self


class CreateBusinessContractGrantcorpRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        biz_id: str = None,
        contract_name: str = None,
        did: str = None,
        due_time: str = None,
        granted_corp: str = None,
        item_ids: List[str] = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 数据所在的链业务id
        self.biz_id = biz_id
        # 合约名称
        self.contract_name = contract_name
        # 合约keyId发起者的数字身份
        self.did = did
        # 授权截止日期，超过该日期则不可继续访问该数据
        self.due_time = due_time
        # 授权的组织名称
        self.granted_corp = granted_corp
        # 需要授权的字段名称
        self.item_ids = item_ids

    def validate(self):
        self.validate_required(self.biz_id, 'biz_id')
        self.validate_required(self.contract_name, 'contract_name')
        self.validate_required(self.did, 'did')
        self.validate_required(self.due_time, 'due_time')
        if self.due_time is not None:
            self.validate_pattern(self.due_time, 'due_time', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')
        self.validate_required(self.granted_corp, 'granted_corp')
        self.validate_required(self.item_ids, 'item_ids')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.biz_id is not None:
            result['biz_id'] = self.biz_id
        if self.contract_name is not None:
            result['contract_name'] = self.contract_name
        if self.did is not None:
            result['did'] = self.did
        if self.due_time is not None:
            result['due_time'] = self.due_time
        if self.granted_corp is not None:
            result['granted_corp'] = self.granted_corp
        if self.item_ids is not None:
            result['item_ids'] = self.item_ids
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('biz_id') is not None:
            self.biz_id = m.get('biz_id')
        if m.get('contract_name') is not None:
            self.contract_name = m.get('contract_name')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('due_time') is not None:
            self.due_time = m.get('due_time')
        if m.get('granted_corp') is not None:
            self.granted_corp = m.get('granted_corp')
        if m.get('item_ids') is not None:
            self.item_ids = m.get('item_ids')
        return self


class CreateBusinessContractGrantcorpResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: List[str] = None,
        status: int = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 授权的字段列表
        self.data = data
        # 是否授权给组织成功，0表示成功
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.data is not None:
            result['data'] = self.data
        if self.status is not None:
            result['status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('data') is not None:
            self.data = m.get('data')
        if m.get('status') is not None:
            self.status = m.get('status')
        return self


class CancelBusinessContractGrantdidRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        biz_id: str = None,
        contract_name: str = None,
        did: str = None,
        granted_did: str = None,
        item_ids: List[str] = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 合约所在链的业务id
        self.biz_id = biz_id
        # 合约名称
        self.contract_name = contract_name
        # keyId的创建者数字身份
        self.did = did
        # 取消被授权者的数字身份
        self.granted_did = granted_did
        # 取消授权的字段
        self.item_ids = item_ids

    def validate(self):
        self.validate_required(self.biz_id, 'biz_id')
        self.validate_required(self.contract_name, 'contract_name')
        self.validate_required(self.did, 'did')
        self.validate_required(self.granted_did, 'granted_did')
        self.validate_required(self.item_ids, 'item_ids')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.biz_id is not None:
            result['biz_id'] = self.biz_id
        if self.contract_name is not None:
            result['contract_name'] = self.contract_name
        if self.did is not None:
            result['did'] = self.did
        if self.granted_did is not None:
            result['granted_did'] = self.granted_did
        if self.item_ids is not None:
            result['item_ids'] = self.item_ids
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('biz_id') is not None:
            self.biz_id = m.get('biz_id')
        if m.get('contract_name') is not None:
            self.contract_name = m.get('contract_name')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('granted_did') is not None:
            self.granted_did = m.get('granted_did')
        if m.get('item_ids') is not None:
            self.item_ids = m.get('item_ids')
        return self


class CancelBusinessContractGrantdidResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: str = None,
        status: int = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 取消授权成功的字段列表
        self.data = data
        # 是否取消授权成功，0表示成功
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.data is not None:
            result['data'] = self.data
        if self.status is not None:
            result['status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('data') is not None:
            self.data = m.get('data')
        if m.get('status') is not None:
            self.status = m.get('status')
        return self


class CancelBusinessContractGrantcorpRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        biz_id: str = None,
        contract_name: str = None,
        did: str = None,
        granted_corp: str = None,
        item_ids: List[str] = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 合约所在的业务链id
        self.biz_id = biz_id
        # 合约名称
        self.contract_name = contract_name
        # 用户的did数字身份
        self.did = did
        # 取消被授权者的机构名称
        self.granted_corp = granted_corp
        # 取消授权的字段名
        self.item_ids = item_ids

    def validate(self):
        self.validate_required(self.biz_id, 'biz_id')
        self.validate_required(self.contract_name, 'contract_name')
        self.validate_required(self.did, 'did')
        self.validate_required(self.granted_corp, 'granted_corp')
        self.validate_required(self.item_ids, 'item_ids')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.biz_id is not None:
            result['biz_id'] = self.biz_id
        if self.contract_name is not None:
            result['contract_name'] = self.contract_name
        if self.did is not None:
            result['did'] = self.did
        if self.granted_corp is not None:
            result['granted_corp'] = self.granted_corp
        if self.item_ids is not None:
            result['item_ids'] = self.item_ids
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('biz_id') is not None:
            self.biz_id = m.get('biz_id')
        if m.get('contract_name') is not None:
            self.contract_name = m.get('contract_name')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('granted_corp') is not None:
            self.granted_corp = m.get('granted_corp')
        if m.get('item_ids') is not None:
            self.item_ids = m.get('item_ids')
        return self


class CancelBusinessContractGrantcorpResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: str = None,
        status: int = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 成功取消授权的字段
        self.data = data
        # 是否取消授权成功，0表示成功
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.data is not None:
            result['data'] = self.data
        if self.status is not None:
            result['status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('data') is not None:
            self.data = m.get('data')
        if m.get('status') is not None:
            self.status = m.get('status')
        return self


class ImportPlatformTestregionTestfuncRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        test_param_1: str = None,
        test_param_2: int = None,
        test_param_3: List[NodeInfo] = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 123
        self.test_param_1 = test_param_1
        # 123
        self.test_param_2 = test_param_2
        # 123
        self.test_param_3 = test_param_3

    def validate(self):
        self.validate_required(self.test_param_1, 'test_param_1')
        self.validate_required(self.test_param_2, 'test_param_2')
        self.validate_required(self.test_param_3, 'test_param_3')
        if self.test_param_3:
            for k in self.test_param_3:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.test_param_1 is not None:
            result['test_param1'] = self.test_param_1
        if self.test_param_2 is not None:
            result['test_param2'] = self.test_param_2
        result['test_param3'] = []
        if self.test_param_3 is not None:
            for k in self.test_param_3:
                result['test_param3'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('test_param1') is not None:
            self.test_param_1 = m.get('test_param1')
        if m.get('test_param2') is not None:
            self.test_param_2 = m.get('test_param2')
        self.test_param_3 = []
        if m.get('test_param3') is not None:
            for k in m.get('test_param3'):
                temp_model = NodeInfo()
                self.test_param_3.append(temp_model.from_map(k))
        return self


class ImportPlatformTestregionTestfuncResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        test_response: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 123
        self.test_response = test_response

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.test_response is not None:
            result['test_response'] = self.test_response
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('test_response') is not None:
            self.test_response = m.get('test_response')
        return self


class CreatePlatformDepositAccountRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        biz_id: str = None,
        did: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 业务链对应的bizId
        self.biz_id = biz_id
        # 申请者对应的did账户
        self.did = did

    def validate(self):
        self.validate_required(self.biz_id, 'biz_id')
        self.validate_required(self.did, 'did')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.biz_id is not None:
            result['biz_id'] = self.biz_id
        if self.did is not None:
            result['did'] = self.did
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('biz_id') is not None:
            self.biz_id = m.get('biz_id')
        if m.get('did') is not None:
            self.did = m.get('did')
        return self


class CreatePlatformDepositAccountResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        did: str = None,
        isv_account: str = None,
        kms_id: str = None,
        status: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # did地址
        self.did = did
        # 租户账户
        self.isv_account = isv_account
        # 生成的账户在kms上的密钥id
        self.kms_id = kms_id
        # 调用接口是否成功
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.did is not None:
            result['did'] = self.did
        if self.isv_account is not None:
            result['isv_account'] = self.isv_account
        if self.kms_id is not None:
            result['kms_id'] = self.kms_id
        if self.status is not None:
            result['status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('isv_account') is not None:
            self.isv_account = m.get('isv_account')
        if m.get('kms_id') is not None:
            self.kms_id = m.get('kms_id')
        if m.get('status') is not None:
            self.status = m.get('status')
        return self


class CreatePlatformDepositDidRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        id_card_number: str = None,
        phone_number: str = None,
        user_name: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 用户身份证号
        self.id_card_number = id_card_number
        # 手机号
        self.phone_number = phone_number
        # 用户姓名
        self.user_name = user_name

    def validate(self):
        self.validate_required(self.id_card_number, 'id_card_number')
        self.validate_required(self.phone_number, 'phone_number')
        self.validate_required(self.user_name, 'user_name')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.id_card_number is not None:
            result['id_card_number'] = self.id_card_number
        if self.phone_number is not None:
            result['phone_number'] = self.phone_number
        if self.user_name is not None:
            result['user_name'] = self.user_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('id_card_number') is not None:
            self.id_card_number = m.get('id_card_number')
        if m.get('phone_number') is not None:
            self.phone_number = m.get('phone_number')
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        return self


class CreatePlatformDepositDidResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        did: str = None,
        isv_account: str = None,
        status: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 用户did
        self.did = did
        # 租户金融科技id
        self.isv_account = isv_account
        # 是否创建成果
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.did is not None:
            result['did'] = self.did
        if self.isv_account is not None:
            result['isv_account'] = self.isv_account
        if self.status is not None:
            result['status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('isv_account') is not None:
            self.isv_account = m.get('isv_account')
        if m.get('status') is not None:
            self.status = m.get('status')
        return self


class SavePlatformDepositDepositRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        biz_id: str = None,
        data: str = None,
        did: str = None,
        key_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 业务链对应的bizId
        self.biz_id = biz_id
        # 存证数据
        self.data = data
        # 用户的did地址
        self.did = did
        # 任意用户自定义的keyId(需要唯一)，根据该keyId可以查找存证的内容，若不填则使用txHash作为keyId
        self.key_id = key_id

    def validate(self):
        self.validate_required(self.biz_id, 'biz_id')
        self.validate_required(self.data, 'data')
        self.validate_required(self.did, 'did')
        self.validate_required(self.key_id, 'key_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.biz_id is not None:
            result['biz_id'] = self.biz_id
        if self.data is not None:
            result['data'] = self.data
        if self.did is not None:
            result['did'] = self.did
        if self.key_id is not None:
            result['key_id'] = self.key_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('biz_id') is not None:
            self.biz_id = m.get('biz_id')
        if m.get('data') is not None:
            self.data = m.get('data')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('key_id') is not None:
            self.key_id = m.get('key_id')
        return self


class SavePlatformDepositDepositResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        deposit_id: str = None,
        status: str = None,
        tx_hash: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # bizid+accountid+keyId/txHash 组成的唯一id，用户可以根据该id到服务中查询链上内容
        self.deposit_id = deposit_id
        # 是否存证成果
        self.status = status
        # 链上返回的txHash值
        self.tx_hash = tx_hash

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.deposit_id is not None:
            result['deposit_id'] = self.deposit_id
        if self.status is not None:
            result['status'] = self.status
        if self.tx_hash is not None:
            result['tx_hash'] = self.tx_hash
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('deposit_id') is not None:
            self.deposit_id = m.get('deposit_id')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('tx_hash') is not None:
            self.tx_hash = m.get('tx_hash')
        return self


class CreatePlatformDepositCorpdidRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        ep_cert_name: str = None,
        ep_cert_no: str = None,
        legal_person_cert_name: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 企业名称
        # 
        self.ep_cert_name = ep_cert_name
        # 企业证件号
        self.ep_cert_no = ep_cert_no
        # 企业法人名称
        self.legal_person_cert_name = legal_person_cert_name

    def validate(self):
        self.validate_required(self.ep_cert_name, 'ep_cert_name')
        self.validate_required(self.ep_cert_no, 'ep_cert_no')
        self.validate_required(self.legal_person_cert_name, 'legal_person_cert_name')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.ep_cert_name is not None:
            result['ep_cert_name'] = self.ep_cert_name
        if self.ep_cert_no is not None:
            result['ep_cert_no'] = self.ep_cert_no
        if self.legal_person_cert_name is not None:
            result['legal_person_cert_name'] = self.legal_person_cert_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('ep_cert_name') is not None:
            self.ep_cert_name = m.get('ep_cert_name')
        if m.get('ep_cert_no') is not None:
            self.ep_cert_no = m.get('ep_cert_no')
        if m.get('legal_person_cert_name') is not None:
            self.legal_person_cert_name = m.get('legal_person_cert_name')
        return self


class CreatePlatformDepositCorpdidResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        did: str = None,
        isv_account: str = None,
        status: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 企业did
        self.did = did
        # 调用者金融科技id
        self.isv_account = isv_account
        # 是否调用成功
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.did is not None:
            result['did'] = self.did
        if self.isv_account is not None:
            result['isv_account'] = self.isv_account
        if self.status is not None:
            result['status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('isv_account') is not None:
            self.isv_account = m.get('isv_account')
        if m.get('status') is not None:
            self.status = m.get('status')
        return self


class CreateDigitalassetartAccountRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        phone: str = None,
        user_account: str = None,
        user_name: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 用户手机号
        self.phone = phone
        # 用户的支付宝账号
        self.user_account = user_account
        # 用户姓名
        self.user_name = user_name

    def validate(self):
        self.validate_required(self.phone, 'phone')
        self.validate_required(self.user_account, 'user_account')
        self.validate_required(self.user_name, 'user_name')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.phone is not None:
            result['phone'] = self.phone
        if self.user_account is not None:
            result['user_account'] = self.user_account
        if self.user_name is not None:
            result['user_name'] = self.user_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('phone') is not None:
            self.phone = m.get('phone')
        if m.get('user_account') is not None:
            self.user_account = m.get('user_account')
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        return self


class CreateDigitalassetartAccountResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        account_id: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 用户链账户地址
        self.account_id = account_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.account_id is not None:
            result['account_id'] = self.account_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('account_id') is not None:
            self.account_id = m.get('account_id')
        return self


class BatchcreateDigitalassetartAccountRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        users: List[UserInfoParam] = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 批量用户账户、姓名、手机号等信息
        self.users = users

    def validate(self):
        self.validate_required(self.users, 'users')
        if self.users:
            for k in self.users:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        result['users'] = []
        if self.users is not None:
            for k in self.users:
                result['users'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        self.users = []
        if m.get('users') is not None:
            for k in m.get('users'):
                temp_model = UserInfoParam()
                self.users.append(temp_model.from_map(k))
        return self


class BatchcreateDigitalassetartAccountResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        fail_list: List[str] = None,
        fail_num: int = None,
        success_num: int = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 失败的账户
        self.fail_list = fail_list
        # 失败的个数
        self.fail_num = fail_num
        # 成功的个数
        self.success_num = success_num

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.fail_list is not None:
            result['fail_list'] = self.fail_list
        if self.fail_num is not None:
            result['fail_num'] = self.fail_num
        if self.success_num is not None:
            result['success_num'] = self.success_num
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('fail_list') is not None:
            self.fail_list = m.get('fail_list')
        if m.get('fail_num') is not None:
            self.fail_num = m.get('fail_num')
        if m.get('success_num') is not None:
            self.success_num = m.get('success_num')
        return self


class CreateDigitalassetartArtCreateRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        art_anchor: str = None,
        art_id: str = None,
        art_name: str = None,
        code: str = None,
        create_date: str = None,
        identifiers: List[str] = None,
        image_hashes: List[str] = None,
        main_class: str = None,
        owner_account_id: str = None,
        sub_class: str = None,
        vedio_hashes: List[str] = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 艺术品锚定物
        self.art_anchor = art_anchor
        # 艺术品唯一id
        self.art_id = art_id
        # 艺术品名称
        self.art_name = art_name
        # 艺术品代码
        self.code = code
        # 创建时间
        self.create_date = create_date
        # 鉴定者账户
        self.identifiers = identifiers
        # 艺术品图片哈希
        self.image_hashes = image_hashes
        # 一级分类
        self.main_class = main_class
        # 拥有者链上账户地址
        self.owner_account_id = owner_account_id
        # 二级分类
        self.sub_class = sub_class
        # 艺术品视频哈希
        self.vedio_hashes = vedio_hashes

    def validate(self):
        self.validate_required(self.art_anchor, 'art_anchor')
        self.validate_required(self.art_id, 'art_id')
        self.validate_required(self.art_name, 'art_name')
        self.validate_required(self.code, 'code')
        self.validate_required(self.create_date, 'create_date')
        self.validate_required(self.identifiers, 'identifiers')
        self.validate_required(self.image_hashes, 'image_hashes')
        self.validate_required(self.main_class, 'main_class')
        self.validate_required(self.owner_account_id, 'owner_account_id')
        self.validate_required(self.sub_class, 'sub_class')
        self.validate_required(self.vedio_hashes, 'vedio_hashes')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.art_anchor is not None:
            result['art_anchor'] = self.art_anchor
        if self.art_id is not None:
            result['art_id'] = self.art_id
        if self.art_name is not None:
            result['art_name'] = self.art_name
        if self.code is not None:
            result['code'] = self.code
        if self.create_date is not None:
            result['create_date'] = self.create_date
        if self.identifiers is not None:
            result['identifiers'] = self.identifiers
        if self.image_hashes is not None:
            result['image_hashes'] = self.image_hashes
        if self.main_class is not None:
            result['main_class'] = self.main_class
        if self.owner_account_id is not None:
            result['owner_account_id'] = self.owner_account_id
        if self.sub_class is not None:
            result['sub_class'] = self.sub_class
        if self.vedio_hashes is not None:
            result['vedio_hashes'] = self.vedio_hashes
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('art_anchor') is not None:
            self.art_anchor = m.get('art_anchor')
        if m.get('art_id') is not None:
            self.art_id = m.get('art_id')
        if m.get('art_name') is not None:
            self.art_name = m.get('art_name')
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('create_date') is not None:
            self.create_date = m.get('create_date')
        if m.get('identifiers') is not None:
            self.identifiers = m.get('identifiers')
        if m.get('image_hashes') is not None:
            self.image_hashes = m.get('image_hashes')
        if m.get('main_class') is not None:
            self.main_class = m.get('main_class')
        if m.get('owner_account_id') is not None:
            self.owner_account_id = m.get('owner_account_id')
        if m.get('sub_class') is not None:
            self.sub_class = m.get('sub_class')
        if m.get('vedio_hashes') is not None:
            self.vedio_hashes = m.get('vedio_hashes')
        return self


class CreateDigitalassetartArtCreateResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        art_id: str = None,
        status: int = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 艺术品唯一id
        self.art_id = art_id
        # 艺术品状态信息
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.art_id is not None:
            result['art_id'] = self.art_id
        if self.status is not None:
            result['status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('art_id') is not None:
            self.art_id = m.get('art_id')
        if m.get('status') is not None:
            self.status = m.get('status')
        return self


class SetDigitalassetartArtIssueRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        account_id: str = None,
        art_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 拥有者链上账户地址
        self.account_id = account_id
        # 艺术品id
        self.art_id = art_id

    def validate(self):
        self.validate_required(self.account_id, 'account_id')
        self.validate_required(self.art_id, 'art_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.account_id is not None:
            result['account_id'] = self.account_id
        if self.art_id is not None:
            result['art_id'] = self.art_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('account_id') is not None:
            self.account_id = m.get('account_id')
        if m.get('art_id') is not None:
            self.art_id = m.get('art_id')
        return self


class SetDigitalassetartArtIssueResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        art_id: str = None,
        status: int = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 艺术品id
        self.art_id = art_id
        # 艺术品状态信息，1表示发行成功
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.art_id is not None:
            result['art_id'] = self.art_id
        if self.status is not None:
            result['status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('art_id') is not None:
            self.art_id = m.get('art_id')
        if m.get('status') is not None:
            self.status = m.get('status')
        return self


class SetDigitalassetartArtIssuetoexchangeRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        account_id: str = None,
        art_id: str = None,
        exchange_code: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 拥有者账户地址
        self.account_id = account_id
        # 艺术品id
        self.art_id = art_id
        # 交易所代码
        self.exchange_code = exchange_code

    def validate(self):
        self.validate_required(self.account_id, 'account_id')
        self.validate_required(self.art_id, 'art_id')
        self.validate_required(self.exchange_code, 'exchange_code')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.account_id is not None:
            result['account_id'] = self.account_id
        if self.art_id is not None:
            result['art_id'] = self.art_id
        if self.exchange_code is not None:
            result['exchange_code'] = self.exchange_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('account_id') is not None:
            self.account_id = m.get('account_id')
        if m.get('art_id') is not None:
            self.art_id = m.get('art_id')
        if m.get('exchange_code') is not None:
            self.exchange_code = m.get('exchange_code')
        return self


class SetDigitalassetartArtIssuetoexchangeResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        art_id: str = None,
        exchange_code: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 艺术品id
        self.art_id = art_id
        # 交易所代码
        self.exchange_code = exchange_code

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.art_id is not None:
            result['art_id'] = self.art_id
        if self.exchange_code is not None:
            result['exchange_code'] = self.exchange_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('art_id') is not None:
            self.art_id = m.get('art_id')
        if m.get('exchange_code') is not None:
            self.exchange_code = m.get('exchange_code')
        return self


class SetDigitalassetartArtTradeRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        account_id: str = None,
        art_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 拥有者链上地址
        self.account_id = account_id
        # 艺术品唯一id
        self.art_id = art_id

    def validate(self):
        self.validate_required(self.account_id, 'account_id')
        self.validate_required(self.art_id, 'art_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.account_id is not None:
            result['account_id'] = self.account_id
        if self.art_id is not None:
            result['art_id'] = self.art_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('account_id') is not None:
            self.account_id = m.get('account_id')
        if m.get('art_id') is not None:
            self.art_id = m.get('art_id')
        return self


class SetDigitalassetartArtTradeResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        art_id: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 艺术品交易成功
        self.art_id = art_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.art_id is not None:
            result['art_id'] = self.art_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('art_id') is not None:
            self.art_id = m.get('art_id')
        return self


class SetDigitalassetartArtTradeonexchangeRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        exchange_code: str = None,
        trade_account_id: str = None,
        tx_hash: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 交易所代码
        self.exchange_code = exchange_code
        # 交易者账户
        self.trade_account_id = trade_account_id
        # 交易txHash
        self.tx_hash = tx_hash

    def validate(self):
        self.validate_required(self.exchange_code, 'exchange_code')
        self.validate_required(self.trade_account_id, 'trade_account_id')
        self.validate_required(self.tx_hash, 'tx_hash')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.exchange_code is not None:
            result['exchange_code'] = self.exchange_code
        if self.trade_account_id is not None:
            result['trade_account_id'] = self.trade_account_id
        if self.tx_hash is not None:
            result['tx_hash'] = self.tx_hash
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('exchange_code') is not None:
            self.exchange_code = m.get('exchange_code')
        if m.get('trade_account_id') is not None:
            self.trade_account_id = m.get('trade_account_id')
        if m.get('tx_hash') is not None:
            self.tx_hash = m.get('tx_hash')
        return self


class SetDigitalassetartArtTradeonexchangeResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        status: int = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 0 在交易成功
        # 1 在交易失败
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.status is not None:
            result['status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('status') is not None:
            self.status = m.get('status')
        return self


class FreezeDigitalassetartArtAccountRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        account_id: str = None,
        art_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 管理员账户
        self.account_id = account_id
        # 艺术品id
        self.art_id = art_id

    def validate(self):
        self.validate_required(self.account_id, 'account_id')
        self.validate_required(self.art_id, 'art_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.account_id is not None:
            result['account_id'] = self.account_id
        if self.art_id is not None:
            result['art_id'] = self.art_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('account_id') is not None:
            self.account_id = m.get('account_id')
        if m.get('art_id') is not None:
            self.art_id = m.get('art_id')
        return self


class FreezeDigitalassetartArtAccountResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        art_id: str = None,
        status: int = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 艺术品id
        self.art_id = art_id
        # 艺术品冻结是否成功，0表示成功
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.art_id is not None:
            result['art_id'] = self.art_id
        if self.status is not None:
            result['status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('art_id') is not None:
            self.art_id = m.get('art_id')
        if m.get('status') is not None:
            self.status = m.get('status')
        return self


class UnfreezeDigitalassetartArtAccountRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        account_id: str = None,
        art_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 管理员账户id
        self.account_id = account_id
        # 艺术品id
        self.art_id = art_id

    def validate(self):
        self.validate_required(self.account_id, 'account_id')
        self.validate_required(self.art_id, 'art_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.account_id is not None:
            result['account_id'] = self.account_id
        if self.art_id is not None:
            result['art_id'] = self.art_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('account_id') is not None:
            self.account_id = m.get('account_id')
        if m.get('art_id') is not None:
            self.art_id = m.get('art_id')
        return self


class UnfreezeDigitalassetartArtAccountResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        art_id: str = None,
        status: int = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 艺术品id
        self.art_id = art_id
        # 解冻是否成功，0表示成功
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.art_id is not None:
            result['art_id'] = self.art_id
        if self.status is not None:
            result['status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('art_id') is not None:
            self.art_id = m.get('art_id')
        if m.get('status') is not None:
            self.status = m.get('status')
        return self


class SetDigitalassetartArtUnissuetoexchangeRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        account_id: str = None,
        art_id: str = None,
        exchange_code: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 管理员账户地址
        self.account_id = account_id
        # 艺术品id
        self.art_id = art_id
        # 交易所代码
        self.exchange_code = exchange_code

    def validate(self):
        self.validate_required(self.account_id, 'account_id')
        self.validate_required(self.art_id, 'art_id')
        self.validate_required(self.exchange_code, 'exchange_code')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.account_id is not None:
            result['account_id'] = self.account_id
        if self.art_id is not None:
            result['art_id'] = self.art_id
        if self.exchange_code is not None:
            result['exchange_code'] = self.exchange_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('account_id') is not None:
            self.account_id = m.get('account_id')
        if m.get('art_id') is not None:
            self.art_id = m.get('art_id')
        if m.get('exchange_code') is not None:
            self.exchange_code = m.get('exchange_code')
        return self


class SetDigitalassetartArtUnissuetoexchangeResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        reason: str = None,
        status: int = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 取消在交易所发布艺术品成功或者失败原因详情
        self.reason = reason
        # 取消在交易发布艺术品调用是否成功
        # 0 表示成功
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.reason is not None:
            result['reason'] = self.reason
        if self.status is not None:
            result['status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('reason') is not None:
            self.reason = m.get('reason')
        if m.get('status') is not None:
            self.status = m.get('status')
        return self


class QueryDigitalassetartArtRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        account_id: str = None,
        art_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 管理员账户
        self.account_id = account_id
        # 艺术品id
        self.art_id = art_id

    def validate(self):
        self.validate_required(self.account_id, 'account_id')
        self.validate_required(self.art_id, 'art_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.account_id is not None:
            result['account_id'] = self.account_id
        if self.art_id is not None:
            result['art_id'] = self.art_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('account_id') is not None:
            self.account_id = m.get('account_id')
        if m.get('art_id') is not None:
            self.art_id = m.get('art_id')
        return self


class QueryDigitalassetartArtResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        art_id: str = None,
        art_name: str = None,
        code: str = None,
        exchanges: List[str] = None,
        identifiers: List[str] = None,
        image_hash: List[str] = None,
        issue_account: str = None,
        issue_date: int = None,
        main_class: str = None,
        owner_id: str = None,
        state: int = None,
        sub_class: str = None,
        vedio_hash: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 艺术品id
        self.art_id = art_id
        # 艺术品名称
        self.art_name = art_name
        # 艺术品代码
        self.code = code
        # 艺术品所在交易所代码
        self.exchanges = exchanges
        # 艺术品鉴定者列表
        self.identifiers = identifiers
        # 艺术品图片哈希
        self.image_hash = image_hash
        # 发行方账户信息
        self.issue_account = issue_account
        # 艺术品在链上发行时间
        self.issue_date = issue_date
        # 艺术品所属主分类
        self.main_class = main_class
        # 艺术品拥有者id
        self.owner_id = owner_id
        # 艺术品状态信息
        # 1未发行
        # 2已发行
        # 3冻结
        # 4回购
        self.state = state
        # 艺术品所属分类次分类
        self.sub_class = sub_class
        # 艺术品视频哈希
        self.vedio_hash = vedio_hash

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.art_id is not None:
            result['art_id'] = self.art_id
        if self.art_name is not None:
            result['art_name'] = self.art_name
        if self.code is not None:
            result['code'] = self.code
        if self.exchanges is not None:
            result['exchanges'] = self.exchanges
        if self.identifiers is not None:
            result['identifiers'] = self.identifiers
        if self.image_hash is not None:
            result['image_hash'] = self.image_hash
        if self.issue_account is not None:
            result['issue_account'] = self.issue_account
        if self.issue_date is not None:
            result['issue_date'] = self.issue_date
        if self.main_class is not None:
            result['main_class'] = self.main_class
        if self.owner_id is not None:
            result['owner_id'] = self.owner_id
        if self.state is not None:
            result['state'] = self.state
        if self.sub_class is not None:
            result['sub_class'] = self.sub_class
        if self.vedio_hash is not None:
            result['vedio_hash'] = self.vedio_hash
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('art_id') is not None:
            self.art_id = m.get('art_id')
        if m.get('art_name') is not None:
            self.art_name = m.get('art_name')
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('exchanges') is not None:
            self.exchanges = m.get('exchanges')
        if m.get('identifiers') is not None:
            self.identifiers = m.get('identifiers')
        if m.get('image_hash') is not None:
            self.image_hash = m.get('image_hash')
        if m.get('issue_account') is not None:
            self.issue_account = m.get('issue_account')
        if m.get('issue_date') is not None:
            self.issue_date = m.get('issue_date')
        if m.get('main_class') is not None:
            self.main_class = m.get('main_class')
        if m.get('owner_id') is not None:
            self.owner_id = m.get('owner_id')
        if m.get('state') is not None:
            self.state = m.get('state')
        if m.get('sub_class') is not None:
            self.sub_class = m.get('sub_class')
        if m.get('vedio_hash') is not None:
            self.vedio_hash = m.get('vedio_hash')
        return self


class CreateDigitalassetExchangeAccountmapRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        exchange_code: str = None,
        phone: str = None,
        user_account: str = None,
        user_name: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 交易所代码
        self.exchange_code = exchange_code
        # 用户联系方式
        self.phone = phone
        # 业务方用户账号
        self.user_account = user_account
        # 业务方用户名称
        self.user_name = user_name

    def validate(self):
        self.validate_required(self.exchange_code, 'exchange_code')
        self.validate_required(self.phone, 'phone')
        self.validate_required(self.user_account, 'user_account')
        self.validate_required(self.user_name, 'user_name')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.exchange_code is not None:
            result['exchange_code'] = self.exchange_code
        if self.phone is not None:
            result['phone'] = self.phone
        if self.user_account is not None:
            result['user_account'] = self.user_account
        if self.user_name is not None:
            result['user_name'] = self.user_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('exchange_code') is not None:
            self.exchange_code = m.get('exchange_code')
        if m.get('phone') is not None:
            self.phone = m.get('phone')
        if m.get('user_account') is not None:
            self.user_account = m.get('user_account')
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        return self


class CreateDigitalassetExchangeAccountmapResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 返回调用结果 正常为 success
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.result is not None:
            result['result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('result') is not None:
            self.result = m.get('result')
        return self


class BatchcreateDigitalassetExchangeAccountmapRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        account_map_params: List[ExchangeAccountMap] = None,
        exchange_code: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 业务方需映射的账户列表
        self.account_map_params = account_map_params
        # 交易所代码
        self.exchange_code = exchange_code

    def validate(self):
        self.validate_required(self.account_map_params, 'account_map_params')
        if self.account_map_params:
            for k in self.account_map_params:
                if k:
                    k.validate()
        self.validate_required(self.exchange_code, 'exchange_code')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        result['account_map_params'] = []
        if self.account_map_params is not None:
            for k in self.account_map_params:
                result['account_map_params'].append(k.to_map() if k else None)
        if self.exchange_code is not None:
            result['exchange_code'] = self.exchange_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        self.account_map_params = []
        if m.get('account_map_params') is not None:
            for k in m.get('account_map_params'):
                temp_model = ExchangeAccountMap()
                self.account_map_params.append(temp_model.from_map(k))
        if m.get('exchange_code') is not None:
            self.exchange_code = m.get('exchange_code')
        return self


class BatchcreateDigitalassetExchangeAccountmapResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        fail_list: List[str] = None,
        fail_num: int = None,
        success_num: int = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 返回失败账户列表
        self.fail_list = fail_list
        # 失败数量
        self.fail_num = fail_num
        # 成功数量
        self.success_num = success_num

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.fail_list is not None:
            result['fail_list'] = self.fail_list
        if self.fail_num is not None:
            result['fail_num'] = self.fail_num
        if self.success_num is not None:
            result['success_num'] = self.success_num
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('fail_list') is not None:
            self.fail_list = m.get('fail_list')
        if m.get('fail_num') is not None:
            self.fail_num = m.get('fail_num')
        if m.get('success_num') is not None:
            self.success_num = m.get('success_num')
        return self


class StartDigitalassetExchangeUnfreezeRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        ep_code: str = None,
        ep_unfreeze_amount: int = None,
        exchange_code: str = None,
        user_account: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 版通代码
        self.ep_code = ep_code
        # 解限数量
        self.ep_unfreeze_amount = ep_unfreeze_amount
        # 交易所代码
        self.exchange_code = exchange_code
        # 业务方用户账户
        self.user_account = user_account

    def validate(self):
        self.validate_required(self.ep_code, 'ep_code')
        self.validate_required(self.ep_unfreeze_amount, 'ep_unfreeze_amount')
        self.validate_required(self.exchange_code, 'exchange_code')
        self.validate_required(self.user_account, 'user_account')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.ep_code is not None:
            result['ep_code'] = self.ep_code
        if self.ep_unfreeze_amount is not None:
            result['ep_unfreeze_amount'] = self.ep_unfreeze_amount
        if self.exchange_code is not None:
            result['exchange_code'] = self.exchange_code
        if self.user_account is not None:
            result['user_account'] = self.user_account
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('ep_code') is not None:
            self.ep_code = m.get('ep_code')
        if m.get('ep_unfreeze_amount') is not None:
            self.ep_unfreeze_amount = m.get('ep_unfreeze_amount')
        if m.get('exchange_code') is not None:
            self.exchange_code = m.get('exchange_code')
        if m.get('user_account') is not None:
            self.user_account = m.get('user_account')
        return self


class StartDigitalassetExchangeUnfreezeResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 操作结果 success 为正常
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.result is not None:
            result['result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('result') is not None:
            self.result = m.get('result')
        return self


class StartDigitalassetExchangeLockpositionRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        ep_code: str = None,
        exchange_code: str = None,
        operate: int = None,
        user_account: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 版通代码
        self.ep_code = ep_code
        # 交易所代码
        self.exchange_code = exchange_code
        # 锁定操作，0为解锁，1为锁定
        self.operate = operate
        # 业务方账户
        self.user_account = user_account

    def validate(self):
        self.validate_required(self.exchange_code, 'exchange_code')
        self.validate_required(self.operate, 'operate')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.ep_code is not None:
            result['ep_code'] = self.ep_code
        if self.exchange_code is not None:
            result['exchange_code'] = self.exchange_code
        if self.operate is not None:
            result['operate'] = self.operate
        if self.user_account is not None:
            result['user_account'] = self.user_account
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('ep_code') is not None:
            self.ep_code = m.get('ep_code')
        if m.get('exchange_code') is not None:
            self.exchange_code = m.get('exchange_code')
        if m.get('operate') is not None:
            self.operate = m.get('operate')
        if m.get('user_account') is not None:
            self.user_account = m.get('user_account')
        return self


class StartDigitalassetExchangeLockpositionResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 操作结果 success 为正常
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.result is not None:
            result['result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('result') is not None:
            self.result = m.get('result')
        return self


class CreateDigitalassetExchangeEpissueRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        ep_anchor: str = None,
        ep_code: str = None,
        ep_first_amount: int = None,
        ep_issue_account: str = None,
        ep_issue_date: int = None,
        ep_name: str = None,
        ep_offline_issue_amount: int = None,
        ep_offline_unfreeze: int = None,
        ep_online_issue_amount: int = None,
        ep_self_amount: int = None,
        ep_self_unfreeze: int = None,
        ep_total_amount: int = None,
        ep_type: str = None,
        exchange_code: str = None,
        extend: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 版通锚定物
        self.ep_anchor = ep_anchor
        # 版通代码
        self.ep_code = ep_code
        # 版通首发量
        self.ep_first_amount = ep_first_amount
        # 版通发行方账户
        self.ep_issue_account = ep_issue_account
        # 版通发行时间戳
        self.ep_issue_date = ep_issue_date
        # 版通名称
        self.ep_name = ep_name
        # 版通线下发行配额
        self.ep_offline_issue_amount = ep_offline_issue_amount
        # 版通线下日解限比例
        self.ep_offline_unfreeze = ep_offline_unfreeze
        # 版通线上发行配额
        self.ep_online_issue_amount = ep_online_issue_amount
        # 发行方版通自持量
        self.ep_self_amount = ep_self_amount
        # 发行方版通日解限比例
        self.ep_self_unfreeze = ep_self_unfreeze
        # 版通发行数量
        self.ep_total_amount = ep_total_amount
        # 版通类型
        self.ep_type = ep_type
        # 交易所代码
        self.exchange_code = exchange_code
        # 预留扩展字段
        self.extend = extend

    def validate(self):
        self.validate_required(self.ep_anchor, 'ep_anchor')
        self.validate_required(self.ep_code, 'ep_code')
        self.validate_required(self.ep_first_amount, 'ep_first_amount')
        self.validate_required(self.ep_issue_account, 'ep_issue_account')
        self.validate_required(self.ep_issue_date, 'ep_issue_date')
        self.validate_required(self.ep_name, 'ep_name')
        self.validate_required(self.ep_offline_issue_amount, 'ep_offline_issue_amount')
        self.validate_required(self.ep_offline_unfreeze, 'ep_offline_unfreeze')
        self.validate_required(self.ep_online_issue_amount, 'ep_online_issue_amount')
        self.validate_required(self.ep_self_amount, 'ep_self_amount')
        self.validate_required(self.ep_self_unfreeze, 'ep_self_unfreeze')
        self.validate_required(self.ep_total_amount, 'ep_total_amount')
        self.validate_required(self.ep_type, 'ep_type')
        self.validate_required(self.exchange_code, 'exchange_code')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.ep_anchor is not None:
            result['ep_anchor'] = self.ep_anchor
        if self.ep_code is not None:
            result['ep_code'] = self.ep_code
        if self.ep_first_amount is not None:
            result['ep_first_amount'] = self.ep_first_amount
        if self.ep_issue_account is not None:
            result['ep_issue_account'] = self.ep_issue_account
        if self.ep_issue_date is not None:
            result['ep_issue_date'] = self.ep_issue_date
        if self.ep_name is not None:
            result['ep_name'] = self.ep_name
        if self.ep_offline_issue_amount is not None:
            result['ep_offline_issue_amount'] = self.ep_offline_issue_amount
        if self.ep_offline_unfreeze is not None:
            result['ep_offline_unfreeze'] = self.ep_offline_unfreeze
        if self.ep_online_issue_amount is not None:
            result['ep_online_issue_amount'] = self.ep_online_issue_amount
        if self.ep_self_amount is not None:
            result['ep_self_amount'] = self.ep_self_amount
        if self.ep_self_unfreeze is not None:
            result['ep_self_unfreeze'] = self.ep_self_unfreeze
        if self.ep_total_amount is not None:
            result['ep_total_amount'] = self.ep_total_amount
        if self.ep_type is not None:
            result['ep_type'] = self.ep_type
        if self.exchange_code is not None:
            result['exchange_code'] = self.exchange_code
        if self.extend is not None:
            result['extend'] = self.extend
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('ep_anchor') is not None:
            self.ep_anchor = m.get('ep_anchor')
        if m.get('ep_code') is not None:
            self.ep_code = m.get('ep_code')
        if m.get('ep_first_amount') is not None:
            self.ep_first_amount = m.get('ep_first_amount')
        if m.get('ep_issue_account') is not None:
            self.ep_issue_account = m.get('ep_issue_account')
        if m.get('ep_issue_date') is not None:
            self.ep_issue_date = m.get('ep_issue_date')
        if m.get('ep_name') is not None:
            self.ep_name = m.get('ep_name')
        if m.get('ep_offline_issue_amount') is not None:
            self.ep_offline_issue_amount = m.get('ep_offline_issue_amount')
        if m.get('ep_offline_unfreeze') is not None:
            self.ep_offline_unfreeze = m.get('ep_offline_unfreeze')
        if m.get('ep_online_issue_amount') is not None:
            self.ep_online_issue_amount = m.get('ep_online_issue_amount')
        if m.get('ep_self_amount') is not None:
            self.ep_self_amount = m.get('ep_self_amount')
        if m.get('ep_self_unfreeze') is not None:
            self.ep_self_unfreeze = m.get('ep_self_unfreeze')
        if m.get('ep_total_amount') is not None:
            self.ep_total_amount = m.get('ep_total_amount')
        if m.get('ep_type') is not None:
            self.ep_type = m.get('ep_type')
        if m.get('exchange_code') is not None:
            self.exchange_code = m.get('exchange_code')
        if m.get('extend') is not None:
            self.extend = m.get('extend')
        return self


class CreateDigitalassetExchangeEpissueResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 操作结果 success 为成功
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.result is not None:
            result['result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('result') is not None:
            self.result = m.get('result')
        return self


class CreateDigitalassetExchangeEpstockissueRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        ep_code: str = None,
        ep_issue_account: str = None,
        ep_offline_issue_amount: int = None,
        ep_online_issue_amount: int = None,
        ep_self_issue_amount: int = None,
        exchange_code: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 版通代码
        self.ep_code = ep_code
        # 版通发行方账户
        self.ep_issue_account = ep_issue_account
        # 版通存量发行线下量
        self.ep_offline_issue_amount = ep_offline_issue_amount
        # 版通存量发行线上量
        self.ep_online_issue_amount = ep_online_issue_amount
        # 版通存量发行自持量
        self.ep_self_issue_amount = ep_self_issue_amount
        # 交易所代码
        self.exchange_code = exchange_code

    def validate(self):
        self.validate_required(self.ep_code, 'ep_code')
        self.validate_required(self.ep_issue_account, 'ep_issue_account')
        self.validate_required(self.ep_offline_issue_amount, 'ep_offline_issue_amount')
        self.validate_required(self.ep_online_issue_amount, 'ep_online_issue_amount')
        self.validate_required(self.ep_self_issue_amount, 'ep_self_issue_amount')
        self.validate_required(self.exchange_code, 'exchange_code')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.ep_code is not None:
            result['ep_code'] = self.ep_code
        if self.ep_issue_account is not None:
            result['ep_issue_account'] = self.ep_issue_account
        if self.ep_offline_issue_amount is not None:
            result['ep_offline_issue_amount'] = self.ep_offline_issue_amount
        if self.ep_online_issue_amount is not None:
            result['ep_online_issue_amount'] = self.ep_online_issue_amount
        if self.ep_self_issue_amount is not None:
            result['ep_self_issue_amount'] = self.ep_self_issue_amount
        if self.exchange_code is not None:
            result['exchange_code'] = self.exchange_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('ep_code') is not None:
            self.ep_code = m.get('ep_code')
        if m.get('ep_issue_account') is not None:
            self.ep_issue_account = m.get('ep_issue_account')
        if m.get('ep_offline_issue_amount') is not None:
            self.ep_offline_issue_amount = m.get('ep_offline_issue_amount')
        if m.get('ep_online_issue_amount') is not None:
            self.ep_online_issue_amount = m.get('ep_online_issue_amount')
        if m.get('ep_self_issue_amount') is not None:
            self.ep_self_issue_amount = m.get('ep_self_issue_amount')
        if m.get('exchange_code') is not None:
            self.exchange_code = m.get('exchange_code')
        return self


class CreateDigitalassetExchangeEpstockissueResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 操作结果 success 为成功
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.result is not None:
            result['result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('result') is not None:
            self.result = m.get('result')
        return self


class StartDigitalassetExchangeEpwholesaleRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        account_list: List[AccountWholesaleParam] = None,
        ep_code: str = None,
        ep_issue_account: str = None,
        exchange_code: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 批发账户信息列表
        self.account_list = account_list
        # 版通代码
        self.ep_code = ep_code
        # 版通发行方账户
        self.ep_issue_account = ep_issue_account
        # 交易所代码
        self.exchange_code = exchange_code

    def validate(self):
        self.validate_required(self.account_list, 'account_list')
        if self.account_list:
            for k in self.account_list:
                if k:
                    k.validate()
        self.validate_required(self.ep_code, 'ep_code')
        self.validate_required(self.ep_issue_account, 'ep_issue_account')
        self.validate_required(self.exchange_code, 'exchange_code')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        result['account_list'] = []
        if self.account_list is not None:
            for k in self.account_list:
                result['account_list'].append(k.to_map() if k else None)
        if self.ep_code is not None:
            result['ep_code'] = self.ep_code
        if self.ep_issue_account is not None:
            result['ep_issue_account'] = self.ep_issue_account
        if self.exchange_code is not None:
            result['exchange_code'] = self.exchange_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        self.account_list = []
        if m.get('account_list') is not None:
            for k in m.get('account_list'):
                temp_model = AccountWholesaleParam()
                self.account_list.append(temp_model.from_map(k))
        if m.get('ep_code') is not None:
            self.ep_code = m.get('ep_code')
        if m.get('ep_issue_account') is not None:
            self.ep_issue_account = m.get('ep_issue_account')
        if m.get('exchange_code') is not None:
            self.exchange_code = m.get('exchange_code')
        return self


class StartDigitalassetExchangeEpwholesaleResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        fail_list: List[str] = None,
        reason: int = None,
        success_list: List[str] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 失败账户列表
        self.fail_list = fail_list
        # 失败原因 0:成功 1:执行失败 2:线下配额数量不足
        self.reason = reason
        # 成功账户列表
        self.success_list = success_list

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.fail_list is not None:
            result['fail_list'] = self.fail_list
        if self.reason is not None:
            result['reason'] = self.reason
        if self.success_list is not None:
            result['success_list'] = self.success_list
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('fail_list') is not None:
            self.fail_list = m.get('fail_list')
        if m.get('reason') is not None:
            self.reason = m.get('reason')
        if m.get('success_list') is not None:
            self.success_list = m.get('success_list')
        return self


class QueryDigitalassetExchangeEpinfoRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        ep_code: str = None,
        exchange_code: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 版通代码
        self.ep_code = ep_code
        # 交易所代码
        self.exchange_code = exchange_code

    def validate(self):
        self.validate_required(self.ep_code, 'ep_code')
        self.validate_required(self.exchange_code, 'exchange_code')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.ep_code is not None:
            result['ep_code'] = self.ep_code
        if self.exchange_code is not None:
            result['exchange_code'] = self.exchange_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('ep_code') is not None:
            self.ep_code = m.get('ep_code')
        if m.get('exchange_code') is not None:
            self.exchange_code = m.get('exchange_code')
        return self


class QueryDigitalassetExchangeEpinfoResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        ep_anchor: str = None,
        ep_code: str = None,
        ep_first_amount: int = None,
        ep_issue_account: str = None,
        ep_issue_date: int = None,
        ep_issue_history: List[EPIssueHisInfo] = None,
        ep_name: str = None,
        ep_offline_issue_amount: int = None,
        ep_offline_unfreeze: int = None,
        ep_online_issue_amount: int = None,
        ep_self_amount: int = None,
        ep_self_unfreeze: int = None,
        ep_status: int = None,
        ep_total_amount: int = None,
        ep_type: str = None,
        extend: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 版通锚定物
        self.ep_anchor = ep_anchor
        # 版通代码
        self.ep_code = ep_code
        # 版通首发量
        self.ep_first_amount = ep_first_amount
        # 版通发行方账户
        self.ep_issue_account = ep_issue_account
        # 版通发行日时间戳
        self.ep_issue_date = ep_issue_date
        # 版通历史发行记录
        self.ep_issue_history = ep_issue_history
        # 版通名称
        self.ep_name = ep_name
        # 版通线下发行量
        self.ep_offline_issue_amount = ep_offline_issue_amount
        # 版通线下日解限量
        self.ep_offline_unfreeze = ep_offline_unfreeze
        # 版通线上发行量
        self.ep_online_issue_amount = ep_online_issue_amount
        # 版通发行方自持量
        self.ep_self_amount = ep_self_amount
        # 版通自持日解限量
        self.ep_self_unfreeze = ep_self_unfreeze
        # 版通状态 0:正常 1:锁定
        self.ep_status = ep_status
        # 版通总发行量
        self.ep_total_amount = ep_total_amount
        # 版通类型
        self.ep_type = ep_type
        # 扩展字段
        self.extend = extend

    def validate(self):
        if self.ep_issue_history:
            for k in self.ep_issue_history:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.ep_anchor is not None:
            result['ep_anchor'] = self.ep_anchor
        if self.ep_code is not None:
            result['ep_code'] = self.ep_code
        if self.ep_first_amount is not None:
            result['ep_first_amount'] = self.ep_first_amount
        if self.ep_issue_account is not None:
            result['ep_issue_account'] = self.ep_issue_account
        if self.ep_issue_date is not None:
            result['ep_issue_date'] = self.ep_issue_date
        result['ep_issue_history'] = []
        if self.ep_issue_history is not None:
            for k in self.ep_issue_history:
                result['ep_issue_history'].append(k.to_map() if k else None)
        if self.ep_name is not None:
            result['ep_name'] = self.ep_name
        if self.ep_offline_issue_amount is not None:
            result['ep_offline_issue_amount'] = self.ep_offline_issue_amount
        if self.ep_offline_unfreeze is not None:
            result['ep_offline_unfreeze'] = self.ep_offline_unfreeze
        if self.ep_online_issue_amount is not None:
            result['ep_online_issue_amount'] = self.ep_online_issue_amount
        if self.ep_self_amount is not None:
            result['ep_self_amount'] = self.ep_self_amount
        if self.ep_self_unfreeze is not None:
            result['ep_self_unfreeze'] = self.ep_self_unfreeze
        if self.ep_status is not None:
            result['ep_status'] = self.ep_status
        if self.ep_total_amount is not None:
            result['ep_total_amount'] = self.ep_total_amount
        if self.ep_type is not None:
            result['ep_type'] = self.ep_type
        if self.extend is not None:
            result['extend'] = self.extend
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('ep_anchor') is not None:
            self.ep_anchor = m.get('ep_anchor')
        if m.get('ep_code') is not None:
            self.ep_code = m.get('ep_code')
        if m.get('ep_first_amount') is not None:
            self.ep_first_amount = m.get('ep_first_amount')
        if m.get('ep_issue_account') is not None:
            self.ep_issue_account = m.get('ep_issue_account')
        if m.get('ep_issue_date') is not None:
            self.ep_issue_date = m.get('ep_issue_date')
        self.ep_issue_history = []
        if m.get('ep_issue_history') is not None:
            for k in m.get('ep_issue_history'):
                temp_model = EPIssueHisInfo()
                self.ep_issue_history.append(temp_model.from_map(k))
        if m.get('ep_name') is not None:
            self.ep_name = m.get('ep_name')
        if m.get('ep_offline_issue_amount') is not None:
            self.ep_offline_issue_amount = m.get('ep_offline_issue_amount')
        if m.get('ep_offline_unfreeze') is not None:
            self.ep_offline_unfreeze = m.get('ep_offline_unfreeze')
        if m.get('ep_online_issue_amount') is not None:
            self.ep_online_issue_amount = m.get('ep_online_issue_amount')
        if m.get('ep_self_amount') is not None:
            self.ep_self_amount = m.get('ep_self_amount')
        if m.get('ep_self_unfreeze') is not None:
            self.ep_self_unfreeze = m.get('ep_self_unfreeze')
        if m.get('ep_status') is not None:
            self.ep_status = m.get('ep_status')
        if m.get('ep_total_amount') is not None:
            self.ep_total_amount = m.get('ep_total_amount')
        if m.get('ep_type') is not None:
            self.ep_type = m.get('ep_type')
        if m.get('extend') is not None:
            self.extend = m.get('extend')
        return self


class QueryDigitalassetExchangeEptradeRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        end_date: str = None,
        ep_code: str = None,
        exchange_code: str = None,
        page_num: int = None,
        page_size: int = None,
        start_date: str = None,
        user_account: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 查询截止时间
        self.end_date = end_date
        # 版通代码 （版通代码与用户账户至少选一个）
        self.ep_code = ep_code
        # 交易所代码
        self.exchange_code = exchange_code
        # 页数 从1开始
        self.page_num = page_num
        # 每页显示数量
        self.page_size = page_size
        # 查询起始时间
        self.start_date = start_date
        # 用户账户 （版通代码与用户账户至少选一个）
        self.user_account = user_account

    def validate(self):
        self.validate_required(self.end_date, 'end_date')
        self.validate_required(self.exchange_code, 'exchange_code')
        self.validate_required(self.page_num, 'page_num')
        self.validate_required(self.page_size, 'page_size')
        self.validate_required(self.start_date, 'start_date')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.end_date is not None:
            result['end_date'] = self.end_date
        if self.ep_code is not None:
            result['ep_code'] = self.ep_code
        if self.exchange_code is not None:
            result['exchange_code'] = self.exchange_code
        if self.page_num is not None:
            result['page_num'] = self.page_num
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.start_date is not None:
            result['start_date'] = self.start_date
        if self.user_account is not None:
            result['user_account'] = self.user_account
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('end_date') is not None:
            self.end_date = m.get('end_date')
        if m.get('ep_code') is not None:
            self.ep_code = m.get('ep_code')
        if m.get('exchange_code') is not None:
            self.exchange_code = m.get('exchange_code')
        if m.get('page_num') is not None:
            self.page_num = m.get('page_num')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('start_date') is not None:
            self.start_date = m.get('start_date')
        if m.get('user_account') is not None:
            self.user_account = m.get('user_account')
        return self


class QueryDigitalassetExchangeEptradeResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        page_num: int = None,
        page_size: int = None,
        total_count: int = None,
        tx_infos: List[EPTradeInfo] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 页数 从1开始
        self.page_num = page_num
        # 每页显示数量
        self.page_size = page_size
        # 数据总量
        self.total_count = total_count
        # 交易信息列表
        self.tx_infos = tx_infos

    def validate(self):
        if self.tx_infos:
            for k in self.tx_infos:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.page_num is not None:
            result['page_num'] = self.page_num
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.total_count is not None:
            result['total_count'] = self.total_count
        result['tx_infos'] = []
        if self.tx_infos is not None:
            for k in self.tx_infos:
                result['tx_infos'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('page_num') is not None:
            self.page_num = m.get('page_num')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('total_count') is not None:
            self.total_count = m.get('total_count')
        self.tx_infos = []
        if m.get('tx_infos') is not None:
            for k in m.get('tx_infos'):
                temp_model = EPTradeInfo()
                self.tx_infos.append(temp_model.from_map(k))
        return self


class QueryDigitalassetExchangeEpaccountRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        exchange_code: str = None,
        user_account: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 交易所代码
        self.exchange_code = exchange_code
        # 用户账户
        self.user_account = user_account

    def validate(self):
        self.validate_required(self.exchange_code, 'exchange_code')
        self.validate_required(self.user_account, 'user_account')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.exchange_code is not None:
            result['exchange_code'] = self.exchange_code
        if self.user_account is not None:
            result['user_account'] = self.user_account
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('exchange_code') is not None:
            self.exchange_code = m.get('exchange_code')
        if m.get('user_account') is not None:
            self.user_account = m.get('user_account')
        return self


class QueryDigitalassetExchangeEpaccountResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        account_status: int = None,
        buyback_accounts: List[AccountInfo] = None,
        constrained_accounts: List[AccountInfo] = None,
        trade_accounts: List[AccountInfo] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 账户状态 0:正常 1:锁定
        self.account_status = account_status
        # 版通回购账户信息
        self.buyback_accounts = buyback_accounts
        # 版通限制交易账户信息
        self.constrained_accounts = constrained_accounts
        # 版通可交易账户信息
        self.trade_accounts = trade_accounts

    def validate(self):
        if self.buyback_accounts:
            for k in self.buyback_accounts:
                if k:
                    k.validate()
        if self.constrained_accounts:
            for k in self.constrained_accounts:
                if k:
                    k.validate()
        if self.trade_accounts:
            for k in self.trade_accounts:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.account_status is not None:
            result['account_status'] = self.account_status
        result['buyback_accounts'] = []
        if self.buyback_accounts is not None:
            for k in self.buyback_accounts:
                result['buyback_accounts'].append(k.to_map() if k else None)
        result['constrained_accounts'] = []
        if self.constrained_accounts is not None:
            for k in self.constrained_accounts:
                result['constrained_accounts'].append(k.to_map() if k else None)
        result['trade_accounts'] = []
        if self.trade_accounts is not None:
            for k in self.trade_accounts:
                result['trade_accounts'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('account_status') is not None:
            self.account_status = m.get('account_status')
        self.buyback_accounts = []
        if m.get('buyback_accounts') is not None:
            for k in m.get('buyback_accounts'):
                temp_model = AccountInfo()
                self.buyback_accounts.append(temp_model.from_map(k))
        self.constrained_accounts = []
        if m.get('constrained_accounts') is not None:
            for k in m.get('constrained_accounts'):
                temp_model = AccountInfo()
                self.constrained_accounts.append(temp_model.from_map(k))
        self.trade_accounts = []
        if m.get('trade_accounts') is not None:
            for k in m.get('trade_accounts'):
                temp_model = AccountInfo()
                self.trade_accounts.append(temp_model.from_map(k))
        return self


class StartDigitalassetExchangeEptradeRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        ep_amount: int = None,
        ep_code: str = None,
        exchange_code: str = None,
        from_account: str = None,
        to_account: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 交易数量
        self.ep_amount = ep_amount
        # 版通代码
        self.ep_code = ep_code
        # 交易所代码
        self.exchange_code = exchange_code
        # 卖方账户
        self.from_account = from_account
        # 买方账户
        self.to_account = to_account

    def validate(self):
        self.validate_required(self.ep_amount, 'ep_amount')
        self.validate_required(self.ep_code, 'ep_code')
        self.validate_required(self.exchange_code, 'exchange_code')
        self.validate_required(self.from_account, 'from_account')
        self.validate_required(self.to_account, 'to_account')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.ep_amount is not None:
            result['ep_amount'] = self.ep_amount
        if self.ep_code is not None:
            result['ep_code'] = self.ep_code
        if self.exchange_code is not None:
            result['exchange_code'] = self.exchange_code
        if self.from_account is not None:
            result['from_account'] = self.from_account
        if self.to_account is not None:
            result['to_account'] = self.to_account
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('ep_amount') is not None:
            self.ep_amount = m.get('ep_amount')
        if m.get('ep_code') is not None:
            self.ep_code = m.get('ep_code')
        if m.get('exchange_code') is not None:
            self.exchange_code = m.get('exchange_code')
        if m.get('from_account') is not None:
            self.from_account = m.get('from_account')
        if m.get('to_account') is not None:
            self.to_account = m.get('to_account')
        return self


class StartDigitalassetExchangeEptradeResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        tx_code: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 交易号
        self.tx_code = tx_code

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.tx_code is not None:
            result['tx_code'] = self.tx_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('tx_code') is not None:
            self.tx_code = m.get('tx_code')
        return self


class StartDigitalassetExchangeEpbuybackRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        ep_amount: int = None,
        ep_code: str = None,
        exchange_code: str = None,
        user_account: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 版通回购数量
        self.ep_amount = ep_amount
        # 版通代码
        self.ep_code = ep_code
        # 交易所代码
        self.exchange_code = exchange_code
        # 用户账户
        self.user_account = user_account

    def validate(self):
        self.validate_required(self.ep_amount, 'ep_amount')
        self.validate_required(self.ep_code, 'ep_code')
        self.validate_required(self.exchange_code, 'exchange_code')
        self.validate_required(self.user_account, 'user_account')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.ep_amount is not None:
            result['ep_amount'] = self.ep_amount
        if self.ep_code is not None:
            result['ep_code'] = self.ep_code
        if self.exchange_code is not None:
            result['exchange_code'] = self.exchange_code
        if self.user_account is not None:
            result['user_account'] = self.user_account
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('ep_amount') is not None:
            self.ep_amount = m.get('ep_amount')
        if m.get('ep_code') is not None:
            self.ep_code = m.get('ep_code')
        if m.get('exchange_code') is not None:
            self.exchange_code = m.get('exchange_code')
        if m.get('user_account') is not None:
            self.user_account = m.get('user_account')
        return self


class StartDigitalassetExchangeEpbuybackResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 操作结果 success 为成功
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.result is not None:
            result['result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('result') is not None:
            self.result = m.get('result')
        return self


class CreateDistributionUserRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        identity: str = None,
        info: str = None,
        mobile: str = None,
        source: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 用户在ISV中的唯一标识
        self.identity = identity
        # 其他说明
        self.info = info
        # 用户手机号码
        self.mobile = mobile
        # 来源: 微信朋友圈/微信小程序/支付宝小程序/H5/商户自有APP/其他
        self.source = source

    def validate(self):
        self.validate_required(self.identity, 'identity')
        self.validate_required(self.mobile, 'mobile')
        self.validate_required(self.source, 'source')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.identity is not None:
            result['identity'] = self.identity
        if self.info is not None:
            result['info'] = self.info
        if self.mobile is not None:
            result['mobile'] = self.mobile
        if self.source is not None:
            result['source'] = self.source
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('identity') is not None:
            self.identity = m.get('identity')
        if m.get('info') is not None:
            self.info = m.get('info')
        if m.get('mobile') is not None:
            self.mobile = m.get('mobile')
        if m.get('source') is not None:
            self.source = m.get('source')
        return self


class CreateDistributionUserResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        create_time: str = None,
        user_id: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 用户创建时间
        self.create_time = create_time
        # 用户唯一标示
        self.user_id = user_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.create_time is not None:
            result['create_time'] = self.create_time
        if self.user_id is not None:
            result['user_id'] = self.user_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('create_time') is not None:
            self.create_time = m.get('create_time')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        return self


class QueryDistributionUserTeamRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        item_id: str = None,
        page_num: int = None,
        page_size: int = None,
        shop_id: str = None,
        user_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 商品唯一标识
        self.item_id = item_id
        # 分页查询当前页号，默认值1
        self.page_num = page_num
        # 分页查询当前页大小，默认值20
        self.page_size = page_size
        # 商户唯一标识
        self.shop_id = shop_id
        # 用户唯一标识
        self.user_id = user_id

    def validate(self):
        self.validate_required(self.shop_id, 'shop_id')
        self.validate_required(self.user_id, 'user_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.item_id is not None:
            result['item_id'] = self.item_id
        if self.page_num is not None:
            result['page_num'] = self.page_num
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.shop_id is not None:
            result['shop_id'] = self.shop_id
        if self.user_id is not None:
            result['user_id'] = self.user_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('item_id') is not None:
            self.item_id = m.get('item_id')
        if m.get('page_num') is not None:
            self.page_num = m.get('page_num')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('shop_id') is not None:
            self.shop_id = m.get('shop_id')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        return self


class QueryDistributionUserTeamResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        members: List[DistributionUser] = None,
        member_num: int = None,
        one_level_member_num: int = None,
        page_num: int = None,
        page_size: int = None,
        two_level_member_num: int = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 一级会员信息
        self.members = members
        # 下级用户总数
        self.member_num = member_num
        # 一级会员数
        self.one_level_member_num = one_level_member_num
        # 分页查询当前页号
        self.page_num = page_num
        # 分页查询当前页大小
        self.page_size = page_size
        # 二级会员数
        self.two_level_member_num = two_level_member_num

    def validate(self):
        if self.members:
            for k in self.members:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['members'] = []
        if self.members is not None:
            for k in self.members:
                result['members'].append(k.to_map() if k else None)
        if self.member_num is not None:
            result['member_num'] = self.member_num
        if self.one_level_member_num is not None:
            result['one_level_member_num'] = self.one_level_member_num
        if self.page_num is not None:
            result['page_num'] = self.page_num
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.two_level_member_num is not None:
            result['two_level_member_num'] = self.two_level_member_num
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.members = []
        if m.get('members') is not None:
            for k in m.get('members'):
                temp_model = DistributionUser()
                self.members.append(temp_model.from_map(k))
        if m.get('member_num') is not None:
            self.member_num = m.get('member_num')
        if m.get('one_level_member_num') is not None:
            self.one_level_member_num = m.get('one_level_member_num')
        if m.get('page_num') is not None:
            self.page_num = m.get('page_num')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('two_level_member_num') is not None:
            self.two_level_member_num = m.get('two_level_member_num')
        return self


class CreateDistributionShopRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        identity: str = None,
        info: str = None,
        name: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 商户在ISV中的标识
        self.identity = identity
        # 其他说明
        self.info = info
        # 商户名称
        self.name = name

    def validate(self):
        self.validate_required(self.identity, 'identity')
        self.validate_required(self.name, 'name')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.identity is not None:
            result['identity'] = self.identity
        if self.info is not None:
            result['info'] = self.info
        if self.name is not None:
            result['name'] = self.name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('identity') is not None:
            self.identity = m.get('identity')
        if m.get('info') is not None:
            self.info = m.get('info')
        if m.get('name') is not None:
            self.name = m.get('name')
        return self


class CreateDistributionShopResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        admin_user_id: str = None,
        create_time: str = None,
        shop_id: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 商户管理员唯一标识
        self.admin_user_id = admin_user_id
        # 商户创建时间
        self.create_time = create_time
        # 商户唯一标识
        self.shop_id = shop_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.admin_user_id is not None:
            result['admin_user_id'] = self.admin_user_id
        if self.create_time is not None:
            result['create_time'] = self.create_time
        if self.shop_id is not None:
            result['shop_id'] = self.shop_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('admin_user_id') is not None:
            self.admin_user_id = m.get('admin_user_id')
        if m.get('create_time') is not None:
            self.create_time = m.get('create_time')
        if m.get('shop_id') is not None:
            self.shop_id = m.get('shop_id')
        return self


class CreateDistributionUserRelationRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        from_user_id: str = None,
        item_id: str = None,
        shop_id: str = None,
        source: str = None,
        user_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 上级用户唯一标识
        self.from_user_id = from_user_id
        # 商品唯一标识
        self.item_id = item_id
        # 商户唯一标识
        self.shop_id = shop_id
        # 来源，微信朋友圈/微信小程序/支付宝小程序/H5/商户自有APP/其他
        self.source = source
        # 用户唯一标识
        self.user_id = user_id

    def validate(self):
        self.validate_required(self.shop_id, 'shop_id')
        self.validate_required(self.source, 'source')
        self.validate_required(self.user_id, 'user_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.from_user_id is not None:
            result['from_user_id'] = self.from_user_id
        if self.item_id is not None:
            result['item_id'] = self.item_id
        if self.shop_id is not None:
            result['shop_id'] = self.shop_id
        if self.source is not None:
            result['source'] = self.source
        if self.user_id is not None:
            result['user_id'] = self.user_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('from_user_id') is not None:
            self.from_user_id = m.get('from_user_id')
        if m.get('item_id') is not None:
            self.item_id = m.get('item_id')
        if m.get('shop_id') is not None:
            self.shop_id = m.get('shop_id')
        if m.get('source') is not None:
            self.source = m.get('source')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        return self


class CreateDistributionUserRelationResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        tx_hash: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 区块链交易hash
        self.tx_hash = tx_hash

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.tx_hash is not None:
            result['tx_hash'] = self.tx_hash
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('tx_hash') is not None:
            self.tx_hash = m.get('tx_hash')
        return self


class InitDistributionContractRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        name: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 初始化合约名称
        self.name = name

    def validate(self):
        self.validate_required(self.name, 'name')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.name is not None:
            result['name'] = self.name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('name') is not None:
            self.name = m.get('name')
        return self


class InitDistributionContractResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        tx_hash: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 合约链上地址
        self.tx_hash = tx_hash

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.tx_hash is not None:
            result['tx_hash'] = self.tx_hash
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('tx_hash') is not None:
            self.tx_hash = m.get('tx_hash')
        return self


class CreateDistributionProductItemRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        distribution_rate: str = None,
        enable_date: str = None,
        line_price: str = None,
        product_id: str = None,
        product_img: str = None,
        product_info: str = None,
        product_name: str = None,
        product_price: str = None,
        product_type: str = None,
        shop_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 分销比例  10 表示 10%\
        self.distribution_rate = distribution_rate
        # 上架时间戳
        self.enable_date = enable_date
        # 划线价格
        self.line_price = line_price
        # 商品id
        self.product_id = product_id
        # 商品封面图片url
        self.product_img = product_img
        # 商品信息
        self.product_info = product_info
        # 商品名称
        self.product_name = product_name
        # 商品价格
        self.product_price = product_price
        # 商品类型
        self.product_type = product_type
        # 商户id
        self.shop_id = shop_id

    def validate(self):
        self.validate_required(self.distribution_rate, 'distribution_rate')
        self.validate_required(self.enable_date, 'enable_date')
        self.validate_required(self.line_price, 'line_price')
        self.validate_required(self.product_id, 'product_id')
        self.validate_required(self.product_img, 'product_img')
        self.validate_required(self.product_info, 'product_info')
        self.validate_required(self.product_name, 'product_name')
        self.validate_required(self.product_price, 'product_price')
        self.validate_required(self.product_type, 'product_type')
        self.validate_required(self.shop_id, 'shop_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.distribution_rate is not None:
            result['distribution_rate'] = self.distribution_rate
        if self.enable_date is not None:
            result['enable_date'] = self.enable_date
        if self.line_price is not None:
            result['line_price'] = self.line_price
        if self.product_id is not None:
            result['product_id'] = self.product_id
        if self.product_img is not None:
            result['product_img'] = self.product_img
        if self.product_info is not None:
            result['product_info'] = self.product_info
        if self.product_name is not None:
            result['product_name'] = self.product_name
        if self.product_price is not None:
            result['product_price'] = self.product_price
        if self.product_type is not None:
            result['product_type'] = self.product_type
        if self.shop_id is not None:
            result['shop_id'] = self.shop_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('distribution_rate') is not None:
            self.distribution_rate = m.get('distribution_rate')
        if m.get('enable_date') is not None:
            self.enable_date = m.get('enable_date')
        if m.get('line_price') is not None:
            self.line_price = m.get('line_price')
        if m.get('product_id') is not None:
            self.product_id = m.get('product_id')
        if m.get('product_img') is not None:
            self.product_img = m.get('product_img')
        if m.get('product_info') is not None:
            self.product_info = m.get('product_info')
        if m.get('product_name') is not None:
            self.product_name = m.get('product_name')
        if m.get('product_price') is not None:
            self.product_price = m.get('product_price')
        if m.get('product_type') is not None:
            self.product_type = m.get('product_type')
        if m.get('shop_id') is not None:
            self.shop_id = m.get('shop_id')
        return self


class CreateDistributionProductItemResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        product_id: str = None,
        shop_id: str = None,
        tx_hash: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 商品id
        self.product_id = product_id
        # 商户id
        self.shop_id = shop_id
        # 链上地址
        self.tx_hash = tx_hash

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.product_id is not None:
            result['product_id'] = self.product_id
        if self.shop_id is not None:
            result['shop_id'] = self.shop_id
        if self.tx_hash is not None:
            result['tx_hash'] = self.tx_hash
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('product_id') is not None:
            self.product_id = m.get('product_id')
        if m.get('shop_id') is not None:
            self.shop_id = m.get('shop_id')
        if m.get('tx_hash') is not None:
            self.tx_hash = m.get('tx_hash')
        return self


class QueryDistributionProductItemRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        product_id: str = None,
        shop_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 商品id
        self.product_id = product_id
        # 商户id
        self.shop_id = shop_id

    def validate(self):
        self.validate_required(self.shop_id, 'shop_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.product_id is not None:
            result['product_id'] = self.product_id
        if self.shop_id is not None:
            result['shop_id'] = self.shop_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('product_id') is not None:
            self.product_id = m.get('product_id')
        if m.get('shop_id') is not None:
            self.shop_id = m.get('shop_id')
        return self


class QueryDistributionProductItemResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        products: List[ItemDto] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 商品列表
        self.products = products

    def validate(self):
        if self.products:
            for k in self.products:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['products'] = []
        if self.products is not None:
            for k in self.products:
                result['products'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.products = []
        if m.get('products') is not None:
            for k in m.get('products'):
                temp_model = ItemDto()
                self.products.append(temp_model.from_map(k))
        return self


class UpdateDistributionFundPromoterRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        balance: str = None,
        promoter_id: str = None,
        settle_quota: str = None,
        shop_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 可提现余额
        self.balance = balance
        # 推广人id
        self.promoter_id = promoter_id
        # 待结算
        self.settle_quota = settle_quota
        # 商户id
        self.shop_id = shop_id

    def validate(self):
        self.validate_required(self.balance, 'balance')
        self.validate_required(self.promoter_id, 'promoter_id')
        self.validate_required(self.settle_quota, 'settle_quota')
        self.validate_required(self.shop_id, 'shop_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.balance is not None:
            result['balance'] = self.balance
        if self.promoter_id is not None:
            result['promoter_id'] = self.promoter_id
        if self.settle_quota is not None:
            result['settle_quota'] = self.settle_quota
        if self.shop_id is not None:
            result['shop_id'] = self.shop_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('balance') is not None:
            self.balance = m.get('balance')
        if m.get('promoter_id') is not None:
            self.promoter_id = m.get('promoter_id')
        if m.get('settle_quota') is not None:
            self.settle_quota = m.get('settle_quota')
        if m.get('shop_id') is not None:
            self.shop_id = m.get('shop_id')
        return self


class UpdateDistributionFundPromoterResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        tx_hash: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 链上地址
        self.tx_hash = tx_hash

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.tx_hash is not None:
            result['tx_hash'] = self.tx_hash
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('tx_hash') is not None:
            self.tx_hash = m.get('tx_hash')
        return self


class UpdateDistributionFundShopRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        approve_quota: str = None,
        balance: str = None,
        finish_quota: str = None,
        shop_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 审批中额度
        self.approve_quota = approve_quota
        # 可提现余额
        self.balance = balance
        # 已到账额度
        self.finish_quota = finish_quota
        # 商户id
        self.shop_id = shop_id

    def validate(self):
        self.validate_required(self.approve_quota, 'approve_quota')
        self.validate_required(self.balance, 'balance')
        self.validate_required(self.finish_quota, 'finish_quota')
        self.validate_required(self.shop_id, 'shop_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.approve_quota is not None:
            result['approve_quota'] = self.approve_quota
        if self.balance is not None:
            result['balance'] = self.balance
        if self.finish_quota is not None:
            result['finish_quota'] = self.finish_quota
        if self.shop_id is not None:
            result['shop_id'] = self.shop_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('approve_quota') is not None:
            self.approve_quota = m.get('approve_quota')
        if m.get('balance') is not None:
            self.balance = m.get('balance')
        if m.get('finish_quota') is not None:
            self.finish_quota = m.get('finish_quota')
        if m.get('shop_id') is not None:
            self.shop_id = m.get('shop_id')
        return self


class UpdateDistributionFundShopResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        tx_hash: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 链上地址
        self.tx_hash = tx_hash

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.tx_hash is not None:
            result['tx_hash'] = self.tx_hash
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('tx_hash') is not None:
            self.tx_hash = m.get('tx_hash')
        return self


class QueryDistributionFundPromoterRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        page_num: int = None,
        page_size: int = None,
        promoter_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 分页号
        self.page_num = page_num
        # 分页显示条数
        self.page_size = page_size
        # 推广人id
        self.promoter_id = promoter_id

    def validate(self):
        self.validate_required(self.page_num, 'page_num')
        self.validate_required(self.page_size, 'page_size')
        self.validate_required(self.promoter_id, 'promoter_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.page_num is not None:
            result['page_num'] = self.page_num
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.promoter_id is not None:
            result['promoter_id'] = self.promoter_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('page_num') is not None:
            self.page_num = m.get('page_num')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('promoter_id') is not None:
            self.promoter_id = m.get('promoter_id')
        return self


class QueryDistributionFundPromoterResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        fund_list: List[FundInfo] = None,
        page_num: int = None,
        page_size: int = None,
        promoter_id: str = None,
        total_count: int = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 推广人账户列表
        self.fund_list = fund_list
        # 分页号
        self.page_num = page_num
        # 分页显示条数
        self.page_size = page_size
        # 推广人id
        self.promoter_id = promoter_id
        # 总量
        self.total_count = total_count

    def validate(self):
        if self.fund_list:
            for k in self.fund_list:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['fund_list'] = []
        if self.fund_list is not None:
            for k in self.fund_list:
                result['fund_list'].append(k.to_map() if k else None)
        if self.page_num is not None:
            result['page_num'] = self.page_num
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.promoter_id is not None:
            result['promoter_id'] = self.promoter_id
        if self.total_count is not None:
            result['total_count'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.fund_list = []
        if m.get('fund_list') is not None:
            for k in m.get('fund_list'):
                temp_model = FundInfo()
                self.fund_list.append(temp_model.from_map(k))
        if m.get('page_num') is not None:
            self.page_num = m.get('page_num')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('promoter_id') is not None:
            self.promoter_id = m.get('promoter_id')
        if m.get('total_count') is not None:
            self.total_count = m.get('total_count')
        return self


class QueryDistributionFundShopRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        shop_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 商户id
        self.shop_id = shop_id

    def validate(self):
        self.validate_required(self.shop_id, 'shop_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.shop_id is not None:
            result['shop_id'] = self.shop_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('shop_id') is not None:
            self.shop_id = m.get('shop_id')
        return self


class QueryDistributionFundShopResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        approve_quota: str = None,
        balance: str = None,
        finish_quota: str = None,
        shop_id: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 审批中额度
        self.approve_quota = approve_quota
        # 可提现额度
        self.balance = balance
        # 已到账额度
        self.finish_quota = finish_quota
        # 商户id
        self.shop_id = shop_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.approve_quota is not None:
            result['approve_quota'] = self.approve_quota
        if self.balance is not None:
            result['balance'] = self.balance
        if self.finish_quota is not None:
            result['finish_quota'] = self.finish_quota
        if self.shop_id is not None:
            result['shop_id'] = self.shop_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('approve_quota') is not None:
            self.approve_quota = m.get('approve_quota')
        if m.get('balance') is not None:
            self.balance = m.get('balance')
        if m.get('finish_quota') is not None:
            self.finish_quota = m.get('finish_quota')
        if m.get('shop_id') is not None:
            self.shop_id = m.get('shop_id')
        return self


class QueryDistributionFundPromoterflowRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        page_num: int = None,
        page_size: int = None,
        promoter_id: str = None,
        shop_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 分页号
        self.page_num = page_num
        # 分页显示条数
        self.page_size = page_size
        # 推广人id
        self.promoter_id = promoter_id
        # 商户id
        self.shop_id = shop_id

    def validate(self):
        self.validate_required(self.page_num, 'page_num')
        self.validate_required(self.page_size, 'page_size')
        self.validate_required(self.promoter_id, 'promoter_id')
        self.validate_required(self.shop_id, 'shop_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.page_num is not None:
            result['page_num'] = self.page_num
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.promoter_id is not None:
            result['promoter_id'] = self.promoter_id
        if self.shop_id is not None:
            result['shop_id'] = self.shop_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('page_num') is not None:
            self.page_num = m.get('page_num')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('promoter_id') is not None:
            self.promoter_id = m.get('promoter_id')
        if m.get('shop_id') is not None:
            self.shop_id = m.get('shop_id')
        return self


class QueryDistributionFundPromoterflowResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        capital_flows: List[CapitalInfo] = None,
        page_num: int = None,
        page_size: int = None,
        total_count: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 流水信息列表
        self.capital_flows = capital_flows
        # 分页号
        self.page_num = page_num
        # 分页显示条数
        self.page_size = page_size
        # 总数量
        self.total_count = total_count

    def validate(self):
        if self.capital_flows:
            for k in self.capital_flows:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['capital_flows'] = []
        if self.capital_flows is not None:
            for k in self.capital_flows:
                result['capital_flows'].append(k.to_map() if k else None)
        if self.page_num is not None:
            result['page_num'] = self.page_num
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.total_count is not None:
            result['total_count'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.capital_flows = []
        if m.get('capital_flows') is not None:
            for k in m.get('capital_flows'):
                temp_model = CapitalInfo()
                self.capital_flows.append(temp_model.from_map(k))
        if m.get('page_num') is not None:
            self.page_num = m.get('page_num')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('total_count') is not None:
            self.total_count = m.get('total_count')
        return self


class CreateDistributionOrderPromoterRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        buyer_id: str = None,
        commission: str = None,
        commission_rate: str = None,
        order_id: str = None,
        order_price: str = None,
        prev_promoter_id: str = None,
        prev_promoter_price: str = None,
        product_id: str = None,
        promoter_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 购买用户id
        self.buyer_id = buyer_id
        # 佣金
        self.commission = commission
        # 佣金比例 10表示10%\
        self.commission_rate = commission_rate
        # 推广订单id
        self.order_id = order_id
        # 订单金额
        self.order_price = order_price
        # 推广人上级ID
        self.prev_promoter_id = prev_promoter_id
        # 推广人上级分佣金额
        self.prev_promoter_price = prev_promoter_price
        # 商品id
        self.product_id = product_id
        # 推广人id
        self.promoter_id = promoter_id

    def validate(self):
        self.validate_required(self.buyer_id, 'buyer_id')
        self.validate_required(self.commission, 'commission')
        self.validate_required(self.commission_rate, 'commission_rate')
        self.validate_required(self.order_id, 'order_id')
        self.validate_required(self.order_price, 'order_price')
        self.validate_required(self.prev_promoter_id, 'prev_promoter_id')
        self.validate_required(self.prev_promoter_price, 'prev_promoter_price')
        self.validate_required(self.product_id, 'product_id')
        self.validate_required(self.promoter_id, 'promoter_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.buyer_id is not None:
            result['buyer_id'] = self.buyer_id
        if self.commission is not None:
            result['commission'] = self.commission
        if self.commission_rate is not None:
            result['commission_rate'] = self.commission_rate
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.order_price is not None:
            result['order_price'] = self.order_price
        if self.prev_promoter_id is not None:
            result['prev_promoter_id'] = self.prev_promoter_id
        if self.prev_promoter_price is not None:
            result['prev_promoter_price'] = self.prev_promoter_price
        if self.product_id is not None:
            result['product_id'] = self.product_id
        if self.promoter_id is not None:
            result['promoter_id'] = self.promoter_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('buyer_id') is not None:
            self.buyer_id = m.get('buyer_id')
        if m.get('commission') is not None:
            self.commission = m.get('commission')
        if m.get('commission_rate') is not None:
            self.commission_rate = m.get('commission_rate')
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('order_price') is not None:
            self.order_price = m.get('order_price')
        if m.get('prev_promoter_id') is not None:
            self.prev_promoter_id = m.get('prev_promoter_id')
        if m.get('prev_promoter_price') is not None:
            self.prev_promoter_price = m.get('prev_promoter_price')
        if m.get('product_id') is not None:
            self.product_id = m.get('product_id')
        if m.get('promoter_id') is not None:
            self.promoter_id = m.get('promoter_id')
        return self


class CreateDistributionOrderPromoterResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        tx_hash: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 链上地址
        self.tx_hash = tx_hash

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.tx_hash is not None:
            result['tx_hash'] = self.tx_hash
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('tx_hash') is not None:
            self.tx_hash = m.get('tx_hash')
        return self


class CreateDistributionOrderTradeRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        buyer_id: str = None,
        buyer_info: str = None,
        buyer_name: str = None,
        cashier_id: str = None,
        child_id: str = None,
        distribution_info: str = None,
        distribution_shop_id: str = None,
        distribution_shop_name: str = None,
        expire_time: int = None,
        extend: str = None,
        inner_source: str = None,
        join_trader: str = None,
        order_id: str = None,
        order_price: int = None,
        parent_id: str = None,
        pay_info: str = None,
        pay_status: str = None,
        prev_promoter_price: str = None,
        product_desc: str = None,
        product_id: str = None,
        product_name: str = None,
        product_num: int = None,
        product_price: str = None,
        product_type: str = None,
        promoter_order_id: str = None,
        real_price: str = None,
        refund_time: int = None,
        req_system: str = None,
        seller_id: str = None,
        seller_info: str = None,
        seller_name: str = None,
        share: str = None,
        shop_id: str = None,
        source: str = None,
        status: str = None,
        trade_id: str = None,
        trade_time: int = None,
        trade_type: str = None,
        type: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 买家id
        self.buyer_id = buyer_id
        # 买家信息
        self.buyer_info = buyer_info
        # 买家名称
        self.buyer_name = buyer_name
        # 收银单号
        self.cashier_id = cashier_id
        # 外部子订单id
        self.child_id = child_id
        # 分销交易分佣信息
        self.distribution_info = distribution_info
        # 分销商城id
        self.distribution_shop_id = distribution_shop_id
        # 分销商城名称
        self.distribution_shop_name = distribution_shop_name
        # 订单过期时间戳
        self.expire_time = expire_time
        # 订单扩展信息
        self.extend = extend
        # 内部渠道
        self.inner_source = inner_source
        # 交易参与方
        self.join_trader = join_trader
        # 订单id
        self.order_id = order_id
        # 订单金额 单位 分
        self.order_price = order_price
        # 外部父订单id
        self.parent_id = parent_id
        # 订单支付信息
        self.pay_info = pay_info
        # 结算状态 I待结算 S已结算
        self.pay_status = pay_status
        # 上级推广金额
        self.prev_promoter_price = prev_promoter_price
        # 商品描述
        self.product_desc = product_desc
        # 商品id
        self.product_id = product_id
        # 商品名称
        self.product_name = product_name
        # 商品数量
        self.product_num = product_num
        # 商品价格
        self.product_price = product_price
        # 商品类型
        self.product_type = product_type
        # 推广订单id
        self.promoter_order_id = promoter_order_id
        # 商品原始金额
        self.real_price = real_price
        # 退款时间戳
        self.refund_time = refund_time
        # 请求系统
        self.req_system = req_system
        # 卖方id
        self.seller_id = seller_id
        # 卖方信息
        self.seller_info = seller_info
        # 卖方名称
        self.seller_name = seller_name
        # 分享人
        self.share = share
        # 商户id
        self.shop_id = shop_id
        # 订单渠道
        self.source = source
        # 交易状态 W-待付款、S-成功、F-失败、C-待确认
        self.status = status
        # 购买订单id
        self.trade_id = trade_id
        # 交易时间戳
        self.trade_time = trade_time
        # 交易类型
        self.trade_type = trade_type
        # 业务类型
        self.type = type

    def validate(self):
        self.validate_required(self.buyer_id, 'buyer_id')
        self.validate_required(self.buyer_info, 'buyer_info')
        self.validate_required(self.buyer_name, 'buyer_name')
        self.validate_required(self.cashier_id, 'cashier_id')
        self.validate_required(self.child_id, 'child_id')
        self.validate_required(self.distribution_info, 'distribution_info')
        self.validate_required(self.distribution_shop_id, 'distribution_shop_id')
        self.validate_required(self.distribution_shop_name, 'distribution_shop_name')
        self.validate_required(self.expire_time, 'expire_time')
        self.validate_required(self.extend, 'extend')
        self.validate_required(self.inner_source, 'inner_source')
        self.validate_required(self.join_trader, 'join_trader')
        self.validate_required(self.order_id, 'order_id')
        self.validate_required(self.order_price, 'order_price')
        self.validate_required(self.parent_id, 'parent_id')
        self.validate_required(self.pay_info, 'pay_info')
        self.validate_required(self.pay_status, 'pay_status')
        self.validate_required(self.prev_promoter_price, 'prev_promoter_price')
        self.validate_required(self.product_desc, 'product_desc')
        self.validate_required(self.product_id, 'product_id')
        self.validate_required(self.product_name, 'product_name')
        self.validate_required(self.product_num, 'product_num')
        self.validate_required(self.product_price, 'product_price')
        self.validate_required(self.product_type, 'product_type')
        self.validate_required(self.promoter_order_id, 'promoter_order_id')
        self.validate_required(self.real_price, 'real_price')
        self.validate_required(self.refund_time, 'refund_time')
        self.validate_required(self.req_system, 'req_system')
        self.validate_required(self.seller_id, 'seller_id')
        self.validate_required(self.seller_info, 'seller_info')
        self.validate_required(self.seller_name, 'seller_name')
        self.validate_required(self.share, 'share')
        self.validate_required(self.shop_id, 'shop_id')
        self.validate_required(self.source, 'source')
        self.validate_required(self.status, 'status')
        self.validate_required(self.trade_id, 'trade_id')
        self.validate_required(self.trade_time, 'trade_time')
        self.validate_required(self.trade_type, 'trade_type')
        self.validate_required(self.type, 'type')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.buyer_id is not None:
            result['buyer_id'] = self.buyer_id
        if self.buyer_info is not None:
            result['buyer_info'] = self.buyer_info
        if self.buyer_name is not None:
            result['buyer_name'] = self.buyer_name
        if self.cashier_id is not None:
            result['cashier_id'] = self.cashier_id
        if self.child_id is not None:
            result['child_id'] = self.child_id
        if self.distribution_info is not None:
            result['distribution_info'] = self.distribution_info
        if self.distribution_shop_id is not None:
            result['distribution_shop_id'] = self.distribution_shop_id
        if self.distribution_shop_name is not None:
            result['distribution_shop_name'] = self.distribution_shop_name
        if self.expire_time is not None:
            result['expire_time'] = self.expire_time
        if self.extend is not None:
            result['extend'] = self.extend
        if self.inner_source is not None:
            result['inner_source'] = self.inner_source
        if self.join_trader is not None:
            result['join_trader'] = self.join_trader
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.order_price is not None:
            result['order_price'] = self.order_price
        if self.parent_id is not None:
            result['parent_id'] = self.parent_id
        if self.pay_info is not None:
            result['pay_info'] = self.pay_info
        if self.pay_status is not None:
            result['pay_status'] = self.pay_status
        if self.prev_promoter_price is not None:
            result['prev_promoter_price'] = self.prev_promoter_price
        if self.product_desc is not None:
            result['product_desc'] = self.product_desc
        if self.product_id is not None:
            result['product_id'] = self.product_id
        if self.product_name is not None:
            result['product_name'] = self.product_name
        if self.product_num is not None:
            result['product_num'] = self.product_num
        if self.product_price is not None:
            result['product_price'] = self.product_price
        if self.product_type is not None:
            result['product_type'] = self.product_type
        if self.promoter_order_id is not None:
            result['promoter_order_id'] = self.promoter_order_id
        if self.real_price is not None:
            result['real_price'] = self.real_price
        if self.refund_time is not None:
            result['refund_time'] = self.refund_time
        if self.req_system is not None:
            result['req_system'] = self.req_system
        if self.seller_id is not None:
            result['seller_id'] = self.seller_id
        if self.seller_info is not None:
            result['seller_info'] = self.seller_info
        if self.seller_name is not None:
            result['seller_name'] = self.seller_name
        if self.share is not None:
            result['share'] = self.share
        if self.shop_id is not None:
            result['shop_id'] = self.shop_id
        if self.source is not None:
            result['source'] = self.source
        if self.status is not None:
            result['status'] = self.status
        if self.trade_id is not None:
            result['trade_id'] = self.trade_id
        if self.trade_time is not None:
            result['trade_time'] = self.trade_time
        if self.trade_type is not None:
            result['trade_type'] = self.trade_type
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('buyer_id') is not None:
            self.buyer_id = m.get('buyer_id')
        if m.get('buyer_info') is not None:
            self.buyer_info = m.get('buyer_info')
        if m.get('buyer_name') is not None:
            self.buyer_name = m.get('buyer_name')
        if m.get('cashier_id') is not None:
            self.cashier_id = m.get('cashier_id')
        if m.get('child_id') is not None:
            self.child_id = m.get('child_id')
        if m.get('distribution_info') is not None:
            self.distribution_info = m.get('distribution_info')
        if m.get('distribution_shop_id') is not None:
            self.distribution_shop_id = m.get('distribution_shop_id')
        if m.get('distribution_shop_name') is not None:
            self.distribution_shop_name = m.get('distribution_shop_name')
        if m.get('expire_time') is not None:
            self.expire_time = m.get('expire_time')
        if m.get('extend') is not None:
            self.extend = m.get('extend')
        if m.get('inner_source') is not None:
            self.inner_source = m.get('inner_source')
        if m.get('join_trader') is not None:
            self.join_trader = m.get('join_trader')
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('order_price') is not None:
            self.order_price = m.get('order_price')
        if m.get('parent_id') is not None:
            self.parent_id = m.get('parent_id')
        if m.get('pay_info') is not None:
            self.pay_info = m.get('pay_info')
        if m.get('pay_status') is not None:
            self.pay_status = m.get('pay_status')
        if m.get('prev_promoter_price') is not None:
            self.prev_promoter_price = m.get('prev_promoter_price')
        if m.get('product_desc') is not None:
            self.product_desc = m.get('product_desc')
        if m.get('product_id') is not None:
            self.product_id = m.get('product_id')
        if m.get('product_name') is not None:
            self.product_name = m.get('product_name')
        if m.get('product_num') is not None:
            self.product_num = m.get('product_num')
        if m.get('product_price') is not None:
            self.product_price = m.get('product_price')
        if m.get('product_type') is not None:
            self.product_type = m.get('product_type')
        if m.get('promoter_order_id') is not None:
            self.promoter_order_id = m.get('promoter_order_id')
        if m.get('real_price') is not None:
            self.real_price = m.get('real_price')
        if m.get('refund_time') is not None:
            self.refund_time = m.get('refund_time')
        if m.get('req_system') is not None:
            self.req_system = m.get('req_system')
        if m.get('seller_id') is not None:
            self.seller_id = m.get('seller_id')
        if m.get('seller_info') is not None:
            self.seller_info = m.get('seller_info')
        if m.get('seller_name') is not None:
            self.seller_name = m.get('seller_name')
        if m.get('share') is not None:
            self.share = m.get('share')
        if m.get('shop_id') is not None:
            self.shop_id = m.get('shop_id')
        if m.get('source') is not None:
            self.source = m.get('source')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('trade_id') is not None:
            self.trade_id = m.get('trade_id')
        if m.get('trade_time') is not None:
            self.trade_time = m.get('trade_time')
        if m.get('trade_type') is not None:
            self.trade_type = m.get('trade_type')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class CreateDistributionOrderTradeResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        tx_hash: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 链上地址
        self.tx_hash = tx_hash

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.tx_hash is not None:
            result['tx_hash'] = self.tx_hash
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('tx_hash') is not None:
            self.tx_hash = m.get('tx_hash')
        return self


class QueryDistributionOrderPromoterRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        order_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 订单id
        self.order_id = order_id

    def validate(self):
        self.validate_required(self.order_id, 'order_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.order_id is not None:
            result['order_id'] = self.order_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        return self


class QueryDistributionOrderPromoterResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        commission: str = None,
        commission_rate: str = None,
        order_id: str = None,
        order_price: str = None,
        prev_promoter_id: str = None,
        prev_promoter_price: str = None,
        product_id: str = None,
        promoter_id: str = None,
        tx_hash: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 佣金
        self.commission = commission
        # 佣金比例 10表示 10%\
        self.commission_rate = commission_rate
        # 订单id
        self.order_id = order_id
        # 订单金额
        self.order_price = order_price
        # 推广人上级ID
        self.prev_promoter_id = prev_promoter_id
        # 推广人上级分佣金额
        self.prev_promoter_price = prev_promoter_price
        # 商品id
        self.product_id = product_id
        # 推广人id
        self.promoter_id = promoter_id
        # 链上地址
        self.tx_hash = tx_hash

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.commission is not None:
            result['commission'] = self.commission
        if self.commission_rate is not None:
            result['commission_rate'] = self.commission_rate
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.order_price is not None:
            result['order_price'] = self.order_price
        if self.prev_promoter_id is not None:
            result['prev_promoter_id'] = self.prev_promoter_id
        if self.prev_promoter_price is not None:
            result['prev_promoter_price'] = self.prev_promoter_price
        if self.product_id is not None:
            result['product_id'] = self.product_id
        if self.promoter_id is not None:
            result['promoter_id'] = self.promoter_id
        if self.tx_hash is not None:
            result['tx_hash'] = self.tx_hash
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('commission') is not None:
            self.commission = m.get('commission')
        if m.get('commission_rate') is not None:
            self.commission_rate = m.get('commission_rate')
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('order_price') is not None:
            self.order_price = m.get('order_price')
        if m.get('prev_promoter_id') is not None:
            self.prev_promoter_id = m.get('prev_promoter_id')
        if m.get('prev_promoter_price') is not None:
            self.prev_promoter_price = m.get('prev_promoter_price')
        if m.get('product_id') is not None:
            self.product_id = m.get('product_id')
        if m.get('promoter_id') is not None:
            self.promoter_id = m.get('promoter_id')
        if m.get('tx_hash') is not None:
            self.tx_hash = m.get('tx_hash')
        return self


class QueryDistributionOrderRakebackRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        order_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 订单id
        self.order_id = order_id

    def validate(self):
        self.validate_required(self.order_id, 'order_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.order_id is not None:
            result['order_id'] = self.order_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        return self


class QueryDistributionOrderRakebackResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        order_id: str = None,
        rakeback_list: List[RakeBackInfo] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 订单id
        self.order_id = order_id
        # 返佣信息列表
        self.rakeback_list = rakeback_list

    def validate(self):
        if self.rakeback_list:
            for k in self.rakeback_list:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.order_id is not None:
            result['order_id'] = self.order_id
        result['rakeback_list'] = []
        if self.rakeback_list is not None:
            for k in self.rakeback_list:
                result['rakeback_list'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        self.rakeback_list = []
        if m.get('rakeback_list') is not None:
            for k in m.get('rakeback_list'):
                temp_model = RakeBackInfo()
                self.rakeback_list.append(temp_model.from_map(k))
        return self


class QueryDistributionOrderTradeRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        order_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 订单id
        self.order_id = order_id

    def validate(self):
        self.validate_required(self.order_id, 'order_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.order_id is not None:
            result['order_id'] = self.order_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        return self


class QueryDistributionOrderTradeResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        buyer_id: str = None,
        buyer_info: str = None,
        buyer_name: str = None,
        cashier_id: str = None,
        child_id: str = None,
        distribution_info: str = None,
        distribution_shop_id: str = None,
        distribution_shop_name: str = None,
        expire_time: int = None,
        extend: str = None,
        inner_source: str = None,
        join_trader: str = None,
        order_id: str = None,
        order_price: str = None,
        parent_id: str = None,
        pay_info: str = None,
        pay_status: str = None,
        product_desc: str = None,
        product_id: str = None,
        product_name: str = None,
        product_num: int = None,
        product_price: str = None,
        product_type: str = None,
        promoter_order_id: str = None,
        real_price: str = None,
        refund_time: int = None,
        req_system: str = None,
        seller_id: str = None,
        seller_info: str = None,
        seller_name: str = None,
        share: str = None,
        shop_id: str = None,
        source: str = None,
        status: str = None,
        trade_id: str = None,
        trade_time: int = None,
        trade_type: str = None,
        type: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 买家id
        self.buyer_id = buyer_id
        # 买家信息
        self.buyer_info = buyer_info
        # 买家名称
        self.buyer_name = buyer_name
        # 收银单号
        self.cashier_id = cashier_id
        # 外部子订单id
        self.child_id = child_id
        # 分销交易分佣信息
        self.distribution_info = distribution_info
        # 分销商城id
        self.distribution_shop_id = distribution_shop_id
        # 分销商城名称
        self.distribution_shop_name = distribution_shop_name
        # 订单过期时间戳
        self.expire_time = expire_time
        # 订单扩展信息
        self.extend = extend
        # 内部渠道
        self.inner_source = inner_source
        # 交易参与方
        self.join_trader = join_trader
        # 订单id
        self.order_id = order_id
        # 订单金额
        self.order_price = order_price
        # 外部父订单id
        self.parent_id = parent_id
        # 订单支付信息f
        self.pay_info = pay_info
        # 结算状态 I待结算 S已结算
        self.pay_status = pay_status
        # 商品描述
        self.product_desc = product_desc
        # 商品id
        self.product_id = product_id
        # 商品名称
        self.product_name = product_name
        # 商品数量
        self.product_num = product_num
        # 商品单价
        self.product_price = product_price
        # 商品类型
        self.product_type = product_type
        # 推广人订单id
        self.promoter_order_id = promoter_order_id
        # 商品原始金额
        self.real_price = real_price
        # 退款时间
        self.refund_time = refund_time
        # 请求系统
        self.req_system = req_system
        # 卖家id
        self.seller_id = seller_id
        # 卖家信息
        self.seller_info = seller_info
        # 卖家名称
        self.seller_name = seller_name
        # 分享人
        self.share = share
        # 商户id
        self.shop_id = shop_id
        # 订单渠道
        self.source = source
        # 状态 W-待付款、S-成功、F-失败、C-待确认
        self.status = status
        # 购买订单id
        self.trade_id = trade_id
        # 交易时间戳
        self.trade_time = trade_time
        # 交易类型
        self.trade_type = trade_type
        # 业务类型
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.buyer_id is not None:
            result['buyer_id'] = self.buyer_id
        if self.buyer_info is not None:
            result['buyer_info'] = self.buyer_info
        if self.buyer_name is not None:
            result['buyer_name'] = self.buyer_name
        if self.cashier_id is not None:
            result['cashier_id'] = self.cashier_id
        if self.child_id is not None:
            result['child_id'] = self.child_id
        if self.distribution_info is not None:
            result['distribution_info'] = self.distribution_info
        if self.distribution_shop_id is not None:
            result['distribution_shop_id'] = self.distribution_shop_id
        if self.distribution_shop_name is not None:
            result['distribution_shop_name'] = self.distribution_shop_name
        if self.expire_time is not None:
            result['expire_time'] = self.expire_time
        if self.extend is not None:
            result['extend'] = self.extend
        if self.inner_source is not None:
            result['inner_source'] = self.inner_source
        if self.join_trader is not None:
            result['join_trader'] = self.join_trader
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.order_price is not None:
            result['order_price'] = self.order_price
        if self.parent_id is not None:
            result['parent_id'] = self.parent_id
        if self.pay_info is not None:
            result['pay_info'] = self.pay_info
        if self.pay_status is not None:
            result['pay_status'] = self.pay_status
        if self.product_desc is not None:
            result['product_desc'] = self.product_desc
        if self.product_id is not None:
            result['product_id'] = self.product_id
        if self.product_name is not None:
            result['product_name'] = self.product_name
        if self.product_num is not None:
            result['product_num'] = self.product_num
        if self.product_price is not None:
            result['product_price'] = self.product_price
        if self.product_type is not None:
            result['product_type'] = self.product_type
        if self.promoter_order_id is not None:
            result['promoter_order_id'] = self.promoter_order_id
        if self.real_price is not None:
            result['real_price'] = self.real_price
        if self.refund_time is not None:
            result['refund_time'] = self.refund_time
        if self.req_system is not None:
            result['req_system'] = self.req_system
        if self.seller_id is not None:
            result['seller_id'] = self.seller_id
        if self.seller_info is not None:
            result['seller_info'] = self.seller_info
        if self.seller_name is not None:
            result['seller_name'] = self.seller_name
        if self.share is not None:
            result['share'] = self.share
        if self.shop_id is not None:
            result['shop_id'] = self.shop_id
        if self.source is not None:
            result['source'] = self.source
        if self.status is not None:
            result['status'] = self.status
        if self.trade_id is not None:
            result['trade_id'] = self.trade_id
        if self.trade_time is not None:
            result['trade_time'] = self.trade_time
        if self.trade_type is not None:
            result['trade_type'] = self.trade_type
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('buyer_id') is not None:
            self.buyer_id = m.get('buyer_id')
        if m.get('buyer_info') is not None:
            self.buyer_info = m.get('buyer_info')
        if m.get('buyer_name') is not None:
            self.buyer_name = m.get('buyer_name')
        if m.get('cashier_id') is not None:
            self.cashier_id = m.get('cashier_id')
        if m.get('child_id') is not None:
            self.child_id = m.get('child_id')
        if m.get('distribution_info') is not None:
            self.distribution_info = m.get('distribution_info')
        if m.get('distribution_shop_id') is not None:
            self.distribution_shop_id = m.get('distribution_shop_id')
        if m.get('distribution_shop_name') is not None:
            self.distribution_shop_name = m.get('distribution_shop_name')
        if m.get('expire_time') is not None:
            self.expire_time = m.get('expire_time')
        if m.get('extend') is not None:
            self.extend = m.get('extend')
        if m.get('inner_source') is not None:
            self.inner_source = m.get('inner_source')
        if m.get('join_trader') is not None:
            self.join_trader = m.get('join_trader')
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('order_price') is not None:
            self.order_price = m.get('order_price')
        if m.get('parent_id') is not None:
            self.parent_id = m.get('parent_id')
        if m.get('pay_info') is not None:
            self.pay_info = m.get('pay_info')
        if m.get('pay_status') is not None:
            self.pay_status = m.get('pay_status')
        if m.get('product_desc') is not None:
            self.product_desc = m.get('product_desc')
        if m.get('product_id') is not None:
            self.product_id = m.get('product_id')
        if m.get('product_name') is not None:
            self.product_name = m.get('product_name')
        if m.get('product_num') is not None:
            self.product_num = m.get('product_num')
        if m.get('product_price') is not None:
            self.product_price = m.get('product_price')
        if m.get('product_type') is not None:
            self.product_type = m.get('product_type')
        if m.get('promoter_order_id') is not None:
            self.promoter_order_id = m.get('promoter_order_id')
        if m.get('real_price') is not None:
            self.real_price = m.get('real_price')
        if m.get('refund_time') is not None:
            self.refund_time = m.get('refund_time')
        if m.get('req_system') is not None:
            self.req_system = m.get('req_system')
        if m.get('seller_id') is not None:
            self.seller_id = m.get('seller_id')
        if m.get('seller_info') is not None:
            self.seller_info = m.get('seller_info')
        if m.get('seller_name') is not None:
            self.seller_name = m.get('seller_name')
        if m.get('share') is not None:
            self.share = m.get('share')
        if m.get('shop_id') is not None:
            self.shop_id = m.get('shop_id')
        if m.get('source') is not None:
            self.source = m.get('source')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('trade_id') is not None:
            self.trade_id = m.get('trade_id')
        if m.get('trade_time') is not None:
            self.trade_time = m.get('trade_time')
        if m.get('trade_type') is not None:
            self.trade_type = m.get('trade_type')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class CreateLogisticFinanceDisRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        extend: str = None,
        is_agent: bool = None,
        user_name: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 扩展字段
        self.extend = extend
        # 是否为他人代理申请分布式数字身份,缺省时为自己创建分布式数字身份
        self.is_agent = is_agent
        # 用户（企业）名称
        self.user_name = user_name

    def validate(self):
        self.validate_required(self.user_name, 'user_name')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.extend is not None:
            result['extend'] = self.extend
        if self.is_agent is not None:
            result['is_agent'] = self.is_agent
        if self.user_name is not None:
            result['user_name'] = self.user_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('extend') is not None:
            self.extend = m.get('extend')
        if m.get('is_agent') is not None:
            self.is_agent = m.get('is_agent')
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        return self


class CreateLogisticFinanceDisResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        did: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 生成的分布式数字身份id
        self.did = did

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.did is not None:
            result['did'] = self.did
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('did') is not None:
            self.did = m.get('did')
        return self


class ListLogisticFinanceDisRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        return self


class ListLogisticFinanceDisResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        did_list: List[DidInfo] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 分布式数字身份列表
        self.did_list = did_list

    def validate(self):
        if self.did_list:
            for k in self.did_list:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['did_list'] = []
        if self.did_list is not None:
            for k in self.did_list:
                result['did_list'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.did_list = []
        if m.get('did_list') is not None:
            for k in m.get('did_list'):
                temp_model = DidInfo()
                self.did_list.append(temp_model.from_map(k))
        return self


class CreateLogisticFinanceDisvcRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        dest_did: str = None,
        expire: str = None,
        src_did: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 指定可验证声明颁发对象的分布式数字身份id
        self.dest_did = dest_did
        # 可验证声明有效期 (时间戳) ， 到达该时间戳表示的时间时过期， 默认一天
        self.expire = expire
        # vc颁发者分布式数字身份，缺省时为调用者的默认分布式数字身份
        self.src_did = src_did

    def validate(self):
        self.validate_required(self.dest_did, 'dest_did')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.dest_did is not None:
            result['dest_did'] = self.dest_did
        if self.expire is not None:
            result['expire'] = self.expire
        if self.src_did is not None:
            result['src_did'] = self.src_did
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('dest_did') is not None:
            self.dest_did = m.get('dest_did')
        if m.get('expire') is not None:
            self.expire = m.get('expire')
        if m.get('src_did') is not None:
            self.src_did = m.get('src_did')
        return self


class CreateLogisticFinanceDisvcResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        vc_id: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 可验证声明id
        self.vc_id = vc_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.vc_id is not None:
            result['vc_id'] = self.vc_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('vc_id') is not None:
            self.vc_id = m.get('vc_id')
        return self


class QueryLogisticFinanceDisvcRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        agent_did: str = None,
        vc_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 代理申请的分布式数字身份，缺省时为自己的分布式数字身份
        self.agent_did = agent_did
        # 可验证声明id
        self.vc_id = vc_id

    def validate(self):
        self.validate_required(self.vc_id, 'vc_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.agent_did is not None:
            result['agent_did'] = self.agent_did
        if self.vc_id is not None:
            result['vc_id'] = self.vc_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('agent_did') is not None:
            self.agent_did = m.get('agent_did')
        if m.get('vc_id') is not None:
            self.vc_id = m.get('vc_id')
        return self


class QueryLogisticFinanceDisvcResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        vc: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 可验证声明完整内容
        self.vc = vc

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.vc is not None:
            result['vc'] = self.vc
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('vc') is not None:
            self.vc = m.get('vc')
        return self


class CreateLogisticFinanceAccountRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        did: str = None,
        drawee_tax_no: str = None,
        org_id: str = None,
        user_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 指定的分布式数字身份，缺省时默认为自己的分布式数字身份
        self.did = did
        # 纳税人识别号
        self.drawee_tax_no = drawee_tax_no
        # 业务方企业id
        self.org_id = org_id
        # 业务方用户id
        self.user_id = user_id

    def validate(self):
        self.validate_required(self.drawee_tax_no, 'drawee_tax_no')
        self.validate_required(self.org_id, 'org_id')
        self.validate_required(self.user_id, 'user_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.did is not None:
            result['did'] = self.did
        if self.drawee_tax_no is not None:
            result['drawee_tax_no'] = self.drawee_tax_no
        if self.org_id is not None:
            result['org_id'] = self.org_id
        if self.user_id is not None:
            result['user_id'] = self.user_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('drawee_tax_no') is not None:
            self.drawee_tax_no = m.get('drawee_tax_no')
        if m.get('org_id') is not None:
            self.org_id = m.get('org_id')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        return self


class CreateLogisticFinanceAccountResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        account_id: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 平台内唯一标识，格式为 org_id:user_id:drawee_tax_no
        self.account_id = account_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.account_id is not None:
            result['account_id'] = self.account_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('account_id') is not None:
            self.account_id = m.get('account_id')
        return self


class BatchcreateLogisticFinanceAccountRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        did: str = None,
        users: List[LogisticFinUser] = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 指定的分布式数字身份，缺省时为自己的分布式数字身份
        self.did = did
        # 业务方用户列表，一次最多不超过200
        self.users = users

    def validate(self):
        self.validate_required(self.users, 'users')
        if self.users:
            for k in self.users:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.did is not None:
            result['did'] = self.did
        result['users'] = []
        if self.users is not None:
            for k in self.users:
                result['users'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('did') is not None:
            self.did = m.get('did')
        self.users = []
        if m.get('users') is not None:
            for k in m.get('users'):
                temp_model = LogisticFinUser()
                self.users.append(temp_model.from_map(k))
        return self


class BatchcreateLogisticFinanceAccountResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        fail_list: List[LogisticFinUser] = None,
        fail_num: int = None,
        success_list: List[str] = None,
        success_num: int = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 失败列表
        self.fail_list = fail_list
        # 映射失败数
        self.fail_num = fail_num
        # 成功列表
        self.success_list = success_list
        # 映射成功数
        self.success_num = success_num

    def validate(self):
        if self.fail_list:
            for k in self.fail_list:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['fail_list'] = []
        if self.fail_list is not None:
            for k in self.fail_list:
                result['fail_list'].append(k.to_map() if k else None)
        if self.fail_num is not None:
            result['fail_num'] = self.fail_num
        if self.success_list is not None:
            result['success_list'] = self.success_list
        if self.success_num is not None:
            result['success_num'] = self.success_num
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.fail_list = []
        if m.get('fail_list') is not None:
            for k in m.get('fail_list'):
                temp_model = LogisticFinUser()
                self.fail_list.append(temp_model.from_map(k))
        if m.get('fail_num') is not None:
            self.fail_num = m.get('fail_num')
        if m.get('success_list') is not None:
            self.success_list = m.get('success_list')
        if m.get('success_num') is not None:
            self.success_num = m.get('success_num')
        return self


class CreateLogisticFinanceOrderRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        account_id: str = None,
        all_freight: str = None,
        back_fee: str = None,
        cargo_order: str = None,
        cart_badge_color: str = None,
        cart_badge_no: str = None,
        created_time: int = None,
        drawee: str = None,
        drawee_tax_no: str = None,
        driver_did: str = None,
        driver_name: str = None,
        end_city_code: str = None,
        end_city_name: str = None,
        end_county_code: str = None,
        end_county_name: str = None,
        end_division_code: str = None,
        end_province_code: str = None,
        end_province_name: str = None,
        freight_incr: str = None,
        goods_amount: int = None,
        goods_amount_type: str = None,
        goods_name: str = None,
        id_card: str = None,
        loss_fee: str = None,
        mobile_no: str = None,
        partner_id: str = None,
        platform_did: str = None,
        prepayments: str = None,
        prepayments_buy_etc: str = None,
        prepayments_buy_gas: str = None,
        prepayments_buy_oil: str = None,
        prepayments_etccard: str = None,
        prepayments_oilcard: str = None,
        present_amount_oil: str = None,
        start_city_code: str = None,
        start_city_name: str = None,
        start_county_code: str = None,
        start_county_name: str = None,
        start_division_code: str = None,
        start_province_code: str = None,
        start_province_name: str = None,
        start_time: int = None,
        tax_waybill_id: str = None,
        unit_price: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 用户链上账户
        # 与司机did 二选一填写
        self.account_id = account_id
        # 运费
        self.all_freight = all_freight
        # 回单押金
        # 
        self.back_fee = back_fee
        # 货源单号
        self.cargo_order = cargo_order
        # 车牌颜色
        self.cart_badge_color = cart_badge_color
        # 车牌号
        self.cart_badge_no = cart_badge_no
        # 建单时间
        self.created_time = created_time
        # 受票方名称
        self.drawee = drawee
        # 受票方纳税人识别号
        self.drawee_tax_no = drawee_tax_no
        # 司机分布式身份
        self.driver_did = driver_did
        # 司机姓名
        # 已填司机分布式身份的情况下可不填
        self.driver_name = driver_name
        # 目的地城市CODE
        self.end_city_code = end_city_code
        # 目的地城市名称
        self.end_city_name = end_city_name
        # 目的地区县CODE
        self.end_county_code = end_county_code
        # 目的地区县名称
        self.end_county_name = end_county_name
        # 结束行政区划代码
        self.end_division_code = end_division_code
        # 目的地省份CODE
        self.end_province_code = end_province_code
        # 目的地省份名称
        self.end_province_name = end_province_name
        # 运费增项
        self.freight_incr = freight_incr
        # 货物数量
        self.goods_amount = goods_amount
        # 货物数量单位类型
        self.goods_amount_type = goods_amount_type
        # 货物名称
        self.goods_name = goods_name
        # 司机身份证号
        # 已填司机分布式身份的情况下可不填
        self.id_card = id_card
        # 运费扣减
        # 
        self.loss_fee = loss_fee
        # 司机手机号
        # 已填司机分布式身份的情况下可不填
        self.mobile_no = mobile_no
        # 系统识别id
        # 网商识别号
        self.partner_id = partner_id
        # 无车承运平台分布式数字身份，缺省时为自己的分布式数字身份
        self.platform_did = platform_did
        # 预付款金额
        self.prepayments = prepayments
        # 线下预付ETC
        self.prepayments_buy_etc = prepayments_buy_etc
        # 线下气款金额
        self.prepayments_buy_gas = prepayments_buy_gas
        # 线下油款预付
        self.prepayments_buy_oil = prepayments_buy_oil
        # 预付ETC卡金额
        self.prepayments_etccard = prepayments_etccard
        # 预付油卡金额
        self.prepayments_oilcard = prepayments_oilcard
        # 油卡赠送金额
        self.present_amount_oil = present_amount_oil
        # 起始地CODE
        self.start_city_code = start_city_code
        # 起始地城市名称
        self.start_city_name = start_city_name
        # 起始地区县CODE
        self.start_county_code = start_county_code
        # 起始地区县名称
        self.start_county_name = start_county_name
        # 起始行政区划代码
        self.start_division_code = start_division_code
        # 起始地省份CODE
        self.start_province_code = start_province_code
        # 起始地省份名称
        self.start_province_name = start_province_name
        # 起运时间戳
        self.start_time = start_time
        # 运单id
        self.tax_waybill_id = tax_waybill_id
        # 运输单价
        self.unit_price = unit_price

    def validate(self):
        self.validate_required(self.cart_badge_color, 'cart_badge_color')
        self.validate_required(self.cart_badge_no, 'cart_badge_no')
        self.validate_required(self.created_time, 'created_time')
        self.validate_required(self.drawee, 'drawee')
        self.validate_required(self.drawee_tax_no, 'drawee_tax_no')
        self.validate_required(self.end_city_code, 'end_city_code')
        self.validate_required(self.end_city_name, 'end_city_name')
        self.validate_required(self.end_division_code, 'end_division_code')
        self.validate_required(self.end_province_code, 'end_province_code')
        self.validate_required(self.end_province_name, 'end_province_name')
        self.validate_required(self.goods_name, 'goods_name')
        self.validate_required(self.start_city_code, 'start_city_code')
        self.validate_required(self.start_city_name, 'start_city_name')
        self.validate_required(self.start_division_code, 'start_division_code')
        self.validate_required(self.start_province_code, 'start_province_code')
        self.validate_required(self.start_province_name, 'start_province_name')
        self.validate_required(self.start_time, 'start_time')
        self.validate_required(self.tax_waybill_id, 'tax_waybill_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.account_id is not None:
            result['account_id'] = self.account_id
        if self.all_freight is not None:
            result['all_freight'] = self.all_freight
        if self.back_fee is not None:
            result['back_fee'] = self.back_fee
        if self.cargo_order is not None:
            result['cargo_order'] = self.cargo_order
        if self.cart_badge_color is not None:
            result['cart_badge_color'] = self.cart_badge_color
        if self.cart_badge_no is not None:
            result['cart_badge_no'] = self.cart_badge_no
        if self.created_time is not None:
            result['created_time'] = self.created_time
        if self.drawee is not None:
            result['drawee'] = self.drawee
        if self.drawee_tax_no is not None:
            result['drawee_tax_no'] = self.drawee_tax_no
        if self.driver_did is not None:
            result['driver_did'] = self.driver_did
        if self.driver_name is not None:
            result['driver_name'] = self.driver_name
        if self.end_city_code is not None:
            result['end_city_code'] = self.end_city_code
        if self.end_city_name is not None:
            result['end_city_name'] = self.end_city_name
        if self.end_county_code is not None:
            result['end_county_code'] = self.end_county_code
        if self.end_county_name is not None:
            result['end_county_name'] = self.end_county_name
        if self.end_division_code is not None:
            result['end_division_code'] = self.end_division_code
        if self.end_province_code is not None:
            result['end_province_code'] = self.end_province_code
        if self.end_province_name is not None:
            result['end_province_name'] = self.end_province_name
        if self.freight_incr is not None:
            result['freight_incr'] = self.freight_incr
        if self.goods_amount is not None:
            result['goods_amount'] = self.goods_amount
        if self.goods_amount_type is not None:
            result['goods_amount_type'] = self.goods_amount_type
        if self.goods_name is not None:
            result['goods_name'] = self.goods_name
        if self.id_card is not None:
            result['id_card'] = self.id_card
        if self.loss_fee is not None:
            result['loss_fee'] = self.loss_fee
        if self.mobile_no is not None:
            result['mobile_no'] = self.mobile_no
        if self.partner_id is not None:
            result['partner_id'] = self.partner_id
        if self.platform_did is not None:
            result['platform_did'] = self.platform_did
        if self.prepayments is not None:
            result['prepayments'] = self.prepayments
        if self.prepayments_buy_etc is not None:
            result['prepayments_buy_etc'] = self.prepayments_buy_etc
        if self.prepayments_buy_gas is not None:
            result['prepayments_buy_gas'] = self.prepayments_buy_gas
        if self.prepayments_buy_oil is not None:
            result['prepayments_buy_oil'] = self.prepayments_buy_oil
        if self.prepayments_etccard is not None:
            result['prepayments_etccard'] = self.prepayments_etccard
        if self.prepayments_oilcard is not None:
            result['prepayments_oilcard'] = self.prepayments_oilcard
        if self.present_amount_oil is not None:
            result['present_amount_oil'] = self.present_amount_oil
        if self.start_city_code is not None:
            result['start_city_code'] = self.start_city_code
        if self.start_city_name is not None:
            result['start_city_name'] = self.start_city_name
        if self.start_county_code is not None:
            result['start_county_code'] = self.start_county_code
        if self.start_county_name is not None:
            result['start_county_name'] = self.start_county_name
        if self.start_division_code is not None:
            result['start_division_code'] = self.start_division_code
        if self.start_province_code is not None:
            result['start_province_code'] = self.start_province_code
        if self.start_province_name is not None:
            result['start_province_name'] = self.start_province_name
        if self.start_time is not None:
            result['start_time'] = self.start_time
        if self.tax_waybill_id is not None:
            result['tax_waybill_id'] = self.tax_waybill_id
        if self.unit_price is not None:
            result['unit_price'] = self.unit_price
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('account_id') is not None:
            self.account_id = m.get('account_id')
        if m.get('all_freight') is not None:
            self.all_freight = m.get('all_freight')
        if m.get('back_fee') is not None:
            self.back_fee = m.get('back_fee')
        if m.get('cargo_order') is not None:
            self.cargo_order = m.get('cargo_order')
        if m.get('cart_badge_color') is not None:
            self.cart_badge_color = m.get('cart_badge_color')
        if m.get('cart_badge_no') is not None:
            self.cart_badge_no = m.get('cart_badge_no')
        if m.get('created_time') is not None:
            self.created_time = m.get('created_time')
        if m.get('drawee') is not None:
            self.drawee = m.get('drawee')
        if m.get('drawee_tax_no') is not None:
            self.drawee_tax_no = m.get('drawee_tax_no')
        if m.get('driver_did') is not None:
            self.driver_did = m.get('driver_did')
        if m.get('driver_name') is not None:
            self.driver_name = m.get('driver_name')
        if m.get('end_city_code') is not None:
            self.end_city_code = m.get('end_city_code')
        if m.get('end_city_name') is not None:
            self.end_city_name = m.get('end_city_name')
        if m.get('end_county_code') is not None:
            self.end_county_code = m.get('end_county_code')
        if m.get('end_county_name') is not None:
            self.end_county_name = m.get('end_county_name')
        if m.get('end_division_code') is not None:
            self.end_division_code = m.get('end_division_code')
        if m.get('end_province_code') is not None:
            self.end_province_code = m.get('end_province_code')
        if m.get('end_province_name') is not None:
            self.end_province_name = m.get('end_province_name')
        if m.get('freight_incr') is not None:
            self.freight_incr = m.get('freight_incr')
        if m.get('goods_amount') is not None:
            self.goods_amount = m.get('goods_amount')
        if m.get('goods_amount_type') is not None:
            self.goods_amount_type = m.get('goods_amount_type')
        if m.get('goods_name') is not None:
            self.goods_name = m.get('goods_name')
        if m.get('id_card') is not None:
            self.id_card = m.get('id_card')
        if m.get('loss_fee') is not None:
            self.loss_fee = m.get('loss_fee')
        if m.get('mobile_no') is not None:
            self.mobile_no = m.get('mobile_no')
        if m.get('partner_id') is not None:
            self.partner_id = m.get('partner_id')
        if m.get('platform_did') is not None:
            self.platform_did = m.get('platform_did')
        if m.get('prepayments') is not None:
            self.prepayments = m.get('prepayments')
        if m.get('prepayments_buy_etc') is not None:
            self.prepayments_buy_etc = m.get('prepayments_buy_etc')
        if m.get('prepayments_buy_gas') is not None:
            self.prepayments_buy_gas = m.get('prepayments_buy_gas')
        if m.get('prepayments_buy_oil') is not None:
            self.prepayments_buy_oil = m.get('prepayments_buy_oil')
        if m.get('prepayments_etccard') is not None:
            self.prepayments_etccard = m.get('prepayments_etccard')
        if m.get('prepayments_oilcard') is not None:
            self.prepayments_oilcard = m.get('prepayments_oilcard')
        if m.get('present_amount_oil') is not None:
            self.present_amount_oil = m.get('present_amount_oil')
        if m.get('start_city_code') is not None:
            self.start_city_code = m.get('start_city_code')
        if m.get('start_city_name') is not None:
            self.start_city_name = m.get('start_city_name')
        if m.get('start_county_code') is not None:
            self.start_county_code = m.get('start_county_code')
        if m.get('start_county_name') is not None:
            self.start_county_name = m.get('start_county_name')
        if m.get('start_division_code') is not None:
            self.start_division_code = m.get('start_division_code')
        if m.get('start_province_code') is not None:
            self.start_province_code = m.get('start_province_code')
        if m.get('start_province_name') is not None:
            self.start_province_name = m.get('start_province_name')
        if m.get('start_time') is not None:
            self.start_time = m.get('start_time')
        if m.get('tax_waybill_id') is not None:
            self.tax_waybill_id = m.get('tax_waybill_id')
        if m.get('unit_price') is not None:
            self.unit_price = m.get('unit_price')
        return self


class CreateLogisticFinanceOrderResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        tx_code: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 链上凭证
        self.tx_code = tx_code

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.tx_code is not None:
            result['tx_code'] = self.tx_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('tx_code') is not None:
            self.tx_code = m.get('tx_code')
        return self


class FinishLogisticFinanceOrderRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        account_id: str = None,
        all_freight: str = None,
        back_fee: str = None,
        cargo_order: str = None,
        cart_badge_color: str = None,
        cart_badge_no: str = None,
        created_time: int = None,
        drawee: str = None,
        drawee_tax_no: str = None,
        driver_did: str = None,
        driver_name: str = None,
        end_city_code: str = None,
        end_city_name: str = None,
        end_county_code: str = None,
        end_county_name: str = None,
        end_division_code: str = None,
        end_province_code: str = None,
        end_province_name: str = None,
        end_time: int = None,
        freight_incr: str = None,
        goods_amount: int = None,
        goods_amount_type: str = None,
        goods_name: str = None,
        id_card: str = None,
        loss_fee: str = None,
        mobile_no: str = None,
        partner_id: str = None,
        pay_check: bool = None,
        platform_did: str = None,
        prepayments: str = None,
        prepayments_buy_etc: str = None,
        prepayments_buy_gas: str = None,
        prepayments_buy_oil: str = None,
        prepayments_etccard: str = None,
        prepayments_oilcard: str = None,
        present_amount_oil: str = None,
        start_city_code: str = None,
        start_city_name: str = None,
        start_county_code: str = None,
        start_county_name: str = None,
        start_division_code: str = None,
        start_province_code: str = None,
        start_province_name: str = None,
        start_time: int = None,
        tax_waybill_id: str = None,
        unit_price: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 链上账号
        # 与司机did 二选一填写
        self.account_id = account_id
        # 运费
        self.all_freight = all_freight
        # 回单押金
        self.back_fee = back_fee
        # 货源单号
        self.cargo_order = cargo_order
        # 车牌颜色
        self.cart_badge_color = cart_badge_color
        # 车牌号
        self.cart_badge_no = cart_badge_no
        # 建单时间
        self.created_time = created_time
        # 受票方名称
        self.drawee = drawee
        # 受票方纳税人识别号
        self.drawee_tax_no = drawee_tax_no
        # 司机分布式数字身份
        self.driver_did = driver_did
        # 司机姓名
        # 已填司机分布式身份的情况下可不填
        self.driver_name = driver_name
        # 目的地城市CODE
        self.end_city_code = end_city_code
        # 目的地城市名称
        self.end_city_name = end_city_name
        # 目的地区县CODE
        self.end_county_code = end_county_code
        # 目的地区县名称
        self.end_county_name = end_county_name
        # 结束行政区划代码
        self.end_division_code = end_division_code
        # 目的地省份CODE
        self.end_province_code = end_province_code
        # 目的地省份名称
        self.end_province_name = end_province_name
        # 终结时间
        self.end_time = end_time
        # 运费增项
        self.freight_incr = freight_incr
        # 货物数量
        self.goods_amount = goods_amount
        # 货物数量单位类型
        self.goods_amount_type = goods_amount_type
        # 货物名称
        self.goods_name = goods_name
        # 司机身份证号
        # 已填司机分布式身份的情况下可不填
        self.id_card = id_card
        # 运费扣减
        self.loss_fee = loss_fee
        # 司机手机号
        # 已填司机分布式身份的情况下可不填
        self.mobile_no = mobile_no
        # 系统识别id
        # 网商识别号
        self.partner_id = partner_id
        # 是否进行资金验证
        self.pay_check = pay_check
        # 无车承运平台分布式数字身份，缺省时为自己的分布式数字身份
        self.platform_did = platform_did
        # 预付款金额
        self.prepayments = prepayments
        # 线下预付ETC
        self.prepayments_buy_etc = prepayments_buy_etc
        # 线下气款金额
        self.prepayments_buy_gas = prepayments_buy_gas
        # 线下油款预付
        self.prepayments_buy_oil = prepayments_buy_oil
        # 预付ETC卡金额
        self.prepayments_etccard = prepayments_etccard
        # 预付油卡金额
        self.prepayments_oilcard = prepayments_oilcard
        # 油卡赠送金额
        self.present_amount_oil = present_amount_oil
        # 起始地CODE
        self.start_city_code = start_city_code
        # 起始地城市名称
        self.start_city_name = start_city_name
        # 起始地区县CODE
        self.start_county_code = start_county_code
        # 起始地区县名称
        self.start_county_name = start_county_name
        # 起始行政区划代码
        self.start_division_code = start_division_code
        # 起始地省份CODE
        self.start_province_code = start_province_code
        # 起始地省份名称
        self.start_province_name = start_province_name
        # 起运时间
        self.start_time = start_time
        # 运单ID
        self.tax_waybill_id = tax_waybill_id
        # 运输单价
        self.unit_price = unit_price

    def validate(self):
        self.validate_required(self.cart_badge_color, 'cart_badge_color')
        self.validate_required(self.cart_badge_no, 'cart_badge_no')
        self.validate_required(self.created_time, 'created_time')
        self.validate_required(self.drawee, 'drawee')
        self.validate_required(self.drawee_tax_no, 'drawee_tax_no')
        self.validate_required(self.end_city_code, 'end_city_code')
        self.validate_required(self.end_city_name, 'end_city_name')
        self.validate_required(self.end_division_code, 'end_division_code')
        self.validate_required(self.end_province_code, 'end_province_code')
        self.validate_required(self.end_province_name, 'end_province_name')
        self.validate_required(self.end_time, 'end_time')
        self.validate_required(self.goods_name, 'goods_name')
        self.validate_required(self.start_city_code, 'start_city_code')
        self.validate_required(self.start_city_name, 'start_city_name')
        self.validate_required(self.start_division_code, 'start_division_code')
        self.validate_required(self.start_province_code, 'start_province_code')
        self.validate_required(self.start_province_name, 'start_province_name')
        self.validate_required(self.start_time, 'start_time')
        self.validate_required(self.tax_waybill_id, 'tax_waybill_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.account_id is not None:
            result['account_id'] = self.account_id
        if self.all_freight is not None:
            result['all_freight'] = self.all_freight
        if self.back_fee is not None:
            result['back_fee'] = self.back_fee
        if self.cargo_order is not None:
            result['cargo_order'] = self.cargo_order
        if self.cart_badge_color is not None:
            result['cart_badge_color'] = self.cart_badge_color
        if self.cart_badge_no is not None:
            result['cart_badge_no'] = self.cart_badge_no
        if self.created_time is not None:
            result['created_time'] = self.created_time
        if self.drawee is not None:
            result['drawee'] = self.drawee
        if self.drawee_tax_no is not None:
            result['drawee_tax_no'] = self.drawee_tax_no
        if self.driver_did is not None:
            result['driver_did'] = self.driver_did
        if self.driver_name is not None:
            result['driver_name'] = self.driver_name
        if self.end_city_code is not None:
            result['end_city_code'] = self.end_city_code
        if self.end_city_name is not None:
            result['end_city_name'] = self.end_city_name
        if self.end_county_code is not None:
            result['end_county_code'] = self.end_county_code
        if self.end_county_name is not None:
            result['end_county_name'] = self.end_county_name
        if self.end_division_code is not None:
            result['end_division_code'] = self.end_division_code
        if self.end_province_code is not None:
            result['end_province_code'] = self.end_province_code
        if self.end_province_name is not None:
            result['end_province_name'] = self.end_province_name
        if self.end_time is not None:
            result['end_time'] = self.end_time
        if self.freight_incr is not None:
            result['freight_incr'] = self.freight_incr
        if self.goods_amount is not None:
            result['goods_amount'] = self.goods_amount
        if self.goods_amount_type is not None:
            result['goods_amount_type'] = self.goods_amount_type
        if self.goods_name is not None:
            result['goods_name'] = self.goods_name
        if self.id_card is not None:
            result['id_card'] = self.id_card
        if self.loss_fee is not None:
            result['loss_fee'] = self.loss_fee
        if self.mobile_no is not None:
            result['mobile_no'] = self.mobile_no
        if self.partner_id is not None:
            result['partner_id'] = self.partner_id
        if self.pay_check is not None:
            result['pay_check'] = self.pay_check
        if self.platform_did is not None:
            result['platform_did'] = self.platform_did
        if self.prepayments is not None:
            result['prepayments'] = self.prepayments
        if self.prepayments_buy_etc is not None:
            result['prepayments_buy_etc'] = self.prepayments_buy_etc
        if self.prepayments_buy_gas is not None:
            result['prepayments_buy_gas'] = self.prepayments_buy_gas
        if self.prepayments_buy_oil is not None:
            result['prepayments_buy_oil'] = self.prepayments_buy_oil
        if self.prepayments_etccard is not None:
            result['prepayments_etccard'] = self.prepayments_etccard
        if self.prepayments_oilcard is not None:
            result['prepayments_oilcard'] = self.prepayments_oilcard
        if self.present_amount_oil is not None:
            result['present_amount_oil'] = self.present_amount_oil
        if self.start_city_code is not None:
            result['start_city_code'] = self.start_city_code
        if self.start_city_name is not None:
            result['start_city_name'] = self.start_city_name
        if self.start_county_code is not None:
            result['start_county_code'] = self.start_county_code
        if self.start_county_name is not None:
            result['start_county_name'] = self.start_county_name
        if self.start_division_code is not None:
            result['start_division_code'] = self.start_division_code
        if self.start_province_code is not None:
            result['start_province_code'] = self.start_province_code
        if self.start_province_name is not None:
            result['start_province_name'] = self.start_province_name
        if self.start_time is not None:
            result['start_time'] = self.start_time
        if self.tax_waybill_id is not None:
            result['tax_waybill_id'] = self.tax_waybill_id
        if self.unit_price is not None:
            result['unit_price'] = self.unit_price
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('account_id') is not None:
            self.account_id = m.get('account_id')
        if m.get('all_freight') is not None:
            self.all_freight = m.get('all_freight')
        if m.get('back_fee') is not None:
            self.back_fee = m.get('back_fee')
        if m.get('cargo_order') is not None:
            self.cargo_order = m.get('cargo_order')
        if m.get('cart_badge_color') is not None:
            self.cart_badge_color = m.get('cart_badge_color')
        if m.get('cart_badge_no') is not None:
            self.cart_badge_no = m.get('cart_badge_no')
        if m.get('created_time') is not None:
            self.created_time = m.get('created_time')
        if m.get('drawee') is not None:
            self.drawee = m.get('drawee')
        if m.get('drawee_tax_no') is not None:
            self.drawee_tax_no = m.get('drawee_tax_no')
        if m.get('driver_did') is not None:
            self.driver_did = m.get('driver_did')
        if m.get('driver_name') is not None:
            self.driver_name = m.get('driver_name')
        if m.get('end_city_code') is not None:
            self.end_city_code = m.get('end_city_code')
        if m.get('end_city_name') is not None:
            self.end_city_name = m.get('end_city_name')
        if m.get('end_county_code') is not None:
            self.end_county_code = m.get('end_county_code')
        if m.get('end_county_name') is not None:
            self.end_county_name = m.get('end_county_name')
        if m.get('end_division_code') is not None:
            self.end_division_code = m.get('end_division_code')
        if m.get('end_province_code') is not None:
            self.end_province_code = m.get('end_province_code')
        if m.get('end_province_name') is not None:
            self.end_province_name = m.get('end_province_name')
        if m.get('end_time') is not None:
            self.end_time = m.get('end_time')
        if m.get('freight_incr') is not None:
            self.freight_incr = m.get('freight_incr')
        if m.get('goods_amount') is not None:
            self.goods_amount = m.get('goods_amount')
        if m.get('goods_amount_type') is not None:
            self.goods_amount_type = m.get('goods_amount_type')
        if m.get('goods_name') is not None:
            self.goods_name = m.get('goods_name')
        if m.get('id_card') is not None:
            self.id_card = m.get('id_card')
        if m.get('loss_fee') is not None:
            self.loss_fee = m.get('loss_fee')
        if m.get('mobile_no') is not None:
            self.mobile_no = m.get('mobile_no')
        if m.get('partner_id') is not None:
            self.partner_id = m.get('partner_id')
        if m.get('pay_check') is not None:
            self.pay_check = m.get('pay_check')
        if m.get('platform_did') is not None:
            self.platform_did = m.get('platform_did')
        if m.get('prepayments') is not None:
            self.prepayments = m.get('prepayments')
        if m.get('prepayments_buy_etc') is not None:
            self.prepayments_buy_etc = m.get('prepayments_buy_etc')
        if m.get('prepayments_buy_gas') is not None:
            self.prepayments_buy_gas = m.get('prepayments_buy_gas')
        if m.get('prepayments_buy_oil') is not None:
            self.prepayments_buy_oil = m.get('prepayments_buy_oil')
        if m.get('prepayments_etccard') is not None:
            self.prepayments_etccard = m.get('prepayments_etccard')
        if m.get('prepayments_oilcard') is not None:
            self.prepayments_oilcard = m.get('prepayments_oilcard')
        if m.get('present_amount_oil') is not None:
            self.present_amount_oil = m.get('present_amount_oil')
        if m.get('start_city_code') is not None:
            self.start_city_code = m.get('start_city_code')
        if m.get('start_city_name') is not None:
            self.start_city_name = m.get('start_city_name')
        if m.get('start_county_code') is not None:
            self.start_county_code = m.get('start_county_code')
        if m.get('start_county_name') is not None:
            self.start_county_name = m.get('start_county_name')
        if m.get('start_division_code') is not None:
            self.start_division_code = m.get('start_division_code')
        if m.get('start_province_code') is not None:
            self.start_province_code = m.get('start_province_code')
        if m.get('start_province_name') is not None:
            self.start_province_name = m.get('start_province_name')
        if m.get('start_time') is not None:
            self.start_time = m.get('start_time')
        if m.get('tax_waybill_id') is not None:
            self.tax_waybill_id = m.get('tax_waybill_id')
        if m.get('unit_price') is not None:
            self.unit_price = m.get('unit_price')
        return self


class FinishLogisticFinanceOrderResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        tx_code: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 链上凭证
        self.tx_code = tx_code

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.tx_code is not None:
            result['tx_code'] = self.tx_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('tx_code') is not None:
            self.tx_code = m.get('tx_code')
        return self


class CreateLogisticFinancePayorderRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        arrive_time: int = None,
        bank_sn: str = None,
        pay_amount: str = None,
        pay_bank_card_no: str = None,
        pay_bank_name: str = None,
        pay_did: str = None,
        pay_name: str = None,
        pay_time: int = None,
        pay_type_new: str = None,
        pay_way: str = None,
        platform_did: str = None,
        pos_info_id: str = None,
        real_pay_bank: str = None,
        real_pay_bank_card_no: str = None,
        real_pay_name: str = None,
        recv_bank_card_no: str = None,
        recv_bank_name: str = None,
        recv_did: str = None,
        recv_name: str = None,
        waybill_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 确认到账时间
        self.arrive_time = arrive_time
        # 关联银行流水号
        self.bank_sn = bank_sn
        # 付款金额
        self.pay_amount = pay_amount
        # 付款方银行账号
        self.pay_bank_card_no = pay_bank_card_no
        # 付款方开户行
        self.pay_bank_name = pay_bank_name
        # 付款方did
        self.pay_did = pay_did
        # 付款方名称
        self.pay_name = pay_name
        # 付款时间戳
        self.pay_time = pay_time
        # 支付类型
        self.pay_type_new = pay_type_new
        # 支付方式
        self.pay_way = pay_way
        # 无车承运平台分布式数字身份，缺省为自己的分布式数字身份
        self.platform_did = platform_did
        # 支付订单ID
        self.pos_info_id = pos_info_id
        # 实际付款方开户行
        self.real_pay_bank = real_pay_bank
        # 实际付款方银行账号
        self.real_pay_bank_card_no = real_pay_bank_card_no
        # 实际付款方名称
        self.real_pay_name = real_pay_name
        # 收款方银行账号
        self.recv_bank_card_no = recv_bank_card_no
        # 收款方开户行
        self.recv_bank_name = recv_bank_name
        # 收款方did
        self.recv_did = recv_did
        # 收款方名称
        self.recv_name = recv_name
        # 关联的运单ID
        self.waybill_id = waybill_id

    def validate(self):
        self.validate_required(self.arrive_time, 'arrive_time')
        self.validate_required(self.bank_sn, 'bank_sn')
        self.validate_required(self.pay_amount, 'pay_amount')
        self.validate_required(self.pay_bank_card_no, 'pay_bank_card_no')
        self.validate_required(self.pay_bank_name, 'pay_bank_name')
        self.validate_required(self.pay_name, 'pay_name')
        self.validate_required(self.pay_time, 'pay_time')
        self.validate_required(self.pay_type_new, 'pay_type_new')
        self.validate_required(self.pay_way, 'pay_way')
        self.validate_required(self.pos_info_id, 'pos_info_id')
        self.validate_required(self.real_pay_bank, 'real_pay_bank')
        self.validate_required(self.real_pay_bank_card_no, 'real_pay_bank_card_no')
        self.validate_required(self.real_pay_name, 'real_pay_name')
        self.validate_required(self.recv_bank_card_no, 'recv_bank_card_no')
        self.validate_required(self.recv_bank_name, 'recv_bank_name')
        self.validate_required(self.recv_name, 'recv_name')
        self.validate_required(self.waybill_id, 'waybill_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.arrive_time is not None:
            result['arrive_time'] = self.arrive_time
        if self.bank_sn is not None:
            result['bank_sn'] = self.bank_sn
        if self.pay_amount is not None:
            result['pay_amount'] = self.pay_amount
        if self.pay_bank_card_no is not None:
            result['pay_bank_card_no'] = self.pay_bank_card_no
        if self.pay_bank_name is not None:
            result['pay_bank_name'] = self.pay_bank_name
        if self.pay_did is not None:
            result['pay_did'] = self.pay_did
        if self.pay_name is not None:
            result['pay_name'] = self.pay_name
        if self.pay_time is not None:
            result['pay_time'] = self.pay_time
        if self.pay_type_new is not None:
            result['pay_type_new'] = self.pay_type_new
        if self.pay_way is not None:
            result['pay_way'] = self.pay_way
        if self.platform_did is not None:
            result['platform_did'] = self.platform_did
        if self.pos_info_id is not None:
            result['pos_info_id'] = self.pos_info_id
        if self.real_pay_bank is not None:
            result['real_pay_bank'] = self.real_pay_bank
        if self.real_pay_bank_card_no is not None:
            result['real_pay_bank_card_no'] = self.real_pay_bank_card_no
        if self.real_pay_name is not None:
            result['real_pay_name'] = self.real_pay_name
        if self.recv_bank_card_no is not None:
            result['recv_bank_card_no'] = self.recv_bank_card_no
        if self.recv_bank_name is not None:
            result['recv_bank_name'] = self.recv_bank_name
        if self.recv_did is not None:
            result['recv_did'] = self.recv_did
        if self.recv_name is not None:
            result['recv_name'] = self.recv_name
        if self.waybill_id is not None:
            result['waybill_id'] = self.waybill_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('arrive_time') is not None:
            self.arrive_time = m.get('arrive_time')
        if m.get('bank_sn') is not None:
            self.bank_sn = m.get('bank_sn')
        if m.get('pay_amount') is not None:
            self.pay_amount = m.get('pay_amount')
        if m.get('pay_bank_card_no') is not None:
            self.pay_bank_card_no = m.get('pay_bank_card_no')
        if m.get('pay_bank_name') is not None:
            self.pay_bank_name = m.get('pay_bank_name')
        if m.get('pay_did') is not None:
            self.pay_did = m.get('pay_did')
        if m.get('pay_name') is not None:
            self.pay_name = m.get('pay_name')
        if m.get('pay_time') is not None:
            self.pay_time = m.get('pay_time')
        if m.get('pay_type_new') is not None:
            self.pay_type_new = m.get('pay_type_new')
        if m.get('pay_way') is not None:
            self.pay_way = m.get('pay_way')
        if m.get('platform_did') is not None:
            self.platform_did = m.get('platform_did')
        if m.get('pos_info_id') is not None:
            self.pos_info_id = m.get('pos_info_id')
        if m.get('real_pay_bank') is not None:
            self.real_pay_bank = m.get('real_pay_bank')
        if m.get('real_pay_bank_card_no') is not None:
            self.real_pay_bank_card_no = m.get('real_pay_bank_card_no')
        if m.get('real_pay_name') is not None:
            self.real_pay_name = m.get('real_pay_name')
        if m.get('recv_bank_card_no') is not None:
            self.recv_bank_card_no = m.get('recv_bank_card_no')
        if m.get('recv_bank_name') is not None:
            self.recv_bank_name = m.get('recv_bank_name')
        if m.get('recv_did') is not None:
            self.recv_did = m.get('recv_did')
        if m.get('recv_name') is not None:
            self.recv_name = m.get('recv_name')
        if m.get('waybill_id') is not None:
            self.waybill_id = m.get('waybill_id')
        return self


class CreateLogisticFinancePayorderResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        tx_code: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 链上凭证
        self.tx_code = tx_code

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.tx_code is not None:
            result['tx_code'] = self.tx_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('tx_code') is not None:
            self.tx_code = m.get('tx_code')
        return self


class QueryLogisticFinanceOrderRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        platform_did: str = None,
        tax_waybill_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 无车承运平台分布式数字身份，缺省时为自己的分布式数字身份
        self.platform_did = platform_did
        # 运单ID
        self.tax_waybill_id = tax_waybill_id

    def validate(self):
        self.validate_required(self.tax_waybill_id, 'tax_waybill_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.platform_did is not None:
            result['platform_did'] = self.platform_did
        if self.tax_waybill_id is not None:
            result['tax_waybill_id'] = self.tax_waybill_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('platform_did') is not None:
            self.platform_did = m.get('platform_did')
        if m.get('tax_waybill_id') is not None:
            self.tax_waybill_id = m.get('tax_waybill_id')
        return self


class QueryLogisticFinanceOrderResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        status: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 运单状态
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.status is not None:
            result['status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('status') is not None:
            self.status = m.get('status')
        return self


class CreateLogisticFinanceBillorderRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        drawee: str = None,
        drawee_tax_no: str = None,
        lzfpdm: str = None,
        lzfphm: str = None,
        open_time: int = None,
        platform_did: str = None,
        waybill_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 受票方名称
        self.drawee = drawee
        # 受票方纳税人识别号
        self.drawee_tax_no = drawee_tax_no
        # 发票代码
        self.lzfpdm = lzfpdm
        # 发票号码
        self.lzfphm = lzfphm
        # 开票时间戳
        self.open_time = open_time
        # 所属平台的分布式数字身份，缺省时为自己的分布式数字身份
        self.platform_did = platform_did
        # 关联的运单ID
        self.waybill_id = waybill_id

    def validate(self):
        self.validate_required(self.drawee, 'drawee')
        self.validate_required(self.drawee_tax_no, 'drawee_tax_no')
        self.validate_required(self.open_time, 'open_time')
        self.validate_required(self.waybill_id, 'waybill_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.drawee is not None:
            result['drawee'] = self.drawee
        if self.drawee_tax_no is not None:
            result['drawee_tax_no'] = self.drawee_tax_no
        if self.lzfpdm is not None:
            result['lzfpdm'] = self.lzfpdm
        if self.lzfphm is not None:
            result['lzfphm'] = self.lzfphm
        if self.open_time is not None:
            result['open_time'] = self.open_time
        if self.platform_did is not None:
            result['platform_did'] = self.platform_did
        if self.waybill_id is not None:
            result['waybill_id'] = self.waybill_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('drawee') is not None:
            self.drawee = m.get('drawee')
        if m.get('drawee_tax_no') is not None:
            self.drawee_tax_no = m.get('drawee_tax_no')
        if m.get('lzfpdm') is not None:
            self.lzfpdm = m.get('lzfpdm')
        if m.get('lzfphm') is not None:
            self.lzfphm = m.get('lzfphm')
        if m.get('open_time') is not None:
            self.open_time = m.get('open_time')
        if m.get('platform_did') is not None:
            self.platform_did = m.get('platform_did')
        if m.get('waybill_id') is not None:
            self.waybill_id = m.get('waybill_id')
        return self


class CreateLogisticFinanceBillorderResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        tx_code: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 链上凭证
        self.tx_code = tx_code

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.tx_code is not None:
            result['tx_code'] = self.tx_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('tx_code') is not None:
            self.tx_code = m.get('tx_code')
        return self


class ImportLogisticFinanceLocationRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        desc: str = None,
        location: List[LogisticLocation] = None,
        platform_did: str = None,
        tax_waybill_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 描述信息
        self.desc = desc
        # 运单轨迹信息
        self.location = location
        # 所属平台分布式数字身份，缺省时为自己的分布式数字身份
        self.platform_did = platform_did
        # 运单id
        self.tax_waybill_id = tax_waybill_id

    def validate(self):
        self.validate_required(self.location, 'location')
        if self.location:
            for k in self.location:
                if k:
                    k.validate()
        self.validate_required(self.tax_waybill_id, 'tax_waybill_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.desc is not None:
            result['desc'] = self.desc
        result['location'] = []
        if self.location is not None:
            for k in self.location:
                result['location'].append(k.to_map() if k else None)
        if self.platform_did is not None:
            result['platform_did'] = self.platform_did
        if self.tax_waybill_id is not None:
            result['tax_waybill_id'] = self.tax_waybill_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('desc') is not None:
            self.desc = m.get('desc')
        self.location = []
        if m.get('location') is not None:
            for k in m.get('location'):
                temp_model = LogisticLocation()
                self.location.append(temp_model.from_map(k))
        if m.get('platform_did') is not None:
            self.platform_did = m.get('platform_did')
        if m.get('tax_waybill_id') is not None:
            self.tax_waybill_id = m.get('tax_waybill_id')
        return self


class ImportLogisticFinanceLocationResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class CreateLogisticFinanceConsignorRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        ep_cert_name: str = None,
        ep_cert_no: str = None,
        extension_info: str = None,
        legal_person_cert_name: str = None,
        legal_person_cert_no: str = None,
        platform_did: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 企业名称
        self.ep_cert_name = ep_cert_name
        # 企业证件号
        self.ep_cert_no = ep_cert_no
        # 扩展字段
        self.extension_info = extension_info
        # 法人姓名
        self.legal_person_cert_name = legal_person_cert_name
        # 法人身份证
        self.legal_person_cert_no = legal_person_cert_no
        # 所属无车平台DIS
        self.platform_did = platform_did

    def validate(self):
        self.validate_required(self.ep_cert_name, 'ep_cert_name')
        self.validate_required(self.ep_cert_no, 'ep_cert_no')
        self.validate_required(self.legal_person_cert_name, 'legal_person_cert_name')
        self.validate_required(self.legal_person_cert_no, 'legal_person_cert_no')
        self.validate_required(self.platform_did, 'platform_did')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.ep_cert_name is not None:
            result['ep_cert_name'] = self.ep_cert_name
        if self.ep_cert_no is not None:
            result['ep_cert_no'] = self.ep_cert_no
        if self.extension_info is not None:
            result['extension_info'] = self.extension_info
        if self.legal_person_cert_name is not None:
            result['legal_person_cert_name'] = self.legal_person_cert_name
        if self.legal_person_cert_no is not None:
            result['legal_person_cert_no'] = self.legal_person_cert_no
        if self.platform_did is not None:
            result['platform_did'] = self.platform_did
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('ep_cert_name') is not None:
            self.ep_cert_name = m.get('ep_cert_name')
        if m.get('ep_cert_no') is not None:
            self.ep_cert_no = m.get('ep_cert_no')
        if m.get('extension_info') is not None:
            self.extension_info = m.get('extension_info')
        if m.get('legal_person_cert_name') is not None:
            self.legal_person_cert_name = m.get('legal_person_cert_name')
        if m.get('legal_person_cert_no') is not None:
            self.legal_person_cert_no = m.get('legal_person_cert_no')
        if m.get('platform_did') is not None:
            self.platform_did = m.get('platform_did')
        return self


class CreateLogisticFinanceConsignorResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        did: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 返回货主did信息
        self.did = did

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.did is not None:
            result['did'] = self.did
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('did') is not None:
            self.did = m.get('did')
        return self


class CreateLogisticFinancePlatformRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        ep_cert_name: str = None,
        ep_cert_no: str = None,
        extension_info: str = None,
        legal_person_cert_name: str = None,
        legal_person_cert_no: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 企业名称
        self.ep_cert_name = ep_cert_name
        # 企业证件号
        self.ep_cert_no = ep_cert_no
        # 扩展字段
        self.extension_info = extension_info
        # 法人姓名
        self.legal_person_cert_name = legal_person_cert_name
        # 法人身份证
        self.legal_person_cert_no = legal_person_cert_no

    def validate(self):
        self.validate_required(self.ep_cert_name, 'ep_cert_name')
        self.validate_required(self.ep_cert_no, 'ep_cert_no')
        self.validate_required(self.legal_person_cert_name, 'legal_person_cert_name')
        self.validate_required(self.legal_person_cert_no, 'legal_person_cert_no')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.ep_cert_name is not None:
            result['ep_cert_name'] = self.ep_cert_name
        if self.ep_cert_no is not None:
            result['ep_cert_no'] = self.ep_cert_no
        if self.extension_info is not None:
            result['extension_info'] = self.extension_info
        if self.legal_person_cert_name is not None:
            result['legal_person_cert_name'] = self.legal_person_cert_name
        if self.legal_person_cert_no is not None:
            result['legal_person_cert_no'] = self.legal_person_cert_no
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('ep_cert_name') is not None:
            self.ep_cert_name = m.get('ep_cert_name')
        if m.get('ep_cert_no') is not None:
            self.ep_cert_no = m.get('ep_cert_no')
        if m.get('extension_info') is not None:
            self.extension_info = m.get('extension_info')
        if m.get('legal_person_cert_name') is not None:
            self.legal_person_cert_name = m.get('legal_person_cert_name')
        if m.get('legal_person_cert_no') is not None:
            self.legal_person_cert_no = m.get('legal_person_cert_no')
        return self


class CreateLogisticFinancePlatformResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        did: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 返回无车承运平台DIS
        self.did = did

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.did is not None:
            result['did'] = self.did
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('did') is not None:
            self.did = m.get('did')
        return self


class CreateLogistFinanceAgentplatformRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        agent_did: str = None,
        ep_cert_name: str = None,
        ep_cert_no: str = None,
        extension_info: str = None,
        legal_person_cert_name: str = None,
        legal_person_cert_no: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 代理创建者did
        self.agent_did = agent_did
        # 企业名称
        self.ep_cert_name = ep_cert_name
        # 企业证件号
        self.ep_cert_no = ep_cert_no
        # 扩展字段
        self.extension_info = extension_info
        # 法人姓名
        self.legal_person_cert_name = legal_person_cert_name
        # 法人身份证号
        self.legal_person_cert_no = legal_person_cert_no

    def validate(self):
        self.validate_required(self.agent_did, 'agent_did')
        self.validate_required(self.ep_cert_name, 'ep_cert_name')
        self.validate_required(self.ep_cert_no, 'ep_cert_no')
        self.validate_required(self.legal_person_cert_name, 'legal_person_cert_name')
        self.validate_required(self.legal_person_cert_no, 'legal_person_cert_no')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.agent_did is not None:
            result['agent_did'] = self.agent_did
        if self.ep_cert_name is not None:
            result['ep_cert_name'] = self.ep_cert_name
        if self.ep_cert_no is not None:
            result['ep_cert_no'] = self.ep_cert_no
        if self.extension_info is not None:
            result['extension_info'] = self.extension_info
        if self.legal_person_cert_name is not None:
            result['legal_person_cert_name'] = self.legal_person_cert_name
        if self.legal_person_cert_no is not None:
            result['legal_person_cert_no'] = self.legal_person_cert_no
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('agent_did') is not None:
            self.agent_did = m.get('agent_did')
        if m.get('ep_cert_name') is not None:
            self.ep_cert_name = m.get('ep_cert_name')
        if m.get('ep_cert_no') is not None:
            self.ep_cert_no = m.get('ep_cert_no')
        if m.get('extension_info') is not None:
            self.extension_info = m.get('extension_info')
        if m.get('legal_person_cert_name') is not None:
            self.legal_person_cert_name = m.get('legal_person_cert_name')
        if m.get('legal_person_cert_no') is not None:
            self.legal_person_cert_no = m.get('legal_person_cert_no')
        return self


class CreateLogistFinanceAgentplatformResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        did: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 返回无车承运平台did
        self.did = did

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.did is not None:
            result['did'] = self.did
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('did') is not None:
            self.did = m.get('did')
        return self


class CreateLogisticFinanceDriverRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        cert_no: str = None,
        extension_info: str = None,
        mobile: str = None,
        name: str = None,
        platform_did: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 身份证号码
        self.cert_no = cert_no
        # 扩展字段
        self.extension_info = extension_info
        # 手机号码
        self.mobile = mobile
        # 姓名
        self.name = name
        # 所属平台did
        self.platform_did = platform_did

    def validate(self):
        self.validate_required(self.cert_no, 'cert_no')
        self.validate_required(self.mobile, 'mobile')
        self.validate_required(self.name, 'name')
        self.validate_required(self.platform_did, 'platform_did')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.cert_no is not None:
            result['cert_no'] = self.cert_no
        if self.extension_info is not None:
            result['extension_info'] = self.extension_info
        if self.mobile is not None:
            result['mobile'] = self.mobile
        if self.name is not None:
            result['name'] = self.name
        if self.platform_did is not None:
            result['platform_did'] = self.platform_did
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('cert_no') is not None:
            self.cert_no = m.get('cert_no')
        if m.get('extension_info') is not None:
            self.extension_info = m.get('extension_info')
        if m.get('mobile') is not None:
            self.mobile = m.get('mobile')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('platform_did') is not None:
            self.platform_did = m.get('platform_did')
        return self


class CreateLogisticFinanceDriverResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        did: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 返回司机did
        self.did = did

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.did is not None:
            result['did'] = self.did
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('did') is not None:
            self.did = m.get('did')
        return self


class CreateLogisticFinanceCargoorderRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        all_freight: str = None,
        cargo_name: str = None,
        cargo_order: str = None,
        cargo_type: str = None,
        consignor_did: str = None,
        delivery_place: str = None,
        loading_place: str = None,
        platform_did: str = None,
        user_phone: str = None,
        weight: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 运费
        self.all_freight = all_freight
        # 货物名称
        self.cargo_name = cargo_name
        # 货源单号
        self.cargo_order = cargo_order
        # 货物类型
        self.cargo_type = cargo_type
        # 货主did
        self.consignor_did = consignor_did
        # 卸货地
        self.delivery_place = delivery_place
        # 装货地
        self.loading_place = loading_place
        # 平台did
        self.platform_did = platform_did
        # 联系人电话
        self.user_phone = user_phone
        # 重量
        self.weight = weight

    def validate(self):
        self.validate_required(self.all_freight, 'all_freight')
        self.validate_required(self.cargo_name, 'cargo_name')
        self.validate_required(self.cargo_order, 'cargo_order')
        self.validate_required(self.cargo_type, 'cargo_type')
        self.validate_required(self.consignor_did, 'consignor_did')
        self.validate_required(self.delivery_place, 'delivery_place')
        self.validate_required(self.loading_place, 'loading_place')
        self.validate_required(self.platform_did, 'platform_did')
        self.validate_required(self.weight, 'weight')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.all_freight is not None:
            result['all_freight'] = self.all_freight
        if self.cargo_name is not None:
            result['cargo_name'] = self.cargo_name
        if self.cargo_order is not None:
            result['cargo_order'] = self.cargo_order
        if self.cargo_type is not None:
            result['cargo_type'] = self.cargo_type
        if self.consignor_did is not None:
            result['consignor_did'] = self.consignor_did
        if self.delivery_place is not None:
            result['delivery_place'] = self.delivery_place
        if self.loading_place is not None:
            result['loading_place'] = self.loading_place
        if self.platform_did is not None:
            result['platform_did'] = self.platform_did
        if self.user_phone is not None:
            result['user_phone'] = self.user_phone
        if self.weight is not None:
            result['weight'] = self.weight
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('all_freight') is not None:
            self.all_freight = m.get('all_freight')
        if m.get('cargo_name') is not None:
            self.cargo_name = m.get('cargo_name')
        if m.get('cargo_order') is not None:
            self.cargo_order = m.get('cargo_order')
        if m.get('cargo_type') is not None:
            self.cargo_type = m.get('cargo_type')
        if m.get('consignor_did') is not None:
            self.consignor_did = m.get('consignor_did')
        if m.get('delivery_place') is not None:
            self.delivery_place = m.get('delivery_place')
        if m.get('loading_place') is not None:
            self.loading_place = m.get('loading_place')
        if m.get('platform_did') is not None:
            self.platform_did = m.get('platform_did')
        if m.get('user_phone') is not None:
            self.user_phone = m.get('user_phone')
        if m.get('weight') is not None:
            self.weight = m.get('weight')
        return self


class CreateLogisticFinanceCargoorderResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        tx_code: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 货源链上凭证
        self.tx_code = tx_code

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.tx_code is not None:
            result['tx_code'] = self.tx_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('tx_code') is not None:
            self.tx_code = m.get('tx_code')
        return self


class CreateLogisticFinanceCargopayorderRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        bank_no: str = None,
        cargo_order: str = None,
        expense_type: str = None,
        payment: str = None,
        pay_did: str = None,
        pay_id: str = None,
        pay_note: str = None,
        recv_did: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 银行流水号
        self.bank_no = bank_no
        # 货源单号
        self.cargo_order = cargo_order
        # 费用类型   (运费、调度费、服务费)
        self.expense_type = expense_type
        # 支付金额
        self.payment = payment
        # 付款方did
        self.pay_did = pay_did
        # 平台支付单号
        self.pay_id = pay_id
        # 支付备注
        self.pay_note = pay_note
        # 收款方did
        self.recv_did = recv_did

    def validate(self):
        self.validate_required(self.bank_no, 'bank_no')
        self.validate_required(self.cargo_order, 'cargo_order')
        self.validate_required(self.expense_type, 'expense_type')
        self.validate_required(self.payment, 'payment')
        self.validate_required(self.pay_did, 'pay_did')
        self.validate_required(self.pay_id, 'pay_id')
        self.validate_required(self.recv_did, 'recv_did')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.bank_no is not None:
            result['bank_no'] = self.bank_no
        if self.cargo_order is not None:
            result['cargo_order'] = self.cargo_order
        if self.expense_type is not None:
            result['expense_type'] = self.expense_type
        if self.payment is not None:
            result['payment'] = self.payment
        if self.pay_did is not None:
            result['pay_did'] = self.pay_did
        if self.pay_id is not None:
            result['pay_id'] = self.pay_id
        if self.pay_note is not None:
            result['pay_note'] = self.pay_note
        if self.recv_did is not None:
            result['recv_did'] = self.recv_did
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('bank_no') is not None:
            self.bank_no = m.get('bank_no')
        if m.get('cargo_order') is not None:
            self.cargo_order = m.get('cargo_order')
        if m.get('expense_type') is not None:
            self.expense_type = m.get('expense_type')
        if m.get('payment') is not None:
            self.payment = m.get('payment')
        if m.get('pay_did') is not None:
            self.pay_did = m.get('pay_did')
        if m.get('pay_id') is not None:
            self.pay_id = m.get('pay_id')
        if m.get('pay_note') is not None:
            self.pay_note = m.get('pay_note')
        if m.get('recv_did') is not None:
            self.recv_did = m.get('recv_did')
        return self


class CreateLogisticFinanceCargopayorderResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        tx_code: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 货源支付链上凭证
        self.tx_code = tx_code

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.tx_code is not None:
            result['tx_code'] = self.tx_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('tx_code') is not None:
            self.tx_code = m.get('tx_code')
        return self


class CreateOcpProductRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        baas_alliance: str = None,
        baas_capacity: str = None,
        baas_name: str = None,
        baas_node: str = None,
        baas_tee: bool = None,
        baas_ver: str = None,
        biz_code: str = None,
        biz_type: str = None,
        group_code: str = None,
        product_code: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 联盟Id
        self.baas_alliance = baas_alliance
        # 意义：链扩容字段，表示在默认空间大小基础上，新增空间大小，单位为G，默认值为0。
        # 仅链版本为企业版（enterpriseVer）时，才发挥作用。
        self.baas_capacity = baas_capacity
        # 区块链的名称
        self.baas_name = baas_name
        # 意义：链新增节点数，表示在默认4个节点基础上，新增节点数，单位为个，默认值为0。
        # 仅链版本为企业版（enterpriseVer）时，才发挥作用。
        self.baas_node = baas_node
        # 意义：Tee链标志，表示创建Tee区块链，默认值为false。
        # 注意：仅链版本为企业版（enterpriseVer）时，才发挥作用。
        self.baas_tee = baas_tee
        # 基础版（basicVer）、企业版（enterpriseVer）
        self.baas_ver = baas_ver
        # 业务组详细码
        self.biz_code = biz_code
        # 业务组详细类型
        self.biz_type = biz_type
        # 业务组码
        self.group_code = group_code
        # 产品码 全局唯一
        self.product_code = product_code

    def validate(self):
        self.validate_required(self.baas_alliance, 'baas_alliance')
        self.validate_required(self.baas_name, 'baas_name')
        self.validate_required(self.baas_ver, 'baas_ver')
        self.validate_required(self.biz_code, 'biz_code')
        self.validate_required(self.biz_type, 'biz_type')
        self.validate_required(self.group_code, 'group_code')
        self.validate_required(self.product_code, 'product_code')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.baas_alliance is not None:
            result['baas_alliance'] = self.baas_alliance
        if self.baas_capacity is not None:
            result['baas_capacity'] = self.baas_capacity
        if self.baas_name is not None:
            result['baas_name'] = self.baas_name
        if self.baas_node is not None:
            result['baas_node'] = self.baas_node
        if self.baas_tee is not None:
            result['baas_tee'] = self.baas_tee
        if self.baas_ver is not None:
            result['baas_ver'] = self.baas_ver
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        if self.biz_type is not None:
            result['biz_type'] = self.biz_type
        if self.group_code is not None:
            result['group_code'] = self.group_code
        if self.product_code is not None:
            result['product_code'] = self.product_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('baas_alliance') is not None:
            self.baas_alliance = m.get('baas_alliance')
        if m.get('baas_capacity') is not None:
            self.baas_capacity = m.get('baas_capacity')
        if m.get('baas_name') is not None:
            self.baas_name = m.get('baas_name')
        if m.get('baas_node') is not None:
            self.baas_node = m.get('baas_node')
        if m.get('baas_tee') is not None:
            self.baas_tee = m.get('baas_tee')
        if m.get('baas_ver') is not None:
            self.baas_ver = m.get('baas_ver')
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        if m.get('biz_type') is not None:
            self.biz_type = m.get('biz_type')
        if m.get('group_code') is not None:
            self.group_code = m.get('group_code')
        if m.get('product_code') is not None:
            self.product_code = m.get('product_code')
        return self


class CreateOcpProductResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class UpdateOcpProductRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        instance_id: str = None,
        product_code: str = None,
        specification: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 产品实例Id
        self.instance_id = instance_id
        # 产品码 全局唯一
        self.product_code = product_code
        # 增量规格信息（JSON格式）会按照key进行排序
        self.specification = specification

    def validate(self):
        self.validate_required(self.instance_id, 'instance_id')
        self.validate_required(self.product_code, 'product_code')
        self.validate_required(self.specification, 'specification')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.instance_id is not None:
            result['instance_id'] = self.instance_id
        if self.product_code is not None:
            result['product_code'] = self.product_code
        if self.specification is not None:
            result['specification'] = self.specification
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('instance_id') is not None:
            self.instance_id = m.get('instance_id')
        if m.get('product_code') is not None:
            self.product_code = m.get('product_code')
        if m.get('specification') is not None:
            self.specification = m.get('specification')
        return self


class UpdateOcpProductResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        sign: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 签名结果
        self.sign = sign

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.sign is not None:
            result['sign'] = self.sign
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('sign') is not None:
            self.sign = m.get('sign')
        return self


class CloseOcpProductRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        instance_id: str = None,
        product_code: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 产品实例Id列
        self.instance_id = instance_id
        # 产品码 全局唯一
        self.product_code = product_code

    def validate(self):
        self.validate_required(self.instance_id, 'instance_id')
        self.validate_required(self.product_code, 'product_code')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.instance_id is not None:
            result['instance_id'] = self.instance_id
        if self.product_code is not None:
            result['product_code'] = self.product_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('instance_id') is not None:
            self.instance_id = m.get('instance_id')
        if m.get('product_code') is not None:
            self.product_code = m.get('product_code')
        return self


class CloseOcpProductResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class EnableOcpProductRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        instance_id: str = None,
        product_code: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 产品实例Id
        self.instance_id = instance_id
        # 产品码 全局唯一
        self.product_code = product_code

    def validate(self):
        self.validate_required(self.instance_id, 'instance_id')
        self.validate_required(self.product_code, 'product_code')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.instance_id is not None:
            result['instance_id'] = self.instance_id
        if self.product_code is not None:
            result['product_code'] = self.product_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('instance_id') is not None:
            self.instance_id = m.get('instance_id')
        if m.get('product_code') is not None:
            self.product_code = m.get('product_code')
        return self


class EnableOcpProductResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        sign: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 签名结果
        self.sign = sign

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.sign is not None:
            result['sign'] = self.sign
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('sign') is not None:
            self.sign = m.get('sign')
        return self


class StopOcpProductRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        instance_id: str = None,
        product_code: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 产品实例Id
        self.instance_id = instance_id
        # 产品码 全局唯一
        self.product_code = product_code

    def validate(self):
        self.validate_required(self.instance_id, 'instance_id')
        self.validate_required(self.product_code, 'product_code')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.instance_id is not None:
            result['instance_id'] = self.instance_id
        if self.product_code is not None:
            result['product_code'] = self.product_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('instance_id') is not None:
            self.instance_id = m.get('instance_id')
        if m.get('product_code') is not None:
            self.product_code = m.get('product_code')
        return self


class StopOcpProductResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        sign: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 签名结果
        self.sign = sign

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.sign is not None:
            result['sign'] = self.sign
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('sign') is not None:
            self.sign = m.get('sign')
        return self


class InitOcpProductRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        business_action: str = None,
        business_context: str = None,
        order_no: str = None,
        product_code: str = None,
        region: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 加载业务的场景
        self.business_action = business_action
        # 用于加载对应场景数据的上下文（JSON格式具体同产品方定义）
        self.business_context = business_context
        # 流水号用于业务串联，以及幂等
        self.order_no = order_no
        # 产品码 全局唯一
        self.product_code = product_code
        # 区域
        self.region = region

    def validate(self):
        self.validate_required(self.business_action, 'business_action')
        self.validate_required(self.business_context, 'business_context')
        self.validate_required(self.product_code, 'product_code')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.business_action is not None:
            result['business_action'] = self.business_action
        if self.business_context is not None:
            result['business_context'] = self.business_context
        if self.order_no is not None:
            result['order_no'] = self.order_no
        if self.product_code is not None:
            result['product_code'] = self.product_code
        if self.region is not None:
            result['region'] = self.region
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('business_action') is not None:
            self.business_action = m.get('business_action')
        if m.get('business_context') is not None:
            self.business_context = m.get('business_context')
        if m.get('order_no') is not None:
            self.order_no = m.get('order_no')
        if m.get('product_code') is not None:
            self.product_code = m.get('product_code')
        if m.get('region') is not None:
            self.region = m.get('region')
        return self


class InitOcpProductResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        discrete_values: List[DiscreteValue] = None,
        sign: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 组合内容
        self.discrete_values = discrete_values
        # 签名结果
        self.sign = sign

    def validate(self):
        if self.discrete_values:
            for k in self.discrete_values:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['discrete_values'] = []
        if self.discrete_values is not None:
            for k in self.discrete_values:
                result['discrete_values'].append(k.to_map() if k else None)
        if self.sign is not None:
            result['sign'] = self.sign
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.discrete_values = []
        if m.get('discrete_values') is not None:
            for k in m.get('discrete_values'):
                temp_model = DiscreteValue()
                self.discrete_values.append(temp_model.from_map(k))
        if m.get('sign') is not None:
            self.sign = m.get('sign')
        return self


class QueryOcpProductRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        instance_id: str = None,
        product_code: str = None,
        tenant_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 实例id
        self.instance_id = instance_id
        # 产品码
        self.product_code = product_code
        # 租户id
        self.tenant_id = tenant_id

    def validate(self):
        self.validate_required(self.instance_id, 'instance_id')
        self.validate_required(self.product_code, 'product_code')
        self.validate_required(self.tenant_id, 'tenant_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.instance_id is not None:
            result['instance_id'] = self.instance_id
        if self.product_code is not None:
            result['product_code'] = self.product_code
        if self.tenant_id is not None:
            result['tenant_id'] = self.tenant_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('instance_id') is not None:
            self.instance_id = m.get('instance_id')
        if m.get('product_code') is not None:
            self.product_code = m.get('product_code')
        if m.get('tenant_id') is not None:
            self.tenant_id = m.get('tenant_id')
        return self


class QueryOcpProductResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        info: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 状态描述：未开通（UN_OPEN）、初始化（INIT）、开通（OPEN）、释放\关闭（CLOSE）、未知（UNKNOWN）、暂停（STOP）。
        self.info = info

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.info is not None:
            result['info'] = self.info
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('info') is not None:
            self.info = m.get('info')
        return self


class OpenOcpProductRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        instance_id: str = None,
        product_code: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 实例id
        self.instance_id = instance_id
        # 产品码
        self.product_code = product_code

    def validate(self):
        self.validate_required(self.instance_id, 'instance_id')
        self.validate_required(self.product_code, 'product_code')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.instance_id is not None:
            result['instance_id'] = self.instance_id
        if self.product_code is not None:
            result['product_code'] = self.product_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('instance_id') is not None:
            self.instance_id = m.get('instance_id')
        if m.get('product_code') is not None:
            self.product_code = m.get('product_code')
        return self


class OpenOcpProductResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class CreateOcpProductsRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        instance_id: str = None,
        product_code: str = None,
        specification: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 实例id
        self.instance_id = instance_id
        # 产品码
        self.product_code = product_code
        # 产品规格
        self.specification = specification

    def validate(self):
        self.validate_required(self.instance_id, 'instance_id')
        self.validate_required(self.product_code, 'product_code')
        self.validate_required(self.specification, 'specification')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.instance_id is not None:
            result['instance_id'] = self.instance_id
        if self.product_code is not None:
            result['product_code'] = self.product_code
        if self.specification is not None:
            result['specification'] = self.specification
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('instance_id') is not None:
            self.instance_id = m.get('instance_id')
        if m.get('product_code') is not None:
            self.product_code = m.get('product_code')
        if m.get('specification') is not None:
            self.specification = m.get('specification')
        return self


class CreateOcpProductsResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class CallbackOcpProductRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        downstatus: bool = None,
        event: str = None,
        instance_id: str = None,
        product_code: str = None,
        tenant_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 任务状态变更，是否成功；
        self.downstatus = downstatus
        # 事件类型：开通、变更、释放、创建、停止、恢复等
        self.event = event
        # 产品实例Id列
        self.instance_id = instance_id
        # 产品码 全局唯一
        self.product_code = product_code
        # 租户id
        self.tenant_id = tenant_id

    def validate(self):
        self.validate_required(self.downstatus, 'downstatus')
        self.validate_required(self.event, 'event')
        self.validate_required(self.instance_id, 'instance_id')
        self.validate_required(self.product_code, 'product_code')
        self.validate_required(self.tenant_id, 'tenant_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.downstatus is not None:
            result['downstatus'] = self.downstatus
        if self.event is not None:
            result['event'] = self.event
        if self.instance_id is not None:
            result['instance_id'] = self.instance_id
        if self.product_code is not None:
            result['product_code'] = self.product_code
        if self.tenant_id is not None:
            result['tenant_id'] = self.tenant_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('downstatus') is not None:
            self.downstatus = m.get('downstatus')
        if m.get('event') is not None:
            self.event = m.get('event')
        if m.get('instance_id') is not None:
            self.instance_id = m.get('instance_id')
        if m.get('product_code') is not None:
            self.product_code = m.get('product_code')
        if m.get('tenant_id') is not None:
            self.tenant_id = m.get('tenant_id')
        return self


class CallbackOcpProductResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class CheckOcpTaskRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        event: str = None,
        instance_id: str = None,
        platform: str = None,
        product_code: str = None,
        tenant_id: str = None,
        access_code: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 事件类型：开通（AF_OPEN）、变更（AF_MODIFY）、释放（AF_RELEASE）、创建（AF_PROVISION）、停止（AF_STOP）、恢复（AF_RESUME）等。
        self.event = event
        # 实例id
        self.instance_id = instance_id
        # 请求平台来源
        self.platform = platform
        # 产品码
        self.product_code = product_code
        # 租户id
        self.tenant_id = tenant_id
        # 商品码
        self.access_code = access_code

    def validate(self):
        self.validate_required(self.event, 'event')
        self.validate_required(self.instance_id, 'instance_id')
        self.validate_required(self.platform, 'platform')
        self.validate_required(self.product_code, 'product_code')
        self.validate_required(self.tenant_id, 'tenant_id')
        self.validate_required(self.access_code, 'access_code')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.event is not None:
            result['event'] = self.event
        if self.instance_id is not None:
            result['instance_id'] = self.instance_id
        if self.platform is not None:
            result['platform'] = self.platform
        if self.product_code is not None:
            result['product_code'] = self.product_code
        if self.tenant_id is not None:
            result['tenant_id'] = self.tenant_id
        if self.access_code is not None:
            result['access_code'] = self.access_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('event') is not None:
            self.event = m.get('event')
        if m.get('instance_id') is not None:
            self.instance_id = m.get('instance_id')
        if m.get('platform') is not None:
            self.platform = m.get('platform')
        if m.get('product_code') is not None:
            self.product_code = m.get('product_code')
        if m.get('tenant_id') is not None:
            self.tenant_id = m.get('tenant_id')
        if m.get('access_code') is not None:
            self.access_code = m.get('access_code')
        return self


class CheckOcpTaskResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        task_result: bool = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 任务是否成功
        self.task_result = task_result

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.task_result is not None:
            result['task_result'] = self.task_result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('task_result') is not None:
            self.task_result = m.get('task_result')
        return self


class ExecOcpTaskRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        event: str = None,
        instance_id: str = None,
        order_no: str = None,
        platform: str = None,
        product_code: str = None,
        specification: str = None,
        tenant_id: str = None,
        access_code: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 事件类型：开通（AF_OPEN）、变更（AF_MODIFY）、释放（AF_RELEASE）、创建（AF_PROVISION）、停止（AF_STOP）、恢复（AF_RESUME）等。
        self.event = event
        # 实例id
        self.instance_id = instance_id
        # 订单号码
        self.order_no = order_no
        # 请求平台来源
        self.platform = platform
        # 产品码
        self.product_code = product_code
        # 产品规格
        self.specification = specification
        # 租户Id
        self.tenant_id = tenant_id
        # 商品码
        self.access_code = access_code

    def validate(self):
        self.validate_required(self.event, 'event')
        self.validate_required(self.instance_id, 'instance_id')
        self.validate_required(self.order_no, 'order_no')
        self.validate_required(self.platform, 'platform')
        self.validate_required(self.product_code, 'product_code')
        self.validate_required(self.specification, 'specification')
        self.validate_required(self.tenant_id, 'tenant_id')
        self.validate_required(self.access_code, 'access_code')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.event is not None:
            result['event'] = self.event
        if self.instance_id is not None:
            result['instance_id'] = self.instance_id
        if self.order_no is not None:
            result['order_no'] = self.order_no
        if self.platform is not None:
            result['platform'] = self.platform
        if self.product_code is not None:
            result['product_code'] = self.product_code
        if self.specification is not None:
            result['specification'] = self.specification
        if self.tenant_id is not None:
            result['tenant_id'] = self.tenant_id
        if self.access_code is not None:
            result['access_code'] = self.access_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('event') is not None:
            self.event = m.get('event')
        if m.get('instance_id') is not None:
            self.instance_id = m.get('instance_id')
        if m.get('order_no') is not None:
            self.order_no = m.get('order_no')
        if m.get('platform') is not None:
            self.platform = m.get('platform')
        if m.get('product_code') is not None:
            self.product_code = m.get('product_code')
        if m.get('specification') is not None:
            self.specification = m.get('specification')
        if m.get('tenant_id') is not None:
            self.tenant_id = m.get('tenant_id')
        if m.get('access_code') is not None:
            self.access_code = m.get('access_code')
        return self


class ExecOcpTaskResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        task_result: bool = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 任务是否成功
        self.task_result = task_result

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.task_result is not None:
            result['task_result'] = self.task_result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('task_result') is not None:
            self.task_result = m.get('task_result')
        return self


class CreateBlockchainInstanceInnerRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        blockchain_name: str = None,
        blockchain_tag: str = None,
        blockchain_type: str = None,
        create_union_info: BaasUnionInfo = None,
        node_number: int = None,
        union_id: int = None,
        group_code: str = None,
        group_sub_code: str = None,
        test_chain: bool = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 区块链名称
        self.blockchain_name = blockchain_name
        # 链打标内容
        self.blockchain_tag = blockchain_tag
        # Tee链/企业版/企业版  enterprise
        self.blockchain_type = blockchain_type
        # 待创建联盟的信息
        self.create_union_info = create_union_info
        # 节点数
        self.node_number = node_number
        # 联盟id
        self.union_id = union_id
        # 业务线code
        self.group_code = group_code
        # 业务线子码
        self.group_sub_code = group_sub_code
        # 是否需要创建测试链
        self.test_chain = test_chain

    def validate(self):
        self.validate_required(self.blockchain_name, 'blockchain_name')
        self.validate_required(self.blockchain_type, 'blockchain_type')
        if self.create_union_info:
            self.create_union_info.validate()
        self.validate_required(self.node_number, 'node_number')
        self.validate_required(self.group_code, 'group_code')
        self.validate_required(self.group_sub_code, 'group_sub_code')
        self.validate_required(self.test_chain, 'test_chain')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.blockchain_name is not None:
            result['blockchain_name'] = self.blockchain_name
        if self.blockchain_tag is not None:
            result['blockchain_tag'] = self.blockchain_tag
        if self.blockchain_type is not None:
            result['blockchain_type'] = self.blockchain_type
        if self.create_union_info is not None:
            result['create_union_info'] = self.create_union_info.to_map()
        if self.node_number is not None:
            result['node_number'] = self.node_number
        if self.union_id is not None:
            result['union_id'] = self.union_id
        if self.group_code is not None:
            result['group_code'] = self.group_code
        if self.group_sub_code is not None:
            result['group_sub_code'] = self.group_sub_code
        if self.test_chain is not None:
            result['test_chain'] = self.test_chain
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('blockchain_name') is not None:
            self.blockchain_name = m.get('blockchain_name')
        if m.get('blockchain_tag') is not None:
            self.blockchain_tag = m.get('blockchain_tag')
        if m.get('blockchain_type') is not None:
            self.blockchain_type = m.get('blockchain_type')
        if m.get('create_union_info') is not None:
            temp_model = BaasUnionInfo()
            self.create_union_info = temp_model.from_map(m['create_union_info'])
        if m.get('node_number') is not None:
            self.node_number = m.get('node_number')
        if m.get('union_id') is not None:
            self.union_id = m.get('union_id')
        if m.get('group_code') is not None:
            self.group_code = m.get('group_code')
        if m.get('group_sub_code') is not None:
            self.group_sub_code = m.get('group_sub_code')
        if m.get('test_chain') is not None:
            self.test_chain = m.get('test_chain')
        return self


class CreateBlockchainInstanceInnerResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # instanceId
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.result is not None:
            result['result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('result') is not None:
            self.result = m.get('result')
        return self


class QueryBlockchainInstanceBizidRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        instance_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 内部建链的实例id
        self.instance_id = instance_id

    def validate(self):
        self.validate_required(self.instance_id, 'instance_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.instance_id is not None:
            result['instance_id'] = self.instance_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('instance_id') is not None:
            self.instance_id = m.get('instance_id')
        return self


class QueryBlockchainInstanceBizidResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: List[CreateBlockchainInfo] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 区块链的相关信息
        self.result = result

    def validate(self):
        if self.result:
            for k in self.result:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['result'] = []
        if self.result is not None:
            for k in self.result:
                result['result'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.result = []
        if m.get('result') is not None:
            for k in m.get('result'):
                temp_model = CreateBlockchainInfo()
                self.result.append(temp_model.from_map(k))
        return self


class CreateApiConsortiumRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        description: str = None,
        name: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 某某联盟的使用场景描述
        self.description = description
        # 联盟名称
        self.name = name

    def validate(self):
        self.validate_required(self.description, 'description')
        self.validate_required(self.name, 'name')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.description is not None:
            result['description'] = self.description
        if self.name is not None:
            result['name'] = self.name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('name') is not None:
            self.name = m.get('name')
        return self


class CreateApiConsortiumResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        request_id: str = None,
        result: Result = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 请求id
        self.request_id = request_id
        # 结果
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.request_id is not None:
            result['request_id'] = self.request_id
        if self.result is not None:
            result['result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('request_id') is not None:
            self.request_id = m.get('request_id')
        if m.get('result') is not None:
            temp_model = Result()
            self.result = temp_model.from_map(m['result'])
        return self


class QueryApiMiniappbrowserAuthtypeRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        ant_chain_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 链 ID
        self.ant_chain_id = ant_chain_id

    def validate(self):
        self.validate_required(self.ant_chain_id, 'ant_chain_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.ant_chain_id is not None:
            result['ant_chain_id'] = self.ant_chain_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('ant_chain_id') is not None:
            self.ant_chain_id = m.get('ant_chain_id')
        return self


class QueryApiMiniappbrowserAuthtypeResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        request_id: str = None,
        result: MiniAppBrowserAuthType = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 请求 ID
        self.request_id = request_id
        # 授权类型
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.request_id is not None:
            result['request_id'] = self.request_id
        if self.result is not None:
            result['result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('request_id') is not None:
            self.request_id = m.get('request_id')
        if m.get('result') is not None:
            temp_model = MiniAppBrowserAuthType()
            self.result = temp_model.from_map(m['result'])
        return self


class QueryStatisticsPortHeightRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        bizid: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 链id
        self.bizid = bizid

    def validate(self):
        self.validate_required(self.bizid, 'bizid')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.bizid is not None:
            result['bizid'] = self.bizid
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('bizid') is not None:
            self.bizid = m.get('bizid')
        return self


class QueryStatisticsPortHeightResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        height: int = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 当前块高
        self.height = height

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.height is not None:
            result['height'] = self.height
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('height') is not None:
            self.height = m.get('height')
        return self


class QueryStatisticPortBizidRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        return self


class QueryStatisticPortBizidResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        biz_list: List[MyChainInfo] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 链授权列表
        self.biz_list = biz_list

    def validate(self):
        if self.biz_list:
            for k in self.biz_list:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['biz_list'] = []
        if self.biz_list is not None:
            for k in self.biz_list:
                result['biz_list'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.biz_list = []
        if m.get('biz_list') is not None:
            for k in m.get('biz_list'):
                temp_model = MyChainInfo()
                self.biz_list.append(temp_model.from_map(k))
        return self


class AddStatisticsPortTaskRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        bizid: str = None,
        end: int = None,
        start: int = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 链id
        self.bizid = bizid
        # 结束块高
        self.end = end
        # 开始块高
        self.start = start

    def validate(self):
        self.validate_required(self.bizid, 'bizid')
        self.validate_required(self.end, 'end')
        self.validate_required(self.start, 'start')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.bizid is not None:
            result['bizid'] = self.bizid
        if self.end is not None:
            result['end'] = self.end
        if self.start is not None:
            result['start'] = self.start
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('bizid') is not None:
            self.bizid = m.get('bizid')
        if m.get('end') is not None:
            self.end = m.get('end')
        if m.get('start') is not None:
            self.start = m.get('start')
        return self


class AddStatisticsPortTaskResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class QueryApiDwhTransactionRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        biz_id: str = None,
        block_hash: str = None,
        end_timestamp: int = None,
        from_: str = None,
        page_no: int = None,
        page_size: int = None,
        start_timestamp: int = None,
        to: str = None,
        transaction_hash: str = None,
        transaction_type: int = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 链bizid
        self.biz_id = biz_id
        # block_hash
        self.block_hash = block_hash
        # end_timestamp
        self.end_timestamp = end_timestamp
        # from
        self.from_ = from_
        # pageNo
        self.page_no = page_no
        # pageSize
        self.page_size = page_size
        # startTimestamp
        self.start_timestamp = start_timestamp
        # to
        self.to = to
        # transactionHash
        self.transaction_hash = transaction_hash
        # transactionType
        self.transaction_type = transaction_type

    def validate(self):
        self.validate_required(self.biz_id, 'biz_id')
        if self.page_size is not None:
            self.validate_maximum(self.page_size, 'page_size', 100)

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.biz_id is not None:
            result['biz_id'] = self.biz_id
        if self.block_hash is not None:
            result['block_hash'] = self.block_hash
        if self.end_timestamp is not None:
            result['end_timestamp'] = self.end_timestamp
        if self.from_ is not None:
            result['from'] = self.from_
        if self.page_no is not None:
            result['page_no'] = self.page_no
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.start_timestamp is not None:
            result['start_timestamp'] = self.start_timestamp
        if self.to is not None:
            result['to'] = self.to
        if self.transaction_hash is not None:
            result['transaction_hash'] = self.transaction_hash
        if self.transaction_type is not None:
            result['transaction_type'] = self.transaction_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('biz_id') is not None:
            self.biz_id = m.get('biz_id')
        if m.get('block_hash') is not None:
            self.block_hash = m.get('block_hash')
        if m.get('end_timestamp') is not None:
            self.end_timestamp = m.get('end_timestamp')
        if m.get('from') is not None:
            self.from_ = m.get('from')
        if m.get('page_no') is not None:
            self.page_no = m.get('page_no')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('start_timestamp') is not None:
            self.start_timestamp = m.get('start_timestamp')
        if m.get('to') is not None:
            self.to = m.get('to')
        if m.get('transaction_hash') is not None:
            self.transaction_hash = m.get('transaction_hash')
        if m.get('transaction_type') is not None:
            self.transaction_type = m.get('transaction_type')
        return self


class QueryApiDwhTransactionResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        transaction_list: List[TransactionPo] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # transaction_list
        self.transaction_list = transaction_list

    def validate(self):
        if self.transaction_list:
            for k in self.transaction_list:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['transaction_list'] = []
        if self.transaction_list is not None:
            for k in self.transaction_list:
                result['transaction_list'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.transaction_list = []
        if m.get('transaction_list') is not None:
            for k in m.get('transaction_list'):
                temp_model = TransactionPo()
                self.transaction_list.append(temp_model.from_map(k))
        return self


class QueryApiDwhAccountRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        account_hash: str = None,
        biz_id: str = None,
        end_timestamp: int = None,
        page_no: int = None,
        page_size: int = None,
        start_timestamp: int = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 账户hash ，如果根据账户hash查询账户信息可以填写该字段
        self.account_hash = account_hash
        # 链id
        self.biz_id = biz_id
        # 结束时间，如果查询时间段创建的账户，可以填写该字段
        self.end_timestamp = end_timestamp
        # 页数，分页使用，从1开始
        self.page_no = page_no
        # 分页大小，取值不能超过100，默认100
        self.page_size = page_size
        # 开始时间，如果查询时间段创建的账户，可以填写该字段
        self.start_timestamp = start_timestamp

    def validate(self):
        self.validate_required(self.biz_id, 'biz_id')
        if self.page_size is not None:
            self.validate_maximum(self.page_size, 'page_size', 100)
            self.validate_minimum(self.page_size, 'page_size', 0)

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.account_hash is not None:
            result['account_hash'] = self.account_hash
        if self.biz_id is not None:
            result['biz_id'] = self.biz_id
        if self.end_timestamp is not None:
            result['end_timestamp'] = self.end_timestamp
        if self.page_no is not None:
            result['page_no'] = self.page_no
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.start_timestamp is not None:
            result['start_timestamp'] = self.start_timestamp
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('account_hash') is not None:
            self.account_hash = m.get('account_hash')
        if m.get('biz_id') is not None:
            self.biz_id = m.get('biz_id')
        if m.get('end_timestamp') is not None:
            self.end_timestamp = m.get('end_timestamp')
        if m.get('page_no') is not None:
            self.page_no = m.get('page_no')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('start_timestamp') is not None:
            self.start_timestamp = m.get('start_timestamp')
        return self


class QueryApiDwhAccountResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        account_list: List[AccountPo] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 账户列表
        self.account_list = account_list

    def validate(self):
        if self.account_list:
            for k in self.account_list:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['account_list'] = []
        if self.account_list is not None:
            for k in self.account_list:
                result['account_list'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.account_list = []
        if m.get('account_list') is not None:
            for k in m.get('account_list'):
                temp_model = AccountPo()
                self.account_list.append(temp_model.from_map(k))
        return self


class QueryApiDwhContractRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        biz_id: str = None,
        contract: str = None,
        end_timestamp: int = None,
        page_no: int = None,
        page_size: int = None,
        start_timestamp: int = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # biz_id 链id
        self.biz_id = biz_id
        # 合约地址：如果根据合约地址查询，可以填该字段
        self.contract = contract
        # 结束时间：如果根据时间范围查询创建的合约，可以填写该字段
        self.end_timestamp = end_timestamp
        # 页数，分页使用，从1开始默认为1
        self.page_no = page_no
        # 分页大小，取值不能超过100，默认100
        self.page_size = page_size
        # 开始时间：如果根据时间范围查询创建的账户，可以填写该字段
        self.start_timestamp = start_timestamp

    def validate(self):
        if self.page_size is not None:
            self.validate_maximum(self.page_size, 'page_size', 100)
            self.validate_minimum(self.page_size, 'page_size', 0)

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.biz_id is not None:
            result['biz_id'] = self.biz_id
        if self.contract is not None:
            result['contract'] = self.contract
        if self.end_timestamp is not None:
            result['end_timestamp'] = self.end_timestamp
        if self.page_no is not None:
            result['page_no'] = self.page_no
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.start_timestamp is not None:
            result['start_timestamp'] = self.start_timestamp
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('biz_id') is not None:
            self.biz_id = m.get('biz_id')
        if m.get('contract') is not None:
            self.contract = m.get('contract')
        if m.get('end_timestamp') is not None:
            self.end_timestamp = m.get('end_timestamp')
        if m.get('page_no') is not None:
            self.page_no = m.get('page_no')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('start_timestamp') is not None:
            self.start_timestamp = m.get('start_timestamp')
        return self


class QueryApiDwhContractResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        contract_list: List[ContractInfo] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 合约列表
        self.contract_list = contract_list

    def validate(self):
        if self.contract_list:
            for k in self.contract_list:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['contract_list'] = []
        if self.contract_list is not None:
            for k in self.contract_list:
                result['contract_list'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.contract_list = []
        if m.get('contract_list') is not None:
            for k in m.get('contract_list'):
                temp_model = ContractInfo()
                self.contract_list.append(temp_model.from_map(k))
        return self


class QueryApiDwhbTransactionRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        biz_id: str = None,
        hash_list: List[str] = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # biz_id
        self.biz_id = biz_id
        # hash_list
        self.hash_list = hash_list

    def validate(self):
        self.validate_required(self.biz_id, 'biz_id')
        self.validate_required(self.hash_list, 'hash_list')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.biz_id is not None:
            result['biz_id'] = self.biz_id
        if self.hash_list is not None:
            result['hash_list'] = self.hash_list
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('biz_id') is not None:
            self.biz_id = m.get('biz_id')
        if m.get('hash_list') is not None:
            self.hash_list = m.get('hash_list')
        return self


class QueryApiDwhbTransactionResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        transaction_list: List[TransactionInfo] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # transaction
        self.transaction_list = transaction_list

    def validate(self):
        if self.transaction_list:
            for k in self.transaction_list:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['transaction_list'] = []
        if self.transaction_list is not None:
            for k in self.transaction_list:
                result['transaction_list'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.transaction_list = []
        if m.get('transaction_list') is not None:
            for k in m.get('transaction_list'):
                temp_model = TransactionInfo()
                self.transaction_list.append(temp_model.from_map(k))
        return self


class CreateContractRecordRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        abi_oss_key: str = None,
        bizid: str = None,
        bytecode_oss_key: str = None,
        identity: str = None,
        instance_name: str = None,
        name: str = None,
        tx_hash: str = None,
        type: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # abi对应oss key
        self.abi_oss_key = abi_oss_key
        # 区块链唯一标识
        self.bizid = bizid
        # bytecode对应oss key
        self.bytecode_oss_key = bytecode_oss_key
        # 16进制表示的合约identity
        self.identity = identity
        # 合约代码中定义的合约实例名，比如solidity的contract 关键字后面的命名
        self.instance_name = instance_name
        # 合约名称
        self.name = name
        # 交易hash
        self.tx_hash = tx_hash
        # solidity|cpp|go
        self.type = type

    def validate(self):
        self.validate_required(self.abi_oss_key, 'abi_oss_key')
        self.validate_required(self.bizid, 'bizid')
        self.validate_required(self.bytecode_oss_key, 'bytecode_oss_key')
        self.validate_required(self.identity, 'identity')
        if self.identity is not None:
            self.validate_max_length(self.identity, 'identity', 64)
        self.validate_required(self.instance_name, 'instance_name')
        self.validate_required(self.name, 'name')
        self.validate_required(self.tx_hash, 'tx_hash')
        if self.tx_hash is not None:
            self.validate_max_length(self.tx_hash, 'tx_hash', 64)
        self.validate_required(self.type, 'type')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.abi_oss_key is not None:
            result['abi_oss_key'] = self.abi_oss_key
        if self.bizid is not None:
            result['bizid'] = self.bizid
        if self.bytecode_oss_key is not None:
            result['bytecode_oss_key'] = self.bytecode_oss_key
        if self.identity is not None:
            result['identity'] = self.identity
        if self.instance_name is not None:
            result['instance_name'] = self.instance_name
        if self.name is not None:
            result['name'] = self.name
        if self.tx_hash is not None:
            result['tx_hash'] = self.tx_hash
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('abi_oss_key') is not None:
            self.abi_oss_key = m.get('abi_oss_key')
        if m.get('bizid') is not None:
            self.bizid = m.get('bizid')
        if m.get('bytecode_oss_key') is not None:
            self.bytecode_oss_key = m.get('bytecode_oss_key')
        if m.get('identity') is not None:
            self.identity = m.get('identity')
        if m.get('instance_name') is not None:
            self.instance_name = m.get('instance_name')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('tx_hash') is not None:
            self.tx_hash = m.get('tx_hash')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class CreateContractRecordResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: bool = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 是否成功
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.result is not None:
            result['result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('result') is not None:
            self.result = m.get('result')
        return self


class GetContractRecordRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        bizid: str = None,
        identity: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 区块链唯一标识
        self.bizid = bizid
        # 16进制表示的合约identity
        self.identity = identity

    def validate(self):
        self.validate_required(self.bizid, 'bizid')
        self.validate_required(self.identity, 'identity')
        if self.identity is not None:
            self.validate_max_length(self.identity, 'identity', 64)

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.bizid is not None:
            result['bizid'] = self.bizid
        if self.identity is not None:
            result['identity'] = self.identity
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('bizid') is not None:
            self.bizid = m.get('bizid')
        if m.get('identity') is not None:
            self.identity = m.get('identity')
        return self


class GetContractRecordResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: ContractRecord = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 合约部署记录
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.result is not None:
            result['result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('result') is not None:
            temp_model = ContractRecord()
            self.result = temp_model.from_map(m['result'])
        return self


class UpdateContractRecordRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        abi_oss_key: str = None,
        bizid: str = None,
        bytecode_oss_key: str = None,
        identity: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # abi对应oss key
        self.abi_oss_key = abi_oss_key
        # 区块链唯一标识
        self.bizid = bizid
        # bytecode对应oss key
        self.bytecode_oss_key = bytecode_oss_key
        # 16进制表示的合约identity
        self.identity = identity

    def validate(self):
        self.validate_required(self.abi_oss_key, 'abi_oss_key')
        self.validate_required(self.bizid, 'bizid')
        self.validate_required(self.bytecode_oss_key, 'bytecode_oss_key')
        self.validate_required(self.identity, 'identity')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.abi_oss_key is not None:
            result['abi_oss_key'] = self.abi_oss_key
        if self.bizid is not None:
            result['bizid'] = self.bizid
        if self.bytecode_oss_key is not None:
            result['bytecode_oss_key'] = self.bytecode_oss_key
        if self.identity is not None:
            result['identity'] = self.identity
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('abi_oss_key') is not None:
            self.abi_oss_key = m.get('abi_oss_key')
        if m.get('bizid') is not None:
            self.bizid = m.get('bizid')
        if m.get('bytecode_oss_key') is not None:
            self.bytecode_oss_key = m.get('bytecode_oss_key')
        if m.get('identity') is not None:
            self.identity = m.get('identity')
        return self


class UpdateContractRecordResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: bool = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 是否成功
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.result is not None:
            result['result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('result') is not None:
            self.result = m.get('result')
        return self


class OnlineContractRecordRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        bizid: str = None,
        identity: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 区块链唯一标识
        self.bizid = bizid
        # 16进制表示的合约identity
        self.identity = identity

    def validate(self):
        self.validate_required(self.bizid, 'bizid')
        self.validate_required(self.identity, 'identity')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.bizid is not None:
            result['bizid'] = self.bizid
        if self.identity is not None:
            result['identity'] = self.identity
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('bizid') is not None:
            self.bizid = m.get('bizid')
        if m.get('identity') is not None:
            self.identity = m.get('identity')
        return self


class OnlineContractRecordResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: bool = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 是否成功
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.result is not None:
            result['result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('result') is not None:
            self.result = m.get('result')
        return self


class OfflineContractRecordRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        bizid: str = None,
        identity: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 区块链唯一标识
        self.bizid = bizid
        # 16进制表示的合约identity
        self.identity = identity

    def validate(self):
        self.validate_required(self.bizid, 'bizid')
        self.validate_required(self.identity, 'identity')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.bizid is not None:
            result['bizid'] = self.bizid
        if self.identity is not None:
            result['identity'] = self.identity
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('bizid') is not None:
            self.bizid = m.get('bizid')
        if m.get('identity') is not None:
            self.identity = m.get('identity')
        return self


class OfflineContractRecordResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: bool = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 是否成功
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.result is not None:
            result['result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('result') is not None:
            self.result = m.get('result')
        return self


class QueryContractRecordRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        bizid: str = None,
        page_no: int = None,
        page_size: int = None,
        query_status: int = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 区块链唯一标识
        self.bizid = bizid
        # 页号
        self.page_no = page_no
        # 页大小
        self.page_size = page_size
        # 查询状态
        self.query_status = query_status

    def validate(self):
        self.validate_required(self.bizid, 'bizid')
        self.validate_required(self.page_no, 'page_no')
        self.validate_required(self.page_size, 'page_size')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.bizid is not None:
            result['bizid'] = self.bizid
        if self.page_no is not None:
            result['page_no'] = self.page_no
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.query_status is not None:
            result['query_status'] = self.query_status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('bizid') is not None:
            self.bizid = m.get('bizid')
        if m.get('page_no') is not None:
            self.page_no = m.get('page_no')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('query_status') is not None:
            self.query_status = m.get('query_status')
        return self


class QueryContractRecordResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        content: List[ContractRecord] = None,
        number: str = None,
        size: str = None,
        total_elements: int = None,
        total_pages: int = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 当前页元素列表
        self.content = content
        # 当前页号
        self.number = number
        # 当前页大小
        self.size = size
        # 元素总个数
        self.total_elements = total_elements
        # 总页数
        self.total_pages = total_pages

    def validate(self):
        if self.content:
            for k in self.content:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['content'] = []
        if self.content is not None:
            for k in self.content:
                result['content'].append(k.to_map() if k else None)
        if self.number is not None:
            result['number'] = self.number
        if self.size is not None:
            result['size'] = self.size
        if self.total_elements is not None:
            result['total_elements'] = self.total_elements
        if self.total_pages is not None:
            result['total_pages'] = self.total_pages
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.content = []
        if m.get('content') is not None:
            for k in m.get('content'):
                temp_model = ContractRecord()
                self.content.append(temp_model.from_map(k))
        if m.get('number') is not None:
            self.number = m.get('number')
        if m.get('size') is not None:
            self.size = m.get('size')
        if m.get('total_elements') is not None:
            self.total_elements = m.get('total_elements')
        if m.get('total_pages') is not None:
            self.total_pages = m.get('total_pages')
        return self


class ExecContractDelegateRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        bizid: str = None,
        body: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 区块链唯一标识
        self.bizid = bizid
        # 交易消息体
        self.body = body

    def validate(self):
        self.validate_required(self.bizid, 'bizid')
        self.validate_required(self.body, 'body')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.bizid is not None:
            result['bizid'] = self.bizid
        if self.body is not None:
            result['body'] = self.body
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('bizid') is not None:
            self.bizid = m.get('bizid')
        if m.get('body') is not None:
            self.body = m.get('body')
        return self


class ExecContractDelegateResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 返回结果
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.result is not None:
            result['result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('result') is not None:
            self.result = m.get('result')
        return self


class ExecContractServiceRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        bizid: str = None,
        body: str = None,
        identity: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 区块链唯一标识
        self.bizid = bizid
        # 交易消息体
        self.body = body
        # 16进制表示的合约identity
        self.identity = identity

    def validate(self):
        self.validate_required(self.bizid, 'bizid')
        self.validate_required(self.body, 'body')
        self.validate_required(self.identity, 'identity')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.bizid is not None:
            result['bizid'] = self.bizid
        if self.body is not None:
            result['body'] = self.body
        if self.identity is not None:
            result['identity'] = self.identity
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('bizid') is not None:
            self.bizid = m.get('bizid')
        if m.get('body') is not None:
            self.body = m.get('body')
        if m.get('identity') is not None:
            self.identity = m.get('identity')
        return self


class ExecContractServiceResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 执行结果
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.result is not None:
            result['result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('result') is not None:
            self.result = m.get('result')
        return self


class GetContractConfigChainRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        return self


class GetContractConfigChainResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: ContractIdeConfigResult = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 当前租户具有访问权限的合约链配置信息列表
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.result is not None:
            result['result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('result') is not None:
            temp_model = ContractIdeConfigResult()
            self.result = temp_model.from_map(m['result'])
        return self


class GetContractAbiUrlRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        return self


class GetContractAbiUrlResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: PresignedUrlPolicy = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 可用于上传文件到oss的相关oss client字段配置，包括服务端的签名，url超期时间等。
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.result is not None:
            result['result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('result') is not None:
            temp_model = PresignedUrlPolicy()
            self.result = temp_model.from_map(m['result'])
        return self


class GetContractBytecodeUrlRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        return self


class GetContractBytecodeUrlResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: PresignedUrlPolicy = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 可用于上传文件到oss的相关oss client字段配置，包括服务端的签名，url超期时间等。
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.result is not None:
            result['result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('result') is not None:
            temp_model = PresignedUrlPolicy()
            self.result = temp_model.from_map(m['result'])
        return self


class CreateDataauthorizationParticipantRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        account: str = None,
        biz_uid: str = None,
        blockchain_id: str = None,
        credit_number: str = None,
        extension_info: str = None,
        name: str = None,
        notification_service: str = None,
        public_info: str = None,
        role: List[str] = None,
        space_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 账户名称
        self.account = account
        # 业务系统唯一标示
        self.biz_uid = biz_uid
        # 区块链ID
        self.blockchain_id = blockchain_id
        # 信用编号
        self.credit_number = credit_number
        # 扩展参数，标准JSON格式
        self.extension_info = extension_info
        # 用户名称
        self.name = name
        # 回调通知服务地址
        self.notification_service = notification_service
        # did doc中的公开信息
        self.public_info = public_info
        # 用户角色列表
        self.role = role
        # 空间ID
        self.space_id = space_id

    def validate(self):
        self.validate_required(self.biz_uid, 'biz_uid')
        if self.biz_uid is not None:
            self.validate_max_length(self.biz_uid, 'biz_uid', 64)
        if self.extension_info is not None:
            self.validate_max_length(self.extension_info, 'extension_info', 2000)
        self.validate_required(self.name, 'name')
        if self.name is not None:
            self.validate_max_length(self.name, 'name', 64)
        self.validate_required(self.role, 'role')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.account is not None:
            result['account'] = self.account
        if self.biz_uid is not None:
            result['biz_uid'] = self.biz_uid
        if self.blockchain_id is not None:
            result['blockchain_id'] = self.blockchain_id
        if self.credit_number is not None:
            result['credit_number'] = self.credit_number
        if self.extension_info is not None:
            result['extension_info'] = self.extension_info
        if self.name is not None:
            result['name'] = self.name
        if self.notification_service is not None:
            result['notification_service'] = self.notification_service
        if self.public_info is not None:
            result['public_info'] = self.public_info
        if self.role is not None:
            result['role'] = self.role
        if self.space_id is not None:
            result['space_id'] = self.space_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('account') is not None:
            self.account = m.get('account')
        if m.get('biz_uid') is not None:
            self.biz_uid = m.get('biz_uid')
        if m.get('blockchain_id') is not None:
            self.blockchain_id = m.get('blockchain_id')
        if m.get('credit_number') is not None:
            self.credit_number = m.get('credit_number')
        if m.get('extension_info') is not None:
            self.extension_info = m.get('extension_info')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('notification_service') is not None:
            self.notification_service = m.get('notification_service')
        if m.get('public_info') is not None:
            self.public_info = m.get('public_info')
        if m.get('role') is not None:
            self.role = m.get('role')
        if m.get('space_id') is not None:
            self.space_id = m.get('space_id')
        return self


class CreateDataauthorizationParticipantResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        participant: Participant = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 参与方信息
        self.participant = participant

    def validate(self):
        if self.participant:
            self.participant.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.participant is not None:
            result['participant'] = self.participant.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('participant') is not None:
            temp_model = Participant()
            self.participant = temp_model.from_map(m['participant'])
        return self


class DeleteDataauthorizationParticipantRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        participant_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 参与方ID
        self.participant_id = participant_id

    def validate(self):
        self.validate_required(self.participant_id, 'participant_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.participant_id is not None:
            result['participant_id'] = self.participant_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('participant_id') is not None:
            self.participant_id = m.get('participant_id')
        return self


class DeleteDataauthorizationParticipantResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class UpdateDataauthorizationParticipantRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        extension_info: str = None,
        name: str = None,
        notification_service: str = None,
        participant_id: str = None,
        public_info: str = None,
        role: List[str] = None,
        account: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 扩展参数，标准JSON格式
        self.extension_info = extension_info
        # 用户名称
        self.name = name
        # 回调通知服务地址
        self.notification_service = notification_service
        # 参与方ID
        self.participant_id = participant_id
        # did doc中的公开信息
        self.public_info = public_info
        # 用户角色列表
        self.role = role
        # 账户名称
        self.account = account

    def validate(self):
        if self.extension_info is not None:
            self.validate_max_length(self.extension_info, 'extension_info', 2000)
        self.validate_required(self.name, 'name')
        if self.name is not None:
            self.validate_max_length(self.name, 'name', 64)
        self.validate_required(self.participant_id, 'participant_id')
        if self.participant_id is not None:
            self.validate_max_length(self.participant_id, 'participant_id', 100)
        self.validate_required(self.role, 'role')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.extension_info is not None:
            result['extension_info'] = self.extension_info
        if self.name is not None:
            result['name'] = self.name
        if self.notification_service is not None:
            result['notification_service'] = self.notification_service
        if self.participant_id is not None:
            result['participant_id'] = self.participant_id
        if self.public_info is not None:
            result['public_info'] = self.public_info
        if self.role is not None:
            result['role'] = self.role
        if self.account is not None:
            result['account'] = self.account
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('extension_info') is not None:
            self.extension_info = m.get('extension_info')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('notification_service') is not None:
            self.notification_service = m.get('notification_service')
        if m.get('participant_id') is not None:
            self.participant_id = m.get('participant_id')
        if m.get('public_info') is not None:
            self.public_info = m.get('public_info')
        if m.get('role') is not None:
            self.role = m.get('role')
        if m.get('account') is not None:
            self.account = m.get('account')
        return self


class UpdateDataauthorizationParticipantResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class QueryDataauthorizationParticipantRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        participant_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 参与方ID
        self.participant_id = participant_id

    def validate(self):
        self.validate_required(self.participant_id, 'participant_id')
        if self.participant_id is not None:
            self.validate_max_length(self.participant_id, 'participant_id', 100)

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.participant_id is not None:
            result['participant_id'] = self.participant_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('participant_id') is not None:
            self.participant_id = m.get('participant_id')
        return self


class QueryDataauthorizationParticipantResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        participant: Participant = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 参与方信息
        self.participant = participant

    def validate(self):
        if self.participant:
            self.participant.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.participant is not None:
            result['participant'] = self.participant.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('participant') is not None:
            temp_model = Participant()
            self.participant = temp_model.from_map(m['participant'])
        return self


class ListDataauthorizationParticipantRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        space_id: str = None,
        role: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 空间ID
        self.space_id = space_id
        # 用户角色
        self.role = role

    def validate(self):
        self.validate_required(self.role, 'role')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.space_id is not None:
            result['space_id'] = self.space_id
        if self.role is not None:
            result['role'] = self.role
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('space_id') is not None:
            self.space_id = m.get('space_id')
        if m.get('role') is not None:
            self.role = m.get('role')
        return self


class ListDataauthorizationParticipantResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        participants: List[Participant] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 参与方列表
        self.participants = participants

    def validate(self):
        if self.participants:
            for k in self.participants:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['participants'] = []
        if self.participants is not None:
            for k in self.participants:
                result['participants'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.participants = []
        if m.get('participants') is not None:
            for k in m.get('participants'):
                temp_model = Participant()
                self.participants.append(temp_model.from_map(k))
        return self


class CreateDataauthorizationDataEntityRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        biz_uid: str = None,
        blockchain_id: str = None,
        category: str = None,
        data_model_id: str = None,
        extension_info: str = None,
        name: str = None,
        owner_id: str = None,
        process_template: List[ProcessNode] = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 业务系统数据对象唯一标示
        self.biz_uid = biz_uid
        # 区块链ID
        self.blockchain_id = blockchain_id
        # 数据类别
        self.category = category
        # 数据模型ID
        self.data_model_id = data_model_id
        # 扩展参数，标准JSON格式
        self.extension_info = extension_info
        # 数据名称
        self.name = name
        # 数据所有者ID
        self.owner_id = owner_id
        # 审批模版
        self.process_template = process_template

    def validate(self):
        self.validate_required(self.biz_uid, 'biz_uid')
        self.validate_required(self.category, 'category')
        if self.category is not None:
            self.validate_max_length(self.category, 'category', 32)
        if self.extension_info is not None:
            self.validate_max_length(self.extension_info, 'extension_info', 2000)
        self.validate_required(self.name, 'name')
        if self.name is not None:
            self.validate_max_length(self.name, 'name', 64)
        self.validate_required(self.owner_id, 'owner_id')
        if self.owner_id is not None:
            self.validate_max_length(self.owner_id, 'owner_id', 100)
        if self.process_template:
            for k in self.process_template:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.biz_uid is not None:
            result['biz_uid'] = self.biz_uid
        if self.blockchain_id is not None:
            result['blockchain_id'] = self.blockchain_id
        if self.category is not None:
            result['category'] = self.category
        if self.data_model_id is not None:
            result['data_model_id'] = self.data_model_id
        if self.extension_info is not None:
            result['extension_info'] = self.extension_info
        if self.name is not None:
            result['name'] = self.name
        if self.owner_id is not None:
            result['owner_id'] = self.owner_id
        result['process_template'] = []
        if self.process_template is not None:
            for k in self.process_template:
                result['process_template'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('biz_uid') is not None:
            self.biz_uid = m.get('biz_uid')
        if m.get('blockchain_id') is not None:
            self.blockchain_id = m.get('blockchain_id')
        if m.get('category') is not None:
            self.category = m.get('category')
        if m.get('data_model_id') is not None:
            self.data_model_id = m.get('data_model_id')
        if m.get('extension_info') is not None:
            self.extension_info = m.get('extension_info')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('owner_id') is not None:
            self.owner_id = m.get('owner_id')
        self.process_template = []
        if m.get('process_template') is not None:
            for k in m.get('process_template'):
                temp_model = ProcessNode()
                self.process_template.append(temp_model.from_map(k))
        return self


class CreateDataauthorizationDataEntityResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data_id: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 数据对象ID
        self.data_id = data_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.data_id is not None:
            result['data_id'] = self.data_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('data_id') is not None:
            self.data_id = m.get('data_id')
        return self


class QueryDataauthorizationDataEntityRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        data_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 数据ID
        self.data_id = data_id

    def validate(self):
        self.validate_required(self.data_id, 'data_id')
        if self.data_id is not None:
            self.validate_max_length(self.data_id, 'data_id', 100)

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.data_id is not None:
            result['data_id'] = self.data_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('data_id') is not None:
            self.data_id = m.get('data_id')
        return self


class QueryDataauthorizationDataEntityResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data_entity: DataEntity = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 数据目录详细信息
        self.data_entity = data_entity

    def validate(self):
        if self.data_entity:
            self.data_entity.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.data_entity is not None:
            result['data_entity'] = self.data_entity.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('data_entity') is not None:
            temp_model = DataEntity()
            self.data_entity = temp_model.from_map(m['data_entity'])
        return self


class UpdateDataauthorizationPublicKeyRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        public_keys: List[PublicKey] = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 公钥列表
        self.public_keys = public_keys

    def validate(self):
        self.validate_required(self.public_keys, 'public_keys')
        if self.public_keys:
            for k in self.public_keys:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        result['public_keys'] = []
        if self.public_keys is not None:
            for k in self.public_keys:
                result['public_keys'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        self.public_keys = []
        if m.get('public_keys') is not None:
            for k in m.get('public_keys'):
                temp_model = PublicKey()
                self.public_keys.append(temp_model.from_map(k))
        return self


class UpdateDataauthorizationPublicKeyResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class ListDataauthorizationPublicKeyRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        public_key_relations: List[PublicKeyRelation] = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 生成公钥时的关联关系
        self.public_key_relations = public_key_relations

    def validate(self):
        self.validate_required(self.public_key_relations, 'public_key_relations')
        if self.public_key_relations:
            for k in self.public_key_relations:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        result['public_key_relations'] = []
        if self.public_key_relations is not None:
            for k in self.public_key_relations:
                result['public_key_relations'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        self.public_key_relations = []
        if m.get('public_key_relations') is not None:
            for k in m.get('public_key_relations'):
                temp_model = PublicKeyRelation()
                self.public_key_relations.append(temp_model.from_map(k))
        return self


class ListDataauthorizationPublicKeyResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        public_keys: List[PublicKey] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 公钥列表
        self.public_keys = public_keys

    def validate(self):
        if self.public_keys:
            for k in self.public_keys:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['public_keys'] = []
        if self.public_keys is not None:
            for k in self.public_keys:
                result['public_keys'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.public_keys = []
        if m.get('public_keys') is not None:
            for k in m.get('public_keys'):
                temp_model = PublicKey()
                self.public_keys.append(temp_model.from_map(k))
        return self


class OpenDataauthorizationAuthorizationServiceRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        tenant_id: str = None,
        tenant_access_key: str = None,
        remark: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 租户ID
        self.tenant_id = tenant_id
        # 租户AK
        self.tenant_access_key = tenant_access_key
        # 开通原因
        self.remark = remark

    def validate(self):
        self.validate_required(self.tenant_id, 'tenant_id')
        if self.tenant_id is not None:
            self.validate_max_length(self.tenant_id, 'tenant_id', 50)
        if self.remark is not None:
            self.validate_max_length(self.remark, 'remark', 255)

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.tenant_id is not None:
            result['tenant_id'] = self.tenant_id
        if self.tenant_access_key is not None:
            result['tenant_access_key'] = self.tenant_access_key
        if self.remark is not None:
            result['remark'] = self.remark
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('tenant_id') is not None:
            self.tenant_id = m.get('tenant_id')
        if m.get('tenant_access_key') is not None:
            self.tenant_access_key = m.get('tenant_access_key')
        if m.get('remark') is not None:
            self.remark = m.get('remark')
        return self


class OpenDataauthorizationAuthorizationServiceResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        tenant_access_key: str = None,
        tenant_id: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 租户AK
        self.tenant_access_key = tenant_access_key
        # 租户ID
        self.tenant_id = tenant_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.tenant_access_key is not None:
            result['tenant_access_key'] = self.tenant_access_key
        if self.tenant_id is not None:
            result['tenant_id'] = self.tenant_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('tenant_access_key') is not None:
            self.tenant_access_key = m.get('tenant_access_key')
        if m.get('tenant_id') is not None:
            self.tenant_id = m.get('tenant_id')
        return self


class CloseDataauthorizationAuthorizationServiceRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        tenant_id: str = None,
        remark: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 租户ID
        self.tenant_id = tenant_id
        # 关闭服务原因
        self.remark = remark

    def validate(self):
        self.validate_required(self.tenant_id, 'tenant_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.tenant_id is not None:
            result['tenant_id'] = self.tenant_id
        if self.remark is not None:
            result['remark'] = self.remark
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('tenant_id') is not None:
            self.tenant_id = m.get('tenant_id')
        if m.get('remark') is not None:
            self.remark = m.get('remark')
        return self


class CloseDataauthorizationAuthorizationServiceResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class ApplyDataauthorizationAuthorizationRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        applicant_id: str = None,
        applicant_time: int = None,
        biz_uid: str = None,
        comment: str = None,
        data_id: str = None,
        extension_info: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 申请人ID
        self.applicant_id = applicant_id
        # 1592877833149
        self.applicant_time = applicant_time
        # 申请ID，业务系统唯一
        self.biz_uid = biz_uid
        # 申请原因
        self.comment = comment
        # 数据ID
        self.data_id = data_id
        # 扩展参数
        self.extension_info = extension_info

    def validate(self):
        self.validate_required(self.applicant_id, 'applicant_id')
        self.validate_required(self.applicant_time, 'applicant_time')
        self.validate_required(self.biz_uid, 'biz_uid')
        self.validate_required(self.comment, 'comment')
        self.validate_required(self.data_id, 'data_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.applicant_id is not None:
            result['applicant_id'] = self.applicant_id
        if self.applicant_time is not None:
            result['applicant_time'] = self.applicant_time
        if self.biz_uid is not None:
            result['biz_uid'] = self.biz_uid
        if self.comment is not None:
            result['comment'] = self.comment
        if self.data_id is not None:
            result['data_id'] = self.data_id
        if self.extension_info is not None:
            result['extension_info'] = self.extension_info
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('applicant_id') is not None:
            self.applicant_id = m.get('applicant_id')
        if m.get('applicant_time') is not None:
            self.applicant_time = m.get('applicant_time')
        if m.get('biz_uid') is not None:
            self.biz_uid = m.get('biz_uid')
        if m.get('comment') is not None:
            self.comment = m.get('comment')
        if m.get('data_id') is not None:
            self.data_id = m.get('data_id')
        if m.get('extension_info') is not None:
            self.extension_info = m.get('extension_info')
        return self


class ApplyDataauthorizationAuthorizationResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        process_result: ProcessResult = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 申请处理结果
        self.process_result = process_result

    def validate(self):
        if self.process_result:
            self.process_result.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.process_result is not None:
            result['process_result'] = self.process_result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('process_result') is not None:
            temp_model = ProcessResult()
            self.process_result = temp_model.from_map(m['process_result'])
        return self


class ExecDataauthorizationProcessRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        comment: str = None,
        extension_info: str = None,
        forward_node_ids: List[str] = None,
        operate_result: str = None,
        operate_time: int = None,
        operator_id: str = None,
        process_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 审批操作意见
        self.comment = comment
        # 扩展参数
        self.extension_info = extension_info
        # 新节点ID列表
        self.forward_node_ids = forward_node_ids
        # 审批操作结果
        self.operate_result = operate_result
        # 审批操作时间
        self.operate_time = operate_time
        # 审批操作人ID
        self.operator_id = operator_id
        # 流程ID
        self.process_id = process_id

    def validate(self):
        self.validate_required(self.comment, 'comment')
        self.validate_required(self.operate_result, 'operate_result')
        self.validate_required(self.operate_time, 'operate_time')
        self.validate_required(self.operator_id, 'operator_id')
        self.validate_required(self.process_id, 'process_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.comment is not None:
            result['comment'] = self.comment
        if self.extension_info is not None:
            result['extension_info'] = self.extension_info
        if self.forward_node_ids is not None:
            result['forward_node_ids'] = self.forward_node_ids
        if self.operate_result is not None:
            result['operate_result'] = self.operate_result
        if self.operate_time is not None:
            result['operate_time'] = self.operate_time
        if self.operator_id is not None:
            result['operator_id'] = self.operator_id
        if self.process_id is not None:
            result['process_id'] = self.process_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('comment') is not None:
            self.comment = m.get('comment')
        if m.get('extension_info') is not None:
            self.extension_info = m.get('extension_info')
        if m.get('forward_node_ids') is not None:
            self.forward_node_ids = m.get('forward_node_ids')
        if m.get('operate_result') is not None:
            self.operate_result = m.get('operate_result')
        if m.get('operate_time') is not None:
            self.operate_time = m.get('operate_time')
        if m.get('operator_id') is not None:
            self.operator_id = m.get('operator_id')
        if m.get('process_id') is not None:
            self.process_id = m.get('process_id')
        return self


class ExecDataauthorizationProcessResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class CancelDataauthorizationAuthorizationRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        authority_cert: str = None,
        operator_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 权限凭证
        self.authority_cert = authority_cert
        # 操作人ID
        self.operator_id = operator_id

    def validate(self):
        self.validate_required(self.authority_cert, 'authority_cert')
        self.validate_required(self.operator_id, 'operator_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.authority_cert is not None:
            result['authority_cert'] = self.authority_cert
        if self.operator_id is not None:
            result['operator_id'] = self.operator_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('authority_cert') is not None:
            self.authority_cert = m.get('authority_cert')
        if m.get('operator_id') is not None:
            self.operator_id = m.get('operator_id')
        return self


class CancelDataauthorizationAuthorizationResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class CheckDataauthorizationAuthorizationRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        authority_cert: str = None,
        data_id: str = None,
        participant_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 权限凭证
        self.authority_cert = authority_cert
        # 数据ID
        self.data_id = data_id
        # 参与方ID
        self.participant_id = participant_id

    def validate(self):
        self.validate_required(self.authority_cert, 'authority_cert')
        self.validate_required(self.data_id, 'data_id')
        self.validate_required(self.participant_id, 'participant_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.authority_cert is not None:
            result['authority_cert'] = self.authority_cert
        if self.data_id is not None:
            result['data_id'] = self.data_id
        if self.participant_id is not None:
            result['participant_id'] = self.participant_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('authority_cert') is not None:
            self.authority_cert = m.get('authority_cert')
        if m.get('data_id') is not None:
            self.data_id = m.get('data_id')
        if m.get('participant_id') is not None:
            self.participant_id = m.get('participant_id')
        return self


class CheckDataauthorizationAuthorizationResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        authority: bool = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 是否有权限
        self.authority = authority

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.authority is not None:
            result['authority'] = self.authority
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('authority') is not None:
            self.authority = m.get('authority')
        return self


class QueryDataauthorizationProcessRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        process_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 流程ID
        self.process_id = process_id

    def validate(self):
        self.validate_required(self.process_id, 'process_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.process_id is not None:
            result['process_id'] = self.process_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('process_id') is not None:
            self.process_id = m.get('process_id')
        return self


class QueryDataauthorizationProcessResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        process_info: ProcessInfo = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 流程详细信息
        self.process_info = process_info

    def validate(self):
        if self.process_info:
            self.process_info.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.process_info is not None:
            result['process_info'] = self.process_info.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('process_info') is not None:
            temp_model = ProcessInfo()
            self.process_info = temp_model.from_map(m['process_info'])
        return self


class SendDataauthorizationDepositDataRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        notification_ids: List[str] = None,
        sender_id: str = None,
        tx_data: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 通知人列表
        self.notification_ids = notification_ids
        # 数据发送人
        self.sender_id = sender_id
        # 存证交易内容
        self.tx_data = tx_data

    def validate(self):
        self.validate_required(self.tx_data, 'tx_data')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.notification_ids is not None:
            result['notification_ids'] = self.notification_ids
        if self.sender_id is not None:
            result['sender_id'] = self.sender_id
        if self.tx_data is not None:
            result['tx_data'] = self.tx_data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('notification_ids') is not None:
            self.notification_ids = m.get('notification_ids')
        if m.get('sender_id') is not None:
            self.sender_id = m.get('sender_id')
        if m.get('tx_data') is not None:
            self.tx_data = m.get('tx_data')
        return self


class SendDataauthorizationDepositDataResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        tx_hash: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 存证交易hash
        self.tx_hash = tx_hash

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.tx_hash is not None:
            result['tx_hash'] = self.tx_hash
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('tx_hash') is not None:
            self.tx_hash = m.get('tx_hash')
        return self


class QueryDataauthorizationDepositDataRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        tx_hash: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 存证交易hash
        self.tx_hash = tx_hash

    def validate(self):
        self.validate_required(self.tx_hash, 'tx_hash')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.tx_hash is not None:
            result['tx_hash'] = self.tx_hash
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('tx_hash') is not None:
            self.tx_hash = m.get('tx_hash')
        return self


class QueryDataauthorizationDepositDataResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        tx_data: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 存证交易内容
        self.tx_data = tx_data

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.tx_data is not None:
            result['tx_data'] = self.tx_data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('tx_data') is not None:
            self.tx_data = m.get('tx_data')
        return self


class ResumeDataauthorizationAuthorizationRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        authority_cert: str = None,
        operator_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 权限凭证
        self.authority_cert = authority_cert
        # 操作人ID
        self.operator_id = operator_id

    def validate(self):
        self.validate_required(self.authority_cert, 'authority_cert')
        self.validate_required(self.operator_id, 'operator_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.authority_cert is not None:
            result['authority_cert'] = self.authority_cert
        if self.operator_id is not None:
            result['operator_id'] = self.operator_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('authority_cert') is not None:
            self.authority_cert = m.get('authority_cert')
        if m.get('operator_id') is not None:
            self.operator_id = m.get('operator_id')
        return self


class ResumeDataauthorizationAuthorizationResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class UpdateDataauthorizationDataEntityRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        category: str = None,
        data_id: str = None,
        data_model_id: str = None,
        extension_info: str = None,
        name: str = None,
        owner_id: str = None,
        process_template: List[ProcessNode] = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 数据类别
        self.category = category
        # 数据ID
        self.data_id = data_id
        # 数据模型ID
        self.data_model_id = data_model_id
        # 扩展参数
        self.extension_info = extension_info
        # 数据名称
        self.name = name
        # 数据所有者ID
        self.owner_id = owner_id
        # 流程模版
        self.process_template = process_template

    def validate(self):
        self.validate_required(self.category, 'category')
        self.validate_required(self.data_id, 'data_id')
        self.validate_required(self.name, 'name')
        self.validate_required(self.owner_id, 'owner_id')
        if self.process_template:
            for k in self.process_template:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.category is not None:
            result['category'] = self.category
        if self.data_id is not None:
            result['data_id'] = self.data_id
        if self.data_model_id is not None:
            result['data_model_id'] = self.data_model_id
        if self.extension_info is not None:
            result['extension_info'] = self.extension_info
        if self.name is not None:
            result['name'] = self.name
        if self.owner_id is not None:
            result['owner_id'] = self.owner_id
        result['process_template'] = []
        if self.process_template is not None:
            for k in self.process_template:
                result['process_template'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('category') is not None:
            self.category = m.get('category')
        if m.get('data_id') is not None:
            self.data_id = m.get('data_id')
        if m.get('data_model_id') is not None:
            self.data_model_id = m.get('data_model_id')
        if m.get('extension_info') is not None:
            self.extension_info = m.get('extension_info')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('owner_id') is not None:
            self.owner_id = m.get('owner_id')
        self.process_template = []
        if m.get('process_template') is not None:
            for k in m.get('process_template'):
                temp_model = ProcessNode()
                self.process_template.append(temp_model.from_map(k))
        return self


class UpdateDataauthorizationDataEntityResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class DeleteDataauthorizationDataEntityRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        data_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 数据ID
        self.data_id = data_id

    def validate(self):
        self.validate_required(self.data_id, 'data_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.data_id is not None:
            result['data_id'] = self.data_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('data_id') is not None:
            self.data_id = m.get('data_id')
        return self


class DeleteDataauthorizationDataEntityResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class CreateDataauthorizationCustomParticipantRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        blockchain_id: str = None,
        extension_info: str = None,
        name: str = None,
        notification_service: str = None,
        participant_id: str = None,
        public_key: str = None,
        recover_key: str = None,
        role: List[str] = None,
        credit_number: str = None,
        space_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 区块链ID
        self.blockchain_id = blockchain_id
        # 扩展参数
        self.extension_info = extension_info
        # 参与方名字
        self.name = name
        # 服务地址
        self.notification_service = notification_service
        # 参与方ID，全局唯一
        self.participant_id = participant_id
        # 公钥
        self.public_key = public_key
        # 恢复公钥
        self.recover_key = recover_key
        # 参与方角色列表
        self.role = role
        # 信用代码，证件号等
        self.credit_number = credit_number
        # 空间ID
        self.space_id = space_id

    def validate(self):
        self.validate_required(self.name, 'name')
        self.validate_required(self.participant_id, 'participant_id')
        self.validate_required(self.public_key, 'public_key')
        self.validate_required(self.recover_key, 'recover_key')
        self.validate_required(self.role, 'role')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.blockchain_id is not None:
            result['blockchain_id'] = self.blockchain_id
        if self.extension_info is not None:
            result['extension_info'] = self.extension_info
        if self.name is not None:
            result['name'] = self.name
        if self.notification_service is not None:
            result['notification_service'] = self.notification_service
        if self.participant_id is not None:
            result['participant_id'] = self.participant_id
        if self.public_key is not None:
            result['public_key'] = self.public_key
        if self.recover_key is not None:
            result['recover_key'] = self.recover_key
        if self.role is not None:
            result['role'] = self.role
        if self.credit_number is not None:
            result['credit_number'] = self.credit_number
        if self.space_id is not None:
            result['space_id'] = self.space_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('blockchain_id') is not None:
            self.blockchain_id = m.get('blockchain_id')
        if m.get('extension_info') is not None:
            self.extension_info = m.get('extension_info')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('notification_service') is not None:
            self.notification_service = m.get('notification_service')
        if m.get('participant_id') is not None:
            self.participant_id = m.get('participant_id')
        if m.get('public_key') is not None:
            self.public_key = m.get('public_key')
        if m.get('recover_key') is not None:
            self.recover_key = m.get('recover_key')
        if m.get('role') is not None:
            self.role = m.get('role')
        if m.get('credit_number') is not None:
            self.credit_number = m.get('credit_number')
        if m.get('space_id') is not None:
            self.space_id = m.get('space_id')
        return self


class CreateDataauthorizationCustomParticipantResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        participant_id: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 参与方ID
        self.participant_id = participant_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.participant_id is not None:
            result['participant_id'] = self.participant_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('participant_id') is not None:
            self.participant_id = m.get('participant_id')
        return self


class CreateDataauthorizationCustomDataRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        blockchain_id: str = None,
        category: str = None,
        data_id: str = None,
        extension_info: str = None,
        name: str = None,
        owner_id: str = None,
        process_template: List[ProcessNode] = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 区块链ID
        self.blockchain_id = blockchain_id
        # 数据对象类别
        self.category = category
        # 数据对象ID，全局唯一
        self.data_id = data_id
        # 扩展参数
        self.extension_info = extension_info
        # 数据对象名字
        self.name = name
        # 数据所有者ID
        self.owner_id = owner_id
        # 流程审批模版
        self.process_template = process_template

    def validate(self):
        self.validate_required(self.blockchain_id, 'blockchain_id')
        self.validate_required(self.category, 'category')
        self.validate_required(self.data_id, 'data_id')
        self.validate_required(self.name, 'name')
        self.validate_required(self.owner_id, 'owner_id')
        if self.process_template:
            for k in self.process_template:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.blockchain_id is not None:
            result['blockchain_id'] = self.blockchain_id
        if self.category is not None:
            result['category'] = self.category
        if self.data_id is not None:
            result['data_id'] = self.data_id
        if self.extension_info is not None:
            result['extension_info'] = self.extension_info
        if self.name is not None:
            result['name'] = self.name
        if self.owner_id is not None:
            result['owner_id'] = self.owner_id
        result['process_template'] = []
        if self.process_template is not None:
            for k in self.process_template:
                result['process_template'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('blockchain_id') is not None:
            self.blockchain_id = m.get('blockchain_id')
        if m.get('category') is not None:
            self.category = m.get('category')
        if m.get('data_id') is not None:
            self.data_id = m.get('data_id')
        if m.get('extension_info') is not None:
            self.extension_info = m.get('extension_info')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('owner_id') is not None:
            self.owner_id = m.get('owner_id')
        self.process_template = []
        if m.get('process_template') is not None:
            for k in m.get('process_template'):
                temp_model = ProcessNode()
                self.process_template.append(temp_model.from_map(k))
        return self


class CreateDataauthorizationCustomDataResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data_id: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 数据对象ID
        self.data_id = data_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.data_id is not None:
            result['data_id'] = self.data_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('data_id') is not None:
            self.data_id = m.get('data_id')
        return self


class ApplyDataauthorizationAuthorizationWithsignatureRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        biz_uid: str = None,
        blockchain_id: str = None,
        parameters: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 申请ID
        self.biz_uid = biz_uid
        # 区块链ID
        self.blockchain_id = blockchain_id
        # 带签名的参数信息
        self.parameters = parameters

    def validate(self):
        self.validate_required(self.biz_uid, 'biz_uid')
        self.validate_required(self.blockchain_id, 'blockchain_id')
        self.validate_required(self.parameters, 'parameters')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.biz_uid is not None:
            result['biz_uid'] = self.biz_uid
        if self.blockchain_id is not None:
            result['blockchain_id'] = self.blockchain_id
        if self.parameters is not None:
            result['parameters'] = self.parameters
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('biz_uid') is not None:
            self.biz_uid = m.get('biz_uid')
        if m.get('blockchain_id') is not None:
            self.blockchain_id = m.get('blockchain_id')
        if m.get('parameters') is not None:
            self.parameters = m.get('parameters')
        return self


class ApplyDataauthorizationAuthorizationWithsignatureResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        process_result: ProcessResult = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 操作结果
        self.process_result = process_result

    def validate(self):
        if self.process_result:
            self.process_result.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.process_result is not None:
            result['process_result'] = self.process_result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('process_result') is not None:
            temp_model = ProcessResult()
            self.process_result = temp_model.from_map(m['process_result'])
        return self


class ExecDataauthorizationProcessWithsignatureRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        blockchain_id: str = None,
        parameters: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 区块链ID
        self.blockchain_id = blockchain_id
        # 带签名的参数信息
        self.parameters = parameters

    def validate(self):
        self.validate_required(self.blockchain_id, 'blockchain_id')
        self.validate_required(self.parameters, 'parameters')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.blockchain_id is not None:
            result['blockchain_id'] = self.blockchain_id
        if self.parameters is not None:
            result['parameters'] = self.parameters
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('blockchain_id') is not None:
            self.blockchain_id = m.get('blockchain_id')
        if m.get('parameters') is not None:
            self.parameters = m.get('parameters')
        return self


class ExecDataauthorizationProcessWithsignatureResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        process_result: ProcessResult = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 流程处理结果
        self.process_result = process_result

    def validate(self):
        if self.process_result:
            self.process_result.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.process_result is not None:
            result['process_result'] = self.process_result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('process_result') is not None:
            temp_model = ProcessResult()
            self.process_result = temp_model.from_map(m['process_result'])
        return self


class CreateDataauthorizationDataModelRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        biz_uid: str = None,
        description: str = None,
        field_detail: str = None,
        model_biz_id: str = None,
        name: str = None,
        space_id: str = None,
        submitter_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 业务系统唯一标示
        self.biz_uid = biz_uid
        # 数据模型描述
        self.description = description
        # 模型字段详细信息
        self.field_detail = field_detail
        # 数据模型业务ID
        self.model_biz_id = model_biz_id
        # 数据模型名称
        self.name = name
        # 空间ID
        self.space_id = space_id
        # 提交人ID
        self.submitter_id = submitter_id

    def validate(self):
        self.validate_required(self.biz_uid, 'biz_uid')
        self.validate_required(self.field_detail, 'field_detail')
        self.validate_required(self.name, 'name')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.biz_uid is not None:
            result['biz_uid'] = self.biz_uid
        if self.description is not None:
            result['description'] = self.description
        if self.field_detail is not None:
            result['field_detail'] = self.field_detail
        if self.model_biz_id is not None:
            result['model_biz_id'] = self.model_biz_id
        if self.name is not None:
            result['name'] = self.name
        if self.space_id is not None:
            result['space_id'] = self.space_id
        if self.submitter_id is not None:
            result['submitter_id'] = self.submitter_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('biz_uid') is not None:
            self.biz_uid = m.get('biz_uid')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('field_detail') is not None:
            self.field_detail = m.get('field_detail')
        if m.get('model_biz_id') is not None:
            self.model_biz_id = m.get('model_biz_id')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('space_id') is not None:
            self.space_id = m.get('space_id')
        if m.get('submitter_id') is not None:
            self.submitter_id = m.get('submitter_id')
        return self


class CreateDataauthorizationDataModelResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data_model_id: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 数据模型ID
        self.data_model_id = data_model_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.data_model_id is not None:
            result['data_model_id'] = self.data_model_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('data_model_id') is not None:
            self.data_model_id = m.get('data_model_id')
        return self


class UpdateDataauthorizationDataModelRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        data_model_id: str = None,
        description: str = None,
        field_detail: str = None,
        model_biz_id: str = None,
        name: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 数据模型ID
        self.data_model_id = data_model_id
        # 数据模型描述
        self.description = description
        # 模型字段详细信息
        self.field_detail = field_detail
        # 模型业务ID
        self.model_biz_id = model_biz_id
        # 数据模型名称
        self.name = name

    def validate(self):
        self.validate_required(self.data_model_id, 'data_model_id')
        self.validate_required(self.field_detail, 'field_detail')
        self.validate_required(self.name, 'name')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.data_model_id is not None:
            result['data_model_id'] = self.data_model_id
        if self.description is not None:
            result['description'] = self.description
        if self.field_detail is not None:
            result['field_detail'] = self.field_detail
        if self.model_biz_id is not None:
            result['model_biz_id'] = self.model_biz_id
        if self.name is not None:
            result['name'] = self.name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('data_model_id') is not None:
            self.data_model_id = m.get('data_model_id')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('field_detail') is not None:
            self.field_detail = m.get('field_detail')
        if m.get('model_biz_id') is not None:
            self.model_biz_id = m.get('model_biz_id')
        if m.get('name') is not None:
            self.name = m.get('name')
        return self


class UpdateDataauthorizationDataModelResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class DeleteDataauthorizationDataModelRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        data_model_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 数据模型ID
        self.data_model_id = data_model_id

    def validate(self):
        self.validate_required(self.data_model_id, 'data_model_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.data_model_id is not None:
            result['data_model_id'] = self.data_model_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('data_model_id') is not None:
            self.data_model_id = m.get('data_model_id')
        return self


class DeleteDataauthorizationDataModelResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class ListDataauthorizationParticipantPageRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        credit_number: str = None,
        name: str = None,
        page_num: int = None,
        page_size: int = None,
        role: str = None,
        space_id: str = None,
        account: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 信用代码编号
        self.credit_number = credit_number
        # 参与方名字
        self.name = name
        # 页码
        self.page_num = page_num
        # 每页数量
        self.page_size = page_size
        # 角色
        self.role = role
        # 空间ID
        self.space_id = space_id
        # 账户名称
        self.account = account

    def validate(self):
        self.validate_required(self.page_num, 'page_num')
        if self.page_num is not None:
            self.validate_minimum(self.page_num, 'page_num', 1)
        self.validate_required(self.page_size, 'page_size')
        self.validate_required(self.space_id, 'space_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.credit_number is not None:
            result['credit_number'] = self.credit_number
        if self.name is not None:
            result['name'] = self.name
        if self.page_num is not None:
            result['page_num'] = self.page_num
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.role is not None:
            result['role'] = self.role
        if self.space_id is not None:
            result['space_id'] = self.space_id
        if self.account is not None:
            result['account'] = self.account
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('credit_number') is not None:
            self.credit_number = m.get('credit_number')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('page_num') is not None:
            self.page_num = m.get('page_num')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('role') is not None:
            self.role = m.get('role')
        if m.get('space_id') is not None:
            self.space_id = m.get('space_id')
        if m.get('account') is not None:
            self.account = m.get('account')
        return self


class ListDataauthorizationParticipantPageResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: List[Participant] = None,
        has_next_page: bool = None,
        has_previous_page: bool = None,
        page_num: int = None,
        page_size: int = None,
        total: int = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 参与方列表
        self.data = data
        # 是否有下一页
        self.has_next_page = has_next_page
        # 是否有上一页
        self.has_previous_page = has_previous_page
        # 页码
        self.page_num = page_num
        # 每页数量
        self.page_size = page_size
        # 数据总量
        self.total = total

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        if self.has_next_page is not None:
            result['has_next_page'] = self.has_next_page
        if self.has_previous_page is not None:
            result['has_previous_page'] = self.has_previous_page
        if self.page_num is not None:
            result['page_num'] = self.page_num
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.total is not None:
            result['total'] = self.total
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = Participant()
                self.data.append(temp_model.from_map(k))
        if m.get('has_next_page') is not None:
            self.has_next_page = m.get('has_next_page')
        if m.get('has_previous_page') is not None:
            self.has_previous_page = m.get('has_previous_page')
        if m.get('page_num') is not None:
            self.page_num = m.get('page_num')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('total') is not None:
            self.total = m.get('total')
        return self


class QueryDataauthorizationDataModelRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        data_model_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 数据模型ID
        self.data_model_id = data_model_id

    def validate(self):
        self.validate_required(self.data_model_id, 'data_model_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.data_model_id is not None:
            result['data_model_id'] = self.data_model_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('data_model_id') is not None:
            self.data_model_id = m.get('data_model_id')
        return self


class QueryDataauthorizationDataModelResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data_model: DataModel = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 数据模型详细信息
        self.data_model = data_model

    def validate(self):
        if self.data_model:
            self.data_model.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.data_model is not None:
            result['data_model'] = self.data_model.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('data_model') is not None:
            temp_model = DataModel()
            self.data_model = temp_model.from_map(m['data_model'])
        return self


class ListDataauthorizationDatamodelPageRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        model_biz_id: str = None,
        model_name: str = None,
        page_num: int = None,
        page_size: int = None,
        space_id: str = None,
        submitter_name: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 模型业务ID
        self.model_biz_id = model_biz_id
        # 模型名称
        self.model_name = model_name
        # 页码
        self.page_num = page_num
        # 每页大小
        self.page_size = page_size
        # 空间ID
        self.space_id = space_id
        # 提交人名字
        self.submitter_name = submitter_name

    def validate(self):
        self.validate_required(self.page_num, 'page_num')
        if self.page_num is not None:
            self.validate_minimum(self.page_num, 'page_num', 1)
        self.validate_required(self.page_size, 'page_size')
        self.validate_required(self.space_id, 'space_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.model_biz_id is not None:
            result['model_biz_id'] = self.model_biz_id
        if self.model_name is not None:
            result['model_name'] = self.model_name
        if self.page_num is not None:
            result['page_num'] = self.page_num
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.space_id is not None:
            result['space_id'] = self.space_id
        if self.submitter_name is not None:
            result['submitter_name'] = self.submitter_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('model_biz_id') is not None:
            self.model_biz_id = m.get('model_biz_id')
        if m.get('model_name') is not None:
            self.model_name = m.get('model_name')
        if m.get('page_num') is not None:
            self.page_num = m.get('page_num')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('space_id') is not None:
            self.space_id = m.get('space_id')
        if m.get('submitter_name') is not None:
            self.submitter_name = m.get('submitter_name')
        return self


class ListDataauthorizationDatamodelPageResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: List[DataModel] = None,
        has_next_page: bool = None,
        has_previous_page: bool = None,
        page_num: int = None,
        page_size: int = None,
        total: int = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 数据模型列表
        self.data = data
        # 是否有下一页
        self.has_next_page = has_next_page
        # 是否有上一页
        self.has_previous_page = has_previous_page
        # 页码
        self.page_num = page_num
        # 每页大小
        self.page_size = page_size
        # 数据总量
        self.total = total

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        if self.has_next_page is not None:
            result['has_next_page'] = self.has_next_page
        if self.has_previous_page is not None:
            result['has_previous_page'] = self.has_previous_page
        if self.page_num is not None:
            result['page_num'] = self.page_num
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.total is not None:
            result['total'] = self.total
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = DataModel()
                self.data.append(temp_model.from_map(k))
        if m.get('has_next_page') is not None:
            self.has_next_page = m.get('has_next_page')
        if m.get('has_previous_page') is not None:
            self.has_previous_page = m.get('has_previous_page')
        if m.get('page_num') is not None:
            self.page_num = m.get('page_num')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('total') is not None:
            self.total = m.get('total')
        return self


class ListDataauthorizationAvailableDatamodelRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        participant_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 参与方DID
        self.participant_id = participant_id

    def validate(self):
        self.validate_required(self.participant_id, 'participant_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.participant_id is not None:
            result['participant_id'] = self.participant_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('participant_id') is not None:
            self.participant_id = m.get('participant_id')
        return self


class ListDataauthorizationAvailableDatamodelResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data_models: List[DataModel] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 数据模型列表
        self.data_models = data_models

    def validate(self):
        if self.data_models:
            for k in self.data_models:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['data_models'] = []
        if self.data_models is not None:
            for k in self.data_models:
                result['data_models'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.data_models = []
        if m.get('data_models') is not None:
            for k in m.get('data_models'):
                temp_model = DataModel()
                self.data_models.append(temp_model.from_map(k))
        return self


class ListDataauthorizationDataentityPageRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        auth_status: str = None,
        model_name: str = None,
        page_num: int = None,
        page_size: int = None,
        participant_id: str = None,
        model_biz_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 授权状态
        self.auth_status = auth_status
        # 模型名称
        self.model_name = model_name
        # 页码
        self.page_num = page_num
        # 每页大小
        self.page_size = page_size
        # 参与方DID
        self.participant_id = participant_id
        # 数据模型业务ID
        self.model_biz_id = model_biz_id

    def validate(self):
        self.validate_required(self.page_num, 'page_num')
        if self.page_num is not None:
            self.validate_minimum(self.page_num, 'page_num', 1)
        self.validate_required(self.page_size, 'page_size')
        self.validate_required(self.participant_id, 'participant_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.auth_status is not None:
            result['auth_status'] = self.auth_status
        if self.model_name is not None:
            result['model_name'] = self.model_name
        if self.page_num is not None:
            result['page_num'] = self.page_num
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.participant_id is not None:
            result['participant_id'] = self.participant_id
        if self.model_biz_id is not None:
            result['model_biz_id'] = self.model_biz_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('auth_status') is not None:
            self.auth_status = m.get('auth_status')
        if m.get('model_name') is not None:
            self.model_name = m.get('model_name')
        if m.get('page_num') is not None:
            self.page_num = m.get('page_num')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('participant_id') is not None:
            self.participant_id = m.get('participant_id')
        if m.get('model_biz_id') is not None:
            self.model_biz_id = m.get('model_biz_id')
        return self


class ListDataauthorizationDataentityPageResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: List[ListDataEntityResult] = None,
        has_next_page: bool = None,
        has_previous_page: bool = None,
        page_num: int = None,
        page_size: int = None,
        total: int = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 分页数据列表
        self.data = data
        # 是否有下一页
        self.has_next_page = has_next_page
        # 是否有上一页
        self.has_previous_page = has_previous_page
        # 页码
        self.page_num = page_num
        # 每页大小
        self.page_size = page_size
        # 数据总量
        self.total = total

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        if self.has_next_page is not None:
            result['has_next_page'] = self.has_next_page
        if self.has_previous_page is not None:
            result['has_previous_page'] = self.has_previous_page
        if self.page_num is not None:
            result['page_num'] = self.page_num
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.total is not None:
            result['total'] = self.total
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = ListDataEntityResult()
                self.data.append(temp_model.from_map(k))
        if m.get('has_next_page') is not None:
            self.has_next_page = m.get('has_next_page')
        if m.get('has_previous_page') is not None:
            self.has_previous_page = m.get('has_previous_page')
        if m.get('page_num') is not None:
            self.page_num = m.get('page_num')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('total') is not None:
            self.total = m.get('total')
        return self


class CreateDataauthorizationDirectAuthorizationRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        biz_uid: str = None,
        comment: str = None,
        data_id: str = None,
        expire: int = None,
        extension_info: str = None,
        issuer_id: str = None,
        subject_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 业务UUID,业务系统唯一标示
        self.biz_uid = biz_uid
        # 直接授权原因
        self.comment = comment
        # 数据ID
        self.data_id = data_id
        # 过期时间
        self.expire = expire
        # 扩展参数
        self.extension_info = extension_info
        # 授权者ID
        self.issuer_id = issuer_id
        # 被授予者ID
        self.subject_id = subject_id

    def validate(self):
        self.validate_required(self.biz_uid, 'biz_uid')
        self.validate_required(self.comment, 'comment')
        self.validate_required(self.data_id, 'data_id')
        self.validate_required(self.expire, 'expire')
        self.validate_required(self.issuer_id, 'issuer_id')
        self.validate_required(self.subject_id, 'subject_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.biz_uid is not None:
            result['biz_uid'] = self.biz_uid
        if self.comment is not None:
            result['comment'] = self.comment
        if self.data_id is not None:
            result['data_id'] = self.data_id
        if self.expire is not None:
            result['expire'] = self.expire
        if self.extension_info is not None:
            result['extension_info'] = self.extension_info
        if self.issuer_id is not None:
            result['issuer_id'] = self.issuer_id
        if self.subject_id is not None:
            result['subject_id'] = self.subject_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('biz_uid') is not None:
            self.biz_uid = m.get('biz_uid')
        if m.get('comment') is not None:
            self.comment = m.get('comment')
        if m.get('data_id') is not None:
            self.data_id = m.get('data_id')
        if m.get('expire') is not None:
            self.expire = m.get('expire')
        if m.get('extension_info') is not None:
            self.extension_info = m.get('extension_info')
        if m.get('issuer_id') is not None:
            self.issuer_id = m.get('issuer_id')
        if m.get('subject_id') is not None:
            self.subject_id = m.get('subject_id')
        return self


class CreateDataauthorizationDirectAuthorizationResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        authority_cert: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 权限凭证
        self.authority_cert = authority_cert

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.authority_cert is not None:
            result['authority_cert'] = self.authority_cert
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('authority_cert') is not None:
            self.authority_cert = m.get('authority_cert')
        return self


class ListDataauthorizationAuthorizationPageRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        end_time: int = None,
        issuer_id: str = None,
        issuer_name: str = None,
        page_num: int = None,
        page_size: int = None,
        space_id: str = None,
        start_ime: int = None,
        subject_id: str = None,
        subject_name: str = None,
        data_id: str = None,
        data_model_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 授权时间终点
        self.end_time = end_time
        # 授权人ID
        self.issuer_id = issuer_id
        # 授权人名字
        self.issuer_name = issuer_name
        # 页码
        self.page_num = page_num
        # 每页大小
        self.page_size = page_size
        # 空间ID
        self.space_id = space_id
        # 授权时间起点
        self.start_ime = start_ime
        # 被授权人ID
        self.subject_id = subject_id
        # 被授权人名字
        self.subject_name = subject_name
        # 数据资产ID
        self.data_id = data_id
        # 数据模型ID
        self.data_model_id = data_model_id

    def validate(self):
        self.validate_required(self.page_num, 'page_num')
        self.validate_required(self.page_size, 'page_size')
        self.validate_required(self.space_id, 'space_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.end_time is not None:
            result['end_time'] = self.end_time
        if self.issuer_id is not None:
            result['issuer_id'] = self.issuer_id
        if self.issuer_name is not None:
            result['issuer_name'] = self.issuer_name
        if self.page_num is not None:
            result['page_num'] = self.page_num
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.space_id is not None:
            result['space_id'] = self.space_id
        if self.start_ime is not None:
            result['start_ime'] = self.start_ime
        if self.subject_id is not None:
            result['subject_id'] = self.subject_id
        if self.subject_name is not None:
            result['subject_name'] = self.subject_name
        if self.data_id is not None:
            result['data_id'] = self.data_id
        if self.data_model_id is not None:
            result['data_model_id'] = self.data_model_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('end_time') is not None:
            self.end_time = m.get('end_time')
        if m.get('issuer_id') is not None:
            self.issuer_id = m.get('issuer_id')
        if m.get('issuer_name') is not None:
            self.issuer_name = m.get('issuer_name')
        if m.get('page_num') is not None:
            self.page_num = m.get('page_num')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('space_id') is not None:
            self.space_id = m.get('space_id')
        if m.get('start_ime') is not None:
            self.start_ime = m.get('start_ime')
        if m.get('subject_id') is not None:
            self.subject_id = m.get('subject_id')
        if m.get('subject_name') is not None:
            self.subject_name = m.get('subject_name')
        if m.get('data_id') is not None:
            self.data_id = m.get('data_id')
        if m.get('data_model_id') is not None:
            self.data_model_id = m.get('data_model_id')
        return self


class ListDataauthorizationAuthorizationPageResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: List[AuthorizationDetail] = None,
        has_next_page: bool = None,
        has_previous_page: bool = None,
        page_num: int = None,
        page_size: int = None,
        total: int = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 授权明细列表
        self.data = data
        # 是否有下
        self.has_next_page = has_next_page
        # 是否有上一页
        self.has_previous_page = has_previous_page
        # 页码
        self.page_num = page_num
        # 每页大小
        self.page_size = page_size
        # 数据总量
        self.total = total

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        if self.has_next_page is not None:
            result['has_next_page'] = self.has_next_page
        if self.has_previous_page is not None:
            result['has_previous_page'] = self.has_previous_page
        if self.page_num is not None:
            result['page_num'] = self.page_num
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.total is not None:
            result['total'] = self.total
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = AuthorizationDetail()
                self.data.append(temp_model.from_map(k))
        if m.get('has_next_page') is not None:
            self.has_next_page = m.get('has_next_page')
        if m.get('has_previous_page') is not None:
            self.has_previous_page = m.get('has_previous_page')
        if m.get('page_num') is not None:
            self.page_num = m.get('page_num')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('total') is not None:
            self.total = m.get('total')
        return self


class ListDataauthorizationAuthparticipantPageRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        data_id: str = None,
        page_num: int = None,
        page_size: int = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 数据资产ID
        self.data_id = data_id
        # 页码
        self.page_num = page_num
        # 每页大小
        self.page_size = page_size

    def validate(self):
        self.validate_required(self.data_id, 'data_id')
        self.validate_required(self.page_num, 'page_num')
        if self.page_num is not None:
            self.validate_minimum(self.page_num, 'page_num', 1)
        self.validate_required(self.page_size, 'page_size')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.data_id is not None:
            result['data_id'] = self.data_id
        if self.page_num is not None:
            result['page_num'] = self.page_num
        if self.page_size is not None:
            result['page_size'] = self.page_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('data_id') is not None:
            self.data_id = m.get('data_id')
        if m.get('page_num') is not None:
            self.page_num = m.get('page_num')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        return self


class ListDataauthorizationAuthparticipantPageResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: List[AuthorizationDetail] = None,
        has_next_page: bool = None,
        has_previous_page: bool = None,
        page_num: int = None,
        page_size: int = None,
        total: int = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 授权列表
        self.data = data
        # 是否有下一页
        self.has_next_page = has_next_page
        # 是否有上一页
        self.has_previous_page = has_previous_page
        # 页码
        self.page_num = page_num
        # 每页大小
        self.page_size = page_size
        # 数据总量
        self.total = total

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        if self.has_next_page is not None:
            result['has_next_page'] = self.has_next_page
        if self.has_previous_page is not None:
            result['has_previous_page'] = self.has_previous_page
        if self.page_num is not None:
            result['page_num'] = self.page_num
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.total is not None:
            result['total'] = self.total
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = AuthorizationDetail()
                self.data.append(temp_model.from_map(k))
        if m.get('has_next_page') is not None:
            self.has_next_page = m.get('has_next_page')
        if m.get('has_previous_page') is not None:
            self.has_previous_page = m.get('has_previous_page')
        if m.get('page_num') is not None:
            self.page_num = m.get('page_num')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('total') is not None:
            self.total = m.get('total')
        return self


class CreateDataauthorizationDataAssertRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        biz_uid: str = None,
        blockchain_id: str = None,
        category: str = None,
        data_model_id: str = None,
        extension_info: str = None,
        name: str = None,
        owner_id: str = None,
        process_template: List[ProcessNode] = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 业务系统数据唯一标示
        self.biz_uid = biz_uid
        # 区块链ID
        self.blockchain_id = blockchain_id
        # 资产类别
        self.category = category
        # 数据模型ID
        self.data_model_id = data_model_id
        # 扩展参数
        self.extension_info = extension_info
        # 资产名称
        self.name = name
        # 所有者ID
        self.owner_id = owner_id
        # 审批流程模版
        self.process_template = process_template

    def validate(self):
        self.validate_required(self.biz_uid, 'biz_uid')
        self.validate_required(self.category, 'category')
        self.validate_required(self.name, 'name')
        self.validate_required(self.owner_id, 'owner_id')
        if self.process_template:
            for k in self.process_template:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.biz_uid is not None:
            result['biz_uid'] = self.biz_uid
        if self.blockchain_id is not None:
            result['blockchain_id'] = self.blockchain_id
        if self.category is not None:
            result['category'] = self.category
        if self.data_model_id is not None:
            result['data_model_id'] = self.data_model_id
        if self.extension_info is not None:
            result['extension_info'] = self.extension_info
        if self.name is not None:
            result['name'] = self.name
        if self.owner_id is not None:
            result['owner_id'] = self.owner_id
        result['process_template'] = []
        if self.process_template is not None:
            for k in self.process_template:
                result['process_template'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('biz_uid') is not None:
            self.biz_uid = m.get('biz_uid')
        if m.get('blockchain_id') is not None:
            self.blockchain_id = m.get('blockchain_id')
        if m.get('category') is not None:
            self.category = m.get('category')
        if m.get('data_model_id') is not None:
            self.data_model_id = m.get('data_model_id')
        if m.get('extension_info') is not None:
            self.extension_info = m.get('extension_info')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('owner_id') is not None:
            self.owner_id = m.get('owner_id')
        self.process_template = []
        if m.get('process_template') is not None:
            for k in m.get('process_template'):
                temp_model = ProcessNode()
                self.process_template.append(temp_model.from_map(k))
        return self


class CreateDataauthorizationDataAssertResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data_id: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 数据资产ID
        self.data_id = data_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.data_id is not None:
            result['data_id'] = self.data_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('data_id') is not None:
            self.data_id = m.get('data_id')
        return self


class UpdateDataauthorizationDataAssertRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        category: str = None,
        data_id: str = None,
        extension_info: str = None,
        name: str = None,
        process_template: List[ProcessNode] = None,
        data_model_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 数据资产类别
        self.category = category
        # 数据资产ID
        self.data_id = data_id
        # 扩展参数
        self.extension_info = extension_info
        # 数据资产名称
        self.name = name
        # 审批流程模版
        self.process_template = process_template
        # 数据模型ID
        self.data_model_id = data_model_id

    def validate(self):
        self.validate_required(self.category, 'category')
        self.validate_required(self.data_id, 'data_id')
        self.validate_required(self.name, 'name')
        if self.process_template:
            for k in self.process_template:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.category is not None:
            result['category'] = self.category
        if self.data_id is not None:
            result['data_id'] = self.data_id
        if self.extension_info is not None:
            result['extension_info'] = self.extension_info
        if self.name is not None:
            result['name'] = self.name
        result['process_template'] = []
        if self.process_template is not None:
            for k in self.process_template:
                result['process_template'].append(k.to_map() if k else None)
        if self.data_model_id is not None:
            result['data_model_id'] = self.data_model_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('category') is not None:
            self.category = m.get('category')
        if m.get('data_id') is not None:
            self.data_id = m.get('data_id')
        if m.get('extension_info') is not None:
            self.extension_info = m.get('extension_info')
        if m.get('name') is not None:
            self.name = m.get('name')
        self.process_template = []
        if m.get('process_template') is not None:
            for k in m.get('process_template'):
                temp_model = ProcessNode()
                self.process_template.append(temp_model.from_map(k))
        if m.get('data_model_id') is not None:
            self.data_model_id = m.get('data_model_id')
        return self


class UpdateDataauthorizationDataAssertResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class DeleteDataauthorizationDataAssertRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        data_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 数据资产ID
        self.data_id = data_id

    def validate(self):
        self.validate_required(self.data_id, 'data_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.data_id is not None:
            result['data_id'] = self.data_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('data_id') is not None:
            self.data_id = m.get('data_id')
        return self


class DeleteDataauthorizationDataAssertResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class CreateDataauthorizationAgentAuthorizationRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        biz_uid: str = None,
        comment: str = None,
        data_id: str = None,
        expire: int = None,
        extension_info: str = None,
        rule: AuthorizationRule = None,
        subject_id: str = None,
        applicant_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 业务UUID
        self.biz_uid = biz_uid
        # 授权原因
        self.comment = comment
        # 数据资产ID
        self.data_id = data_id
        # 过期时间
        self.expire = expire
        # 扩展参数
        self.extension_info = extension_info
        # 授权规则
        self.rule = rule
        # 被授权人ID
        self.subject_id = subject_id
        # 申请代理授权的参与方DID
        self.applicant_id = applicant_id

    def validate(self):
        self.validate_required(self.biz_uid, 'biz_uid')
        self.validate_required(self.comment, 'comment')
        self.validate_required(self.data_id, 'data_id')
        self.validate_required(self.expire, 'expire')
        if self.rule:
            self.rule.validate()
        self.validate_required(self.subject_id, 'subject_id')
        self.validate_required(self.applicant_id, 'applicant_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.biz_uid is not None:
            result['biz_uid'] = self.biz_uid
        if self.comment is not None:
            result['comment'] = self.comment
        if self.data_id is not None:
            result['data_id'] = self.data_id
        if self.expire is not None:
            result['expire'] = self.expire
        if self.extension_info is not None:
            result['extension_info'] = self.extension_info
        if self.rule is not None:
            result['rule'] = self.rule.to_map()
        if self.subject_id is not None:
            result['subject_id'] = self.subject_id
        if self.applicant_id is not None:
            result['applicant_id'] = self.applicant_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('biz_uid') is not None:
            self.biz_uid = m.get('biz_uid')
        if m.get('comment') is not None:
            self.comment = m.get('comment')
        if m.get('data_id') is not None:
            self.data_id = m.get('data_id')
        if m.get('expire') is not None:
            self.expire = m.get('expire')
        if m.get('extension_info') is not None:
            self.extension_info = m.get('extension_info')
        if m.get('rule') is not None:
            temp_model = AuthorizationRule()
            self.rule = temp_model.from_map(m['rule'])
        if m.get('subject_id') is not None:
            self.subject_id = m.get('subject_id')
        if m.get('applicant_id') is not None:
            self.applicant_id = m.get('applicant_id')
        return self


class CreateDataauthorizationAgentAuthorizationResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        authority_cert: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 授权凭证
        self.authority_cert = authority_cert

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.authority_cert is not None:
            result['authority_cert'] = self.authority_cert
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('authority_cert') is not None:
            self.authority_cert = m.get('authority_cert')
        return self


class ListDataauthorizationAuthorityCertRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        authority_cert_ids: List[str] = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 授权凭证ID列表
        self.authority_cert_ids = authority_cert_ids

    def validate(self):
        self.validate_required(self.authority_cert_ids, 'authority_cert_ids')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.authority_cert_ids is not None:
            result['authority_cert_ids'] = self.authority_cert_ids
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('authority_cert_ids') is not None:
            self.authority_cert_ids = m.get('authority_cert_ids')
        return self


class ListDataauthorizationAuthorityCertResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: List[AuthorizationDetail] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 授权详情列表
        self.data = data

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = AuthorizationDetail()
                self.data.append(temp_model.from_map(k))
        return self


class QueryTraceabilityTxCheckRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        biz_type: str = None,
        payload_hash: str = None,
        source: str = None,
        sub_title: str = None,
        title: str = None,
        tx_hash: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 接入业务标识，一接入方有条链或者必须区分统计业务类型情况下必填。
        self.biz_type = biz_type
        # 溯源信息内容校验码用sha256hex(内容) 计算出其正确性。
        self.payload_hash = payload_hash
        # 区块链接入来源
        self.source = source
        # 区块查证信息透传
        self.sub_title = sub_title
        # 透传到查证结果的标题信息
        self.title = title
        # 要查询的区块链交易信息。
        self.tx_hash = tx_hash

    def validate(self):
        self.validate_required(self.source, 'source')
        self.validate_required(self.tx_hash, 'tx_hash')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.biz_type is not None:
            result['biz_type'] = self.biz_type
        if self.payload_hash is not None:
            result['payload_hash'] = self.payload_hash
        if self.source is not None:
            result['source'] = self.source
        if self.sub_title is not None:
            result['sub_title'] = self.sub_title
        if self.title is not None:
            result['title'] = self.title
        if self.tx_hash is not None:
            result['tx_hash'] = self.tx_hash
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('biz_type') is not None:
            self.biz_type = m.get('biz_type')
        if m.get('payload_hash') is not None:
            self.payload_hash = m.get('payload_hash')
        if m.get('source') is not None:
            self.source = m.get('source')
        if m.get('sub_title') is not None:
            self.sub_title = m.get('sub_title')
        if m.get('title') is not None:
            self.title = m.get('title')
        if m.get('tx_hash') is not None:
            self.tx_hash = m.get('tx_hash')
        return self


class QueryTraceabilityTxCheckResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        items: List[Item] = None,
        message: str = None,
        sub_title: str = None,
        title: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 溯源项列表
        self.items = items
        # 提示信息
        self.message = message
        # 展现信息的副标题
        self.sub_title = sub_title
        # 显示查证结果的标题
        self.title = title

    def validate(self):
        if self.items:
            for k in self.items:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['items'] = []
        if self.items is not None:
            for k in self.items:
                result['items'].append(k.to_map() if k else None)
        if self.message is not None:
            result['message'] = self.message
        if self.sub_title is not None:
            result['sub_title'] = self.sub_title
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.items = []
        if m.get('items') is not None:
            for k in m.get('items'):
                temp_model = Item()
                self.items.append(temp_model.from_map(k))
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('sub_title') is not None:
            self.sub_title = m.get('sub_title')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class QueryTraceabilityBlockchainInfosRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        bizid: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 区块链id
        self.bizid = bizid

    def validate(self):
        self.validate_required(self.bizid, 'bizid')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.bizid is not None:
            result['bizid'] = self.bizid
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('bizid') is not None:
            self.bizid = m.get('bizid')
        return self


class QueryTraceabilityBlockchainInfosResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        abnormal_nodes: int = None,
        bizid: str = None,
        block_height: int = None,
        create_time: str = None,
        is_normal: bool = None,
        is_role: bool = None,
        name: str = None,
        node_info_list: List[NodeInfo] = None,
        node_number: int = None,
        transaction_sum: int = None,
        version: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 异常的节点数
        self.abnormal_nodes = abnormal_nodes
        # 区块链id
        self.bizid = bizid
        # 区块高度
        self.block_height = block_height
        # 创建时间
        self.create_time = create_time
        # 链的状态，是否正常
        self.is_normal = is_normal
        # 是否为管理员权限
        self.is_role = is_role
        # 链的名字
        self.name = name
        # 节点信息
        self.node_info_list = node_info_list
        # 节点数
        self.node_number = node_number
        # 链上交易数
        self.transaction_sum = transaction_sum
        # 链的版本
        self.version = version

    def validate(self):
        if self.create_time is not None:
            self.validate_pattern(self.create_time, 'create_time', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')
        if self.node_info_list:
            for k in self.node_info_list:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.abnormal_nodes is not None:
            result['abnormal_nodes'] = self.abnormal_nodes
        if self.bizid is not None:
            result['bizid'] = self.bizid
        if self.block_height is not None:
            result['block_height'] = self.block_height
        if self.create_time is not None:
            result['create_time'] = self.create_time
        if self.is_normal is not None:
            result['is_normal'] = self.is_normal
        if self.is_role is not None:
            result['is_role'] = self.is_role
        if self.name is not None:
            result['name'] = self.name
        result['node_info_list'] = []
        if self.node_info_list is not None:
            for k in self.node_info_list:
                result['node_info_list'].append(k.to_map() if k else None)
        if self.node_number is not None:
            result['node_number'] = self.node_number
        if self.transaction_sum is not None:
            result['transaction_sum'] = self.transaction_sum
        if self.version is not None:
            result['version'] = self.version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('abnormal_nodes') is not None:
            self.abnormal_nodes = m.get('abnormal_nodes')
        if m.get('bizid') is not None:
            self.bizid = m.get('bizid')
        if m.get('block_height') is not None:
            self.block_height = m.get('block_height')
        if m.get('create_time') is not None:
            self.create_time = m.get('create_time')
        if m.get('is_normal') is not None:
            self.is_normal = m.get('is_normal')
        if m.get('is_role') is not None:
            self.is_role = m.get('is_role')
        if m.get('name') is not None:
            self.name = m.get('name')
        self.node_info_list = []
        if m.get('node_info_list') is not None:
            for k in m.get('node_info_list'):
                temp_model = NodeInfo()
                self.node_info_list.append(temp_model.from_map(k))
        if m.get('node_number') is not None:
            self.node_number = m.get('node_number')
        if m.get('transaction_sum') is not None:
            self.transaction_sum = m.get('transaction_sum')
        if m.get('version') is not None:
            self.version = m.get('version')
        return self


class SaveBlockchainBrowserPrivilegeRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        bizid: str = None,
        tenantid: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 链id
        self.bizid = bizid
        # ORGJC1CN
        self.tenantid = tenantid

    def validate(self):
        self.validate_required(self.bizid, 'bizid')
        self.validate_required(self.tenantid, 'tenantid')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.bizid is not None:
            result['bizid'] = self.bizid
        if self.tenantid is not None:
            result['tenantid'] = self.tenantid
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('bizid') is not None:
            self.bizid = m.get('bizid')
        if m.get('tenantid') is not None:
            self.tenantid = m.get('tenantid')
        return self


class SaveBlockchainBrowserPrivilegeResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class QueryBlockchainBrowserPrivilegeRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        bizid: str = None,
        tenantid: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 链id
        self.bizid = bizid
        # 租户id
        self.tenantid = tenantid

    def validate(self):
        self.validate_required(self.bizid, 'bizid')
        self.validate_required(self.tenantid, 'tenantid')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.bizid is not None:
            result['bizid'] = self.bizid
        if self.tenantid is not None:
            result['tenantid'] = self.tenantid
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('bizid') is not None:
            self.bizid = m.get('bizid')
        if m.get('tenantid') is not None:
            self.tenantid = m.get('tenantid')
        return self


class QueryBlockchainBrowserPrivilegeResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class DeleteBlockchainBrowserPrivilegeRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        bizid: str = None,
        tenantid: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 链id
        self.bizid = bizid
        # ORGJC1CN
        self.tenantid = tenantid

    def validate(self):
        self.validate_required(self.bizid, 'bizid')
        self.validate_required(self.tenantid, 'tenantid')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.bizid is not None:
            result['bizid'] = self.bizid
        if self.tenantid is not None:
            result['tenantid'] = self.tenantid
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('bizid') is not None:
            self.bizid = m.get('bizid')
        if m.get('tenantid') is not None:
            self.tenantid = m.get('tenantid')
        return self


class DeleteBlockchainBrowserPrivilegeResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class GetBlockchainMiniprogramRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        bizid: str = None,
        hash: str = None,
        contract_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 蚂蚁区块链的唯一链id
        self.bizid = bizid
        # 蚂蚁区块链的链上交易hash值
        self.hash = hash
        # 原生存证数据展示自定义合约地址
        self.contract_id = contract_id

    def validate(self):
        self.validate_required(self.bizid, 'bizid')
        self.validate_required(self.hash, 'hash')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.bizid is not None:
            result['bizid'] = self.bizid
        if self.hash is not None:
            result['hash'] = self.hash
        if self.contract_id is not None:
            result['contract_id'] = self.contract_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('bizid') is not None:
            self.bizid = m.get('bizid')
        if m.get('hash') is not None:
            self.hash = m.get('hash')
        if m.get('contract_id') is not None:
            self.contract_id = m.get('contract_id')
        return self


class GetBlockchainMiniprogramResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        qrcode: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 交易二维码
        self.qrcode = qrcode

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.qrcode is not None:
            result['qrcode'] = self.qrcode
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('qrcode') is not None:
            self.qrcode = m.get('qrcode')
        return self


class AddBlockchainMiniprogramRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        bizid: str = None,
        phone_numbers: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 蚂蚁区块链的唯一链id
        self.bizid = bizid
        # 授权查看权限的支付宝电话号码集合
        self.phone_numbers = phone_numbers

    def validate(self):
        self.validate_required(self.bizid, 'bizid')
        self.validate_required(self.phone_numbers, 'phone_numbers')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.bizid is not None:
            result['bizid'] = self.bizid
        if self.phone_numbers is not None:
            result['phone_numbers'] = self.phone_numbers
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('bizid') is not None:
            self.bizid = m.get('bizid')
        if m.get('phone_numbers') is not None:
            self.phone_numbers = m.get('phone_numbers')
        return self


class AddBlockchainMiniprogramResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class QueryBrowserTransactionStatisticRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        bizid: str = None,
        end_time: int = None,
        start_time: int = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # bizid
        self.bizid = bizid
        # 截止时间
        self.end_time = end_time
        # 开始时间
        self.start_time = start_time

    def validate(self):
        self.validate_required(self.bizid, 'bizid')
        self.validate_required(self.end_time, 'end_time')
        self.validate_required(self.start_time, 'start_time')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.bizid is not None:
            result['bizid'] = self.bizid
        if self.end_time is not None:
            result['end_time'] = self.end_time
        if self.start_time is not None:
            result['start_time'] = self.start_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('bizid') is not None:
            self.bizid = m.get('bizid')
        if m.get('end_time') is not None:
            self.end_time = m.get('end_time')
        if m.get('start_time') is not None:
            self.start_time = m.get('start_time')
        return self


class QueryBrowserTransactionStatisticResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: List[BlockchainBrowserTransactionStatistic] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # result
        self.result = result

    def validate(self):
        if self.result:
            for k in self.result:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['result'] = []
        if self.result is not None:
            for k in self.result:
                result['result'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.result = []
        if m.get('result') is not None:
            for k in m.get('result'):
                temp_model = BlockchainBrowserTransactionStatistic()
                self.result.append(temp_model.from_map(k))
        return self


class QueryBrowserBlockLatestRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        bizid: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # bizid
        self.bizid = bizid

    def validate(self):
        self.validate_required(self.bizid, 'bizid')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.bizid is not None:
            result['bizid'] = self.bizid
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('bizid') is not None:
            self.bizid = m.get('bizid')
        return self


class QueryBrowserBlockLatestResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: List[BlockchainBrowserLatestBlock] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # result
        self.result = result

    def validate(self):
        if self.result:
            for k in self.result:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['result'] = []
        if self.result is not None:
            for k in self.result:
                result['result'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.result = []
        if m.get('result') is not None:
            for k in m.get('result'):
                temp_model = BlockchainBrowserLatestBlock()
                self.result.append(temp_model.from_map(k))
        return self


class QueryBrowserTransactionLatestRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        bizid: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # bizid
        self.bizid = bizid

    def validate(self):
        self.validate_required(self.bizid, 'bizid')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.bizid is not None:
            result['bizid'] = self.bizid
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('bizid') is not None:
            self.bizid = m.get('bizid')
        return self


class QueryBrowserTransactionLatestResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: List[BlockchainBrowserLatestTransaction] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # result
        self.result = result

    def validate(self):
        if self.result:
            for k in self.result:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['result'] = []
        if self.result is not None:
            for k in self.result:
                result['result'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.result = []
        if m.get('result') is not None:
            for k in m.get('result'):
                temp_model = BlockchainBrowserLatestTransaction()
                self.result.append(temp_model.from_map(k))
        return self


class QueryBrowserBlockRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        bizid: str = None,
        height: int = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # bizid
        self.bizid = bizid
        # height
        self.height = height

    def validate(self):
        self.validate_required(self.bizid, 'bizid')
        self.validate_required(self.height, 'height')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.bizid is not None:
            result['bizid'] = self.bizid
        if self.height is not None:
            result['height'] = self.height
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('bizid') is not None:
            self.bizid = m.get('bizid')
        if m.get('height') is not None:
            self.height = m.get('height')
        return self


class QueryBrowserBlockResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: BlockchainBrowserBlock = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # BlockchainBrowserTransaction
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.result is not None:
            result['result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('result') is not None:
            temp_model = BlockchainBrowserBlock()
            self.result = temp_model.from_map(m['result'])
        return self


class QueryBrowserTransactionRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        bizid: str = None,
        hash: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # bizid
        self.bizid = bizid
        # hash
        self.hash = hash

    def validate(self):
        self.validate_required(self.bizid, 'bizid')
        self.validate_required(self.hash, 'hash')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.bizid is not None:
            result['bizid'] = self.bizid
        if self.hash is not None:
            result['hash'] = self.hash
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('bizid') is not None:
            self.bizid = m.get('bizid')
        if m.get('hash') is not None:
            self.hash = m.get('hash')
        return self


class QueryBrowserTransactionResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: BlockchainBrowserTransaction = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # result
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.result is not None:
            result['result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('result') is not None:
            temp_model = BlockchainBrowserTransaction()
            self.result = temp_model.from_map(m['result'])
        return self


class QueryBrowserTransactionReceiptRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        bizid: str = None,
        hash: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # bizid
        self.bizid = bizid
        # hash
        self.hash = hash

    def validate(self):
        self.validate_required(self.bizid, 'bizid')
        self.validate_required(self.hash, 'hash')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.bizid is not None:
            result['bizid'] = self.bizid
        if self.hash is not None:
            result['hash'] = self.hash
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('bizid') is not None:
            self.bizid = m.get('bizid')
        if m.get('hash') is not None:
            self.hash = m.get('hash')
        return self


class QueryBrowserTransactionReceiptResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: BlockchainBrowserTransactionReceipt = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # BlockchainBrowserTransactionReceipt
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.result is not None:
            result['result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('result') is not None:
            temp_model = BlockchainBrowserTransactionReceipt()
            self.result = temp_model.from_map(m['result'])
        return self


class QueryBrowserNodeOwnerRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        bizid: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # bizid
        self.bizid = bizid

    def validate(self):
        self.validate_required(self.bizid, 'bizid')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.bizid is not None:
            result['bizid'] = self.bizid
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('bizid') is not None:
            self.bizid = m.get('bizid')
        return self


class QueryBrowserNodeOwnerResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: List[BlockchainBrowserNodeOwner] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # result
        self.result = result

    def validate(self):
        if self.result:
            for k in self.result:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['result'] = []
        if self.result is not None:
            for k in self.result:
                result['result'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.result = []
        if m.get('result') is not None:
            for k in m.get('result'):
                temp_model = BlockchainBrowserNodeOwner()
                self.result.append(temp_model.from_map(k))
        return self


class QueryCreditTransferApplyRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        consignor_did: str = None,
        platform_did: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 货主分布式数字身份
        self.consignor_did = consignor_did
        # 业务发起方分布式数字身
        self.platform_did = platform_did

    def validate(self):
        self.validate_required(self.consignor_did, 'consignor_did')
        self.validate_required(self.platform_did, 'platform_did')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.consignor_did is not None:
            result['consignor_did'] = self.consignor_did
        if self.platform_did is not None:
            result['platform_did'] = self.platform_did
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('consignor_did') is not None:
            self.consignor_did = m.get('consignor_did')
        if m.get('platform_did') is not None:
            self.platform_did = m.get('platform_did')
        return self


class QueryCreditTransferApplyResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        query_msg: str = None,
        status: int = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 查询结果信息，失败时为失败原因信息
        self.query_msg = query_msg
        # 查询结果状态
        # -1:注册失败， 0:注册中， 1:注册完成
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.query_msg is not None:
            result['query_msg'] = self.query_msg
        if self.status is not None:
            result['status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('query_msg') is not None:
            self.query_msg = m.get('query_msg')
        if m.get('status') is not None:
            self.status = m.get('status')
        return self


class QueryCreditTransferBalanceRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        consignor_did: str = None,
        freight: str = None,
        platform_did: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 货主分布式数字身份
        self.consignor_did = consignor_did
        # 需发行信用流转的运费，运费最多精确到小数点后2位
        self.freight = freight
        # 业务发起方分布式数字身
        self.platform_did = platform_did

    def validate(self):
        self.validate_required(self.consignor_did, 'consignor_did')
        self.validate_required(self.freight, 'freight')
        self.validate_required(self.platform_did, 'platform_did')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.consignor_did is not None:
            result['consignor_did'] = self.consignor_did
        if self.freight is not None:
            result['freight'] = self.freight
        if self.platform_did is not None:
            result['platform_did'] = self.platform_did
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('consignor_did') is not None:
            self.consignor_did = m.get('consignor_did')
        if m.get('freight') is not None:
            self.freight = m.get('freight')
        if m.get('platform_did') is not None:
            self.platform_did = m.get('platform_did')
        return self


class QueryCreditTransferBalanceResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        has_balance: bool = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 是否有信用流转额度
        self.has_balance = has_balance

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.has_balance is not None:
            result['has_balance'] = self.has_balance
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('has_balance') is not None:
            self.has_balance = m.get('has_balance')
        return self


class QueryCreditTransferIssuebyidRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        batch_id: str = None,
        consignor_did: str = None,
        issue_id: str = None,
        issue_only: bool = None,
        page_num: int = None,
        page_size: int = None,
        platform_did: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 信用流转发行批次号，与issueId信用流转发行结果查询号不可同时为空
        self.batch_id = batch_id
        # 货主分布式数字身份
        self.consignor_did = consignor_did
        # 信用流转发行凭证Id，与batchId信用流转发行批次号不可同时为空
        self.issue_id = issue_id
        # 是否只返回已发行凭证信息
        self.issue_only = issue_only
        # 页数 从1开始
        self.page_num = page_num
        # 每页显示数量
        self.page_size = page_size
        # 业务发起方分布式数字身份
        self.platform_did = platform_did

    def validate(self):
        self.validate_required(self.consignor_did, 'consignor_did')
        self.validate_required(self.issue_only, 'issue_only')
        self.validate_required(self.page_num, 'page_num')
        self.validate_required(self.page_size, 'page_size')
        self.validate_required(self.platform_did, 'platform_did')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.batch_id is not None:
            result['batch_id'] = self.batch_id
        if self.consignor_did is not None:
            result['consignor_did'] = self.consignor_did
        if self.issue_id is not None:
            result['issue_id'] = self.issue_id
        if self.issue_only is not None:
            result['issue_only'] = self.issue_only
        if self.page_num is not None:
            result['page_num'] = self.page_num
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.platform_did is not None:
            result['platform_did'] = self.platform_did
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('batch_id') is not None:
            self.batch_id = m.get('batch_id')
        if m.get('consignor_did') is not None:
            self.consignor_did = m.get('consignor_did')
        if m.get('issue_id') is not None:
            self.issue_id = m.get('issue_id')
        if m.get('issue_only') is not None:
            self.issue_only = m.get('issue_only')
        if m.get('page_num') is not None:
            self.page_num = m.get('page_num')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('platform_did') is not None:
            self.platform_did = m.get('platform_did')
        return self


class QueryCreditTransferIssuebyidResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        did: str = None,
        issue_ids: List[IssueInfo] = None,
        page_num: int = None,
        page_size: int = None,
        total_count: int = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 凭证所属did
        self.did = did
        # 凭证列表
        self.issue_ids = issue_ids
        # 页数 从1开始
        self.page_num = page_num
        # 每页显示数量
        self.page_size = page_size
        # 数据总量
        self.total_count = total_count

    def validate(self):
        if self.issue_ids:
            for k in self.issue_ids:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.did is not None:
            result['did'] = self.did
        result['issue_ids'] = []
        if self.issue_ids is not None:
            for k in self.issue_ids:
                result['issue_ids'].append(k.to_map() if k else None)
        if self.page_num is not None:
            result['page_num'] = self.page_num
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.total_count is not None:
            result['total_count'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('did') is not None:
            self.did = m.get('did')
        self.issue_ids = []
        if m.get('issue_ids') is not None:
            for k in m.get('issue_ids'):
                temp_model = IssueInfo()
                self.issue_ids.append(temp_model.from_map(k))
        if m.get('page_num') is not None:
            self.page_num = m.get('page_num')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('total_count') is not None:
            self.total_count = m.get('total_count')
        return self


class QueryCreditTransferIssuebytimeRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        did: str = None,
        end_date: str = None,
        issue_onle: bool = None,
        page_num: str = None,
        page_size: str = None,
        platform_did: str = None,
        start_date: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 需查询对象的分布式数字身份
        self.did = did
        # 查询截止时间
        self.end_date = end_date
        # 是否只返回已发行凭证信息
        self.issue_onle = issue_onle
        # 页数 从1开始
        self.page_num = page_num
        # 每页显示数量
        self.page_size = page_size
        # 业务发起方分布式数字身份
        self.platform_did = platform_did
        # 查询起始时间
        self.start_date = start_date

    def validate(self):
        self.validate_required(self.did, 'did')
        self.validate_required(self.end_date, 'end_date')
        self.validate_required(self.issue_onle, 'issue_onle')
        self.validate_required(self.page_num, 'page_num')
        self.validate_required(self.page_size, 'page_size')
        self.validate_required(self.platform_did, 'platform_did')
        self.validate_required(self.start_date, 'start_date')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.did is not None:
            result['did'] = self.did
        if self.end_date is not None:
            result['end_date'] = self.end_date
        if self.issue_onle is not None:
            result['issue_onle'] = self.issue_onle
        if self.page_num is not None:
            result['page_num'] = self.page_num
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.platform_did is not None:
            result['platform_did'] = self.platform_did
        if self.start_date is not None:
            result['start_date'] = self.start_date
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('end_date') is not None:
            self.end_date = m.get('end_date')
        if m.get('issue_onle') is not None:
            self.issue_onle = m.get('issue_onle')
        if m.get('page_num') is not None:
            self.page_num = m.get('page_num')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('platform_did') is not None:
            self.platform_did = m.get('platform_did')
        if m.get('start_date') is not None:
            self.start_date = m.get('start_date')
        return self


class QueryCreditTransferIssuebytimeResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        did: str = None,
        issue_ids: List[IssueInfo] = None,
        page_num: int = None,
        page_size: int = None,
        total_count: int = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 凭证所属did
        self.did = did
        # 凭证列表
        self.issue_ids = issue_ids
        # 页数 从1开始
        self.page_num = page_num
        # 每页显示数量
        self.page_size = page_size
        # 数据总量
        self.total_count = total_count

    def validate(self):
        if self.issue_ids:
            for k in self.issue_ids:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.did is not None:
            result['did'] = self.did
        result['issue_ids'] = []
        if self.issue_ids is not None:
            for k in self.issue_ids:
                result['issue_ids'].append(k.to_map() if k else None)
        if self.page_num is not None:
            result['page_num'] = self.page_num
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.total_count is not None:
            result['total_count'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('did') is not None:
            self.did = m.get('did')
        self.issue_ids = []
        if m.get('issue_ids') is not None:
            for k in m.get('issue_ids'):
                temp_model = IssueInfo()
                self.issue_ids.append(temp_model.from_map(k))
        if m.get('page_num') is not None:
            self.page_num = m.get('page_num')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('total_count') is not None:
            self.total_count = m.get('total_count')
        return self


class QueryCreditTransferStatementRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        did: str = None,
        end_date: str = None,
        page_num: int = None,
        page_size: int = None,
        platform_did: str = None,
        start_date: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 需查询对象的分布式数字身份
        self.did = did
        # 查询截止时间
        self.end_date = end_date
        # 页数 从1开始
        self.page_num = page_num
        # 每页显示数量
        self.page_size = page_size
        # 业务发起方分布式数字身份
        self.platform_did = platform_did
        # 查询起始时间
        self.start_date = start_date

    def validate(self):
        self.validate_required(self.did, 'did')
        self.validate_required(self.end_date, 'end_date')
        self.validate_required(self.page_num, 'page_num')
        self.validate_required(self.page_size, 'page_size')
        self.validate_required(self.platform_did, 'platform_did')
        self.validate_required(self.start_date, 'start_date')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.did is not None:
            result['did'] = self.did
        if self.end_date is not None:
            result['end_date'] = self.end_date
        if self.page_num is not None:
            result['page_num'] = self.page_num
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.platform_did is not None:
            result['platform_did'] = self.platform_did
        if self.start_date is not None:
            result['start_date'] = self.start_date
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('end_date') is not None:
            self.end_date = m.get('end_date')
        if m.get('page_num') is not None:
            self.page_num = m.get('page_num')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('platform_did') is not None:
            self.platform_did = m.get('platform_did')
        if m.get('start_date') is not None:
            self.start_date = m.get('start_date')
        return self


class QueryCreditTransferStatementResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        did: str = None,
        page_num: int = None,
        page_size: int = None,
        statement_infos: List[CreditTransferStatementInfo] = None,
        total_count: int = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 需查询对象的分布式数字身份
        self.did = did
        # 页数 从1开始
        self.page_num = page_num
        # 每页显示数量
        self.page_size = page_size
        # 流水列表
        self.statement_infos = statement_infos
        # 数据总量
        self.total_count = total_count

    def validate(self):
        if self.statement_infos:
            for k in self.statement_infos:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.did is not None:
            result['did'] = self.did
        if self.page_num is not None:
            result['page_num'] = self.page_num
        if self.page_size is not None:
            result['page_size'] = self.page_size
        result['statement_infos'] = []
        if self.statement_infos is not None:
            for k in self.statement_infos:
                result['statement_infos'].append(k.to_map() if k else None)
        if self.total_count is not None:
            result['total_count'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('page_num') is not None:
            self.page_num = m.get('page_num')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        self.statement_infos = []
        if m.get('statement_infos') is not None:
            for k in m.get('statement_infos'):
                temp_model = CreditTransferStatementInfo()
                self.statement_infos.append(temp_model.from_map(k))
        if m.get('total_count') is not None:
            self.total_count = m.get('total_count')
        return self


class CallbackCreditTransferRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        msg_data: str = None,
        msg_method: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 回调消息内容
        self.msg_data = msg_data
        # 回调消息方法类型
        self.msg_method = msg_method

    def validate(self):
        self.validate_required(self.msg_data, 'msg_data')
        self.validate_required(self.msg_method, 'msg_method')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.msg_data is not None:
            result['msg_data'] = self.msg_data
        if self.msg_method is not None:
            result['msg_method'] = self.msg_method
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('msg_data') is not None:
            self.msg_data = m.get('msg_data')
        if m.get('msg_method') is not None:
            self.msg_method = m.get('msg_method')
        return self


class CallbackCreditTransferResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        is_recv: bool = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 是否已接收
        self.is_recv = is_recv

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.is_recv is not None:
            result['is_recv'] = self.is_recv
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('is_recv') is not None:
            self.is_recv = m.get('is_recv')
        return self


class PushAuthUserVcRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        biz_id: str = None,
        biz_type: str = None,
        did: str = None,
        signature: str = None,
        vc_content: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 长度不超过64字符的业务唯一ID，用于对一个业务流的追踪。
        self.biz_id = biz_id
        # 具体的业务类型，长度不超过32字符，具体需要与DIS小组业务对接商定新增的业务类型。
        self.biz_type = biz_type
        # 推送的业务方自己所属的did，也就是颁发此声明的 issuer
        self.did = did
        # 使用did字段的密钥进行整体传送内容（不包括此signature字段）签名的结果，具体签名规则：
        # 1. Map<String,String> params 的key按照字典序排序
        # 2. 拼接为 key1=value1&key2=value2&key3=value3 ...
        # 3. 计算sha256(第2步结果)得到hash
        # 4. 使用hash 和 签名的did请求DIS的签名接口进行签名：baas.account.signature.start，https://apdevcenter.cloud.alipay.com/console/openapi/product/BLOCKCHAIN/apis/baas.account.signature.start/versions/1.0/document?
        self.signature = signature
        # 通过DIS颁发的声明详细信息，其中content的claim字段是和业务相关的实际声明内容。
        self.vc_content = vc_content

    def validate(self):
        self.validate_required(self.biz_id, 'biz_id')
        if self.biz_id is not None:
            self.validate_max_length(self.biz_id, 'biz_id', 64)
        self.validate_required(self.biz_type, 'biz_type')
        if self.biz_type is not None:
            self.validate_max_length(self.biz_type, 'biz_type', 32)
        self.validate_required(self.did, 'did')
        self.validate_required(self.signature, 'signature')
        self.validate_required(self.vc_content, 'vc_content')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.biz_id is not None:
            result['biz_id'] = self.biz_id
        if self.biz_type is not None:
            result['biz_type'] = self.biz_type
        if self.did is not None:
            result['did'] = self.did
        if self.signature is not None:
            result['signature'] = self.signature
        if self.vc_content is not None:
            result['vc_content'] = self.vc_content
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('biz_id') is not None:
            self.biz_id = m.get('biz_id')
        if m.get('biz_type') is not None:
            self.biz_type = m.get('biz_type')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('signature') is not None:
            self.signature = m.get('signature')
        if m.get('vc_content') is not None:
            self.vc_content = m.get('vc_content')
        return self


class PushAuthUserVcResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: bool = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 是否推送成功到DIS的C端应用
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.result is not None:
            result['result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('result') is not None:
            self.result = m.get('result')
        return self


class PushAuthClaimVcRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        biz_id: str = None,
        biz_type: str = None,
        claim_content: str = None,
        claim_type: str = None,
        did: str = None,
        expire: int = None,
        issuer_did: str = None,
        signature: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 长度不超过64字符的业务唯一ID，用于对一个业务流的追踪，查询等。
        self.biz_id = biz_id
        # 具体的业务类型，长度不超过32字符，具体需要与DIS小组业务对接商定新增的业务类型。
        self.biz_type = biz_type
        # 申请授权的具体内容，通常由业务方对接定义，在小程序展示声明详细内容给用户，用户进行确认后，授权颁发声明。
        self.claim_content = claim_content
        # 如果在相同的biz_type下，还需要针对声明claim进行细化划分，可以使用此字段。
        self.claim_type = claim_type
        # 业务方持有的did身份
        self.did = did
        # 申请声明颁发后的有效期，可选参数，如果不指定则默认申请永久有效。
        self.expire = expire
        # 申请目标did身份持有者，对声明进行授权颁发。
        self.issuer_did = issuer_did
        # 使用did字段的密钥进行整体传送内容（不包括此signature字段）签名的结果，具体签名规则：
        # 1. Map<String,String> params 的key按照字典序排序
        # 2. 拼接为 key1=value1&key2=value2&key3=value3 ...
        # 3. 计算sha256(第2步结果)得到hash
        # 4. 使用hash 和 签名的did请求DIS的签名接口进行签名：baas.account.signature.start，https://apdevcenter.cloud.alipay.com/console/openapi/product/BLOCKCHAIN/apis/baas.account.signature.start/versions/1.0/document?
        self.signature = signature

    def validate(self):
        self.validate_required(self.biz_id, 'biz_id')
        self.validate_required(self.biz_type, 'biz_type')
        self.validate_required(self.claim_content, 'claim_content')
        self.validate_required(self.did, 'did')
        self.validate_required(self.issuer_did, 'issuer_did')
        self.validate_required(self.signature, 'signature')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.biz_id is not None:
            result['biz_id'] = self.biz_id
        if self.biz_type is not None:
            result['biz_type'] = self.biz_type
        if self.claim_content is not None:
            result['claim_content'] = self.claim_content
        if self.claim_type is not None:
            result['claim_type'] = self.claim_type
        if self.did is not None:
            result['did'] = self.did
        if self.expire is not None:
            result['expire'] = self.expire
        if self.issuer_did is not None:
            result['issuer_did'] = self.issuer_did
        if self.signature is not None:
            result['signature'] = self.signature
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('biz_id') is not None:
            self.biz_id = m.get('biz_id')
        if m.get('biz_type') is not None:
            self.biz_type = m.get('biz_type')
        if m.get('claim_content') is not None:
            self.claim_content = m.get('claim_content')
        if m.get('claim_type') is not None:
            self.claim_type = m.get('claim_type')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('expire') is not None:
            self.expire = m.get('expire')
        if m.get('issuer_did') is not None:
            self.issuer_did = m.get('issuer_did')
        if m.get('signature') is not None:
            self.signature = m.get('signature')
        return self


class PushAuthClaimVcResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: bool = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 是否推送成功到DIS的C端应用
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.result is not None:
            result['result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('result') is not None:
            self.result = m.get('result')
        return self


class PullAuthUserDidRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        biz_id: str = None,
        did: str = None,
        signature: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 长度不超过64字符的业务唯一ID，用于对一个业务流的追踪、查询。
        self.biz_id = biz_id
        # 业务方持有的did
        self.did = did
        # 使用did字段的密钥进行整体传送内容（不包括此signature字段）签名的结果，具体签名规则： 1. Map<String,String> params 的key按照字典序排序 2. 拼接为 key1=value1&key2=value2&key3=value3 ... 3. 计算sha256(第2步结果)得到hash 4. 使用hash 和 签名的did请求DIS的签名接口进行签名：baas.account.signature.start，https://apdevcenter.cloud.alipay.com/console/openapi/product/BLOCKCHAIN/apis/baas.account.signature.start/versions/1.0/document?
        self.signature = signature

    def validate(self):
        self.validate_required(self.biz_id, 'biz_id')
        if self.biz_id is not None:
            self.validate_max_length(self.biz_id, 'biz_id', 64)
        self.validate_required(self.did, 'did')
        self.validate_required(self.signature, 'signature')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.biz_id is not None:
            result['biz_id'] = self.biz_id
        if self.did is not None:
            result['did'] = self.did
        if self.signature is not None:
            result['signature'] = self.signature
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('biz_id') is not None:
            self.biz_id = m.get('biz_id')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('signature') is not None:
            self.signature = m.get('signature')
        return self


class PullAuthUserDidResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        biz_id: str = None,
        user_did: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 长度不超过64字符的业务唯一ID，用于对一个业务流的追踪，与请求中的biz_id一致方便业务方使用。
        self.biz_id = biz_id
        # 获取到关联的用户did
        self.user_did = user_did

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.biz_id is not None:
            result['biz_id'] = self.biz_id
        if self.user_did is not None:
            result['user_did'] = self.user_did
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('biz_id') is not None:
            self.biz_id = m.get('biz_id')
        if m.get('user_did') is not None:
            self.user_did = m.get('user_did')
        return self


class PullAuthClaimVcRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        biz_id: str = None,
        did: str = None,
        signature: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 长度不超过64字符的业务唯一ID，用于对一个业务流的追踪、查询。
        self.biz_id = biz_id
        # 业务方持有的did
        self.did = did
        # 使用did字段的密钥进行整体传送内容（不包括此signature字段）签名的结果，具体签名规则： 1. Map<String,String> params 的key按照字典序排序 2. 拼接为 key1=value1&key2=value2&key3=value3 ... 3. 计算sha256(第2步结果)得到hash 4. 使用hash 和 签名的did请求DIS的签名接口进行签名：baas.account.signature.start，https://apdevcenter.cloud.alipay.com/console/openapi/product/BLOCKCHAIN/apis/baas.account.signature.start/versions/1.0/document?
        self.signature = signature

    def validate(self):
        self.validate_required(self.biz_id, 'biz_id')
        if self.biz_id is not None:
            self.validate_max_length(self.biz_id, 'biz_id', 64)
        self.validate_required(self.did, 'did')
        self.validate_required(self.signature, 'signature')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.biz_id is not None:
            result['biz_id'] = self.biz_id
        if self.did is not None:
            result['did'] = self.did
        if self.signature is not None:
            result['signature'] = self.signature
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('biz_id') is not None:
            self.biz_id = m.get('biz_id')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('signature') is not None:
            self.signature = m.get('signature')
        return self


class PullAuthClaimVcResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        biz_id: str = None,
        biz_type: str = None,
        status: str = None,
        user_did: str = None,
        vc_content: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 长度不超过64字符的业务唯一ID，用于对一个业务流的追踪，与请求中的biz_id一致方便业务方使用。
        self.biz_id = biz_id
        # 具体的业务类型，长度不超过32字符，具体需要对接确定新增的业务类型。
        self.biz_type = biz_type
        # 当前声明的状态说明：
        # 0：用户未授权
        # 1：用户授权成功，此时vc_content字段会包含授权后的声明内容
        # 101：业务方发起声明claim_content中的用户三要素（姓名，电话，身份证号），与目标用户真实的三要素匹配失败
        # 
        # 其它状态码，待定义后增加。
        self.status = status
        # 申请授权的用户did
        self.user_did = user_did
        # 如果status的值是“1”，则此字段就是用户授权成功后的声明（vc）的完整内容。
        self.vc_content = vc_content

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.biz_id is not None:
            result['biz_id'] = self.biz_id
        if self.biz_type is not None:
            result['biz_type'] = self.biz_type
        if self.status is not None:
            result['status'] = self.status
        if self.user_did is not None:
            result['user_did'] = self.user_did
        if self.vc_content is not None:
            result['vc_content'] = self.vc_content
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('biz_id') is not None:
            self.biz_id = m.get('biz_id')
        if m.get('biz_type') is not None:
            self.biz_type = m.get('biz_type')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('user_did') is not None:
            self.user_did = m.get('user_did')
        if m.get('vc_content') is not None:
            self.vc_content = m.get('vc_content')
        return self


class CreateAuthUserDidRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        did: str = None,
        extension: str = None,
        is_certified: str = None,
        signature: str = None,
        user_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 通常为业务方持有的企业did身份
        self.did = did
        # 扩展用户信息字段，用于创建did特别场景，传递更多用户信息。
        self.extension = extension
        # 是否实人认证，如果"T"表示已实人认证，否则未认证。
        self.is_certified = is_certified
        # 使用did字段的密钥进行整体传送内容（不包括此signature字段）签名的结果，具体签名规则： 1. Map<String,String> params 的key按照字典序排序 2. 拼接为 key1=value1&key2=value2&key3=value3 ... 3. 计算sha256(第2步结果)得到hash 4. 使用hash 和 签名的did请求DIS的签名接口进行签名：baas.account.signature.start，https://apdevcenter.cloud.alipay.com/console/openapi/product/BLOCKCHAIN/apis/baas.account.signature.start/versions/1.0/document?
        self.signature = signature
        # 业务方内部用户的id，可脱敏id，在一些id打通场景有特别用途。
        self.user_id = user_id

    def validate(self):
        self.validate_required(self.did, 'did')
        self.validate_required(self.user_id, 'user_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.did is not None:
            result['did'] = self.did
        if self.extension is not None:
            result['extension'] = self.extension
        if self.is_certified is not None:
            result['is_certified'] = self.is_certified
        if self.signature is not None:
            result['signature'] = self.signature
        if self.user_id is not None:
            result['user_id'] = self.user_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('extension') is not None:
            self.extension = m.get('extension')
        if m.get('is_certified') is not None:
            self.is_certified = m.get('is_certified')
        if m.get('signature') is not None:
            self.signature = m.get('signature')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        return self


class CreateAuthUserDidResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 返回给指定用户创建的did结果，如果入参对应userId的did之前已经存在，则不会新建did，直接返回已有did。
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.result is not None:
            result['result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('result') is not None:
            self.result = m.get('result')
        return self


class CreateAuthCorporateDidRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        extension_info: str = None,
        owner_name: str = None,
        owner_uid: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 对企业描述的扩展字段，用于传递更多企业信息，支持业务。
        self.extension_info = extension_info
        # 企业名称，通常为法定的公司实体名称
        self.owner_name = owner_name
        # 调用方体系内企业的唯一ID，作为创建DID的绑定目标，调用者需要保证其唯一性。
        self.owner_uid = owner_uid

    def validate(self):
        self.validate_required(self.owner_name, 'owner_name')
        self.validate_required(self.owner_uid, 'owner_uid')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.extension_info is not None:
            result['extension_info'] = self.extension_info
        if self.owner_name is not None:
            result['owner_name'] = self.owner_name
        if self.owner_uid is not None:
            result['owner_uid'] = self.owner_uid
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('extension_info') is not None:
            self.extension_info = m.get('extension_info')
        if m.get('owner_name') is not None:
            self.owner_name = m.get('owner_name')
        if m.get('owner_uid') is not None:
            self.owner_uid = m.get('owner_uid')
        return self


class CreateAuthCorporateDidResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        did: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 为企业创建的DID结果
        self.did = did

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.did is not None:
            result['did'] = self.did
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('did') is not None:
            self.did = m.get('did')
        return self


class PullAuthWebpageVcRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        pk_id: str = None,
        user_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 企业B类的唯一ID，对应的did在返回值vc_content中的subject字段
        self.pk_id = pk_id
        # C类用户的唯一ID，当前为通过姓名+身份证号组合计算哈希得到user_id = sha256(name+certNo)，对应的did在返回值vc_content中的issuer字段
        self.user_id = user_id

    def validate(self):
        self.validate_required(self.pk_id, 'pk_id')
        self.validate_required(self.user_id, 'user_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.pk_id is not None:
            result['pk_id'] = self.pk_id
        if self.user_id is not None:
            result['user_id'] = self.user_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('pk_id') is not None:
            self.pk_id = m.get('pk_id')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        return self


class PullAuthWebpageVcResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        gmt_auth_time: int = None,
        pk_id: str = None,
        status: str = None,
        type: str = None,
        user_id: str = None,
        vc_content: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # C类用户实际授权发生的时间，GMT标准时间
        self.gmt_auth_time = gmt_auth_time
        # 企业B类的唯一ID，对应的did在vc_content中的subject字段
        self.pk_id = pk_id
        # 当前声明的状态说明： 0：用户未授权 1：用户授权成功，此时vc_content字段会包含授权后的声明内容 ，101：信息校验失败，其他授权错误码情况待明确
        self.status = status
        # 授权的可验证声明具体类型说明，有助于未来业务区分不同授权场景。
        self.type = type
        # C类用户的唯一ID，当前为通过姓名+身份证号组合计算哈希得到user_id = sha256(name+certNo)，对应的did在vc_content中的issuer字段
        self.user_id = user_id
        # 如果status的值是“1”，则此字段就是用户授权成功后的声明（vc）的完整内容。
        self.vc_content = vc_content

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.gmt_auth_time is not None:
            result['gmt_auth_time'] = self.gmt_auth_time
        if self.pk_id is not None:
            result['pk_id'] = self.pk_id
        if self.status is not None:
            result['status'] = self.status
        if self.type is not None:
            result['type'] = self.type
        if self.user_id is not None:
            result['user_id'] = self.user_id
        if self.vc_content is not None:
            result['vc_content'] = self.vc_content
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('gmt_auth_time') is not None:
            self.gmt_auth_time = m.get('gmt_auth_time')
        if m.get('pk_id') is not None:
            self.pk_id = m.get('pk_id')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('type') is not None:
            self.type = m.get('type')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        if m.get('vc_content') is not None:
            self.vc_content = m.get('vc_content')
        return self


class PullAuthWebpageUrlRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        biz_id: str = None,
        biz_type: str = None,
        cert_no: str = None,
        extension: str = None,
        name: str = None,
        pk_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 实人认证使用的biz_id，长度不超过64字符的业务唯一id
        self.biz_id = biz_id
        # 实人认证使用的biz_type，通常为业务方自己在阿里云实人认证控制台创建。
        self.biz_type = biz_type
        # 业务方C端用户身份证信息，会进入可验证声明claim内容中。
        self.cert_no = cert_no
        # 业务方可以传递的附加信息，通常跟可验证声明的claim有关，目前是可选项，将来业务复杂后，需要指定claim类型，或者附加信息内容说明.
        self.extension = extension
        # 业务方C端用户姓名信息，会进入可验证声明claim内容中。
        self.name = name
        # 业务方B类身份标识id，与创建的业务方B类DID（颁发可验证声明的subject目标）时baas.auth.corporate.did.create接口的入参owner_uid相同。
        self.pk_id = pk_id

    def validate(self):
        self.validate_required(self.biz_id, 'biz_id')
        self.validate_required(self.biz_type, 'biz_type')
        self.validate_required(self.cert_no, 'cert_no')
        self.validate_required(self.name, 'name')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.biz_id is not None:
            result['biz_id'] = self.biz_id
        if self.biz_type is not None:
            result['biz_type'] = self.biz_type
        if self.cert_no is not None:
            result['cert_no'] = self.cert_no
        if self.extension is not None:
            result['extension'] = self.extension
        if self.name is not None:
            result['name'] = self.name
        if self.pk_id is not None:
            result['pk_id'] = self.pk_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('biz_id') is not None:
            self.biz_id = m.get('biz_id')
        if m.get('biz_type') is not None:
            self.biz_type = m.get('biz_type')
        if m.get('cert_no') is not None:
            self.cert_no = m.get('cert_no')
        if m.get('extension') is not None:
            self.extension = m.get('extension')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('pk_id') is not None:
            self.pk_id = m.get('pk_id')
        return self


class PullAuthWebpageUrlResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        auth_url: str = None,
        issuer_did: str = None,
        subject_did: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 可用的H5的Url，并且已经携带授权宝侧相关的参数：token、bizId等.
        self.auth_url = auth_url
        # 此请求业务方的C端用户的DID，在授权宝侧相当于C端用户给业务方做授权，因此C端用户是issuer，业务方的B类客户是目标subject。
        self.issuer_did = issuer_did
        # 此请求业务方B类客户的DID
        self.subject_did = subject_did

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.auth_url is not None:
            result['auth_url'] = self.auth_url
        if self.issuer_did is not None:
            result['issuer_did'] = self.issuer_did
        if self.subject_did is not None:
            result['subject_did'] = self.subject_did
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('auth_url') is not None:
            self.auth_url = m.get('auth_url')
        if m.get('issuer_did') is not None:
            self.issuer_did = m.get('issuer_did')
        if m.get('subject_did') is not None:
            self.subject_did = m.get('subject_did')
        return self


class StartAuthVcAuthRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        biz_id: str = None,
        biz_type: str = None,
        claim_content: str = None,
        claim_type: str = None,
        did: str = None,
        expire: int = None,
        extension: str = None,
        signature: str = None,
        user_info: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 长度不超过64字符的业务唯一ID，用于对一个业务流的追踪，查询等。
        self.biz_id = biz_id
        # 业务类型，通常需要与授权宝服务沟通确定，业务类型可能影响此接口内部实现逻辑，长度不超过32字符。
        self.biz_type = biz_type
        # 一个json的string。内容包含具体需要的声明，不同业务场景不同。
        self.claim_content = claim_content
        # 如果在相同的biz_type下，还需要针对声明claim进行细化划分，可以使用此字段。
        self.claim_type = claim_type
        # 非托管的情况下必选，业务方持有的did身份。
        self.did = did
        # 申请声明颁发后的有效期，可选参数，如果不指定则默认申请永久有效。
        self.expire = expire
        # 业务方可以传递的附加信息，通常跟可验证声明的claim有关，目前是可选项，将来业务复杂后，需要指定claim类型，或者附加信息内容说明。
        self.extension = extension
        # 非托管的情况下必选。
        # 使用did字段的密钥进行整体传送内容（不包括此signature字段）签名的结果，具体签名规则： 1. Map<String,String> params 的key按照字典序排序 2. 拼接为 key1=value1&key2=value2&key3=value3 ... 3. 计算sha256(第2步结果)得到hash 4. 使用hash 和 签名的did请求DIS的签名。
        self.signature = signature
        # 涉及的C类用户身份信息，如果是支付宝体系内，需要提供userId，并且提供二要素信息(name，certNo)
        self.user_info = user_info

    def validate(self):
        self.validate_required(self.biz_id, 'biz_id')
        self.validate_required(self.biz_type, 'biz_type')
        self.validate_required(self.claim_content, 'claim_content')
        self.validate_required(self.user_info, 'user_info')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.biz_id is not None:
            result['biz_id'] = self.biz_id
        if self.biz_type is not None:
            result['biz_type'] = self.biz_type
        if self.claim_content is not None:
            result['claim_content'] = self.claim_content
        if self.claim_type is not None:
            result['claim_type'] = self.claim_type
        if self.did is not None:
            result['did'] = self.did
        if self.expire is not None:
            result['expire'] = self.expire
        if self.extension is not None:
            result['extension'] = self.extension
        if self.signature is not None:
            result['signature'] = self.signature
        if self.user_info is not None:
            result['user_info'] = self.user_info
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('biz_id') is not None:
            self.biz_id = m.get('biz_id')
        if m.get('biz_type') is not None:
            self.biz_type = m.get('biz_type')
        if m.get('claim_content') is not None:
            self.claim_content = m.get('claim_content')
        if m.get('claim_type') is not None:
            self.claim_type = m.get('claim_type')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('expire') is not None:
            self.expire = m.get('expire')
        if m.get('extension') is not None:
            self.extension = m.get('extension')
        if m.get('signature') is not None:
            self.signature = m.get('signature')
        if m.get('user_info') is not None:
            self.user_info = m.get('user_info')
        return self


class StartAuthVcAuthResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        biz_id: str = None,
        biz_type: str = None,
        issuer_did: str = None,
        status: str = None,
        subject_did: str = None,
        vc_content: str = None,
        vc_id: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 输入参数的bizId返回
        self.biz_id = biz_id
        # 具体业务的类型说明，来自入参。
        self.biz_type = biz_type
        # 本次可验证声明颁发者的DID
        self.issuer_did = issuer_did
        # 可验证声明的颁发状态说明： 0：未授权 1：授权成功，此时vc_content字段会包含授权后的声明内容，其它状态码，待定义后增加。
        self.status = status
        # 本次可验证声明目标者的DID
        self.subject_did = subject_did
        # 可验证声明完整内容， status 为 “1” 时候非空
        self.vc_content = vc_content
        # 可验证声明的唯一标识id，status 为 “1” 时候非空
        self.vc_id = vc_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.biz_id is not None:
            result['biz_id'] = self.biz_id
        if self.biz_type is not None:
            result['biz_type'] = self.biz_type
        if self.issuer_did is not None:
            result['issuer_did'] = self.issuer_did
        if self.status is not None:
            result['status'] = self.status
        if self.subject_did is not None:
            result['subject_did'] = self.subject_did
        if self.vc_content is not None:
            result['vc_content'] = self.vc_content
        if self.vc_id is not None:
            result['vc_id'] = self.vc_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('biz_id') is not None:
            self.biz_id = m.get('biz_id')
        if m.get('biz_type') is not None:
            self.biz_type = m.get('biz_type')
        if m.get('issuer_did') is not None:
            self.issuer_did = m.get('issuer_did')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('subject_did') is not None:
            self.subject_did = m.get('subject_did')
        if m.get('vc_content') is not None:
            self.vc_content = m.get('vc_content')
        if m.get('vc_id') is not None:
            self.vc_id = m.get('vc_id')
        return self


class StartAuthVcShareRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        did: str = None,
        index: str = None,
        signature: str = None,
        target_did: str = None,
        vc_id: str = None,
        owner_did: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 非托管的情况下必选，业务方持有的did身份。
        self.did = did
        # 在支持声明的claim字段级别分享能力时使用，可以指定哪些字段隐藏，哪些字段分享。示例中标记为”1“的是隐藏，”0“的是分享明文。
        self.index = index
        # 非托管的情况下必选。 使用did字段的密钥进行整体传送内容（不包括此signature字段）签名的结果，具体签名规则： 1. Map<String,String> params 的key按照字典序排序 2. 拼接为 key1=value1&key2=value2&key3=value3 ... 3. 计算sha256(第2步结果)得到hash 4. 使用hash 和 签名的did请求DIS的签名。
        self.signature = signature
        # 分享声明的目标方DID
        self.target_did = target_did
        # 分享权限的目标可验证声明(VC)的ID
        self.vc_id = vc_id
        # vc_id的owner，将持有的vc_id分享给目标target_did
        self.owner_did = owner_did

    def validate(self):
        self.validate_required(self.target_did, 'target_did')
        self.validate_required(self.vc_id, 'vc_id')
        self.validate_required(self.owner_did, 'owner_did')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.did is not None:
            result['did'] = self.did
        if self.index is not None:
            result['index'] = self.index
        if self.signature is not None:
            result['signature'] = self.signature
        if self.target_did is not None:
            result['target_did'] = self.target_did
        if self.vc_id is not None:
            result['vc_id'] = self.vc_id
        if self.owner_did is not None:
            result['owner_did'] = self.owner_did
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('index') is not None:
            self.index = m.get('index')
        if m.get('signature') is not None:
            self.signature = m.get('signature')
        if m.get('target_did') is not None:
            self.target_did = m.get('target_did')
        if m.get('vc_id') is not None:
            self.vc_id = m.get('vc_id')
        if m.get('owner_did') is not None:
            self.owner_did = m.get('owner_did')
        return self


class StartAuthVcShareResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        target_did: str = None,
        tx_hash: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 分享可验证声明的目标方DID
        self.target_did = target_did
        # 分享链上VC数据的交易hash，可用于直连区块链查询交易内容时使用。
        self.tx_hash = tx_hash

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.target_did is not None:
            result['target_did'] = self.target_did
        if self.tx_hash is not None:
            result['tx_hash'] = self.tx_hash
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('target_did') is not None:
            self.target_did = m.get('target_did')
        if m.get('tx_hash') is not None:
            self.tx_hash = m.get('tx_hash')
        return self


class QueryAuthVcContentRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        owner_did: str = None,
        vc_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 如果此字段为空，则默认使用当前请求租户在授权宝配置的did来进行查询(此did需授权有权限)，此外情况都需要指定目标vc_id的owner_did
        self.owner_did = owner_did
        # 查询目标可验证声明的ID
        self.vc_id = vc_id

    def validate(self):
        self.validate_required(self.vc_id, 'vc_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.owner_did is not None:
            result['owner_did'] = self.owner_did
        if self.vc_id is not None:
            result['vc_id'] = self.vc_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('owner_did') is not None:
            self.owner_did = m.get('owner_did')
        if m.get('vc_id') is not None:
            self.vc_id = m.get('vc_id')
        return self


class QueryAuthVcContentResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        vc_content: str = None,
        vc_id: str = None,
        status: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 目标查询的可验证声明的完整内容，如果有权限则返回明文内容，否则获取失败，此内容为空。
        self.vc_content = vc_content
        # 目标可验证声明的唯一ID
        self.vc_id = vc_id
        # 当前声明的状态说明： 0：未授权 1：授权成功，-1：已吊销
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.vc_content is not None:
            result['vc_content'] = self.vc_content
        if self.vc_id is not None:
            result['vc_id'] = self.vc_id
        if self.status is not None:
            result['status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('vc_content') is not None:
            self.vc_content = m.get('vc_content')
        if m.get('vc_id') is not None:
            self.vc_id = m.get('vc_id')
        if m.get('status') is not None:
            self.status = m.get('status')
        return self


class CreateAuthUserinfoDidRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        biz_type: str = None,
        did: str = None,
        extension: str = None,
        signature: str = None,
        user_info: str = None,
        indexes: List[str] = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 业务类型，通常需要与授权宝服务沟通确定，业务类型可能影响此接口内部实现逻辑，长度不超过32字符。
        self.biz_type = biz_type
        # 非托管的情况下必选，业务方持有的did身份。
        self.did = did
        # 业务方可以传递的附加信息，暂时未启用
        self.extension = extension
        # 非托管的情况下必选。 使用did字段的密钥进行整体传送内容（不包括此signature字段）签名的结果，具体签名规则： 1. Map<String,String> params 的key按照字典序排序 2. 拼接为 key1=value1&key2=value2&key3=value3 ... 3. 计算sha256(第2步结果)得到hash 4. 使用hash 和 签名的did请求DIS的签名。
        self.signature = signature
        # 目标用户的相关信息描述，用于创建DID绑定
        self.user_info = user_info
        # 所有需要关联的外键，外键必须以did auth key controller的did作为前缀+“sidekey:”+外键
        self.indexes = indexes

    def validate(self):
        self.validate_required(self.biz_type, 'biz_type')
        self.validate_required(self.user_info, 'user_info')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.biz_type is not None:
            result['biz_type'] = self.biz_type
        if self.did is not None:
            result['did'] = self.did
        if self.extension is not None:
            result['extension'] = self.extension
        if self.signature is not None:
            result['signature'] = self.signature
        if self.user_info is not None:
            result['user_info'] = self.user_info
        if self.indexes is not None:
            result['indexes'] = self.indexes
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('biz_type') is not None:
            self.biz_type = m.get('biz_type')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('extension') is not None:
            self.extension = m.get('extension')
        if m.get('signature') is not None:
            self.signature = m.get('signature')
        if m.get('user_info') is not None:
            self.user_info = m.get('user_info')
        if m.get('indexes') is not None:
            self.indexes = m.get('indexes')
        return self


class CreateAuthUserinfoDidResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 返回给指定用户创建的did结果，如果入参对应的did之前已经存在，则不会新建did，直接返回已有did。
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.result is not None:
            result['result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('result') is not None:
            self.result = m.get('result')
        return self


class StartAuthVcRevokeRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        did: str = None,
        type: int = None,
        vc_id: str = None,
        user_info: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 在type参数为1时，此did参数不需要传递，默认调用方吊销给用户颁发的卡证。
        self.did = did
        # 类型说明，1：机构给用户颁发的证书，2：用户授权机构的证书(需要用户授权)
        self.type = type
        # 吊销的目标可验证声明ID，如果type参数为1时，此参数可以默认不传，授权宝将会找到目标user当前持有的有效卡证，进行吊销处理。
        # 当type不为1时，此参数也可以不传，此时授权宝会根据userInfo和did信息去找到一个可吊销的VC进行吊销（应用层慎重使用，确保这样筛选的目标唯一性）。
        self.vc_id = vc_id
        # 当type参数为1时，此参数和did参数，两者选一个使用，使用userId或者did参数指明did，代表的都是目标C类用户身份。
        # 当type不为1时，此参数代表C类用户身份，did参数指明授权的目标机构身份。
        # 
        self.user_info = user_info

    def validate(self):
        self.validate_required(self.did, 'did')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.did is not None:
            result['did'] = self.did
        if self.type is not None:
            result['type'] = self.type
        if self.vc_id is not None:
            result['vc_id'] = self.vc_id
        if self.user_info is not None:
            result['user_info'] = self.user_info
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('type') is not None:
            self.type = m.get('type')
        if m.get('vc_id') is not None:
            self.vc_id = m.get('vc_id')
        if m.get('user_info') is not None:
            self.user_info = m.get('user_info')
        return self


class StartAuthVcRevokeResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: bool = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # true:吊销成功，false:吊销失败
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.result is not None:
            result['result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('result') is not None:
            self.result = m.get('result')
        return self


class StartAuthVcGiveRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        biz_id: str = None,
        biz_type: str = None,
        claim_content: str = None,
        claim_type: str = None,
        did: str = None,
        extension: str = None,
        owner_did: str = None,
        signature: str = None,
        target_did: str = None,
        vc_id: str = None,
        expire: int = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 长度不超过64字符的业务唯一ID，用于对一个业务流的追踪，查询等。
        self.biz_id = biz_id
        # 业务类型，通常需要与授权宝服务沟通确定，业务类型可能影响此接口内部实现逻辑，长度不超过32字符。
        self.biz_type = biz_type
        # 一个json的string。内容包含具体需要的声明，不同业务场景不同。
        self.claim_content = claim_content
        # 如果在相同的biz_type下，还需要针对声明claim进行细化划分，可以使用此字段。
        self.claim_type = claim_type
        # 非托管的情况下必选，业务方持有的did身份。
        self.did = did
        # 业务方可以传递的附加信息
        self.extension = extension
        # 发起转增的发起方did，其实为发起请求之前的vc_id持有人
        self.owner_did = owner_did
        # 非托管的情况下必选。 使用did字段的密钥进行整体传送内容（不包括此signature字段）签名的结果，具体签名规则： 1. Map<String,String> params 的key按照字典序排序 2. 拼接为 key1=value1&key2=value2&key3=value3 ... 3. 计算sha256(第2步结果)得到hash 4. 使用hash 和 签名的did请求DIS的签名。
        self.signature = signature
        # 转增目标的did内容
        self.target_did = target_did
        # 目标票据所在的可验证证明的id
        self.vc_id = vc_id
        # 申请声明颁发后的有效期，可选参数，如果不指定则默认申请永久有效。
        self.expire = expire

    def validate(self):
        self.validate_required(self.biz_id, 'biz_id')
        self.validate_required(self.biz_type, 'biz_type')
        self.validate_required(self.owner_did, 'owner_did')
        self.validate_required(self.target_did, 'target_did')
        self.validate_required(self.vc_id, 'vc_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.biz_id is not None:
            result['biz_id'] = self.biz_id
        if self.biz_type is not None:
            result['biz_type'] = self.biz_type
        if self.claim_content is not None:
            result['claim_content'] = self.claim_content
        if self.claim_type is not None:
            result['claim_type'] = self.claim_type
        if self.did is not None:
            result['did'] = self.did
        if self.extension is not None:
            result['extension'] = self.extension
        if self.owner_did is not None:
            result['owner_did'] = self.owner_did
        if self.signature is not None:
            result['signature'] = self.signature
        if self.target_did is not None:
            result['target_did'] = self.target_did
        if self.vc_id is not None:
            result['vc_id'] = self.vc_id
        if self.expire is not None:
            result['expire'] = self.expire
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('biz_id') is not None:
            self.biz_id = m.get('biz_id')
        if m.get('biz_type') is not None:
            self.biz_type = m.get('biz_type')
        if m.get('claim_content') is not None:
            self.claim_content = m.get('claim_content')
        if m.get('claim_type') is not None:
            self.claim_type = m.get('claim_type')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('extension') is not None:
            self.extension = m.get('extension')
        if m.get('owner_did') is not None:
            self.owner_did = m.get('owner_did')
        if m.get('signature') is not None:
            self.signature = m.get('signature')
        if m.get('target_did') is not None:
            self.target_did = m.get('target_did')
        if m.get('vc_id') is not None:
            self.vc_id = m.get('vc_id')
        if m.get('expire') is not None:
            self.expire = m.get('expire')
        return self


class StartAuthVcGiveResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        biz_id: str = None,
        biz_type: str = None,
        issuer_did: str = None,
        status: str = None,
        subject_did: str = None,
        vc_content: str = None,
        vc_id: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 入参返回
        self.biz_id = biz_id
        # 业务类型，入参返回
        self.biz_type = biz_type
        # 本次转增后新颁发的可验证声明的issuer
        self.issuer_did = issuer_did
        # 可验证声明的颁发状态说明： 0：未授权 1：授权成功，此时vc_content字段会包含授权后的声明内容，其它状态码，待定义后增加。
        self.status = status
        # 本次转增的目标，也是新颁发的可验证声明的持有者owner的did
        self.subject_did = subject_did
        # 可验证声明完整内容， status 为 “1” 时候非空
        self.vc_content = vc_content
        # 可验证声明的id
        self.vc_id = vc_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.biz_id is not None:
            result['biz_id'] = self.biz_id
        if self.biz_type is not None:
            result['biz_type'] = self.biz_type
        if self.issuer_did is not None:
            result['issuer_did'] = self.issuer_did
        if self.status is not None:
            result['status'] = self.status
        if self.subject_did is not None:
            result['subject_did'] = self.subject_did
        if self.vc_content is not None:
            result['vc_content'] = self.vc_content
        if self.vc_id is not None:
            result['vc_id'] = self.vc_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('biz_id') is not None:
            self.biz_id = m.get('biz_id')
        if m.get('biz_type') is not None:
            self.biz_type = m.get('biz_type')
        if m.get('issuer_did') is not None:
            self.issuer_did = m.get('issuer_did')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('subject_did') is not None:
            self.subject_did = m.get('subject_did')
        if m.get('vc_content') is not None:
            self.vc_content = m.get('vc_content')
        if m.get('vc_id') is not None:
            self.vc_id = m.get('vc_id')
        return self


class StartAuthVcSharebatchRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        did: str = None,
        signature: str = None,
        target_did: str = None,
        vc_share_list: List[VcShareStruct] = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 非托管的情况下必选，业务方持有的did身份。
        self.did = did
        # 非托管的情况下必选。 使用did字段的密钥进行整体传送内容（不包括此signature字段）签名的结果，具体签名规则： 1. Map<String,String> params 的key按照字典序排序 2. 拼接为 key1=value1&key2=value2&key3=value3 ... 3. 计算sha256(第2步结果)得到hash 4. 使用hash 和 签名的did请求DIS的签名。
        self.signature = signature
        # 分享声明的目标方DID
        self.target_did = target_did
        # 目标待分享的VC列表，不超过10个
        self.vc_share_list = vc_share_list

    def validate(self):
        self.validate_required(self.target_did, 'target_did')
        self.validate_required(self.vc_share_list, 'vc_share_list')
        if self.vc_share_list:
            for k in self.vc_share_list:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.did is not None:
            result['did'] = self.did
        if self.signature is not None:
            result['signature'] = self.signature
        if self.target_did is not None:
            result['target_did'] = self.target_did
        result['vc_share_list'] = []
        if self.vc_share_list is not None:
            for k in self.vc_share_list:
                result['vc_share_list'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('signature') is not None:
            self.signature = m.get('signature')
        if m.get('target_did') is not None:
            self.target_did = m.get('target_did')
        self.vc_share_list = []
        if m.get('vc_share_list') is not None:
            for k in m.get('vc_share_list'):
                temp_model = VcShareStruct()
                self.vc_share_list.append(temp_model.from_map(k))
        return self


class StartAuthVcSharebatchResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        vc_share_results: List[VcShareResult] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # VC分享的结果列表，分别带有结果tx_hash
        self.vc_share_results = vc_share_results

    def validate(self):
        if self.vc_share_results:
            for k in self.vc_share_results:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['vc_share_results'] = []
        if self.vc_share_results is not None:
            for k in self.vc_share_results:
                result['vc_share_results'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.vc_share_results = []
        if m.get('vc_share_results') is not None:
            for k in m.get('vc_share_results'):
                temp_model = VcShareResult()
                self.vc_share_results.append(temp_model.from_map(k))
        return self


class StartAuthCorporateSignRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        data: str = None,
        did: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 需要进行签名的字符串，按规定方式进行传参拼接并sha256
        self.data = data
        # 需要代理签名的目标did，此did是当前请求方申请在授权宝控制创建
        self.did = did

    def validate(self):
        self.validate_required(self.data, 'data')
        self.validate_required(self.did, 'did')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.data is not None:
            result['data'] = self.data
        if self.did is not None:
            result['did'] = self.did
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('data') is not None:
            self.data = m.get('data')
        if m.get('did') is not None:
            self.did = m.get('did')
        return self


class StartAuthCorporateSignResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        signature: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 签名结果
        self.signature = signature

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.signature is not None:
            result['signature'] = self.signature
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('signature') is not None:
            self.signature = m.get('signature')
        return self


class StartAuthVcBatchauthRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        biz_id: str = None,
        biz_type: str = None,
        claim_list: List[Claim] = None,
        did: str = None,
        extension: str = None,
        signature: str = None,
        user_info: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 长度不超过64字符的业务唯一ID，用于对一个业务流的追踪，查询等。
        self.biz_id = biz_id
        # 业务类型，通常需要与授权宝服务沟通确定，业务类型可能影响此接口内部实现逻辑，长度不超过32字符。
        self.biz_type = biz_type
        # 批量进行可验证声明颁发的所有候选声明内容
        self.claim_list = claim_list
        # 非托管的情况下必选，业务方持有的did身份。
        self.did = did
        # 业务方可以传递的附加信息，通常跟可验证声明的claim有关，目前是可选项，将来业务复杂后，需要指定claim类型，或者附加信息内容说明。
        self.extension = extension
        # jN1LVH5YhbTvgrdeBqlImPJBWDzVdNyyHZ1n9A0pSOQKnt11jWM5Qn707+wEa7bc8TOd1WvRItTe\r\nmx4xYCqX0gE=\r\n
        self.signature = signature
        # 涉及的C类用户身份信息，如果是支付宝体系内，需要提供userId，并且提供二要素信息(name，certNo)
        self.user_info = user_info

    def validate(self):
        self.validate_required(self.biz_id, 'biz_id')
        self.validate_required(self.biz_type, 'biz_type')
        self.validate_required(self.claim_list, 'claim_list')
        if self.claim_list:
            for k in self.claim_list:
                if k:
                    k.validate()
        self.validate_required(self.user_info, 'user_info')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.biz_id is not None:
            result['biz_id'] = self.biz_id
        if self.biz_type is not None:
            result['biz_type'] = self.biz_type
        result['claim_list'] = []
        if self.claim_list is not None:
            for k in self.claim_list:
                result['claim_list'].append(k.to_map() if k else None)
        if self.did is not None:
            result['did'] = self.did
        if self.extension is not None:
            result['extension'] = self.extension
        if self.signature is not None:
            result['signature'] = self.signature
        if self.user_info is not None:
            result['user_info'] = self.user_info
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('biz_id') is not None:
            self.biz_id = m.get('biz_id')
        if m.get('biz_type') is not None:
            self.biz_type = m.get('biz_type')
        self.claim_list = []
        if m.get('claim_list') is not None:
            for k in m.get('claim_list'):
                temp_model = Claim()
                self.claim_list.append(temp_model.from_map(k))
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('extension') is not None:
            self.extension = m.get('extension')
        if m.get('signature') is not None:
            self.signature = m.get('signature')
        if m.get('user_info') is not None:
            self.user_info = m.get('user_info')
        return self


class StartAuthVcBatchauthResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        biz_id: str = None,
        biz_type: str = None,
        issuer_did: str = None,
        vc_list: List[VcContent] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 输入参数的bizId返回
        self.biz_id = biz_id
        # 具体业务的类型说明，来自入参。
        self.biz_type = biz_type
        # 本次可验证声明颁发者的DID
        self.issuer_did = issuer_did
        # 颁发的多个可验证声明结果列表。
        self.vc_list = vc_list

    def validate(self):
        if self.vc_list:
            for k in self.vc_list:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.biz_id is not None:
            result['biz_id'] = self.biz_id
        if self.biz_type is not None:
            result['biz_type'] = self.biz_type
        if self.issuer_did is not None:
            result['issuer_did'] = self.issuer_did
        result['vc_list'] = []
        if self.vc_list is not None:
            for k in self.vc_list:
                result['vc_list'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('biz_id') is not None:
            self.biz_id = m.get('biz_id')
        if m.get('biz_type') is not None:
            self.biz_type = m.get('biz_type')
        if m.get('issuer_did') is not None:
            self.issuer_did = m.get('issuer_did')
        self.vc_list = []
        if m.get('vc_list') is not None:
            for k in m.get('vc_list'):
                temp_model = VcContent()
                self.vc_list.append(temp_model.from_map(k))
        return self


class StartAuthVcReplaceRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        biz_id: str = None,
        biz_type: str = None,
        claim_content: str = None,
        claim_type: str = None,
        did: str = None,
        expire: int = None,
        extension: str = None,
        signature: str = None,
        user_info: str = None,
        vc_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 长度不超过64字符的业务流水唯一ID，用于对一个业务流的追踪，查询等。
        self.biz_id = biz_id
        # 业务类型，通常需要与授权宝服务沟通确定，业务类型可能影响此接口内部实现逻辑，长度不超过32字符。
        self.biz_type = biz_type
        # 一个json的string。内容包含具体需要的声明，不同业务场景不同。
        self.claim_content = claim_content
        # 如果在相同的biz_type下，还需要针对声明claim进行细化划分，可以使用此字段。
        self.claim_type = claim_type
        # 非托管的情况下必选，业务方持有的did身份。
        self.did = did
        # 申请声明颁发后的有效期，可选参数，如果不指定则默认申请永久有效。
        self.expire = expire
        # 业务方可以传递的附加信息
        self.extension = extension
        # 非托管的情况下必选。 使用did字段的密钥进行整体传送内容（不包括此signature字段）签名的结果，具体签名规则： 1. Map<String,String> params 的key按照字典序排序 2. 拼接为 key1=value1&key2=value2&key3=value3 ... 3. 计算sha256(第2步结果)得到hash 4. 使用hash 和 签名的did请求DIS的签名。
        self.signature = signature
        # 涉及的C类用户身份信息，如果是支付宝体系内，需要提供userId，并且提供二要素信息(name，certNo)
        # 如果已知目标C类用户的did，则可以直接指定did，比如：{"did": "XXXX"}
        self.user_info = user_info
        # 目标被替换的卡证vcId，此vcId指向的VC将被吊销，然后颁发新的vc。
        # 如果不指定此字段，如果有效卡证唯一，授权宝会默认找到唯一的有效卡证vcId进行吊销，然后颁发新的vc。
        self.vc_id = vc_id

    def validate(self):
        self.validate_required(self.biz_id, 'biz_id')
        self.validate_required(self.biz_type, 'biz_type')
        self.validate_required(self.claim_content, 'claim_content')
        self.validate_required(self.user_info, 'user_info')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.biz_id is not None:
            result['biz_id'] = self.biz_id
        if self.biz_type is not None:
            result['biz_type'] = self.biz_type
        if self.claim_content is not None:
            result['claim_content'] = self.claim_content
        if self.claim_type is not None:
            result['claim_type'] = self.claim_type
        if self.did is not None:
            result['did'] = self.did
        if self.expire is not None:
            result['expire'] = self.expire
        if self.extension is not None:
            result['extension'] = self.extension
        if self.signature is not None:
            result['signature'] = self.signature
        if self.user_info is not None:
            result['user_info'] = self.user_info
        if self.vc_id is not None:
            result['vc_id'] = self.vc_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('biz_id') is not None:
            self.biz_id = m.get('biz_id')
        if m.get('biz_type') is not None:
            self.biz_type = m.get('biz_type')
        if m.get('claim_content') is not None:
            self.claim_content = m.get('claim_content')
        if m.get('claim_type') is not None:
            self.claim_type = m.get('claim_type')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('expire') is not None:
            self.expire = m.get('expire')
        if m.get('extension') is not None:
            self.extension = m.get('extension')
        if m.get('signature') is not None:
            self.signature = m.get('signature')
        if m.get('user_info') is not None:
            self.user_info = m.get('user_info')
        if m.get('vc_id') is not None:
            self.vc_id = m.get('vc_id')
        return self


class StartAuthVcReplaceResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        biz_id: str = None,
        biz_type: str = None,
        issuer_did: str = None,
        status: str = None,
        subject_did: str = None,
        vc_content: str = None,
        vc_id: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 输入参数的bizId返回
        self.biz_id = biz_id
        # 具体业务的类型说明，来自入参。
        self.biz_type = biz_type
        # 本次可验证声明颁发者的DID
        self.issuer_did = issuer_did
        # 可验证声明的颁发状态说明： 0：未授权 1：授权成功，此时vc_content字段会包含授权后的声明内容，其它状态码，待定义后增加。
        self.status = status
        # 本次可验证声明目标者的DID
        self.subject_did = subject_did
        # 可验证声明完整内容， status 为 “1” 时候非空
        self.vc_content = vc_content
        # 可验证声明的唯一标识id，status 为 “1” 时候非空
        self.vc_id = vc_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.biz_id is not None:
            result['biz_id'] = self.biz_id
        if self.biz_type is not None:
            result['biz_type'] = self.biz_type
        if self.issuer_did is not None:
            result['issuer_did'] = self.issuer_did
        if self.status is not None:
            result['status'] = self.status
        if self.subject_did is not None:
            result['subject_did'] = self.subject_did
        if self.vc_content is not None:
            result['vc_content'] = self.vc_content
        if self.vc_id is not None:
            result['vc_id'] = self.vc_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('biz_id') is not None:
            self.biz_id = m.get('biz_id')
        if m.get('biz_type') is not None:
            self.biz_type = m.get('biz_type')
        if m.get('issuer_did') is not None:
            self.issuer_did = m.get('issuer_did')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('subject_did') is not None:
            self.subject_did = m.get('subject_did')
        if m.get('vc_content') is not None:
            self.vc_content = m.get('vc_content')
        if m.get('vc_id') is not None:
            self.vc_id = m.get('vc_id')
        return self


class PushAuthInsurancePolicyRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        cert_no: str = None,
        cert_type: str = None,
        did: str = None,
        effect_end_time: str = None,
        effect_start_time: str = None,
        insured_time: str = None,
        issue_time: str = None,
        name: str = None,
        policy_no: str = None,
        policy_type: str = None,
        prod_name: str = None,
        prod_no: str = None,
        user_trace_code: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 投保人证件号码
        self.cert_no = cert_no
        # 投保人证件类型
        self.cert_type = cert_type
        # 投保人的did
        self.did = did
        # 保单失效时间
        self.effect_end_time = effect_end_time
        # 保单生效时间
        self.effect_start_time = effect_start_time
        # 投保时间
        self.insured_time = insured_time
        # 出单时间
        self.issue_time = issue_time
        # 投保人姓名
        self.name = name
        # 保单编号
        self.policy_no = policy_no
        # 保单类型
        self.policy_type = policy_type
        # 产品名称
        self.prod_name = prod_name
        # 产品编号
        self.prod_no = prod_no
        # 行为回溯的整体编号
        self.user_trace_code = user_trace_code

    def validate(self):
        self.validate_required(self.cert_no, 'cert_no')
        self.validate_required(self.did, 'did')
        self.validate_required(self.effect_end_time, 'effect_end_time')
        self.validate_required(self.effect_start_time, 'effect_start_time')
        self.validate_required(self.insured_time, 'insured_time')
        self.validate_required(self.issue_time, 'issue_time')
        self.validate_required(self.name, 'name')
        self.validate_required(self.policy_no, 'policy_no')
        self.validate_required(self.prod_name, 'prod_name')
        self.validate_required(self.prod_no, 'prod_no')
        self.validate_required(self.user_trace_code, 'user_trace_code')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.cert_no is not None:
            result['cert_no'] = self.cert_no
        if self.cert_type is not None:
            result['cert_type'] = self.cert_type
        if self.did is not None:
            result['did'] = self.did
        if self.effect_end_time is not None:
            result['effect_end_time'] = self.effect_end_time
        if self.effect_start_time is not None:
            result['effect_start_time'] = self.effect_start_time
        if self.insured_time is not None:
            result['insured_time'] = self.insured_time
        if self.issue_time is not None:
            result['issue_time'] = self.issue_time
        if self.name is not None:
            result['name'] = self.name
        if self.policy_no is not None:
            result['policy_no'] = self.policy_no
        if self.policy_type is not None:
            result['policy_type'] = self.policy_type
        if self.prod_name is not None:
            result['prod_name'] = self.prod_name
        if self.prod_no is not None:
            result['prod_no'] = self.prod_no
        if self.user_trace_code is not None:
            result['user_trace_code'] = self.user_trace_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('cert_no') is not None:
            self.cert_no = m.get('cert_no')
        if m.get('cert_type') is not None:
            self.cert_type = m.get('cert_type')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('effect_end_time') is not None:
            self.effect_end_time = m.get('effect_end_time')
        if m.get('effect_start_time') is not None:
            self.effect_start_time = m.get('effect_start_time')
        if m.get('insured_time') is not None:
            self.insured_time = m.get('insured_time')
        if m.get('issue_time') is not None:
            self.issue_time = m.get('issue_time')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('policy_no') is not None:
            self.policy_no = m.get('policy_no')
        if m.get('policy_type') is not None:
            self.policy_type = m.get('policy_type')
        if m.get('prod_name') is not None:
            self.prod_name = m.get('prod_name')
        if m.get('prod_no') is not None:
            self.prod_no = m.get('prod_no')
        if m.get('user_trace_code') is not None:
            self.user_trace_code = m.get('user_trace_code')
        return self


class PushAuthInsurancePolicyResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        vc_id: str = None,
        recording_id: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 凭证id
        self.vc_id = vc_id
        # 合并之后的录屏记录的id，recordingId
        self.recording_id = recording_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.vc_id is not None:
            result['vc_id'] = self.vc_id
        if self.recording_id is not None:
            result['recording_id'] = self.recording_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('vc_id') is not None:
            self.vc_id = m.get('vc_id')
        if m.get('recording_id') is not None:
            self.recording_id = m.get('recording_id')
        return self


class GetAuthFrontendAccesstokenRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        biz_type: str = None,
        user_did: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 业务类型
        self.biz_type = biz_type
        # 用户did
        self.user_did = user_did

    def validate(self):
        self.validate_required(self.biz_type, 'biz_type')
        self.validate_required(self.user_did, 'user_did')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.biz_type is not None:
            result['biz_type'] = self.biz_type
        if self.user_did is not None:
            result['user_did'] = self.user_did
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('biz_type') is not None:
            self.biz_type = m.get('biz_type')
        if m.get('user_did') is not None:
            self.user_did = m.get('user_did')
        return self


class GetAuthFrontendAccesstokenResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        access_token: str = None,
        expire: str = None,
        refresh_token: str = None,
        xreplay_token: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 访问令牌
        self.access_token = access_token
        # 过期时间
        self.expire = expire
        # refresh_token
        self.refresh_token = refresh_token
        # 和xreplay交互时使用的令牌
        self.xreplay_token = xreplay_token

    def validate(self):
        if self.expire is not None:
            self.validate_pattern(self.expire, 'expire', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.access_token is not None:
            result['access_token'] = self.access_token
        if self.expire is not None:
            result['expire'] = self.expire
        if self.refresh_token is not None:
            result['refresh_token'] = self.refresh_token
        if self.xreplay_token is not None:
            result['xreplay_token'] = self.xreplay_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('access_token') is not None:
            self.access_token = m.get('access_token')
        if m.get('expire') is not None:
            self.expire = m.get('expire')
        if m.get('refresh_token') is not None:
            self.refresh_token = m.get('refresh_token')
        if m.get('xreplay_token') is not None:
            self.xreplay_token = m.get('xreplay_token')
        return self


class CreateAuthClaimUrlRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        biz_type: str = None,
        claim_value: str = None,
        corp_did: str = None,
        expire_options: List[ValueUnitPair] = None,
        revocable: bool = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 业务类型
        self.biz_type = biz_type
        # 授权声明内容
        self.claim_value = claim_value
        # 被授权企业did
        self.corp_did = corp_did
        # 过期时间选项
        self.expire_options = expire_options
        # 授权是否可撤销
        self.revocable = revocable

    def validate(self):
        self.validate_required(self.biz_type, 'biz_type')
        self.validate_required(self.claim_value, 'claim_value')
        self.validate_required(self.corp_did, 'corp_did')
        self.validate_required(self.expire_options, 'expire_options')
        if self.expire_options:
            for k in self.expire_options:
                if k:
                    k.validate()
        self.validate_required(self.revocable, 'revocable')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.biz_type is not None:
            result['biz_type'] = self.biz_type
        if self.claim_value is not None:
            result['claim_value'] = self.claim_value
        if self.corp_did is not None:
            result['corp_did'] = self.corp_did
        result['expire_options'] = []
        if self.expire_options is not None:
            for k in self.expire_options:
                result['expire_options'].append(k.to_map() if k else None)
        if self.revocable is not None:
            result['revocable'] = self.revocable
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('biz_type') is not None:
            self.biz_type = m.get('biz_type')
        if m.get('claim_value') is not None:
            self.claim_value = m.get('claim_value')
        if m.get('corp_did') is not None:
            self.corp_did = m.get('corp_did')
        self.expire_options = []
        if m.get('expire_options') is not None:
            for k in m.get('expire_options'):
                temp_model = ValueUnitPair()
                self.expire_options.append(temp_model.from_map(k))
        if m.get('revocable') is not None:
            self.revocable = m.get('revocable')
        return self


class CreateAuthClaimUrlResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        biz_id: str = None,
        claim_url: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 待认证的业务id
        self.biz_id = biz_id
        # 授权模版跳转url
        self.claim_url = claim_url

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.biz_id is not None:
            result['biz_id'] = self.biz_id
        if self.claim_url is not None:
            result['claim_url'] = self.claim_url
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('biz_id') is not None:
            self.biz_id = m.get('biz_id')
        if m.get('claim_url') is not None:
            self.claim_url = m.get('claim_url')
        return self


class StartAuthVerifyCarinfoRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        biz_id: str = None,
        biz_type: str = None,
        cert_no: str = None,
        extension: str = None,
        license_no: str = None,
        name: str = None,
        two_meta: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 长度不超过64字符的业务唯一ID，用于对一个业务流的追踪，查询等。
        self.biz_id = biz_id
        # 业务类型，通常需要与授权宝服务沟通确定，业务类型可能影响此接口内部实现逻辑，长度不超过32字符。
        self.biz_type = biz_type
        # 加密前身份证号最后一位为字母 X 时，请使用大写 X，SHA256 加密字符串(小写)，身份证需 18
        # 岁以上。
        self.cert_no = cert_no
        # 保留字段，待扩展使用的JSON字符串内容
        self.extension = extension
        # 车牌号加密前车牌字母均为大写，SHA256 的加密后字符串(小写字母)
        self.license_no = license_no
        # 目标用户姓名的SHA256计算结果(小写字母)
        self.name = name
        # 姓名和身份证号拼接之后，SHA256加密的结果(小写字母)，身份证最后一位为字母 X 时， 请使用大写 X，加密后 SHA256 的 字符串(小写)， 身份证需 18 岁以上。
        self.two_meta = two_meta

    def validate(self):
        self.validate_required(self.biz_id, 'biz_id')
        self.validate_required(self.biz_type, 'biz_type')
        self.validate_required(self.cert_no, 'cert_no')
        self.validate_required(self.license_no, 'license_no')
        self.validate_required(self.name, 'name')
        self.validate_required(self.two_meta, 'two_meta')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.biz_id is not None:
            result['biz_id'] = self.biz_id
        if self.biz_type is not None:
            result['biz_type'] = self.biz_type
        if self.cert_no is not None:
            result['cert_no'] = self.cert_no
        if self.extension is not None:
            result['extension'] = self.extension
        if self.license_no is not None:
            result['license_no'] = self.license_no
        if self.name is not None:
            result['name'] = self.name
        if self.two_meta is not None:
            result['two_meta'] = self.two_meta
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('biz_id') is not None:
            self.biz_id = m.get('biz_id')
        if m.get('biz_type') is not None:
            self.biz_type = m.get('biz_type')
        if m.get('cert_no') is not None:
            self.cert_no = m.get('cert_no')
        if m.get('extension') is not None:
            self.extension = m.get('extension')
        if m.get('license_no') is not None:
            self.license_no = m.get('license_no')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('two_meta') is not None:
            self.two_meta = m.get('two_meta')
        return self


class StartAuthVerifyCarinfoResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        biz_id: str = None,
        biz_type: str = None,
        did: str = None,
        result_status: int = None,
        result_data: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 业务流水号，输入参数的bizId返回。
        self.biz_id = biz_id
        # 来自入参，具体看业务场景。
        self.biz_type = biz_type
        # 目标用户创建的did结果，如果为空则表明未创建。
        self.did = did
        # 查询结果
        # 1 一致(收费)
        # 2 姓名不一致(收费)
        # 3 身份证未命中(收费)
        # 4 车牌号不一致(收费)
        # 0 无意义(responsecode 不为 100 时 出现)
        self.result_status = result_status
        # 查询结果数据，result_status 不等于 1 时为null，结果是一个JSON字符串，具体结果内容解释，需要参考文档说明。
        self.result_data = result_data

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.biz_id is not None:
            result['biz_id'] = self.biz_id
        if self.biz_type is not None:
            result['biz_type'] = self.biz_type
        if self.did is not None:
            result['did'] = self.did
        if self.result_status is not None:
            result['result_status'] = self.result_status
        if self.result_data is not None:
            result['result_data'] = self.result_data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('biz_id') is not None:
            self.biz_id = m.get('biz_id')
        if m.get('biz_type') is not None:
            self.biz_type = m.get('biz_type')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('result_status') is not None:
            self.result_status = m.get('result_status')
        if m.get('result_data') is not None:
            self.result_data = m.get('result_data')
        return self


class StartAuthVerifyDriverinfoRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        biz_id: str = None,
        biz_type: str = None,
        cert_no: str = None,
        extension: str = None,
        name: str = None,
        two_meta: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 业务流水号，长度不超过64字符的业务唯一ID，用于对一个业务流的追踪，查询等。
        self.biz_id = biz_id
        # 业务类型，通常需要与授权宝服务沟通确定，业务类型可能影响此接口内部实现逻辑，长度不超过32字符。
        self.biz_type = biz_type
        # 加密前身份证号最后一位为字母 X 时，请使用大写 X，SHA256 加密字符串(小写)，身份证需 18 岁以上。
        self.cert_no = cert_no
        # 保留字段，待扩展使用的JSON字符串内容
        self.extension = extension
        # 目标用户姓名的SHA256计算结果(小写字母)。
        self.name = name
        # 姓名和身份证号拼接之后，SHA256加密的结果(小写字母)，身份证最后一位为字母 X 时， 请使用大写 X，加密后 SHA256 的 字符串(小写)， 身份证需 18 岁以上。
        self.two_meta = two_meta

    def validate(self):
        self.validate_required(self.biz_id, 'biz_id')
        self.validate_required(self.biz_type, 'biz_type')
        self.validate_required(self.cert_no, 'cert_no')
        self.validate_required(self.name, 'name')
        self.validate_required(self.two_meta, 'two_meta')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.biz_id is not None:
            result['biz_id'] = self.biz_id
        if self.biz_type is not None:
            result['biz_type'] = self.biz_type
        if self.cert_no is not None:
            result['cert_no'] = self.cert_no
        if self.extension is not None:
            result['extension'] = self.extension
        if self.name is not None:
            result['name'] = self.name
        if self.two_meta is not None:
            result['two_meta'] = self.two_meta
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('biz_id') is not None:
            self.biz_id = m.get('biz_id')
        if m.get('biz_type') is not None:
            self.biz_type = m.get('biz_type')
        if m.get('cert_no') is not None:
            self.cert_no = m.get('cert_no')
        if m.get('extension') is not None:
            self.extension = m.get('extension')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('two_meta') is not None:
            self.two_meta = m.get('two_meta')
        return self


class StartAuthVerifyDriverinfoResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        biz_id: str = None,
        biz_type: str = None,
        did: str = None,
        result_status: int = None,
        result_data: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 业务流水号，输入参数的bizId返回。
        self.biz_id = biz_id
        # 来自入参，具体看业务场景。
        self.biz_type = biz_type
        # 目标用户创建的did结果，如果为空则表明未创建。
        self.did = did
        # 查询结果：
        # 1 一致(收费)
        # 2 姓名不一致(收费)
        # 3 身份证未命中(收费)
        # 4 车牌号不一致(收费)
        # 0 无意义
        self.result_status = result_status
        # 查询结果数据，result_status 不等于 1 时为null，结果是一个JSON字符串，具体结果内容解释，需要参考文档说明。
        self.result_data = result_data

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.biz_id is not None:
            result['biz_id'] = self.biz_id
        if self.biz_type is not None:
            result['biz_type'] = self.biz_type
        if self.did is not None:
            result['did'] = self.did
        if self.result_status is not None:
            result['result_status'] = self.result_status
        if self.result_data is not None:
            result['result_data'] = self.result_data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('biz_id') is not None:
            self.biz_id = m.get('biz_id')
        if m.get('biz_type') is not None:
            self.biz_type = m.get('biz_type')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('result_status') is not None:
            self.result_status = m.get('result_status')
        if m.get('result_data') is not None:
            self.result_data = m.get('result_data')
        return self


class StartAuthVerifyCarinspectRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        biz_id: str = None,
        biz_type: str = None,
        plate_no: str = None,
        plate_type: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 长度不超过64字符的业务唯一ID，用于对一个业务流的追踪，查询等。
        self.biz_id = biz_id
        # 业务类型，通常需要与授权宝服务沟通确定，业务类型可能影响此接口内部实现逻辑，长度不超过32字符。
        self.biz_type = biz_type
        # 车牌号，内容大写，不带空格。
        self.plate_no = plate_no
        # 非必填参数，号牌种类说明，比如"01"代表大型汽车，具体类型入参说明参考文档枚举。
        self.plate_type = plate_type

    def validate(self):
        self.validate_required(self.biz_id, 'biz_id')
        self.validate_required(self.biz_type, 'biz_type')
        self.validate_required(self.plate_no, 'plate_no')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.biz_id is not None:
            result['biz_id'] = self.biz_id
        if self.biz_type is not None:
            result['biz_type'] = self.biz_type
        if self.plate_no is not None:
            result['plate_no'] = self.plate_no
        if self.plate_type is not None:
            result['plate_type'] = self.plate_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('biz_id') is not None:
            self.biz_id = m.get('biz_id')
        if m.get('biz_type') is not None:
            self.biz_type = m.get('biz_type')
        if m.get('plate_no') is not None:
            self.plate_no = m.get('plate_no')
        if m.get('plate_type') is not None:
            self.plate_type = m.get('plate_type')
        return self


class StartAuthVerifyCarinspectResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        inspection_date: str = None,
        status: int = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 年检有效期止。
        self.inspection_date = inspection_date
        # 0：正常   1：逾期未检验  2：无法判断
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.inspection_date is not None:
            result['inspection_date'] = self.inspection_date
        if self.status is not None:
            result['status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('inspection_date') is not None:
            self.inspection_date = m.get('inspection_date')
        if m.get('status') is not None:
            self.status = m.get('status')
        return self


class GetAuthClaimTemplateRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        biz_type: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 业务类型
        self.biz_type = biz_type

    def validate(self):
        self.validate_required(self.biz_type, 'biz_type')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.biz_type is not None:
            result['biz_type'] = self.biz_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('biz_type') is not None:
            self.biz_type = m.get('biz_type')
        return self


class GetAuthClaimTemplateResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        claim_template: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 授权声明模版
        self.claim_template = claim_template

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.claim_template is not None:
            result['claim_template'] = self.claim_template
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('claim_template') is not None:
            self.claim_template = m.get('claim_template')
        return self


class CreateAuthClaimVcRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        biz_type: str = None,
        biz_id: str = None,
        subject_did: str = None,
        content: str = None,
        issuer_did: str = None,
        expire: int = None,
        revocable: bool = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 业务类型
        self.biz_type = biz_type
        # 业务id
        self.biz_id = biz_id
        # 被授权者did
        self.subject_did = subject_did
        # 授权内容
        self.content = content
        # 授权发起者did
        self.issuer_did = issuer_did
        # 过期时间，长期为-1, 单位为毫秒
        self.expire = expire
        # 授权是否可撤销
        self.revocable = revocable

    def validate(self):
        self.validate_required(self.biz_type, 'biz_type')
        self.validate_required(self.biz_id, 'biz_id')
        self.validate_required(self.subject_did, 'subject_did')
        self.validate_required(self.content, 'content')
        self.validate_required(self.issuer_did, 'issuer_did')
        self.validate_required(self.expire, 'expire')
        self.validate_required(self.revocable, 'revocable')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.biz_type is not None:
            result['biz_type'] = self.biz_type
        if self.biz_id is not None:
            result['biz_id'] = self.biz_id
        if self.subject_did is not None:
            result['subject_did'] = self.subject_did
        if self.content is not None:
            result['content'] = self.content
        if self.issuer_did is not None:
            result['issuer_did'] = self.issuer_did
        if self.expire is not None:
            result['expire'] = self.expire
        if self.revocable is not None:
            result['revocable'] = self.revocable
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('biz_type') is not None:
            self.biz_type = m.get('biz_type')
        if m.get('biz_id') is not None:
            self.biz_id = m.get('biz_id')
        if m.get('subject_did') is not None:
            self.subject_did = m.get('subject_did')
        if m.get('content') is not None:
            self.content = m.get('content')
        if m.get('issuer_did') is not None:
            self.issuer_did = m.get('issuer_did')
        if m.get('expire') is not None:
            self.expire = m.get('expire')
        if m.get('revocable') is not None:
            self.revocable = m.get('revocable')
        return self


class CreateAuthClaimVcResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        biz_id: str = None,
        vc_id: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 业务id
        self.biz_id = biz_id
        # 可验证声明id
        self.vc_id = vc_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.biz_id is not None:
            result['biz_id'] = self.biz_id
        if self.vc_id is not None:
            result['vc_id'] = self.vc_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('biz_id') is not None:
            self.biz_id = m.get('biz_id')
        if m.get('vc_id') is not None:
            self.vc_id = m.get('vc_id')
        return self


class QueryAuthClaimVcRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        vc_id: str = None,
        biz_type: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 可验证声明id
        self.vc_id = vc_id
        # 业务类型
        self.biz_type = biz_type

    def validate(self):
        self.validate_required(self.vc_id, 'vc_id')
        self.validate_required(self.biz_type, 'biz_type')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.vc_id is not None:
            result['vc_id'] = self.vc_id
        if self.biz_type is not None:
            result['biz_type'] = self.biz_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('vc_id') is not None:
            self.vc_id = m.get('vc_id')
        if m.get('biz_type') is not None:
            self.biz_type = m.get('biz_type')
        return self


class QueryAuthClaimVcResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        vc_id: str = None,
        vc_content: str = None,
        status: int = None,
        biz_type: str = None,
        revocable: bool = None,
        expire: int = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 可验证声明id
        self.vc_id = vc_id
        # vc详情
        self.vc_content = vc_content
        # vc状态
        # 0:未授权
        # 1:已授权
        # 2: 拒绝授权
        # 3: 授权已撤销
        self.status = status
        # 业务类型
        self.biz_type = biz_type
        # 授权是否可撤销
        self.revocable = revocable
        # 过期时间
        self.expire = expire

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.vc_id is not None:
            result['vc_id'] = self.vc_id
        if self.vc_content is not None:
            result['vc_content'] = self.vc_content
        if self.status is not None:
            result['status'] = self.status
        if self.biz_type is not None:
            result['biz_type'] = self.biz_type
        if self.revocable is not None:
            result['revocable'] = self.revocable
        if self.expire is not None:
            result['expire'] = self.expire
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('vc_id') is not None:
            self.vc_id = m.get('vc_id')
        if m.get('vc_content') is not None:
            self.vc_content = m.get('vc_content')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('biz_type') is not None:
            self.biz_type = m.get('biz_type')
        if m.get('revocable') is not None:
            self.revocable = m.get('revocable')
        if m.get('expire') is not None:
            self.expire = m.get('expire')
        return self


class QueryAuthVehicleinsuranceRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        vehicle_no: str = None,
        vehicle_type: str = None,
        vin: str = None,
        owner_meta_info: UserMetaInfo = None,
        biz_type: str = None,
        biz_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 车牌号
        self.vehicle_no = vehicle_no
        # 车型代码. 可选, 02 普通小客车(默认); 52 新能源小客车
        self.vehicle_type = vehicle_type
        # 车辆识别码
        self.vin = vin
        # 车主认证信息
        self.owner_meta_info = owner_meta_info
        # 业务类型
        self.biz_type = biz_type
        # 业务id
        self.biz_id = biz_id

    def validate(self):
        self.validate_required(self.vehicle_no, 'vehicle_no')
        self.validate_required(self.vin, 'vin')
        self.validate_required(self.owner_meta_info, 'owner_meta_info')
        if self.owner_meta_info:
            self.owner_meta_info.validate()
        self.validate_required(self.biz_type, 'biz_type')
        self.validate_required(self.biz_id, 'biz_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.vehicle_no is not None:
            result['vehicle_no'] = self.vehicle_no
        if self.vehicle_type is not None:
            result['vehicle_type'] = self.vehicle_type
        if self.vin is not None:
            result['vin'] = self.vin
        if self.owner_meta_info is not None:
            result['owner_meta_info'] = self.owner_meta_info.to_map()
        if self.biz_type is not None:
            result['biz_type'] = self.biz_type
        if self.biz_id is not None:
            result['biz_id'] = self.biz_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('vehicle_no') is not None:
            self.vehicle_no = m.get('vehicle_no')
        if m.get('vehicle_type') is not None:
            self.vehicle_type = m.get('vehicle_type')
        if m.get('vin') is not None:
            self.vin = m.get('vin')
        if m.get('owner_meta_info') is not None:
            temp_model = UserMetaInfo()
            self.owner_meta_info = temp_model.from_map(m['owner_meta_info'])
        if m.get('biz_type') is not None:
            self.biz_type = m.get('biz_type')
        if m.get('biz_id') is not None:
            self.biz_id = m.get('biz_id')
        return self


class QueryAuthVehicleinsuranceResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        last_insurance_date: str = None,
        first_insurance_date: str = None,
        latest_insurance_date: str = None,
        vehicle_did: str = None,
        owner_user_did: str = None,
        isp_type: int = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 上次交强险投保年月
        self.last_insurance_date = last_insurance_date
        # 初次投保日期
        self.first_insurance_date = first_insurance_date
        # 最近交强险投保期止
        self.latest_insurance_date = latest_insurance_date
        # 车辆did
        self.vehicle_did = vehicle_did
        # 车主did
        self.owner_user_did = owner_user_did
        # 服务提供方代码
        self.isp_type = isp_type

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.last_insurance_date is not None:
            result['last_insurance_date'] = self.last_insurance_date
        if self.first_insurance_date is not None:
            result['first_insurance_date'] = self.first_insurance_date
        if self.latest_insurance_date is not None:
            result['latest_insurance_date'] = self.latest_insurance_date
        if self.vehicle_did is not None:
            result['vehicle_did'] = self.vehicle_did
        if self.owner_user_did is not None:
            result['owner_user_did'] = self.owner_user_did
        if self.isp_type is not None:
            result['isp_type'] = self.isp_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('last_insurance_date') is not None:
            self.last_insurance_date = m.get('last_insurance_date')
        if m.get('first_insurance_date') is not None:
            self.first_insurance_date = m.get('first_insurance_date')
        if m.get('latest_insurance_date') is not None:
            self.latest_insurance_date = m.get('latest_insurance_date')
        if m.get('vehicle_did') is not None:
            self.vehicle_did = m.get('vehicle_did')
        if m.get('owner_user_did') is not None:
            self.owner_user_did = m.get('owner_user_did')
        if m.get('isp_type') is not None:
            self.isp_type = m.get('isp_type')
        return self


class QueryAuthVehicleinsuranceVcRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        vehicle_no: str = None,
        vehicle_type: str = None,
        vin: str = None,
        owner_meta_info: UserMetaInfo = None,
        biz_type: str = None,
        biz_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 车牌号
        self.vehicle_no = vehicle_no
        # 车型代码. 可选, 02 普通小客车(默认); 52 新能源小客车
        self.vehicle_type = vehicle_type
        # 车辆识别码
        self.vin = vin
        # 车主认证信息
        self.owner_meta_info = owner_meta_info
        # 业务类型
        self.biz_type = biz_type
        # 业务id
        self.biz_id = biz_id

    def validate(self):
        self.validate_required(self.vehicle_no, 'vehicle_no')
        self.validate_required(self.vin, 'vin')
        self.validate_required(self.owner_meta_info, 'owner_meta_info')
        if self.owner_meta_info:
            self.owner_meta_info.validate()
        self.validate_required(self.biz_type, 'biz_type')
        self.validate_required(self.biz_id, 'biz_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.vehicle_no is not None:
            result['vehicle_no'] = self.vehicle_no
        if self.vehicle_type is not None:
            result['vehicle_type'] = self.vehicle_type
        if self.vin is not None:
            result['vin'] = self.vin
        if self.owner_meta_info is not None:
            result['owner_meta_info'] = self.owner_meta_info.to_map()
        if self.biz_type is not None:
            result['biz_type'] = self.biz_type
        if self.biz_id is not None:
            result['biz_id'] = self.biz_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('vehicle_no') is not None:
            self.vehicle_no = m.get('vehicle_no')
        if m.get('vehicle_type') is not None:
            self.vehicle_type = m.get('vehicle_type')
        if m.get('vin') is not None:
            self.vin = m.get('vin')
        if m.get('owner_meta_info') is not None:
            temp_model = UserMetaInfo()
            self.owner_meta_info = temp_model.from_map(m['owner_meta_info'])
        if m.get('biz_type') is not None:
            self.biz_type = m.get('biz_type')
        if m.get('biz_id') is not None:
            self.biz_id = m.get('biz_id')
        return self


class QueryAuthVehicleinsuranceVcResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        last_insurance_date: str = None,
        first_insurance_date: str = None,
        latest_insurance_date: str = None,
        vehicle_did: str = None,
        owner_user_did: str = None,
        vc_id: str = None,
        isp_type: int = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 上次交强险投保年月
        self.last_insurance_date = last_insurance_date
        # 初次投保日期
        self.first_insurance_date = first_insurance_date
        # 最近交强险投保期止
        self.latest_insurance_date = latest_insurance_date
        # 车辆did
        self.vehicle_did = vehicle_did
        # 车主did
        self.owner_user_did = owner_user_did
        # 可验证声明id
        self.vc_id = vc_id
        # 业务提供方代码
        self.isp_type = isp_type

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.last_insurance_date is not None:
            result['last_insurance_date'] = self.last_insurance_date
        if self.first_insurance_date is not None:
            result['first_insurance_date'] = self.first_insurance_date
        if self.latest_insurance_date is not None:
            result['latest_insurance_date'] = self.latest_insurance_date
        if self.vehicle_did is not None:
            result['vehicle_did'] = self.vehicle_did
        if self.owner_user_did is not None:
            result['owner_user_did'] = self.owner_user_did
        if self.vc_id is not None:
            result['vc_id'] = self.vc_id
        if self.isp_type is not None:
            result['isp_type'] = self.isp_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('last_insurance_date') is not None:
            self.last_insurance_date = m.get('last_insurance_date')
        if m.get('first_insurance_date') is not None:
            self.first_insurance_date = m.get('first_insurance_date')
        if m.get('latest_insurance_date') is not None:
            self.latest_insurance_date = m.get('latest_insurance_date')
        if m.get('vehicle_did') is not None:
            self.vehicle_did = m.get('vehicle_did')
        if m.get('owner_user_did') is not None:
            self.owner_user_did = m.get('owner_user_did')
        if m.get('vc_id') is not None:
            self.vc_id = m.get('vc_id')
        if m.get('isp_type') is not None:
            self.isp_type = m.get('isp_type')
        return self


class QueryAuthVcStatisticsRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        biz_type: str = None,
        size: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 业务场景码，通常特定的业务场景需要与授权宝约定使用
        self.biz_type = biz_type
        # 返回分布数据以day为单位的数量，当前此参数保留，只返回7day的分布，后续启用此参数。
        self.size = size

    def validate(self):
        self.validate_required(self.biz_type, 'biz_type')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.biz_type is not None:
            result['biz_type'] = self.biz_type
        if self.size is not None:
            result['size'] = self.size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('biz_type') is not None:
            self.biz_type = m.get('biz_type')
        if m.get('size') is not None:
            self.size = m.get('size')
        return self


class QueryAuthVcStatisticsResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        biz_type: str = None,
        total: int = None,
        list: List[Curve] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 业务场景值，与入参相同
        self.biz_type = biz_type
        # 指定业务场景的数据量，在核酸检测场景，就是整体核酸检测数据的数量
        self.total = total
        # 分布曲线描绘的一个点，day为单位的分布数据汇总情况。
        self.list = list

    def validate(self):
        if self.list:
            for k in self.list:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.biz_type is not None:
            result['biz_type'] = self.biz_type
        if self.total is not None:
            result['total'] = self.total
        result['list'] = []
        if self.list is not None:
            for k in self.list:
                result['list'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('biz_type') is not None:
            self.biz_type = m.get('biz_type')
        if m.get('total') is not None:
            self.total = m.get('total')
        self.list = []
        if m.get('list') is not None:
            for k in m.get('list'):
                temp_model = Curve()
                self.list.append(temp_model.from_map(k))
        return self


class QueryAuthVcRealtimeRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        biz_type: str = None,
        size: int = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 查询目标业务的实时凭证颁发情况
        self.biz_type = biz_type
        # 最新实时颁发的凭证查看数目，可以不设定，默认返回10个结果，如果整体结果少于10，则按情况返回。
        self.size = size

    def validate(self):
        self.validate_required(self.biz_type, 'biz_type')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.biz_type is not None:
            result['biz_type'] = self.biz_type
        if self.size is not None:
            result['size'] = self.size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('biz_type') is not None:
            self.biz_type = m.get('biz_type')
        if m.get('size') is not None:
            self.size = m.get('size')
        return self


class QueryAuthVcRealtimeResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        biz_type: str = None,
        total: int = None,
        list: List[str] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 业务类型场景码，与入参相同。
        self.biz_type = biz_type
        # 实际返回的结果数目，如果真是数据量小于request中的size的情况下，total 不等于 size，否则 total 与size值相等。
        self.total = total
        # 列表结果，其中每个元素是一个json的string，这个json实际就是数据源提供的数据上链之前的内容。
        # 
        # {
        # "key":"vc:mychain:01364d9acbda8d09d8c30d94987b40b28f2c28d4ff8f86dbe16197a8f2b0c031",
        # "name": "张三",           //个人姓名
        # "certNo": "210XXXXXX90", //个人证件号码
        # "mobile": "138XXXXXX90", //个人手机号码
        # "orgName": "XXX检测中心",      //检测机构名称
        # "orgNo": "90XXXX00",    //检测机构编号 (可选)
        # "type":"1",             //具体类型说明：1：核酸检测证明，2：疫苗接种证明，其他类型后续扩展
        # "result":"阴性",
        # "date":"2021-03-09",    //检测的日期，请统一使用此标准
        # "timestamp":"检测准确时间戳"   //其它字段可以再补充
        # }
        self.list = list

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.biz_type is not None:
            result['biz_type'] = self.biz_type
        if self.total is not None:
            result['total'] = self.total
        if self.list is not None:
            result['list'] = self.list
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('biz_type') is not None:
            self.biz_type = m.get('biz_type')
        if m.get('total') is not None:
            self.total = m.get('total')
        if m.get('list') is not None:
            self.list = m.get('list')
        return self


class QueryAuthOrgStatusRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        biz_type: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 业务类型说明，当前查询的业务类型，不同业务的机构列表不同。
        self.biz_type = biz_type

    def validate(self):
        self.validate_required(self.biz_type, 'biz_type')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.biz_type is not None:
            result['biz_type'] = self.biz_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('biz_type') is not None:
            self.biz_type = m.get('biz_type')
        return self


class QueryAuthOrgStatusResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        biz_type: str = None,
        list: List[str] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 业务场景码类型
        self.biz_type = biz_type
        # 列表结果，其中每个元素是一个json的string，这个json实际就是数据源提供的数据上链之前的内容。
        # 
        # [
        # {
        # "did": "did:mychain:b11dd863d31c38507d6cf8e615b897c7a9160d145e404b8a991964179c0e0bfd",
        # "orgName": "XX检查门诊-1",
        # "orgNo": "机构编号-1",
        # "logoUrl": "https://gw.alipayobjects.com/mdn/rms_40e4ff/afts/img/A*a8QOSJysDlsAAAAAAAAAAABkARQnAQ",
        # "status": 1
        # },
        # {
        # "did": "did:mychain:b11dd863d31c38507d6cf8e615b897c7a9160d145e404b8a991964179c0e0bfe",
        # "orgName": "XX检查门诊-2",
        # "orgNo": "机构编号-2",
        # "logoUrl": "https://gw.alipayobjects.com/mdn/rms_40e4ff/afts/img/A*a8QOSJysDlsAAAAAAAAAAABkARQnAQ",
        # "status": 0
        # }
        # ]
        self.list = list

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.biz_type is not None:
            result['biz_type'] = self.biz_type
        if self.list is not None:
            result['list'] = self.list
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('biz_type') is not None:
            self.biz_type = m.get('biz_type')
        if m.get('list') is not None:
            self.list = m.get('list')
        return self


class StartDidCorporateAgentcreateRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        biz_code: str = None,
        extension_info: str = None,
        indexs: List[str] = None,
        owner_name: str = None,
        owner_uid: str = None,
        services: List[DidDocServicesInfo] = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 场景码，找dis工作人员进行分配
        self.biz_code = biz_code
        # 扩展字段
        self.extension_info = extension_info
        # 所有需要关联的外键，外键必须已did auth key controller的did作为前缀+“sidekey:”+外键
        self.indexs = indexs
        # 企业名称
        self.owner_name = owner_name
        # 自定义企业唯一id，企业在自有模式下的唯一号bid的hash值，调用者需要保证其唯一性
        self.owner_uid = owner_uid
        # 携带自己定义的服务类型
        self.services = services

    def validate(self):
        self.validate_required(self.owner_uid, 'owner_uid')
        if self.owner_uid is not None:
            self.validate_max_length(self.owner_uid, 'owner_uid', 128)
        if self.services:
            for k in self.services:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        if self.extension_info is not None:
            result['extension_info'] = self.extension_info
        if self.indexs is not None:
            result['indexs'] = self.indexs
        if self.owner_name is not None:
            result['owner_name'] = self.owner_name
        if self.owner_uid is not None:
            result['owner_uid'] = self.owner_uid
        result['services'] = []
        if self.services is not None:
            for k in self.services:
                result['services'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        if m.get('extension_info') is not None:
            self.extension_info = m.get('extension_info')
        if m.get('indexs') is not None:
            self.indexs = m.get('indexs')
        if m.get('owner_name') is not None:
            self.owner_name = m.get('owner_name')
        if m.get('owner_uid') is not None:
            self.owner_uid = m.get('owner_uid')
        self.services = []
        if m.get('services') is not None:
            for k in m.get('services'):
                temp_model = DidDocServicesInfo()
                self.services.append(temp_model.from_map(k))
        return self


class StartDidCorporateAgentcreateResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        did: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 生成的did字符串
        self.did = did

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.did is not None:
            result['did'] = self.did
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('did') is not None:
            self.did = m.get('did')
        return self


class StartDidPersonAgentcreateRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        extension_info: str = None,
        indexs: List[str] = None,
        owner_name: str = None,
        owner_uid: str = None,
        services: List[DidDocServicesInfo] = None,
        biz_code: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 企业自定信息
        self.extension_info = extension_info
        # 所有需要关联的外键，外键必须已did auth key controller的did作为前缀+“sidekey:”+外键
        self.indexs = indexs
        # 名称
        self.owner_name = owner_name
        # 唯一号，比如可以是hash(证件类型+企业营业执照号) 计算出来的唯一值等
        self.owner_uid = owner_uid
        # 携带自己定义的服务类型
        self.services = services
        # 场景码，找dis工作人员进行分配
        self.biz_code = biz_code

    def validate(self):
        self.validate_required(self.owner_uid, 'owner_uid')
        if self.services:
            for k in self.services:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.extension_info is not None:
            result['extension_info'] = self.extension_info
        if self.indexs is not None:
            result['indexs'] = self.indexs
        if self.owner_name is not None:
            result['owner_name'] = self.owner_name
        if self.owner_uid is not None:
            result['owner_uid'] = self.owner_uid
        result['services'] = []
        if self.services is not None:
            for k in self.services:
                result['services'].append(k.to_map() if k else None)
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('extension_info') is not None:
            self.extension_info = m.get('extension_info')
        if m.get('indexs') is not None:
            self.indexs = m.get('indexs')
        if m.get('owner_name') is not None:
            self.owner_name = m.get('owner_name')
        if m.get('owner_uid') is not None:
            self.owner_uid = m.get('owner_uid')
        self.services = []
        if m.get('services') is not None:
            for k in m.get('services'):
                temp_model = DidDocServicesInfo()
                self.services.append(temp_model.from_map(k))
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        return self


class StartDidPersonAgentcreateResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        did: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 生成的did字符串
        self.did = did

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.did is not None:
            result['did'] = self.did
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('did') is not None:
            self.did = m.get('did')
        return self


class StartDidCorporateSelfcreateRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        extension: str = None,
        owner_name: str = None,
        services: List[DidDocServicesInfo] = None,
        biz_code: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 扩展信息
        self.extension = extension
        # 公司名称
        self.owner_name = owner_name
        # 携带自己定义的服务类型
        self.services = services
        # 场景码，找dis工作人员进行分配
        self.biz_code = biz_code

    def validate(self):
        if self.services:
            for k in self.services:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.extension is not None:
            result['extension'] = self.extension
        if self.owner_name is not None:
            result['owner_name'] = self.owner_name
        result['services'] = []
        if self.services is not None:
            for k in self.services:
                result['services'].append(k.to_map() if k else None)
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('extension') is not None:
            self.extension = m.get('extension')
        if m.get('owner_name') is not None:
            self.owner_name = m.get('owner_name')
        self.services = []
        if m.get('services') is not None:
            for k in m.get('services'):
                temp_model = DidDocServicesInfo()
                self.services.append(temp_model.from_map(k))
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        return self


class StartDidCorporateSelfcreateResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        did: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 生成的did字符串
        self.did = did

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.did is not None:
            result['did'] = self.did
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('did') is not None:
            self.did = m.get('did')
        return self


class StartDidPersonSelfcreateRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        extension_info: str = None,
        owner_name: str = None,
        services: List[DidDocServicesInfo] = None,
        biz_code: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 扩展字段
        self.extension_info = extension_info
        # 由调用者，或者浏览器直接生成
        self.owner_name = owner_name
        # 携带自己定义的服务类型
        # 
        self.services = services
        # 场景码，找dis工作人员进行分配
        self.biz_code = biz_code

    def validate(self):
        if self.services:
            for k in self.services:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.extension_info is not None:
            result['extension_info'] = self.extension_info
        if self.owner_name is not None:
            result['owner_name'] = self.owner_name
        result['services'] = []
        if self.services is not None:
            for k in self.services:
                result['services'].append(k.to_map() if k else None)
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('extension_info') is not None:
            self.extension_info = m.get('extension_info')
        if m.get('owner_name') is not None:
            self.owner_name = m.get('owner_name')
        self.services = []
        if m.get('services') is not None:
            for k in m.get('services'):
                temp_model = DidDocServicesInfo()
                self.services.append(temp_model.from_map(k))
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        return self


class StartDidPersonSelfcreateResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        did: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 生成的did字符串
        self.did = did

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.did is not None:
            result['did'] = self.did
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('did') is not None:
            self.did = m.get('did')
        return self


class StartDidVerifiableclaimIssureRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        bare_claim: BareClaim = None,
        expire: int = None,
        issuer: str = None,
        subject: str = None,
        type: List[str] = None,
        verify_status_type: str = None,
        biz_code: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 颁发证书声明
        self.bare_claim = bare_claim
        # 过期时间
        self.expire = expire
        # 由谁来颁发，该did必须为调用者自己或者自己代理的did
        self.issuer = issuer
        # 为哪个did颁发
        self.subject = subject
        # 验证声明类型，目前默认VerifiableCredential
        self.type = type
        # 验证声明状态方式，目前只支持直接通过声明id上链查找状态方式，后续会支持更多方式
        self.verify_status_type = verify_status_type
        # 场景码，找dis工作人员进行分配
        self.biz_code = biz_code

    def validate(self):
        self.validate_required(self.bare_claim, 'bare_claim')
        if self.bare_claim:
            self.bare_claim.validate()
        self.validate_required(self.expire, 'expire')
        self.validate_required(self.issuer, 'issuer')
        self.validate_required(self.subject, 'subject')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.bare_claim is not None:
            result['bare_claim'] = self.bare_claim.to_map()
        if self.expire is not None:
            result['expire'] = self.expire
        if self.issuer is not None:
            result['issuer'] = self.issuer
        if self.subject is not None:
            result['subject'] = self.subject
        if self.type is not None:
            result['type'] = self.type
        if self.verify_status_type is not None:
            result['verify_status_type'] = self.verify_status_type
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('bare_claim') is not None:
            temp_model = BareClaim()
            self.bare_claim = temp_model.from_map(m['bare_claim'])
        if m.get('expire') is not None:
            self.expire = m.get('expire')
        if m.get('issuer') is not None:
            self.issuer = m.get('issuer')
        if m.get('subject') is not None:
            self.subject = m.get('subject')
        if m.get('type') is not None:
            self.type = m.get('type')
        if m.get('verify_status_type') is not None:
            self.verify_status_type = m.get('verify_status_type')
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        return self


class StartDidVerifiableclaimIssureResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        verifiable_claim_content: str = None,
        verifiable_claim_id: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 可验证声明的完整声明 {"content":{"verion":"0.7.0","issuer":"xxxx","subject":"xxxx","expire":1530735444,"issucanceDate":1530735000,"id":"XXXX","claim":{//用户自定义},"status":{"type":"XXXX","id":"XXXXX"}},"proof":{"type":"ecdsa","created":"2018-06-18T21:19:10Z","verificationMethod":"XXXX","signatureValue":"XXXXX"}}
        self.verifiable_claim_content = verifiable_claim_content
        # 声明id
        self.verifiable_claim_id = verifiable_claim_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.verifiable_claim_content is not None:
            result['verifiable_claim_content'] = self.verifiable_claim_content
        if self.verifiable_claim_id is not None:
            result['verifiable_claim_id'] = self.verifiable_claim_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('verifiable_claim_content') is not None:
            self.verifiable_claim_content = m.get('verifiable_claim_content')
        if m.get('verifiable_claim_id') is not None:
            self.verifiable_claim_id = m.get('verifiable_claim_id')
        return self


class StartDidVerifiableclaimVerifierRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        indexs: str = None,
        verifiable_claim: str = None,
        biz_code: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 用于零知识证明类型的可验证声明的验证。index是对应于完整VC的一个json字符串，其中key值保持和原始VC一致，value如果是1表示verificate_claim对应key携带的是对应field的原始值，而如果Key的value是0表示verificate_claim对应key携带的是对应field的merkle root值。
        self.indexs = indexs
        # 可验证声明
        self.verifiable_claim = verifiable_claim
        # 场景码，找dis工作人员进行分配
        self.biz_code = biz_code

    def validate(self):
        self.validate_required(self.verifiable_claim, 'verifiable_claim')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.indexs is not None:
            result['indexs'] = self.indexs
        if self.verifiable_claim is not None:
            result['verifiable_claim'] = self.verifiable_claim
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('indexs') is not None:
            self.indexs = m.get('indexs')
        if m.get('verifiable_claim') is not None:
            self.verifiable_claim = m.get('verifiable_claim')
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        return self


class StartDidVerifiableclaimVerifierResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class QueryDidDocRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        did: str = None,
        biz_code: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 请求者did
        self.did = did
        # 场景码，找dis工作人员进行分配
        self.biz_code = biz_code

    def validate(self):
        self.validate_required(self.did, 'did')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.did is not None:
            result['did'] = self.did
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        return self


class QueryDidDocResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        doc: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # did对应的doc
        self.doc = doc

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.doc is not None:
            result['doc'] = self.doc
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('doc') is not None:
            self.doc = m.get('doc')
        return self


class UpdateDidVerifiableclaimStatusRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        biz_code: str = None,
        status: str = None,
        vc_id: str = None,
        issuer_did: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 场景码，找dis工作人员进行分配
        self.biz_code = biz_code
        # 希望可验证声明的状态， 0无效，1生效
        self.status = status
        # 可验证声明id
        self.vc_id = vc_id
        # 该VC的颁发者
        self.issuer_did = issuer_did

    def validate(self):
        self.validate_required(self.status, 'status')
        self.validate_required(self.vc_id, 'vc_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        if self.status is not None:
            result['status'] = self.status
        if self.vc_id is not None:
            result['vc_id'] = self.vc_id
        if self.issuer_did is not None:
            result['issuer_did'] = self.issuer_did
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('vc_id') is not None:
            self.vc_id = m.get('vc_id')
        if m.get('issuer_did') is not None:
            self.issuer_did = m.get('issuer_did')
        return self


class UpdateDidVerifiableclaimStatusResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class UpdateDidCorporateExtensionserviceRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        did: str = None,
        extension: str = None,
        biz_code: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 需要更新的did doc对应的did字段；该did必须为调用者自己的did，或者托管给调用者的did
        self.did = did
        # 修改后的全量扩展字段
        self.extension = extension
        # 场景码，找dis工作人员进行分配
        self.biz_code = biz_code

    def validate(self):
        self.validate_required(self.did, 'did')
        self.validate_required(self.extension, 'extension')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.did is not None:
            result['did'] = self.did
        if self.extension is not None:
            result['extension'] = self.extension
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('extension') is not None:
            self.extension = m.get('extension')
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        return self


class UpdateDidCorporateExtensionserviceResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class StartDidCorporateCustomerservicetypeRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        service_types: List[DidServiceType] = None,
        biz_code: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 自定义的扩展服务类型
        self.service_types = service_types
        # 场景码，找dis工作人员进行分配
        self.biz_code = biz_code

    def validate(self):
        self.validate_required(self.service_types, 'service_types')
        if self.service_types:
            for k in self.service_types:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        result['service_types'] = []
        if self.service_types is not None:
            for k in self.service_types:
                result['service_types'].append(k.to_map() if k else None)
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        self.service_types = []
        if m.get('service_types') is not None:
            for k in m.get('service_types'):
                temp_model = DidServiceType()
                self.service_types.append(temp_model.from_map(k))
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        return self


class StartDidCorporateCustomerservicetypeResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class StartDidCertificationThreemetaRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        cert_no: str = None,
        did: str = None,
        mobile: str = None,
        name: str = None,
        biz_code: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 身份证号码
        # 
        self.cert_no = cert_no
        # 证书的subject did
        # 
        self.did = did
        # 手机号码
        # 
        self.mobile = mobile
        # 姓名
        self.name = name
        # 场景码，找dis工作人员进行分配
        self.biz_code = biz_code

    def validate(self):
        self.validate_required(self.cert_no, 'cert_no')
        self.validate_required(self.did, 'did')
        self.validate_required(self.mobile, 'mobile')
        self.validate_required(self.name, 'name')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.cert_no is not None:
            result['cert_no'] = self.cert_no
        if self.did is not None:
            result['did'] = self.did
        if self.mobile is not None:
            result['mobile'] = self.mobile
        if self.name is not None:
            result['name'] = self.name
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('cert_no') is not None:
            self.cert_no = m.get('cert_no')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('mobile') is not None:
            self.mobile = m.get('mobile')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        return self


class StartDidCertificationThreemetaResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        vc_id: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # vc id，可通过该字符串来查询vc具体内容
        # 
        self.vc_id = vc_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.vc_id is not None:
            result['vc_id'] = self.vc_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('vc_id') is not None:
            self.vc_id = m.get('vc_id')
        return self


class StartDidCertificationTwometaRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        cert_no: str = None,
        did: str = None,
        name: str = None,
        biz_code: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 身份证号码
        self.cert_no = cert_no
        # 颁发证书的subject did
        self.did = did
        # 姓名
        self.name = name
        # 场景码，找dis工作人员进行分配
        self.biz_code = biz_code

    def validate(self):
        self.validate_required(self.cert_no, 'cert_no')
        self.validate_required(self.did, 'did')
        self.validate_required(self.name, 'name')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.cert_no is not None:
            result['cert_no'] = self.cert_no
        if self.did is not None:
            result['did'] = self.did
        if self.name is not None:
            result['name'] = self.name
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('cert_no') is not None:
            self.cert_no = m.get('cert_no')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        return self


class StartDidCertificationTwometaResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        vc_id: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # vc id，可通过该字符串来查询vc具体内容
        self.vc_id = vc_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.vc_id is not None:
            result['vc_id'] = self.vc_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('vc_id') is not None:
            self.vc_id = m.get('vc_id')
        return self


class QueryDidVcRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        vc_id: str = None,
        verifier_did: str = None,
        biz_code: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # vc id，可通过该字符串来查询vc具体内容
        self.vc_id = vc_id
        # 验证者id
        self.verifier_did = verifier_did
        # 场景码，找dis工作人员进行分配
        self.biz_code = biz_code

    def validate(self):
        self.validate_required(self.vc_id, 'vc_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.vc_id is not None:
            result['vc_id'] = self.vc_id
        if self.verifier_did is not None:
            result['verifier_did'] = self.verifier_did
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('vc_id') is not None:
            self.vc_id = m.get('vc_id')
        if m.get('verifier_did') is not None:
            self.verifier_did = m.get('verifier_did')
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        return self


class QueryDidVcResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        vc_content: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 可验证声明的完整声明 {"content":{"verion":"0.7.0","issuer":"xxxx","subject":"xxxx","expire":1530735444,"issucanceDate":1530735000,"id":"XXXX","claim":{//用户自定义},"status":{"type":"XXXX","id":"XXXXX"}},"proof":{"type":"ecdsa","created":"2018-06-18T21:19:10Z","verificationMethod":"XXXX","signatureValue":"XXXXX"}}
        self.vc_content = vc_content

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.vc_content is not None:
            result['vc_content'] = self.vc_content
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('vc_content') is not None:
            self.vc_content = m.get('vc_content')
        return self


class StartDidIdentificationFaceauthRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        auth_type: str = None,
        did: str = None,
        identity_param: IdentityParam = None,
        return_url: str = None,
        biz_code: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 认证类型,枚举值 PC_AUTH、APP_AUTH
        self.auth_type = auth_type
        # 颁发证书的subject did
        self.did = did
        # 用户身份信息
        self.identity_param = identity_param
        # 认证接口回调路径，POST接口 请求示例： { "certifyId":"0242de204e1a2c3ed6ee5e21d8a57a4c", "did":"xxxxx","vcId":"xxxxx" }
        self.return_url = return_url
        # 场景码，找dis工作人员进行分配
        self.biz_code = biz_code

    def validate(self):
        self.validate_required(self.auth_type, 'auth_type')
        self.validate_required(self.did, 'did')
        self.validate_required(self.identity_param, 'identity_param')
        if self.identity_param:
            self.identity_param.validate()

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.auth_type is not None:
            result['auth_type'] = self.auth_type
        if self.did is not None:
            result['did'] = self.did
        if self.identity_param is not None:
            result['identity_param'] = self.identity_param.to_map()
        if self.return_url is not None:
            result['return_url'] = self.return_url
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('auth_type') is not None:
            self.auth_type = m.get('auth_type')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('identity_param') is not None:
            temp_model = IdentityParam()
            self.identity_param = temp_model.from_map(m['identity_param'])
        if m.get('return_url') is not None:
            self.return_url = m.get('return_url')
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        return self


class StartDidIdentificationFaceauthResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        certify_id: str = None,
        certify_url: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 认证ID
        self.certify_id = certify_id
        # 二维码URL，用户支付宝扫一扫实人认证
        self.certify_url = certify_url

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.certify_id is not None:
            result['certify_id'] = self.certify_id
        if self.certify_url is not None:
            result['certify_url'] = self.certify_url
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('certify_id') is not None:
            self.certify_id = m.get('certify_id')
        if m.get('certify_url') is not None:
            self.certify_url = m.get('certify_url')
        return self


class QueryDidIdentificationFaceauthRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        certify_id: str = None,
        biz_code: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 认证ID，用于查询认证结果
        self.certify_id = certify_id
        # 场景码，找dis工作人员进行分配
        self.biz_code = biz_code

    def validate(self):
        self.validate_required(self.certify_id, 'certify_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.certify_id is not None:
            result['certify_id'] = self.certify_id
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('certify_id') is not None:
            self.certify_id = m.get('certify_id')
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        return self


class QueryDidIdentificationFaceauthResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        vc_id: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # vc id，可通过该字符串来查询vc具体内容
        self.vc_id = vc_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.vc_id is not None:
            result['vc_id'] = self.vc_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('vc_id') is not None:
            self.vc_id = m.get('vc_id')
        return self


class StartDidNotificationConsumerRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        call_back_url: str = None,
        did: str = None,
        type: int = None,
        biz_code: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 事件发生时的回调路径，必须满足：
        # metho：POST
        # Content-Type：application/json
        self.call_back_url = call_back_url
        # 关注的did；这个did必须是调用者自己的did，也可以是托管给调用者的did
        self.did = did
        # 1 所有相关事件，
        # 2 所有相关did事件，
        # 3 所有相关vc事件，
        self.type = type
        # 场景码，找dis工作人员进行分配
        self.biz_code = biz_code

    def validate(self):
        self.validate_required(self.call_back_url, 'call_back_url')
        self.validate_required(self.did, 'did')
        self.validate_required(self.type, 'type')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.call_back_url is not None:
            result['call_back_url'] = self.call_back_url
        if self.did is not None:
            result['did'] = self.did
        if self.type is not None:
            result['type'] = self.type
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('call_back_url') is not None:
            self.call_back_url = m.get('call_back_url')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('type') is not None:
            self.type = m.get('type')
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        return self


class StartDidNotificationConsumerResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        consumer_id: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 分配的消费者id，当需要重新注册时，需要使用这个consumer_id;
        self.consumer_id = consumer_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.consumer_id is not None:
            result['consumer_id'] = self.consumer_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('consumer_id') is not None:
            self.consumer_id = m.get('consumer_id')
        return self


class RebootDidNotificationConsumerRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        call_back_url: str = None,
        consumer_id: str = None,
        restart_block_height: int = None,
        biz_code: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # method： POST
        # applicatoin/json
        self.call_back_url = call_back_url
        # 注册是得到的consumer_id
        self.consumer_id = consumer_id
        # 重新从哪个高度开始同步信息，目前did messager只保留1周之内的数据，所以这个高度如果早于一周，会返回异常。
        self.restart_block_height = restart_block_height
        # 场景码，找dis工作人员进行分配
        self.biz_code = biz_code

    def validate(self):
        self.validate_required(self.call_back_url, 'call_back_url')
        self.validate_required(self.consumer_id, 'consumer_id')
        self.validate_required(self.restart_block_height, 'restart_block_height')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.call_back_url is not None:
            result['call_back_url'] = self.call_back_url
        if self.consumer_id is not None:
            result['consumer_id'] = self.consumer_id
        if self.restart_block_height is not None:
            result['restart_block_height'] = self.restart_block_height
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('call_back_url') is not None:
            self.call_back_url = m.get('call_back_url')
        if m.get('consumer_id') is not None:
            self.consumer_id = m.get('consumer_id')
        if m.get('restart_block_height') is not None:
            self.restart_block_height = m.get('restart_block_height')
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        return self


class RebootDidNotificationConsumerResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        consumer_id: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 如果成功，会返回consumer_id
        self.consumer_id = consumer_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.consumer_id is not None:
            result['consumer_id'] = self.consumer_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('consumer_id') is not None:
            self.consumer_id = m.get('consumer_id')
        return self


class InitDidCorporateDirectRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        extension: str = None,
        owner_name: str = None,
        owner_uid: str = None,
        public_key: str = None,
        services: List[DisServicesInfo] = None,
        biz_code: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 扩展字段
        self.extension = extension
        # owner名
        self.owner_name = owner_name
        # 租户自有用户的唯1号，每个owner_uid只能申请一个did
        self.owner_uid = owner_uid
        # 公钥
        self.public_key = public_key
        # did doc service信息列表
        self.services = services
        # 场景码，找dis工作人员进行分配
        self.biz_code = biz_code

    def validate(self):
        self.validate_required(self.owner_uid, 'owner_uid')
        self.validate_required(self.public_key, 'public_key')
        if self.services:
            for k in self.services:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.extension is not None:
            result['extension'] = self.extension
        if self.owner_name is not None:
            result['owner_name'] = self.owner_name
        if self.owner_uid is not None:
            result['owner_uid'] = self.owner_uid
        if self.public_key is not None:
            result['public_key'] = self.public_key
        result['services'] = []
        if self.services is not None:
            for k in self.services:
                result['services'].append(k.to_map() if k else None)
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('extension') is not None:
            self.extension = m.get('extension')
        if m.get('owner_name') is not None:
            self.owner_name = m.get('owner_name')
        if m.get('owner_uid') is not None:
            self.owner_uid = m.get('owner_uid')
        if m.get('public_key') is not None:
            self.public_key = m.get('public_key')
        self.services = []
        if m.get('services') is not None:
            for k in m.get('services'):
                temp_model = DisServicesInfo()
                self.services.append(temp_model.from_map(k))
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        return self


class InitDidCorporateDirectResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        did: str = None,
        doc: str = None,
        hash: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # did
        self.did = did
        # did doc content
        self.doc = doc
        # 后续did doc上链需要使用私钥对这个hash值进行签名
        self.hash = hash

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.did is not None:
            result['did'] = self.did
        if self.doc is not None:
            result['doc'] = self.doc
        if self.hash is not None:
            result['hash'] = self.hash
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('doc') is not None:
            self.doc = m.get('doc')
        if m.get('hash') is not None:
            self.hash = m.get('hash')
        return self


class PushDidCorporateDirectRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        did: str = None,
        doc: str = None,
        sign_data: str = None,
        biz_code: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # did
        self.did = did
        # did doc json string
        self.doc = doc
        # 对hash进行签名后接字符串
        self.sign_data = sign_data
        # 场景码，找dis工作人员进行分配
        self.biz_code = biz_code

    def validate(self):
        self.validate_required(self.did, 'did')
        self.validate_required(self.doc, 'doc')
        self.validate_required(self.sign_data, 'sign_data')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.did is not None:
            result['did'] = self.did
        if self.doc is not None:
            result['doc'] = self.doc
        if self.sign_data is not None:
            result['sign_data'] = self.sign_data
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('doc') is not None:
            self.doc = m.get('doc')
        if m.get('sign_data') is not None:
            self.sign_data = m.get('sign_data')
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        return self


class PushDidCorporateDirectResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class InitDidCorporateIdentityRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        extension_info: str = None,
        owner_name: str = None,
        owner_uid: str = None,
        biz_code: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 扩展字段
        self.extension_info = extension_info
        # 持有者名字
        self.owner_name = owner_name
        # 用户在租户下的唯一ID
        self.owner_uid = owner_uid
        # 场景码，找dis工作人员进行分配
        self.biz_code = biz_code

    def validate(self):
        self.validate_required(self.owner_uid, 'owner_uid')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.extension_info is not None:
            result['extension_info'] = self.extension_info
        if self.owner_name is not None:
            result['owner_name'] = self.owner_name
        if self.owner_uid is not None:
            result['owner_uid'] = self.owner_uid
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('extension_info') is not None:
            self.extension_info = m.get('extension_info')
        if m.get('owner_name') is not None:
            self.owner_name = m.get('owner_name')
        if m.get('owner_uid') is not None:
            self.owner_uid = m.get('owner_uid')
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        return self


class InitDidCorporateIdentityResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        did: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # did
        self.did = did

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.did is not None:
            result['did'] = self.did
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('did') is not None:
            self.did = m.get('did')
        return self


class StartDidAgentChallengeresponseRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        biz_code: str = None,
        challenge_request: str = None,
        did: str = None,
        challenge_type: int = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 场景码，找dis工作人员进行分配
        self.biz_code = biz_code
        # 一段auth challenge明文，即需要被计算签名的明文
        self.challenge_request = challenge_request
        # 指定的did，该did必须是租户自己，或托管给租户的did
        self.did = did
        # 0 原始字符串，1 hash值
        self.challenge_type = challenge_type

    def validate(self):
        self.validate_required(self.challenge_request, 'challenge_request')
        self.validate_required(self.did, 'did')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        if self.challenge_request is not None:
            result['challenge_request'] = self.challenge_request
        if self.did is not None:
            result['did'] = self.did
        if self.challenge_type is not None:
            result['challenge_type'] = self.challenge_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        if m.get('challenge_request') is not None:
            self.challenge_request = m.get('challenge_request')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('challenge_type') is not None:
            self.challenge_type = m.get('challenge_type')
        return self


class StartDidAgentChallengeresponseResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        sign_data: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # {
        # ''challenge":xxxx, //待签名的明文
        # “expired”：xxxx,//签名有效时间
        # “sign”：xxxx，//对上述字段进行的签名
        # }
        self.sign_data = sign_data

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.sign_data is not None:
            result['sign_data'] = self.sign_data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('sign_data') is not None:
            self.sign_data = m.get('sign_data')
        return self


class StartDidAgentVerifyauthresponseRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        auth_response: str = None,
        did: str = None,
        biz_code: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # { ''challenge":xxxx, //待签名的明文
        # “expired”：xxxx,//签名有效时间
        # “sign”：xxxx，//对上述字段进行的签名
        # }
        self.auth_response = auth_response
        # 待验证的did
        self.did = did
        # 场景码，找dis工作人员进行分配
        self.biz_code = biz_code

    def validate(self):
        self.validate_required(self.auth_response, 'auth_response')
        self.validate_required(self.did, 'did')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.auth_response is not None:
            result['auth_response'] = self.auth_response
        if self.did is not None:
            result['did'] = self.did
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('auth_response') is not None:
            self.auth_response = m.get('auth_response')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        return self


class StartDidAgentVerifyauthresponseResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class StartDidCertificationMaskRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        cert_no: str = None,
        did: str = None,
        mobile: str = None,
        name: str = None,
        biz_code: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 身份证号码
        self.cert_no = cert_no
        # 颁发证书的subject did
        self.did = did
        # 手机号码
        self.mobile = mobile
        # 姓名
        self.name = name
        # 场景码，找dis工作人员进行分配
        self.biz_code = biz_code

    def validate(self):
        self.validate_required(self.cert_no, 'cert_no')
        self.validate_required(self.did, 'did')
        self.validate_required(self.mobile, 'mobile')
        self.validate_required(self.name, 'name')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.cert_no is not None:
            result['cert_no'] = self.cert_no
        if self.did is not None:
            result['did'] = self.did
        if self.mobile is not None:
            result['mobile'] = self.mobile
        if self.name is not None:
            result['name'] = self.name
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('cert_no') is not None:
            self.cert_no = m.get('cert_no')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('mobile') is not None:
            self.mobile = m.get('mobile')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        return self


class StartDidCertificationMaskResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        vc_id: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # vc id，可通过该字符串来查询vc具体内容
        self.vc_id = vc_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.vc_id is not None:
            result['vc_id'] = self.vc_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('vc_id') is not None:
            self.vc_id = m.get('vc_id')
        return self


class OpenDidAdminServiceRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        biz_code: str = None,
        dis_access_key: str = None,
        specification: str = None,
        tenant_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 场景码，找dis工作人员进行分配
        self.biz_code = biz_code
        # 账户接入公钥
        self.dis_access_key = dis_access_key
        # 扩展字段
        self.specification = specification
        # 租户id
        self.tenant_id = tenant_id

    def validate(self):
        self.validate_required(self.tenant_id, 'tenant_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        if self.dis_access_key is not None:
            result['dis_access_key'] = self.dis_access_key
        if self.specification is not None:
            result['specification'] = self.specification
        if self.tenant_id is not None:
            result['tenant_id'] = self.tenant_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        if m.get('dis_access_key') is not None:
            self.dis_access_key = m.get('dis_access_key')
        if m.get('specification') is not None:
            self.specification = m.get('specification')
        if m.get('tenant_id') is not None:
            self.tenant_id = m.get('tenant_id')
        return self


class OpenDidAdminServiceResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        dis_access_key: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 分配给该租户的访问密钥
        self.dis_access_key = dis_access_key

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.dis_access_key is not None:
            result['dis_access_key'] = self.dis_access_key
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('dis_access_key') is not None:
            self.dis_access_key = m.get('dis_access_key')
        return self


class StopDidAdminServiceRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        biz_code: str = None,
        specification: str = None,
        tenant_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 场景码，找dis工作人员进行分配
        self.biz_code = biz_code
        # 扩展字段
        self.specification = specification
        # 指定租户
        self.tenant_id = tenant_id

    def validate(self):
        self.validate_required(self.tenant_id, 'tenant_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        if self.specification is not None:
            result['specification'] = self.specification
        if self.tenant_id is not None:
            result['tenant_id'] = self.tenant_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        if m.get('specification') is not None:
            self.specification = m.get('specification')
        if m.get('tenant_id') is not None:
            self.tenant_id = m.get('tenant_id')
        return self


class StopDidAdminServiceResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class StartDidSignatureAgentRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        biz_code: str = None,
        data: str = None,
        data_type: int = None,
        did: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 场景码，找dis工作人员进行分配
        self.biz_code = biz_code
        # 需要进行签名的字符串
        self.data = data
        # 0 原始数据
        # 1 hash值
        self.data_type = data_type
        # 需要进行代理签名的did
        self.did = did

    def validate(self):
        self.validate_required(self.data, 'data')
        self.validate_required(self.did, 'did')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        if self.data is not None:
            result['data'] = self.data
        if self.data_type is not None:
            result['data_type'] = self.data_type
        if self.did is not None:
            result['did'] = self.did
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        if m.get('data') is not None:
            self.data = m.get('data')
        if m.get('data_type') is not None:
            self.data_type = m.get('data_type')
        if m.get('did') is not None:
            self.did = m.get('did')
        return self


class StartDidSignatureAgentResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        signature: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 签名之后的结果
        self.signature = signature

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.signature is not None:
            result['signature'] = self.signature
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('signature') is not None:
            self.signature = m.get('signature')
        return self


class CheckDidSignRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        check_data: str = None,
        did: str = None,
        signature: str = None,
        biz_code: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 需要验签的字符串
        self.check_data = check_data
        # 对字符串签名的did
        self.did = did
        # 签名后的字符串
        self.signature = signature
        # 场景码，找dis工作人员进行分配
        self.biz_code = biz_code

    def validate(self):
        self.validate_required(self.check_data, 'check_data')
        self.validate_required(self.did, 'did')
        self.validate_required(self.signature, 'signature')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.check_data is not None:
            result['check_data'] = self.check_data
        if self.did is not None:
            result['did'] = self.did
        if self.signature is not None:
            result['signature'] = self.signature
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('check_data') is not None:
            self.check_data = m.get('check_data')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('signature') is not None:
            self.signature = m.get('signature')
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        return self


class CheckDidSignResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class StartDidZkpverifiableclaimVisibilityRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        issuer: str = None,
        path: List[str] = None,
        vc: str = None,
        biz_code: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # vc颁发者
        self.issuer = issuer
        # 哪些字段将被展示。
        # 如果父路径和子路径都被包含，那么将以最上级路径为准，展示上级路径对应的内容
        self.path = path
        # vc完整原文
        self.vc = vc
        # 场景码，找dis工作人员进行分配
        self.biz_code = biz_code

    def validate(self):
        self.validate_required(self.issuer, 'issuer')
        self.validate_required(self.path, 'path')
        self.validate_required(self.vc, 'vc')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.issuer is not None:
            result['issuer'] = self.issuer
        if self.path is not None:
            result['path'] = self.path
        if self.vc is not None:
            result['vc'] = self.vc
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('issuer') is not None:
            self.issuer = m.get('issuer')
        if m.get('path') is not None:
            self.path = m.get('path')
        if m.get('vc') is not None:
            self.vc = m.get('vc')
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        return self


class StartDidZkpverifiableclaimVisibilityResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        index: str = None,
        vc_view: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 索引字段，标示哪些字段是原始值，哪些字段是hash值
        self.index = index
        # 被隐藏了部分内容的VC内容
        self.vc_view = vc_view

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.index is not None:
            result['index'] = self.index
        if self.vc_view is not None:
            result['vc_view'] = self.vc_view
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('index') is not None:
            self.index = m.get('index')
        if m.get('vc_view') is not None:
            self.vc_view = m.get('vc_view')
        return self


class StartDidAgentSidekeyRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        did: str = None,
        indexs: List[str] = None,
        biz_code: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 指定did进行外键关联
        self.did = did
        # 所有需要关联的外键，外键必须已did auth key controller的did作为前缀+“sidekey:”+外键
        self.indexs = indexs
        # 场景码，找dis工作人员进行分配
        self.biz_code = biz_code

    def validate(self):
        self.validate_required(self.did, 'did')
        self.validate_required(self.indexs, 'indexs')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.did is not None:
            result['did'] = self.did
        if self.indexs is not None:
            result['indexs'] = self.indexs
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('indexs') is not None:
            self.indexs = m.get('indexs')
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        return self


class StartDidAgentSidekeyResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class UpdateDidAgentSidekeyRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        add_indexs: List[str] = None,
        delete_indexs: List[str] = None,
        did: str = None,
        biz_code: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 新增的外键
        self.add_indexs = add_indexs
        # 去掉哪些外键
        self.delete_indexs = delete_indexs
        # 指定did进行外键关联
        self.did = did
        # 场景码，找dis工作人员进行分配
        self.biz_code = biz_code

    def validate(self):
        self.validate_required(self.did, 'did')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.add_indexs is not None:
            result['add_indexs'] = self.add_indexs
        if self.delete_indexs is not None:
            result['delete_indexs'] = self.delete_indexs
        if self.did is not None:
            result['did'] = self.did
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('add_indexs') is not None:
            self.add_indexs = m.get('add_indexs')
        if m.get('delete_indexs') is not None:
            self.delete_indexs = m.get('delete_indexs')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        return self


class UpdateDidAgentSidekeyResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class StartDidCorporateAgentcreatewithsidekeyRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        extension_info: str = None,
        indexs: List[str] = None,
        owner_name: str = None,
        owner_uid: str = None,
        biz_code: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # {
        # "自定义服务相关字段": 自定义字符串,
        # "nation": "CN",
        # "type": "LimitedCompany",
        # "name": "演示用户名",
        # "licenceNo": "1111",
        # "address": "1111",
        # "parentName": "演示直连公司",
        # "linkType": "indirect",
        # "certifyDate": "2019-1-1",
        # "licenceExpireDate": "2020-1-1",
        # "businessScope": "1111",
        # "businessAddress": "1111",
        # "corporateBusinessType": 0
        # }
        self.extension_info = extension_info
        # 所有需要关联的外键，外键必须已did auth key controller的did作为前缀+“sidekey:”+外键
        self.indexs = indexs
        # 企业名称
        self.owner_name = owner_name
        # 自定义企业唯一id，企业在自有模式下的唯一号bid的has...
        self.owner_uid = owner_uid
        # 场景码，找dis工作人员进行分配
        self.biz_code = biz_code

    def validate(self):
        self.validate_required(self.indexs, 'indexs')
        self.validate_required(self.owner_uid, 'owner_uid')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.extension_info is not None:
            result['extension_info'] = self.extension_info
        if self.indexs is not None:
            result['indexs'] = self.indexs
        if self.owner_name is not None:
            result['owner_name'] = self.owner_name
        if self.owner_uid is not None:
            result['owner_uid'] = self.owner_uid
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('extension_info') is not None:
            self.extension_info = m.get('extension_info')
        if m.get('indexs') is not None:
            self.indexs = m.get('indexs')
        if m.get('owner_name') is not None:
            self.owner_name = m.get('owner_name')
        if m.get('owner_uid') is not None:
            self.owner_uid = m.get('owner_uid')
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        return self


class StartDidCorporateAgentcreatewithsidekeyResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        did: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 生成的did字符串
        self.did = did

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.did is not None:
            result['did'] = self.did
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('did') is not None:
            self.did = m.get('did')
        return self


class UpdateDidCorporateExtensionservicewithsidekeyRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        add_indexs: List[str] = None,
        delete_indexs: List[str] = None,
        did: str = None,
        extension: str = None,
        biz_code: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 新增的外键
        self.add_indexs = add_indexs
        # 去掉哪些外键
        self.delete_indexs = delete_indexs
        # 需要更新的did doc对应的did字段；该did必须为调用者自己的did，或者托管给调用者的did
        self.did = did
        # 修改后的全量扩展字段
        self.extension = extension
        # 场景码，找dis工作人员进行分配
        self.biz_code = biz_code

    def validate(self):
        self.validate_required(self.did, 'did')
        self.validate_required(self.extension, 'extension')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.add_indexs is not None:
            result['add_indexs'] = self.add_indexs
        if self.delete_indexs is not None:
            result['delete_indexs'] = self.delete_indexs
        if self.did is not None:
            result['did'] = self.did
        if self.extension is not None:
            result['extension'] = self.extension
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('add_indexs') is not None:
            self.add_indexs = m.get('add_indexs')
        if m.get('delete_indexs') is not None:
            self.delete_indexs = m.get('delete_indexs')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('extension') is not None:
            self.extension = m.get('extension')
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        return self


class UpdateDidCorporateExtensionservicewithsidekeyResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class QueryDidDocSidekeyRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        need_page: bool = None,
        page_num: int = None,
        side_key: str = None,
        verifiable_claim: str = None,
        biz_code: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 是否需要分页返回
        self.need_page = need_page
        # 按分页查询
        self.page_num = page_num
        # 前缀+z40_uid
        self.side_key = side_key
        # 通过外键查询did，需要以下条件之一：
        # 1. 查询者为外键前缀对应的did；
        # 2. 查询者能够提供外键前缀对应的did的授权vc。
        self.verifiable_claim = verifiable_claim
        # 场景码，找dis工作人员进行分配
        self.biz_code = biz_code

    def validate(self):
        self.validate_required(self.side_key, 'side_key')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.need_page is not None:
            result['need_page'] = self.need_page
        if self.page_num is not None:
            result['page_num'] = self.page_num
        if self.side_key is not None:
            result['side_key'] = self.side_key
        if self.verifiable_claim is not None:
            result['verifiable_claim'] = self.verifiable_claim
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('need_page') is not None:
            self.need_page = m.get('need_page')
        if m.get('page_num') is not None:
            self.page_num = m.get('page_num')
        if m.get('side_key') is not None:
            self.side_key = m.get('side_key')
        if m.get('verifiable_claim') is not None:
            self.verifiable_claim = m.get('verifiable_claim')
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        return self


class QueryDidDocSidekeyResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        doc: str = None,
        total_num: int = None,
        total_page: int = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # side可以查找到的所有did doc数组，以json方式输出
        self.doc = doc
        # 总个数
        self.total_num = total_num
        # 总页数
        self.total_page = total_page

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.doc is not None:
            result['doc'] = self.doc
        if self.total_num is not None:
            result['total_num'] = self.total_num
        if self.total_page is not None:
            result['total_page'] = self.total_page
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('doc') is not None:
            self.doc = m.get('doc')
        if m.get('total_num') is not None:
            self.total_num = m.get('total_num')
        if m.get('total_page') is not None:
            self.total_page = m.get('total_page')
        return self


class StartDidPersonAgentcreatewithsidekeyRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        extension_info: str = None,
        indexs: List[str] = None,
        owner_name: str = None,
        owner_uid: str = None,
        biz_code: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # { "自定义服务相关字段": 自定义字符串, "nation": "CN", "certType": "身份证", "name": "演示用户名", "certNo": "1111"}
        self.extension_info = extension_info
        # 所有需要关联的外键，外键必须已did auth key controller的did作为前缀+“sidekey:”+外键
        self.indexs = indexs
        # 个人名称
        self.owner_name = owner_name
        # 自定义企业唯一id，企业在自有模式下的唯一号bid的has...
        self.owner_uid = owner_uid
        # 场景码，找dis工作人员进行分配
        self.biz_code = biz_code

    def validate(self):
        self.validate_required(self.indexs, 'indexs')
        self.validate_required(self.owner_uid, 'owner_uid')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.extension_info is not None:
            result['extension_info'] = self.extension_info
        if self.indexs is not None:
            result['indexs'] = self.indexs
        if self.owner_name is not None:
            result['owner_name'] = self.owner_name
        if self.owner_uid is not None:
            result['owner_uid'] = self.owner_uid
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('extension_info') is not None:
            self.extension_info = m.get('extension_info')
        if m.get('indexs') is not None:
            self.indexs = m.get('indexs')
        if m.get('owner_name') is not None:
            self.owner_name = m.get('owner_name')
        if m.get('owner_uid') is not None:
            self.owner_uid = m.get('owner_uid')
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        return self


class StartDidPersonAgentcreatewithsidekeyResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        did: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 生成的did字符串
        self.did = did

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.did is not None:
            result['did'] = self.did
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('did') is not None:
            self.did = m.get('did')
        return self


class StartDidIotAgentcreateRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        extension_info: str = None,
        indexs: List[str] = None,
        owner_name: str = None,
        owner_uid: str = None,
        services: List[DidDocServicesInfo] = None,
        biz_code: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # { "自定义服务相关字段": 自定义字符串, "type": "IOT设备类型", "name": "演示用户名", "licenceNo": "设备唯一号", "address": "1111" }
        self.extension_info = extension_info
        # 所有需要关联的外键，外键必须已did auth key controller的did作为前缀+“sidekey:”+外键
        self.indexs = indexs
        # 企业名称
        self.owner_name = owner_name
        # 自定义企业唯一id，企业在自有模式下的唯一号bid的has...
        self.owner_uid = owner_uid
        # 携带自己定义的服务类型
        # 
        self.services = services
        # 场景码，找dis工作人员进行分配
        self.biz_code = biz_code

    def validate(self):
        self.validate_required(self.owner_uid, 'owner_uid')
        if self.services:
            for k in self.services:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.extension_info is not None:
            result['extension_info'] = self.extension_info
        if self.indexs is not None:
            result['indexs'] = self.indexs
        if self.owner_name is not None:
            result['owner_name'] = self.owner_name
        if self.owner_uid is not None:
            result['owner_uid'] = self.owner_uid
        result['services'] = []
        if self.services is not None:
            for k in self.services:
                result['services'].append(k.to_map() if k else None)
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('extension_info') is not None:
            self.extension_info = m.get('extension_info')
        if m.get('indexs') is not None:
            self.indexs = m.get('indexs')
        if m.get('owner_name') is not None:
            self.owner_name = m.get('owner_name')
        if m.get('owner_uid') is not None:
            self.owner_uid = m.get('owner_uid')
        self.services = []
        if m.get('services') is not None:
            for k in m.get('services'):
                temp_model = DidDocServicesInfo()
                self.services.append(temp_model.from_map(k))
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        return self


class StartDidIotAgentcreateResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        did: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 生成的did字符串
        self.did = did

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.did is not None:
            result['did'] = self.did
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('did') is not None:
            self.did = m.get('did')
        return self


class StartDidIotAgentcreatewithsidekeyRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        extension_info: str = None,
        indexs: List[str] = None,
        owner_name: str = None,
        owner_uid: str = None,
        biz_code: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # { "自定义服务相关字段": 自定义字符串, "type": "IOT设备类型", "name": "演示用户名", "licenceNo": "设备唯一号", "address": "1111" }
        self.extension_info = extension_info
        # 所有需要关联的外键，外键必须已did auth key controller的did作为前缀+“sidekey:”+外键
        self.indexs = indexs
        # iot设备名
        self.owner_name = owner_name
        # 自定义企业唯一id，企业在自有模式下的唯一号bid的has...
        self.owner_uid = owner_uid
        # 场景码，找dis工作人员进行分配
        self.biz_code = biz_code

    def validate(self):
        self.validate_required(self.indexs, 'indexs')
        self.validate_required(self.owner_uid, 'owner_uid')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.extension_info is not None:
            result['extension_info'] = self.extension_info
        if self.indexs is not None:
            result['indexs'] = self.indexs
        if self.owner_name is not None:
            result['owner_name'] = self.owner_name
        if self.owner_uid is not None:
            result['owner_uid'] = self.owner_uid
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('extension_info') is not None:
            self.extension_info = m.get('extension_info')
        if m.get('indexs') is not None:
            self.indexs = m.get('indexs')
        if m.get('owner_name') is not None:
            self.owner_name = m.get('owner_name')
        if m.get('owner_uid') is not None:
            self.owner_uid = m.get('owner_uid')
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        return self


class StartDidIotAgentcreatewithsidekeyResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        did: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 生成的iot did字符串
        self.did = did

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.did is not None:
            result['did'] = self.did
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('did') is not None:
            self.did = m.get('did')
        return self


class UpdateDidIotExtensionservicewithsidekeyRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        add_indexs: List[str] = None,
        delete_indexs: List[str] = None,
        did: str = None,
        extension: str = None,
        biz_code: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 新增的外键
        self.add_indexs = add_indexs
        # 去掉哪些外键
        self.delete_indexs = delete_indexs
        # 需要更新的did doc对应的did字段；该did必须为调用者自己的did，或者托管给调用者的did
        self.did = did
        # 修改后的全量扩展字段
        self.extension = extension
        # 场景码，找dis工作人员进行分配
        self.biz_code = biz_code

    def validate(self):
        self.validate_required(self.did, 'did')
        self.validate_required(self.extension, 'extension')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.add_indexs is not None:
            result['add_indexs'] = self.add_indexs
        if self.delete_indexs is not None:
            result['delete_indexs'] = self.delete_indexs
        if self.did is not None:
            result['did'] = self.did
        if self.extension is not None:
            result['extension'] = self.extension
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('add_indexs') is not None:
            self.add_indexs = m.get('add_indexs')
        if m.get('delete_indexs') is not None:
            self.delete_indexs = m.get('delete_indexs')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('extension') is not None:
            self.extension = m.get('extension')
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        return self


class UpdateDidIotExtensionservicewithsidekeyResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class UpdateDidPersonExtensionservicewithsidekeyRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        add_indexs: List[str] = None,
        delete_indexs: List[str] = None,
        did: str = None,
        extension: str = None,
        biz_code: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 新增的外键
        self.add_indexs = add_indexs
        # 去掉哪些外键
        self.delete_indexs = delete_indexs
        # 需要更新的did doc对应的did字段；该did必须为调用者自己的did，或者托管给调用者的did
        self.did = did
        # 修改后的全量扩展字段
        # 
        self.extension = extension
        # 场景码，找dis工作人员进行分配
        self.biz_code = biz_code

    def validate(self):
        self.validate_required(self.did, 'did')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.add_indexs is not None:
            result['add_indexs'] = self.add_indexs
        if self.delete_indexs is not None:
            result['delete_indexs'] = self.delete_indexs
        if self.did is not None:
            result['did'] = self.did
        if self.extension is not None:
            result['extension'] = self.extension
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('add_indexs') is not None:
            self.add_indexs = m.get('add_indexs')
        if m.get('delete_indexs') is not None:
            self.delete_indexs = m.get('delete_indexs')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('extension') is not None:
            self.extension = m.get('extension')
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        return self


class UpdateDidPersonExtensionservicewithsidekeyResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class CreateDidPersonWiththreemetaRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        cert_no: str = None,
        extension_info: str = None,
        mobile: str = None,
        name: str = None,
        owner_name: str = None,
        owner_uid: str = None,
        biz_code: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 身份证号码
        self.cert_no = cert_no
        # 扩展字段
        self.extension_info = extension_info
        # 手机号码
        self.mobile = mobile
        # 姓名
        self.name = name
        # 名称
        self.owner_name = owner_name
        # 自定义个人唯一id，个人在自有模式下的唯一号，调用者需要保证其唯一性
        self.owner_uid = owner_uid
        # 场景码，找dis工作人员进行分配
        self.biz_code = biz_code

    def validate(self):
        self.validate_required(self.cert_no, 'cert_no')
        self.validate_required(self.mobile, 'mobile')
        self.validate_required(self.name, 'name')
        self.validate_required(self.owner_uid, 'owner_uid')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.cert_no is not None:
            result['cert_no'] = self.cert_no
        if self.extension_info is not None:
            result['extension_info'] = self.extension_info
        if self.mobile is not None:
            result['mobile'] = self.mobile
        if self.name is not None:
            result['name'] = self.name
        if self.owner_name is not None:
            result['owner_name'] = self.owner_name
        if self.owner_uid is not None:
            result['owner_uid'] = self.owner_uid
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('cert_no') is not None:
            self.cert_no = m.get('cert_no')
        if m.get('extension_info') is not None:
            self.extension_info = m.get('extension_info')
        if m.get('mobile') is not None:
            self.mobile = m.get('mobile')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('owner_name') is not None:
            self.owner_name = m.get('owner_name')
        if m.get('owner_uid') is not None:
            self.owner_uid = m.get('owner_uid')
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        return self


class CreateDidPersonWiththreemetaResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        did: str = None,
        vc_id: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 生成的did字符串
        self.did = did
        # 颁发的vcId
        self.vc_id = vc_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.did is not None:
            result['did'] = self.did
        if self.vc_id is not None:
            result['vc_id'] = self.vc_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('vc_id') is not None:
            self.vc_id = m.get('vc_id')
        return self


class CreateDidCorporateWiththreemetaRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        ep_cert_name: str = None,
        ep_cert_no: str = None,
        extension_info: str = None,
        legal_person_cert_name: str = None,
        owner_name: str = None,
        owner_uid: str = None,
        biz_code: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 企业名称
        self.ep_cert_name = ep_cert_name
        # 企业证件号
        self.ep_cert_no = ep_cert_no
        # { "nation": "CN", //企业注册地址 "type": "LimitedCompany", //企业类型 "name": "演示用户名", //必选字段，企业名 "licenceNo": "1111", //营业执照 "address": "1111", //企业地址 "parentName": "", //<-必选字段 业务方名 需要提前协商 "linkType": "indirect", //<- 连接类型，direct直链企业， indirect间链企业 "certifyDate": "2019-1-1", //证书颁发时间 "licenceExpireDate": "2020-1-1", //证书到期时间 "businessScope": "1111", //企业经营范围 "businessAddress": "1111", //企业经营地址 "corporateBusinessType": 0, //<- 企业类型：0 一般企业， 1 个人商户 "channelName": "" //<- 必选字段 业务渠道 需要提前沟通 }
        self.extension_info = extension_info
        # 法人姓名
        self.legal_person_cert_name = legal_person_cert_name
        # 名称
        self.owner_name = owner_name
        # 自定义企业唯一id，企业在自有模式下的唯一号，调用者需要保证其唯一性
        self.owner_uid = owner_uid
        # 场景码，找dis工作人员进行分配
        self.biz_code = biz_code

    def validate(self):
        self.validate_required(self.ep_cert_name, 'ep_cert_name')
        self.validate_required(self.ep_cert_no, 'ep_cert_no')
        self.validate_required(self.legal_person_cert_name, 'legal_person_cert_name')
        self.validate_required(self.owner_uid, 'owner_uid')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.ep_cert_name is not None:
            result['ep_cert_name'] = self.ep_cert_name
        if self.ep_cert_no is not None:
            result['ep_cert_no'] = self.ep_cert_no
        if self.extension_info is not None:
            result['extension_info'] = self.extension_info
        if self.legal_person_cert_name is not None:
            result['legal_person_cert_name'] = self.legal_person_cert_name
        if self.owner_name is not None:
            result['owner_name'] = self.owner_name
        if self.owner_uid is not None:
            result['owner_uid'] = self.owner_uid
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('ep_cert_name') is not None:
            self.ep_cert_name = m.get('ep_cert_name')
        if m.get('ep_cert_no') is not None:
            self.ep_cert_no = m.get('ep_cert_no')
        if m.get('extension_info') is not None:
            self.extension_info = m.get('extension_info')
        if m.get('legal_person_cert_name') is not None:
            self.legal_person_cert_name = m.get('legal_person_cert_name')
        if m.get('owner_name') is not None:
            self.owner_name = m.get('owner_name')
        if m.get('owner_uid') is not None:
            self.owner_uid = m.get('owner_uid')
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        return self


class CreateDidCorporateWiththreemetaResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        did: str = None,
        vc_id: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 生成的did
        self.did = did
        # 颁发的vcId
        self.vc_id = vc_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.did is not None:
            result['did'] = self.did
        if self.vc_id is not None:
            result['vc_id'] = self.vc_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('vc_id') is not None:
            self.vc_id = m.get('vc_id')
        return self


class StartDidVcrepositoryIssueRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        auth_did_list: List[str] = None,
        bare_claim: BareClaim = None,
        expire: int = None,
        issuer: str = None,
        specified_claim_id_type: int = None,
        subject: str = None,
        type: List[str] = None,
        verifiable_claim_id: str = None,
        verify_status_type: str = None,
        biz_code: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 配置此列表，则说明需要DIS对证书声明内容加密处理，并且控制访问权限，此列表为初始配置的did名单，拥有对此颁发证书的读取权限。
        # 如果不配置此列表，则DIS默认将明文存储此证书，任何did都可以访问此证书声明内容。
        # 
        self.auth_did_list = auth_did_list
        # 颁发证书声明的原始声明内容，其中claim字段为json格式
        self.bare_claim = bare_claim
        # 过期时间，如果用不过期可以设置为：-1。
        # 注意如果证书过期，则无法再通过VC Repository读取访问此证书内容。
        self.expire = expire
        # 颁发证书方，该did必须为调用者自己或者自己代理的did。
        # 
        self.issuer = issuer
        # 1 - 指定id将被按照verifiable_claim_id = "vc:mychain:" + SHA256(Joiner.on(":").join(subject, verifiable_claim_id.substring(0,50)))+verifiable_claim_id.substring(50);此表达式参与SHA256的 verifiable_claim_id 为用户指定的参数。
        self.specified_claim_id_type = specified_claim_id_type
        # 颁发证书的目标did，此目标did将拥有存储到VC Repository的数据管控权限，比如：授权给其它did读取此证书的权限。
        self.subject = subject
        # 通过层级定义的证书类型说明，在使用VC Repository的情况下默认为：["VerifiableCredential","DelegateVCRepository"]。
        # 如果用户希望通过type来过滤读取证书VC，那么可以在此列表后面追加层次定义说明，方便后续读取证书在VC Repository进行过滤。（如果读取方已知verifiable_claim_id可以直接过滤读取）
        self.type = type
        # 如果指定，最终会使用此id会参与生成的证书的verifiable_claim_id，但是调用方需要保证设置值的唯一性，重复的id会引起最终verifiable_claim_id重复，导致被拒绝颁发证书。
        # 如果不指定，则会随机生成一个规范的verifiable_claim_id。
        # verifiable_claim_id = "vc:mychain:" + SHA256(Joiner.on(":").join(subject, verifiable_claim_id)); 此表达式参与SHA256的 verifiable_claim_id 为用户指定的参数。
        self.verifiable_claim_id = verifiable_claim_id
        # 验证声明状态方式，目前只支持直接通过声明id上链查找状态方式，后续会支持更多方式
        self.verify_status_type = verify_status_type
        # 场景码，找dis工作人员进行分配
        self.biz_code = biz_code

    def validate(self):
        self.validate_required(self.bare_claim, 'bare_claim')
        if self.bare_claim:
            self.bare_claim.validate()
        self.validate_required(self.expire, 'expire')
        self.validate_required(self.issuer, 'issuer')
        self.validate_required(self.subject, 'subject')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.auth_did_list is not None:
            result['auth_did_list'] = self.auth_did_list
        if self.bare_claim is not None:
            result['bare_claim'] = self.bare_claim.to_map()
        if self.expire is not None:
            result['expire'] = self.expire
        if self.issuer is not None:
            result['issuer'] = self.issuer
        if self.specified_claim_id_type is not None:
            result['specified_claim_id_type'] = self.specified_claim_id_type
        if self.subject is not None:
            result['subject'] = self.subject
        if self.type is not None:
            result['type'] = self.type
        if self.verifiable_claim_id is not None:
            result['verifiable_claim_id'] = self.verifiable_claim_id
        if self.verify_status_type is not None:
            result['verify_status_type'] = self.verify_status_type
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('auth_did_list') is not None:
            self.auth_did_list = m.get('auth_did_list')
        if m.get('bare_claim') is not None:
            temp_model = BareClaim()
            self.bare_claim = temp_model.from_map(m['bare_claim'])
        if m.get('expire') is not None:
            self.expire = m.get('expire')
        if m.get('issuer') is not None:
            self.issuer = m.get('issuer')
        if m.get('specified_claim_id_type') is not None:
            self.specified_claim_id_type = m.get('specified_claim_id_type')
        if m.get('subject') is not None:
            self.subject = m.get('subject')
        if m.get('type') is not None:
            self.type = m.get('type')
        if m.get('verifiable_claim_id') is not None:
            self.verifiable_claim_id = m.get('verifiable_claim_id')
        if m.get('verify_status_type') is not None:
            self.verify_status_type = m.get('verify_status_type')
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        return self


class StartDidVcrepositoryIssueResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        verifiable_claim_content: str = None,
        verifiable_claim_id: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 可验证声明的完整声明 {"content":{"verion":"0.7.0","issuer":"xxxx","subject":"xxxx","expire":1530735444,"issucanceDate":1530735000,"id":"XXXX","claim":{//用户自定义},"status":{"type":"XXXX","id":"XXXXX"}},"proof":{"type":"ecdsa","created":"2018-06-18T21:19:10Z","verificationMethod":"XXXX","signatureValue":"XXXXX"}}
        self.verifiable_claim_content = verifiable_claim_content
        # 颁发的证书唯一id，颁发成功后返回。
        self.verifiable_claim_id = verifiable_claim_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.verifiable_claim_content is not None:
            result['verifiable_claim_content'] = self.verifiable_claim_content
        if self.verifiable_claim_id is not None:
            result['verifiable_claim_id'] = self.verifiable_claim_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('verifiable_claim_content') is not None:
            self.verifiable_claim_content = m.get('verifiable_claim_content')
        if m.get('verifiable_claim_id') is not None:
            self.verifiable_claim_id = m.get('verifiable_claim_id')
        return self


class StartDidVcrepositoryReadRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        did: str = None,
        filter_field: str = None,
        filter_value: str = None,
        issuer_did: str = None,
        signature: str = None,
        subject_did: str = None,
        verifiable_claim_id: str = None,
        biz_code: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 请求读取数据的did。
        self.did = did
        # 配合owner_did字段一起使用，指定查询目标VC时的过滤字段（可是标准VC内容的字段），指定此字段后，配合需指定filter_value字段。
        self.filter_field = filter_field
        # 配合filter_field字段，设定具体过滤VC的使用的值，示例说明是在使用`type`字段过滤VC时候的样例。
        self.filter_value = filter_value
        # 如果没有配置参数verifiable_claim_id，则只能通过制定subject_did、issuer_did和filter参数来查找目标VC内容。 因此只有在调用方未知verifiable_claim_id的情况下，才需要配置此参数。
        self.issuer_did = issuer_did
        # 保留字段，请求读的did身份对应公钥对所有数据参数的签名（目前托管模式可缺省此字段，未来非托管时需请求端签名，需填此字段）
        self.signature = signature
        # 如果没有配置参数verifiable_claim_id，则只能通过制定subject_did、issuer_did和filter参数来查找目标VC内容。
        # 因此只有在调用方未知verifiable_claim_id的情况下，才需要配置此参数。
        self.subject_did = subject_did
        # 调用方如果已知目标VC的verifiable_claim_id，建议通过配置此参数来读取目标VC内容，并且不需要配置subject_did、issuer_did和 filter相关参数。
        # 注意如果不配置此字段，则必须配置subject_did, issuer_did, filter_field, filter_value 字段。
        # 注意：如果此字段不是"vc:mychain:"前缀开头，则会使用如下规则生成：
        # verifiable_claim_id = "vc:mychain:" + SHA256(Joiner.on(":").join(issuer_did, subject_did, verifiable_claim_id)); 此表达式参与SHA256的 verifiable_claim_id 为用户指定的参数。
        self.verifiable_claim_id = verifiable_claim_id
        # 场景码，找dis工作人员进行分配
        self.biz_code = biz_code

    def validate(self):
        self.validate_required(self.did, 'did')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.did is not None:
            result['did'] = self.did
        if self.filter_field is not None:
            result['filter_field'] = self.filter_field
        if self.filter_value is not None:
            result['filter_value'] = self.filter_value
        if self.issuer_did is not None:
            result['issuer_did'] = self.issuer_did
        if self.signature is not None:
            result['signature'] = self.signature
        if self.subject_did is not None:
            result['subject_did'] = self.subject_did
        if self.verifiable_claim_id is not None:
            result['verifiable_claim_id'] = self.verifiable_claim_id
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('filter_field') is not None:
            self.filter_field = m.get('filter_field')
        if m.get('filter_value') is not None:
            self.filter_value = m.get('filter_value')
        if m.get('issuer_did') is not None:
            self.issuer_did = m.get('issuer_did')
        if m.get('signature') is not None:
            self.signature = m.get('signature')
        if m.get('subject_did') is not None:
            self.subject_did = m.get('subject_did')
        if m.get('verifiable_claim_id') is not None:
            self.verifiable_claim_id = m.get('verifiable_claim_id')
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        return self


class StartDidVcrepositoryReadResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        verifiable_claim_content: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 可验证声明的完整声明 {"content":{"verion":"0.7.0","issuer":"xxxx","subject":"xxxx","expire":1530735444,"issucanceDate":1530735000,"id":"XXXX","claim":{//用户自定义},"status":{"type":"XXXX","id":"XXXXX"}},"proof":{"type":"ecdsa","created":"2018-06-18T21:19:10Z","verificationMethod":"XXXX","signatureValue":"XXXXX"}}
        self.verifiable_claim_content = verifiable_claim_content

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.verifiable_claim_content is not None:
            result['verifiable_claim_content'] = self.verifiable_claim_content
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('verifiable_claim_content') is not None:
            self.verifiable_claim_content = m.get('verifiable_claim_content')
        return self


class StartDidVcrepositoryAuthRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        auth_did_list: List[str] = None,
        biz_code: str = None,
        did: str = None,
        filter_field: str = None,
        filter_value: str = None,
        signature: str = None,
        verifiable_claim_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 配置此did列表，为这些did分配读取目标VC的权限，如果目标VC存储时是明文存储，则操作失败（无需做此权限管控）。
        self.auth_did_list = auth_did_list
        # 场景码，找dis工作人员进行分配
        self.biz_code = biz_code
        # 目标VC的owner，也就是VC内容中的subject身份。
        self.did = did
        # 指定查询目标VC时的过滤字段（可是标准VC内容的field），指定此字段后，配合需指定filter_value字段。
        self.filter_field = filter_field
        # ["VerifiableCredential","DelegateVCRepository","LocationInfo"]
        self.filter_value = filter_value
        # 保留字段，请求增加授权的调用方did身份对应公钥对所有数据参数的签名（目前托管模式可缺省此字段，未来非托管时需请求端签名，需填此字段）
        self.signature = signature
        # 读取目标证书VC的id，通过配置此参数可以直接找到目标VC。
        self.verifiable_claim_id = verifiable_claim_id

    def validate(self):
        self.validate_required(self.auth_did_list, 'auth_did_list')
        self.validate_required(self.did, 'did')
        self.validate_required(self.filter_field, 'filter_field')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.auth_did_list is not None:
            result['auth_did_list'] = self.auth_did_list
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        if self.did is not None:
            result['did'] = self.did
        if self.filter_field is not None:
            result['filter_field'] = self.filter_field
        if self.filter_value is not None:
            result['filter_value'] = self.filter_value
        if self.signature is not None:
            result['signature'] = self.signature
        if self.verifiable_claim_id is not None:
            result['verifiable_claim_id'] = self.verifiable_claim_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('auth_did_list') is not None:
            self.auth_did_list = m.get('auth_did_list')
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('filter_field') is not None:
            self.filter_field = m.get('filter_field')
        if m.get('filter_value') is not None:
            self.filter_value = m.get('filter_value')
        if m.get('signature') is not None:
            self.signature = m.get('signature')
        if m.get('verifiable_claim_id') is not None:
            self.verifiable_claim_id = m.get('verifiable_claim_id')
        return self


class StartDidVcrepositoryAuthResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class StartDidVcrepositoryFilterandreadRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        did: str = None,
        filter_field: str = None,
        filter_value: str = None,
        signature: str = None,
        subject_did: str = None,
        biz_code: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 请求读取数据的did。
        self.did = did
        # 配合owner_did字段一起使用，指定查询目标VC时的过滤字段（可是标准VC内容的字段），指定此字段后，配合需指定filter_value字段。
        self.filter_field = filter_field
        # ["VerifiableCredential","DelegateVCRepository","LocationInfo"]
        self.filter_value = filter_value
        # 保留字段，请求读的did身份对应公钥对所有数据参数的签名（目前托管模式可缺省此字段，未来非托管时需请求端签名，需填此字段）
        self.signature = signature
        # 目标VC的subject字段，参与过滤条件。
        self.subject_did = subject_did
        # 场景码，找dis工作人员进行分配
        self.biz_code = biz_code

    def validate(self):
        self.validate_required(self.did, 'did')
        self.validate_required(self.filter_field, 'filter_field')
        self.validate_required(self.filter_value, 'filter_value')
        self.validate_required(self.subject_did, 'subject_did')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.did is not None:
            result['did'] = self.did
        if self.filter_field is not None:
            result['filter_field'] = self.filter_field
        if self.filter_value is not None:
            result['filter_value'] = self.filter_value
        if self.signature is not None:
            result['signature'] = self.signature
        if self.subject_did is not None:
            result['subject_did'] = self.subject_did
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('filter_field') is not None:
            self.filter_field = m.get('filter_field')
        if m.get('filter_value') is not None:
            self.filter_value = m.get('filter_value')
        if m.get('signature') is not None:
            self.signature = m.get('signature')
        if m.get('subject_did') is not None:
            self.subject_did = m.get('subject_did')
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        return self


class StartDidVcrepositoryFilterandreadResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        verifiable_claim_content: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 可验证声明的完整声明 {"content":{"verion":"0.7.0","issuer":"xxxx","subject":"xxxx","expire":1530735444,"issucanceDate":1530735000,"id":"XXXX","claim":{//用户自定义},"status":{"type":"XXXX","id":"XXXXX"}},"proof":{"type":"ecdsa","created":"2018-06-18T21:19:10Z","verificationMethod":"XXXX","signatureValue":"XXXXX"}}
        self.verifiable_claim_content = verifiable_claim_content

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.verifiable_claim_content is not None:
            result['verifiable_claim_content'] = self.verifiable_claim_content
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('verifiable_claim_content') is not None:
            self.verifiable_claim_content = m.get('verifiable_claim_content')
        return self


class StartDidVcrepositoryReadwithvcidRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        did: str = None,
        signature: str = None,
        subject_did: str = None,
        verifiable_claim_id: str = None,
        biz_code: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 请求读取数据的did。
        self.did = did
        # 保留字段，请求读的did身份对应公钥对所有数据参数的签名（目前托管模式可缺省此字段，未来非托管时需请求端签名，需填此字段）
        self.signature = signature
        # 要查询的这个vc属于哪个did，如果未指定，did会尝试从默认vc仓库获取
        self.subject_did = subject_did
        # 通过指定目标证书VC的唯一verifiable_claim_id来读取内容。
        self.verifiable_claim_id = verifiable_claim_id
        # 场景码，找dis工作人员进行分配
        self.biz_code = biz_code

    def validate(self):
        self.validate_required(self.did, 'did')
        self.validate_required(self.verifiable_claim_id, 'verifiable_claim_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.did is not None:
            result['did'] = self.did
        if self.signature is not None:
            result['signature'] = self.signature
        if self.subject_did is not None:
            result['subject_did'] = self.subject_did
        if self.verifiable_claim_id is not None:
            result['verifiable_claim_id'] = self.verifiable_claim_id
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('signature') is not None:
            self.signature = m.get('signature')
        if m.get('subject_did') is not None:
            self.subject_did = m.get('subject_did')
        if m.get('verifiable_claim_id') is not None:
            self.verifiable_claim_id = m.get('verifiable_claim_id')
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        return self


class StartDidVcrepositoryReadwithvcidResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        verifiable_claim_content: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 可验证声明的完整声明 {"content":{"verion":"0.7.0","issuer":"xxxx","subject":"xxxx","expire":1530735444,"issucanceDate":1530735000,"id":"XXXX","claim":{//用户自定义},"status":{"type":"XXXX","id":"XXXXX"}},"proof":{"type":"ecdsa","created":"2018-06-18T21:19:10Z","verificationMethod":"XXXX","signatureValue":"XXXXX"}}
        self.verifiable_claim_content = verifiable_claim_content

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.verifiable_claim_content is not None:
            result['verifiable_claim_content'] = self.verifiable_claim_content
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('verifiable_claim_content') is not None:
            self.verifiable_claim_content = m.get('verifiable_claim_content')
        return self


class StartDidVcrepositoryReadwithdefineidRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        define_id: str = None,
        did: str = None,
        issuer_did: str = None,
        signature: str = None,
        subject_did: str = None,
        biz_code: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 自定义的业务id，通常此字段不是"vc:mychain:"前缀开头，会使用如下规则生成最终verifiable_claim_id： verifiable_claim_id = "vc:mychain:" + SHA256(Joiner.on(":").join(issuer_did, subject_did, define_id)); 此表达式参与SHA256的 define_id 为用户指定的当前参数。
        self.define_id = define_id
        # 请求读取数据的did。
        self.did = did
        # 目标证书VC的颁发者did。
        self.issuer_did = issuer_did
        # 保留字段，请求读的did身份对应公钥对所有数据参数的签名（目前托管模式可缺省此字段，未来非托管时需请求端签名，需填此字段）
        self.signature = signature
        # 目标证书VC的颁发目标did。
        self.subject_did = subject_did
        # 场景码，找dis工作人员进行分配
        self.biz_code = biz_code

    def validate(self):
        self.validate_required(self.define_id, 'define_id')
        self.validate_required(self.did, 'did')
        self.validate_required(self.issuer_did, 'issuer_did')
        self.validate_required(self.subject_did, 'subject_did')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.define_id is not None:
            result['define_id'] = self.define_id
        if self.did is not None:
            result['did'] = self.did
        if self.issuer_did is not None:
            result['issuer_did'] = self.issuer_did
        if self.signature is not None:
            result['signature'] = self.signature
        if self.subject_did is not None:
            result['subject_did'] = self.subject_did
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('define_id') is not None:
            self.define_id = m.get('define_id')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('issuer_did') is not None:
            self.issuer_did = m.get('issuer_did')
        if m.get('signature') is not None:
            self.signature = m.get('signature')
        if m.get('subject_did') is not None:
            self.subject_did = m.get('subject_did')
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        return self


class StartDidVcrepositoryReadwithdefineidResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        verifiable_claim_content: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 可验证声明的完整声明 {"content":{"verion":"0.7.0","issuer":"xxxx","subject":"xxxx","expire":1530735444,"issucanceDate":1530735000,"id":"XXXX","claim":{//用户自定义},"status":{"type":"XXXX","id":"XXXXX"}},"proof":{"type":"ecdsa","created":"2018-06-18T21:19:10Z","verificationMethod":"XXXX","signatureValue":"XXXXX"}}
        self.verifiable_claim_content = verifiable_claim_content

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.verifiable_claim_content is not None:
            result['verifiable_claim_content'] = self.verifiable_claim_content
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('verifiable_claim_content') is not None:
            self.verifiable_claim_content = m.get('verifiable_claim_content')
        return self


class StartDidVcrepositoryAuthwithvcidRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        auth_did_list: str = None,
        biz_code: str = None,
        did: str = None,
        signature: str = None,
        verifiable_claim_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 配置此did列表，为这些did分配读取目标VC的权限，如果目标VC存储时是明文存储，则操作失败（无需做此权限管控）。
        self.auth_did_list = auth_did_list
        # 场景码，找dis工作人员进行分配
        self.biz_code = biz_code
        # 目标VC的owner，也就是VC内容中的subject did身份。
        self.did = did
        # 保留字段，请求增加授权的调用方did身份对应公钥对所有数据参数的签名（目前托管模式可缺省此字段，未来非托管时需请求端签名，需填此字段）
        self.signature = signature
        # 通过指定目标证书VC的唯一verifiable_claim_id来找到目标证书VC并新增授权。
        self.verifiable_claim_id = verifiable_claim_id

    def validate(self):
        self.validate_required(self.auth_did_list, 'auth_did_list')
        self.validate_required(self.did, 'did')
        self.validate_required(self.verifiable_claim_id, 'verifiable_claim_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.auth_did_list is not None:
            result['auth_did_list'] = self.auth_did_list
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        if self.did is not None:
            result['did'] = self.did
        if self.signature is not None:
            result['signature'] = self.signature
        if self.verifiable_claim_id is not None:
            result['verifiable_claim_id'] = self.verifiable_claim_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('auth_did_list') is not None:
            self.auth_did_list = m.get('auth_did_list')
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('signature') is not None:
            self.signature = m.get('signature')
        if m.get('verifiable_claim_id') is not None:
            self.verifiable_claim_id = m.get('verifiable_claim_id')
        return self


class StartDidVcrepositoryAuthwithvcidResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class StartDidVcrepositoryAuthwithdefineidRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        auth_did_list: str = None,
        biz_code: str = None,
        define_id: str = None,
        did: str = None,
        issuer_did: str = None,
        signature: str = None,
        subject_did: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 配置此did列表，为这些did分配读取目标VC的权限，如果目标VC存储时是明文存储，则操作失败（无需做此权限管控）。
        self.auth_did_list = auth_did_list
        # 场景码，找dis工作人员进行分配
        self.biz_code = biz_code
        # 自定义的业务id，通常此字段不是"vc:mychain:"前缀开头，会使用如下规则生成最终verifiable_claim_id： verifiable_claim_id = "vc:mychain:" + SHA256(Joiner.on(":").join(issuer_did, subject_did, define_id)); 此表达式参与SHA256的 define_id 为用户指定的当前参数。
        self.define_id = define_id
        # 请求操作的did，也是目标VC的owner，也就是VC内容中的subject did身份。
        self.did = did
        # 目标证书的颁发者did。
        self.issuer_did = issuer_did
        # 保留字段，请求增加授权的调用方did身份对应公钥对所有数据参数的签名（目前托管模式可缺省此字段，未来非托管时需请求端签名，需填此字段）
        self.signature = signature
        # 目标证书VC的颁发目标did。
        self.subject_did = subject_did

    def validate(self):
        self.validate_required(self.auth_did_list, 'auth_did_list')
        self.validate_required(self.define_id, 'define_id')
        self.validate_required(self.did, 'did')
        self.validate_required(self.issuer_did, 'issuer_did')
        self.validate_required(self.subject_did, 'subject_did')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.auth_did_list is not None:
            result['auth_did_list'] = self.auth_did_list
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        if self.define_id is not None:
            result['define_id'] = self.define_id
        if self.did is not None:
            result['did'] = self.did
        if self.issuer_did is not None:
            result['issuer_did'] = self.issuer_did
        if self.signature is not None:
            result['signature'] = self.signature
        if self.subject_did is not None:
            result['subject_did'] = self.subject_did
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('auth_did_list') is not None:
            self.auth_did_list = m.get('auth_did_list')
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        if m.get('define_id') is not None:
            self.define_id = m.get('define_id')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('issuer_did') is not None:
            self.issuer_did = m.get('issuer_did')
        if m.get('signature') is not None:
            self.signature = m.get('signature')
        if m.get('subject_did') is not None:
            self.subject_did = m.get('subject_did')
        return self


class StartDidVcrepositoryAuthwithdefineidResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class StartDidAgentServicetypeRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        access_mode: str = None,
        description: str = None,
        did: str = None,
        service_input: str = None,
        service_output: str = None,
        service_type: str = None,
        biz_code: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 枚举类型，描述访问服务的方式
        self.access_mode = access_mode
        # 对服务的文字描述，<1000个字符
        self.description = description
        # 服务类型创建者did
        self.did = did
        # {
        # "item1":"",
        # "item2":"",
        # ...
        # }
        self.service_input = service_input
        # {
        # "item1":""
        # "item2":""
        # ...
        # }
        self.service_output = service_output
        # 自定义服务类型，字符数16～32个
        self.service_type = service_type
        # 场景码，找dis工作人员进行分配
        self.biz_code = biz_code

    def validate(self):
        self.validate_required(self.did, 'did')
        self.validate_required(self.service_type, 'service_type')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.access_mode is not None:
            result['access_mode'] = self.access_mode
        if self.description is not None:
            result['description'] = self.description
        if self.did is not None:
            result['did'] = self.did
        if self.service_input is not None:
            result['service_input'] = self.service_input
        if self.service_output is not None:
            result['service_output'] = self.service_output
        if self.service_type is not None:
            result['service_type'] = self.service_type
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('access_mode') is not None:
            self.access_mode = m.get('access_mode')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('service_input') is not None:
            self.service_input = m.get('service_input')
        if m.get('service_output') is not None:
            self.service_output = m.get('service_output')
        if m.get('service_type') is not None:
            self.service_type = m.get('service_type')
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        return self


class StartDidAgentServicetypeResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        service_type: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 创建成功之后，返回服务类型名
        self.service_type = service_type

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.service_type is not None:
            result['service_type'] = self.service_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('service_type') is not None:
            self.service_type = m.get('service_type')
        return self


class QueryDidAgentServicetypeRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        did: str = None,
        service_type: str = None,
        biz_code: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 查询者did
        self.did = did
        # 指定查询的服务类型名
        self.service_type = service_type
        # 场景码，找dis工作人员进行分配
        self.biz_code = biz_code

    def validate(self):
        self.validate_required(self.did, 'did')
        self.validate_required(self.service_type, 'service_type')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.did is not None:
            result['did'] = self.did
        if self.service_type is not None:
            result['service_type'] = self.service_type
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('service_type') is not None:
            self.service_type = m.get('service_type')
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        return self


class QueryDidAgentServicetypeResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        service_types: List[str] = None,
        total_number: int = None,
        total_page: int = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 服务类型定义列表
        self.service_types = service_types
        # 总共有几项
        self.total_number = total_number
        # 总共有几页
        self.total_page = total_page

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.service_types is not None:
            result['service_types'] = self.service_types
        if self.total_number is not None:
            result['total_number'] = self.total_number
        if self.total_page is not None:
            result['total_page'] = self.total_page
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('service_types') is not None:
            self.service_types = m.get('service_types')
        if m.get('total_number') is not None:
            self.total_number = m.get('total_number')
        if m.get('total_page') is not None:
            self.total_page = m.get('total_page')
        return self


class UpdateDidServicesRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        add_sevices: List[DidDocServicesInfo] = None,
        del_services: List[str] = None,
        did: str = None,
        did_type: str = None,
        biz_code: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 新增的服务信息
        self.add_sevices = add_sevices
        # 要删除的服务id列表
        self.del_services = del_services
        # 指定要更新的did
        self.did = did
        # did类型，个人|企业|设备(IOT)
        self.did_type = did_type
        # 场景码，找dis工作人员进行分配
        self.biz_code = biz_code

    def validate(self):
        if self.add_sevices:
            for k in self.add_sevices:
                if k:
                    k.validate()
        self.validate_required(self.did, 'did')
        self.validate_required(self.did_type, 'did_type')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        result['add_sevices'] = []
        if self.add_sevices is not None:
            for k in self.add_sevices:
                result['add_sevices'].append(k.to_map() if k else None)
        if self.del_services is not None:
            result['del_services'] = self.del_services
        if self.did is not None:
            result['did'] = self.did
        if self.did_type is not None:
            result['did_type'] = self.did_type
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        self.add_sevices = []
        if m.get('add_sevices') is not None:
            for k in m.get('add_sevices'):
                temp_model = DidDocServicesInfo()
                self.add_sevices.append(temp_model.from_map(k))
        if m.get('del_services') is not None:
            self.del_services = m.get('del_services')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('did_type') is not None:
            self.did_type = m.get('did_type')
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        return self


class UpdateDidServicesResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        did_doc: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 更新后的did doc
        self.did_doc = did_doc

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.did_doc is not None:
            result['did_doc'] = self.did_doc
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('did_doc') is not None:
            self.did_doc = m.get('did_doc')
        return self


class QueryDidAgentServicediscoveryRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        page_num: int = None,
        service_type: str = None,
        biz_code: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 查询页数
        self.page_num = page_num
        # 需要查找的服务类型
        self.service_type = service_type
        # 场景码，找dis工作人员进行分配
        # 
        self.biz_code = biz_code

    def validate(self):
        self.validate_required(self.page_num, 'page_num')
        self.validate_required(self.service_type, 'service_type')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.page_num is not None:
            result['page_num'] = self.page_num
        if self.service_type is not None:
            result['service_type'] = self.service_type
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('page_num') is not None:
            self.page_num = m.get('page_num')
        if m.get('service_type') is not None:
            self.service_type = m.get('service_type')
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        return self


class QueryDidAgentServicediscoveryResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        current_page: int = None,
        services: List[DisServiceInfo] = None,
        total_num: int = None,
        total_page: int = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 当前页数
        self.current_page = current_page
        # 服务列表
        self.services = services
        # 总个数
        self.total_num = total_num
        # 总页数
        self.total_page = total_page

    def validate(self):
        if self.services:
            for k in self.services:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.current_page is not None:
            result['current_page'] = self.current_page
        result['services'] = []
        if self.services is not None:
            for k in self.services:
                result['services'].append(k.to_map() if k else None)
        if self.total_num is not None:
            result['total_num'] = self.total_num
        if self.total_page is not None:
            result['total_page'] = self.total_page
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('current_page') is not None:
            self.current_page = m.get('current_page')
        self.services = []
        if m.get('services') is not None:
            for k in m.get('services'):
                temp_model = DisServiceInfo()
                self.services.append(temp_model.from_map(k))
        if m.get('total_num') is not None:
            self.total_num = m.get('total_num')
        if m.get('total_page') is not None:
            self.total_page = m.get('total_page')
        return self


class StartDidVerifiableclaimIssuerandsaveRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        bare_claim: BareClaim = None,
        expire: int = None,
        issuer: str = None,
        subject: str = None,
        type: List[str] = None,
        verify_status_type: str = None,
        biz_code: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 颁发证书声明
        self.bare_claim = bare_claim
        # 过期时间
        self.expire = expire
        # 由谁来颁发，该did必须为调用者自己或者自己代理的did
        self.issuer = issuer
        # 为哪个did颁发
        self.subject = subject
        # 验证声明类型，目前默认VerifiableCredential
        self.type = type
        # 验证声明状态方式，目前只支持直接通过声明id上链查找状态方式，后续会支持更多方式
        self.verify_status_type = verify_status_type
        # 场景码，找dis工作人员进行分配
        self.biz_code = biz_code

    def validate(self):
        self.validate_required(self.bare_claim, 'bare_claim')
        if self.bare_claim:
            self.bare_claim.validate()
        self.validate_required(self.expire, 'expire')
        self.validate_required(self.issuer, 'issuer')
        self.validate_required(self.subject, 'subject')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.bare_claim is not None:
            result['bare_claim'] = self.bare_claim.to_map()
        if self.expire is not None:
            result['expire'] = self.expire
        if self.issuer is not None:
            result['issuer'] = self.issuer
        if self.subject is not None:
            result['subject'] = self.subject
        if self.type is not None:
            result['type'] = self.type
        if self.verify_status_type is not None:
            result['verify_status_type'] = self.verify_status_type
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('bare_claim') is not None:
            temp_model = BareClaim()
            self.bare_claim = temp_model.from_map(m['bare_claim'])
        if m.get('expire') is not None:
            self.expire = m.get('expire')
        if m.get('issuer') is not None:
            self.issuer = m.get('issuer')
        if m.get('subject') is not None:
            self.subject = m.get('subject')
        if m.get('type') is not None:
            self.type = m.get('type')
        if m.get('verify_status_type') is not None:
            self.verify_status_type = m.get('verify_status_type')
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        return self


class StartDidVerifiableclaimIssuerandsaveResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        verifiable_claim_content: str = None,
        verifiable_claim_id: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 可验证声明的完整声明 {"content":{"verion":"0.7.0","issuer":"xxxx","subject":"xxxx","expire":1530735444,"issucanceDate":1530735000,"id":"XXXX","claim":{//用户自定义},"status":{"type":"XXXX","id":"XXXXX"}},"proof":{"type":"ecdsa","created":"2018-06-18T21:19:10Z","verificationMethod":"XXXX","signatureValue":"XXXXX"}}
        self.verifiable_claim_content = verifiable_claim_content
        # 声明id
        self.verifiable_claim_id = verifiable_claim_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.verifiable_claim_content is not None:
            result['verifiable_claim_content'] = self.verifiable_claim_content
        if self.verifiable_claim_id is not None:
            result['verifiable_claim_id'] = self.verifiable_claim_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('verifiable_claim_content') is not None:
            self.verifiable_claim_content = m.get('verifiable_claim_content')
        if m.get('verifiable_claim_id') is not None:
            self.verifiable_claim_id = m.get('verifiable_claim_id')
        return self


class StartDidVcrepositoryVctransmitRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        did: str = None,
        payload: VcTransmitPayload = None,
        biz_code: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 用户did标示
        self.did = did
        # 实际参数
        self.payload = payload
        # 场景码，找dis工作人员进行分配
        self.biz_code = biz_code

    def validate(self):
        self.validate_required(self.did, 'did')
        self.validate_required(self.payload, 'payload')
        if self.payload:
            self.payload.validate()

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.did is not None:
            result['did'] = self.did
        if self.payload is not None:
            result['payload'] = self.payload.to_map()
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('payload') is not None:
            temp_model = VcTransmitPayload()
            self.payload = temp_model.from_map(m['payload'])
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        return self


class StartDidVcrepositoryVctransmitResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: List[VcTransmitResult] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 具体传输结果
        self.result = result

    def validate(self):
        if self.result:
            for k in self.result:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['result'] = []
        if self.result is not None:
            for k in self.result:
                result['result'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.result = []
        if m.get('result') is not None:
            for k in m.get('result'):
                temp_model = VcTransmitResult()
                self.result.append(temp_model.from_map(k))
        return self


class CreateDidPersonWithtwometaRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        cert_no: str = None,
        extension_info: str = None,
        name: str = None,
        owner_name: str = None,
        owner_uid: str = None,
        biz_code: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 身份证号码
        self.cert_no = cert_no
        # 扩展字段
        self.extension_info = extension_info
        # 姓名
        self.name = name
        # 名称
        self.owner_name = owner_name
        # 自定义个人唯一id，个人在自有模式下的唯一号，调用者需要保证其唯一性
        self.owner_uid = owner_uid
        # 场景码，找dis工作人员进行分配
        self.biz_code = biz_code

    def validate(self):
        self.validate_required(self.cert_no, 'cert_no')
        self.validate_required(self.name, 'name')
        self.validate_required(self.owner_uid, 'owner_uid')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.cert_no is not None:
            result['cert_no'] = self.cert_no
        if self.extension_info is not None:
            result['extension_info'] = self.extension_info
        if self.name is not None:
            result['name'] = self.name
        if self.owner_name is not None:
            result['owner_name'] = self.owner_name
        if self.owner_uid is not None:
            result['owner_uid'] = self.owner_uid
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('cert_no') is not None:
            self.cert_no = m.get('cert_no')
        if m.get('extension_info') is not None:
            self.extension_info = m.get('extension_info')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('owner_name') is not None:
            self.owner_name = m.get('owner_name')
        if m.get('owner_uid') is not None:
            self.owner_uid = m.get('owner_uid')
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        return self


class CreateDidPersonWithtwometaResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        did: str = None,
        vc_id: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 生成的did字符串
        self.did = did
        # 颁发的vcId
        self.vc_id = vc_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.did is not None:
            result['did'] = self.did
        if self.vc_id is not None:
            result['vc_id'] = self.vc_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('vc_id') is not None:
            self.vc_id = m.get('vc_id')
        return self


class CreateDidCorporateWithtwometaRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        ep_cert_name: str = None,
        ep_cert_no: str = None,
        extension_info: str = None,
        owner_name: str = None,
        owner_uid: str = None,
        biz_code: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 企业名称
        self.ep_cert_name = ep_cert_name
        # 企业证件号
        self.ep_cert_no = ep_cert_no
        # {
        # "nation": "CN", //企业注册地址
        # "type": "LimitedCompany", //企业类型
        # "name": "演示用户名", //必选字段，企业名
        # "licenceNo": "1111", //营业执照
        # "address": "1111", //企业地址
        # "parentName": "", //<-必选字段 业务方名 需要提前协商
        # "linkType": "indirect", //<- 连接类型，direct直链企业， indirect间链企业
        # "certifyDate": "2019-1-1", //证书颁发时间
        # "licenceExpireDate": "2020-1-1", //证书到期时间
        # "businessScope": "1111", //企业经营范围
        # "businessAddress": "1111", //企业经营地址
        # "corporateBusinessType": 0, //<- 企业类型：0 一般企业， 1 个人商户
        # "channelName": "" //<- 必选字段 业务渠道 需要提前沟通
        # }
        self.extension_info = extension_info
        # 名称
        # 
        self.owner_name = owner_name
        # 自定义企业唯一id，企业在自有模式下的唯一号，调用者需要保证其唯一性
        self.owner_uid = owner_uid
        # 场景码，找dis工作人员进行分配
        self.biz_code = biz_code

    def validate(self):
        self.validate_required(self.ep_cert_name, 'ep_cert_name')
        self.validate_required(self.ep_cert_no, 'ep_cert_no')
        self.validate_required(self.owner_uid, 'owner_uid')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.ep_cert_name is not None:
            result['ep_cert_name'] = self.ep_cert_name
        if self.ep_cert_no is not None:
            result['ep_cert_no'] = self.ep_cert_no
        if self.extension_info is not None:
            result['extension_info'] = self.extension_info
        if self.owner_name is not None:
            result['owner_name'] = self.owner_name
        if self.owner_uid is not None:
            result['owner_uid'] = self.owner_uid
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('ep_cert_name') is not None:
            self.ep_cert_name = m.get('ep_cert_name')
        if m.get('ep_cert_no') is not None:
            self.ep_cert_no = m.get('ep_cert_no')
        if m.get('extension_info') is not None:
            self.extension_info = m.get('extension_info')
        if m.get('owner_name') is not None:
            self.owner_name = m.get('owner_name')
        if m.get('owner_uid') is not None:
            self.owner_uid = m.get('owner_uid')
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        return self


class CreateDidCorporateWithtwometaResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        did: str = None,
        vc_id: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 生成的did
        # 
        self.did = did
        # 颁发的vcId
        self.vc_id = vc_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.did is not None:
            result['did'] = self.did
        if self.vc_id is not None:
            result['vc_id'] = self.vc_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('vc_id') is not None:
            self.vc_id = m.get('vc_id')
        return self


class CreateDidCorporateWithfourmetaRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        ep_cert_name: str = None,
        ep_cert_no: str = None,
        extension_info: str = None,
        legal_person_cert_name: str = None,
        legal_person_cert_no: str = None,
        owner_name: str = None,
        owner_uid: str = None,
        biz_code: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 企业名称
        # 
        self.ep_cert_name = ep_cert_name
        # 企业证件号
        # 
        self.ep_cert_no = ep_cert_no
        # { "nation": "CN", //企业注册地址 "type": "LimitedCompany", //企业类型 "name": "演示用户名", //必选字段，企业名 "licenceNo": "1111", //营业执照 "address": "1111", //企业地址 "parentName": "", //<-必选字段 业务方名 需要提前协商 "linkType": "indirect", //<- 连接类型，direct直链企业， indirect间链企业 "certifyDate": "2019-1-1", //证书颁发时间 "licenceExpireDate": "2020-1-1", //证书到期时间 "businessScope": "1111", //企业经营范围 "businessAddress": "1111", //企业经营地址 "corporateBusinessType": 0, //<- 企业类型：0 一般企业， 1 个人商户 "channelName": "" //<- 必选字段 业务渠道 需要提前沟通 }
        # 
        self.extension_info = extension_info
        # 法人姓名
        # 
        self.legal_person_cert_name = legal_person_cert_name
        # 法人身份证件号
        self.legal_person_cert_no = legal_person_cert_no
        # 名称
        # 
        self.owner_name = owner_name
        # 自定义企业唯一id，企业在自有模式下的唯一号，调用者需要保证其唯一性
        self.owner_uid = owner_uid
        # 场景码，找dis工作人员进行分配
        self.biz_code = biz_code

    def validate(self):
        self.validate_required(self.ep_cert_name, 'ep_cert_name')
        self.validate_required(self.ep_cert_no, 'ep_cert_no')
        self.validate_required(self.legal_person_cert_name, 'legal_person_cert_name')
        self.validate_required(self.legal_person_cert_no, 'legal_person_cert_no')
        self.validate_required(self.owner_uid, 'owner_uid')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.ep_cert_name is not None:
            result['ep_cert_name'] = self.ep_cert_name
        if self.ep_cert_no is not None:
            result['ep_cert_no'] = self.ep_cert_no
        if self.extension_info is not None:
            result['extension_info'] = self.extension_info
        if self.legal_person_cert_name is not None:
            result['legal_person_cert_name'] = self.legal_person_cert_name
        if self.legal_person_cert_no is not None:
            result['legal_person_cert_no'] = self.legal_person_cert_no
        if self.owner_name is not None:
            result['owner_name'] = self.owner_name
        if self.owner_uid is not None:
            result['owner_uid'] = self.owner_uid
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('ep_cert_name') is not None:
            self.ep_cert_name = m.get('ep_cert_name')
        if m.get('ep_cert_no') is not None:
            self.ep_cert_no = m.get('ep_cert_no')
        if m.get('extension_info') is not None:
            self.extension_info = m.get('extension_info')
        if m.get('legal_person_cert_name') is not None:
            self.legal_person_cert_name = m.get('legal_person_cert_name')
        if m.get('legal_person_cert_no') is not None:
            self.legal_person_cert_no = m.get('legal_person_cert_no')
        if m.get('owner_name') is not None:
            self.owner_name = m.get('owner_name')
        if m.get('owner_uid') is not None:
            self.owner_uid = m.get('owner_uid')
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        return self


class CreateDidCorporateWithfourmetaResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        did: str = None,
        vc_id: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 生成的did
        # 
        self.did = did
        # 颁发的vcId
        # 
        self.vc_id = vc_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.did is not None:
            result['did'] = self.did
        if self.vc_id is not None:
            result['vc_id'] = self.vc_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('vc_id') is not None:
            self.vc_id = m.get('vc_id')
        return self


class CreateDidPersonWithfourmetaRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        bank_card: str = None,
        cert_no: str = None,
        extension_info: str = None,
        mobile: str = None,
        name: str = None,
        owner_name: str = None,
        owner_uid: str = None,
        biz_code: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 银行卡号
        self.bank_card = bank_card
        # 身份证号码
        # 
        self.cert_no = cert_no
        # 扩展字段
        # 
        self.extension_info = extension_info
        # 手机号码
        # 
        self.mobile = mobile
        # 姓名
        # 
        self.name = name
        # 名称
        # 
        self.owner_name = owner_name
        # 自定义个人唯一id，个人在自有模式下的唯一号，调用者需要保证其唯一性
        self.owner_uid = owner_uid
        # 场景码，找dis工作人员进行分配
        self.biz_code = biz_code

    def validate(self):
        self.validate_required(self.bank_card, 'bank_card')
        self.validate_required(self.cert_no, 'cert_no')
        self.validate_required(self.mobile, 'mobile')
        self.validate_required(self.name, 'name')
        self.validate_required(self.owner_uid, 'owner_uid')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.bank_card is not None:
            result['bank_card'] = self.bank_card
        if self.cert_no is not None:
            result['cert_no'] = self.cert_no
        if self.extension_info is not None:
            result['extension_info'] = self.extension_info
        if self.mobile is not None:
            result['mobile'] = self.mobile
        if self.name is not None:
            result['name'] = self.name
        if self.owner_name is not None:
            result['owner_name'] = self.owner_name
        if self.owner_uid is not None:
            result['owner_uid'] = self.owner_uid
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('bank_card') is not None:
            self.bank_card = m.get('bank_card')
        if m.get('cert_no') is not None:
            self.cert_no = m.get('cert_no')
        if m.get('extension_info') is not None:
            self.extension_info = m.get('extension_info')
        if m.get('mobile') is not None:
            self.mobile = m.get('mobile')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('owner_name') is not None:
            self.owner_name = m.get('owner_name')
        if m.get('owner_uid') is not None:
            self.owner_uid = m.get('owner_uid')
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        return self


class CreateDidPersonWithfourmetaResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        did: str = None,
        vc_id: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 生成的did字符串
        # 
        self.did = did
        # 颁发的vcId
        # 
        self.vc_id = vc_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.did is not None:
            result['did'] = self.did
        if self.vc_id is not None:
            result['vc_id'] = self.vc_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('vc_id') is not None:
            self.vc_id = m.get('vc_id')
        return self


class StartDidCorporateTwometaRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        did: str = None,
        ep_cert_name: str = None,
        ep_cert_no: str = None,
        biz_code: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 颁发证书的subject did
        # 
        self.did = did
        # 企业名称
        self.ep_cert_name = ep_cert_name
        # 企业证件号
        # 
        self.ep_cert_no = ep_cert_no
        # 场景码，找dis工作人员进行分配
        self.biz_code = biz_code

    def validate(self):
        self.validate_required(self.did, 'did')
        self.validate_required(self.ep_cert_name, 'ep_cert_name')
        self.validate_required(self.ep_cert_no, 'ep_cert_no')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.did is not None:
            result['did'] = self.did
        if self.ep_cert_name is not None:
            result['ep_cert_name'] = self.ep_cert_name
        if self.ep_cert_no is not None:
            result['ep_cert_no'] = self.ep_cert_no
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('ep_cert_name') is not None:
            self.ep_cert_name = m.get('ep_cert_name')
        if m.get('ep_cert_no') is not None:
            self.ep_cert_no = m.get('ep_cert_no')
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        return self


class StartDidCorporateTwometaResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        vc_id: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # vc id，可通过该字符串来查询vc具体内容
        self.vc_id = vc_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.vc_id is not None:
            result['vc_id'] = self.vc_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('vc_id') is not None:
            self.vc_id = m.get('vc_id')
        return self


class StartDidCorporateThreemetaRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        did: str = None,
        ep_cert_name: str = None,
        ep_cert_no: str = None,
        legal_person_cert_name: str = None,
        biz_code: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 证书的subject did
        # 
        self.did = did
        # 企业名称
        # 
        self.ep_cert_name = ep_cert_name
        # 企业证件号
        # 
        self.ep_cert_no = ep_cert_no
        # 法人姓名
        # 
        self.legal_person_cert_name = legal_person_cert_name
        # 场景码，找dis工作人员进行分配
        self.biz_code = biz_code

    def validate(self):
        self.validate_required(self.did, 'did')
        self.validate_required(self.ep_cert_name, 'ep_cert_name')
        self.validate_required(self.ep_cert_no, 'ep_cert_no')
        self.validate_required(self.legal_person_cert_name, 'legal_person_cert_name')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.did is not None:
            result['did'] = self.did
        if self.ep_cert_name is not None:
            result['ep_cert_name'] = self.ep_cert_name
        if self.ep_cert_no is not None:
            result['ep_cert_no'] = self.ep_cert_no
        if self.legal_person_cert_name is not None:
            result['legal_person_cert_name'] = self.legal_person_cert_name
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('ep_cert_name') is not None:
            self.ep_cert_name = m.get('ep_cert_name')
        if m.get('ep_cert_no') is not None:
            self.ep_cert_no = m.get('ep_cert_no')
        if m.get('legal_person_cert_name') is not None:
            self.legal_person_cert_name = m.get('legal_person_cert_name')
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        return self


class StartDidCorporateThreemetaResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        vc_id: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # vc id，可通过该字符串来查询vc具体内容
        # 
        self.vc_id = vc_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.vc_id is not None:
            result['vc_id'] = self.vc_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('vc_id') is not None:
            self.vc_id = m.get('vc_id')
        return self


class StartDidCorporateFourmetaRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        did: str = None,
        ep_cert_name: str = None,
        ep_cert_no: str = None,
        legal_person_cert_name: str = None,
        legal_person_cert_no: str = None,
        biz_code: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 颁发证书的subject did
        # 
        self.did = did
        # 企业名称
        # 
        self.ep_cert_name = ep_cert_name
        # 企业证件号
        # 
        self.ep_cert_no = ep_cert_no
        # 法人姓名
        # 
        self.legal_person_cert_name = legal_person_cert_name
        # 法人身份证件号
        # 
        self.legal_person_cert_no = legal_person_cert_no
        # 场景码，找dis工作人员进行分配
        self.biz_code = biz_code

    def validate(self):
        self.validate_required(self.did, 'did')
        self.validate_required(self.ep_cert_name, 'ep_cert_name')
        self.validate_required(self.ep_cert_no, 'ep_cert_no')
        self.validate_required(self.legal_person_cert_name, 'legal_person_cert_name')
        self.validate_required(self.legal_person_cert_no, 'legal_person_cert_no')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.did is not None:
            result['did'] = self.did
        if self.ep_cert_name is not None:
            result['ep_cert_name'] = self.ep_cert_name
        if self.ep_cert_no is not None:
            result['ep_cert_no'] = self.ep_cert_no
        if self.legal_person_cert_name is not None:
            result['legal_person_cert_name'] = self.legal_person_cert_name
        if self.legal_person_cert_no is not None:
            result['legal_person_cert_no'] = self.legal_person_cert_no
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('ep_cert_name') is not None:
            self.ep_cert_name = m.get('ep_cert_name')
        if m.get('ep_cert_no') is not None:
            self.ep_cert_no = m.get('ep_cert_no')
        if m.get('legal_person_cert_name') is not None:
            self.legal_person_cert_name = m.get('legal_person_cert_name')
        if m.get('legal_person_cert_no') is not None:
            self.legal_person_cert_no = m.get('legal_person_cert_no')
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        return self


class StartDidCorporateFourmetaResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        vc_id: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # vc id，可通过该字符串来查询vc具体内容
        # 
        self.vc_id = vc_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.vc_id is not None:
            result['vc_id'] = self.vc_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('vc_id') is not None:
            self.vc_id = m.get('vc_id')
        return self


class StartDidCertificationFourmetaRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        bank_card: str = None,
        cert_no: str = None,
        did: str = None,
        mobile: str = None,
        name: str = None,
        biz_code: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 银行卡号
        # 
        self.bank_card = bank_card
        # 身份证号码
        # 
        self.cert_no = cert_no
        # 证书的subject did
        # 
        self.did = did
        # 手机号码
        # 
        self.mobile = mobile
        # 姓名
        # 
        self.name = name
        # 场景码，找dis工作人员进行分配
        self.biz_code = biz_code

    def validate(self):
        self.validate_required(self.bank_card, 'bank_card')
        self.validate_required(self.cert_no, 'cert_no')
        self.validate_required(self.did, 'did')
        self.validate_required(self.mobile, 'mobile')
        self.validate_required(self.name, 'name')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.bank_card is not None:
            result['bank_card'] = self.bank_card
        if self.cert_no is not None:
            result['cert_no'] = self.cert_no
        if self.did is not None:
            result['did'] = self.did
        if self.mobile is not None:
            result['mobile'] = self.mobile
        if self.name is not None:
            result['name'] = self.name
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('bank_card') is not None:
            self.bank_card = m.get('bank_card')
        if m.get('cert_no') is not None:
            self.cert_no = m.get('cert_no')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('mobile') is not None:
            self.mobile = m.get('mobile')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        return self


class StartDidCertificationFourmetaResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        vc_id: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # vc id，可通过该字符串来查询vc具体内容
        # 
        self.vc_id = vc_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.vc_id is not None:
            result['vc_id'] = self.vc_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('vc_id') is not None:
            self.vc_id = m.get('vc_id')
        return self


class QueryDidVcrepositoryFuzzyquerywithdefinedidRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        define_id: str = None,
        did: str = None,
        issuer_did: str = None,
        subject_did: str = None,
        biz_code: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 自定义的业务id，通常此字段不是"vc:mychain:"前缀开头，会使用如下规则生成最终verifiable_claim_id： verifiable_claim_id = "vc:mychain:" + SHA256(Joiner.on(":").join(issuer_did, subject_did, define_id)); 此表达式参与SHA256的 define_id 为用户指定的当前参数。查询时使用verifiable_claim_id*\
        self.define_id = define_id
        # 请求读取数据的did
        self.did = did
        # 目标证书VC的颁发者did。
        self.issuer_did = issuer_did
        # 目标证书VC的颁发目标did。
        # 
        self.subject_did = subject_did
        # 场景码，找dis工作人员进行分配
        self.biz_code = biz_code

    def validate(self):
        self.validate_required(self.define_id, 'define_id')
        self.validate_required(self.did, 'did')
        self.validate_required(self.issuer_did, 'issuer_did')
        self.validate_required(self.subject_did, 'subject_did')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.define_id is not None:
            result['define_id'] = self.define_id
        if self.did is not None:
            result['did'] = self.did
        if self.issuer_did is not None:
            result['issuer_did'] = self.issuer_did
        if self.subject_did is not None:
            result['subject_did'] = self.subject_did
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('define_id') is not None:
            self.define_id = m.get('define_id')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('issuer_did') is not None:
            self.issuer_did = m.get('issuer_did')
        if m.get('subject_did') is not None:
            self.subject_did = m.get('subject_did')
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        return self


class QueryDidVcrepositoryFuzzyquerywithdefinedidResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        verifiable_claim_content: List[str] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 可验证声明的完整声明列表
        self.verifiable_claim_content = verifiable_claim_content

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.verifiable_claim_content is not None:
            result['verifiable_claim_content'] = self.verifiable_claim_content
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('verifiable_claim_content') is not None:
            self.verifiable_claim_content = m.get('verifiable_claim_content')
        return self


class StartDidCommonAgentcreateRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        biz_code: str = None,
        extension_info: str = None,
        indexs: List[str] = None,
        owner_name: str = None,
        owner_uid: str = None,
        services: List[DidDocServicesInfo] = None,
        entity_type: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 场景码，找dis工作人员进行分配
        self.biz_code = biz_code
        # 自定信息
        self.extension_info = extension_info
        # 所有需要关联的外键，外键必须已did auth key controller的did作为前缀+“sidekey:”+外键
        self.indexs = indexs
        # 名称
        self.owner_name = owner_name
        # 唯一号，比如可以是hash(证件类型+企业营业执照号) 计算出来的唯一值等
        self.owner_uid = owner_uid
        # 携带自己定义的服务类型
        self.services = services
        # 指定did的类型
        self.entity_type = entity_type

    def validate(self):
        self.validate_required(self.owner_name, 'owner_name')
        self.validate_required(self.owner_uid, 'owner_uid')
        if self.services:
            for k in self.services:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        if self.extension_info is not None:
            result['extension_info'] = self.extension_info
        if self.indexs is not None:
            result['indexs'] = self.indexs
        if self.owner_name is not None:
            result['owner_name'] = self.owner_name
        if self.owner_uid is not None:
            result['owner_uid'] = self.owner_uid
        result['services'] = []
        if self.services is not None:
            for k in self.services:
                result['services'].append(k.to_map() if k else None)
        if self.entity_type is not None:
            result['entity_type'] = self.entity_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        if m.get('extension_info') is not None:
            self.extension_info = m.get('extension_info')
        if m.get('indexs') is not None:
            self.indexs = m.get('indexs')
        if m.get('owner_name') is not None:
            self.owner_name = m.get('owner_name')
        if m.get('owner_uid') is not None:
            self.owner_uid = m.get('owner_uid')
        self.services = []
        if m.get('services') is not None:
            for k in m.get('services'):
                temp_model = DidDocServicesInfo()
                self.services.append(temp_model.from_map(k))
        if m.get('entity_type') is not None:
            self.entity_type = m.get('entity_type')
        return self


class StartDidCommonAgentcreateResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        did: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 生成的did字符串
        self.did = did

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.did is not None:
            result['did'] = self.did
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('did') is not None:
            self.did = m.get('did')
        return self


class StartDidCorporateFaceauthRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        call_back_url: str = None,
        ep_cert_name: str = None,
        ep_cert_no: str = None,
        ep_cert_type: str = None,
        extension_info: str = None,
        legal_person_cert_name: str = None,
        legal_person_cert_no: str = None,
        merchant_url: str = None,
        owner_name: str = None,
        owner_uid: str = None,
        biz_code: str = None,
        group: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 回调通知地址
        self.call_back_url = call_back_url
        # 企业名称
        self.ep_cert_name = ep_cert_name
        # 企业证件号
        self.ep_cert_no = ep_cert_no
        # 企业证件类型（NATIONAL_LEGAL（工商注册号）或 NATIONAL_LEGAL_MERGE （ 社会统一信用代码））
        self.ep_cert_type = ep_cert_type
        # { "nation": "CN", //企业注册地址 "type": "LimitedCompany", //企业类型 "name": "演示用户名", //必选字段，企业名 "licenceNo": "1111", //营业执照 "address": "1111", //企业地址 "parentName": "", //<-必选字段 业务方名 需要提前协商 "linkType": "indirect", //<- 连接类型，direct直链企业， indirect间链企业 "certifyDate": "2019-1-1", //证书颁发时间 "licenceExpireDate": "2020-1-1", //证书到期时间 "businessScope": "1111", //企业经营范围 "businessAddress": "1111", //企业经营地址 "corporateBusinessType": 0, //<- 企业类型：0 一般企业， 1 个人商户 "channelName": "" //<- 必选字段 业务渠道 需要提前沟通 }
        self.extension_info = extension_info
        # 企业法人
        self.legal_person_cert_name = legal_person_cert_name
        # 法人身份证号
        self.legal_person_cert_no = legal_person_cert_no
        # 认证完成后回跳地址
        self.merchant_url = merchant_url
        # 名称
        self.owner_name = owner_name
        # 自定义企业唯一id，企业在自有模式下的唯一号，调用者需要保证其唯一性
        self.owner_uid = owner_uid
        # 场景码，找dis工作人员进行分配
        self.biz_code = biz_code
        # 产品渲染方式：H5、NATIVE 或 PC, 默认为H5
        self.group = group

    def validate(self):
        self.validate_required(self.ep_cert_name, 'ep_cert_name')
        self.validate_required(self.ep_cert_no, 'ep_cert_no')
        self.validate_required(self.ep_cert_type, 'ep_cert_type')
        self.validate_required(self.legal_person_cert_name, 'legal_person_cert_name')
        self.validate_required(self.legal_person_cert_no, 'legal_person_cert_no')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.call_back_url is not None:
            result['call_back_url'] = self.call_back_url
        if self.ep_cert_name is not None:
            result['ep_cert_name'] = self.ep_cert_name
        if self.ep_cert_no is not None:
            result['ep_cert_no'] = self.ep_cert_no
        if self.ep_cert_type is not None:
            result['ep_cert_type'] = self.ep_cert_type
        if self.extension_info is not None:
            result['extension_info'] = self.extension_info
        if self.legal_person_cert_name is not None:
            result['legal_person_cert_name'] = self.legal_person_cert_name
        if self.legal_person_cert_no is not None:
            result['legal_person_cert_no'] = self.legal_person_cert_no
        if self.merchant_url is not None:
            result['merchant_url'] = self.merchant_url
        if self.owner_name is not None:
            result['owner_name'] = self.owner_name
        if self.owner_uid is not None:
            result['owner_uid'] = self.owner_uid
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        if self.group is not None:
            result['group'] = self.group
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('call_back_url') is not None:
            self.call_back_url = m.get('call_back_url')
        if m.get('ep_cert_name') is not None:
            self.ep_cert_name = m.get('ep_cert_name')
        if m.get('ep_cert_no') is not None:
            self.ep_cert_no = m.get('ep_cert_no')
        if m.get('ep_cert_type') is not None:
            self.ep_cert_type = m.get('ep_cert_type')
        if m.get('extension_info') is not None:
            self.extension_info = m.get('extension_info')
        if m.get('legal_person_cert_name') is not None:
            self.legal_person_cert_name = m.get('legal_person_cert_name')
        if m.get('legal_person_cert_no') is not None:
            self.legal_person_cert_no = m.get('legal_person_cert_no')
        if m.get('merchant_url') is not None:
            self.merchant_url = m.get('merchant_url')
        if m.get('owner_name') is not None:
            self.owner_name = m.get('owner_name')
        if m.get('owner_uid') is not None:
            self.owner_uid = m.get('owner_uid')
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        if m.get('group') is not None:
            self.group = m.get('group')
        return self


class StartDidCorporateFaceauthResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        certify_id: str = None,
        certify_url: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 认证ID
        self.certify_id = certify_id
        # 二维码URL，用户支付宝扫一扫实人认证
        self.certify_url = certify_url

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.certify_id is not None:
            result['certify_id'] = self.certify_id
        if self.certify_url is not None:
            result['certify_url'] = self.certify_url
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('certify_id') is not None:
            self.certify_id = m.get('certify_id')
        if m.get('certify_url') is not None:
            self.certify_url = m.get('certify_url')
        return self


class QueryDidCorporateFaceauthRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        certify_id: str = None,
        biz_code: str = None,
        group: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 认证ID，用于查询认证结果
        # 
        self.certify_id = certify_id
        # 场景码，找dis工作人员进行分配
        self.biz_code = biz_code
        # 产品渲染方式：H5、NATIVE 或 PC
        self.group = group

    def validate(self):
        self.validate_required(self.certify_id, 'certify_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.certify_id is not None:
            result['certify_id'] = self.certify_id
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        if self.group is not None:
            result['group'] = self.group
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('certify_id') is not None:
            self.certify_id = m.get('certify_id')
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        if m.get('group') is not None:
            self.group = m.get('group')
        return self


class QueryDidCorporateFaceauthResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        did: str = None,
        vc_id: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 生成的did
        self.did = did
        # vc id，可通过该字符串来查询vc具体内容
        self.vc_id = vc_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.did is not None:
            result['did'] = self.did
        if self.vc_id is not None:
            result['vc_id'] = self.vc_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('vc_id') is not None:
            self.vc_id = m.get('vc_id')
        return self


class DeleteDidVcrepositoryVcRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        did: str = None,
        vc_list: List[str] = None,
        biz_code: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 要删除的vc owner
        self.did = did
        # 带删除的VC列表
        self.vc_list = vc_list
        # 场景码，找dis工作人员进行分配
        self.biz_code = biz_code

    def validate(self):
        self.validate_required(self.did, 'did')
        self.validate_required(self.vc_list, 'vc_list')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.did is not None:
            result['did'] = self.did
        if self.vc_list is not None:
            result['vc_list'] = self.vc_list
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('vc_list') is not None:
            self.vc_list = m.get('vc_list')
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        return self


class DeleteDidVcrepositoryVcResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class StartDidZkpverifiableclaimProofRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        biz_code: str = None,
        subject: str = None,
        vc: str = None,
        zkp_info: List[DidZKPInfo] = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 场景码，找dis工作人员进行分配
        self.biz_code = biz_code
        # vc对应的授予者
        self.subject = subject
        # vc原文
        self.vc = vc
        # zkp证明生成信息
        self.zkp_info = zkp_info

    def validate(self):
        self.validate_required(self.subject, 'subject')
        self.validate_required(self.vc, 'vc')
        self.validate_required(self.zkp_info, 'zkp_info')
        if self.zkp_info:
            for k in self.zkp_info:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        if self.subject is not None:
            result['subject'] = self.subject
        if self.vc is not None:
            result['vc'] = self.vc
        result['zkp_info'] = []
        if self.zkp_info is not None:
            for k in self.zkp_info:
                result['zkp_info'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        if m.get('subject') is not None:
            self.subject = m.get('subject')
        if m.get('vc') is not None:
            self.vc = m.get('vc')
        self.zkp_info = []
        if m.get('zkp_info') is not None:
            for k in m.get('zkp_info'):
                temp_model = DidZKPInfo()
                self.zkp_info.append(temp_model.from_map(k))
        return self


class StartDidZkpverifiableclaimProofResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        zkp_vc: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 替换为zkp证明的VC
        self.zkp_vc = zkp_vc

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.zkp_vc is not None:
            result['zkp_vc'] = self.zkp_vc
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('zkp_vc') is not None:
            self.zkp_vc = m.get('zkp_vc')
        return self


class VerifyDidZkpverifiableclaimProofRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        biz_code: str = None,
        vc: str = None,
        verify_zkp_proof: List[DidZKPInfo] = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 场景码，找dis工作人员进行分配
        self.biz_code = biz_code
        # 包含ZKP Proof的可验证声明
        self.vc = vc
        # ZKP验证信息
        self.verify_zkp_proof = verify_zkp_proof

    def validate(self):
        self.validate_required(self.vc, 'vc')
        self.validate_required(self.verify_zkp_proof, 'verify_zkp_proof')
        if self.verify_zkp_proof:
            for k in self.verify_zkp_proof:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        if self.vc is not None:
            result['vc'] = self.vc
        result['verify_zkp_proof'] = []
        if self.verify_zkp_proof is not None:
            for k in self.verify_zkp_proof:
                result['verify_zkp_proof'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        if m.get('vc') is not None:
            self.vc = m.get('vc')
        self.verify_zkp_proof = []
        if m.get('verify_zkp_proof') is not None:
            for k in m.get('verify_zkp_proof'):
                temp_model = DidZKPInfo()
                self.verify_zkp_proof.append(temp_model.from_map(k))
        return self


class VerifyDidZkpverifiableclaimProofResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class StartMydidcommunAgencySettleinRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        ep_cert_name: str = None,
        ep_cert_no: str = None,
        legal_person_cert_name: str = None,
        notification_url: str = None,
        public_key: str = None,
        recover_key: str = None,
        biz_code: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 企业名称
        self.ep_cert_name = ep_cert_name
        # 企业证件号
        self.ep_cert_no = ep_cert_no
        # 法人姓名
        self.legal_person_cert_name = legal_person_cert_name
        # 事件通知地址
        self.notification_url = notification_url
        # 公钥
        self.public_key = public_key
        # 恢复公钥
        self.recover_key = recover_key
        # 业务码，接入时需要找数据隐私服务分配
        self.biz_code = biz_code

    def validate(self):
        self.validate_required(self.ep_cert_name, 'ep_cert_name')
        self.validate_required(self.ep_cert_no, 'ep_cert_no')
        self.validate_required(self.legal_person_cert_name, 'legal_person_cert_name')
        self.validate_required(self.public_key, 'public_key')
        self.validate_required(self.recover_key, 'recover_key')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.ep_cert_name is not None:
            result['ep_cert_name'] = self.ep_cert_name
        if self.ep_cert_no is not None:
            result['ep_cert_no'] = self.ep_cert_no
        if self.legal_person_cert_name is not None:
            result['legal_person_cert_name'] = self.legal_person_cert_name
        if self.notification_url is not None:
            result['notification_url'] = self.notification_url
        if self.public_key is not None:
            result['public_key'] = self.public_key
        if self.recover_key is not None:
            result['recover_key'] = self.recover_key
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('ep_cert_name') is not None:
            self.ep_cert_name = m.get('ep_cert_name')
        if m.get('ep_cert_no') is not None:
            self.ep_cert_no = m.get('ep_cert_no')
        if m.get('legal_person_cert_name') is not None:
            self.legal_person_cert_name = m.get('legal_person_cert_name')
        if m.get('notification_url') is not None:
            self.notification_url = m.get('notification_url')
        if m.get('public_key') is not None:
            self.public_key = m.get('public_key')
        if m.get('recover_key') is not None:
            self.recover_key = m.get('recover_key')
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        return self


class StartMydidcommunAgencySettleinResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        did: str = None,
        doc: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 生成的did
        self.did = did
        # 生成的did doc
        self.doc = doc

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.did is not None:
            result['did'] = self.did
        if self.doc is not None:
            result['doc'] = self.doc
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('doc') is not None:
            self.doc = m.get('doc')
        return self


class StartMydidcommunAgencyChoicetappRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        did: str = None,
        service_id: str = None,
        tapp_name: str = None,
        tapp_version: int = None,
        biz_code: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 入驻时候生成的did
        self.did = did
        # 服务ID
        self.service_id = service_id
        # 选择tapp的名称
        self.tapp_name = tapp_name
        # tapp版本
        self.tapp_version = tapp_version
        # 业务码，需要接入时联系数据隐私服务分配
        self.biz_code = biz_code

    def validate(self):
        self.validate_required(self.did, 'did')
        self.validate_required(self.service_id, 'service_id')
        self.validate_required(self.tapp_name, 'tapp_name')
        self.validate_required(self.tapp_version, 'tapp_version')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.did is not None:
            result['did'] = self.did
        if self.service_id is not None:
            result['service_id'] = self.service_id
        if self.tapp_name is not None:
            result['tapp_name'] = self.tapp_name
        if self.tapp_version is not None:
            result['tapp_version'] = self.tapp_version
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('service_id') is not None:
            self.service_id = m.get('service_id')
        if m.get('tapp_name') is not None:
            self.tapp_name = m.get('tapp_name')
        if m.get('tapp_version') is not None:
            self.tapp_version = m.get('tapp_version')
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        return self


class StartMydidcommunAgencyChoicetappResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        pre_version: int = None,
        service_endpoint: str = None,
        service_id: str = None,
        service_type: str = None,
        desc: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # doc当前版本
        self.pre_version = pre_version
        # 生成的tapp info
        self.service_endpoint = service_endpoint
        # 生成的serviceId
        self.service_id = service_id
        # service 类型
        self.service_type = service_type
        # EXIST 该tapp和serviceid已经包含在did doc中；
        # CONFLICT 该serviceid已经存在，但信息与此次不一致；
        # VALID 正常
        self.desc = desc

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.pre_version is not None:
            result['pre_version'] = self.pre_version
        if self.service_endpoint is not None:
            result['service_endpoint'] = self.service_endpoint
        if self.service_id is not None:
            result['service_id'] = self.service_id
        if self.service_type is not None:
            result['service_type'] = self.service_type
        if self.desc is not None:
            result['desc'] = self.desc
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('pre_version') is not None:
            self.pre_version = m.get('pre_version')
        if m.get('service_endpoint') is not None:
            self.service_endpoint = m.get('service_endpoint')
        if m.get('service_id') is not None:
            self.service_id = m.get('service_id')
        if m.get('service_type') is not None:
            self.service_type = m.get('service_type')
        if m.get('desc') is not None:
            self.desc = m.get('desc')
        return self


class StartMydidcommunAgencyuserPersonjoinRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        cert_no: str = None,
        name: str = None,
        notification_url: str = None,
        public_key: str = None,
        recover_key: str = None,
        tapp_info_list: List[ChoiceTappInfo] = None,
        biz_code: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 身份证号码
        self.cert_no = cert_no
        # 姓名
        self.name = name
        # 事件通知地址
        self.notification_url = notification_url
        # 公钥
        self.public_key = public_key
        # 恢复公钥
        self.recover_key = recover_key
        # 选择的TAPP列表
        self.tapp_info_list = tapp_info_list
        # 业务码，接入时需要找数据隐私服务分配
        self.biz_code = biz_code

    def validate(self):
        self.validate_required(self.cert_no, 'cert_no')
        self.validate_required(self.name, 'name')
        self.validate_required(self.notification_url, 'notification_url')
        self.validate_required(self.public_key, 'public_key')
        self.validate_required(self.recover_key, 'recover_key')
        if self.tapp_info_list:
            for k in self.tapp_info_list:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.cert_no is not None:
            result['cert_no'] = self.cert_no
        if self.name is not None:
            result['name'] = self.name
        if self.notification_url is not None:
            result['notification_url'] = self.notification_url
        if self.public_key is not None:
            result['public_key'] = self.public_key
        if self.recover_key is not None:
            result['recover_key'] = self.recover_key
        result['tapp_info_list'] = []
        if self.tapp_info_list is not None:
            for k in self.tapp_info_list:
                result['tapp_info_list'].append(k.to_map() if k else None)
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('cert_no') is not None:
            self.cert_no = m.get('cert_no')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('notification_url') is not None:
            self.notification_url = m.get('notification_url')
        if m.get('public_key') is not None:
            self.public_key = m.get('public_key')
        if m.get('recover_key') is not None:
            self.recover_key = m.get('recover_key')
        self.tapp_info_list = []
        if m.get('tapp_info_list') is not None:
            for k in m.get('tapp_info_list'):
                temp_model = ChoiceTappInfo()
                self.tapp_info_list.append(temp_model.from_map(k))
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        return self


class StartMydidcommunAgencyuserPersonjoinResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        did: str = None,
        doc: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 生成的did
        self.did = did
        # 生成的did doc
        self.doc = doc

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.did is not None:
            result['did'] = self.did
        if self.doc is not None:
            result['doc'] = self.doc
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('doc') is not None:
            self.doc = m.get('doc')
        return self


class StartMydidcommunAgencyuserCorporatejoinRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        ep_cert_name: str = None,
        ep_cert_no: str = None,
        legal_person_cert_name: str = None,
        notification_url: str = None,
        public_key: str = None,
        recover_key: str = None,
        tapp_info_list: List[ChoiceTappInfo] = None,
        biz_code: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 企业名称
        self.ep_cert_name = ep_cert_name
        # 企业证件号
        self.ep_cert_no = ep_cert_no
        # 法人姓名
        self.legal_person_cert_name = legal_person_cert_name
        # 事件通知地址
        self.notification_url = notification_url
        # 公钥
        self.public_key = public_key
        # 恢复公钥
        self.recover_key = recover_key
        # 选择的tapp列表
        self.tapp_info_list = tapp_info_list
        # 业务码，接入时需要找数据隐私服务分配
        self.biz_code = biz_code

    def validate(self):
        self.validate_required(self.ep_cert_name, 'ep_cert_name')
        self.validate_required(self.ep_cert_no, 'ep_cert_no')
        self.validate_required(self.legal_person_cert_name, 'legal_person_cert_name')
        self.validate_required(self.notification_url, 'notification_url')
        self.validate_required(self.public_key, 'public_key')
        self.validate_required(self.recover_key, 'recover_key')
        if self.tapp_info_list:
            for k in self.tapp_info_list:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.ep_cert_name is not None:
            result['ep_cert_name'] = self.ep_cert_name
        if self.ep_cert_no is not None:
            result['ep_cert_no'] = self.ep_cert_no
        if self.legal_person_cert_name is not None:
            result['legal_person_cert_name'] = self.legal_person_cert_name
        if self.notification_url is not None:
            result['notification_url'] = self.notification_url
        if self.public_key is not None:
            result['public_key'] = self.public_key
        if self.recover_key is not None:
            result['recover_key'] = self.recover_key
        result['tapp_info_list'] = []
        if self.tapp_info_list is not None:
            for k in self.tapp_info_list:
                result['tapp_info_list'].append(k.to_map() if k else None)
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('ep_cert_name') is not None:
            self.ep_cert_name = m.get('ep_cert_name')
        if m.get('ep_cert_no') is not None:
            self.ep_cert_no = m.get('ep_cert_no')
        if m.get('legal_person_cert_name') is not None:
            self.legal_person_cert_name = m.get('legal_person_cert_name')
        if m.get('notification_url') is not None:
            self.notification_url = m.get('notification_url')
        if m.get('public_key') is not None:
            self.public_key = m.get('public_key')
        if m.get('recover_key') is not None:
            self.recover_key = m.get('recover_key')
        self.tapp_info_list = []
        if m.get('tapp_info_list') is not None:
            for k in m.get('tapp_info_list'):
                temp_model = ChoiceTappInfo()
                self.tapp_info_list.append(temp_model.from_map(k))
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        return self


class StartMydidcommunAgencyuserCorporatejoinResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        did: str = None,
        doc: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 生成的did
        self.did = did
        # 生成的did doc
        self.doc = doc

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.did is not None:
            result['did'] = self.did
        if self.doc is not None:
            result['doc'] = self.doc
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('doc') is not None:
            self.doc = m.get('doc')
        return self


class UpdateMydidcommunAgencyDocRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        did: str = None,
        operation_sign: str = None,
        pre_version: int = None,
        service_list: List[DisServicesInfo] = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 入驻时候生成的did
        self.did = did
        # 对参数进行构造签名
        self.operation_sign = operation_sign
        # doc当前版本
        self.pre_version = pre_version
        # doc中服务信息列表
        self.service_list = service_list

    def validate(self):
        self.validate_required(self.did, 'did')
        self.validate_required(self.operation_sign, 'operation_sign')
        self.validate_required(self.pre_version, 'pre_version')
        self.validate_required(self.service_list, 'service_list')
        if self.service_list:
            for k in self.service_list:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.did is not None:
            result['did'] = self.did
        if self.operation_sign is not None:
            result['operation_sign'] = self.operation_sign
        if self.pre_version is not None:
            result['pre_version'] = self.pre_version
        result['service_list'] = []
        if self.service_list is not None:
            for k in self.service_list:
                result['service_list'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('operation_sign') is not None:
            self.operation_sign = m.get('operation_sign')
        if m.get('pre_version') is not None:
            self.pre_version = m.get('pre_version')
        self.service_list = []
        if m.get('service_list') is not None:
            for k in m.get('service_list'):
                temp_model = DisServicesInfo()
                self.service_list.append(temp_model.from_map(k))
        return self


class UpdateMydidcommunAgencyDocResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class StartMydidcommunAgencyDatatransmitstartRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        did: str = None,
        owner_did: str = None,
        params: str = None,
        process_tapp_id: str = None,
        process_tapp_method: str = None,
        read_tapp_id: str = None,
        read_tapp_method: str = None,
        target_did: str = None,
        process_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 发送者的did
        self.did = did
        # 数字资产的owner did
        self.owner_did = owner_did
        # 具体调用Tapp的参数数组，json格式
        self.params = params
        # 数据处理tapp id
        self.process_tapp_id = process_tapp_id
        # 处理tapp的function
        self.process_tapp_method = process_tapp_method
        # 读取数据的tapp id
        self.read_tapp_id = read_tapp_id
        # 读取数据的Tapp中对应的Method
        self.read_tapp_method = read_tapp_method
        # 数据资产传输目标did
        self.target_did = target_did
        # 发起流程的唯一号，系统将更加这个唯一号保持幂等
        self.process_id = process_id

    def validate(self):
        self.validate_required(self.did, 'did')
        self.validate_required(self.params, 'params')
        self.validate_required(self.read_tapp_id, 'read_tapp_id')
        self.validate_required(self.read_tapp_method, 'read_tapp_method')
        self.validate_required(self.target_did, 'target_did')
        self.validate_required(self.process_id, 'process_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.did is not None:
            result['did'] = self.did
        if self.owner_did is not None:
            result['owner_did'] = self.owner_did
        if self.params is not None:
            result['params'] = self.params
        if self.process_tapp_id is not None:
            result['process_tapp_id'] = self.process_tapp_id
        if self.process_tapp_method is not None:
            result['process_tapp_method'] = self.process_tapp_method
        if self.read_tapp_id is not None:
            result['read_tapp_id'] = self.read_tapp_id
        if self.read_tapp_method is not None:
            result['read_tapp_method'] = self.read_tapp_method
        if self.target_did is not None:
            result['target_did'] = self.target_did
        if self.process_id is not None:
            result['process_id'] = self.process_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('owner_did') is not None:
            self.owner_did = m.get('owner_did')
        if m.get('params') is not None:
            self.params = m.get('params')
        if m.get('process_tapp_id') is not None:
            self.process_tapp_id = m.get('process_tapp_id')
        if m.get('process_tapp_method') is not None:
            self.process_tapp_method = m.get('process_tapp_method')
        if m.get('read_tapp_id') is not None:
            self.read_tapp_id = m.get('read_tapp_id')
        if m.get('read_tapp_method') is not None:
            self.read_tapp_method = m.get('read_tapp_method')
        if m.get('target_did') is not None:
            self.target_did = m.get('target_did')
        if m.get('process_id') is not None:
            self.process_id = m.get('process_id')
        return self


class StartMydidcommunAgencyDatatransmitstartResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        task_id: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 发起之后返回的任务ID
        self.task_id = task_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.task_id is not None:
            result['task_id'] = self.task_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('task_id') is not None:
            self.task_id = m.get('task_id')
        return self


class StartMydidcommunAgencyDatatransmitcontinueRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        params: str = None,
        task_id: str = None,
        did: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 调用tapp时传输的参数
        self.params = params
        # 之前触发主动发送数据流程返回的taskid
        self.task_id = task_id
        # 发送者的did声明
        self.did = did

    def validate(self):
        self.validate_required(self.params, 'params')
        self.validate_required(self.task_id, 'task_id')
        self.validate_required(self.did, 'did')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.params is not None:
            result['params'] = self.params
        if self.task_id is not None:
            result['task_id'] = self.task_id
        if self.did is not None:
            result['did'] = self.did
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('params') is not None:
            self.params = m.get('params')
        if m.get('task_id') is not None:
            self.task_id = m.get('task_id')
        if m.get('did') is not None:
            self.did = m.get('did')
        return self


class StartMydidcommunAgencyDatatransmitcontinueResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        task_id: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 主动发起数据传输流程的task id
        self.task_id = task_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.task_id is not None:
            result['task_id'] = self.task_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('task_id') is not None:
            self.task_id = m.get('task_id')
        return self


class StartMydidcommunAgencyDataapplicationRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        data_id: str = None,
        did: str = None,
        message: str = None,
        process_data_id: str = None,
        process_id: str = None,
        target_did: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 申请的数据ID，该字段由两部分组成ownerdid#service-id(did doc中表示对应数据资产的serviceid)
        self.data_id = data_id
        # 主动发起申请数据流程的请求者did
        self.did = did
        # 申请数据时增加的说明，比如说明本次申请数据的原因，等描述
        self.message = message
        # 申请者在申请数据的时候，申明自己将使用那种方式处理申请到的数据。如果该字段为0表示要得到原始数据。
        # 该字段形式与dataId类似
        self.process_data_id = process_data_id
        # 发起申请的申请id，系统将基于该id保持幂等
        self.process_id = process_id
        # 数据申请到之后最终发送给谁的did
        self.target_did = target_did

    def validate(self):
        self.validate_required(self.data_id, 'data_id')
        self.validate_required(self.did, 'did')
        self.validate_required(self.process_id, 'process_id')
        if self.process_id is not None:
            self.validate_max_length(self.process_id, 'process_id', 128)
        self.validate_required(self.target_did, 'target_did')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.data_id is not None:
            result['data_id'] = self.data_id
        if self.did is not None:
            result['did'] = self.did
        if self.message is not None:
            result['message'] = self.message
        if self.process_data_id is not None:
            result['process_data_id'] = self.process_data_id
        if self.process_id is not None:
            result['process_id'] = self.process_id
        if self.target_did is not None:
            result['target_did'] = self.target_did
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('data_id') is not None:
            self.data_id = m.get('data_id')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('process_data_id') is not None:
            self.process_data_id = m.get('process_data_id')
        if m.get('process_id') is not None:
            self.process_id = m.get('process_id')
        if m.get('target_did') is not None:
            self.target_did = m.get('target_did')
        return self


class StartMydidcommunAgencyDataapplicationResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        task_id: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 本次请求对应的任务ID，后续消息通知时会携带该字段，方便业务系统进行对应
        self.task_id = task_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.task_id is not None:
            result['task_id'] = self.task_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('task_id') is not None:
            self.task_id = m.get('task_id')
        return self


class StartMydidcommunAgencyChoicetapplistRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        did: str = None,
        tapp_infos: List[ChoiceTappInfo] = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 入驻时候生成的did
        self.did = did
        # 选择的tapp信息列表
        self.tapp_infos = tapp_infos

    def validate(self):
        self.validate_required(self.did, 'did')
        self.validate_required(self.tapp_infos, 'tapp_infos')
        if self.tapp_infos:
            for k in self.tapp_infos:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.did is not None:
            result['did'] = self.did
        result['tapp_infos'] = []
        if self.tapp_infos is not None:
            for k in self.tapp_infos:
                result['tapp_infos'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('did') is not None:
            self.did = m.get('did')
        self.tapp_infos = []
        if m.get('tapp_infos') is not None:
            for k in m.get('tapp_infos'):
                temp_model = ChoiceTappInfo()
                self.tapp_infos.append(temp_model.from_map(k))
        return self


class StartMydidcommunAgencyChoicetapplistResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        pre_version: int = None,
        service_list: List[DisServicesInfo] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 之前did的版本号，在更新时会使用到
        self.pre_version = pre_version
        # 对应servic info
        self.service_list = service_list

    def validate(self):
        if self.service_list:
            for k in self.service_list:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.pre_version is not None:
            result['pre_version'] = self.pre_version
        result['service_list'] = []
        if self.service_list is not None:
            for k in self.service_list:
                result['service_list'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('pre_version') is not None:
            self.pre_version = m.get('pre_version')
        self.service_list = []
        if m.get('service_list') is not None:
            for k in m.get('service_list'):
                temp_model = DisServicesInfo()
                self.service_list.append(temp_model.from_map(k))
        return self


class StartMydidcommunAgencyDataassertregisterRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        approvers: List[str] = None,
        did: str = None,
        service_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 审批流程节点
        self.approvers = approvers
        # 数据资产的Owner
        self.did = did
        # 数据资产id
        self.service_id = service_id

    def validate(self):
        self.validate_required(self.approvers, 'approvers')
        self.validate_required(self.did, 'did')
        self.validate_required(self.service_id, 'service_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.approvers is not None:
            result['approvers'] = self.approvers
        if self.did is not None:
            result['did'] = self.did
        if self.service_id is not None:
            result['service_id'] = self.service_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('approvers') is not None:
            self.approvers = m.get('approvers')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('service_id') is not None:
            self.service_id = m.get('service_id')
        return self


class StartMydidcommunAgencyDataassertregisterResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data_id: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 数据资产ID
        self.data_id = data_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.data_id is not None:
            result['data_id'] = self.data_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('data_id') is not None:
            self.data_id = m.get('data_id')
        return self


class StartMydidcommunAgencyAuthRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        did: str = None,
        request_raw: str = None,
        biz_code: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 发起者did
        self.did = did
        # 用户在本地构造的发起数据授权申请的消息
        self.request_raw = request_raw
        # 业务码，需要接入时联系数据隐私服务分配
        self.biz_code = biz_code

    def validate(self):
        self.validate_required(self.did, 'did')
        self.validate_required(self.request_raw, 'request_raw')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.did is not None:
            result['did'] = self.did
        if self.request_raw is not None:
            result['request_raw'] = self.request_raw
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('request_raw') is not None:
            self.request_raw = m.get('request_raw')
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        return self


class StartMydidcommunAgencyAuthResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 授权返回值
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.result is not None:
            result['result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('result') is not None:
            self.result = m.get('result')
        return self


class StartMydidcommunAgencyProcessauthRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        did: str = None,
        request_raw: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 处理人did
        self.did = did
        # 处理授权的原始请求流
        self.request_raw = request_raw

    def validate(self):
        self.validate_required(self.did, 'did')
        self.validate_required(self.request_raw, 'request_raw')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.did is not None:
            result['did'] = self.did
        if self.request_raw is not None:
            result['request_raw'] = self.request_raw
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('request_raw') is not None:
            self.request_raw = m.get('request_raw')
        return self


class StartMydidcommunAgencyProcessauthResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 授权处理后的结果
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.result is not None:
            result['result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('result') is not None:
            self.result = m.get('result')
        return self


class QueryMydidcommunAgencyProcessauthRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        process_id: str = None,
        did: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 审批流水号
        self.process_id = process_id
        # 查询者did
        self.did = did

    def validate(self):
        self.validate_required(self.process_id, 'process_id')
        self.validate_required(self.did, 'did')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.process_id is not None:
            result['process_id'] = self.process_id
        if self.did is not None:
            result['did'] = self.did
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('process_id') is not None:
            self.process_id = m.get('process_id')
        if m.get('did') is not None:
            self.did = m.get('did')
        return self


class QueryMydidcommunAgencyProcessauthResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 审批流当前状态
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.result is not None:
            result['result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('result') is not None:
            self.result = m.get('result')
        return self


class QueryMydidcommunAgencyServicetypeinfoRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        service_type: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 带查询的服务类型
        self.service_type = service_type

    def validate(self):
        self.validate_required(self.service_type, 'service_type')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.service_type is not None:
            result['service_type'] = self.service_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('service_type') is not None:
            self.service_type = m.get('service_type')
        return self


class QueryMydidcommunAgencyServicetypeinfoResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        method: str = None,
        name: str = None,
        service_model: str = None,
        version: int = None,
        public_key: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 对应算法的入口函数名
        self.method = method
        # 服务对应的具体的Tapp或者算法名
        self.name = name
        # 表示服务的实际处理类型，目前是Data_Tapp
        # 
        self.service_model = service_model
        # 对应name的算法当前版本
        self.version = version
        # serviceType所对应版本的publickey
        self.public_key = public_key

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.method is not None:
            result['method'] = self.method
        if self.name is not None:
            result['name'] = self.name
        if self.service_model is not None:
            result['service_model'] = self.service_model
        if self.version is not None:
            result['version'] = self.version
        if self.public_key is not None:
            result['public_key'] = self.public_key
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('method') is not None:
            self.method = m.get('method')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('service_model') is not None:
            self.service_model = m.get('service_model')
        if m.get('version') is not None:
            self.version = m.get('version')
        if m.get('public_key') is not None:
            self.public_key = m.get('public_key')
        return self


class QueryMydidcommunAgencyTaskresultfileRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        file_mark: str = None,
        did: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 文件在数据隐私服务中标示
        self.file_mark = file_mark
        # 结果文件拥有者did
        self.did = did

    def validate(self):
        self.validate_required(self.file_mark, 'file_mark')
        self.validate_required(self.did, 'did')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.file_mark is not None:
            result['file_mark'] = self.file_mark
        if self.did is not None:
            result['did'] = self.did
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('file_mark') is not None:
            self.file_mark = m.get('file_mark')
        if m.get('did') is not None:
            self.did = m.get('did')
        return self


class QueryMydidcommunAgencyTaskresultfileResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        file_url: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 文件临时路径
        self.file_url = file_url

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.file_url is not None:
            result['file_url'] = self.file_url
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('file_url') is not None:
            self.file_url = m.get('file_url')
        return self


class ApplyMydidcommunTaskServicetypeRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        target_did: str = None,
        did: str = None,
        service_type: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 需要被授权人的DID
        self.target_did = target_did
        # 申请发起人的DID
        self.did = did
        # 需要被授权使用的服务类型
        self.service_type = service_type

    def validate(self):
        self.validate_required(self.target_did, 'target_did')
        self.validate_required(self.did, 'did')
        self.validate_required(self.service_type, 'service_type')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.target_did is not None:
            result['target_did'] = self.target_did
        if self.did is not None:
            result['did'] = self.did
        if self.service_type is not None:
            result['service_type'] = self.service_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('target_did') is not None:
            self.target_did = m.get('target_did')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('service_type') is not None:
            self.service_type = m.get('service_type')
        return self


class ApplyMydidcommunTaskServicetypeResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        task_id: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 用于查询异步处理流程的任务ID
        self.task_id = task_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.task_id is not None:
            result['task_id'] = self.task_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('task_id') is not None:
            self.task_id = m.get('task_id')
        return self


class GetMydidcommunTaskTaskresultRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        task_id: str = None,
        did: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 任务ID
        self.task_id = task_id
        # 申请人did（只有任务发起人才能查询执行结果）
        self.did = did

    def validate(self):
        self.validate_required(self.task_id, 'task_id')
        self.validate_required(self.did, 'did')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.task_id is not None:
            result['task_id'] = self.task_id
        if self.did is not None:
            result['did'] = self.did
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('task_id') is not None:
            self.task_id = m.get('task_id')
        if m.get('did') is not None:
            self.did = m.get('did')
        return self


class GetMydidcommunTaskTaskresultResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        task_id: str = None,
        status: str = None,
        data_result: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 任务ID
        self.task_id = task_id
        # FINISH 执行成功
        # CANCEL 执行失败
        # 只有FINISH 和CANCEL为最终状态，其他均为中间状态
        self.status = status
        # json序列化后的，任务执行结果，对不同的任务格式会有不同
        # 如：
        # - 代理VC的任务，返回值结构为{"vc":"1111111"}
        # - 获取数据的任务，返回值结构为{"response":{"output":"xxxx","status":"FINISH"}}
        self.data_result = data_result

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.task_id is not None:
            result['task_id'] = self.task_id
        if self.status is not None:
            result['status'] = self.status
        if self.data_result is not None:
            result['data_result'] = self.data_result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('task_id') is not None:
            self.task_id = m.get('task_id')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('data_result') is not None:
            self.data_result = m.get('data_result')
        return self


class AddMydidcommunAssetDataRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        data_path: str = None,
        did: str = None,
        owner_did: str = None,
        service_type: str = None,
        data_hash: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 数据实际存储路径
        self.data_path = data_path
        # 请求发起人的did
        self.did = did
        # 所注册的资产所有者DID，要注意资产所有者DID需与授权发起方DID相同
        self.owner_did = owner_did
        # 数据所对应的业务类型
        self.service_type = service_type
        # 临时字段，数据文件的md5哈希值，在隐私服务无法直接读取数据时，由用户提供
        self.data_hash = data_hash

    def validate(self):
        self.validate_required(self.data_path, 'data_path')
        self.validate_required(self.did, 'did')
        self.validate_required(self.owner_did, 'owner_did')
        self.validate_required(self.service_type, 'service_type')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.data_path is not None:
            result['data_path'] = self.data_path
        if self.did is not None:
            result['did'] = self.did
        if self.owner_did is not None:
            result['owner_did'] = self.owner_did
        if self.service_type is not None:
            result['service_type'] = self.service_type
        if self.data_hash is not None:
            result['data_hash'] = self.data_hash
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('data_path') is not None:
            self.data_path = m.get('data_path')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('owner_did') is not None:
            self.owner_did = m.get('owner_did')
        if m.get('service_type') is not None:
            self.service_type = m.get('service_type')
        if m.get('data_hash') is not None:
            self.data_hash = m.get('data_hash')
        return self


class AddMydidcommunAssetDataResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data_did: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 数据DID，用于唯一标示数据
        self.data_did = data_did

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.data_did is not None:
            result['data_did'] = self.data_did
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('data_did') is not None:
            self.data_did = m.get('data_did')
        return self


class StartMydidcommunTaskGetdataRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        data_did: str = None,
        target_did: str = None,
        vc: str = None,
        did: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 要获取的数据ID
        self.data_did = data_did
        # 申请获得的数据的用户DID，将用该DID公钥加密原始数据
        self.target_did = target_did
        # 授权数据申请方读取该数据的VC
        self.vc = vc
        # 请求发起人的did
        self.did = did

    def validate(self):
        self.validate_required(self.data_did, 'data_did')
        self.validate_required(self.target_did, 'target_did')
        self.validate_required(self.vc, 'vc')
        self.validate_required(self.did, 'did')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.data_did is not None:
            result['data_did'] = self.data_did
        if self.target_did is not None:
            result['target_did'] = self.target_did
        if self.vc is not None:
            result['vc'] = self.vc
        if self.did is not None:
            result['did'] = self.did
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('data_did') is not None:
            self.data_did = m.get('data_did')
        if m.get('target_did') is not None:
            self.target_did = m.get('target_did')
        if m.get('vc') is not None:
            self.vc = m.get('vc')
        if m.get('did') is not None:
            self.did = m.get('did')
        return self


class StartMydidcommunTaskGetdataResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        task_id: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 对应任务的ID
        self.task_id = task_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.task_id is not None:
            result['task_id'] = self.task_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('task_id') is not None:
            self.task_id = m.get('task_id')
        return self


class StartMydidcommunInstitutionSettleinRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        biz_code: str = None,
        institiution_no: str = None,
        institution_name: str = None,
        notification_url: str = None,
        public_key: str = None,
        recover_key: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 入驻时选择的业务码，这个码需要在机构入驻时与数据隐私服务确认之后填写
        self.biz_code = biz_code
        # 机构唯一编号
        self.institiution_no = institiution_no
        # 机构实际名称
        self.institution_name = institution_name
        # 接受数据隐私服务回调通知的URL，如果地址是https的，那么该地址必须提供有效的证书
        self.notification_url = notification_url
        # 机构和数据隐私服务进行通讯的非对称密钥对中的公钥
        self.public_key = public_key
        # 恢复密钥公钥，可用于以后修改通讯公钥用，不要和通讯公钥一样
        self.recover_key = recover_key

    def validate(self):
        self.validate_required(self.institution_name, 'institution_name')
        self.validate_required(self.public_key, 'public_key')
        self.validate_required(self.recover_key, 'recover_key')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        if self.institiution_no is not None:
            result['institiution_no'] = self.institiution_no
        if self.institution_name is not None:
            result['institution_name'] = self.institution_name
        if self.notification_url is not None:
            result['notification_url'] = self.notification_url
        if self.public_key is not None:
            result['public_key'] = self.public_key
        if self.recover_key is not None:
            result['recover_key'] = self.recover_key
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        if m.get('institiution_no') is not None:
            self.institiution_no = m.get('institiution_no')
        if m.get('institution_name') is not None:
            self.institution_name = m.get('institution_name')
        if m.get('notification_url') is not None:
            self.notification_url = m.get('notification_url')
        if m.get('public_key') is not None:
            self.public_key = m.get('public_key')
        if m.get('recover_key') is not None:
            self.recover_key = m.get('recover_key')
        return self


class StartMydidcommunInstitutionSettleinResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        did: str = None,
        doc: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 机构入驻后，会为其分配唯一的区块链数字身份，这里是数字身份的ID，后续接口都需要用这个id作为参数
        self.did = did
        # 是对数字身份did的描述，主要包括通讯公钥，和恢复公钥，以及会调url
        self.doc = doc

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.did is not None:
            result['did'] = self.did
        if self.doc is not None:
            result['doc'] = self.doc
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('doc') is not None:
            self.doc = m.get('doc')
        return self


class GetMydidcommunWorkergroupSyncRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        group_code: str = None,
        env: str = None,
        master_node: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 计算集群群组代号
        self.group_code = group_code
        # 环境名称
        self.env = env
        # 主节点
        self.master_node = master_node

    def validate(self):
        self.validate_required(self.group_code, 'group_code')
        self.validate_required(self.env, 'env')
        self.validate_required(self.master_node, 'master_node')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.group_code is not None:
            result['group_code'] = self.group_code
        if self.env is not None:
            result['env'] = self.env
        if self.master_node is not None:
            result['master_node'] = self.master_node
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('group_code') is not None:
            self.group_code = m.get('group_code')
        if m.get('env') is not None:
            self.env = m.get('env')
        if m.get('master_node') is not None:
            self.master_node = m.get('master_node')
        return self


class GetMydidcommunWorkergroupSyncResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 序列化后的同步任务
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class GetMydidcommunWorkergroupPodRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        pod_id: int = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 部署ID
        self.pod_id = pod_id

    def validate(self):
        self.validate_required(self.pod_id, 'pod_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.pod_id is not None:
            result['pod_id'] = self.pod_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('pod_id') is not None:
            self.pod_id = m.get('pod_id')
        return self


class GetMydidcommunWorkergroupPodResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 序列化后的部署
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class FinishMydidcommunWorkergroupSyncRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        pod_id: int = None,
        task_id: int = None,
        is_success: bool = None,
        msg: str = None,
        master_node: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 部署ID
        self.pod_id = pod_id
        # 任务ID
        self.task_id = task_id
        # 是否同步成功
        self.is_success = is_success
        # 处理消息
        self.msg = msg
        # 负责更新的节点名
        self.master_node = master_node

    def validate(self):
        self.validate_required(self.pod_id, 'pod_id')
        self.validate_required(self.task_id, 'task_id')
        self.validate_required(self.is_success, 'is_success')
        self.validate_required(self.msg, 'msg')
        self.validate_required(self.master_node, 'master_node')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.pod_id is not None:
            result['pod_id'] = self.pod_id
        if self.task_id is not None:
            result['task_id'] = self.task_id
        if self.is_success is not None:
            result['is_success'] = self.is_success
        if self.msg is not None:
            result['msg'] = self.msg
        if self.master_node is not None:
            result['master_node'] = self.master_node
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('pod_id') is not None:
            self.pod_id = m.get('pod_id')
        if m.get('task_id') is not None:
            self.task_id = m.get('task_id')
        if m.get('is_success') is not None:
            self.is_success = m.get('is_success')
        if m.get('msg') is not None:
            self.msg = m.get('msg')
        if m.get('master_node') is not None:
            self.master_node = m.get('master_node')
        return self


class FinishMydidcommunWorkergroupSyncResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class GetMydidcommunWorkergroupTappRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        pod_id: int = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # TAPPInstance所对应的部署ID
        self.pod_id = pod_id

    def validate(self):
        self.validate_required(self.pod_id, 'pod_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.pod_id is not None:
            result['pod_id'] = self.pod_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('pod_id') is not None:
            self.pod_id = m.get('pod_id')
        return self


class GetMydidcommunWorkergroupTappResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # TAPP部署详情
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class UpdateMydidcommunWorkergroupTappRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        tapp_instance_id: int = None,
        public_key: str = None,
        tapp_version: int = None,
        hash: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # TAPP部署实例ID
        self.tapp_instance_id = tapp_instance_id
        # TAPP部署公钥
        self.public_key = public_key
        # TAPP部署在mytf中的版本号
        self.tapp_version = tapp_version
        # mytf部署后返回的TAPP哈希
        self.hash = hash

    def validate(self):
        self.validate_required(self.tapp_instance_id, 'tapp_instance_id')
        self.validate_required(self.public_key, 'public_key')
        self.validate_required(self.tapp_version, 'tapp_version')
        self.validate_required(self.hash, 'hash')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.tapp_instance_id is not None:
            result['tapp_instance_id'] = self.tapp_instance_id
        if self.public_key is not None:
            result['public_key'] = self.public_key
        if self.tapp_version is not None:
            result['tapp_version'] = self.tapp_version
        if self.hash is not None:
            result['hash'] = self.hash
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('tapp_instance_id') is not None:
            self.tapp_instance_id = m.get('tapp_instance_id')
        if m.get('public_key') is not None:
            self.public_key = m.get('public_key')
        if m.get('tapp_version') is not None:
            self.tapp_version = m.get('tapp_version')
        if m.get('hash') is not None:
            self.hash = m.get('hash')
        return self


class UpdateMydidcommunWorkergroupTappResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class QueryMydidcommunWorkergroupWorkflowRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        pod_id: int = None,
        pod_version: int = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 工作流对应的部署Id
        self.pod_id = pod_id
        # 版本号
        self.pod_version = pod_version

    def validate(self):
        self.validate_required(self.pod_id, 'pod_id')
        self.validate_required(self.pod_version, 'pod_version')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.pod_id is not None:
            result['pod_id'] = self.pod_id
        if self.pod_version is not None:
            result['pod_version'] = self.pod_version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('pod_id') is not None:
            self.pod_id = m.get('pod_id')
        if m.get('pod_version') is not None:
            self.pod_version = m.get('pod_version')
        return self


class QueryMydidcommunWorkergroupWorkflowResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 工作流配置
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class SyncMydidcommunWorkergroupGroupRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        worker_group: str = None,
        env: str = None,
        metrics: str = None,
        executor_list: List[str] = None,
        master_node: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 计算集群明称
        self.worker_group = worker_group
        # 计算集群环境
        self.env = env
        # 执行状态上报
        self.metrics = metrics
        # 执行器code
        self.executor_list = executor_list
        # 主节点名
        self.master_node = master_node

    def validate(self):
        self.validate_required(self.worker_group, 'worker_group')
        self.validate_required(self.env, 'env')
        self.validate_required(self.metrics, 'metrics')
        self.validate_required(self.executor_list, 'executor_list')
        self.validate_required(self.master_node, 'master_node')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.worker_group is not None:
            result['worker_group'] = self.worker_group
        if self.env is not None:
            result['env'] = self.env
        if self.metrics is not None:
            result['metrics'] = self.metrics
        if self.executor_list is not None:
            result['executor_list'] = self.executor_list
        if self.master_node is not None:
            result['master_node'] = self.master_node
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('worker_group') is not None:
            self.worker_group = m.get('worker_group')
        if m.get('env') is not None:
            self.env = m.get('env')
        if m.get('metrics') is not None:
            self.metrics = m.get('metrics')
        if m.get('executor_list') is not None:
            self.executor_list = m.get('executor_list')
        if m.get('master_node') is not None:
            self.master_node = m.get('master_node')
        return self


class SyncMydidcommunWorkergroupGroupResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class ListMydidcommunWorkergroupPodversionRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        pod_id: int = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 部署id
        self.pod_id = pod_id

    def validate(self):
        self.validate_required(self.pod_id, 'pod_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.pod_id is not None:
            result['pod_id'] = self.pod_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('pod_id') is not None:
            self.pod_id = m.get('pod_id')
        return self


class ListMydidcommunWorkergroupPodversionResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 版本列表
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class SaveMydidIdaasDidserviceRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        uuid: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # uuid
        self.uuid = uuid

    def validate(self):
        self.validate_required(self.uuid, 'uuid')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.uuid is not None:
            result['uuid'] = self.uuid
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('uuid') is not None:
            self.uuid = m.get('uuid')
        return self


class SaveMydidIdaasDidserviceResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        did: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # did
        self.did = did

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.did is not None:
            result['did'] = self.did
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('did') is not None:
            self.did = m.get('did')
        return self


class QueryDidNotificationDideventRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        did: str = None,
        offset: int = None,
        biz_code: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 指定关注的did
        self.did = did
        # 起始偏移量
        self.offset = offset
        # 场景码，找dis工作人员进行分配
        self.biz_code = biz_code

    def validate(self):
        self.validate_required(self.did, 'did')
        self.validate_required(self.offset, 'offset')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.did is not None:
            result['did'] = self.did
        if self.offset is not None:
            result['offset'] = self.offset
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('offset') is not None:
            self.offset = m.get('offset')
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        return self


class QueryDidNotificationDideventResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        events: List[DidEvent] = None,
        has_more: bool = None,
        next_offset: int = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 相关事件列表
        self.events = events
        # 是否还有待同步事件
        self.has_more = has_more
        # 下次事件拉取开始的offset
        self.next_offset = next_offset

    def validate(self):
        if self.events:
            for k in self.events:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['events'] = []
        if self.events is not None:
            for k in self.events:
                result['events'].append(k.to_map() if k else None)
        if self.has_more is not None:
            result['has_more'] = self.has_more
        if self.next_offset is not None:
            result['next_offset'] = self.next_offset
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.events = []
        if m.get('events') is not None:
            for k in m.get('events'):
                temp_model = DidEvent()
                self.events.append(temp_model.from_map(k))
        if m.get('has_more') is not None:
            self.has_more = m.get('has_more')
        if m.get('next_offset') is not None:
            self.next_offset = m.get('next_offset')
        return self


class QueryDidNotificationVceventRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        did: str = None,
        offset: int = None,
        biz_code: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 指定关注的did
        self.did = did
        # 开始 同步事件的起始偏移量
        self.offset = offset
        # 场景码，找dis工作人员进行分配
        self.biz_code = biz_code

    def validate(self):
        self.validate_required(self.did, 'did')
        self.validate_required(self.offset, 'offset')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.did is not None:
            result['did'] = self.did
        if self.offset is not None:
            result['offset'] = self.offset
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('offset') is not None:
            self.offset = m.get('offset')
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        return self


class QueryDidNotificationVceventResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        events: List[VCEvent] = None,
        has_more: bool = None,
        next_offset: int = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # vc事件列表
        self.events = events
        # 是否有更多事件待同步
        self.has_more = has_more
        # 下次拉取事件的起始偏移量
        self.next_offset = next_offset

    def validate(self):
        if self.events:
            for k in self.events:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['events'] = []
        if self.events is not None:
            for k in self.events:
                result['events'].append(k.to_map() if k else None)
        if self.has_more is not None:
            result['has_more'] = self.has_more
        if self.next_offset is not None:
            result['next_offset'] = self.next_offset
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.events = []
        if m.get('events') is not None:
            for k in m.get('events'):
                temp_model = VCEvent()
                self.events.append(temp_model.from_map(k))
        if m.get('has_more') is not None:
            self.has_more = m.get('has_more')
        if m.get('next_offset') is not None:
            self.next_offset = m.get('next_offset')
        return self


class QueryDidNotificationFulldidRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        did: str = None,
        page_num: int = None,
        request_signature: str = None,
        biz_code: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # did描述符
        self.did = did
        # 页数
        self.page_num = page_num
        # 使用使用的did私钥对传参进行签名，签名方法可以联系开发人员
        self.request_signature = request_signature
        # 场景码，找dis工作人员进行分配
        self.biz_code = biz_code

    def validate(self):
        self.validate_required(self.did, 'did')
        self.validate_required(self.page_num, 'page_num')
        if self.page_num is not None:
            self.validate_minimum(self.page_num, 'page_num', 1)
        self.validate_required(self.request_signature, 'request_signature')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.did is not None:
            result['did'] = self.did
        if self.page_num is not None:
            result['page_num'] = self.page_num
        if self.request_signature is not None:
            result['request_signature'] = self.request_signature
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('page_num') is not None:
            self.page_num = m.get('page_num')
        if m.get('request_signature') is not None:
            self.request_signature = m.get('request_signature')
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        return self


class QueryDidNotificationFulldidResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        list: List[DidDetail] = None,
        total_num: int = None,
        total_page: int = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # did详情
        self.list = list
        # 总体数量
        self.total_num = total_num
        # 总页数
        self.total_page = total_page

    def validate(self):
        if self.list:
            for k in self.list:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['list'] = []
        if self.list is not None:
            for k in self.list:
                result['list'].append(k.to_map() if k else None)
        if self.total_num is not None:
            result['total_num'] = self.total_num
        if self.total_page is not None:
            result['total_page'] = self.total_page
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.list = []
        if m.get('list') is not None:
            for k in m.get('list'):
                temp_model = DidDetail()
                self.list.append(temp_model.from_map(k))
        if m.get('total_num') is not None:
            self.total_num = m.get('total_num')
        if m.get('total_page') is not None:
            self.total_page = m.get('total_page')
        return self


class CreateDidIdentityCorporateRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        extension_info: str = None,
        public_key: str = None,
        recovery_key: str = None,
        user_id: str = None,
        user_name: str = None,
        biz_code: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 扩展字段
        self.extension_info = extension_info
        # 公钥
        self.public_key = public_key
        # 恢复公钥
        self.recovery_key = recovery_key
        # uid
        self.user_id = user_id
        # 持有者名字
        self.user_name = user_name
        # 场景码，找dis工作人员进行分配
        self.biz_code = biz_code

    def validate(self):
        self.validate_required(self.public_key, 'public_key')
        self.validate_required(self.recovery_key, 'recovery_key')
        self.validate_required(self.user_id, 'user_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.extension_info is not None:
            result['extension_info'] = self.extension_info
        if self.public_key is not None:
            result['public_key'] = self.public_key
        if self.recovery_key is not None:
            result['recovery_key'] = self.recovery_key
        if self.user_id is not None:
            result['user_id'] = self.user_id
        if self.user_name is not None:
            result['user_name'] = self.user_name
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('extension_info') is not None:
            self.extension_info = m.get('extension_info')
        if m.get('public_key') is not None:
            self.public_key = m.get('public_key')
        if m.get('recovery_key') is not None:
            self.recovery_key = m.get('recovery_key')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        return self


class CreateDidIdentityCorporateResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        did: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # did
        self.did = did

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.did is not None:
            result['did'] = self.did
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('did') is not None:
            self.did = m.get('did')
        return self


class InitDidAdddidHashRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        did: str = None,
        diddoc: str = None,
        request_signature: str = None,
        biz_code: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 客户did
        self.did = did
        # {\"creator\":\"did:mychain:93496ea09e022cdf21a0df15d2bfb3102985eb64016af5fb14a2e24a9ab1a73a\",\"created\":\"2019-08-08T13:52:02+0800\",\"service\":[{\"id\":\"didauth-1\",\"serviceEndpoint\":\"auth.mydid.agent.com\",\"type\":\"DidAuthService\"},{\"id\":\"vcrepository-1\",\"serviceEndpoint\":\"auth.mydid.agent.com\",\"type\":\"VerifiableClaimRepository\"},{\"id\":\"oneBid-1\",\"serviceEndpoint\":\"[{\\\"uid\\\":\\\"z50Uid\\\",\\\"tenancyId\\\":\\\"z50\\\",\\\"version\\\":\\\"v1.0\\\",\\\"releated\\\":{\\\"releatedHash\\\":\\\"hash(关联结果)\\\",\\\"releatedInfo\\\":\\\"AES(核身过程)+version\\\"}}]\",\"type\":\"oneBid\"}],\"id\":\"did:mychain:4145aac009d5e94ad68c16bd56af0bf65a0437b49046529a142de8b385ee71c1\",\"publicKey\":[{\"controller\":\"did:mychain:93496ea09e022cdf21a0df15d2bfb3102985eb64016af5fb14a2e24a9ab1a73a\",\"id\":\"keys-1\",\"publicKey\":\"f498ee29763dd24cd8324c6e861d82ef558e7d6dac10be8b99f5c33934d5cc4f5ff49861a235c7fd4c99a99265d777e657e747164e5549195003878c7222bdcc\",\"type\":\"Secp256k1VerificationKey2018\"}],\"@context\":\"https://w3id.org/did/v1\",\"updated\":\"2019-08-08T13:52:02+0800\",\"authentication\":[\"keys-1\"]}"])
        self.diddoc = diddoc
        # 使用私钥对消息中其他字段进行签名
        self.request_signature = request_signature
        # 场景码，找dis工作人员进行分配
        self.biz_code = biz_code

    def validate(self):
        self.validate_required(self.did, 'did')
        self.validate_required(self.diddoc, 'diddoc')
        self.validate_required(self.request_signature, 'request_signature')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.did is not None:
            result['did'] = self.did
        if self.diddoc is not None:
            result['diddoc'] = self.diddoc
        if self.request_signature is not None:
            result['request_signature'] = self.request_signature
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('diddoc') is not None:
            self.diddoc = m.get('diddoc')
        if m.get('request_signature') is not None:
            self.request_signature = m.get('request_signature')
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        return self


class InitDidAdddidHashResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        hash: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 待签名的交易hash
        self.hash = hash

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.hash is not None:
            result['hash'] = self.hash
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('hash') is not None:
            self.hash = m.get('hash')
        return self


class StartDidAdddidExecuteRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        did: str = None,
        operation: str = None,
        payload: DidAddDoc = None,
        request_signature: str = None,
        biz_code: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # did
        self.did = did
        # 操作描述
        self.operation = operation
        # 操作的具体参数
        self.payload = payload
        # 使用私钥对消息中其他字段进行签名
        self.request_signature = request_signature
        # 场景码，找dis工作人员进行分配
        self.biz_code = biz_code

    def validate(self):
        self.validate_required(self.did, 'did')
        self.validate_required(self.operation, 'operation')
        self.validate_required(self.payload, 'payload')
        if self.payload:
            self.payload.validate()
        self.validate_required(self.request_signature, 'request_signature')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.did is not None:
            result['did'] = self.did
        if self.operation is not None:
            result['operation'] = self.operation
        if self.payload is not None:
            result['payload'] = self.payload.to_map()
        if self.request_signature is not None:
            result['request_signature'] = self.request_signature
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('operation') is not None:
            self.operation = m.get('operation')
        if m.get('payload') is not None:
            temp_model = DidAddDoc()
            self.payload = temp_model.from_map(m['payload'])
        if m.get('request_signature') is not None:
            self.request_signature = m.get('request_signature')
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        return self


class StartDidAdddidExecuteResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class InitDidAddvcHashRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        content_hash: str = None,
        did: str = None,
        issuer_hash: str = None,
        request_signature: str = None,
        status: str = None,
        subject_hash: str = None,
        vcid: str = None,
        biz_code: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 可验证声明hash
        self.content_hash = content_hash
        # 发起该交易的did
        self.did = did
        # issuer did对应的hash
        self.issuer_hash = issuer_hash
        # 使用私钥对消息中其他字段进行签名
        self.request_signature = request_signature
        # valid or invalid
        self.status = status
        # subject的did计算的hash
        self.subject_hash = subject_hash
        # 可验证声明id
        self.vcid = vcid
        # 场景码，找dis工作人员进行分配
        self.biz_code = biz_code

    def validate(self):
        self.validate_required(self.content_hash, 'content_hash')
        self.validate_required(self.did, 'did')
        self.validate_required(self.issuer_hash, 'issuer_hash')
        self.validate_required(self.request_signature, 'request_signature')
        self.validate_required(self.status, 'status')
        self.validate_required(self.subject_hash, 'subject_hash')
        self.validate_required(self.vcid, 'vcid')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.content_hash is not None:
            result['content_hash'] = self.content_hash
        if self.did is not None:
            result['did'] = self.did
        if self.issuer_hash is not None:
            result['issuer_hash'] = self.issuer_hash
        if self.request_signature is not None:
            result['request_signature'] = self.request_signature
        if self.status is not None:
            result['status'] = self.status
        if self.subject_hash is not None:
            result['subject_hash'] = self.subject_hash
        if self.vcid is not None:
            result['vcid'] = self.vcid
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('content_hash') is not None:
            self.content_hash = m.get('content_hash')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('issuer_hash') is not None:
            self.issuer_hash = m.get('issuer_hash')
        if m.get('request_signature') is not None:
            self.request_signature = m.get('request_signature')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('subject_hash') is not None:
            self.subject_hash = m.get('subject_hash')
        if m.get('vcid') is not None:
            self.vcid = m.get('vcid')
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        return self


class InitDidAddvcHashResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        hash: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 添加vc的交易hash值
        self.hash = hash

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.hash is not None:
            result['hash'] = self.hash
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('hash') is not None:
            self.hash = m.get('hash')
        return self


class StartDidAddvcExecuteRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        did: str = None,
        operation: str = None,
        payload: AddVC = None,
        request_signature: str = None,
        biz_code: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 发起该交易的did
        self.did = did
        # 操作名
        self.operation = operation
        # 创建VC具体参数
        self.payload = payload
        # 使用私钥对消息中其他字段进行签名
        self.request_signature = request_signature
        # 场景码，找dis工作人员进行分配
        self.biz_code = biz_code

    def validate(self):
        self.validate_required(self.did, 'did')
        self.validate_required(self.operation, 'operation')
        self.validate_required(self.payload, 'payload')
        if self.payload:
            self.payload.validate()
        self.validate_required(self.request_signature, 'request_signature')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.did is not None:
            result['did'] = self.did
        if self.operation is not None:
            result['operation'] = self.operation
        if self.payload is not None:
            result['payload'] = self.payload.to_map()
        if self.request_signature is not None:
            result['request_signature'] = self.request_signature
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('operation') is not None:
            self.operation = m.get('operation')
        if m.get('payload') is not None:
            temp_model = AddVC()
            self.payload = temp_model.from_map(m['payload'])
        if m.get('request_signature') is not None:
            self.request_signature = m.get('request_signature')
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        return self


class StartDidAddvcExecuteResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class InitDidUpdatevcstatusHashRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        did: str = None,
        request_signature: str = None,
        status: str = None,
        vcid: str = None,
        biz_code: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 交易发起者did
        self.did = did
        # 使用私钥对消息中其他字段进行签名
        self.request_signature = request_signature
        # valid or invalid
        self.status = status
        # 可验证声明id
        self.vcid = vcid
        # 场景码，找dis工作人员进行分配
        self.biz_code = biz_code

    def validate(self):
        self.validate_required(self.did, 'did')
        self.validate_required(self.request_signature, 'request_signature')
        self.validate_required(self.status, 'status')
        self.validate_required(self.vcid, 'vcid')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.did is not None:
            result['did'] = self.did
        if self.request_signature is not None:
            result['request_signature'] = self.request_signature
        if self.status is not None:
            result['status'] = self.status
        if self.vcid is not None:
            result['vcid'] = self.vcid
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('request_signature') is not None:
            self.request_signature = m.get('request_signature')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('vcid') is not None:
            self.vcid = m.get('vcid')
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        return self


class InitDidUpdatevcstatusHashResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        hash: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 交易hash
        self.hash = hash

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.hash is not None:
            result['hash'] = self.hash
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('hash') is not None:
            self.hash = m.get('hash')
        return self


class StartDidUpdatevcstatusExecuteRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        did: str = None,
        request_signature: str = None,
        signature: str = None,
        status: str = None,
        vcid: str = None,
        biz_code: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 交易发起者did
        self.did = did
        # 使用私钥对消息中其他字段进行签名
        self.request_signature = request_signature
        # 交易hash的签名
        self.signature = signature
        # valid or invalid
        self.status = status
        # 可验证声明id
        self.vcid = vcid
        # 场景码，找dis工作人员进行分配
        self.biz_code = biz_code

    def validate(self):
        self.validate_required(self.did, 'did')
        self.validate_required(self.request_signature, 'request_signature')
        self.validate_required(self.signature, 'signature')
        self.validate_required(self.status, 'status')
        self.validate_required(self.vcid, 'vcid')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.did is not None:
            result['did'] = self.did
        if self.request_signature is not None:
            result['request_signature'] = self.request_signature
        if self.signature is not None:
            result['signature'] = self.signature
        if self.status is not None:
            result['status'] = self.status
        if self.vcid is not None:
            result['vcid'] = self.vcid
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('request_signature') is not None:
            self.request_signature = m.get('request_signature')
        if m.get('signature') is not None:
            self.signature = m.get('signature')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('vcid') is not None:
            self.vcid = m.get('vcid')
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        return self


class StartDidUpdatevcstatusExecuteResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class InitDidUpdatedidHashRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        did: str = None,
        doc: str = None,
        request_signature: str = None,
        biz_code: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 发起者did
        self.did = did
        # did doc
        self.doc = doc
        # 使用私钥对消息中其他字段进行签名
        self.request_signature = request_signature
        # 场景码，找dis工作人员进行分配
        self.biz_code = biz_code

    def validate(self):
        self.validate_required(self.did, 'did')
        self.validate_required(self.doc, 'doc')
        self.validate_required(self.request_signature, 'request_signature')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.did is not None:
            result['did'] = self.did
        if self.doc is not None:
            result['doc'] = self.doc
        if self.request_signature is not None:
            result['request_signature'] = self.request_signature
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('doc') is not None:
            self.doc = m.get('doc')
        if m.get('request_signature') is not None:
            self.request_signature = m.get('request_signature')
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        return self


class InitDidUpdatedidHashResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        hash: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 交易hash
        self.hash = hash

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.hash is not None:
            result['hash'] = self.hash
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('hash') is not None:
            self.hash = m.get('hash')
        return self


class StartDidUpdatedidExecuteRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        did: str = None,
        doc: str = None,
        request_signature: str = None,
        signature: str = None,
        biz_code: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # did
        self.did = did
        # did doc
        self.doc = doc
        # 使用私钥对消息中其他字段进行签名
        self.request_signature = request_signature
        # 交易hash签名
        self.signature = signature
        # 场景码，找dis工作人员进行分配
        self.biz_code = biz_code

    def validate(self):
        self.validate_required(self.did, 'did')
        self.validate_required(self.doc, 'doc')
        self.validate_required(self.request_signature, 'request_signature')
        self.validate_required(self.signature, 'signature')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.did is not None:
            result['did'] = self.did
        if self.doc is not None:
            result['doc'] = self.doc
        if self.request_signature is not None:
            result['request_signature'] = self.request_signature
        if self.signature is not None:
            result['signature'] = self.signature
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('doc') is not None:
            self.doc = m.get('doc')
        if m.get('request_signature') is not None:
            self.request_signature = m.get('request_signature')
        if m.get('signature') is not None:
            self.signature = m.get('signature')
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        return self


class StartDidUpdatedidExecuteResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class QueryDidDiddocDirectRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        did: str = None,
        query_did: str = None,
        request_signature: str = None,
        biz_code: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 发起者did
        self.did = did
        # 待查询did
        self.query_did = query_did
        # 请求中其他字段的签名
        self.request_signature = request_signature
        # 场景码，找dis工作人员进行分配
        self.biz_code = biz_code

    def validate(self):
        self.validate_required(self.did, 'did')
        self.validate_required(self.query_did, 'query_did')
        self.validate_required(self.request_signature, 'request_signature')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.did is not None:
            result['did'] = self.did
        if self.query_did is not None:
            result['query_did'] = self.query_did
        if self.request_signature is not None:
            result['request_signature'] = self.request_signature
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('query_did') is not None:
            self.query_did = m.get('query_did')
        if m.get('request_signature') is not None:
            self.request_signature = m.get('request_signature')
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        return self


class QueryDidDiddocDirectResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        doc: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # did doc
        self.doc = doc

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.doc is not None:
            result['doc'] = self.doc
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('doc') is not None:
            self.doc = m.get('doc')
        return self


class QueryDidVcDirectRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        did: str = None,
        request_signature: str = None,
        vcid: str = None,
        biz_code: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 发起者did
        self.did = did
        # 请求中其他字段的签名
        self.request_signature = request_signature
        # 可验证声明id
        self.vcid = vcid
        # 场景码，找dis工作人员进行分配
        self.biz_code = biz_code

    def validate(self):
        self.validate_required(self.did, 'did')
        self.validate_required(self.request_signature, 'request_signature')
        self.validate_required(self.vcid, 'vcid')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.did is not None:
            result['did'] = self.did
        if self.request_signature is not None:
            result['request_signature'] = self.request_signature
        if self.vcid is not None:
            result['vcid'] = self.vcid
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('request_signature') is not None:
            self.request_signature = m.get('request_signature')
        if m.get('vcid') is not None:
            self.vcid = m.get('vcid')
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        return self


class QueryDidVcDirectResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        content_hash: str = None,
        status: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # vc内容hash值
        self.content_hash = content_hash
        # vc的状态
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.content_hash is not None:
            result['content_hash'] = self.content_hash
        if self.status is not None:
            result['status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('content_hash') is not None:
            self.content_hash = m.get('content_hash')
        if m.get('status') is not None:
            self.status = m.get('status')
        return self


class CreateDidIdentityPersonRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        extension_info: str = None,
        public_key: str = None,
        recovery_key: str = None,
        user_id: str = None,
        user_name: str = None,
        biz_code: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 扩展字段
        self.extension_info = extension_info
        # 公钥
        self.public_key = public_key
        # 恢复公钥
        self.recovery_key = recovery_key
        # 用户id
        self.user_id = user_id
        # 用户名称
        self.user_name = user_name
        # 场景码，找dis工作人员进行分配
        self.biz_code = biz_code

    def validate(self):
        self.validate_required(self.public_key, 'public_key')
        self.validate_required(self.recovery_key, 'recovery_key')
        self.validate_required(self.user_id, 'user_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.extension_info is not None:
            result['extension_info'] = self.extension_info
        if self.public_key is not None:
            result['public_key'] = self.public_key
        if self.recovery_key is not None:
            result['recovery_key'] = self.recovery_key
        if self.user_id is not None:
            result['user_id'] = self.user_id
        if self.user_name is not None:
            result['user_name'] = self.user_name
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('extension_info') is not None:
            self.extension_info = m.get('extension_info')
        if m.get('public_key') is not None:
            self.public_key = m.get('public_key')
        if m.get('recovery_key') is not None:
            self.recovery_key = m.get('recovery_key')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        return self


class CreateDidIdentityPersonResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        did: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # did
        self.did = did

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.did is not None:
            result['did'] = self.did
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('did') is not None:
            self.did = m.get('did')
        return self


class UpdateDidUpdatedidAuthkeyRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        did: str = None,
        operation: str = None,
        payload: UpdateDidAuthPayload = None,
        request_signature: str = None,
        biz_code: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # did描述符
        self.did = did
        # 具体操作名
        self.operation = operation
        # 更新Auth 操作具体描述
        self.payload = payload
        # sig(hash(operation+payload+did))  使用sdk生成方式
        self.request_signature = request_signature
        # 场景码，找dis工作人员进行分配
        self.biz_code = biz_code

    def validate(self):
        self.validate_required(self.did, 'did')
        self.validate_required(self.operation, 'operation')
        self.validate_required(self.payload, 'payload')
        if self.payload:
            self.payload.validate()
        self.validate_required(self.request_signature, 'request_signature')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.did is not None:
            result['did'] = self.did
        if self.operation is not None:
            result['operation'] = self.operation
        if self.payload is not None:
            result['payload'] = self.payload.to_map()
        if self.request_signature is not None:
            result['request_signature'] = self.request_signature
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('operation') is not None:
            self.operation = m.get('operation')
        if m.get('payload') is not None:
            temp_model = UpdateDidAuthPayload()
            self.payload = temp_model.from_map(m['payload'])
        if m.get('request_signature') is not None:
            self.request_signature = m.get('request_signature')
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        return self


class UpdateDidUpdatedidAuthkeyResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class UpdateDidUpdatedidServiceRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        did: str = None,
        operation: str = None,
        payload: UpdateDidService = None,
        request_signature: str = None,
        biz_code: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # did描述符
        self.did = did
        # 更新did service endpoint
        self.operation = operation
        # update did service的payload
        self.payload = payload
        # sig(hash(operation+payload+did)) 使用sdk生成方式
        self.request_signature = request_signature
        # 场景码，找dis工作人员进行分配
        self.biz_code = biz_code

    def validate(self):
        self.validate_required(self.did, 'did')
        self.validate_required(self.operation, 'operation')
        self.validate_required(self.payload, 'payload')
        if self.payload:
            self.payload.validate()
        self.validate_required(self.request_signature, 'request_signature')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.did is not None:
            result['did'] = self.did
        if self.operation is not None:
            result['operation'] = self.operation
        if self.payload is not None:
            result['payload'] = self.payload.to_map()
        if self.request_signature is not None:
            result['request_signature'] = self.request_signature
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('operation') is not None:
            self.operation = m.get('operation')
        if m.get('payload') is not None:
            temp_model = UpdateDidService()
            self.payload = temp_model.from_map(m['payload'])
        if m.get('request_signature') is not None:
            self.request_signature = m.get('request_signature')
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        return self


class UpdateDidUpdatedidServiceResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class AddDidUpdatedidServiceRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        did: str = None,
        operation: str = None,
        payload: UpdateDidService = None,
        request_signature: str = None,
        biz_code: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 待处理did
        self.did = did
        # 具体操作名
        self.operation = operation
        # 添加的did service info
        self.payload = payload
        # sig(hash(operation+payload+did)) 使用sdk生成方式
        self.request_signature = request_signature
        # 场景码，找dis工作人员进行分配
        self.biz_code = biz_code

    def validate(self):
        self.validate_required(self.did, 'did')
        self.validate_required(self.operation, 'operation')
        self.validate_required(self.payload, 'payload')
        if self.payload:
            self.payload.validate()
        self.validate_required(self.request_signature, 'request_signature')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.did is not None:
            result['did'] = self.did
        if self.operation is not None:
            result['operation'] = self.operation
        if self.payload is not None:
            result['payload'] = self.payload.to_map()
        if self.request_signature is not None:
            result['request_signature'] = self.request_signature
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('operation') is not None:
            self.operation = m.get('operation')
        if m.get('payload') is not None:
            temp_model = UpdateDidService()
            self.payload = temp_model.from_map(m['payload'])
        if m.get('request_signature') is not None:
            self.request_signature = m.get('request_signature')
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        return self


class AddDidUpdatedidServiceResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class DeleteDidUpdatedidServiceRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        did: str = None,
        operation: str = None,
        payload: DidDeleteService = None,
        request_signature: str = None,
        biz_code: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 待处理did
        self.did = did
        # 具体操作名
        self.operation = operation
        # 删除did service操作信息
        self.payload = payload
        # sig(hash(operation+payload+did)) 使用sdk生成方式签名
        self.request_signature = request_signature
        # 场景码，找dis工作人员进行分配
        self.biz_code = biz_code

    def validate(self):
        self.validate_required(self.did, 'did')
        self.validate_required(self.operation, 'operation')
        self.validate_required(self.payload, 'payload')
        if self.payload:
            self.payload.validate()
        self.validate_required(self.request_signature, 'request_signature')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.did is not None:
            result['did'] = self.did
        if self.operation is not None:
            result['operation'] = self.operation
        if self.payload is not None:
            result['payload'] = self.payload.to_map()
        if self.request_signature is not None:
            result['request_signature'] = self.request_signature
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('operation') is not None:
            self.operation = m.get('operation')
        if m.get('payload') is not None:
            temp_model = DidDeleteService()
            self.payload = temp_model.from_map(m['payload'])
        if m.get('request_signature') is not None:
            self.request_signature = m.get('request_signature')
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        return self


class DeleteDidUpdatedidServiceResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class UpdateDidUpdatevcStatusRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        did: str = None,
        operation: str = None,
        payload: UpdateVCStatus = None,
        request_signature: str = None,
        biz_code: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # did描述符
        self.did = did
        # 可验证声明更新
        self.operation = operation
        # 更新可验证声明状态
        self.payload = payload
        # sig(hash(operation+payload+did)) 使用sdk生成方式
        self.request_signature = request_signature
        # 场景码，找dis工作人员进行分配
        self.biz_code = biz_code

    def validate(self):
        self.validate_required(self.did, 'did')
        self.validate_required(self.operation, 'operation')
        self.validate_required(self.payload, 'payload')
        if self.payload:
            self.payload.validate()
        self.validate_required(self.request_signature, 'request_signature')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.did is not None:
            result['did'] = self.did
        if self.operation is not None:
            result['operation'] = self.operation
        if self.payload is not None:
            result['payload'] = self.payload.to_map()
        if self.request_signature is not None:
            result['request_signature'] = self.request_signature
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('operation') is not None:
            self.operation = m.get('operation')
        if m.get('payload') is not None:
            temp_model = UpdateVCStatus()
            self.payload = temp_model.from_map(m['payload'])
        if m.get('request_signature') is not None:
            self.request_signature = m.get('request_signature')
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        return self


class UpdateDidUpdatevcStatusResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class OpenDidResolverServiceRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        specification: str = None,
        tenant_id: str = None,
        biz_code: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 扩展字段
        self.specification = specification
        # 需要开通服务的租户id
        self.tenant_id = tenant_id
        # 场景码，找dis工作人员进行分配
        self.biz_code = biz_code

    def validate(self):
        self.validate_required(self.tenant_id, 'tenant_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.specification is not None:
            result['specification'] = self.specification
        if self.tenant_id is not None:
            result['tenant_id'] = self.tenant_id
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('specification') is not None:
            self.specification = m.get('specification')
        if m.get('tenant_id') is not None:
            self.tenant_id = m.get('tenant_id')
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        return self


class OpenDidResolverServiceResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class StopDidResolverServiceRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        specification: str = None,
        tenant_id: str = None,
        biz_code: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 扩展字段
        self.specification = specification
        # 需要关闭resolver服务的租户id
        self.tenant_id = tenant_id
        # 场景码，找dis工作人员进行分配
        self.biz_code = biz_code

    def validate(self):
        self.validate_required(self.tenant_id, 'tenant_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.specification is not None:
            result['specification'] = self.specification
        if self.tenant_id is not None:
            result['tenant_id'] = self.tenant_id
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('specification') is not None:
            self.specification = m.get('specification')
        if m.get('tenant_id') is not None:
            self.tenant_id = m.get('tenant_id')
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        return self


class StopDidResolverServiceResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class StartDidDerivedidExecuteRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        did: str = None,
        operation: str = None,
        payload: DeriveDid = None,
        request_signature: str = None,
        biz_code: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 发起该交易的根DID
        self.did = did
        # 操作名
        self.operation = operation
        # derive did的参数
        self.payload = payload
        # 使用私钥对消息中其他字段进行签名
        self.request_signature = request_signature
        # 场景码，找dis工作人员进行分配
        self.biz_code = biz_code

    def validate(self):
        self.validate_required(self.did, 'did')
        self.validate_required(self.operation, 'operation')
        self.validate_required(self.payload, 'payload')
        if self.payload:
            self.payload.validate()
        self.validate_required(self.request_signature, 'request_signature')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.did is not None:
            result['did'] = self.did
        if self.operation is not None:
            result['operation'] = self.operation
        if self.payload is not None:
            result['payload'] = self.payload.to_map()
        if self.request_signature is not None:
            result['request_signature'] = self.request_signature
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('operation') is not None:
            self.operation = m.get('operation')
        if m.get('payload') is not None:
            temp_model = DeriveDid()
            self.payload = temp_model.from_map(m['payload'])
        if m.get('request_signature') is not None:
            self.request_signature = m.get('request_signature')
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        return self


class StartDidDerivedidExecuteResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class ExecDidAccesscontrolAuthorizeRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        fromdid: str = None,
        request_signature: str = None,
        todid: str = None,
        type: List[str] = None,
        biz_code: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 发起授权的did
        self.fromdid = fromdid
        # 对其他字段的签名
        self.request_signature = request_signature
        # 被授权的did
        self.todid = todid
        # 授权的权限类型
        self.type = type
        # 场景码，找dis工作人员进行分配
        self.biz_code = biz_code

    def validate(self):
        self.validate_required(self.fromdid, 'fromdid')
        self.validate_required(self.request_signature, 'request_signature')
        self.validate_required(self.todid, 'todid')
        self.validate_required(self.type, 'type')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.fromdid is not None:
            result['fromdid'] = self.fromdid
        if self.request_signature is not None:
            result['request_signature'] = self.request_signature
        if self.todid is not None:
            result['todid'] = self.todid
        if self.type is not None:
            result['type'] = self.type
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('fromdid') is not None:
            self.fromdid = m.get('fromdid')
        if m.get('request_signature') is not None:
            self.request_signature = m.get('request_signature')
        if m.get('todid') is not None:
            self.todid = m.get('todid')
        if m.get('type') is not None:
            self.type = m.get('type')
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        return self


class ExecDidAccesscontrolAuthorizeResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class ExecDidAccesscontrolCheckRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        fromdid: str = None,
        request_signature: str = None,
        todid: str = None,
        type: List[str] = None,
        biz_code: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 发起鉴权请求的did
        self.fromdid = fromdid
        # 发起者用私钥对请求其他字段的签名
        self.request_signature = request_signature
        # 被鉴定权限的did
        self.todid = todid
        # 鉴定的权限类别
        self.type = type
        # 场景码，找dis工作人员进行分配
        self.biz_code = biz_code

    def validate(self):
        self.validate_required(self.fromdid, 'fromdid')
        self.validate_required(self.request_signature, 'request_signature')
        self.validate_required(self.todid, 'todid')
        self.validate_required(self.type, 'type')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.fromdid is not None:
            result['fromdid'] = self.fromdid
        if self.request_signature is not None:
            result['request_signature'] = self.request_signature
        if self.todid is not None:
            result['todid'] = self.todid
        if self.type is not None:
            result['type'] = self.type
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('fromdid') is not None:
            self.fromdid = m.get('fromdid')
        if m.get('request_signature') is not None:
            self.request_signature = m.get('request_signature')
        if m.get('todid') is not None:
            self.todid = m.get('todid')
        if m.get('type') is not None:
            self.type = m.get('type')
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        return self


class ExecDidAccesscontrolCheckResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class ExecDidAccesscontrolUpdateRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        fromdid: str = None,
        request_signature: str = None,
        todid: str = None,
        type: List[str] = None,
        biz_code: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 发起请求的did
        self.fromdid = fromdid
        # 发起者私钥对其他字段的签名
        self.request_signature = request_signature
        # 被更新权限的did
        self.todid = todid
        # 更新后的权限
        self.type = type
        # 场景码，找dis工作人员进行分配
        self.biz_code = biz_code

    def validate(self):
        self.validate_required(self.fromdid, 'fromdid')
        self.validate_required(self.request_signature, 'request_signature')
        self.validate_required(self.todid, 'todid')
        self.validate_required(self.type, 'type')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.fromdid is not None:
            result['fromdid'] = self.fromdid
        if self.request_signature is not None:
            result['request_signature'] = self.request_signature
        if self.todid is not None:
            result['todid'] = self.todid
        if self.type is not None:
            result['type'] = self.type
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('fromdid') is not None:
            self.fromdid = m.get('fromdid')
        if m.get('request_signature') is not None:
            self.request_signature = m.get('request_signature')
        if m.get('todid') is not None:
            self.todid = m.get('todid')
        if m.get('type') is not None:
            self.type = m.get('type')
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        return self


class ExecDidAccesscontrolUpdateResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class CreateDidIdentityIotRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        extension_info: str = None,
        public_key: str = None,
        recovery_key: str = None,
        user_id: str = None,
        user_name: str = None,
        biz_code: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 扩展字段
        self.extension_info = extension_info
        # 公钥
        self.public_key = public_key
        # 恢复秘钥
        self.recovery_key = recovery_key
        # id
        self.user_id = user_id
        # user name
        self.user_name = user_name
        # 场景码，找dis工作人员进行分配
        self.biz_code = biz_code

    def validate(self):
        self.validate_required(self.public_key, 'public_key')
        self.validate_required(self.recovery_key, 'recovery_key')
        self.validate_required(self.user_id, 'user_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.extension_info is not None:
            result['extension_info'] = self.extension_info
        if self.public_key is not None:
            result['public_key'] = self.public_key
        if self.recovery_key is not None:
            result['recovery_key'] = self.recovery_key
        if self.user_id is not None:
            result['user_id'] = self.user_id
        if self.user_name is not None:
            result['user_name'] = self.user_name
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('extension_info') is not None:
            self.extension_info = m.get('extension_info')
        if m.get('public_key') is not None:
            self.public_key = m.get('public_key')
        if m.get('recovery_key') is not None:
            self.recovery_key = m.get('recovery_key')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        return self


class CreateDidIdentityIotResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        did: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 返回创建的did
        self.did = did

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.did is not None:
            result['did'] = self.did
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('did') is not None:
            self.did = m.get('did')
        return self


class ExecDidServicetypeCreateRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        did: str = None,
        operation: str = None,
        payload: str = None,
        request_signature: str = None,
        biz_code: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 发起该交易的did
        self.did = did
        # 创建服务类型
        self.operation = operation
        # 新增服务类型的定义Json 字符串
        # {
        # "@context": {
        # "version": 1,
        # "id": "{ServiceTypeName}", //<- 50 Byte
        # "type": "ServiceType", //<- 固定值
        # "serviceInput": "", //<- 入参描述
        # "serviceOutput": "", //<- 出参描述
        # "accessMode": "", //<- 访问模式
        # "description": "" //<- 服务描述
        # },
        # "controller": "{Creator`s did}" // <- 创建者did，只有该创建者才能修改服务类型定义
        # }
        self.payload = payload
        # 使用私钥对消息中其他字段进行签名
        self.request_signature = request_signature
        # 场景码，找dis工作人员进行分配
        self.biz_code = biz_code

    def validate(self):
        self.validate_required(self.did, 'did')
        self.validate_required(self.operation, 'operation')
        self.validate_required(self.payload, 'payload')
        self.validate_required(self.request_signature, 'request_signature')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.did is not None:
            result['did'] = self.did
        if self.operation is not None:
            result['operation'] = self.operation
        if self.payload is not None:
            result['payload'] = self.payload
        if self.request_signature is not None:
            result['request_signature'] = self.request_signature
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('operation') is not None:
            self.operation = m.get('operation')
        if m.get('payload') is not None:
            self.payload = m.get('payload')
        if m.get('request_signature') is not None:
            self.request_signature = m.get('request_signature')
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        return self


class ExecDidServicetypeCreateResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        service_type: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 服务注册成功之后返回注册的服务类型名
        self.service_type = service_type

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.service_type is not None:
            result['service_type'] = self.service_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('service_type') is not None:
            self.service_type = m.get('service_type')
        return self


class CreateDidIdentityCommonRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        biz_code: str = None,
        extension_info: str = None,
        public_key: str = None,
        recovery_key: str = None,
        user_id: str = None,
        user_name: str = None,
        entity_type: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 场景码，找dis工作人员进行分配
        self.biz_code = biz_code
        # 扩展字段
        self.extension_info = extension_info
        # 公钥
        self.public_key = public_key
        # 恢复公钥
        self.recovery_key = recovery_key
        # user_id
        self.user_id = user_id
        # 名称
        self.user_name = user_name
        # 通用DID类型 Person Corporate Devices Data Common
        self.entity_type = entity_type

    def validate(self):
        self.validate_required(self.public_key, 'public_key')
        self.validate_required(self.recovery_key, 'recovery_key')
        self.validate_required(self.user_id, 'user_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        if self.extension_info is not None:
            result['extension_info'] = self.extension_info
        if self.public_key is not None:
            result['public_key'] = self.public_key
        if self.recovery_key is not None:
            result['recovery_key'] = self.recovery_key
        if self.user_id is not None:
            result['user_id'] = self.user_id
        if self.user_name is not None:
            result['user_name'] = self.user_name
        if self.entity_type is not None:
            result['entity_type'] = self.entity_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        if m.get('extension_info') is not None:
            self.extension_info = m.get('extension_info')
        if m.get('public_key') is not None:
            self.public_key = m.get('public_key')
        if m.get('recovery_key') is not None:
            self.recovery_key = m.get('recovery_key')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        if m.get('entity_type') is not None:
            self.entity_type = m.get('entity_type')
        return self


class CreateDidIdentityCommonResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        did: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # did
        self.did = did

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.did is not None:
            result['did'] = self.did
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('did') is not None:
            self.did = m.get('did')
        return self


class ConfirmVcVcrepoVctransmitRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        did: str = None,
        operation: str = None,
        payload: List[VcTransmitCnf] = None,
        signature: str = None,
        biz_code: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 请求发起者did
        self.did = did
        # vc_transmit_cnf
        self.operation = operation
        # VC传输确认请求参数
        self.payload = payload
        # 签名
        self.signature = signature
        # 场景码，找dis工作人员进行分配
        self.biz_code = biz_code

    def validate(self):
        self.validate_required(self.did, 'did')
        self.validate_required(self.operation, 'operation')
        self.validate_required(self.payload, 'payload')
        if self.payload:
            for k in self.payload:
                if k:
                    k.validate()
        self.validate_required(self.signature, 'signature')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.did is not None:
            result['did'] = self.did
        if self.operation is not None:
            result['operation'] = self.operation
        result['payload'] = []
        if self.payload is not None:
            for k in self.payload:
                result['payload'].append(k.to_map() if k else None)
        if self.signature is not None:
            result['signature'] = self.signature
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('operation') is not None:
            self.operation = m.get('operation')
        self.payload = []
        if m.get('payload') is not None:
            for k in m.get('payload'):
                temp_model = VcTransmitCnf()
                self.payload.append(temp_model.from_map(k))
        if m.get('signature') is not None:
            self.signature = m.get('signature')
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        return self


class ConfirmVcVcrepoVctransmitResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: List[VcTransmitResult] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 传输结果
        self.result = result

    def validate(self):
        if self.result:
            for k in self.result:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['result'] = []
        if self.result is not None:
            for k in self.result:
                result['result'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.result = []
        if m.get('result') is not None:
            for k in m.get('result'):
                temp_model = VcTransmitResult()
                self.result.append(temp_model.from_map(k))
        return self


class UpdateDidUpdatedidPubkeyRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        biz_code: str = None,
        did: str = None,
        operation: str = None,
        public_key: str = None,
        request_signature: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 场景码，找dis工作人员进行分配
        self.biz_code = biz_code
        # did描述符
        self.did = did
        # 具体操作名
        self.operation = operation
        # 需要更新的新的公钥，仅在未完成上链的DID 才能做这个更新
        self.public_key = public_key
        # sig(hash(operation+payload+did)) 使用sdk生成方式
        self.request_signature = request_signature

    def validate(self):
        self.validate_required(self.did, 'did')
        self.validate_required(self.operation, 'operation')
        self.validate_required(self.public_key, 'public_key')
        self.validate_required(self.request_signature, 'request_signature')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        if self.did is not None:
            result['did'] = self.did
        if self.operation is not None:
            result['operation'] = self.operation
        if self.public_key is not None:
            result['public_key'] = self.public_key
        if self.request_signature is not None:
            result['request_signature'] = self.request_signature
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('operation') is not None:
            self.operation = m.get('operation')
        if m.get('public_key') is not None:
            self.public_key = m.get('public_key')
        if m.get('request_signature') is not None:
            self.request_signature = m.get('request_signature')
        return self


class UpdateDidUpdatedidPubkeyResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class AddDidUpdatedidServicelistRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        biz_code: str = None,
        did: str = None,
        operation: str = None,
        payload: UpdateDidServiceList = None,
        request_signature: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 场景码，找dis工作人员进行分配
        self.biz_code = biz_code
        # 待处理did
        self.did = did
        # 具体操作名
        self.operation = operation
        # 更新ServiceList
        self.payload = payload
        # sig(hash(operation+payload+did)) 使用sdk生成方式
        self.request_signature = request_signature

    def validate(self):
        self.validate_required(self.did, 'did')
        self.validate_required(self.operation, 'operation')
        self.validate_required(self.payload, 'payload')
        if self.payload:
            self.payload.validate()
        self.validate_required(self.request_signature, 'request_signature')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.biz_code is not None:
            result['biz_code'] = self.biz_code
        if self.did is not None:
            result['did'] = self.did
        if self.operation is not None:
            result['operation'] = self.operation
        if self.payload is not None:
            result['payload'] = self.payload.to_map()
        if self.request_signature is not None:
            result['request_signature'] = self.request_signature
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('biz_code') is not None:
            self.biz_code = m.get('biz_code')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('operation') is not None:
            self.operation = m.get('operation')
        if m.get('payload') is not None:
            temp_model = UpdateDidServiceList()
            self.payload = temp_model.from_map(m['payload'])
        if m.get('request_signature') is not None:
            self.request_signature = m.get('request_signature')
        return self


class AddDidUpdatedidServicelistResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class StartVcVcrepositoryWriteRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        auth_access_key_list: List[str] = None,
        auth_did_list: List[str] = None,
        did: str = None,
        operation: str = None,
        signature: str = None,
        vc_content: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 指定情况跟随 auth_did_list，如果auth_did_list不指定，则此字段无需指定，否则是与auth_did_list长度相同，并且对应auth_did_list的did的公钥加密AES密钥的结果
        self.auth_access_key_list = auth_access_key_list
        # 配置此列表，则说明需要并且控制访问权限，此列表为初始配置的did名单，拥有对此颁发证书的读取权限。 如果不配置此列表，则默认将明文存储此证书，任何did都可以访问此证书声明内容。
        self.auth_did_list = auth_did_list
        # 写入VC数据的did，通常为证书VC的颁发者issuer的did。
        self.did = did
        # 对当前VC Repository操作的描述，signature字段需要包含此操作的描述，最终会记录在VC Repository连接的链上，可追溯此operation操作记录。
        self.operation = operation
        # 写数据的did对应使用公钥做的数据签名，确保数据准确性。
        self.signature = signature
        # 可验证声明的完整声明，其中claim字段可以已被加密保护 {"content":{"verion":"0.7.0","issuer":"xxxx","subject":"xxxx","expire":1530735444,"issucanceDate":1530735000,"id":"XXXX","claim":{//用户自定义，可加密处理},"status":{"type":"XXXX","id":"XXXXX"}},"proof":{"type":"ecdsa","created":"2018-06-18T21:19:10Z","verificationMethod":"XXXX","signatureValue":"XXXXX"}}
        self.vc_content = vc_content

    def validate(self):
        self.validate_required(self.did, 'did')
        self.validate_required(self.operation, 'operation')
        self.validate_required(self.signature, 'signature')
        self.validate_required(self.vc_content, 'vc_content')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.auth_access_key_list is not None:
            result['auth_access_key_list'] = self.auth_access_key_list
        if self.auth_did_list is not None:
            result['auth_did_list'] = self.auth_did_list
        if self.did is not None:
            result['did'] = self.did
        if self.operation is not None:
            result['operation'] = self.operation
        if self.signature is not None:
            result['signature'] = self.signature
        if self.vc_content is not None:
            result['vc_content'] = self.vc_content
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('auth_access_key_list') is not None:
            self.auth_access_key_list = m.get('auth_access_key_list')
        if m.get('auth_did_list') is not None:
            self.auth_did_list = m.get('auth_did_list')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('operation') is not None:
            self.operation = m.get('operation')
        if m.get('signature') is not None:
            self.signature = m.get('signature')
        if m.get('vc_content') is not None:
            self.vc_content = m.get('vc_content')
        return self


class StartVcVcrepositoryWriteResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: bool = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # true:操作成功，false:操作失败
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.result is not None:
            result['result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('result') is not None:
            self.result = m.get('result')
        return self


class StartVcVcrepositoryReadRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        did: str = None,
        operation: str = None,
        signature: str = None,
        verifiable_claim_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 提交请求的did，通常是在授权列表中的did才具有读取权限。
        self.did = did
        # 对当前VC Repository操作的描述，signature字段需要包含此操作的描述，最终会记录在VC Repository连接的链上，可追溯此operation操作记录。
        self.operation = operation
        # 读数据请求的did对应使用公钥做的数据签名，确保数据准确性，签名包含operation字段，会一起上链。
        self.signature = signature
        # 目标读取VC的唯一id标识。
        self.verifiable_claim_id = verifiable_claim_id

    def validate(self):
        self.validate_required(self.did, 'did')
        self.validate_required(self.operation, 'operation')
        self.validate_required(self.signature, 'signature')
        self.validate_required(self.verifiable_claim_id, 'verifiable_claim_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.did is not None:
            result['did'] = self.did
        if self.operation is not None:
            result['operation'] = self.operation
        if self.signature is not None:
            result['signature'] = self.signature
        if self.verifiable_claim_id is not None:
            result['verifiable_claim_id'] = self.verifiable_claim_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('operation') is not None:
            self.operation = m.get('operation')
        if m.get('signature') is not None:
            self.signature = m.get('signature')
        if m.get('verifiable_claim_id') is not None:
            self.verifiable_claim_id = m.get('verifiable_claim_id')
        return self


class StartVcVcrepositoryReadResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        auth_access_key: str = None,
        verifiable_claim_content: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 密文加密16进制表示的字符串，是请求方did对应的didDoc中的公钥加密AES密钥的结果，使用标准信封加密的方式，AES密钥用于解密verifiable_claim_content的claim字段，如果此auth_access_key是空字符串，则说明verifiable_claim_content的内容是明文。
        self.auth_access_key = auth_access_key
        # 可验证声明的完整声明 {"content":{"verion":"0.7.0","issuer":"xxxx","subject":"xxxx","expire":1530735444,"issucanceDate":1530735000,"id":"XXXX","claim":{//用户自定义，可能为密文},"status":{"type":"XXXX","id":"XXXXX"}},"proof":{"type":"ecdsa","created":"2018-06-18T21:19:10Z","verificationMethod":"XXXX","signatureValue":"XXXXX"}}
        self.verifiable_claim_content = verifiable_claim_content

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.auth_access_key is not None:
            result['auth_access_key'] = self.auth_access_key
        if self.verifiable_claim_content is not None:
            result['verifiable_claim_content'] = self.verifiable_claim_content
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('auth_access_key') is not None:
            self.auth_access_key = m.get('auth_access_key')
        if m.get('verifiable_claim_content') is not None:
            self.verifiable_claim_content = m.get('verifiable_claim_content')
        return self


class StartVcVcrepositoryAuthRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        auth_access_key_list: List[str] = None,
        auth_did_list: List[str] = None,
        did: str = None,
        operation: str = None,
        signature: str = None,
        verifiable_claim_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 指定情况跟随 auth_did_list，如果auth_did_list不指定，则此字段无需指定，否则是与auth_did_list长度相同，并且对应auth_did_list的did的公钥加密AES密钥的结果。
        self.auth_access_key_list = auth_access_key_list
        # 本次追加授权的did列表
        self.auth_did_list = auth_did_list
        # 提交请求的did，通常是目标VC的subject did，也就是VC的owner。
        self.did = did
        # 对当前VC Repository操作的描述，signature字段需要包含此操作的描述，最终会记录在VC Repository连接的链上，可追溯此operation操作记录。
        self.operation = operation
        # 读数据请求的did对应使用公钥做的数据签名，确保数据准确性，签名包含operation字段，会一起上链。
        self.signature = signature
        # 目标VC的唯一id标识。
        self.verifiable_claim_id = verifiable_claim_id

    def validate(self):
        self.validate_required(self.auth_access_key_list, 'auth_access_key_list')
        self.validate_required(self.auth_did_list, 'auth_did_list')
        self.validate_required(self.did, 'did')
        self.validate_required(self.operation, 'operation')
        self.validate_required(self.signature, 'signature')
        self.validate_required(self.verifiable_claim_id, 'verifiable_claim_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.auth_access_key_list is not None:
            result['auth_access_key_list'] = self.auth_access_key_list
        if self.auth_did_list is not None:
            result['auth_did_list'] = self.auth_did_list
        if self.did is not None:
            result['did'] = self.did
        if self.operation is not None:
            result['operation'] = self.operation
        if self.signature is not None:
            result['signature'] = self.signature
        if self.verifiable_claim_id is not None:
            result['verifiable_claim_id'] = self.verifiable_claim_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('auth_access_key_list') is not None:
            self.auth_access_key_list = m.get('auth_access_key_list')
        if m.get('auth_did_list') is not None:
            self.auth_did_list = m.get('auth_did_list')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('operation') is not None:
            self.operation = m.get('operation')
        if m.get('signature') is not None:
            self.signature = m.get('signature')
        if m.get('verifiable_claim_id') is not None:
            self.verifiable_claim_id = m.get('verifiable_claim_id')
        return self


class StartVcVcrepositoryAuthResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: bool = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # true：操作成功，false：操作失败
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.result is not None:
            result['result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('result') is not None:
            self.result = m.get('result')
        return self


class StartVcVcrepoUserRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        did: str = None,
        operation: str = None,
        payload: VcUserRegisterPayload = None,
        signature: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 用户did标示
        self.did = did
        # 操作缩写
        self.operation = operation
        # 注册用户实际参数
        self.payload = payload
        # 用户使用私钥对参数进行签名
        self.signature = signature

    def validate(self):
        self.validate_required(self.did, 'did')
        self.validate_required(self.operation, 'operation')
        self.validate_required(self.payload, 'payload')
        if self.payload:
            self.payload.validate()
        self.validate_required(self.signature, 'signature')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.did is not None:
            result['did'] = self.did
        if self.operation is not None:
            result['operation'] = self.operation
        if self.payload is not None:
            result['payload'] = self.payload.to_map()
        if self.signature is not None:
            result['signature'] = self.signature
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('operation') is not None:
            self.operation = m.get('operation')
        if m.get('payload') is not None:
            temp_model = VcUserRegisterPayload()
            self.payload = temp_model.from_map(m['payload'])
        if m.get('signature') is not None:
            self.signature = m.get('signature')
        return self


class StartVcVcrepoUserResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class UpdateVcVcrepoUserRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        did: str = None,
        operation: str = None,
        payload: VcUserRegisterPayload = None,
        signature: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 用户did标示
        self.did = did
        # 操作缩写
        self.operation = operation
        # 更新的user信息
        self.payload = payload
        # 用户使用私钥对参数进行签名
        self.signature = signature

    def validate(self):
        self.validate_required(self.did, 'did')
        self.validate_required(self.operation, 'operation')
        self.validate_required(self.payload, 'payload')
        if self.payload:
            self.payload.validate()
        self.validate_required(self.signature, 'signature')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.did is not None:
            result['did'] = self.did
        if self.operation is not None:
            result['operation'] = self.operation
        if self.payload is not None:
            result['payload'] = self.payload.to_map()
        if self.signature is not None:
            result['signature'] = self.signature
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('operation') is not None:
            self.operation = m.get('operation')
        if m.get('payload') is not None:
            temp_model = VcUserRegisterPayload()
            self.payload = temp_model.from_map(m['payload'])
        if m.get('signature') is not None:
            self.signature = m.get('signature')
        return self


class UpdateVcVcrepoUserResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class StartVcVcrepoVctransmitRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        did: str = None,
        operation: str = None,
        payload: VcTransmitPayload = None,
        signature: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 用户did标示
        self.did = did
        # 操作缩写
        self.operation = operation
        # 实际参数
        self.payload = payload
        # 用户使用私钥对参数进行签名
        self.signature = signature

    def validate(self):
        self.validate_required(self.did, 'did')
        self.validate_required(self.operation, 'operation')
        self.validate_required(self.payload, 'payload')
        if self.payload:
            self.payload.validate()
        self.validate_required(self.signature, 'signature')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.did is not None:
            result['did'] = self.did
        if self.operation is not None:
            result['operation'] = self.operation
        if self.payload is not None:
            result['payload'] = self.payload.to_map()
        if self.signature is not None:
            result['signature'] = self.signature
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('operation') is not None:
            self.operation = m.get('operation')
        if m.get('payload') is not None:
            temp_model = VcTransmitPayload()
            self.payload = temp_model.from_map(m['payload'])
        if m.get('signature') is not None:
            self.signature = m.get('signature')
        return self


class StartVcVcrepoVctransmitResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        result: List[VcTransmitResult] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 具体传输结果
        self.result = result

    def validate(self):
        if self.result:
            for k in self.result:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['result'] = []
        if self.result is not None:
            for k in self.result:
                result['result'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.result = []
        if m.get('result') is not None:
            for k in m.get('result'):
                temp_model = VcTransmitResult()
                self.result.append(temp_model.from_map(k))
        return self


class StartVcVcrepoControlleradduserRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        controller: str = None,
        operation: str = None,
        payload: VcControllerAddUserRegisterPayload = None,
        signature: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # controller did标示
        self.controller = controller
        # 操作缩写
        self.operation = operation
        # 实际参数
        self.payload = payload
        # controller使用私钥对参数进行签名
        self.signature = signature

    def validate(self):
        self.validate_required(self.controller, 'controller')
        self.validate_required(self.operation, 'operation')
        self.validate_required(self.payload, 'payload')
        if self.payload:
            self.payload.validate()
        self.validate_required(self.signature, 'signature')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.controller is not None:
            result['controller'] = self.controller
        if self.operation is not None:
            result['operation'] = self.operation
        if self.payload is not None:
            result['payload'] = self.payload.to_map()
        if self.signature is not None:
            result['signature'] = self.signature
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('controller') is not None:
            self.controller = m.get('controller')
        if m.get('operation') is not None:
            self.operation = m.get('operation')
        if m.get('payload') is not None:
            temp_model = VcControllerAddUserRegisterPayload()
            self.payload = temp_model.from_map(m['payload'])
        if m.get('signature') is not None:
            self.signature = m.get('signature')
        return self


class StartVcVcrepoControlleradduserResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class StartVcVcrepoVccontentsaveRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        did: str = None,
        operation: str = None,
        payload: str = None,
        signature: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 发起者did
        self.did = did
        # 操作缩写
        self.operation = operation
        # vc原文内容
        self.payload = payload
        # 用户使用私钥对参数进行签名
        self.signature = signature

    def validate(self):
        self.validate_required(self.did, 'did')
        self.validate_required(self.operation, 'operation')
        self.validate_required(self.payload, 'payload')
        self.validate_required(self.signature, 'signature')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.did is not None:
            result['did'] = self.did
        if self.operation is not None:
            result['operation'] = self.operation
        if self.payload is not None:
            result['payload'] = self.payload
        if self.signature is not None:
            result['signature'] = self.signature
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('operation') is not None:
            self.operation = m.get('operation')
        if m.get('payload') is not None:
            self.payload = m.get('payload')
        if m.get('signature') is not None:
            self.signature = m.get('signature')
        return self


class StartVcVcrepoVccontentsaveResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class StartVcRepoReadwithvcidRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        did: str = None,
        operation: str = None,
        payload: str = None,
        signature: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 发起者did
        self.did = did
        # 操作缩写
        self.operation = operation
        # vcid
        self.payload = payload
        # 用户使用私钥对参数进行签名
        self.signature = signature

    def validate(self):
        self.validate_required(self.did, 'did')
        self.validate_required(self.operation, 'operation')
        self.validate_required(self.payload, 'payload')
        self.validate_required(self.signature, 'signature')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.did is not None:
            result['did'] = self.did
        if self.operation is not None:
            result['operation'] = self.operation
        if self.payload is not None:
            result['payload'] = self.payload
        if self.signature is not None:
            result['signature'] = self.signature
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('operation') is not None:
            self.operation = m.get('operation')
        if m.get('payload') is not None:
            self.payload = m.get('payload')
        if m.get('signature') is not None:
            self.signature = m.get('signature')
        return self


class StartVcRepoReadwithvcidResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        vc: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # vc原文
        self.vc = vc

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.vc is not None:
            result['vc'] = self.vc
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('vc') is not None:
            self.vc = m.get('vc')
        return self


class InitVcVcrepoVctransmitRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        did: str = None,
        operation: str = None,
        signature: str = None,
        vc_id: str = None,
        verifiers: List[VcTransmitTargetStruct] = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # vc传输发起人did
        self.did = did
        # vc_transmit_init
        self.operation = operation
        # 使用对应的did私钥进行签名
        self.signature = signature
        # 可验证声明id
        self.vc_id = vc_id
        # 传递目标
        self.verifiers = verifiers

    def validate(self):
        self.validate_required(self.did, 'did')
        self.validate_required(self.operation, 'operation')
        self.validate_required(self.signature, 'signature')
        self.validate_required(self.vc_id, 'vc_id')
        self.validate_required(self.verifiers, 'verifiers')
        if self.verifiers:
            for k in self.verifiers:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.did is not None:
            result['did'] = self.did
        if self.operation is not None:
            result['operation'] = self.operation
        if self.signature is not None:
            result['signature'] = self.signature
        if self.vc_id is not None:
            result['vc_id'] = self.vc_id
        result['verifiers'] = []
        if self.verifiers is not None:
            for k in self.verifiers:
                result['verifiers'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('did') is not None:
            self.did = m.get('did')
        if m.get('operation') is not None:
            self.operation = m.get('operation')
        if m.get('signature') is not None:
            self.signature = m.get('signature')
        if m.get('vc_id') is not None:
            self.vc_id = m.get('vc_id')
        self.verifiers = []
        if m.get('verifiers') is not None:
            for k in m.get('verifiers'):
                temp_model = VcTransmitTargetStruct()
                self.verifiers.append(temp_model.from_map(k))
        return self


class InitVcVcrepoVctransmitResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        init_result: List[VcTransmitInitResult] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 非托管模式下传输vc初始化结果
        self.init_result = init_result

    def validate(self):
        if self.init_result:
            for k in self.init_result:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['init_result'] = []
        if self.init_result is not None:
            for k in self.init_result:
                result['init_result'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.init_result = []
        if m.get('init_result') is not None:
            for k in m.get('init_result'):
                temp_model = VcTransmitInitResult()
                self.init_result.append(temp_model.from_map(k))
        return self


class InitIdentificationFaceauthRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        auth_type: str = None,
        identity_param: IdentityParam = None,
        return_url: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 认证类型,枚举值
        # PC_AUTH、APP_AUTH
        self.auth_type = auth_type
        # 用户身份信息
        self.identity_param = identity_param
        # 认证接口回调路径，POST接口
        # 请求示例：
        # {
        # "certifyId":"0242de204e1a2c3ed6ee5e21d8a57a4c",
        # "status":3,
        # }
        self.return_url = return_url

    def validate(self):
        self.validate_required(self.auth_type, 'auth_type')
        self.validate_required(self.identity_param, 'identity_param')
        if self.identity_param:
            self.identity_param.validate()

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.auth_type is not None:
            result['auth_type'] = self.auth_type
        if self.identity_param is not None:
            result['identity_param'] = self.identity_param.to_map()
        if self.return_url is not None:
            result['return_url'] = self.return_url
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('auth_type') is not None:
            self.auth_type = m.get('auth_type')
        if m.get('identity_param') is not None:
            temp_model = IdentityParam()
            self.identity_param = temp_model.from_map(m['identity_param'])
        if m.get('return_url') is not None:
            self.return_url = m.get('return_url')
        return self


class InitIdentificationFaceauthResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        certify_id: str = None,
        certify_url: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 认证ID
        self.certify_id = certify_id
        # 二维码URL，用户支付宝扫一扫实人认证
        # 
        self.certify_url = certify_url

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.certify_id is not None:
            result['certify_id'] = self.certify_id
        if self.certify_url is not None:
            result['certify_url'] = self.certify_url
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('certify_id') is not None:
            self.certify_id = m.get('certify_id')
        if m.get('certify_url') is not None:
            self.certify_url = m.get('certify_url')
        return self


class QueryIdentificationFaceauthRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        certify_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 认证ID，用于查询认证结果
        self.certify_id = certify_id

    def validate(self):
        self.validate_required(self.certify_id, 'certify_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.certify_id is not None:
            result['certify_id'] = self.certify_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('certify_id') is not None:
            self.certify_id = m.get('certify_id')
        return self


class QueryIdentificationFaceauthResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        certify_id: str = None,
        status: int = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 认证ID
        self.certify_id = certify_id
        # 认证状态，枚举值如下：
        # 值为1，认证初始化成功
        # 值为2，认证链接获取成功
        # 值为3，认证通过
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.certify_id is not None:
            result['certify_id'] = self.certify_id
        if self.status is not None:
            result['status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('certify_id') is not None:
            self.certify_id = m.get('certify_id')
        if m.get('status') is not None:
            self.status = m.get('status')
        return self


class InitNotaryTransactionRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        customer: IdentityParam = None,
        properties: str = None,
        trustee: IdentityParam = None,
        tsr: bool = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 客户的身份信息
        self.customer = customer
        # 扩展字段
        self.properties = properties
        # 托管用户信息
        self.trustee = trustee
        # 是否使⽤用可信时间戳，默认为false
        self.tsr = tsr

    def validate(self):
        self.validate_required(self.customer, 'customer')
        if self.customer:
            self.customer.validate()
        if self.trustee:
            self.trustee.validate()

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.customer is not None:
            result['customer'] = self.customer.to_map()
        if self.properties is not None:
            result['properties'] = self.properties
        if self.trustee is not None:
            result['trustee'] = self.trustee.to_map()
        if self.tsr is not None:
            result['tsr'] = self.tsr
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('customer') is not None:
            temp_model = IdentityParam()
            self.customer = temp_model.from_map(m['customer'])
        if m.get('properties') is not None:
            self.properties = m.get('properties')
        if m.get('trustee') is not None:
            temp_model = IdentityParam()
            self.trustee = temp_model.from_map(m['trustee'])
        if m.get('tsr') is not None:
            self.tsr = m.get('tsr')
        return self


class InitNotaryTransactionResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        token: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 返回全局唯⼀的事务ID
        self.token = token

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.token is not None:
            result['token'] = self.token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('token') is not None:
            self.token = m.get('token')
        return self


class GetNotaryTransactionRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        token: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 存证事务ID
        self.token = token

    def validate(self):
        self.validate_required(self.token, 'token')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.token is not None:
            result['token'] = self.token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('token') is not None:
            self.token = m.get('token')
        return self


class GetNotaryTransactionResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        download_url: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 存证信息下载地址
        self.download_url = download_url

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.download_url is not None:
            result['download_url'] = self.download_url
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('download_url') is not None:
            self.download_url = m.get('download_url')
        return self


class SendNotaryTransactionTextRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        meta: NotaryMetaParam = None,
        notary_content: str = None,
        tsr: bool = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 存证元数据
        self.meta = meta
        # 存证内容
        self.notary_content = notary_content
        # 是否使用可信时间戳
        self.tsr = tsr

    def validate(self):
        self.validate_required(self.meta, 'meta')
        if self.meta:
            self.meta.validate()
        self.validate_required(self.notary_content, 'notary_content')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.meta is not None:
            result['meta'] = self.meta.to_map()
        if self.notary_content is not None:
            result['notary_content'] = self.notary_content
        if self.tsr is not None:
            result['tsr'] = self.tsr
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('meta') is not None:
            temp_model = NotaryMetaParam()
            self.meta = temp_model.from_map(m['meta'])
        if m.get('notary_content') is not None:
            self.notary_content = m.get('notary_content')
        if m.get('tsr') is not None:
            self.tsr = m.get('tsr')
        return self


class SendNotaryTransactionTextResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        transaction_hash: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 存证凭据txHash，通过此凭据查询存证
        self.transaction_hash = transaction_hash

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.transaction_hash is not None:
            result['transaction_hash'] = self.transaction_hash
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('transaction_hash') is not None:
            self.transaction_hash = m.get('transaction_hash')
        return self


class GetNotaryTransactionTextRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        transaction_hash: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 存证凭据
        self.transaction_hash = transaction_hash

    def validate(self):
        self.validate_required(self.transaction_hash, 'transaction_hash')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.transaction_hash is not None:
            result['transaction_hash'] = self.transaction_hash
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('transaction_hash') is not None:
            self.transaction_hash = m.get('transaction_hash')
        return self


class GetNotaryTransactionTextResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        content: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 存证文本
        self.content = content

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.content is not None:
            result['content'] = self.content
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('content') is not None:
            self.content = m.get('content')
        return self


class CreateNotaryTokenRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        customer: Identity = None,
        entity: Identity = None,
        properties: str = None,
        sub_biz_id: str = None,
        tsr: bool = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 用户身份识别信息
        self.customer = customer
        # 接口调用者身份信息
        self.entity = entity
        # 扩展属性
        self.properties = properties
        # 业务子类型标识
        self.sub_biz_id = sub_biz_id
        # 是否使用可信时间戳，默认为false
        self.tsr = tsr

    def validate(self):
        self.validate_required(self.customer, 'customer')
        if self.customer:
            self.customer.validate()
        if self.entity:
            self.entity.validate()

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.customer is not None:
            result['customer'] = self.customer.to_map()
        if self.entity is not None:
            result['entity'] = self.entity.to_map()
        if self.properties is not None:
            result['properties'] = self.properties
        if self.sub_biz_id is not None:
            result['sub_biz_id'] = self.sub_biz_id
        if self.tsr is not None:
            result['tsr'] = self.tsr
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('customer') is not None:
            temp_model = Identity()
            self.customer = temp_model.from_map(m['customer'])
        if m.get('entity') is not None:
            temp_model = Identity()
            self.entity = temp_model.from_map(m['entity'])
        if m.get('properties') is not None:
            self.properties = m.get('properties')
        if m.get('sub_biz_id') is not None:
            self.sub_biz_id = m.get('sub_biz_id')
        if m.get('tsr') is not None:
            self.tsr = m.get('tsr')
        return self


class CreateNotaryTokenResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        transaction_id: str = None,
        tsr: TsrResponse = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 返回事务ID，全局唯一
        self.transaction_id = transaction_id
        # 可信时间信息
        self.tsr = tsr

    def validate(self):
        if self.tsr:
            self.tsr.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.transaction_id is not None:
            result['transaction_id'] = self.transaction_id
        if self.tsr is not None:
            result['tsr'] = self.tsr.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('transaction_id') is not None:
            self.transaction_id = m.get('transaction_id')
        if m.get('tsr') is not None:
            temp_model = TsrResponse()
            self.tsr = temp_model.from_map(m['tsr'])
        return self


class GetNotaryTransRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        token: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 存证事务ID
        self.token = token

    def validate(self):
        self.validate_required(self.token, 'token')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.token is not None:
            result['token'] = self.token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('token') is not None:
            self.token = m.get('token')
        return self


class GetNotaryTransResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        file_url: List[str] = None,
        token: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 返回文件下载路径列表
        self.file_url = file_url
        # 存证事务ID
        self.token = token

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.file_url is not None:
            result['file_url'] = self.file_url
        if self.token is not None:
            result['token'] = self.token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('file_url') is not None:
            self.file_url = m.get('file_url')
        if m.get('token') is not None:
            self.token = m.get('token')
        return self


class CreateNotaryTextRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        location: Location = None,
        notary_content: str = None,
        phase: str = None,
        properties: str = None,
        token: str = None,
        tsr: bool = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 存证地点(如手机硬件ID，Wi-Fi地址，GPS位置，IP地址)
        self.location = location
        # 存证内容
        self.notary_content = notary_content
        # 描述本条存证在存证事务中的阶段，用户可自行维护
        self.phase = phase
        # 扩展属性
        self.properties = properties
        # 存证事务id
        self.token = token
        # 是否使用可信时间戳，默认为false
        self.tsr = tsr

    def validate(self):
        if self.location:
            self.location.validate()
        self.validate_required(self.notary_content, 'notary_content')
        self.validate_required(self.phase, 'phase')
        self.validate_required(self.properties, 'properties')
        self.validate_required(self.token, 'token')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.location is not None:
            result['location'] = self.location.to_map()
        if self.notary_content is not None:
            result['notary_content'] = self.notary_content
        if self.phase is not None:
            result['phase'] = self.phase
        if self.properties is not None:
            result['properties'] = self.properties
        if self.token is not None:
            result['token'] = self.token
        if self.tsr is not None:
            result['tsr'] = self.tsr
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('location') is not None:
            temp_model = Location()
            self.location = temp_model.from_map(m['location'])
        if m.get('notary_content') is not None:
            self.notary_content = m.get('notary_content')
        if m.get('phase') is not None:
            self.phase = m.get('phase')
        if m.get('properties') is not None:
            self.properties = m.get('properties')
        if m.get('token') is not None:
            self.token = m.get('token')
        if m.get('tsr') is not None:
            self.tsr = m.get('tsr')
        return self


class CreateNotaryTextResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        tsr: TsrResponse = None,
        tx_hash: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 可信时间信息
        self.tsr = tsr
        # 存证凭据
        self.tx_hash = tx_hash

    def validate(self):
        if self.tsr:
            self.tsr.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.tsr is not None:
            result['tsr'] = self.tsr.to_map()
        if self.tx_hash is not None:
            result['tx_hash'] = self.tx_hash
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('tsr') is not None:
            temp_model = TsrResponse()
            self.tsr = temp_model.from_map(m['tsr'])
        if m.get('tx_hash') is not None:
            self.tx_hash = m.get('tx_hash')
        return self


class GetNotaryTextRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        location: Location = None,
        phase: str = None,
        properties: str = None,
        token: str = None,
        tx_hash: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 存证地点(如手机硬件ID，Wi-Fi地址，GPS位置，IP地址)
        self.location = location
        # 描述本条存证在存证事务中的阶段，用户可自行维护
        self.phase = phase
        # 扩展属性
        self.properties = properties
        # 存证事务id
        self.token = token
        # 存证凭据
        self.tx_hash = tx_hash

    def validate(self):
        if self.location:
            self.location.validate()
        self.validate_required(self.tx_hash, 'tx_hash')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.location is not None:
            result['location'] = self.location.to_map()
        if self.phase is not None:
            result['phase'] = self.phase
        if self.properties is not None:
            result['properties'] = self.properties
        if self.token is not None:
            result['token'] = self.token
        if self.tx_hash is not None:
            result['tx_hash'] = self.tx_hash
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('location') is not None:
            temp_model = Location()
            self.location = temp_model.from_map(m['location'])
        if m.get('phase') is not None:
            self.phase = m.get('phase')
        if m.get('properties') is not None:
            self.properties = m.get('properties')
        if m.get('token') is not None:
            self.token = m.get('token')
        if m.get('tx_hash') is not None:
            self.tx_hash = m.get('tx_hash')
        return self


class GetNotaryTextResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        content: str = None,
        tsr: TsrResponse = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 存证信息
        self.content = content
        # 可信信息
        self.tsr = tsr

    def validate(self):
        if self.tsr:
            self.tsr.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.content is not None:
            result['content'] = self.content
        if self.tsr is not None:
            result['tsr'] = self.tsr.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('content') is not None:
            self.content = m.get('content')
        if m.get('tsr') is not None:
            temp_model = TsrResponse()
            self.tsr = temp_model.from_map(m['tsr'])
        return self


class CreateNotaryFileRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        location: Location = None,
        notary_file: str = None,
        notary_name: str = None,
        phase: str = None,
        properties: str = None,
        token: str = None,
        tsr: bool = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 存证地点(如手机硬件ID，Wi-Fi地址，GPS位置，IP地址)
        self.location = location
        # base64加密后的存证文件内容
        self.notary_file = notary_file
        # 存证文件名称
        self.notary_name = notary_name
        # 描述本条存证在存证事务中的阶段，用户可自行维护
        self.phase = phase
        # 扩展属性
        self.properties = properties
        # 存证事务ID
        self.token = token
        # 是否使用可信时间戳，默认为false
        self.tsr = tsr

    def validate(self):
        if self.location:
            self.location.validate()
        self.validate_required(self.notary_file, 'notary_file')
        self.validate_required(self.notary_name, 'notary_name')
        self.validate_required(self.phase, 'phase')
        self.validate_required(self.token, 'token')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.location is not None:
            result['location'] = self.location.to_map()
        if self.notary_file is not None:
            result['notary_file'] = self.notary_file
        if self.notary_name is not None:
            result['notary_name'] = self.notary_name
        if self.phase is not None:
            result['phase'] = self.phase
        if self.properties is not None:
            result['properties'] = self.properties
        if self.token is not None:
            result['token'] = self.token
        if self.tsr is not None:
            result['tsr'] = self.tsr
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('location') is not None:
            temp_model = Location()
            self.location = temp_model.from_map(m['location'])
        if m.get('notary_file') is not None:
            self.notary_file = m.get('notary_file')
        if m.get('notary_name') is not None:
            self.notary_name = m.get('notary_name')
        if m.get('phase') is not None:
            self.phase = m.get('phase')
        if m.get('properties') is not None:
            self.properties = m.get('properties')
        if m.get('token') is not None:
            self.token = m.get('token')
        if m.get('tsr') is not None:
            self.tsr = m.get('tsr')
        return self


class CreateNotaryFileResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        tsr: TsrResponse = None,
        tx_hash: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 可信时间信息
        self.tsr = tsr
        # 存证凭证
        self.tx_hash = tx_hash

    def validate(self):
        if self.tsr:
            self.tsr.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.tsr is not None:
            result['tsr'] = self.tsr.to_map()
        if self.tx_hash is not None:
            result['tx_hash'] = self.tx_hash
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('tsr') is not None:
            temp_model = TsrResponse()
            self.tsr = temp_model.from_map(m['tsr'])
        if m.get('tx_hash') is not None:
            self.tx_hash = m.get('tx_hash')
        return self


class GetNotaryFileRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        location: Location = None,
        phase: str = None,
        properties: str = None,
        token: str = None,
        tx_hash: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 存证地点(如手机硬件ID，Wi-Fi地址，GPS位置，IP地址)
        self.location = location
        # 描述本条存证在存证事务中的阶段，用户可自行维护
        self.phase = phase
        # 扩展属性
        self.properties = properties
        # 存证事务ID
        self.token = token
        # 存证凭据
        self.tx_hash = tx_hash

    def validate(self):
        if self.location:
            self.location.validate()
        self.validate_required(self.phase, 'phase')
        self.validate_required(self.token, 'token')
        self.validate_required(self.tx_hash, 'tx_hash')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.location is not None:
            result['location'] = self.location.to_map()
        if self.phase is not None:
            result['phase'] = self.phase
        if self.properties is not None:
            result['properties'] = self.properties
        if self.token is not None:
            result['token'] = self.token
        if self.tx_hash is not None:
            result['tx_hash'] = self.tx_hash
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('location') is not None:
            temp_model = Location()
            self.location = temp_model.from_map(m['location'])
        if m.get('phase') is not None:
            self.phase = m.get('phase')
        if m.get('properties') is not None:
            self.properties = m.get('properties')
        if m.get('token') is not None:
            self.token = m.get('token')
        if m.get('tx_hash') is not None:
            self.tx_hash = m.get('tx_hash')
        return self


class GetNotaryFileResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        oss_path: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 文件下载地址
        self.oss_path = oss_path

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.oss_path is not None:
            result['oss_path'] = self.oss_path
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('oss_path') is not None:
            self.oss_path = m.get('oss_path')
        return self


class CreateNotarySourceRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        location: Location = None,
        phase: str = None,
        properties: str = None,
        source_desc: str = None,
        source_file: str = None,
        source_name: str = None,
        token: str = None,
        tsr: bool = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 存证地点(如手机硬件ID，Wi-Fi地址，GPS位置，IP地址)
        self.location = location
        # 描述本条存证在存证事务中的阶段，用户可自行维护
        self.phase = phase
        # 扩展属性
        self.properties = properties
        # 原文文件描述
        self.source_desc = source_desc
        # base64加密后的原文文件内容
        self.source_file = source_file
        # 存证原文名称
        self.source_name = source_name
        # 存证事务ID
        self.token = token
        # 是否使用可信时间戳，默认为false
        self.tsr = tsr

    def validate(self):
        if self.location:
            self.location.validate()
        self.validate_required(self.phase, 'phase')
        self.validate_required(self.source_desc, 'source_desc')
        self.validate_required(self.source_file, 'source_file')
        self.validate_required(self.source_name, 'source_name')
        self.validate_required(self.token, 'token')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.location is not None:
            result['location'] = self.location.to_map()
        if self.phase is not None:
            result['phase'] = self.phase
        if self.properties is not None:
            result['properties'] = self.properties
        if self.source_desc is not None:
            result['source_desc'] = self.source_desc
        if self.source_file is not None:
            result['source_file'] = self.source_file
        if self.source_name is not None:
            result['source_name'] = self.source_name
        if self.token is not None:
            result['token'] = self.token
        if self.tsr is not None:
            result['tsr'] = self.tsr
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('location') is not None:
            temp_model = Location()
            self.location = temp_model.from_map(m['location'])
        if m.get('phase') is not None:
            self.phase = m.get('phase')
        if m.get('properties') is not None:
            self.properties = m.get('properties')
        if m.get('source_desc') is not None:
            self.source_desc = m.get('source_desc')
        if m.get('source_file') is not None:
            self.source_file = m.get('source_file')
        if m.get('source_name') is not None:
            self.source_name = m.get('source_name')
        if m.get('token') is not None:
            self.token = m.get('token')
        if m.get('tsr') is not None:
            self.tsr = m.get('tsr')
        return self


class CreateNotarySourceResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        tsr: TsrResponse = None,
        tx_hash: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 可信时间信息
        self.tsr = tsr
        # 存证凭据
        self.tx_hash = tx_hash

    def validate(self):
        if self.tsr:
            self.tsr.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.tsr is not None:
            result['tsr'] = self.tsr.to_map()
        if self.tx_hash is not None:
            result['tx_hash'] = self.tx_hash
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('tsr') is not None:
            temp_model = TsrResponse()
            self.tsr = temp_model.from_map(m['tsr'])
        if m.get('tx_hash') is not None:
            self.tx_hash = m.get('tx_hash')
        return self


class GetNotarySourceRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        location: Location = None,
        phase: str = None,
        properties: str = None,
        token: str = None,
        tx_hash: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 存证地点(如手机硬件ID，Wi-Fi地址，GPS位置，IP地址)
        self.location = location
        # 描述本条存证在存证事务中的阶段，用户可自行维护
        self.phase = phase
        # 扩展属性
        self.properties = properties
        # 存证事务id
        self.token = token
        # 存证凭据
        self.tx_hash = tx_hash

    def validate(self):
        if self.location:
            self.location.validate()
        self.validate_required(self.phase, 'phase')
        self.validate_required(self.token, 'token')
        self.validate_required(self.tx_hash, 'tx_hash')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.location is not None:
            result['location'] = self.location.to_map()
        if self.phase is not None:
            result['phase'] = self.phase
        if self.properties is not None:
            result['properties'] = self.properties
        if self.token is not None:
            result['token'] = self.token
        if self.tx_hash is not None:
            result['tx_hash'] = self.tx_hash
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('location') is not None:
            temp_model = Location()
            self.location = temp_model.from_map(m['location'])
        if m.get('phase') is not None:
            self.phase = m.get('phase')
        if m.get('properties') is not None:
            self.properties = m.get('properties')
        if m.get('token') is not None:
            self.token = m.get('token')
        if m.get('tx_hash') is not None:
            self.tx_hash = m.get('tx_hash')
        return self


class GetNotarySourceResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        oss_path: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 文件下载地址
        self.oss_path = oss_path

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.oss_path is not None:
            result['oss_path'] = self.oss_path
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('oss_path') is not None:
            self.oss_path = m.get('oss_path')
        return self


class QueryNotaryTestRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        user_name: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # test
        self.user_name = user_name

    def validate(self):
        self.validate_required(self.user_name, 'user_name')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.user_name is not None:
            result['user_name'] = self.user_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        return self


class QueryNotaryTestResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        resp: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # test
        self.resp = resp

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.resp is not None:
            result['resp'] = self.resp
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('resp') is not None:
            self.resp = m.get('resp')
        return self


class InitNotaryOpenapiMerchantRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        auth_type: str = None,
        callback_url: str = None,
        ep_cert_name: str = None,
        ep_cert_no: str = None,
        ep_cert_type: str = None,
        identity_type: str = None,
        legal_person_cert_name: str = None,
        legal_person_cert_no: str = None,
        legal_person_cert_type: str = None,
        return_url: str = None,
        transaction_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 认证来源，PC_AUTH或APP_AUTH
        self.auth_type = auth_type
        # 认证成功页面回跳地址（只在移动端跳转，PC暂不支持）
        self.callback_url = callback_url
        # 企业名称
        self.ep_cert_name = ep_cert_name
        # 企业统一社会信用代码
        self.ep_cert_no = ep_cert_no
        # 企业证件类型，目前只支持企业营业执照类型，值为NATIONAL_LEGAL_MERGE
        self.ep_cert_type = ep_cert_type
        # 认证类型，目前只支持企业认证信息，值为EP_CERT_INFO
        self.identity_type = identity_type
        # 法人姓名
        self.legal_person_cert_name = legal_person_cert_name
        # 法人身份证号
        self.legal_person_cert_no = legal_person_cert_no
        # 法人认证证件类型，目前只支持身份证，值为IDENTITY_CARD
        self.legal_person_cert_type = legal_person_cert_type
        # 认证成功回调地址
        self.return_url = return_url
        # 商户请求的唯一标志，商户要保证其唯一性。值为32位长度的字母数字下划线组合
        self.transaction_id = transaction_id

    def validate(self):
        self.validate_required(self.auth_type, 'auth_type')
        self.validate_required(self.ep_cert_name, 'ep_cert_name')
        self.validate_required(self.ep_cert_no, 'ep_cert_no')
        self.validate_required(self.ep_cert_type, 'ep_cert_type')
        self.validate_required(self.identity_type, 'identity_type')
        self.validate_required(self.legal_person_cert_name, 'legal_person_cert_name')
        self.validate_required(self.legal_person_cert_no, 'legal_person_cert_no')
        self.validate_required(self.legal_person_cert_type, 'legal_person_cert_type')
        self.validate_required(self.transaction_id, 'transaction_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.auth_type is not None:
            result['auth_type'] = self.auth_type
        if self.callback_url is not None:
            result['callback_url'] = self.callback_url
        if self.ep_cert_name is not None:
            result['ep_cert_name'] = self.ep_cert_name
        if self.ep_cert_no is not None:
            result['ep_cert_no'] = self.ep_cert_no
        if self.ep_cert_type is not None:
            result['ep_cert_type'] = self.ep_cert_type
        if self.identity_type is not None:
            result['identity_type'] = self.identity_type
        if self.legal_person_cert_name is not None:
            result['legal_person_cert_name'] = self.legal_person_cert_name
        if self.legal_person_cert_no is not None:
            result['legal_person_cert_no'] = self.legal_person_cert_no
        if self.legal_person_cert_type is not None:
            result['legal_person_cert_type'] = self.legal_person_cert_type
        if self.return_url is not None:
            result['return_url'] = self.return_url
        if self.transaction_id is not None:
            result['transaction_id'] = self.transaction_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('auth_type') is not None:
            self.auth_type = m.get('auth_type')
        if m.get('callback_url') is not None:
            self.callback_url = m.get('callback_url')
        if m.get('ep_cert_name') is not None:
            self.ep_cert_name = m.get('ep_cert_name')
        if m.get('ep_cert_no') is not None:
            self.ep_cert_no = m.get('ep_cert_no')
        if m.get('ep_cert_type') is not None:
            self.ep_cert_type = m.get('ep_cert_type')
        if m.get('identity_type') is not None:
            self.identity_type = m.get('identity_type')
        if m.get('legal_person_cert_name') is not None:
            self.legal_person_cert_name = m.get('legal_person_cert_name')
        if m.get('legal_person_cert_no') is not None:
            self.legal_person_cert_no = m.get('legal_person_cert_no')
        if m.get('legal_person_cert_type') is not None:
            self.legal_person_cert_type = m.get('legal_person_cert_type')
        if m.get('return_url') is not None:
            self.return_url = m.get('return_url')
        if m.get('transaction_id') is not None:
            self.transaction_id = m.get('transaction_id')
        return self


class InitNotaryOpenapiMerchantResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        biz_no: str = None,
        verify_url: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 本次认证的唯一标识，商户需要记录，后续的操作都需要用到
        self.biz_no = biz_no
        # 生成的认证地址，需要转换成二维码通过支付宝APP打开
        self.verify_url = verify_url

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.biz_no is not None:
            result['biz_no'] = self.biz_no
        if self.verify_url is not None:
            result['verify_url'] = self.verify_url
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('biz_no') is not None:
            self.biz_no = m.get('biz_no')
        if m.get('verify_url') is not None:
            self.verify_url = m.get('verify_url')
        return self


class QueryNotaryOpenapiMerchantRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        biz_no: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 查询唯一ID，初始化获取认证地址时生成
        self.biz_no = biz_no

    def validate(self):
        self.validate_required(self.biz_no, 'biz_no')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.biz_no is not None:
            result['biz_no'] = self.biz_no
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('biz_no') is not None:
            self.biz_no = m.get('biz_no')
        return self


class QueryNotaryOpenapiMerchantResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        biz_no: str = None,
        passed: bool = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 查询的biz_no
        self.biz_no = biz_no
        # 认证状态：认证是否通过。通过为true，不通过为false
        self.passed = passed

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.biz_no is not None:
            result['biz_no'] = self.biz_no
        if self.passed is not None:
            result['passed'] = self.passed
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('biz_no') is not None:
            self.biz_no = m.get('biz_no')
        if m.get('passed') is not None:
            self.passed = m.get('passed')
        return self


class DeployNotaryLeaseContractRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        contract_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 租赁服务平台部署的合约Id名称
        self.contract_id = contract_id

    def validate(self):
        self.validate_required(self.contract_id, 'contract_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.contract_id is not None:
            result['contract_id'] = self.contract_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('contract_id') is not None:
            self.contract_id = m.get('contract_id')
        return self


class DeployNotaryLeaseContractResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        code: int = None,
        err_message: str = None,
        response_data: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 状态码 0表示成功
        self.code = code
        # 错误信息
        self.err_message = err_message
        # 部署合约对应的区块链交易哈希
        self.response_data = response_data

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.code is not None:
            result['code'] = self.code
        if self.err_message is not None:
            result['err_message'] = self.err_message
        if self.response_data is not None:
            result['response_data'] = self.response_data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('err_message') is not None:
            self.err_message = m.get('err_message')
        if m.get('response_data') is not None:
            self.response_data = m.get('response_data')
        return self


class CreateOpenchainWebsitServiceRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        merchant_code: str = None,
        merchant_name: str = None,
        tenant_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 商户code,如法人的唯一id
        self.merchant_code = merchant_code
        # 商户名称
        self.merchant_name = merchant_name
        # 租户code
        self.tenant_id = tenant_id

    def validate(self):
        self.validate_required(self.merchant_code, 'merchant_code')
        self.validate_required(self.merchant_name, 'merchant_name')
        self.validate_required(self.tenant_id, 'tenant_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.merchant_code is not None:
            result['merchant_code'] = self.merchant_code
        if self.merchant_name is not None:
            result['merchant_name'] = self.merchant_name
        if self.tenant_id is not None:
            result['tenant_id'] = self.tenant_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('merchant_code') is not None:
            self.merchant_code = m.get('merchant_code')
        if m.get('merchant_name') is not None:
            self.merchant_name = m.get('merchant_name')
        if m.get('tenant_id') is not None:
            self.tenant_id = m.get('tenant_id')
        return self


class CreateOpenchainWebsitServiceResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class CheckOpenchainCorporateFaceRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        ep_cert_name: str = None,
        ep_cert_no: str = None,
        ep_cert_type: str = None,
        legal_person_cert_name: str = None,
        legal_person_cert_no: str = None,
        merchant_code: str = None,
        shop_desc: str = None,
        shop_sit_image: str = None,
        shop_web_url: str = None,
        tenant_id: str = None,
        web_sit_id: str = None,
        web_sit_url: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 企业名称
        self.ep_cert_name = ep_cert_name
        # 企业证件
        self.ep_cert_no = ep_cert_no
        # 企业证件类型（NATIONAL_LEGAL（工商注册号）或 NATIONAL_LEGAL_MERGE （ 社会统一信用代码））
        self.ep_cert_type = ep_cert_type
        # 企业法人名称
        self.legal_person_cert_name = legal_person_cert_name
        # 法人身份证号
        self.legal_person_cert_no = legal_person_cert_no
        # 商户code
        self.merchant_code = merchant_code
        # 店铺描述
        self.shop_desc = shop_desc
        # 店铺图片地址
        self.shop_sit_image = shop_sit_image
        # 店铺url地址
        self.shop_web_url = shop_web_url
        # 租户code
        self.tenant_id = tenant_id
        # 网站id，为网站产品唯一标识
        self.web_sit_id = web_sit_id
        # 网站域名
        self.web_sit_url = web_sit_url

    def validate(self):
        self.validate_required(self.ep_cert_name, 'ep_cert_name')
        self.validate_required(self.ep_cert_no, 'ep_cert_no')
        self.validate_required(self.ep_cert_type, 'ep_cert_type')
        self.validate_required(self.legal_person_cert_name, 'legal_person_cert_name')
        self.validate_required(self.legal_person_cert_no, 'legal_person_cert_no')
        self.validate_required(self.merchant_code, 'merchant_code')
        self.validate_required(self.tenant_id, 'tenant_id')
        self.validate_required(self.web_sit_id, 'web_sit_id')
        self.validate_required(self.web_sit_url, 'web_sit_url')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.ep_cert_name is not None:
            result['ep_cert_name'] = self.ep_cert_name
        if self.ep_cert_no is not None:
            result['ep_cert_no'] = self.ep_cert_no
        if self.ep_cert_type is not None:
            result['ep_cert_type'] = self.ep_cert_type
        if self.legal_person_cert_name is not None:
            result['legal_person_cert_name'] = self.legal_person_cert_name
        if self.legal_person_cert_no is not None:
            result['legal_person_cert_no'] = self.legal_person_cert_no
        if self.merchant_code is not None:
            result['merchant_code'] = self.merchant_code
        if self.shop_desc is not None:
            result['shop_desc'] = self.shop_desc
        if self.shop_sit_image is not None:
            result['shop_sit_image'] = self.shop_sit_image
        if self.shop_web_url is not None:
            result['shop_web_url'] = self.shop_web_url
        if self.tenant_id is not None:
            result['tenant_id'] = self.tenant_id
        if self.web_sit_id is not None:
            result['web_sit_id'] = self.web_sit_id
        if self.web_sit_url is not None:
            result['web_sit_url'] = self.web_sit_url
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('ep_cert_name') is not None:
            self.ep_cert_name = m.get('ep_cert_name')
        if m.get('ep_cert_no') is not None:
            self.ep_cert_no = m.get('ep_cert_no')
        if m.get('ep_cert_type') is not None:
            self.ep_cert_type = m.get('ep_cert_type')
        if m.get('legal_person_cert_name') is not None:
            self.legal_person_cert_name = m.get('legal_person_cert_name')
        if m.get('legal_person_cert_no') is not None:
            self.legal_person_cert_no = m.get('legal_person_cert_no')
        if m.get('merchant_code') is not None:
            self.merchant_code = m.get('merchant_code')
        if m.get('shop_desc') is not None:
            self.shop_desc = m.get('shop_desc')
        if m.get('shop_sit_image') is not None:
            self.shop_sit_image = m.get('shop_sit_image')
        if m.get('shop_web_url') is not None:
            self.shop_web_url = m.get('shop_web_url')
        if m.get('tenant_id') is not None:
            self.tenant_id = m.get('tenant_id')
        if m.get('web_sit_id') is not None:
            self.web_sit_id = m.get('web_sit_id')
        if m.get('web_sit_url') is not None:
            self.web_sit_url = m.get('web_sit_url')
        return self


class CheckOpenchainCorporateFaceResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        certify_id: str = None,
        certify_url: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 认证id
        self.certify_id = certify_id
        # 二维码URL，用户支付宝扫一扫实人认证
        self.certify_url = certify_url

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.certify_id is not None:
            result['certify_id'] = self.certify_id
        if self.certify_url is not None:
            result['certify_url'] = self.certify_url
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('certify_id') is not None:
            self.certify_id = m.get('certify_id')
        if m.get('certify_url') is not None:
            self.certify_url = m.get('certify_url')
        return self


class QueryOpenchainCorporateFaceRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        certify_id: str = None,
        tenant_id: str = None,
        merchant_code: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 认证id
        self.certify_id = certify_id
        # 租户code
        self.tenant_id = tenant_id
        # 商户code
        self.merchant_code = merchant_code

    def validate(self):
        self.validate_required(self.certify_id, 'certify_id')
        self.validate_required(self.tenant_id, 'tenant_id')
        self.validate_required(self.merchant_code, 'merchant_code')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.certify_id is not None:
            result['certify_id'] = self.certify_id
        if self.tenant_id is not None:
            result['tenant_id'] = self.tenant_id
        if self.merchant_code is not None:
            result['merchant_code'] = self.merchant_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('certify_id') is not None:
            self.certify_id = m.get('certify_id')
        if m.get('tenant_id') is not None:
            self.tenant_id = m.get('tenant_id')
        if m.get('merchant_code') is not None:
            self.merchant_code = m.get('merchant_code')
        return self


class QueryOpenchainCorporateFaceResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        authed_url: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 访问授权宝的url
        self.authed_url = authed_url

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.authed_url is not None:
            result['authed_url'] = self.authed_url
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('authed_url') is not None:
            self.authed_url = m.get('authed_url')
        return self


class QueryOpenchainUserDataRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        tenant_id: str = None,
        merchant_code: str = None,
        websit_id: str = None,
        start_time: str = None,
        end_time: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 租户code
        self.tenant_id = tenant_id
        # 商户code
        self.merchant_code = merchant_code
        # 网站sitid
        self.websit_id = websit_id
        # 查询的开始时间
        self.start_time = start_time
        # 查询的截止时间
        self.end_time = end_time

    def validate(self):
        self.validate_required(self.tenant_id, 'tenant_id')
        self.validate_required(self.merchant_code, 'merchant_code')
        self.validate_required(self.websit_id, 'websit_id')
        self.validate_required(self.start_time, 'start_time')
        if self.start_time is not None:
            self.validate_pattern(self.start_time, 'start_time', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')
        self.validate_required(self.end_time, 'end_time')
        if self.end_time is not None:
            self.validate_pattern(self.end_time, 'end_time', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.tenant_id is not None:
            result['tenant_id'] = self.tenant_id
        if self.merchant_code is not None:
            result['merchant_code'] = self.merchant_code
        if self.websit_id is not None:
            result['websit_id'] = self.websit_id
        if self.start_time is not None:
            result['start_time'] = self.start_time
        if self.end_time is not None:
            result['end_time'] = self.end_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('tenant_id') is not None:
            self.tenant_id = m.get('tenant_id')
        if m.get('merchant_code') is not None:
            self.merchant_code = m.get('merchant_code')
        if m.get('websit_id') is not None:
            self.websit_id = m.get('websit_id')
        if m.get('start_time') is not None:
            self.start_time = m.get('start_time')
        if m.get('end_time') is not None:
            self.end_time = m.get('end_time')
        return self


class QueryOpenchainUserDataResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        user_data: List[OCUserData] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 用户数据
        self.user_data = user_data

    def validate(self):
        if self.user_data:
            for k in self.user_data:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['user_data'] = []
        if self.user_data is not None:
            for k in self.user_data:
                result['user_data'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.user_data = []
        if m.get('user_data') is not None:
            for k in m.get('user_data'):
                temp_model = OCUserData()
                self.user_data.append(temp_model.from_map(k))
        return self


class QueryIdentificationRiskThreemetaRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        cert_no: str = None,
        mobile: str = None,
        name: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 被核验人身份证号码
        self.cert_no = cert_no
        # 被核验人手机号码
        self.mobile = mobile
        # 被核验人姓名
        self.name = name

    def validate(self):
        self.validate_required(self.cert_no, 'cert_no')
        self.validate_required(self.mobile, 'mobile')
        self.validate_required(self.name, 'name')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.cert_no is not None:
            result['cert_no'] = self.cert_no
        if self.mobile is not None:
            result['mobile'] = self.mobile
        if self.name is not None:
            result['name'] = self.name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('cert_no') is not None:
            self.cert_no = m.get('cert_no')
        if m.get('mobile') is not None:
            self.mobile = m.get('mobile')
        if m.get('name') is not None:
            self.name = m.get('name')
        return self


class QueryIdentificationRiskThreemetaResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        accepted: bool = None,
        verify_url: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 是否通过
        self.accepted = accepted
        # 
        self.verify_url = verify_url

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.accepted is not None:
            result['accepted'] = self.accepted
        if self.verify_url is not None:
            result['verify_url'] = self.verify_url
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('accepted') is not None:
            self.accepted = m.get('accepted')
        if m.get('verify_url') is not None:
            self.verify_url = m.get('verify_url')
        return self


class CheckContentRiskTextRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        content: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 文本内容
        self.content = content

    def validate(self):
        self.validate_required(self.content, 'content')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.content is not None:
            result['content'] = self.content
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('content') is not None:
            self.content = m.get('content')
        return self


class CheckContentRiskTextResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        risk_level: str = None,
        risk_type: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 风险等级
        self.risk_level = risk_level
        # 风险类型
        self.risk_type = risk_type

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.risk_level is not None:
            result['risk_level'] = self.risk_level
        if self.risk_type is not None:
            result['risk_type'] = self.risk_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('risk_level') is not None:
            self.risk_level = m.get('risk_level')
        if m.get('risk_type') is not None:
            self.risk_type = m.get('risk_type')
        return self


class QueryIdentificationRiskTwometaRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        cert_no: str = None,
        name: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 被核验人身份证号码
        self.cert_no = cert_no
        # 被核验人姓名
        self.name = name

    def validate(self):
        self.validate_required(self.cert_no, 'cert_no')
        self.validate_required(self.name, 'name')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.cert_no is not None:
            result['cert_no'] = self.cert_no
        if self.name is not None:
            result['name'] = self.name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('cert_no') is not None:
            self.cert_no = m.get('cert_no')
        if m.get('name') is not None:
            self.name = m.get('name')
        return self


class QueryIdentificationRiskTwometaResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        accepted: bool = None,
        verify_url: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 是否通过
        self.accepted = accepted
        # 
        self.verify_url = verify_url

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.accepted is not None:
            result['accepted'] = self.accepted
        if self.verify_url is not None:
            result['verify_url'] = self.verify_url
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('accepted') is not None:
            self.accepted = m.get('accepted')
        if m.get('verify_url') is not None:
            self.verify_url = m.get('verify_url')
        return self


class QueryIdentificationRiskFourmetaRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        bank_card_no: str = None,
        cert_no: str = None,
        mobile: str = None,
        name: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 被核验人银行卡号
        self.bank_card_no = bank_card_no
        # 被核验人身份证号码
        self.cert_no = cert_no
        # 被核验人手机号码
        self.mobile = mobile
        # 被核验人姓名
        self.name = name

    def validate(self):
        self.validate_required(self.bank_card_no, 'bank_card_no')
        self.validate_required(self.cert_no, 'cert_no')
        self.validate_required(self.mobile, 'mobile')
        self.validate_required(self.name, 'name')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.bank_card_no is not None:
            result['bank_card_no'] = self.bank_card_no
        if self.cert_no is not None:
            result['cert_no'] = self.cert_no
        if self.mobile is not None:
            result['mobile'] = self.mobile
        if self.name is not None:
            result['name'] = self.name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('bank_card_no') is not None:
            self.bank_card_no = m.get('bank_card_no')
        if m.get('cert_no') is not None:
            self.cert_no = m.get('cert_no')
        if m.get('mobile') is not None:
            self.mobile = m.get('mobile')
        if m.get('name') is not None:
            self.name = m.get('name')
        return self


class QueryIdentificationRiskFourmetaResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        accepted: bool = None,
        verify_url: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 是否通过
        self.accepted = accepted
        # 
        self.verify_url = verify_url

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.accepted is not None:
            result['accepted'] = self.accepted
        if self.verify_url is not None:
            result['verify_url'] = self.verify_url
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('accepted') is not None:
            self.accepted = m.get('accepted')
        if m.get('verify_url') is not None:
            self.verify_url = m.get('verify_url')
        return self


class CreateNotaryRawTextRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        account_id: str = None,
        bizid: str = None,
        content: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 如果已经在链上有账户，可以直接使用已有的账户进行存证。如果为空，服务端会在链上创建一个
        self.account_id = account_id
        # 链的唯一性标示，请联系baas平台获取
        self.bizid = bizid
        # 存证内容
        self.content = content

    def validate(self):
        self.validate_required(self.bizid, 'bizid')
        self.validate_required(self.content, 'content')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.account_id is not None:
            result['account_id'] = self.account_id
        if self.bizid is not None:
            result['bizid'] = self.bizid
        if self.content is not None:
            result['content'] = self.content
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('account_id') is not None:
            self.account_id = m.get('account_id')
        if m.get('bizid') is not None:
            self.bizid = m.get('bizid')
        if m.get('content') is not None:
            self.content = m.get('content')
        return self


class CreateNotaryRawTextResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        account_id: str = None,
        transaction_hash: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 存证使用的链上账户
        self.account_id = account_id
        # 存证哈希
        self.transaction_hash = transaction_hash

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.account_id is not None:
            result['account_id'] = self.account_id
        if self.transaction_hash is not None:
            result['transaction_hash'] = self.transaction_hash
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('account_id') is not None:
            self.account_id = m.get('account_id')
        if m.get('transaction_hash') is not None:
            self.transaction_hash = m.get('transaction_hash')
        return self


class GetNotaryRawTextRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        bizid: str = None,
        transaction_hash: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 区块链的唯一性标示
        self.bizid = bizid
        # 存证哈希
        self.transaction_hash = transaction_hash

    def validate(self):
        self.validate_required(self.bizid, 'bizid')
        self.validate_required(self.transaction_hash, 'transaction_hash')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.bizid is not None:
            result['bizid'] = self.bizid
        if self.transaction_hash is not None:
            result['transaction_hash'] = self.transaction_hash
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('bizid') is not None:
            self.bizid = m.get('bizid')
        if m.get('transaction_hash') is not None:
            self.transaction_hash = m.get('transaction_hash')
        return self


class GetNotaryRawTextResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        content: str = None,
        notary_date: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 存证内容
        self.content = content
        # 存证时间
        self.notary_date = notary_date

    def validate(self):
        if self.notary_date is not None:
            self.validate_pattern(self.notary_date, 'notary_date', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.content is not None:
            result['content'] = self.content
        if self.notary_date is not None:
            result['notary_date'] = self.notary_date
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('content') is not None:
            self.content = m.get('content')
        if m.get('notary_date') is not None:
            self.notary_date = m.get('notary_date')
        return self


class QueryIdentificationRiskMaskRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        cert_no: str = None,
        mobile: str = None,
        name: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 被核验人身份证号码后四位
        self.cert_no = cert_no
        # 被核验人手机号码
        self.mobile = mobile
        # 被核验人姓名的一部分
        self.name = name

    def validate(self):
        self.validate_required(self.cert_no, 'cert_no')
        self.validate_required(self.mobile, 'mobile')
        self.validate_required(self.name, 'name')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.cert_no is not None:
            result['cert_no'] = self.cert_no
        if self.mobile is not None:
            result['mobile'] = self.mobile
        if self.name is not None:
            result['name'] = self.name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('cert_no') is not None:
            self.cert_no = m.get('cert_no')
        if m.get('mobile') is not None:
            self.mobile = m.get('mobile')
        if m.get('name') is not None:
            self.name = m.get('name')
        return self


class QueryIdentificationRiskMaskResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        accepted: bool = None,
        verify_url: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 是否通过
        # 
        self.accepted = accepted
        # 
        self.verify_url = verify_url

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.accepted is not None:
            result['accepted'] = self.accepted
        if self.verify_url is not None:
            result['verify_url'] = self.verify_url
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('accepted') is not None:
            self.accepted = m.get('accepted')
        if m.get('verify_url') is not None:
            self.verify_url = m.get('verify_url')
        return self


class InitIdentificationEnterpriseFaceauthRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        biz_info: BizInfo = None,
        call_back_url: str = None,
        ep_cert_name: str = None,
        ep_cert_no: str = None,
        ep_cert_type: str = None,
        legal_person_cert_name: str = None,
        legal_person_cert_no: str = None,
        merchant_url: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 用于内部统计的参数，外部用户请忽略
        self.biz_info = biz_info
        # 回调通知地址
        self.call_back_url = call_back_url
        # 企业名称
        self.ep_cert_name = ep_cert_name
        # 企业证件号
        self.ep_cert_no = ep_cert_no
        # 企业证件类型（NATIONAL_LEGAL（工商注册号）或 NATIONAL_LEGAL_MERGE （ 社会统一信用代码））
        self.ep_cert_type = ep_cert_type
        # 企业法人姓名
        self.legal_person_cert_name = legal_person_cert_name
        # 企业法人身份证号（目前只支持身份证号）
        self.legal_person_cert_no = legal_person_cert_no
        # 认证完成后回跳地址
        self.merchant_url = merchant_url

    def validate(self):
        if self.biz_info:
            self.biz_info.validate()
        self.validate_required(self.ep_cert_name, 'ep_cert_name')
        self.validate_required(self.ep_cert_no, 'ep_cert_no')
        self.validate_required(self.ep_cert_type, 'ep_cert_type')
        self.validate_required(self.legal_person_cert_name, 'legal_person_cert_name')
        self.validate_required(self.legal_person_cert_no, 'legal_person_cert_no')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.biz_info is not None:
            result['biz_info'] = self.biz_info.to_map()
        if self.call_back_url is not None:
            result['call_back_url'] = self.call_back_url
        if self.ep_cert_name is not None:
            result['ep_cert_name'] = self.ep_cert_name
        if self.ep_cert_no is not None:
            result['ep_cert_no'] = self.ep_cert_no
        if self.ep_cert_type is not None:
            result['ep_cert_type'] = self.ep_cert_type
        if self.legal_person_cert_name is not None:
            result['legal_person_cert_name'] = self.legal_person_cert_name
        if self.legal_person_cert_no is not None:
            result['legal_person_cert_no'] = self.legal_person_cert_no
        if self.merchant_url is not None:
            result['merchant_url'] = self.merchant_url
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('biz_info') is not None:
            temp_model = BizInfo()
            self.biz_info = temp_model.from_map(m['biz_info'])
        if m.get('call_back_url') is not None:
            self.call_back_url = m.get('call_back_url')
        if m.get('ep_cert_name') is not None:
            self.ep_cert_name = m.get('ep_cert_name')
        if m.get('ep_cert_no') is not None:
            self.ep_cert_no = m.get('ep_cert_no')
        if m.get('ep_cert_type') is not None:
            self.ep_cert_type = m.get('ep_cert_type')
        if m.get('legal_person_cert_name') is not None:
            self.legal_person_cert_name = m.get('legal_person_cert_name')
        if m.get('legal_person_cert_no') is not None:
            self.legal_person_cert_no = m.get('legal_person_cert_no')
        if m.get('merchant_url') is not None:
            self.merchant_url = m.get('merchant_url')
        return self


class InitIdentificationEnterpriseFaceauthResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        biz_no: str = None,
        verify_url: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 本次认证的业务唯一性标示
        self.biz_no = biz_no
        # 认证url
        self.verify_url = verify_url

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.biz_no is not None:
            result['biz_no'] = self.biz_no
        if self.verify_url is not None:
            result['verify_url'] = self.verify_url
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('biz_no') is not None:
            self.biz_no = m.get('biz_no')
        if m.get('verify_url') is not None:
            self.verify_url = m.get('verify_url')
        return self


class QueryIdentificationEnterpriseFaceauthRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        biz_no: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 认证的唯一性标示
        self.biz_no = biz_no

    def validate(self):
        self.validate_required(self.biz_no, 'biz_no')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.biz_no is not None:
            result['biz_no'] = self.biz_no
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('biz_no') is not None:
            self.biz_no = m.get('biz_no')
        return self


class QueryIdentificationEnterpriseFaceauthResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        biz_no: str = None,
        failed_code: str = None,
        failed_message: str = None,
        passed: bool = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 认证的唯一性标示
        self.biz_no = biz_no
        # 认证失败错误码
        self.failed_code = failed_code
        # 认证失败原因信息
        self.failed_message = failed_message
        # 是否认证通过
        self.passed = passed

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.biz_no is not None:
            result['biz_no'] = self.biz_no
        if self.failed_code is not None:
            result['failed_code'] = self.failed_code
        if self.failed_message is not None:
            result['failed_message'] = self.failed_message
        if self.passed is not None:
            result['passed'] = self.passed
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('biz_no') is not None:
            self.biz_no = m.get('biz_no')
        if m.get('failed_code') is not None:
            self.failed_code = m.get('failed_code')
        if m.get('failed_message') is not None:
            self.failed_message = m.get('failed_message')
        if m.get('passed') is not None:
            self.passed = m.get('passed')
        return self


class QueryIdentificationEnterpriseFourmetaRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        ep_cert_name: str = None,
        ep_cert_no: str = None,
        ep_cert_type: str = None,
        legal_person_cert_name: str = None,
        legal_person_cert_no: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 企业名称
        self.ep_cert_name = ep_cert_name
        # 企业证件号
        self.ep_cert_no = ep_cert_no
        # 企业证件类型（NATIONAL_LEGAL（工商注册号）或 NATIONAL_LEGAL_MERGE （ 社会统一信用代码））
        self.ep_cert_type = ep_cert_type
        # 法人姓名
        self.legal_person_cert_name = legal_person_cert_name
        # 企业法人身份证号码
        self.legal_person_cert_no = legal_person_cert_no

    def validate(self):
        self.validate_required(self.ep_cert_name, 'ep_cert_name')
        self.validate_required(self.ep_cert_no, 'ep_cert_no')
        self.validate_required(self.ep_cert_type, 'ep_cert_type')
        self.validate_required(self.legal_person_cert_name, 'legal_person_cert_name')
        self.validate_required(self.legal_person_cert_no, 'legal_person_cert_no')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.ep_cert_name is not None:
            result['ep_cert_name'] = self.ep_cert_name
        if self.ep_cert_no is not None:
            result['ep_cert_no'] = self.ep_cert_no
        if self.ep_cert_type is not None:
            result['ep_cert_type'] = self.ep_cert_type
        if self.legal_person_cert_name is not None:
            result['legal_person_cert_name'] = self.legal_person_cert_name
        if self.legal_person_cert_no is not None:
            result['legal_person_cert_no'] = self.legal_person_cert_no
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('ep_cert_name') is not None:
            self.ep_cert_name = m.get('ep_cert_name')
        if m.get('ep_cert_no') is not None:
            self.ep_cert_no = m.get('ep_cert_no')
        if m.get('ep_cert_type') is not None:
            self.ep_cert_type = m.get('ep_cert_type')
        if m.get('legal_person_cert_name') is not None:
            self.legal_person_cert_name = m.get('legal_person_cert_name')
        if m.get('legal_person_cert_no') is not None:
            self.legal_person_cert_no = m.get('legal_person_cert_no')
        return self


class QueryIdentificationEnterpriseFourmetaResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        enterprise_status: str = None,
        open_time: str = None,
        passed: bool = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 经营状态
        self.enterprise_status = enterprise_status
        # 营业期限
        self.open_time = open_time
        # 认证是否通过
        self.passed = passed

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.enterprise_status is not None:
            result['enterprise_status'] = self.enterprise_status
        if self.open_time is not None:
            result['open_time'] = self.open_time
        if self.passed is not None:
            result['passed'] = self.passed
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('enterprise_status') is not None:
            self.enterprise_status = m.get('enterprise_status')
        if m.get('open_time') is not None:
            self.open_time = m.get('open_time')
        if m.get('passed') is not None:
            self.passed = m.get('passed')
        return self


class QueryIdentificationEnterpriseThreemetaRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        ep_cert_name: str = None,
        ep_cert_no: str = None,
        ep_cert_type: str = None,
        legal_person_cert_name: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 企业名称
        self.ep_cert_name = ep_cert_name
        # 企业证件号
        self.ep_cert_no = ep_cert_no
        # 证件类型
        self.ep_cert_type = ep_cert_type
        # 法人姓名
        self.legal_person_cert_name = legal_person_cert_name

    def validate(self):
        self.validate_required(self.ep_cert_name, 'ep_cert_name')
        self.validate_required(self.ep_cert_no, 'ep_cert_no')
        self.validate_required(self.ep_cert_type, 'ep_cert_type')
        self.validate_required(self.legal_person_cert_name, 'legal_person_cert_name')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.ep_cert_name is not None:
            result['ep_cert_name'] = self.ep_cert_name
        if self.ep_cert_no is not None:
            result['ep_cert_no'] = self.ep_cert_no
        if self.ep_cert_type is not None:
            result['ep_cert_type'] = self.ep_cert_type
        if self.legal_person_cert_name is not None:
            result['legal_person_cert_name'] = self.legal_person_cert_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('ep_cert_name') is not None:
            self.ep_cert_name = m.get('ep_cert_name')
        if m.get('ep_cert_no') is not None:
            self.ep_cert_no = m.get('ep_cert_no')
        if m.get('ep_cert_type') is not None:
            self.ep_cert_type = m.get('ep_cert_type')
        if m.get('legal_person_cert_name') is not None:
            self.legal_person_cert_name = m.get('legal_person_cert_name')
        return self


class QueryIdentificationEnterpriseThreemetaResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        enterprise_status: str = None,
        open_time: str = None,
        passed: bool = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 经营状态
        self.enterprise_status = enterprise_status
        # 营业期限
        self.open_time = open_time
        # 认证是否通过
        self.passed = passed

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.enterprise_status is not None:
            result['enterprise_status'] = self.enterprise_status
        if self.open_time is not None:
            result['open_time'] = self.open_time
        if self.passed is not None:
            result['passed'] = self.passed
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('enterprise_status') is not None:
            self.enterprise_status = m.get('enterprise_status')
        if m.get('open_time') is not None:
            self.open_time = m.get('open_time')
        if m.get('passed') is not None:
            self.passed = m.get('passed')
        return self


class QueryIdentificationEnterpriseTwometaRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        ep_cert_name: str = None,
        ep_cert_no: str = None,
        ep_cert_type: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 企业名称
        self.ep_cert_name = ep_cert_name
        # 企业证件号
        self.ep_cert_no = ep_cert_no
        # 企业证件类型（NATIONAL_LEGAL（工商注册号）或 NATIONAL_LEGAL_MERGE （ 社会统一信用代码）
        self.ep_cert_type = ep_cert_type

    def validate(self):
        self.validate_required(self.ep_cert_name, 'ep_cert_name')
        self.validate_required(self.ep_cert_no, 'ep_cert_no')
        self.validate_required(self.ep_cert_type, 'ep_cert_type')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.ep_cert_name is not None:
            result['ep_cert_name'] = self.ep_cert_name
        if self.ep_cert_no is not None:
            result['ep_cert_no'] = self.ep_cert_no
        if self.ep_cert_type is not None:
            result['ep_cert_type'] = self.ep_cert_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('ep_cert_name') is not None:
            self.ep_cert_name = m.get('ep_cert_name')
        if m.get('ep_cert_no') is not None:
            self.ep_cert_no = m.get('ep_cert_no')
        if m.get('ep_cert_type') is not None:
            self.ep_cert_type = m.get('ep_cert_type')
        return self


class QueryIdentificationEnterpriseTwometaResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        enterprise_status: str = None,
        open_time: str = None,
        passed: bool = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 经营状态
        self.enterprise_status = enterprise_status
        # 营业期限
        self.open_time = open_time
        # 认证是否通过
        self.passed = passed

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.enterprise_status is not None:
            result['enterprise_status'] = self.enterprise_status
        if self.open_time is not None:
            result['open_time'] = self.open_time
        if self.passed is not None:
            result['passed'] = self.passed
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('enterprise_status') is not None:
            self.enterprise_status = m.get('enterprise_status')
        if m.get('open_time') is not None:
            self.open_time = m.get('open_time')
        if m.get('passed') is not None:
            self.passed = m.get('passed')
        return self


class StartMydidDidThreeelementRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        product_instance_id: str = None,
        custumor_uid: str = None,
        verify_info_id: str = None,
        verify_info_name: str = None,
        verify_info_phone: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        self.product_instance_id = product_instance_id
        # 客户自有用户的唯一id
        self.custumor_uid = custumor_uid
        # 实名认证身份证号
        self.verify_info_id = verify_info_id
        # 实名认证用户名
        self.verify_info_name = verify_info_name
        # 电话号码
        self.verify_info_phone = verify_info_phone

    def validate(self):
        self.validate_required(self.custumor_uid, 'custumor_uid')
        if self.custumor_uid is not None:
            self.validate_max_length(self.custumor_uid, 'custumor_uid', 64)
        self.validate_required(self.verify_info_id, 'verify_info_id')
        if self.verify_info_id is not None:
            self.validate_max_length(self.verify_info_id, 'verify_info_id', 20)
        self.validate_required(self.verify_info_name, 'verify_info_name')
        if self.verify_info_name is not None:
            self.validate_max_length(self.verify_info_name, 'verify_info_name', 20)
        self.validate_required(self.verify_info_phone, 'verify_info_phone')
        if self.verify_info_phone is not None:
            self.validate_max_length(self.verify_info_phone, 'verify_info_phone', 11)

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.product_instance_id is not None:
            result['product_instance_id'] = self.product_instance_id
        if self.custumor_uid is not None:
            result['custumor_uid'] = self.custumor_uid
        if self.verify_info_id is not None:
            result['verify_info_id'] = self.verify_info_id
        if self.verify_info_name is not None:
            result['verify_info_name'] = self.verify_info_name
        if self.verify_info_phone is not None:
            result['verify_info_phone'] = self.verify_info_phone
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('product_instance_id') is not None:
            self.product_instance_id = m.get('product_instance_id')
        if m.get('custumor_uid') is not None:
            self.custumor_uid = m.get('custumor_uid')
        if m.get('verify_info_id') is not None:
            self.verify_info_id = m.get('verify_info_id')
        if m.get('verify_info_name') is not None:
            self.verify_info_name = m.get('verify_info_name')
        if m.get('verify_info_phone') is not None:
            self.verify_info_phone = m.get('verify_info_phone')
        return self


class StartMydidDidThreeelementResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        did: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 如果创建成功，会返回创建之后的did
        self.did = did

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.did is not None:
            result['did'] = self.did
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('did') is not None:
            self.did = m.get('did')
        return self


