# -*- coding: utf-8 -*-
# This file is auto-generated, don't edit it. Thanks.
import time

from Tea.exceptions import TeaException, UnretryableException
from Tea.request import TeaRequest
from Tea.core import TeaCore
from antchain_alipay_util.antchain_utils import AntchainUtils
from typing import Dict

from antchain_sdk_blockchain import models as blockchain_models
from alibabacloud_tea_util.client import Client as UtilClient
from alibabacloud_tea_util import models as util_models
from alibabacloud_rpc_util.client import Client as RPCUtilClient


class Client:
    _endpoint: str = None
    _region_id: str = None
    _access_key_id: str = None
    _access_key_secret: str = None
    _protocol: str = None
    _user_agent: str = None
    _read_timeout: int = None
    _connect_timeout: int = None
    _http_proxy: str = None
    _https_proxy: str = None
    _socks_5proxy: str = None
    _socks_5net_work: str = None
    _no_proxy: str = None
    _max_idle_conns: int = None
    _security_token: str = None
    _max_idle_time_millis: int = None
    _keep_alive_duration_millis: int = None
    _max_requests: int = None
    _max_requests_per_host: int = None

    def __init__(
        self, 
        config: blockchain_models.Config,
    ):
        """
        Init client with Config
        @param config: config contains the necessary information to create a client
        """
        if UtilClient.is_unset(config):
            raise TeaException({
                'code': 'ParameterMissing',
                'message': "'config' can not be unset"
            })
        self._access_key_id = config.access_key_id
        self._access_key_secret = config.access_key_secret
        self._security_token = config.security_token
        self._endpoint = config.endpoint
        self._protocol = config.protocol
        self._user_agent = config.user_agent
        self._read_timeout = UtilClient.default_number(config.read_timeout, 20000)
        self._connect_timeout = UtilClient.default_number(config.connect_timeout, 20000)
        self._http_proxy = config.http_proxy
        self._https_proxy = config.https_proxy
        self._no_proxy = config.no_proxy
        self._socks_5proxy = config.socks_5proxy
        self._socks_5net_work = config.socks_5net_work
        self._max_idle_conns = UtilClient.default_number(config.max_idle_conns, 60000)
        self._max_idle_time_millis = UtilClient.default_number(config.max_idle_time_millis, 5)
        self._keep_alive_duration_millis = UtilClient.default_number(config.keep_alive_duration_millis, 5000)
        self._max_requests = UtilClient.default_number(config.max_requests, 100)
        self._max_requests_per_host = UtilClient.default_number(config.max_requests_per_host, 100)

    def do_request(
        self,
        version: str,
        action: str,
        protocol: str,
        method: str,
        pathname: str,
        request: dict,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> dict:
        """
        Encapsulate the request and invoke the network
        @param action: api name
        @param protocol: http or https
        @param method: e.g. GET
        @param pathname: pathname of every api
        @param request: which contains request params
        @param runtime: which controls some details of call api, such as retry times
        @return: the response
        """
        runtime.validate()
        _runtime = {
            'timeouted': 'retry',
            'readTimeout': UtilClient.default_number(runtime.read_timeout, self._read_timeout),
            'connectTimeout': UtilClient.default_number(runtime.connect_timeout, self._connect_timeout),
            'httpProxy': UtilClient.default_string(runtime.http_proxy, self._http_proxy),
            'httpsProxy': UtilClient.default_string(runtime.https_proxy, self._https_proxy),
            'noProxy': UtilClient.default_string(runtime.no_proxy, self._no_proxy),
            'maxIdleConns': UtilClient.default_number(runtime.max_idle_conns, self._max_idle_conns),
            'maxIdleTimeMillis': self._max_idle_time_millis,
            'keepAliveDurationMillis': self._keep_alive_duration_millis,
            'maxRequests': self._max_requests,
            'maxRequestsPerHost': self._max_requests_per_host,
            'retry': {
                'retryable': runtime.autoretry,
                'maxAttempts': UtilClient.default_number(runtime.max_attempts, 3)
            },
            'backoff': {
                'policy': UtilClient.default_string(runtime.backoff_policy, 'no'),
                'period': UtilClient.default_number(runtime.backoff_period, 1)
            },
            'ignoreSSL': runtime.ignore_ssl,
            # 蚂蚁链浏览器合约链交易内容
        }
        _last_request = None
        _last_exception = None
        _now = time.time()
        _retry_times = 0
        while TeaCore.allow_retry(_runtime.get('retry'), _retry_times, _now):
            if _retry_times > 0:
                _backoff_time = TeaCore.get_backoff_time(_runtime.get('backoff'), _retry_times)
                if _backoff_time > 0:
                    TeaCore.sleep(_backoff_time)
            _retry_times = _retry_times + 1
            try:
                _request = TeaRequest()
                _request.protocol = UtilClient.default_string(self._protocol, protocol)
                _request.method = method
                _request.pathname = pathname
                _request.query = {
                    'method': action,
                    'version': version,
                    'sign_type': 'HmacSHA1',
                    'req_time': AntchainUtils.get_timestamp(),
                    'req_msg_id': AntchainUtils.get_nonce(),
                    'access_key': self._access_key_id,
                    'base_sdk_version': 'TeaSDK-2.0',
                    'sdk_version': '1.25.19'
                }
                if not UtilClient.empty(self._security_token):
                    _request.query['security_token'] = self._security_token
                _request.headers = TeaCore.merge({
                    'host': UtilClient.default_string(self._endpoint, 'openapi.antchain.antgroup.com'),
                    'user-agent': UtilClient.get_user_agent(self._user_agent)
                }, headers)
                tmp = UtilClient.anyify_map_value(RPCUtilClient.query(request))
                _request.body = UtilClient.to_form_string(tmp)
                _request.headers['content-type'] = 'application/x-www-form-urlencoded'
                signed_param = TeaCore.merge(_request.query,
                    RPCUtilClient.query(request))
                _request.query['sign'] = AntchainUtils.get_signature(signed_param, self._access_key_secret)
                _last_request = _request
                _response = TeaCore.do_action(_request, _runtime)
                raw = UtilClient.read_as_string(_response.body)
                obj = UtilClient.parse_json(raw)
                res = UtilClient.assert_as_map(obj)
                resp = UtilClient.assert_as_map(res.get('response'))
                if AntchainUtils.has_error(raw, self._access_key_secret):
                    raise TeaException({
                        'message': resp.get('result_msg'),
                        'data': resp,
                        'code': resp.get('result_code')
                    })
                return resp
            except Exception as e:
                if TeaCore.is_retryable(e):
                    _last_exception = e
                    continue
                raise e
        raise UnretryableException(_last_request, _last_exception)

    async def do_request_async(
        self,
        version: str,
        action: str,
        protocol: str,
        method: str,
        pathname: str,
        request: dict,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> dict:
        """
        Encapsulate the request and invoke the network
        @param action: api name
        @param protocol: http or https
        @param method: e.g. GET
        @param pathname: pathname of every api
        @param request: which contains request params
        @param runtime: which controls some details of call api, such as retry times
        @return: the response
        """
        runtime.validate()
        _runtime = {
            'timeouted': 'retry',
            'readTimeout': UtilClient.default_number(runtime.read_timeout, self._read_timeout),
            'connectTimeout': UtilClient.default_number(runtime.connect_timeout, self._connect_timeout),
            'httpProxy': UtilClient.default_string(runtime.http_proxy, self._http_proxy),
            'httpsProxy': UtilClient.default_string(runtime.https_proxy, self._https_proxy),
            'noProxy': UtilClient.default_string(runtime.no_proxy, self._no_proxy),
            'maxIdleConns': UtilClient.default_number(runtime.max_idle_conns, self._max_idle_conns),
            'maxIdleTimeMillis': self._max_idle_time_millis,
            'keepAliveDurationMillis': self._keep_alive_duration_millis,
            'maxRequests': self._max_requests,
            'maxRequestsPerHost': self._max_requests_per_host,
            'retry': {
                'retryable': runtime.autoretry,
                'maxAttempts': UtilClient.default_number(runtime.max_attempts, 3)
            },
            'backoff': {
                'policy': UtilClient.default_string(runtime.backoff_policy, 'no'),
                'period': UtilClient.default_number(runtime.backoff_period, 1)
            },
            'ignoreSSL': runtime.ignore_ssl,
            # 蚂蚁链浏览器合约链交易内容
        }
        _last_request = None
        _last_exception = None
        _now = time.time()
        _retry_times = 0
        while TeaCore.allow_retry(_runtime.get('retry'), _retry_times, _now):
            if _retry_times > 0:
                _backoff_time = TeaCore.get_backoff_time(_runtime.get('backoff'), _retry_times)
                if _backoff_time > 0:
                    TeaCore.sleep(_backoff_time)
            _retry_times = _retry_times + 1
            try:
                _request = TeaRequest()
                _request.protocol = UtilClient.default_string(self._protocol, protocol)
                _request.method = method
                _request.pathname = pathname
                _request.query = {
                    'method': action,
                    'version': version,
                    'sign_type': 'HmacSHA1',
                    'req_time': AntchainUtils.get_timestamp(),
                    'req_msg_id': AntchainUtils.get_nonce(),
                    'access_key': self._access_key_id,
                    'base_sdk_version': 'TeaSDK-2.0',
                    'sdk_version': '1.25.19'
                }
                if not UtilClient.empty(self._security_token):
                    _request.query['security_token'] = self._security_token
                _request.headers = TeaCore.merge({
                    'host': UtilClient.default_string(self._endpoint, 'openapi.antchain.antgroup.com'),
                    'user-agent': UtilClient.get_user_agent(self._user_agent)
                }, headers)
                tmp = UtilClient.anyify_map_value(RPCUtilClient.query(request))
                _request.body = UtilClient.to_form_string(tmp)
                _request.headers['content-type'] = 'application/x-www-form-urlencoded'
                signed_param = TeaCore.merge(_request.query,
                    RPCUtilClient.query(request))
                _request.query['sign'] = AntchainUtils.get_signature(signed_param, self._access_key_secret)
                _last_request = _request
                _response = await TeaCore.async_do_action(_request, _runtime)
                raw = await UtilClient.read_as_string_async(_response.body)
                obj = UtilClient.parse_json(raw)
                res = UtilClient.assert_as_map(obj)
                resp = UtilClient.assert_as_map(res.get('response'))
                if AntchainUtils.has_error(raw, self._access_key_secret):
                    raise TeaException({
                        'message': resp.get('result_msg'),
                        'data': resp,
                        'code': resp.get('result_code')
                    })
                return resp
            except Exception as e:
                if TeaCore.is_retryable(e):
                    _last_exception = e
                    continue
                raise e
        raise UnretryableException(_last_request, _last_exception)

    def start_account_mapping(
        self,
        request: blockchain_models.StartAccountMappingRequest,
    ) -> blockchain_models.StartAccountMappingResponse:
        """
        Description: 将用户自有账户导入到链上
        Summary: 自有账户映射到链上
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.start_account_mapping_ex(request, headers, runtime)

    async def start_account_mapping_async(
        self,
        request: blockchain_models.StartAccountMappingRequest,
    ) -> blockchain_models.StartAccountMappingResponse:
        """
        Description: 将用户自有账户导入到链上
        Summary: 自有账户映射到链上
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.start_account_mapping_ex_async(request, headers, runtime)

    def start_account_mapping_ex(
        self,
        request: blockchain_models.StartAccountMappingRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartAccountMappingResponse:
        """
        Description: 将用户自有账户导入到链上
        Summary: 自有账户映射到链上
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartAccountMappingResponse().from_map(
            self.do_request('1.0', 'baas.account.mapping.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def start_account_mapping_ex_async(
        self,
        request: blockchain_models.StartAccountMappingRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartAccountMappingResponse:
        """
        Description: 将用户自有账户导入到链上
        Summary: 自有账户映射到链上
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartAccountMappingResponse().from_map(
            await self.do_request_async('1.0', 'baas.account.mapping.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def batchcreate_account_mapping(
        self,
        request: blockchain_models.BatchcreateAccountMappingRequest,
    ) -> blockchain_models.BatchcreateAccountMappingResponse:
        """
        Description: 自有账户到链上账户的批量映射接口
        Summary: 自有账户到链上账户的批量映射
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.batchcreate_account_mapping_ex(request, headers, runtime)

    async def batchcreate_account_mapping_async(
        self,
        request: blockchain_models.BatchcreateAccountMappingRequest,
    ) -> blockchain_models.BatchcreateAccountMappingResponse:
        """
        Description: 自有账户到链上账户的批量映射接口
        Summary: 自有账户到链上账户的批量映射
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.batchcreate_account_mapping_ex_async(request, headers, runtime)

    def batchcreate_account_mapping_ex(
        self,
        request: blockchain_models.BatchcreateAccountMappingRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.BatchcreateAccountMappingResponse:
        """
        Description: 自有账户到链上账户的批量映射接口
        Summary: 自有账户到链上账户的批量映射
        """
        UtilClient.validate_model(request)
        return blockchain_models.BatchcreateAccountMappingResponse().from_map(
            self.do_request('1.0', 'baas.account.mapping.batchcreate', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def batchcreate_account_mapping_ex_async(
        self,
        request: blockchain_models.BatchcreateAccountMappingRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.BatchcreateAccountMappingResponse:
        """
        Description: 自有账户到链上账户的批量映射接口
        Summary: 自有账户到链上账户的批量映射
        """
        UtilClient.validate_model(request)
        return blockchain_models.BatchcreateAccountMappingResponse().from_map(
            await self.do_request_async('1.0', 'baas.account.mapping.batchcreate', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def start_account_signature(
        self,
        request: blockchain_models.StartAccountSignatureRequest,
    ) -> blockchain_models.StartAccountSignatureResponse:
        """
        Description: 为用户生成签名的接口
        Summary: 为用户生成签名
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.start_account_signature_ex(request, headers, runtime)

    async def start_account_signature_async(
        self,
        request: blockchain_models.StartAccountSignatureRequest,
    ) -> blockchain_models.StartAccountSignatureResponse:
        """
        Description: 为用户生成签名的接口
        Summary: 为用户生成签名
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.start_account_signature_ex_async(request, headers, runtime)

    def start_account_signature_ex(
        self,
        request: blockchain_models.StartAccountSignatureRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartAccountSignatureResponse:
        """
        Description: 为用户生成签名的接口
        Summary: 为用户生成签名
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartAccountSignatureResponse().from_map(
            self.do_request('1.0', 'baas.account.signature.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def start_account_signature_ex_async(
        self,
        request: blockchain_models.StartAccountSignatureRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartAccountSignatureResponse:
        """
        Description: 为用户生成签名的接口
        Summary: 为用户生成签名
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartAccountSignatureResponse().from_map(
            await self.do_request_async('1.0', 'baas.account.signature.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_account_mappingresult(
        self,
        request: blockchain_models.QueryAccountMappingresultRequest,
    ) -> blockchain_models.QueryAccountMappingresultResponse:
        """
        Description: 查询批量映射结果的接口
        Summary: 查询批量映射的结果
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_account_mappingresult_ex(request, headers, runtime)

    async def query_account_mappingresult_async(
        self,
        request: blockchain_models.QueryAccountMappingresultRequest,
    ) -> blockchain_models.QueryAccountMappingresultResponse:
        """
        Description: 查询批量映射结果的接口
        Summary: 查询批量映射的结果
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_account_mappingresult_ex_async(request, headers, runtime)

    def query_account_mappingresult_ex(
        self,
        request: blockchain_models.QueryAccountMappingresultRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryAccountMappingresultResponse:
        """
        Description: 查询批量映射结果的接口
        Summary: 查询批量映射的结果
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryAccountMappingresultResponse().from_map(
            self.do_request('1.0', 'baas.account.mappingresult.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_account_mappingresult_ex_async(
        self,
        request: blockchain_models.QueryAccountMappingresultRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryAccountMappingresultResponse:
        """
        Description: 查询批量映射结果的接口
        Summary: 查询批量映射的结果
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryAccountMappingresultResponse().from_map(
            await self.do_request_async('1.0', 'baas.account.mappingresult.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_account_mapping(
        self,
        request: blockchain_models.QueryAccountMappingRequest,
    ) -> blockchain_models.QueryAccountMappingResponse:
        """
        Description: 查询商户下账户在链上账号映射情况
        Summary: 单个查询用户映射情况信息
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_account_mapping_ex(request, headers, runtime)

    async def query_account_mapping_async(
        self,
        request: blockchain_models.QueryAccountMappingRequest,
    ) -> blockchain_models.QueryAccountMappingResponse:
        """
        Description: 查询商户下账户在链上账号映射情况
        Summary: 单个查询用户映射情况信息
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_account_mapping_ex_async(request, headers, runtime)

    def query_account_mapping_ex(
        self,
        request: blockchain_models.QueryAccountMappingRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryAccountMappingResponse:
        """
        Description: 查询商户下账户在链上账号映射情况
        Summary: 单个查询用户映射情况信息
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryAccountMappingResponse().from_map(
            self.do_request('1.0', 'baas.account.mapping.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_account_mapping_ex_async(
        self,
        request: blockchain_models.QueryAccountMappingRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryAccountMappingResponse:
        """
        Description: 查询商户下账户在链上账号映射情况
        Summary: 单个查询用户映射情况信息
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryAccountMappingResponse().from_map(
            await self.do_request_async('1.0', 'baas.account.mapping.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def batchquery_account_mapping(
        self,
        request: blockchain_models.BatchqueryAccountMappingRequest,
    ) -> blockchain_models.BatchqueryAccountMappingResponse:
        """
        Description: 批量查询商户下已映射的账户信息
        Summary: 批量查询商户下已映射的账户信息
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.batchquery_account_mapping_ex(request, headers, runtime)

    async def batchquery_account_mapping_async(
        self,
        request: blockchain_models.BatchqueryAccountMappingRequest,
    ) -> blockchain_models.BatchqueryAccountMappingResponse:
        """
        Description: 批量查询商户下已映射的账户信息
        Summary: 批量查询商户下已映射的账户信息
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.batchquery_account_mapping_ex_async(request, headers, runtime)

    def batchquery_account_mapping_ex(
        self,
        request: blockchain_models.BatchqueryAccountMappingRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.BatchqueryAccountMappingResponse:
        """
        Description: 批量查询商户下已映射的账户信息
        Summary: 批量查询商户下已映射的账户信息
        """
        UtilClient.validate_model(request)
        return blockchain_models.BatchqueryAccountMappingResponse().from_map(
            self.do_request('1.0', 'baas.account.mapping.batchquery', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def batchquery_account_mapping_ex_async(
        self,
        request: blockchain_models.BatchqueryAccountMappingRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.BatchqueryAccountMappingResponse:
        """
        Description: 批量查询商户下已映射的账户信息
        Summary: 批量查询商户下已映射的账户信息
        """
        UtilClient.validate_model(request)
        return blockchain_models.BatchqueryAccountMappingResponse().from_map(
            await self.do_request_async('1.0', 'baas.account.mapping.batchquery', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def create_account_mapping_info(
        self,
        request: blockchain_models.CreateAccountMappingInfoRequest,
    ) -> blockchain_models.CreateAccountMappingInfoResponse:
        """
        Description: 用户信息存储
        Summary: 用户信息存储
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.create_account_mapping_info_ex(request, headers, runtime)

    async def create_account_mapping_info_async(
        self,
        request: blockchain_models.CreateAccountMappingInfoRequest,
    ) -> blockchain_models.CreateAccountMappingInfoResponse:
        """
        Description: 用户信息存储
        Summary: 用户信息存储
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.create_account_mapping_info_ex_async(request, headers, runtime)

    def create_account_mapping_info_ex(
        self,
        request: blockchain_models.CreateAccountMappingInfoRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateAccountMappingInfoResponse:
        """
        Description: 用户信息存储
        Summary: 用户信息存储
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateAccountMappingInfoResponse().from_map(
            self.do_request('1.0', 'baas.account.mapping.info.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def create_account_mapping_info_ex_async(
        self,
        request: blockchain_models.CreateAccountMappingInfoRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateAccountMappingInfoResponse:
        """
        Description: 用户信息存储
        Summary: 用户信息存储
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateAccountMappingInfoResponse().from_map(
            await self.do_request_async('1.0', 'baas.account.mapping.info.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def batchcreate_account_mapping_info(
        self,
        request: blockchain_models.BatchcreateAccountMappingInfoRequest,
    ) -> blockchain_models.BatchcreateAccountMappingInfoResponse:
        """
        Description: 批量创建用户信息
        Summary: 批量创建用户信息
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.batchcreate_account_mapping_info_ex(request, headers, runtime)

    async def batchcreate_account_mapping_info_async(
        self,
        request: blockchain_models.BatchcreateAccountMappingInfoRequest,
    ) -> blockchain_models.BatchcreateAccountMappingInfoResponse:
        """
        Description: 批量创建用户信息
        Summary: 批量创建用户信息
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.batchcreate_account_mapping_info_ex_async(request, headers, runtime)

    def batchcreate_account_mapping_info_ex(
        self,
        request: blockchain_models.BatchcreateAccountMappingInfoRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.BatchcreateAccountMappingInfoResponse:
        """
        Description: 批量创建用户信息
        Summary: 批量创建用户信息
        """
        UtilClient.validate_model(request)
        return blockchain_models.BatchcreateAccountMappingInfoResponse().from_map(
            self.do_request('1.0', 'baas.account.mapping.info.batchcreate', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def batchcreate_account_mapping_info_ex_async(
        self,
        request: blockchain_models.BatchcreateAccountMappingInfoRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.BatchcreateAccountMappingInfoResponse:
        """
        Description: 批量创建用户信息
        Summary: 批量创建用户信息
        """
        UtilClient.validate_model(request)
        return blockchain_models.BatchcreateAccountMappingInfoResponse().from_map(
            await self.do_request_async('1.0', 'baas.account.mapping.info.batchcreate', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def get_akdf_userbizkey(
        self,
        request: blockchain_models.GetAkdfUserbizkeyRequest,
    ) -> blockchain_models.GetAkdfUserbizkeyResponse:
        """
        Description: 获取用户的密钥对。
        公钥为明文公钥
        私钥为密文，需要用户在本地再做一次解密才能得到真正的私钥
        Summary: 获取用户biz key
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.get_akdf_userbizkey_ex(request, headers, runtime)

    async def get_akdf_userbizkey_async(
        self,
        request: blockchain_models.GetAkdfUserbizkeyRequest,
    ) -> blockchain_models.GetAkdfUserbizkeyResponse:
        """
        Description: 获取用户的密钥对。
        公钥为明文公钥
        私钥为密文，需要用户在本地再做一次解密才能得到真正的私钥
        Summary: 获取用户biz key
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.get_akdf_userbizkey_ex_async(request, headers, runtime)

    def get_akdf_userbizkey_ex(
        self,
        request: blockchain_models.GetAkdfUserbizkeyRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.GetAkdfUserbizkeyResponse:
        """
        Description: 获取用户的密钥对。
        公钥为明文公钥
        私钥为密文，需要用户在本地再做一次解密才能得到真正的私钥
        Summary: 获取用户biz key
        """
        UtilClient.validate_model(request)
        return blockchain_models.GetAkdfUserbizkeyResponse().from_map(
            self.do_request('1.0', 'baas.akdf.userbizkey.get', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def get_akdf_userbizkey_ex_async(
        self,
        request: blockchain_models.GetAkdfUserbizkeyRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.GetAkdfUserbizkeyResponse:
        """
        Description: 获取用户的密钥对。
        公钥为明文公钥
        私钥为密文，需要用户在本地再做一次解密才能得到真正的私钥
        Summary: 获取用户biz key
        """
        UtilClient.validate_model(request)
        return blockchain_models.GetAkdfUserbizkeyResponse().from_map(
            await self.do_request_async('1.0', 'baas.akdf.userbizkey.get', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def list_akdf_userbizkey(
        self,
        request: blockchain_models.ListAkdfUserbizkeyRequest,
    ) -> blockchain_models.ListAkdfUserbizkeyResponse:
        """
        Description: 列出用户在某条链上所有的密钥
        Summary: 列出密钥
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.list_akdf_userbizkey_ex(request, headers, runtime)

    async def list_akdf_userbizkey_async(
        self,
        request: blockchain_models.ListAkdfUserbizkeyRequest,
    ) -> blockchain_models.ListAkdfUserbizkeyResponse:
        """
        Description: 列出用户在某条链上所有的密钥
        Summary: 列出密钥
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.list_akdf_userbizkey_ex_async(request, headers, runtime)

    def list_akdf_userbizkey_ex(
        self,
        request: blockchain_models.ListAkdfUserbizkeyRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.ListAkdfUserbizkeyResponse:
        """
        Description: 列出用户在某条链上所有的密钥
        Summary: 列出密钥
        """
        UtilClient.validate_model(request)
        return blockchain_models.ListAkdfUserbizkeyResponse().from_map(
            self.do_request('1.0', 'baas.akdf.userbizkey.list', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def list_akdf_userbizkey_ex_async(
        self,
        request: blockchain_models.ListAkdfUserbizkeyRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.ListAkdfUserbizkeyResponse:
        """
        Description: 列出用户在某条链上所有的密钥
        Summary: 列出密钥
        """
        UtilClient.validate_model(request)
        return blockchain_models.ListAkdfUserbizkeyResponse().from_map(
            await self.do_request_async('1.0', 'baas.akdf.userbizkey.list', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def check_blockchain_order(
        self,
        request: blockchain_models.CheckBlockchainOrderRequest,
    ) -> blockchain_models.CheckBlockchainOrderResponse:
        """
        Description: 根据用户选择的规则和订单类型，生成instanceId给commondriver
        Summary: 下单
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.check_blockchain_order_ex(request, headers, runtime)

    async def check_blockchain_order_async(
        self,
        request: blockchain_models.CheckBlockchainOrderRequest,
    ) -> blockchain_models.CheckBlockchainOrderResponse:
        """
        Description: 根据用户选择的规则和订单类型，生成instanceId给commondriver
        Summary: 下单
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.check_blockchain_order_ex_async(request, headers, runtime)

    def check_blockchain_order_ex(
        self,
        request: blockchain_models.CheckBlockchainOrderRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CheckBlockchainOrderResponse:
        """
        Description: 根据用户选择的规则和订单类型，生成instanceId给commondriver
        Summary: 下单
        """
        UtilClient.validate_model(request)
        return blockchain_models.CheckBlockchainOrderResponse().from_map(
            self.do_request('1.0', 'baas.blockchain.order.check', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def check_blockchain_order_ex_async(
        self,
        request: blockchain_models.CheckBlockchainOrderRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CheckBlockchainOrderResponse:
        """
        Description: 根据用户选择的规则和订单类型，生成instanceId给commondriver
        Summary: 下单
        """
        UtilClient.validate_model(request)
        return blockchain_models.CheckBlockchainOrderResponse().from_map(
            await self.do_request_async('1.0', 'baas.blockchain.order.check', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def verify_blockchain_order(
        self,
        request: blockchain_models.VerifyBlockchainOrderRequest,
    ) -> blockchain_models.VerifyBlockchainOrderResponse:
        """
        Description: 下单前校验
        Summary: 下单前校验
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.verify_blockchain_order_ex(request, headers, runtime)

    async def verify_blockchain_order_async(
        self,
        request: blockchain_models.VerifyBlockchainOrderRequest,
    ) -> blockchain_models.VerifyBlockchainOrderResponse:
        """
        Description: 下单前校验
        Summary: 下单前校验
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.verify_blockchain_order_ex_async(request, headers, runtime)

    def verify_blockchain_order_ex(
        self,
        request: blockchain_models.VerifyBlockchainOrderRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.VerifyBlockchainOrderResponse:
        """
        Description: 下单前校验
        Summary: 下单前校验
        """
        UtilClient.validate_model(request)
        return blockchain_models.VerifyBlockchainOrderResponse().from_map(
            self.do_request('1.0', 'baas.blockchain.order.verify', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def verify_blockchain_order_ex_async(
        self,
        request: blockchain_models.VerifyBlockchainOrderRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.VerifyBlockchainOrderResponse:
        """
        Description: 下单前校验
        Summary: 下单前校验
        """
        UtilClient.validate_model(request)
        return blockchain_models.VerifyBlockchainOrderResponse().from_map(
            await self.do_request_async('1.0', 'baas.blockchain.order.verify', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def invalidate_blockchain_order(
        self,
        request: blockchain_models.InvalidateBlockchainOrderRequest,
    ) -> blockchain_models.InvalidateBlockchainOrderResponse:
        """
        Description: 退款
        Summary: 退款
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.invalidate_blockchain_order_ex(request, headers, runtime)

    async def invalidate_blockchain_order_async(
        self,
        request: blockchain_models.InvalidateBlockchainOrderRequest,
    ) -> blockchain_models.InvalidateBlockchainOrderResponse:
        """
        Description: 退款
        Summary: 退款
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.invalidate_blockchain_order_ex_async(request, headers, runtime)

    def invalidate_blockchain_order_ex(
        self,
        request: blockchain_models.InvalidateBlockchainOrderRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.InvalidateBlockchainOrderResponse:
        """
        Description: 退款
        Summary: 退款
        """
        UtilClient.validate_model(request)
        return blockchain_models.InvalidateBlockchainOrderResponse().from_map(
            self.do_request('1.0', 'baas.blockchain.order.invalidate', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def invalidate_blockchain_order_ex_async(
        self,
        request: blockchain_models.InvalidateBlockchainOrderRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.InvalidateBlockchainOrderResponse:
        """
        Description: 退款
        Summary: 退款
        """
        UtilClient.validate_model(request)
        return blockchain_models.InvalidateBlockchainOrderResponse().from_map(
            await self.do_request_async('1.0', 'baas.blockchain.order.invalidate', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def release_blockchain_order_physical(
        self,
        request: blockchain_models.ReleaseBlockchainOrderPhysicalRequest,
    ) -> blockchain_models.ReleaseBlockchainOrderPhysicalResponse:
        """
        Description: 删除物理资源
        Summary: 删除物理资源
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.release_blockchain_order_physical_ex(request, headers, runtime)

    async def release_blockchain_order_physical_async(
        self,
        request: blockchain_models.ReleaseBlockchainOrderPhysicalRequest,
    ) -> blockchain_models.ReleaseBlockchainOrderPhysicalResponse:
        """
        Description: 删除物理资源
        Summary: 删除物理资源
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.release_blockchain_order_physical_ex_async(request, headers, runtime)

    def release_blockchain_order_physical_ex(
        self,
        request: blockchain_models.ReleaseBlockchainOrderPhysicalRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.ReleaseBlockchainOrderPhysicalResponse:
        """
        Description: 删除物理资源
        Summary: 删除物理资源
        """
        UtilClient.validate_model(request)
        return blockchain_models.ReleaseBlockchainOrderPhysicalResponse().from_map(
            self.do_request('1.0', 'baas.blockchain.order.physical.release', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def release_blockchain_order_physical_ex_async(
        self,
        request: blockchain_models.ReleaseBlockchainOrderPhysicalRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.ReleaseBlockchainOrderPhysicalResponse:
        """
        Description: 删除物理资源
        Summary: 删除物理资源
        """
        UtilClient.validate_model(request)
        return blockchain_models.ReleaseBlockchainOrderPhysicalResponse().from_map(
            await self.do_request_async('1.0', 'baas.blockchain.order.physical.release', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def release_blockchain_order_logical(
        self,
        request: blockchain_models.ReleaseBlockchainOrderLogicalRequest,
    ) -> blockchain_models.ReleaseBlockchainOrderLogicalResponse:
        """
        Description: 逻辑资源删除
        Summary: 逻辑资源删除
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.release_blockchain_order_logical_ex(request, headers, runtime)

    async def release_blockchain_order_logical_async(
        self,
        request: blockchain_models.ReleaseBlockchainOrderLogicalRequest,
    ) -> blockchain_models.ReleaseBlockchainOrderLogicalResponse:
        """
        Description: 逻辑资源删除
        Summary: 逻辑资源删除
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.release_blockchain_order_logical_ex_async(request, headers, runtime)

    def release_blockchain_order_logical_ex(
        self,
        request: blockchain_models.ReleaseBlockchainOrderLogicalRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.ReleaseBlockchainOrderLogicalResponse:
        """
        Description: 逻辑资源删除
        Summary: 逻辑资源删除
        """
        UtilClient.validate_model(request)
        return blockchain_models.ReleaseBlockchainOrderLogicalResponse().from_map(
            self.do_request('1.0', 'baas.blockchain.order.logical.release', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def release_blockchain_order_logical_ex_async(
        self,
        request: blockchain_models.ReleaseBlockchainOrderLogicalRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.ReleaseBlockchainOrderLogicalResponse:
        """
        Description: 逻辑资源删除
        Summary: 逻辑资源删除
        """
        UtilClient.validate_model(request)
        return blockchain_models.ReleaseBlockchainOrderLogicalResponse().from_map(
            await self.do_request_async('1.0', 'baas.blockchain.order.logical.release', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def check_blockchain_resource(
        self,
        request: blockchain_models.CheckBlockchainResourceRequest,
    ) -> blockchain_models.CheckBlockchainResourceResponse:
        """
        Description: 资源检查
        Summary: 资源检查
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.check_blockchain_resource_ex(request, headers, runtime)

    async def check_blockchain_resource_async(
        self,
        request: blockchain_models.CheckBlockchainResourceRequest,
    ) -> blockchain_models.CheckBlockchainResourceResponse:
        """
        Description: 资源检查
        Summary: 资源检查
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.check_blockchain_resource_ex_async(request, headers, runtime)

    def check_blockchain_resource_ex(
        self,
        request: blockchain_models.CheckBlockchainResourceRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CheckBlockchainResourceResponse:
        """
        Description: 资源检查
        Summary: 资源检查
        """
        UtilClient.validate_model(request)
        return blockchain_models.CheckBlockchainResourceResponse().from_map(
            self.do_request('1.0', 'baas.blockchain.resource.check', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def check_blockchain_resource_ex_async(
        self,
        request: blockchain_models.CheckBlockchainResourceRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CheckBlockchainResourceResponse:
        """
        Description: 资源检查
        Summary: 资源检查
        """
        UtilClient.validate_model(request)
        return blockchain_models.CheckBlockchainResourceResponse().from_map(
            await self.do_request_async('1.0', 'baas.blockchain.resource.check', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def confirm_blockchain_order(
        self,
        request: blockchain_models.ConfirmBlockchainOrderRequest,
    ) -> blockchain_models.ConfirmBlockchainOrderResponse:
        """
        Description: 补齐商品信息
        Summary: 补齐商品信息
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.confirm_blockchain_order_ex(request, headers, runtime)

    async def confirm_blockchain_order_async(
        self,
        request: blockchain_models.ConfirmBlockchainOrderRequest,
    ) -> blockchain_models.ConfirmBlockchainOrderResponse:
        """
        Description: 补齐商品信息
        Summary: 补齐商品信息
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.confirm_blockchain_order_ex_async(request, headers, runtime)

    def confirm_blockchain_order_ex(
        self,
        request: blockchain_models.ConfirmBlockchainOrderRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.ConfirmBlockchainOrderResponse:
        """
        Description: 补齐商品信息
        Summary: 补齐商品信息
        """
        UtilClient.validate_model(request)
        return blockchain_models.ConfirmBlockchainOrderResponse().from_map(
            self.do_request('1.0', 'baas.blockchain.order.confirm', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def confirm_blockchain_order_ex_async(
        self,
        request: blockchain_models.ConfirmBlockchainOrderRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.ConfirmBlockchainOrderResponse:
        """
        Description: 补齐商品信息
        Summary: 补齐商品信息
        """
        UtilClient.validate_model(request)
        return blockchain_models.ConfirmBlockchainOrderResponse().from_map(
            await self.do_request_async('1.0', 'baas.blockchain.order.confirm', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def connect_blockchain_order(
        self,
        request: blockchain_models.ConnectBlockchainOrderRequest,
    ) -> blockchain_models.ConnectBlockchainOrderResponse:
        """
        Description: 检查
        Summary: 检查
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.connect_blockchain_order_ex(request, headers, runtime)

    async def connect_blockchain_order_async(
        self,
        request: blockchain_models.ConnectBlockchainOrderRequest,
    ) -> blockchain_models.ConnectBlockchainOrderResponse:
        """
        Description: 检查
        Summary: 检查
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.connect_blockchain_order_ex_async(request, headers, runtime)

    def connect_blockchain_order_ex(
        self,
        request: blockchain_models.ConnectBlockchainOrderRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.ConnectBlockchainOrderResponse:
        """
        Description: 检查
        Summary: 检查
        """
        UtilClient.validate_model(request)
        return blockchain_models.ConnectBlockchainOrderResponse().from_map(
            self.do_request('1.0', 'baas.blockchain.order.connect', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def connect_blockchain_order_ex_async(
        self,
        request: blockchain_models.ConnectBlockchainOrderRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.ConnectBlockchainOrderResponse:
        """
        Description: 检查
        Summary: 检查
        """
        UtilClient.validate_model(request)
        return blockchain_models.ConnectBlockchainOrderResponse().from_map(
            await self.do_request_async('1.0', 'baas.blockchain.order.connect', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def exec_blockchain_order(
        self,
        request: blockchain_models.ExecBlockchainOrderRequest,
    ) -> blockchain_models.ExecBlockchainOrderResponse:
        """
        Description: 阿里云区块链订单创建接口
        Summary: 阿里云区块链订单创建接口
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.exec_blockchain_order_ex(request, headers, runtime)

    async def exec_blockchain_order_async(
        self,
        request: blockchain_models.ExecBlockchainOrderRequest,
    ) -> blockchain_models.ExecBlockchainOrderResponse:
        """
        Description: 阿里云区块链订单创建接口
        Summary: 阿里云区块链订单创建接口
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.exec_blockchain_order_ex_async(request, headers, runtime)

    def exec_blockchain_order_ex(
        self,
        request: blockchain_models.ExecBlockchainOrderRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.ExecBlockchainOrderResponse:
        """
        Description: 阿里云区块链订单创建接口
        Summary: 阿里云区块链订单创建接口
        """
        UtilClient.validate_model(request)
        return blockchain_models.ExecBlockchainOrderResponse().from_map(
            self.do_request('1.0', 'baas.blockchain.order.exec', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def exec_blockchain_order_ex_async(
        self,
        request: blockchain_models.ExecBlockchainOrderRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.ExecBlockchainOrderResponse:
        """
        Description: 阿里云区块链订单创建接口
        Summary: 阿里云区块链订单创建接口
        """
        UtilClient.validate_model(request)
        return blockchain_models.ExecBlockchainOrderResponse().from_map(
            await self.do_request_async('1.0', 'baas.blockchain.order.exec', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def create_union_union(
        self,
        request: blockchain_models.CreateUnionUnionRequest,
    ) -> blockchain_models.CreateUnionUnionResponse:
        """
        Description: 创建联盟
        Summary: 创建联盟
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.create_union_union_ex(request, headers, runtime)

    async def create_union_union_async(
        self,
        request: blockchain_models.CreateUnionUnionRequest,
    ) -> blockchain_models.CreateUnionUnionResponse:
        """
        Description: 创建联盟
        Summary: 创建联盟
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.create_union_union_ex_async(request, headers, runtime)

    def create_union_union_ex(
        self,
        request: blockchain_models.CreateUnionUnionRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateUnionUnionResponse:
        """
        Description: 创建联盟
        Summary: 创建联盟
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateUnionUnionResponse().from_map(
            self.do_request('1.0', 'baas.union.union.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def create_union_union_ex_async(
        self,
        request: blockchain_models.CreateUnionUnionRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateUnionUnionResponse:
        """
        Description: 创建联盟
        Summary: 创建联盟
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateUnionUnionResponse().from_map(
            await self.do_request_async('1.0', 'baas.union.union.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def delete_union_union(
        self,
        request: blockchain_models.DeleteUnionUnionRequest,
    ) -> blockchain_models.DeleteUnionUnionResponse:
        """
        Description: 删除联盟
        Summary: 删除联盟
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.delete_union_union_ex(request, headers, runtime)

    async def delete_union_union_async(
        self,
        request: blockchain_models.DeleteUnionUnionRequest,
    ) -> blockchain_models.DeleteUnionUnionResponse:
        """
        Description: 删除联盟
        Summary: 删除联盟
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.delete_union_union_ex_async(request, headers, runtime)

    def delete_union_union_ex(
        self,
        request: blockchain_models.DeleteUnionUnionRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.DeleteUnionUnionResponse:
        """
        Description: 删除联盟
        Summary: 删除联盟
        """
        UtilClient.validate_model(request)
        return blockchain_models.DeleteUnionUnionResponse().from_map(
            self.do_request('1.0', 'baas.union.union.delete', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def delete_union_union_ex_async(
        self,
        request: blockchain_models.DeleteUnionUnionRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.DeleteUnionUnionResponse:
        """
        Description: 删除联盟
        Summary: 删除联盟
        """
        UtilClient.validate_model(request)
        return blockchain_models.DeleteUnionUnionResponse().from_map(
            await self.do_request_async('1.0', 'baas.union.union.delete', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def update_union_union(
        self,
        request: blockchain_models.UpdateUnionUnionRequest,
    ) -> blockchain_models.UpdateUnionUnionResponse:
        """
        Description: 联盟更新
        Summary: 联盟更新
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.update_union_union_ex(request, headers, runtime)

    async def update_union_union_async(
        self,
        request: blockchain_models.UpdateUnionUnionRequest,
    ) -> blockchain_models.UpdateUnionUnionResponse:
        """
        Description: 联盟更新
        Summary: 联盟更新
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.update_union_union_ex_async(request, headers, runtime)

    def update_union_union_ex(
        self,
        request: blockchain_models.UpdateUnionUnionRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.UpdateUnionUnionResponse:
        """
        Description: 联盟更新
        Summary: 联盟更新
        """
        UtilClient.validate_model(request)
        return blockchain_models.UpdateUnionUnionResponse().from_map(
            self.do_request('1.0', 'baas.union.union.update', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def update_union_union_ex_async(
        self,
        request: blockchain_models.UpdateUnionUnionRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.UpdateUnionUnionResponse:
        """
        Description: 联盟更新
        Summary: 联盟更新
        """
        UtilClient.validate_model(request)
        return blockchain_models.UpdateUnionUnionResponse().from_map(
            await self.do_request_async('1.0', 'baas.union.union.update', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_union_union(
        self,
        request: blockchain_models.QueryUnionUnionRequest,
    ) -> blockchain_models.QueryUnionUnionResponse:
        """
        Description: 联盟查询
        Summary: 联盟查询
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_union_union_ex(request, headers, runtime)

    async def query_union_union_async(
        self,
        request: blockchain_models.QueryUnionUnionRequest,
    ) -> blockchain_models.QueryUnionUnionResponse:
        """
        Description: 联盟查询
        Summary: 联盟查询
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_union_union_ex_async(request, headers, runtime)

    def query_union_union_ex(
        self,
        request: blockchain_models.QueryUnionUnionRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryUnionUnionResponse:
        """
        Description: 联盟查询
        Summary: 联盟查询
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryUnionUnionResponse().from_map(
            self.do_request('1.0', 'baas.union.union.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_union_union_ex_async(
        self,
        request: blockchain_models.QueryUnionUnionRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryUnionUnionResponse:
        """
        Description: 联盟查询
        Summary: 联盟查询
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryUnionUnionResponse().from_map(
            await self.do_request_async('1.0', 'baas.union.union.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def apply_union_member(
        self,
        request: blockchain_models.ApplyUnionMemberRequest,
    ) -> blockchain_models.ApplyUnionMemberResponse:
        """
        Description: 联盟邀请用户
        Summary: 联盟邀请用户
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.apply_union_member_ex(request, headers, runtime)

    async def apply_union_member_async(
        self,
        request: blockchain_models.ApplyUnionMemberRequest,
    ) -> blockchain_models.ApplyUnionMemberResponse:
        """
        Description: 联盟邀请用户
        Summary: 联盟邀请用户
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.apply_union_member_ex_async(request, headers, runtime)

    def apply_union_member_ex(
        self,
        request: blockchain_models.ApplyUnionMemberRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.ApplyUnionMemberResponse:
        """
        Description: 联盟邀请用户
        Summary: 联盟邀请用户
        """
        UtilClient.validate_model(request)
        return blockchain_models.ApplyUnionMemberResponse().from_map(
            self.do_request('1.0', 'baas.union.member.apply', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def apply_union_member_ex_async(
        self,
        request: blockchain_models.ApplyUnionMemberRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.ApplyUnionMemberResponse:
        """
        Description: 联盟邀请用户
        Summary: 联盟邀请用户
        """
        UtilClient.validate_model(request)
        return blockchain_models.ApplyUnionMemberResponse().from_map(
            await self.do_request_async('1.0', 'baas.union.member.apply', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def confirm_union_member(
        self,
        request: blockchain_models.ConfirmUnionMemberRequest,
    ) -> blockchain_models.ConfirmUnionMemberResponse:
        """
        Description: 阿里云联盟成员加入
        Summary: 阿里云联盟成员加入
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.confirm_union_member_ex(request, headers, runtime)

    async def confirm_union_member_async(
        self,
        request: blockchain_models.ConfirmUnionMemberRequest,
    ) -> blockchain_models.ConfirmUnionMemberResponse:
        """
        Description: 阿里云联盟成员加入
        Summary: 阿里云联盟成员加入
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.confirm_union_member_ex_async(request, headers, runtime)

    def confirm_union_member_ex(
        self,
        request: blockchain_models.ConfirmUnionMemberRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.ConfirmUnionMemberResponse:
        """
        Description: 阿里云联盟成员加入
        Summary: 阿里云联盟成员加入
        """
        UtilClient.validate_model(request)
        return blockchain_models.ConfirmUnionMemberResponse().from_map(
            self.do_request('1.0', 'baas.union.member.confirm', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def confirm_union_member_ex_async(
        self,
        request: blockchain_models.ConfirmUnionMemberRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.ConfirmUnionMemberResponse:
        """
        Description: 阿里云联盟成员加入
        Summary: 阿里云联盟成员加入
        """
        UtilClient.validate_model(request)
        return blockchain_models.ConfirmUnionMemberResponse().from_map(
            await self.do_request_async('1.0', 'baas.union.member.confirm', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_union_chain(
        self,
        request: blockchain_models.QueryUnionChainRequest,
    ) -> blockchain_models.QueryUnionChainResponse:
        """
        Description: 获取联盟内的蚂蚁区块链列表
        Summary: 获取联盟内的蚂蚁区块链列表
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_union_chain_ex(request, headers, runtime)

    async def query_union_chain_async(
        self,
        request: blockchain_models.QueryUnionChainRequest,
    ) -> blockchain_models.QueryUnionChainResponse:
        """
        Description: 获取联盟内的蚂蚁区块链列表
        Summary: 获取联盟内的蚂蚁区块链列表
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_union_chain_ex_async(request, headers, runtime)

    def query_union_chain_ex(
        self,
        request: blockchain_models.QueryUnionChainRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryUnionChainResponse:
        """
        Description: 获取联盟内的蚂蚁区块链列表
        Summary: 获取联盟内的蚂蚁区块链列表
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryUnionChainResponse().from_map(
            self.do_request('1.0', 'baas.union.chain.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_union_chain_ex_async(
        self,
        request: blockchain_models.QueryUnionChainRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryUnionChainResponse:
        """
        Description: 获取联盟内的蚂蚁区块链列表
        Summary: 获取联盟内的蚂蚁区块链列表
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryUnionChainResponse().from_map(
            await self.do_request_async('1.0', 'baas.union.chain.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_union_member(
        self,
        request: blockchain_models.QueryUnionMemberRequest,
    ) -> blockchain_models.QueryUnionMemberResponse:
        """
        Description: 获取联盟成员列表
        Summary: 获取联盟成员列表
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_union_member_ex(request, headers, runtime)

    async def query_union_member_async(
        self,
        request: blockchain_models.QueryUnionMemberRequest,
    ) -> blockchain_models.QueryUnionMemberResponse:
        """
        Description: 获取联盟成员列表
        Summary: 获取联盟成员列表
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_union_member_ex_async(request, headers, runtime)

    def query_union_member_ex(
        self,
        request: blockchain_models.QueryUnionMemberRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryUnionMemberResponse:
        """
        Description: 获取联盟成员列表
        Summary: 获取联盟成员列表
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryUnionMemberResponse().from_map(
            self.do_request('1.0', 'baas.union.member.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_union_member_ex_async(
        self,
        request: blockchain_models.QueryUnionMemberRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryUnionMemberResponse:
        """
        Description: 获取联盟成员列表
        Summary: 获取联盟成员列表
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryUnionMemberResponse().from_map(
            await self.do_request_async('1.0', 'baas.union.member.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def update_union_member(
        self,
        request: blockchain_models.UpdateUnionMemberRequest,
    ) -> blockchain_models.UpdateUnionMemberResponse:
        """
        Description: 更新联盟成员属性
        Summary: 更新联盟成员属性
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.update_union_member_ex(request, headers, runtime)

    async def update_union_member_async(
        self,
        request: blockchain_models.UpdateUnionMemberRequest,
    ) -> blockchain_models.UpdateUnionMemberResponse:
        """
        Description: 更新联盟成员属性
        Summary: 更新联盟成员属性
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.update_union_member_ex_async(request, headers, runtime)

    def update_union_member_ex(
        self,
        request: blockchain_models.UpdateUnionMemberRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.UpdateUnionMemberResponse:
        """
        Description: 更新联盟成员属性
        Summary: 更新联盟成员属性
        """
        UtilClient.validate_model(request)
        return blockchain_models.UpdateUnionMemberResponse().from_map(
            self.do_request('1.0', 'baas.union.member.update', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def update_union_member_ex_async(
        self,
        request: blockchain_models.UpdateUnionMemberRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.UpdateUnionMemberResponse:
        """
        Description: 更新联盟成员属性
        Summary: 更新联盟成员属性
        """
        UtilClient.validate_model(request)
        return blockchain_models.UpdateUnionMemberResponse().from_map(
            await self.do_request_async('1.0', 'baas.union.member.update', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def update_chain_name_ant(
        self,
        request: blockchain_models.UpdateChainNameAntRequest,
    ) -> blockchain_models.UpdateChainNameAntResponse:
        """
        Description: 更新区块链的名称
        Summary: 更新区块链的名称
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.update_chain_name_ant_ex(request, headers, runtime)

    async def update_chain_name_ant_async(
        self,
        request: blockchain_models.UpdateChainNameAntRequest,
    ) -> blockchain_models.UpdateChainNameAntResponse:
        """
        Description: 更新区块链的名称
        Summary: 更新区块链的名称
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.update_chain_name_ant_ex_async(request, headers, runtime)

    def update_chain_name_ant_ex(
        self,
        request: blockchain_models.UpdateChainNameAntRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.UpdateChainNameAntResponse:
        """
        Description: 更新区块链的名称
        Summary: 更新区块链的名称
        """
        UtilClient.validate_model(request)
        return blockchain_models.UpdateChainNameAntResponse().from_map(
            self.do_request('1.0', 'baas.chain.name.ant.update', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def update_chain_name_ant_ex_async(
        self,
        request: blockchain_models.UpdateChainNameAntRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.UpdateChainNameAntResponse:
        """
        Description: 更新区块链的名称
        Summary: 更新区块链的名称
        """
        UtilClient.validate_model(request)
        return blockchain_models.UpdateChainNameAntResponse().from_map(
            await self.do_request_async('1.0', 'baas.chain.name.ant.update', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def create_chain_cert_ant(
        self,
        request: blockchain_models.CreateChainCertAntRequest,
    ) -> blockchain_models.CreateChainCertAntResponse:
        """
        Description: 手工创建区块链证书
        Summary: 手工创建区块链证书
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.create_chain_cert_ant_ex(request, headers, runtime)

    async def create_chain_cert_ant_async(
        self,
        request: blockchain_models.CreateChainCertAntRequest,
    ) -> blockchain_models.CreateChainCertAntResponse:
        """
        Description: 手工创建区块链证书
        Summary: 手工创建区块链证书
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.create_chain_cert_ant_ex_async(request, headers, runtime)

    def create_chain_cert_ant_ex(
        self,
        request: blockchain_models.CreateChainCertAntRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateChainCertAntResponse:
        """
        Description: 手工创建区块链证书
        Summary: 手工创建区块链证书
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateChainCertAntResponse().from_map(
            self.do_request('1.0', 'baas.chain.cert.ant.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def create_chain_cert_ant_ex_async(
        self,
        request: blockchain_models.CreateChainCertAntRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateChainCertAntResponse:
        """
        Description: 手工创建区块链证书
        Summary: 手工创建区块链证书
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateChainCertAntResponse().from_map(
            await self.do_request_async('1.0', 'baas.chain.cert.ant.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def apply_chain_cert_ant(
        self,
        request: blockchain_models.ApplyChainCertAntRequest,
    ) -> blockchain_models.ApplyChainCertAntResponse:
        """
        Description: 自动申请区块链证书
        Summary: 自动申请区块链证书
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.apply_chain_cert_ant_ex(request, headers, runtime)

    async def apply_chain_cert_ant_async(
        self,
        request: blockchain_models.ApplyChainCertAntRequest,
    ) -> blockchain_models.ApplyChainCertAntResponse:
        """
        Description: 自动申请区块链证书
        Summary: 自动申请区块链证书
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.apply_chain_cert_ant_ex_async(request, headers, runtime)

    def apply_chain_cert_ant_ex(
        self,
        request: blockchain_models.ApplyChainCertAntRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.ApplyChainCertAntResponse:
        """
        Description: 自动申请区块链证书
        Summary: 自动申请区块链证书
        """
        UtilClient.validate_model(request)
        return blockchain_models.ApplyChainCertAntResponse().from_map(
            self.do_request('1.0', 'baas.chain.cert.ant.apply', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def apply_chain_cert_ant_ex_async(
        self,
        request: blockchain_models.ApplyChainCertAntRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.ApplyChainCertAntResponse:
        """
        Description: 自动申请区块链证书
        Summary: 自动申请区块链证书
        """
        UtilClient.validate_model(request)
        return blockchain_models.ApplyChainCertAntResponse().from_map(
            await self.do_request_async('1.0', 'baas.chain.cert.ant.apply', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def create_chain_public_cert(
        self,
        request: blockchain_models.CreateChainPublicCertRequest,
    ) -> blockchain_models.CreateChainPublicCertResponse:
        """
        Description: 人工申请区块链证书
        Summary: 人工申请区块链证书
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.create_chain_public_cert_ex(request, headers, runtime)

    async def create_chain_public_cert_async(
        self,
        request: blockchain_models.CreateChainPublicCertRequest,
    ) -> blockchain_models.CreateChainPublicCertResponse:
        """
        Description: 人工申请区块链证书
        Summary: 人工申请区块链证书
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.create_chain_public_cert_ex_async(request, headers, runtime)

    def create_chain_public_cert_ex(
        self,
        request: blockchain_models.CreateChainPublicCertRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateChainPublicCertResponse:
        """
        Description: 人工申请区块链证书
        Summary: 人工申请区块链证书
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateChainPublicCertResponse().from_map(
            self.do_request('1.0', 'baas.chain.public.cert.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def create_chain_public_cert_ex_async(
        self,
        request: blockchain_models.CreateChainPublicCertRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateChainPublicCertResponse:
        """
        Description: 人工申请区块链证书
        Summary: 人工申请区块链证书
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateChainPublicCertResponse().from_map(
            await self.do_request_async('1.0', 'baas.chain.public.cert.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def apply_chain_public_cert(
        self,
        request: blockchain_models.ApplyChainPublicCertRequest,
    ) -> blockchain_models.ApplyChainPublicCertResponse:
        """
        Description: 自动创建区块链证书
        Summary: 自动创建区块链证书
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.apply_chain_public_cert_ex(request, headers, runtime)

    async def apply_chain_public_cert_async(
        self,
        request: blockchain_models.ApplyChainPublicCertRequest,
    ) -> blockchain_models.ApplyChainPublicCertResponse:
        """
        Description: 自动创建区块链证书
        Summary: 自动创建区块链证书
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.apply_chain_public_cert_ex_async(request, headers, runtime)

    def apply_chain_public_cert_ex(
        self,
        request: blockchain_models.ApplyChainPublicCertRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.ApplyChainPublicCertResponse:
        """
        Description: 自动创建区块链证书
        Summary: 自动创建区块链证书
        """
        UtilClient.validate_model(request)
        return blockchain_models.ApplyChainPublicCertResponse().from_map(
            self.do_request('1.0', 'baas.chain.public.cert.apply', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def apply_chain_public_cert_ex_async(
        self,
        request: blockchain_models.ApplyChainPublicCertRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.ApplyChainPublicCertResponse:
        """
        Description: 自动创建区块链证书
        Summary: 自动创建区块链证书
        """
        UtilClient.validate_model(request)
        return blockchain_models.ApplyChainPublicCertResponse().from_map(
            await self.do_request_async('1.0', 'baas.chain.public.cert.apply', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def reinit_chain_public_cert(
        self,
        request: blockchain_models.ReinitChainPublicCertRequest,
    ) -> blockchain_models.ReinitChainPublicCertResponse:
        """
        Description: 免费体验链重置证书
        Summary: 免费体验链重置证书
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.reinit_chain_public_cert_ex(request, headers, runtime)

    async def reinit_chain_public_cert_async(
        self,
        request: blockchain_models.ReinitChainPublicCertRequest,
    ) -> blockchain_models.ReinitChainPublicCertResponse:
        """
        Description: 免费体验链重置证书
        Summary: 免费体验链重置证书
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.reinit_chain_public_cert_ex_async(request, headers, runtime)

    def reinit_chain_public_cert_ex(
        self,
        request: blockchain_models.ReinitChainPublicCertRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.ReinitChainPublicCertResponse:
        """
        Description: 免费体验链重置证书
        Summary: 免费体验链重置证书
        """
        UtilClient.validate_model(request)
        return blockchain_models.ReinitChainPublicCertResponse().from_map(
            self.do_request('1.0', 'baas.chain.public.cert.reinit', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def reinit_chain_public_cert_ex_async(
        self,
        request: blockchain_models.ReinitChainPublicCertRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.ReinitChainPublicCertResponse:
        """
        Description: 免费体验链重置证书
        Summary: 免费体验链重置证书
        """
        UtilClient.validate_model(request)
        return blockchain_models.ReinitChainPublicCertResponse().from_map(
            await self.do_request_async('1.0', 'baas.chain.public.cert.reinit', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def create_chain_public_account(
        self,
        request: blockchain_models.CreateChainPublicAccountRequest,
    ) -> blockchain_models.CreateChainPublicAccountResponse:
        """
        Description: 免费体验链创建账户
        Summary: 免费体验链创建账户
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.create_chain_public_account_ex(request, headers, runtime)

    async def create_chain_public_account_async(
        self,
        request: blockchain_models.CreateChainPublicAccountRequest,
    ) -> blockchain_models.CreateChainPublicAccountResponse:
        """
        Description: 免费体验链创建账户
        Summary: 免费体验链创建账户
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.create_chain_public_account_ex_async(request, headers, runtime)

    def create_chain_public_account_ex(
        self,
        request: blockchain_models.CreateChainPublicAccountRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateChainPublicAccountResponse:
        """
        Description: 免费体验链创建账户
        Summary: 免费体验链创建账户
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateChainPublicAccountResponse().from_map(
            self.do_request('1.0', 'baas.chain.public.account.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def create_chain_public_account_ex_async(
        self,
        request: blockchain_models.CreateChainPublicAccountRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateChainPublicAccountResponse:
        """
        Description: 免费体验链创建账户
        Summary: 免费体验链创建账户
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateChainPublicAccountResponse().from_map(
            await self.do_request_async('1.0', 'baas.chain.public.account.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def apply_chain_public_account(
        self,
        request: blockchain_models.ApplyChainPublicAccountRequest,
    ) -> blockchain_models.ApplyChainPublicAccountResponse:
        """
        Description: 自动创建链上账户
        Summary: 自动创建链上账户
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.apply_chain_public_account_ex(request, headers, runtime)

    async def apply_chain_public_account_async(
        self,
        request: blockchain_models.ApplyChainPublicAccountRequest,
    ) -> blockchain_models.ApplyChainPublicAccountResponse:
        """
        Description: 自动创建链上账户
        Summary: 自动创建链上账户
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.apply_chain_public_account_ex_async(request, headers, runtime)

    def apply_chain_public_account_ex(
        self,
        request: blockchain_models.ApplyChainPublicAccountRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.ApplyChainPublicAccountResponse:
        """
        Description: 自动创建链上账户
        Summary: 自动创建链上账户
        """
        UtilClient.validate_model(request)
        return blockchain_models.ApplyChainPublicAccountResponse().from_map(
            self.do_request('1.0', 'baas.chain.public.account.apply', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def apply_chain_public_account_ex_async(
        self,
        request: blockchain_models.ApplyChainPublicAccountRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.ApplyChainPublicAccountResponse:
        """
        Description: 自动创建链上账户
        Summary: 自动创建链上账户
        """
        UtilClient.validate_model(request)
        return blockchain_models.ApplyChainPublicAccountResponse().from_map(
            await self.do_request_async('1.0', 'baas.chain.public.account.apply', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_chain_public(
        self,
        request: blockchain_models.QueryChainPublicRequest,
    ) -> blockchain_models.QueryChainPublicResponse:
        """
        Description: 免费体验链查询
        Summary: 免费体验链查询
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_chain_public_ex(request, headers, runtime)

    async def query_chain_public_async(
        self,
        request: blockchain_models.QueryChainPublicRequest,
    ) -> blockchain_models.QueryChainPublicResponse:
        """
        Description: 免费体验链查询
        Summary: 免费体验链查询
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_chain_public_ex_async(request, headers, runtime)

    def query_chain_public_ex(
        self,
        request: blockchain_models.QueryChainPublicRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryChainPublicResponse:
        """
        Description: 免费体验链查询
        Summary: 免费体验链查询
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryChainPublicResponse().from_map(
            self.do_request('1.0', 'baas.chain.public.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_chain_public_ex_async(
        self,
        request: blockchain_models.QueryChainPublicRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryChainPublicResponse:
        """
        Description: 免费体验链查询
        Summary: 免费体验链查询
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryChainPublicResponse().from_map(
            await self.do_request_async('1.0', 'baas.chain.public.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def download_chain_public_cert(
        self,
        request: blockchain_models.DownloadChainPublicCertRequest,
    ) -> blockchain_models.DownloadChainPublicCertResponse:
        """
        Description: 免费体验链证书下载
        Summary: 免费体验链证书下载
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.download_chain_public_cert_ex(request, headers, runtime)

    async def download_chain_public_cert_async(
        self,
        request: blockchain_models.DownloadChainPublicCertRequest,
    ) -> blockchain_models.DownloadChainPublicCertResponse:
        """
        Description: 免费体验链证书下载
        Summary: 免费体验链证书下载
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.download_chain_public_cert_ex_async(request, headers, runtime)

    def download_chain_public_cert_ex(
        self,
        request: blockchain_models.DownloadChainPublicCertRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.DownloadChainPublicCertResponse:
        """
        Description: 免费体验链证书下载
        Summary: 免费体验链证书下载
        """
        UtilClient.validate_model(request)
        return blockchain_models.DownloadChainPublicCertResponse().from_map(
            self.do_request('1.0', 'baas.chain.public.cert.download', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def download_chain_public_cert_ex_async(
        self,
        request: blockchain_models.DownloadChainPublicCertRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.DownloadChainPublicCertResponse:
        """
        Description: 免费体验链证书下载
        Summary: 免费体验链证书下载
        """
        UtilClient.validate_model(request)
        return blockchain_models.DownloadChainPublicCertResponse().from_map(
            await self.do_request_async('1.0', 'baas.chain.public.cert.download', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def create_chain_account_ant(
        self,
        request: blockchain_models.CreateChainAccountAntRequest,
    ) -> blockchain_models.CreateChainAccountAntResponse:
        """
        Description: 手工创建账户
        Summary: 手工创建账户
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.create_chain_account_ant_ex(request, headers, runtime)

    async def create_chain_account_ant_async(
        self,
        request: blockchain_models.CreateChainAccountAntRequest,
    ) -> blockchain_models.CreateChainAccountAntResponse:
        """
        Description: 手工创建账户
        Summary: 手工创建账户
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.create_chain_account_ant_ex_async(request, headers, runtime)

    def create_chain_account_ant_ex(
        self,
        request: blockchain_models.CreateChainAccountAntRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateChainAccountAntResponse:
        """
        Description: 手工创建账户
        Summary: 手工创建账户
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateChainAccountAntResponse().from_map(
            self.do_request('1.0', 'baas.chain.account.ant.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def create_chain_account_ant_ex_async(
        self,
        request: blockchain_models.CreateChainAccountAntRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateChainAccountAntResponse:
        """
        Description: 手工创建账户
        Summary: 手工创建账户
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateChainAccountAntResponse().from_map(
            await self.do_request_async('1.0', 'baas.chain.account.ant.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def apply_chain_account_ant(
        self,
        request: blockchain_models.ApplyChainAccountAntRequest,
    ) -> blockchain_models.ApplyChainAccountAntResponse:
        """
        Description: 自动创建账户
        Summary: 自动创建账户
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.apply_chain_account_ant_ex(request, headers, runtime)

    async def apply_chain_account_ant_async(
        self,
        request: blockchain_models.ApplyChainAccountAntRequest,
    ) -> blockchain_models.ApplyChainAccountAntResponse:
        """
        Description: 自动创建账户
        Summary: 自动创建账户
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.apply_chain_account_ant_ex_async(request, headers, runtime)

    def apply_chain_account_ant_ex(
        self,
        request: blockchain_models.ApplyChainAccountAntRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.ApplyChainAccountAntResponse:
        """
        Description: 自动创建账户
        Summary: 自动创建账户
        """
        UtilClient.validate_model(request)
        return blockchain_models.ApplyChainAccountAntResponse().from_map(
            self.do_request('1.0', 'baas.chain.account.ant.apply', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def apply_chain_account_ant_ex_async(
        self,
        request: blockchain_models.ApplyChainAccountAntRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.ApplyChainAccountAntResponse:
        """
        Description: 自动创建账户
        Summary: 自动创建账户
        """
        UtilClient.validate_model(request)
        return blockchain_models.ApplyChainAccountAntResponse().from_map(
            await self.do_request_async('1.0', 'baas.chain.account.ant.apply', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_chain_account_ant(
        self,
        request: blockchain_models.QueryChainAccountAntRequest,
    ) -> blockchain_models.QueryChainAccountAntResponse:
        """
        Description: 查询链上账户列表
        Summary: 查询链上账户列表
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_chain_account_ant_ex(request, headers, runtime)

    async def query_chain_account_ant_async(
        self,
        request: blockchain_models.QueryChainAccountAntRequest,
    ) -> blockchain_models.QueryChainAccountAntResponse:
        """
        Description: 查询链上账户列表
        Summary: 查询链上账户列表
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_chain_account_ant_ex_async(request, headers, runtime)

    def query_chain_account_ant_ex(
        self,
        request: blockchain_models.QueryChainAccountAntRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryChainAccountAntResponse:
        """
        Description: 查询链上账户列表
        Summary: 查询链上账户列表
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryChainAccountAntResponse().from_map(
            self.do_request('1.0', 'baas.chain.account.ant.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_chain_account_ant_ex_async(
        self,
        request: blockchain_models.QueryChainAccountAntRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryChainAccountAntResponse:
        """
        Description: 查询链上账户列表
        Summary: 查询链上账户列表
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryChainAccountAntResponse().from_map(
            await self.do_request_async('1.0', 'baas.chain.account.ant.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def download_chain_cert_ant(
        self,
        request: blockchain_models.DownloadChainCertAntRequest,
    ) -> blockchain_models.DownloadChainCertAntResponse:
        """
        Description: 区块链证书下载
        Summary: 区块链证书下载
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.download_chain_cert_ant_ex(request, headers, runtime)

    async def download_chain_cert_ant_async(
        self,
        request: blockchain_models.DownloadChainCertAntRequest,
    ) -> blockchain_models.DownloadChainCertAntResponse:
        """
        Description: 区块链证书下载
        Summary: 区块链证书下载
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.download_chain_cert_ant_ex_async(request, headers, runtime)

    def download_chain_cert_ant_ex(
        self,
        request: blockchain_models.DownloadChainCertAntRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.DownloadChainCertAntResponse:
        """
        Description: 区块链证书下载
        Summary: 区块链证书下载
        """
        UtilClient.validate_model(request)
        return blockchain_models.DownloadChainCertAntResponse().from_map(
            self.do_request('1.0', 'baas.chain.cert.ant.download', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def download_chain_cert_ant_ex_async(
        self,
        request: blockchain_models.DownloadChainCertAntRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.DownloadChainCertAntResponse:
        """
        Description: 区块链证书下载
        Summary: 区块链证书下载
        """
        UtilClient.validate_model(request)
        return blockchain_models.DownloadChainCertAntResponse().from_map(
            await self.do_request_async('1.0', 'baas.chain.cert.ant.download', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_chain_node_ant(
        self,
        request: blockchain_models.QueryChainNodeAntRequest,
    ) -> blockchain_models.QueryChainNodeAntResponse:
        """
        Description: 阿里云链节点查询
        Summary: 阿里云链节点查询
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_chain_node_ant_ex(request, headers, runtime)

    async def query_chain_node_ant_async(
        self,
        request: blockchain_models.QueryChainNodeAntRequest,
    ) -> blockchain_models.QueryChainNodeAntResponse:
        """
        Description: 阿里云链节点查询
        Summary: 阿里云链节点查询
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_chain_node_ant_ex_async(request, headers, runtime)

    def query_chain_node_ant_ex(
        self,
        request: blockchain_models.QueryChainNodeAntRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryChainNodeAntResponse:
        """
        Description: 阿里云链节点查询
        Summary: 阿里云链节点查询
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryChainNodeAntResponse().from_map(
            self.do_request('1.0', 'baas.chain.node.ant.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_chain_node_ant_ex_async(
        self,
        request: blockchain_models.QueryChainNodeAntRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryChainNodeAntResponse:
        """
        Description: 阿里云链节点查询
        Summary: 阿里云链节点查询
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryChainNodeAntResponse().from_map(
            await self.do_request_async('1.0', 'baas.chain.node.ant.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def freeze_chain_account_ant(
        self,
        request: blockchain_models.FreezeChainAccountAntRequest,
    ) -> blockchain_models.FreezeChainAccountAntResponse:
        """
        Description: 区块链链上账户冻结
        Summary: 区块链链上账户冻结
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.freeze_chain_account_ant_ex(request, headers, runtime)

    async def freeze_chain_account_ant_async(
        self,
        request: blockchain_models.FreezeChainAccountAntRequest,
    ) -> blockchain_models.FreezeChainAccountAntResponse:
        """
        Description: 区块链链上账户冻结
        Summary: 区块链链上账户冻结
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.freeze_chain_account_ant_ex_async(request, headers, runtime)

    def freeze_chain_account_ant_ex(
        self,
        request: blockchain_models.FreezeChainAccountAntRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.FreezeChainAccountAntResponse:
        """
        Description: 区块链链上账户冻结
        Summary: 区块链链上账户冻结
        """
        UtilClient.validate_model(request)
        return blockchain_models.FreezeChainAccountAntResponse().from_map(
            self.do_request('1.0', 'baas.chain.account.ant.freeze', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def freeze_chain_account_ant_ex_async(
        self,
        request: blockchain_models.FreezeChainAccountAntRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.FreezeChainAccountAntResponse:
        """
        Description: 区块链链上账户冻结
        Summary: 区块链链上账户冻结
        """
        UtilClient.validate_model(request)
        return blockchain_models.FreezeChainAccountAntResponse().from_map(
            await self.do_request_async('1.0', 'baas.chain.account.ant.freeze', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def unfreeze_chain_account_ant(
        self,
        request: blockchain_models.UnfreezeChainAccountAntRequest,
    ) -> blockchain_models.UnfreezeChainAccountAntResponse:
        """
        Description: 蚂蚁区块链账户解冻
        Summary: 蚂蚁区块链账户解冻
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.unfreeze_chain_account_ant_ex(request, headers, runtime)

    async def unfreeze_chain_account_ant_async(
        self,
        request: blockchain_models.UnfreezeChainAccountAntRequest,
    ) -> blockchain_models.UnfreezeChainAccountAntResponse:
        """
        Description: 蚂蚁区块链账户解冻
        Summary: 蚂蚁区块链账户解冻
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.unfreeze_chain_account_ant_ex_async(request, headers, runtime)

    def unfreeze_chain_account_ant_ex(
        self,
        request: blockchain_models.UnfreezeChainAccountAntRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.UnfreezeChainAccountAntResponse:
        """
        Description: 蚂蚁区块链账户解冻
        Summary: 蚂蚁区块链账户解冻
        """
        UtilClient.validate_model(request)
        return blockchain_models.UnfreezeChainAccountAntResponse().from_map(
            self.do_request('1.0', 'baas.chain.account.ant.unfreeze', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def unfreeze_chain_account_ant_ex_async(
        self,
        request: blockchain_models.UnfreezeChainAccountAntRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.UnfreezeChainAccountAntResponse:
        """
        Description: 蚂蚁区块链账户解冻
        Summary: 蚂蚁区块链账户解冻
        """
        UtilClient.validate_model(request)
        return blockchain_models.UnfreezeChainAccountAntResponse().from_map(
            await self.do_request_async('1.0', 'baas.chain.account.ant.unfreeze', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def reinit_chain_cert_ant(
        self,
        request: blockchain_models.ReinitChainCertAntRequest,
    ) -> blockchain_models.ReinitChainCertAntResponse:
        """
        Description: 区块链证书重置
        Summary: 区块链证书重置
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.reinit_chain_cert_ant_ex(request, headers, runtime)

    async def reinit_chain_cert_ant_async(
        self,
        request: blockchain_models.ReinitChainCertAntRequest,
    ) -> blockchain_models.ReinitChainCertAntResponse:
        """
        Description: 区块链证书重置
        Summary: 区块链证书重置
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.reinit_chain_cert_ant_ex_async(request, headers, runtime)

    def reinit_chain_cert_ant_ex(
        self,
        request: blockchain_models.ReinitChainCertAntRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.ReinitChainCertAntResponse:
        """
        Description: 区块链证书重置
        Summary: 区块链证书重置
        """
        UtilClient.validate_model(request)
        return blockchain_models.ReinitChainCertAntResponse().from_map(
            self.do_request('1.0', 'baas.chain.cert.ant.reinit', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def reinit_chain_cert_ant_ex_async(
        self,
        request: blockchain_models.ReinitChainCertAntRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.ReinitChainCertAntResponse:
        """
        Description: 区块链证书重置
        Summary: 区块链证书重置
        """
        UtilClient.validate_model(request)
        return blockchain_models.ReinitChainCertAntResponse().from_map(
            await self.do_request_async('1.0', 'baas.chain.cert.ant.reinit', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_chain_cert_ant(
        self,
        request: blockchain_models.QueryChainCertAntRequest,
    ) -> blockchain_models.QueryChainCertAntResponse:
        """
        Description: 区块链证书查询
        Summary: 区块链证书查询
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_chain_cert_ant_ex(request, headers, runtime)

    async def query_chain_cert_ant_async(
        self,
        request: blockchain_models.QueryChainCertAntRequest,
    ) -> blockchain_models.QueryChainCertAntResponse:
        """
        Description: 区块链证书查询
        Summary: 区块链证书查询
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_chain_cert_ant_ex_async(request, headers, runtime)

    def query_chain_cert_ant_ex(
        self,
        request: blockchain_models.QueryChainCertAntRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryChainCertAntResponse:
        """
        Description: 区块链证书查询
        Summary: 区块链证书查询
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryChainCertAntResponse().from_map(
            self.do_request('1.0', 'baas.chain.cert.ant.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_chain_cert_ant_ex_async(
        self,
        request: blockchain_models.QueryChainCertAntRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryChainCertAntResponse:
        """
        Description: 区块链证书查询
        Summary: 区块链证书查询
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryChainCertAntResponse().from_map(
            await self.do_request_async('1.0', 'baas.chain.cert.ant.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_chain_browser_info(
        self,
        request: blockchain_models.QueryChainBrowserInfoRequest,
    ) -> blockchain_models.QueryChainBrowserInfoResponse:
        """
        Description: 阿里云浏览器信息查询
        Summary: 阿里云浏览器信息查询
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_chain_browser_info_ex(request, headers, runtime)

    async def query_chain_browser_info_async(
        self,
        request: blockchain_models.QueryChainBrowserInfoRequest,
    ) -> blockchain_models.QueryChainBrowserInfoResponse:
        """
        Description: 阿里云浏览器信息查询
        Summary: 阿里云浏览器信息查询
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_chain_browser_info_ex_async(request, headers, runtime)

    def query_chain_browser_info_ex(
        self,
        request: blockchain_models.QueryChainBrowserInfoRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryChainBrowserInfoResponse:
        """
        Description: 阿里云浏览器信息查询
        Summary: 阿里云浏览器信息查询
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryChainBrowserInfoResponse().from_map(
            self.do_request('1.0', 'baas.chain.browser.info.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_chain_browser_info_ex_async(
        self,
        request: blockchain_models.QueryChainBrowserInfoRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryChainBrowserInfoResponse:
        """
        Description: 阿里云浏览器信息查询
        Summary: 阿里云浏览器信息查询
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryChainBrowserInfoResponse().from_map(
            await self.do_request_async('1.0', 'baas.chain.browser.info.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_chain_browser_blocks(
        self,
        request: blockchain_models.QueryChainBrowserBlocksRequest,
    ) -> blockchain_models.QueryChainBrowserBlocksResponse:
        """
        Description: 阿里云最新区块链信息查询
        Summary: 阿里云最新区块链信息查询
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_chain_browser_blocks_ex(request, headers, runtime)

    async def query_chain_browser_blocks_async(
        self,
        request: blockchain_models.QueryChainBrowserBlocksRequest,
    ) -> blockchain_models.QueryChainBrowserBlocksResponse:
        """
        Description: 阿里云最新区块链信息查询
        Summary: 阿里云最新区块链信息查询
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_chain_browser_blocks_ex_async(request, headers, runtime)

    def query_chain_browser_blocks_ex(
        self,
        request: blockchain_models.QueryChainBrowserBlocksRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryChainBrowserBlocksResponse:
        """
        Description: 阿里云最新区块链信息查询
        Summary: 阿里云最新区块链信息查询
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryChainBrowserBlocksResponse().from_map(
            self.do_request('1.0', 'baas.chain.browser.blocks.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_chain_browser_blocks_ex_async(
        self,
        request: blockchain_models.QueryChainBrowserBlocksRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryChainBrowserBlocksResponse:
        """
        Description: 阿里云最新区块链信息查询
        Summary: 阿里云最新区块链信息查询
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryChainBrowserBlocksResponse().from_map(
            await self.do_request_async('1.0', 'baas.chain.browser.blocks.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_chain_browser_transactions(
        self,
        request: blockchain_models.QueryChainBrowserTransactionsRequest,
    ) -> blockchain_models.QueryChainBrowserTransactionsResponse:
        """
        Description: 阿里云最新交易查询
        Summary: 阿里云最新交易查询
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_chain_browser_transactions_ex(request, headers, runtime)

    async def query_chain_browser_transactions_async(
        self,
        request: blockchain_models.QueryChainBrowserTransactionsRequest,
    ) -> blockchain_models.QueryChainBrowserTransactionsResponse:
        """
        Description: 阿里云最新交易查询
        Summary: 阿里云最新交易查询
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_chain_browser_transactions_ex_async(request, headers, runtime)

    def query_chain_browser_transactions_ex(
        self,
        request: blockchain_models.QueryChainBrowserTransactionsRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryChainBrowserTransactionsResponse:
        """
        Description: 阿里云最新交易查询
        Summary: 阿里云最新交易查询
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryChainBrowserTransactionsResponse().from_map(
            self.do_request('1.0', 'baas.chain.browser.transactions.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_chain_browser_transactions_ex_async(
        self,
        request: blockchain_models.QueryChainBrowserTransactionsRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryChainBrowserTransactionsResponse:
        """
        Description: 阿里云最新交易查询
        Summary: 阿里云最新交易查询
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryChainBrowserTransactionsResponse().from_map(
            await self.do_request_async('1.0', 'baas.chain.browser.transactions.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def batchquery_chain_browser_transaction(
        self,
        request: blockchain_models.BatchqueryChainBrowserTransactionRequest,
    ) -> blockchain_models.BatchqueryChainBrowserTransactionResponse:
        """
        Description: 阿里云最新区块交易信息查询
        Summary: 阿里云最新区块交易信息查询
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.batchquery_chain_browser_transaction_ex(request, headers, runtime)

    async def batchquery_chain_browser_transaction_async(
        self,
        request: blockchain_models.BatchqueryChainBrowserTransactionRequest,
    ) -> blockchain_models.BatchqueryChainBrowserTransactionResponse:
        """
        Description: 阿里云最新区块交易信息查询
        Summary: 阿里云最新区块交易信息查询
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.batchquery_chain_browser_transaction_ex_async(request, headers, runtime)

    def batchquery_chain_browser_transaction_ex(
        self,
        request: blockchain_models.BatchqueryChainBrowserTransactionRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.BatchqueryChainBrowserTransactionResponse:
        """
        Description: 阿里云最新区块交易信息查询
        Summary: 阿里云最新区块交易信息查询
        """
        UtilClient.validate_model(request)
        return blockchain_models.BatchqueryChainBrowserTransactionResponse().from_map(
            self.do_request('1.0', 'baas.chain.browser.transaction.batchquery', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def batchquery_chain_browser_transaction_ex_async(
        self,
        request: blockchain_models.BatchqueryChainBrowserTransactionRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.BatchqueryChainBrowserTransactionResponse:
        """
        Description: 阿里云最新区块交易信息查询
        Summary: 阿里云最新区块交易信息查询
        """
        UtilClient.validate_model(request)
        return blockchain_models.BatchqueryChainBrowserTransactionResponse().from_map(
            await self.do_request_async('1.0', 'baas.chain.browser.transaction.batchquery', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_chain_browser_receipt(
        self,
        request: blockchain_models.QueryChainBrowserReceiptRequest,
    ) -> blockchain_models.QueryChainBrowserReceiptResponse:
        """
        Description: 阿里云区块链交易收据查询
        Summary: 阿里云区块链交易收据查询
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_chain_browser_receipt_ex(request, headers, runtime)

    async def query_chain_browser_receipt_async(
        self,
        request: blockchain_models.QueryChainBrowserReceiptRequest,
    ) -> blockchain_models.QueryChainBrowserReceiptResponse:
        """
        Description: 阿里云区块链交易收据查询
        Summary: 阿里云区块链交易收据查询
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_chain_browser_receipt_ex_async(request, headers, runtime)

    def query_chain_browser_receipt_ex(
        self,
        request: blockchain_models.QueryChainBrowserReceiptRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryChainBrowserReceiptResponse:
        """
        Description: 阿里云区块链交易收据查询
        Summary: 阿里云区块链交易收据查询
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryChainBrowserReceiptResponse().from_map(
            self.do_request('1.0', 'baas.chain.browser.receipt.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_chain_browser_receipt_ex_async(
        self,
        request: blockchain_models.QueryChainBrowserReceiptRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryChainBrowserReceiptResponse:
        """
        Description: 阿里云区块链交易收据查询
        Summary: 阿里云区块链交易收据查询
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryChainBrowserReceiptResponse().from_map(
            await self.do_request_async('1.0', 'baas.chain.browser.receipt.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_chain_browser_transaction(
        self,
        request: blockchain_models.QueryChainBrowserTransactionRequest,
    ) -> blockchain_models.QueryChainBrowserTransactionResponse:
        """
        Description: 阿里云区块链交易查询
        Summary: 阿里云区块链交易查询
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_chain_browser_transaction_ex(request, headers, runtime)

    async def query_chain_browser_transaction_async(
        self,
        request: blockchain_models.QueryChainBrowserTransactionRequest,
    ) -> blockchain_models.QueryChainBrowserTransactionResponse:
        """
        Description: 阿里云区块链交易查询
        Summary: 阿里云区块链交易查询
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_chain_browser_transaction_ex_async(request, headers, runtime)

    def query_chain_browser_transaction_ex(
        self,
        request: blockchain_models.QueryChainBrowserTransactionRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryChainBrowserTransactionResponse:
        """
        Description: 阿里云区块链交易查询
        Summary: 阿里云区块链交易查询
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryChainBrowserTransactionResponse().from_map(
            self.do_request('1.0', 'baas.chain.browser.transaction.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_chain_browser_transaction_ex_async(
        self,
        request: blockchain_models.QueryChainBrowserTransactionRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryChainBrowserTransactionResponse:
        """
        Description: 阿里云区块链交易查询
        Summary: 阿里云区块链交易查询
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryChainBrowserTransactionResponse().from_map(
            await self.do_request_async('1.0', 'baas.chain.browser.transaction.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_chain_browser_block(
        self,
        request: blockchain_models.QueryChainBrowserBlockRequest,
    ) -> blockchain_models.QueryChainBrowserBlockResponse:
        """
        Description: 阿里云区块链的区块信息
        Summary: 阿里云区块链的区块信息
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_chain_browser_block_ex(request, headers, runtime)

    async def query_chain_browser_block_async(
        self,
        request: blockchain_models.QueryChainBrowserBlockRequest,
    ) -> blockchain_models.QueryChainBrowserBlockResponse:
        """
        Description: 阿里云区块链的区块信息
        Summary: 阿里云区块链的区块信息
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_chain_browser_block_ex_async(request, headers, runtime)

    def query_chain_browser_block_ex(
        self,
        request: blockchain_models.QueryChainBrowserBlockRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryChainBrowserBlockResponse:
        """
        Description: 阿里云区块链的区块信息
        Summary: 阿里云区块链的区块信息
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryChainBrowserBlockResponse().from_map(
            self.do_request('1.0', 'baas.chain.browser.block.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_chain_browser_block_ex_async(
        self,
        request: blockchain_models.QueryChainBrowserBlockRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryChainBrowserBlockResponse:
        """
        Description: 阿里云区块链的区块信息
        Summary: 阿里云区块链的区块信息
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryChainBrowserBlockResponse().from_map(
            await self.do_request_async('1.0', 'baas.chain.browser.block.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_chain_resouce_region(
        self,
        request: blockchain_models.QueryChainResouceRegionRequest,
    ) -> blockchain_models.QueryChainResouceRegionResponse:
        """
        Description: 阿里云售卖区信息查询
        Summary: 阿里云售卖区信息查询
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_chain_resouce_region_ex(request, headers, runtime)

    async def query_chain_resouce_region_async(
        self,
        request: blockchain_models.QueryChainResouceRegionRequest,
    ) -> blockchain_models.QueryChainResouceRegionResponse:
        """
        Description: 阿里云售卖区信息查询
        Summary: 阿里云售卖区信息查询
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_chain_resouce_region_ex_async(request, headers, runtime)

    def query_chain_resouce_region_ex(
        self,
        request: blockchain_models.QueryChainResouceRegionRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryChainResouceRegionResponse:
        """
        Description: 阿里云售卖区信息查询
        Summary: 阿里云售卖区信息查询
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryChainResouceRegionResponse().from_map(
            self.do_request('1.0', 'baas.chain.resouce.region.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_chain_resouce_region_ex_async(
        self,
        request: blockchain_models.QueryChainResouceRegionRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryChainResouceRegionResponse:
        """
        Description: 阿里云售卖区信息查询
        Summary: 阿里云售卖区信息查询
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryChainResouceRegionResponse().from_map(
            await self.do_request_async('1.0', 'baas.chain.resouce.region.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_chain_resource_type(
        self,
        request: blockchain_models.QueryChainResourceTypeRequest,
    ) -> blockchain_models.QueryChainResourceTypeResponse:
        """
        Description: 阿里云资源类型查询
        Summary: 阿里云资源类型查询
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_chain_resource_type_ex(request, headers, runtime)

    async def query_chain_resource_type_async(
        self,
        request: blockchain_models.QueryChainResourceTypeRequest,
    ) -> blockchain_models.QueryChainResourceTypeResponse:
        """
        Description: 阿里云资源类型查询
        Summary: 阿里云资源类型查询
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_chain_resource_type_ex_async(request, headers, runtime)

    def query_chain_resource_type_ex(
        self,
        request: blockchain_models.QueryChainResourceTypeRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryChainResourceTypeResponse:
        """
        Description: 阿里云资源类型查询
        Summary: 阿里云资源类型查询
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryChainResourceTypeResponse().from_map(
            self.do_request('1.0', 'baas.chain.resource.type.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_chain_resource_type_ex_async(
        self,
        request: blockchain_models.QueryChainResourceTypeRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryChainResourceTypeResponse:
        """
        Description: 阿里云资源类型查询
        Summary: 阿里云资源类型查询
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryChainResourceTypeResponse().from_map(
            await self.do_request_async('1.0', 'baas.chain.resource.type.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_chain_resouce_sale(
        self,
        request: blockchain_models.QueryChainResouceSaleRequest,
    ) -> blockchain_models.QueryChainResouceSaleResponse:
        """
        Description: 阿里云区块链售卖资源查询
        Summary: 阿里云区块链售卖资源查询
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_chain_resouce_sale_ex(request, headers, runtime)

    async def query_chain_resouce_sale_async(
        self,
        request: blockchain_models.QueryChainResouceSaleRequest,
    ) -> blockchain_models.QueryChainResouceSaleResponse:
        """
        Description: 阿里云区块链售卖资源查询
        Summary: 阿里云区块链售卖资源查询
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_chain_resouce_sale_ex_async(request, headers, runtime)

    def query_chain_resouce_sale_ex(
        self,
        request: blockchain_models.QueryChainResouceSaleRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryChainResouceSaleResponse:
        """
        Description: 阿里云区块链售卖资源查询
        Summary: 阿里云区块链售卖资源查询
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryChainResouceSaleResponse().from_map(
            self.do_request('1.0', 'baas.chain.resouce.sale.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_chain_resouce_sale_ex_async(
        self,
        request: blockchain_models.QueryChainResouceSaleRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryChainResouceSaleResponse:
        """
        Description: 阿里云区块链售卖资源查询
        Summary: 阿里云区块链售卖资源查询
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryChainResouceSaleResponse().from_map(
            await self.do_request_async('1.0', 'baas.chain.resouce.sale.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_chain_resource_config(
        self,
        request: blockchain_models.QueryChainResourceConfigRequest,
    ) -> blockchain_models.QueryChainResourceConfigResponse:
        """
        Description: 阿里云区块链配置信息查询
        Summary: 阿里云区块链配置信息查询
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_chain_resource_config_ex(request, headers, runtime)

    async def query_chain_resource_config_async(
        self,
        request: blockchain_models.QueryChainResourceConfigRequest,
    ) -> blockchain_models.QueryChainResourceConfigResponse:
        """
        Description: 阿里云区块链配置信息查询
        Summary: 阿里云区块链配置信息查询
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_chain_resource_config_ex_async(request, headers, runtime)

    def query_chain_resource_config_ex(
        self,
        request: blockchain_models.QueryChainResourceConfigRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryChainResourceConfigResponse:
        """
        Description: 阿里云区块链配置信息查询
        Summary: 阿里云区块链配置信息查询
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryChainResourceConfigResponse().from_map(
            self.do_request('1.0', 'baas.chain.resource.config.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_chain_resource_config_ex_async(
        self,
        request: blockchain_models.QueryChainResourceConfigRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryChainResourceConfigResponse:
        """
        Description: 阿里云区块链配置信息查询
        Summary: 阿里云区块链配置信息查询
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryChainResourceConfigResponse().from_map(
            await self.do_request_async('1.0', 'baas.chain.resource.config.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_chain_browser_statistics(
        self,
        request: blockchain_models.QueryChainBrowserStatisticsRequest,
    ) -> blockchain_models.QueryChainBrowserStatisticsResponse:
        """
        Description: 阿里云区块链交易统计信息
        Summary: 阿里云区块链交易统计信息
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_chain_browser_statistics_ex(request, headers, runtime)

    async def query_chain_browser_statistics_async(
        self,
        request: blockchain_models.QueryChainBrowserStatisticsRequest,
    ) -> blockchain_models.QueryChainBrowserStatisticsResponse:
        """
        Description: 阿里云区块链交易统计信息
        Summary: 阿里云区块链交易统计信息
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_chain_browser_statistics_ex_async(request, headers, runtime)

    def query_chain_browser_statistics_ex(
        self,
        request: blockchain_models.QueryChainBrowserStatisticsRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryChainBrowserStatisticsResponse:
        """
        Description: 阿里云区块链交易统计信息
        Summary: 阿里云区块链交易统计信息
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryChainBrowserStatisticsResponse().from_map(
            self.do_request('1.0', 'baas.chain.browser.statistics.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_chain_browser_statistics_ex_async(
        self,
        request: blockchain_models.QueryChainBrowserStatisticsRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryChainBrowserStatisticsResponse:
        """
        Description: 阿里云区块链交易统计信息
        Summary: 阿里云区块链交易统计信息
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryChainBrowserStatisticsResponse().from_map(
            await self.do_request_async('1.0', 'baas.chain.browser.statistics.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def exec_chain_public_contract(
        self,
        request: blockchain_models.ExecChainPublicContractRequest,
    ) -> blockchain_models.ExecChainPublicContractResponse:
        """
        Description: 阿里云区块链交易执行交易
        Summary: 阿里云区块链交易执行交易
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.exec_chain_public_contract_ex(request, headers, runtime)

    async def exec_chain_public_contract_async(
        self,
        request: blockchain_models.ExecChainPublicContractRequest,
    ) -> blockchain_models.ExecChainPublicContractResponse:
        """
        Description: 阿里云区块链交易执行交易
        Summary: 阿里云区块链交易执行交易
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.exec_chain_public_contract_ex_async(request, headers, runtime)

    def exec_chain_public_contract_ex(
        self,
        request: blockchain_models.ExecChainPublicContractRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.ExecChainPublicContractResponse:
        """
        Description: 阿里云区块链交易执行交易
        Summary: 阿里云区块链交易执行交易
        """
        UtilClient.validate_model(request)
        return blockchain_models.ExecChainPublicContractResponse().from_map(
            self.do_request('1.0', 'baas.chain.public.contract.exec', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def exec_chain_public_contract_ex_async(
        self,
        request: blockchain_models.ExecChainPublicContractRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.ExecChainPublicContractResponse:
        """
        Description: 阿里云区块链交易执行交易
        Summary: 阿里云区块链交易执行交易
        """
        UtilClient.validate_model(request)
        return blockchain_models.ExecChainPublicContractResponse().from_map(
            await self.do_request_async('1.0', 'baas.chain.public.contract.exec', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_chain_public_ide(
        self,
        request: blockchain_models.QueryChainPublicIdeRequest,
    ) -> blockchain_models.QueryChainPublicIdeResponse:
        """
        Description: 阿里云免费体验链的cloudIde查询
        Summary: 阿里云免费体验链的cloudIde查询
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_chain_public_ide_ex(request, headers, runtime)

    async def query_chain_public_ide_async(
        self,
        request: blockchain_models.QueryChainPublicIdeRequest,
    ) -> blockchain_models.QueryChainPublicIdeResponse:
        """
        Description: 阿里云免费体验链的cloudIde查询
        Summary: 阿里云免费体验链的cloudIde查询
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_chain_public_ide_ex_async(request, headers, runtime)

    def query_chain_public_ide_ex(
        self,
        request: blockchain_models.QueryChainPublicIdeRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryChainPublicIdeResponse:
        """
        Description: 阿里云免费体验链的cloudIde查询
        Summary: 阿里云免费体验链的cloudIde查询
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryChainPublicIdeResponse().from_map(
            self.do_request('1.0', 'baas.chain.public.ide.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_chain_public_ide_ex_async(
        self,
        request: blockchain_models.QueryChainPublicIdeRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryChainPublicIdeResponse:
        """
        Description: 阿里云免费体验链的cloudIde查询
        Summary: 阿里云免费体验链的cloudIde查询
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryChainPublicIdeResponse().from_map(
            await self.do_request_async('1.0', 'baas.chain.public.ide.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_chain_public_content(
        self,
        request: blockchain_models.QueryChainPublicContentRequest,
    ) -> blockchain_models.QueryChainPublicContentResponse:
        """
        Description: 阿里云免费体验链合约文件和内容查询
        Summary: 阿里云免费体验链合约文件和内容查询
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_chain_public_content_ex(request, headers, runtime)

    async def query_chain_public_content_async(
        self,
        request: blockchain_models.QueryChainPublicContentRequest,
    ) -> blockchain_models.QueryChainPublicContentResponse:
        """
        Description: 阿里云免费体验链合约文件和内容查询
        Summary: 阿里云免费体验链合约文件和内容查询
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_chain_public_content_ex_async(request, headers, runtime)

    def query_chain_public_content_ex(
        self,
        request: blockchain_models.QueryChainPublicContentRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryChainPublicContentResponse:
        """
        Description: 阿里云免费体验链合约文件和内容查询
        Summary: 阿里云免费体验链合约文件和内容查询
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryChainPublicContentResponse().from_map(
            self.do_request('1.0', 'baas.chain.public.content.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_chain_public_content_ex_async(
        self,
        request: blockchain_models.QueryChainPublicContentRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryChainPublicContentResponse:
        """
        Description: 阿里云免费体验链合约文件和内容查询
        Summary: 阿里云免费体验链合约文件和内容查询
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryChainPublicContentResponse().from_map(
            await self.do_request_async('1.0', 'baas.chain.public.content.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def create_chain_contract_project(
        self,
        request: blockchain_models.CreateChainContractProjectRequest,
    ) -> blockchain_models.CreateChainContractProjectResponse:
        """
        Description: 阿里云合约工程创建
        Summary: 阿里云合约工程创建
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.create_chain_contract_project_ex(request, headers, runtime)

    async def create_chain_contract_project_async(
        self,
        request: blockchain_models.CreateChainContractProjectRequest,
    ) -> blockchain_models.CreateChainContractProjectResponse:
        """
        Description: 阿里云合约工程创建
        Summary: 阿里云合约工程创建
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.create_chain_contract_project_ex_async(request, headers, runtime)

    def create_chain_contract_project_ex(
        self,
        request: blockchain_models.CreateChainContractProjectRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateChainContractProjectResponse:
        """
        Description: 阿里云合约工程创建
        Summary: 阿里云合约工程创建
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateChainContractProjectResponse().from_map(
            self.do_request('1.0', 'baas.chain.contract.project.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def create_chain_contract_project_ex_async(
        self,
        request: blockchain_models.CreateChainContractProjectRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateChainContractProjectResponse:
        """
        Description: 阿里云合约工程创建
        Summary: 阿里云合约工程创建
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateChainContractProjectResponse().from_map(
            await self.do_request_async('1.0', 'baas.chain.contract.project.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def delete_chain_contract_project(
        self,
        request: blockchain_models.DeleteChainContractProjectRequest,
    ) -> blockchain_models.DeleteChainContractProjectResponse:
        """
        Description: 阿里云合约工程删除
        Summary: 阿里云合约工程删除
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.delete_chain_contract_project_ex(request, headers, runtime)

    async def delete_chain_contract_project_async(
        self,
        request: blockchain_models.DeleteChainContractProjectRequest,
    ) -> blockchain_models.DeleteChainContractProjectResponse:
        """
        Description: 阿里云合约工程删除
        Summary: 阿里云合约工程删除
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.delete_chain_contract_project_ex_async(request, headers, runtime)

    def delete_chain_contract_project_ex(
        self,
        request: blockchain_models.DeleteChainContractProjectRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.DeleteChainContractProjectResponse:
        """
        Description: 阿里云合约工程删除
        Summary: 阿里云合约工程删除
        """
        UtilClient.validate_model(request)
        return blockchain_models.DeleteChainContractProjectResponse().from_map(
            self.do_request('1.0', 'baas.chain.contract.project.delete', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def delete_chain_contract_project_ex_async(
        self,
        request: blockchain_models.DeleteChainContractProjectRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.DeleteChainContractProjectResponse:
        """
        Description: 阿里云合约工程删除
        Summary: 阿里云合约工程删除
        """
        UtilClient.validate_model(request)
        return blockchain_models.DeleteChainContractProjectResponse().from_map(
            await self.do_request_async('1.0', 'baas.chain.contract.project.delete', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def clone_chain_contract_project(
        self,
        request: blockchain_models.CloneChainContractProjectRequest,
    ) -> blockchain_models.CloneChainContractProjectResponse:
        """
        Description: 复制阿里云合约工程
        Summary: 复制阿里云合约工程
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.clone_chain_contract_project_ex(request, headers, runtime)

    async def clone_chain_contract_project_async(
        self,
        request: blockchain_models.CloneChainContractProjectRequest,
    ) -> blockchain_models.CloneChainContractProjectResponse:
        """
        Description: 复制阿里云合约工程
        Summary: 复制阿里云合约工程
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.clone_chain_contract_project_ex_async(request, headers, runtime)

    def clone_chain_contract_project_ex(
        self,
        request: blockchain_models.CloneChainContractProjectRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CloneChainContractProjectResponse:
        """
        Description: 复制阿里云合约工程
        Summary: 复制阿里云合约工程
        """
        UtilClient.validate_model(request)
        return blockchain_models.CloneChainContractProjectResponse().from_map(
            self.do_request('1.0', 'baas.chain.contract.project.clone', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def clone_chain_contract_project_ex_async(
        self,
        request: blockchain_models.CloneChainContractProjectRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CloneChainContractProjectResponse:
        """
        Description: 复制阿里云合约工程
        Summary: 复制阿里云合约工程
        """
        UtilClient.validate_model(request)
        return blockchain_models.CloneChainContractProjectResponse().from_map(
            await self.do_request_async('1.0', 'baas.chain.contract.project.clone', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_chain_contract_project(
        self,
        request: blockchain_models.QueryChainContractProjectRequest,
    ) -> blockchain_models.QueryChainContractProjectResponse:
        """
        Description: 阿里云合约工程信息查询
        Summary: 阿里云合约工程信息查询
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_chain_contract_project_ex(request, headers, runtime)

    async def query_chain_contract_project_async(
        self,
        request: blockchain_models.QueryChainContractProjectRequest,
    ) -> blockchain_models.QueryChainContractProjectResponse:
        """
        Description: 阿里云合约工程信息查询
        Summary: 阿里云合约工程信息查询
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_chain_contract_project_ex_async(request, headers, runtime)

    def query_chain_contract_project_ex(
        self,
        request: blockchain_models.QueryChainContractProjectRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryChainContractProjectResponse:
        """
        Description: 阿里云合约工程信息查询
        Summary: 阿里云合约工程信息查询
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryChainContractProjectResponse().from_map(
            self.do_request('1.0', 'baas.chain.contract.project.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_chain_contract_project_ex_async(
        self,
        request: blockchain_models.QueryChainContractProjectRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryChainContractProjectResponse:
        """
        Description: 阿里云合约工程信息查询
        Summary: 阿里云合约工程信息查询
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryChainContractProjectResponse().from_map(
            await self.do_request_async('1.0', 'baas.chain.contract.project.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def retry_chain_contract_project(
        self,
        request: blockchain_models.RetryChainContractProjectRequest,
    ) -> blockchain_models.RetryChainContractProjectResponse:
        """
        Description: 复制阿里云合约工程
        Summary: 复制阿里云合约工程
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.retry_chain_contract_project_ex(request, headers, runtime)

    async def retry_chain_contract_project_async(
        self,
        request: blockchain_models.RetryChainContractProjectRequest,
    ) -> blockchain_models.RetryChainContractProjectResponse:
        """
        Description: 复制阿里云合约工程
        Summary: 复制阿里云合约工程
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.retry_chain_contract_project_ex_async(request, headers, runtime)

    def retry_chain_contract_project_ex(
        self,
        request: blockchain_models.RetryChainContractProjectRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.RetryChainContractProjectResponse:
        """
        Description: 复制阿里云合约工程
        Summary: 复制阿里云合约工程
        """
        UtilClient.validate_model(request)
        return blockchain_models.RetryChainContractProjectResponse().from_map(
            self.do_request('1.0', 'baas.chain.contract.project.retry', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def retry_chain_contract_project_ex_async(
        self,
        request: blockchain_models.RetryChainContractProjectRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.RetryChainContractProjectResponse:
        """
        Description: 复制阿里云合约工程
        Summary: 复制阿里云合约工程
        """
        UtilClient.validate_model(request)
        return blockchain_models.RetryChainContractProjectResponse().from_map(
            await self.do_request_async('1.0', 'baas.chain.contract.project.retry', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def update_chain_contract_project(
        self,
        request: blockchain_models.UpdateChainContractProjectRequest,
    ) -> blockchain_models.UpdateChainContractProjectResponse:
        """
        Description: 更新阿里云区块链的合约工程
        Summary: 更新阿里云区块链的合约工程
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.update_chain_contract_project_ex(request, headers, runtime)

    async def update_chain_contract_project_async(
        self,
        request: blockchain_models.UpdateChainContractProjectRequest,
    ) -> blockchain_models.UpdateChainContractProjectResponse:
        """
        Description: 更新阿里云区块链的合约工程
        Summary: 更新阿里云区块链的合约工程
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.update_chain_contract_project_ex_async(request, headers, runtime)

    def update_chain_contract_project_ex(
        self,
        request: blockchain_models.UpdateChainContractProjectRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.UpdateChainContractProjectResponse:
        """
        Description: 更新阿里云区块链的合约工程
        Summary: 更新阿里云区块链的合约工程
        """
        UtilClient.validate_model(request)
        return blockchain_models.UpdateChainContractProjectResponse().from_map(
            self.do_request('1.0', 'baas.chain.contract.project.update', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def update_chain_contract_project_ex_async(
        self,
        request: blockchain_models.UpdateChainContractProjectRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.UpdateChainContractProjectResponse:
        """
        Description: 更新阿里云区块链的合约工程
        Summary: 更新阿里云区块链的合约工程
        """
        UtilClient.validate_model(request)
        return blockchain_models.UpdateChainContractProjectResponse().from_map(
            await self.do_request_async('1.0', 'baas.chain.contract.project.update', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def create_chain_contract_content(
        self,
        request: blockchain_models.CreateChainContractContentRequest,
    ) -> blockchain_models.CreateChainContractContentResponse:
        """
        Description: 创建合约文件内容
        Summary: 创建合约文件内容
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.create_chain_contract_content_ex(request, headers, runtime)

    async def create_chain_contract_content_async(
        self,
        request: blockchain_models.CreateChainContractContentRequest,
    ) -> blockchain_models.CreateChainContractContentResponse:
        """
        Description: 创建合约文件内容
        Summary: 创建合约文件内容
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.create_chain_contract_content_ex_async(request, headers, runtime)

    def create_chain_contract_content_ex(
        self,
        request: blockchain_models.CreateChainContractContentRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateChainContractContentResponse:
        """
        Description: 创建合约文件内容
        Summary: 创建合约文件内容
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateChainContractContentResponse().from_map(
            self.do_request('1.0', 'baas.chain.contract.content.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def create_chain_contract_content_ex_async(
        self,
        request: blockchain_models.CreateChainContractContentRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateChainContractContentResponse:
        """
        Description: 创建合约文件内容
        Summary: 创建合约文件内容
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateChainContractContentResponse().from_map(
            await self.do_request_async('1.0', 'baas.chain.contract.content.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def update_chain_contract_content(
        self,
        request: blockchain_models.UpdateChainContractContentRequest,
    ) -> blockchain_models.UpdateChainContractContentResponse:
        """
        Description: 更新阿里云合约文件内容
        Summary: 更新阿里云合约文件内容
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.update_chain_contract_content_ex(request, headers, runtime)

    async def update_chain_contract_content_async(
        self,
        request: blockchain_models.UpdateChainContractContentRequest,
    ) -> blockchain_models.UpdateChainContractContentResponse:
        """
        Description: 更新阿里云合约文件内容
        Summary: 更新阿里云合约文件内容
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.update_chain_contract_content_ex_async(request, headers, runtime)

    def update_chain_contract_content_ex(
        self,
        request: blockchain_models.UpdateChainContractContentRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.UpdateChainContractContentResponse:
        """
        Description: 更新阿里云合约文件内容
        Summary: 更新阿里云合约文件内容
        """
        UtilClient.validate_model(request)
        return blockchain_models.UpdateChainContractContentResponse().from_map(
            self.do_request('1.0', 'baas.chain.contract.content.update', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def update_chain_contract_content_ex_async(
        self,
        request: blockchain_models.UpdateChainContractContentRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.UpdateChainContractContentResponse:
        """
        Description: 更新阿里云合约文件内容
        Summary: 更新阿里云合约文件内容
        """
        UtilClient.validate_model(request)
        return blockchain_models.UpdateChainContractContentResponse().from_map(
            await self.do_request_async('1.0', 'baas.chain.contract.content.update', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_chain_contract_content(
        self,
        request: blockchain_models.QueryChainContractContentRequest,
    ) -> blockchain_models.QueryChainContractContentResponse:
        """
        Description: 阿里云合约文件信息查询
        Summary: 阿里云合约文件信息查询
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_chain_contract_content_ex(request, headers, runtime)

    async def query_chain_contract_content_async(
        self,
        request: blockchain_models.QueryChainContractContentRequest,
    ) -> blockchain_models.QueryChainContractContentResponse:
        """
        Description: 阿里云合约文件信息查询
        Summary: 阿里云合约文件信息查询
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_chain_contract_content_ex_async(request, headers, runtime)

    def query_chain_contract_content_ex(
        self,
        request: blockchain_models.QueryChainContractContentRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryChainContractContentResponse:
        """
        Description: 阿里云合约文件信息查询
        Summary: 阿里云合约文件信息查询
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryChainContractContentResponse().from_map(
            self.do_request('1.0', 'baas.chain.contract.content.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_chain_contract_content_ex_async(
        self,
        request: blockchain_models.QueryChainContractContentRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryChainContractContentResponse:
        """
        Description: 阿里云合约文件信息查询
        Summary: 阿里云合约文件信息查询
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryChainContractContentResponse().from_map(
            await self.do_request_async('1.0', 'baas.chain.contract.content.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def exec_chain_contract(
        self,
        request: blockchain_models.ExecChainContractRequest,
    ) -> blockchain_models.ExecChainContractResponse:
        """
        Description: 阿里云区块链合约执行
        Summary: 阿里云区块链合约执行
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.exec_chain_contract_ex(request, headers, runtime)

    async def exec_chain_contract_async(
        self,
        request: blockchain_models.ExecChainContractRequest,
    ) -> blockchain_models.ExecChainContractResponse:
        """
        Description: 阿里云区块链合约执行
        Summary: 阿里云区块链合约执行
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.exec_chain_contract_ex_async(request, headers, runtime)

    def exec_chain_contract_ex(
        self,
        request: blockchain_models.ExecChainContractRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.ExecChainContractResponse:
        """
        Description: 阿里云区块链合约执行
        Summary: 阿里云区块链合约执行
        """
        UtilClient.validate_model(request)
        return blockchain_models.ExecChainContractResponse().from_map(
            self.do_request('1.0', 'baas.chain.contract.exec', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def exec_chain_contract_ex_async(
        self,
        request: blockchain_models.ExecChainContractRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.ExecChainContractResponse:
        """
        Description: 阿里云区块链合约执行
        Summary: 阿里云区块链合约执行
        """
        UtilClient.validate_model(request)
        return blockchain_models.ExecChainContractResponse().from_map(
            await self.do_request_async('1.0', 'baas.chain.contract.exec', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_chain_ide(
        self,
        request: blockchain_models.QueryChainIdeRequest,
    ) -> blockchain_models.QueryChainIdeResponse:
        """
        Description: 阿里云区块链CloudIde配置查询
        Summary: 阿里云区块链CloudIde配置查询
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_chain_ide_ex(request, headers, runtime)

    async def query_chain_ide_async(
        self,
        request: blockchain_models.QueryChainIdeRequest,
    ) -> blockchain_models.QueryChainIdeResponse:
        """
        Description: 阿里云区块链CloudIde配置查询
        Summary: 阿里云区块链CloudIde配置查询
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_chain_ide_ex_async(request, headers, runtime)

    def query_chain_ide_ex(
        self,
        request: blockchain_models.QueryChainIdeRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryChainIdeResponse:
        """
        Description: 阿里云区块链CloudIde配置查询
        Summary: 阿里云区块链CloudIde配置查询
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryChainIdeResponse().from_map(
            self.do_request('1.0', 'baas.chain.ide.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_chain_ide_ex_async(
        self,
        request: blockchain_models.QueryChainIdeRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryChainIdeResponse:
        """
        Description: 阿里云区块链CloudIde配置查询
        Summary: 阿里云区块链CloudIde配置查询
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryChainIdeResponse().from_map(
            await self.do_request_async('1.0', 'baas.chain.ide.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def delete_chain_contract_content(
        self,
        request: blockchain_models.DeleteChainContractContentRequest,
    ) -> blockchain_models.DeleteChainContractContentResponse:
        """
        Description: 阿里云区块链合约文件删除
        Summary: 阿里云区块链合约文件删除
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.delete_chain_contract_content_ex(request, headers, runtime)

    async def delete_chain_contract_content_async(
        self,
        request: blockchain_models.DeleteChainContractContentRequest,
    ) -> blockchain_models.DeleteChainContractContentResponse:
        """
        Description: 阿里云区块链合约文件删除
        Summary: 阿里云区块链合约文件删除
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.delete_chain_contract_content_ex_async(request, headers, runtime)

    def delete_chain_contract_content_ex(
        self,
        request: blockchain_models.DeleteChainContractContentRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.DeleteChainContractContentResponse:
        """
        Description: 阿里云区块链合约文件删除
        Summary: 阿里云区块链合约文件删除
        """
        UtilClient.validate_model(request)
        return blockchain_models.DeleteChainContractContentResponse().from_map(
            self.do_request('1.0', 'baas.chain.contract.content.delete', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def delete_chain_contract_content_ex_async(
        self,
        request: blockchain_models.DeleteChainContractContentRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.DeleteChainContractContentResponse:
        """
        Description: 阿里云区块链合约文件删除
        Summary: 阿里云区块链合约文件删除
        """
        UtilClient.validate_model(request)
        return blockchain_models.DeleteChainContractContentResponse().from_map(
            await self.do_request_async('1.0', 'baas.chain.contract.content.delete', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def batchcreate_chain_miniapp_user(
        self,
        request: blockchain_models.BatchcreateChainMiniappUserRequest,
    ) -> blockchain_models.BatchcreateChainMiniappUserResponse:
        """
        Description: 阿里云区块链小程序用户权限添加
        Summary: 阿里云区块链小程序用户权限添加
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.batchcreate_chain_miniapp_user_ex(request, headers, runtime)

    async def batchcreate_chain_miniapp_user_async(
        self,
        request: blockchain_models.BatchcreateChainMiniappUserRequest,
    ) -> blockchain_models.BatchcreateChainMiniappUserResponse:
        """
        Description: 阿里云区块链小程序用户权限添加
        Summary: 阿里云区块链小程序用户权限添加
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.batchcreate_chain_miniapp_user_ex_async(request, headers, runtime)

    def batchcreate_chain_miniapp_user_ex(
        self,
        request: blockchain_models.BatchcreateChainMiniappUserRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.BatchcreateChainMiniappUserResponse:
        """
        Description: 阿里云区块链小程序用户权限添加
        Summary: 阿里云区块链小程序用户权限添加
        """
        UtilClient.validate_model(request)
        return blockchain_models.BatchcreateChainMiniappUserResponse().from_map(
            self.do_request('1.0', 'baas.chain.miniapp.user.batchcreate', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def batchcreate_chain_miniapp_user_ex_async(
        self,
        request: blockchain_models.BatchcreateChainMiniappUserRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.BatchcreateChainMiniappUserResponse:
        """
        Description: 阿里云区块链小程序用户权限添加
        Summary: 阿里云区块链小程序用户权限添加
        """
        UtilClient.validate_model(request)
        return blockchain_models.BatchcreateChainMiniappUserResponse().from_map(
            await self.do_request_async('1.0', 'baas.chain.miniapp.user.batchcreate', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def delete_chain_miniapp_user(
        self,
        request: blockchain_models.DeleteChainMiniappUserRequest,
    ) -> blockchain_models.DeleteChainMiniappUserResponse:
        """
        Description: 阿里云区块链小程序用户权限删除
        Summary: 阿里云区块链小程序用户权限删除
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.delete_chain_miniapp_user_ex(request, headers, runtime)

    async def delete_chain_miniapp_user_async(
        self,
        request: blockchain_models.DeleteChainMiniappUserRequest,
    ) -> blockchain_models.DeleteChainMiniappUserResponse:
        """
        Description: 阿里云区块链小程序用户权限删除
        Summary: 阿里云区块链小程序用户权限删除
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.delete_chain_miniapp_user_ex_async(request, headers, runtime)

    def delete_chain_miniapp_user_ex(
        self,
        request: blockchain_models.DeleteChainMiniappUserRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.DeleteChainMiniappUserResponse:
        """
        Description: 阿里云区块链小程序用户权限删除
        Summary: 阿里云区块链小程序用户权限删除
        """
        UtilClient.validate_model(request)
        return blockchain_models.DeleteChainMiniappUserResponse().from_map(
            self.do_request('1.0', 'baas.chain.miniapp.user.delete', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def delete_chain_miniapp_user_ex_async(
        self,
        request: blockchain_models.DeleteChainMiniappUserRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.DeleteChainMiniappUserResponse:
        """
        Description: 阿里云区块链小程序用户权限删除
        Summary: 阿里云区块链小程序用户权限删除
        """
        UtilClient.validate_model(request)
        return blockchain_models.DeleteChainMiniappUserResponse().from_map(
            await self.do_request_async('1.0', 'baas.chain.miniapp.user.delete', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def batchquery_chain_miniapp_user(
        self,
        request: blockchain_models.BatchqueryChainMiniappUserRequest,
    ) -> blockchain_models.BatchqueryChainMiniappUserResponse:
        """
        Description: 阿里云区块链所有用户权限查询
        Summary: 阿里云区块链所有用户权限查询
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.batchquery_chain_miniapp_user_ex(request, headers, runtime)

    async def batchquery_chain_miniapp_user_async(
        self,
        request: blockchain_models.BatchqueryChainMiniappUserRequest,
    ) -> blockchain_models.BatchqueryChainMiniappUserResponse:
        """
        Description: 阿里云区块链所有用户权限查询
        Summary: 阿里云区块链所有用户权限查询
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.batchquery_chain_miniapp_user_ex_async(request, headers, runtime)

    def batchquery_chain_miniapp_user_ex(
        self,
        request: blockchain_models.BatchqueryChainMiniappUserRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.BatchqueryChainMiniappUserResponse:
        """
        Description: 阿里云区块链所有用户权限查询
        Summary: 阿里云区块链所有用户权限查询
        """
        UtilClient.validate_model(request)
        return blockchain_models.BatchqueryChainMiniappUserResponse().from_map(
            self.do_request('1.0', 'baas.chain.miniapp.user.batchquery', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def batchquery_chain_miniapp_user_ex_async(
        self,
        request: blockchain_models.BatchqueryChainMiniappUserRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.BatchqueryChainMiniappUserResponse:
        """
        Description: 阿里云区块链所有用户权限查询
        Summary: 阿里云区块链所有用户权限查询
        """
        UtilClient.validate_model(request)
        return blockchain_models.BatchqueryChainMiniappUserResponse().from_map(
            await self.do_request_async('1.0', 'baas.chain.miniapp.user.batchquery', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_chain_miniapp_authorization(
        self,
        request: blockchain_models.QueryChainMiniappAuthorizationRequest,
    ) -> blockchain_models.QueryChainMiniappAuthorizationResponse:
        """
        Description: 阿里云区块链小程序权限控制查询
        Summary: 阿里云区块链小程序权限控制查询
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_chain_miniapp_authorization_ex(request, headers, runtime)

    async def query_chain_miniapp_authorization_async(
        self,
        request: blockchain_models.QueryChainMiniappAuthorizationRequest,
    ) -> blockchain_models.QueryChainMiniappAuthorizationResponse:
        """
        Description: 阿里云区块链小程序权限控制查询
        Summary: 阿里云区块链小程序权限控制查询
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_chain_miniapp_authorization_ex_async(request, headers, runtime)

    def query_chain_miniapp_authorization_ex(
        self,
        request: blockchain_models.QueryChainMiniappAuthorizationRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryChainMiniappAuthorizationResponse:
        """
        Description: 阿里云区块链小程序权限控制查询
        Summary: 阿里云区块链小程序权限控制查询
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryChainMiniappAuthorizationResponse().from_map(
            self.do_request('1.0', 'baas.chain.miniapp.authorization.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_chain_miniapp_authorization_ex_async(
        self,
        request: blockchain_models.QueryChainMiniappAuthorizationRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryChainMiniappAuthorizationResponse:
        """
        Description: 阿里云区块链小程序权限控制查询
        Summary: 阿里云区块链小程序权限控制查询
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryChainMiniappAuthorizationResponse().from_map(
            await self.do_request_async('1.0', 'baas.chain.miniapp.authorization.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def update_chain_miniapp_authorization(
        self,
        request: blockchain_models.UpdateChainMiniappAuthorizationRequest,
    ) -> blockchain_models.UpdateChainMiniappAuthorizationResponse:
        """
        Description: 阿里云区块链小程序权限控制变更
        Summary: 阿里云区块链小程序权限控制变更
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.update_chain_miniapp_authorization_ex(request, headers, runtime)

    async def update_chain_miniapp_authorization_async(
        self,
        request: blockchain_models.UpdateChainMiniappAuthorizationRequest,
    ) -> blockchain_models.UpdateChainMiniappAuthorizationResponse:
        """
        Description: 阿里云区块链小程序权限控制变更
        Summary: 阿里云区块链小程序权限控制变更
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.update_chain_miniapp_authorization_ex_async(request, headers, runtime)

    def update_chain_miniapp_authorization_ex(
        self,
        request: blockchain_models.UpdateChainMiniappAuthorizationRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.UpdateChainMiniappAuthorizationResponse:
        """
        Description: 阿里云区块链小程序权限控制变更
        Summary: 阿里云区块链小程序权限控制变更
        """
        UtilClient.validate_model(request)
        return blockchain_models.UpdateChainMiniappAuthorizationResponse().from_map(
            self.do_request('1.0', 'baas.chain.miniapp.authorization.update', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def update_chain_miniapp_authorization_ex_async(
        self,
        request: blockchain_models.UpdateChainMiniappAuthorizationRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.UpdateChainMiniappAuthorizationResponse:
        """
        Description: 阿里云区块链小程序权限控制变更
        Summary: 阿里云区块链小程序权限控制变更
        """
        UtilClient.validate_model(request)
        return blockchain_models.UpdateChainMiniappAuthorizationResponse().from_map(
            await self.do_request_async('1.0', 'baas.chain.miniapp.authorization.update', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_chain_miniapp_transaction(
        self,
        request: blockchain_models.QueryChainMiniappTransactionRequest,
    ) -> blockchain_models.QueryChainMiniappTransactionResponse:
        """
        Description: 阿里云区块链小程序交易查询
        Summary: 阿里云区块链小程序交易查询
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_chain_miniapp_transaction_ex(request, headers, runtime)

    async def query_chain_miniapp_transaction_async(
        self,
        request: blockchain_models.QueryChainMiniappTransactionRequest,
    ) -> blockchain_models.QueryChainMiniappTransactionResponse:
        """
        Description: 阿里云区块链小程序交易查询
        Summary: 阿里云区块链小程序交易查询
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_chain_miniapp_transaction_ex_async(request, headers, runtime)

    def query_chain_miniapp_transaction_ex(
        self,
        request: blockchain_models.QueryChainMiniappTransactionRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryChainMiniappTransactionResponse:
        """
        Description: 阿里云区块链小程序交易查询
        Summary: 阿里云区块链小程序交易查询
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryChainMiniappTransactionResponse().from_map(
            self.do_request('1.0', 'baas.chain.miniapp.transaction.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_chain_miniapp_transaction_ex_async(
        self,
        request: blockchain_models.QueryChainMiniappTransactionRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryChainMiniappTransactionResponse:
        """
        Description: 阿里云区块链小程序交易查询
        Summary: 阿里云区块链小程序交易查询
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryChainMiniappTransactionResponse().from_map(
            await self.do_request_async('1.0', 'baas.chain.miniapp.transaction.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_chain_miniapp_log(
        self,
        request: blockchain_models.QueryChainMiniappLogRequest,
    ) -> blockchain_models.QueryChainMiniappLogResponse:
        """
        Description: 阿里云区块链小程序交易查询的记录
        Summary: 阿里云区块链小程序交易查询的记录
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_chain_miniapp_log_ex(request, headers, runtime)

    async def query_chain_miniapp_log_async(
        self,
        request: blockchain_models.QueryChainMiniappLogRequest,
    ) -> blockchain_models.QueryChainMiniappLogResponse:
        """
        Description: 阿里云区块链小程序交易查询的记录
        Summary: 阿里云区块链小程序交易查询的记录
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_chain_miniapp_log_ex_async(request, headers, runtime)

    def query_chain_miniapp_log_ex(
        self,
        request: blockchain_models.QueryChainMiniappLogRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryChainMiniappLogResponse:
        """
        Description: 阿里云区块链小程序交易查询的记录
        Summary: 阿里云区块链小程序交易查询的记录
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryChainMiniappLogResponse().from_map(
            self.do_request('1.0', 'baas.chain.miniapp.log.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_chain_miniapp_log_ex_async(
        self,
        request: blockchain_models.QueryChainMiniappLogRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryChainMiniappLogResponse:
        """
        Description: 阿里云区块链小程序交易查询的记录
        Summary: 阿里云区块链小程序交易查询的记录
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryChainMiniappLogResponse().from_map(
            await self.do_request_async('1.0', 'baas.chain.miniapp.log.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def create_chain_miniapp_code(
        self,
        request: blockchain_models.CreateChainMiniappCodeRequest,
    ) -> blockchain_models.CreateChainMiniappCodeResponse:
        """
        Description: 阿里云区块链小程序二维码生成
        Summary: 阿里云区块链小程序二维码生成
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.create_chain_miniapp_code_ex(request, headers, runtime)

    async def create_chain_miniapp_code_async(
        self,
        request: blockchain_models.CreateChainMiniappCodeRequest,
    ) -> blockchain_models.CreateChainMiniappCodeResponse:
        """
        Description: 阿里云区块链小程序二维码生成
        Summary: 阿里云区块链小程序二维码生成
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.create_chain_miniapp_code_ex_async(request, headers, runtime)

    def create_chain_miniapp_code_ex(
        self,
        request: blockchain_models.CreateChainMiniappCodeRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateChainMiniappCodeResponse:
        """
        Description: 阿里云区块链小程序二维码生成
        Summary: 阿里云区块链小程序二维码生成
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateChainMiniappCodeResponse().from_map(
            self.do_request('1.0', 'baas.chain.miniapp.code.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def create_chain_miniapp_code_ex_async(
        self,
        request: blockchain_models.CreateChainMiniappCodeRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateChainMiniappCodeResponse:
        """
        Description: 阿里云区块链小程序二维码生成
        Summary: 阿里云区块链小程序二维码生成
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateChainMiniappCodeResponse().from_map(
            await self.do_request_async('1.0', 'baas.chain.miniapp.code.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_union_buy(
        self,
        request: blockchain_models.QueryUnionBuyRequest,
    ) -> blockchain_models.QueryUnionBuyResponse:
        """
        Description: 阿里云售卖页联盟信息查询
        Summary: 阿里云售卖页联盟信息查询
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_union_buy_ex(request, headers, runtime)

    async def query_union_buy_async(
        self,
        request: blockchain_models.QueryUnionBuyRequest,
    ) -> blockchain_models.QueryUnionBuyResponse:
        """
        Description: 阿里云售卖页联盟信息查询
        Summary: 阿里云售卖页联盟信息查询
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_union_buy_ex_async(request, headers, runtime)

    def query_union_buy_ex(
        self,
        request: blockchain_models.QueryUnionBuyRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryUnionBuyResponse:
        """
        Description: 阿里云售卖页联盟信息查询
        Summary: 阿里云售卖页联盟信息查询
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryUnionBuyResponse().from_map(
            self.do_request('1.0', 'baas.union.buy.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_union_buy_ex_async(
        self,
        request: blockchain_models.QueryUnionBuyRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryUnionBuyResponse:
        """
        Description: 阿里云售卖页联盟信息查询
        Summary: 阿里云售卖页联盟信息查询
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryUnionBuyResponse().from_map(
            await self.do_request_async('1.0', 'baas.union.buy.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_chain_public_rest(
        self,
        request: blockchain_models.QueryChainPublicRestRequest,
    ) -> blockchain_models.QueryChainPublicRestResponse:
        """
        Description: 阿里云国内站免费体验链Rest查询
        Summary: 阿里云国内站免费体验链Rest查询
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_chain_public_rest_ex(request, headers, runtime)

    async def query_chain_public_rest_async(
        self,
        request: blockchain_models.QueryChainPublicRestRequest,
    ) -> blockchain_models.QueryChainPublicRestResponse:
        """
        Description: 阿里云国内站免费体验链Rest查询
        Summary: 阿里云国内站免费体验链Rest查询
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_chain_public_rest_ex_async(request, headers, runtime)

    def query_chain_public_rest_ex(
        self,
        request: blockchain_models.QueryChainPublicRestRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryChainPublicRestResponse:
        """
        Description: 阿里云国内站免费体验链Rest查询
        Summary: 阿里云国内站免费体验链Rest查询
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryChainPublicRestResponse().from_map(
            self.do_request('1.0', 'baas.chain.public.rest.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_chain_public_rest_ex_async(
        self,
        request: blockchain_models.QueryChainPublicRestRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryChainPublicRestResponse:
        """
        Description: 阿里云国内站免费体验链Rest查询
        Summary: 阿里云国内站免费体验链Rest查询
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryChainPublicRestResponse().from_map(
            await self.do_request_async('1.0', 'baas.chain.public.rest.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def apply_chain_public_rest(
        self,
        request: blockchain_models.ApplyChainPublicRestRequest,
    ) -> blockchain_models.ApplyChainPublicRestResponse:
        """
        Description: 阿里云国内站免费体验链申请Rest
        Summary: 阿里云国内站免费体验链申请Rest
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.apply_chain_public_rest_ex(request, headers, runtime)

    async def apply_chain_public_rest_async(
        self,
        request: blockchain_models.ApplyChainPublicRestRequest,
    ) -> blockchain_models.ApplyChainPublicRestResponse:
        """
        Description: 阿里云国内站免费体验链申请Rest
        Summary: 阿里云国内站免费体验链申请Rest
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.apply_chain_public_rest_ex_async(request, headers, runtime)

    def apply_chain_public_rest_ex(
        self,
        request: blockchain_models.ApplyChainPublicRestRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.ApplyChainPublicRestResponse:
        """
        Description: 阿里云国内站免费体验链申请Rest
        Summary: 阿里云国内站免费体验链申请Rest
        """
        UtilClient.validate_model(request)
        return blockchain_models.ApplyChainPublicRestResponse().from_map(
            self.do_request('1.0', 'baas.chain.public.rest.apply', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def apply_chain_public_rest_ex_async(
        self,
        request: blockchain_models.ApplyChainPublicRestRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.ApplyChainPublicRestResponse:
        """
        Description: 阿里云国内站免费体验链申请Rest
        Summary: 阿里云国内站免费体验链申请Rest
        """
        UtilClient.validate_model(request)
        return blockchain_models.ApplyChainPublicRestResponse().from_map(
            await self.do_request_async('1.0', 'baas.chain.public.rest.apply', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def reinit_chain_public_rest(
        self,
        request: blockchain_models.ReinitChainPublicRestRequest,
    ) -> blockchain_models.ReinitChainPublicRestResponse:
        """
        Description: 阿里云国内站重置Rest
        Summary: 阿里云国内站重置Rest
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.reinit_chain_public_rest_ex(request, headers, runtime)

    async def reinit_chain_public_rest_async(
        self,
        request: blockchain_models.ReinitChainPublicRestRequest,
    ) -> blockchain_models.ReinitChainPublicRestResponse:
        """
        Description: 阿里云国内站重置Rest
        Summary: 阿里云国内站重置Rest
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.reinit_chain_public_rest_ex_async(request, headers, runtime)

    def reinit_chain_public_rest_ex(
        self,
        request: blockchain_models.ReinitChainPublicRestRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.ReinitChainPublicRestResponse:
        """
        Description: 阿里云国内站重置Rest
        Summary: 阿里云国内站重置Rest
        """
        UtilClient.validate_model(request)
        return blockchain_models.ReinitChainPublicRestResponse().from_map(
            self.do_request('1.0', 'baas.chain.public.rest.reinit', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def reinit_chain_public_rest_ex_async(
        self,
        request: blockchain_models.ReinitChainPublicRestRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.ReinitChainPublicRestResponse:
        """
        Description: 阿里云国内站重置Rest
        Summary: 阿里云国内站重置Rest
        """
        UtilClient.validate_model(request)
        return blockchain_models.ReinitChainPublicRestResponse().from_map(
            await self.do_request_async('1.0', 'baas.chain.public.rest.reinit', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_chain_rest_ant(
        self,
        request: blockchain_models.QueryChainRestAntRequest,
    ) -> blockchain_models.QueryChainRestAntResponse:
        """
        Description: 阿里云国内站区块链rest查询
        Summary: 阿里云国内站区块链rest查询
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_chain_rest_ant_ex(request, headers, runtime)

    async def query_chain_rest_ant_async(
        self,
        request: blockchain_models.QueryChainRestAntRequest,
    ) -> blockchain_models.QueryChainRestAntResponse:
        """
        Description: 阿里云国内站区块链rest查询
        Summary: 阿里云国内站区块链rest查询
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_chain_rest_ant_ex_async(request, headers, runtime)

    def query_chain_rest_ant_ex(
        self,
        request: blockchain_models.QueryChainRestAntRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryChainRestAntResponse:
        """
        Description: 阿里云国内站区块链rest查询
        Summary: 阿里云国内站区块链rest查询
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryChainRestAntResponse().from_map(
            self.do_request('1.0', 'baas.chain.rest.ant.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_chain_rest_ant_ex_async(
        self,
        request: blockchain_models.QueryChainRestAntRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryChainRestAntResponse:
        """
        Description: 阿里云国内站区块链rest查询
        Summary: 阿里云国内站区块链rest查询
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryChainRestAntResponse().from_map(
            await self.do_request_async('1.0', 'baas.chain.rest.ant.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def apply_chain_rest_ant(
        self,
        request: blockchain_models.ApplyChainRestAntRequest,
    ) -> blockchain_models.ApplyChainRestAntResponse:
        """
        Description: 阿里云国内站区块链rest申请
        Summary: 阿里云国内站区块链rest申请
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.apply_chain_rest_ant_ex(request, headers, runtime)

    async def apply_chain_rest_ant_async(
        self,
        request: blockchain_models.ApplyChainRestAntRequest,
    ) -> blockchain_models.ApplyChainRestAntResponse:
        """
        Description: 阿里云国内站区块链rest申请
        Summary: 阿里云国内站区块链rest申请
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.apply_chain_rest_ant_ex_async(request, headers, runtime)

    def apply_chain_rest_ant_ex(
        self,
        request: blockchain_models.ApplyChainRestAntRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.ApplyChainRestAntResponse:
        """
        Description: 阿里云国内站区块链rest申请
        Summary: 阿里云国内站区块链rest申请
        """
        UtilClient.validate_model(request)
        return blockchain_models.ApplyChainRestAntResponse().from_map(
            self.do_request('1.0', 'baas.chain.rest.ant.apply', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def apply_chain_rest_ant_ex_async(
        self,
        request: blockchain_models.ApplyChainRestAntRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.ApplyChainRestAntResponse:
        """
        Description: 阿里云国内站区块链rest申请
        Summary: 阿里云国内站区块链rest申请
        """
        UtilClient.validate_model(request)
        return blockchain_models.ApplyChainRestAntResponse().from_map(
            await self.do_request_async('1.0', 'baas.chain.rest.ant.apply', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def reinit_chain_rest_ant(
        self,
        request: blockchain_models.ReinitChainRestAntRequest,
    ) -> blockchain_models.ReinitChainRestAntResponse:
        """
        Description: 阿里云国内站区块链重置Rest
        Summary: 阿里云国内站区块链重置Rest
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.reinit_chain_rest_ant_ex(request, headers, runtime)

    async def reinit_chain_rest_ant_async(
        self,
        request: blockchain_models.ReinitChainRestAntRequest,
    ) -> blockchain_models.ReinitChainRestAntResponse:
        """
        Description: 阿里云国内站区块链重置Rest
        Summary: 阿里云国内站区块链重置Rest
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.reinit_chain_rest_ant_ex_async(request, headers, runtime)

    def reinit_chain_rest_ant_ex(
        self,
        request: blockchain_models.ReinitChainRestAntRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.ReinitChainRestAntResponse:
        """
        Description: 阿里云国内站区块链重置Rest
        Summary: 阿里云国内站区块链重置Rest
        """
        UtilClient.validate_model(request)
        return blockchain_models.ReinitChainRestAntResponse().from_map(
            self.do_request('1.0', 'baas.chain.rest.ant.reinit', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def reinit_chain_rest_ant_ex_async(
        self,
        request: blockchain_models.ReinitChainRestAntRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.ReinitChainRestAntResponse:
        """
        Description: 阿里云国内站区块链重置Rest
        Summary: 阿里云国内站区块链重置Rest
        """
        UtilClient.validate_model(request)
        return blockchain_models.ReinitChainRestAntResponse().from_map(
            await self.do_request_async('1.0', 'baas.chain.rest.ant.reinit', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def send_chain_public_rest(
        self,
        request: blockchain_models.SendChainPublicRestRequest,
    ) -> blockchain_models.SendChainPublicRestResponse:
        """
        Description: 阿里云国内站公共链重置rest发送验证码
        Summary: 阿里云国内站公共链重置rest发送验证码
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.send_chain_public_rest_ex(request, headers, runtime)

    async def send_chain_public_rest_async(
        self,
        request: blockchain_models.SendChainPublicRestRequest,
    ) -> blockchain_models.SendChainPublicRestResponse:
        """
        Description: 阿里云国内站公共链重置rest发送验证码
        Summary: 阿里云国内站公共链重置rest发送验证码
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.send_chain_public_rest_ex_async(request, headers, runtime)

    def send_chain_public_rest_ex(
        self,
        request: blockchain_models.SendChainPublicRestRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.SendChainPublicRestResponse:
        """
        Description: 阿里云国内站公共链重置rest发送验证码
        Summary: 阿里云国内站公共链重置rest发送验证码
        """
        UtilClient.validate_model(request)
        return blockchain_models.SendChainPublicRestResponse().from_map(
            self.do_request('1.0', 'baas.chain.public.rest.send', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def send_chain_public_rest_ex_async(
        self,
        request: blockchain_models.SendChainPublicRestRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.SendChainPublicRestResponse:
        """
        Description: 阿里云国内站公共链重置rest发送验证码
        Summary: 阿里云国内站公共链重置rest发送验证码
        """
        UtilClient.validate_model(request)
        return blockchain_models.SendChainPublicRestResponse().from_map(
            await self.do_request_async('1.0', 'baas.chain.public.rest.send', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def send_chain_rest_ant(
        self,
        request: blockchain_models.SendChainRestAntRequest,
    ) -> blockchain_models.SendChainRestAntResponse:
        """
        Description: 阿里云国内站区块链重置rest发送验证码
        Summary: 阿里云国内站区块链重置rest发送验证码
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.send_chain_rest_ant_ex(request, headers, runtime)

    async def send_chain_rest_ant_async(
        self,
        request: blockchain_models.SendChainRestAntRequest,
    ) -> blockchain_models.SendChainRestAntResponse:
        """
        Description: 阿里云国内站区块链重置rest发送验证码
        Summary: 阿里云国内站区块链重置rest发送验证码
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.send_chain_rest_ant_ex_async(request, headers, runtime)

    def send_chain_rest_ant_ex(
        self,
        request: blockchain_models.SendChainRestAntRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.SendChainRestAntResponse:
        """
        Description: 阿里云国内站区块链重置rest发送验证码
        Summary: 阿里云国内站区块链重置rest发送验证码
        """
        UtilClient.validate_model(request)
        return blockchain_models.SendChainRestAntResponse().from_map(
            self.do_request('1.0', 'baas.chain.rest.ant.send', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def send_chain_rest_ant_ex_async(
        self,
        request: blockchain_models.SendChainRestAntRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.SendChainRestAntResponse:
        """
        Description: 阿里云国内站区块链重置rest发送验证码
        Summary: 阿里云国内站区块链重置rest发送验证码
        """
        UtilClient.validate_model(request)
        return blockchain_models.SendChainRestAntResponse().from_map(
            await self.do_request_async('1.0', 'baas.chain.rest.ant.send', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def start_aml_corporation_joinprepare(
        self,
        request: blockchain_models.StartAmlCorporationJoinprepareRequest,
    ) -> blockchain_models.StartAmlCorporationJoinprepareResponse:
        """
        Description: 企业通过调用该接口准备接入反洗钱信息共享平台
        Summary: 反洗钱信息共享平台入驻接口
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.start_aml_corporation_joinprepare_ex(request, headers, runtime)

    async def start_aml_corporation_joinprepare_async(
        self,
        request: blockchain_models.StartAmlCorporationJoinprepareRequest,
    ) -> blockchain_models.StartAmlCorporationJoinprepareResponse:
        """
        Description: 企业通过调用该接口准备接入反洗钱信息共享平台
        Summary: 反洗钱信息共享平台入驻接口
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.start_aml_corporation_joinprepare_ex_async(request, headers, runtime)

    def start_aml_corporation_joinprepare_ex(
        self,
        request: blockchain_models.StartAmlCorporationJoinprepareRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartAmlCorporationJoinprepareResponse:
        """
        Description: 企业通过调用该接口准备接入反洗钱信息共享平台
        Summary: 反洗钱信息共享平台入驻接口
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartAmlCorporationJoinprepareResponse().from_map(
            self.do_request('1.0', 'baas.aml.corporation.joinprepare.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def start_aml_corporation_joinprepare_ex_async(
        self,
        request: blockchain_models.StartAmlCorporationJoinprepareRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartAmlCorporationJoinprepareResponse:
        """
        Description: 企业通过调用该接口准备接入反洗钱信息共享平台
        Summary: 反洗钱信息共享平台入驻接口
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartAmlCorporationJoinprepareResponse().from_map(
            await self.do_request_async('1.0', 'baas.aml.corporation.joinprepare.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def start_aml_corporation_joincommit(
        self,
        request: blockchain_models.StartAmlCorporationJoincommitRequest,
    ) -> blockchain_models.StartAmlCorporationJoincommitResponse:
        """
        Description: 反洗钱信息共享平台确认加盟接口，用户在准备阶段确认了平台安全性之后可以确认入驻
        Summary: 反洗钱信息共享平台确认加盟接口
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.start_aml_corporation_joincommit_ex(request, headers, runtime)

    async def start_aml_corporation_joincommit_async(
        self,
        request: blockchain_models.StartAmlCorporationJoincommitRequest,
    ) -> blockchain_models.StartAmlCorporationJoincommitResponse:
        """
        Description: 反洗钱信息共享平台确认加盟接口，用户在准备阶段确认了平台安全性之后可以确认入驻
        Summary: 反洗钱信息共享平台确认加盟接口
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.start_aml_corporation_joincommit_ex_async(request, headers, runtime)

    def start_aml_corporation_joincommit_ex(
        self,
        request: blockchain_models.StartAmlCorporationJoincommitRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartAmlCorporationJoincommitResponse:
        """
        Description: 反洗钱信息共享平台确认加盟接口，用户在准备阶段确认了平台安全性之后可以确认入驻
        Summary: 反洗钱信息共享平台确认加盟接口
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartAmlCorporationJoincommitResponse().from_map(
            self.do_request('1.0', 'baas.aml.corporation.joincommit.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def start_aml_corporation_joincommit_ex_async(
        self,
        request: blockchain_models.StartAmlCorporationJoincommitRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartAmlCorporationJoincommitResponse:
        """
        Description: 反洗钱信息共享平台确认加盟接口，用户在准备阶段确认了平台安全性之后可以确认入驻
        Summary: 反洗钱信息共享平台确认加盟接口
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartAmlCorporationJoincommitResponse().from_map(
            await self.do_request_async('1.0', 'baas.aml.corporation.joincommit.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def start_aml_person_twofactor(
        self,
        request: blockchain_models.StartAmlPersonTwofactorRequest,
    ) -> blockchain_models.StartAmlPersonTwofactorResponse:
        """
        Description: 反洗钱系统二要素实名认证
        Summary: 反洗钱系统二要素实名认证
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.start_aml_person_twofactor_ex(request, headers, runtime)

    async def start_aml_person_twofactor_async(
        self,
        request: blockchain_models.StartAmlPersonTwofactorRequest,
    ) -> blockchain_models.StartAmlPersonTwofactorResponse:
        """
        Description: 反洗钱系统二要素实名认证
        Summary: 反洗钱系统二要素实名认证
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.start_aml_person_twofactor_ex_async(request, headers, runtime)

    def start_aml_person_twofactor_ex(
        self,
        request: blockchain_models.StartAmlPersonTwofactorRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartAmlPersonTwofactorResponse:
        """
        Description: 反洗钱系统二要素实名认证
        Summary: 反洗钱系统二要素实名认证
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartAmlPersonTwofactorResponse().from_map(
            self.do_request('1.0', 'baas.aml.person.twofactor.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def start_aml_person_twofactor_ex_async(
        self,
        request: blockchain_models.StartAmlPersonTwofactorRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartAmlPersonTwofactorResponse:
        """
        Description: 反洗钱系统二要素实名认证
        Summary: 反洗钱系统二要素实名认证
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartAmlPersonTwofactorResponse().from_map(
            await self.do_request_async('1.0', 'baas.aml.person.twofactor.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def save_business_deposit(
        self,
        request: blockchain_models.SaveBusinessDepositRequest,
    ) -> blockchain_models.SaveBusinessDepositResponse:
        """
        Description: 简单存证
        Summary: 简单存证
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.save_business_deposit_ex(request, headers, runtime)

    async def save_business_deposit_async(
        self,
        request: blockchain_models.SaveBusinessDepositRequest,
    ) -> blockchain_models.SaveBusinessDepositResponse:
        """
        Description: 简单存证
        Summary: 简单存证
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.save_business_deposit_ex_async(request, headers, runtime)

    def save_business_deposit_ex(
        self,
        request: blockchain_models.SaveBusinessDepositRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.SaveBusinessDepositResponse:
        """
        Description: 简单存证
        Summary: 简单存证
        """
        UtilClient.validate_model(request)
        return blockchain_models.SaveBusinessDepositResponse().from_map(
            self.do_request('1.0', 'baas.business.deposit.save', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def save_business_deposit_ex_async(
        self,
        request: blockchain_models.SaveBusinessDepositRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.SaveBusinessDepositResponse:
        """
        Description: 简单存证
        Summary: 简单存证
        """
        UtilClient.validate_model(request)
        return blockchain_models.SaveBusinessDepositResponse().from_map(
            await self.do_request_async('1.0', 'baas.business.deposit.save', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def save_business_deposit_metadata(
        self,
        request: blockchain_models.SaveBusinessDepositMetadataRequest,
    ) -> blockchain_models.SaveBusinessDepositMetadataResponse:
        """
        Description: 存储带有描述性的数据
        Summary: 存储带有描述性的数据
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.save_business_deposit_metadata_ex(request, headers, runtime)

    async def save_business_deposit_metadata_async(
        self,
        request: blockchain_models.SaveBusinessDepositMetadataRequest,
    ) -> blockchain_models.SaveBusinessDepositMetadataResponse:
        """
        Description: 存储带有描述性的数据
        Summary: 存储带有描述性的数据
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.save_business_deposit_metadata_ex_async(request, headers, runtime)

    def save_business_deposit_metadata_ex(
        self,
        request: blockchain_models.SaveBusinessDepositMetadataRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.SaveBusinessDepositMetadataResponse:
        """
        Description: 存储带有描述性的数据
        Summary: 存储带有描述性的数据
        """
        UtilClient.validate_model(request)
        return blockchain_models.SaveBusinessDepositMetadataResponse().from_map(
            self.do_request('1.0', 'baas.business.deposit.metadata.save', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def save_business_deposit_metadata_ex_async(
        self,
        request: blockchain_models.SaveBusinessDepositMetadataRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.SaveBusinessDepositMetadataResponse:
        """
        Description: 存储带有描述性的数据
        Summary: 存储带有描述性的数据
        """
        UtilClient.validate_model(request)
        return blockchain_models.SaveBusinessDepositMetadataResponse().from_map(
            await self.do_request_async('1.0', 'baas.business.deposit.metadata.save', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def save_business_deposit_encrypt(
        self,
        request: blockchain_models.SaveBusinessDepositEncryptRequest,
    ) -> blockchain_models.SaveBusinessDepositEncryptResponse:
        """
        Description: 将存证的数据在链上加密
        Summary: 将存证的数据在链上加密
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.save_business_deposit_encrypt_ex(request, headers, runtime)

    async def save_business_deposit_encrypt_async(
        self,
        request: blockchain_models.SaveBusinessDepositEncryptRequest,
    ) -> blockchain_models.SaveBusinessDepositEncryptResponse:
        """
        Description: 将存证的数据在链上加密
        Summary: 将存证的数据在链上加密
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.save_business_deposit_encrypt_ex_async(request, headers, runtime)

    def save_business_deposit_encrypt_ex(
        self,
        request: blockchain_models.SaveBusinessDepositEncryptRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.SaveBusinessDepositEncryptResponse:
        """
        Description: 将存证的数据在链上加密
        Summary: 将存证的数据在链上加密
        """
        UtilClient.validate_model(request)
        return blockchain_models.SaveBusinessDepositEncryptResponse().from_map(
            self.do_request('1.0', 'baas.business.deposit.encrypt.save', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def save_business_deposit_encrypt_ex_async(
        self,
        request: blockchain_models.SaveBusinessDepositEncryptRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.SaveBusinessDepositEncryptResponse:
        """
        Description: 将存证的数据在链上加密
        Summary: 将存证的数据在链上加密
        """
        UtilClient.validate_model(request)
        return blockchain_models.SaveBusinessDepositEncryptResponse().from_map(
            await self.do_request_async('1.0', 'baas.business.deposit.encrypt.save', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def save_business_deposit_encryptmetadata(
        self,
        request: blockchain_models.SaveBusinessDepositEncryptmetadataRequest,
    ) -> blockchain_models.SaveBusinessDepositEncryptmetadataResponse:
        """
        Description: 存证带有描述性的数据并加密
        Summary: 存证带有描述性的数据并加密
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.save_business_deposit_encryptmetadata_ex(request, headers, runtime)

    async def save_business_deposit_encryptmetadata_async(
        self,
        request: blockchain_models.SaveBusinessDepositEncryptmetadataRequest,
    ) -> blockchain_models.SaveBusinessDepositEncryptmetadataResponse:
        """
        Description: 存证带有描述性的数据并加密
        Summary: 存证带有描述性的数据并加密
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.save_business_deposit_encryptmetadata_ex_async(request, headers, runtime)

    def save_business_deposit_encryptmetadata_ex(
        self,
        request: blockchain_models.SaveBusinessDepositEncryptmetadataRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.SaveBusinessDepositEncryptmetadataResponse:
        """
        Description: 存证带有描述性的数据并加密
        Summary: 存证带有描述性的数据并加密
        """
        UtilClient.validate_model(request)
        return blockchain_models.SaveBusinessDepositEncryptmetadataResponse().from_map(
            self.do_request('1.0', 'baas.business.deposit.encryptmetadata.save', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def save_business_deposit_encryptmetadata_ex_async(
        self,
        request: blockchain_models.SaveBusinessDepositEncryptmetadataRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.SaveBusinessDepositEncryptmetadataResponse:
        """
        Description: 存证带有描述性的数据并加密
        Summary: 存证带有描述性的数据并加密
        """
        UtilClient.validate_model(request)
        return blockchain_models.SaveBusinessDepositEncryptmetadataResponse().from_map(
            await self.do_request_async('1.0', 'baas.business.deposit.encryptmetadata.save', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def create_business_did(
        self,
        request: blockchain_models.CreateBusinessDidRequest,
    ) -> blockchain_models.CreateBusinessDidResponse:
        """
        Description: 通过授权宝创建did
        Summary: 创建did
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.create_business_did_ex(request, headers, runtime)

    async def create_business_did_async(
        self,
        request: blockchain_models.CreateBusinessDidRequest,
    ) -> blockchain_models.CreateBusinessDidResponse:
        """
        Description: 通过授权宝创建did
        Summary: 创建did
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.create_business_did_ex_async(request, headers, runtime)

    def create_business_did_ex(
        self,
        request: blockchain_models.CreateBusinessDidRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateBusinessDidResponse:
        """
        Description: 通过授权宝创建did
        Summary: 创建did
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateBusinessDidResponse().from_map(
            self.do_request('1.0', 'baas.business.did.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def create_business_did_ex_async(
        self,
        request: blockchain_models.CreateBusinessDidRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateBusinessDidResponse:
        """
        Description: 通过授权宝创建did
        Summary: 创建did
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateBusinessDidResponse().from_map(
            await self.do_request_async('1.0', 'baas.business.did.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def create_business_bizaccount(
        self,
        request: blockchain_models.CreateBusinessBizaccountRequest,
    ) -> blockchain_models.CreateBusinessBizaccountResponse:
        """
        Description: 根据did创建链上账户
        Summary: 根据did创建链上账户
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.create_business_bizaccount_ex(request, headers, runtime)

    async def create_business_bizaccount_async(
        self,
        request: blockchain_models.CreateBusinessBizaccountRequest,
    ) -> blockchain_models.CreateBusinessBizaccountResponse:
        """
        Description: 根据did创建链上账户
        Summary: 根据did创建链上账户
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.create_business_bizaccount_ex_async(request, headers, runtime)

    def create_business_bizaccount_ex(
        self,
        request: blockchain_models.CreateBusinessBizaccountRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateBusinessBizaccountResponse:
        """
        Description: 根据did创建链上账户
        Summary: 根据did创建链上账户
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateBusinessBizaccountResponse().from_map(
            self.do_request('1.0', 'baas.business.bizaccount.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def create_business_bizaccount_ex_async(
        self,
        request: blockchain_models.CreateBusinessBizaccountRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateBusinessBizaccountResponse:
        """
        Description: 根据did创建链上账户
        Summary: 根据did创建链上账户
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateBusinessBizaccountResponse().from_map(
            await self.do_request_async('1.0', 'baas.business.bizaccount.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_business_deposit(
        self,
        request: blockchain_models.QueryBusinessDepositRequest,
    ) -> blockchain_models.QueryBusinessDepositResponse:
        """
        Description: 查询存证数据
        Summary: 查询存证数据
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_business_deposit_ex(request, headers, runtime)

    async def query_business_deposit_async(
        self,
        request: blockchain_models.QueryBusinessDepositRequest,
    ) -> blockchain_models.QueryBusinessDepositResponse:
        """
        Description: 查询存证数据
        Summary: 查询存证数据
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_business_deposit_ex_async(request, headers, runtime)

    def query_business_deposit_ex(
        self,
        request: blockchain_models.QueryBusinessDepositRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryBusinessDepositResponse:
        """
        Description: 查询存证数据
        Summary: 查询存证数据
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryBusinessDepositResponse().from_map(
            self.do_request('1.0', 'baas.business.deposit.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_business_deposit_ex_async(
        self,
        request: blockchain_models.QueryBusinessDepositRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryBusinessDepositResponse:
        """
        Description: 查询存证数据
        Summary: 查询存证数据
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryBusinessDepositResponse().from_map(
            await self.do_request_async('1.0', 'baas.business.deposit.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def auth_business_depositdata(
        self,
        request: blockchain_models.AuthBusinessDepositdataRequest,
    ) -> blockchain_models.AuthBusinessDepositdataResponse:
        """
        Description: 授权存证数据
        Summary: 授权存证数据
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.auth_business_depositdata_ex(request, headers, runtime)

    async def auth_business_depositdata_async(
        self,
        request: blockchain_models.AuthBusinessDepositdataRequest,
    ) -> blockchain_models.AuthBusinessDepositdataResponse:
        """
        Description: 授权存证数据
        Summary: 授权存证数据
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.auth_business_depositdata_ex_async(request, headers, runtime)

    def auth_business_depositdata_ex(
        self,
        request: blockchain_models.AuthBusinessDepositdataRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.AuthBusinessDepositdataResponse:
        """
        Description: 授权存证数据
        Summary: 授权存证数据
        """
        UtilClient.validate_model(request)
        return blockchain_models.AuthBusinessDepositdataResponse().from_map(
            self.do_request('1.0', 'baas.business.depositdata.auth', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def auth_business_depositdata_ex_async(
        self,
        request: blockchain_models.AuthBusinessDepositdataRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.AuthBusinessDepositdataResponse:
        """
        Description: 授权存证数据
        Summary: 授权存证数据
        """
        UtilClient.validate_model(request)
        return blockchain_models.AuthBusinessDepositdataResponse().from_map(
            await self.do_request_async('1.0', 'baas.business.depositdata.auth', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def create_business_contract_deploy(
        self,
        request: blockchain_models.CreateBusinessContractDeployRequest,
    ) -> blockchain_models.CreateBusinessContractDeployResponse:
        """
        Description: 创建部署合约
        Summary: 创建部署合约
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.create_business_contract_deploy_ex(request, headers, runtime)

    async def create_business_contract_deploy_async(
        self,
        request: blockchain_models.CreateBusinessContractDeployRequest,
    ) -> blockchain_models.CreateBusinessContractDeployResponse:
        """
        Description: 创建部署合约
        Summary: 创建部署合约
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.create_business_contract_deploy_ex_async(request, headers, runtime)

    def create_business_contract_deploy_ex(
        self,
        request: blockchain_models.CreateBusinessContractDeployRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateBusinessContractDeployResponse:
        """
        Description: 创建部署合约
        Summary: 创建部署合约
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateBusinessContractDeployResponse().from_map(
            self.do_request('1.0', 'baas.business.contract.deploy.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def create_business_contract_deploy_ex_async(
        self,
        request: blockchain_models.CreateBusinessContractDeployRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateBusinessContractDeployResponse:
        """
        Description: 创建部署合约
        Summary: 创建部署合约
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateBusinessContractDeployResponse().from_map(
            await self.do_request_async('1.0', 'baas.business.contract.deploy.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def create_business_contractnormalcall(
        self,
        request: blockchain_models.CreateBusinessContractnormalcallRequest,
    ) -> blockchain_models.CreateBusinessContractnormalcallResponse:
        """
        Description: 普通合约接口调用
        Summary: 普通合约接口调用
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.create_business_contractnormalcall_ex(request, headers, runtime)

    async def create_business_contractnormalcall_async(
        self,
        request: blockchain_models.CreateBusinessContractnormalcallRequest,
    ) -> blockchain_models.CreateBusinessContractnormalcallResponse:
        """
        Description: 普通合约接口调用
        Summary: 普通合约接口调用
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.create_business_contractnormalcall_ex_async(request, headers, runtime)

    def create_business_contractnormalcall_ex(
        self,
        request: blockchain_models.CreateBusinessContractnormalcallRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateBusinessContractnormalcallResponse:
        """
        Description: 普通合约接口调用
        Summary: 普通合约接口调用
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateBusinessContractnormalcallResponse().from_map(
            self.do_request('1.0', 'baas.business.contractnormalcall.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def create_business_contractnormalcall_ex_async(
        self,
        request: blockchain_models.CreateBusinessContractnormalcallRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateBusinessContractnormalcallResponse:
        """
        Description: 普通合约接口调用
        Summary: 普通合约接口调用
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateBusinessContractnormalcallResponse().from_map(
            await self.do_request_async('1.0', 'baas.business.contractnormalcall.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def create_business_contractencryptcall(
        self,
        request: blockchain_models.CreateBusinessContractencryptcallRequest,
    ) -> blockchain_models.CreateBusinessContractencryptcallResponse:
        """
        Description: 调用加密合约接口
        Summary: 调用加密合约接口
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.create_business_contractencryptcall_ex(request, headers, runtime)

    async def create_business_contractencryptcall_async(
        self,
        request: blockchain_models.CreateBusinessContractencryptcallRequest,
    ) -> blockchain_models.CreateBusinessContractencryptcallResponse:
        """
        Description: 调用加密合约接口
        Summary: 调用加密合约接口
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.create_business_contractencryptcall_ex_async(request, headers, runtime)

    def create_business_contractencryptcall_ex(
        self,
        request: blockchain_models.CreateBusinessContractencryptcallRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateBusinessContractencryptcallResponse:
        """
        Description: 调用加密合约接口
        Summary: 调用加密合约接口
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateBusinessContractencryptcallResponse().from_map(
            self.do_request('1.0', 'baas.business.contractencryptcall.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def create_business_contractencryptcall_ex_async(
        self,
        request: blockchain_models.CreateBusinessContractencryptcallRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateBusinessContractencryptcallResponse:
        """
        Description: 调用加密合约接口
        Summary: 调用加密合约接口
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateBusinessContractencryptcallResponse().from_map(
            await self.do_request_async('1.0', 'baas.business.contractencryptcall.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_business_contractreceipt(
        self,
        request: blockchain_models.QueryBusinessContractreceiptRequest,
    ) -> blockchain_models.QueryBusinessContractreceiptResponse:
        """
        Description: 查询交易receipt
        Summary: 查询交易receipt
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_business_contractreceipt_ex(request, headers, runtime)

    async def query_business_contractreceipt_async(
        self,
        request: blockchain_models.QueryBusinessContractreceiptRequest,
    ) -> blockchain_models.QueryBusinessContractreceiptResponse:
        """
        Description: 查询交易receipt
        Summary: 查询交易receipt
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_business_contractreceipt_ex_async(request, headers, runtime)

    def query_business_contractreceipt_ex(
        self,
        request: blockchain_models.QueryBusinessContractreceiptRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryBusinessContractreceiptResponse:
        """
        Description: 查询交易receipt
        Summary: 查询交易receipt
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryBusinessContractreceiptResponse().from_map(
            self.do_request('1.0', 'baas.business.contractreceipt.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_business_contractreceipt_ex_async(
        self,
        request: blockchain_models.QueryBusinessContractreceiptRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryBusinessContractreceiptResponse:
        """
        Description: 查询交易receipt
        Summary: 查询交易receipt
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryBusinessContractreceiptResponse().from_map(
            await self.do_request_async('1.0', 'baas.business.contractreceipt.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_business_contractencryptreceipt(
        self,
        request: blockchain_models.QueryBusinessContractencryptreceiptRequest,
    ) -> blockchain_models.QueryBusinessContractencryptreceiptResponse:
        """
        Description: 查询加密的receipt
        Summary: 查询加密的receipt
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_business_contractencryptreceipt_ex(request, headers, runtime)

    async def query_business_contractencryptreceipt_async(
        self,
        request: blockchain_models.QueryBusinessContractencryptreceiptRequest,
    ) -> blockchain_models.QueryBusinessContractencryptreceiptResponse:
        """
        Description: 查询加密的receipt
        Summary: 查询加密的receipt
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_business_contractencryptreceipt_ex_async(request, headers, runtime)

    def query_business_contractencryptreceipt_ex(
        self,
        request: blockchain_models.QueryBusinessContractencryptreceiptRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryBusinessContractencryptreceiptResponse:
        """
        Description: 查询加密的receipt
        Summary: 查询加密的receipt
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryBusinessContractencryptreceiptResponse().from_map(
            self.do_request('1.0', 'baas.business.contractencryptreceipt.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_business_contractencryptreceipt_ex_async(
        self,
        request: blockchain_models.QueryBusinessContractencryptreceiptRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryBusinessContractencryptreceiptResponse:
        """
        Description: 查询加密的receipt
        Summary: 查询加密的receipt
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryBusinessContractencryptreceiptResponse().from_map(
            await self.do_request_async('1.0', 'baas.business.contractencryptreceipt.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_business_contractencryptmethod(
        self,
        request: blockchain_models.QueryBusinessContractencryptmethodRequest,
    ) -> blockchain_models.QueryBusinessContractencryptmethodResponse:
        """
        Description: 查询合约加密内容的方法
        Summary: 查询合约加密内容的方法
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_business_contractencryptmethod_ex(request, headers, runtime)

    async def query_business_contractencryptmethod_async(
        self,
        request: blockchain_models.QueryBusinessContractencryptmethodRequest,
    ) -> blockchain_models.QueryBusinessContractencryptmethodResponse:
        """
        Description: 查询合约加密内容的方法
        Summary: 查询合约加密内容的方法
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_business_contractencryptmethod_ex_async(request, headers, runtime)

    def query_business_contractencryptmethod_ex(
        self,
        request: blockchain_models.QueryBusinessContractencryptmethodRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryBusinessContractencryptmethodResponse:
        """
        Description: 查询合约加密内容的方法
        Summary: 查询合约加密内容的方法
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryBusinessContractencryptmethodResponse().from_map(
            self.do_request('1.0', 'baas.business.contractencryptmethod.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_business_contractencryptmethod_ex_async(
        self,
        request: blockchain_models.QueryBusinessContractencryptmethodRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryBusinessContractencryptmethodResponse:
        """
        Description: 查询合约加密内容的方法
        Summary: 查询合约加密内容的方法
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryBusinessContractencryptmethodResponse().from_map(
            await self.do_request_async('1.0', 'baas.business.contractencryptmethod.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def deploy_business_agreement(
        self,
        request: blockchain_models.DeployBusinessAgreementRequest,
    ) -> blockchain_models.DeployBusinessAgreementResponse:
        """
        Description: 部署业务共识合约
        Summary: 部署业务共识合约
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.deploy_business_agreement_ex(request, headers, runtime)

    async def deploy_business_agreement_async(
        self,
        request: blockchain_models.DeployBusinessAgreementRequest,
    ) -> blockchain_models.DeployBusinessAgreementResponse:
        """
        Description: 部署业务共识合约
        Summary: 部署业务共识合约
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.deploy_business_agreement_ex_async(request, headers, runtime)

    def deploy_business_agreement_ex(
        self,
        request: blockchain_models.DeployBusinessAgreementRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.DeployBusinessAgreementResponse:
        """
        Description: 部署业务共识合约
        Summary: 部署业务共识合约
        """
        UtilClient.validate_model(request)
        return blockchain_models.DeployBusinessAgreementResponse().from_map(
            self.do_request('1.0', 'baas.business.agreement.deploy', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def deploy_business_agreement_ex_async(
        self,
        request: blockchain_models.DeployBusinessAgreementRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.DeployBusinessAgreementResponse:
        """
        Description: 部署业务共识合约
        Summary: 部署业务共识合约
        """
        UtilClient.validate_model(request)
        return blockchain_models.DeployBusinessAgreementResponse().from_map(
            await self.do_request_async('1.0', 'baas.business.agreement.deploy', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def create_business_agreement_registertemplate(
        self,
        request: blockchain_models.CreateBusinessAgreementRegistertemplateRequest,
    ) -> blockchain_models.CreateBusinessAgreementRegistertemplateResponse:
        """
        Description: 创建业务共识模板
        Summary: 创建业务共识模板
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.create_business_agreement_registertemplate_ex(request, headers, runtime)

    async def create_business_agreement_registertemplate_async(
        self,
        request: blockchain_models.CreateBusinessAgreementRegistertemplateRequest,
    ) -> blockchain_models.CreateBusinessAgreementRegistertemplateResponse:
        """
        Description: 创建业务共识模板
        Summary: 创建业务共识模板
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.create_business_agreement_registertemplate_ex_async(request, headers, runtime)

    def create_business_agreement_registertemplate_ex(
        self,
        request: blockchain_models.CreateBusinessAgreementRegistertemplateRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateBusinessAgreementRegistertemplateResponse:
        """
        Description: 创建业务共识模板
        Summary: 创建业务共识模板
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateBusinessAgreementRegistertemplateResponse().from_map(
            self.do_request('1.0', 'baas.business.agreement.registertemplate.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def create_business_agreement_registertemplate_ex_async(
        self,
        request: blockchain_models.CreateBusinessAgreementRegistertemplateRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateBusinessAgreementRegistertemplateResponse:
        """
        Description: 创建业务共识模板
        Summary: 创建业务共识模板
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateBusinessAgreementRegistertemplateResponse().from_map(
            await self.do_request_async('1.0', 'baas.business.agreement.registertemplate.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def create_business_agreement_register(
        self,
        request: blockchain_models.CreateBusinessAgreementRegisterRequest,
    ) -> blockchain_models.CreateBusinessAgreementRegisterResponse:
        """
        Description: 注册业务共识实例
        Summary: 注册业务共识实例
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.create_business_agreement_register_ex(request, headers, runtime)

    async def create_business_agreement_register_async(
        self,
        request: blockchain_models.CreateBusinessAgreementRegisterRequest,
    ) -> blockchain_models.CreateBusinessAgreementRegisterResponse:
        """
        Description: 注册业务共识实例
        Summary: 注册业务共识实例
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.create_business_agreement_register_ex_async(request, headers, runtime)

    def create_business_agreement_register_ex(
        self,
        request: blockchain_models.CreateBusinessAgreementRegisterRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateBusinessAgreementRegisterResponse:
        """
        Description: 注册业务共识实例
        Summary: 注册业务共识实例
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateBusinessAgreementRegisterResponse().from_map(
            self.do_request('1.0', 'baas.business.agreement.register.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def create_business_agreement_register_ex_async(
        self,
        request: blockchain_models.CreateBusinessAgreementRegisterRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateBusinessAgreementRegisterResponse:
        """
        Description: 注册业务共识实例
        Summary: 注册业务共识实例
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateBusinessAgreementRegisterResponse().from_map(
            await self.do_request_async('1.0', 'baas.business.agreement.register.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def create_business_agreement_sign(
        self,
        request: blockchain_models.CreateBusinessAgreementSignRequest,
    ) -> blockchain_models.CreateBusinessAgreementSignResponse:
        """
        Description: 对业务共识key进行签名认可
        Summary: 对业务共识key进行签名认可
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.create_business_agreement_sign_ex(request, headers, runtime)

    async def create_business_agreement_sign_async(
        self,
        request: blockchain_models.CreateBusinessAgreementSignRequest,
    ) -> blockchain_models.CreateBusinessAgreementSignResponse:
        """
        Description: 对业务共识key进行签名认可
        Summary: 对业务共识key进行签名认可
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.create_business_agreement_sign_ex_async(request, headers, runtime)

    def create_business_agreement_sign_ex(
        self,
        request: blockchain_models.CreateBusinessAgreementSignRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateBusinessAgreementSignResponse:
        """
        Description: 对业务共识key进行签名认可
        Summary: 对业务共识key进行签名认可
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateBusinessAgreementSignResponse().from_map(
            self.do_request('1.0', 'baas.business.agreement.sign.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def create_business_agreement_sign_ex_async(
        self,
        request: blockchain_models.CreateBusinessAgreementSignRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateBusinessAgreementSignResponse:
        """
        Description: 对业务共识key进行签名认可
        Summary: 对业务共识key进行签名认可
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateBusinessAgreementSignResponse().from_map(
            await self.do_request_async('1.0', 'baas.business.agreement.sign.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_business_agreement(
        self,
        request: blockchain_models.QueryBusinessAgreementRequest,
    ) -> blockchain_models.QueryBusinessAgreementResponse:
        """
        Description: 查询业务共识当前状态
        Summary: 查询业务共识当前状态
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_business_agreement_ex(request, headers, runtime)

    async def query_business_agreement_async(
        self,
        request: blockchain_models.QueryBusinessAgreementRequest,
    ) -> blockchain_models.QueryBusinessAgreementResponse:
        """
        Description: 查询业务共识当前状态
        Summary: 查询业务共识当前状态
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_business_agreement_ex_async(request, headers, runtime)

    def query_business_agreement_ex(
        self,
        request: blockchain_models.QueryBusinessAgreementRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryBusinessAgreementResponse:
        """
        Description: 查询业务共识当前状态
        Summary: 查询业务共识当前状态
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryBusinessAgreementResponse().from_map(
            self.do_request('1.0', 'baas.business.agreement.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_business_agreement_ex_async(
        self,
        request: blockchain_models.QueryBusinessAgreementRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryBusinessAgreementResponse:
        """
        Description: 查询业务共识当前状态
        Summary: 查询业务共识当前状态
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryBusinessAgreementResponse().from_map(
            await self.do_request_async('1.0', 'baas.business.agreement.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def create_business_contract_grantdid(
        self,
        request: blockchain_models.CreateBusinessContractGrantdidRequest,
    ) -> blockchain_models.CreateBusinessContractGrantdidResponse:
        """
        Description: 对合约隐私key授权
        Summary: 对合约隐私key授权
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.create_business_contract_grantdid_ex(request, headers, runtime)

    async def create_business_contract_grantdid_async(
        self,
        request: blockchain_models.CreateBusinessContractGrantdidRequest,
    ) -> blockchain_models.CreateBusinessContractGrantdidResponse:
        """
        Description: 对合约隐私key授权
        Summary: 对合约隐私key授权
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.create_business_contract_grantdid_ex_async(request, headers, runtime)

    def create_business_contract_grantdid_ex(
        self,
        request: blockchain_models.CreateBusinessContractGrantdidRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateBusinessContractGrantdidResponse:
        """
        Description: 对合约隐私key授权
        Summary: 对合约隐私key授权
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateBusinessContractGrantdidResponse().from_map(
            self.do_request('1.0', 'baas.business.contract.grantdid.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def create_business_contract_grantdid_ex_async(
        self,
        request: blockchain_models.CreateBusinessContractGrantdidRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateBusinessContractGrantdidResponse:
        """
        Description: 对合约隐私key授权
        Summary: 对合约隐私key授权
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateBusinessContractGrantdidResponse().from_map(
            await self.do_request_async('1.0', 'baas.business.contract.grantdid.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_business_deposit_encryptedmetadata(
        self,
        request: blockchain_models.QueryBusinessDepositEncryptedmetadataRequest,
    ) -> blockchain_models.QueryBusinessDepositEncryptedmetadataResponse:
        """
        Description: 查询被加密的存证数据
        Summary: 查询被加密的存证数据
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_business_deposit_encryptedmetadata_ex(request, headers, runtime)

    async def query_business_deposit_encryptedmetadata_async(
        self,
        request: blockchain_models.QueryBusinessDepositEncryptedmetadataRequest,
    ) -> blockchain_models.QueryBusinessDepositEncryptedmetadataResponse:
        """
        Description: 查询被加密的存证数据
        Summary: 查询被加密的存证数据
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_business_deposit_encryptedmetadata_ex_async(request, headers, runtime)

    def query_business_deposit_encryptedmetadata_ex(
        self,
        request: blockchain_models.QueryBusinessDepositEncryptedmetadataRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryBusinessDepositEncryptedmetadataResponse:
        """
        Description: 查询被加密的存证数据
        Summary: 查询被加密的存证数据
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryBusinessDepositEncryptedmetadataResponse().from_map(
            self.do_request('1.0', 'baas.business.deposit.encryptedmetadata.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_business_deposit_encryptedmetadata_ex_async(
        self,
        request: blockchain_models.QueryBusinessDepositEncryptedmetadataRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryBusinessDepositEncryptedmetadataResponse:
        """
        Description: 查询被加密的存证数据
        Summary: 查询被加密的存证数据
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryBusinessDepositEncryptedmetadataResponse().from_map(
            await self.do_request_async('1.0', 'baas.business.deposit.encryptedmetadata.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def auth_business_depositdata_corp(
        self,
        request: blockchain_models.AuthBusinessDepositdataCorpRequest,
    ) -> blockchain_models.AuthBusinessDepositdataCorpResponse:
        """
        Description: 授权存证数据给对应的组织机构，该组织下所有的人员都可以查询该存证数据的原内容
        Summary: 授权存证数据给对应的组织机构
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.auth_business_depositdata_corp_ex(request, headers, runtime)

    async def auth_business_depositdata_corp_async(
        self,
        request: blockchain_models.AuthBusinessDepositdataCorpRequest,
    ) -> blockchain_models.AuthBusinessDepositdataCorpResponse:
        """
        Description: 授权存证数据给对应的组织机构，该组织下所有的人员都可以查询该存证数据的原内容
        Summary: 授权存证数据给对应的组织机构
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.auth_business_depositdata_corp_ex_async(request, headers, runtime)

    def auth_business_depositdata_corp_ex(
        self,
        request: blockchain_models.AuthBusinessDepositdataCorpRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.AuthBusinessDepositdataCorpResponse:
        """
        Description: 授权存证数据给对应的组织机构，该组织下所有的人员都可以查询该存证数据的原内容
        Summary: 授权存证数据给对应的组织机构
        """
        UtilClient.validate_model(request)
        return blockchain_models.AuthBusinessDepositdataCorpResponse().from_map(
            self.do_request('1.0', 'baas.business.depositdata.corp.auth', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def auth_business_depositdata_corp_ex_async(
        self,
        request: blockchain_models.AuthBusinessDepositdataCorpRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.AuthBusinessDepositdataCorpResponse:
        """
        Description: 授权存证数据给对应的组织机构，该组织下所有的人员都可以查询该存证数据的原内容
        Summary: 授权存证数据给对应的组织机构
        """
        UtilClient.validate_model(request)
        return blockchain_models.AuthBusinessDepositdataCorpResponse().from_map(
            await self.do_request_async('1.0', 'baas.business.depositdata.corp.auth', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def cancel_business_deposit_grantdid(
        self,
        request: blockchain_models.CancelBusinessDepositGrantdidRequest,
    ) -> blockchain_models.CancelBusinessDepositGrantdidResponse:
        """
        Description: 取消存证数据授权给账户
        Summary: 取消存证数据授权给账户
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.cancel_business_deposit_grantdid_ex(request, headers, runtime)

    async def cancel_business_deposit_grantdid_async(
        self,
        request: blockchain_models.CancelBusinessDepositGrantdidRequest,
    ) -> blockchain_models.CancelBusinessDepositGrantdidResponse:
        """
        Description: 取消存证数据授权给账户
        Summary: 取消存证数据授权给账户
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.cancel_business_deposit_grantdid_ex_async(request, headers, runtime)

    def cancel_business_deposit_grantdid_ex(
        self,
        request: blockchain_models.CancelBusinessDepositGrantdidRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CancelBusinessDepositGrantdidResponse:
        """
        Description: 取消存证数据授权给账户
        Summary: 取消存证数据授权给账户
        """
        UtilClient.validate_model(request)
        return blockchain_models.CancelBusinessDepositGrantdidResponse().from_map(
            self.do_request('1.0', 'baas.business.deposit.grantdid.cancel', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def cancel_business_deposit_grantdid_ex_async(
        self,
        request: blockchain_models.CancelBusinessDepositGrantdidRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CancelBusinessDepositGrantdidResponse:
        """
        Description: 取消存证数据授权给账户
        Summary: 取消存证数据授权给账户
        """
        UtilClient.validate_model(request)
        return blockchain_models.CancelBusinessDepositGrantdidResponse().from_map(
            await self.do_request_async('1.0', 'baas.business.deposit.grantdid.cancel', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def cancel_business_deposit_grantcorp(
        self,
        request: blockchain_models.CancelBusinessDepositGrantcorpRequest,
    ) -> blockchain_models.CancelBusinessDepositGrantcorpResponse:
        """
        Description: 取消存证授权给组织机构
        Summary: 取消存证授权给组织机构
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.cancel_business_deposit_grantcorp_ex(request, headers, runtime)

    async def cancel_business_deposit_grantcorp_async(
        self,
        request: blockchain_models.CancelBusinessDepositGrantcorpRequest,
    ) -> blockchain_models.CancelBusinessDepositGrantcorpResponse:
        """
        Description: 取消存证授权给组织机构
        Summary: 取消存证授权给组织机构
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.cancel_business_deposit_grantcorp_ex_async(request, headers, runtime)

    def cancel_business_deposit_grantcorp_ex(
        self,
        request: blockchain_models.CancelBusinessDepositGrantcorpRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CancelBusinessDepositGrantcorpResponse:
        """
        Description: 取消存证授权给组织机构
        Summary: 取消存证授权给组织机构
        """
        UtilClient.validate_model(request)
        return blockchain_models.CancelBusinessDepositGrantcorpResponse().from_map(
            self.do_request('1.0', 'baas.business.deposit.grantcorp.cancel', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def cancel_business_deposit_grantcorp_ex_async(
        self,
        request: blockchain_models.CancelBusinessDepositGrantcorpRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CancelBusinessDepositGrantcorpResponse:
        """
        Description: 取消存证授权给组织机构
        Summary: 取消存证授权给组织机构
        """
        UtilClient.validate_model(request)
        return blockchain_models.CancelBusinessDepositGrantcorpResponse().from_map(
            await self.do_request_async('1.0', 'baas.business.deposit.grantcorp.cancel', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def create_business_contract_grantcorp(
        self,
        request: blockchain_models.CreateBusinessContractGrantcorpRequest,
    ) -> blockchain_models.CreateBusinessContractGrantcorpResponse:
        """
        Description: 授权合约内加密字段给机构，机构下的所有人都有权限访问该数据
        Summary: 授权合约内加密字段给机构
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.create_business_contract_grantcorp_ex(request, headers, runtime)

    async def create_business_contract_grantcorp_async(
        self,
        request: blockchain_models.CreateBusinessContractGrantcorpRequest,
    ) -> blockchain_models.CreateBusinessContractGrantcorpResponse:
        """
        Description: 授权合约内加密字段给机构，机构下的所有人都有权限访问该数据
        Summary: 授权合约内加密字段给机构
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.create_business_contract_grantcorp_ex_async(request, headers, runtime)

    def create_business_contract_grantcorp_ex(
        self,
        request: blockchain_models.CreateBusinessContractGrantcorpRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateBusinessContractGrantcorpResponse:
        """
        Description: 授权合约内加密字段给机构，机构下的所有人都有权限访问该数据
        Summary: 授权合约内加密字段给机构
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateBusinessContractGrantcorpResponse().from_map(
            self.do_request('1.0', 'baas.business.contract.grantcorp.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def create_business_contract_grantcorp_ex_async(
        self,
        request: blockchain_models.CreateBusinessContractGrantcorpRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateBusinessContractGrantcorpResponse:
        """
        Description: 授权合约内加密字段给机构，机构下的所有人都有权限访问该数据
        Summary: 授权合约内加密字段给机构
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateBusinessContractGrantcorpResponse().from_map(
            await self.do_request_async('1.0', 'baas.business.contract.grantcorp.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def cancel_business_contract_grantdid(
        self,
        request: blockchain_models.CancelBusinessContractGrantdidRequest,
    ) -> blockchain_models.CancelBusinessContractGrantdidResponse:
        """
        Description: 取消授权did查询加密数据
        Summary: 取消授权did查询加密数据
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.cancel_business_contract_grantdid_ex(request, headers, runtime)

    async def cancel_business_contract_grantdid_async(
        self,
        request: blockchain_models.CancelBusinessContractGrantdidRequest,
    ) -> blockchain_models.CancelBusinessContractGrantdidResponse:
        """
        Description: 取消授权did查询加密数据
        Summary: 取消授权did查询加密数据
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.cancel_business_contract_grantdid_ex_async(request, headers, runtime)

    def cancel_business_contract_grantdid_ex(
        self,
        request: blockchain_models.CancelBusinessContractGrantdidRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CancelBusinessContractGrantdidResponse:
        """
        Description: 取消授权did查询加密数据
        Summary: 取消授权did查询加密数据
        """
        UtilClient.validate_model(request)
        return blockchain_models.CancelBusinessContractGrantdidResponse().from_map(
            self.do_request('1.0', 'baas.business.contract.grantdid.cancel', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def cancel_business_contract_grantdid_ex_async(
        self,
        request: blockchain_models.CancelBusinessContractGrantdidRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CancelBusinessContractGrantdidResponse:
        """
        Description: 取消授权did查询加密数据
        Summary: 取消授权did查询加密数据
        """
        UtilClient.validate_model(request)
        return blockchain_models.CancelBusinessContractGrantdidResponse().from_map(
            await self.do_request_async('1.0', 'baas.business.contract.grantdid.cancel', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def cancel_business_contract_grantcorp(
        self,
        request: blockchain_models.CancelBusinessContractGrantcorpRequest,
    ) -> blockchain_models.CancelBusinessContractGrantcorpResponse:
        """
        Description: 取消授权给组织机构
        Summary: 取消授权给组织机构
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.cancel_business_contract_grantcorp_ex(request, headers, runtime)

    async def cancel_business_contract_grantcorp_async(
        self,
        request: blockchain_models.CancelBusinessContractGrantcorpRequest,
    ) -> blockchain_models.CancelBusinessContractGrantcorpResponse:
        """
        Description: 取消授权给组织机构
        Summary: 取消授权给组织机构
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.cancel_business_contract_grantcorp_ex_async(request, headers, runtime)

    def cancel_business_contract_grantcorp_ex(
        self,
        request: blockchain_models.CancelBusinessContractGrantcorpRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CancelBusinessContractGrantcorpResponse:
        """
        Description: 取消授权给组织机构
        Summary: 取消授权给组织机构
        """
        UtilClient.validate_model(request)
        return blockchain_models.CancelBusinessContractGrantcorpResponse().from_map(
            self.do_request('1.0', 'baas.business.contract.grantcorp.cancel', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def cancel_business_contract_grantcorp_ex_async(
        self,
        request: blockchain_models.CancelBusinessContractGrantcorpRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CancelBusinessContractGrantcorpResponse:
        """
        Description: 取消授权给组织机构
        Summary: 取消授权给组织机构
        """
        UtilClient.validate_model(request)
        return blockchain_models.CancelBusinessContractGrantcorpResponse().from_map(
            await self.do_request_async('1.0', 'baas.business.contract.grantcorp.cancel', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def import_platform_testregion_testfunc(
        self,
        request: blockchain_models.ImportPlatformTestregionTestfuncRequest,
    ) -> blockchain_models.ImportPlatformTestregionTestfuncResponse:
        """
        Description: 业务中台测试接口
        Summary: 业务中台测试接口
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.import_platform_testregion_testfunc_ex(request, headers, runtime)

    async def import_platform_testregion_testfunc_async(
        self,
        request: blockchain_models.ImportPlatformTestregionTestfuncRequest,
    ) -> blockchain_models.ImportPlatformTestregionTestfuncResponse:
        """
        Description: 业务中台测试接口
        Summary: 业务中台测试接口
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.import_platform_testregion_testfunc_ex_async(request, headers, runtime)

    def import_platform_testregion_testfunc_ex(
        self,
        request: blockchain_models.ImportPlatformTestregionTestfuncRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.ImportPlatformTestregionTestfuncResponse:
        """
        Description: 业务中台测试接口
        Summary: 业务中台测试接口
        """
        UtilClient.validate_model(request)
        return blockchain_models.ImportPlatformTestregionTestfuncResponse().from_map(
            self.do_request('1.0', 'baas.platform.testregion.testfunc.import', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def import_platform_testregion_testfunc_ex_async(
        self,
        request: blockchain_models.ImportPlatformTestregionTestfuncRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.ImportPlatformTestregionTestfuncResponse:
        """
        Description: 业务中台测试接口
        Summary: 业务中台测试接口
        """
        UtilClient.validate_model(request)
        return blockchain_models.ImportPlatformTestregionTestfuncResponse().from_map(
            await self.do_request_async('1.0', 'baas.platform.testregion.testfunc.import', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def create_platform_deposit_account(
        self,
        request: blockchain_models.CreatePlatformDepositAccountRequest,
    ) -> blockchain_models.CreatePlatformDepositAccountResponse:
        """
        Description: 存证创建账户
        Summary: 存证创建账户
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.create_platform_deposit_account_ex(request, headers, runtime)

    async def create_platform_deposit_account_async(
        self,
        request: blockchain_models.CreatePlatformDepositAccountRequest,
    ) -> blockchain_models.CreatePlatformDepositAccountResponse:
        """
        Description: 存证创建账户
        Summary: 存证创建账户
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.create_platform_deposit_account_ex_async(request, headers, runtime)

    def create_platform_deposit_account_ex(
        self,
        request: blockchain_models.CreatePlatformDepositAccountRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreatePlatformDepositAccountResponse:
        """
        Description: 存证创建账户
        Summary: 存证创建账户
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreatePlatformDepositAccountResponse().from_map(
            self.do_request('1.0', 'baas.platform.deposit.account.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def create_platform_deposit_account_ex_async(
        self,
        request: blockchain_models.CreatePlatformDepositAccountRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreatePlatformDepositAccountResponse:
        """
        Description: 存证创建账户
        Summary: 存证创建账户
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreatePlatformDepositAccountResponse().from_map(
            await self.do_request_async('1.0', 'baas.platform.deposit.account.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def create_platform_deposit_did(
        self,
        request: blockchain_models.CreatePlatformDepositDidRequest,
    ) -> blockchain_models.CreatePlatformDepositDidResponse:
        """
        Description: 存证创建did
        Summary: 存证创建did
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.create_platform_deposit_did_ex(request, headers, runtime)

    async def create_platform_deposit_did_async(
        self,
        request: blockchain_models.CreatePlatformDepositDidRequest,
    ) -> blockchain_models.CreatePlatformDepositDidResponse:
        """
        Description: 存证创建did
        Summary: 存证创建did
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.create_platform_deposit_did_ex_async(request, headers, runtime)

    def create_platform_deposit_did_ex(
        self,
        request: blockchain_models.CreatePlatformDepositDidRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreatePlatformDepositDidResponse:
        """
        Description: 存证创建did
        Summary: 存证创建did
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreatePlatformDepositDidResponse().from_map(
            self.do_request('1.0', 'baas.platform.deposit.did.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def create_platform_deposit_did_ex_async(
        self,
        request: blockchain_models.CreatePlatformDepositDidRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreatePlatformDepositDidResponse:
        """
        Description: 存证创建did
        Summary: 存证创建did
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreatePlatformDepositDidResponse().from_map(
            await self.do_request_async('1.0', 'baas.platform.deposit.did.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def save_platform_deposit_deposit(
        self,
        request: blockchain_models.SavePlatformDepositDepositRequest,
    ) -> blockchain_models.SavePlatformDepositDepositResponse:
        """
        Description: 普通数据存证
        Summary: 普通数据存证
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.save_platform_deposit_deposit_ex(request, headers, runtime)

    async def save_platform_deposit_deposit_async(
        self,
        request: blockchain_models.SavePlatformDepositDepositRequest,
    ) -> blockchain_models.SavePlatformDepositDepositResponse:
        """
        Description: 普通数据存证
        Summary: 普通数据存证
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.save_platform_deposit_deposit_ex_async(request, headers, runtime)

    def save_platform_deposit_deposit_ex(
        self,
        request: blockchain_models.SavePlatformDepositDepositRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.SavePlatformDepositDepositResponse:
        """
        Description: 普通数据存证
        Summary: 普通数据存证
        """
        UtilClient.validate_model(request)
        return blockchain_models.SavePlatformDepositDepositResponse().from_map(
            self.do_request('1.0', 'baas.platform.deposit.deposit.save', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def save_platform_deposit_deposit_ex_async(
        self,
        request: blockchain_models.SavePlatformDepositDepositRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.SavePlatformDepositDepositResponse:
        """
        Description: 普通数据存证
        Summary: 普通数据存证
        """
        UtilClient.validate_model(request)
        return blockchain_models.SavePlatformDepositDepositResponse().from_map(
            await self.do_request_async('1.0', 'baas.platform.deposit.deposit.save', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def create_platform_deposit_corpdid(
        self,
        request: blockchain_models.CreatePlatformDepositCorpdidRequest,
    ) -> blockchain_models.CreatePlatformDepositCorpdidResponse:
        """
        Description: 为企业创建did
        Summary: 为企业创建did
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.create_platform_deposit_corpdid_ex(request, headers, runtime)

    async def create_platform_deposit_corpdid_async(
        self,
        request: blockchain_models.CreatePlatformDepositCorpdidRequest,
    ) -> blockchain_models.CreatePlatformDepositCorpdidResponse:
        """
        Description: 为企业创建did
        Summary: 为企业创建did
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.create_platform_deposit_corpdid_ex_async(request, headers, runtime)

    def create_platform_deposit_corpdid_ex(
        self,
        request: blockchain_models.CreatePlatformDepositCorpdidRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreatePlatformDepositCorpdidResponse:
        """
        Description: 为企业创建did
        Summary: 为企业创建did
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreatePlatformDepositCorpdidResponse().from_map(
            self.do_request('1.0', 'baas.platform.deposit.corpdid.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def create_platform_deposit_corpdid_ex_async(
        self,
        request: blockchain_models.CreatePlatformDepositCorpdidRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreatePlatformDepositCorpdidResponse:
        """
        Description: 为企业创建did
        Summary: 为企业创建did
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreatePlatformDepositCorpdidResponse().from_map(
            await self.do_request_async('1.0', 'baas.platform.deposit.corpdid.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def create_digitalassetart_account(
        self,
        request: blockchain_models.CreateDigitalassetartAccountRequest,
    ) -> blockchain_models.CreateDigitalassetartAccountResponse:
        """
        Description: 用于对用户的账户映射，输入用户名、账户、手机号等信息，返回用户的链上身份信息
        Summary: 用户账号映射
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.create_digitalassetart_account_ex(request, headers, runtime)

    async def create_digitalassetart_account_async(
        self,
        request: blockchain_models.CreateDigitalassetartAccountRequest,
    ) -> blockchain_models.CreateDigitalassetartAccountResponse:
        """
        Description: 用于对用户的账户映射，输入用户名、账户、手机号等信息，返回用户的链上身份信息
        Summary: 用户账号映射
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.create_digitalassetart_account_ex_async(request, headers, runtime)

    def create_digitalassetart_account_ex(
        self,
        request: blockchain_models.CreateDigitalassetartAccountRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateDigitalassetartAccountResponse:
        """
        Description: 用于对用户的账户映射，输入用户名、账户、手机号等信息，返回用户的链上身份信息
        Summary: 用户账号映射
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateDigitalassetartAccountResponse().from_map(
            self.do_request('1.0', 'baas.digitalassetart.account.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def create_digitalassetart_account_ex_async(
        self,
        request: blockchain_models.CreateDigitalassetartAccountRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateDigitalassetartAccountResponse:
        """
        Description: 用于对用户的账户映射，输入用户名、账户、手机号等信息，返回用户的链上身份信息
        Summary: 用户账号映射
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateDigitalassetartAccountResponse().from_map(
            await self.do_request_async('1.0', 'baas.digitalassetart.account.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def batchcreate_digitalassetart_account(
        self,
        request: blockchain_models.BatchcreateDigitalassetartAccountRequest,
    ) -> blockchain_models.BatchcreateDigitalassetartAccountResponse:
        """
        Description: 批量账户映射
        Summary: 批量账户映射
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.batchcreate_digitalassetart_account_ex(request, headers, runtime)

    async def batchcreate_digitalassetart_account_async(
        self,
        request: blockchain_models.BatchcreateDigitalassetartAccountRequest,
    ) -> blockchain_models.BatchcreateDigitalassetartAccountResponse:
        """
        Description: 批量账户映射
        Summary: 批量账户映射
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.batchcreate_digitalassetart_account_ex_async(request, headers, runtime)

    def batchcreate_digitalassetart_account_ex(
        self,
        request: blockchain_models.BatchcreateDigitalassetartAccountRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.BatchcreateDigitalassetartAccountResponse:
        """
        Description: 批量账户映射
        Summary: 批量账户映射
        """
        UtilClient.validate_model(request)
        return blockchain_models.BatchcreateDigitalassetartAccountResponse().from_map(
            self.do_request('1.0', 'baas.digitalassetart.account.batchcreate', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def batchcreate_digitalassetart_account_ex_async(
        self,
        request: blockchain_models.BatchcreateDigitalassetartAccountRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.BatchcreateDigitalassetartAccountResponse:
        """
        Description: 批量账户映射
        Summary: 批量账户映射
        """
        UtilClient.validate_model(request)
        return blockchain_models.BatchcreateDigitalassetartAccountResponse().from_map(
            await self.do_request_async('1.0', 'baas.digitalassetart.account.batchcreate', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def create_digitalassetart_art_create(
        self,
        request: blockchain_models.CreateDigitalassetartArtCreateRequest,
    ) -> blockchain_models.CreateDigitalassetartArtCreateResponse:
        """
        Description: 创建艺术品
        Summary: 创建艺术品
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.create_digitalassetart_art_create_ex(request, headers, runtime)

    async def create_digitalassetart_art_create_async(
        self,
        request: blockchain_models.CreateDigitalassetartArtCreateRequest,
    ) -> blockchain_models.CreateDigitalassetartArtCreateResponse:
        """
        Description: 创建艺术品
        Summary: 创建艺术品
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.create_digitalassetart_art_create_ex_async(request, headers, runtime)

    def create_digitalassetart_art_create_ex(
        self,
        request: blockchain_models.CreateDigitalassetartArtCreateRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateDigitalassetartArtCreateResponse:
        """
        Description: 创建艺术品
        Summary: 创建艺术品
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateDigitalassetartArtCreateResponse().from_map(
            self.do_request('1.0', 'baas.digitalassetart.art.create.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def create_digitalassetart_art_create_ex_async(
        self,
        request: blockchain_models.CreateDigitalassetartArtCreateRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateDigitalassetartArtCreateResponse:
        """
        Description: 创建艺术品
        Summary: 创建艺术品
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateDigitalassetartArtCreateResponse().from_map(
            await self.do_request_async('1.0', 'baas.digitalassetart.art.create.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def set_digitalassetart_art_issue(
        self,
        request: blockchain_models.SetDigitalassetartArtIssueRequest,
    ) -> blockchain_models.SetDigitalassetartArtIssueResponse:
        """
        Description: 将艺术品从创建状态改为发行状态，只有在发行状态的艺术品才能进行各种交易
        Summary: 发行艺术品
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.set_digitalassetart_art_issue_ex(request, headers, runtime)

    async def set_digitalassetart_art_issue_async(
        self,
        request: blockchain_models.SetDigitalassetartArtIssueRequest,
    ) -> blockchain_models.SetDigitalassetartArtIssueResponse:
        """
        Description: 将艺术品从创建状态改为发行状态，只有在发行状态的艺术品才能进行各种交易
        Summary: 发行艺术品
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.set_digitalassetart_art_issue_ex_async(request, headers, runtime)

    def set_digitalassetart_art_issue_ex(
        self,
        request: blockchain_models.SetDigitalassetartArtIssueRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.SetDigitalassetartArtIssueResponse:
        """
        Description: 将艺术品从创建状态改为发行状态，只有在发行状态的艺术品才能进行各种交易
        Summary: 发行艺术品
        """
        UtilClient.validate_model(request)
        return blockchain_models.SetDigitalassetartArtIssueResponse().from_map(
            self.do_request('1.0', 'baas.digitalassetart.art.issue.set', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def set_digitalassetart_art_issue_ex_async(
        self,
        request: blockchain_models.SetDigitalassetartArtIssueRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.SetDigitalassetartArtIssueResponse:
        """
        Description: 将艺术品从创建状态改为发行状态，只有在发行状态的艺术品才能进行各种交易
        Summary: 发行艺术品
        """
        UtilClient.validate_model(request)
        return blockchain_models.SetDigitalassetartArtIssueResponse().from_map(
            await self.do_request_async('1.0', 'baas.digitalassetart.art.issue.set', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def set_digitalassetart_art_issuetoexchange(
        self,
        request: blockchain_models.SetDigitalassetartArtIssuetoexchangeRequest,
    ) -> blockchain_models.SetDigitalassetartArtIssuetoexchangeResponse:
        """
        Description: 将该艺术品发布到交易所
        Summary: 将该艺术品发布到交易所
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.set_digitalassetart_art_issuetoexchange_ex(request, headers, runtime)

    async def set_digitalassetart_art_issuetoexchange_async(
        self,
        request: blockchain_models.SetDigitalassetartArtIssuetoexchangeRequest,
    ) -> blockchain_models.SetDigitalassetartArtIssuetoexchangeResponse:
        """
        Description: 将该艺术品发布到交易所
        Summary: 将该艺术品发布到交易所
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.set_digitalassetart_art_issuetoexchange_ex_async(request, headers, runtime)

    def set_digitalassetart_art_issuetoexchange_ex(
        self,
        request: blockchain_models.SetDigitalassetartArtIssuetoexchangeRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.SetDigitalassetartArtIssuetoexchangeResponse:
        """
        Description: 将该艺术品发布到交易所
        Summary: 将该艺术品发布到交易所
        """
        UtilClient.validate_model(request)
        return blockchain_models.SetDigitalassetartArtIssuetoexchangeResponse().from_map(
            self.do_request('1.0', 'baas.digitalassetart.art.issuetoexchange.set', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def set_digitalassetart_art_issuetoexchange_ex_async(
        self,
        request: blockchain_models.SetDigitalassetartArtIssuetoexchangeRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.SetDigitalassetartArtIssuetoexchangeResponse:
        """
        Description: 将该艺术品发布到交易所
        Summary: 将该艺术品发布到交易所
        """
        UtilClient.validate_model(request)
        return blockchain_models.SetDigitalassetartArtIssuetoexchangeResponse().from_map(
            await self.do_request_async('1.0', 'baas.digitalassetart.art.issuetoexchange.set', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def set_digitalassetart_art_trade(
        self,
        request: blockchain_models.SetDigitalassetartArtTradeRequest,
    ) -> blockchain_models.SetDigitalassetartArtTradeResponse:
        """
        Description: 艺术品本链交易
        Summary: 艺术品本链交易
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.set_digitalassetart_art_trade_ex(request, headers, runtime)

    async def set_digitalassetart_art_trade_async(
        self,
        request: blockchain_models.SetDigitalassetartArtTradeRequest,
    ) -> blockchain_models.SetDigitalassetartArtTradeResponse:
        """
        Description: 艺术品本链交易
        Summary: 艺术品本链交易
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.set_digitalassetart_art_trade_ex_async(request, headers, runtime)

    def set_digitalassetart_art_trade_ex(
        self,
        request: blockchain_models.SetDigitalassetartArtTradeRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.SetDigitalassetartArtTradeResponse:
        """
        Description: 艺术品本链交易
        Summary: 艺术品本链交易
        """
        UtilClient.validate_model(request)
        return blockchain_models.SetDigitalassetartArtTradeResponse().from_map(
            self.do_request('1.0', 'baas.digitalassetart.art.trade.set', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def set_digitalassetart_art_trade_ex_async(
        self,
        request: blockchain_models.SetDigitalassetartArtTradeRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.SetDigitalassetartArtTradeResponse:
        """
        Description: 艺术品本链交易
        Summary: 艺术品本链交易
        """
        UtilClient.validate_model(request)
        return blockchain_models.SetDigitalassetartArtTradeResponse().from_map(
            await self.do_request_async('1.0', 'baas.digitalassetart.art.trade.set', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def set_digitalassetart_art_tradeonexchange(
        self,
        request: blockchain_models.SetDigitalassetartArtTradeonexchangeRequest,
    ) -> blockchain_models.SetDigitalassetartArtTradeonexchangeResponse:
        """
        Description: 在交易所交易艺术品
        Summary: 在交易所交易艺术品
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.set_digitalassetart_art_tradeonexchange_ex(request, headers, runtime)

    async def set_digitalassetart_art_tradeonexchange_async(
        self,
        request: blockchain_models.SetDigitalassetartArtTradeonexchangeRequest,
    ) -> blockchain_models.SetDigitalassetartArtTradeonexchangeResponse:
        """
        Description: 在交易所交易艺术品
        Summary: 在交易所交易艺术品
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.set_digitalassetart_art_tradeonexchange_ex_async(request, headers, runtime)

    def set_digitalassetart_art_tradeonexchange_ex(
        self,
        request: blockchain_models.SetDigitalassetartArtTradeonexchangeRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.SetDigitalassetartArtTradeonexchangeResponse:
        """
        Description: 在交易所交易艺术品
        Summary: 在交易所交易艺术品
        """
        UtilClient.validate_model(request)
        return blockchain_models.SetDigitalassetartArtTradeonexchangeResponse().from_map(
            self.do_request('1.0', 'baas.digitalassetart.art.tradeonexchange.set', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def set_digitalassetart_art_tradeonexchange_ex_async(
        self,
        request: blockchain_models.SetDigitalassetartArtTradeonexchangeRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.SetDigitalassetartArtTradeonexchangeResponse:
        """
        Description: 在交易所交易艺术品
        Summary: 在交易所交易艺术品
        """
        UtilClient.validate_model(request)
        return blockchain_models.SetDigitalassetartArtTradeonexchangeResponse().from_map(
            await self.do_request_async('1.0', 'baas.digitalassetart.art.tradeonexchange.set', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def freeze_digitalassetart_art_account(
        self,
        request: blockchain_models.FreezeDigitalassetartArtAccountRequest,
    ) -> blockchain_models.FreezeDigitalassetartArtAccountResponse:
        """
        Description: 冻结艺术品
        Summary: 冻结艺术品
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.freeze_digitalassetart_art_account_ex(request, headers, runtime)

    async def freeze_digitalassetart_art_account_async(
        self,
        request: blockchain_models.FreezeDigitalassetartArtAccountRequest,
    ) -> blockchain_models.FreezeDigitalassetartArtAccountResponse:
        """
        Description: 冻结艺术品
        Summary: 冻结艺术品
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.freeze_digitalassetart_art_account_ex_async(request, headers, runtime)

    def freeze_digitalassetart_art_account_ex(
        self,
        request: blockchain_models.FreezeDigitalassetartArtAccountRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.FreezeDigitalassetartArtAccountResponse:
        """
        Description: 冻结艺术品
        Summary: 冻结艺术品
        """
        UtilClient.validate_model(request)
        return blockchain_models.FreezeDigitalassetartArtAccountResponse().from_map(
            self.do_request('1.0', 'baas.digitalassetart.art.account.freeze', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def freeze_digitalassetart_art_account_ex_async(
        self,
        request: blockchain_models.FreezeDigitalassetartArtAccountRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.FreezeDigitalassetartArtAccountResponse:
        """
        Description: 冻结艺术品
        Summary: 冻结艺术品
        """
        UtilClient.validate_model(request)
        return blockchain_models.FreezeDigitalassetartArtAccountResponse().from_map(
            await self.do_request_async('1.0', 'baas.digitalassetart.art.account.freeze', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def unfreeze_digitalassetart_art_account(
        self,
        request: blockchain_models.UnfreezeDigitalassetartArtAccountRequest,
    ) -> blockchain_models.UnfreezeDigitalassetartArtAccountResponse:
        """
        Description: 艺术品解冻
        Summary: 艺术品解冻
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.unfreeze_digitalassetart_art_account_ex(request, headers, runtime)

    async def unfreeze_digitalassetart_art_account_async(
        self,
        request: blockchain_models.UnfreezeDigitalassetartArtAccountRequest,
    ) -> blockchain_models.UnfreezeDigitalassetartArtAccountResponse:
        """
        Description: 艺术品解冻
        Summary: 艺术品解冻
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.unfreeze_digitalassetart_art_account_ex_async(request, headers, runtime)

    def unfreeze_digitalassetart_art_account_ex(
        self,
        request: blockchain_models.UnfreezeDigitalassetartArtAccountRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.UnfreezeDigitalassetartArtAccountResponse:
        """
        Description: 艺术品解冻
        Summary: 艺术品解冻
        """
        UtilClient.validate_model(request)
        return blockchain_models.UnfreezeDigitalassetartArtAccountResponse().from_map(
            self.do_request('1.0', 'baas.digitalassetart.art.account.unfreeze', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def unfreeze_digitalassetart_art_account_ex_async(
        self,
        request: blockchain_models.UnfreezeDigitalassetartArtAccountRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.UnfreezeDigitalassetartArtAccountResponse:
        """
        Description: 艺术品解冻
        Summary: 艺术品解冻
        """
        UtilClient.validate_model(request)
        return blockchain_models.UnfreezeDigitalassetartArtAccountResponse().from_map(
            await self.do_request_async('1.0', 'baas.digitalassetart.art.account.unfreeze', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def set_digitalassetart_art_unissuetoexchange(
        self,
        request: blockchain_models.SetDigitalassetartArtUnissuetoexchangeRequest,
    ) -> blockchain_models.SetDigitalassetartArtUnissuetoexchangeResponse:
        """
        Description: 取消在交易所发布艺术品
        Summary: 取消在交易所发布艺术品
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.set_digitalassetart_art_unissuetoexchange_ex(request, headers, runtime)

    async def set_digitalassetart_art_unissuetoexchange_async(
        self,
        request: blockchain_models.SetDigitalassetartArtUnissuetoexchangeRequest,
    ) -> blockchain_models.SetDigitalassetartArtUnissuetoexchangeResponse:
        """
        Description: 取消在交易所发布艺术品
        Summary: 取消在交易所发布艺术品
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.set_digitalassetart_art_unissuetoexchange_ex_async(request, headers, runtime)

    def set_digitalassetart_art_unissuetoexchange_ex(
        self,
        request: blockchain_models.SetDigitalassetartArtUnissuetoexchangeRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.SetDigitalassetartArtUnissuetoexchangeResponse:
        """
        Description: 取消在交易所发布艺术品
        Summary: 取消在交易所发布艺术品
        """
        UtilClient.validate_model(request)
        return blockchain_models.SetDigitalassetartArtUnissuetoexchangeResponse().from_map(
            self.do_request('1.0', 'baas.digitalassetart.art.unissuetoexchange.set', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def set_digitalassetart_art_unissuetoexchange_ex_async(
        self,
        request: blockchain_models.SetDigitalassetartArtUnissuetoexchangeRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.SetDigitalassetartArtUnissuetoexchangeResponse:
        """
        Description: 取消在交易所发布艺术品
        Summary: 取消在交易所发布艺术品
        """
        UtilClient.validate_model(request)
        return blockchain_models.SetDigitalassetartArtUnissuetoexchangeResponse().from_map(
            await self.do_request_async('1.0', 'baas.digitalassetart.art.unissuetoexchange.set', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_digitalassetart_art(
        self,
        request: blockchain_models.QueryDigitalassetartArtRequest,
    ) -> blockchain_models.QueryDigitalassetartArtResponse:
        """
        Description: 查询艺术品信息
        Summary: 查询艺术品信息
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_digitalassetart_art_ex(request, headers, runtime)

    async def query_digitalassetart_art_async(
        self,
        request: blockchain_models.QueryDigitalassetartArtRequest,
    ) -> blockchain_models.QueryDigitalassetartArtResponse:
        """
        Description: 查询艺术品信息
        Summary: 查询艺术品信息
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_digitalassetart_art_ex_async(request, headers, runtime)

    def query_digitalassetart_art_ex(
        self,
        request: blockchain_models.QueryDigitalassetartArtRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryDigitalassetartArtResponse:
        """
        Description: 查询艺术品信息
        Summary: 查询艺术品信息
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryDigitalassetartArtResponse().from_map(
            self.do_request('1.0', 'baas.digitalassetart.art.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_digitalassetart_art_ex_async(
        self,
        request: blockchain_models.QueryDigitalassetartArtRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryDigitalassetartArtResponse:
        """
        Description: 查询艺术品信息
        Summary: 查询艺术品信息
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryDigitalassetartArtResponse().from_map(
            await self.do_request_async('1.0', 'baas.digitalassetart.art.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def create_digitalasset_exchange_accountmap(
        self,
        request: blockchain_models.CreateDigitalassetExchangeAccountmapRequest,
    ) -> blockchain_models.CreateDigitalassetExchangeAccountmapResponse:
        """
        Description: 数字资产管理平台业务方账户映射接口
        Summary: 数字资产管理平台业务方账户映射
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.create_digitalasset_exchange_accountmap_ex(request, headers, runtime)

    async def create_digitalasset_exchange_accountmap_async(
        self,
        request: blockchain_models.CreateDigitalassetExchangeAccountmapRequest,
    ) -> blockchain_models.CreateDigitalassetExchangeAccountmapResponse:
        """
        Description: 数字资产管理平台业务方账户映射接口
        Summary: 数字资产管理平台业务方账户映射
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.create_digitalasset_exchange_accountmap_ex_async(request, headers, runtime)

    def create_digitalasset_exchange_accountmap_ex(
        self,
        request: blockchain_models.CreateDigitalassetExchangeAccountmapRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateDigitalassetExchangeAccountmapResponse:
        """
        Description: 数字资产管理平台业务方账户映射接口
        Summary: 数字资产管理平台业务方账户映射
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateDigitalassetExchangeAccountmapResponse().from_map(
            self.do_request('1.0', 'baas.digitalasset.exchange.accountmap.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def create_digitalasset_exchange_accountmap_ex_async(
        self,
        request: blockchain_models.CreateDigitalassetExchangeAccountmapRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateDigitalassetExchangeAccountmapResponse:
        """
        Description: 数字资产管理平台业务方账户映射接口
        Summary: 数字资产管理平台业务方账户映射
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateDigitalassetExchangeAccountmapResponse().from_map(
            await self.do_request_async('1.0', 'baas.digitalasset.exchange.accountmap.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def batchcreate_digitalasset_exchange_accountmap(
        self,
        request: blockchain_models.BatchcreateDigitalassetExchangeAccountmapRequest,
    ) -> blockchain_models.BatchcreateDigitalassetExchangeAccountmapResponse:
        """
        Description: 数字资产管理平台用户账户批量映射接口
        Summary: 数字资产管理平台用户账户批量映射
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.batchcreate_digitalasset_exchange_accountmap_ex(request, headers, runtime)

    async def batchcreate_digitalasset_exchange_accountmap_async(
        self,
        request: blockchain_models.BatchcreateDigitalassetExchangeAccountmapRequest,
    ) -> blockchain_models.BatchcreateDigitalassetExchangeAccountmapResponse:
        """
        Description: 数字资产管理平台用户账户批量映射接口
        Summary: 数字资产管理平台用户账户批量映射
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.batchcreate_digitalasset_exchange_accountmap_ex_async(request, headers, runtime)

    def batchcreate_digitalasset_exchange_accountmap_ex(
        self,
        request: blockchain_models.BatchcreateDigitalassetExchangeAccountmapRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.BatchcreateDigitalassetExchangeAccountmapResponse:
        """
        Description: 数字资产管理平台用户账户批量映射接口
        Summary: 数字资产管理平台用户账户批量映射
        """
        UtilClient.validate_model(request)
        return blockchain_models.BatchcreateDigitalassetExchangeAccountmapResponse().from_map(
            self.do_request('1.0', 'baas.digitalasset.exchange.accountmap.batchcreate', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def batchcreate_digitalasset_exchange_accountmap_ex_async(
        self,
        request: blockchain_models.BatchcreateDigitalassetExchangeAccountmapRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.BatchcreateDigitalassetExchangeAccountmapResponse:
        """
        Description: 数字资产管理平台用户账户批量映射接口
        Summary: 数字资产管理平台用户账户批量映射
        """
        UtilClient.validate_model(request)
        return blockchain_models.BatchcreateDigitalassetExchangeAccountmapResponse().from_map(
            await self.do_request_async('1.0', 'baas.digitalasset.exchange.accountmap.batchcreate', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def start_digitalasset_exchange_unfreeze(
        self,
        request: blockchain_models.StartDigitalassetExchangeUnfreezeRequest,
    ) -> blockchain_models.StartDigitalassetExchangeUnfreezeResponse:
        """
        Description: 数字资产管理平台版通解限接口
        Summary: 数字资产管理平台版通解限
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.start_digitalasset_exchange_unfreeze_ex(request, headers, runtime)

    async def start_digitalasset_exchange_unfreeze_async(
        self,
        request: blockchain_models.StartDigitalassetExchangeUnfreezeRequest,
    ) -> blockchain_models.StartDigitalassetExchangeUnfreezeResponse:
        """
        Description: 数字资产管理平台版通解限接口
        Summary: 数字资产管理平台版通解限
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.start_digitalasset_exchange_unfreeze_ex_async(request, headers, runtime)

    def start_digitalasset_exchange_unfreeze_ex(
        self,
        request: blockchain_models.StartDigitalassetExchangeUnfreezeRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartDigitalassetExchangeUnfreezeResponse:
        """
        Description: 数字资产管理平台版通解限接口
        Summary: 数字资产管理平台版通解限
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartDigitalassetExchangeUnfreezeResponse().from_map(
            self.do_request('1.0', 'baas.digitalasset.exchange.unfreeze.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def start_digitalasset_exchange_unfreeze_ex_async(
        self,
        request: blockchain_models.StartDigitalassetExchangeUnfreezeRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartDigitalassetExchangeUnfreezeResponse:
        """
        Description: 数字资产管理平台版通解限接口
        Summary: 数字资产管理平台版通解限
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartDigitalassetExchangeUnfreezeResponse().from_map(
            await self.do_request_async('1.0', 'baas.digitalasset.exchange.unfreeze.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def start_digitalasset_exchange_lockposition(
        self,
        request: blockchain_models.StartDigitalassetExchangeLockpositionRequest,
    ) -> blockchain_models.StartDigitalassetExchangeLockpositionResponse:
        """
        Description: 数字资产管理平台资源管理 处理用户、版通的锁定与解锁
        1. ep_code有值，user_account为空时，对指定版通进行锁定解锁操作
        2. ep_code为空，user_account有值时，对指定账户进行锁定解锁操作
        3. ep_code，user_account均有值时，对指定账户的版通进行锁定解锁操作
        4. ep_code，user_account均为空时，对全交易所进行锁定解锁操作，需谨慎
        Summary: 数字资产管理平台资源管理
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.start_digitalasset_exchange_lockposition_ex(request, headers, runtime)

    async def start_digitalasset_exchange_lockposition_async(
        self,
        request: blockchain_models.StartDigitalassetExchangeLockpositionRequest,
    ) -> blockchain_models.StartDigitalassetExchangeLockpositionResponse:
        """
        Description: 数字资产管理平台资源管理 处理用户、版通的锁定与解锁
        1. ep_code有值，user_account为空时，对指定版通进行锁定解锁操作
        2. ep_code为空，user_account有值时，对指定账户进行锁定解锁操作
        3. ep_code，user_account均有值时，对指定账户的版通进行锁定解锁操作
        4. ep_code，user_account均为空时，对全交易所进行锁定解锁操作，需谨慎
        Summary: 数字资产管理平台资源管理
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.start_digitalasset_exchange_lockposition_ex_async(request, headers, runtime)

    def start_digitalasset_exchange_lockposition_ex(
        self,
        request: blockchain_models.StartDigitalassetExchangeLockpositionRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartDigitalassetExchangeLockpositionResponse:
        """
        Description: 数字资产管理平台资源管理 处理用户、版通的锁定与解锁
        1. ep_code有值，user_account为空时，对指定版通进行锁定解锁操作
        2. ep_code为空，user_account有值时，对指定账户进行锁定解锁操作
        3. ep_code，user_account均有值时，对指定账户的版通进行锁定解锁操作
        4. ep_code，user_account均为空时，对全交易所进行锁定解锁操作，需谨慎
        Summary: 数字资产管理平台资源管理
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartDigitalassetExchangeLockpositionResponse().from_map(
            self.do_request('1.0', 'baas.digitalasset.exchange.lockposition.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def start_digitalasset_exchange_lockposition_ex_async(
        self,
        request: blockchain_models.StartDigitalassetExchangeLockpositionRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartDigitalassetExchangeLockpositionResponse:
        """
        Description: 数字资产管理平台资源管理 处理用户、版通的锁定与解锁
        1. ep_code有值，user_account为空时，对指定版通进行锁定解锁操作
        2. ep_code为空，user_account有值时，对指定账户进行锁定解锁操作
        3. ep_code，user_account均有值时，对指定账户的版通进行锁定解锁操作
        4. ep_code，user_account均为空时，对全交易所进行锁定解锁操作，需谨慎
        Summary: 数字资产管理平台资源管理
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartDigitalassetExchangeLockpositionResponse().from_map(
            await self.do_request_async('1.0', 'baas.digitalasset.exchange.lockposition.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def create_digitalasset_exchange_epissue(
        self,
        request: blockchain_models.CreateDigitalassetExchangeEpissueRequest,
    ) -> blockchain_models.CreateDigitalassetExchangeEpissueResponse:
        """
        Description: 数字资产管理平台版通发行接口
        Summary: 数字资产管理平台版通发行
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.create_digitalasset_exchange_epissue_ex(request, headers, runtime)

    async def create_digitalasset_exchange_epissue_async(
        self,
        request: blockchain_models.CreateDigitalassetExchangeEpissueRequest,
    ) -> blockchain_models.CreateDigitalassetExchangeEpissueResponse:
        """
        Description: 数字资产管理平台版通发行接口
        Summary: 数字资产管理平台版通发行
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.create_digitalasset_exchange_epissue_ex_async(request, headers, runtime)

    def create_digitalasset_exchange_epissue_ex(
        self,
        request: blockchain_models.CreateDigitalassetExchangeEpissueRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateDigitalassetExchangeEpissueResponse:
        """
        Description: 数字资产管理平台版通发行接口
        Summary: 数字资产管理平台版通发行
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateDigitalassetExchangeEpissueResponse().from_map(
            self.do_request('1.0', 'baas.digitalasset.exchange.epissue.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def create_digitalasset_exchange_epissue_ex_async(
        self,
        request: blockchain_models.CreateDigitalassetExchangeEpissueRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateDigitalassetExchangeEpissueResponse:
        """
        Description: 数字资产管理平台版通发行接口
        Summary: 数字资产管理平台版通发行
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateDigitalassetExchangeEpissueResponse().from_map(
            await self.do_request_async('1.0', 'baas.digitalasset.exchange.epissue.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def create_digitalasset_exchange_epstockissue(
        self,
        request: blockchain_models.CreateDigitalassetExchangeEpstockissueRequest,
    ) -> blockchain_models.CreateDigitalassetExchangeEpstockissueResponse:
        """
        Description: 数字资产管理平台版通存量发行接口
        Summary: 数字资产管理平台版通存量发行
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.create_digitalasset_exchange_epstockissue_ex(request, headers, runtime)

    async def create_digitalasset_exchange_epstockissue_async(
        self,
        request: blockchain_models.CreateDigitalassetExchangeEpstockissueRequest,
    ) -> blockchain_models.CreateDigitalassetExchangeEpstockissueResponse:
        """
        Description: 数字资产管理平台版通存量发行接口
        Summary: 数字资产管理平台版通存量发行
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.create_digitalasset_exchange_epstockissue_ex_async(request, headers, runtime)

    def create_digitalasset_exchange_epstockissue_ex(
        self,
        request: blockchain_models.CreateDigitalassetExchangeEpstockissueRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateDigitalassetExchangeEpstockissueResponse:
        """
        Description: 数字资产管理平台版通存量发行接口
        Summary: 数字资产管理平台版通存量发行
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateDigitalassetExchangeEpstockissueResponse().from_map(
            self.do_request('1.0', 'baas.digitalasset.exchange.epstockissue.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def create_digitalasset_exchange_epstockissue_ex_async(
        self,
        request: blockchain_models.CreateDigitalassetExchangeEpstockissueRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateDigitalassetExchangeEpstockissueResponse:
        """
        Description: 数字资产管理平台版通存量发行接口
        Summary: 数字资产管理平台版通存量发行
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateDigitalassetExchangeEpstockissueResponse().from_map(
            await self.do_request_async('1.0', 'baas.digitalasset.exchange.epstockissue.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def start_digitalasset_exchange_epwholesale(
        self,
        request: blockchain_models.StartDigitalassetExchangeEpwholesaleRequest,
    ) -> blockchain_models.StartDigitalassetExchangeEpwholesaleResponse:
        """
        Description: 数字资产管理平台版通批发接口
        Summary: 数字资产管理平台版通批发
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.start_digitalasset_exchange_epwholesale_ex(request, headers, runtime)

    async def start_digitalasset_exchange_epwholesale_async(
        self,
        request: blockchain_models.StartDigitalassetExchangeEpwholesaleRequest,
    ) -> blockchain_models.StartDigitalassetExchangeEpwholesaleResponse:
        """
        Description: 数字资产管理平台版通批发接口
        Summary: 数字资产管理平台版通批发
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.start_digitalasset_exchange_epwholesale_ex_async(request, headers, runtime)

    def start_digitalasset_exchange_epwholesale_ex(
        self,
        request: blockchain_models.StartDigitalassetExchangeEpwholesaleRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartDigitalassetExchangeEpwholesaleResponse:
        """
        Description: 数字资产管理平台版通批发接口
        Summary: 数字资产管理平台版通批发
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartDigitalassetExchangeEpwholesaleResponse().from_map(
            self.do_request('1.0', 'baas.digitalasset.exchange.epwholesale.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def start_digitalasset_exchange_epwholesale_ex_async(
        self,
        request: blockchain_models.StartDigitalassetExchangeEpwholesaleRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartDigitalassetExchangeEpwholesaleResponse:
        """
        Description: 数字资产管理平台版通批发接口
        Summary: 数字资产管理平台版通批发
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartDigitalassetExchangeEpwholesaleResponse().from_map(
            await self.do_request_async('1.0', 'baas.digitalasset.exchange.epwholesale.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_digitalasset_exchange_epinfo(
        self,
        request: blockchain_models.QueryDigitalassetExchangeEpinfoRequest,
    ) -> blockchain_models.QueryDigitalassetExchangeEpinfoResponse:
        """
        Description: 数字资产管理平台版通信息查询接口
        Summary: 数字资产管理平台版通信息查询
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_digitalasset_exchange_epinfo_ex(request, headers, runtime)

    async def query_digitalasset_exchange_epinfo_async(
        self,
        request: blockchain_models.QueryDigitalassetExchangeEpinfoRequest,
    ) -> blockchain_models.QueryDigitalassetExchangeEpinfoResponse:
        """
        Description: 数字资产管理平台版通信息查询接口
        Summary: 数字资产管理平台版通信息查询
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_digitalasset_exchange_epinfo_ex_async(request, headers, runtime)

    def query_digitalasset_exchange_epinfo_ex(
        self,
        request: blockchain_models.QueryDigitalassetExchangeEpinfoRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryDigitalassetExchangeEpinfoResponse:
        """
        Description: 数字资产管理平台版通信息查询接口
        Summary: 数字资产管理平台版通信息查询
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryDigitalassetExchangeEpinfoResponse().from_map(
            self.do_request('1.0', 'baas.digitalasset.exchange.epinfo.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_digitalasset_exchange_epinfo_ex_async(
        self,
        request: blockchain_models.QueryDigitalassetExchangeEpinfoRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryDigitalassetExchangeEpinfoResponse:
        """
        Description: 数字资产管理平台版通信息查询接口
        Summary: 数字资产管理平台版通信息查询
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryDigitalassetExchangeEpinfoResponse().from_map(
            await self.do_request_async('1.0', 'baas.digitalasset.exchange.epinfo.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_digitalasset_exchange_eptrade(
        self,
        request: blockchain_models.QueryDigitalassetExchangeEptradeRequest,
    ) -> blockchain_models.QueryDigitalassetExchangeEptradeResponse:
        """
        Description: 数字资产管理平台交易查询接口
        1. ep_code有值，user_account为空时，查询版通的交易信息
        2. ep_code为空，user_account有值时，查询账户的交易信息
        3. ep_code，user_account均有值时，查询账户下指定版通的交易信息
        Summary: 数字资产管理平台交易查询
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_digitalasset_exchange_eptrade_ex(request, headers, runtime)

    async def query_digitalasset_exchange_eptrade_async(
        self,
        request: blockchain_models.QueryDigitalassetExchangeEptradeRequest,
    ) -> blockchain_models.QueryDigitalassetExchangeEptradeResponse:
        """
        Description: 数字资产管理平台交易查询接口
        1. ep_code有值，user_account为空时，查询版通的交易信息
        2. ep_code为空，user_account有值时，查询账户的交易信息
        3. ep_code，user_account均有值时，查询账户下指定版通的交易信息
        Summary: 数字资产管理平台交易查询
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_digitalasset_exchange_eptrade_ex_async(request, headers, runtime)

    def query_digitalasset_exchange_eptrade_ex(
        self,
        request: blockchain_models.QueryDigitalassetExchangeEptradeRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryDigitalassetExchangeEptradeResponse:
        """
        Description: 数字资产管理平台交易查询接口
        1. ep_code有值，user_account为空时，查询版通的交易信息
        2. ep_code为空，user_account有值时，查询账户的交易信息
        3. ep_code，user_account均有值时，查询账户下指定版通的交易信息
        Summary: 数字资产管理平台交易查询
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryDigitalassetExchangeEptradeResponse().from_map(
            self.do_request('1.0', 'baas.digitalasset.exchange.eptrade.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_digitalasset_exchange_eptrade_ex_async(
        self,
        request: blockchain_models.QueryDigitalassetExchangeEptradeRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryDigitalassetExchangeEptradeResponse:
        """
        Description: 数字资产管理平台交易查询接口
        1. ep_code有值，user_account为空时，查询版通的交易信息
        2. ep_code为空，user_account有值时，查询账户的交易信息
        3. ep_code，user_account均有值时，查询账户下指定版通的交易信息
        Summary: 数字资产管理平台交易查询
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryDigitalassetExchangeEptradeResponse().from_map(
            await self.do_request_async('1.0', 'baas.digitalasset.exchange.eptrade.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_digitalasset_exchange_epaccount(
        self,
        request: blockchain_models.QueryDigitalassetExchangeEpaccountRequest,
    ) -> blockchain_models.QueryDigitalassetExchangeEpaccountResponse:
        """
        Description: 数字资产管理平台账户信息查询接口
        Summary: 数字资产管理平台账户信息查询
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_digitalasset_exchange_epaccount_ex(request, headers, runtime)

    async def query_digitalasset_exchange_epaccount_async(
        self,
        request: blockchain_models.QueryDigitalassetExchangeEpaccountRequest,
    ) -> blockchain_models.QueryDigitalassetExchangeEpaccountResponse:
        """
        Description: 数字资产管理平台账户信息查询接口
        Summary: 数字资产管理平台账户信息查询
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_digitalasset_exchange_epaccount_ex_async(request, headers, runtime)

    def query_digitalasset_exchange_epaccount_ex(
        self,
        request: blockchain_models.QueryDigitalassetExchangeEpaccountRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryDigitalassetExchangeEpaccountResponse:
        """
        Description: 数字资产管理平台账户信息查询接口
        Summary: 数字资产管理平台账户信息查询
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryDigitalassetExchangeEpaccountResponse().from_map(
            self.do_request('1.0', 'baas.digitalasset.exchange.epaccount.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_digitalasset_exchange_epaccount_ex_async(
        self,
        request: blockchain_models.QueryDigitalassetExchangeEpaccountRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryDigitalassetExchangeEpaccountResponse:
        """
        Description: 数字资产管理平台账户信息查询接口
        Summary: 数字资产管理平台账户信息查询
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryDigitalassetExchangeEpaccountResponse().from_map(
            await self.do_request_async('1.0', 'baas.digitalasset.exchange.epaccount.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def start_digitalasset_exchange_eptrade(
        self,
        request: blockchain_models.StartDigitalassetExchangeEptradeRequest,
    ) -> blockchain_models.StartDigitalassetExchangeEptradeResponse:
        """
        Description: 数字资产管理平台交易接口
        Summary: 数字资产管理平台交易
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.start_digitalasset_exchange_eptrade_ex(request, headers, runtime)

    async def start_digitalasset_exchange_eptrade_async(
        self,
        request: blockchain_models.StartDigitalassetExchangeEptradeRequest,
    ) -> blockchain_models.StartDigitalassetExchangeEptradeResponse:
        """
        Description: 数字资产管理平台交易接口
        Summary: 数字资产管理平台交易
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.start_digitalasset_exchange_eptrade_ex_async(request, headers, runtime)

    def start_digitalasset_exchange_eptrade_ex(
        self,
        request: blockchain_models.StartDigitalassetExchangeEptradeRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartDigitalassetExchangeEptradeResponse:
        """
        Description: 数字资产管理平台交易接口
        Summary: 数字资产管理平台交易
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartDigitalassetExchangeEptradeResponse().from_map(
            self.do_request('1.0', 'baas.digitalasset.exchange.eptrade.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def start_digitalasset_exchange_eptrade_ex_async(
        self,
        request: blockchain_models.StartDigitalassetExchangeEptradeRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartDigitalassetExchangeEptradeResponse:
        """
        Description: 数字资产管理平台交易接口
        Summary: 数字资产管理平台交易
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartDigitalassetExchangeEptradeResponse().from_map(
            await self.do_request_async('1.0', 'baas.digitalasset.exchange.eptrade.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def start_digitalasset_exchange_epbuyback(
        self,
        request: blockchain_models.StartDigitalassetExchangeEpbuybackRequest,
    ) -> blockchain_models.StartDigitalassetExchangeEpbuybackResponse:
        """
        Description: 数字资产管理平台版通回购接口
        Summary: 数字资产管理平台版通回购
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.start_digitalasset_exchange_epbuyback_ex(request, headers, runtime)

    async def start_digitalasset_exchange_epbuyback_async(
        self,
        request: blockchain_models.StartDigitalassetExchangeEpbuybackRequest,
    ) -> blockchain_models.StartDigitalassetExchangeEpbuybackResponse:
        """
        Description: 数字资产管理平台版通回购接口
        Summary: 数字资产管理平台版通回购
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.start_digitalasset_exchange_epbuyback_ex_async(request, headers, runtime)

    def start_digitalasset_exchange_epbuyback_ex(
        self,
        request: blockchain_models.StartDigitalassetExchangeEpbuybackRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartDigitalassetExchangeEpbuybackResponse:
        """
        Description: 数字资产管理平台版通回购接口
        Summary: 数字资产管理平台版通回购
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartDigitalassetExchangeEpbuybackResponse().from_map(
            self.do_request('1.0', 'baas.digitalasset.exchange.epbuyback.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def start_digitalasset_exchange_epbuyback_ex_async(
        self,
        request: blockchain_models.StartDigitalassetExchangeEpbuybackRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartDigitalassetExchangeEpbuybackResponse:
        """
        Description: 数字资产管理平台版通回购接口
        Summary: 数字资产管理平台版通回购
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartDigitalassetExchangeEpbuybackResponse().from_map(
            await self.do_request_async('1.0', 'baas.digitalasset.exchange.epbuyback.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def create_distribution_user(
        self,
        request: blockchain_models.CreateDistributionUserRequest,
    ) -> blockchain_models.CreateDistributionUserResponse:
        """
        Description: 创建用户接口
        Summary: 创建用户接口
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.create_distribution_user_ex(request, headers, runtime)

    async def create_distribution_user_async(
        self,
        request: blockchain_models.CreateDistributionUserRequest,
    ) -> blockchain_models.CreateDistributionUserResponse:
        """
        Description: 创建用户接口
        Summary: 创建用户接口
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.create_distribution_user_ex_async(request, headers, runtime)

    def create_distribution_user_ex(
        self,
        request: blockchain_models.CreateDistributionUserRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateDistributionUserResponse:
        """
        Description: 创建用户接口
        Summary: 创建用户接口
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateDistributionUserResponse().from_map(
            self.do_request('1.0', 'baas.distribution.user.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def create_distribution_user_ex_async(
        self,
        request: blockchain_models.CreateDistributionUserRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateDistributionUserResponse:
        """
        Description: 创建用户接口
        Summary: 创建用户接口
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateDistributionUserResponse().from_map(
            await self.do_request_async('1.0', 'baas.distribution.user.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_distribution_user_team(
        self,
        request: blockchain_models.QueryDistributionUserTeamRequest,
    ) -> blockchain_models.QueryDistributionUserTeamResponse:
        """
        Description: 用户下级分销关系查询
        Summary: 用户下级分销关系查询
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_distribution_user_team_ex(request, headers, runtime)

    async def query_distribution_user_team_async(
        self,
        request: blockchain_models.QueryDistributionUserTeamRequest,
    ) -> blockchain_models.QueryDistributionUserTeamResponse:
        """
        Description: 用户下级分销关系查询
        Summary: 用户下级分销关系查询
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_distribution_user_team_ex_async(request, headers, runtime)

    def query_distribution_user_team_ex(
        self,
        request: blockchain_models.QueryDistributionUserTeamRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryDistributionUserTeamResponse:
        """
        Description: 用户下级分销关系查询
        Summary: 用户下级分销关系查询
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryDistributionUserTeamResponse().from_map(
            self.do_request('1.0', 'baas.distribution.user.team.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_distribution_user_team_ex_async(
        self,
        request: blockchain_models.QueryDistributionUserTeamRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryDistributionUserTeamResponse:
        """
        Description: 用户下级分销关系查询
        Summary: 用户下级分销关系查询
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryDistributionUserTeamResponse().from_map(
            await self.do_request_async('1.0', 'baas.distribution.user.team.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def create_distribution_shop(
        self,
        request: blockchain_models.CreateDistributionShopRequest,
    ) -> blockchain_models.CreateDistributionShopResponse:
        """
        Description: 创建商户接口
        Summary: 创建商户
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.create_distribution_shop_ex(request, headers, runtime)

    async def create_distribution_shop_async(
        self,
        request: blockchain_models.CreateDistributionShopRequest,
    ) -> blockchain_models.CreateDistributionShopResponse:
        """
        Description: 创建商户接口
        Summary: 创建商户
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.create_distribution_shop_ex_async(request, headers, runtime)

    def create_distribution_shop_ex(
        self,
        request: blockchain_models.CreateDistributionShopRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateDistributionShopResponse:
        """
        Description: 创建商户接口
        Summary: 创建商户
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateDistributionShopResponse().from_map(
            self.do_request('1.0', 'baas.distribution.shop.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def create_distribution_shop_ex_async(
        self,
        request: blockchain_models.CreateDistributionShopRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateDistributionShopResponse:
        """
        Description: 创建商户接口
        Summary: 创建商户
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateDistributionShopResponse().from_map(
            await self.do_request_async('1.0', 'baas.distribution.shop.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def create_distribution_user_relation(
        self,
        request: blockchain_models.CreateDistributionUserRelationRequest,
    ) -> blockchain_models.CreateDistributionUserRelationResponse:
        """
        Description: 用户之间分销关系建立
        Summary: 用户之间分销关系建立
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.create_distribution_user_relation_ex(request, headers, runtime)

    async def create_distribution_user_relation_async(
        self,
        request: blockchain_models.CreateDistributionUserRelationRequest,
    ) -> blockchain_models.CreateDistributionUserRelationResponse:
        """
        Description: 用户之间分销关系建立
        Summary: 用户之间分销关系建立
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.create_distribution_user_relation_ex_async(request, headers, runtime)

    def create_distribution_user_relation_ex(
        self,
        request: blockchain_models.CreateDistributionUserRelationRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateDistributionUserRelationResponse:
        """
        Description: 用户之间分销关系建立
        Summary: 用户之间分销关系建立
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateDistributionUserRelationResponse().from_map(
            self.do_request('1.0', 'baas.distribution.user.relation.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def create_distribution_user_relation_ex_async(
        self,
        request: blockchain_models.CreateDistributionUserRelationRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateDistributionUserRelationResponse:
        """
        Description: 用户之间分销关系建立
        Summary: 用户之间分销关系建立
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateDistributionUserRelationResponse().from_map(
            await self.do_request_async('1.0', 'baas.distribution.user.relation.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def init_distribution_contract(
        self,
        request: blockchain_models.InitDistributionContractRequest,
    ) -> blockchain_models.InitDistributionContractResponse:
        """
        Description: 营销分销合约初始化
        Summary: 营销分销合约初始化
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.init_distribution_contract_ex(request, headers, runtime)

    async def init_distribution_contract_async(
        self,
        request: blockchain_models.InitDistributionContractRequest,
    ) -> blockchain_models.InitDistributionContractResponse:
        """
        Description: 营销分销合约初始化
        Summary: 营销分销合约初始化
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.init_distribution_contract_ex_async(request, headers, runtime)

    def init_distribution_contract_ex(
        self,
        request: blockchain_models.InitDistributionContractRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.InitDistributionContractResponse:
        """
        Description: 营销分销合约初始化
        Summary: 营销分销合约初始化
        """
        UtilClient.validate_model(request)
        return blockchain_models.InitDistributionContractResponse().from_map(
            self.do_request('1.0', 'baas.distribution.contract.init', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def init_distribution_contract_ex_async(
        self,
        request: blockchain_models.InitDistributionContractRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.InitDistributionContractResponse:
        """
        Description: 营销分销合约初始化
        Summary: 营销分销合约初始化
        """
        UtilClient.validate_model(request)
        return blockchain_models.InitDistributionContractResponse().from_map(
            await self.do_request_async('1.0', 'baas.distribution.contract.init', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def create_distribution_product_item(
        self,
        request: blockchain_models.CreateDistributionProductItemRequest,
    ) -> blockchain_models.CreateDistributionProductItemResponse:
        """
        Description: 营销分销平台商品创建
        Summary: 营销分销平台商品创建
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.create_distribution_product_item_ex(request, headers, runtime)

    async def create_distribution_product_item_async(
        self,
        request: blockchain_models.CreateDistributionProductItemRequest,
    ) -> blockchain_models.CreateDistributionProductItemResponse:
        """
        Description: 营销分销平台商品创建
        Summary: 营销分销平台商品创建
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.create_distribution_product_item_ex_async(request, headers, runtime)

    def create_distribution_product_item_ex(
        self,
        request: blockchain_models.CreateDistributionProductItemRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateDistributionProductItemResponse:
        """
        Description: 营销分销平台商品创建
        Summary: 营销分销平台商品创建
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateDistributionProductItemResponse().from_map(
            self.do_request('1.0', 'baas.distribution.product.item.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def create_distribution_product_item_ex_async(
        self,
        request: blockchain_models.CreateDistributionProductItemRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateDistributionProductItemResponse:
        """
        Description: 营销分销平台商品创建
        Summary: 营销分销平台商品创建
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateDistributionProductItemResponse().from_map(
            await self.do_request_async('1.0', 'baas.distribution.product.item.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_distribution_product_item(
        self,
        request: blockchain_models.QueryDistributionProductItemRequest,
    ) -> blockchain_models.QueryDistributionProductItemResponse:
        """
        Description: 营销分销平台商品查询
        Summary: 营销分销平台商品查询
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_distribution_product_item_ex(request, headers, runtime)

    async def query_distribution_product_item_async(
        self,
        request: blockchain_models.QueryDistributionProductItemRequest,
    ) -> blockchain_models.QueryDistributionProductItemResponse:
        """
        Description: 营销分销平台商品查询
        Summary: 营销分销平台商品查询
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_distribution_product_item_ex_async(request, headers, runtime)

    def query_distribution_product_item_ex(
        self,
        request: blockchain_models.QueryDistributionProductItemRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryDistributionProductItemResponse:
        """
        Description: 营销分销平台商品查询
        Summary: 营销分销平台商品查询
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryDistributionProductItemResponse().from_map(
            self.do_request('1.0', 'baas.distribution.product.item.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_distribution_product_item_ex_async(
        self,
        request: blockchain_models.QueryDistributionProductItemRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryDistributionProductItemResponse:
        """
        Description: 营销分销平台商品查询
        Summary: 营销分销平台商品查询
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryDistributionProductItemResponse().from_map(
            await self.do_request_async('1.0', 'baas.distribution.product.item.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def update_distribution_fund_promoter(
        self,
        request: blockchain_models.UpdateDistributionFundPromoterRequest,
    ) -> blockchain_models.UpdateDistributionFundPromoterResponse:
        """
        Description: 营销分销平台推广人钱包更新
        Summary: 营销分销平台推广人钱包更新
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.update_distribution_fund_promoter_ex(request, headers, runtime)

    async def update_distribution_fund_promoter_async(
        self,
        request: blockchain_models.UpdateDistributionFundPromoterRequest,
    ) -> blockchain_models.UpdateDistributionFundPromoterResponse:
        """
        Description: 营销分销平台推广人钱包更新
        Summary: 营销分销平台推广人钱包更新
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.update_distribution_fund_promoter_ex_async(request, headers, runtime)

    def update_distribution_fund_promoter_ex(
        self,
        request: blockchain_models.UpdateDistributionFundPromoterRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.UpdateDistributionFundPromoterResponse:
        """
        Description: 营销分销平台推广人钱包更新
        Summary: 营销分销平台推广人钱包更新
        """
        UtilClient.validate_model(request)
        return blockchain_models.UpdateDistributionFundPromoterResponse().from_map(
            self.do_request('1.0', 'baas.distribution.fund.promoter.update', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def update_distribution_fund_promoter_ex_async(
        self,
        request: blockchain_models.UpdateDistributionFundPromoterRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.UpdateDistributionFundPromoterResponse:
        """
        Description: 营销分销平台推广人钱包更新
        Summary: 营销分销平台推广人钱包更新
        """
        UtilClient.validate_model(request)
        return blockchain_models.UpdateDistributionFundPromoterResponse().from_map(
            await self.do_request_async('1.0', 'baas.distribution.fund.promoter.update', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def update_distribution_fund_shop(
        self,
        request: blockchain_models.UpdateDistributionFundShopRequest,
    ) -> blockchain_models.UpdateDistributionFundShopResponse:
        """
        Description: 营销分销平台商户账户更新
        Summary: 营销分销平台商户账户更新
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.update_distribution_fund_shop_ex(request, headers, runtime)

    async def update_distribution_fund_shop_async(
        self,
        request: blockchain_models.UpdateDistributionFundShopRequest,
    ) -> blockchain_models.UpdateDistributionFundShopResponse:
        """
        Description: 营销分销平台商户账户更新
        Summary: 营销分销平台商户账户更新
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.update_distribution_fund_shop_ex_async(request, headers, runtime)

    def update_distribution_fund_shop_ex(
        self,
        request: blockchain_models.UpdateDistributionFundShopRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.UpdateDistributionFundShopResponse:
        """
        Description: 营销分销平台商户账户更新
        Summary: 营销分销平台商户账户更新
        """
        UtilClient.validate_model(request)
        return blockchain_models.UpdateDistributionFundShopResponse().from_map(
            self.do_request('1.0', 'baas.distribution.fund.shop.update', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def update_distribution_fund_shop_ex_async(
        self,
        request: blockchain_models.UpdateDistributionFundShopRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.UpdateDistributionFundShopResponse:
        """
        Description: 营销分销平台商户账户更新
        Summary: 营销分销平台商户账户更新
        """
        UtilClient.validate_model(request)
        return blockchain_models.UpdateDistributionFundShopResponse().from_map(
            await self.do_request_async('1.0', 'baas.distribution.fund.shop.update', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_distribution_fund_promoter(
        self,
        request: blockchain_models.QueryDistributionFundPromoterRequest,
    ) -> blockchain_models.QueryDistributionFundPromoterResponse:
        """
        Description: 营销分销平台推广人账户查询
        Summary: 营销分销平台推广人账户查询
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_distribution_fund_promoter_ex(request, headers, runtime)

    async def query_distribution_fund_promoter_async(
        self,
        request: blockchain_models.QueryDistributionFundPromoterRequest,
    ) -> blockchain_models.QueryDistributionFundPromoterResponse:
        """
        Description: 营销分销平台推广人账户查询
        Summary: 营销分销平台推广人账户查询
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_distribution_fund_promoter_ex_async(request, headers, runtime)

    def query_distribution_fund_promoter_ex(
        self,
        request: blockchain_models.QueryDistributionFundPromoterRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryDistributionFundPromoterResponse:
        """
        Description: 营销分销平台推广人账户查询
        Summary: 营销分销平台推广人账户查询
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryDistributionFundPromoterResponse().from_map(
            self.do_request('1.0', 'baas.distribution.fund.promoter.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_distribution_fund_promoter_ex_async(
        self,
        request: blockchain_models.QueryDistributionFundPromoterRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryDistributionFundPromoterResponse:
        """
        Description: 营销分销平台推广人账户查询
        Summary: 营销分销平台推广人账户查询
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryDistributionFundPromoterResponse().from_map(
            await self.do_request_async('1.0', 'baas.distribution.fund.promoter.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_distribution_fund_shop(
        self,
        request: blockchain_models.QueryDistributionFundShopRequest,
    ) -> blockchain_models.QueryDistributionFundShopResponse:
        """
        Description: 营销分销平台商户账户查询
        Summary: 营销分销平台商户账户查询
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_distribution_fund_shop_ex(request, headers, runtime)

    async def query_distribution_fund_shop_async(
        self,
        request: blockchain_models.QueryDistributionFundShopRequest,
    ) -> blockchain_models.QueryDistributionFundShopResponse:
        """
        Description: 营销分销平台商户账户查询
        Summary: 营销分销平台商户账户查询
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_distribution_fund_shop_ex_async(request, headers, runtime)

    def query_distribution_fund_shop_ex(
        self,
        request: blockchain_models.QueryDistributionFundShopRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryDistributionFundShopResponse:
        """
        Description: 营销分销平台商户账户查询
        Summary: 营销分销平台商户账户查询
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryDistributionFundShopResponse().from_map(
            self.do_request('1.0', 'baas.distribution.fund.shop.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_distribution_fund_shop_ex_async(
        self,
        request: blockchain_models.QueryDistributionFundShopRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryDistributionFundShopResponse:
        """
        Description: 营销分销平台商户账户查询
        Summary: 营销分销平台商户账户查询
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryDistributionFundShopResponse().from_map(
            await self.do_request_async('1.0', 'baas.distribution.fund.shop.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_distribution_fund_promoterflow(
        self,
        request: blockchain_models.QueryDistributionFundPromoterflowRequest,
    ) -> blockchain_models.QueryDistributionFundPromoterflowResponse:
        """
        Description: 营销分销平台推广人账户流水查询
        Summary: 营销分销平台推广人账户流水查询
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_distribution_fund_promoterflow_ex(request, headers, runtime)

    async def query_distribution_fund_promoterflow_async(
        self,
        request: blockchain_models.QueryDistributionFundPromoterflowRequest,
    ) -> blockchain_models.QueryDistributionFundPromoterflowResponse:
        """
        Description: 营销分销平台推广人账户流水查询
        Summary: 营销分销平台推广人账户流水查询
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_distribution_fund_promoterflow_ex_async(request, headers, runtime)

    def query_distribution_fund_promoterflow_ex(
        self,
        request: blockchain_models.QueryDistributionFundPromoterflowRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryDistributionFundPromoterflowResponse:
        """
        Description: 营销分销平台推广人账户流水查询
        Summary: 营销分销平台推广人账户流水查询
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryDistributionFundPromoterflowResponse().from_map(
            self.do_request('1.0', 'baas.distribution.fund.promoterflow.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_distribution_fund_promoterflow_ex_async(
        self,
        request: blockchain_models.QueryDistributionFundPromoterflowRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryDistributionFundPromoterflowResponse:
        """
        Description: 营销分销平台推广人账户流水查询
        Summary: 营销分销平台推广人账户流水查询
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryDistributionFundPromoterflowResponse().from_map(
            await self.do_request_async('1.0', 'baas.distribution.fund.promoterflow.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def create_distribution_order_promoter(
        self,
        request: blockchain_models.CreateDistributionOrderPromoterRequest,
    ) -> blockchain_models.CreateDistributionOrderPromoterResponse:
        """
        Description: 营销分销平台推广订单创建
        Summary: 营销分销平台推广订单创建
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.create_distribution_order_promoter_ex(request, headers, runtime)

    async def create_distribution_order_promoter_async(
        self,
        request: blockchain_models.CreateDistributionOrderPromoterRequest,
    ) -> blockchain_models.CreateDistributionOrderPromoterResponse:
        """
        Description: 营销分销平台推广订单创建
        Summary: 营销分销平台推广订单创建
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.create_distribution_order_promoter_ex_async(request, headers, runtime)

    def create_distribution_order_promoter_ex(
        self,
        request: blockchain_models.CreateDistributionOrderPromoterRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateDistributionOrderPromoterResponse:
        """
        Description: 营销分销平台推广订单创建
        Summary: 营销分销平台推广订单创建
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateDistributionOrderPromoterResponse().from_map(
            self.do_request('1.0', 'baas.distribution.order.promoter.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def create_distribution_order_promoter_ex_async(
        self,
        request: blockchain_models.CreateDistributionOrderPromoterRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateDistributionOrderPromoterResponse:
        """
        Description: 营销分销平台推广订单创建
        Summary: 营销分销平台推广订单创建
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateDistributionOrderPromoterResponse().from_map(
            await self.do_request_async('1.0', 'baas.distribution.order.promoter.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def create_distribution_order_trade(
        self,
        request: blockchain_models.CreateDistributionOrderTradeRequest,
    ) -> blockchain_models.CreateDistributionOrderTradeResponse:
        """
        Description: 营销分销平台购买订单创建
        Summary: 营销分销平台购买订单创建
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.create_distribution_order_trade_ex(request, headers, runtime)

    async def create_distribution_order_trade_async(
        self,
        request: blockchain_models.CreateDistributionOrderTradeRequest,
    ) -> blockchain_models.CreateDistributionOrderTradeResponse:
        """
        Description: 营销分销平台购买订单创建
        Summary: 营销分销平台购买订单创建
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.create_distribution_order_trade_ex_async(request, headers, runtime)

    def create_distribution_order_trade_ex(
        self,
        request: blockchain_models.CreateDistributionOrderTradeRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateDistributionOrderTradeResponse:
        """
        Description: 营销分销平台购买订单创建
        Summary: 营销分销平台购买订单创建
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateDistributionOrderTradeResponse().from_map(
            self.do_request('1.0', 'baas.distribution.order.trade.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def create_distribution_order_trade_ex_async(
        self,
        request: blockchain_models.CreateDistributionOrderTradeRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateDistributionOrderTradeResponse:
        """
        Description: 营销分销平台购买订单创建
        Summary: 营销分销平台购买订单创建
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateDistributionOrderTradeResponse().from_map(
            await self.do_request_async('1.0', 'baas.distribution.order.trade.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_distribution_order_promoter(
        self,
        request: blockchain_models.QueryDistributionOrderPromoterRequest,
    ) -> blockchain_models.QueryDistributionOrderPromoterResponse:
        """
        Description: 营销分销平台推广订单查询
        Summary: 营销分销平台推广订单查询
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_distribution_order_promoter_ex(request, headers, runtime)

    async def query_distribution_order_promoter_async(
        self,
        request: blockchain_models.QueryDistributionOrderPromoterRequest,
    ) -> blockchain_models.QueryDistributionOrderPromoterResponse:
        """
        Description: 营销分销平台推广订单查询
        Summary: 营销分销平台推广订单查询
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_distribution_order_promoter_ex_async(request, headers, runtime)

    def query_distribution_order_promoter_ex(
        self,
        request: blockchain_models.QueryDistributionOrderPromoterRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryDistributionOrderPromoterResponse:
        """
        Description: 营销分销平台推广订单查询
        Summary: 营销分销平台推广订单查询
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryDistributionOrderPromoterResponse().from_map(
            self.do_request('1.0', 'baas.distribution.order.promoter.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_distribution_order_promoter_ex_async(
        self,
        request: blockchain_models.QueryDistributionOrderPromoterRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryDistributionOrderPromoterResponse:
        """
        Description: 营销分销平台推广订单查询
        Summary: 营销分销平台推广订单查询
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryDistributionOrderPromoterResponse().from_map(
            await self.do_request_async('1.0', 'baas.distribution.order.promoter.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_distribution_order_rakeback(
        self,
        request: blockchain_models.QueryDistributionOrderRakebackRequest,
    ) -> blockchain_models.QueryDistributionOrderRakebackResponse:
        """
        Description: 营销分销平台订单返佣信息查询
        Summary: 营销分销平台订单返佣信息查询
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_distribution_order_rakeback_ex(request, headers, runtime)

    async def query_distribution_order_rakeback_async(
        self,
        request: blockchain_models.QueryDistributionOrderRakebackRequest,
    ) -> blockchain_models.QueryDistributionOrderRakebackResponse:
        """
        Description: 营销分销平台订单返佣信息查询
        Summary: 营销分销平台订单返佣信息查询
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_distribution_order_rakeback_ex_async(request, headers, runtime)

    def query_distribution_order_rakeback_ex(
        self,
        request: blockchain_models.QueryDistributionOrderRakebackRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryDistributionOrderRakebackResponse:
        """
        Description: 营销分销平台订单返佣信息查询
        Summary: 营销分销平台订单返佣信息查询
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryDistributionOrderRakebackResponse().from_map(
            self.do_request('1.0', 'baas.distribution.order.rakeback.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_distribution_order_rakeback_ex_async(
        self,
        request: blockchain_models.QueryDistributionOrderRakebackRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryDistributionOrderRakebackResponse:
        """
        Description: 营销分销平台订单返佣信息查询
        Summary: 营销分销平台订单返佣信息查询
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryDistributionOrderRakebackResponse().from_map(
            await self.do_request_async('1.0', 'baas.distribution.order.rakeback.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_distribution_order_trade(
        self,
        request: blockchain_models.QueryDistributionOrderTradeRequest,
    ) -> blockchain_models.QueryDistributionOrderTradeResponse:
        """
        Description: 营销分销平台购买订单查询
        Summary: 营销分销平台购买订单查询
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_distribution_order_trade_ex(request, headers, runtime)

    async def query_distribution_order_trade_async(
        self,
        request: blockchain_models.QueryDistributionOrderTradeRequest,
    ) -> blockchain_models.QueryDistributionOrderTradeResponse:
        """
        Description: 营销分销平台购买订单查询
        Summary: 营销分销平台购买订单查询
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_distribution_order_trade_ex_async(request, headers, runtime)

    def query_distribution_order_trade_ex(
        self,
        request: blockchain_models.QueryDistributionOrderTradeRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryDistributionOrderTradeResponse:
        """
        Description: 营销分销平台购买订单查询
        Summary: 营销分销平台购买订单查询
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryDistributionOrderTradeResponse().from_map(
            self.do_request('1.0', 'baas.distribution.order.trade.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_distribution_order_trade_ex_async(
        self,
        request: blockchain_models.QueryDistributionOrderTradeRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryDistributionOrderTradeResponse:
        """
        Description: 营销分销平台购买订单查询
        Summary: 营销分销平台购买订单查询
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryDistributionOrderTradeResponse().from_map(
            await self.do_request_async('1.0', 'baas.distribution.order.trade.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def create_logistic_finance_dis(
        self,
        request: blockchain_models.CreateLogisticFinanceDisRequest,
    ) -> blockchain_models.CreateLogisticFinanceDisResponse:
        """
        Description: DIS 分布式数字身份申请
        Summary: DIS 分布式数字身份申请
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.create_logistic_finance_dis_ex(request, headers, runtime)

    async def create_logistic_finance_dis_async(
        self,
        request: blockchain_models.CreateLogisticFinanceDisRequest,
    ) -> blockchain_models.CreateLogisticFinanceDisResponse:
        """
        Description: DIS 分布式数字身份申请
        Summary: DIS 分布式数字身份申请
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.create_logistic_finance_dis_ex_async(request, headers, runtime)

    def create_logistic_finance_dis_ex(
        self,
        request: blockchain_models.CreateLogisticFinanceDisRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateLogisticFinanceDisResponse:
        """
        Description: DIS 分布式数字身份申请
        Summary: DIS 分布式数字身份申请
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateLogisticFinanceDisResponse().from_map(
            self.do_request('1.0', 'baas.logistic.finance.dis.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def create_logistic_finance_dis_ex_async(
        self,
        request: blockchain_models.CreateLogisticFinanceDisRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateLogisticFinanceDisResponse:
        """
        Description: DIS 分布式数字身份申请
        Summary: DIS 分布式数字身份申请
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateLogisticFinanceDisResponse().from_map(
            await self.do_request_async('1.0', 'baas.logistic.finance.dis.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def list_logistic_finance_dis(
        self,
        request: blockchain_models.ListLogisticFinanceDisRequest,
    ) -> blockchain_models.ListLogisticFinanceDisResponse:
        """
        Description: 查询 DIS 分布式数字身份列表
        Summary: 查询 DIS 分布式数字身份列表
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.list_logistic_finance_dis_ex(request, headers, runtime)

    async def list_logistic_finance_dis_async(
        self,
        request: blockchain_models.ListLogisticFinanceDisRequest,
    ) -> blockchain_models.ListLogisticFinanceDisResponse:
        """
        Description: 查询 DIS 分布式数字身份列表
        Summary: 查询 DIS 分布式数字身份列表
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.list_logistic_finance_dis_ex_async(request, headers, runtime)

    def list_logistic_finance_dis_ex(
        self,
        request: blockchain_models.ListLogisticFinanceDisRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.ListLogisticFinanceDisResponse:
        """
        Description: 查询 DIS 分布式数字身份列表
        Summary: 查询 DIS 分布式数字身份列表
        """
        UtilClient.validate_model(request)
        return blockchain_models.ListLogisticFinanceDisResponse().from_map(
            self.do_request('1.0', 'baas.logistic.finance.dis.list', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def list_logistic_finance_dis_ex_async(
        self,
        request: blockchain_models.ListLogisticFinanceDisRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.ListLogisticFinanceDisResponse:
        """
        Description: 查询 DIS 分布式数字身份列表
        Summary: 查询 DIS 分布式数字身份列表
        """
        UtilClient.validate_model(request)
        return blockchain_models.ListLogisticFinanceDisResponse().from_map(
            await self.do_request_async('1.0', 'baas.logistic.finance.dis.list', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def create_logistic_finance_disvc(
        self,
        request: blockchain_models.CreateLogisticFinanceDisvcRequest,
    ) -> blockchain_models.CreateLogisticFinanceDisvcResponse:
        """
        Description: 为成员颁发可验证声明用于允许指定成员有访问数据的权限
        Summary: 颁发可验证声明
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.create_logistic_finance_disvc_ex(request, headers, runtime)

    async def create_logistic_finance_disvc_async(
        self,
        request: blockchain_models.CreateLogisticFinanceDisvcRequest,
    ) -> blockchain_models.CreateLogisticFinanceDisvcResponse:
        """
        Description: 为成员颁发可验证声明用于允许指定成员有访问数据的权限
        Summary: 颁发可验证声明
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.create_logistic_finance_disvc_ex_async(request, headers, runtime)

    def create_logistic_finance_disvc_ex(
        self,
        request: blockchain_models.CreateLogisticFinanceDisvcRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateLogisticFinanceDisvcResponse:
        """
        Description: 为成员颁发可验证声明用于允许指定成员有访问数据的权限
        Summary: 颁发可验证声明
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateLogisticFinanceDisvcResponse().from_map(
            self.do_request('1.0', 'baas.logistic.finance.disvc.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def create_logistic_finance_disvc_ex_async(
        self,
        request: blockchain_models.CreateLogisticFinanceDisvcRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateLogisticFinanceDisvcResponse:
        """
        Description: 为成员颁发可验证声明用于允许指定成员有访问数据的权限
        Summary: 颁发可验证声明
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateLogisticFinanceDisvcResponse().from_map(
            await self.do_request_async('1.0', 'baas.logistic.finance.disvc.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_logistic_finance_disvc(
        self,
        request: blockchain_models.QueryLogisticFinanceDisvcRequest,
    ) -> blockchain_models.QueryLogisticFinanceDisvcResponse:
        """
        Description: 查询颁发的可验证声明完整声明内容
        Summary: 查询颁发的可验证声明
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_logistic_finance_disvc_ex(request, headers, runtime)

    async def query_logistic_finance_disvc_async(
        self,
        request: blockchain_models.QueryLogisticFinanceDisvcRequest,
    ) -> blockchain_models.QueryLogisticFinanceDisvcResponse:
        """
        Description: 查询颁发的可验证声明完整声明内容
        Summary: 查询颁发的可验证声明
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_logistic_finance_disvc_ex_async(request, headers, runtime)

    def query_logistic_finance_disvc_ex(
        self,
        request: blockchain_models.QueryLogisticFinanceDisvcRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryLogisticFinanceDisvcResponse:
        """
        Description: 查询颁发的可验证声明完整声明内容
        Summary: 查询颁发的可验证声明
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryLogisticFinanceDisvcResponse().from_map(
            self.do_request('1.0', 'baas.logistic.finance.disvc.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_logistic_finance_disvc_ex_async(
        self,
        request: blockchain_models.QueryLogisticFinanceDisvcRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryLogisticFinanceDisvcResponse:
        """
        Description: 查询颁发的可验证声明完整声明内容
        Summary: 查询颁发的可验证声明
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryLogisticFinanceDisvcResponse().from_map(
            await self.do_request_async('1.0', 'baas.logistic.finance.disvc.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def create_logistic_finance_account(
        self,
        request: blockchain_models.CreateLogisticFinanceAccountRequest,
    ) -> blockchain_models.CreateLogisticFinanceAccountResponse:
        """
        Description: 物流金融平台用户账户映射
        Summary: 物流金融平台用户账户映射
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.create_logistic_finance_account_ex(request, headers, runtime)

    async def create_logistic_finance_account_async(
        self,
        request: blockchain_models.CreateLogisticFinanceAccountRequest,
    ) -> blockchain_models.CreateLogisticFinanceAccountResponse:
        """
        Description: 物流金融平台用户账户映射
        Summary: 物流金融平台用户账户映射
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.create_logistic_finance_account_ex_async(request, headers, runtime)

    def create_logistic_finance_account_ex(
        self,
        request: blockchain_models.CreateLogisticFinanceAccountRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateLogisticFinanceAccountResponse:
        """
        Description: 物流金融平台用户账户映射
        Summary: 物流金融平台用户账户映射
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateLogisticFinanceAccountResponse().from_map(
            self.do_request('1.0', 'baas.logistic.finance.account.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def create_logistic_finance_account_ex_async(
        self,
        request: blockchain_models.CreateLogisticFinanceAccountRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateLogisticFinanceAccountResponse:
        """
        Description: 物流金融平台用户账户映射
        Summary: 物流金融平台用户账户映射
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateLogisticFinanceAccountResponse().from_map(
            await self.do_request_async('1.0', 'baas.logistic.finance.account.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def batchcreate_logistic_finance_account(
        self,
        request: blockchain_models.BatchcreateLogisticFinanceAccountRequest,
    ) -> blockchain_models.BatchcreateLogisticFinanceAccountResponse:
        """
        Description: 物流金融平台账户批量映射
        Summary: 物流金融平台账户批量映射
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.batchcreate_logistic_finance_account_ex(request, headers, runtime)

    async def batchcreate_logistic_finance_account_async(
        self,
        request: blockchain_models.BatchcreateLogisticFinanceAccountRequest,
    ) -> blockchain_models.BatchcreateLogisticFinanceAccountResponse:
        """
        Description: 物流金融平台账户批量映射
        Summary: 物流金融平台账户批量映射
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.batchcreate_logistic_finance_account_ex_async(request, headers, runtime)

    def batchcreate_logistic_finance_account_ex(
        self,
        request: blockchain_models.BatchcreateLogisticFinanceAccountRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.BatchcreateLogisticFinanceAccountResponse:
        """
        Description: 物流金融平台账户批量映射
        Summary: 物流金融平台账户批量映射
        """
        UtilClient.validate_model(request)
        return blockchain_models.BatchcreateLogisticFinanceAccountResponse().from_map(
            self.do_request('1.0', 'baas.logistic.finance.account.batchcreate', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def batchcreate_logistic_finance_account_ex_async(
        self,
        request: blockchain_models.BatchcreateLogisticFinanceAccountRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.BatchcreateLogisticFinanceAccountResponse:
        """
        Description: 物流金融平台账户批量映射
        Summary: 物流金融平台账户批量映射
        """
        UtilClient.validate_model(request)
        return blockchain_models.BatchcreateLogisticFinanceAccountResponse().from_map(
            await self.do_request_async('1.0', 'baas.logistic.finance.account.batchcreate', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def create_logistic_finance_order(
        self,
        request: blockchain_models.CreateLogisticFinanceOrderRequest,
    ) -> blockchain_models.CreateLogisticFinanceOrderResponse:
        """
        Description: 物流金融平台物流运单创建
        Summary: 物流金融平台物流运单创建
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.create_logistic_finance_order_ex(request, headers, runtime)

    async def create_logistic_finance_order_async(
        self,
        request: blockchain_models.CreateLogisticFinanceOrderRequest,
    ) -> blockchain_models.CreateLogisticFinanceOrderResponse:
        """
        Description: 物流金融平台物流运单创建
        Summary: 物流金融平台物流运单创建
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.create_logistic_finance_order_ex_async(request, headers, runtime)

    def create_logistic_finance_order_ex(
        self,
        request: blockchain_models.CreateLogisticFinanceOrderRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateLogisticFinanceOrderResponse:
        """
        Description: 物流金融平台物流运单创建
        Summary: 物流金融平台物流运单创建
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateLogisticFinanceOrderResponse().from_map(
            self.do_request('1.0', 'baas.logistic.finance.order.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def create_logistic_finance_order_ex_async(
        self,
        request: blockchain_models.CreateLogisticFinanceOrderRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateLogisticFinanceOrderResponse:
        """
        Description: 物流金融平台物流运单创建
        Summary: 物流金融平台物流运单创建
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateLogisticFinanceOrderResponse().from_map(
            await self.do_request_async('1.0', 'baas.logistic.finance.order.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def finish_logistic_finance_order(
        self,
        request: blockchain_models.FinishLogisticFinanceOrderRequest,
    ) -> blockchain_models.FinishLogisticFinanceOrderResponse:
        """
        Description: 物流金融平台运单完成
        Summary: 物流金融平台运单完成
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.finish_logistic_finance_order_ex(request, headers, runtime)

    async def finish_logistic_finance_order_async(
        self,
        request: blockchain_models.FinishLogisticFinanceOrderRequest,
    ) -> blockchain_models.FinishLogisticFinanceOrderResponse:
        """
        Description: 物流金融平台运单完成
        Summary: 物流金融平台运单完成
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.finish_logistic_finance_order_ex_async(request, headers, runtime)

    def finish_logistic_finance_order_ex(
        self,
        request: blockchain_models.FinishLogisticFinanceOrderRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.FinishLogisticFinanceOrderResponse:
        """
        Description: 物流金融平台运单完成
        Summary: 物流金融平台运单完成
        """
        UtilClient.validate_model(request)
        return blockchain_models.FinishLogisticFinanceOrderResponse().from_map(
            self.do_request('1.0', 'baas.logistic.finance.order.finish', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def finish_logistic_finance_order_ex_async(
        self,
        request: blockchain_models.FinishLogisticFinanceOrderRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.FinishLogisticFinanceOrderResponse:
        """
        Description: 物流金融平台运单完成
        Summary: 物流金融平台运单完成
        """
        UtilClient.validate_model(request)
        return blockchain_models.FinishLogisticFinanceOrderResponse().from_map(
            await self.do_request_async('1.0', 'baas.logistic.finance.order.finish', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def create_logistic_finance_payorder(
        self,
        request: blockchain_models.CreateLogisticFinancePayorderRequest,
    ) -> blockchain_models.CreateLogisticFinancePayorderResponse:
        """
        Description: 物流金融平台支付订单创建
        Summary: 物流金融平台支付订单创建
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.create_logistic_finance_payorder_ex(request, headers, runtime)

    async def create_logistic_finance_payorder_async(
        self,
        request: blockchain_models.CreateLogisticFinancePayorderRequest,
    ) -> blockchain_models.CreateLogisticFinancePayorderResponse:
        """
        Description: 物流金融平台支付订单创建
        Summary: 物流金融平台支付订单创建
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.create_logistic_finance_payorder_ex_async(request, headers, runtime)

    def create_logistic_finance_payorder_ex(
        self,
        request: blockchain_models.CreateLogisticFinancePayorderRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateLogisticFinancePayorderResponse:
        """
        Description: 物流金融平台支付订单创建
        Summary: 物流金融平台支付订单创建
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateLogisticFinancePayorderResponse().from_map(
            self.do_request('1.0', 'baas.logistic.finance.payorder.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def create_logistic_finance_payorder_ex_async(
        self,
        request: blockchain_models.CreateLogisticFinancePayorderRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateLogisticFinancePayorderResponse:
        """
        Description: 物流金融平台支付订单创建
        Summary: 物流金融平台支付订单创建
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateLogisticFinancePayorderResponse().from_map(
            await self.do_request_async('1.0', 'baas.logistic.finance.payorder.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_logistic_finance_order(
        self,
        request: blockchain_models.QueryLogisticFinanceOrderRequest,
    ) -> blockchain_models.QueryLogisticFinanceOrderResponse:
        """
        Description: 物流金融平台订单状态查询
        Summary: 物流金融平台订单状态查询
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_logistic_finance_order_ex(request, headers, runtime)

    async def query_logistic_finance_order_async(
        self,
        request: blockchain_models.QueryLogisticFinanceOrderRequest,
    ) -> blockchain_models.QueryLogisticFinanceOrderResponse:
        """
        Description: 物流金融平台订单状态查询
        Summary: 物流金融平台订单状态查询
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_logistic_finance_order_ex_async(request, headers, runtime)

    def query_logistic_finance_order_ex(
        self,
        request: blockchain_models.QueryLogisticFinanceOrderRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryLogisticFinanceOrderResponse:
        """
        Description: 物流金融平台订单状态查询
        Summary: 物流金融平台订单状态查询
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryLogisticFinanceOrderResponse().from_map(
            self.do_request('1.0', 'baas.logistic.finance.order.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_logistic_finance_order_ex_async(
        self,
        request: blockchain_models.QueryLogisticFinanceOrderRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryLogisticFinanceOrderResponse:
        """
        Description: 物流金融平台订单状态查询
        Summary: 物流金融平台订单状态查询
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryLogisticFinanceOrderResponse().from_map(
            await self.do_request_async('1.0', 'baas.logistic.finance.order.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def create_logistic_finance_billorder(
        self,
        request: blockchain_models.CreateLogisticFinanceBillorderRequest,
    ) -> blockchain_models.CreateLogisticFinanceBillorderResponse:
        """
        Description: 物流金融平台发票订单创建
        Summary: 物流金融平台发票订单创建
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.create_logistic_finance_billorder_ex(request, headers, runtime)

    async def create_logistic_finance_billorder_async(
        self,
        request: blockchain_models.CreateLogisticFinanceBillorderRequest,
    ) -> blockchain_models.CreateLogisticFinanceBillorderResponse:
        """
        Description: 物流金融平台发票订单创建
        Summary: 物流金融平台发票订单创建
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.create_logistic_finance_billorder_ex_async(request, headers, runtime)

    def create_logistic_finance_billorder_ex(
        self,
        request: blockchain_models.CreateLogisticFinanceBillorderRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateLogisticFinanceBillorderResponse:
        """
        Description: 物流金融平台发票订单创建
        Summary: 物流金融平台发票订单创建
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateLogisticFinanceBillorderResponse().from_map(
            self.do_request('1.0', 'baas.logistic.finance.billorder.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def create_logistic_finance_billorder_ex_async(
        self,
        request: blockchain_models.CreateLogisticFinanceBillorderRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateLogisticFinanceBillorderResponse:
        """
        Description: 物流金融平台发票订单创建
        Summary: 物流金融平台发票订单创建
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateLogisticFinanceBillorderResponse().from_map(
            await self.do_request_async('1.0', 'baas.logistic.finance.billorder.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def import_logistic_finance_location(
        self,
        request: blockchain_models.ImportLogisticFinanceLocationRequest,
    ) -> blockchain_models.ImportLogisticFinanceLocationResponse:
        """
        Description: 物流金融平台运单轨迹信息导入
        Summary: 物流金融平台运单轨迹信息导入
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.import_logistic_finance_location_ex(request, headers, runtime)

    async def import_logistic_finance_location_async(
        self,
        request: blockchain_models.ImportLogisticFinanceLocationRequest,
    ) -> blockchain_models.ImportLogisticFinanceLocationResponse:
        """
        Description: 物流金融平台运单轨迹信息导入
        Summary: 物流金融平台运单轨迹信息导入
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.import_logistic_finance_location_ex_async(request, headers, runtime)

    def import_logistic_finance_location_ex(
        self,
        request: blockchain_models.ImportLogisticFinanceLocationRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.ImportLogisticFinanceLocationResponse:
        """
        Description: 物流金融平台运单轨迹信息导入
        Summary: 物流金融平台运单轨迹信息导入
        """
        UtilClient.validate_model(request)
        return blockchain_models.ImportLogisticFinanceLocationResponse().from_map(
            self.do_request('1.0', 'baas.logistic.finance.location.import', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def import_logistic_finance_location_ex_async(
        self,
        request: blockchain_models.ImportLogisticFinanceLocationRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.ImportLogisticFinanceLocationResponse:
        """
        Description: 物流金融平台运单轨迹信息导入
        Summary: 物流金融平台运单轨迹信息导入
        """
        UtilClient.validate_model(request)
        return blockchain_models.ImportLogisticFinanceLocationResponse().from_map(
            await self.do_request_async('1.0', 'baas.logistic.finance.location.import', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def create_logistic_finance_consignor(
        self,
        request: blockchain_models.CreateLogisticFinanceConsignorRequest,
    ) -> blockchain_models.CreateLogisticFinanceConsignorResponse:
        """
        Description: 物流金融平台创建货主DIS
        Summary: 物流金融平台创建货主DIS
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.create_logistic_finance_consignor_ex(request, headers, runtime)

    async def create_logistic_finance_consignor_async(
        self,
        request: blockchain_models.CreateLogisticFinanceConsignorRequest,
    ) -> blockchain_models.CreateLogisticFinanceConsignorResponse:
        """
        Description: 物流金融平台创建货主DIS
        Summary: 物流金融平台创建货主DIS
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.create_logistic_finance_consignor_ex_async(request, headers, runtime)

    def create_logistic_finance_consignor_ex(
        self,
        request: blockchain_models.CreateLogisticFinanceConsignorRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateLogisticFinanceConsignorResponse:
        """
        Description: 物流金融平台创建货主DIS
        Summary: 物流金融平台创建货主DIS
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateLogisticFinanceConsignorResponse().from_map(
            self.do_request('1.0', 'baas.logistic.finance.consignor.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def create_logistic_finance_consignor_ex_async(
        self,
        request: blockchain_models.CreateLogisticFinanceConsignorRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateLogisticFinanceConsignorResponse:
        """
        Description: 物流金融平台创建货主DIS
        Summary: 物流金融平台创建货主DIS
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateLogisticFinanceConsignorResponse().from_map(
            await self.do_request_async('1.0', 'baas.logistic.finance.consignor.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def create_logistic_finance_platform(
        self,
        request: blockchain_models.CreateLogisticFinancePlatformRequest,
    ) -> blockchain_models.CreateLogisticFinancePlatformResponse:
        """
        Description: 物流金融平台创建无车承运平台DIS
        Summary: 物流金融平台创建无车承运平台DIS
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.create_logistic_finance_platform_ex(request, headers, runtime)

    async def create_logistic_finance_platform_async(
        self,
        request: blockchain_models.CreateLogisticFinancePlatformRequest,
    ) -> blockchain_models.CreateLogisticFinancePlatformResponse:
        """
        Description: 物流金融平台创建无车承运平台DIS
        Summary: 物流金融平台创建无车承运平台DIS
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.create_logistic_finance_platform_ex_async(request, headers, runtime)

    def create_logistic_finance_platform_ex(
        self,
        request: blockchain_models.CreateLogisticFinancePlatformRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateLogisticFinancePlatformResponse:
        """
        Description: 物流金融平台创建无车承运平台DIS
        Summary: 物流金融平台创建无车承运平台DIS
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateLogisticFinancePlatformResponse().from_map(
            self.do_request('1.0', 'baas.logistic.finance.platform.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def create_logistic_finance_platform_ex_async(
        self,
        request: blockchain_models.CreateLogisticFinancePlatformRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateLogisticFinancePlatformResponse:
        """
        Description: 物流金融平台创建无车承运平台DIS
        Summary: 物流金融平台创建无车承运平台DIS
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateLogisticFinancePlatformResponse().from_map(
            await self.do_request_async('1.0', 'baas.logistic.finance.platform.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def create_logist_finance_agentplatform(
        self,
        request: blockchain_models.CreateLogistFinanceAgentplatformRequest,
    ) -> blockchain_models.CreateLogistFinanceAgentplatformResponse:
        """
        Description: 物流金融平台代理创建无车承运平台DIS
        Summary: 物流金融平台代理创建无车承运平台DIS
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.create_logist_finance_agentplatform_ex(request, headers, runtime)

    async def create_logist_finance_agentplatform_async(
        self,
        request: blockchain_models.CreateLogistFinanceAgentplatformRequest,
    ) -> blockchain_models.CreateLogistFinanceAgentplatformResponse:
        """
        Description: 物流金融平台代理创建无车承运平台DIS
        Summary: 物流金融平台代理创建无车承运平台DIS
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.create_logist_finance_agentplatform_ex_async(request, headers, runtime)

    def create_logist_finance_agentplatform_ex(
        self,
        request: blockchain_models.CreateLogistFinanceAgentplatformRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateLogistFinanceAgentplatformResponse:
        """
        Description: 物流金融平台代理创建无车承运平台DIS
        Summary: 物流金融平台代理创建无车承运平台DIS
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateLogistFinanceAgentplatformResponse().from_map(
            self.do_request('1.0', 'baas.logist.finance.agentplatform.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def create_logist_finance_agentplatform_ex_async(
        self,
        request: blockchain_models.CreateLogistFinanceAgentplatformRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateLogistFinanceAgentplatformResponse:
        """
        Description: 物流金融平台代理创建无车承运平台DIS
        Summary: 物流金融平台代理创建无车承运平台DIS
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateLogistFinanceAgentplatformResponse().from_map(
            await self.do_request_async('1.0', 'baas.logist.finance.agentplatform.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def create_logistic_finance_driver(
        self,
        request: blockchain_models.CreateLogisticFinanceDriverRequest,
    ) -> blockchain_models.CreateLogisticFinanceDriverResponse:
        """
        Description: 物流金融平台创建司机DIS
        Summary: 物流金融平台创建司机DIS
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.create_logistic_finance_driver_ex(request, headers, runtime)

    async def create_logistic_finance_driver_async(
        self,
        request: blockchain_models.CreateLogisticFinanceDriverRequest,
    ) -> blockchain_models.CreateLogisticFinanceDriverResponse:
        """
        Description: 物流金融平台创建司机DIS
        Summary: 物流金融平台创建司机DIS
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.create_logistic_finance_driver_ex_async(request, headers, runtime)

    def create_logistic_finance_driver_ex(
        self,
        request: blockchain_models.CreateLogisticFinanceDriverRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateLogisticFinanceDriverResponse:
        """
        Description: 物流金融平台创建司机DIS
        Summary: 物流金融平台创建司机DIS
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateLogisticFinanceDriverResponse().from_map(
            self.do_request('1.0', 'baas.logistic.finance.driver.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def create_logistic_finance_driver_ex_async(
        self,
        request: blockchain_models.CreateLogisticFinanceDriverRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateLogisticFinanceDriverResponse:
        """
        Description: 物流金融平台创建司机DIS
        Summary: 物流金融平台创建司机DIS
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateLogisticFinanceDriverResponse().from_map(
            await self.do_request_async('1.0', 'baas.logistic.finance.driver.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def create_logistic_finance_cargoorder(
        self,
        request: blockchain_models.CreateLogisticFinanceCargoorderRequest,
    ) -> blockchain_models.CreateLogisticFinanceCargoorderResponse:
        """
        Description: 物流金融平台创建货源订单
        Summary: 物流金融平台创建货源订单
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.create_logistic_finance_cargoorder_ex(request, headers, runtime)

    async def create_logistic_finance_cargoorder_async(
        self,
        request: blockchain_models.CreateLogisticFinanceCargoorderRequest,
    ) -> blockchain_models.CreateLogisticFinanceCargoorderResponse:
        """
        Description: 物流金融平台创建货源订单
        Summary: 物流金融平台创建货源订单
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.create_logistic_finance_cargoorder_ex_async(request, headers, runtime)

    def create_logistic_finance_cargoorder_ex(
        self,
        request: blockchain_models.CreateLogisticFinanceCargoorderRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateLogisticFinanceCargoorderResponse:
        """
        Description: 物流金融平台创建货源订单
        Summary: 物流金融平台创建货源订单
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateLogisticFinanceCargoorderResponse().from_map(
            self.do_request('1.0', 'baas.logistic.finance.cargoorder.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def create_logistic_finance_cargoorder_ex_async(
        self,
        request: blockchain_models.CreateLogisticFinanceCargoorderRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateLogisticFinanceCargoorderResponse:
        """
        Description: 物流金融平台创建货源订单
        Summary: 物流金融平台创建货源订单
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateLogisticFinanceCargoorderResponse().from_map(
            await self.do_request_async('1.0', 'baas.logistic.finance.cargoorder.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def create_logistic_finance_cargopayorder(
        self,
        request: blockchain_models.CreateLogisticFinanceCargopayorderRequest,
    ) -> blockchain_models.CreateLogisticFinanceCargopayorderResponse:
        """
        Description: 物流金融平台货源支付订单创建
        Summary: 物流金融平台货源支付订单创建
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.create_logistic_finance_cargopayorder_ex(request, headers, runtime)

    async def create_logistic_finance_cargopayorder_async(
        self,
        request: blockchain_models.CreateLogisticFinanceCargopayorderRequest,
    ) -> blockchain_models.CreateLogisticFinanceCargopayorderResponse:
        """
        Description: 物流金融平台货源支付订单创建
        Summary: 物流金融平台货源支付订单创建
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.create_logistic_finance_cargopayorder_ex_async(request, headers, runtime)

    def create_logistic_finance_cargopayorder_ex(
        self,
        request: blockchain_models.CreateLogisticFinanceCargopayorderRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateLogisticFinanceCargopayorderResponse:
        """
        Description: 物流金融平台货源支付订单创建
        Summary: 物流金融平台货源支付订单创建
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateLogisticFinanceCargopayorderResponse().from_map(
            self.do_request('1.0', 'baas.logistic.finance.cargopayorder.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def create_logistic_finance_cargopayorder_ex_async(
        self,
        request: blockchain_models.CreateLogisticFinanceCargopayorderRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateLogisticFinanceCargopayorderResponse:
        """
        Description: 物流金融平台货源支付订单创建
        Summary: 物流金融平台货源支付订单创建
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateLogisticFinanceCargopayorderResponse().from_map(
            await self.do_request_async('1.0', 'baas.logistic.finance.cargopayorder.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def create_ocp_product(
        self,
        request: blockchain_models.CreateOcpProductRequest,
    ) -> blockchain_models.CreateOcpProductResponse:
        """
        Description: 创建蚂蚁区块链实例
        Summary: 创建蚂蚁区块链实例
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.create_ocp_product_ex(request, headers, runtime)

    async def create_ocp_product_async(
        self,
        request: blockchain_models.CreateOcpProductRequest,
    ) -> blockchain_models.CreateOcpProductResponse:
        """
        Description: 创建蚂蚁区块链实例
        Summary: 创建蚂蚁区块链实例
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.create_ocp_product_ex_async(request, headers, runtime)

    def create_ocp_product_ex(
        self,
        request: blockchain_models.CreateOcpProductRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateOcpProductResponse:
        """
        Description: 创建蚂蚁区块链实例
        Summary: 创建蚂蚁区块链实例
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateOcpProductResponse().from_map(
            self.do_request('1.0', 'baas.ocp.product.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def create_ocp_product_ex_async(
        self,
        request: blockchain_models.CreateOcpProductRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateOcpProductResponse:
        """
        Description: 创建蚂蚁区块链实例
        Summary: 创建蚂蚁区块链实例
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateOcpProductResponse().from_map(
            await self.do_request_async('1.0', 'baas.ocp.product.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def update_ocp_product(
        self,
        request: blockchain_models.UpdateOcpProductRequest,
    ) -> blockchain_models.UpdateOcpProductResponse:
        """
        Description: 变配，对已有的实例进行规格变更操作。
        Summary: 对已有的实例进行规格变更操作
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.update_ocp_product_ex(request, headers, runtime)

    async def update_ocp_product_async(
        self,
        request: blockchain_models.UpdateOcpProductRequest,
    ) -> blockchain_models.UpdateOcpProductResponse:
        """
        Description: 变配，对已有的实例进行规格变更操作。
        Summary: 对已有的实例进行规格变更操作
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.update_ocp_product_ex_async(request, headers, runtime)

    def update_ocp_product_ex(
        self,
        request: blockchain_models.UpdateOcpProductRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.UpdateOcpProductResponse:
        """
        Description: 变配，对已有的实例进行规格变更操作。
        Summary: 对已有的实例进行规格变更操作
        """
        UtilClient.validate_model(request)
        return blockchain_models.UpdateOcpProductResponse().from_map(
            self.do_request('1.0', 'baas.ocp.product.update', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def update_ocp_product_ex_async(
        self,
        request: blockchain_models.UpdateOcpProductRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.UpdateOcpProductResponse:
        """
        Description: 变配，对已有的实例进行规格变更操作。
        Summary: 对已有的实例进行规格变更操作
        """
        UtilClient.validate_model(request)
        return blockchain_models.UpdateOcpProductResponse().from_map(
            await self.do_request_async('1.0', 'baas.ocp.product.update', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def close_ocp_product(
        self,
        request: blockchain_models.CloseOcpProductRequest,
    ) -> blockchain_models.CloseOcpProductResponse:
        """
        Description: 用户主动删除实例或欠费逾期平台按照约定进行强制删除。
        Summary: 释放资源
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.close_ocp_product_ex(request, headers, runtime)

    async def close_ocp_product_async(
        self,
        request: blockchain_models.CloseOcpProductRequest,
    ) -> blockchain_models.CloseOcpProductResponse:
        """
        Description: 用户主动删除实例或欠费逾期平台按照约定进行强制删除。
        Summary: 释放资源
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.close_ocp_product_ex_async(request, headers, runtime)

    def close_ocp_product_ex(
        self,
        request: blockchain_models.CloseOcpProductRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CloseOcpProductResponse:
        """
        Description: 用户主动删除实例或欠费逾期平台按照约定进行强制删除。
        Summary: 释放资源
        """
        UtilClient.validate_model(request)
        return blockchain_models.CloseOcpProductResponse().from_map(
            self.do_request('1.0', 'baas.ocp.product.close', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def close_ocp_product_ex_async(
        self,
        request: blockchain_models.CloseOcpProductRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CloseOcpProductResponse:
        """
        Description: 用户主动删除实例或欠费逾期平台按照约定进行强制删除。
        Summary: 释放资源
        """
        UtilClient.validate_model(request)
        return blockchain_models.CloseOcpProductResponse().from_map(
            await self.do_request_async('1.0', 'baas.ocp.product.close', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def enable_ocp_product(
        self,
        request: blockchain_models.EnableOcpProductRequest,
    ) -> blockchain_models.EnableOcpProductResponse:
        """
        Description: 用户对欠费或者到期实例进行续费操作后，平台会通知产品解除对用户指定实例的操作限制。即恢复正常服务能力。
        Summary: 恢复资源
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.enable_ocp_product_ex(request, headers, runtime)

    async def enable_ocp_product_async(
        self,
        request: blockchain_models.EnableOcpProductRequest,
    ) -> blockchain_models.EnableOcpProductResponse:
        """
        Description: 用户对欠费或者到期实例进行续费操作后，平台会通知产品解除对用户指定实例的操作限制。即恢复正常服务能力。
        Summary: 恢复资源
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.enable_ocp_product_ex_async(request, headers, runtime)

    def enable_ocp_product_ex(
        self,
        request: blockchain_models.EnableOcpProductRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.EnableOcpProductResponse:
        """
        Description: 用户对欠费或者到期实例进行续费操作后，平台会通知产品解除对用户指定实例的操作限制。即恢复正常服务能力。
        Summary: 恢复资源
        """
        UtilClient.validate_model(request)
        return blockchain_models.EnableOcpProductResponse().from_map(
            self.do_request('1.0', 'baas.ocp.product.enable', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def enable_ocp_product_ex_async(
        self,
        request: blockchain_models.EnableOcpProductRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.EnableOcpProductResponse:
        """
        Description: 用户对欠费或者到期实例进行续费操作后，平台会通知产品解除对用户指定实例的操作限制。即恢复正常服务能力。
        Summary: 恢复资源
        """
        UtilClient.validate_model(request)
        return blockchain_models.EnableOcpProductResponse().from_map(
            await self.do_request_async('1.0', 'baas.ocp.product.enable', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def stop_ocp_product(
        self,
        request: blockchain_models.StopOcpProductRequest,
    ) -> blockchain_models.StopOcpProductResponse:
        """
        Description: 用户资源到期或欠费情况下会对资源先进行停服操作，用于限制用户使用但不能删除用户数据！不同的产品可以根据自身的功能进行不同的限制。
        Summary: 停止服务
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.stop_ocp_product_ex(request, headers, runtime)

    async def stop_ocp_product_async(
        self,
        request: blockchain_models.StopOcpProductRequest,
    ) -> blockchain_models.StopOcpProductResponse:
        """
        Description: 用户资源到期或欠费情况下会对资源先进行停服操作，用于限制用户使用但不能删除用户数据！不同的产品可以根据自身的功能进行不同的限制。
        Summary: 停止服务
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.stop_ocp_product_ex_async(request, headers, runtime)

    def stop_ocp_product_ex(
        self,
        request: blockchain_models.StopOcpProductRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StopOcpProductResponse:
        """
        Description: 用户资源到期或欠费情况下会对资源先进行停服操作，用于限制用户使用但不能删除用户数据！不同的产品可以根据自身的功能进行不同的限制。
        Summary: 停止服务
        """
        UtilClient.validate_model(request)
        return blockchain_models.StopOcpProductResponse().from_map(
            self.do_request('1.0', 'baas.ocp.product.stop', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def stop_ocp_product_ex_async(
        self,
        request: blockchain_models.StopOcpProductRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StopOcpProductResponse:
        """
        Description: 用户资源到期或欠费情况下会对资源先进行停服操作，用于限制用户使用但不能删除用户数据！不同的产品可以根据自身的功能进行不同的限制。
        Summary: 停止服务
        """
        UtilClient.validate_model(request)
        return blockchain_models.StopOcpProductResponse().from_map(
            await self.do_request_async('1.0', 'baas.ocp.product.stop', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def init_ocp_product(
        self,
        request: blockchain_models.InitOcpProductRequest,
    ) -> blockchain_models.InitOcpProductResponse:
        """
        Description: 售卖页面加载产品个性化内容，比如：类目、库存等，用于辅助用户选择。用户下单后参数会下发给产品方
        Summary: 加载售卖页自定义参数
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.init_ocp_product_ex(request, headers, runtime)

    async def init_ocp_product_async(
        self,
        request: blockchain_models.InitOcpProductRequest,
    ) -> blockchain_models.InitOcpProductResponse:
        """
        Description: 售卖页面加载产品个性化内容，比如：类目、库存等，用于辅助用户选择。用户下单后参数会下发给产品方
        Summary: 加载售卖页自定义参数
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.init_ocp_product_ex_async(request, headers, runtime)

    def init_ocp_product_ex(
        self,
        request: blockchain_models.InitOcpProductRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.InitOcpProductResponse:
        """
        Description: 售卖页面加载产品个性化内容，比如：类目、库存等，用于辅助用户选择。用户下单后参数会下发给产品方
        Summary: 加载售卖页自定义参数
        """
        UtilClient.validate_model(request)
        return blockchain_models.InitOcpProductResponse().from_map(
            self.do_request('1.0', 'baas.ocp.product.init', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def init_ocp_product_ex_async(
        self,
        request: blockchain_models.InitOcpProductRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.InitOcpProductResponse:
        """
        Description: 售卖页面加载产品个性化内容，比如：类目、库存等，用于辅助用户选择。用户下单后参数会下发给产品方
        Summary: 加载售卖页自定义参数
        """
        UtilClient.validate_model(request)
        return blockchain_models.InitOcpProductResponse().from_map(
            await self.do_request_async('1.0', 'baas.ocp.product.init', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_ocp_product(
        self,
        request: blockchain_models.QueryOcpProductRequest,
    ) -> blockchain_models.QueryOcpProductResponse:
        """
        Description: 查询商业化产品的状态
        Summary: 查询商业化产品的状态
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_ocp_product_ex(request, headers, runtime)

    async def query_ocp_product_async(
        self,
        request: blockchain_models.QueryOcpProductRequest,
    ) -> blockchain_models.QueryOcpProductResponse:
        """
        Description: 查询商业化产品的状态
        Summary: 查询商业化产品的状态
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_ocp_product_ex_async(request, headers, runtime)

    def query_ocp_product_ex(
        self,
        request: blockchain_models.QueryOcpProductRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryOcpProductResponse:
        """
        Description: 查询商业化产品的状态
        Summary: 查询商业化产品的状态
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryOcpProductResponse().from_map(
            self.do_request('1.0', 'baas.ocp.product.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_ocp_product_ex_async(
        self,
        request: blockchain_models.QueryOcpProductRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryOcpProductResponse:
        """
        Description: 查询商业化产品的状态
        Summary: 查询商业化产品的状态
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryOcpProductResponse().from_map(
            await self.do_request_async('1.0', 'baas.ocp.product.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def open_ocp_product(
        self,
        request: blockchain_models.OpenOcpProductRequest,
    ) -> blockchain_models.OpenOcpProductResponse:
        """
        Description: 开通商业化服务
        Summary: 开通商业化服务
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.open_ocp_product_ex(request, headers, runtime)

    async def open_ocp_product_async(
        self,
        request: blockchain_models.OpenOcpProductRequest,
    ) -> blockchain_models.OpenOcpProductResponse:
        """
        Description: 开通商业化服务
        Summary: 开通商业化服务
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.open_ocp_product_ex_async(request, headers, runtime)

    def open_ocp_product_ex(
        self,
        request: blockchain_models.OpenOcpProductRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.OpenOcpProductResponse:
        """
        Description: 开通商业化服务
        Summary: 开通商业化服务
        """
        UtilClient.validate_model(request)
        return blockchain_models.OpenOcpProductResponse().from_map(
            self.do_request('1.0', 'baas.ocp.product.open', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def open_ocp_product_ex_async(
        self,
        request: blockchain_models.OpenOcpProductRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.OpenOcpProductResponse:
        """
        Description: 开通商业化服务
        Summary: 开通商业化服务
        """
        UtilClient.validate_model(request)
        return blockchain_models.OpenOcpProductResponse().from_map(
            await self.do_request_async('1.0', 'baas.ocp.product.open', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def create_ocp_products(
        self,
        request: blockchain_models.CreateOcpProductsRequest,
    ) -> blockchain_models.CreateOcpProductsResponse:
        """
        Description: 创建商业化产品实例
        Summary: 创建商业化产品实例
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.create_ocp_products_ex(request, headers, runtime)

    async def create_ocp_products_async(
        self,
        request: blockchain_models.CreateOcpProductsRequest,
    ) -> blockchain_models.CreateOcpProductsResponse:
        """
        Description: 创建商业化产品实例
        Summary: 创建商业化产品实例
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.create_ocp_products_ex_async(request, headers, runtime)

    def create_ocp_products_ex(
        self,
        request: blockchain_models.CreateOcpProductsRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateOcpProductsResponse:
        """
        Description: 创建商业化产品实例
        Summary: 创建商业化产品实例
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateOcpProductsResponse().from_map(
            self.do_request('1.0', 'baas.ocp.products.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def create_ocp_products_ex_async(
        self,
        request: blockchain_models.CreateOcpProductsRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateOcpProductsResponse:
        """
        Description: 创建商业化产品实例
        Summary: 创建商业化产品实例
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateOcpProductsResponse().from_map(
            await self.do_request_async('1.0', 'baas.ocp.products.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def callback_ocp_product(
        self,
        request: blockchain_models.CallbackOcpProductRequest,
    ) -> blockchain_models.CallbackOcpProductResponse:
        """
        Description: 回调接口，产品侧主动通知ocp，产品状态变更。
        Summary: 主动通知ocp，产品状态变更
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.callback_ocp_product_ex(request, headers, runtime)

    async def callback_ocp_product_async(
        self,
        request: blockchain_models.CallbackOcpProductRequest,
    ) -> blockchain_models.CallbackOcpProductResponse:
        """
        Description: 回调接口，产品侧主动通知ocp，产品状态变更。
        Summary: 主动通知ocp，产品状态变更
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.callback_ocp_product_ex_async(request, headers, runtime)

    def callback_ocp_product_ex(
        self,
        request: blockchain_models.CallbackOcpProductRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CallbackOcpProductResponse:
        """
        Description: 回调接口，产品侧主动通知ocp，产品状态变更。
        Summary: 主动通知ocp，产品状态变更
        """
        UtilClient.validate_model(request)
        return blockchain_models.CallbackOcpProductResponse().from_map(
            self.do_request('1.0', 'baas.ocp.product.callback', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def callback_ocp_product_ex_async(
        self,
        request: blockchain_models.CallbackOcpProductRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CallbackOcpProductResponse:
        """
        Description: 回调接口，产品侧主动通知ocp，产品状态变更。
        Summary: 主动通知ocp，产品状态变更
        """
        UtilClient.validate_model(request)
        return blockchain_models.CallbackOcpProductResponse().from_map(
            await self.do_request_async('1.0', 'baas.ocp.product.callback', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def check_ocp_task(
        self,
        request: blockchain_models.CheckOcpTaskRequest,
    ) -> blockchain_models.CheckOcpTaskResponse:
        """
        Description: 检查任务状态
        Summary: 检查任务状态
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.check_ocp_task_ex(request, headers, runtime)

    async def check_ocp_task_async(
        self,
        request: blockchain_models.CheckOcpTaskRequest,
    ) -> blockchain_models.CheckOcpTaskResponse:
        """
        Description: 检查任务状态
        Summary: 检查任务状态
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.check_ocp_task_ex_async(request, headers, runtime)

    def check_ocp_task_ex(
        self,
        request: blockchain_models.CheckOcpTaskRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CheckOcpTaskResponse:
        """
        Description: 检查任务状态
        Summary: 检查任务状态
        """
        UtilClient.validate_model(request)
        return blockchain_models.CheckOcpTaskResponse().from_map(
            self.do_request('1.0', 'baas.ocp.task.check', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def check_ocp_task_ex_async(
        self,
        request: blockchain_models.CheckOcpTaskRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CheckOcpTaskResponse:
        """
        Description: 检查任务状态
        Summary: 检查任务状态
        """
        UtilClient.validate_model(request)
        return blockchain_models.CheckOcpTaskResponse().from_map(
            await self.do_request_async('1.0', 'baas.ocp.task.check', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def exec_ocp_task(
        self,
        request: blockchain_models.ExecOcpTaskRequest,
    ) -> blockchain_models.ExecOcpTaskResponse:
        """
        Description: 商业化产品相关任务下发
        Summary: 任务下发
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.exec_ocp_task_ex(request, headers, runtime)

    async def exec_ocp_task_async(
        self,
        request: blockchain_models.ExecOcpTaskRequest,
    ) -> blockchain_models.ExecOcpTaskResponse:
        """
        Description: 商业化产品相关任务下发
        Summary: 任务下发
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.exec_ocp_task_ex_async(request, headers, runtime)

    def exec_ocp_task_ex(
        self,
        request: blockchain_models.ExecOcpTaskRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.ExecOcpTaskResponse:
        """
        Description: 商业化产品相关任务下发
        Summary: 任务下发
        """
        UtilClient.validate_model(request)
        return blockchain_models.ExecOcpTaskResponse().from_map(
            self.do_request('1.0', 'baas.ocp.task.exec', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def exec_ocp_task_ex_async(
        self,
        request: blockchain_models.ExecOcpTaskRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.ExecOcpTaskResponse:
        """
        Description: 商业化产品相关任务下发
        Summary: 任务下发
        """
        UtilClient.validate_model(request)
        return blockchain_models.ExecOcpTaskResponse().from_map(
            await self.do_request_async('1.0', 'baas.ocp.task.exec', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def create_blockchain_instance_inner(
        self,
        request: blockchain_models.CreateBlockchainInstanceInnerRequest,
    ) -> blockchain_models.CreateBlockchainInstanceInnerResponse:
        """
        Description: 区块链实例创建（内部）
        Summary: 区块链创建（内部）
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.create_blockchain_instance_inner_ex(request, headers, runtime)

    async def create_blockchain_instance_inner_async(
        self,
        request: blockchain_models.CreateBlockchainInstanceInnerRequest,
    ) -> blockchain_models.CreateBlockchainInstanceInnerResponse:
        """
        Description: 区块链实例创建（内部）
        Summary: 区块链创建（内部）
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.create_blockchain_instance_inner_ex_async(request, headers, runtime)

    def create_blockchain_instance_inner_ex(
        self,
        request: blockchain_models.CreateBlockchainInstanceInnerRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateBlockchainInstanceInnerResponse:
        """
        Description: 区块链实例创建（内部）
        Summary: 区块链创建（内部）
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateBlockchainInstanceInnerResponse().from_map(
            self.do_request('1.0', 'baas.blockchain.instance.inner.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def create_blockchain_instance_inner_ex_async(
        self,
        request: blockchain_models.CreateBlockchainInstanceInnerRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateBlockchainInstanceInnerResponse:
        """
        Description: 区块链实例创建（内部）
        Summary: 区块链创建（内部）
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateBlockchainInstanceInnerResponse().from_map(
            await self.do_request_async('1.0', 'baas.blockchain.instance.inner.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_blockchain_instance_bizid(
        self,
        request: blockchain_models.QueryBlockchainInstanceBizidRequest,
    ) -> blockchain_models.QueryBlockchainInstanceBizidResponse:
        """
        Description: 蚂蚁区块链通过实例查询链id
        Summary: 蚂蚁区块链通过实例查询链id
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_blockchain_instance_bizid_ex(request, headers, runtime)

    async def query_blockchain_instance_bizid_async(
        self,
        request: blockchain_models.QueryBlockchainInstanceBizidRequest,
    ) -> blockchain_models.QueryBlockchainInstanceBizidResponse:
        """
        Description: 蚂蚁区块链通过实例查询链id
        Summary: 蚂蚁区块链通过实例查询链id
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_blockchain_instance_bizid_ex_async(request, headers, runtime)

    def query_blockchain_instance_bizid_ex(
        self,
        request: blockchain_models.QueryBlockchainInstanceBizidRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryBlockchainInstanceBizidResponse:
        """
        Description: 蚂蚁区块链通过实例查询链id
        Summary: 蚂蚁区块链通过实例查询链id
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryBlockchainInstanceBizidResponse().from_map(
            self.do_request('1.0', 'baas.blockchain.instance.bizid.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_blockchain_instance_bizid_ex_async(
        self,
        request: blockchain_models.QueryBlockchainInstanceBizidRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryBlockchainInstanceBizidResponse:
        """
        Description: 蚂蚁区块链通过实例查询链id
        Summary: 蚂蚁区块链通过实例查询链id
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryBlockchainInstanceBizidResponse().from_map(
            await self.do_request_async('1.0', 'baas.blockchain.instance.bizid.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def create_api_consortium(
        self,
        request: blockchain_models.CreateApiConsortiumRequest,
    ) -> blockchain_models.CreateApiConsortiumResponse:
        """
        Description: 创建联盟接口
        Summary: 创建联盟接口
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.create_api_consortium_ex(request, headers, runtime)

    async def create_api_consortium_async(
        self,
        request: blockchain_models.CreateApiConsortiumRequest,
    ) -> blockchain_models.CreateApiConsortiumResponse:
        """
        Description: 创建联盟接口
        Summary: 创建联盟接口
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.create_api_consortium_ex_async(request, headers, runtime)

    def create_api_consortium_ex(
        self,
        request: blockchain_models.CreateApiConsortiumRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateApiConsortiumResponse:
        """
        Description: 创建联盟接口
        Summary: 创建联盟接口
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateApiConsortiumResponse().from_map(
            self.do_request('1.0', 'baas.api.consortium.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def create_api_consortium_ex_async(
        self,
        request: blockchain_models.CreateApiConsortiumRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateApiConsortiumResponse:
        """
        Description: 创建联盟接口
        Summary: 创建联盟接口
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateApiConsortiumResponse().from_map(
            await self.do_request_async('1.0', 'baas.api.consortium.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_api_miniappbrowser_authtype(
        self,
        request: blockchain_models.QueryApiMiniappbrowserAuthtypeRequest,
    ) -> blockchain_models.QueryApiMiniappbrowserAuthtypeResponse:
        """
        Description: 查询链的小程序浏览器授权状态
        Summary: 查询链的小程序浏览器授权状态
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_api_miniappbrowser_authtype_ex(request, headers, runtime)

    async def query_api_miniappbrowser_authtype_async(
        self,
        request: blockchain_models.QueryApiMiniappbrowserAuthtypeRequest,
    ) -> blockchain_models.QueryApiMiniappbrowserAuthtypeResponse:
        """
        Description: 查询链的小程序浏览器授权状态
        Summary: 查询链的小程序浏览器授权状态
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_api_miniappbrowser_authtype_ex_async(request, headers, runtime)

    def query_api_miniappbrowser_authtype_ex(
        self,
        request: blockchain_models.QueryApiMiniappbrowserAuthtypeRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryApiMiniappbrowserAuthtypeResponse:
        """
        Description: 查询链的小程序浏览器授权状态
        Summary: 查询链的小程序浏览器授权状态
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryApiMiniappbrowserAuthtypeResponse().from_map(
            self.do_request('1.0', 'baas.api.miniappbrowser.authtype.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_api_miniappbrowser_authtype_ex_async(
        self,
        request: blockchain_models.QueryApiMiniappbrowserAuthtypeRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryApiMiniappbrowserAuthtypeResponse:
        """
        Description: 查询链的小程序浏览器授权状态
        Summary: 查询链的小程序浏览器授权状态
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryApiMiniappbrowserAuthtypeResponse().from_map(
            await self.do_request_async('1.0', 'baas.api.miniappbrowser.authtype.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_statistics_port_height(
        self,
        request: blockchain_models.QueryStatisticsPortHeightRequest,
    ) -> blockchain_models.QueryStatisticsPortHeightResponse:
        """
        Description: 查询某链当前块高
        Summary: 查询某链当前块高
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_statistics_port_height_ex(request, headers, runtime)

    async def query_statistics_port_height_async(
        self,
        request: blockchain_models.QueryStatisticsPortHeightRequest,
    ) -> blockchain_models.QueryStatisticsPortHeightResponse:
        """
        Description: 查询某链当前块高
        Summary: 查询某链当前块高
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_statistics_port_height_ex_async(request, headers, runtime)

    def query_statistics_port_height_ex(
        self,
        request: blockchain_models.QueryStatisticsPortHeightRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryStatisticsPortHeightResponse:
        """
        Description: 查询某链当前块高
        Summary: 查询某链当前块高
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryStatisticsPortHeightResponse().from_map(
            self.do_request('1.0', 'baas.statistics.port.height.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_statistics_port_height_ex_async(
        self,
        request: blockchain_models.QueryStatisticsPortHeightRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryStatisticsPortHeightResponse:
        """
        Description: 查询某链当前块高
        Summary: 查询某链当前块高
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryStatisticsPortHeightResponse().from_map(
            await self.do_request_async('1.0', 'baas.statistics.port.height.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_statistic_port_bizid(
        self,
        request: blockchain_models.QueryStatisticPortBizidRequest,
    ) -> blockchain_models.QueryStatisticPortBizidResponse:
        """
        Description: 查询授权的链id列表
        Summary: 查询授权的链id列表
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_statistic_port_bizid_ex(request, headers, runtime)

    async def query_statistic_port_bizid_async(
        self,
        request: blockchain_models.QueryStatisticPortBizidRequest,
    ) -> blockchain_models.QueryStatisticPortBizidResponse:
        """
        Description: 查询授权的链id列表
        Summary: 查询授权的链id列表
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_statistic_port_bizid_ex_async(request, headers, runtime)

    def query_statistic_port_bizid_ex(
        self,
        request: blockchain_models.QueryStatisticPortBizidRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryStatisticPortBizidResponse:
        """
        Description: 查询授权的链id列表
        Summary: 查询授权的链id列表
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryStatisticPortBizidResponse().from_map(
            self.do_request('1.0', 'baas.statistic.port.bizid.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_statistic_port_bizid_ex_async(
        self,
        request: blockchain_models.QueryStatisticPortBizidRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryStatisticPortBizidResponse:
        """
        Description: 查询授权的链id列表
        Summary: 查询授权的链id列表
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryStatisticPortBizidResponse().from_map(
            await self.do_request_async('1.0', 'baas.statistic.port.bizid.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def add_statistics_port_task(
        self,
        request: blockchain_models.AddStatisticsPortTaskRequest,
    ) -> blockchain_models.AddStatisticsPortTaskResponse:
        """
        Description: 添加存量采集任务
        Summary: 添加存量采集任务
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.add_statistics_port_task_ex(request, headers, runtime)

    async def add_statistics_port_task_async(
        self,
        request: blockchain_models.AddStatisticsPortTaskRequest,
    ) -> blockchain_models.AddStatisticsPortTaskResponse:
        """
        Description: 添加存量采集任务
        Summary: 添加存量采集任务
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.add_statistics_port_task_ex_async(request, headers, runtime)

    def add_statistics_port_task_ex(
        self,
        request: blockchain_models.AddStatisticsPortTaskRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.AddStatisticsPortTaskResponse:
        """
        Description: 添加存量采集任务
        Summary: 添加存量采集任务
        """
        UtilClient.validate_model(request)
        return blockchain_models.AddStatisticsPortTaskResponse().from_map(
            self.do_request('1.0', 'baas.statistics.port.task.add', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def add_statistics_port_task_ex_async(
        self,
        request: blockchain_models.AddStatisticsPortTaskRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.AddStatisticsPortTaskResponse:
        """
        Description: 添加存量采集任务
        Summary: 添加存量采集任务
        """
        UtilClient.validate_model(request)
        return blockchain_models.AddStatisticsPortTaskResponse().from_map(
            await self.do_request_async('1.0', 'baas.statistics.port.task.add', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_api_dwh_transaction(
        self,
        request: blockchain_models.QueryApiDwhTransactionRequest,
    ) -> blockchain_models.QueryApiDwhTransactionResponse:
        """
        Description: 查询交易列表
        Summary: 查询交易列表
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_api_dwh_transaction_ex(request, headers, runtime)

    async def query_api_dwh_transaction_async(
        self,
        request: blockchain_models.QueryApiDwhTransactionRequest,
    ) -> blockchain_models.QueryApiDwhTransactionResponse:
        """
        Description: 查询交易列表
        Summary: 查询交易列表
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_api_dwh_transaction_ex_async(request, headers, runtime)

    def query_api_dwh_transaction_ex(
        self,
        request: blockchain_models.QueryApiDwhTransactionRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryApiDwhTransactionResponse:
        """
        Description: 查询交易列表
        Summary: 查询交易列表
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryApiDwhTransactionResponse().from_map(
            self.do_request('1.0', 'baas.api.dwh.transaction.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_api_dwh_transaction_ex_async(
        self,
        request: blockchain_models.QueryApiDwhTransactionRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryApiDwhTransactionResponse:
        """
        Description: 查询交易列表
        Summary: 查询交易列表
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryApiDwhTransactionResponse().from_map(
            await self.do_request_async('1.0', 'baas.api.dwh.transaction.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_api_dwh_account(
        self,
        request: blockchain_models.QueryApiDwhAccountRequest,
    ) -> blockchain_models.QueryApiDwhAccountResponse:
        """
        Description: 根据自定义条件查询用户列表
        Summary: 查询账户列表
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_api_dwh_account_ex(request, headers, runtime)

    async def query_api_dwh_account_async(
        self,
        request: blockchain_models.QueryApiDwhAccountRequest,
    ) -> blockchain_models.QueryApiDwhAccountResponse:
        """
        Description: 根据自定义条件查询用户列表
        Summary: 查询账户列表
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_api_dwh_account_ex_async(request, headers, runtime)

    def query_api_dwh_account_ex(
        self,
        request: blockchain_models.QueryApiDwhAccountRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryApiDwhAccountResponse:
        """
        Description: 根据自定义条件查询用户列表
        Summary: 查询账户列表
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryApiDwhAccountResponse().from_map(
            self.do_request('1.0', 'baas.api.dwh.account.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_api_dwh_account_ex_async(
        self,
        request: blockchain_models.QueryApiDwhAccountRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryApiDwhAccountResponse:
        """
        Description: 根据自定义条件查询用户列表
        Summary: 查询账户列表
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryApiDwhAccountResponse().from_map(
            await self.do_request_async('1.0', 'baas.api.dwh.account.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_api_dwh_contract(
        self,
        request: blockchain_models.QueryApiDwhContractRequest,
    ) -> blockchain_models.QueryApiDwhContractResponse:
        """
        Description: 查询合约接口
        Summary: 查询合约
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_api_dwh_contract_ex(request, headers, runtime)

    async def query_api_dwh_contract_async(
        self,
        request: blockchain_models.QueryApiDwhContractRequest,
    ) -> blockchain_models.QueryApiDwhContractResponse:
        """
        Description: 查询合约接口
        Summary: 查询合约
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_api_dwh_contract_ex_async(request, headers, runtime)

    def query_api_dwh_contract_ex(
        self,
        request: blockchain_models.QueryApiDwhContractRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryApiDwhContractResponse:
        """
        Description: 查询合约接口
        Summary: 查询合约
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryApiDwhContractResponse().from_map(
            self.do_request('1.0', 'baas.api.dwh.contract.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_api_dwh_contract_ex_async(
        self,
        request: blockchain_models.QueryApiDwhContractRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryApiDwhContractResponse:
        """
        Description: 查询合约接口
        Summary: 查询合约
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryApiDwhContractResponse().from_map(
            await self.do_request_async('1.0', 'baas.api.dwh.contract.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_api_dwhb_transaction(
        self,
        request: blockchain_models.QueryApiDwhbTransactionRequest,
    ) -> blockchain_models.QueryApiDwhbTransactionResponse:
        """
        Description: 单独查询交易
        Summary: 查询链上交易
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_api_dwhb_transaction_ex(request, headers, runtime)

    async def query_api_dwhb_transaction_async(
        self,
        request: blockchain_models.QueryApiDwhbTransactionRequest,
    ) -> blockchain_models.QueryApiDwhbTransactionResponse:
        """
        Description: 单独查询交易
        Summary: 查询链上交易
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_api_dwhb_transaction_ex_async(request, headers, runtime)

    def query_api_dwhb_transaction_ex(
        self,
        request: blockchain_models.QueryApiDwhbTransactionRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryApiDwhbTransactionResponse:
        """
        Description: 单独查询交易
        Summary: 查询链上交易
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryApiDwhbTransactionResponse().from_map(
            self.do_request('1.0', 'baas.api.dwhb.transaction.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_api_dwhb_transaction_ex_async(
        self,
        request: blockchain_models.QueryApiDwhbTransactionRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryApiDwhbTransactionResponse:
        """
        Description: 单独查询交易
        Summary: 查询链上交易
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryApiDwhbTransactionResponse().from_map(
            await self.do_request_async('1.0', 'baas.api.dwhb.transaction.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def create_contract_record(
        self,
        request: blockchain_models.CreateContractRecordRequest,
    ) -> blockchain_models.CreateContractRecordResponse:
        """
        Description: 合约部署记录
        Summary: 合约部署记录
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.create_contract_record_ex(request, headers, runtime)

    async def create_contract_record_async(
        self,
        request: blockchain_models.CreateContractRecordRequest,
    ) -> blockchain_models.CreateContractRecordResponse:
        """
        Description: 合约部署记录
        Summary: 合约部署记录
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.create_contract_record_ex_async(request, headers, runtime)

    def create_contract_record_ex(
        self,
        request: blockchain_models.CreateContractRecordRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateContractRecordResponse:
        """
        Description: 合约部署记录
        Summary: 合约部署记录
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateContractRecordResponse().from_map(
            self.do_request('1.0', 'baas.contract.record.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def create_contract_record_ex_async(
        self,
        request: blockchain_models.CreateContractRecordRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateContractRecordResponse:
        """
        Description: 合约部署记录
        Summary: 合约部署记录
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateContractRecordResponse().from_map(
            await self.do_request_async('1.0', 'baas.contract.record.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def get_contract_record(
        self,
        request: blockchain_models.GetContractRecordRequest,
    ) -> blockchain_models.GetContractRecordResponse:
        """
        Description: 部署记录详情
        Summary: 部署记录详情
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.get_contract_record_ex(request, headers, runtime)

    async def get_contract_record_async(
        self,
        request: blockchain_models.GetContractRecordRequest,
    ) -> blockchain_models.GetContractRecordResponse:
        """
        Description: 部署记录详情
        Summary: 部署记录详情
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.get_contract_record_ex_async(request, headers, runtime)

    def get_contract_record_ex(
        self,
        request: blockchain_models.GetContractRecordRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.GetContractRecordResponse:
        """
        Description: 部署记录详情
        Summary: 部署记录详情
        """
        UtilClient.validate_model(request)
        return blockchain_models.GetContractRecordResponse().from_map(
            self.do_request('1.0', 'baas.contract.record.get', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def get_contract_record_ex_async(
        self,
        request: blockchain_models.GetContractRecordRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.GetContractRecordResponse:
        """
        Description: 部署记录详情
        Summary: 部署记录详情
        """
        UtilClient.validate_model(request)
        return blockchain_models.GetContractRecordResponse().from_map(
            await self.do_request_async('1.0', 'baas.contract.record.get', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def update_contract_record(
        self,
        request: blockchain_models.UpdateContractRecordRequest,
    ) -> blockchain_models.UpdateContractRecordResponse:
        """
        Description: 合约升级更新
        Summary: 合约升级更新
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.update_contract_record_ex(request, headers, runtime)

    async def update_contract_record_async(
        self,
        request: blockchain_models.UpdateContractRecordRequest,
    ) -> blockchain_models.UpdateContractRecordResponse:
        """
        Description: 合约升级更新
        Summary: 合约升级更新
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.update_contract_record_ex_async(request, headers, runtime)

    def update_contract_record_ex(
        self,
        request: blockchain_models.UpdateContractRecordRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.UpdateContractRecordResponse:
        """
        Description: 合约升级更新
        Summary: 合约升级更新
        """
        UtilClient.validate_model(request)
        return blockchain_models.UpdateContractRecordResponse().from_map(
            self.do_request('1.0', 'baas.contract.record.update', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def update_contract_record_ex_async(
        self,
        request: blockchain_models.UpdateContractRecordRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.UpdateContractRecordResponse:
        """
        Description: 合约升级更新
        Summary: 合约升级更新
        """
        UtilClient.validate_model(request)
        return blockchain_models.UpdateContractRecordResponse().from_map(
            await self.do_request_async('1.0', 'baas.contract.record.update', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def online_contract_record(
        self,
        request: blockchain_models.OnlineContractRecordRequest,
    ) -> blockchain_models.OnlineContractRecordResponse:
        """
        Description: 发布合约服务
        Summary: 发布合约服务
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.online_contract_record_ex(request, headers, runtime)

    async def online_contract_record_async(
        self,
        request: blockchain_models.OnlineContractRecordRequest,
    ) -> blockchain_models.OnlineContractRecordResponse:
        """
        Description: 发布合约服务
        Summary: 发布合约服务
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.online_contract_record_ex_async(request, headers, runtime)

    def online_contract_record_ex(
        self,
        request: blockchain_models.OnlineContractRecordRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.OnlineContractRecordResponse:
        """
        Description: 发布合约服务
        Summary: 发布合约服务
        """
        UtilClient.validate_model(request)
        return blockchain_models.OnlineContractRecordResponse().from_map(
            self.do_request('1.0', 'baas.contract.record.online', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def online_contract_record_ex_async(
        self,
        request: blockchain_models.OnlineContractRecordRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.OnlineContractRecordResponse:
        """
        Description: 发布合约服务
        Summary: 发布合约服务
        """
        UtilClient.validate_model(request)
        return blockchain_models.OnlineContractRecordResponse().from_map(
            await self.do_request_async('1.0', 'baas.contract.record.online', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def offline_contract_record(
        self,
        request: blockchain_models.OfflineContractRecordRequest,
    ) -> blockchain_models.OfflineContractRecordResponse:
        """
        Description: 合约服务下线
        Summary: 合约服务下线
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.offline_contract_record_ex(request, headers, runtime)

    async def offline_contract_record_async(
        self,
        request: blockchain_models.OfflineContractRecordRequest,
    ) -> blockchain_models.OfflineContractRecordResponse:
        """
        Description: 合约服务下线
        Summary: 合约服务下线
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.offline_contract_record_ex_async(request, headers, runtime)

    def offline_contract_record_ex(
        self,
        request: blockchain_models.OfflineContractRecordRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.OfflineContractRecordResponse:
        """
        Description: 合约服务下线
        Summary: 合约服务下线
        """
        UtilClient.validate_model(request)
        return blockchain_models.OfflineContractRecordResponse().from_map(
            self.do_request('1.0', 'baas.contract.record.offline', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def offline_contract_record_ex_async(
        self,
        request: blockchain_models.OfflineContractRecordRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.OfflineContractRecordResponse:
        """
        Description: 合约服务下线
        Summary: 合约服务下线
        """
        UtilClient.validate_model(request)
        return blockchain_models.OfflineContractRecordResponse().from_map(
            await self.do_request_async('1.0', 'baas.contract.record.offline', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_contract_record(
        self,
        request: blockchain_models.QueryContractRecordRequest,
    ) -> blockchain_models.QueryContractRecordResponse:
        """
        Description: 查询合约部署记录
        Summary: 查询合约部署记录
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_contract_record_ex(request, headers, runtime)

    async def query_contract_record_async(
        self,
        request: blockchain_models.QueryContractRecordRequest,
    ) -> blockchain_models.QueryContractRecordResponse:
        """
        Description: 查询合约部署记录
        Summary: 查询合约部署记录
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_contract_record_ex_async(request, headers, runtime)

    def query_contract_record_ex(
        self,
        request: blockchain_models.QueryContractRecordRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryContractRecordResponse:
        """
        Description: 查询合约部署记录
        Summary: 查询合约部署记录
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryContractRecordResponse().from_map(
            self.do_request('1.0', 'baas.contract.record.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_contract_record_ex_async(
        self,
        request: blockchain_models.QueryContractRecordRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryContractRecordResponse:
        """
        Description: 查询合约部署记录
        Summary: 查询合约部署记录
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryContractRecordResponse().from_map(
            await self.do_request_async('1.0', 'baas.contract.record.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def exec_contract_delegate(
        self,
        request: blockchain_models.ExecContractDelegateRequest,
    ) -> blockchain_models.ExecContractDelegateResponse:
        """
        Description: 合约代理调用
        Summary: 合约代理调用
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.exec_contract_delegate_ex(request, headers, runtime)

    async def exec_contract_delegate_async(
        self,
        request: blockchain_models.ExecContractDelegateRequest,
    ) -> blockchain_models.ExecContractDelegateResponse:
        """
        Description: 合约代理调用
        Summary: 合约代理调用
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.exec_contract_delegate_ex_async(request, headers, runtime)

    def exec_contract_delegate_ex(
        self,
        request: blockchain_models.ExecContractDelegateRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.ExecContractDelegateResponse:
        """
        Description: 合约代理调用
        Summary: 合约代理调用
        """
        UtilClient.validate_model(request)
        return blockchain_models.ExecContractDelegateResponse().from_map(
            self.do_request('1.0', 'baas.contract.delegate.exec', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def exec_contract_delegate_ex_async(
        self,
        request: blockchain_models.ExecContractDelegateRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.ExecContractDelegateResponse:
        """
        Description: 合约代理调用
        Summary: 合约代理调用
        """
        UtilClient.validate_model(request)
        return blockchain_models.ExecContractDelegateResponse().from_map(
            await self.do_request_async('1.0', 'baas.contract.delegate.exec', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def exec_contract_service(
        self,
        request: blockchain_models.ExecContractServiceRequest,
    ) -> blockchain_models.ExecContractServiceResponse:
        """
        Description: 调用合约服务
        Summary: 调用合约服务
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.exec_contract_service_ex(request, headers, runtime)

    async def exec_contract_service_async(
        self,
        request: blockchain_models.ExecContractServiceRequest,
    ) -> blockchain_models.ExecContractServiceResponse:
        """
        Description: 调用合约服务
        Summary: 调用合约服务
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.exec_contract_service_ex_async(request, headers, runtime)

    def exec_contract_service_ex(
        self,
        request: blockchain_models.ExecContractServiceRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.ExecContractServiceResponse:
        """
        Description: 调用合约服务
        Summary: 调用合约服务
        """
        UtilClient.validate_model(request)
        return blockchain_models.ExecContractServiceResponse().from_map(
            self.do_request('1.0', 'baas.contract.service.exec', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def exec_contract_service_ex_async(
        self,
        request: blockchain_models.ExecContractServiceRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.ExecContractServiceResponse:
        """
        Description: 调用合约服务
        Summary: 调用合约服务
        """
        UtilClient.validate_model(request)
        return blockchain_models.ExecContractServiceResponse().from_map(
            await self.do_request_async('1.0', 'baas.contract.service.exec', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def get_contract_config_chain(
        self,
        request: blockchain_models.GetContractConfigChainRequest,
    ) -> blockchain_models.GetContractConfigChainResponse:
        """
        Description: 获取当前租户具有访问权限的合约链配置列表，方便在client（IDE插件、SDK等）访问合约链
        Summary: 获取合约链配置
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.get_contract_config_chain_ex(request, headers, runtime)

    async def get_contract_config_chain_async(
        self,
        request: blockchain_models.GetContractConfigChainRequest,
    ) -> blockchain_models.GetContractConfigChainResponse:
        """
        Description: 获取当前租户具有访问权限的合约链配置列表，方便在client（IDE插件、SDK等）访问合约链
        Summary: 获取合约链配置
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.get_contract_config_chain_ex_async(request, headers, runtime)

    def get_contract_config_chain_ex(
        self,
        request: blockchain_models.GetContractConfigChainRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.GetContractConfigChainResponse:
        """
        Description: 获取当前租户具有访问权限的合约链配置列表，方便在client（IDE插件、SDK等）访问合约链
        Summary: 获取合约链配置
        """
        UtilClient.validate_model(request)
        return blockchain_models.GetContractConfigChainResponse().from_map(
            self.do_request('1.0', 'baas.contract.config.chain.get', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def get_contract_config_chain_ex_async(
        self,
        request: blockchain_models.GetContractConfigChainRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.GetContractConfigChainResponse:
        """
        Description: 获取当前租户具有访问权限的合约链配置列表，方便在client（IDE插件、SDK等）访问合约链
        Summary: 获取合约链配置
        """
        UtilClient.validate_model(request)
        return blockchain_models.GetContractConfigChainResponse().from_map(
            await self.do_request_async('1.0', 'baas.contract.config.chain.get', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def get_contract_abi_url(
        self,
        request: blockchain_models.GetContractAbiUrlRequest,
    ) -> blockchain_models.GetContractAbiUrlResponse:
        """
        Description: 申请获取一个可以上传文件到oss的url，此url可用时间默认为30秒
        Summary: 获取oss的可用url上传文件
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.get_contract_abi_url_ex(request, headers, runtime)

    async def get_contract_abi_url_async(
        self,
        request: blockchain_models.GetContractAbiUrlRequest,
    ) -> blockchain_models.GetContractAbiUrlResponse:
        """
        Description: 申请获取一个可以上传文件到oss的url，此url可用时间默认为30秒
        Summary: 获取oss的可用url上传文件
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.get_contract_abi_url_ex_async(request, headers, runtime)

    def get_contract_abi_url_ex(
        self,
        request: blockchain_models.GetContractAbiUrlRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.GetContractAbiUrlResponse:
        """
        Description: 申请获取一个可以上传文件到oss的url，此url可用时间默认为30秒
        Summary: 获取oss的可用url上传文件
        """
        UtilClient.validate_model(request)
        return blockchain_models.GetContractAbiUrlResponse().from_map(
            self.do_request('1.0', 'baas.contract.abi.url.get', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def get_contract_abi_url_ex_async(
        self,
        request: blockchain_models.GetContractAbiUrlRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.GetContractAbiUrlResponse:
        """
        Description: 申请获取一个可以上传文件到oss的url，此url可用时间默认为30秒
        Summary: 获取oss的可用url上传文件
        """
        UtilClient.validate_model(request)
        return blockchain_models.GetContractAbiUrlResponse().from_map(
            await self.do_request_async('1.0', 'baas.contract.abi.url.get', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def get_contract_bytecode_url(
        self,
        request: blockchain_models.GetContractBytecodeUrlRequest,
    ) -> blockchain_models.GetContractBytecodeUrlResponse:
        """
        Description: 申请获取一个可以上传bytecode文件到oss的url，此url可用时间默认为30秒
        Summary: 获取oss的可用url上传文件
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.get_contract_bytecode_url_ex(request, headers, runtime)

    async def get_contract_bytecode_url_async(
        self,
        request: blockchain_models.GetContractBytecodeUrlRequest,
    ) -> blockchain_models.GetContractBytecodeUrlResponse:
        """
        Description: 申请获取一个可以上传bytecode文件到oss的url，此url可用时间默认为30秒
        Summary: 获取oss的可用url上传文件
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.get_contract_bytecode_url_ex_async(request, headers, runtime)

    def get_contract_bytecode_url_ex(
        self,
        request: blockchain_models.GetContractBytecodeUrlRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.GetContractBytecodeUrlResponse:
        """
        Description: 申请获取一个可以上传bytecode文件到oss的url，此url可用时间默认为30秒
        Summary: 获取oss的可用url上传文件
        """
        UtilClient.validate_model(request)
        return blockchain_models.GetContractBytecodeUrlResponse().from_map(
            self.do_request('1.0', 'baas.contract.bytecode.url.get', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def get_contract_bytecode_url_ex_async(
        self,
        request: blockchain_models.GetContractBytecodeUrlRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.GetContractBytecodeUrlResponse:
        """
        Description: 申请获取一个可以上传bytecode文件到oss的url，此url可用时间默认为30秒
        Summary: 获取oss的可用url上传文件
        """
        UtilClient.validate_model(request)
        return blockchain_models.GetContractBytecodeUrlResponse().from_map(
            await self.do_request_async('1.0', 'baas.contract.bytecode.url.get', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def create_dataauthorization_participant(
        self,
        request: blockchain_models.CreateDataauthorizationParticipantRequest,
    ) -> blockchain_models.CreateDataauthorizationParticipantResponse:
        """
        Description: 数据授权服务创建参与方
        Summary: 数据授权服务创建参与方
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.create_dataauthorization_participant_ex(request, headers, runtime)

    async def create_dataauthorization_participant_async(
        self,
        request: blockchain_models.CreateDataauthorizationParticipantRequest,
    ) -> blockchain_models.CreateDataauthorizationParticipantResponse:
        """
        Description: 数据授权服务创建参与方
        Summary: 数据授权服务创建参与方
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.create_dataauthorization_participant_ex_async(request, headers, runtime)

    def create_dataauthorization_participant_ex(
        self,
        request: blockchain_models.CreateDataauthorizationParticipantRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateDataauthorizationParticipantResponse:
        """
        Description: 数据授权服务创建参与方
        Summary: 数据授权服务创建参与方
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateDataauthorizationParticipantResponse().from_map(
            self.do_request('1.0', 'baas.dataauthorization.participant.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def create_dataauthorization_participant_ex_async(
        self,
        request: blockchain_models.CreateDataauthorizationParticipantRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateDataauthorizationParticipantResponse:
        """
        Description: 数据授权服务创建参与方
        Summary: 数据授权服务创建参与方
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateDataauthorizationParticipantResponse().from_map(
            await self.do_request_async('1.0', 'baas.dataauthorization.participant.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def delete_dataauthorization_participant(
        self,
        request: blockchain_models.DeleteDataauthorizationParticipantRequest,
    ) -> blockchain_models.DeleteDataauthorizationParticipantResponse:
        """
        Description: 数据授权服务删除参与方
        Summary: 数据授权服务删除参与方
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.delete_dataauthorization_participant_ex(request, headers, runtime)

    async def delete_dataauthorization_participant_async(
        self,
        request: blockchain_models.DeleteDataauthorizationParticipantRequest,
    ) -> blockchain_models.DeleteDataauthorizationParticipantResponse:
        """
        Description: 数据授权服务删除参与方
        Summary: 数据授权服务删除参与方
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.delete_dataauthorization_participant_ex_async(request, headers, runtime)

    def delete_dataauthorization_participant_ex(
        self,
        request: blockchain_models.DeleteDataauthorizationParticipantRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.DeleteDataauthorizationParticipantResponse:
        """
        Description: 数据授权服务删除参与方
        Summary: 数据授权服务删除参与方
        """
        UtilClient.validate_model(request)
        return blockchain_models.DeleteDataauthorizationParticipantResponse().from_map(
            self.do_request('1.0', 'baas.dataauthorization.participant.delete', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def delete_dataauthorization_participant_ex_async(
        self,
        request: blockchain_models.DeleteDataauthorizationParticipantRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.DeleteDataauthorizationParticipantResponse:
        """
        Description: 数据授权服务删除参与方
        Summary: 数据授权服务删除参与方
        """
        UtilClient.validate_model(request)
        return blockchain_models.DeleteDataauthorizationParticipantResponse().from_map(
            await self.do_request_async('1.0', 'baas.dataauthorization.participant.delete', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def update_dataauthorization_participant(
        self,
        request: blockchain_models.UpdateDataauthorizationParticipantRequest,
    ) -> blockchain_models.UpdateDataauthorizationParticipantResponse:
        """
        Description: 数据授权服务修改用户信息
        Summary: 数据授权服务修改用户信息
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.update_dataauthorization_participant_ex(request, headers, runtime)

    async def update_dataauthorization_participant_async(
        self,
        request: blockchain_models.UpdateDataauthorizationParticipantRequest,
    ) -> blockchain_models.UpdateDataauthorizationParticipantResponse:
        """
        Description: 数据授权服务修改用户信息
        Summary: 数据授权服务修改用户信息
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.update_dataauthorization_participant_ex_async(request, headers, runtime)

    def update_dataauthorization_participant_ex(
        self,
        request: blockchain_models.UpdateDataauthorizationParticipantRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.UpdateDataauthorizationParticipantResponse:
        """
        Description: 数据授权服务修改用户信息
        Summary: 数据授权服务修改用户信息
        """
        UtilClient.validate_model(request)
        return blockchain_models.UpdateDataauthorizationParticipantResponse().from_map(
            self.do_request('1.0', 'baas.dataauthorization.participant.update', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def update_dataauthorization_participant_ex_async(
        self,
        request: blockchain_models.UpdateDataauthorizationParticipantRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.UpdateDataauthorizationParticipantResponse:
        """
        Description: 数据授权服务修改用户信息
        Summary: 数据授权服务修改用户信息
        """
        UtilClient.validate_model(request)
        return blockchain_models.UpdateDataauthorizationParticipantResponse().from_map(
            await self.do_request_async('1.0', 'baas.dataauthorization.participant.update', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_dataauthorization_participant(
        self,
        request: blockchain_models.QueryDataauthorizationParticipantRequest,
    ) -> blockchain_models.QueryDataauthorizationParticipantResponse:
        """
        Description: 数据授权服务查询参与方信息
        Summary: 数据授权服务查询参与方信息
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_dataauthorization_participant_ex(request, headers, runtime)

    async def query_dataauthorization_participant_async(
        self,
        request: blockchain_models.QueryDataauthorizationParticipantRequest,
    ) -> blockchain_models.QueryDataauthorizationParticipantResponse:
        """
        Description: 数据授权服务查询参与方信息
        Summary: 数据授权服务查询参与方信息
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_dataauthorization_participant_ex_async(request, headers, runtime)

    def query_dataauthorization_participant_ex(
        self,
        request: blockchain_models.QueryDataauthorizationParticipantRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryDataauthorizationParticipantResponse:
        """
        Description: 数据授权服务查询参与方信息
        Summary: 数据授权服务查询参与方信息
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryDataauthorizationParticipantResponse().from_map(
            self.do_request('1.0', 'baas.dataauthorization.participant.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_dataauthorization_participant_ex_async(
        self,
        request: blockchain_models.QueryDataauthorizationParticipantRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryDataauthorizationParticipantResponse:
        """
        Description: 数据授权服务查询参与方信息
        Summary: 数据授权服务查询参与方信息
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryDataauthorizationParticipantResponse().from_map(
            await self.do_request_async('1.0', 'baas.dataauthorization.participant.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def list_dataauthorization_participant(
        self,
        request: blockchain_models.ListDataauthorizationParticipantRequest,
    ) -> blockchain_models.ListDataauthorizationParticipantResponse:
        """
        Description: 数据授权服务根据角色获取用户列表
        Summary: 数据授权服务根据角色获取用户列表
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.list_dataauthorization_participant_ex(request, headers, runtime)

    async def list_dataauthorization_participant_async(
        self,
        request: blockchain_models.ListDataauthorizationParticipantRequest,
    ) -> blockchain_models.ListDataauthorizationParticipantResponse:
        """
        Description: 数据授权服务根据角色获取用户列表
        Summary: 数据授权服务根据角色获取用户列表
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.list_dataauthorization_participant_ex_async(request, headers, runtime)

    def list_dataauthorization_participant_ex(
        self,
        request: blockchain_models.ListDataauthorizationParticipantRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.ListDataauthorizationParticipantResponse:
        """
        Description: 数据授权服务根据角色获取用户列表
        Summary: 数据授权服务根据角色获取用户列表
        """
        UtilClient.validate_model(request)
        return blockchain_models.ListDataauthorizationParticipantResponse().from_map(
            self.do_request('1.0', 'baas.dataauthorization.participant.list', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def list_dataauthorization_participant_ex_async(
        self,
        request: blockchain_models.ListDataauthorizationParticipantRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.ListDataauthorizationParticipantResponse:
        """
        Description: 数据授权服务根据角色获取用户列表
        Summary: 数据授权服务根据角色获取用户列表
        """
        UtilClient.validate_model(request)
        return blockchain_models.ListDataauthorizationParticipantResponse().from_map(
            await self.do_request_async('1.0', 'baas.dataauthorization.participant.list', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def create_dataauthorization_data_entity(
        self,
        request: blockchain_models.CreateDataauthorizationDataEntityRequest,
    ) -> blockchain_models.CreateDataauthorizationDataEntityResponse:
        """
        Description: 数据授权服务创建数据目录
        Summary: 数据授权服务创建数据目录
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.create_dataauthorization_data_entity_ex(request, headers, runtime)

    async def create_dataauthorization_data_entity_async(
        self,
        request: blockchain_models.CreateDataauthorizationDataEntityRequest,
    ) -> blockchain_models.CreateDataauthorizationDataEntityResponse:
        """
        Description: 数据授权服务创建数据目录
        Summary: 数据授权服务创建数据目录
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.create_dataauthorization_data_entity_ex_async(request, headers, runtime)

    def create_dataauthorization_data_entity_ex(
        self,
        request: blockchain_models.CreateDataauthorizationDataEntityRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateDataauthorizationDataEntityResponse:
        """
        Description: 数据授权服务创建数据目录
        Summary: 数据授权服务创建数据目录
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateDataauthorizationDataEntityResponse().from_map(
            self.do_request('1.0', 'baas.dataauthorization.data.entity.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def create_dataauthorization_data_entity_ex_async(
        self,
        request: blockchain_models.CreateDataauthorizationDataEntityRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateDataauthorizationDataEntityResponse:
        """
        Description: 数据授权服务创建数据目录
        Summary: 数据授权服务创建数据目录
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateDataauthorizationDataEntityResponse().from_map(
            await self.do_request_async('1.0', 'baas.dataauthorization.data.entity.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_dataauthorization_data_entity(
        self,
        request: blockchain_models.QueryDataauthorizationDataEntityRequest,
    ) -> blockchain_models.QueryDataauthorizationDataEntityResponse:
        """
        Description: 数据授权服务查询数据目录
        Summary: 数据授权服务查询数据目录
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_dataauthorization_data_entity_ex(request, headers, runtime)

    async def query_dataauthorization_data_entity_async(
        self,
        request: blockchain_models.QueryDataauthorizationDataEntityRequest,
    ) -> blockchain_models.QueryDataauthorizationDataEntityResponse:
        """
        Description: 数据授权服务查询数据目录
        Summary: 数据授权服务查询数据目录
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_dataauthorization_data_entity_ex_async(request, headers, runtime)

    def query_dataauthorization_data_entity_ex(
        self,
        request: blockchain_models.QueryDataauthorizationDataEntityRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryDataauthorizationDataEntityResponse:
        """
        Description: 数据授权服务查询数据目录
        Summary: 数据授权服务查询数据目录
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryDataauthorizationDataEntityResponse().from_map(
            self.do_request('1.0', 'baas.dataauthorization.data.entity.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_dataauthorization_data_entity_ex_async(
        self,
        request: blockchain_models.QueryDataauthorizationDataEntityRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryDataauthorizationDataEntityResponse:
        """
        Description: 数据授权服务查询数据目录
        Summary: 数据授权服务查询数据目录
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryDataauthorizationDataEntityResponse().from_map(
            await self.do_request_async('1.0', 'baas.dataauthorization.data.entity.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def update_dataauthorization_public_key(
        self,
        request: blockchain_models.UpdateDataauthorizationPublicKeyRequest,
    ) -> blockchain_models.UpdateDataauthorizationPublicKeyResponse:
        """
        Description: 数据授权服务公钥矩阵更新
        Summary: 数据授权服务公钥矩阵更新
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.update_dataauthorization_public_key_ex(request, headers, runtime)

    async def update_dataauthorization_public_key_async(
        self,
        request: blockchain_models.UpdateDataauthorizationPublicKeyRequest,
    ) -> blockchain_models.UpdateDataauthorizationPublicKeyResponse:
        """
        Description: 数据授权服务公钥矩阵更新
        Summary: 数据授权服务公钥矩阵更新
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.update_dataauthorization_public_key_ex_async(request, headers, runtime)

    def update_dataauthorization_public_key_ex(
        self,
        request: blockchain_models.UpdateDataauthorizationPublicKeyRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.UpdateDataauthorizationPublicKeyResponse:
        """
        Description: 数据授权服务公钥矩阵更新
        Summary: 数据授权服务公钥矩阵更新
        """
        UtilClient.validate_model(request)
        return blockchain_models.UpdateDataauthorizationPublicKeyResponse().from_map(
            self.do_request('1.0', 'baas.dataauthorization.public.key.update', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def update_dataauthorization_public_key_ex_async(
        self,
        request: blockchain_models.UpdateDataauthorizationPublicKeyRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.UpdateDataauthorizationPublicKeyResponse:
        """
        Description: 数据授权服务公钥矩阵更新
        Summary: 数据授权服务公钥矩阵更新
        """
        UtilClient.validate_model(request)
        return blockchain_models.UpdateDataauthorizationPublicKeyResponse().from_map(
            await self.do_request_async('1.0', 'baas.dataauthorization.public.key.update', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def list_dataauthorization_public_key(
        self,
        request: blockchain_models.ListDataauthorizationPublicKeyRequest,
    ) -> blockchain_models.ListDataauthorizationPublicKeyResponse:
        """
        Description: 数据授权服务公钥矩阵查询
        Summary: 数据授权服务公钥矩阵查询
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.list_dataauthorization_public_key_ex(request, headers, runtime)

    async def list_dataauthorization_public_key_async(
        self,
        request: blockchain_models.ListDataauthorizationPublicKeyRequest,
    ) -> blockchain_models.ListDataauthorizationPublicKeyResponse:
        """
        Description: 数据授权服务公钥矩阵查询
        Summary: 数据授权服务公钥矩阵查询
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.list_dataauthorization_public_key_ex_async(request, headers, runtime)

    def list_dataauthorization_public_key_ex(
        self,
        request: blockchain_models.ListDataauthorizationPublicKeyRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.ListDataauthorizationPublicKeyResponse:
        """
        Description: 数据授权服务公钥矩阵查询
        Summary: 数据授权服务公钥矩阵查询
        """
        UtilClient.validate_model(request)
        return blockchain_models.ListDataauthorizationPublicKeyResponse().from_map(
            self.do_request('1.0', 'baas.dataauthorization.public.key.list', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def list_dataauthorization_public_key_ex_async(
        self,
        request: blockchain_models.ListDataauthorizationPublicKeyRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.ListDataauthorizationPublicKeyResponse:
        """
        Description: 数据授权服务公钥矩阵查询
        Summary: 数据授权服务公钥矩阵查询
        """
        UtilClient.validate_model(request)
        return blockchain_models.ListDataauthorizationPublicKeyResponse().from_map(
            await self.do_request_async('1.0', 'baas.dataauthorization.public.key.list', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def open_dataauthorization_authorization_service(
        self,
        request: blockchain_models.OpenDataauthorizationAuthorizationServiceRequest,
    ) -> blockchain_models.OpenDataauthorizationAuthorizationServiceResponse:
        """
        Description: 数据授权服务开通服务
        Summary: 数据授权服务开通服务
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.open_dataauthorization_authorization_service_ex(request, headers, runtime)

    async def open_dataauthorization_authorization_service_async(
        self,
        request: blockchain_models.OpenDataauthorizationAuthorizationServiceRequest,
    ) -> blockchain_models.OpenDataauthorizationAuthorizationServiceResponse:
        """
        Description: 数据授权服务开通服务
        Summary: 数据授权服务开通服务
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.open_dataauthorization_authorization_service_ex_async(request, headers, runtime)

    def open_dataauthorization_authorization_service_ex(
        self,
        request: blockchain_models.OpenDataauthorizationAuthorizationServiceRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.OpenDataauthorizationAuthorizationServiceResponse:
        """
        Description: 数据授权服务开通服务
        Summary: 数据授权服务开通服务
        """
        UtilClient.validate_model(request)
        return blockchain_models.OpenDataauthorizationAuthorizationServiceResponse().from_map(
            self.do_request('1.0', 'baas.dataauthorization.authorization.service.open', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def open_dataauthorization_authorization_service_ex_async(
        self,
        request: blockchain_models.OpenDataauthorizationAuthorizationServiceRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.OpenDataauthorizationAuthorizationServiceResponse:
        """
        Description: 数据授权服务开通服务
        Summary: 数据授权服务开通服务
        """
        UtilClient.validate_model(request)
        return blockchain_models.OpenDataauthorizationAuthorizationServiceResponse().from_map(
            await self.do_request_async('1.0', 'baas.dataauthorization.authorization.service.open', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def close_dataauthorization_authorization_service(
        self,
        request: blockchain_models.CloseDataauthorizationAuthorizationServiceRequest,
    ) -> blockchain_models.CloseDataauthorizationAuthorizationServiceResponse:
        """
        Description: 数据授权服务关闭租户服务
        Summary: 数据授权服务关闭租户服务
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.close_dataauthorization_authorization_service_ex(request, headers, runtime)

    async def close_dataauthorization_authorization_service_async(
        self,
        request: blockchain_models.CloseDataauthorizationAuthorizationServiceRequest,
    ) -> blockchain_models.CloseDataauthorizationAuthorizationServiceResponse:
        """
        Description: 数据授权服务关闭租户服务
        Summary: 数据授权服务关闭租户服务
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.close_dataauthorization_authorization_service_ex_async(request, headers, runtime)

    def close_dataauthorization_authorization_service_ex(
        self,
        request: blockchain_models.CloseDataauthorizationAuthorizationServiceRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CloseDataauthorizationAuthorizationServiceResponse:
        """
        Description: 数据授权服务关闭租户服务
        Summary: 数据授权服务关闭租户服务
        """
        UtilClient.validate_model(request)
        return blockchain_models.CloseDataauthorizationAuthorizationServiceResponse().from_map(
            self.do_request('1.0', 'baas.dataauthorization.authorization.service.close', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def close_dataauthorization_authorization_service_ex_async(
        self,
        request: blockchain_models.CloseDataauthorizationAuthorizationServiceRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CloseDataauthorizationAuthorizationServiceResponse:
        """
        Description: 数据授权服务关闭租户服务
        Summary: 数据授权服务关闭租户服务
        """
        UtilClient.validate_model(request)
        return blockchain_models.CloseDataauthorizationAuthorizationServiceResponse().from_map(
            await self.do_request_async('1.0', 'baas.dataauthorization.authorization.service.close', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def apply_dataauthorization_authorization(
        self,
        request: blockchain_models.ApplyDataauthorizationAuthorizationRequest,
    ) -> blockchain_models.ApplyDataauthorizationAuthorizationResponse:
        """
        Description: 数据授权服务申请权限
        Summary: 数据授权服务申请权限
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.apply_dataauthorization_authorization_ex(request, headers, runtime)

    async def apply_dataauthorization_authorization_async(
        self,
        request: blockchain_models.ApplyDataauthorizationAuthorizationRequest,
    ) -> blockchain_models.ApplyDataauthorizationAuthorizationResponse:
        """
        Description: 数据授权服务申请权限
        Summary: 数据授权服务申请权限
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.apply_dataauthorization_authorization_ex_async(request, headers, runtime)

    def apply_dataauthorization_authorization_ex(
        self,
        request: blockchain_models.ApplyDataauthorizationAuthorizationRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.ApplyDataauthorizationAuthorizationResponse:
        """
        Description: 数据授权服务申请权限
        Summary: 数据授权服务申请权限
        """
        UtilClient.validate_model(request)
        return blockchain_models.ApplyDataauthorizationAuthorizationResponse().from_map(
            self.do_request('1.0', 'baas.dataauthorization.authorization.apply', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def apply_dataauthorization_authorization_ex_async(
        self,
        request: blockchain_models.ApplyDataauthorizationAuthorizationRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.ApplyDataauthorizationAuthorizationResponse:
        """
        Description: 数据授权服务申请权限
        Summary: 数据授权服务申请权限
        """
        UtilClient.validate_model(request)
        return blockchain_models.ApplyDataauthorizationAuthorizationResponse().from_map(
            await self.do_request_async('1.0', 'baas.dataauthorization.authorization.apply', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def exec_dataauthorization_process(
        self,
        request: blockchain_models.ExecDataauthorizationProcessRequest,
    ) -> blockchain_models.ExecDataauthorizationProcessResponse:
        """
        Description: 数据授权服务流程步骤处理
        Summary: 数据授权服务流程步骤处理
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.exec_dataauthorization_process_ex(request, headers, runtime)

    async def exec_dataauthorization_process_async(
        self,
        request: blockchain_models.ExecDataauthorizationProcessRequest,
    ) -> blockchain_models.ExecDataauthorizationProcessResponse:
        """
        Description: 数据授权服务流程步骤处理
        Summary: 数据授权服务流程步骤处理
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.exec_dataauthorization_process_ex_async(request, headers, runtime)

    def exec_dataauthorization_process_ex(
        self,
        request: blockchain_models.ExecDataauthorizationProcessRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.ExecDataauthorizationProcessResponse:
        """
        Description: 数据授权服务流程步骤处理
        Summary: 数据授权服务流程步骤处理
        """
        UtilClient.validate_model(request)
        return blockchain_models.ExecDataauthorizationProcessResponse().from_map(
            self.do_request('1.0', 'baas.dataauthorization.process.exec', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def exec_dataauthorization_process_ex_async(
        self,
        request: blockchain_models.ExecDataauthorizationProcessRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.ExecDataauthorizationProcessResponse:
        """
        Description: 数据授权服务流程步骤处理
        Summary: 数据授权服务流程步骤处理
        """
        UtilClient.validate_model(request)
        return blockchain_models.ExecDataauthorizationProcessResponse().from_map(
            await self.do_request_async('1.0', 'baas.dataauthorization.process.exec', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def cancel_dataauthorization_authorization(
        self,
        request: blockchain_models.CancelDataauthorizationAuthorizationRequest,
    ) -> blockchain_models.CancelDataauthorizationAuthorizationResponse:
        """
        Description: 数据授权服务取消授权
        Summary: 数据授权服务取消授权
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.cancel_dataauthorization_authorization_ex(request, headers, runtime)

    async def cancel_dataauthorization_authorization_async(
        self,
        request: blockchain_models.CancelDataauthorizationAuthorizationRequest,
    ) -> blockchain_models.CancelDataauthorizationAuthorizationResponse:
        """
        Description: 数据授权服务取消授权
        Summary: 数据授权服务取消授权
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.cancel_dataauthorization_authorization_ex_async(request, headers, runtime)

    def cancel_dataauthorization_authorization_ex(
        self,
        request: blockchain_models.CancelDataauthorizationAuthorizationRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CancelDataauthorizationAuthorizationResponse:
        """
        Description: 数据授权服务取消授权
        Summary: 数据授权服务取消授权
        """
        UtilClient.validate_model(request)
        return blockchain_models.CancelDataauthorizationAuthorizationResponse().from_map(
            self.do_request('1.0', 'baas.dataauthorization.authorization.cancel', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def cancel_dataauthorization_authorization_ex_async(
        self,
        request: blockchain_models.CancelDataauthorizationAuthorizationRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CancelDataauthorizationAuthorizationResponse:
        """
        Description: 数据授权服务取消授权
        Summary: 数据授权服务取消授权
        """
        UtilClient.validate_model(request)
        return blockchain_models.CancelDataauthorizationAuthorizationResponse().from_map(
            await self.do_request_async('1.0', 'baas.dataauthorization.authorization.cancel', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def check_dataauthorization_authorization(
        self,
        request: blockchain_models.CheckDataauthorizationAuthorizationRequest,
    ) -> blockchain_models.CheckDataauthorizationAuthorizationResponse:
        """
        Description: 数据授权服务权限校验
        Summary: 数据授权服务权限校验
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.check_dataauthorization_authorization_ex(request, headers, runtime)

    async def check_dataauthorization_authorization_async(
        self,
        request: blockchain_models.CheckDataauthorizationAuthorizationRequest,
    ) -> blockchain_models.CheckDataauthorizationAuthorizationResponse:
        """
        Description: 数据授权服务权限校验
        Summary: 数据授权服务权限校验
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.check_dataauthorization_authorization_ex_async(request, headers, runtime)

    def check_dataauthorization_authorization_ex(
        self,
        request: blockchain_models.CheckDataauthorizationAuthorizationRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CheckDataauthorizationAuthorizationResponse:
        """
        Description: 数据授权服务权限校验
        Summary: 数据授权服务权限校验
        """
        UtilClient.validate_model(request)
        return blockchain_models.CheckDataauthorizationAuthorizationResponse().from_map(
            self.do_request('1.0', 'baas.dataauthorization.authorization.check', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def check_dataauthorization_authorization_ex_async(
        self,
        request: blockchain_models.CheckDataauthorizationAuthorizationRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CheckDataauthorizationAuthorizationResponse:
        """
        Description: 数据授权服务权限校验
        Summary: 数据授权服务权限校验
        """
        UtilClient.validate_model(request)
        return blockchain_models.CheckDataauthorizationAuthorizationResponse().from_map(
            await self.do_request_async('1.0', 'baas.dataauthorization.authorization.check', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_dataauthorization_process(
        self,
        request: blockchain_models.QueryDataauthorizationProcessRequest,
    ) -> blockchain_models.QueryDataauthorizationProcessResponse:
        """
        Description: 数据授权服务流程信息查询
        Summary: 数据授权服务流程信息查询
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_dataauthorization_process_ex(request, headers, runtime)

    async def query_dataauthorization_process_async(
        self,
        request: blockchain_models.QueryDataauthorizationProcessRequest,
    ) -> blockchain_models.QueryDataauthorizationProcessResponse:
        """
        Description: 数据授权服务流程信息查询
        Summary: 数据授权服务流程信息查询
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_dataauthorization_process_ex_async(request, headers, runtime)

    def query_dataauthorization_process_ex(
        self,
        request: blockchain_models.QueryDataauthorizationProcessRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryDataauthorizationProcessResponse:
        """
        Description: 数据授权服务流程信息查询
        Summary: 数据授权服务流程信息查询
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryDataauthorizationProcessResponse().from_map(
            self.do_request('1.0', 'baas.dataauthorization.process.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_dataauthorization_process_ex_async(
        self,
        request: blockchain_models.QueryDataauthorizationProcessRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryDataauthorizationProcessResponse:
        """
        Description: 数据授权服务流程信息查询
        Summary: 数据授权服务流程信息查询
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryDataauthorizationProcessResponse().from_map(
            await self.do_request_async('1.0', 'baas.dataauthorization.process.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def send_dataauthorization_deposit_data(
        self,
        request: blockchain_models.SendDataauthorizationDepositDataRequest,
    ) -> blockchain_models.SendDataauthorizationDepositDataResponse:
        """
        Description: 数据授权服务存证数据上链
        Summary: 数据授权服务存证数据上链
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.send_dataauthorization_deposit_data_ex(request, headers, runtime)

    async def send_dataauthorization_deposit_data_async(
        self,
        request: blockchain_models.SendDataauthorizationDepositDataRequest,
    ) -> blockchain_models.SendDataauthorizationDepositDataResponse:
        """
        Description: 数据授权服务存证数据上链
        Summary: 数据授权服务存证数据上链
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.send_dataauthorization_deposit_data_ex_async(request, headers, runtime)

    def send_dataauthorization_deposit_data_ex(
        self,
        request: blockchain_models.SendDataauthorizationDepositDataRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.SendDataauthorizationDepositDataResponse:
        """
        Description: 数据授权服务存证数据上链
        Summary: 数据授权服务存证数据上链
        """
        UtilClient.validate_model(request)
        return blockchain_models.SendDataauthorizationDepositDataResponse().from_map(
            self.do_request('1.0', 'baas.dataauthorization.deposit.data.send', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def send_dataauthorization_deposit_data_ex_async(
        self,
        request: blockchain_models.SendDataauthorizationDepositDataRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.SendDataauthorizationDepositDataResponse:
        """
        Description: 数据授权服务存证数据上链
        Summary: 数据授权服务存证数据上链
        """
        UtilClient.validate_model(request)
        return blockchain_models.SendDataauthorizationDepositDataResponse().from_map(
            await self.do_request_async('1.0', 'baas.dataauthorization.deposit.data.send', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_dataauthorization_deposit_data(
        self,
        request: blockchain_models.QueryDataauthorizationDepositDataRequest,
    ) -> blockchain_models.QueryDataauthorizationDepositDataResponse:
        """
        Description: 数据授权服务查询存证数据
        Summary: 数据授权服务查询存证数据
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_dataauthorization_deposit_data_ex(request, headers, runtime)

    async def query_dataauthorization_deposit_data_async(
        self,
        request: blockchain_models.QueryDataauthorizationDepositDataRequest,
    ) -> blockchain_models.QueryDataauthorizationDepositDataResponse:
        """
        Description: 数据授权服务查询存证数据
        Summary: 数据授权服务查询存证数据
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_dataauthorization_deposit_data_ex_async(request, headers, runtime)

    def query_dataauthorization_deposit_data_ex(
        self,
        request: blockchain_models.QueryDataauthorizationDepositDataRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryDataauthorizationDepositDataResponse:
        """
        Description: 数据授权服务查询存证数据
        Summary: 数据授权服务查询存证数据
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryDataauthorizationDepositDataResponse().from_map(
            self.do_request('1.0', 'baas.dataauthorization.deposit.data.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_dataauthorization_deposit_data_ex_async(
        self,
        request: blockchain_models.QueryDataauthorizationDepositDataRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryDataauthorizationDepositDataResponse:
        """
        Description: 数据授权服务查询存证数据
        Summary: 数据授权服务查询存证数据
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryDataauthorizationDepositDataResponse().from_map(
            await self.do_request_async('1.0', 'baas.dataauthorization.deposit.data.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def resume_dataauthorization_authorization(
        self,
        request: blockchain_models.ResumeDataauthorizationAuthorizationRequest,
    ) -> blockchain_models.ResumeDataauthorizationAuthorizationResponse:
        """
        Description: 数据授权服务恢复权限
        Summary: 数据授权服务恢复权限
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.resume_dataauthorization_authorization_ex(request, headers, runtime)

    async def resume_dataauthorization_authorization_async(
        self,
        request: blockchain_models.ResumeDataauthorizationAuthorizationRequest,
    ) -> blockchain_models.ResumeDataauthorizationAuthorizationResponse:
        """
        Description: 数据授权服务恢复权限
        Summary: 数据授权服务恢复权限
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.resume_dataauthorization_authorization_ex_async(request, headers, runtime)

    def resume_dataauthorization_authorization_ex(
        self,
        request: blockchain_models.ResumeDataauthorizationAuthorizationRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.ResumeDataauthorizationAuthorizationResponse:
        """
        Description: 数据授权服务恢复权限
        Summary: 数据授权服务恢复权限
        """
        UtilClient.validate_model(request)
        return blockchain_models.ResumeDataauthorizationAuthorizationResponse().from_map(
            self.do_request('1.0', 'baas.dataauthorization.authorization.resume', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def resume_dataauthorization_authorization_ex_async(
        self,
        request: blockchain_models.ResumeDataauthorizationAuthorizationRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.ResumeDataauthorizationAuthorizationResponse:
        """
        Description: 数据授权服务恢复权限
        Summary: 数据授权服务恢复权限
        """
        UtilClient.validate_model(request)
        return blockchain_models.ResumeDataauthorizationAuthorizationResponse().from_map(
            await self.do_request_async('1.0', 'baas.dataauthorization.authorization.resume', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def update_dataauthorization_data_entity(
        self,
        request: blockchain_models.UpdateDataauthorizationDataEntityRequest,
    ) -> blockchain_models.UpdateDataauthorizationDataEntityResponse:
        """
        Description: 数据授权服务更新数据信息
        Summary: 数据授权服务更新数据信息
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.update_dataauthorization_data_entity_ex(request, headers, runtime)

    async def update_dataauthorization_data_entity_async(
        self,
        request: blockchain_models.UpdateDataauthorizationDataEntityRequest,
    ) -> blockchain_models.UpdateDataauthorizationDataEntityResponse:
        """
        Description: 数据授权服务更新数据信息
        Summary: 数据授权服务更新数据信息
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.update_dataauthorization_data_entity_ex_async(request, headers, runtime)

    def update_dataauthorization_data_entity_ex(
        self,
        request: blockchain_models.UpdateDataauthorizationDataEntityRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.UpdateDataauthorizationDataEntityResponse:
        """
        Description: 数据授权服务更新数据信息
        Summary: 数据授权服务更新数据信息
        """
        UtilClient.validate_model(request)
        return blockchain_models.UpdateDataauthorizationDataEntityResponse().from_map(
            self.do_request('1.0', 'baas.dataauthorization.data.entity.update', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def update_dataauthorization_data_entity_ex_async(
        self,
        request: blockchain_models.UpdateDataauthorizationDataEntityRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.UpdateDataauthorizationDataEntityResponse:
        """
        Description: 数据授权服务更新数据信息
        Summary: 数据授权服务更新数据信息
        """
        UtilClient.validate_model(request)
        return blockchain_models.UpdateDataauthorizationDataEntityResponse().from_map(
            await self.do_request_async('1.0', 'baas.dataauthorization.data.entity.update', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def delete_dataauthorization_data_entity(
        self,
        request: blockchain_models.DeleteDataauthorizationDataEntityRequest,
    ) -> blockchain_models.DeleteDataauthorizationDataEntityResponse:
        """
        Description: 数据授权服务删除数据对象
        Summary: 数据授权服务删除数据对象
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.delete_dataauthorization_data_entity_ex(request, headers, runtime)

    async def delete_dataauthorization_data_entity_async(
        self,
        request: blockchain_models.DeleteDataauthorizationDataEntityRequest,
    ) -> blockchain_models.DeleteDataauthorizationDataEntityResponse:
        """
        Description: 数据授权服务删除数据对象
        Summary: 数据授权服务删除数据对象
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.delete_dataauthorization_data_entity_ex_async(request, headers, runtime)

    def delete_dataauthorization_data_entity_ex(
        self,
        request: blockchain_models.DeleteDataauthorizationDataEntityRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.DeleteDataauthorizationDataEntityResponse:
        """
        Description: 数据授权服务删除数据对象
        Summary: 数据授权服务删除数据对象
        """
        UtilClient.validate_model(request)
        return blockchain_models.DeleteDataauthorizationDataEntityResponse().from_map(
            self.do_request('1.0', 'baas.dataauthorization.data.entity.delete', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def delete_dataauthorization_data_entity_ex_async(
        self,
        request: blockchain_models.DeleteDataauthorizationDataEntityRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.DeleteDataauthorizationDataEntityResponse:
        """
        Description: 数据授权服务删除数据对象
        Summary: 数据授权服务删除数据对象
        """
        UtilClient.validate_model(request)
        return blockchain_models.DeleteDataauthorizationDataEntityResponse().from_map(
            await self.do_request_async('1.0', 'baas.dataauthorization.data.entity.delete', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def create_dataauthorization_custom_participant(
        self,
        request: blockchain_models.CreateDataauthorizationCustomParticipantRequest,
    ) -> blockchain_models.CreateDataauthorizationCustomParticipantResponse:
        """
        Description: 数据授权服务创建自定义ID用户
        Summary: 数据授权服务创建自定义ID用户
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.create_dataauthorization_custom_participant_ex(request, headers, runtime)

    async def create_dataauthorization_custom_participant_async(
        self,
        request: blockchain_models.CreateDataauthorizationCustomParticipantRequest,
    ) -> blockchain_models.CreateDataauthorizationCustomParticipantResponse:
        """
        Description: 数据授权服务创建自定义ID用户
        Summary: 数据授权服务创建自定义ID用户
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.create_dataauthorization_custom_participant_ex_async(request, headers, runtime)

    def create_dataauthorization_custom_participant_ex(
        self,
        request: blockchain_models.CreateDataauthorizationCustomParticipantRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateDataauthorizationCustomParticipantResponse:
        """
        Description: 数据授权服务创建自定义ID用户
        Summary: 数据授权服务创建自定义ID用户
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateDataauthorizationCustomParticipantResponse().from_map(
            self.do_request('1.0', 'baas.dataauthorization.custom.participant.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def create_dataauthorization_custom_participant_ex_async(
        self,
        request: blockchain_models.CreateDataauthorizationCustomParticipantRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateDataauthorizationCustomParticipantResponse:
        """
        Description: 数据授权服务创建自定义ID用户
        Summary: 数据授权服务创建自定义ID用户
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateDataauthorizationCustomParticipantResponse().from_map(
            await self.do_request_async('1.0', 'baas.dataauthorization.custom.participant.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def create_dataauthorization_custom_data(
        self,
        request: blockchain_models.CreateDataauthorizationCustomDataRequest,
    ) -> blockchain_models.CreateDataauthorizationCustomDataResponse:
        """
        Description: 数据授权服务创建自定义ID数据对象
        Summary: 数据授权服务创建自定义ID数据对象
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.create_dataauthorization_custom_data_ex(request, headers, runtime)

    async def create_dataauthorization_custom_data_async(
        self,
        request: blockchain_models.CreateDataauthorizationCustomDataRequest,
    ) -> blockchain_models.CreateDataauthorizationCustomDataResponse:
        """
        Description: 数据授权服务创建自定义ID数据对象
        Summary: 数据授权服务创建自定义ID数据对象
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.create_dataauthorization_custom_data_ex_async(request, headers, runtime)

    def create_dataauthorization_custom_data_ex(
        self,
        request: blockchain_models.CreateDataauthorizationCustomDataRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateDataauthorizationCustomDataResponse:
        """
        Description: 数据授权服务创建自定义ID数据对象
        Summary: 数据授权服务创建自定义ID数据对象
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateDataauthorizationCustomDataResponse().from_map(
            self.do_request('1.0', 'baas.dataauthorization.custom.data.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def create_dataauthorization_custom_data_ex_async(
        self,
        request: blockchain_models.CreateDataauthorizationCustomDataRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateDataauthorizationCustomDataResponse:
        """
        Description: 数据授权服务创建自定义ID数据对象
        Summary: 数据授权服务创建自定义ID数据对象
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateDataauthorizationCustomDataResponse().from_map(
            await self.do_request_async('1.0', 'baas.dataauthorization.custom.data.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def apply_dataauthorization_authorization_withsignature(
        self,
        request: blockchain_models.ApplyDataauthorizationAuthorizationWithsignatureRequest,
    ) -> blockchain_models.ApplyDataauthorizationAuthorizationWithsignatureResponse:
        """
        Description: 数据授权服务申请权限
        Summary: 数据授权服务申请权限
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.apply_dataauthorization_authorization_withsignature_ex(request, headers, runtime)

    async def apply_dataauthorization_authorization_withsignature_async(
        self,
        request: blockchain_models.ApplyDataauthorizationAuthorizationWithsignatureRequest,
    ) -> blockchain_models.ApplyDataauthorizationAuthorizationWithsignatureResponse:
        """
        Description: 数据授权服务申请权限
        Summary: 数据授权服务申请权限
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.apply_dataauthorization_authorization_withsignature_ex_async(request, headers, runtime)

    def apply_dataauthorization_authorization_withsignature_ex(
        self,
        request: blockchain_models.ApplyDataauthorizationAuthorizationWithsignatureRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.ApplyDataauthorizationAuthorizationWithsignatureResponse:
        """
        Description: 数据授权服务申请权限
        Summary: 数据授权服务申请权限
        """
        UtilClient.validate_model(request)
        return blockchain_models.ApplyDataauthorizationAuthorizationWithsignatureResponse().from_map(
            self.do_request('1.0', 'baas.dataauthorization.authorization.withsignature.apply', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def apply_dataauthorization_authorization_withsignature_ex_async(
        self,
        request: blockchain_models.ApplyDataauthorizationAuthorizationWithsignatureRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.ApplyDataauthorizationAuthorizationWithsignatureResponse:
        """
        Description: 数据授权服务申请权限
        Summary: 数据授权服务申请权限
        """
        UtilClient.validate_model(request)
        return blockchain_models.ApplyDataauthorizationAuthorizationWithsignatureResponse().from_map(
            await self.do_request_async('1.0', 'baas.dataauthorization.authorization.withsignature.apply', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def exec_dataauthorization_process_withsignature(
        self,
        request: blockchain_models.ExecDataauthorizationProcessWithsignatureRequest,
    ) -> blockchain_models.ExecDataauthorizationProcessWithsignatureResponse:
        """
        Description: 数据授权服务流程步骤处理
        Summary: 数据授权服务流程步骤处理
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.exec_dataauthorization_process_withsignature_ex(request, headers, runtime)

    async def exec_dataauthorization_process_withsignature_async(
        self,
        request: blockchain_models.ExecDataauthorizationProcessWithsignatureRequest,
    ) -> blockchain_models.ExecDataauthorizationProcessWithsignatureResponse:
        """
        Description: 数据授权服务流程步骤处理
        Summary: 数据授权服务流程步骤处理
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.exec_dataauthorization_process_withsignature_ex_async(request, headers, runtime)

    def exec_dataauthorization_process_withsignature_ex(
        self,
        request: blockchain_models.ExecDataauthorizationProcessWithsignatureRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.ExecDataauthorizationProcessWithsignatureResponse:
        """
        Description: 数据授权服务流程步骤处理
        Summary: 数据授权服务流程步骤处理
        """
        UtilClient.validate_model(request)
        return blockchain_models.ExecDataauthorizationProcessWithsignatureResponse().from_map(
            self.do_request('1.0', 'baas.dataauthorization.process.withsignature.exec', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def exec_dataauthorization_process_withsignature_ex_async(
        self,
        request: blockchain_models.ExecDataauthorizationProcessWithsignatureRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.ExecDataauthorizationProcessWithsignatureResponse:
        """
        Description: 数据授权服务流程步骤处理
        Summary: 数据授权服务流程步骤处理
        """
        UtilClient.validate_model(request)
        return blockchain_models.ExecDataauthorizationProcessWithsignatureResponse().from_map(
            await self.do_request_async('1.0', 'baas.dataauthorization.process.withsignature.exec', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def create_dataauthorization_data_model(
        self,
        request: blockchain_models.CreateDataauthorizationDataModelRequest,
    ) -> blockchain_models.CreateDataauthorizationDataModelResponse:
        """
        Description: 创建数据模型
        Summary: 创建数据模型
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.create_dataauthorization_data_model_ex(request, headers, runtime)

    async def create_dataauthorization_data_model_async(
        self,
        request: blockchain_models.CreateDataauthorizationDataModelRequest,
    ) -> blockchain_models.CreateDataauthorizationDataModelResponse:
        """
        Description: 创建数据模型
        Summary: 创建数据模型
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.create_dataauthorization_data_model_ex_async(request, headers, runtime)

    def create_dataauthorization_data_model_ex(
        self,
        request: blockchain_models.CreateDataauthorizationDataModelRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateDataauthorizationDataModelResponse:
        """
        Description: 创建数据模型
        Summary: 创建数据模型
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateDataauthorizationDataModelResponse().from_map(
            self.do_request('1.0', 'baas.dataauthorization.data.model.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def create_dataauthorization_data_model_ex_async(
        self,
        request: blockchain_models.CreateDataauthorizationDataModelRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateDataauthorizationDataModelResponse:
        """
        Description: 创建数据模型
        Summary: 创建数据模型
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateDataauthorizationDataModelResponse().from_map(
            await self.do_request_async('1.0', 'baas.dataauthorization.data.model.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def update_dataauthorization_data_model(
        self,
        request: blockchain_models.UpdateDataauthorizationDataModelRequest,
    ) -> blockchain_models.UpdateDataauthorizationDataModelResponse:
        """
        Description: 数据模型修改
        Summary: 数据模型修改
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.update_dataauthorization_data_model_ex(request, headers, runtime)

    async def update_dataauthorization_data_model_async(
        self,
        request: blockchain_models.UpdateDataauthorizationDataModelRequest,
    ) -> blockchain_models.UpdateDataauthorizationDataModelResponse:
        """
        Description: 数据模型修改
        Summary: 数据模型修改
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.update_dataauthorization_data_model_ex_async(request, headers, runtime)

    def update_dataauthorization_data_model_ex(
        self,
        request: blockchain_models.UpdateDataauthorizationDataModelRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.UpdateDataauthorizationDataModelResponse:
        """
        Description: 数据模型修改
        Summary: 数据模型修改
        """
        UtilClient.validate_model(request)
        return blockchain_models.UpdateDataauthorizationDataModelResponse().from_map(
            self.do_request('1.0', 'baas.dataauthorization.data.model.update', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def update_dataauthorization_data_model_ex_async(
        self,
        request: blockchain_models.UpdateDataauthorizationDataModelRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.UpdateDataauthorizationDataModelResponse:
        """
        Description: 数据模型修改
        Summary: 数据模型修改
        """
        UtilClient.validate_model(request)
        return blockchain_models.UpdateDataauthorizationDataModelResponse().from_map(
            await self.do_request_async('1.0', 'baas.dataauthorization.data.model.update', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def delete_dataauthorization_data_model(
        self,
        request: blockchain_models.DeleteDataauthorizationDataModelRequest,
    ) -> blockchain_models.DeleteDataauthorizationDataModelResponse:
        """
        Description: 删除数据模型
        Summary: 删除数据模型
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.delete_dataauthorization_data_model_ex(request, headers, runtime)

    async def delete_dataauthorization_data_model_async(
        self,
        request: blockchain_models.DeleteDataauthorizationDataModelRequest,
    ) -> blockchain_models.DeleteDataauthorizationDataModelResponse:
        """
        Description: 删除数据模型
        Summary: 删除数据模型
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.delete_dataauthorization_data_model_ex_async(request, headers, runtime)

    def delete_dataauthorization_data_model_ex(
        self,
        request: blockchain_models.DeleteDataauthorizationDataModelRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.DeleteDataauthorizationDataModelResponse:
        """
        Description: 删除数据模型
        Summary: 删除数据模型
        """
        UtilClient.validate_model(request)
        return blockchain_models.DeleteDataauthorizationDataModelResponse().from_map(
            self.do_request('1.0', 'baas.dataauthorization.data.model.delete', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def delete_dataauthorization_data_model_ex_async(
        self,
        request: blockchain_models.DeleteDataauthorizationDataModelRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.DeleteDataauthorizationDataModelResponse:
        """
        Description: 删除数据模型
        Summary: 删除数据模型
        """
        UtilClient.validate_model(request)
        return blockchain_models.DeleteDataauthorizationDataModelResponse().from_map(
            await self.do_request_async('1.0', 'baas.dataauthorization.data.model.delete', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def list_dataauthorization_participant_page(
        self,
        request: blockchain_models.ListDataauthorizationParticipantPageRequest,
    ) -> blockchain_models.ListDataauthorizationParticipantPageResponse:
        """
        Description: 分页查询参与方列表
        Summary: 分页查询参与方列表
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.list_dataauthorization_participant_page_ex(request, headers, runtime)

    async def list_dataauthorization_participant_page_async(
        self,
        request: blockchain_models.ListDataauthorizationParticipantPageRequest,
    ) -> blockchain_models.ListDataauthorizationParticipantPageResponse:
        """
        Description: 分页查询参与方列表
        Summary: 分页查询参与方列表
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.list_dataauthorization_participant_page_ex_async(request, headers, runtime)

    def list_dataauthorization_participant_page_ex(
        self,
        request: blockchain_models.ListDataauthorizationParticipantPageRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.ListDataauthorizationParticipantPageResponse:
        """
        Description: 分页查询参与方列表
        Summary: 分页查询参与方列表
        """
        UtilClient.validate_model(request)
        return blockchain_models.ListDataauthorizationParticipantPageResponse().from_map(
            self.do_request('1.0', 'baas.dataauthorization.participant.page.list', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def list_dataauthorization_participant_page_ex_async(
        self,
        request: blockchain_models.ListDataauthorizationParticipantPageRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.ListDataauthorizationParticipantPageResponse:
        """
        Description: 分页查询参与方列表
        Summary: 分页查询参与方列表
        """
        UtilClient.validate_model(request)
        return blockchain_models.ListDataauthorizationParticipantPageResponse().from_map(
            await self.do_request_async('1.0', 'baas.dataauthorization.participant.page.list', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_dataauthorization_data_model(
        self,
        request: blockchain_models.QueryDataauthorizationDataModelRequest,
    ) -> blockchain_models.QueryDataauthorizationDataModelResponse:
        """
        Description: 查询数据模型
        Summary: 查询数据模型
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_dataauthorization_data_model_ex(request, headers, runtime)

    async def query_dataauthorization_data_model_async(
        self,
        request: blockchain_models.QueryDataauthorizationDataModelRequest,
    ) -> blockchain_models.QueryDataauthorizationDataModelResponse:
        """
        Description: 查询数据模型
        Summary: 查询数据模型
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_dataauthorization_data_model_ex_async(request, headers, runtime)

    def query_dataauthorization_data_model_ex(
        self,
        request: blockchain_models.QueryDataauthorizationDataModelRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryDataauthorizationDataModelResponse:
        """
        Description: 查询数据模型
        Summary: 查询数据模型
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryDataauthorizationDataModelResponse().from_map(
            self.do_request('1.0', 'baas.dataauthorization.data.model.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_dataauthorization_data_model_ex_async(
        self,
        request: blockchain_models.QueryDataauthorizationDataModelRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryDataauthorizationDataModelResponse:
        """
        Description: 查询数据模型
        Summary: 查询数据模型
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryDataauthorizationDataModelResponse().from_map(
            await self.do_request_async('1.0', 'baas.dataauthorization.data.model.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def list_dataauthorization_datamodel_page(
        self,
        request: blockchain_models.ListDataauthorizationDatamodelPageRequest,
    ) -> blockchain_models.ListDataauthorizationDatamodelPageResponse:
        """
        Description: 数据模型分页查询
        Summary: 数据模型分页查询
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.list_dataauthorization_datamodel_page_ex(request, headers, runtime)

    async def list_dataauthorization_datamodel_page_async(
        self,
        request: blockchain_models.ListDataauthorizationDatamodelPageRequest,
    ) -> blockchain_models.ListDataauthorizationDatamodelPageResponse:
        """
        Description: 数据模型分页查询
        Summary: 数据模型分页查询
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.list_dataauthorization_datamodel_page_ex_async(request, headers, runtime)

    def list_dataauthorization_datamodel_page_ex(
        self,
        request: blockchain_models.ListDataauthorizationDatamodelPageRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.ListDataauthorizationDatamodelPageResponse:
        """
        Description: 数据模型分页查询
        Summary: 数据模型分页查询
        """
        UtilClient.validate_model(request)
        return blockchain_models.ListDataauthorizationDatamodelPageResponse().from_map(
            self.do_request('1.0', 'baas.dataauthorization.datamodel.page.list', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def list_dataauthorization_datamodel_page_ex_async(
        self,
        request: blockchain_models.ListDataauthorizationDatamodelPageRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.ListDataauthorizationDatamodelPageResponse:
        """
        Description: 数据模型分页查询
        Summary: 数据模型分页查询
        """
        UtilClient.validate_model(request)
        return blockchain_models.ListDataauthorizationDatamodelPageResponse().from_map(
            await self.do_request_async('1.0', 'baas.dataauthorization.datamodel.page.list', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def list_dataauthorization_available_datamodel(
        self,
        request: blockchain_models.ListDataauthorizationAvailableDatamodelRequest,
    ) -> blockchain_models.ListDataauthorizationAvailableDatamodelResponse:
        """
        Description: 查询可注册的数据模型列表
        Summary: 查询可注册的数据模型列表
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.list_dataauthorization_available_datamodel_ex(request, headers, runtime)

    async def list_dataauthorization_available_datamodel_async(
        self,
        request: blockchain_models.ListDataauthorizationAvailableDatamodelRequest,
    ) -> blockchain_models.ListDataauthorizationAvailableDatamodelResponse:
        """
        Description: 查询可注册的数据模型列表
        Summary: 查询可注册的数据模型列表
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.list_dataauthorization_available_datamodel_ex_async(request, headers, runtime)

    def list_dataauthorization_available_datamodel_ex(
        self,
        request: blockchain_models.ListDataauthorizationAvailableDatamodelRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.ListDataauthorizationAvailableDatamodelResponse:
        """
        Description: 查询可注册的数据模型列表
        Summary: 查询可注册的数据模型列表
        """
        UtilClient.validate_model(request)
        return blockchain_models.ListDataauthorizationAvailableDatamodelResponse().from_map(
            self.do_request('1.0', 'baas.dataauthorization.available.datamodel.list', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def list_dataauthorization_available_datamodel_ex_async(
        self,
        request: blockchain_models.ListDataauthorizationAvailableDatamodelRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.ListDataauthorizationAvailableDatamodelResponse:
        """
        Description: 查询可注册的数据模型列表
        Summary: 查询可注册的数据模型列表
        """
        UtilClient.validate_model(request)
        return blockchain_models.ListDataauthorizationAvailableDatamodelResponse().from_map(
            await self.do_request_async('1.0', 'baas.dataauthorization.available.datamodel.list', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def list_dataauthorization_dataentity_page(
        self,
        request: blockchain_models.ListDataauthorizationDataentityPageRequest,
    ) -> blockchain_models.ListDataauthorizationDataentityPageResponse:
        """
        Description: 根据模型名称、授权状态分页查询。
        Summary: 数据注册情况查询
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.list_dataauthorization_dataentity_page_ex(request, headers, runtime)

    async def list_dataauthorization_dataentity_page_async(
        self,
        request: blockchain_models.ListDataauthorizationDataentityPageRequest,
    ) -> blockchain_models.ListDataauthorizationDataentityPageResponse:
        """
        Description: 根据模型名称、授权状态分页查询。
        Summary: 数据注册情况查询
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.list_dataauthorization_dataentity_page_ex_async(request, headers, runtime)

    def list_dataauthorization_dataentity_page_ex(
        self,
        request: blockchain_models.ListDataauthorizationDataentityPageRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.ListDataauthorizationDataentityPageResponse:
        """
        Description: 根据模型名称、授权状态分页查询。
        Summary: 数据注册情况查询
        """
        UtilClient.validate_model(request)
        return blockchain_models.ListDataauthorizationDataentityPageResponse().from_map(
            self.do_request('1.0', 'baas.dataauthorization.dataentity.page.list', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def list_dataauthorization_dataentity_page_ex_async(
        self,
        request: blockchain_models.ListDataauthorizationDataentityPageRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.ListDataauthorizationDataentityPageResponse:
        """
        Description: 根据模型名称、授权状态分页查询。
        Summary: 数据注册情况查询
        """
        UtilClient.validate_model(request)
        return blockchain_models.ListDataauthorizationDataentityPageResponse().from_map(
            await self.do_request_async('1.0', 'baas.dataauthorization.dataentity.page.list', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def create_dataauthorization_direct_authorization(
        self,
        request: blockchain_models.CreateDataauthorizationDirectAuthorizationRequest,
    ) -> blockchain_models.CreateDataauthorizationDirectAuthorizationResponse:
        """
        Description: 直接授权接口
        Summary: 直接授权接口
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.create_dataauthorization_direct_authorization_ex(request, headers, runtime)

    async def create_dataauthorization_direct_authorization_async(
        self,
        request: blockchain_models.CreateDataauthorizationDirectAuthorizationRequest,
    ) -> blockchain_models.CreateDataauthorizationDirectAuthorizationResponse:
        """
        Description: 直接授权接口
        Summary: 直接授权接口
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.create_dataauthorization_direct_authorization_ex_async(request, headers, runtime)

    def create_dataauthorization_direct_authorization_ex(
        self,
        request: blockchain_models.CreateDataauthorizationDirectAuthorizationRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateDataauthorizationDirectAuthorizationResponse:
        """
        Description: 直接授权接口
        Summary: 直接授权接口
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateDataauthorizationDirectAuthorizationResponse().from_map(
            self.do_request('1.0', 'baas.dataauthorization.direct.authorization.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def create_dataauthorization_direct_authorization_ex_async(
        self,
        request: blockchain_models.CreateDataauthorizationDirectAuthorizationRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateDataauthorizationDirectAuthorizationResponse:
        """
        Description: 直接授权接口
        Summary: 直接授权接口
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateDataauthorizationDirectAuthorizationResponse().from_map(
            await self.do_request_async('1.0', 'baas.dataauthorization.direct.authorization.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def list_dataauthorization_authorization_page(
        self,
        request: blockchain_models.ListDataauthorizationAuthorizationPageRequest,
    ) -> blockchain_models.ListDataauthorizationAuthorizationPageResponse:
        """
        Description: 授权列表分页查询
        Summary: 授权列表分页查询
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.list_dataauthorization_authorization_page_ex(request, headers, runtime)

    async def list_dataauthorization_authorization_page_async(
        self,
        request: blockchain_models.ListDataauthorizationAuthorizationPageRequest,
    ) -> blockchain_models.ListDataauthorizationAuthorizationPageResponse:
        """
        Description: 授权列表分页查询
        Summary: 授权列表分页查询
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.list_dataauthorization_authorization_page_ex_async(request, headers, runtime)

    def list_dataauthorization_authorization_page_ex(
        self,
        request: blockchain_models.ListDataauthorizationAuthorizationPageRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.ListDataauthorizationAuthorizationPageResponse:
        """
        Description: 授权列表分页查询
        Summary: 授权列表分页查询
        """
        UtilClient.validate_model(request)
        return blockchain_models.ListDataauthorizationAuthorizationPageResponse().from_map(
            self.do_request('1.0', 'baas.dataauthorization.authorization.page.list', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def list_dataauthorization_authorization_page_ex_async(
        self,
        request: blockchain_models.ListDataauthorizationAuthorizationPageRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.ListDataauthorizationAuthorizationPageResponse:
        """
        Description: 授权列表分页查询
        Summary: 授权列表分页查询
        """
        UtilClient.validate_model(request)
        return blockchain_models.ListDataauthorizationAuthorizationPageResponse().from_map(
            await self.do_request_async('1.0', 'baas.dataauthorization.authorization.page.list', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def list_dataauthorization_authparticipant_page(
        self,
        request: blockchain_models.ListDataauthorizationAuthparticipantPageRequest,
    ) -> blockchain_models.ListDataauthorizationAuthparticipantPageResponse:
        """
        Description: 查询已授权的参与方列表
        Summary: 查询已授权的参与方列表
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.list_dataauthorization_authparticipant_page_ex(request, headers, runtime)

    async def list_dataauthorization_authparticipant_page_async(
        self,
        request: blockchain_models.ListDataauthorizationAuthparticipantPageRequest,
    ) -> blockchain_models.ListDataauthorizationAuthparticipantPageResponse:
        """
        Description: 查询已授权的参与方列表
        Summary: 查询已授权的参与方列表
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.list_dataauthorization_authparticipant_page_ex_async(request, headers, runtime)

    def list_dataauthorization_authparticipant_page_ex(
        self,
        request: blockchain_models.ListDataauthorizationAuthparticipantPageRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.ListDataauthorizationAuthparticipantPageResponse:
        """
        Description: 查询已授权的参与方列表
        Summary: 查询已授权的参与方列表
        """
        UtilClient.validate_model(request)
        return blockchain_models.ListDataauthorizationAuthparticipantPageResponse().from_map(
            self.do_request('1.0', 'baas.dataauthorization.authparticipant.page.list', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def list_dataauthorization_authparticipant_page_ex_async(
        self,
        request: blockchain_models.ListDataauthorizationAuthparticipantPageRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.ListDataauthorizationAuthparticipantPageResponse:
        """
        Description: 查询已授权的参与方列表
        Summary: 查询已授权的参与方列表
        """
        UtilClient.validate_model(request)
        return blockchain_models.ListDataauthorizationAuthparticipantPageResponse().from_map(
            await self.do_request_async('1.0', 'baas.dataauthorization.authparticipant.page.list', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def create_dataauthorization_data_assert(
        self,
        request: blockchain_models.CreateDataauthorizationDataAssertRequest,
    ) -> blockchain_models.CreateDataauthorizationDataAssertResponse:
        """
        Description: 创建数据资产
        Summary: 创建数据资产
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.create_dataauthorization_data_assert_ex(request, headers, runtime)

    async def create_dataauthorization_data_assert_async(
        self,
        request: blockchain_models.CreateDataauthorizationDataAssertRequest,
    ) -> blockchain_models.CreateDataauthorizationDataAssertResponse:
        """
        Description: 创建数据资产
        Summary: 创建数据资产
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.create_dataauthorization_data_assert_ex_async(request, headers, runtime)

    def create_dataauthorization_data_assert_ex(
        self,
        request: blockchain_models.CreateDataauthorizationDataAssertRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateDataauthorizationDataAssertResponse:
        """
        Description: 创建数据资产
        Summary: 创建数据资产
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateDataauthorizationDataAssertResponse().from_map(
            self.do_request('1.0', 'baas.dataauthorization.data.assert.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def create_dataauthorization_data_assert_ex_async(
        self,
        request: blockchain_models.CreateDataauthorizationDataAssertRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateDataauthorizationDataAssertResponse:
        """
        Description: 创建数据资产
        Summary: 创建数据资产
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateDataauthorizationDataAssertResponse().from_map(
            await self.do_request_async('1.0', 'baas.dataauthorization.data.assert.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def update_dataauthorization_data_assert(
        self,
        request: blockchain_models.UpdateDataauthorizationDataAssertRequest,
    ) -> blockchain_models.UpdateDataauthorizationDataAssertResponse:
        """
        Description: 数据资产更新
        Summary: 数据资产更新
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.update_dataauthorization_data_assert_ex(request, headers, runtime)

    async def update_dataauthorization_data_assert_async(
        self,
        request: blockchain_models.UpdateDataauthorizationDataAssertRequest,
    ) -> blockchain_models.UpdateDataauthorizationDataAssertResponse:
        """
        Description: 数据资产更新
        Summary: 数据资产更新
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.update_dataauthorization_data_assert_ex_async(request, headers, runtime)

    def update_dataauthorization_data_assert_ex(
        self,
        request: blockchain_models.UpdateDataauthorizationDataAssertRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.UpdateDataauthorizationDataAssertResponse:
        """
        Description: 数据资产更新
        Summary: 数据资产更新
        """
        UtilClient.validate_model(request)
        return blockchain_models.UpdateDataauthorizationDataAssertResponse().from_map(
            self.do_request('1.0', 'baas.dataauthorization.data.assert.update', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def update_dataauthorization_data_assert_ex_async(
        self,
        request: blockchain_models.UpdateDataauthorizationDataAssertRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.UpdateDataauthorizationDataAssertResponse:
        """
        Description: 数据资产更新
        Summary: 数据资产更新
        """
        UtilClient.validate_model(request)
        return blockchain_models.UpdateDataauthorizationDataAssertResponse().from_map(
            await self.do_request_async('1.0', 'baas.dataauthorization.data.assert.update', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def delete_dataauthorization_data_assert(
        self,
        request: blockchain_models.DeleteDataauthorizationDataAssertRequest,
    ) -> blockchain_models.DeleteDataauthorizationDataAssertResponse:
        """
        Description: 数据资产删除
        Summary: 数据资产删除
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.delete_dataauthorization_data_assert_ex(request, headers, runtime)

    async def delete_dataauthorization_data_assert_async(
        self,
        request: blockchain_models.DeleteDataauthorizationDataAssertRequest,
    ) -> blockchain_models.DeleteDataauthorizationDataAssertResponse:
        """
        Description: 数据资产删除
        Summary: 数据资产删除
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.delete_dataauthorization_data_assert_ex_async(request, headers, runtime)

    def delete_dataauthorization_data_assert_ex(
        self,
        request: blockchain_models.DeleteDataauthorizationDataAssertRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.DeleteDataauthorizationDataAssertResponse:
        """
        Description: 数据资产删除
        Summary: 数据资产删除
        """
        UtilClient.validate_model(request)
        return blockchain_models.DeleteDataauthorizationDataAssertResponse().from_map(
            self.do_request('1.0', 'baas.dataauthorization.data.assert.delete', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def delete_dataauthorization_data_assert_ex_async(
        self,
        request: blockchain_models.DeleteDataauthorizationDataAssertRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.DeleteDataauthorizationDataAssertResponse:
        """
        Description: 数据资产删除
        Summary: 数据资产删除
        """
        UtilClient.validate_model(request)
        return blockchain_models.DeleteDataauthorizationDataAssertResponse().from_map(
            await self.do_request_async('1.0', 'baas.dataauthorization.data.assert.delete', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def create_dataauthorization_agent_authorization(
        self,
        request: blockchain_models.CreateDataauthorizationAgentAuthorizationRequest,
    ) -> blockchain_models.CreateDataauthorizationAgentAuthorizationResponse:
        """
        Description: 授权服务代理授权接口
        Summary: 代理授权
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.create_dataauthorization_agent_authorization_ex(request, headers, runtime)

    async def create_dataauthorization_agent_authorization_async(
        self,
        request: blockchain_models.CreateDataauthorizationAgentAuthorizationRequest,
    ) -> blockchain_models.CreateDataauthorizationAgentAuthorizationResponse:
        """
        Description: 授权服务代理授权接口
        Summary: 代理授权
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.create_dataauthorization_agent_authorization_ex_async(request, headers, runtime)

    def create_dataauthorization_agent_authorization_ex(
        self,
        request: blockchain_models.CreateDataauthorizationAgentAuthorizationRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateDataauthorizationAgentAuthorizationResponse:
        """
        Description: 授权服务代理授权接口
        Summary: 代理授权
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateDataauthorizationAgentAuthorizationResponse().from_map(
            self.do_request('1.0', 'baas.dataauthorization.agent.authorization.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def create_dataauthorization_agent_authorization_ex_async(
        self,
        request: blockchain_models.CreateDataauthorizationAgentAuthorizationRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateDataauthorizationAgentAuthorizationResponse:
        """
        Description: 授权服务代理授权接口
        Summary: 代理授权
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateDataauthorizationAgentAuthorizationResponse().from_map(
            await self.do_request_async('1.0', 'baas.dataauthorization.agent.authorization.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def list_dataauthorization_authority_cert(
        self,
        request: blockchain_models.ListDataauthorizationAuthorityCertRequest,
    ) -> blockchain_models.ListDataauthorizationAuthorityCertResponse:
        """
        Description:  授权列表相信信息查询
        Summary:  授权列表相信信息查询
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.list_dataauthorization_authority_cert_ex(request, headers, runtime)

    async def list_dataauthorization_authority_cert_async(
        self,
        request: blockchain_models.ListDataauthorizationAuthorityCertRequest,
    ) -> blockchain_models.ListDataauthorizationAuthorityCertResponse:
        """
        Description:  授权列表相信信息查询
        Summary:  授权列表相信信息查询
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.list_dataauthorization_authority_cert_ex_async(request, headers, runtime)

    def list_dataauthorization_authority_cert_ex(
        self,
        request: blockchain_models.ListDataauthorizationAuthorityCertRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.ListDataauthorizationAuthorityCertResponse:
        """
        Description:  授权列表相信信息查询
        Summary:  授权列表相信信息查询
        """
        UtilClient.validate_model(request)
        return blockchain_models.ListDataauthorizationAuthorityCertResponse().from_map(
            self.do_request('1.0', 'baas.dataauthorization.authority.cert.list', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def list_dataauthorization_authority_cert_ex_async(
        self,
        request: blockchain_models.ListDataauthorizationAuthorityCertRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.ListDataauthorizationAuthorityCertResponse:
        """
        Description:  授权列表相信信息查询
        Summary:  授权列表相信信息查询
        """
        UtilClient.validate_model(request)
        return blockchain_models.ListDataauthorizationAuthorityCertResponse().from_map(
            await self.do_request_async('1.0', 'baas.dataauthorization.authority.cert.list', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_traceability_tx_check(
        self,
        request: blockchain_models.QueryTraceabilityTxCheckRequest,
    ) -> blockchain_models.QueryTraceabilityTxCheckResponse:
        """
        Description: 通过额交易hash查询，返回hash对应区块链上信息。
        Summary: 溯源区块查证接口
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_traceability_tx_check_ex(request, headers, runtime)

    async def query_traceability_tx_check_async(
        self,
        request: blockchain_models.QueryTraceabilityTxCheckRequest,
    ) -> blockchain_models.QueryTraceabilityTxCheckResponse:
        """
        Description: 通过额交易hash查询，返回hash对应区块链上信息。
        Summary: 溯源区块查证接口
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_traceability_tx_check_ex_async(request, headers, runtime)

    def query_traceability_tx_check_ex(
        self,
        request: blockchain_models.QueryTraceabilityTxCheckRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryTraceabilityTxCheckResponse:
        """
        Description: 通过额交易hash查询，返回hash对应区块链上信息。
        Summary: 溯源区块查证接口
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryTraceabilityTxCheckResponse().from_map(
            self.do_request('1.0', 'baas.traceability.tx.check.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_traceability_tx_check_ex_async(
        self,
        request: blockchain_models.QueryTraceabilityTxCheckRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryTraceabilityTxCheckResponse:
        """
        Description: 通过额交易hash查询，返回hash对应区块链上信息。
        Summary: 溯源区块查证接口
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryTraceabilityTxCheckResponse().from_map(
            await self.do_request_async('1.0', 'baas.traceability.tx.check.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_traceability_blockchain_infos(
        self,
        request: blockchain_models.QueryTraceabilityBlockchainInfosRequest,
    ) -> blockchain_models.QueryTraceabilityBlockchainInfosResponse:
        """
        Description: 通过链id，获取链的相关信息
        Summary: 获取链信息接口
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_traceability_blockchain_infos_ex(request, headers, runtime)

    async def query_traceability_blockchain_infos_async(
        self,
        request: blockchain_models.QueryTraceabilityBlockchainInfosRequest,
    ) -> blockchain_models.QueryTraceabilityBlockchainInfosResponse:
        """
        Description: 通过链id，获取链的相关信息
        Summary: 获取链信息接口
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_traceability_blockchain_infos_ex_async(request, headers, runtime)

    def query_traceability_blockchain_infos_ex(
        self,
        request: blockchain_models.QueryTraceabilityBlockchainInfosRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryTraceabilityBlockchainInfosResponse:
        """
        Description: 通过链id，获取链的相关信息
        Summary: 获取链信息接口
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryTraceabilityBlockchainInfosResponse().from_map(
            self.do_request('1.0', 'baas.traceability.blockchain.infos.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_traceability_blockchain_infos_ex_async(
        self,
        request: blockchain_models.QueryTraceabilityBlockchainInfosRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryTraceabilityBlockchainInfosResponse:
        """
        Description: 通过链id，获取链的相关信息
        Summary: 获取链信息接口
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryTraceabilityBlockchainInfosResponse().from_map(
            await self.do_request_async('1.0', 'baas.traceability.blockchain.infos.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def save_blockchain_browser_privilege(
        self,
        request: blockchain_models.SaveBlockchainBrowserPrivilegeRequest,
    ) -> blockchain_models.SaveBlockchainBrowserPrivilegeResponse:
        """
        Description: BaaS区块链浏览器添加租户与链的访问权限
        Summary: BaaS区块链浏览器添加权限
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.save_blockchain_browser_privilege_ex(request, headers, runtime)

    async def save_blockchain_browser_privilege_async(
        self,
        request: blockchain_models.SaveBlockchainBrowserPrivilegeRequest,
    ) -> blockchain_models.SaveBlockchainBrowserPrivilegeResponse:
        """
        Description: BaaS区块链浏览器添加租户与链的访问权限
        Summary: BaaS区块链浏览器添加权限
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.save_blockchain_browser_privilege_ex_async(request, headers, runtime)

    def save_blockchain_browser_privilege_ex(
        self,
        request: blockchain_models.SaveBlockchainBrowserPrivilegeRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.SaveBlockchainBrowserPrivilegeResponse:
        """
        Description: BaaS区块链浏览器添加租户与链的访问权限
        Summary: BaaS区块链浏览器添加权限
        """
        UtilClient.validate_model(request)
        return blockchain_models.SaveBlockchainBrowserPrivilegeResponse().from_map(
            self.do_request('1.0', 'baas.blockchain.browser.privilege.save', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def save_blockchain_browser_privilege_ex_async(
        self,
        request: blockchain_models.SaveBlockchainBrowserPrivilegeRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.SaveBlockchainBrowserPrivilegeResponse:
        """
        Description: BaaS区块链浏览器添加租户与链的访问权限
        Summary: BaaS区块链浏览器添加权限
        """
        UtilClient.validate_model(request)
        return blockchain_models.SaveBlockchainBrowserPrivilegeResponse().from_map(
            await self.do_request_async('1.0', 'baas.blockchain.browser.privilege.save', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_blockchain_browser_privilege(
        self,
        request: blockchain_models.QueryBlockchainBrowserPrivilegeRequest,
    ) -> blockchain_models.QueryBlockchainBrowserPrivilegeResponse:
        """
        Description: 查询租户查看某链的权限
        Summary: 查询租户查看某链的权限
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_blockchain_browser_privilege_ex(request, headers, runtime)

    async def query_blockchain_browser_privilege_async(
        self,
        request: blockchain_models.QueryBlockchainBrowserPrivilegeRequest,
    ) -> blockchain_models.QueryBlockchainBrowserPrivilegeResponse:
        """
        Description: 查询租户查看某链的权限
        Summary: 查询租户查看某链的权限
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_blockchain_browser_privilege_ex_async(request, headers, runtime)

    def query_blockchain_browser_privilege_ex(
        self,
        request: blockchain_models.QueryBlockchainBrowserPrivilegeRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryBlockchainBrowserPrivilegeResponse:
        """
        Description: 查询租户查看某链的权限
        Summary: 查询租户查看某链的权限
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryBlockchainBrowserPrivilegeResponse().from_map(
            self.do_request('1.0', 'baas.blockchain.browser.privilege.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_blockchain_browser_privilege_ex_async(
        self,
        request: blockchain_models.QueryBlockchainBrowserPrivilegeRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryBlockchainBrowserPrivilegeResponse:
        """
        Description: 查询租户查看某链的权限
        Summary: 查询租户查看某链的权限
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryBlockchainBrowserPrivilegeResponse().from_map(
            await self.do_request_async('1.0', 'baas.blockchain.browser.privilege.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def delete_blockchain_browser_privilege(
        self,
        request: blockchain_models.DeleteBlockchainBrowserPrivilegeRequest,
    ) -> blockchain_models.DeleteBlockchainBrowserPrivilegeResponse:
        """
        Description: BaaS区块链浏览器删除租户与链的访问权限
        Summary: BaaS区块链浏览器添加权限
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.delete_blockchain_browser_privilege_ex(request, headers, runtime)

    async def delete_blockchain_browser_privilege_async(
        self,
        request: blockchain_models.DeleteBlockchainBrowserPrivilegeRequest,
    ) -> blockchain_models.DeleteBlockchainBrowserPrivilegeResponse:
        """
        Description: BaaS区块链浏览器删除租户与链的访问权限
        Summary: BaaS区块链浏览器添加权限
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.delete_blockchain_browser_privilege_ex_async(request, headers, runtime)

    def delete_blockchain_browser_privilege_ex(
        self,
        request: blockchain_models.DeleteBlockchainBrowserPrivilegeRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.DeleteBlockchainBrowserPrivilegeResponse:
        """
        Description: BaaS区块链浏览器删除租户与链的访问权限
        Summary: BaaS区块链浏览器添加权限
        """
        UtilClient.validate_model(request)
        return blockchain_models.DeleteBlockchainBrowserPrivilegeResponse().from_map(
            self.do_request('1.0', 'baas.blockchain.browser.privilege.delete', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def delete_blockchain_browser_privilege_ex_async(
        self,
        request: blockchain_models.DeleteBlockchainBrowserPrivilegeRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.DeleteBlockchainBrowserPrivilegeResponse:
        """
        Description: BaaS区块链浏览器删除租户与链的访问权限
        Summary: BaaS区块链浏览器添加权限
        """
        UtilClient.validate_model(request)
        return blockchain_models.DeleteBlockchainBrowserPrivilegeResponse().from_map(
            await self.do_request_async('1.0', 'baas.blockchain.browser.privilege.delete', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def get_blockchain_miniprogram(
        self,
        request: blockchain_models.GetBlockchainMiniprogramRequest,
    ) -> blockchain_models.GetBlockchainMiniprogramResponse:
        """
        Description: 生成蚂蚁区块链的交易二维码
        Summary: 生成蚂蚁区块链的交易二维码
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.get_blockchain_miniprogram_ex(request, headers, runtime)

    async def get_blockchain_miniprogram_async(
        self,
        request: blockchain_models.GetBlockchainMiniprogramRequest,
    ) -> blockchain_models.GetBlockchainMiniprogramResponse:
        """
        Description: 生成蚂蚁区块链的交易二维码
        Summary: 生成蚂蚁区块链的交易二维码
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.get_blockchain_miniprogram_ex_async(request, headers, runtime)

    def get_blockchain_miniprogram_ex(
        self,
        request: blockchain_models.GetBlockchainMiniprogramRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.GetBlockchainMiniprogramResponse:
        """
        Description: 生成蚂蚁区块链的交易二维码
        Summary: 生成蚂蚁区块链的交易二维码
        """
        UtilClient.validate_model(request)
        return blockchain_models.GetBlockchainMiniprogramResponse().from_map(
            self.do_request('1.0', 'baas.blockchain.miniprogram.get', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def get_blockchain_miniprogram_ex_async(
        self,
        request: blockchain_models.GetBlockchainMiniprogramRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.GetBlockchainMiniprogramResponse:
        """
        Description: 生成蚂蚁区块链的交易二维码
        Summary: 生成蚂蚁区块链的交易二维码
        """
        UtilClient.validate_model(request)
        return blockchain_models.GetBlockchainMiniprogramResponse().from_map(
            await self.do_request_async('1.0', 'baas.blockchain.miniprogram.get', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def add_blockchain_miniprogram(
        self,
        request: blockchain_models.AddBlockchainMiniprogramRequest,
    ) -> blockchain_models.AddBlockchainMiniprogramResponse:
        """
        Description: 蚂蚁区块链的链上交易数据查看权限批量添加
        Summary: 蚂蚁区块链的链上交易数据查看权限批量添加
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.add_blockchain_miniprogram_ex(request, headers, runtime)

    async def add_blockchain_miniprogram_async(
        self,
        request: blockchain_models.AddBlockchainMiniprogramRequest,
    ) -> blockchain_models.AddBlockchainMiniprogramResponse:
        """
        Description: 蚂蚁区块链的链上交易数据查看权限批量添加
        Summary: 蚂蚁区块链的链上交易数据查看权限批量添加
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.add_blockchain_miniprogram_ex_async(request, headers, runtime)

    def add_blockchain_miniprogram_ex(
        self,
        request: blockchain_models.AddBlockchainMiniprogramRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.AddBlockchainMiniprogramResponse:
        """
        Description: 蚂蚁区块链的链上交易数据查看权限批量添加
        Summary: 蚂蚁区块链的链上交易数据查看权限批量添加
        """
        UtilClient.validate_model(request)
        return blockchain_models.AddBlockchainMiniprogramResponse().from_map(
            self.do_request('1.0', 'baas.blockchain.miniprogram.add', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def add_blockchain_miniprogram_ex_async(
        self,
        request: blockchain_models.AddBlockchainMiniprogramRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.AddBlockchainMiniprogramResponse:
        """
        Description: 蚂蚁区块链的链上交易数据查看权限批量添加
        Summary: 蚂蚁区块链的链上交易数据查看权限批量添加
        """
        UtilClient.validate_model(request)
        return blockchain_models.AddBlockchainMiniprogramResponse().from_map(
            await self.do_request_async('1.0', 'baas.blockchain.miniprogram.add', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_browser_transaction_statistic(
        self,
        request: blockchain_models.QueryBrowserTransactionStatisticRequest,
    ) -> blockchain_models.QueryBrowserTransactionStatisticResponse:
        """
        Description: 获取金融科技BaaS浏览器交易统计信息
        Summary: 获取金融科技BaaS浏览器交易统计信息
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_browser_transaction_statistic_ex(request, headers, runtime)

    async def query_browser_transaction_statistic_async(
        self,
        request: blockchain_models.QueryBrowserTransactionStatisticRequest,
    ) -> blockchain_models.QueryBrowserTransactionStatisticResponse:
        """
        Description: 获取金融科技BaaS浏览器交易统计信息
        Summary: 获取金融科技BaaS浏览器交易统计信息
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_browser_transaction_statistic_ex_async(request, headers, runtime)

    def query_browser_transaction_statistic_ex(
        self,
        request: blockchain_models.QueryBrowserTransactionStatisticRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryBrowserTransactionStatisticResponse:
        """
        Description: 获取金融科技BaaS浏览器交易统计信息
        Summary: 获取金融科技BaaS浏览器交易统计信息
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryBrowserTransactionStatisticResponse().from_map(
            self.do_request('1.0', 'baas.browser.transaction.statistic.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_browser_transaction_statistic_ex_async(
        self,
        request: blockchain_models.QueryBrowserTransactionStatisticRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryBrowserTransactionStatisticResponse:
        """
        Description: 获取金融科技BaaS浏览器交易统计信息
        Summary: 获取金融科技BaaS浏览器交易统计信息
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryBrowserTransactionStatisticResponse().from_map(
            await self.do_request_async('1.0', 'baas.browser.transaction.statistic.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_browser_block_latest(
        self,
        request: blockchain_models.QueryBrowserBlockLatestRequest,
    ) -> blockchain_models.QueryBrowserBlockLatestResponse:
        """
        Description: 获取金融科技BaaS最新区块信息列表
        Summary: 获取金融科技BaaS最新区块信息列表
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_browser_block_latest_ex(request, headers, runtime)

    async def query_browser_block_latest_async(
        self,
        request: blockchain_models.QueryBrowserBlockLatestRequest,
    ) -> blockchain_models.QueryBrowserBlockLatestResponse:
        """
        Description: 获取金融科技BaaS最新区块信息列表
        Summary: 获取金融科技BaaS最新区块信息列表
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_browser_block_latest_ex_async(request, headers, runtime)

    def query_browser_block_latest_ex(
        self,
        request: blockchain_models.QueryBrowserBlockLatestRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryBrowserBlockLatestResponse:
        """
        Description: 获取金融科技BaaS最新区块信息列表
        Summary: 获取金融科技BaaS最新区块信息列表
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryBrowserBlockLatestResponse().from_map(
            self.do_request('1.0', 'baas.browser.block.latest.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_browser_block_latest_ex_async(
        self,
        request: blockchain_models.QueryBrowserBlockLatestRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryBrowserBlockLatestResponse:
        """
        Description: 获取金融科技BaaS最新区块信息列表
        Summary: 获取金融科技BaaS最新区块信息列表
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryBrowserBlockLatestResponse().from_map(
            await self.do_request_async('1.0', 'baas.browser.block.latest.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_browser_transaction_latest(
        self,
        request: blockchain_models.QueryBrowserTransactionLatestRequest,
    ) -> blockchain_models.QueryBrowserTransactionLatestResponse:
        """
        Description: 获取金融科技BaaS最新交易列表
        Summary: 获取金融科技BaaS最新交易列表
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_browser_transaction_latest_ex(request, headers, runtime)

    async def query_browser_transaction_latest_async(
        self,
        request: blockchain_models.QueryBrowserTransactionLatestRequest,
    ) -> blockchain_models.QueryBrowserTransactionLatestResponse:
        """
        Description: 获取金融科技BaaS最新交易列表
        Summary: 获取金融科技BaaS最新交易列表
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_browser_transaction_latest_ex_async(request, headers, runtime)

    def query_browser_transaction_latest_ex(
        self,
        request: blockchain_models.QueryBrowserTransactionLatestRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryBrowserTransactionLatestResponse:
        """
        Description: 获取金融科技BaaS最新交易列表
        Summary: 获取金融科技BaaS最新交易列表
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryBrowserTransactionLatestResponse().from_map(
            self.do_request('1.0', 'baas.browser.transaction.latest.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_browser_transaction_latest_ex_async(
        self,
        request: blockchain_models.QueryBrowserTransactionLatestRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryBrowserTransactionLatestResponse:
        """
        Description: 获取金融科技BaaS最新交易列表
        Summary: 获取金融科技BaaS最新交易列表
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryBrowserTransactionLatestResponse().from_map(
            await self.do_request_async('1.0', 'baas.browser.transaction.latest.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_browser_block(
        self,
        request: blockchain_models.QueryBrowserBlockRequest,
    ) -> blockchain_models.QueryBrowserBlockResponse:
        """
        Description: 获取金融科技BaaS区块信息
        Summary: 获取金融科技BaaS区块信息
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_browser_block_ex(request, headers, runtime)

    async def query_browser_block_async(
        self,
        request: blockchain_models.QueryBrowserBlockRequest,
    ) -> blockchain_models.QueryBrowserBlockResponse:
        """
        Description: 获取金融科技BaaS区块信息
        Summary: 获取金融科技BaaS区块信息
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_browser_block_ex_async(request, headers, runtime)

    def query_browser_block_ex(
        self,
        request: blockchain_models.QueryBrowserBlockRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryBrowserBlockResponse:
        """
        Description: 获取金融科技BaaS区块信息
        Summary: 获取金融科技BaaS区块信息
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryBrowserBlockResponse().from_map(
            self.do_request('1.0', 'baas.browser.block.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_browser_block_ex_async(
        self,
        request: blockchain_models.QueryBrowserBlockRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryBrowserBlockResponse:
        """
        Description: 获取金融科技BaaS区块信息
        Summary: 获取金融科技BaaS区块信息
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryBrowserBlockResponse().from_map(
            await self.do_request_async('1.0', 'baas.browser.block.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_browser_transaction(
        self,
        request: blockchain_models.QueryBrowserTransactionRequest,
    ) -> blockchain_models.QueryBrowserTransactionResponse:
        """
        Description: 获取金融科技BaaS交易信息内容
        Summary: 获取金融科技BaaS交易信息内容
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_browser_transaction_ex(request, headers, runtime)

    async def query_browser_transaction_async(
        self,
        request: blockchain_models.QueryBrowserTransactionRequest,
    ) -> blockchain_models.QueryBrowserTransactionResponse:
        """
        Description: 获取金融科技BaaS交易信息内容
        Summary: 获取金融科技BaaS交易信息内容
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_browser_transaction_ex_async(request, headers, runtime)

    def query_browser_transaction_ex(
        self,
        request: blockchain_models.QueryBrowserTransactionRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryBrowserTransactionResponse:
        """
        Description: 获取金融科技BaaS交易信息内容
        Summary: 获取金融科技BaaS交易信息内容
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryBrowserTransactionResponse().from_map(
            self.do_request('1.0', 'baas.browser.transaction.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_browser_transaction_ex_async(
        self,
        request: blockchain_models.QueryBrowserTransactionRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryBrowserTransactionResponse:
        """
        Description: 获取金融科技BaaS交易信息内容
        Summary: 获取金融科技BaaS交易信息内容
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryBrowserTransactionResponse().from_map(
            await self.do_request_async('1.0', 'baas.browser.transaction.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_browser_transaction_receipt(
        self,
        request: blockchain_models.QueryBrowserTransactionReceiptRequest,
    ) -> blockchain_models.QueryBrowserTransactionReceiptResponse:
        """
        Description: 获取金融科技BaaS交易回执信息
        Summary: 获取金融科技BaaS交易回执信息
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_browser_transaction_receipt_ex(request, headers, runtime)

    async def query_browser_transaction_receipt_async(
        self,
        request: blockchain_models.QueryBrowserTransactionReceiptRequest,
    ) -> blockchain_models.QueryBrowserTransactionReceiptResponse:
        """
        Description: 获取金融科技BaaS交易回执信息
        Summary: 获取金融科技BaaS交易回执信息
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_browser_transaction_receipt_ex_async(request, headers, runtime)

    def query_browser_transaction_receipt_ex(
        self,
        request: blockchain_models.QueryBrowserTransactionReceiptRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryBrowserTransactionReceiptResponse:
        """
        Description: 获取金融科技BaaS交易回执信息
        Summary: 获取金融科技BaaS交易回执信息
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryBrowserTransactionReceiptResponse().from_map(
            self.do_request('1.0', 'baas.browser.transaction.receipt.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_browser_transaction_receipt_ex_async(
        self,
        request: blockchain_models.QueryBrowserTransactionReceiptRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryBrowserTransactionReceiptResponse:
        """
        Description: 获取金融科技BaaS交易回执信息
        Summary: 获取金融科技BaaS交易回执信息
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryBrowserTransactionReceiptResponse().from_map(
            await self.do_request_async('1.0', 'baas.browser.transaction.receipt.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_browser_node_owner(
        self,
        request: blockchain_models.QueryBrowserNodeOwnerRequest,
    ) -> blockchain_models.QueryBrowserNodeOwnerResponse:
        """
        Description: 蚂蚁链节点所有者查询
        Summary: 蚂蚁链节点所有者查询
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_browser_node_owner_ex(request, headers, runtime)

    async def query_browser_node_owner_async(
        self,
        request: blockchain_models.QueryBrowserNodeOwnerRequest,
    ) -> blockchain_models.QueryBrowserNodeOwnerResponse:
        """
        Description: 蚂蚁链节点所有者查询
        Summary: 蚂蚁链节点所有者查询
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_browser_node_owner_ex_async(request, headers, runtime)

    def query_browser_node_owner_ex(
        self,
        request: blockchain_models.QueryBrowserNodeOwnerRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryBrowserNodeOwnerResponse:
        """
        Description: 蚂蚁链节点所有者查询
        Summary: 蚂蚁链节点所有者查询
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryBrowserNodeOwnerResponse().from_map(
            self.do_request('1.0', 'baas.browser.node.owner.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_browser_node_owner_ex_async(
        self,
        request: blockchain_models.QueryBrowserNodeOwnerRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryBrowserNodeOwnerResponse:
        """
        Description: 蚂蚁链节点所有者查询
        Summary: 蚂蚁链节点所有者查询
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryBrowserNodeOwnerResponse().from_map(
            await self.do_request_async('1.0', 'baas.browser.node.owner.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_credit_transfer_apply(
        self,
        request: blockchain_models.QueryCreditTransferApplyRequest,
    ) -> blockchain_models.QueryCreditTransferApplyResponse:
        """
        Description: 物流金融信用流转能力注册开通结果查询
        Summary: 物流金融信用流转能力注册开通结果查询
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_credit_transfer_apply_ex(request, headers, runtime)

    async def query_credit_transfer_apply_async(
        self,
        request: blockchain_models.QueryCreditTransferApplyRequest,
    ) -> blockchain_models.QueryCreditTransferApplyResponse:
        """
        Description: 物流金融信用流转能力注册开通结果查询
        Summary: 物流金融信用流转能力注册开通结果查询
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_credit_transfer_apply_ex_async(request, headers, runtime)

    def query_credit_transfer_apply_ex(
        self,
        request: blockchain_models.QueryCreditTransferApplyRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryCreditTransferApplyResponse:
        """
        Description: 物流金融信用流转能力注册开通结果查询
        Summary: 物流金融信用流转能力注册开通结果查询
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryCreditTransferApplyResponse().from_map(
            self.do_request('1.0', 'baas.credit.transfer.apply.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_credit_transfer_apply_ex_async(
        self,
        request: blockchain_models.QueryCreditTransferApplyRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryCreditTransferApplyResponse:
        """
        Description: 物流金融信用流转能力注册开通结果查询
        Summary: 物流金融信用流转能力注册开通结果查询
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryCreditTransferApplyResponse().from_map(
            await self.do_request_async('1.0', 'baas.credit.transfer.apply.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_credit_transfer_balance(
        self,
        request: blockchain_models.QueryCreditTransferBalanceRequest,
    ) -> blockchain_models.QueryCreditTransferBalanceResponse:
        """
        Description: 物流金融信用流转额度查询，仅显示是否有额度，不会返回具体额度
        Summary: 物流金融信用流转额度查询
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_credit_transfer_balance_ex(request, headers, runtime)

    async def query_credit_transfer_balance_async(
        self,
        request: blockchain_models.QueryCreditTransferBalanceRequest,
    ) -> blockchain_models.QueryCreditTransferBalanceResponse:
        """
        Description: 物流金融信用流转额度查询，仅显示是否有额度，不会返回具体额度
        Summary: 物流金融信用流转额度查询
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_credit_transfer_balance_ex_async(request, headers, runtime)

    def query_credit_transfer_balance_ex(
        self,
        request: blockchain_models.QueryCreditTransferBalanceRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryCreditTransferBalanceResponse:
        """
        Description: 物流金融信用流转额度查询，仅显示是否有额度，不会返回具体额度
        Summary: 物流金融信用流转额度查询
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryCreditTransferBalanceResponse().from_map(
            self.do_request('1.0', 'baas.credit.transfer.balance.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_credit_transfer_balance_ex_async(
        self,
        request: blockchain_models.QueryCreditTransferBalanceRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryCreditTransferBalanceResponse:
        """
        Description: 物流金融信用流转额度查询，仅显示是否有额度，不会返回具体额度
        Summary: 物流金融信用流转额度查询
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryCreditTransferBalanceResponse().from_map(
            await self.do_request_async('1.0', 'baas.credit.transfer.balance.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_credit_transfer_issuebyid(
        self,
        request: blockchain_models.QueryCreditTransferIssuebyidRequest,
    ) -> blockchain_models.QueryCreditTransferIssuebyidResponse:
        """
        Description: 物流金融信用流转通过id查询发行结果
        Summary: 物流金融信用流转通过id查询发行结果
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_credit_transfer_issuebyid_ex(request, headers, runtime)

    async def query_credit_transfer_issuebyid_async(
        self,
        request: blockchain_models.QueryCreditTransferIssuebyidRequest,
    ) -> blockchain_models.QueryCreditTransferIssuebyidResponse:
        """
        Description: 物流金融信用流转通过id查询发行结果
        Summary: 物流金融信用流转通过id查询发行结果
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_credit_transfer_issuebyid_ex_async(request, headers, runtime)

    def query_credit_transfer_issuebyid_ex(
        self,
        request: blockchain_models.QueryCreditTransferIssuebyidRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryCreditTransferIssuebyidResponse:
        """
        Description: 物流金融信用流转通过id查询发行结果
        Summary: 物流金融信用流转通过id查询发行结果
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryCreditTransferIssuebyidResponse().from_map(
            self.do_request('1.0', 'baas.credit.transfer.issuebyid.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_credit_transfer_issuebyid_ex_async(
        self,
        request: blockchain_models.QueryCreditTransferIssuebyidRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryCreditTransferIssuebyidResponse:
        """
        Description: 物流金融信用流转通过id查询发行结果
        Summary: 物流金融信用流转通过id查询发行结果
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryCreditTransferIssuebyidResponse().from_map(
            await self.do_request_async('1.0', 'baas.credit.transfer.issuebyid.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_credit_transfer_issuebytime(
        self,
        request: blockchain_models.QueryCreditTransferIssuebytimeRequest,
    ) -> blockchain_models.QueryCreditTransferIssuebytimeResponse:
        """
        Description: 物流金融根据时间查询信用凭证信息
        Summary: 物流金融根据时间查询信用流转信息
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_credit_transfer_issuebytime_ex(request, headers, runtime)

    async def query_credit_transfer_issuebytime_async(
        self,
        request: blockchain_models.QueryCreditTransferIssuebytimeRequest,
    ) -> blockchain_models.QueryCreditTransferIssuebytimeResponse:
        """
        Description: 物流金融根据时间查询信用凭证信息
        Summary: 物流金融根据时间查询信用流转信息
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_credit_transfer_issuebytime_ex_async(request, headers, runtime)

    def query_credit_transfer_issuebytime_ex(
        self,
        request: blockchain_models.QueryCreditTransferIssuebytimeRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryCreditTransferIssuebytimeResponse:
        """
        Description: 物流金融根据时间查询信用凭证信息
        Summary: 物流金融根据时间查询信用流转信息
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryCreditTransferIssuebytimeResponse().from_map(
            self.do_request('1.0', 'baas.credit.transfer.issuebytime.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_credit_transfer_issuebytime_ex_async(
        self,
        request: blockchain_models.QueryCreditTransferIssuebytimeRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryCreditTransferIssuebytimeResponse:
        """
        Description: 物流金融根据时间查询信用凭证信息
        Summary: 物流金融根据时间查询信用流转信息
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryCreditTransferIssuebytimeResponse().from_map(
            await self.do_request_async('1.0', 'baas.credit.transfer.issuebytime.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_credit_transfer_statement(
        self,
        request: blockchain_models.QueryCreditTransferStatementRequest,
    ) -> blockchain_models.QueryCreditTransferStatementResponse:
        """
        Description: 物流金融信用流转流水查询
        Summary: 物流金融信用流转流水查询
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_credit_transfer_statement_ex(request, headers, runtime)

    async def query_credit_transfer_statement_async(
        self,
        request: blockchain_models.QueryCreditTransferStatementRequest,
    ) -> blockchain_models.QueryCreditTransferStatementResponse:
        """
        Description: 物流金融信用流转流水查询
        Summary: 物流金融信用流转流水查询
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_credit_transfer_statement_ex_async(request, headers, runtime)

    def query_credit_transfer_statement_ex(
        self,
        request: blockchain_models.QueryCreditTransferStatementRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryCreditTransferStatementResponse:
        """
        Description: 物流金融信用流转流水查询
        Summary: 物流金融信用流转流水查询
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryCreditTransferStatementResponse().from_map(
            self.do_request('1.0', 'baas.credit.transfer.statement.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_credit_transfer_statement_ex_async(
        self,
        request: blockchain_models.QueryCreditTransferStatementRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryCreditTransferStatementResponse:
        """
        Description: 物流金融信用流转流水查询
        Summary: 物流金融信用流转流水查询
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryCreditTransferStatementResponse().from_map(
            await self.do_request_async('1.0', 'baas.credit.transfer.statement.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def callback_credit_transfer(
        self,
        request: blockchain_models.CallbackCreditTransferRequest,
    ) -> blockchain_models.CallbackCreditTransferResponse:
        """
        Description: 物流金融信用流转主站系统回调
        Summary: 物流金融信用流转主站系统回调
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.callback_credit_transfer_ex(request, headers, runtime)

    async def callback_credit_transfer_async(
        self,
        request: blockchain_models.CallbackCreditTransferRequest,
    ) -> blockchain_models.CallbackCreditTransferResponse:
        """
        Description: 物流金融信用流转主站系统回调
        Summary: 物流金融信用流转主站系统回调
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.callback_credit_transfer_ex_async(request, headers, runtime)

    def callback_credit_transfer_ex(
        self,
        request: blockchain_models.CallbackCreditTransferRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CallbackCreditTransferResponse:
        """
        Description: 物流金融信用流转主站系统回调
        Summary: 物流金融信用流转主站系统回调
        """
        UtilClient.validate_model(request)
        return blockchain_models.CallbackCreditTransferResponse().from_map(
            self.do_request('1.0', 'baas.credit.transfer.callback', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def callback_credit_transfer_ex_async(
        self,
        request: blockchain_models.CallbackCreditTransferRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CallbackCreditTransferResponse:
        """
        Description: 物流金融信用流转主站系统回调
        Summary: 物流金融信用流转主站系统回调
        """
        UtilClient.validate_model(request)
        return blockchain_models.CallbackCreditTransferResponse().from_map(
            await self.do_request_async('1.0', 'baas.credit.transfer.callback', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def push_auth_user_vc(
        self,
        request: blockchain_models.PushAuthUserVcRequest,
    ) -> blockchain_models.PushAuthUserVcResponse:
        """
        Description: 外部业务方可以给DIS的C端小程序用户颁发声明（VC）用户特定场景
        Summary: 推送业务方给用户颁发的声明内容
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.push_auth_user_vc_ex(request, headers, runtime)

    async def push_auth_user_vc_async(
        self,
        request: blockchain_models.PushAuthUserVcRequest,
    ) -> blockchain_models.PushAuthUserVcResponse:
        """
        Description: 外部业务方可以给DIS的C端小程序用户颁发声明（VC）用户特定场景
        Summary: 推送业务方给用户颁发的声明内容
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.push_auth_user_vc_ex_async(request, headers, runtime)

    def push_auth_user_vc_ex(
        self,
        request: blockchain_models.PushAuthUserVcRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.PushAuthUserVcResponse:
        """
        Description: 外部业务方可以给DIS的C端小程序用户颁发声明（VC）用户特定场景
        Summary: 推送业务方给用户颁发的声明内容
        """
        UtilClient.validate_model(request)
        return blockchain_models.PushAuthUserVcResponse().from_map(
            self.do_request('1.0', 'baas.auth.user.vc.push', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def push_auth_user_vc_ex_async(
        self,
        request: blockchain_models.PushAuthUserVcRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.PushAuthUserVcResponse:
        """
        Description: 外部业务方可以给DIS的C端小程序用户颁发声明（VC）用户特定场景
        Summary: 推送业务方给用户颁发的声明内容
        """
        UtilClient.validate_model(request)
        return blockchain_models.PushAuthUserVcResponse().from_map(
            await self.do_request_async('1.0', 'baas.auth.user.vc.push', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def push_auth_claim_vc(
        self,
        request: blockchain_models.PushAuthClaimVcRequest,
    ) -> blockchain_models.PushAuthClaimVcResponse:
        """
        Description: 业务方推送需要用户使用数字身份did授权确认的声明，推送后可根据自定义的业务id（biz_id）来查询状态（另提供接口），进而获取用户授权后的声明。
        Summary: 推送需要用户端授权的业务声明
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.push_auth_claim_vc_ex(request, headers, runtime)

    async def push_auth_claim_vc_async(
        self,
        request: blockchain_models.PushAuthClaimVcRequest,
    ) -> blockchain_models.PushAuthClaimVcResponse:
        """
        Description: 业务方推送需要用户使用数字身份did授权确认的声明，推送后可根据自定义的业务id（biz_id）来查询状态（另提供接口），进而获取用户授权后的声明。
        Summary: 推送需要用户端授权的业务声明
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.push_auth_claim_vc_ex_async(request, headers, runtime)

    def push_auth_claim_vc_ex(
        self,
        request: blockchain_models.PushAuthClaimVcRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.PushAuthClaimVcResponse:
        """
        Description: 业务方推送需要用户使用数字身份did授权确认的声明，推送后可根据自定义的业务id（biz_id）来查询状态（另提供接口），进而获取用户授权后的声明。
        Summary: 推送需要用户端授权的业务声明
        """
        UtilClient.validate_model(request)
        return blockchain_models.PushAuthClaimVcResponse().from_map(
            self.do_request('1.0', 'baas.auth.claim.vc.push', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def push_auth_claim_vc_ex_async(
        self,
        request: blockchain_models.PushAuthClaimVcRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.PushAuthClaimVcResponse:
        """
        Description: 业务方推送需要用户使用数字身份did授权确认的声明，推送后可根据自定义的业务id（biz_id）来查询状态（另提供接口），进而获取用户授权后的声明。
        Summary: 推送需要用户端授权的业务声明
        """
        UtilClient.validate_model(request)
        return blockchain_models.PushAuthClaimVcResponse().from_map(
            await self.do_request_async('1.0', 'baas.auth.claim.vc.push', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def pull_auth_user_did(
        self,
        request: blockchain_models.PullAuthUserDidRequest,
    ) -> blockchain_models.PullAuthUserDidResponse:
        """
        Description: 业务方通过提供二维码的方式引导用户支付宝扫描创建did，然后业务方通过此接口可查询用户新建的did
        Summary: 通过biz_id获取用户的did
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.pull_auth_user_did_ex(request, headers, runtime)

    async def pull_auth_user_did_async(
        self,
        request: blockchain_models.PullAuthUserDidRequest,
    ) -> blockchain_models.PullAuthUserDidResponse:
        """
        Description: 业务方通过提供二维码的方式引导用户支付宝扫描创建did，然后业务方通过此接口可查询用户新建的did
        Summary: 通过biz_id获取用户的did
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.pull_auth_user_did_ex_async(request, headers, runtime)

    def pull_auth_user_did_ex(
        self,
        request: blockchain_models.PullAuthUserDidRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.PullAuthUserDidResponse:
        """
        Description: 业务方通过提供二维码的方式引导用户支付宝扫描创建did，然后业务方通过此接口可查询用户新建的did
        Summary: 通过biz_id获取用户的did
        """
        UtilClient.validate_model(request)
        return blockchain_models.PullAuthUserDidResponse().from_map(
            self.do_request('1.0', 'baas.auth.user.did.pull', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def pull_auth_user_did_ex_async(
        self,
        request: blockchain_models.PullAuthUserDidRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.PullAuthUserDidResponse:
        """
        Description: 业务方通过提供二维码的方式引导用户支付宝扫描创建did，然后业务方通过此接口可查询用户新建的did
        Summary: 通过biz_id获取用户的did
        """
        UtilClient.validate_model(request)
        return blockchain_models.PullAuthUserDidResponse().from_map(
            await self.do_request_async('1.0', 'baas.auth.user.did.pull', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def pull_auth_claim_vc(
        self,
        request: blockchain_models.PullAuthClaimVcRequest,
    ) -> blockchain_models.PullAuthClaimVcResponse:
        """
        Description: 业务方通过此接口可以查询，申请用户授权的声明状态，如果用户已授权即可获取到授权后的声明（vc）内容。
        Summary: 获取申请用户声明的授权结果
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.pull_auth_claim_vc_ex(request, headers, runtime)

    async def pull_auth_claim_vc_async(
        self,
        request: blockchain_models.PullAuthClaimVcRequest,
    ) -> blockchain_models.PullAuthClaimVcResponse:
        """
        Description: 业务方通过此接口可以查询，申请用户授权的声明状态，如果用户已授权即可获取到授权后的声明（vc）内容。
        Summary: 获取申请用户声明的授权结果
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.pull_auth_claim_vc_ex_async(request, headers, runtime)

    def pull_auth_claim_vc_ex(
        self,
        request: blockchain_models.PullAuthClaimVcRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.PullAuthClaimVcResponse:
        """
        Description: 业务方通过此接口可以查询，申请用户授权的声明状态，如果用户已授权即可获取到授权后的声明（vc）内容。
        Summary: 获取申请用户声明的授权结果
        """
        UtilClient.validate_model(request)
        return blockchain_models.PullAuthClaimVcResponse().from_map(
            self.do_request('1.0', 'baas.auth.claim.vc.pull', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def pull_auth_claim_vc_ex_async(
        self,
        request: blockchain_models.PullAuthClaimVcRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.PullAuthClaimVcResponse:
        """
        Description: 业务方通过此接口可以查询，申请用户授权的声明状态，如果用户已授权即可获取到授权后的声明（vc）内容。
        Summary: 获取申请用户声明的授权结果
        """
        UtilClient.validate_model(request)
        return blockchain_models.PullAuthClaimVcResponse().from_map(
            await self.do_request_async('1.0', 'baas.auth.claim.vc.pull', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def create_auth_user_did(
        self,
        request: blockchain_models.CreateAuthUserDidRequest,
    ) -> blockchain_models.CreateAuthUserDidResponse:
        """
        Description: 业务系统通过授权宝服务帮忙给用户创建did，此接口访问需预先在授权宝配置白名单开通。
        Summary: 给用户创建did，需要指定userId
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.create_auth_user_did_ex(request, headers, runtime)

    async def create_auth_user_did_async(
        self,
        request: blockchain_models.CreateAuthUserDidRequest,
    ) -> blockchain_models.CreateAuthUserDidResponse:
        """
        Description: 业务系统通过授权宝服务帮忙给用户创建did，此接口访问需预先在授权宝配置白名单开通。
        Summary: 给用户创建did，需要指定userId
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.create_auth_user_did_ex_async(request, headers, runtime)

    def create_auth_user_did_ex(
        self,
        request: blockchain_models.CreateAuthUserDidRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateAuthUserDidResponse:
        """
        Description: 业务系统通过授权宝服务帮忙给用户创建did，此接口访问需预先在授权宝配置白名单开通。
        Summary: 给用户创建did，需要指定userId
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateAuthUserDidResponse().from_map(
            self.do_request('1.0', 'baas.auth.user.did.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def create_auth_user_did_ex_async(
        self,
        request: blockchain_models.CreateAuthUserDidRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateAuthUserDidResponse:
        """
        Description: 业务系统通过授权宝服务帮忙给用户创建did，此接口访问需预先在授权宝配置白名单开通。
        Summary: 给用户创建did，需要指定userId
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateAuthUserDidResponse().from_map(
            await self.do_request_async('1.0', 'baas.auth.user.did.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def create_auth_corporate_did(
        self,
        request: blockchain_models.CreateAuthCorporateDidRequest,
    ) -> blockchain_models.CreateAuthCorporateDidResponse:
        """
        Description: 给企业DID创建DID，通常场景为对授权宝服务的开通，调用方对企业有认证能力。
        Summary: 创建企业DID，开通授权宝服务
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.create_auth_corporate_did_ex(request, headers, runtime)

    async def create_auth_corporate_did_async(
        self,
        request: blockchain_models.CreateAuthCorporateDidRequest,
    ) -> blockchain_models.CreateAuthCorporateDidResponse:
        """
        Description: 给企业DID创建DID，通常场景为对授权宝服务的开通，调用方对企业有认证能力。
        Summary: 创建企业DID，开通授权宝服务
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.create_auth_corporate_did_ex_async(request, headers, runtime)

    def create_auth_corporate_did_ex(
        self,
        request: blockchain_models.CreateAuthCorporateDidRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateAuthCorporateDidResponse:
        """
        Description: 给企业DID创建DID，通常场景为对授权宝服务的开通，调用方对企业有认证能力。
        Summary: 创建企业DID，开通授权宝服务
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateAuthCorporateDidResponse().from_map(
            self.do_request('1.0', 'baas.auth.corporate.did.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def create_auth_corporate_did_ex_async(
        self,
        request: blockchain_models.CreateAuthCorporateDidRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateAuthCorporateDidResponse:
        """
        Description: 给企业DID创建DID，通常场景为对授权宝服务的开通，调用方对企业有认证能力。
        Summary: 创建企业DID，开通授权宝服务
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateAuthCorporateDidResponse().from_map(
            await self.do_request_async('1.0', 'baas.auth.corporate.did.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def pull_auth_webpage_vc(
        self,
        request: blockchain_models.PullAuthWebpageVcRequest,
    ) -> blockchain_models.PullAuthWebpageVcResponse:
        """
        Description: 业务方的C端用户授权颁发“可验证声明”（简称VC）之后，就会异步推送结果给相关业务服务端，如果相关业务服务端没有接收到，或者本地缓存过期，则可以通过此接口到授权宝再次查询目标可验证声明结果情况。
        Summary: 查询目标可验证声明结果
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.pull_auth_webpage_vc_ex(request, headers, runtime)

    async def pull_auth_webpage_vc_async(
        self,
        request: blockchain_models.PullAuthWebpageVcRequest,
    ) -> blockchain_models.PullAuthWebpageVcResponse:
        """
        Description: 业务方的C端用户授权颁发“可验证声明”（简称VC）之后，就会异步推送结果给相关业务服务端，如果相关业务服务端没有接收到，或者本地缓存过期，则可以通过此接口到授权宝再次查询目标可验证声明结果情况。
        Summary: 查询目标可验证声明结果
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.pull_auth_webpage_vc_ex_async(request, headers, runtime)

    def pull_auth_webpage_vc_ex(
        self,
        request: blockchain_models.PullAuthWebpageVcRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.PullAuthWebpageVcResponse:
        """
        Description: 业务方的C端用户授权颁发“可验证声明”（简称VC）之后，就会异步推送结果给相关业务服务端，如果相关业务服务端没有接收到，或者本地缓存过期，则可以通过此接口到授权宝再次查询目标可验证声明结果情况。
        Summary: 查询目标可验证声明结果
        """
        UtilClient.validate_model(request)
        return blockchain_models.PullAuthWebpageVcResponse().from_map(
            self.do_request('1.0', 'baas.auth.webpage.vc.pull', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def pull_auth_webpage_vc_ex_async(
        self,
        request: blockchain_models.PullAuthWebpageVcRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.PullAuthWebpageVcResponse:
        """
        Description: 业务方的C端用户授权颁发“可验证声明”（简称VC）之后，就会异步推送结果给相关业务服务端，如果相关业务服务端没有接收到，或者本地缓存过期，则可以通过此接口到授权宝再次查询目标可验证声明结果情况。
        Summary: 查询目标可验证声明结果
        """
        UtilClient.validate_model(request)
        return blockchain_models.PullAuthWebpageVcResponse().from_map(
            await self.do_request_async('1.0', 'baas.auth.webpage.vc.pull', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def pull_auth_webpage_url(
        self,
        request: blockchain_models.PullAuthWebpageUrlRequest,
    ) -> blockchain_models.PullAuthWebpageUrlResponse:
        """
        Description: 此接口提供了授权宝这边可用的H5页面的Url，此Url会携带一些参数：授权宝鉴权token(JWT机制生成，内部使用)、bizId(接口入参带入)
        Summary: 获取授权宝侧的H5授权Url
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.pull_auth_webpage_url_ex(request, headers, runtime)

    async def pull_auth_webpage_url_async(
        self,
        request: blockchain_models.PullAuthWebpageUrlRequest,
    ) -> blockchain_models.PullAuthWebpageUrlResponse:
        """
        Description: 此接口提供了授权宝这边可用的H5页面的Url，此Url会携带一些参数：授权宝鉴权token(JWT机制生成，内部使用)、bizId(接口入参带入)
        Summary: 获取授权宝侧的H5授权Url
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.pull_auth_webpage_url_ex_async(request, headers, runtime)

    def pull_auth_webpage_url_ex(
        self,
        request: blockchain_models.PullAuthWebpageUrlRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.PullAuthWebpageUrlResponse:
        """
        Description: 此接口提供了授权宝这边可用的H5页面的Url，此Url会携带一些参数：授权宝鉴权token(JWT机制生成，内部使用)、bizId(接口入参带入)
        Summary: 获取授权宝侧的H5授权Url
        """
        UtilClient.validate_model(request)
        return blockchain_models.PullAuthWebpageUrlResponse().from_map(
            self.do_request('1.0', 'baas.auth.webpage.url.pull', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def pull_auth_webpage_url_ex_async(
        self,
        request: blockchain_models.PullAuthWebpageUrlRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.PullAuthWebpageUrlResponse:
        """
        Description: 此接口提供了授权宝这边可用的H5页面的Url，此Url会携带一些参数：授权宝鉴权token(JWT机制生成，内部使用)、bizId(接口入参带入)
        Summary: 获取授权宝侧的H5授权Url
        """
        UtilClient.validate_model(request)
        return blockchain_models.PullAuthWebpageUrlResponse().from_map(
            await self.do_request_async('1.0', 'baas.auth.webpage.url.pull', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def start_auth_vc_auth(
        self,
        request: blockchain_models.StartAuthVcAuthRequest,
    ) -> blockchain_models.StartAuthVcAuthResponse:
        """
        Description: 在一些业务场景，指定可验证声明之后，根据bizType的类型，直接发生代理颁发可验证声明的操作。
        Summary: 给定声明内容并颁发声明
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.start_auth_vc_auth_ex(request, headers, runtime)

    async def start_auth_vc_auth_async(
        self,
        request: blockchain_models.StartAuthVcAuthRequest,
    ) -> blockchain_models.StartAuthVcAuthResponse:
        """
        Description: 在一些业务场景，指定可验证声明之后，根据bizType的类型，直接发生代理颁发可验证声明的操作。
        Summary: 给定声明内容并颁发声明
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.start_auth_vc_auth_ex_async(request, headers, runtime)

    def start_auth_vc_auth_ex(
        self,
        request: blockchain_models.StartAuthVcAuthRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartAuthVcAuthResponse:
        """
        Description: 在一些业务场景，指定可验证声明之后，根据bizType的类型，直接发生代理颁发可验证声明的操作。
        Summary: 给定声明内容并颁发声明
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartAuthVcAuthResponse().from_map(
            self.do_request('1.0', 'baas.auth.vc.auth.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def start_auth_vc_auth_ex_async(
        self,
        request: blockchain_models.StartAuthVcAuthRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartAuthVcAuthResponse:
        """
        Description: 在一些业务场景，指定可验证声明之后，根据bizType的类型，直接发生代理颁发可验证声明的操作。
        Summary: 给定声明内容并颁发声明
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartAuthVcAuthResponse().from_map(
            await self.do_request_async('1.0', 'baas.auth.vc.auth.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def start_auth_vc_share(
        self,
        request: blockchain_models.StartAuthVcShareRequest,
    ) -> blockchain_models.StartAuthVcShareResponse:
        """
        Description: 可验证声明（VC）的拥有者（vcContent中的subject）可以将声明分享权限给其它的DID。
        Summary: 将目标的声明内容，分享权限给目标的DID
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.start_auth_vc_share_ex(request, headers, runtime)

    async def start_auth_vc_share_async(
        self,
        request: blockchain_models.StartAuthVcShareRequest,
    ) -> blockchain_models.StartAuthVcShareResponse:
        """
        Description: 可验证声明（VC）的拥有者（vcContent中的subject）可以将声明分享权限给其它的DID。
        Summary: 将目标的声明内容，分享权限给目标的DID
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.start_auth_vc_share_ex_async(request, headers, runtime)

    def start_auth_vc_share_ex(
        self,
        request: blockchain_models.StartAuthVcShareRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartAuthVcShareResponse:
        """
        Description: 可验证声明（VC）的拥有者（vcContent中的subject）可以将声明分享权限给其它的DID。
        Summary: 将目标的声明内容，分享权限给目标的DID
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartAuthVcShareResponse().from_map(
            self.do_request('1.0', 'baas.auth.vc.share.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def start_auth_vc_share_ex_async(
        self,
        request: blockchain_models.StartAuthVcShareRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartAuthVcShareResponse:
        """
        Description: 可验证声明（VC）的拥有者（vcContent中的subject）可以将声明分享权限给其它的DID。
        Summary: 将目标的声明内容，分享权限给目标的DID
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartAuthVcShareResponse().from_map(
            await self.do_request_async('1.0', 'baas.auth.vc.share.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_auth_vc_content(
        self,
        request: blockchain_models.QueryAuthVcContentRequest,
    ) -> blockchain_models.QueryAuthVcContentResponse:
        """
        Description: 通过指定可验证声明id，获取目标可验证声明内容，需要可验证声明的拥有者分享声明才可查询，如果没有权限则获取失败。
        Summary: 获取目标可验证声明内容
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_auth_vc_content_ex(request, headers, runtime)

    async def query_auth_vc_content_async(
        self,
        request: blockchain_models.QueryAuthVcContentRequest,
    ) -> blockchain_models.QueryAuthVcContentResponse:
        """
        Description: 通过指定可验证声明id，获取目标可验证声明内容，需要可验证声明的拥有者分享声明才可查询，如果没有权限则获取失败。
        Summary: 获取目标可验证声明内容
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_auth_vc_content_ex_async(request, headers, runtime)

    def query_auth_vc_content_ex(
        self,
        request: blockchain_models.QueryAuthVcContentRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryAuthVcContentResponse:
        """
        Description: 通过指定可验证声明id，获取目标可验证声明内容，需要可验证声明的拥有者分享声明才可查询，如果没有权限则获取失败。
        Summary: 获取目标可验证声明内容
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryAuthVcContentResponse().from_map(
            self.do_request('1.0', 'baas.auth.vc.content.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_auth_vc_content_ex_async(
        self,
        request: blockchain_models.QueryAuthVcContentRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryAuthVcContentResponse:
        """
        Description: 通过指定可验证声明id，获取目标可验证声明内容，需要可验证声明的拥有者分享声明才可查询，如果没有权限则获取失败。
        Summary: 获取目标可验证声明内容
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryAuthVcContentResponse().from_map(
            await self.do_request_async('1.0', 'baas.auth.vc.content.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def create_auth_userinfo_did(
        self,
        request: blockchain_models.CreateAuthUserinfoDidRequest,
    ) -> blockchain_models.CreateAuthUserinfoDidResponse:
        """
        Description: 业务系统通过授权宝服务帮忙给C类用户创建did，此接口访问需预先在授权宝配置白名单开通。
        Summary: 给C类用户建did，需要指定user信息
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.create_auth_userinfo_did_ex(request, headers, runtime)

    async def create_auth_userinfo_did_async(
        self,
        request: blockchain_models.CreateAuthUserinfoDidRequest,
    ) -> blockchain_models.CreateAuthUserinfoDidResponse:
        """
        Description: 业务系统通过授权宝服务帮忙给C类用户创建did，此接口访问需预先在授权宝配置白名单开通。
        Summary: 给C类用户建did，需要指定user信息
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.create_auth_userinfo_did_ex_async(request, headers, runtime)

    def create_auth_userinfo_did_ex(
        self,
        request: blockchain_models.CreateAuthUserinfoDidRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateAuthUserinfoDidResponse:
        """
        Description: 业务系统通过授权宝服务帮忙给C类用户创建did，此接口访问需预先在授权宝配置白名单开通。
        Summary: 给C类用户建did，需要指定user信息
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateAuthUserinfoDidResponse().from_map(
            self.do_request('1.0', 'baas.auth.userinfo.did.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def create_auth_userinfo_did_ex_async(
        self,
        request: blockchain_models.CreateAuthUserinfoDidRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateAuthUserinfoDidResponse:
        """
        Description: 业务系统通过授权宝服务帮忙给C类用户创建did，此接口访问需预先在授权宝配置白名单开通。
        Summary: 给C类用户建did，需要指定user信息
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateAuthUserinfoDidResponse().from_map(
            await self.do_request_async('1.0', 'baas.auth.userinfo.did.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def start_auth_vc_revoke(
        self,
        request: blockchain_models.StartAuthVcRevokeRequest,
    ) -> blockchain_models.StartAuthVcRevokeResponse:
        """
        Description: 声明的持有者可以吊销一个已颁发的可验证声明(VC)
        Summary: 吊销已颁发声明
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.start_auth_vc_revoke_ex(request, headers, runtime)

    async def start_auth_vc_revoke_async(
        self,
        request: blockchain_models.StartAuthVcRevokeRequest,
    ) -> blockchain_models.StartAuthVcRevokeResponse:
        """
        Description: 声明的持有者可以吊销一个已颁发的可验证声明(VC)
        Summary: 吊销已颁发声明
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.start_auth_vc_revoke_ex_async(request, headers, runtime)

    def start_auth_vc_revoke_ex(
        self,
        request: blockchain_models.StartAuthVcRevokeRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartAuthVcRevokeResponse:
        """
        Description: 声明的持有者可以吊销一个已颁发的可验证声明(VC)
        Summary: 吊销已颁发声明
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartAuthVcRevokeResponse().from_map(
            self.do_request('1.0', 'baas.auth.vc.revoke.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def start_auth_vc_revoke_ex_async(
        self,
        request: blockchain_models.StartAuthVcRevokeRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartAuthVcRevokeResponse:
        """
        Description: 声明的持有者可以吊销一个已颁发的可验证声明(VC)
        Summary: 吊销已颁发声明
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartAuthVcRevokeResponse().from_map(
            await self.do_request_async('1.0', 'baas.auth.vc.revoke.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def start_auth_vc_give(
        self,
        request: blockchain_models.StartAuthVcGiveRequest,
    ) -> blockchain_models.StartAuthVcGiveResponse:
        """
        Description: 将可验证声明内的数据资产内容赠送给目标的did
        Summary: 将vc赠送给一个目标did
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.start_auth_vc_give_ex(request, headers, runtime)

    async def start_auth_vc_give_async(
        self,
        request: blockchain_models.StartAuthVcGiveRequest,
    ) -> blockchain_models.StartAuthVcGiveResponse:
        """
        Description: 将可验证声明内的数据资产内容赠送给目标的did
        Summary: 将vc赠送给一个目标did
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.start_auth_vc_give_ex_async(request, headers, runtime)

    def start_auth_vc_give_ex(
        self,
        request: blockchain_models.StartAuthVcGiveRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartAuthVcGiveResponse:
        """
        Description: 将可验证声明内的数据资产内容赠送给目标的did
        Summary: 将vc赠送给一个目标did
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartAuthVcGiveResponse().from_map(
            self.do_request('1.0', 'baas.auth.vc.give.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def start_auth_vc_give_ex_async(
        self,
        request: blockchain_models.StartAuthVcGiveRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartAuthVcGiveResponse:
        """
        Description: 将可验证声明内的数据资产内容赠送给目标的did
        Summary: 将vc赠送给一个目标did
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartAuthVcGiveResponse().from_map(
            await self.do_request_async('1.0', 'baas.auth.vc.give.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def start_auth_vc_sharebatch(
        self,
        request: blockchain_models.StartAuthVcSharebatchRequest,
    ) -> blockchain_models.StartAuthVcSharebatchResponse:
        """
        Description: 提供批量分享可验证声明到目标did
        Summary: 批量分享VC内容
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.start_auth_vc_sharebatch_ex(request, headers, runtime)

    async def start_auth_vc_sharebatch_async(
        self,
        request: blockchain_models.StartAuthVcSharebatchRequest,
    ) -> blockchain_models.StartAuthVcSharebatchResponse:
        """
        Description: 提供批量分享可验证声明到目标did
        Summary: 批量分享VC内容
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.start_auth_vc_sharebatch_ex_async(request, headers, runtime)

    def start_auth_vc_sharebatch_ex(
        self,
        request: blockchain_models.StartAuthVcSharebatchRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartAuthVcSharebatchResponse:
        """
        Description: 提供批量分享可验证声明到目标did
        Summary: 批量分享VC内容
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartAuthVcSharebatchResponse().from_map(
            self.do_request('1.0', 'baas.auth.vc.sharebatch.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def start_auth_vc_sharebatch_ex_async(
        self,
        request: blockchain_models.StartAuthVcSharebatchRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartAuthVcSharebatchResponse:
        """
        Description: 提供批量分享可验证声明到目标did
        Summary: 批量分享VC内容
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartAuthVcSharebatchResponse().from_map(
            await self.do_request_async('1.0', 'baas.auth.vc.sharebatch.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def start_auth_corporate_sign(
        self,
        request: blockchain_models.StartAuthCorporateSignRequest,
    ) -> blockchain_models.StartAuthCorporateSignResponse:
        """
        Description: 如果机构没有接入网关能力需要合作方代理在授权宝管理签名能力，可使用此接口。
        初始申请创建此corp did的调用方，有权限申请签名。
        Summary: 代理签名
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.start_auth_corporate_sign_ex(request, headers, runtime)

    async def start_auth_corporate_sign_async(
        self,
        request: blockchain_models.StartAuthCorporateSignRequest,
    ) -> blockchain_models.StartAuthCorporateSignResponse:
        """
        Description: 如果机构没有接入网关能力需要合作方代理在授权宝管理签名能力，可使用此接口。
        初始申请创建此corp did的调用方，有权限申请签名。
        Summary: 代理签名
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.start_auth_corporate_sign_ex_async(request, headers, runtime)

    def start_auth_corporate_sign_ex(
        self,
        request: blockchain_models.StartAuthCorporateSignRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartAuthCorporateSignResponse:
        """
        Description: 如果机构没有接入网关能力需要合作方代理在授权宝管理签名能力，可使用此接口。
        初始申请创建此corp did的调用方，有权限申请签名。
        Summary: 代理签名
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartAuthCorporateSignResponse().from_map(
            self.do_request('1.0', 'baas.auth.corporate.sign.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def start_auth_corporate_sign_ex_async(
        self,
        request: blockchain_models.StartAuthCorporateSignRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartAuthCorporateSignResponse:
        """
        Description: 如果机构没有接入网关能力需要合作方代理在授权宝管理签名能力，可使用此接口。
        初始申请创建此corp did的调用方，有权限申请签名。
        Summary: 代理签名
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartAuthCorporateSignResponse().from_map(
            await self.do_request_async('1.0', 'baas.auth.corporate.sign.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def start_auth_vc_batchauth(
        self,
        request: blockchain_models.StartAuthVcBatchauthRequest,
    ) -> blockchain_models.StartAuthVcBatchauthResponse:
        """
        Description: 在一些业务场景，指定可验证声明之后，提交颁发可验证声明的操作。当前接口支持批量颁发声明，通常支持对多机构的数据授权。
        Summary: 批量给定声明内容颁发声明，并上链存证
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.start_auth_vc_batchauth_ex(request, headers, runtime)

    async def start_auth_vc_batchauth_async(
        self,
        request: blockchain_models.StartAuthVcBatchauthRequest,
    ) -> blockchain_models.StartAuthVcBatchauthResponse:
        """
        Description: 在一些业务场景，指定可验证声明之后，提交颁发可验证声明的操作。当前接口支持批量颁发声明，通常支持对多机构的数据授权。
        Summary: 批量给定声明内容颁发声明，并上链存证
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.start_auth_vc_batchauth_ex_async(request, headers, runtime)

    def start_auth_vc_batchauth_ex(
        self,
        request: blockchain_models.StartAuthVcBatchauthRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartAuthVcBatchauthResponse:
        """
        Description: 在一些业务场景，指定可验证声明之后，提交颁发可验证声明的操作。当前接口支持批量颁发声明，通常支持对多机构的数据授权。
        Summary: 批量给定声明内容颁发声明，并上链存证
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartAuthVcBatchauthResponse().from_map(
            self.do_request('1.0', 'baas.auth.vc.batchauth.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def start_auth_vc_batchauth_ex_async(
        self,
        request: blockchain_models.StartAuthVcBatchauthRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartAuthVcBatchauthResponse:
        """
        Description: 在一些业务场景，指定可验证声明之后，提交颁发可验证声明的操作。当前接口支持批量颁发声明，通常支持对多机构的数据授权。
        Summary: 批量给定声明内容颁发声明，并上链存证
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartAuthVcBatchauthResponse().from_map(
            await self.do_request_async('1.0', 'baas.auth.vc.batchauth.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def start_auth_vc_replace(
        self,
        request: blockchain_models.StartAuthVcReplaceRequest,
    ) -> blockchain_models.StartAuthVcReplaceResponse:
        """
        Description: 将已颁发的可验证声明进行吊销，然后重新颁发一个新的可验证声明用于代替原有的业务语义的可验证声明。
        Summary: 将已颁发的可验证声明进行重置替换
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.start_auth_vc_replace_ex(request, headers, runtime)

    async def start_auth_vc_replace_async(
        self,
        request: blockchain_models.StartAuthVcReplaceRequest,
    ) -> blockchain_models.StartAuthVcReplaceResponse:
        """
        Description: 将已颁发的可验证声明进行吊销，然后重新颁发一个新的可验证声明用于代替原有的业务语义的可验证声明。
        Summary: 将已颁发的可验证声明进行重置替换
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.start_auth_vc_replace_ex_async(request, headers, runtime)

    def start_auth_vc_replace_ex(
        self,
        request: blockchain_models.StartAuthVcReplaceRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartAuthVcReplaceResponse:
        """
        Description: 将已颁发的可验证声明进行吊销，然后重新颁发一个新的可验证声明用于代替原有的业务语义的可验证声明。
        Summary: 将已颁发的可验证声明进行重置替换
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartAuthVcReplaceResponse().from_map(
            self.do_request('1.0', 'baas.auth.vc.replace.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def start_auth_vc_replace_ex_async(
        self,
        request: blockchain_models.StartAuthVcReplaceRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartAuthVcReplaceResponse:
        """
        Description: 将已颁发的可验证声明进行吊销，然后重新颁发一个新的可验证声明用于代替原有的业务语义的可验证声明。
        Summary: 将已颁发的可验证声明进行重置替换
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartAuthVcReplaceResponse().from_map(
            await self.do_request_async('1.0', 'baas.auth.vc.replace.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def push_auth_insurance_policy(
        self,
        request: blockchain_models.PushAuthInsurancePolicyRequest,
    ) -> blockchain_models.PushAuthInsurancePolicyResponse:
        """
        Description: 推送保单信息
        Summary: 推送保单信息
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.push_auth_insurance_policy_ex(request, headers, runtime)

    async def push_auth_insurance_policy_async(
        self,
        request: blockchain_models.PushAuthInsurancePolicyRequest,
    ) -> blockchain_models.PushAuthInsurancePolicyResponse:
        """
        Description: 推送保单信息
        Summary: 推送保单信息
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.push_auth_insurance_policy_ex_async(request, headers, runtime)

    def push_auth_insurance_policy_ex(
        self,
        request: blockchain_models.PushAuthInsurancePolicyRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.PushAuthInsurancePolicyResponse:
        """
        Description: 推送保单信息
        Summary: 推送保单信息
        """
        UtilClient.validate_model(request)
        return blockchain_models.PushAuthInsurancePolicyResponse().from_map(
            self.do_request('1.0', 'baas.auth.insurance.policy.push', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def push_auth_insurance_policy_ex_async(
        self,
        request: blockchain_models.PushAuthInsurancePolicyRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.PushAuthInsurancePolicyResponse:
        """
        Description: 推送保单信息
        Summary: 推送保单信息
        """
        UtilClient.validate_model(request)
        return blockchain_models.PushAuthInsurancePolicyResponse().from_map(
            await self.do_request_async('1.0', 'baas.auth.insurance.policy.push', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def get_auth_frontend_accesstoken(
        self,
        request: blockchain_models.GetAuthFrontendAccesstokenRequest,
    ) -> blockchain_models.GetAuthFrontendAccesstokenResponse:
        """
        Description: 获取前端sdk使用的token
        Summary: 获取前端sdk使用的token
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.get_auth_frontend_accesstoken_ex(request, headers, runtime)

    async def get_auth_frontend_accesstoken_async(
        self,
        request: blockchain_models.GetAuthFrontendAccesstokenRequest,
    ) -> blockchain_models.GetAuthFrontendAccesstokenResponse:
        """
        Description: 获取前端sdk使用的token
        Summary: 获取前端sdk使用的token
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.get_auth_frontend_accesstoken_ex_async(request, headers, runtime)

    def get_auth_frontend_accesstoken_ex(
        self,
        request: blockchain_models.GetAuthFrontendAccesstokenRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.GetAuthFrontendAccesstokenResponse:
        """
        Description: 获取前端sdk使用的token
        Summary: 获取前端sdk使用的token
        """
        UtilClient.validate_model(request)
        return blockchain_models.GetAuthFrontendAccesstokenResponse().from_map(
            self.do_request('1.0', 'baas.auth.frontend.accesstoken.get', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def get_auth_frontend_accesstoken_ex_async(
        self,
        request: blockchain_models.GetAuthFrontendAccesstokenRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.GetAuthFrontendAccesstokenResponse:
        """
        Description: 获取前端sdk使用的token
        Summary: 获取前端sdk使用的token
        """
        UtilClient.validate_model(request)
        return blockchain_models.GetAuthFrontendAccesstokenResponse().from_map(
            await self.do_request_async('1.0', 'baas.auth.frontend.accesstoken.get', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def create_auth_claim_url(
        self,
        request: blockchain_models.CreateAuthClaimUrlRequest,
    ) -> blockchain_models.CreateAuthClaimUrlResponse:
        """
        Description: 获取声明授权链接
        Summary: 获取声明授权链接
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.create_auth_claim_url_ex(request, headers, runtime)

    async def create_auth_claim_url_async(
        self,
        request: blockchain_models.CreateAuthClaimUrlRequest,
    ) -> blockchain_models.CreateAuthClaimUrlResponse:
        """
        Description: 获取声明授权链接
        Summary: 获取声明授权链接
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.create_auth_claim_url_ex_async(request, headers, runtime)

    def create_auth_claim_url_ex(
        self,
        request: blockchain_models.CreateAuthClaimUrlRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateAuthClaimUrlResponse:
        """
        Description: 获取声明授权链接
        Summary: 获取声明授权链接
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateAuthClaimUrlResponse().from_map(
            self.do_request('1.0', 'baas.auth.claim.url.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def create_auth_claim_url_ex_async(
        self,
        request: blockchain_models.CreateAuthClaimUrlRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateAuthClaimUrlResponse:
        """
        Description: 获取声明授权链接
        Summary: 获取声明授权链接
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateAuthClaimUrlResponse().from_map(
            await self.do_request_async('1.0', 'baas.auth.claim.url.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def start_auth_verify_carinfo(
        self,
        request: blockchain_models.StartAuthVerifyCarinfoRequest,
    ) -> blockchain_models.StartAuthVerifyCarinfoResponse:
        """
        Description: 行驶证核身授权
        Summary: 授权宝个人信息授权，行驶证核身授权
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.start_auth_verify_carinfo_ex(request, headers, runtime)

    async def start_auth_verify_carinfo_async(
        self,
        request: blockchain_models.StartAuthVerifyCarinfoRequest,
    ) -> blockchain_models.StartAuthVerifyCarinfoResponse:
        """
        Description: 行驶证核身授权
        Summary: 授权宝个人信息授权，行驶证核身授权
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.start_auth_verify_carinfo_ex_async(request, headers, runtime)

    def start_auth_verify_carinfo_ex(
        self,
        request: blockchain_models.StartAuthVerifyCarinfoRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartAuthVerifyCarinfoResponse:
        """
        Description: 行驶证核身授权
        Summary: 授权宝个人信息授权，行驶证核身授权
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartAuthVerifyCarinfoResponse().from_map(
            self.do_request('1.0', 'baas.auth.verify.carinfo.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def start_auth_verify_carinfo_ex_async(
        self,
        request: blockchain_models.StartAuthVerifyCarinfoRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartAuthVerifyCarinfoResponse:
        """
        Description: 行驶证核身授权
        Summary: 授权宝个人信息授权，行驶证核身授权
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartAuthVerifyCarinfoResponse().from_map(
            await self.do_request_async('1.0', 'baas.auth.verify.carinfo.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def start_auth_verify_driverinfo(
        self,
        request: blockchain_models.StartAuthVerifyDriverinfoRequest,
    ) -> blockchain_models.StartAuthVerifyDriverinfoResponse:
        """
        Description: 驾驶证相关信息核验并核身，并且结合授权宝完成授权。
        Summary: 授权宝个人信息授权，驾驶证核身授权
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.start_auth_verify_driverinfo_ex(request, headers, runtime)

    async def start_auth_verify_driverinfo_async(
        self,
        request: blockchain_models.StartAuthVerifyDriverinfoRequest,
    ) -> blockchain_models.StartAuthVerifyDriverinfoResponse:
        """
        Description: 驾驶证相关信息核验并核身，并且结合授权宝完成授权。
        Summary: 授权宝个人信息授权，驾驶证核身授权
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.start_auth_verify_driverinfo_ex_async(request, headers, runtime)

    def start_auth_verify_driverinfo_ex(
        self,
        request: blockchain_models.StartAuthVerifyDriverinfoRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartAuthVerifyDriverinfoResponse:
        """
        Description: 驾驶证相关信息核验并核身，并且结合授权宝完成授权。
        Summary: 授权宝个人信息授权，驾驶证核身授权
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartAuthVerifyDriverinfoResponse().from_map(
            self.do_request('1.0', 'baas.auth.verify.driverinfo.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def start_auth_verify_driverinfo_ex_async(
        self,
        request: blockchain_models.StartAuthVerifyDriverinfoRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartAuthVerifyDriverinfoResponse:
        """
        Description: 驾驶证相关信息核验并核身，并且结合授权宝完成授权。
        Summary: 授权宝个人信息授权，驾驶证核身授权
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartAuthVerifyDriverinfoResponse().from_map(
            await self.do_request_async('1.0', 'baas.auth.verify.driverinfo.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def start_auth_verify_carinspect(
        self,
        request: blockchain_models.StartAuthVerifyCarinspectRequest,
    ) -> blockchain_models.StartAuthVerifyCarinspectResponse:
        """
        Description: 检查车牌是否进行年检，当前状态，以及年检有效期止。
        Summary: 车检查询核验，目标车牌年检状态
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.start_auth_verify_carinspect_ex(request, headers, runtime)

    async def start_auth_verify_carinspect_async(
        self,
        request: blockchain_models.StartAuthVerifyCarinspectRequest,
    ) -> blockchain_models.StartAuthVerifyCarinspectResponse:
        """
        Description: 检查车牌是否进行年检，当前状态，以及年检有效期止。
        Summary: 车检查询核验，目标车牌年检状态
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.start_auth_verify_carinspect_ex_async(request, headers, runtime)

    def start_auth_verify_carinspect_ex(
        self,
        request: blockchain_models.StartAuthVerifyCarinspectRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartAuthVerifyCarinspectResponse:
        """
        Description: 检查车牌是否进行年检，当前状态，以及年检有效期止。
        Summary: 车检查询核验，目标车牌年检状态
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartAuthVerifyCarinspectResponse().from_map(
            self.do_request('1.0', 'baas.auth.verify.carinspect.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def start_auth_verify_carinspect_ex_async(
        self,
        request: blockchain_models.StartAuthVerifyCarinspectRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartAuthVerifyCarinspectResponse:
        """
        Description: 检查车牌是否进行年检，当前状态，以及年检有效期止。
        Summary: 车检查询核验，目标车牌年检状态
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartAuthVerifyCarinspectResponse().from_map(
            await self.do_request_async('1.0', 'baas.auth.verify.carinspect.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def get_auth_claim_template(
        self,
        request: blockchain_models.GetAuthClaimTemplateRequest,
    ) -> blockchain_models.GetAuthClaimTemplateResponse:
        """
        Description: 获取授权声明模版
        Summary: 获取授权声明模版
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.get_auth_claim_template_ex(request, headers, runtime)

    async def get_auth_claim_template_async(
        self,
        request: blockchain_models.GetAuthClaimTemplateRequest,
    ) -> blockchain_models.GetAuthClaimTemplateResponse:
        """
        Description: 获取授权声明模版
        Summary: 获取授权声明模版
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.get_auth_claim_template_ex_async(request, headers, runtime)

    def get_auth_claim_template_ex(
        self,
        request: blockchain_models.GetAuthClaimTemplateRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.GetAuthClaimTemplateResponse:
        """
        Description: 获取授权声明模版
        Summary: 获取授权声明模版
        """
        UtilClient.validate_model(request)
        return blockchain_models.GetAuthClaimTemplateResponse().from_map(
            self.do_request('1.0', 'baas.auth.claim.template.get', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def get_auth_claim_template_ex_async(
        self,
        request: blockchain_models.GetAuthClaimTemplateRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.GetAuthClaimTemplateResponse:
        """
        Description: 获取授权声明模版
        Summary: 获取授权声明模版
        """
        UtilClient.validate_model(request)
        return blockchain_models.GetAuthClaimTemplateResponse().from_map(
            await self.do_request_async('1.0', 'baas.auth.claim.template.get', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def create_auth_claim_vc(
        self,
        request: blockchain_models.CreateAuthClaimVcRequest,
    ) -> blockchain_models.CreateAuthClaimVcResponse:
        """
        Description: 通过claim创建vc
        Summary: 通过claim创建vc
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.create_auth_claim_vc_ex(request, headers, runtime)

    async def create_auth_claim_vc_async(
        self,
        request: blockchain_models.CreateAuthClaimVcRequest,
    ) -> blockchain_models.CreateAuthClaimVcResponse:
        """
        Description: 通过claim创建vc
        Summary: 通过claim创建vc
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.create_auth_claim_vc_ex_async(request, headers, runtime)

    def create_auth_claim_vc_ex(
        self,
        request: blockchain_models.CreateAuthClaimVcRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateAuthClaimVcResponse:
        """
        Description: 通过claim创建vc
        Summary: 通过claim创建vc
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateAuthClaimVcResponse().from_map(
            self.do_request('1.0', 'baas.auth.claim.vc.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def create_auth_claim_vc_ex_async(
        self,
        request: blockchain_models.CreateAuthClaimVcRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateAuthClaimVcResponse:
        """
        Description: 通过claim创建vc
        Summary: 通过claim创建vc
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateAuthClaimVcResponse().from_map(
            await self.do_request_async('1.0', 'baas.auth.claim.vc.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_auth_claim_vc(
        self,
        request: blockchain_models.QueryAuthClaimVcRequest,
    ) -> blockchain_models.QueryAuthClaimVcResponse:
        """
        Description: 查询vc详情
        Summary: 查询vc详情
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_auth_claim_vc_ex(request, headers, runtime)

    async def query_auth_claim_vc_async(
        self,
        request: blockchain_models.QueryAuthClaimVcRequest,
    ) -> blockchain_models.QueryAuthClaimVcResponse:
        """
        Description: 查询vc详情
        Summary: 查询vc详情
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_auth_claim_vc_ex_async(request, headers, runtime)

    def query_auth_claim_vc_ex(
        self,
        request: blockchain_models.QueryAuthClaimVcRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryAuthClaimVcResponse:
        """
        Description: 查询vc详情
        Summary: 查询vc详情
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryAuthClaimVcResponse().from_map(
            self.do_request('1.0', 'baas.auth.claim.vc.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_auth_claim_vc_ex_async(
        self,
        request: blockchain_models.QueryAuthClaimVcRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryAuthClaimVcResponse:
        """
        Description: 查询vc详情
        Summary: 查询vc详情
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryAuthClaimVcResponse().from_map(
            await self.do_request_async('1.0', 'baas.auth.claim.vc.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_auth_vehicleinsurance(
        self,
        request: blockchain_models.QueryAuthVehicleinsuranceRequest,
    ) -> blockchain_models.QueryAuthVehicleinsuranceResponse:
        """
        Description: 车辆投保日期查询(存量)
        Summary: 车辆投保日期查询(存量)
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_auth_vehicleinsurance_ex(request, headers, runtime)

    async def query_auth_vehicleinsurance_async(
        self,
        request: blockchain_models.QueryAuthVehicleinsuranceRequest,
    ) -> blockchain_models.QueryAuthVehicleinsuranceResponse:
        """
        Description: 车辆投保日期查询(存量)
        Summary: 车辆投保日期查询(存量)
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_auth_vehicleinsurance_ex_async(request, headers, runtime)

    def query_auth_vehicleinsurance_ex(
        self,
        request: blockchain_models.QueryAuthVehicleinsuranceRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryAuthVehicleinsuranceResponse:
        """
        Description: 车辆投保日期查询(存量)
        Summary: 车辆投保日期查询(存量)
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryAuthVehicleinsuranceResponse().from_map(
            self.do_request('1.0', 'baas.auth.vehicleinsurance.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_auth_vehicleinsurance_ex_async(
        self,
        request: blockchain_models.QueryAuthVehicleinsuranceRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryAuthVehicleinsuranceResponse:
        """
        Description: 车辆投保日期查询(存量)
        Summary: 车辆投保日期查询(存量)
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryAuthVehicleinsuranceResponse().from_map(
            await self.do_request_async('1.0', 'baas.auth.vehicleinsurance.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_auth_vehicleinsurance_vc(
        self,
        request: blockchain_models.QueryAuthVehicleinsuranceVcRequest,
    ) -> blockchain_models.QueryAuthVehicleinsuranceVcResponse:
        """
        Description: 车辆投保日期查询(增量)
        Summary: 车辆投保日期查询(增量)
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_auth_vehicleinsurance_vc_ex(request, headers, runtime)

    async def query_auth_vehicleinsurance_vc_async(
        self,
        request: blockchain_models.QueryAuthVehicleinsuranceVcRequest,
    ) -> blockchain_models.QueryAuthVehicleinsuranceVcResponse:
        """
        Description: 车辆投保日期查询(增量)
        Summary: 车辆投保日期查询(增量)
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_auth_vehicleinsurance_vc_ex_async(request, headers, runtime)

    def query_auth_vehicleinsurance_vc_ex(
        self,
        request: blockchain_models.QueryAuthVehicleinsuranceVcRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryAuthVehicleinsuranceVcResponse:
        """
        Description: 车辆投保日期查询(增量)
        Summary: 车辆投保日期查询(增量)
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryAuthVehicleinsuranceVcResponse().from_map(
            self.do_request('1.0', 'baas.auth.vehicleinsurance.vc.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_auth_vehicleinsurance_vc_ex_async(
        self,
        request: blockchain_models.QueryAuthVehicleinsuranceVcRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryAuthVehicleinsuranceVcResponse:
        """
        Description: 车辆投保日期查询(增量)
        Summary: 车辆投保日期查询(增量)
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryAuthVehicleinsuranceVcResponse().from_map(
            await self.do_request_async('1.0', 'baas.auth.vehicleinsurance.vc.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_auth_vc_statistics(
        self,
        request: blockchain_models.QueryAuthVcStatisticsRequest,
    ) -> blockchain_models.QueryAuthVcStatisticsResponse:
        """
        Description: 查询在特定业务bizType下的凭证颁发的统计数据，以及按照day维度的分布情况。
        Summary: 查询目标场景的凭证颁发的统计数据
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_auth_vc_statistics_ex(request, headers, runtime)

    async def query_auth_vc_statistics_async(
        self,
        request: blockchain_models.QueryAuthVcStatisticsRequest,
    ) -> blockchain_models.QueryAuthVcStatisticsResponse:
        """
        Description: 查询在特定业务bizType下的凭证颁发的统计数据，以及按照day维度的分布情况。
        Summary: 查询目标场景的凭证颁发的统计数据
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_auth_vc_statistics_ex_async(request, headers, runtime)

    def query_auth_vc_statistics_ex(
        self,
        request: blockchain_models.QueryAuthVcStatisticsRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryAuthVcStatisticsResponse:
        """
        Description: 查询在特定业务bizType下的凭证颁发的统计数据，以及按照day维度的分布情况。
        Summary: 查询目标场景的凭证颁发的统计数据
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryAuthVcStatisticsResponse().from_map(
            self.do_request('1.0', 'baas.auth.vc.statistics.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_auth_vc_statistics_ex_async(
        self,
        request: blockchain_models.QueryAuthVcStatisticsRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryAuthVcStatisticsResponse:
        """
        Description: 查询在特定业务bizType下的凭证颁发的统计数据，以及按照day维度的分布情况。
        Summary: 查询目标场景的凭证颁发的统计数据
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryAuthVcStatisticsResponse().from_map(
            await self.do_request_async('1.0', 'baas.auth.vc.statistics.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_auth_vc_realtime(
        self,
        request: blockchain_models.QueryAuthVcRealtimeRequest,
    ) -> blockchain_models.QueryAuthVcRealtimeResponse:
        """
        Description: 查询目标业务凭证的实时颁发的情况，返回一个列表。
        Summary: 查询目标业务凭证颁发的实时列表情况
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_auth_vc_realtime_ex(request, headers, runtime)

    async def query_auth_vc_realtime_async(
        self,
        request: blockchain_models.QueryAuthVcRealtimeRequest,
    ) -> blockchain_models.QueryAuthVcRealtimeResponse:
        """
        Description: 查询目标业务凭证的实时颁发的情况，返回一个列表。
        Summary: 查询目标业务凭证颁发的实时列表情况
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_auth_vc_realtime_ex_async(request, headers, runtime)

    def query_auth_vc_realtime_ex(
        self,
        request: blockchain_models.QueryAuthVcRealtimeRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryAuthVcRealtimeResponse:
        """
        Description: 查询目标业务凭证的实时颁发的情况，返回一个列表。
        Summary: 查询目标业务凭证颁发的实时列表情况
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryAuthVcRealtimeResponse().from_map(
            self.do_request('1.0', 'baas.auth.vc.realtime.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_auth_vc_realtime_ex_async(
        self,
        request: blockchain_models.QueryAuthVcRealtimeRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryAuthVcRealtimeResponse:
        """
        Description: 查询目标业务凭证的实时颁发的情况，返回一个列表。
        Summary: 查询目标业务凭证颁发的实时列表情况
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryAuthVcRealtimeResponse().from_map(
            await self.do_request_async('1.0', 'baas.auth.vc.realtime.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_auth_org_status(
        self,
        request: blockchain_models.QueryAuthOrgStatusRequest,
    ) -> blockchain_models.QueryAuthOrgStatusResponse:
        """
        Description: 在机构颁发凭证的情况下，机构的可信度和状态会影响颁发的凭证的有效性和影响，因此提供接口查询机构状态。
        Summary: 特定场景下使用，查询机构状态
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_auth_org_status_ex(request, headers, runtime)

    async def query_auth_org_status_async(
        self,
        request: blockchain_models.QueryAuthOrgStatusRequest,
    ) -> blockchain_models.QueryAuthOrgStatusResponse:
        """
        Description: 在机构颁发凭证的情况下，机构的可信度和状态会影响颁发的凭证的有效性和影响，因此提供接口查询机构状态。
        Summary: 特定场景下使用，查询机构状态
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_auth_org_status_ex_async(request, headers, runtime)

    def query_auth_org_status_ex(
        self,
        request: blockchain_models.QueryAuthOrgStatusRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryAuthOrgStatusResponse:
        """
        Description: 在机构颁发凭证的情况下，机构的可信度和状态会影响颁发的凭证的有效性和影响，因此提供接口查询机构状态。
        Summary: 特定场景下使用，查询机构状态
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryAuthOrgStatusResponse().from_map(
            self.do_request('1.0', 'baas.auth.org.status.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_auth_org_status_ex_async(
        self,
        request: blockchain_models.QueryAuthOrgStatusRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryAuthOrgStatusResponse:
        """
        Description: 在机构颁发凭证的情况下，机构的可信度和状态会影响颁发的凭证的有效性和影响，因此提供接口查询机构状态。
        Summary: 特定场景下使用，查询机构状态
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryAuthOrgStatusResponse().from_map(
            await self.do_request_async('1.0', 'baas.auth.org.status.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def start_did_corporate_agentcreate(
        self,
        request: blockchain_models.StartDidCorporateAgentcreateRequest,
    ) -> blockchain_models.StartDidCorporateAgentcreateResponse:
        """
        Description: 通过代理模式为企业创建did
        Summary: 通过代理模式为企业创建did
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.start_did_corporate_agentcreate_ex(request, headers, runtime)

    async def start_did_corporate_agentcreate_async(
        self,
        request: blockchain_models.StartDidCorporateAgentcreateRequest,
    ) -> blockchain_models.StartDidCorporateAgentcreateResponse:
        """
        Description: 通过代理模式为企业创建did
        Summary: 通过代理模式为企业创建did
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.start_did_corporate_agentcreate_ex_async(request, headers, runtime)

    def start_did_corporate_agentcreate_ex(
        self,
        request: blockchain_models.StartDidCorporateAgentcreateRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartDidCorporateAgentcreateResponse:
        """
        Description: 通过代理模式为企业创建did
        Summary: 通过代理模式为企业创建did
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartDidCorporateAgentcreateResponse().from_map(
            self.do_request('1.0', 'baas.did.corporate.agentcreate.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def start_did_corporate_agentcreate_ex_async(
        self,
        request: blockchain_models.StartDidCorporateAgentcreateRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartDidCorporateAgentcreateResponse:
        """
        Description: 通过代理模式为企业创建did
        Summary: 通过代理模式为企业创建did
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartDidCorporateAgentcreateResponse().from_map(
            await self.do_request_async('1.0', 'baas.did.corporate.agentcreate.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def start_did_person_agentcreate(
        self,
        request: blockchain_models.StartDidPersonAgentcreateRequest,
    ) -> blockchain_models.StartDidPersonAgentcreateResponse:
        """
        Description: 通过代理模式为个人创建did
        Summary: 通过代理模式为个人创建did
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.start_did_person_agentcreate_ex(request, headers, runtime)

    async def start_did_person_agentcreate_async(
        self,
        request: blockchain_models.StartDidPersonAgentcreateRequest,
    ) -> blockchain_models.StartDidPersonAgentcreateResponse:
        """
        Description: 通过代理模式为个人创建did
        Summary: 通过代理模式为个人创建did
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.start_did_person_agentcreate_ex_async(request, headers, runtime)

    def start_did_person_agentcreate_ex(
        self,
        request: blockchain_models.StartDidPersonAgentcreateRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartDidPersonAgentcreateResponse:
        """
        Description: 通过代理模式为个人创建did
        Summary: 通过代理模式为个人创建did
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartDidPersonAgentcreateResponse().from_map(
            self.do_request('1.0', 'baas.did.person.agentcreate.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def start_did_person_agentcreate_ex_async(
        self,
        request: blockchain_models.StartDidPersonAgentcreateRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartDidPersonAgentcreateResponse:
        """
        Description: 通过代理模式为个人创建did
        Summary: 通过代理模式为个人创建did
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartDidPersonAgentcreateResponse().from_map(
            await self.do_request_async('1.0', 'baas.did.person.agentcreate.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def start_did_corporate_selfcreate(
        self,
        request: blockchain_models.StartDidCorporateSelfcreateRequest,
    ) -> blockchain_models.StartDidCorporateSelfcreateResponse:
        """
        Description: 直接创建自己的企业did
        Summary: 直接创建自己的企业did
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.start_did_corporate_selfcreate_ex(request, headers, runtime)

    async def start_did_corporate_selfcreate_async(
        self,
        request: blockchain_models.StartDidCorporateSelfcreateRequest,
    ) -> blockchain_models.StartDidCorporateSelfcreateResponse:
        """
        Description: 直接创建自己的企业did
        Summary: 直接创建自己的企业did
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.start_did_corporate_selfcreate_ex_async(request, headers, runtime)

    def start_did_corporate_selfcreate_ex(
        self,
        request: blockchain_models.StartDidCorporateSelfcreateRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartDidCorporateSelfcreateResponse:
        """
        Description: 直接创建自己的企业did
        Summary: 直接创建自己的企业did
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartDidCorporateSelfcreateResponse().from_map(
            self.do_request('1.0', 'baas.did.corporate.selfcreate.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def start_did_corporate_selfcreate_ex_async(
        self,
        request: blockchain_models.StartDidCorporateSelfcreateRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartDidCorporateSelfcreateResponse:
        """
        Description: 直接创建自己的企业did
        Summary: 直接创建自己的企业did
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartDidCorporateSelfcreateResponse().from_map(
            await self.do_request_async('1.0', 'baas.did.corporate.selfcreate.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def start_did_person_selfcreate(
        self,
        request: blockchain_models.StartDidPersonSelfcreateRequest,
    ) -> blockchain_models.StartDidPersonSelfcreateResponse:
        """
        Description: 直接创建自己的个人did
        Summary: 直接创建自己的个人did
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.start_did_person_selfcreate_ex(request, headers, runtime)

    async def start_did_person_selfcreate_async(
        self,
        request: blockchain_models.StartDidPersonSelfcreateRequest,
    ) -> blockchain_models.StartDidPersonSelfcreateResponse:
        """
        Description: 直接创建自己的个人did
        Summary: 直接创建自己的个人did
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.start_did_person_selfcreate_ex_async(request, headers, runtime)

    def start_did_person_selfcreate_ex(
        self,
        request: blockchain_models.StartDidPersonSelfcreateRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartDidPersonSelfcreateResponse:
        """
        Description: 直接创建自己的个人did
        Summary: 直接创建自己的个人did
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartDidPersonSelfcreateResponse().from_map(
            self.do_request('1.0', 'baas.did.person.selfcreate.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def start_did_person_selfcreate_ex_async(
        self,
        request: blockchain_models.StartDidPersonSelfcreateRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartDidPersonSelfcreateResponse:
        """
        Description: 直接创建自己的个人did
        Summary: 直接创建自己的个人did
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartDidPersonSelfcreateResponse().from_map(
            await self.do_request_async('1.0', 'baas.did.person.selfcreate.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def start_did_verifiableclaim_issure(
        self,
        request: blockchain_models.StartDidVerifiableclaimIssureRequest,
    ) -> blockchain_models.StartDidVerifiableclaimIssureResponse:
        """
        Description: 使用自己或者代理的did为指定did颁发证书
        Summary: 为指定did颁发证书
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.start_did_verifiableclaim_issure_ex(request, headers, runtime)

    async def start_did_verifiableclaim_issure_async(
        self,
        request: blockchain_models.StartDidVerifiableclaimIssureRequest,
    ) -> blockchain_models.StartDidVerifiableclaimIssureResponse:
        """
        Description: 使用自己或者代理的did为指定did颁发证书
        Summary: 为指定did颁发证书
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.start_did_verifiableclaim_issure_ex_async(request, headers, runtime)

    def start_did_verifiableclaim_issure_ex(
        self,
        request: blockchain_models.StartDidVerifiableclaimIssureRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartDidVerifiableclaimIssureResponse:
        """
        Description: 使用自己或者代理的did为指定did颁发证书
        Summary: 为指定did颁发证书
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartDidVerifiableclaimIssureResponse().from_map(
            self.do_request('1.0', 'baas.did.verifiableclaim.issure.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def start_did_verifiableclaim_issure_ex_async(
        self,
        request: blockchain_models.StartDidVerifiableclaimIssureRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartDidVerifiableclaimIssureResponse:
        """
        Description: 使用自己或者代理的did为指定did颁发证书
        Summary: 为指定did颁发证书
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartDidVerifiableclaimIssureResponse().from_map(
            await self.do_request_async('1.0', 'baas.did.verifiableclaim.issure.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def start_did_verifiableclaim_verifier(
        self,
        request: blockchain_models.StartDidVerifiableclaimVerifierRequest,
    ) -> blockchain_models.StartDidVerifiableclaimVerifierResponse:
        """
        Description: 验证可验证声明
        Summary: 验证可验证声明
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.start_did_verifiableclaim_verifier_ex(request, headers, runtime)

    async def start_did_verifiableclaim_verifier_async(
        self,
        request: blockchain_models.StartDidVerifiableclaimVerifierRequest,
    ) -> blockchain_models.StartDidVerifiableclaimVerifierResponse:
        """
        Description: 验证可验证声明
        Summary: 验证可验证声明
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.start_did_verifiableclaim_verifier_ex_async(request, headers, runtime)

    def start_did_verifiableclaim_verifier_ex(
        self,
        request: blockchain_models.StartDidVerifiableclaimVerifierRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartDidVerifiableclaimVerifierResponse:
        """
        Description: 验证可验证声明
        Summary: 验证可验证声明
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartDidVerifiableclaimVerifierResponse().from_map(
            self.do_request('1.0', 'baas.did.verifiableclaim.verifier.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def start_did_verifiableclaim_verifier_ex_async(
        self,
        request: blockchain_models.StartDidVerifiableclaimVerifierRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartDidVerifiableclaimVerifierResponse:
        """
        Description: 验证可验证声明
        Summary: 验证可验证声明
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartDidVerifiableclaimVerifierResponse().from_map(
            await self.do_request_async('1.0', 'baas.did.verifiableclaim.verifier.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_did_doc(
        self,
        request: blockchain_models.QueryDidDocRequest,
    ) -> blockchain_models.QueryDidDocResponse:
        """
        Description: 查询did对应的doc
        Summary: 查询did对应的doc
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_did_doc_ex(request, headers, runtime)

    async def query_did_doc_async(
        self,
        request: blockchain_models.QueryDidDocRequest,
    ) -> blockchain_models.QueryDidDocResponse:
        """
        Description: 查询did对应的doc
        Summary: 查询did对应的doc
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_did_doc_ex_async(request, headers, runtime)

    def query_did_doc_ex(
        self,
        request: blockchain_models.QueryDidDocRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryDidDocResponse:
        """
        Description: 查询did对应的doc
        Summary: 查询did对应的doc
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryDidDocResponse().from_map(
            self.do_request('1.0', 'baas.did.doc.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_did_doc_ex_async(
        self,
        request: blockchain_models.QueryDidDocRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryDidDocResponse:
        """
        Description: 查询did对应的doc
        Summary: 查询did对应的doc
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryDidDocResponse().from_map(
            await self.do_request_async('1.0', 'baas.did.doc.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def update_did_verifiableclaim_status(
        self,
        request: blockchain_models.UpdateDidVerifiableclaimStatusRequest,
    ) -> blockchain_models.UpdateDidVerifiableclaimStatusResponse:
        """
        Description: 更新可验证声明状态
        Summary: 更新可验证声明状态
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.update_did_verifiableclaim_status_ex(request, headers, runtime)

    async def update_did_verifiableclaim_status_async(
        self,
        request: blockchain_models.UpdateDidVerifiableclaimStatusRequest,
    ) -> blockchain_models.UpdateDidVerifiableclaimStatusResponse:
        """
        Description: 更新可验证声明状态
        Summary: 更新可验证声明状态
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.update_did_verifiableclaim_status_ex_async(request, headers, runtime)

    def update_did_verifiableclaim_status_ex(
        self,
        request: blockchain_models.UpdateDidVerifiableclaimStatusRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.UpdateDidVerifiableclaimStatusResponse:
        """
        Description: 更新可验证声明状态
        Summary: 更新可验证声明状态
        """
        UtilClient.validate_model(request)
        return blockchain_models.UpdateDidVerifiableclaimStatusResponse().from_map(
            self.do_request('1.0', 'baas.did.verifiableclaim.status.update', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def update_did_verifiableclaim_status_ex_async(
        self,
        request: blockchain_models.UpdateDidVerifiableclaimStatusRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.UpdateDidVerifiableclaimStatusResponse:
        """
        Description: 更新可验证声明状态
        Summary: 更新可验证声明状态
        """
        UtilClient.validate_model(request)
        return blockchain_models.UpdateDidVerifiableclaimStatusResponse().from_map(
            await self.do_request_async('1.0', 'baas.did.verifiableclaim.status.update', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def update_did_corporate_extensionservice(
        self,
        request: blockchain_models.UpdateDidCorporateExtensionserviceRequest,
    ) -> blockchain_models.UpdateDidCorporateExtensionserviceResponse:
        """
        Description: 用户更新扩展字段中的扩展字段
        Summary: 更新doc service中的扩展字段
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.update_did_corporate_extensionservice_ex(request, headers, runtime)

    async def update_did_corporate_extensionservice_async(
        self,
        request: blockchain_models.UpdateDidCorporateExtensionserviceRequest,
    ) -> blockchain_models.UpdateDidCorporateExtensionserviceResponse:
        """
        Description: 用户更新扩展字段中的扩展字段
        Summary: 更新doc service中的扩展字段
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.update_did_corporate_extensionservice_ex_async(request, headers, runtime)

    def update_did_corporate_extensionservice_ex(
        self,
        request: blockchain_models.UpdateDidCorporateExtensionserviceRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.UpdateDidCorporateExtensionserviceResponse:
        """
        Description: 用户更新扩展字段中的扩展字段
        Summary: 更新doc service中的扩展字段
        """
        UtilClient.validate_model(request)
        return blockchain_models.UpdateDidCorporateExtensionserviceResponse().from_map(
            self.do_request('1.0', 'baas.did.corporate.extensionservice.update', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def update_did_corporate_extensionservice_ex_async(
        self,
        request: blockchain_models.UpdateDidCorporateExtensionserviceRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.UpdateDidCorporateExtensionserviceResponse:
        """
        Description: 用户更新扩展字段中的扩展字段
        Summary: 更新doc service中的扩展字段
        """
        UtilClient.validate_model(request)
        return blockchain_models.UpdateDidCorporateExtensionserviceResponse().from_map(
            await self.do_request_async('1.0', 'baas.did.corporate.extensionservice.update', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def start_did_corporate_customerservicetype(
        self,
        request: blockchain_models.StartDidCorporateCustomerservicetypeRequest,
    ) -> blockchain_models.StartDidCorporateCustomerservicetypeResponse:
        """
        Description: 设置不通租户在DID中的不同扩展字段
        Summary: 设置不通租户在DID中的不同扩展字段
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.start_did_corporate_customerservicetype_ex(request, headers, runtime)

    async def start_did_corporate_customerservicetype_async(
        self,
        request: blockchain_models.StartDidCorporateCustomerservicetypeRequest,
    ) -> blockchain_models.StartDidCorporateCustomerservicetypeResponse:
        """
        Description: 设置不通租户在DID中的不同扩展字段
        Summary: 设置不通租户在DID中的不同扩展字段
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.start_did_corporate_customerservicetype_ex_async(request, headers, runtime)

    def start_did_corporate_customerservicetype_ex(
        self,
        request: blockchain_models.StartDidCorporateCustomerservicetypeRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartDidCorporateCustomerservicetypeResponse:
        """
        Description: 设置不通租户在DID中的不同扩展字段
        Summary: 设置不通租户在DID中的不同扩展字段
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartDidCorporateCustomerservicetypeResponse().from_map(
            self.do_request('1.0', 'baas.did.corporate.customerservicetype.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def start_did_corporate_customerservicetype_ex_async(
        self,
        request: blockchain_models.StartDidCorporateCustomerservicetypeRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartDidCorporateCustomerservicetypeResponse:
        """
        Description: 设置不通租户在DID中的不同扩展字段
        Summary: 设置不通租户在DID中的不同扩展字段
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartDidCorporateCustomerservicetypeResponse().from_map(
            await self.do_request_async('1.0', 'baas.did.corporate.customerservicetype.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def start_did_certification_threemeta(
        self,
        request: blockchain_models.StartDidCertificationThreemetaRequest,
    ) -> blockchain_models.StartDidCertificationThreemetaResponse:
        """
        Description: 三要素实名认证
        Summary: 三要素实名认证
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.start_did_certification_threemeta_ex(request, headers, runtime)

    async def start_did_certification_threemeta_async(
        self,
        request: blockchain_models.StartDidCertificationThreemetaRequest,
    ) -> blockchain_models.StartDidCertificationThreemetaResponse:
        """
        Description: 三要素实名认证
        Summary: 三要素实名认证
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.start_did_certification_threemeta_ex_async(request, headers, runtime)

    def start_did_certification_threemeta_ex(
        self,
        request: blockchain_models.StartDidCertificationThreemetaRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartDidCertificationThreemetaResponse:
        """
        Description: 三要素实名认证
        Summary: 三要素实名认证
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartDidCertificationThreemetaResponse().from_map(
            self.do_request('1.0', 'baas.did.certification.threemeta.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def start_did_certification_threemeta_ex_async(
        self,
        request: blockchain_models.StartDidCertificationThreemetaRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartDidCertificationThreemetaResponse:
        """
        Description: 三要素实名认证
        Summary: 三要素实名认证
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartDidCertificationThreemetaResponse().from_map(
            await self.do_request_async('1.0', 'baas.did.certification.threemeta.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def start_did_certification_twometa(
        self,
        request: blockchain_models.StartDidCertificationTwometaRequest,
    ) -> blockchain_models.StartDidCertificationTwometaResponse:
        """
        Description: 二要素实名认证
        Summary: 二要素实名认证
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.start_did_certification_twometa_ex(request, headers, runtime)

    async def start_did_certification_twometa_async(
        self,
        request: blockchain_models.StartDidCertificationTwometaRequest,
    ) -> blockchain_models.StartDidCertificationTwometaResponse:
        """
        Description: 二要素实名认证
        Summary: 二要素实名认证
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.start_did_certification_twometa_ex_async(request, headers, runtime)

    def start_did_certification_twometa_ex(
        self,
        request: blockchain_models.StartDidCertificationTwometaRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartDidCertificationTwometaResponse:
        """
        Description: 二要素实名认证
        Summary: 二要素实名认证
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartDidCertificationTwometaResponse().from_map(
            self.do_request('1.0', 'baas.did.certification.twometa.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def start_did_certification_twometa_ex_async(
        self,
        request: blockchain_models.StartDidCertificationTwometaRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartDidCertificationTwometaResponse:
        """
        Description: 二要素实名认证
        Summary: 二要素实名认证
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartDidCertificationTwometaResponse().from_map(
            await self.do_request_async('1.0', 'baas.did.certification.twometa.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_did_vc(
        self,
        request: blockchain_models.QueryDidVcRequest,
    ) -> blockchain_models.QueryDidVcResponse:
        """
        Description: 通过vcid查询vc内容
        Summary: 通过vcid查询vc内容
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_did_vc_ex(request, headers, runtime)

    async def query_did_vc_async(
        self,
        request: blockchain_models.QueryDidVcRequest,
    ) -> blockchain_models.QueryDidVcResponse:
        """
        Description: 通过vcid查询vc内容
        Summary: 通过vcid查询vc内容
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_did_vc_ex_async(request, headers, runtime)

    def query_did_vc_ex(
        self,
        request: blockchain_models.QueryDidVcRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryDidVcResponse:
        """
        Description: 通过vcid查询vc内容
        Summary: 通过vcid查询vc内容
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryDidVcResponse().from_map(
            self.do_request('1.0', 'baas.did.vc.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_did_vc_ex_async(
        self,
        request: blockchain_models.QueryDidVcRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryDidVcResponse:
        """
        Description: 通过vcid查询vc内容
        Summary: 通过vcid查询vc内容
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryDidVcResponse().from_map(
            await self.do_request_async('1.0', 'baas.did.vc.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def start_did_identification_faceauth(
        self,
        request: blockchain_models.StartDidIdentificationFaceauthRequest,
    ) -> blockchain_models.StartDidIdentificationFaceauthResponse:
        """
        Description: 开始实人认证
        Summary: 开始实人认证
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.start_did_identification_faceauth_ex(request, headers, runtime)

    async def start_did_identification_faceauth_async(
        self,
        request: blockchain_models.StartDidIdentificationFaceauthRequest,
    ) -> blockchain_models.StartDidIdentificationFaceauthResponse:
        """
        Description: 开始实人认证
        Summary: 开始实人认证
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.start_did_identification_faceauth_ex_async(request, headers, runtime)

    def start_did_identification_faceauth_ex(
        self,
        request: blockchain_models.StartDidIdentificationFaceauthRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartDidIdentificationFaceauthResponse:
        """
        Description: 开始实人认证
        Summary: 开始实人认证
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartDidIdentificationFaceauthResponse().from_map(
            self.do_request('1.0', 'baas.did.identification.faceauth.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def start_did_identification_faceauth_ex_async(
        self,
        request: blockchain_models.StartDidIdentificationFaceauthRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartDidIdentificationFaceauthResponse:
        """
        Description: 开始实人认证
        Summary: 开始实人认证
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartDidIdentificationFaceauthResponse().from_map(
            await self.do_request_async('1.0', 'baas.did.identification.faceauth.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_did_identification_faceauth(
        self,
        request: blockchain_models.QueryDidIdentificationFaceauthRequest,
    ) -> blockchain_models.QueryDidIdentificationFaceauthResponse:
        """
        Description: 查询实人认证结果
        Summary: 查询实人认证结果
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_did_identification_faceauth_ex(request, headers, runtime)

    async def query_did_identification_faceauth_async(
        self,
        request: blockchain_models.QueryDidIdentificationFaceauthRequest,
    ) -> blockchain_models.QueryDidIdentificationFaceauthResponse:
        """
        Description: 查询实人认证结果
        Summary: 查询实人认证结果
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_did_identification_faceauth_ex_async(request, headers, runtime)

    def query_did_identification_faceauth_ex(
        self,
        request: blockchain_models.QueryDidIdentificationFaceauthRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryDidIdentificationFaceauthResponse:
        """
        Description: 查询实人认证结果
        Summary: 查询实人认证结果
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryDidIdentificationFaceauthResponse().from_map(
            self.do_request('1.0', 'baas.did.identification.faceauth.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_did_identification_faceauth_ex_async(
        self,
        request: blockchain_models.QueryDidIdentificationFaceauthRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryDidIdentificationFaceauthResponse:
        """
        Description: 查询实人认证结果
        Summary: 查询实人认证结果
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryDidIdentificationFaceauthResponse().from_map(
            await self.do_request_async('1.0', 'baas.did.identification.faceauth.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def start_did_notification_consumer(
        self,
        request: blockchain_models.StartDidNotificationConsumerRequest,
    ) -> blockchain_models.StartDidNotificationConsumerResponse:
        """
        Description: 用户通过该接口订阅自己关心的did事件
        Summary: 订阅did事件服务
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.start_did_notification_consumer_ex(request, headers, runtime)

    async def start_did_notification_consumer_async(
        self,
        request: blockchain_models.StartDidNotificationConsumerRequest,
    ) -> blockchain_models.StartDidNotificationConsumerResponse:
        """
        Description: 用户通过该接口订阅自己关心的did事件
        Summary: 订阅did事件服务
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.start_did_notification_consumer_ex_async(request, headers, runtime)

    def start_did_notification_consumer_ex(
        self,
        request: blockchain_models.StartDidNotificationConsumerRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartDidNotificationConsumerResponse:
        """
        Description: 用户通过该接口订阅自己关心的did事件
        Summary: 订阅did事件服务
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartDidNotificationConsumerResponse().from_map(
            self.do_request('1.0', 'baas.did.notification.consumer.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def start_did_notification_consumer_ex_async(
        self,
        request: blockchain_models.StartDidNotificationConsumerRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartDidNotificationConsumerResponse:
        """
        Description: 用户通过该接口订阅自己关心的did事件
        Summary: 订阅did事件服务
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartDidNotificationConsumerResponse().from_map(
            await self.do_request_async('1.0', 'baas.did.notification.consumer.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def reboot_did_notification_consumer(
        self,
        request: blockchain_models.RebootDidNotificationConsumerRequest,
    ) -> blockchain_models.RebootDidNotificationConsumerResponse:
        """
        Description: 消费端在重启，或者需要重新拉之前的信息，需要调用这个接口重新注册
        Summary: 消费端重新启动
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.reboot_did_notification_consumer_ex(request, headers, runtime)

    async def reboot_did_notification_consumer_async(
        self,
        request: blockchain_models.RebootDidNotificationConsumerRequest,
    ) -> blockchain_models.RebootDidNotificationConsumerResponse:
        """
        Description: 消费端在重启，或者需要重新拉之前的信息，需要调用这个接口重新注册
        Summary: 消费端重新启动
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.reboot_did_notification_consumer_ex_async(request, headers, runtime)

    def reboot_did_notification_consumer_ex(
        self,
        request: blockchain_models.RebootDidNotificationConsumerRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.RebootDidNotificationConsumerResponse:
        """
        Description: 消费端在重启，或者需要重新拉之前的信息，需要调用这个接口重新注册
        Summary: 消费端重新启动
        """
        UtilClient.validate_model(request)
        return blockchain_models.RebootDidNotificationConsumerResponse().from_map(
            self.do_request('1.0', 'baas.did.notification.consumer.reboot', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def reboot_did_notification_consumer_ex_async(
        self,
        request: blockchain_models.RebootDidNotificationConsumerRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.RebootDidNotificationConsumerResponse:
        """
        Description: 消费端在重启，或者需要重新拉之前的信息，需要调用这个接口重新注册
        Summary: 消费端重新启动
        """
        UtilClient.validate_model(request)
        return blockchain_models.RebootDidNotificationConsumerResponse().from_map(
            await self.do_request_async('1.0', 'baas.did.notification.consumer.reboot', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def init_did_corporate_direct(
        self,
        request: blockchain_models.InitDidCorporateDirectRequest,
    ) -> blockchain_models.InitDidCorporateDirectResponse:
        """
        Description: 向Dis申请DID号
        Summary: 非托管模式下创建DID时，申请ID
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.init_did_corporate_direct_ex(request, headers, runtime)

    async def init_did_corporate_direct_async(
        self,
        request: blockchain_models.InitDidCorporateDirectRequest,
    ) -> blockchain_models.InitDidCorporateDirectResponse:
        """
        Description: 向Dis申请DID号
        Summary: 非托管模式下创建DID时，申请ID
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.init_did_corporate_direct_ex_async(request, headers, runtime)

    def init_did_corporate_direct_ex(
        self,
        request: blockchain_models.InitDidCorporateDirectRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.InitDidCorporateDirectResponse:
        """
        Description: 向Dis申请DID号
        Summary: 非托管模式下创建DID时，申请ID
        """
        UtilClient.validate_model(request)
        return blockchain_models.InitDidCorporateDirectResponse().from_map(
            self.do_request('1.0', 'baas.did.corporate.direct.init', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def init_did_corporate_direct_ex_async(
        self,
        request: blockchain_models.InitDidCorporateDirectRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.InitDidCorporateDirectResponse:
        """
        Description: 向Dis申请DID号
        Summary: 非托管模式下创建DID时，申请ID
        """
        UtilClient.validate_model(request)
        return blockchain_models.InitDidCorporateDirectResponse().from_map(
            await self.do_request_async('1.0', 'baas.did.corporate.direct.init', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def push_did_corporate_direct(
        self,
        request: blockchain_models.PushDidCorporateDirectRequest,
    ) -> blockchain_models.PushDidCorporateDirectResponse:
        """
        Description: 推送或者更新did doc
        Summary: 推送或者更新did doc
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.push_did_corporate_direct_ex(request, headers, runtime)

    async def push_did_corporate_direct_async(
        self,
        request: blockchain_models.PushDidCorporateDirectRequest,
    ) -> blockchain_models.PushDidCorporateDirectResponse:
        """
        Description: 推送或者更新did doc
        Summary: 推送或者更新did doc
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.push_did_corporate_direct_ex_async(request, headers, runtime)

    def push_did_corporate_direct_ex(
        self,
        request: blockchain_models.PushDidCorporateDirectRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.PushDidCorporateDirectResponse:
        """
        Description: 推送或者更新did doc
        Summary: 推送或者更新did doc
        """
        UtilClient.validate_model(request)
        return blockchain_models.PushDidCorporateDirectResponse().from_map(
            self.do_request('1.0', 'baas.did.corporate.direct.push', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def push_did_corporate_direct_ex_async(
        self,
        request: blockchain_models.PushDidCorporateDirectRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.PushDidCorporateDirectResponse:
        """
        Description: 推送或者更新did doc
        Summary: 推送或者更新did doc
        """
        UtilClient.validate_model(request)
        return blockchain_models.PushDidCorporateDirectResponse().from_map(
            await self.do_request_async('1.0', 'baas.did.corporate.direct.push', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def init_did_corporate_identity(
        self,
        request: blockchain_models.InitDidCorporateIdentityRequest,
    ) -> blockchain_models.InitDidCorporateIdentityResponse:
        """
        Description: 企业申请did
        Summary: 申请did
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.init_did_corporate_identity_ex(request, headers, runtime)

    async def init_did_corporate_identity_async(
        self,
        request: blockchain_models.InitDidCorporateIdentityRequest,
    ) -> blockchain_models.InitDidCorporateIdentityResponse:
        """
        Description: 企业申请did
        Summary: 申请did
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.init_did_corporate_identity_ex_async(request, headers, runtime)

    def init_did_corporate_identity_ex(
        self,
        request: blockchain_models.InitDidCorporateIdentityRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.InitDidCorporateIdentityResponse:
        """
        Description: 企业申请did
        Summary: 申请did
        """
        UtilClient.validate_model(request)
        return blockchain_models.InitDidCorporateIdentityResponse().from_map(
            self.do_request('1.0', 'baas.did.corporate.identity.init', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def init_did_corporate_identity_ex_async(
        self,
        request: blockchain_models.InitDidCorporateIdentityRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.InitDidCorporateIdentityResponse:
        """
        Description: 企业申请did
        Summary: 申请did
        """
        UtilClient.validate_model(request)
        return blockchain_models.InitDidCorporateIdentityResponse().from_map(
            await self.do_request_async('1.0', 'baas.did.corporate.identity.init', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def start_did_agent_challengeresponse(
        self,
        request: blockchain_models.StartDidAgentChallengeresponseRequest,
    ) -> blockchain_models.StartDidAgentChallengeresponseResponse:
        """
        Description: 对authchallenge进行响应
        Summary: 对authchallenge进行响应
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.start_did_agent_challengeresponse_ex(request, headers, runtime)

    async def start_did_agent_challengeresponse_async(
        self,
        request: blockchain_models.StartDidAgentChallengeresponseRequest,
    ) -> blockchain_models.StartDidAgentChallengeresponseResponse:
        """
        Description: 对authchallenge进行响应
        Summary: 对authchallenge进行响应
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.start_did_agent_challengeresponse_ex_async(request, headers, runtime)

    def start_did_agent_challengeresponse_ex(
        self,
        request: blockchain_models.StartDidAgentChallengeresponseRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartDidAgentChallengeresponseResponse:
        """
        Description: 对authchallenge进行响应
        Summary: 对authchallenge进行响应
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartDidAgentChallengeresponseResponse().from_map(
            self.do_request('1.0', 'baas.did.agent.challengeresponse.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def start_did_agent_challengeresponse_ex_async(
        self,
        request: blockchain_models.StartDidAgentChallengeresponseRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartDidAgentChallengeresponseResponse:
        """
        Description: 对authchallenge进行响应
        Summary: 对authchallenge进行响应
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartDidAgentChallengeresponseResponse().from_map(
            await self.do_request_async('1.0', 'baas.did.agent.challengeresponse.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def start_did_agent_verifyauthresponse(
        self,
        request: blockchain_models.StartDidAgentVerifyauthresponseRequest,
    ) -> blockchain_models.StartDidAgentVerifyauthresponseResponse:
        """
        Description: 验证Auth Response有效性接口
        Summary: 验证Auth Response有效性
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.start_did_agent_verifyauthresponse_ex(request, headers, runtime)

    async def start_did_agent_verifyauthresponse_async(
        self,
        request: blockchain_models.StartDidAgentVerifyauthresponseRequest,
    ) -> blockchain_models.StartDidAgentVerifyauthresponseResponse:
        """
        Description: 验证Auth Response有效性接口
        Summary: 验证Auth Response有效性
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.start_did_agent_verifyauthresponse_ex_async(request, headers, runtime)

    def start_did_agent_verifyauthresponse_ex(
        self,
        request: blockchain_models.StartDidAgentVerifyauthresponseRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartDidAgentVerifyauthresponseResponse:
        """
        Description: 验证Auth Response有效性接口
        Summary: 验证Auth Response有效性
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartDidAgentVerifyauthresponseResponse().from_map(
            self.do_request('1.0', 'baas.did.agent.verifyauthresponse.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def start_did_agent_verifyauthresponse_ex_async(
        self,
        request: blockchain_models.StartDidAgentVerifyauthresponseRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartDidAgentVerifyauthresponseResponse:
        """
        Description: 验证Auth Response有效性接口
        Summary: 验证Auth Response有效性
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartDidAgentVerifyauthresponseResponse().from_map(
            await self.do_request_async('1.0', 'baas.did.agent.verifyauthresponse.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def start_did_certification_mask(
        self,
        request: blockchain_models.StartDidCertificationMaskRequest,
    ) -> blockchain_models.StartDidCertificationMaskResponse:
        """
        Description: 脱敏身份验证
        Summary: 脱敏身份验证
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.start_did_certification_mask_ex(request, headers, runtime)

    async def start_did_certification_mask_async(
        self,
        request: blockchain_models.StartDidCertificationMaskRequest,
    ) -> blockchain_models.StartDidCertificationMaskResponse:
        """
        Description: 脱敏身份验证
        Summary: 脱敏身份验证
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.start_did_certification_mask_ex_async(request, headers, runtime)

    def start_did_certification_mask_ex(
        self,
        request: blockchain_models.StartDidCertificationMaskRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartDidCertificationMaskResponse:
        """
        Description: 脱敏身份验证
        Summary: 脱敏身份验证
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartDidCertificationMaskResponse().from_map(
            self.do_request('1.0', 'baas.did.certification.mask.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def start_did_certification_mask_ex_async(
        self,
        request: blockchain_models.StartDidCertificationMaskRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartDidCertificationMaskResponse:
        """
        Description: 脱敏身份验证
        Summary: 脱敏身份验证
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartDidCertificationMaskResponse().from_map(
            await self.do_request_async('1.0', 'baas.did.certification.mask.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def open_did_admin_service(
        self,
        request: blockchain_models.OpenDidAdminServiceRequest,
    ) -> blockchain_models.OpenDidAdminServiceResponse:
        """
        Description: 管理员为租户开通did服务
        Summary: 管理员为租户开通did服务
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.open_did_admin_service_ex(request, headers, runtime)

    async def open_did_admin_service_async(
        self,
        request: blockchain_models.OpenDidAdminServiceRequest,
    ) -> blockchain_models.OpenDidAdminServiceResponse:
        """
        Description: 管理员为租户开通did服务
        Summary: 管理员为租户开通did服务
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.open_did_admin_service_ex_async(request, headers, runtime)

    def open_did_admin_service_ex(
        self,
        request: blockchain_models.OpenDidAdminServiceRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.OpenDidAdminServiceResponse:
        """
        Description: 管理员为租户开通did服务
        Summary: 管理员为租户开通did服务
        """
        UtilClient.validate_model(request)
        return blockchain_models.OpenDidAdminServiceResponse().from_map(
            self.do_request('1.0', 'baas.did.admin.service.open', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def open_did_admin_service_ex_async(
        self,
        request: blockchain_models.OpenDidAdminServiceRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.OpenDidAdminServiceResponse:
        """
        Description: 管理员为租户开通did服务
        Summary: 管理员为租户开通did服务
        """
        UtilClient.validate_model(request)
        return blockchain_models.OpenDidAdminServiceResponse().from_map(
            await self.do_request_async('1.0', 'baas.did.admin.service.open', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def stop_did_admin_service(
        self,
        request: blockchain_models.StopDidAdminServiceRequest,
    ) -> blockchain_models.StopDidAdminServiceResponse:
        """
        Description: 针对指定租户关闭dis服务
        Summary: 针对指定租户关闭dis服务
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.stop_did_admin_service_ex(request, headers, runtime)

    async def stop_did_admin_service_async(
        self,
        request: blockchain_models.StopDidAdminServiceRequest,
    ) -> blockchain_models.StopDidAdminServiceResponse:
        """
        Description: 针对指定租户关闭dis服务
        Summary: 针对指定租户关闭dis服务
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.stop_did_admin_service_ex_async(request, headers, runtime)

    def stop_did_admin_service_ex(
        self,
        request: blockchain_models.StopDidAdminServiceRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StopDidAdminServiceResponse:
        """
        Description: 针对指定租户关闭dis服务
        Summary: 针对指定租户关闭dis服务
        """
        UtilClient.validate_model(request)
        return blockchain_models.StopDidAdminServiceResponse().from_map(
            self.do_request('1.0', 'baas.did.admin.service.stop', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def stop_did_admin_service_ex_async(
        self,
        request: blockchain_models.StopDidAdminServiceRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StopDidAdminServiceResponse:
        """
        Description: 针对指定租户关闭dis服务
        Summary: 针对指定租户关闭dis服务
        """
        UtilClient.validate_model(request)
        return blockchain_models.StopDidAdminServiceResponse().from_map(
            await self.do_request_async('1.0', 'baas.did.admin.service.stop', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def start_did_signature_agent(
        self,
        request: blockchain_models.StartDidSignatureAgentRequest,
    ) -> blockchain_models.StartDidSignatureAgentResponse:
        """
        Description: 为被托管人进行代理签名
        Summary: 为被托管人进行代理签名
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.start_did_signature_agent_ex(request, headers, runtime)

    async def start_did_signature_agent_async(
        self,
        request: blockchain_models.StartDidSignatureAgentRequest,
    ) -> blockchain_models.StartDidSignatureAgentResponse:
        """
        Description: 为被托管人进行代理签名
        Summary: 为被托管人进行代理签名
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.start_did_signature_agent_ex_async(request, headers, runtime)

    def start_did_signature_agent_ex(
        self,
        request: blockchain_models.StartDidSignatureAgentRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartDidSignatureAgentResponse:
        """
        Description: 为被托管人进行代理签名
        Summary: 为被托管人进行代理签名
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartDidSignatureAgentResponse().from_map(
            self.do_request('1.0', 'baas.did.signature.agent.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def start_did_signature_agent_ex_async(
        self,
        request: blockchain_models.StartDidSignatureAgentRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartDidSignatureAgentResponse:
        """
        Description: 为被托管人进行代理签名
        Summary: 为被托管人进行代理签名
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartDidSignatureAgentResponse().from_map(
            await self.do_request_async('1.0', 'baas.did.signature.agent.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def check_did_sign(
        self,
        request: blockchain_models.CheckDidSignRequest,
    ) -> blockchain_models.CheckDidSignResponse:
        """
        Description: 对字符串进行验签
        Summary: 对字符串进行验签
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.check_did_sign_ex(request, headers, runtime)

    async def check_did_sign_async(
        self,
        request: blockchain_models.CheckDidSignRequest,
    ) -> blockchain_models.CheckDidSignResponse:
        """
        Description: 对字符串进行验签
        Summary: 对字符串进行验签
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.check_did_sign_ex_async(request, headers, runtime)

    def check_did_sign_ex(
        self,
        request: blockchain_models.CheckDidSignRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CheckDidSignResponse:
        """
        Description: 对字符串进行验签
        Summary: 对字符串进行验签
        """
        UtilClient.validate_model(request)
        return blockchain_models.CheckDidSignResponse().from_map(
            self.do_request('1.0', 'baas.did.sign.check', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def check_did_sign_ex_async(
        self,
        request: blockchain_models.CheckDidSignRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CheckDidSignResponse:
        """
        Description: 对字符串进行验签
        Summary: 对字符串进行验签
        """
        UtilClient.validate_model(request)
        return blockchain_models.CheckDidSignResponse().from_map(
            await self.do_request_async('1.0', 'baas.did.sign.check', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def start_did_zkpverifiableclaim_visibility(
        self,
        request: blockchain_models.StartDidZkpverifiableclaimVisibilityRequest,
    ) -> blockchain_models.StartDidZkpverifiableclaimVisibilityResponse:
        """
        Description: 根据用户指定路径，展示部分可见的声明，并可以被验证
        Summary: 根据用户指定路径，展示部分可见声明
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.start_did_zkpverifiableclaim_visibility_ex(request, headers, runtime)

    async def start_did_zkpverifiableclaim_visibility_async(
        self,
        request: blockchain_models.StartDidZkpverifiableclaimVisibilityRequest,
    ) -> blockchain_models.StartDidZkpverifiableclaimVisibilityResponse:
        """
        Description: 根据用户指定路径，展示部分可见的声明，并可以被验证
        Summary: 根据用户指定路径，展示部分可见声明
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.start_did_zkpverifiableclaim_visibility_ex_async(request, headers, runtime)

    def start_did_zkpverifiableclaim_visibility_ex(
        self,
        request: blockchain_models.StartDidZkpverifiableclaimVisibilityRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartDidZkpverifiableclaimVisibilityResponse:
        """
        Description: 根据用户指定路径，展示部分可见的声明，并可以被验证
        Summary: 根据用户指定路径，展示部分可见声明
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartDidZkpverifiableclaimVisibilityResponse().from_map(
            self.do_request('1.0', 'baas.did.zkpverifiableclaim.visibility.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def start_did_zkpverifiableclaim_visibility_ex_async(
        self,
        request: blockchain_models.StartDidZkpverifiableclaimVisibilityRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartDidZkpverifiableclaimVisibilityResponse:
        """
        Description: 根据用户指定路径，展示部分可见的声明，并可以被验证
        Summary: 根据用户指定路径，展示部分可见声明
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartDidZkpverifiableclaimVisibilityResponse().from_map(
            await self.do_request_async('1.0', 'baas.did.zkpverifiableclaim.visibility.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def start_did_agent_sidekey(
        self,
        request: blockchain_models.StartDidAgentSidekeyRequest,
    ) -> blockchain_models.StartDidAgentSidekeyResponse:
        """
        Description: 为指定did添加外键关联，该接口必须被did自己调用或者did的认证密钥管理人调用。
        Summary: 为指定did添加外键关联
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.start_did_agent_sidekey_ex(request, headers, runtime)

    async def start_did_agent_sidekey_async(
        self,
        request: blockchain_models.StartDidAgentSidekeyRequest,
    ) -> blockchain_models.StartDidAgentSidekeyResponse:
        """
        Description: 为指定did添加外键关联，该接口必须被did自己调用或者did的认证密钥管理人调用。
        Summary: 为指定did添加外键关联
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.start_did_agent_sidekey_ex_async(request, headers, runtime)

    def start_did_agent_sidekey_ex(
        self,
        request: blockchain_models.StartDidAgentSidekeyRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartDidAgentSidekeyResponse:
        """
        Description: 为指定did添加外键关联，该接口必须被did自己调用或者did的认证密钥管理人调用。
        Summary: 为指定did添加外键关联
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartDidAgentSidekeyResponse().from_map(
            self.do_request('1.0', 'baas.did.agent.sidekey.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def start_did_agent_sidekey_ex_async(
        self,
        request: blockchain_models.StartDidAgentSidekeyRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartDidAgentSidekeyResponse:
        """
        Description: 为指定did添加外键关联，该接口必须被did自己调用或者did的认证密钥管理人调用。
        Summary: 为指定did添加外键关联
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartDidAgentSidekeyResponse().from_map(
            await self.do_request_async('1.0', 'baas.did.agent.sidekey.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def update_did_agent_sidekey(
        self,
        request: blockchain_models.UpdateDidAgentSidekeyRequest,
    ) -> blockchain_models.UpdateDidAgentSidekeyResponse:
        """
        Description: 为指定did更新外键关联，该接口必须被did自己调用或者did的认证密钥管理人调用。
        Summary: 更新指定did的外键
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.update_did_agent_sidekey_ex(request, headers, runtime)

    async def update_did_agent_sidekey_async(
        self,
        request: blockchain_models.UpdateDidAgentSidekeyRequest,
    ) -> blockchain_models.UpdateDidAgentSidekeyResponse:
        """
        Description: 为指定did更新外键关联，该接口必须被did自己调用或者did的认证密钥管理人调用。
        Summary: 更新指定did的外键
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.update_did_agent_sidekey_ex_async(request, headers, runtime)

    def update_did_agent_sidekey_ex(
        self,
        request: blockchain_models.UpdateDidAgentSidekeyRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.UpdateDidAgentSidekeyResponse:
        """
        Description: 为指定did更新外键关联，该接口必须被did自己调用或者did的认证密钥管理人调用。
        Summary: 更新指定did的外键
        """
        UtilClient.validate_model(request)
        return blockchain_models.UpdateDidAgentSidekeyResponse().from_map(
            self.do_request('1.0', 'baas.did.agent.sidekey.update', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def update_did_agent_sidekey_ex_async(
        self,
        request: blockchain_models.UpdateDidAgentSidekeyRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.UpdateDidAgentSidekeyResponse:
        """
        Description: 为指定did更新外键关联，该接口必须被did自己调用或者did的认证密钥管理人调用。
        Summary: 更新指定did的外键
        """
        UtilClient.validate_model(request)
        return blockchain_models.UpdateDidAgentSidekeyResponse().from_map(
            await self.do_request_async('1.0', 'baas.did.agent.sidekey.update', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def start_did_corporate_agentcreatewithsidekey(
        self,
        request: blockchain_models.StartDidCorporateAgentcreatewithsidekeyRequest,
    ) -> blockchain_models.StartDidCorporateAgentcreatewithsidekeyResponse:
        """
        Description: 代理创建did并创建外键
        Summary: 代理创建did并创建外键
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.start_did_corporate_agentcreatewithsidekey_ex(request, headers, runtime)

    async def start_did_corporate_agentcreatewithsidekey_async(
        self,
        request: blockchain_models.StartDidCorporateAgentcreatewithsidekeyRequest,
    ) -> blockchain_models.StartDidCorporateAgentcreatewithsidekeyResponse:
        """
        Description: 代理创建did并创建外键
        Summary: 代理创建did并创建外键
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.start_did_corporate_agentcreatewithsidekey_ex_async(request, headers, runtime)

    def start_did_corporate_agentcreatewithsidekey_ex(
        self,
        request: blockchain_models.StartDidCorporateAgentcreatewithsidekeyRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartDidCorporateAgentcreatewithsidekeyResponse:
        """
        Description: 代理创建did并创建外键
        Summary: 代理创建did并创建外键
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartDidCorporateAgentcreatewithsidekeyResponse().from_map(
            self.do_request('1.0', 'baas.did.corporate.agentcreatewithsidekey.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def start_did_corporate_agentcreatewithsidekey_ex_async(
        self,
        request: blockchain_models.StartDidCorporateAgentcreatewithsidekeyRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartDidCorporateAgentcreatewithsidekeyResponse:
        """
        Description: 代理创建did并创建外键
        Summary: 代理创建did并创建外键
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartDidCorporateAgentcreatewithsidekeyResponse().from_map(
            await self.do_request_async('1.0', 'baas.did.corporate.agentcreatewithsidekey.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def update_did_corporate_extensionservicewithsidekey(
        self,
        request: blockchain_models.UpdateDidCorporateExtensionservicewithsidekeyRequest,
    ) -> blockchain_models.UpdateDidCorporateExtensionservicewithsidekeyResponse:
        """
        Description: 更新doc 中的扩展字段并更新外键
        Summary: 更新doc 中的扩展字段并更新外键
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.update_did_corporate_extensionservicewithsidekey_ex(request, headers, runtime)

    async def update_did_corporate_extensionservicewithsidekey_async(
        self,
        request: blockchain_models.UpdateDidCorporateExtensionservicewithsidekeyRequest,
    ) -> blockchain_models.UpdateDidCorporateExtensionservicewithsidekeyResponse:
        """
        Description: 更新doc 中的扩展字段并更新外键
        Summary: 更新doc 中的扩展字段并更新外键
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.update_did_corporate_extensionservicewithsidekey_ex_async(request, headers, runtime)

    def update_did_corporate_extensionservicewithsidekey_ex(
        self,
        request: blockchain_models.UpdateDidCorporateExtensionservicewithsidekeyRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.UpdateDidCorporateExtensionservicewithsidekeyResponse:
        """
        Description: 更新doc 中的扩展字段并更新外键
        Summary: 更新doc 中的扩展字段并更新外键
        """
        UtilClient.validate_model(request)
        return blockchain_models.UpdateDidCorporateExtensionservicewithsidekeyResponse().from_map(
            self.do_request('1.0', 'baas.did.corporate.extensionservicewithsidekey.update', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def update_did_corporate_extensionservicewithsidekey_ex_async(
        self,
        request: blockchain_models.UpdateDidCorporateExtensionservicewithsidekeyRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.UpdateDidCorporateExtensionservicewithsidekeyResponse:
        """
        Description: 更新doc 中的扩展字段并更新外键
        Summary: 更新doc 中的扩展字段并更新外键
        """
        UtilClient.validate_model(request)
        return blockchain_models.UpdateDidCorporateExtensionservicewithsidekeyResponse().from_map(
            await self.do_request_async('1.0', 'baas.did.corporate.extensionservicewithsidekey.update', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_did_doc_sidekey(
        self,
        request: blockchain_models.QueryDidDocSidekeyRequest,
    ) -> blockchain_models.QueryDidDocSidekeyResponse:
        """
        Description: 通过sidekey方式查询对应doc
        Summary: 通过sidekey方式查询对应doc
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_did_doc_sidekey_ex(request, headers, runtime)

    async def query_did_doc_sidekey_async(
        self,
        request: blockchain_models.QueryDidDocSidekeyRequest,
    ) -> blockchain_models.QueryDidDocSidekeyResponse:
        """
        Description: 通过sidekey方式查询对应doc
        Summary: 通过sidekey方式查询对应doc
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_did_doc_sidekey_ex_async(request, headers, runtime)

    def query_did_doc_sidekey_ex(
        self,
        request: blockchain_models.QueryDidDocSidekeyRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryDidDocSidekeyResponse:
        """
        Description: 通过sidekey方式查询对应doc
        Summary: 通过sidekey方式查询对应doc
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryDidDocSidekeyResponse().from_map(
            self.do_request('1.0', 'baas.did.doc.sidekey.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_did_doc_sidekey_ex_async(
        self,
        request: blockchain_models.QueryDidDocSidekeyRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryDidDocSidekeyResponse:
        """
        Description: 通过sidekey方式查询对应doc
        Summary: 通过sidekey方式查询对应doc
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryDidDocSidekeyResponse().from_map(
            await self.do_request_async('1.0', 'baas.did.doc.sidekey.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def start_did_person_agentcreatewithsidekey(
        self,
        request: blockchain_models.StartDidPersonAgentcreatewithsidekeyRequest,
    ) -> blockchain_models.StartDidPersonAgentcreatewithsidekeyResponse:
        """
        Description: 代理创建个人did并创建外键
        Summary: 代理创建个人did并创建外键
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.start_did_person_agentcreatewithsidekey_ex(request, headers, runtime)

    async def start_did_person_agentcreatewithsidekey_async(
        self,
        request: blockchain_models.StartDidPersonAgentcreatewithsidekeyRequest,
    ) -> blockchain_models.StartDidPersonAgentcreatewithsidekeyResponse:
        """
        Description: 代理创建个人did并创建外键
        Summary: 代理创建个人did并创建外键
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.start_did_person_agentcreatewithsidekey_ex_async(request, headers, runtime)

    def start_did_person_agentcreatewithsidekey_ex(
        self,
        request: blockchain_models.StartDidPersonAgentcreatewithsidekeyRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartDidPersonAgentcreatewithsidekeyResponse:
        """
        Description: 代理创建个人did并创建外键
        Summary: 代理创建个人did并创建外键
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartDidPersonAgentcreatewithsidekeyResponse().from_map(
            self.do_request('1.0', 'baas.did.person.agentcreatewithsidekey.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def start_did_person_agentcreatewithsidekey_ex_async(
        self,
        request: blockchain_models.StartDidPersonAgentcreatewithsidekeyRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartDidPersonAgentcreatewithsidekeyResponse:
        """
        Description: 代理创建个人did并创建外键
        Summary: 代理创建个人did并创建外键
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartDidPersonAgentcreatewithsidekeyResponse().from_map(
            await self.do_request_async('1.0', 'baas.did.person.agentcreatewithsidekey.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def start_did_iot_agentcreate(
        self,
        request: blockchain_models.StartDidIotAgentcreateRequest,
    ) -> blockchain_models.StartDidIotAgentcreateResponse:
        """
        Description: 代理创建IOT did
        Summary: 代理创建IOT did
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.start_did_iot_agentcreate_ex(request, headers, runtime)

    async def start_did_iot_agentcreate_async(
        self,
        request: blockchain_models.StartDidIotAgentcreateRequest,
    ) -> blockchain_models.StartDidIotAgentcreateResponse:
        """
        Description: 代理创建IOT did
        Summary: 代理创建IOT did
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.start_did_iot_agentcreate_ex_async(request, headers, runtime)

    def start_did_iot_agentcreate_ex(
        self,
        request: blockchain_models.StartDidIotAgentcreateRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartDidIotAgentcreateResponse:
        """
        Description: 代理创建IOT did
        Summary: 代理创建IOT did
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartDidIotAgentcreateResponse().from_map(
            self.do_request('1.0', 'baas.did.iot.agentcreate.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def start_did_iot_agentcreate_ex_async(
        self,
        request: blockchain_models.StartDidIotAgentcreateRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartDidIotAgentcreateResponse:
        """
        Description: 代理创建IOT did
        Summary: 代理创建IOT did
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartDidIotAgentcreateResponse().from_map(
            await self.do_request_async('1.0', 'baas.did.iot.agentcreate.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def start_did_iot_agentcreatewithsidekey(
        self,
        request: blockchain_models.StartDidIotAgentcreatewithsidekeyRequest,
    ) -> blockchain_models.StartDidIotAgentcreatewithsidekeyResponse:
        """
        Description: 代理创建IOT did并创建外键
        Summary: 代理创建IOT did并创建外键
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.start_did_iot_agentcreatewithsidekey_ex(request, headers, runtime)

    async def start_did_iot_agentcreatewithsidekey_async(
        self,
        request: blockchain_models.StartDidIotAgentcreatewithsidekeyRequest,
    ) -> blockchain_models.StartDidIotAgentcreatewithsidekeyResponse:
        """
        Description: 代理创建IOT did并创建外键
        Summary: 代理创建IOT did并创建外键
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.start_did_iot_agentcreatewithsidekey_ex_async(request, headers, runtime)

    def start_did_iot_agentcreatewithsidekey_ex(
        self,
        request: blockchain_models.StartDidIotAgentcreatewithsidekeyRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartDidIotAgentcreatewithsidekeyResponse:
        """
        Description: 代理创建IOT did并创建外键
        Summary: 代理创建IOT did并创建外键
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartDidIotAgentcreatewithsidekeyResponse().from_map(
            self.do_request('1.0', 'baas.did.iot.agentcreatewithsidekey.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def start_did_iot_agentcreatewithsidekey_ex_async(
        self,
        request: blockchain_models.StartDidIotAgentcreatewithsidekeyRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartDidIotAgentcreatewithsidekeyResponse:
        """
        Description: 代理创建IOT did并创建外键
        Summary: 代理创建IOT did并创建外键
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartDidIotAgentcreatewithsidekeyResponse().from_map(
            await self.do_request_async('1.0', 'baas.did.iot.agentcreatewithsidekey.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def update_did_iot_extensionservicewithsidekey(
        self,
        request: blockchain_models.UpdateDidIotExtensionservicewithsidekeyRequest,
    ) -> blockchain_models.UpdateDidIotExtensionservicewithsidekeyResponse:
        """
        Description: 更新IOT类did的扩展字段并更新外键
        Summary: 更新IOT类did的扩展字段并更新外键
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.update_did_iot_extensionservicewithsidekey_ex(request, headers, runtime)

    async def update_did_iot_extensionservicewithsidekey_async(
        self,
        request: blockchain_models.UpdateDidIotExtensionservicewithsidekeyRequest,
    ) -> blockchain_models.UpdateDidIotExtensionservicewithsidekeyResponse:
        """
        Description: 更新IOT类did的扩展字段并更新外键
        Summary: 更新IOT类did的扩展字段并更新外键
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.update_did_iot_extensionservicewithsidekey_ex_async(request, headers, runtime)

    def update_did_iot_extensionservicewithsidekey_ex(
        self,
        request: blockchain_models.UpdateDidIotExtensionservicewithsidekeyRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.UpdateDidIotExtensionservicewithsidekeyResponse:
        """
        Description: 更新IOT类did的扩展字段并更新外键
        Summary: 更新IOT类did的扩展字段并更新外键
        """
        UtilClient.validate_model(request)
        return blockchain_models.UpdateDidIotExtensionservicewithsidekeyResponse().from_map(
            self.do_request('1.0', 'baas.did.iot.extensionservicewithsidekey.update', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def update_did_iot_extensionservicewithsidekey_ex_async(
        self,
        request: blockchain_models.UpdateDidIotExtensionservicewithsidekeyRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.UpdateDidIotExtensionservicewithsidekeyResponse:
        """
        Description: 更新IOT类did的扩展字段并更新外键
        Summary: 更新IOT类did的扩展字段并更新外键
        """
        UtilClient.validate_model(request)
        return blockchain_models.UpdateDidIotExtensionservicewithsidekeyResponse().from_map(
            await self.do_request_async('1.0', 'baas.did.iot.extensionservicewithsidekey.update', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def update_did_person_extensionservicewithsidekey(
        self,
        request: blockchain_models.UpdateDidPersonExtensionservicewithsidekeyRequest,
    ) -> blockchain_models.UpdateDidPersonExtensionservicewithsidekeyResponse:
        """
        Description: 更新个人did中的扩展字段并更新外键
        Summary: 更新个人did中的扩展字段并更新外键
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.update_did_person_extensionservicewithsidekey_ex(request, headers, runtime)

    async def update_did_person_extensionservicewithsidekey_async(
        self,
        request: blockchain_models.UpdateDidPersonExtensionservicewithsidekeyRequest,
    ) -> blockchain_models.UpdateDidPersonExtensionservicewithsidekeyResponse:
        """
        Description: 更新个人did中的扩展字段并更新外键
        Summary: 更新个人did中的扩展字段并更新外键
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.update_did_person_extensionservicewithsidekey_ex_async(request, headers, runtime)

    def update_did_person_extensionservicewithsidekey_ex(
        self,
        request: blockchain_models.UpdateDidPersonExtensionservicewithsidekeyRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.UpdateDidPersonExtensionservicewithsidekeyResponse:
        """
        Description: 更新个人did中的扩展字段并更新外键
        Summary: 更新个人did中的扩展字段并更新外键
        """
        UtilClient.validate_model(request)
        return blockchain_models.UpdateDidPersonExtensionservicewithsidekeyResponse().from_map(
            self.do_request('1.0', 'baas.did.person.extensionservicewithsidekey.update', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def update_did_person_extensionservicewithsidekey_ex_async(
        self,
        request: blockchain_models.UpdateDidPersonExtensionservicewithsidekeyRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.UpdateDidPersonExtensionservicewithsidekeyResponse:
        """
        Description: 更新个人did中的扩展字段并更新外键
        Summary: 更新个人did中的扩展字段并更新外键
        """
        UtilClient.validate_model(request)
        return blockchain_models.UpdateDidPersonExtensionservicewithsidekeyResponse().from_map(
            await self.do_request_async('1.0', 'baas.did.person.extensionservicewithsidekey.update', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def create_did_person_withthreemeta(
        self,
        request: blockchain_models.CreateDidPersonWiththreemetaRequest,
    ) -> blockchain_models.CreateDidPersonWiththreemetaResponse:
        """
        Description: 通过个人三要素验证后创建个人did，若未通过个人三要素验证，则不创建did并报错
        Summary: 通过个人三要素验证后创建个人did
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.create_did_person_withthreemeta_ex(request, headers, runtime)

    async def create_did_person_withthreemeta_async(
        self,
        request: blockchain_models.CreateDidPersonWiththreemetaRequest,
    ) -> blockchain_models.CreateDidPersonWiththreemetaResponse:
        """
        Description: 通过个人三要素验证后创建个人did，若未通过个人三要素验证，则不创建did并报错
        Summary: 通过个人三要素验证后创建个人did
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.create_did_person_withthreemeta_ex_async(request, headers, runtime)

    def create_did_person_withthreemeta_ex(
        self,
        request: blockchain_models.CreateDidPersonWiththreemetaRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateDidPersonWiththreemetaResponse:
        """
        Description: 通过个人三要素验证后创建个人did，若未通过个人三要素验证，则不创建did并报错
        Summary: 通过个人三要素验证后创建个人did
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateDidPersonWiththreemetaResponse().from_map(
            self.do_request('1.0', 'baas.did.person.withthreemeta.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def create_did_person_withthreemeta_ex_async(
        self,
        request: blockchain_models.CreateDidPersonWiththreemetaRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateDidPersonWiththreemetaResponse:
        """
        Description: 通过个人三要素验证后创建个人did，若未通过个人三要素验证，则不创建did并报错
        Summary: 通过个人三要素验证后创建个人did
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateDidPersonWiththreemetaResponse().from_map(
            await self.do_request_async('1.0', 'baas.did.person.withthreemeta.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def create_did_corporate_withthreemeta(
        self,
        request: blockchain_models.CreateDidCorporateWiththreemetaRequest,
    ) -> blockchain_models.CreateDidCorporateWiththreemetaResponse:
        """
        Description: 通过企业三要素验证后创建企业did，若未通过企业三要素验证，则不创建did并报错
        Summary: 通过企业三要素验证后创建企业did
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.create_did_corporate_withthreemeta_ex(request, headers, runtime)

    async def create_did_corporate_withthreemeta_async(
        self,
        request: blockchain_models.CreateDidCorporateWiththreemetaRequest,
    ) -> blockchain_models.CreateDidCorporateWiththreemetaResponse:
        """
        Description: 通过企业三要素验证后创建企业did，若未通过企业三要素验证，则不创建did并报错
        Summary: 通过企业三要素验证后创建企业did
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.create_did_corporate_withthreemeta_ex_async(request, headers, runtime)

    def create_did_corporate_withthreemeta_ex(
        self,
        request: blockchain_models.CreateDidCorporateWiththreemetaRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateDidCorporateWiththreemetaResponse:
        """
        Description: 通过企业三要素验证后创建企业did，若未通过企业三要素验证，则不创建did并报错
        Summary: 通过企业三要素验证后创建企业did
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateDidCorporateWiththreemetaResponse().from_map(
            self.do_request('1.0', 'baas.did.corporate.withthreemeta.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def create_did_corporate_withthreemeta_ex_async(
        self,
        request: blockchain_models.CreateDidCorporateWiththreemetaRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateDidCorporateWiththreemetaResponse:
        """
        Description: 通过企业三要素验证后创建企业did，若未通过企业三要素验证，则不创建did并报错
        Summary: 通过企业三要素验证后创建企业did
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateDidCorporateWiththreemetaResponse().from_map(
            await self.do_request_async('1.0', 'baas.did.corporate.withthreemeta.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def start_did_vcrepository_issue(
        self,
        request: blockchain_models.StartDidVcrepositoryIssueRequest,
    ) -> blockchain_models.StartDidVcrepositoryIssueResponse:
        """
        Description: 使用自己或者代理的did为指定did颁发证书，同时在VC Repository中对证书VC进行存储。
        支持授权管理，只有被授权的did未来才可以访问获取此颁发的证书数据。
        Summary: 指定did颁发证书，并存储
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.start_did_vcrepository_issue_ex(request, headers, runtime)

    async def start_did_vcrepository_issue_async(
        self,
        request: blockchain_models.StartDidVcrepositoryIssueRequest,
    ) -> blockchain_models.StartDidVcrepositoryIssueResponse:
        """
        Description: 使用自己或者代理的did为指定did颁发证书，同时在VC Repository中对证书VC进行存储。
        支持授权管理，只有被授权的did未来才可以访问获取此颁发的证书数据。
        Summary: 指定did颁发证书，并存储
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.start_did_vcrepository_issue_ex_async(request, headers, runtime)

    def start_did_vcrepository_issue_ex(
        self,
        request: blockchain_models.StartDidVcrepositoryIssueRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartDidVcrepositoryIssueResponse:
        """
        Description: 使用自己或者代理的did为指定did颁发证书，同时在VC Repository中对证书VC进行存储。
        支持授权管理，只有被授权的did未来才可以访问获取此颁发的证书数据。
        Summary: 指定did颁发证书，并存储
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartDidVcrepositoryIssueResponse().from_map(
            self.do_request('1.0', 'baas.did.vcrepository.issue.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def start_did_vcrepository_issue_ex_async(
        self,
        request: blockchain_models.StartDidVcrepositoryIssueRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartDidVcrepositoryIssueResponse:
        """
        Description: 使用自己或者代理的did为指定did颁发证书，同时在VC Repository中对证书VC进行存储。
        支持授权管理，只有被授权的did未来才可以访问获取此颁发的证书数据。
        Summary: 指定did颁发证书，并存储
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartDidVcrepositoryIssueResponse().from_map(
            await self.do_request_async('1.0', 'baas.did.vcrepository.issue.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def start_did_vcrepository_read(
        self,
        request: blockchain_models.StartDidVcrepositoryReadRequest,
    ) -> blockchain_models.StartDidVcrepositoryReadResponse:
        """
        Description: 通过提供verifiable_claim_id来读取目标VC内容，如果调用方不知道目标VC的verifiable_claim_id，则通过配置目标VC的subject_did、issuer_did 和 过滤字段来查询并读取。
        如果调用者不在目标VC的授权名单中，则无法读取目标VC内容。
        Summary: 读取目标证书数据
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.start_did_vcrepository_read_ex(request, headers, runtime)

    async def start_did_vcrepository_read_async(
        self,
        request: blockchain_models.StartDidVcrepositoryReadRequest,
    ) -> blockchain_models.StartDidVcrepositoryReadResponse:
        """
        Description: 通过提供verifiable_claim_id来读取目标VC内容，如果调用方不知道目标VC的verifiable_claim_id，则通过配置目标VC的subject_did、issuer_did 和 过滤字段来查询并读取。
        如果调用者不在目标VC的授权名单中，则无法读取目标VC内容。
        Summary: 读取目标证书数据
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.start_did_vcrepository_read_ex_async(request, headers, runtime)

    def start_did_vcrepository_read_ex(
        self,
        request: blockchain_models.StartDidVcrepositoryReadRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartDidVcrepositoryReadResponse:
        """
        Description: 通过提供verifiable_claim_id来读取目标VC内容，如果调用方不知道目标VC的verifiable_claim_id，则通过配置目标VC的subject_did、issuer_did 和 过滤字段来查询并读取。
        如果调用者不在目标VC的授权名单中，则无法读取目标VC内容。
        Summary: 读取目标证书数据
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartDidVcrepositoryReadResponse().from_map(
            self.do_request('1.0', 'baas.did.vcrepository.read.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def start_did_vcrepository_read_ex_async(
        self,
        request: blockchain_models.StartDidVcrepositoryReadRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartDidVcrepositoryReadResponse:
        """
        Description: 通过提供verifiable_claim_id来读取目标VC内容，如果调用方不知道目标VC的verifiable_claim_id，则通过配置目标VC的subject_did、issuer_did 和 过滤字段来查询并读取。
        如果调用者不在目标VC的授权名单中，则无法读取目标VC内容。
        Summary: 读取目标证书数据
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartDidVcrepositoryReadResponse().from_map(
            await self.do_request_async('1.0', 'baas.did.vcrepository.read.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def start_did_vcrepository_auth(
        self,
        request: blockchain_models.StartDidVcrepositoryAuthRequest,
    ) -> blockchain_models.StartDidVcrepositoryAuthResponse:
        """
        Description: 调用者需是目标VC的拥有者，也就是目标VC内容中的subject。
        授权新的did读取目标VC的权限。
        Summary: 对已有vc新增授权did
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.start_did_vcrepository_auth_ex(request, headers, runtime)

    async def start_did_vcrepository_auth_async(
        self,
        request: blockchain_models.StartDidVcrepositoryAuthRequest,
    ) -> blockchain_models.StartDidVcrepositoryAuthResponse:
        """
        Description: 调用者需是目标VC的拥有者，也就是目标VC内容中的subject。
        授权新的did读取目标VC的权限。
        Summary: 对已有vc新增授权did
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.start_did_vcrepository_auth_ex_async(request, headers, runtime)

    def start_did_vcrepository_auth_ex(
        self,
        request: blockchain_models.StartDidVcrepositoryAuthRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartDidVcrepositoryAuthResponse:
        """
        Description: 调用者需是目标VC的拥有者，也就是目标VC内容中的subject。
        授权新的did读取目标VC的权限。
        Summary: 对已有vc新增授权did
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartDidVcrepositoryAuthResponse().from_map(
            self.do_request('1.0', 'baas.did.vcrepository.auth.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def start_did_vcrepository_auth_ex_async(
        self,
        request: blockchain_models.StartDidVcrepositoryAuthRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartDidVcrepositoryAuthResponse:
        """
        Description: 调用者需是目标VC的拥有者，也就是目标VC内容中的subject。
        授权新的did读取目标VC的权限。
        Summary: 对已有vc新增授权did
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartDidVcrepositoryAuthResponse().from_map(
            await self.do_request_async('1.0', 'baas.did.vcrepository.auth.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def start_did_vcrepository_filterandread(
        self,
        request: blockchain_models.StartDidVcrepositoryFilterandreadRequest,
    ) -> blockchain_models.StartDidVcrepositoryFilterandreadResponse:
        """
        Description: 通过配置目标VC的subject_did 和 过滤字段来查询并读取。
        如果调用者不在目标VC的授权名单中，则无法读取目标VC内容。
        Summary: 查询过滤并读取目标证书数据
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.start_did_vcrepository_filterandread_ex(request, headers, runtime)

    async def start_did_vcrepository_filterandread_async(
        self,
        request: blockchain_models.StartDidVcrepositoryFilterandreadRequest,
    ) -> blockchain_models.StartDidVcrepositoryFilterandreadResponse:
        """
        Description: 通过配置目标VC的subject_did 和 过滤字段来查询并读取。
        如果调用者不在目标VC的授权名单中，则无法读取目标VC内容。
        Summary: 查询过滤并读取目标证书数据
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.start_did_vcrepository_filterandread_ex_async(request, headers, runtime)

    def start_did_vcrepository_filterandread_ex(
        self,
        request: blockchain_models.StartDidVcrepositoryFilterandreadRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartDidVcrepositoryFilterandreadResponse:
        """
        Description: 通过配置目标VC的subject_did 和 过滤字段来查询并读取。
        如果调用者不在目标VC的授权名单中，则无法读取目标VC内容。
        Summary: 查询过滤并读取目标证书数据
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartDidVcrepositoryFilterandreadResponse().from_map(
            self.do_request('1.0', 'baas.did.vcrepository.filterandread.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def start_did_vcrepository_filterandread_ex_async(
        self,
        request: blockchain_models.StartDidVcrepositoryFilterandreadRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartDidVcrepositoryFilterandreadResponse:
        """
        Description: 通过配置目标VC的subject_did 和 过滤字段来查询并读取。
        如果调用者不在目标VC的授权名单中，则无法读取目标VC内容。
        Summary: 查询过滤并读取目标证书数据
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartDidVcrepositoryFilterandreadResponse().from_map(
            await self.do_request_async('1.0', 'baas.did.vcrepository.filterandread.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def start_did_vcrepository_readwithvcid(
        self,
        request: blockchain_models.StartDidVcrepositoryReadwithvcidRequest,
    ) -> blockchain_models.StartDidVcrepositoryReadwithvcidResponse:
        """
        Description: 通过提供verifiable_claim_id来读取目标VC内容，如果调用者不在目标VC的授权名单中，则无法读取目标VC内容。
        注意通常verifiable_claim_id是“vc:mychain:”为前缀。
        Summary: 通过vcid读取目标证书数据
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.start_did_vcrepository_readwithvcid_ex(request, headers, runtime)

    async def start_did_vcrepository_readwithvcid_async(
        self,
        request: blockchain_models.StartDidVcrepositoryReadwithvcidRequest,
    ) -> blockchain_models.StartDidVcrepositoryReadwithvcidResponse:
        """
        Description: 通过提供verifiable_claim_id来读取目标VC内容，如果调用者不在目标VC的授权名单中，则无法读取目标VC内容。
        注意通常verifiable_claim_id是“vc:mychain:”为前缀。
        Summary: 通过vcid读取目标证书数据
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.start_did_vcrepository_readwithvcid_ex_async(request, headers, runtime)

    def start_did_vcrepository_readwithvcid_ex(
        self,
        request: blockchain_models.StartDidVcrepositoryReadwithvcidRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartDidVcrepositoryReadwithvcidResponse:
        """
        Description: 通过提供verifiable_claim_id来读取目标VC内容，如果调用者不在目标VC的授权名单中，则无法读取目标VC内容。
        注意通常verifiable_claim_id是“vc:mychain:”为前缀。
        Summary: 通过vcid读取目标证书数据
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartDidVcrepositoryReadwithvcidResponse().from_map(
            self.do_request('1.0', 'baas.did.vcrepository.readwithvcid.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def start_did_vcrepository_readwithvcid_ex_async(
        self,
        request: blockchain_models.StartDidVcrepositoryReadwithvcidRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartDidVcrepositoryReadwithvcidResponse:
        """
        Description: 通过提供verifiable_claim_id来读取目标VC内容，如果调用者不在目标VC的授权名单中，则无法读取目标VC内容。
        注意通常verifiable_claim_id是“vc:mychain:”为前缀。
        Summary: 通过vcid读取目标证书数据
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartDidVcrepositoryReadwithvcidResponse().from_map(
            await self.do_request_async('1.0', 'baas.did.vcrepository.readwithvcid.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def start_did_vcrepository_readwithdefineid(
        self,
        request: blockchain_models.StartDidVcrepositoryReadwithdefineidRequest,
    ) -> blockchain_models.StartDidVcrepositoryReadwithdefineidResponse:
        """
        Description: 如果业务方在颁发证书VC时，使用了自定义的verifiable_claim_id，则使用此id来读取目标证书内容。
        注意：通常自定义的verifiable_claim_id，不是“vc:mychain:”前缀开始。
        Summary: 通过自定义id读取目标证书内容
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.start_did_vcrepository_readwithdefineid_ex(request, headers, runtime)

    async def start_did_vcrepository_readwithdefineid_async(
        self,
        request: blockchain_models.StartDidVcrepositoryReadwithdefineidRequest,
    ) -> blockchain_models.StartDidVcrepositoryReadwithdefineidResponse:
        """
        Description: 如果业务方在颁发证书VC时，使用了自定义的verifiable_claim_id，则使用此id来读取目标证书内容。
        注意：通常自定义的verifiable_claim_id，不是“vc:mychain:”前缀开始。
        Summary: 通过自定义id读取目标证书内容
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.start_did_vcrepository_readwithdefineid_ex_async(request, headers, runtime)

    def start_did_vcrepository_readwithdefineid_ex(
        self,
        request: blockchain_models.StartDidVcrepositoryReadwithdefineidRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartDidVcrepositoryReadwithdefineidResponse:
        """
        Description: 如果业务方在颁发证书VC时，使用了自定义的verifiable_claim_id，则使用此id来读取目标证书内容。
        注意：通常自定义的verifiable_claim_id，不是“vc:mychain:”前缀开始。
        Summary: 通过自定义id读取目标证书内容
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartDidVcrepositoryReadwithdefineidResponse().from_map(
            self.do_request('1.0', 'baas.did.vcrepository.readwithdefineid.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def start_did_vcrepository_readwithdefineid_ex_async(
        self,
        request: blockchain_models.StartDidVcrepositoryReadwithdefineidRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartDidVcrepositoryReadwithdefineidResponse:
        """
        Description: 如果业务方在颁发证书VC时，使用了自定义的verifiable_claim_id，则使用此id来读取目标证书内容。
        注意：通常自定义的verifiable_claim_id，不是“vc:mychain:”前缀开始。
        Summary: 通过自定义id读取目标证书内容
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartDidVcrepositoryReadwithdefineidResponse().from_map(
            await self.do_request_async('1.0', 'baas.did.vcrepository.readwithdefineid.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def start_did_vcrepository_authwithvcid(
        self,
        request: blockchain_models.StartDidVcrepositoryAuthwithvcidRequest,
    ) -> blockchain_models.StartDidVcrepositoryAuthwithvcidResponse:
        """
        Description: 通过提供verifiable_claim_id来找到目标VC内容并追加授权did列表，只有调用者是目标VC的subject才能操作。 注意通常verifiable_claim_id是“vc:mychain:”为前缀。
        Summary: 通过vcid对目标证书追加授权
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.start_did_vcrepository_authwithvcid_ex(request, headers, runtime)

    async def start_did_vcrepository_authwithvcid_async(
        self,
        request: blockchain_models.StartDidVcrepositoryAuthwithvcidRequest,
    ) -> blockchain_models.StartDidVcrepositoryAuthwithvcidResponse:
        """
        Description: 通过提供verifiable_claim_id来找到目标VC内容并追加授权did列表，只有调用者是目标VC的subject才能操作。 注意通常verifiable_claim_id是“vc:mychain:”为前缀。
        Summary: 通过vcid对目标证书追加授权
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.start_did_vcrepository_authwithvcid_ex_async(request, headers, runtime)

    def start_did_vcrepository_authwithvcid_ex(
        self,
        request: blockchain_models.StartDidVcrepositoryAuthwithvcidRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartDidVcrepositoryAuthwithvcidResponse:
        """
        Description: 通过提供verifiable_claim_id来找到目标VC内容并追加授权did列表，只有调用者是目标VC的subject才能操作。 注意通常verifiable_claim_id是“vc:mychain:”为前缀。
        Summary: 通过vcid对目标证书追加授权
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartDidVcrepositoryAuthwithvcidResponse().from_map(
            self.do_request('1.0', 'baas.did.vcrepository.authwithvcid.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def start_did_vcrepository_authwithvcid_ex_async(
        self,
        request: blockchain_models.StartDidVcrepositoryAuthwithvcidRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartDidVcrepositoryAuthwithvcidResponse:
        """
        Description: 通过提供verifiable_claim_id来找到目标VC内容并追加授权did列表，只有调用者是目标VC的subject才能操作。 注意通常verifiable_claim_id是“vc:mychain:”为前缀。
        Summary: 通过vcid对目标证书追加授权
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartDidVcrepositoryAuthwithvcidResponse().from_map(
            await self.do_request_async('1.0', 'baas.did.vcrepository.authwithvcid.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def start_did_vcrepository_authwithdefineid(
        self,
        request: blockchain_models.StartDidVcrepositoryAuthwithdefineidRequest,
    ) -> blockchain_models.StartDidVcrepositoryAuthwithdefineidResponse:
        """
        Description: 通过提供业务方自定义id来找到目标VC内容并追加授权did列表，只有调用者是目标VC的subject才能操作。 注意通常自定义id不是“vc:mychain:”前缀。
        Summary: 通过自定义id对目标证书追加授权
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.start_did_vcrepository_authwithdefineid_ex(request, headers, runtime)

    async def start_did_vcrepository_authwithdefineid_async(
        self,
        request: blockchain_models.StartDidVcrepositoryAuthwithdefineidRequest,
    ) -> blockchain_models.StartDidVcrepositoryAuthwithdefineidResponse:
        """
        Description: 通过提供业务方自定义id来找到目标VC内容并追加授权did列表，只有调用者是目标VC的subject才能操作。 注意通常自定义id不是“vc:mychain:”前缀。
        Summary: 通过自定义id对目标证书追加授权
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.start_did_vcrepository_authwithdefineid_ex_async(request, headers, runtime)

    def start_did_vcrepository_authwithdefineid_ex(
        self,
        request: blockchain_models.StartDidVcrepositoryAuthwithdefineidRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartDidVcrepositoryAuthwithdefineidResponse:
        """
        Description: 通过提供业务方自定义id来找到目标VC内容并追加授权did列表，只有调用者是目标VC的subject才能操作。 注意通常自定义id不是“vc:mychain:”前缀。
        Summary: 通过自定义id对目标证书追加授权
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartDidVcrepositoryAuthwithdefineidResponse().from_map(
            self.do_request('1.0', 'baas.did.vcrepository.authwithdefineid.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def start_did_vcrepository_authwithdefineid_ex_async(
        self,
        request: blockchain_models.StartDidVcrepositoryAuthwithdefineidRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartDidVcrepositoryAuthwithdefineidResponse:
        """
        Description: 通过提供业务方自定义id来找到目标VC内容并追加授权did列表，只有调用者是目标VC的subject才能操作。 注意通常自定义id不是“vc:mychain:”前缀。
        Summary: 通过自定义id对目标证书追加授权
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartDidVcrepositoryAuthwithdefineidResponse().from_map(
            await self.do_request_async('1.0', 'baas.did.vcrepository.authwithdefineid.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def start_did_agent_servicetype(
        self,
        request: blockchain_models.StartDidAgentServicetypeRequest,
    ) -> blockchain_models.StartDidAgentServicetypeResponse:
        """
        Description: 注册自定义的服务类型，目前只有租户did可以调用
        Summary: 注册自定义服务类型
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.start_did_agent_servicetype_ex(request, headers, runtime)

    async def start_did_agent_servicetype_async(
        self,
        request: blockchain_models.StartDidAgentServicetypeRequest,
    ) -> blockchain_models.StartDidAgentServicetypeResponse:
        """
        Description: 注册自定义的服务类型，目前只有租户did可以调用
        Summary: 注册自定义服务类型
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.start_did_agent_servicetype_ex_async(request, headers, runtime)

    def start_did_agent_servicetype_ex(
        self,
        request: blockchain_models.StartDidAgentServicetypeRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartDidAgentServicetypeResponse:
        """
        Description: 注册自定义的服务类型，目前只有租户did可以调用
        Summary: 注册自定义服务类型
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartDidAgentServicetypeResponse().from_map(
            self.do_request('1.0', 'baas.did.agent.servicetype.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def start_did_agent_servicetype_ex_async(
        self,
        request: blockchain_models.StartDidAgentServicetypeRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartDidAgentServicetypeResponse:
        """
        Description: 注册自定义的服务类型，目前只有租户did可以调用
        Summary: 注册自定义服务类型
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartDidAgentServicetypeResponse().from_map(
            await self.do_request_async('1.0', 'baas.did.agent.servicetype.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_did_agent_servicetype(
        self,
        request: blockchain_models.QueryDidAgentServicetypeRequest,
    ) -> blockchain_models.QueryDidAgentServicetypeResponse:
        """
        Description: 查询指定服务类型的定义，不支持全量查询
        Summary: 查询指定服务类型的定义
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_did_agent_servicetype_ex(request, headers, runtime)

    async def query_did_agent_servicetype_async(
        self,
        request: blockchain_models.QueryDidAgentServicetypeRequest,
    ) -> blockchain_models.QueryDidAgentServicetypeResponse:
        """
        Description: 查询指定服务类型的定义，不支持全量查询
        Summary: 查询指定服务类型的定义
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_did_agent_servicetype_ex_async(request, headers, runtime)

    def query_did_agent_servicetype_ex(
        self,
        request: blockchain_models.QueryDidAgentServicetypeRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryDidAgentServicetypeResponse:
        """
        Description: 查询指定服务类型的定义，不支持全量查询
        Summary: 查询指定服务类型的定义
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryDidAgentServicetypeResponse().from_map(
            self.do_request('1.0', 'baas.did.agent.servicetype.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_did_agent_servicetype_ex_async(
        self,
        request: blockchain_models.QueryDidAgentServicetypeRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryDidAgentServicetypeResponse:
        """
        Description: 查询指定服务类型的定义，不支持全量查询
        Summary: 查询指定服务类型的定义
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryDidAgentServicetypeResponse().from_map(
            await self.do_request_async('1.0', 'baas.did.agent.servicetype.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def update_did_services(
        self,
        request: blockchain_models.UpdateDidServicesRequest,
    ) -> blockchain_models.UpdateDidServicesResponse:
        """
        Description: 代理模式下更新企业did doc中service中的字段
        Summary: 代理更新企业did中的services
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.update_did_services_ex(request, headers, runtime)

    async def update_did_services_async(
        self,
        request: blockchain_models.UpdateDidServicesRequest,
    ) -> blockchain_models.UpdateDidServicesResponse:
        """
        Description: 代理模式下更新企业did doc中service中的字段
        Summary: 代理更新企业did中的services
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.update_did_services_ex_async(request, headers, runtime)

    def update_did_services_ex(
        self,
        request: blockchain_models.UpdateDidServicesRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.UpdateDidServicesResponse:
        """
        Description: 代理模式下更新企业did doc中service中的字段
        Summary: 代理更新企业did中的services
        """
        UtilClient.validate_model(request)
        return blockchain_models.UpdateDidServicesResponse().from_map(
            self.do_request('1.0', 'baas.did.services.update', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def update_did_services_ex_async(
        self,
        request: blockchain_models.UpdateDidServicesRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.UpdateDidServicesResponse:
        """
        Description: 代理模式下更新企业did doc中service中的字段
        Summary: 代理更新企业did中的services
        """
        UtilClient.validate_model(request)
        return blockchain_models.UpdateDidServicesResponse().from_map(
            await self.do_request_async('1.0', 'baas.did.services.update', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_did_agent_servicediscovery(
        self,
        request: blockchain_models.QueryDidAgentServicediscoveryRequest,
    ) -> blockchain_models.QueryDidAgentServicediscoveryResponse:
        """
        Description: 服务发现
        Summary: 服务发现
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_did_agent_servicediscovery_ex(request, headers, runtime)

    async def query_did_agent_servicediscovery_async(
        self,
        request: blockchain_models.QueryDidAgentServicediscoveryRequest,
    ) -> blockchain_models.QueryDidAgentServicediscoveryResponse:
        """
        Description: 服务发现
        Summary: 服务发现
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_did_agent_servicediscovery_ex_async(request, headers, runtime)

    def query_did_agent_servicediscovery_ex(
        self,
        request: blockchain_models.QueryDidAgentServicediscoveryRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryDidAgentServicediscoveryResponse:
        """
        Description: 服务发现
        Summary: 服务发现
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryDidAgentServicediscoveryResponse().from_map(
            self.do_request('1.0', 'baas.did.agent.servicediscovery.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_did_agent_servicediscovery_ex_async(
        self,
        request: blockchain_models.QueryDidAgentServicediscoveryRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryDidAgentServicediscoveryResponse:
        """
        Description: 服务发现
        Summary: 服务发现
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryDidAgentServicediscoveryResponse().from_map(
            await self.do_request_async('1.0', 'baas.did.agent.servicediscovery.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def start_did_verifiableclaim_issuerandsave(
        self,
        request: blockchain_models.StartDidVerifiableclaimIssuerandsaveRequest,
    ) -> blockchain_models.StartDidVerifiableclaimIssuerandsaveResponse:
        """
        Description: 为指定did颁发证书,并将保存到对应仓库
        Summary: 为指定did颁发证书,并将保存到对应仓库
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.start_did_verifiableclaim_issuerandsave_ex(request, headers, runtime)

    async def start_did_verifiableclaim_issuerandsave_async(
        self,
        request: blockchain_models.StartDidVerifiableclaimIssuerandsaveRequest,
    ) -> blockchain_models.StartDidVerifiableclaimIssuerandsaveResponse:
        """
        Description: 为指定did颁发证书,并将保存到对应仓库
        Summary: 为指定did颁发证书,并将保存到对应仓库
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.start_did_verifiableclaim_issuerandsave_ex_async(request, headers, runtime)

    def start_did_verifiableclaim_issuerandsave_ex(
        self,
        request: blockchain_models.StartDidVerifiableclaimIssuerandsaveRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartDidVerifiableclaimIssuerandsaveResponse:
        """
        Description: 为指定did颁发证书,并将保存到对应仓库
        Summary: 为指定did颁发证书,并将保存到对应仓库
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartDidVerifiableclaimIssuerandsaveResponse().from_map(
            self.do_request('1.0', 'baas.did.verifiableclaim.issuerandsave.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def start_did_verifiableclaim_issuerandsave_ex_async(
        self,
        request: blockchain_models.StartDidVerifiableclaimIssuerandsaveRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartDidVerifiableclaimIssuerandsaveResponse:
        """
        Description: 为指定did颁发证书,并将保存到对应仓库
        Summary: 为指定did颁发证书,并将保存到对应仓库
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartDidVerifiableclaimIssuerandsaveResponse().from_map(
            await self.do_request_async('1.0', 'baas.did.verifiableclaim.issuerandsave.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def start_did_vcrepository_vctransmit(
        self,
        request: blockchain_models.StartDidVcrepositoryVctransmitRequest,
    ) -> blockchain_models.StartDidVcrepositoryVctransmitResponse:
        """
        Description: 通过agent代理通过VC Repo进行VC传输
        Summary: 通过agent代理进行VC传输
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.start_did_vcrepository_vctransmit_ex(request, headers, runtime)

    async def start_did_vcrepository_vctransmit_async(
        self,
        request: blockchain_models.StartDidVcrepositoryVctransmitRequest,
    ) -> blockchain_models.StartDidVcrepositoryVctransmitResponse:
        """
        Description: 通过agent代理通过VC Repo进行VC传输
        Summary: 通过agent代理进行VC传输
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.start_did_vcrepository_vctransmit_ex_async(request, headers, runtime)

    def start_did_vcrepository_vctransmit_ex(
        self,
        request: blockchain_models.StartDidVcrepositoryVctransmitRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartDidVcrepositoryVctransmitResponse:
        """
        Description: 通过agent代理通过VC Repo进行VC传输
        Summary: 通过agent代理进行VC传输
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartDidVcrepositoryVctransmitResponse().from_map(
            self.do_request('1.0', 'baas.did.vcrepository.vctransmit.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def start_did_vcrepository_vctransmit_ex_async(
        self,
        request: blockchain_models.StartDidVcrepositoryVctransmitRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartDidVcrepositoryVctransmitResponse:
        """
        Description: 通过agent代理通过VC Repo进行VC传输
        Summary: 通过agent代理进行VC传输
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartDidVcrepositoryVctransmitResponse().from_map(
            await self.do_request_async('1.0', 'baas.did.vcrepository.vctransmit.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def create_did_person_withtwometa(
        self,
        request: blockchain_models.CreateDidPersonWithtwometaRequest,
    ) -> blockchain_models.CreateDidPersonWithtwometaResponse:
        """
        Description: 通过个人二要素验证后创建个人did，若未通过个人二要素验证，则不创建did并报错
        Summary: 通过个人二要素验证后创建个人did
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.create_did_person_withtwometa_ex(request, headers, runtime)

    async def create_did_person_withtwometa_async(
        self,
        request: blockchain_models.CreateDidPersonWithtwometaRequest,
    ) -> blockchain_models.CreateDidPersonWithtwometaResponse:
        """
        Description: 通过个人二要素验证后创建个人did，若未通过个人二要素验证，则不创建did并报错
        Summary: 通过个人二要素验证后创建个人did
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.create_did_person_withtwometa_ex_async(request, headers, runtime)

    def create_did_person_withtwometa_ex(
        self,
        request: blockchain_models.CreateDidPersonWithtwometaRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateDidPersonWithtwometaResponse:
        """
        Description: 通过个人二要素验证后创建个人did，若未通过个人二要素验证，则不创建did并报错
        Summary: 通过个人二要素验证后创建个人did
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateDidPersonWithtwometaResponse().from_map(
            self.do_request('1.0', 'baas.did.person.withtwometa.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def create_did_person_withtwometa_ex_async(
        self,
        request: blockchain_models.CreateDidPersonWithtwometaRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateDidPersonWithtwometaResponse:
        """
        Description: 通过个人二要素验证后创建个人did，若未通过个人二要素验证，则不创建did并报错
        Summary: 通过个人二要素验证后创建个人did
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateDidPersonWithtwometaResponse().from_map(
            await self.do_request_async('1.0', 'baas.did.person.withtwometa.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def create_did_corporate_withtwometa(
        self,
        request: blockchain_models.CreateDidCorporateWithtwometaRequest,
    ) -> blockchain_models.CreateDidCorporateWithtwometaResponse:
        """
        Description: 通过企业二要素验证后创建企业did
        Summary: 通过企业二要素验证后创建企业did
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.create_did_corporate_withtwometa_ex(request, headers, runtime)

    async def create_did_corporate_withtwometa_async(
        self,
        request: blockchain_models.CreateDidCorporateWithtwometaRequest,
    ) -> blockchain_models.CreateDidCorporateWithtwometaResponse:
        """
        Description: 通过企业二要素验证后创建企业did
        Summary: 通过企业二要素验证后创建企业did
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.create_did_corporate_withtwometa_ex_async(request, headers, runtime)

    def create_did_corporate_withtwometa_ex(
        self,
        request: blockchain_models.CreateDidCorporateWithtwometaRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateDidCorporateWithtwometaResponse:
        """
        Description: 通过企业二要素验证后创建企业did
        Summary: 通过企业二要素验证后创建企业did
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateDidCorporateWithtwometaResponse().from_map(
            self.do_request('1.0', 'baas.did.corporate.withtwometa.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def create_did_corporate_withtwometa_ex_async(
        self,
        request: blockchain_models.CreateDidCorporateWithtwometaRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateDidCorporateWithtwometaResponse:
        """
        Description: 通过企业二要素验证后创建企业did
        Summary: 通过企业二要素验证后创建企业did
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateDidCorporateWithtwometaResponse().from_map(
            await self.do_request_async('1.0', 'baas.did.corporate.withtwometa.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def create_did_corporate_withfourmeta(
        self,
        request: blockchain_models.CreateDidCorporateWithfourmetaRequest,
    ) -> blockchain_models.CreateDidCorporateWithfourmetaResponse:
        """
        Description: 通过企业四要素验证后创建企业did
        Summary: 通过企业四要素验证后创建企业did
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.create_did_corporate_withfourmeta_ex(request, headers, runtime)

    async def create_did_corporate_withfourmeta_async(
        self,
        request: blockchain_models.CreateDidCorporateWithfourmetaRequest,
    ) -> blockchain_models.CreateDidCorporateWithfourmetaResponse:
        """
        Description: 通过企业四要素验证后创建企业did
        Summary: 通过企业四要素验证后创建企业did
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.create_did_corporate_withfourmeta_ex_async(request, headers, runtime)

    def create_did_corporate_withfourmeta_ex(
        self,
        request: blockchain_models.CreateDidCorporateWithfourmetaRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateDidCorporateWithfourmetaResponse:
        """
        Description: 通过企业四要素验证后创建企业did
        Summary: 通过企业四要素验证后创建企业did
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateDidCorporateWithfourmetaResponse().from_map(
            self.do_request('1.0', 'baas.did.corporate.withfourmeta.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def create_did_corporate_withfourmeta_ex_async(
        self,
        request: blockchain_models.CreateDidCorporateWithfourmetaRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateDidCorporateWithfourmetaResponse:
        """
        Description: 通过企业四要素验证后创建企业did
        Summary: 通过企业四要素验证后创建企业did
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateDidCorporateWithfourmetaResponse().from_map(
            await self.do_request_async('1.0', 'baas.did.corporate.withfourmeta.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def create_did_person_withfourmeta(
        self,
        request: blockchain_models.CreateDidPersonWithfourmetaRequest,
    ) -> blockchain_models.CreateDidPersonWithfourmetaResponse:
        """
        Description: 通过个人四要素验证后创建个人did
        Summary: 通过个人四要素验证后创建个人did
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.create_did_person_withfourmeta_ex(request, headers, runtime)

    async def create_did_person_withfourmeta_async(
        self,
        request: blockchain_models.CreateDidPersonWithfourmetaRequest,
    ) -> blockchain_models.CreateDidPersonWithfourmetaResponse:
        """
        Description: 通过个人四要素验证后创建个人did
        Summary: 通过个人四要素验证后创建个人did
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.create_did_person_withfourmeta_ex_async(request, headers, runtime)

    def create_did_person_withfourmeta_ex(
        self,
        request: blockchain_models.CreateDidPersonWithfourmetaRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateDidPersonWithfourmetaResponse:
        """
        Description: 通过个人四要素验证后创建个人did
        Summary: 通过个人四要素验证后创建个人did
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateDidPersonWithfourmetaResponse().from_map(
            self.do_request('1.0', 'baas.did.person.withfourmeta.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def create_did_person_withfourmeta_ex_async(
        self,
        request: blockchain_models.CreateDidPersonWithfourmetaRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateDidPersonWithfourmetaResponse:
        """
        Description: 通过个人四要素验证后创建个人did
        Summary: 通过个人四要素验证后创建个人did
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateDidPersonWithfourmetaResponse().from_map(
            await self.do_request_async('1.0', 'baas.did.person.withfourmeta.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def start_did_corporate_twometa(
        self,
        request: blockchain_models.StartDidCorporateTwometaRequest,
    ) -> blockchain_models.StartDidCorporateTwometaResponse:
        """
        Description: 对did进行企业二要素实名认证
        Summary: 对did进行企业二要素实名认证
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.start_did_corporate_twometa_ex(request, headers, runtime)

    async def start_did_corporate_twometa_async(
        self,
        request: blockchain_models.StartDidCorporateTwometaRequest,
    ) -> blockchain_models.StartDidCorporateTwometaResponse:
        """
        Description: 对did进行企业二要素实名认证
        Summary: 对did进行企业二要素实名认证
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.start_did_corporate_twometa_ex_async(request, headers, runtime)

    def start_did_corporate_twometa_ex(
        self,
        request: blockchain_models.StartDidCorporateTwometaRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartDidCorporateTwometaResponse:
        """
        Description: 对did进行企业二要素实名认证
        Summary: 对did进行企业二要素实名认证
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartDidCorporateTwometaResponse().from_map(
            self.do_request('1.0', 'baas.did.corporate.twometa.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def start_did_corporate_twometa_ex_async(
        self,
        request: blockchain_models.StartDidCorporateTwometaRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartDidCorporateTwometaResponse:
        """
        Description: 对did进行企业二要素实名认证
        Summary: 对did进行企业二要素实名认证
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartDidCorporateTwometaResponse().from_map(
            await self.do_request_async('1.0', 'baas.did.corporate.twometa.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def start_did_corporate_threemeta(
        self,
        request: blockchain_models.StartDidCorporateThreemetaRequest,
    ) -> blockchain_models.StartDidCorporateThreemetaResponse:
        """
        Description: 对did进行企业三要素实名认证
        Summary: 对did进行企业三要素实名认证
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.start_did_corporate_threemeta_ex(request, headers, runtime)

    async def start_did_corporate_threemeta_async(
        self,
        request: blockchain_models.StartDidCorporateThreemetaRequest,
    ) -> blockchain_models.StartDidCorporateThreemetaResponse:
        """
        Description: 对did进行企业三要素实名认证
        Summary: 对did进行企业三要素实名认证
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.start_did_corporate_threemeta_ex_async(request, headers, runtime)

    def start_did_corporate_threemeta_ex(
        self,
        request: blockchain_models.StartDidCorporateThreemetaRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartDidCorporateThreemetaResponse:
        """
        Description: 对did进行企业三要素实名认证
        Summary: 对did进行企业三要素实名认证
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartDidCorporateThreemetaResponse().from_map(
            self.do_request('1.0', 'baas.did.corporate.threemeta.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def start_did_corporate_threemeta_ex_async(
        self,
        request: blockchain_models.StartDidCorporateThreemetaRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartDidCorporateThreemetaResponse:
        """
        Description: 对did进行企业三要素实名认证
        Summary: 对did进行企业三要素实名认证
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartDidCorporateThreemetaResponse().from_map(
            await self.do_request_async('1.0', 'baas.did.corporate.threemeta.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def start_did_corporate_fourmeta(
        self,
        request: blockchain_models.StartDidCorporateFourmetaRequest,
    ) -> blockchain_models.StartDidCorporateFourmetaResponse:
        """
        Description: 对did进行企业四要素实名认证
        Summary: 对did进行企业四要素实名认证
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.start_did_corporate_fourmeta_ex(request, headers, runtime)

    async def start_did_corporate_fourmeta_async(
        self,
        request: blockchain_models.StartDidCorporateFourmetaRequest,
    ) -> blockchain_models.StartDidCorporateFourmetaResponse:
        """
        Description: 对did进行企业四要素实名认证
        Summary: 对did进行企业四要素实名认证
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.start_did_corporate_fourmeta_ex_async(request, headers, runtime)

    def start_did_corporate_fourmeta_ex(
        self,
        request: blockchain_models.StartDidCorporateFourmetaRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartDidCorporateFourmetaResponse:
        """
        Description: 对did进行企业四要素实名认证
        Summary: 对did进行企业四要素实名认证
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartDidCorporateFourmetaResponse().from_map(
            self.do_request('1.0', 'baas.did.corporate.fourmeta.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def start_did_corporate_fourmeta_ex_async(
        self,
        request: blockchain_models.StartDidCorporateFourmetaRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartDidCorporateFourmetaResponse:
        """
        Description: 对did进行企业四要素实名认证
        Summary: 对did进行企业四要素实名认证
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartDidCorporateFourmetaResponse().from_map(
            await self.do_request_async('1.0', 'baas.did.corporate.fourmeta.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def start_did_certification_fourmeta(
        self,
        request: blockchain_models.StartDidCertificationFourmetaRequest,
    ) -> blockchain_models.StartDidCertificationFourmetaResponse:
        """
        Description: 四要素实名认证
        Summary: 四要素实名认证
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.start_did_certification_fourmeta_ex(request, headers, runtime)

    async def start_did_certification_fourmeta_async(
        self,
        request: blockchain_models.StartDidCertificationFourmetaRequest,
    ) -> blockchain_models.StartDidCertificationFourmetaResponse:
        """
        Description: 四要素实名认证
        Summary: 四要素实名认证
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.start_did_certification_fourmeta_ex_async(request, headers, runtime)

    def start_did_certification_fourmeta_ex(
        self,
        request: blockchain_models.StartDidCertificationFourmetaRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartDidCertificationFourmetaResponse:
        """
        Description: 四要素实名认证
        Summary: 四要素实名认证
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartDidCertificationFourmetaResponse().from_map(
            self.do_request('1.0', 'baas.did.certification.fourmeta.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def start_did_certification_fourmeta_ex_async(
        self,
        request: blockchain_models.StartDidCertificationFourmetaRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartDidCertificationFourmetaResponse:
        """
        Description: 四要素实名认证
        Summary: 四要素实名认证
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartDidCertificationFourmetaResponse().from_map(
            await self.do_request_async('1.0', 'baas.did.certification.fourmeta.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_did_vcrepository_fuzzyquerywithdefinedid(
        self,
        request: blockchain_models.QueryDidVcrepositoryFuzzyquerywithdefinedidRequest,
    ) -> blockchain_models.QueryDidVcrepositoryFuzzyquerywithdefinedidResponse:
        """
        Description: 模糊查询VC列表
        Summary: 模糊查询vc
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_did_vcrepository_fuzzyquerywithdefinedid_ex(request, headers, runtime)

    async def query_did_vcrepository_fuzzyquerywithdefinedid_async(
        self,
        request: blockchain_models.QueryDidVcrepositoryFuzzyquerywithdefinedidRequest,
    ) -> blockchain_models.QueryDidVcrepositoryFuzzyquerywithdefinedidResponse:
        """
        Description: 模糊查询VC列表
        Summary: 模糊查询vc
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_did_vcrepository_fuzzyquerywithdefinedid_ex_async(request, headers, runtime)

    def query_did_vcrepository_fuzzyquerywithdefinedid_ex(
        self,
        request: blockchain_models.QueryDidVcrepositoryFuzzyquerywithdefinedidRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryDidVcrepositoryFuzzyquerywithdefinedidResponse:
        """
        Description: 模糊查询VC列表
        Summary: 模糊查询vc
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryDidVcrepositoryFuzzyquerywithdefinedidResponse().from_map(
            self.do_request('1.0', 'baas.did.vcrepository.fuzzyquerywithdefinedid.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_did_vcrepository_fuzzyquerywithdefinedid_ex_async(
        self,
        request: blockchain_models.QueryDidVcrepositoryFuzzyquerywithdefinedidRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryDidVcrepositoryFuzzyquerywithdefinedidResponse:
        """
        Description: 模糊查询VC列表
        Summary: 模糊查询vc
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryDidVcrepositoryFuzzyquerywithdefinedidResponse().from_map(
            await self.do_request_async('1.0', 'baas.did.vcrepository.fuzzyquerywithdefinedid.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def start_did_common_agentcreate(
        self,
        request: blockchain_models.StartDidCommonAgentcreateRequest,
    ) -> blockchain_models.StartDidCommonAgentcreateResponse:
        """
        Description: 通过代理模式为普通账号创建did
        Summary: 通过代理模式为普通账号创建did
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.start_did_common_agentcreate_ex(request, headers, runtime)

    async def start_did_common_agentcreate_async(
        self,
        request: blockchain_models.StartDidCommonAgentcreateRequest,
    ) -> blockchain_models.StartDidCommonAgentcreateResponse:
        """
        Description: 通过代理模式为普通账号创建did
        Summary: 通过代理模式为普通账号创建did
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.start_did_common_agentcreate_ex_async(request, headers, runtime)

    def start_did_common_agentcreate_ex(
        self,
        request: blockchain_models.StartDidCommonAgentcreateRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartDidCommonAgentcreateResponse:
        """
        Description: 通过代理模式为普通账号创建did
        Summary: 通过代理模式为普通账号创建did
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartDidCommonAgentcreateResponse().from_map(
            self.do_request('1.0', 'baas.did.common.agentcreate.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def start_did_common_agentcreate_ex_async(
        self,
        request: blockchain_models.StartDidCommonAgentcreateRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartDidCommonAgentcreateResponse:
        """
        Description: 通过代理模式为普通账号创建did
        Summary: 通过代理模式为普通账号创建did
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartDidCommonAgentcreateResponse().from_map(
            await self.do_request_async('1.0', 'baas.did.common.agentcreate.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def start_did_corporate_faceauth(
        self,
        request: blockchain_models.StartDidCorporateFaceauthRequest,
    ) -> blockchain_models.StartDidCorporateFaceauthResponse:
        """
        Description: 企业法人刷脸认证
        Summary: 企业法人刷脸认证
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.start_did_corporate_faceauth_ex(request, headers, runtime)

    async def start_did_corporate_faceauth_async(
        self,
        request: blockchain_models.StartDidCorporateFaceauthRequest,
    ) -> blockchain_models.StartDidCorporateFaceauthResponse:
        """
        Description: 企业法人刷脸认证
        Summary: 企业法人刷脸认证
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.start_did_corporate_faceauth_ex_async(request, headers, runtime)

    def start_did_corporate_faceauth_ex(
        self,
        request: blockchain_models.StartDidCorporateFaceauthRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartDidCorporateFaceauthResponse:
        """
        Description: 企业法人刷脸认证
        Summary: 企业法人刷脸认证
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartDidCorporateFaceauthResponse().from_map(
            self.do_request('1.0', 'baas.did.corporate.faceauth.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def start_did_corporate_faceauth_ex_async(
        self,
        request: blockchain_models.StartDidCorporateFaceauthRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartDidCorporateFaceauthResponse:
        """
        Description: 企业法人刷脸认证
        Summary: 企业法人刷脸认证
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartDidCorporateFaceauthResponse().from_map(
            await self.do_request_async('1.0', 'baas.did.corporate.faceauth.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_did_corporate_faceauth(
        self,
        request: blockchain_models.QueryDidCorporateFaceauthRequest,
    ) -> blockchain_models.QueryDidCorporateFaceauthResponse:
        """
        Description: 查询企业法人实人结果
        Summary: 查询企业法人实人结果
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_did_corporate_faceauth_ex(request, headers, runtime)

    async def query_did_corporate_faceauth_async(
        self,
        request: blockchain_models.QueryDidCorporateFaceauthRequest,
    ) -> blockchain_models.QueryDidCorporateFaceauthResponse:
        """
        Description: 查询企业法人实人结果
        Summary: 查询企业法人实人结果
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_did_corporate_faceauth_ex_async(request, headers, runtime)

    def query_did_corporate_faceauth_ex(
        self,
        request: blockchain_models.QueryDidCorporateFaceauthRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryDidCorporateFaceauthResponse:
        """
        Description: 查询企业法人实人结果
        Summary: 查询企业法人实人结果
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryDidCorporateFaceauthResponse().from_map(
            self.do_request('1.0', 'baas.did.corporate.faceauth.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_did_corporate_faceauth_ex_async(
        self,
        request: blockchain_models.QueryDidCorporateFaceauthRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryDidCorporateFaceauthResponse:
        """
        Description: 查询企业法人实人结果
        Summary: 查询企业法人实人结果
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryDidCorporateFaceauthResponse().from_map(
            await self.do_request_async('1.0', 'baas.did.corporate.faceauth.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def delete_did_vcrepository_vc(
        self,
        request: blockchain_models.DeleteDidVcrepositoryVcRequest,
    ) -> blockchain_models.DeleteDidVcrepositoryVcResponse:
        """
        Description: 用户删除不需要的VC
        Summary: 用户删除不需要的vc
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.delete_did_vcrepository_vc_ex(request, headers, runtime)

    async def delete_did_vcrepository_vc_async(
        self,
        request: blockchain_models.DeleteDidVcrepositoryVcRequest,
    ) -> blockchain_models.DeleteDidVcrepositoryVcResponse:
        """
        Description: 用户删除不需要的VC
        Summary: 用户删除不需要的vc
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.delete_did_vcrepository_vc_ex_async(request, headers, runtime)

    def delete_did_vcrepository_vc_ex(
        self,
        request: blockchain_models.DeleteDidVcrepositoryVcRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.DeleteDidVcrepositoryVcResponse:
        """
        Description: 用户删除不需要的VC
        Summary: 用户删除不需要的vc
        """
        UtilClient.validate_model(request)
        return blockchain_models.DeleteDidVcrepositoryVcResponse().from_map(
            self.do_request('1.0', 'baas.did.vcrepository.vc.delete', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def delete_did_vcrepository_vc_ex_async(
        self,
        request: blockchain_models.DeleteDidVcrepositoryVcRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.DeleteDidVcrepositoryVcResponse:
        """
        Description: 用户删除不需要的VC
        Summary: 用户删除不需要的vc
        """
        UtilClient.validate_model(request)
        return blockchain_models.DeleteDidVcrepositoryVcResponse().from_map(
            await self.do_request_async('1.0', 'baas.did.vcrepository.vc.delete', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def start_did_zkpverifiableclaim_proof(
        self,
        request: blockchain_models.StartDidZkpverifiableclaimProofRequest,
    ) -> blockchain_models.StartDidZkpverifiableclaimProofResponse:
        """
        Description:  构造包含零知识 字段的VC
        Summary: 构造零知识证明的VC
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.start_did_zkpverifiableclaim_proof_ex(request, headers, runtime)

    async def start_did_zkpverifiableclaim_proof_async(
        self,
        request: blockchain_models.StartDidZkpverifiableclaimProofRequest,
    ) -> blockchain_models.StartDidZkpverifiableclaimProofResponse:
        """
        Description:  构造包含零知识 字段的VC
        Summary: 构造零知识证明的VC
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.start_did_zkpverifiableclaim_proof_ex_async(request, headers, runtime)

    def start_did_zkpverifiableclaim_proof_ex(
        self,
        request: blockchain_models.StartDidZkpverifiableclaimProofRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartDidZkpverifiableclaimProofResponse:
        """
        Description:  构造包含零知识 字段的VC
        Summary: 构造零知识证明的VC
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartDidZkpverifiableclaimProofResponse().from_map(
            self.do_request('1.0', 'baas.did.zkpverifiableclaim.proof.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def start_did_zkpverifiableclaim_proof_ex_async(
        self,
        request: blockchain_models.StartDidZkpverifiableclaimProofRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartDidZkpverifiableclaimProofResponse:
        """
        Description:  构造包含零知识 字段的VC
        Summary: 构造零知识证明的VC
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartDidZkpverifiableclaimProofResponse().from_map(
            await self.do_request_async('1.0', 'baas.did.zkpverifiableclaim.proof.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def verify_did_zkpverifiableclaim_proof(
        self,
        request: blockchain_models.VerifyDidZkpverifiableclaimProofRequest,
    ) -> blockchain_models.VerifyDidZkpverifiableclaimProofResponse:
        """
        Description: 验证包含ZKP Proof的VC
        Summary: 验证包含ZKP Proof的VC
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.verify_did_zkpverifiableclaim_proof_ex(request, headers, runtime)

    async def verify_did_zkpverifiableclaim_proof_async(
        self,
        request: blockchain_models.VerifyDidZkpverifiableclaimProofRequest,
    ) -> blockchain_models.VerifyDidZkpverifiableclaimProofResponse:
        """
        Description: 验证包含ZKP Proof的VC
        Summary: 验证包含ZKP Proof的VC
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.verify_did_zkpverifiableclaim_proof_ex_async(request, headers, runtime)

    def verify_did_zkpverifiableclaim_proof_ex(
        self,
        request: blockchain_models.VerifyDidZkpverifiableclaimProofRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.VerifyDidZkpverifiableclaimProofResponse:
        """
        Description: 验证包含ZKP Proof的VC
        Summary: 验证包含ZKP Proof的VC
        """
        UtilClient.validate_model(request)
        return blockchain_models.VerifyDidZkpverifiableclaimProofResponse().from_map(
            self.do_request('1.0', 'baas.did.zkpverifiableclaim.proof.verify', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def verify_did_zkpverifiableclaim_proof_ex_async(
        self,
        request: blockchain_models.VerifyDidZkpverifiableclaimProofRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.VerifyDidZkpverifiableclaimProofResponse:
        """
        Description: 验证包含ZKP Proof的VC
        Summary: 验证包含ZKP Proof的VC
        """
        UtilClient.validate_model(request)
        return blockchain_models.VerifyDidZkpverifiableclaimProofResponse().from_map(
            await self.do_request_async('1.0', 'baas.did.zkpverifiableclaim.proof.verify', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def start_mydidcommun_agency_settlein(
        self,
        request: blockchain_models.StartMydidcommunAgencySettleinRequest,
    ) -> blockchain_models.StartMydidcommunAgencySettleinResponse:
        """
        Description: 数据隐私服务合作方入驻接口
        Summary: 数据隐私服务合作方入驻接口
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.start_mydidcommun_agency_settlein_ex(request, headers, runtime)

    async def start_mydidcommun_agency_settlein_async(
        self,
        request: blockchain_models.StartMydidcommunAgencySettleinRequest,
    ) -> blockchain_models.StartMydidcommunAgencySettleinResponse:
        """
        Description: 数据隐私服务合作方入驻接口
        Summary: 数据隐私服务合作方入驻接口
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.start_mydidcommun_agency_settlein_ex_async(request, headers, runtime)

    def start_mydidcommun_agency_settlein_ex(
        self,
        request: blockchain_models.StartMydidcommunAgencySettleinRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartMydidcommunAgencySettleinResponse:
        """
        Description: 数据隐私服务合作方入驻接口
        Summary: 数据隐私服务合作方入驻接口
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartMydidcommunAgencySettleinResponse().from_map(
            self.do_request('1.0', 'baas.mydidcommun.agency.settlein.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def start_mydidcommun_agency_settlein_ex_async(
        self,
        request: blockchain_models.StartMydidcommunAgencySettleinRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartMydidcommunAgencySettleinResponse:
        """
        Description: 数据隐私服务合作方入驻接口
        Summary: 数据隐私服务合作方入驻接口
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartMydidcommunAgencySettleinResponse().from_map(
            await self.do_request_async('1.0', 'baas.mydidcommun.agency.settlein.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def start_mydidcommun_agency_choicetapp(
        self,
        request: blockchain_models.StartMydidcommunAgencyChoicetappRequest,
    ) -> blockchain_models.StartMydidcommunAgencyChoicetappResponse:
        """
        Description: 数据隐私服务合作机构选择tapp接口
        Summary: 数据隐私服务合作机构选择tapp接口
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.start_mydidcommun_agency_choicetapp_ex(request, headers, runtime)

    async def start_mydidcommun_agency_choicetapp_async(
        self,
        request: blockchain_models.StartMydidcommunAgencyChoicetappRequest,
    ) -> blockchain_models.StartMydidcommunAgencyChoicetappResponse:
        """
        Description: 数据隐私服务合作机构选择tapp接口
        Summary: 数据隐私服务合作机构选择tapp接口
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.start_mydidcommun_agency_choicetapp_ex_async(request, headers, runtime)

    def start_mydidcommun_agency_choicetapp_ex(
        self,
        request: blockchain_models.StartMydidcommunAgencyChoicetappRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartMydidcommunAgencyChoicetappResponse:
        """
        Description: 数据隐私服务合作机构选择tapp接口
        Summary: 数据隐私服务合作机构选择tapp接口
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartMydidcommunAgencyChoicetappResponse().from_map(
            self.do_request('1.0', 'baas.mydidcommun.agency.choicetapp.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def start_mydidcommun_agency_choicetapp_ex_async(
        self,
        request: blockchain_models.StartMydidcommunAgencyChoicetappRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartMydidcommunAgencyChoicetappResponse:
        """
        Description: 数据隐私服务合作机构选择tapp接口
        Summary: 数据隐私服务合作机构选择tapp接口
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartMydidcommunAgencyChoicetappResponse().from_map(
            await self.do_request_async('1.0', 'baas.mydidcommun.agency.choicetapp.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def start_mydidcommun_agencyuser_personjoin(
        self,
        request: blockchain_models.StartMydidcommunAgencyuserPersonjoinRequest,
    ) -> blockchain_models.StartMydidcommunAgencyuserPersonjoinResponse:
        """
        Description: 数据隐私服务合作机构下个人用户入驻接口
        Summary: 数据隐私服务合作机构下个人用户入驻接口
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.start_mydidcommun_agencyuser_personjoin_ex(request, headers, runtime)

    async def start_mydidcommun_agencyuser_personjoin_async(
        self,
        request: blockchain_models.StartMydidcommunAgencyuserPersonjoinRequest,
    ) -> blockchain_models.StartMydidcommunAgencyuserPersonjoinResponse:
        """
        Description: 数据隐私服务合作机构下个人用户入驻接口
        Summary: 数据隐私服务合作机构下个人用户入驻接口
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.start_mydidcommun_agencyuser_personjoin_ex_async(request, headers, runtime)

    def start_mydidcommun_agencyuser_personjoin_ex(
        self,
        request: blockchain_models.StartMydidcommunAgencyuserPersonjoinRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartMydidcommunAgencyuserPersonjoinResponse:
        """
        Description: 数据隐私服务合作机构下个人用户入驻接口
        Summary: 数据隐私服务合作机构下个人用户入驻接口
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartMydidcommunAgencyuserPersonjoinResponse().from_map(
            self.do_request('1.0', 'baas.mydidcommun.agencyuser.personjoin.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def start_mydidcommun_agencyuser_personjoin_ex_async(
        self,
        request: blockchain_models.StartMydidcommunAgencyuserPersonjoinRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartMydidcommunAgencyuserPersonjoinResponse:
        """
        Description: 数据隐私服务合作机构下个人用户入驻接口
        Summary: 数据隐私服务合作机构下个人用户入驻接口
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartMydidcommunAgencyuserPersonjoinResponse().from_map(
            await self.do_request_async('1.0', 'baas.mydidcommun.agencyuser.personjoin.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def start_mydidcommun_agencyuser_corporatejoin(
        self,
        request: blockchain_models.StartMydidcommunAgencyuserCorporatejoinRequest,
    ) -> blockchain_models.StartMydidcommunAgencyuserCorporatejoinResponse:
        """
        Description: 数据隐私服务合作机构下企业用户入驻接口
        Summary: 数据隐私服务合作机构下企业用户入驻接口
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.start_mydidcommun_agencyuser_corporatejoin_ex(request, headers, runtime)

    async def start_mydidcommun_agencyuser_corporatejoin_async(
        self,
        request: blockchain_models.StartMydidcommunAgencyuserCorporatejoinRequest,
    ) -> blockchain_models.StartMydidcommunAgencyuserCorporatejoinResponse:
        """
        Description: 数据隐私服务合作机构下企业用户入驻接口
        Summary: 数据隐私服务合作机构下企业用户入驻接口
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.start_mydidcommun_agencyuser_corporatejoin_ex_async(request, headers, runtime)

    def start_mydidcommun_agencyuser_corporatejoin_ex(
        self,
        request: blockchain_models.StartMydidcommunAgencyuserCorporatejoinRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartMydidcommunAgencyuserCorporatejoinResponse:
        """
        Description: 数据隐私服务合作机构下企业用户入驻接口
        Summary: 数据隐私服务合作机构下企业用户入驻接口
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartMydidcommunAgencyuserCorporatejoinResponse().from_map(
            self.do_request('1.0', 'baas.mydidcommun.agencyuser.corporatejoin.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def start_mydidcommun_agencyuser_corporatejoin_ex_async(
        self,
        request: blockchain_models.StartMydidcommunAgencyuserCorporatejoinRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartMydidcommunAgencyuserCorporatejoinResponse:
        """
        Description: 数据隐私服务合作机构下企业用户入驻接口
        Summary: 数据隐私服务合作机构下企业用户入驻接口
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartMydidcommunAgencyuserCorporatejoinResponse().from_map(
            await self.do_request_async('1.0', 'baas.mydidcommun.agencyuser.corporatejoin.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def update_mydidcommun_agency_doc(
        self,
        request: blockchain_models.UpdateMydidcommunAgencyDocRequest,
    ) -> blockchain_models.UpdateMydidcommunAgencyDocResponse:
        """
        Description: 更新doc service接口
        Summary: 更新doc service接口
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.update_mydidcommun_agency_doc_ex(request, headers, runtime)

    async def update_mydidcommun_agency_doc_async(
        self,
        request: blockchain_models.UpdateMydidcommunAgencyDocRequest,
    ) -> blockchain_models.UpdateMydidcommunAgencyDocResponse:
        """
        Description: 更新doc service接口
        Summary: 更新doc service接口
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.update_mydidcommun_agency_doc_ex_async(request, headers, runtime)

    def update_mydidcommun_agency_doc_ex(
        self,
        request: blockchain_models.UpdateMydidcommunAgencyDocRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.UpdateMydidcommunAgencyDocResponse:
        """
        Description: 更新doc service接口
        Summary: 更新doc service接口
        """
        UtilClient.validate_model(request)
        return blockchain_models.UpdateMydidcommunAgencyDocResponse().from_map(
            self.do_request('1.0', 'baas.mydidcommun.agency.doc.update', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def update_mydidcommun_agency_doc_ex_async(
        self,
        request: blockchain_models.UpdateMydidcommunAgencyDocRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.UpdateMydidcommunAgencyDocResponse:
        """
        Description: 更新doc service接口
        Summary: 更新doc service接口
        """
        UtilClient.validate_model(request)
        return blockchain_models.UpdateMydidcommunAgencyDocResponse().from_map(
            await self.do_request_async('1.0', 'baas.mydidcommun.agency.doc.update', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def start_mydidcommun_agency_datatransmitstart(
        self,
        request: blockchain_models.StartMydidcommunAgencyDatatransmitstartRequest,
    ) -> blockchain_models.StartMydidcommunAgencyDatatransmitstartResponse:
        """
        Description: 主动发起数据传输流程请求
        Summary: 主动发起数据安全传输流程
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.start_mydidcommun_agency_datatransmitstart_ex(request, headers, runtime)

    async def start_mydidcommun_agency_datatransmitstart_async(
        self,
        request: blockchain_models.StartMydidcommunAgencyDatatransmitstartRequest,
    ) -> blockchain_models.StartMydidcommunAgencyDatatransmitstartResponse:
        """
        Description: 主动发起数据传输流程请求
        Summary: 主动发起数据安全传输流程
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.start_mydidcommun_agency_datatransmitstart_ex_async(request, headers, runtime)

    def start_mydidcommun_agency_datatransmitstart_ex(
        self,
        request: blockchain_models.StartMydidcommunAgencyDatatransmitstartRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartMydidcommunAgencyDatatransmitstartResponse:
        """
        Description: 主动发起数据传输流程请求
        Summary: 主动发起数据安全传输流程
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartMydidcommunAgencyDatatransmitstartResponse().from_map(
            self.do_request('1.0', 'baas.mydidcommun.agency.datatransmitstart.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def start_mydidcommun_agency_datatransmitstart_ex_async(
        self,
        request: blockchain_models.StartMydidcommunAgencyDatatransmitstartRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartMydidcommunAgencyDatatransmitstartResponse:
        """
        Description: 主动发起数据传输流程请求
        Summary: 主动发起数据安全传输流程
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartMydidcommunAgencyDatatransmitstartResponse().from_map(
            await self.do_request_async('1.0', 'baas.mydidcommun.agency.datatransmitstart.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def start_mydidcommun_agency_datatransmitcontinue(
        self,
        request: blockchain_models.StartMydidcommunAgencyDatatransmitcontinueRequest,
    ) -> blockchain_models.StartMydidcommunAgencyDatatransmitcontinueResponse:
        """
        Description: 继续触发主动发起数据安全传输流程
        Summary: 继续触发主动发起数据安全传输流程
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.start_mydidcommun_agency_datatransmitcontinue_ex(request, headers, runtime)

    async def start_mydidcommun_agency_datatransmitcontinue_async(
        self,
        request: blockchain_models.StartMydidcommunAgencyDatatransmitcontinueRequest,
    ) -> blockchain_models.StartMydidcommunAgencyDatatransmitcontinueResponse:
        """
        Description: 继续触发主动发起数据安全传输流程
        Summary: 继续触发主动发起数据安全传输流程
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.start_mydidcommun_agency_datatransmitcontinue_ex_async(request, headers, runtime)

    def start_mydidcommun_agency_datatransmitcontinue_ex(
        self,
        request: blockchain_models.StartMydidcommunAgencyDatatransmitcontinueRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartMydidcommunAgencyDatatransmitcontinueResponse:
        """
        Description: 继续触发主动发起数据安全传输流程
        Summary: 继续触发主动发起数据安全传输流程
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartMydidcommunAgencyDatatransmitcontinueResponse().from_map(
            self.do_request('1.0', 'baas.mydidcommun.agency.datatransmitcontinue.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def start_mydidcommun_agency_datatransmitcontinue_ex_async(
        self,
        request: blockchain_models.StartMydidcommunAgencyDatatransmitcontinueRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartMydidcommunAgencyDatatransmitcontinueResponse:
        """
        Description: 继续触发主动发起数据安全传输流程
        Summary: 继续触发主动发起数据安全传输流程
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartMydidcommunAgencyDatatransmitcontinueResponse().from_map(
            await self.do_request_async('1.0', 'baas.mydidcommun.agency.datatransmitcontinue.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def start_mydidcommun_agency_dataapplication(
        self,
        request: blockchain_models.StartMydidcommunAgencyDataapplicationRequest,
    ) -> blockchain_models.StartMydidcommunAgencyDataapplicationResponse:
        """
        Description: 主动发起申请数据资产的流程
        Summary: 主动发起申请数据资产的流程
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.start_mydidcommun_agency_dataapplication_ex(request, headers, runtime)

    async def start_mydidcommun_agency_dataapplication_async(
        self,
        request: blockchain_models.StartMydidcommunAgencyDataapplicationRequest,
    ) -> blockchain_models.StartMydidcommunAgencyDataapplicationResponse:
        """
        Description: 主动发起申请数据资产的流程
        Summary: 主动发起申请数据资产的流程
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.start_mydidcommun_agency_dataapplication_ex_async(request, headers, runtime)

    def start_mydidcommun_agency_dataapplication_ex(
        self,
        request: blockchain_models.StartMydidcommunAgencyDataapplicationRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartMydidcommunAgencyDataapplicationResponse:
        """
        Description: 主动发起申请数据资产的流程
        Summary: 主动发起申请数据资产的流程
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartMydidcommunAgencyDataapplicationResponse().from_map(
            self.do_request('1.0', 'baas.mydidcommun.agency.dataapplication.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def start_mydidcommun_agency_dataapplication_ex_async(
        self,
        request: blockchain_models.StartMydidcommunAgencyDataapplicationRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartMydidcommunAgencyDataapplicationResponse:
        """
        Description: 主动发起申请数据资产的流程
        Summary: 主动发起申请数据资产的流程
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartMydidcommunAgencyDataapplicationResponse().from_map(
            await self.do_request_async('1.0', 'baas.mydidcommun.agency.dataapplication.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def start_mydidcommun_agency_choicetapplist(
        self,
        request: blockchain_models.StartMydidcommunAgencyChoicetapplistRequest,
    ) -> blockchain_models.StartMydidcommunAgencyChoicetapplistResponse:
        """
        Description: 据隐私服务合作机构选择多个tapp接口
        Summary: 据隐私服务合作机构选择多个tapp接口
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.start_mydidcommun_agency_choicetapplist_ex(request, headers, runtime)

    async def start_mydidcommun_agency_choicetapplist_async(
        self,
        request: blockchain_models.StartMydidcommunAgencyChoicetapplistRequest,
    ) -> blockchain_models.StartMydidcommunAgencyChoicetapplistResponse:
        """
        Description: 据隐私服务合作机构选择多个tapp接口
        Summary: 据隐私服务合作机构选择多个tapp接口
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.start_mydidcommun_agency_choicetapplist_ex_async(request, headers, runtime)

    def start_mydidcommun_agency_choicetapplist_ex(
        self,
        request: blockchain_models.StartMydidcommunAgencyChoicetapplistRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartMydidcommunAgencyChoicetapplistResponse:
        """
        Description: 据隐私服务合作机构选择多个tapp接口
        Summary: 据隐私服务合作机构选择多个tapp接口
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartMydidcommunAgencyChoicetapplistResponse().from_map(
            self.do_request('1.0', 'baas.mydidcommun.agency.choicetapplist.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def start_mydidcommun_agency_choicetapplist_ex_async(
        self,
        request: blockchain_models.StartMydidcommunAgencyChoicetapplistRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartMydidcommunAgencyChoicetapplistResponse:
        """
        Description: 据隐私服务合作机构选择多个tapp接口
        Summary: 据隐私服务合作机构选择多个tapp接口
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartMydidcommunAgencyChoicetapplistResponse().from_map(
            await self.do_request_async('1.0', 'baas.mydidcommun.agency.choicetapplist.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def start_mydidcommun_agency_dataassertregister(
        self,
        request: blockchain_models.StartMydidcommunAgencyDataassertregisterRequest,
    ) -> blockchain_models.StartMydidcommunAgencyDataassertregisterResponse:
        """
        Description: 定义数据资产审批流程
        Summary: 定义数据资产审批流程
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.start_mydidcommun_agency_dataassertregister_ex(request, headers, runtime)

    async def start_mydidcommun_agency_dataassertregister_async(
        self,
        request: blockchain_models.StartMydidcommunAgencyDataassertregisterRequest,
    ) -> blockchain_models.StartMydidcommunAgencyDataassertregisterResponse:
        """
        Description: 定义数据资产审批流程
        Summary: 定义数据资产审批流程
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.start_mydidcommun_agency_dataassertregister_ex_async(request, headers, runtime)

    def start_mydidcommun_agency_dataassertregister_ex(
        self,
        request: blockchain_models.StartMydidcommunAgencyDataassertregisterRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartMydidcommunAgencyDataassertregisterResponse:
        """
        Description: 定义数据资产审批流程
        Summary: 定义数据资产审批流程
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartMydidcommunAgencyDataassertregisterResponse().from_map(
            self.do_request('1.0', 'baas.mydidcommun.agency.dataassertregister.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def start_mydidcommun_agency_dataassertregister_ex_async(
        self,
        request: blockchain_models.StartMydidcommunAgencyDataassertregisterRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartMydidcommunAgencyDataassertregisterResponse:
        """
        Description: 定义数据资产审批流程
        Summary: 定义数据资产审批流程
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartMydidcommunAgencyDataassertregisterResponse().from_map(
            await self.do_request_async('1.0', 'baas.mydidcommun.agency.dataassertregister.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def start_mydidcommun_agency_auth(
        self,
        request: blockchain_models.StartMydidcommunAgencyAuthRequest,
    ) -> blockchain_models.StartMydidcommunAgencyAuthResponse:
        """
        Description: 发起数据授权
        Summary: 发起数据授权
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.start_mydidcommun_agency_auth_ex(request, headers, runtime)

    async def start_mydidcommun_agency_auth_async(
        self,
        request: blockchain_models.StartMydidcommunAgencyAuthRequest,
    ) -> blockchain_models.StartMydidcommunAgencyAuthResponse:
        """
        Description: 发起数据授权
        Summary: 发起数据授权
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.start_mydidcommun_agency_auth_ex_async(request, headers, runtime)

    def start_mydidcommun_agency_auth_ex(
        self,
        request: blockchain_models.StartMydidcommunAgencyAuthRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartMydidcommunAgencyAuthResponse:
        """
        Description: 发起数据授权
        Summary: 发起数据授权
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartMydidcommunAgencyAuthResponse().from_map(
            self.do_request('1.0', 'baas.mydidcommun.agency.auth.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def start_mydidcommun_agency_auth_ex_async(
        self,
        request: blockchain_models.StartMydidcommunAgencyAuthRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartMydidcommunAgencyAuthResponse:
        """
        Description: 发起数据授权
        Summary: 发起数据授权
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartMydidcommunAgencyAuthResponse().from_map(
            await self.do_request_async('1.0', 'baas.mydidcommun.agency.auth.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def start_mydidcommun_agency_processauth(
        self,
        request: blockchain_models.StartMydidcommunAgencyProcessauthRequest,
    ) -> blockchain_models.StartMydidcommunAgencyProcessauthResponse:
        """
        Description: 处理授权流程
        Summary: 处理授权流程
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.start_mydidcommun_agency_processauth_ex(request, headers, runtime)

    async def start_mydidcommun_agency_processauth_async(
        self,
        request: blockchain_models.StartMydidcommunAgencyProcessauthRequest,
    ) -> blockchain_models.StartMydidcommunAgencyProcessauthResponse:
        """
        Description: 处理授权流程
        Summary: 处理授权流程
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.start_mydidcommun_agency_processauth_ex_async(request, headers, runtime)

    def start_mydidcommun_agency_processauth_ex(
        self,
        request: blockchain_models.StartMydidcommunAgencyProcessauthRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartMydidcommunAgencyProcessauthResponse:
        """
        Description: 处理授权流程
        Summary: 处理授权流程
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartMydidcommunAgencyProcessauthResponse().from_map(
            self.do_request('1.0', 'baas.mydidcommun.agency.processauth.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def start_mydidcommun_agency_processauth_ex_async(
        self,
        request: blockchain_models.StartMydidcommunAgencyProcessauthRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartMydidcommunAgencyProcessauthResponse:
        """
        Description: 处理授权流程
        Summary: 处理授权流程
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartMydidcommunAgencyProcessauthResponse().from_map(
            await self.do_request_async('1.0', 'baas.mydidcommun.agency.processauth.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_mydidcommun_agency_processauth(
        self,
        request: blockchain_models.QueryMydidcommunAgencyProcessauthRequest,
    ) -> blockchain_models.QueryMydidcommunAgencyProcessauthResponse:
        """
        Description: 查询授权当前状态
        Summary: 查询授权当前状态
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_mydidcommun_agency_processauth_ex(request, headers, runtime)

    async def query_mydidcommun_agency_processauth_async(
        self,
        request: blockchain_models.QueryMydidcommunAgencyProcessauthRequest,
    ) -> blockchain_models.QueryMydidcommunAgencyProcessauthResponse:
        """
        Description: 查询授权当前状态
        Summary: 查询授权当前状态
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_mydidcommun_agency_processauth_ex_async(request, headers, runtime)

    def query_mydidcommun_agency_processauth_ex(
        self,
        request: blockchain_models.QueryMydidcommunAgencyProcessauthRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryMydidcommunAgencyProcessauthResponse:
        """
        Description: 查询授权当前状态
        Summary: 查询授权当前状态
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryMydidcommunAgencyProcessauthResponse().from_map(
            self.do_request('1.0', 'baas.mydidcommun.agency.processauth.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_mydidcommun_agency_processauth_ex_async(
        self,
        request: blockchain_models.QueryMydidcommunAgencyProcessauthRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryMydidcommunAgencyProcessauthResponse:
        """
        Description: 查询授权当前状态
        Summary: 查询授权当前状态
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryMydidcommunAgencyProcessauthResponse().from_map(
            await self.do_request_async('1.0', 'baas.mydidcommun.agency.processauth.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_mydidcommun_agency_servicetypeinfo(
        self,
        request: blockchain_models.QueryMydidcommunAgencyServicetypeinfoRequest,
    ) -> blockchain_models.QueryMydidcommunAgencyServicetypeinfoResponse:
        """
        Description: 通过serviceType查找其对应信息
        Summary: 通过serviceType查找其对应信息
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_mydidcommun_agency_servicetypeinfo_ex(request, headers, runtime)

    async def query_mydidcommun_agency_servicetypeinfo_async(
        self,
        request: blockchain_models.QueryMydidcommunAgencyServicetypeinfoRequest,
    ) -> blockchain_models.QueryMydidcommunAgencyServicetypeinfoResponse:
        """
        Description: 通过serviceType查找其对应信息
        Summary: 通过serviceType查找其对应信息
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_mydidcommun_agency_servicetypeinfo_ex_async(request, headers, runtime)

    def query_mydidcommun_agency_servicetypeinfo_ex(
        self,
        request: blockchain_models.QueryMydidcommunAgencyServicetypeinfoRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryMydidcommunAgencyServicetypeinfoResponse:
        """
        Description: 通过serviceType查找其对应信息
        Summary: 通过serviceType查找其对应信息
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryMydidcommunAgencyServicetypeinfoResponse().from_map(
            self.do_request('1.0', 'baas.mydidcommun.agency.servicetypeinfo.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_mydidcommun_agency_servicetypeinfo_ex_async(
        self,
        request: blockchain_models.QueryMydidcommunAgencyServicetypeinfoRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryMydidcommunAgencyServicetypeinfoResponse:
        """
        Description: 通过serviceType查找其对应信息
        Summary: 通过serviceType查找其对应信息
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryMydidcommunAgencyServicetypeinfoResponse().from_map(
            await self.do_request_async('1.0', 'baas.mydidcommun.agency.servicetypeinfo.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_mydidcommun_agency_taskresultfile(
        self,
        request: blockchain_models.QueryMydidcommunAgencyTaskresultfileRequest,
    ) -> blockchain_models.QueryMydidcommunAgencyTaskresultfileResponse:
        """
        Description: 查询任务执行结果文件
        Summary: 查询任务执行结果文件
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_mydidcommun_agency_taskresultfile_ex(request, headers, runtime)

    async def query_mydidcommun_agency_taskresultfile_async(
        self,
        request: blockchain_models.QueryMydidcommunAgencyTaskresultfileRequest,
    ) -> blockchain_models.QueryMydidcommunAgencyTaskresultfileResponse:
        """
        Description: 查询任务执行结果文件
        Summary: 查询任务执行结果文件
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_mydidcommun_agency_taskresultfile_ex_async(request, headers, runtime)

    def query_mydidcommun_agency_taskresultfile_ex(
        self,
        request: blockchain_models.QueryMydidcommunAgencyTaskresultfileRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryMydidcommunAgencyTaskresultfileResponse:
        """
        Description: 查询任务执行结果文件
        Summary: 查询任务执行结果文件
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryMydidcommunAgencyTaskresultfileResponse().from_map(
            self.do_request('1.0', 'baas.mydidcommun.agency.taskresultfile.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_mydidcommun_agency_taskresultfile_ex_async(
        self,
        request: blockchain_models.QueryMydidcommunAgencyTaskresultfileRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryMydidcommunAgencyTaskresultfileResponse:
        """
        Description: 查询任务执行结果文件
        Summary: 查询任务执行结果文件
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryMydidcommunAgencyTaskresultfileResponse().from_map(
            await self.do_request_async('1.0', 'baas.mydidcommun.agency.taskresultfile.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def apply_mydidcommun_task_servicetype(
        self,
        request: blockchain_models.ApplyMydidcommunTaskServicetypeRequest,
    ) -> blockchain_models.ApplyMydidcommunTaskServicetypeResponse:
        """
        Description: 任务执行 - 为目标用户申请某一服务类型的调用权限
        Summary: 服务类型权限申请
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.apply_mydidcommun_task_servicetype_ex(request, headers, runtime)

    async def apply_mydidcommun_task_servicetype_async(
        self,
        request: blockchain_models.ApplyMydidcommunTaskServicetypeRequest,
    ) -> blockchain_models.ApplyMydidcommunTaskServicetypeResponse:
        """
        Description: 任务执行 - 为目标用户申请某一服务类型的调用权限
        Summary: 服务类型权限申请
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.apply_mydidcommun_task_servicetype_ex_async(request, headers, runtime)

    def apply_mydidcommun_task_servicetype_ex(
        self,
        request: blockchain_models.ApplyMydidcommunTaskServicetypeRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.ApplyMydidcommunTaskServicetypeResponse:
        """
        Description: 任务执行 - 为目标用户申请某一服务类型的调用权限
        Summary: 服务类型权限申请
        """
        UtilClient.validate_model(request)
        return blockchain_models.ApplyMydidcommunTaskServicetypeResponse().from_map(
            self.do_request('1.0', 'baas.mydidcommun.task.servicetype.apply', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def apply_mydidcommun_task_servicetype_ex_async(
        self,
        request: blockchain_models.ApplyMydidcommunTaskServicetypeRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.ApplyMydidcommunTaskServicetypeResponse:
        """
        Description: 任务执行 - 为目标用户申请某一服务类型的调用权限
        Summary: 服务类型权限申请
        """
        UtilClient.validate_model(request)
        return blockchain_models.ApplyMydidcommunTaskServicetypeResponse().from_map(
            await self.do_request_async('1.0', 'baas.mydidcommun.task.servicetype.apply', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def get_mydidcommun_task_taskresult(
        self,
        request: blockchain_models.GetMydidcommunTaskTaskresultRequest,
    ) -> blockchain_models.GetMydidcommunTaskTaskresultResponse:
        """
        Description: 通过任务Id获取任务执行结果
        Summary: 获取任务执行结果
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.get_mydidcommun_task_taskresult_ex(request, headers, runtime)

    async def get_mydidcommun_task_taskresult_async(
        self,
        request: blockchain_models.GetMydidcommunTaskTaskresultRequest,
    ) -> blockchain_models.GetMydidcommunTaskTaskresultResponse:
        """
        Description: 通过任务Id获取任务执行结果
        Summary: 获取任务执行结果
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.get_mydidcommun_task_taskresult_ex_async(request, headers, runtime)

    def get_mydidcommun_task_taskresult_ex(
        self,
        request: blockchain_models.GetMydidcommunTaskTaskresultRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.GetMydidcommunTaskTaskresultResponse:
        """
        Description: 通过任务Id获取任务执行结果
        Summary: 获取任务执行结果
        """
        UtilClient.validate_model(request)
        return blockchain_models.GetMydidcommunTaskTaskresultResponse().from_map(
            self.do_request('1.0', 'baas.mydidcommun.task.taskresult.get', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def get_mydidcommun_task_taskresult_ex_async(
        self,
        request: blockchain_models.GetMydidcommunTaskTaskresultRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.GetMydidcommunTaskTaskresultResponse:
        """
        Description: 通过任务Id获取任务执行结果
        Summary: 获取任务执行结果
        """
        UtilClient.validate_model(request)
        return blockchain_models.GetMydidcommunTaskTaskresultResponse().from_map(
            await self.do_request_async('1.0', 'baas.mydidcommun.task.taskresult.get', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def add_mydidcommun_asset_data(
        self,
        request: blockchain_models.AddMydidcommunAssetDataRequest,
    ) -> blockchain_models.AddMydidcommunAssetDataResponse:
        """
        Description: 注册数据资产
        Summary: 添加数据资产
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.add_mydidcommun_asset_data_ex(request, headers, runtime)

    async def add_mydidcommun_asset_data_async(
        self,
        request: blockchain_models.AddMydidcommunAssetDataRequest,
    ) -> blockchain_models.AddMydidcommunAssetDataResponse:
        """
        Description: 注册数据资产
        Summary: 添加数据资产
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.add_mydidcommun_asset_data_ex_async(request, headers, runtime)

    def add_mydidcommun_asset_data_ex(
        self,
        request: blockchain_models.AddMydidcommunAssetDataRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.AddMydidcommunAssetDataResponse:
        """
        Description: 注册数据资产
        Summary: 添加数据资产
        """
        UtilClient.validate_model(request)
        return blockchain_models.AddMydidcommunAssetDataResponse().from_map(
            self.do_request('1.0', 'baas.mydidcommun.asset.data.add', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def add_mydidcommun_asset_data_ex_async(
        self,
        request: blockchain_models.AddMydidcommunAssetDataRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.AddMydidcommunAssetDataResponse:
        """
        Description: 注册数据资产
        Summary: 添加数据资产
        """
        UtilClient.validate_model(request)
        return blockchain_models.AddMydidcommunAssetDataResponse().from_map(
            await self.do_request_async('1.0', 'baas.mydidcommun.asset.data.add', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def start_mydidcommun_task_getdata(
        self,
        request: blockchain_models.StartMydidcommunTaskGetdataRequest,
    ) -> blockchain_models.StartMydidcommunTaskGetdataResponse:
        """
        Description: 开始获取数据任务流程
        Summary: 执行获取数据接口
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.start_mydidcommun_task_getdata_ex(request, headers, runtime)

    async def start_mydidcommun_task_getdata_async(
        self,
        request: blockchain_models.StartMydidcommunTaskGetdataRequest,
    ) -> blockchain_models.StartMydidcommunTaskGetdataResponse:
        """
        Description: 开始获取数据任务流程
        Summary: 执行获取数据接口
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.start_mydidcommun_task_getdata_ex_async(request, headers, runtime)

    def start_mydidcommun_task_getdata_ex(
        self,
        request: blockchain_models.StartMydidcommunTaskGetdataRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartMydidcommunTaskGetdataResponse:
        """
        Description: 开始获取数据任务流程
        Summary: 执行获取数据接口
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartMydidcommunTaskGetdataResponse().from_map(
            self.do_request('1.0', 'baas.mydidcommun.task.getdata.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def start_mydidcommun_task_getdata_ex_async(
        self,
        request: blockchain_models.StartMydidcommunTaskGetdataRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartMydidcommunTaskGetdataResponse:
        """
        Description: 开始获取数据任务流程
        Summary: 执行获取数据接口
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartMydidcommunTaskGetdataResponse().from_map(
            await self.do_request_async('1.0', 'baas.mydidcommun.task.getdata.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def start_mydidcommun_institution_settlein(
        self,
        request: blockchain_models.StartMydidcommunInstitutionSettleinRequest,
    ) -> blockchain_models.StartMydidcommunInstitutionSettleinResponse:
        """
        Description: 针对线下入驻，或者无法提供四要素的机构入驻
        Summary: 机构入驻数据隐私服务
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.start_mydidcommun_institution_settlein_ex(request, headers, runtime)

    async def start_mydidcommun_institution_settlein_async(
        self,
        request: blockchain_models.StartMydidcommunInstitutionSettleinRequest,
    ) -> blockchain_models.StartMydidcommunInstitutionSettleinResponse:
        """
        Description: 针对线下入驻，或者无法提供四要素的机构入驻
        Summary: 机构入驻数据隐私服务
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.start_mydidcommun_institution_settlein_ex_async(request, headers, runtime)

    def start_mydidcommun_institution_settlein_ex(
        self,
        request: blockchain_models.StartMydidcommunInstitutionSettleinRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartMydidcommunInstitutionSettleinResponse:
        """
        Description: 针对线下入驻，或者无法提供四要素的机构入驻
        Summary: 机构入驻数据隐私服务
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartMydidcommunInstitutionSettleinResponse().from_map(
            self.do_request('1.0', 'baas.mydidcommun.institution.settlein.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def start_mydidcommun_institution_settlein_ex_async(
        self,
        request: blockchain_models.StartMydidcommunInstitutionSettleinRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartMydidcommunInstitutionSettleinResponse:
        """
        Description: 针对线下入驻，或者无法提供四要素的机构入驻
        Summary: 机构入驻数据隐私服务
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartMydidcommunInstitutionSettleinResponse().from_map(
            await self.do_request_async('1.0', 'baas.mydidcommun.institution.settlein.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def get_mydidcommun_workergroup_sync(
        self,
        request: blockchain_models.GetMydidcommunWorkergroupSyncRequest,
    ) -> blockchain_models.GetMydidcommunWorkergroupSyncResponse:
        """
        Description: 计算集群 - 部署同步 - 获取一个需要同步的部署任务
        Summary: 计算集群-部署同步-获取一个需要同步任务
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.get_mydidcommun_workergroup_sync_ex(request, headers, runtime)

    async def get_mydidcommun_workergroup_sync_async(
        self,
        request: blockchain_models.GetMydidcommunWorkergroupSyncRequest,
    ) -> blockchain_models.GetMydidcommunWorkergroupSyncResponse:
        """
        Description: 计算集群 - 部署同步 - 获取一个需要同步的部署任务
        Summary: 计算集群-部署同步-获取一个需要同步任务
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.get_mydidcommun_workergroup_sync_ex_async(request, headers, runtime)

    def get_mydidcommun_workergroup_sync_ex(
        self,
        request: blockchain_models.GetMydidcommunWorkergroupSyncRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.GetMydidcommunWorkergroupSyncResponse:
        """
        Description: 计算集群 - 部署同步 - 获取一个需要同步的部署任务
        Summary: 计算集群-部署同步-获取一个需要同步任务
        """
        UtilClient.validate_model(request)
        return blockchain_models.GetMydidcommunWorkergroupSyncResponse().from_map(
            self.do_request('1.0', 'baas.mydidcommun.workergroup.sync.get', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def get_mydidcommun_workergroup_sync_ex_async(
        self,
        request: blockchain_models.GetMydidcommunWorkergroupSyncRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.GetMydidcommunWorkergroupSyncResponse:
        """
        Description: 计算集群 - 部署同步 - 获取一个需要同步的部署任务
        Summary: 计算集群-部署同步-获取一个需要同步任务
        """
        UtilClient.validate_model(request)
        return blockchain_models.GetMydidcommunWorkergroupSyncResponse().from_map(
            await self.do_request_async('1.0', 'baas.mydidcommun.workergroup.sync.get', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def get_mydidcommun_workergroup_pod(
        self,
        request: blockchain_models.GetMydidcommunWorkergroupPodRequest,
    ) -> blockchain_models.GetMydidcommunWorkergroupPodResponse:
        """
        Description: 通过部署ID获取部署详情
        Summary: 计算集群-部署-获取部署详情
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.get_mydidcommun_workergroup_pod_ex(request, headers, runtime)

    async def get_mydidcommun_workergroup_pod_async(
        self,
        request: blockchain_models.GetMydidcommunWorkergroupPodRequest,
    ) -> blockchain_models.GetMydidcommunWorkergroupPodResponse:
        """
        Description: 通过部署ID获取部署详情
        Summary: 计算集群-部署-获取部署详情
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.get_mydidcommun_workergroup_pod_ex_async(request, headers, runtime)

    def get_mydidcommun_workergroup_pod_ex(
        self,
        request: blockchain_models.GetMydidcommunWorkergroupPodRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.GetMydidcommunWorkergroupPodResponse:
        """
        Description: 通过部署ID获取部署详情
        Summary: 计算集群-部署-获取部署详情
        """
        UtilClient.validate_model(request)
        return blockchain_models.GetMydidcommunWorkergroupPodResponse().from_map(
            self.do_request('1.0', 'baas.mydidcommun.workergroup.pod.get', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def get_mydidcommun_workergroup_pod_ex_async(
        self,
        request: blockchain_models.GetMydidcommunWorkergroupPodRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.GetMydidcommunWorkergroupPodResponse:
        """
        Description: 通过部署ID获取部署详情
        Summary: 计算集群-部署-获取部署详情
        """
        UtilClient.validate_model(request)
        return blockchain_models.GetMydidcommunWorkergroupPodResponse().from_map(
            await self.do_request_async('1.0', 'baas.mydidcommun.workergroup.pod.get', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def finish_mydidcommun_workergroup_sync(
        self,
        request: blockchain_models.FinishMydidcommunWorkergroupSyncRequest,
    ) -> blockchain_models.FinishMydidcommunWorkergroupSyncResponse:
        """
        Description: 计算集群-部署同步-设置同步任务完成
        Summary: 计算集群-部署同步-设置同步任务完成
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.finish_mydidcommun_workergroup_sync_ex(request, headers, runtime)

    async def finish_mydidcommun_workergroup_sync_async(
        self,
        request: blockchain_models.FinishMydidcommunWorkergroupSyncRequest,
    ) -> blockchain_models.FinishMydidcommunWorkergroupSyncResponse:
        """
        Description: 计算集群-部署同步-设置同步任务完成
        Summary: 计算集群-部署同步-设置同步任务完成
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.finish_mydidcommun_workergroup_sync_ex_async(request, headers, runtime)

    def finish_mydidcommun_workergroup_sync_ex(
        self,
        request: blockchain_models.FinishMydidcommunWorkergroupSyncRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.FinishMydidcommunWorkergroupSyncResponse:
        """
        Description: 计算集群-部署同步-设置同步任务完成
        Summary: 计算集群-部署同步-设置同步任务完成
        """
        UtilClient.validate_model(request)
        return blockchain_models.FinishMydidcommunWorkergroupSyncResponse().from_map(
            self.do_request('1.0', 'baas.mydidcommun.workergroup.sync.finish', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def finish_mydidcommun_workergroup_sync_ex_async(
        self,
        request: blockchain_models.FinishMydidcommunWorkergroupSyncRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.FinishMydidcommunWorkergroupSyncResponse:
        """
        Description: 计算集群-部署同步-设置同步任务完成
        Summary: 计算集群-部署同步-设置同步任务完成
        """
        UtilClient.validate_model(request)
        return blockchain_models.FinishMydidcommunWorkergroupSyncResponse().from_map(
            await self.do_request_async('1.0', 'baas.mydidcommun.workergroup.sync.finish', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def get_mydidcommun_workergroup_tapp(
        self,
        request: blockchain_models.GetMydidcommunWorkergroupTappRequest,
    ) -> blockchain_models.GetMydidcommunWorkergroupTappResponse:
        """
        Description: 计算集群-部署同步-获取TAPP部署详情
        Summary: 计算集群-TAPP-获取TAPP部署
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.get_mydidcommun_workergroup_tapp_ex(request, headers, runtime)

    async def get_mydidcommun_workergroup_tapp_async(
        self,
        request: blockchain_models.GetMydidcommunWorkergroupTappRequest,
    ) -> blockchain_models.GetMydidcommunWorkergroupTappResponse:
        """
        Description: 计算集群-部署同步-获取TAPP部署详情
        Summary: 计算集群-TAPP-获取TAPP部署
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.get_mydidcommun_workergroup_tapp_ex_async(request, headers, runtime)

    def get_mydidcommun_workergroup_tapp_ex(
        self,
        request: blockchain_models.GetMydidcommunWorkergroupTappRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.GetMydidcommunWorkergroupTappResponse:
        """
        Description: 计算集群-部署同步-获取TAPP部署详情
        Summary: 计算集群-TAPP-获取TAPP部署
        """
        UtilClient.validate_model(request)
        return blockchain_models.GetMydidcommunWorkergroupTappResponse().from_map(
            self.do_request('1.0', 'baas.mydidcommun.workergroup.tapp.get', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def get_mydidcommun_workergroup_tapp_ex_async(
        self,
        request: blockchain_models.GetMydidcommunWorkergroupTappRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.GetMydidcommunWorkergroupTappResponse:
        """
        Description: 计算集群-部署同步-获取TAPP部署详情
        Summary: 计算集群-TAPP-获取TAPP部署
        """
        UtilClient.validate_model(request)
        return blockchain_models.GetMydidcommunWorkergroupTappResponse().from_map(
            await self.do_request_async('1.0', 'baas.mydidcommun.workergroup.tapp.get', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def update_mydidcommun_workergroup_tapp(
        self,
        request: blockchain_models.UpdateMydidcommunWorkergroupTappRequest,
    ) -> blockchain_models.UpdateMydidcommunWorkergroupTappResponse:
        """
        Description: 更新TAPP部署的信息，包括公钥哈希等
        Summary: 计算集群-TAPP-更新TAPP信息
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.update_mydidcommun_workergroup_tapp_ex(request, headers, runtime)

    async def update_mydidcommun_workergroup_tapp_async(
        self,
        request: blockchain_models.UpdateMydidcommunWorkergroupTappRequest,
    ) -> blockchain_models.UpdateMydidcommunWorkergroupTappResponse:
        """
        Description: 更新TAPP部署的信息，包括公钥哈希等
        Summary: 计算集群-TAPP-更新TAPP信息
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.update_mydidcommun_workergroup_tapp_ex_async(request, headers, runtime)

    def update_mydidcommun_workergroup_tapp_ex(
        self,
        request: blockchain_models.UpdateMydidcommunWorkergroupTappRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.UpdateMydidcommunWorkergroupTappResponse:
        """
        Description: 更新TAPP部署的信息，包括公钥哈希等
        Summary: 计算集群-TAPP-更新TAPP信息
        """
        UtilClient.validate_model(request)
        return blockchain_models.UpdateMydidcommunWorkergroupTappResponse().from_map(
            self.do_request('1.0', 'baas.mydidcommun.workergroup.tapp.update', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def update_mydidcommun_workergroup_tapp_ex_async(
        self,
        request: blockchain_models.UpdateMydidcommunWorkergroupTappRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.UpdateMydidcommunWorkergroupTappResponse:
        """
        Description: 更新TAPP部署的信息，包括公钥哈希等
        Summary: 计算集群-TAPP-更新TAPP信息
        """
        UtilClient.validate_model(request)
        return blockchain_models.UpdateMydidcommunWorkergroupTappResponse().from_map(
            await self.do_request_async('1.0', 'baas.mydidcommun.workergroup.tapp.update', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_mydidcommun_workergroup_workflow(
        self,
        request: blockchain_models.QueryMydidcommunWorkergroupWorkflowRequest,
    ) -> blockchain_models.QueryMydidcommunWorkergroupWorkflowResponse:
        """
        Description: 获取工作流的所有在线版本的配置
        Summary: 计算集群-工作流-获取工作流配置
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_mydidcommun_workergroup_workflow_ex(request, headers, runtime)

    async def query_mydidcommun_workergroup_workflow_async(
        self,
        request: blockchain_models.QueryMydidcommunWorkergroupWorkflowRequest,
    ) -> blockchain_models.QueryMydidcommunWorkergroupWorkflowResponse:
        """
        Description: 获取工作流的所有在线版本的配置
        Summary: 计算集群-工作流-获取工作流配置
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_mydidcommun_workergroup_workflow_ex_async(request, headers, runtime)

    def query_mydidcommun_workergroup_workflow_ex(
        self,
        request: blockchain_models.QueryMydidcommunWorkergroupWorkflowRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryMydidcommunWorkergroupWorkflowResponse:
        """
        Description: 获取工作流的所有在线版本的配置
        Summary: 计算集群-工作流-获取工作流配置
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryMydidcommunWorkergroupWorkflowResponse().from_map(
            self.do_request('1.0', 'baas.mydidcommun.workergroup.workflow.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_mydidcommun_workergroup_workflow_ex_async(
        self,
        request: blockchain_models.QueryMydidcommunWorkergroupWorkflowRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryMydidcommunWorkergroupWorkflowResponse:
        """
        Description: 获取工作流的所有在线版本的配置
        Summary: 计算集群-工作流-获取工作流配置
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryMydidcommunWorkergroupWorkflowResponse().from_map(
            await self.do_request_async('1.0', 'baas.mydidcommun.workergroup.workflow.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def sync_mydidcommun_workergroup_group(
        self,
        request: blockchain_models.SyncMydidcommunWorkergroupGroupRequest,
    ) -> blockchain_models.SyncMydidcommunWorkergroupGroupResponse:
        """
        Description: 同步集群状态
        Summary: 计算集群-集群-同步集群状态
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.sync_mydidcommun_workergroup_group_ex(request, headers, runtime)

    async def sync_mydidcommun_workergroup_group_async(
        self,
        request: blockchain_models.SyncMydidcommunWorkergroupGroupRequest,
    ) -> blockchain_models.SyncMydidcommunWorkergroupGroupResponse:
        """
        Description: 同步集群状态
        Summary: 计算集群-集群-同步集群状态
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.sync_mydidcommun_workergroup_group_ex_async(request, headers, runtime)

    def sync_mydidcommun_workergroup_group_ex(
        self,
        request: blockchain_models.SyncMydidcommunWorkergroupGroupRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.SyncMydidcommunWorkergroupGroupResponse:
        """
        Description: 同步集群状态
        Summary: 计算集群-集群-同步集群状态
        """
        UtilClient.validate_model(request)
        return blockchain_models.SyncMydidcommunWorkergroupGroupResponse().from_map(
            self.do_request('1.0', 'baas.mydidcommun.workergroup.group.sync', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def sync_mydidcommun_workergroup_group_ex_async(
        self,
        request: blockchain_models.SyncMydidcommunWorkergroupGroupRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.SyncMydidcommunWorkergroupGroupResponse:
        """
        Description: 同步集群状态
        Summary: 计算集群-集群-同步集群状态
        """
        UtilClient.validate_model(request)
        return blockchain_models.SyncMydidcommunWorkergroupGroupResponse().from_map(
            await self.do_request_async('1.0', 'baas.mydidcommun.workergroup.group.sync', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def list_mydidcommun_workergroup_podversion(
        self,
        request: blockchain_models.ListMydidcommunWorkergroupPodversionRequest,
    ) -> blockchain_models.ListMydidcommunWorkergroupPodversionResponse:
        """
        Description: 计算集群-部署版本-获取版本列表
        Summary: 计算集群-部署版本-获取版本列表
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.list_mydidcommun_workergroup_podversion_ex(request, headers, runtime)

    async def list_mydidcommun_workergroup_podversion_async(
        self,
        request: blockchain_models.ListMydidcommunWorkergroupPodversionRequest,
    ) -> blockchain_models.ListMydidcommunWorkergroupPodversionResponse:
        """
        Description: 计算集群-部署版本-获取版本列表
        Summary: 计算集群-部署版本-获取版本列表
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.list_mydidcommun_workergroup_podversion_ex_async(request, headers, runtime)

    def list_mydidcommun_workergroup_podversion_ex(
        self,
        request: blockchain_models.ListMydidcommunWorkergroupPodversionRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.ListMydidcommunWorkergroupPodversionResponse:
        """
        Description: 计算集群-部署版本-获取版本列表
        Summary: 计算集群-部署版本-获取版本列表
        """
        UtilClient.validate_model(request)
        return blockchain_models.ListMydidcommunWorkergroupPodversionResponse().from_map(
            self.do_request('1.0', 'baas.mydidcommun.workergroup.podversion.list', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def list_mydidcommun_workergroup_podversion_ex_async(
        self,
        request: blockchain_models.ListMydidcommunWorkergroupPodversionRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.ListMydidcommunWorkergroupPodversionResponse:
        """
        Description: 计算集群-部署版本-获取版本列表
        Summary: 计算集群-部署版本-获取版本列表
        """
        UtilClient.validate_model(request)
        return blockchain_models.ListMydidcommunWorkergroupPodversionResponse().from_map(
            await self.do_request_async('1.0', 'baas.mydidcommun.workergroup.podversion.list', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def save_mydid_idaas_didservice(
        self,
        request: blockchain_models.SaveMydidIdaasDidserviceRequest,
    ) -> blockchain_models.SaveMydidIdaasDidserviceResponse:
        """
        Description: did创建
        Summary: did创建
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.save_mydid_idaas_didservice_ex(request, headers, runtime)

    async def save_mydid_idaas_didservice_async(
        self,
        request: blockchain_models.SaveMydidIdaasDidserviceRequest,
    ) -> blockchain_models.SaveMydidIdaasDidserviceResponse:
        """
        Description: did创建
        Summary: did创建
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.save_mydid_idaas_didservice_ex_async(request, headers, runtime)

    def save_mydid_idaas_didservice_ex(
        self,
        request: blockchain_models.SaveMydidIdaasDidserviceRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.SaveMydidIdaasDidserviceResponse:
        """
        Description: did创建
        Summary: did创建
        """
        UtilClient.validate_model(request)
        return blockchain_models.SaveMydidIdaasDidserviceResponse().from_map(
            self.do_request('1.0', 'baas.mydid.idaas.didservice.save', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def save_mydid_idaas_didservice_ex_async(
        self,
        request: blockchain_models.SaveMydidIdaasDidserviceRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.SaveMydidIdaasDidserviceResponse:
        """
        Description: did创建
        Summary: did创建
        """
        UtilClient.validate_model(request)
        return blockchain_models.SaveMydidIdaasDidserviceResponse().from_map(
            await self.do_request_async('1.0', 'baas.mydid.idaas.didservice.save', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_did_notification_didevent(
        self,
        request: blockchain_models.QueryDidNotificationDideventRequest,
    ) -> blockchain_models.QueryDidNotificationDideventResponse:
        """
        Description: 消息端主动拉取did event
        Summary: 消息端主动拉取did event
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_did_notification_didevent_ex(request, headers, runtime)

    async def query_did_notification_didevent_async(
        self,
        request: blockchain_models.QueryDidNotificationDideventRequest,
    ) -> blockchain_models.QueryDidNotificationDideventResponse:
        """
        Description: 消息端主动拉取did event
        Summary: 消息端主动拉取did event
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_did_notification_didevent_ex_async(request, headers, runtime)

    def query_did_notification_didevent_ex(
        self,
        request: blockchain_models.QueryDidNotificationDideventRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryDidNotificationDideventResponse:
        """
        Description: 消息端主动拉取did event
        Summary: 消息端主动拉取did event
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryDidNotificationDideventResponse().from_map(
            self.do_request('1.0', 'baas.did.notification.didevent.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_did_notification_didevent_ex_async(
        self,
        request: blockchain_models.QueryDidNotificationDideventRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryDidNotificationDideventResponse:
        """
        Description: 消息端主动拉取did event
        Summary: 消息端主动拉取did event
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryDidNotificationDideventResponse().from_map(
            await self.do_request_async('1.0', 'baas.did.notification.didevent.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_did_notification_vcevent(
        self,
        request: blockchain_models.QueryDidNotificationVceventRequest,
    ) -> blockchain_models.QueryDidNotificationVceventResponse:
        """
        Description: 主动拉取vc事件
        Summary: 主动拉取vc事件
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_did_notification_vcevent_ex(request, headers, runtime)

    async def query_did_notification_vcevent_async(
        self,
        request: blockchain_models.QueryDidNotificationVceventRequest,
    ) -> blockchain_models.QueryDidNotificationVceventResponse:
        """
        Description: 主动拉取vc事件
        Summary: 主动拉取vc事件
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_did_notification_vcevent_ex_async(request, headers, runtime)

    def query_did_notification_vcevent_ex(
        self,
        request: blockchain_models.QueryDidNotificationVceventRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryDidNotificationVceventResponse:
        """
        Description: 主动拉取vc事件
        Summary: 主动拉取vc事件
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryDidNotificationVceventResponse().from_map(
            self.do_request('1.0', 'baas.did.notification.vcevent.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_did_notification_vcevent_ex_async(
        self,
        request: blockchain_models.QueryDidNotificationVceventRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryDidNotificationVceventResponse:
        """
        Description: 主动拉取vc事件
        Summary: 主动拉取vc事件
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryDidNotificationVceventResponse().from_map(
            await self.do_request_async('1.0', 'baas.did.notification.vcevent.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_did_notification_fulldid(
        self,
        request: blockchain_models.QueryDidNotificationFulldidRequest,
    ) -> blockchain_models.QueryDidNotificationFulldidResponse:
        """
        Description: 获取did全量数据
        Summary: 获取did全量数据
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_did_notification_fulldid_ex(request, headers, runtime)

    async def query_did_notification_fulldid_async(
        self,
        request: blockchain_models.QueryDidNotificationFulldidRequest,
    ) -> blockchain_models.QueryDidNotificationFulldidResponse:
        """
        Description: 获取did全量数据
        Summary: 获取did全量数据
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_did_notification_fulldid_ex_async(request, headers, runtime)

    def query_did_notification_fulldid_ex(
        self,
        request: blockchain_models.QueryDidNotificationFulldidRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryDidNotificationFulldidResponse:
        """
        Description: 获取did全量数据
        Summary: 获取did全量数据
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryDidNotificationFulldidResponse().from_map(
            self.do_request('1.0', 'baas.did.notification.fulldid.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_did_notification_fulldid_ex_async(
        self,
        request: blockchain_models.QueryDidNotificationFulldidRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryDidNotificationFulldidResponse:
        """
        Description: 获取did全量数据
        Summary: 获取did全量数据
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryDidNotificationFulldidResponse().from_map(
            await self.do_request_async('1.0', 'baas.did.notification.fulldid.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def create_did_identity_corporate(
        self,
        request: blockchain_models.CreateDidIdentityCorporateRequest,
    ) -> blockchain_models.CreateDidIdentityCorporateResponse:
        """
        Description: 非托管模式下创建企业did账户
        Summary: 非托管模式下创建企业did账户
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.create_did_identity_corporate_ex(request, headers, runtime)

    async def create_did_identity_corporate_async(
        self,
        request: blockchain_models.CreateDidIdentityCorporateRequest,
    ) -> blockchain_models.CreateDidIdentityCorporateResponse:
        """
        Description: 非托管模式下创建企业did账户
        Summary: 非托管模式下创建企业did账户
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.create_did_identity_corporate_ex_async(request, headers, runtime)

    def create_did_identity_corporate_ex(
        self,
        request: blockchain_models.CreateDidIdentityCorporateRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateDidIdentityCorporateResponse:
        """
        Description: 非托管模式下创建企业did账户
        Summary: 非托管模式下创建企业did账户
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateDidIdentityCorporateResponse().from_map(
            self.do_request('1.0', 'baas.did.identity.corporate.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def create_did_identity_corporate_ex_async(
        self,
        request: blockchain_models.CreateDidIdentityCorporateRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateDidIdentityCorporateResponse:
        """
        Description: 非托管模式下创建企业did账户
        Summary: 非托管模式下创建企业did账户
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateDidIdentityCorporateResponse().from_map(
            await self.do_request_async('1.0', 'baas.did.identity.corporate.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def init_did_adddid_hash(
        self,
        request: blockchain_models.InitDidAdddidHashRequest,
    ) -> blockchain_models.InitDidAdddidHashResponse:
        """
        Description: 计算上链交易hash
        Summary: add did doc上链交易hash
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.init_did_adddid_hash_ex(request, headers, runtime)

    async def init_did_adddid_hash_async(
        self,
        request: blockchain_models.InitDidAdddidHashRequest,
    ) -> blockchain_models.InitDidAdddidHashResponse:
        """
        Description: 计算上链交易hash
        Summary: add did doc上链交易hash
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.init_did_adddid_hash_ex_async(request, headers, runtime)

    def init_did_adddid_hash_ex(
        self,
        request: blockchain_models.InitDidAdddidHashRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.InitDidAdddidHashResponse:
        """
        Description: 计算上链交易hash
        Summary: add did doc上链交易hash
        """
        UtilClient.validate_model(request)
        return blockchain_models.InitDidAdddidHashResponse().from_map(
            self.do_request('1.0', 'baas.did.adddid.hash.init', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def init_did_adddid_hash_ex_async(
        self,
        request: blockchain_models.InitDidAdddidHashRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.InitDidAdddidHashResponse:
        """
        Description: 计算上链交易hash
        Summary: add did doc上链交易hash
        """
        UtilClient.validate_model(request)
        return blockchain_models.InitDidAdddidHashResponse().from_map(
            await self.do_request_async('1.0', 'baas.did.adddid.hash.init', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def start_did_adddid_execute(
        self,
        request: blockchain_models.StartDidAdddidExecuteRequest,
    ) -> blockchain_models.StartDidAdddidExecuteResponse:
        """
        Description: 将diddoc写入DIS链
        Summary: 将diddoc写入DIS链
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.start_did_adddid_execute_ex(request, headers, runtime)

    async def start_did_adddid_execute_async(
        self,
        request: blockchain_models.StartDidAdddidExecuteRequest,
    ) -> blockchain_models.StartDidAdddidExecuteResponse:
        """
        Description: 将diddoc写入DIS链
        Summary: 将diddoc写入DIS链
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.start_did_adddid_execute_ex_async(request, headers, runtime)

    def start_did_adddid_execute_ex(
        self,
        request: blockchain_models.StartDidAdddidExecuteRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartDidAdddidExecuteResponse:
        """
        Description: 将diddoc写入DIS链
        Summary: 将diddoc写入DIS链
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartDidAdddidExecuteResponse().from_map(
            self.do_request('1.0', 'baas.did.adddid.execute.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def start_did_adddid_execute_ex_async(
        self,
        request: blockchain_models.StartDidAdddidExecuteRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartDidAdddidExecuteResponse:
        """
        Description: 将diddoc写入DIS链
        Summary: 将diddoc写入DIS链
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartDidAdddidExecuteResponse().from_map(
            await self.do_request_async('1.0', 'baas.did.adddid.execute.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def init_did_addvc_hash(
        self,
        request: blockchain_models.InitDidAddvcHashRequest,
    ) -> blockchain_models.InitDidAddvcHashResponse:
        """
        Description: 可验证声明上链之前计算其hash
        Summary: 可验证声明上链之前计算其hash
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.init_did_addvc_hash_ex(request, headers, runtime)

    async def init_did_addvc_hash_async(
        self,
        request: blockchain_models.InitDidAddvcHashRequest,
    ) -> blockchain_models.InitDidAddvcHashResponse:
        """
        Description: 可验证声明上链之前计算其hash
        Summary: 可验证声明上链之前计算其hash
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.init_did_addvc_hash_ex_async(request, headers, runtime)

    def init_did_addvc_hash_ex(
        self,
        request: blockchain_models.InitDidAddvcHashRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.InitDidAddvcHashResponse:
        """
        Description: 可验证声明上链之前计算其hash
        Summary: 可验证声明上链之前计算其hash
        """
        UtilClient.validate_model(request)
        return blockchain_models.InitDidAddvcHashResponse().from_map(
            self.do_request('1.0', 'baas.did.addvc.hash.init', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def init_did_addvc_hash_ex_async(
        self,
        request: blockchain_models.InitDidAddvcHashRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.InitDidAddvcHashResponse:
        """
        Description: 可验证声明上链之前计算其hash
        Summary: 可验证声明上链之前计算其hash
        """
        UtilClient.validate_model(request)
        return blockchain_models.InitDidAddvcHashResponse().from_map(
            await self.do_request_async('1.0', 'baas.did.addvc.hash.init', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def start_did_addvc_execute(
        self,
        request: blockchain_models.StartDidAddvcExecuteRequest,
    ) -> blockchain_models.StartDidAddvcExecuteResponse:
        """
        Description: 实际执行可验证声明上链
        Summary: 实际执行可验证声明上链
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.start_did_addvc_execute_ex(request, headers, runtime)

    async def start_did_addvc_execute_async(
        self,
        request: blockchain_models.StartDidAddvcExecuteRequest,
    ) -> blockchain_models.StartDidAddvcExecuteResponse:
        """
        Description: 实际执行可验证声明上链
        Summary: 实际执行可验证声明上链
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.start_did_addvc_execute_ex_async(request, headers, runtime)

    def start_did_addvc_execute_ex(
        self,
        request: blockchain_models.StartDidAddvcExecuteRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartDidAddvcExecuteResponse:
        """
        Description: 实际执行可验证声明上链
        Summary: 实际执行可验证声明上链
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartDidAddvcExecuteResponse().from_map(
            self.do_request('1.0', 'baas.did.addvc.execute.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def start_did_addvc_execute_ex_async(
        self,
        request: blockchain_models.StartDidAddvcExecuteRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartDidAddvcExecuteResponse:
        """
        Description: 实际执行可验证声明上链
        Summary: 实际执行可验证声明上链
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartDidAddvcExecuteResponse().from_map(
            await self.do_request_async('1.0', 'baas.did.addvc.execute.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def init_did_updatevcstatus_hash(
        self,
        request: blockchain_models.InitDidUpdatevcstatusHashRequest,
    ) -> blockchain_models.InitDidUpdatevcstatusHashResponse:
        """
        Description: 计算更新VC状态交易hash
        Summary: 计算更新VC状态交易hash
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.init_did_updatevcstatus_hash_ex(request, headers, runtime)

    async def init_did_updatevcstatus_hash_async(
        self,
        request: blockchain_models.InitDidUpdatevcstatusHashRequest,
    ) -> blockchain_models.InitDidUpdatevcstatusHashResponse:
        """
        Description: 计算更新VC状态交易hash
        Summary: 计算更新VC状态交易hash
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.init_did_updatevcstatus_hash_ex_async(request, headers, runtime)

    def init_did_updatevcstatus_hash_ex(
        self,
        request: blockchain_models.InitDidUpdatevcstatusHashRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.InitDidUpdatevcstatusHashResponse:
        """
        Description: 计算更新VC状态交易hash
        Summary: 计算更新VC状态交易hash
        """
        UtilClient.validate_model(request)
        return blockchain_models.InitDidUpdatevcstatusHashResponse().from_map(
            self.do_request('1.0', 'baas.did.updatevcstatus.hash.init', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def init_did_updatevcstatus_hash_ex_async(
        self,
        request: blockchain_models.InitDidUpdatevcstatusHashRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.InitDidUpdatevcstatusHashResponse:
        """
        Description: 计算更新VC状态交易hash
        Summary: 计算更新VC状态交易hash
        """
        UtilClient.validate_model(request)
        return blockchain_models.InitDidUpdatevcstatusHashResponse().from_map(
            await self.do_request_async('1.0', 'baas.did.updatevcstatus.hash.init', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def start_did_updatevcstatus_execute(
        self,
        request: blockchain_models.StartDidUpdatevcstatusExecuteRequest,
    ) -> blockchain_models.StartDidUpdatevcstatusExecuteResponse:
        """
        Description: 更新VC状态
        Summary: 更新VC状态
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.start_did_updatevcstatus_execute_ex(request, headers, runtime)

    async def start_did_updatevcstatus_execute_async(
        self,
        request: blockchain_models.StartDidUpdatevcstatusExecuteRequest,
    ) -> blockchain_models.StartDidUpdatevcstatusExecuteResponse:
        """
        Description: 更新VC状态
        Summary: 更新VC状态
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.start_did_updatevcstatus_execute_ex_async(request, headers, runtime)

    def start_did_updatevcstatus_execute_ex(
        self,
        request: blockchain_models.StartDidUpdatevcstatusExecuteRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartDidUpdatevcstatusExecuteResponse:
        """
        Description: 更新VC状态
        Summary: 更新VC状态
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartDidUpdatevcstatusExecuteResponse().from_map(
            self.do_request('1.0', 'baas.did.updatevcstatus.execute.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def start_did_updatevcstatus_execute_ex_async(
        self,
        request: blockchain_models.StartDidUpdatevcstatusExecuteRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartDidUpdatevcstatusExecuteResponse:
        """
        Description: 更新VC状态
        Summary: 更新VC状态
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartDidUpdatevcstatusExecuteResponse().from_map(
            await self.do_request_async('1.0', 'baas.did.updatevcstatus.execute.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def init_did_updatedid_hash(
        self,
        request: blockchain_models.InitDidUpdatedidHashRequest,
    ) -> blockchain_models.InitDidUpdatedidHashResponse:
        """
        Description: 计算更新did交易hash
        Summary: 计算更新did交易hash
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.init_did_updatedid_hash_ex(request, headers, runtime)

    async def init_did_updatedid_hash_async(
        self,
        request: blockchain_models.InitDidUpdatedidHashRequest,
    ) -> blockchain_models.InitDidUpdatedidHashResponse:
        """
        Description: 计算更新did交易hash
        Summary: 计算更新did交易hash
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.init_did_updatedid_hash_ex_async(request, headers, runtime)

    def init_did_updatedid_hash_ex(
        self,
        request: blockchain_models.InitDidUpdatedidHashRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.InitDidUpdatedidHashResponse:
        """
        Description: 计算更新did交易hash
        Summary: 计算更新did交易hash
        """
        UtilClient.validate_model(request)
        return blockchain_models.InitDidUpdatedidHashResponse().from_map(
            self.do_request('1.0', 'baas.did.updatedid.hash.init', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def init_did_updatedid_hash_ex_async(
        self,
        request: blockchain_models.InitDidUpdatedidHashRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.InitDidUpdatedidHashResponse:
        """
        Description: 计算更新did交易hash
        Summary: 计算更新did交易hash
        """
        UtilClient.validate_model(request)
        return blockchain_models.InitDidUpdatedidHashResponse().from_map(
            await self.do_request_async('1.0', 'baas.did.updatedid.hash.init', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def start_did_updatedid_execute(
        self,
        request: blockchain_models.StartDidUpdatedidExecuteRequest,
    ) -> blockchain_models.StartDidUpdatedidExecuteResponse:
        """
        Description: 更新did
        Summary: 更新did
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.start_did_updatedid_execute_ex(request, headers, runtime)

    async def start_did_updatedid_execute_async(
        self,
        request: blockchain_models.StartDidUpdatedidExecuteRequest,
    ) -> blockchain_models.StartDidUpdatedidExecuteResponse:
        """
        Description: 更新did
        Summary: 更新did
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.start_did_updatedid_execute_ex_async(request, headers, runtime)

    def start_did_updatedid_execute_ex(
        self,
        request: blockchain_models.StartDidUpdatedidExecuteRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartDidUpdatedidExecuteResponse:
        """
        Description: 更新did
        Summary: 更新did
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartDidUpdatedidExecuteResponse().from_map(
            self.do_request('1.0', 'baas.did.updatedid.execute.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def start_did_updatedid_execute_ex_async(
        self,
        request: blockchain_models.StartDidUpdatedidExecuteRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartDidUpdatedidExecuteResponse:
        """
        Description: 更新did
        Summary: 更新did
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartDidUpdatedidExecuteResponse().from_map(
            await self.do_request_async('1.0', 'baas.did.updatedid.execute.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_did_diddoc_direct(
        self,
        request: blockchain_models.QueryDidDiddocDirectRequest,
    ) -> blockchain_models.QueryDidDiddocDirectResponse:
        """
        Description: 非托管查询did doc
        Summary: 非托管查询did doc
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_did_diddoc_direct_ex(request, headers, runtime)

    async def query_did_diddoc_direct_async(
        self,
        request: blockchain_models.QueryDidDiddocDirectRequest,
    ) -> blockchain_models.QueryDidDiddocDirectResponse:
        """
        Description: 非托管查询did doc
        Summary: 非托管查询did doc
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_did_diddoc_direct_ex_async(request, headers, runtime)

    def query_did_diddoc_direct_ex(
        self,
        request: blockchain_models.QueryDidDiddocDirectRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryDidDiddocDirectResponse:
        """
        Description: 非托管查询did doc
        Summary: 非托管查询did doc
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryDidDiddocDirectResponse().from_map(
            self.do_request('1.0', 'baas.did.diddoc.direct.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_did_diddoc_direct_ex_async(
        self,
        request: blockchain_models.QueryDidDiddocDirectRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryDidDiddocDirectResponse:
        """
        Description: 非托管查询did doc
        Summary: 非托管查询did doc
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryDidDiddocDirectResponse().from_map(
            await self.do_request_async('1.0', 'baas.did.diddoc.direct.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_did_vc_direct(
        self,
        request: blockchain_models.QueryDidVcDirectRequest,
    ) -> blockchain_models.QueryDidVcDirectResponse:
        """
        Description: 非托管查询可验证声明
        Summary: 非托管查询可验证声明
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_did_vc_direct_ex(request, headers, runtime)

    async def query_did_vc_direct_async(
        self,
        request: blockchain_models.QueryDidVcDirectRequest,
    ) -> blockchain_models.QueryDidVcDirectResponse:
        """
        Description: 非托管查询可验证声明
        Summary: 非托管查询可验证声明
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_did_vc_direct_ex_async(request, headers, runtime)

    def query_did_vc_direct_ex(
        self,
        request: blockchain_models.QueryDidVcDirectRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryDidVcDirectResponse:
        """
        Description: 非托管查询可验证声明
        Summary: 非托管查询可验证声明
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryDidVcDirectResponse().from_map(
            self.do_request('1.0', 'baas.did.vc.direct.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_did_vc_direct_ex_async(
        self,
        request: blockchain_models.QueryDidVcDirectRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryDidVcDirectResponse:
        """
        Description: 非托管查询可验证声明
        Summary: 非托管查询可验证声明
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryDidVcDirectResponse().from_map(
            await self.do_request_async('1.0', 'baas.did.vc.direct.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def create_did_identity_person(
        self,
        request: blockchain_models.CreateDidIdentityPersonRequest,
    ) -> blockchain_models.CreateDidIdentityPersonResponse:
        """
        Description: 非托管模式下创建个人did账户
        Summary: 非托管模式下创建个人did账户
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.create_did_identity_person_ex(request, headers, runtime)

    async def create_did_identity_person_async(
        self,
        request: blockchain_models.CreateDidIdentityPersonRequest,
    ) -> blockchain_models.CreateDidIdentityPersonResponse:
        """
        Description: 非托管模式下创建个人did账户
        Summary: 非托管模式下创建个人did账户
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.create_did_identity_person_ex_async(request, headers, runtime)

    def create_did_identity_person_ex(
        self,
        request: blockchain_models.CreateDidIdentityPersonRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateDidIdentityPersonResponse:
        """
        Description: 非托管模式下创建个人did账户
        Summary: 非托管模式下创建个人did账户
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateDidIdentityPersonResponse().from_map(
            self.do_request('1.0', 'baas.did.identity.person.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def create_did_identity_person_ex_async(
        self,
        request: blockchain_models.CreateDidIdentityPersonRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateDidIdentityPersonResponse:
        """
        Description: 非托管模式下创建个人did账户
        Summary: 非托管模式下创建个人did账户
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateDidIdentityPersonResponse().from_map(
            await self.do_request_async('1.0', 'baas.did.identity.person.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def update_did_updatedid_authkey(
        self,
        request: blockchain_models.UpdateDidUpdatedidAuthkeyRequest,
    ) -> blockchain_models.UpdateDidUpdatedidAuthkeyResponse:
        """
        Description: 非托管模式更新did doc中的auth key
        Summary: 非托管模式更新doc中的auth key
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.update_did_updatedid_authkey_ex(request, headers, runtime)

    async def update_did_updatedid_authkey_async(
        self,
        request: blockchain_models.UpdateDidUpdatedidAuthkeyRequest,
    ) -> blockchain_models.UpdateDidUpdatedidAuthkeyResponse:
        """
        Description: 非托管模式更新did doc中的auth key
        Summary: 非托管模式更新doc中的auth key
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.update_did_updatedid_authkey_ex_async(request, headers, runtime)

    def update_did_updatedid_authkey_ex(
        self,
        request: blockchain_models.UpdateDidUpdatedidAuthkeyRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.UpdateDidUpdatedidAuthkeyResponse:
        """
        Description: 非托管模式更新did doc中的auth key
        Summary: 非托管模式更新doc中的auth key
        """
        UtilClient.validate_model(request)
        return blockchain_models.UpdateDidUpdatedidAuthkeyResponse().from_map(
            self.do_request('1.0', 'baas.did.updatedid.authkey.update', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def update_did_updatedid_authkey_ex_async(
        self,
        request: blockchain_models.UpdateDidUpdatedidAuthkeyRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.UpdateDidUpdatedidAuthkeyResponse:
        """
        Description: 非托管模式更新did doc中的auth key
        Summary: 非托管模式更新doc中的auth key
        """
        UtilClient.validate_model(request)
        return blockchain_models.UpdateDidUpdatedidAuthkeyResponse().from_map(
            await self.do_request_async('1.0', 'baas.did.updatedid.authkey.update', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def update_did_updatedid_service(
        self,
        request: blockchain_models.UpdateDidUpdatedidServiceRequest,
    ) -> blockchain_models.UpdateDidUpdatedidServiceResponse:
        """
        Description: 更新did对应did doc中的service信息
        Summary: 更新did service信息
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.update_did_updatedid_service_ex(request, headers, runtime)

    async def update_did_updatedid_service_async(
        self,
        request: blockchain_models.UpdateDidUpdatedidServiceRequest,
    ) -> blockchain_models.UpdateDidUpdatedidServiceResponse:
        """
        Description: 更新did对应did doc中的service信息
        Summary: 更新did service信息
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.update_did_updatedid_service_ex_async(request, headers, runtime)

    def update_did_updatedid_service_ex(
        self,
        request: blockchain_models.UpdateDidUpdatedidServiceRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.UpdateDidUpdatedidServiceResponse:
        """
        Description: 更新did对应did doc中的service信息
        Summary: 更新did service信息
        """
        UtilClient.validate_model(request)
        return blockchain_models.UpdateDidUpdatedidServiceResponse().from_map(
            self.do_request('1.0', 'baas.did.updatedid.service.update', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def update_did_updatedid_service_ex_async(
        self,
        request: blockchain_models.UpdateDidUpdatedidServiceRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.UpdateDidUpdatedidServiceResponse:
        """
        Description: 更新did对应did doc中的service信息
        Summary: 更新did service信息
        """
        UtilClient.validate_model(request)
        return blockchain_models.UpdateDidUpdatedidServiceResponse().from_map(
            await self.do_request_async('1.0', 'baas.did.updatedid.service.update', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def add_did_updatedid_service(
        self,
        request: blockchain_models.AddDidUpdatedidServiceRequest,
    ) -> blockchain_models.AddDidUpdatedidServiceResponse:
        """
        Description: 添加did doc中的service
        Summary: 添加did doc中的service
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.add_did_updatedid_service_ex(request, headers, runtime)

    async def add_did_updatedid_service_async(
        self,
        request: blockchain_models.AddDidUpdatedidServiceRequest,
    ) -> blockchain_models.AddDidUpdatedidServiceResponse:
        """
        Description: 添加did doc中的service
        Summary: 添加did doc中的service
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.add_did_updatedid_service_ex_async(request, headers, runtime)

    def add_did_updatedid_service_ex(
        self,
        request: blockchain_models.AddDidUpdatedidServiceRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.AddDidUpdatedidServiceResponse:
        """
        Description: 添加did doc中的service
        Summary: 添加did doc中的service
        """
        UtilClient.validate_model(request)
        return blockchain_models.AddDidUpdatedidServiceResponse().from_map(
            self.do_request('1.0', 'baas.did.updatedid.service.add', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def add_did_updatedid_service_ex_async(
        self,
        request: blockchain_models.AddDidUpdatedidServiceRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.AddDidUpdatedidServiceResponse:
        """
        Description: 添加did doc中的service
        Summary: 添加did doc中的service
        """
        UtilClient.validate_model(request)
        return blockchain_models.AddDidUpdatedidServiceResponse().from_map(
            await self.do_request_async('1.0', 'baas.did.updatedid.service.add', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def delete_did_updatedid_service(
        self,
        request: blockchain_models.DeleteDidUpdatedidServiceRequest,
    ) -> blockchain_models.DeleteDidUpdatedidServiceResponse:
        """
        Description: 删除did doc中的service信息
        Summary: 删除did doc中的service信息
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.delete_did_updatedid_service_ex(request, headers, runtime)

    async def delete_did_updatedid_service_async(
        self,
        request: blockchain_models.DeleteDidUpdatedidServiceRequest,
    ) -> blockchain_models.DeleteDidUpdatedidServiceResponse:
        """
        Description: 删除did doc中的service信息
        Summary: 删除did doc中的service信息
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.delete_did_updatedid_service_ex_async(request, headers, runtime)

    def delete_did_updatedid_service_ex(
        self,
        request: blockchain_models.DeleteDidUpdatedidServiceRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.DeleteDidUpdatedidServiceResponse:
        """
        Description: 删除did doc中的service信息
        Summary: 删除did doc中的service信息
        """
        UtilClient.validate_model(request)
        return blockchain_models.DeleteDidUpdatedidServiceResponse().from_map(
            self.do_request('1.0', 'baas.did.updatedid.service.delete', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def delete_did_updatedid_service_ex_async(
        self,
        request: blockchain_models.DeleteDidUpdatedidServiceRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.DeleteDidUpdatedidServiceResponse:
        """
        Description: 删除did doc中的service信息
        Summary: 删除did doc中的service信息
        """
        UtilClient.validate_model(request)
        return blockchain_models.DeleteDidUpdatedidServiceResponse().from_map(
            await self.do_request_async('1.0', 'baas.did.updatedid.service.delete', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def update_did_updatevc_status(
        self,
        request: blockchain_models.UpdateDidUpdatevcStatusRequest,
    ) -> blockchain_models.UpdateDidUpdatevcStatusResponse:
        """
        Description: 更新可验证声明状态
        Summary: 更新可验证声明
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.update_did_updatevc_status_ex(request, headers, runtime)

    async def update_did_updatevc_status_async(
        self,
        request: blockchain_models.UpdateDidUpdatevcStatusRequest,
    ) -> blockchain_models.UpdateDidUpdatevcStatusResponse:
        """
        Description: 更新可验证声明状态
        Summary: 更新可验证声明
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.update_did_updatevc_status_ex_async(request, headers, runtime)

    def update_did_updatevc_status_ex(
        self,
        request: blockchain_models.UpdateDidUpdatevcStatusRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.UpdateDidUpdatevcStatusResponse:
        """
        Description: 更新可验证声明状态
        Summary: 更新可验证声明
        """
        UtilClient.validate_model(request)
        return blockchain_models.UpdateDidUpdatevcStatusResponse().from_map(
            self.do_request('1.0', 'baas.did.updatevc.status.update', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def update_did_updatevc_status_ex_async(
        self,
        request: blockchain_models.UpdateDidUpdatevcStatusRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.UpdateDidUpdatevcStatusResponse:
        """
        Description: 更新可验证声明状态
        Summary: 更新可验证声明
        """
        UtilClient.validate_model(request)
        return blockchain_models.UpdateDidUpdatevcStatusResponse().from_map(
            await self.do_request_async('1.0', 'baas.did.updatevc.status.update', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def open_did_resolver_service(
        self,
        request: blockchain_models.OpenDidResolverServiceRequest,
    ) -> blockchain_models.OpenDidResolverServiceResponse:
        """
        Description: 开通resolver服务接口
        Summary: 开通resolver服务接口
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.open_did_resolver_service_ex(request, headers, runtime)

    async def open_did_resolver_service_async(
        self,
        request: blockchain_models.OpenDidResolverServiceRequest,
    ) -> blockchain_models.OpenDidResolverServiceResponse:
        """
        Description: 开通resolver服务接口
        Summary: 开通resolver服务接口
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.open_did_resolver_service_ex_async(request, headers, runtime)

    def open_did_resolver_service_ex(
        self,
        request: blockchain_models.OpenDidResolverServiceRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.OpenDidResolverServiceResponse:
        """
        Description: 开通resolver服务接口
        Summary: 开通resolver服务接口
        """
        UtilClient.validate_model(request)
        return blockchain_models.OpenDidResolverServiceResponse().from_map(
            self.do_request('1.0', 'baas.did.resolver.service.open', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def open_did_resolver_service_ex_async(
        self,
        request: blockchain_models.OpenDidResolverServiceRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.OpenDidResolverServiceResponse:
        """
        Description: 开通resolver服务接口
        Summary: 开通resolver服务接口
        """
        UtilClient.validate_model(request)
        return blockchain_models.OpenDidResolverServiceResponse().from_map(
            await self.do_request_async('1.0', 'baas.did.resolver.service.open', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def stop_did_resolver_service(
        self,
        request: blockchain_models.StopDidResolverServiceRequest,
    ) -> blockchain_models.StopDidResolverServiceResponse:
        """
        Description: 停止resolver服务接口
        Summary: 停止resolver服务接口
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.stop_did_resolver_service_ex(request, headers, runtime)

    async def stop_did_resolver_service_async(
        self,
        request: blockchain_models.StopDidResolverServiceRequest,
    ) -> blockchain_models.StopDidResolverServiceResponse:
        """
        Description: 停止resolver服务接口
        Summary: 停止resolver服务接口
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.stop_did_resolver_service_ex_async(request, headers, runtime)

    def stop_did_resolver_service_ex(
        self,
        request: blockchain_models.StopDidResolverServiceRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StopDidResolverServiceResponse:
        """
        Description: 停止resolver服务接口
        Summary: 停止resolver服务接口
        """
        UtilClient.validate_model(request)
        return blockchain_models.StopDidResolverServiceResponse().from_map(
            self.do_request('1.0', 'baas.did.resolver.service.stop', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def stop_did_resolver_service_ex_async(
        self,
        request: blockchain_models.StopDidResolverServiceRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StopDidResolverServiceResponse:
        """
        Description: 停止resolver服务接口
        Summary: 停止resolver服务接口
        """
        UtilClient.validate_model(request)
        return blockchain_models.StopDidResolverServiceResponse().from_map(
            await self.do_request_async('1.0', 'baas.did.resolver.service.stop', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def start_did_derivedid_execute(
        self,
        request: blockchain_models.StartDidDerivedidExecuteRequest,
    ) -> blockchain_models.StartDidDerivedidExecuteResponse:
        """
        Description: 使用根DID派生子DID并上链
        Summary: 派生子DID上链
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.start_did_derivedid_execute_ex(request, headers, runtime)

    async def start_did_derivedid_execute_async(
        self,
        request: blockchain_models.StartDidDerivedidExecuteRequest,
    ) -> blockchain_models.StartDidDerivedidExecuteResponse:
        """
        Description: 使用根DID派生子DID并上链
        Summary: 派生子DID上链
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.start_did_derivedid_execute_ex_async(request, headers, runtime)

    def start_did_derivedid_execute_ex(
        self,
        request: blockchain_models.StartDidDerivedidExecuteRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartDidDerivedidExecuteResponse:
        """
        Description: 使用根DID派生子DID并上链
        Summary: 派生子DID上链
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartDidDerivedidExecuteResponse().from_map(
            self.do_request('1.0', 'baas.did.derivedid.execute.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def start_did_derivedid_execute_ex_async(
        self,
        request: blockchain_models.StartDidDerivedidExecuteRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartDidDerivedidExecuteResponse:
        """
        Description: 使用根DID派生子DID并上链
        Summary: 派生子DID上链
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartDidDerivedidExecuteResponse().from_map(
            await self.do_request_async('1.0', 'baas.did.derivedid.execute.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def exec_did_accesscontrol_authorize(
        self,
        request: blockchain_models.ExecDidAccesscontrolAuthorizeRequest,
    ) -> blockchain_models.ExecDidAccesscontrolAuthorizeResponse:
        """
        Description: 基于DIS的访问控制授权
        Summary: 访问控制授权
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.exec_did_accesscontrol_authorize_ex(request, headers, runtime)

    async def exec_did_accesscontrol_authorize_async(
        self,
        request: blockchain_models.ExecDidAccesscontrolAuthorizeRequest,
    ) -> blockchain_models.ExecDidAccesscontrolAuthorizeResponse:
        """
        Description: 基于DIS的访问控制授权
        Summary: 访问控制授权
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.exec_did_accesscontrol_authorize_ex_async(request, headers, runtime)

    def exec_did_accesscontrol_authorize_ex(
        self,
        request: blockchain_models.ExecDidAccesscontrolAuthorizeRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.ExecDidAccesscontrolAuthorizeResponse:
        """
        Description: 基于DIS的访问控制授权
        Summary: 访问控制授权
        """
        UtilClient.validate_model(request)
        return blockchain_models.ExecDidAccesscontrolAuthorizeResponse().from_map(
            self.do_request('1.0', 'baas.did.accesscontrol.authorize.exec', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def exec_did_accesscontrol_authorize_ex_async(
        self,
        request: blockchain_models.ExecDidAccesscontrolAuthorizeRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.ExecDidAccesscontrolAuthorizeResponse:
        """
        Description: 基于DIS的访问控制授权
        Summary: 访问控制授权
        """
        UtilClient.validate_model(request)
        return blockchain_models.ExecDidAccesscontrolAuthorizeResponse().from_map(
            await self.do_request_async('1.0', 'baas.did.accesscontrol.authorize.exec', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def exec_did_accesscontrol_check(
        self,
        request: blockchain_models.ExecDidAccesscontrolCheckRequest,
    ) -> blockchain_models.ExecDidAccesscontrolCheckResponse:
        """
        Description: 对请求的权限进行鉴权，判断是否有该权限
        Summary: 访问控制鉴权
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.exec_did_accesscontrol_check_ex(request, headers, runtime)

    async def exec_did_accesscontrol_check_async(
        self,
        request: blockchain_models.ExecDidAccesscontrolCheckRequest,
    ) -> blockchain_models.ExecDidAccesscontrolCheckResponse:
        """
        Description: 对请求的权限进行鉴权，判断是否有该权限
        Summary: 访问控制鉴权
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.exec_did_accesscontrol_check_ex_async(request, headers, runtime)

    def exec_did_accesscontrol_check_ex(
        self,
        request: blockchain_models.ExecDidAccesscontrolCheckRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.ExecDidAccesscontrolCheckResponse:
        """
        Description: 对请求的权限进行鉴权，判断是否有该权限
        Summary: 访问控制鉴权
        """
        UtilClient.validate_model(request)
        return blockchain_models.ExecDidAccesscontrolCheckResponse().from_map(
            self.do_request('1.0', 'baas.did.accesscontrol.check.exec', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def exec_did_accesscontrol_check_ex_async(
        self,
        request: blockchain_models.ExecDidAccesscontrolCheckRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.ExecDidAccesscontrolCheckResponse:
        """
        Description: 对请求的权限进行鉴权，判断是否有该权限
        Summary: 访问控制鉴权
        """
        UtilClient.validate_model(request)
        return blockchain_models.ExecDidAccesscontrolCheckResponse().from_map(
            await self.do_request_async('1.0', 'baas.did.accesscontrol.check.exec', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def exec_did_accesscontrol_update(
        self,
        request: blockchain_models.ExecDidAccesscontrolUpdateRequest,
    ) -> blockchain_models.ExecDidAccesscontrolUpdateResponse:
        """
        Description: 访问控制中更新权限
        Summary: 对已授权的did更新权限
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.exec_did_accesscontrol_update_ex(request, headers, runtime)

    async def exec_did_accesscontrol_update_async(
        self,
        request: blockchain_models.ExecDidAccesscontrolUpdateRequest,
    ) -> blockchain_models.ExecDidAccesscontrolUpdateResponse:
        """
        Description: 访问控制中更新权限
        Summary: 对已授权的did更新权限
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.exec_did_accesscontrol_update_ex_async(request, headers, runtime)

    def exec_did_accesscontrol_update_ex(
        self,
        request: blockchain_models.ExecDidAccesscontrolUpdateRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.ExecDidAccesscontrolUpdateResponse:
        """
        Description: 访问控制中更新权限
        Summary: 对已授权的did更新权限
        """
        UtilClient.validate_model(request)
        return blockchain_models.ExecDidAccesscontrolUpdateResponse().from_map(
            self.do_request('1.0', 'baas.did.accesscontrol.update.exec', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def exec_did_accesscontrol_update_ex_async(
        self,
        request: blockchain_models.ExecDidAccesscontrolUpdateRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.ExecDidAccesscontrolUpdateResponse:
        """
        Description: 访问控制中更新权限
        Summary: 对已授权的did更新权限
        """
        UtilClient.validate_model(request)
        return blockchain_models.ExecDidAccesscontrolUpdateResponse().from_map(
            await self.do_request_async('1.0', 'baas.did.accesscontrol.update.exec', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def create_did_identity_iot(
        self,
        request: blockchain_models.CreateDidIdentityIotRequest,
    ) -> blockchain_models.CreateDidIdentityIotResponse:
        """
        Description: 非托管模式下为iot创建did
        Summary: 非托管模式下为iot创建did
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.create_did_identity_iot_ex(request, headers, runtime)

    async def create_did_identity_iot_async(
        self,
        request: blockchain_models.CreateDidIdentityIotRequest,
    ) -> blockchain_models.CreateDidIdentityIotResponse:
        """
        Description: 非托管模式下为iot创建did
        Summary: 非托管模式下为iot创建did
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.create_did_identity_iot_ex_async(request, headers, runtime)

    def create_did_identity_iot_ex(
        self,
        request: blockchain_models.CreateDidIdentityIotRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateDidIdentityIotResponse:
        """
        Description: 非托管模式下为iot创建did
        Summary: 非托管模式下为iot创建did
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateDidIdentityIotResponse().from_map(
            self.do_request('1.0', 'baas.did.identity.iot.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def create_did_identity_iot_ex_async(
        self,
        request: blockchain_models.CreateDidIdentityIotRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateDidIdentityIotResponse:
        """
        Description: 非托管模式下为iot创建did
        Summary: 非托管模式下为iot创建did
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateDidIdentityIotResponse().from_map(
            await self.do_request_async('1.0', 'baas.did.identity.iot.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def exec_did_servicetype_create(
        self,
        request: blockchain_models.ExecDidServicetypeCreateRequest,
    ) -> blockchain_models.ExecDidServicetypeCreateResponse:
        """
        Description: 非托管模式下的服务类型创建
        Summary: 非托管模式下的服务类型创建
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.exec_did_servicetype_create_ex(request, headers, runtime)

    async def exec_did_servicetype_create_async(
        self,
        request: blockchain_models.ExecDidServicetypeCreateRequest,
    ) -> blockchain_models.ExecDidServicetypeCreateResponse:
        """
        Description: 非托管模式下的服务类型创建
        Summary: 非托管模式下的服务类型创建
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.exec_did_servicetype_create_ex_async(request, headers, runtime)

    def exec_did_servicetype_create_ex(
        self,
        request: blockchain_models.ExecDidServicetypeCreateRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.ExecDidServicetypeCreateResponse:
        """
        Description: 非托管模式下的服务类型创建
        Summary: 非托管模式下的服务类型创建
        """
        UtilClient.validate_model(request)
        return blockchain_models.ExecDidServicetypeCreateResponse().from_map(
            self.do_request('1.0', 'baas.did.servicetype.create.exec', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def exec_did_servicetype_create_ex_async(
        self,
        request: blockchain_models.ExecDidServicetypeCreateRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.ExecDidServicetypeCreateResponse:
        """
        Description: 非托管模式下的服务类型创建
        Summary: 非托管模式下的服务类型创建
        """
        UtilClient.validate_model(request)
        return blockchain_models.ExecDidServicetypeCreateResponse().from_map(
            await self.do_request_async('1.0', 'baas.did.servicetype.create.exec', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def create_did_identity_common(
        self,
        request: blockchain_models.CreateDidIdentityCommonRequest,
    ) -> blockchain_models.CreateDidIdentityCommonResponse:
        """
        Description: 非托管模式下创建普通did账户
        Summary: 非托管模式下创建普通did账户
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.create_did_identity_common_ex(request, headers, runtime)

    async def create_did_identity_common_async(
        self,
        request: blockchain_models.CreateDidIdentityCommonRequest,
    ) -> blockchain_models.CreateDidIdentityCommonResponse:
        """
        Description: 非托管模式下创建普通did账户
        Summary: 非托管模式下创建普通did账户
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.create_did_identity_common_ex_async(request, headers, runtime)

    def create_did_identity_common_ex(
        self,
        request: blockchain_models.CreateDidIdentityCommonRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateDidIdentityCommonResponse:
        """
        Description: 非托管模式下创建普通did账户
        Summary: 非托管模式下创建普通did账户
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateDidIdentityCommonResponse().from_map(
            self.do_request('1.0', 'baas.did.identity.common.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def create_did_identity_common_ex_async(
        self,
        request: blockchain_models.CreateDidIdentityCommonRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateDidIdentityCommonResponse:
        """
        Description: 非托管模式下创建普通did账户
        Summary: 非托管模式下创建普通did账户
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateDidIdentityCommonResponse().from_map(
            await self.do_request_async('1.0', 'baas.did.identity.common.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def confirm_vc_vcrepo_vctransmit(
        self,
        request: blockchain_models.ConfirmVcVcrepoVctransmitRequest,
    ) -> blockchain_models.ConfirmVcVcrepoVctransmitResponse:
        """
        Description: VC传输确认请求
        Summary: VC传输确认请求
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.confirm_vc_vcrepo_vctransmit_ex(request, headers, runtime)

    async def confirm_vc_vcrepo_vctransmit_async(
        self,
        request: blockchain_models.ConfirmVcVcrepoVctransmitRequest,
    ) -> blockchain_models.ConfirmVcVcrepoVctransmitResponse:
        """
        Description: VC传输确认请求
        Summary: VC传输确认请求
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.confirm_vc_vcrepo_vctransmit_ex_async(request, headers, runtime)

    def confirm_vc_vcrepo_vctransmit_ex(
        self,
        request: blockchain_models.ConfirmVcVcrepoVctransmitRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.ConfirmVcVcrepoVctransmitResponse:
        """
        Description: VC传输确认请求
        Summary: VC传输确认请求
        """
        UtilClient.validate_model(request)
        return blockchain_models.ConfirmVcVcrepoVctransmitResponse().from_map(
            self.do_request('1.0', 'baas.vc.vcrepo.vctransmit.confirm', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def confirm_vc_vcrepo_vctransmit_ex_async(
        self,
        request: blockchain_models.ConfirmVcVcrepoVctransmitRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.ConfirmVcVcrepoVctransmitResponse:
        """
        Description: VC传输确认请求
        Summary: VC传输确认请求
        """
        UtilClient.validate_model(request)
        return blockchain_models.ConfirmVcVcrepoVctransmitResponse().from_map(
            await self.do_request_async('1.0', 'baas.vc.vcrepo.vctransmit.confirm', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def update_did_updatedid_pubkey(
        self,
        request: blockchain_models.UpdateDidUpdatedidPubkeyRequest,
    ) -> blockchain_models.UpdateDidUpdatedidPubkeyResponse:
        """
        Description: 在非托管模式，要先createDid，然后addDoc，两步都完成才实现DID创建。
        如果第一步成功，第二步失败，无法完全回滚，但是第一步createDid已经绑定了一个pubKey，如果调用方重试，并且用了新的pubKey（可能之前绑定的pubKey因为没有走完流程，没有保存，或者没有中间态，继续重试第二步），就无法重试成功。因此需要给这种极端情况一个更新pubKey的机会，但是需要通过recoveryKey鉴权请求变更。
        Summary: 非托管更新还未上链did的pub key
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.update_did_updatedid_pubkey_ex(request, headers, runtime)

    async def update_did_updatedid_pubkey_async(
        self,
        request: blockchain_models.UpdateDidUpdatedidPubkeyRequest,
    ) -> blockchain_models.UpdateDidUpdatedidPubkeyResponse:
        """
        Description: 在非托管模式，要先createDid，然后addDoc，两步都完成才实现DID创建。
        如果第一步成功，第二步失败，无法完全回滚，但是第一步createDid已经绑定了一个pubKey，如果调用方重试，并且用了新的pubKey（可能之前绑定的pubKey因为没有走完流程，没有保存，或者没有中间态，继续重试第二步），就无法重试成功。因此需要给这种极端情况一个更新pubKey的机会，但是需要通过recoveryKey鉴权请求变更。
        Summary: 非托管更新还未上链did的pub key
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.update_did_updatedid_pubkey_ex_async(request, headers, runtime)

    def update_did_updatedid_pubkey_ex(
        self,
        request: blockchain_models.UpdateDidUpdatedidPubkeyRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.UpdateDidUpdatedidPubkeyResponse:
        """
        Description: 在非托管模式，要先createDid，然后addDoc，两步都完成才实现DID创建。
        如果第一步成功，第二步失败，无法完全回滚，但是第一步createDid已经绑定了一个pubKey，如果调用方重试，并且用了新的pubKey（可能之前绑定的pubKey因为没有走完流程，没有保存，或者没有中间态，继续重试第二步），就无法重试成功。因此需要给这种极端情况一个更新pubKey的机会，但是需要通过recoveryKey鉴权请求变更。
        Summary: 非托管更新还未上链did的pub key
        """
        UtilClient.validate_model(request)
        return blockchain_models.UpdateDidUpdatedidPubkeyResponse().from_map(
            self.do_request('1.0', 'baas.did.updatedid.pubkey.update', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def update_did_updatedid_pubkey_ex_async(
        self,
        request: blockchain_models.UpdateDidUpdatedidPubkeyRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.UpdateDidUpdatedidPubkeyResponse:
        """
        Description: 在非托管模式，要先createDid，然后addDoc，两步都完成才实现DID创建。
        如果第一步成功，第二步失败，无法完全回滚，但是第一步createDid已经绑定了一个pubKey，如果调用方重试，并且用了新的pubKey（可能之前绑定的pubKey因为没有走完流程，没有保存，或者没有中间态，继续重试第二步），就无法重试成功。因此需要给这种极端情况一个更新pubKey的机会，但是需要通过recoveryKey鉴权请求变更。
        Summary: 非托管更新还未上链did的pub key
        """
        UtilClient.validate_model(request)
        return blockchain_models.UpdateDidUpdatedidPubkeyResponse().from_map(
            await self.do_request_async('1.0', 'baas.did.updatedid.pubkey.update', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def add_did_updatedid_servicelist(
        self,
        request: blockchain_models.AddDidUpdatedidServicelistRequest,
    ) -> blockchain_models.AddDidUpdatedidServicelistResponse:
        """
        Description: 一次增加多个service
        Summary: 一次增加多个service
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.add_did_updatedid_servicelist_ex(request, headers, runtime)

    async def add_did_updatedid_servicelist_async(
        self,
        request: blockchain_models.AddDidUpdatedidServicelistRequest,
    ) -> blockchain_models.AddDidUpdatedidServicelistResponse:
        """
        Description: 一次增加多个service
        Summary: 一次增加多个service
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.add_did_updatedid_servicelist_ex_async(request, headers, runtime)

    def add_did_updatedid_servicelist_ex(
        self,
        request: blockchain_models.AddDidUpdatedidServicelistRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.AddDidUpdatedidServicelistResponse:
        """
        Description: 一次增加多个service
        Summary: 一次增加多个service
        """
        UtilClient.validate_model(request)
        return blockchain_models.AddDidUpdatedidServicelistResponse().from_map(
            self.do_request('1.0', 'baas.did.updatedid.servicelist.add', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def add_did_updatedid_servicelist_ex_async(
        self,
        request: blockchain_models.AddDidUpdatedidServicelistRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.AddDidUpdatedidServicelistResponse:
        """
        Description: 一次增加多个service
        Summary: 一次增加多个service
        """
        UtilClient.validate_model(request)
        return blockchain_models.AddDidUpdatedidServicelistResponse().from_map(
            await self.do_request_async('1.0', 'baas.did.updatedid.servicelist.add', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def start_vc_vcrepository_write(
        self,
        request: blockchain_models.StartVcVcrepositoryWriteRequest,
    ) -> blockchain_models.StartVcVcrepositoryWriteResponse:
        """
        Description: 存储VC到存储中
        Summary: 写入VC存储
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.start_vc_vcrepository_write_ex(request, headers, runtime)

    async def start_vc_vcrepository_write_async(
        self,
        request: blockchain_models.StartVcVcrepositoryWriteRequest,
    ) -> blockchain_models.StartVcVcrepositoryWriteResponse:
        """
        Description: 存储VC到存储中
        Summary: 写入VC存储
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.start_vc_vcrepository_write_ex_async(request, headers, runtime)

    def start_vc_vcrepository_write_ex(
        self,
        request: blockchain_models.StartVcVcrepositoryWriteRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartVcVcrepositoryWriteResponse:
        """
        Description: 存储VC到存储中
        Summary: 写入VC存储
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartVcVcrepositoryWriteResponse().from_map(
            self.do_request('1.0', 'baas.vc.vcrepository.write.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def start_vc_vcrepository_write_ex_async(
        self,
        request: blockchain_models.StartVcVcrepositoryWriteRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartVcVcrepositoryWriteResponse:
        """
        Description: 存储VC到存储中
        Summary: 写入VC存储
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartVcVcrepositoryWriteResponse().from_map(
            await self.do_request_async('1.0', 'baas.vc.vcrepository.write.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def start_vc_vcrepository_read(
        self,
        request: blockchain_models.StartVcVcrepositoryReadRequest,
    ) -> blockchain_models.StartVcVcrepositoryReadResponse:
        """
        Description: 从VC存储中，读取目标的VC内容，前提是调用者的did已经被授予权限。
        如果VC中claim内容已被加密，返回值的verifiable_claim_content的claim字段是密文，需要使用当前调用者的did对应私钥解密auth_access_key获取AES密钥，然后通过AES密钥解密VC内容。
        Summary: 从VC存储读取已被授权VC内容
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.start_vc_vcrepository_read_ex(request, headers, runtime)

    async def start_vc_vcrepository_read_async(
        self,
        request: blockchain_models.StartVcVcrepositoryReadRequest,
    ) -> blockchain_models.StartVcVcrepositoryReadResponse:
        """
        Description: 从VC存储中，读取目标的VC内容，前提是调用者的did已经被授予权限。
        如果VC中claim内容已被加密，返回值的verifiable_claim_content的claim字段是密文，需要使用当前调用者的did对应私钥解密auth_access_key获取AES密钥，然后通过AES密钥解密VC内容。
        Summary: 从VC存储读取已被授权VC内容
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.start_vc_vcrepository_read_ex_async(request, headers, runtime)

    def start_vc_vcrepository_read_ex(
        self,
        request: blockchain_models.StartVcVcrepositoryReadRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartVcVcrepositoryReadResponse:
        """
        Description: 从VC存储中，读取目标的VC内容，前提是调用者的did已经被授予权限。
        如果VC中claim内容已被加密，返回值的verifiable_claim_content的claim字段是密文，需要使用当前调用者的did对应私钥解密auth_access_key获取AES密钥，然后通过AES密钥解密VC内容。
        Summary: 从VC存储读取已被授权VC内容
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartVcVcrepositoryReadResponse().from_map(
            self.do_request('1.0', 'baas.vc.vcrepository.read.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def start_vc_vcrepository_read_ex_async(
        self,
        request: blockchain_models.StartVcVcrepositoryReadRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartVcVcrepositoryReadResponse:
        """
        Description: 从VC存储中，读取目标的VC内容，前提是调用者的did已经被授予权限。
        如果VC中claim内容已被加密，返回值的verifiable_claim_content的claim字段是密文，需要使用当前调用者的did对应私钥解密auth_access_key获取AES密钥，然后通过AES密钥解密VC内容。
        Summary: 从VC存储读取已被授权VC内容
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartVcVcrepositoryReadResponse().from_map(
            await self.do_request_async('1.0', 'baas.vc.vcrepository.read.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def start_vc_vcrepository_auth(
        self,
        request: blockchain_models.StartVcVcrepositoryAuthRequest,
    ) -> blockchain_models.StartVcVcrepositoryAuthResponse:
        """
        Description: 对已存在的证书VC进行新增授权管理，批量添加did到授权列表中，授权这些did具有读取VC的权限。
        注意：VC的整体auth_did_list的长度将受限制，目前约定不超过30。
        Summary: 添加已有证书VC的授权列表
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.start_vc_vcrepository_auth_ex(request, headers, runtime)

    async def start_vc_vcrepository_auth_async(
        self,
        request: blockchain_models.StartVcVcrepositoryAuthRequest,
    ) -> blockchain_models.StartVcVcrepositoryAuthResponse:
        """
        Description: 对已存在的证书VC进行新增授权管理，批量添加did到授权列表中，授权这些did具有读取VC的权限。
        注意：VC的整体auth_did_list的长度将受限制，目前约定不超过30。
        Summary: 添加已有证书VC的授权列表
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.start_vc_vcrepository_auth_ex_async(request, headers, runtime)

    def start_vc_vcrepository_auth_ex(
        self,
        request: blockchain_models.StartVcVcrepositoryAuthRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartVcVcrepositoryAuthResponse:
        """
        Description: 对已存在的证书VC进行新增授权管理，批量添加did到授权列表中，授权这些did具有读取VC的权限。
        注意：VC的整体auth_did_list的长度将受限制，目前约定不超过30。
        Summary: 添加已有证书VC的授权列表
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartVcVcrepositoryAuthResponse().from_map(
            self.do_request('1.0', 'baas.vc.vcrepository.auth.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def start_vc_vcrepository_auth_ex_async(
        self,
        request: blockchain_models.StartVcVcrepositoryAuthRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartVcVcrepositoryAuthResponse:
        """
        Description: 对已存在的证书VC进行新增授权管理，批量添加did到授权列表中，授权这些did具有读取VC的权限。
        注意：VC的整体auth_did_list的长度将受限制，目前约定不超过30。
        Summary: 添加已有证书VC的授权列表
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartVcVcrepositoryAuthResponse().from_map(
            await self.do_request_async('1.0', 'baas.vc.vcrepository.auth.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def start_vc_vcrepo_user(
        self,
        request: blockchain_models.StartVcVcrepoUserRequest,
    ) -> blockchain_models.StartVcVcrepoUserResponse:
        """
        Description: vc repo上的用户注册
        Summary: vc repo 上的用户注册
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.start_vc_vcrepo_user_ex(request, headers, runtime)

    async def start_vc_vcrepo_user_async(
        self,
        request: blockchain_models.StartVcVcrepoUserRequest,
    ) -> blockchain_models.StartVcVcrepoUserResponse:
        """
        Description: vc repo上的用户注册
        Summary: vc repo 上的用户注册
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.start_vc_vcrepo_user_ex_async(request, headers, runtime)

    def start_vc_vcrepo_user_ex(
        self,
        request: blockchain_models.StartVcVcrepoUserRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartVcVcrepoUserResponse:
        """
        Description: vc repo上的用户注册
        Summary: vc repo 上的用户注册
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartVcVcrepoUserResponse().from_map(
            self.do_request('1.0', 'baas.vc.vcrepo.user.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def start_vc_vcrepo_user_ex_async(
        self,
        request: blockchain_models.StartVcVcrepoUserRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartVcVcrepoUserResponse:
        """
        Description: vc repo上的用户注册
        Summary: vc repo 上的用户注册
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartVcVcrepoUserResponse().from_map(
            await self.do_request_async('1.0', 'baas.vc.vcrepo.user.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def update_vc_vcrepo_user(
        self,
        request: blockchain_models.UpdateVcVcrepoUserRequest,
    ) -> blockchain_models.UpdateVcVcrepoUserResponse:
        """
        Description: VC Repo用户信息更新，可以更新公钥，可以更新vc channel
        Summary: VC Repo用户信息更新
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.update_vc_vcrepo_user_ex(request, headers, runtime)

    async def update_vc_vcrepo_user_async(
        self,
        request: blockchain_models.UpdateVcVcrepoUserRequest,
    ) -> blockchain_models.UpdateVcVcrepoUserResponse:
        """
        Description: VC Repo用户信息更新，可以更新公钥，可以更新vc channel
        Summary: VC Repo用户信息更新
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.update_vc_vcrepo_user_ex_async(request, headers, runtime)

    def update_vc_vcrepo_user_ex(
        self,
        request: blockchain_models.UpdateVcVcrepoUserRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.UpdateVcVcrepoUserResponse:
        """
        Description: VC Repo用户信息更新，可以更新公钥，可以更新vc channel
        Summary: VC Repo用户信息更新
        """
        UtilClient.validate_model(request)
        return blockchain_models.UpdateVcVcrepoUserResponse().from_map(
            self.do_request('1.0', 'baas.vc.vcrepo.user.update', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def update_vc_vcrepo_user_ex_async(
        self,
        request: blockchain_models.UpdateVcVcrepoUserRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.UpdateVcVcrepoUserResponse:
        """
        Description: VC Repo用户信息更新，可以更新公钥，可以更新vc channel
        Summary: VC Repo用户信息更新
        """
        UtilClient.validate_model(request)
        return blockchain_models.UpdateVcVcrepoUserResponse().from_map(
            await self.do_request_async('1.0', 'baas.vc.vcrepo.user.update', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def start_vc_vcrepo_vctransmit(
        self,
        request: blockchain_models.StartVcVcrepoVctransmitRequest,
    ) -> blockchain_models.StartVcVcrepoVctransmitResponse:
        """
        Description: 指定VC可信传输到指定Verifier
        Summary: 指定VC可信传输到指定Verifier
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.start_vc_vcrepo_vctransmit_ex(request, headers, runtime)

    async def start_vc_vcrepo_vctransmit_async(
        self,
        request: blockchain_models.StartVcVcrepoVctransmitRequest,
    ) -> blockchain_models.StartVcVcrepoVctransmitResponse:
        """
        Description: 指定VC可信传输到指定Verifier
        Summary: 指定VC可信传输到指定Verifier
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.start_vc_vcrepo_vctransmit_ex_async(request, headers, runtime)

    def start_vc_vcrepo_vctransmit_ex(
        self,
        request: blockchain_models.StartVcVcrepoVctransmitRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartVcVcrepoVctransmitResponse:
        """
        Description: 指定VC可信传输到指定Verifier
        Summary: 指定VC可信传输到指定Verifier
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartVcVcrepoVctransmitResponse().from_map(
            self.do_request('1.0', 'baas.vc.vcrepo.vctransmit.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def start_vc_vcrepo_vctransmit_ex_async(
        self,
        request: blockchain_models.StartVcVcrepoVctransmitRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartVcVcrepoVctransmitResponse:
        """
        Description: 指定VC可信传输到指定Verifier
        Summary: 指定VC可信传输到指定Verifier
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartVcVcrepoVctransmitResponse().from_map(
            await self.do_request_async('1.0', 'baas.vc.vcrepo.vctransmit.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def start_vc_vcrepo_controlleradduser(
        self,
        request: blockchain_models.StartVcVcrepoControlleradduserRequest,
    ) -> blockchain_models.StartVcVcrepoControlleradduserResponse:
        """
        Description: 通过controller进行用户注册
        Summary: 通过controller的用户注册
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.start_vc_vcrepo_controlleradduser_ex(request, headers, runtime)

    async def start_vc_vcrepo_controlleradduser_async(
        self,
        request: blockchain_models.StartVcVcrepoControlleradduserRequest,
    ) -> blockchain_models.StartVcVcrepoControlleradduserResponse:
        """
        Description: 通过controller进行用户注册
        Summary: 通过controller的用户注册
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.start_vc_vcrepo_controlleradduser_ex_async(request, headers, runtime)

    def start_vc_vcrepo_controlleradduser_ex(
        self,
        request: blockchain_models.StartVcVcrepoControlleradduserRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartVcVcrepoControlleradduserResponse:
        """
        Description: 通过controller进行用户注册
        Summary: 通过controller的用户注册
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartVcVcrepoControlleradduserResponse().from_map(
            self.do_request('1.0', 'baas.vc.vcrepo.controlleradduser.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def start_vc_vcrepo_controlleradduser_ex_async(
        self,
        request: blockchain_models.StartVcVcrepoControlleradduserRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartVcVcrepoControlleradduserResponse:
        """
        Description: 通过controller进行用户注册
        Summary: 通过controller的用户注册
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartVcVcrepoControlleradduserResponse().from_map(
            await self.do_request_async('1.0', 'baas.vc.vcrepo.controlleradduser.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def start_vc_vcrepo_vccontentsave(
        self,
        request: blockchain_models.StartVcVcrepoVccontentsaveRequest,
    ) -> blockchain_models.StartVcVcrepoVccontentsaveResponse:
        """
        Description: VC存储
        Summary: VC存储
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.start_vc_vcrepo_vccontentsave_ex(request, headers, runtime)

    async def start_vc_vcrepo_vccontentsave_async(
        self,
        request: blockchain_models.StartVcVcrepoVccontentsaveRequest,
    ) -> blockchain_models.StartVcVcrepoVccontentsaveResponse:
        """
        Description: VC存储
        Summary: VC存储
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.start_vc_vcrepo_vccontentsave_ex_async(request, headers, runtime)

    def start_vc_vcrepo_vccontentsave_ex(
        self,
        request: blockchain_models.StartVcVcrepoVccontentsaveRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartVcVcrepoVccontentsaveResponse:
        """
        Description: VC存储
        Summary: VC存储
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartVcVcrepoVccontentsaveResponse().from_map(
            self.do_request('1.0', 'baas.vc.vcrepo.vccontentsave.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def start_vc_vcrepo_vccontentsave_ex_async(
        self,
        request: blockchain_models.StartVcVcrepoVccontentsaveRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartVcVcrepoVccontentsaveResponse:
        """
        Description: VC存储
        Summary: VC存储
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartVcVcrepoVccontentsaveResponse().from_map(
            await self.do_request_async('1.0', 'baas.vc.vcrepo.vccontentsave.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def start_vc_repo_readwithvcid(
        self,
        request: blockchain_models.StartVcRepoReadwithvcidRequest,
    ) -> blockchain_models.StartVcRepoReadwithvcidResponse:
        """
        Description: 根据vcid获取vccontent
        Summary: 根据vcid获取vccontent
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.start_vc_repo_readwithvcid_ex(request, headers, runtime)

    async def start_vc_repo_readwithvcid_async(
        self,
        request: blockchain_models.StartVcRepoReadwithvcidRequest,
    ) -> blockchain_models.StartVcRepoReadwithvcidResponse:
        """
        Description: 根据vcid获取vccontent
        Summary: 根据vcid获取vccontent
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.start_vc_repo_readwithvcid_ex_async(request, headers, runtime)

    def start_vc_repo_readwithvcid_ex(
        self,
        request: blockchain_models.StartVcRepoReadwithvcidRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartVcRepoReadwithvcidResponse:
        """
        Description: 根据vcid获取vccontent
        Summary: 根据vcid获取vccontent
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartVcRepoReadwithvcidResponse().from_map(
            self.do_request('1.0', 'baas.vc.repo.readwithvcid.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def start_vc_repo_readwithvcid_ex_async(
        self,
        request: blockchain_models.StartVcRepoReadwithvcidRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartVcRepoReadwithvcidResponse:
        """
        Description: 根据vcid获取vccontent
        Summary: 根据vcid获取vccontent
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartVcRepoReadwithvcidResponse().from_map(
            await self.do_request_async('1.0', 'baas.vc.repo.readwithvcid.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def init_vc_vcrepo_vctransmit(
        self,
        request: blockchain_models.InitVcVcrepoVctransmitRequest,
    ) -> blockchain_models.InitVcVcrepoVctransmitResponse:
        """
        Description: vc仓库非托管模式下的VC传输初始化接口
        Summary: vc仓库非托管模式下的VC传输初始化接口
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.init_vc_vcrepo_vctransmit_ex(request, headers, runtime)

    async def init_vc_vcrepo_vctransmit_async(
        self,
        request: blockchain_models.InitVcVcrepoVctransmitRequest,
    ) -> blockchain_models.InitVcVcrepoVctransmitResponse:
        """
        Description: vc仓库非托管模式下的VC传输初始化接口
        Summary: vc仓库非托管模式下的VC传输初始化接口
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.init_vc_vcrepo_vctransmit_ex_async(request, headers, runtime)

    def init_vc_vcrepo_vctransmit_ex(
        self,
        request: blockchain_models.InitVcVcrepoVctransmitRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.InitVcVcrepoVctransmitResponse:
        """
        Description: vc仓库非托管模式下的VC传输初始化接口
        Summary: vc仓库非托管模式下的VC传输初始化接口
        """
        UtilClient.validate_model(request)
        return blockchain_models.InitVcVcrepoVctransmitResponse().from_map(
            self.do_request('1.0', 'baas.vc.vcrepo.vctransmit.init', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def init_vc_vcrepo_vctransmit_ex_async(
        self,
        request: blockchain_models.InitVcVcrepoVctransmitRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.InitVcVcrepoVctransmitResponse:
        """
        Description: vc仓库非托管模式下的VC传输初始化接口
        Summary: vc仓库非托管模式下的VC传输初始化接口
        """
        UtilClient.validate_model(request)
        return blockchain_models.InitVcVcrepoVctransmitResponse().from_map(
            await self.do_request_async('1.0', 'baas.vc.vcrepo.vctransmit.init', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def init_identification_faceauth(
        self,
        request: blockchain_models.InitIdentificationFaceauthRequest,
    ) -> blockchain_models.InitIdentificationFaceauthResponse:
        """
        Description: 人脸实人认证初始化接口
        Summary: 人脸实人认证初始化接口
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.init_identification_faceauth_ex(request, headers, runtime)

    async def init_identification_faceauth_async(
        self,
        request: blockchain_models.InitIdentificationFaceauthRequest,
    ) -> blockchain_models.InitIdentificationFaceauthResponse:
        """
        Description: 人脸实人认证初始化接口
        Summary: 人脸实人认证初始化接口
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.init_identification_faceauth_ex_async(request, headers, runtime)

    def init_identification_faceauth_ex(
        self,
        request: blockchain_models.InitIdentificationFaceauthRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.InitIdentificationFaceauthResponse:
        """
        Description: 人脸实人认证初始化接口
        Summary: 人脸实人认证初始化接口
        """
        UtilClient.validate_model(request)
        return blockchain_models.InitIdentificationFaceauthResponse().from_map(
            self.do_request('1.0', 'baas.identification.faceauth.init', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def init_identification_faceauth_ex_async(
        self,
        request: blockchain_models.InitIdentificationFaceauthRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.InitIdentificationFaceauthResponse:
        """
        Description: 人脸实人认证初始化接口
        Summary: 人脸实人认证初始化接口
        """
        UtilClient.validate_model(request)
        return blockchain_models.InitIdentificationFaceauthResponse().from_map(
            await self.do_request_async('1.0', 'baas.identification.faceauth.init', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_identification_faceauth(
        self,
        request: blockchain_models.QueryIdentificationFaceauthRequest,
    ) -> blockchain_models.QueryIdentificationFaceauthResponse:
        """
        Description: 获取人脸实人认证结果
        Summary: 获取人脸实人认证结果
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_identification_faceauth_ex(request, headers, runtime)

    async def query_identification_faceauth_async(
        self,
        request: blockchain_models.QueryIdentificationFaceauthRequest,
    ) -> blockchain_models.QueryIdentificationFaceauthResponse:
        """
        Description: 获取人脸实人认证结果
        Summary: 获取人脸实人认证结果
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_identification_faceauth_ex_async(request, headers, runtime)

    def query_identification_faceauth_ex(
        self,
        request: blockchain_models.QueryIdentificationFaceauthRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryIdentificationFaceauthResponse:
        """
        Description: 获取人脸实人认证结果
        Summary: 获取人脸实人认证结果
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryIdentificationFaceauthResponse().from_map(
            self.do_request('1.0', 'baas.identification.faceauth.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_identification_faceauth_ex_async(
        self,
        request: blockchain_models.QueryIdentificationFaceauthRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryIdentificationFaceauthResponse:
        """
        Description: 获取人脸实人认证结果
        Summary: 获取人脸实人认证结果
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryIdentificationFaceauthResponse().from_map(
            await self.do_request_async('1.0', 'baas.identification.faceauth.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def init_notary_transaction(
        self,
        request: blockchain_models.InitNotaryTransactionRequest,
    ) -> blockchain_models.InitNotaryTransactionResponse:
        """
        Description: 初始化存证事务: 进⾏行行资格核验，包括调⽤用⽅方账号权限，是否实⼈人等。成功后获得存证事务 ID(Token)
        Summary: 存证交易初始化
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.init_notary_transaction_ex(request, headers, runtime)

    async def init_notary_transaction_async(
        self,
        request: blockchain_models.InitNotaryTransactionRequest,
    ) -> blockchain_models.InitNotaryTransactionResponse:
        """
        Description: 初始化存证事务: 进⾏行行资格核验，包括调⽤用⽅方账号权限，是否实⼈人等。成功后获得存证事务 ID(Token)
        Summary: 存证交易初始化
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.init_notary_transaction_ex_async(request, headers, runtime)

    def init_notary_transaction_ex(
        self,
        request: blockchain_models.InitNotaryTransactionRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.InitNotaryTransactionResponse:
        """
        Description: 初始化存证事务: 进⾏行行资格核验，包括调⽤用⽅方账号权限，是否实⼈人等。成功后获得存证事务 ID(Token)
        Summary: 存证交易初始化
        """
        UtilClient.validate_model(request)
        return blockchain_models.InitNotaryTransactionResponse().from_map(
            self.do_request('1.0', 'baas.notary.transaction.init', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def init_notary_transaction_ex_async(
        self,
        request: blockchain_models.InitNotaryTransactionRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.InitNotaryTransactionResponse:
        """
        Description: 初始化存证事务: 进⾏行行资格核验，包括调⽤用⽅方账号权限，是否实⼈人等。成功后获得存证事务 ID(Token)
        Summary: 存证交易初始化
        """
        UtilClient.validate_model(request)
        return blockchain_models.InitNotaryTransactionResponse().from_map(
            await self.do_request_async('1.0', 'baas.notary.transaction.init', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def get_notary_transaction(
        self,
        request: blockchain_models.GetNotaryTransactionRequest,
    ) -> blockchain_models.GetNotaryTransactionResponse:
        """
        Description: ⽤用户通过存证事务Token，获取事务中所有的存证信息
        Summary: 获取事务中所有的存证信息
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.get_notary_transaction_ex(request, headers, runtime)

    async def get_notary_transaction_async(
        self,
        request: blockchain_models.GetNotaryTransactionRequest,
    ) -> blockchain_models.GetNotaryTransactionResponse:
        """
        Description: ⽤用户通过存证事务Token，获取事务中所有的存证信息
        Summary: 获取事务中所有的存证信息
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.get_notary_transaction_ex_async(request, headers, runtime)

    def get_notary_transaction_ex(
        self,
        request: blockchain_models.GetNotaryTransactionRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.GetNotaryTransactionResponse:
        """
        Description: ⽤用户通过存证事务Token，获取事务中所有的存证信息
        Summary: 获取事务中所有的存证信息
        """
        UtilClient.validate_model(request)
        return blockchain_models.GetNotaryTransactionResponse().from_map(
            self.do_request('1.0', 'baas.notary.transaction.get', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def get_notary_transaction_ex_async(
        self,
        request: blockchain_models.GetNotaryTransactionRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.GetNotaryTransactionResponse:
        """
        Description: ⽤用户通过存证事务Token，获取事务中所有的存证信息
        Summary: 获取事务中所有的存证信息
        """
        UtilClient.validate_model(request)
        return blockchain_models.GetNotaryTransactionResponse().from_map(
            await self.do_request_async('1.0', 'baas.notary.transaction.get', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def send_notary_transaction_text(
        self,
        request: blockchain_models.SendNotaryTransactionTextRequest,
    ) -> blockchain_models.SendNotaryTransactionTextResponse:
        """
        Description: 发起⼀个文本存证，将文本内容存证上链。
        Summary: 发送文本存证
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.send_notary_transaction_text_ex(request, headers, runtime)

    async def send_notary_transaction_text_async(
        self,
        request: blockchain_models.SendNotaryTransactionTextRequest,
    ) -> blockchain_models.SendNotaryTransactionTextResponse:
        """
        Description: 发起⼀个文本存证，将文本内容存证上链。
        Summary: 发送文本存证
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.send_notary_transaction_text_ex_async(request, headers, runtime)

    def send_notary_transaction_text_ex(
        self,
        request: blockchain_models.SendNotaryTransactionTextRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.SendNotaryTransactionTextResponse:
        """
        Description: 发起⼀个文本存证，将文本内容存证上链。
        Summary: 发送文本存证
        """
        UtilClient.validate_model(request)
        return blockchain_models.SendNotaryTransactionTextResponse().from_map(
            self.do_request('1.0', 'baas.notary.transaction.text.send', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def send_notary_transaction_text_ex_async(
        self,
        request: blockchain_models.SendNotaryTransactionTextRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.SendNotaryTransactionTextResponse:
        """
        Description: 发起⼀个文本存证，将文本内容存证上链。
        Summary: 发送文本存证
        """
        UtilClient.validate_model(request)
        return blockchain_models.SendNotaryTransactionTextResponse().from_map(
            await self.do_request_async('1.0', 'baas.notary.transaction.text.send', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def get_notary_transaction_text(
        self,
        request: blockchain_models.GetNotaryTransactionTextRequest,
    ) -> blockchain_models.GetNotaryTransactionTextResponse:
        """
        Description: ⽤户通过交易易哈希获取自己上传的文本存证内容
        Summary: 获取文本存证
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.get_notary_transaction_text_ex(request, headers, runtime)

    async def get_notary_transaction_text_async(
        self,
        request: blockchain_models.GetNotaryTransactionTextRequest,
    ) -> blockchain_models.GetNotaryTransactionTextResponse:
        """
        Description: ⽤户通过交易易哈希获取自己上传的文本存证内容
        Summary: 获取文本存证
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.get_notary_transaction_text_ex_async(request, headers, runtime)

    def get_notary_transaction_text_ex(
        self,
        request: blockchain_models.GetNotaryTransactionTextRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.GetNotaryTransactionTextResponse:
        """
        Description: ⽤户通过交易易哈希获取自己上传的文本存证内容
        Summary: 获取文本存证
        """
        UtilClient.validate_model(request)
        return blockchain_models.GetNotaryTransactionTextResponse().from_map(
            self.do_request('1.0', 'baas.notary.transaction.text.get', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def get_notary_transaction_text_ex_async(
        self,
        request: blockchain_models.GetNotaryTransactionTextRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.GetNotaryTransactionTextResponse:
        """
        Description: ⽤户通过交易易哈希获取自己上传的文本存证内容
        Summary: 获取文本存证
        """
        UtilClient.validate_model(request)
        return blockchain_models.GetNotaryTransactionTextResponse().from_map(
            await self.do_request_async('1.0', 'baas.notary.transaction.text.get', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def create_notary_token(
        self,
        request: blockchain_models.CreateNotaryTokenRequest,
    ) -> blockchain_models.CreateNotaryTokenResponse:
        """
        Description: 获取存证事务ID
        Summary: 获取存证事务ID
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.create_notary_token_ex(request, headers, runtime)

    async def create_notary_token_async(
        self,
        request: blockchain_models.CreateNotaryTokenRequest,
    ) -> blockchain_models.CreateNotaryTokenResponse:
        """
        Description: 获取存证事务ID
        Summary: 获取存证事务ID
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.create_notary_token_ex_async(request, headers, runtime)

    def create_notary_token_ex(
        self,
        request: blockchain_models.CreateNotaryTokenRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateNotaryTokenResponse:
        """
        Description: 获取存证事务ID
        Summary: 获取存证事务ID
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateNotaryTokenResponse().from_map(
            self.do_request('1.0', 'baas.notary.token.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def create_notary_token_ex_async(
        self,
        request: blockchain_models.CreateNotaryTokenRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateNotaryTokenResponse:
        """
        Description: 获取存证事务ID
        Summary: 获取存证事务ID
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateNotaryTokenResponse().from_map(
            await self.do_request_async('1.0', 'baas.notary.token.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def get_notary_trans(
        self,
        request: blockchain_models.GetNotaryTransRequest,
    ) -> blockchain_models.GetNotaryTransResponse:
        """
        Description: 通过存证事务Token，获取事务中所有的存证信息
        Summary: 获取事务中所有的存证信息
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.get_notary_trans_ex(request, headers, runtime)

    async def get_notary_trans_async(
        self,
        request: blockchain_models.GetNotaryTransRequest,
    ) -> blockchain_models.GetNotaryTransResponse:
        """
        Description: 通过存证事务Token，获取事务中所有的存证信息
        Summary: 获取事务中所有的存证信息
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.get_notary_trans_ex_async(request, headers, runtime)

    def get_notary_trans_ex(
        self,
        request: blockchain_models.GetNotaryTransRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.GetNotaryTransResponse:
        """
        Description: 通过存证事务Token，获取事务中所有的存证信息
        Summary: 获取事务中所有的存证信息
        """
        UtilClient.validate_model(request)
        return blockchain_models.GetNotaryTransResponse().from_map(
            self.do_request('1.0', 'baas.notary.trans.get', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def get_notary_trans_ex_async(
        self,
        request: blockchain_models.GetNotaryTransRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.GetNotaryTransResponse:
        """
        Description: 通过存证事务Token，获取事务中所有的存证信息
        Summary: 获取事务中所有的存证信息
        """
        UtilClient.validate_model(request)
        return blockchain_models.GetNotaryTransResponse().from_map(
            await self.do_request_async('1.0', 'baas.notary.trans.get', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def create_notary_text(
        self,
        request: blockchain_models.CreateNotaryTextRequest,
    ) -> blockchain_models.CreateNotaryTextResponse:
        """
        Description: 发起文本存证，将文本内容存证上链
        Summary: 文本存证，将文本内容存证上链
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.create_notary_text_ex(request, headers, runtime)

    async def create_notary_text_async(
        self,
        request: blockchain_models.CreateNotaryTextRequest,
    ) -> blockchain_models.CreateNotaryTextResponse:
        """
        Description: 发起文本存证，将文本内容存证上链
        Summary: 文本存证，将文本内容存证上链
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.create_notary_text_ex_async(request, headers, runtime)

    def create_notary_text_ex(
        self,
        request: blockchain_models.CreateNotaryTextRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateNotaryTextResponse:
        """
        Description: 发起文本存证，将文本内容存证上链
        Summary: 文本存证，将文本内容存证上链
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateNotaryTextResponse().from_map(
            self.do_request('1.0', 'baas.notary.text.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def create_notary_text_ex_async(
        self,
        request: blockchain_models.CreateNotaryTextRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateNotaryTextResponse:
        """
        Description: 发起文本存证，将文本内容存证上链
        Summary: 文本存证，将文本内容存证上链
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateNotaryTextResponse().from_map(
            await self.do_request_async('1.0', 'baas.notary.text.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def get_notary_text(
        self,
        request: blockchain_models.GetNotaryTextRequest,
    ) -> blockchain_models.GetNotaryTextResponse:
        """
        Description: 用户通过交易哈希获取自己上传的文本存证内容
        Summary: 获取文本存证内容
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.get_notary_text_ex(request, headers, runtime)

    async def get_notary_text_async(
        self,
        request: blockchain_models.GetNotaryTextRequest,
    ) -> blockchain_models.GetNotaryTextResponse:
        """
        Description: 用户通过交易哈希获取自己上传的文本存证内容
        Summary: 获取文本存证内容
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.get_notary_text_ex_async(request, headers, runtime)

    def get_notary_text_ex(
        self,
        request: blockchain_models.GetNotaryTextRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.GetNotaryTextResponse:
        """
        Description: 用户通过交易哈希获取自己上传的文本存证内容
        Summary: 获取文本存证内容
        """
        UtilClient.validate_model(request)
        return blockchain_models.GetNotaryTextResponse().from_map(
            self.do_request('1.0', 'baas.notary.text.get', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def get_notary_text_ex_async(
        self,
        request: blockchain_models.GetNotaryTextRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.GetNotaryTextResponse:
        """
        Description: 用户通过交易哈希获取自己上传的文本存证内容
        Summary: 获取文本存证内容
        """
        UtilClient.validate_model(request)
        return blockchain_models.GetNotaryTextResponse().from_map(
            await self.do_request_async('1.0', 'baas.notary.text.get', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def create_notary_file(
        self,
        request: blockchain_models.CreateNotaryFileRequest,
    ) -> blockchain_models.CreateNotaryFileResponse:
        """
        Description: 发起文件存证，将文件内容存证上链
        Summary: 文件内容存证上链
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.create_notary_file_ex(request, headers, runtime)

    async def create_notary_file_async(
        self,
        request: blockchain_models.CreateNotaryFileRequest,
    ) -> blockchain_models.CreateNotaryFileResponse:
        """
        Description: 发起文件存证，将文件内容存证上链
        Summary: 文件内容存证上链
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.create_notary_file_ex_async(request, headers, runtime)

    def create_notary_file_ex(
        self,
        request: blockchain_models.CreateNotaryFileRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateNotaryFileResponse:
        """
        Description: 发起文件存证，将文件内容存证上链
        Summary: 文件内容存证上链
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateNotaryFileResponse().from_map(
            self.do_request('1.0', 'baas.notary.file.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def create_notary_file_ex_async(
        self,
        request: blockchain_models.CreateNotaryFileRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateNotaryFileResponse:
        """
        Description: 发起文件存证，将文件内容存证上链
        Summary: 文件内容存证上链
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateNotaryFileResponse().from_map(
            await self.do_request_async('1.0', 'baas.notary.file.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def get_notary_file(
        self,
        request: blockchain_models.GetNotaryFileRequest,
    ) -> blockchain_models.GetNotaryFileResponse:
        """
        Description: 用户通过交易哈希获取自己上传的文件存证oss下载地址
        Summary: 获取文件存证oss下载地址
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.get_notary_file_ex(request, headers, runtime)

    async def get_notary_file_async(
        self,
        request: blockchain_models.GetNotaryFileRequest,
    ) -> blockchain_models.GetNotaryFileResponse:
        """
        Description: 用户通过交易哈希获取自己上传的文件存证oss下载地址
        Summary: 获取文件存证oss下载地址
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.get_notary_file_ex_async(request, headers, runtime)

    def get_notary_file_ex(
        self,
        request: blockchain_models.GetNotaryFileRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.GetNotaryFileResponse:
        """
        Description: 用户通过交易哈希获取自己上传的文件存证oss下载地址
        Summary: 获取文件存证oss下载地址
        """
        UtilClient.validate_model(request)
        return blockchain_models.GetNotaryFileResponse().from_map(
            self.do_request('1.0', 'baas.notary.file.get', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def get_notary_file_ex_async(
        self,
        request: blockchain_models.GetNotaryFileRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.GetNotaryFileResponse:
        """
        Description: 用户通过交易哈希获取自己上传的文件存证oss下载地址
        Summary: 获取文件存证oss下载地址
        """
        UtilClient.validate_model(request)
        return blockchain_models.GetNotaryFileResponse().from_map(
            await self.do_request_async('1.0', 'baas.notary.file.get', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def create_notary_source(
        self,
        request: blockchain_models.CreateNotarySourceRequest,
    ) -> blockchain_models.CreateNotarySourceResponse:
        """
        Description: 发起原文存证，将原文内容存证上链
        Summary: 原文内容存证
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.create_notary_source_ex(request, headers, runtime)

    async def create_notary_source_async(
        self,
        request: blockchain_models.CreateNotarySourceRequest,
    ) -> blockchain_models.CreateNotarySourceResponse:
        """
        Description: 发起原文存证，将原文内容存证上链
        Summary: 原文内容存证
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.create_notary_source_ex_async(request, headers, runtime)

    def create_notary_source_ex(
        self,
        request: blockchain_models.CreateNotarySourceRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateNotarySourceResponse:
        """
        Description: 发起原文存证，将原文内容存证上链
        Summary: 原文内容存证
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateNotarySourceResponse().from_map(
            self.do_request('1.0', 'baas.notary.source.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def create_notary_source_ex_async(
        self,
        request: blockchain_models.CreateNotarySourceRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateNotarySourceResponse:
        """
        Description: 发起原文存证，将原文内容存证上链
        Summary: 原文内容存证
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateNotarySourceResponse().from_map(
            await self.do_request_async('1.0', 'baas.notary.source.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def get_notary_source(
        self,
        request: blockchain_models.GetNotarySourceRequest,
    ) -> blockchain_models.GetNotarySourceResponse:
        """
        Description: 用户通过交易哈希获取自己上传的原文存证oss下载地址
        Summary: 获取原文存证oss下载地址
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.get_notary_source_ex(request, headers, runtime)

    async def get_notary_source_async(
        self,
        request: blockchain_models.GetNotarySourceRequest,
    ) -> blockchain_models.GetNotarySourceResponse:
        """
        Description: 用户通过交易哈希获取自己上传的原文存证oss下载地址
        Summary: 获取原文存证oss下载地址
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.get_notary_source_ex_async(request, headers, runtime)

    def get_notary_source_ex(
        self,
        request: blockchain_models.GetNotarySourceRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.GetNotarySourceResponse:
        """
        Description: 用户通过交易哈希获取自己上传的原文存证oss下载地址
        Summary: 获取原文存证oss下载地址
        """
        UtilClient.validate_model(request)
        return blockchain_models.GetNotarySourceResponse().from_map(
            self.do_request('1.0', 'baas.notary.source.get', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def get_notary_source_ex_async(
        self,
        request: blockchain_models.GetNotarySourceRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.GetNotarySourceResponse:
        """
        Description: 用户通过交易哈希获取自己上传的原文存证oss下载地址
        Summary: 获取原文存证oss下载地址
        """
        UtilClient.validate_model(request)
        return blockchain_models.GetNotarySourceResponse().from_map(
            await self.do_request_async('1.0', 'baas.notary.source.get', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_notary_test(
        self,
        request: blockchain_models.QueryNotaryTestRequest,
    ) -> blockchain_models.QueryNotaryTestResponse:
        """
        Description: test
        Summary: test
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_notary_test_ex(request, headers, runtime)

    async def query_notary_test_async(
        self,
        request: blockchain_models.QueryNotaryTestRequest,
    ) -> blockchain_models.QueryNotaryTestResponse:
        """
        Description: test
        Summary: test
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_notary_test_ex_async(request, headers, runtime)

    def query_notary_test_ex(
        self,
        request: blockchain_models.QueryNotaryTestRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryNotaryTestResponse:
        """
        Description: test
        Summary: test
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryNotaryTestResponse().from_map(
            self.do_request('1.0', 'baas.notary.test.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_notary_test_ex_async(
        self,
        request: blockchain_models.QueryNotaryTestRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryNotaryTestResponse:
        """
        Description: test
        Summary: test
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryNotaryTestResponse().from_map(
            await self.do_request_async('1.0', 'baas.notary.test.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def init_notary_openapi_merchant(
        self,
        request: blockchain_models.InitNotaryOpenapiMerchantRequest,
    ) -> blockchain_models.InitNotaryOpenapiMerchantResponse:
        """
        Description: 接口定义 https://yuque.antfin-inc.com/antchain/lqq4qz/pnvo46#52f667ab
        Summary: 企业法人认证初始化接口
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.init_notary_openapi_merchant_ex(request, headers, runtime)

    async def init_notary_openapi_merchant_async(
        self,
        request: blockchain_models.InitNotaryOpenapiMerchantRequest,
    ) -> blockchain_models.InitNotaryOpenapiMerchantResponse:
        """
        Description: 接口定义 https://yuque.antfin-inc.com/antchain/lqq4qz/pnvo46#52f667ab
        Summary: 企业法人认证初始化接口
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.init_notary_openapi_merchant_ex_async(request, headers, runtime)

    def init_notary_openapi_merchant_ex(
        self,
        request: blockchain_models.InitNotaryOpenapiMerchantRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.InitNotaryOpenapiMerchantResponse:
        """
        Description: 接口定义 https://yuque.antfin-inc.com/antchain/lqq4qz/pnvo46#52f667ab
        Summary: 企业法人认证初始化接口
        """
        UtilClient.validate_model(request)
        return blockchain_models.InitNotaryOpenapiMerchantResponse().from_map(
            self.do_request('1.0', 'baas.notary.openapi.merchant.init', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def init_notary_openapi_merchant_ex_async(
        self,
        request: blockchain_models.InitNotaryOpenapiMerchantRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.InitNotaryOpenapiMerchantResponse:
        """
        Description: 接口定义 https://yuque.antfin-inc.com/antchain/lqq4qz/pnvo46#52f667ab
        Summary: 企业法人认证初始化接口
        """
        UtilClient.validate_model(request)
        return blockchain_models.InitNotaryOpenapiMerchantResponse().from_map(
            await self.do_request_async('1.0', 'baas.notary.openapi.merchant.init', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_notary_openapi_merchant(
        self,
        request: blockchain_models.QueryNotaryOpenapiMerchantRequest,
    ) -> blockchain_models.QueryNotaryOpenapiMerchantResponse:
        """
        Description: 企业法人认证查询认证状态
        Summary: 企业法人认证查询认证状态
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_notary_openapi_merchant_ex(request, headers, runtime)

    async def query_notary_openapi_merchant_async(
        self,
        request: blockchain_models.QueryNotaryOpenapiMerchantRequest,
    ) -> blockchain_models.QueryNotaryOpenapiMerchantResponse:
        """
        Description: 企业法人认证查询认证状态
        Summary: 企业法人认证查询认证状态
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_notary_openapi_merchant_ex_async(request, headers, runtime)

    def query_notary_openapi_merchant_ex(
        self,
        request: blockchain_models.QueryNotaryOpenapiMerchantRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryNotaryOpenapiMerchantResponse:
        """
        Description: 企业法人认证查询认证状态
        Summary: 企业法人认证查询认证状态
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryNotaryOpenapiMerchantResponse().from_map(
            self.do_request('1.0', 'baas.notary.openapi.merchant.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_notary_openapi_merchant_ex_async(
        self,
        request: blockchain_models.QueryNotaryOpenapiMerchantRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryNotaryOpenapiMerchantResponse:
        """
        Description: 企业法人认证查询认证状态
        Summary: 企业法人认证查询认证状态
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryNotaryOpenapiMerchantResponse().from_map(
            await self.do_request_async('1.0', 'baas.notary.openapi.merchant.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def deploy_notary_lease_contract(
        self,
        request: blockchain_models.DeployNotaryLeaseContractRequest,
    ) -> blockchain_models.DeployNotaryLeaseContractResponse:
        """
        Description: 为租赁服务平台部署合约
        Summary: 为租赁服务平台部署合约
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.deploy_notary_lease_contract_ex(request, headers, runtime)

    async def deploy_notary_lease_contract_async(
        self,
        request: blockchain_models.DeployNotaryLeaseContractRequest,
    ) -> blockchain_models.DeployNotaryLeaseContractResponse:
        """
        Description: 为租赁服务平台部署合约
        Summary: 为租赁服务平台部署合约
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.deploy_notary_lease_contract_ex_async(request, headers, runtime)

    def deploy_notary_lease_contract_ex(
        self,
        request: blockchain_models.DeployNotaryLeaseContractRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.DeployNotaryLeaseContractResponse:
        """
        Description: 为租赁服务平台部署合约
        Summary: 为租赁服务平台部署合约
        """
        UtilClient.validate_model(request)
        return blockchain_models.DeployNotaryLeaseContractResponse().from_map(
            self.do_request('1.0', 'baas.notary.lease.contract.deploy', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def deploy_notary_lease_contract_ex_async(
        self,
        request: blockchain_models.DeployNotaryLeaseContractRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.DeployNotaryLeaseContractResponse:
        """
        Description: 为租赁服务平台部署合约
        Summary: 为租赁服务平台部署合约
        """
        UtilClient.validate_model(request)
        return blockchain_models.DeployNotaryLeaseContractResponse().from_map(
            await self.do_request_async('1.0', 'baas.notary.lease.contract.deploy', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def create_openchain_websit_service(
        self,
        request: blockchain_models.CreateOpenchainWebsitServiceRequest,
    ) -> blockchain_models.CreateOpenchainWebsitServiceResponse:
        """
        Description: 建站服务信息注册
        Summary: 服务注册
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.create_openchain_websit_service_ex(request, headers, runtime)

    async def create_openchain_websit_service_async(
        self,
        request: blockchain_models.CreateOpenchainWebsitServiceRequest,
    ) -> blockchain_models.CreateOpenchainWebsitServiceResponse:
        """
        Description: 建站服务信息注册
        Summary: 服务注册
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.create_openchain_websit_service_ex_async(request, headers, runtime)

    def create_openchain_websit_service_ex(
        self,
        request: blockchain_models.CreateOpenchainWebsitServiceRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateOpenchainWebsitServiceResponse:
        """
        Description: 建站服务信息注册
        Summary: 服务注册
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateOpenchainWebsitServiceResponse().from_map(
            self.do_request('1.0', 'baas.openchain.websit.service.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def create_openchain_websit_service_ex_async(
        self,
        request: blockchain_models.CreateOpenchainWebsitServiceRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateOpenchainWebsitServiceResponse:
        """
        Description: 建站服务信息注册
        Summary: 服务注册
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateOpenchainWebsitServiceResponse().from_map(
            await self.do_request_async('1.0', 'baas.openchain.websit.service.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def check_openchain_corporate_face(
        self,
        request: blockchain_models.CheckOpenchainCorporateFaceRequest,
    ) -> blockchain_models.CheckOpenchainCorporateFaceResponse:
        """
        Description: 可信建站法人四要素认证
        Summary: 可信建站法人四要素认证
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.check_openchain_corporate_face_ex(request, headers, runtime)

    async def check_openchain_corporate_face_async(
        self,
        request: blockchain_models.CheckOpenchainCorporateFaceRequest,
    ) -> blockchain_models.CheckOpenchainCorporateFaceResponse:
        """
        Description: 可信建站法人四要素认证
        Summary: 可信建站法人四要素认证
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.check_openchain_corporate_face_ex_async(request, headers, runtime)

    def check_openchain_corporate_face_ex(
        self,
        request: blockchain_models.CheckOpenchainCorporateFaceRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CheckOpenchainCorporateFaceResponse:
        """
        Description: 可信建站法人四要素认证
        Summary: 可信建站法人四要素认证
        """
        UtilClient.validate_model(request)
        return blockchain_models.CheckOpenchainCorporateFaceResponse().from_map(
            self.do_request('1.0', 'baas.openchain.corporate.face.check', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def check_openchain_corporate_face_ex_async(
        self,
        request: blockchain_models.CheckOpenchainCorporateFaceRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CheckOpenchainCorporateFaceResponse:
        """
        Description: 可信建站法人四要素认证
        Summary: 可信建站法人四要素认证
        """
        UtilClient.validate_model(request)
        return blockchain_models.CheckOpenchainCorporateFaceResponse().from_map(
            await self.do_request_async('1.0', 'baas.openchain.corporate.face.check', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_openchain_corporate_face(
        self,
        request: blockchain_models.QueryOpenchainCorporateFaceRequest,
    ) -> blockchain_models.QueryOpenchainCorporateFaceResponse:
        """
        Description: 法人认证4要素结果查询
        Summary: 法人认证4要素结果查询
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_openchain_corporate_face_ex(request, headers, runtime)

    async def query_openchain_corporate_face_async(
        self,
        request: blockchain_models.QueryOpenchainCorporateFaceRequest,
    ) -> blockchain_models.QueryOpenchainCorporateFaceResponse:
        """
        Description: 法人认证4要素结果查询
        Summary: 法人认证4要素结果查询
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_openchain_corporate_face_ex_async(request, headers, runtime)

    def query_openchain_corporate_face_ex(
        self,
        request: blockchain_models.QueryOpenchainCorporateFaceRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryOpenchainCorporateFaceResponse:
        """
        Description: 法人认证4要素结果查询
        Summary: 法人认证4要素结果查询
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryOpenchainCorporateFaceResponse().from_map(
            self.do_request('1.0', 'baas.openchain.corporate.face.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_openchain_corporate_face_ex_async(
        self,
        request: blockchain_models.QueryOpenchainCorporateFaceRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryOpenchainCorporateFaceResponse:
        """
        Description: 法人认证4要素结果查询
        Summary: 法人认证4要素结果查询
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryOpenchainCorporateFaceResponse().from_map(
            await self.do_request_async('1.0', 'baas.openchain.corporate.face.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_openchain_user_data(
        self,
        request: blockchain_models.QueryOpenchainUserDataRequest,
    ) -> blockchain_models.QueryOpenchainUserDataResponse:
        """
        Description: 授权用户数据查询
        Summary: 授权用户数据查询
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_openchain_user_data_ex(request, headers, runtime)

    async def query_openchain_user_data_async(
        self,
        request: blockchain_models.QueryOpenchainUserDataRequest,
    ) -> blockchain_models.QueryOpenchainUserDataResponse:
        """
        Description: 授权用户数据查询
        Summary: 授权用户数据查询
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_openchain_user_data_ex_async(request, headers, runtime)

    def query_openchain_user_data_ex(
        self,
        request: blockchain_models.QueryOpenchainUserDataRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryOpenchainUserDataResponse:
        """
        Description: 授权用户数据查询
        Summary: 授权用户数据查询
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryOpenchainUserDataResponse().from_map(
            self.do_request('1.0', 'baas.openchain.user.data.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_openchain_user_data_ex_async(
        self,
        request: blockchain_models.QueryOpenchainUserDataRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryOpenchainUserDataResponse:
        """
        Description: 授权用户数据查询
        Summary: 授权用户数据查询
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryOpenchainUserDataResponse().from_map(
            await self.do_request_async('1.0', 'baas.openchain.user.data.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_identification_risk_threemeta(
        self,
        request: blockchain_models.QueryIdentificationRiskThreemetaRequest,
    ) -> blockchain_models.QueryIdentificationRiskThreemetaResponse:
        """
        Description: 三要素验证身份冒用风险
        Summary: 三要素验证身份冒用风险
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_identification_risk_threemeta_ex(request, headers, runtime)

    async def query_identification_risk_threemeta_async(
        self,
        request: blockchain_models.QueryIdentificationRiskThreemetaRequest,
    ) -> blockchain_models.QueryIdentificationRiskThreemetaResponse:
        """
        Description: 三要素验证身份冒用风险
        Summary: 三要素验证身份冒用风险
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_identification_risk_threemeta_ex_async(request, headers, runtime)

    def query_identification_risk_threemeta_ex(
        self,
        request: blockchain_models.QueryIdentificationRiskThreemetaRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryIdentificationRiskThreemetaResponse:
        """
        Description: 三要素验证身份冒用风险
        Summary: 三要素验证身份冒用风险
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryIdentificationRiskThreemetaResponse().from_map(
            self.do_request('1.0', 'baas.identification.risk.threemeta.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_identification_risk_threemeta_ex_async(
        self,
        request: blockchain_models.QueryIdentificationRiskThreemetaRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryIdentificationRiskThreemetaResponse:
        """
        Description: 三要素验证身份冒用风险
        Summary: 三要素验证身份冒用风险
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryIdentificationRiskThreemetaResponse().from_map(
            await self.do_request_async('1.0', 'baas.identification.risk.threemeta.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def check_content_risk_text(
        self,
        request: blockchain_models.CheckContentRiskTextRequest,
    ) -> blockchain_models.CheckContentRiskTextResponse:
        """
        Description: 文本内容安全扫描
        Summary: 文本内容安全扫描
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.check_content_risk_text_ex(request, headers, runtime)

    async def check_content_risk_text_async(
        self,
        request: blockchain_models.CheckContentRiskTextRequest,
    ) -> blockchain_models.CheckContentRiskTextResponse:
        """
        Description: 文本内容安全扫描
        Summary: 文本内容安全扫描
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.check_content_risk_text_ex_async(request, headers, runtime)

    def check_content_risk_text_ex(
        self,
        request: blockchain_models.CheckContentRiskTextRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CheckContentRiskTextResponse:
        """
        Description: 文本内容安全扫描
        Summary: 文本内容安全扫描
        """
        UtilClient.validate_model(request)
        return blockchain_models.CheckContentRiskTextResponse().from_map(
            self.do_request('1.0', 'baas.content.risk.text.check', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def check_content_risk_text_ex_async(
        self,
        request: blockchain_models.CheckContentRiskTextRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CheckContentRiskTextResponse:
        """
        Description: 文本内容安全扫描
        Summary: 文本内容安全扫描
        """
        UtilClient.validate_model(request)
        return blockchain_models.CheckContentRiskTextResponse().from_map(
            await self.do_request_async('1.0', 'baas.content.risk.text.check', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_identification_risk_twometa(
        self,
        request: blockchain_models.QueryIdentificationRiskTwometaRequest,
    ) -> blockchain_models.QueryIdentificationRiskTwometaResponse:
        """
        Description: 二要素验证身份冒用风险
        Summary: 二要素验证身份冒用风险
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_identification_risk_twometa_ex(request, headers, runtime)

    async def query_identification_risk_twometa_async(
        self,
        request: blockchain_models.QueryIdentificationRiskTwometaRequest,
    ) -> blockchain_models.QueryIdentificationRiskTwometaResponse:
        """
        Description: 二要素验证身份冒用风险
        Summary: 二要素验证身份冒用风险
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_identification_risk_twometa_ex_async(request, headers, runtime)

    def query_identification_risk_twometa_ex(
        self,
        request: blockchain_models.QueryIdentificationRiskTwometaRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryIdentificationRiskTwometaResponse:
        """
        Description: 二要素验证身份冒用风险
        Summary: 二要素验证身份冒用风险
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryIdentificationRiskTwometaResponse().from_map(
            self.do_request('1.0', 'baas.identification.risk.twometa.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_identification_risk_twometa_ex_async(
        self,
        request: blockchain_models.QueryIdentificationRiskTwometaRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryIdentificationRiskTwometaResponse:
        """
        Description: 二要素验证身份冒用风险
        Summary: 二要素验证身份冒用风险
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryIdentificationRiskTwometaResponse().from_map(
            await self.do_request_async('1.0', 'baas.identification.risk.twometa.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_identification_risk_fourmeta(
        self,
        request: blockchain_models.QueryIdentificationRiskFourmetaRequest,
    ) -> blockchain_models.QueryIdentificationRiskFourmetaResponse:
        """
        Description: 四要素验证身份冒用风险
        Summary: 四要素验证身份冒用风险
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_identification_risk_fourmeta_ex(request, headers, runtime)

    async def query_identification_risk_fourmeta_async(
        self,
        request: blockchain_models.QueryIdentificationRiskFourmetaRequest,
    ) -> blockchain_models.QueryIdentificationRiskFourmetaResponse:
        """
        Description: 四要素验证身份冒用风险
        Summary: 四要素验证身份冒用风险
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_identification_risk_fourmeta_ex_async(request, headers, runtime)

    def query_identification_risk_fourmeta_ex(
        self,
        request: blockchain_models.QueryIdentificationRiskFourmetaRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryIdentificationRiskFourmetaResponse:
        """
        Description: 四要素验证身份冒用风险
        Summary: 四要素验证身份冒用风险
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryIdentificationRiskFourmetaResponse().from_map(
            self.do_request('1.0', 'baas.identification.risk.fourmeta.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_identification_risk_fourmeta_ex_async(
        self,
        request: blockchain_models.QueryIdentificationRiskFourmetaRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryIdentificationRiskFourmetaResponse:
        """
        Description: 四要素验证身份冒用风险
        Summary: 四要素验证身份冒用风险
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryIdentificationRiskFourmetaResponse().from_map(
            await self.do_request_async('1.0', 'baas.identification.risk.fourmeta.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def create_notary_raw_text(
        self,
        request: blockchain_models.CreateNotaryRawTextRequest,
    ) -> blockchain_models.CreateNotaryRawTextResponse:
        """
        Description: 原生存证接口
        Summary: 原生存证接口
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.create_notary_raw_text_ex(request, headers, runtime)

    async def create_notary_raw_text_async(
        self,
        request: blockchain_models.CreateNotaryRawTextRequest,
    ) -> blockchain_models.CreateNotaryRawTextResponse:
        """
        Description: 原生存证接口
        Summary: 原生存证接口
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.create_notary_raw_text_ex_async(request, headers, runtime)

    def create_notary_raw_text_ex(
        self,
        request: blockchain_models.CreateNotaryRawTextRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateNotaryRawTextResponse:
        """
        Description: 原生存证接口
        Summary: 原生存证接口
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateNotaryRawTextResponse().from_map(
            self.do_request('1.0', 'baas.notary.raw.text.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def create_notary_raw_text_ex_async(
        self,
        request: blockchain_models.CreateNotaryRawTextRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.CreateNotaryRawTextResponse:
        """
        Description: 原生存证接口
        Summary: 原生存证接口
        """
        UtilClient.validate_model(request)
        return blockchain_models.CreateNotaryRawTextResponse().from_map(
            await self.do_request_async('1.0', 'baas.notary.raw.text.create', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def get_notary_raw_text(
        self,
        request: blockchain_models.GetNotaryRawTextRequest,
    ) -> blockchain_models.GetNotaryRawTextResponse:
        """
        Description: 获取原生存证内容接口
        Summary: 获取原生存证内容接口
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.get_notary_raw_text_ex(request, headers, runtime)

    async def get_notary_raw_text_async(
        self,
        request: blockchain_models.GetNotaryRawTextRequest,
    ) -> blockchain_models.GetNotaryRawTextResponse:
        """
        Description: 获取原生存证内容接口
        Summary: 获取原生存证内容接口
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.get_notary_raw_text_ex_async(request, headers, runtime)

    def get_notary_raw_text_ex(
        self,
        request: blockchain_models.GetNotaryRawTextRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.GetNotaryRawTextResponse:
        """
        Description: 获取原生存证内容接口
        Summary: 获取原生存证内容接口
        """
        UtilClient.validate_model(request)
        return blockchain_models.GetNotaryRawTextResponse().from_map(
            self.do_request('1.0', 'baas.notary.raw.text.get', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def get_notary_raw_text_ex_async(
        self,
        request: blockchain_models.GetNotaryRawTextRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.GetNotaryRawTextResponse:
        """
        Description: 获取原生存证内容接口
        Summary: 获取原生存证内容接口
        """
        UtilClient.validate_model(request)
        return blockchain_models.GetNotaryRawTextResponse().from_map(
            await self.do_request_async('1.0', 'baas.notary.raw.text.get', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_identification_risk_mask(
        self,
        request: blockchain_models.QueryIdentificationRiskMaskRequest,
    ) -> blockchain_models.QueryIdentificationRiskMaskResponse:
        """
        Description: 脱敏身份验证
        Summary: 脱敏身份验证
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_identification_risk_mask_ex(request, headers, runtime)

    async def query_identification_risk_mask_async(
        self,
        request: blockchain_models.QueryIdentificationRiskMaskRequest,
    ) -> blockchain_models.QueryIdentificationRiskMaskResponse:
        """
        Description: 脱敏身份验证
        Summary: 脱敏身份验证
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_identification_risk_mask_ex_async(request, headers, runtime)

    def query_identification_risk_mask_ex(
        self,
        request: blockchain_models.QueryIdentificationRiskMaskRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryIdentificationRiskMaskResponse:
        """
        Description: 脱敏身份验证
        Summary: 脱敏身份验证
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryIdentificationRiskMaskResponse().from_map(
            self.do_request('1.0', 'baas.identification.risk.mask.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_identification_risk_mask_ex_async(
        self,
        request: blockchain_models.QueryIdentificationRiskMaskRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryIdentificationRiskMaskResponse:
        """
        Description: 脱敏身份验证
        Summary: 脱敏身份验证
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryIdentificationRiskMaskResponse().from_map(
            await self.do_request_async('1.0', 'baas.identification.risk.mask.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def init_identification_enterprise_faceauth(
        self,
        request: blockchain_models.InitIdentificationEnterpriseFaceauthRequest,
    ) -> blockchain_models.InitIdentificationEnterpriseFaceauthResponse:
        """
        Description: 基于法人实人认证的企业四要素认证
        Summary: 基于法人实人认证的企业四要素认证
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.init_identification_enterprise_faceauth_ex(request, headers, runtime)

    async def init_identification_enterprise_faceauth_async(
        self,
        request: blockchain_models.InitIdentificationEnterpriseFaceauthRequest,
    ) -> blockchain_models.InitIdentificationEnterpriseFaceauthResponse:
        """
        Description: 基于法人实人认证的企业四要素认证
        Summary: 基于法人实人认证的企业四要素认证
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.init_identification_enterprise_faceauth_ex_async(request, headers, runtime)

    def init_identification_enterprise_faceauth_ex(
        self,
        request: blockchain_models.InitIdentificationEnterpriseFaceauthRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.InitIdentificationEnterpriseFaceauthResponse:
        """
        Description: 基于法人实人认证的企业四要素认证
        Summary: 基于法人实人认证的企业四要素认证
        """
        UtilClient.validate_model(request)
        return blockchain_models.InitIdentificationEnterpriseFaceauthResponse().from_map(
            self.do_request('1.0', 'baas.identification.enterprise.faceauth.init', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def init_identification_enterprise_faceauth_ex_async(
        self,
        request: blockchain_models.InitIdentificationEnterpriseFaceauthRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.InitIdentificationEnterpriseFaceauthResponse:
        """
        Description: 基于法人实人认证的企业四要素认证
        Summary: 基于法人实人认证的企业四要素认证
        """
        UtilClient.validate_model(request)
        return blockchain_models.InitIdentificationEnterpriseFaceauthResponse().from_map(
            await self.do_request_async('1.0', 'baas.identification.enterprise.faceauth.init', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_identification_enterprise_faceauth(
        self,
        request: blockchain_models.QueryIdentificationEnterpriseFaceauthRequest,
    ) -> blockchain_models.QueryIdentificationEnterpriseFaceauthResponse:
        """
        Description: 查询企业四要素（实人）认证结果
        Summary: 查询企业四要素（实人）认证结果
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_identification_enterprise_faceauth_ex(request, headers, runtime)

    async def query_identification_enterprise_faceauth_async(
        self,
        request: blockchain_models.QueryIdentificationEnterpriseFaceauthRequest,
    ) -> blockchain_models.QueryIdentificationEnterpriseFaceauthResponse:
        """
        Description: 查询企业四要素（实人）认证结果
        Summary: 查询企业四要素（实人）认证结果
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_identification_enterprise_faceauth_ex_async(request, headers, runtime)

    def query_identification_enterprise_faceauth_ex(
        self,
        request: blockchain_models.QueryIdentificationEnterpriseFaceauthRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryIdentificationEnterpriseFaceauthResponse:
        """
        Description: 查询企业四要素（实人）认证结果
        Summary: 查询企业四要素（实人）认证结果
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryIdentificationEnterpriseFaceauthResponse().from_map(
            self.do_request('1.0', 'baas.identification.enterprise.faceauth.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_identification_enterprise_faceauth_ex_async(
        self,
        request: blockchain_models.QueryIdentificationEnterpriseFaceauthRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryIdentificationEnterpriseFaceauthResponse:
        """
        Description: 查询企业四要素（实人）认证结果
        Summary: 查询企业四要素（实人）认证结果
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryIdentificationEnterpriseFaceauthResponse().from_map(
            await self.do_request_async('1.0', 'baas.identification.enterprise.faceauth.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_identification_enterprise_fourmeta(
        self,
        request: blockchain_models.QueryIdentificationEnterpriseFourmetaRequest,
    ) -> blockchain_models.QueryIdentificationEnterpriseFourmetaResponse:
        """
        Description: 企业四要素认证
        Summary: 企业四要素认证
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_identification_enterprise_fourmeta_ex(request, headers, runtime)

    async def query_identification_enterprise_fourmeta_async(
        self,
        request: blockchain_models.QueryIdentificationEnterpriseFourmetaRequest,
    ) -> blockchain_models.QueryIdentificationEnterpriseFourmetaResponse:
        """
        Description: 企业四要素认证
        Summary: 企业四要素认证
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_identification_enterprise_fourmeta_ex_async(request, headers, runtime)

    def query_identification_enterprise_fourmeta_ex(
        self,
        request: blockchain_models.QueryIdentificationEnterpriseFourmetaRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryIdentificationEnterpriseFourmetaResponse:
        """
        Description: 企业四要素认证
        Summary: 企业四要素认证
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryIdentificationEnterpriseFourmetaResponse().from_map(
            self.do_request('1.0', 'baas.identification.enterprise.fourmeta.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_identification_enterprise_fourmeta_ex_async(
        self,
        request: blockchain_models.QueryIdentificationEnterpriseFourmetaRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryIdentificationEnterpriseFourmetaResponse:
        """
        Description: 企业四要素认证
        Summary: 企业四要素认证
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryIdentificationEnterpriseFourmetaResponse().from_map(
            await self.do_request_async('1.0', 'baas.identification.enterprise.fourmeta.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_identification_enterprise_threemeta(
        self,
        request: blockchain_models.QueryIdentificationEnterpriseThreemetaRequest,
    ) -> blockchain_models.QueryIdentificationEnterpriseThreemetaResponse:
        """
        Description: 企业三要素认证（企业名，企业证件号，法人姓名）
        Summary: 企业三要素认证
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_identification_enterprise_threemeta_ex(request, headers, runtime)

    async def query_identification_enterprise_threemeta_async(
        self,
        request: blockchain_models.QueryIdentificationEnterpriseThreemetaRequest,
    ) -> blockchain_models.QueryIdentificationEnterpriseThreemetaResponse:
        """
        Description: 企业三要素认证（企业名，企业证件号，法人姓名）
        Summary: 企业三要素认证
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_identification_enterprise_threemeta_ex_async(request, headers, runtime)

    def query_identification_enterprise_threemeta_ex(
        self,
        request: blockchain_models.QueryIdentificationEnterpriseThreemetaRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryIdentificationEnterpriseThreemetaResponse:
        """
        Description: 企业三要素认证（企业名，企业证件号，法人姓名）
        Summary: 企业三要素认证
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryIdentificationEnterpriseThreemetaResponse().from_map(
            self.do_request('1.0', 'baas.identification.enterprise.threemeta.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_identification_enterprise_threemeta_ex_async(
        self,
        request: blockchain_models.QueryIdentificationEnterpriseThreemetaRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryIdentificationEnterpriseThreemetaResponse:
        """
        Description: 企业三要素认证（企业名，企业证件号，法人姓名）
        Summary: 企业三要素认证
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryIdentificationEnterpriseThreemetaResponse().from_map(
            await self.do_request_async('1.0', 'baas.identification.enterprise.threemeta.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def query_identification_enterprise_twometa(
        self,
        request: blockchain_models.QueryIdentificationEnterpriseTwometaRequest,
    ) -> blockchain_models.QueryIdentificationEnterpriseTwometaResponse:
        """
        Description: 企业二要素认证（企业名称，企业证件号码）
        Summary:  企业二要素认证
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.query_identification_enterprise_twometa_ex(request, headers, runtime)

    async def query_identification_enterprise_twometa_async(
        self,
        request: blockchain_models.QueryIdentificationEnterpriseTwometaRequest,
    ) -> blockchain_models.QueryIdentificationEnterpriseTwometaResponse:
        """
        Description: 企业二要素认证（企业名称，企业证件号码）
        Summary:  企业二要素认证
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.query_identification_enterprise_twometa_ex_async(request, headers, runtime)

    def query_identification_enterprise_twometa_ex(
        self,
        request: blockchain_models.QueryIdentificationEnterpriseTwometaRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryIdentificationEnterpriseTwometaResponse:
        """
        Description: 企业二要素认证（企业名称，企业证件号码）
        Summary:  企业二要素认证
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryIdentificationEnterpriseTwometaResponse().from_map(
            self.do_request('1.0', 'baas.identification.enterprise.twometa.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def query_identification_enterprise_twometa_ex_async(
        self,
        request: blockchain_models.QueryIdentificationEnterpriseTwometaRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.QueryIdentificationEnterpriseTwometaResponse:
        """
        Description: 企业二要素认证（企业名称，企业证件号码）
        Summary:  企业二要素认证
        """
        UtilClient.validate_model(request)
        return blockchain_models.QueryIdentificationEnterpriseTwometaResponse().from_map(
            await self.do_request_async('1.0', 'baas.identification.enterprise.twometa.query', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    def start_mydid_did_threeelement(
        self,
        request: blockchain_models.StartMydidDidThreeelementRequest,
    ) -> blockchain_models.StartMydidDidThreeelementResponse:
        """
        Description: 完成1.三要素认证；2创建did；3.颁发声明（声明该DID已经完成三要素认证）
        Summary: 三要素认证与did创建接口
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return self.start_mydid_did_threeelement_ex(request, headers, runtime)

    async def start_mydid_did_threeelement_async(
        self,
        request: blockchain_models.StartMydidDidThreeelementRequest,
    ) -> blockchain_models.StartMydidDidThreeelementResponse:
        """
        Description: 完成1.三要素认证；2创建did；3.颁发声明（声明该DID已经完成三要素认证）
        Summary: 三要素认证与did创建接口
        """
        runtime = util_models.RuntimeOptions()
        headers = {}
        return await self.start_mydid_did_threeelement_ex_async(request, headers, runtime)

    def start_mydid_did_threeelement_ex(
        self,
        request: blockchain_models.StartMydidDidThreeelementRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartMydidDidThreeelementResponse:
        """
        Description: 完成1.三要素认证；2创建did；3.颁发声明（声明该DID已经完成三要素认证）
        Summary: 三要素认证与did创建接口
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartMydidDidThreeelementResponse().from_map(
            self.do_request('1.0', 'baas.mydid.did.threeelement.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )

    async def start_mydid_did_threeelement_ex_async(
        self,
        request: blockchain_models.StartMydidDidThreeelementRequest,
        headers: Dict[str, str],
        runtime: util_models.RuntimeOptions,
    ) -> blockchain_models.StartMydidDidThreeelementResponse:
        """
        Description: 完成1.三要素认证；2创建did；3.颁发声明（声明该DID已经完成三要素认证）
        Summary: 三要素认证与did创建接口
        """
        UtilClient.validate_model(request)
        return blockchain_models.StartMydidDidThreeelementResponse().from_map(
            await self.do_request_async('1.0', 'baas.mydid.did.threeelement.start', 'HTTPS', 'POST', f'/gateway.do', TeaCore.to_map(request), headers, runtime)
        )
