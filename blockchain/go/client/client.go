// This file is auto-generated, don't edit it. Thanks.
package client

import (
	rpcutil "github.com/alibabacloud-go/tea-rpc-utils/service"
	util "github.com/alibabacloud-go/tea-utils/v2/service"
	"github.com/alibabacloud-go/tea/tea"
	antchainutil "github.com/antchain-openapi-sdk-go/antchain-util/service"
	"io"
)

/**
 * Model for initing client
 */
type Config struct {
	// accesskey id
	AccessKeyId *string `json:"accessKeyId,omitempty" xml:"accessKeyId,omitempty"`
	// accesskey secret
	AccessKeySecret *string `json:"accessKeySecret,omitempty" xml:"accessKeySecret,omitempty"`
	// security token
	SecurityToken *string `json:"securityToken,omitempty" xml:"securityToken,omitempty"`
	// http protocol
	Protocol *string `json:"protocol,omitempty" xml:"protocol,omitempty"`
	// read timeout
	ReadTimeout *int `json:"readTimeout,omitempty" xml:"readTimeout,omitempty"`
	// connect timeout
	ConnectTimeout *int `json:"connectTimeout,omitempty" xml:"connectTimeout,omitempty"`
	// http proxy
	HttpProxy *string `json:"httpProxy,omitempty" xml:"httpProxy,omitempty"`
	// https proxy
	HttpsProxy *string `json:"httpsProxy,omitempty" xml:"httpsProxy,omitempty"`
	// endpoint
	Endpoint *string `json:"endpoint,omitempty" xml:"endpoint,omitempty"`
	// proxy white list
	NoProxy *string `json:"noProxy,omitempty" xml:"noProxy,omitempty"`
	// max idle conns
	MaxIdleConns *int `json:"maxIdleConns,omitempty" xml:"maxIdleConns,omitempty"`
	// user agent
	UserAgent *string `json:"userAgent,omitempty" xml:"userAgent,omitempty"`
	// socks5 proxy
	Socks5Proxy *string `json:"socks5Proxy,omitempty" xml:"socks5Proxy,omitempty"`
	// socks5 network
	Socks5NetWork *string `json:"socks5NetWork,omitempty" xml:"socks5NetWork,omitempty"`
	// 长链接最大空闲时长
	MaxIdleTimeMillis *int `json:"maxIdleTimeMillis,omitempty" xml:"maxIdleTimeMillis,omitempty"`
	// 长链接最大连接时长
	KeepAliveDurationMillis *int `json:"keepAliveDurationMillis,omitempty" xml:"keepAliveDurationMillis,omitempty"`
	// 最大连接数（长链接最大总数）
	MaxRequests *int `json:"maxRequests,omitempty" xml:"maxRequests,omitempty"`
	// 每个目标主机的最大连接数（分主机域名的长链接最大总数
	MaxRequestsPerHost *int `json:"maxRequestsPerHost,omitempty" xml:"maxRequestsPerHost,omitempty"`
}

func (s Config) String() string {
	return tea.Prettify(s)
}

func (s Config) GoString() string {
	return s.String()
}

func (s *Config) SetAccessKeyId(v string) *Config {
	s.AccessKeyId = &v
	return s
}

func (s *Config) SetAccessKeySecret(v string) *Config {
	s.AccessKeySecret = &v
	return s
}

func (s *Config) SetSecurityToken(v string) *Config {
	s.SecurityToken = &v
	return s
}

func (s *Config) SetProtocol(v string) *Config {
	s.Protocol = &v
	return s
}

func (s *Config) SetReadTimeout(v int) *Config {
	s.ReadTimeout = &v
	return s
}

func (s *Config) SetConnectTimeout(v int) *Config {
	s.ConnectTimeout = &v
	return s
}

func (s *Config) SetHttpProxy(v string) *Config {
	s.HttpProxy = &v
	return s
}

func (s *Config) SetHttpsProxy(v string) *Config {
	s.HttpsProxy = &v
	return s
}

func (s *Config) SetEndpoint(v string) *Config {
	s.Endpoint = &v
	return s
}

func (s *Config) SetNoProxy(v string) *Config {
	s.NoProxy = &v
	return s
}

func (s *Config) SetMaxIdleConns(v int) *Config {
	s.MaxIdleConns = &v
	return s
}

func (s *Config) SetUserAgent(v string) *Config {
	s.UserAgent = &v
	return s
}

func (s *Config) SetSocks5Proxy(v string) *Config {
	s.Socks5Proxy = &v
	return s
}

func (s *Config) SetSocks5NetWork(v string) *Config {
	s.Socks5NetWork = &v
	return s
}

func (s *Config) SetMaxIdleTimeMillis(v int) *Config {
	s.MaxIdleTimeMillis = &v
	return s
}

func (s *Config) SetKeepAliveDurationMillis(v int) *Config {
	s.KeepAliveDurationMillis = &v
	return s
}

func (s *Config) SetMaxRequests(v int) *Config {
	s.MaxRequests = &v
	return s
}

func (s *Config) SetMaxRequestsPerHost(v int) *Config {
	s.MaxRequestsPerHost = &v
	return s
}

// 数据授权服务审批流程节点结构体
type ProcessNode struct {
	// 审批节点ID
	NodeId *string `json:"node_id,omitempty" xml:"node_id,omitempty" require:"true" maxLength:"100"`
	// 节点名称
	NodeName *string `json:"node_name,omitempty" xml:"node_name,omitempty" require:"true" maxLength:"64"`
	// 节点序号，从1开始编号
	NodeNum *int64 `json:"node_num,omitempty" xml:"node_num,omitempty" require:"true" minimum:"1"`
}

func (s ProcessNode) String() string {
	return tea.Prettify(s)
}

func (s ProcessNode) GoString() string {
	return s.String()
}

func (s *ProcessNode) SetNodeId(v string) *ProcessNode {
	s.NodeId = &v
	return s
}

func (s *ProcessNode) SetNodeName(v string) *ProcessNode {
	s.NodeName = &v
	return s
}

func (s *ProcessNode) SetNodeNum(v int64) *ProcessNode {
	s.NodeNum = &v
	return s
}

// 蚂蚁链浏览器合约链交易内容
type BlockchainBrowserTransactionContract struct {
	// data
	Data *string `json:"data,omitempty" xml:"data,omitempty" require:"true"`
	// from
	From *string `json:"from,omitempty" xml:"from,omitempty" require:"true"`
	// to
	To *string `json:"to,omitempty" xml:"to,omitempty" require:"true"`
	// gas
	Gas *int64 `json:"gas,omitempty" xml:"gas,omitempty" require:"true"`
	// hash
	Hash *string `json:"hash,omitempty" xml:"hash,omitempty" require:"true"`
	// nonce
	Nonce *string `json:"nonce,omitempty" xml:"nonce,omitempty" require:"true"`
	// period
	Period *int64 `json:"period,omitempty" xml:"period,omitempty" require:"true"`
	// signature_list
	SignatureList []*string `json:"signature_list,omitempty" xml:"signature_list,omitempty" require:"true" type:"Repeated"`
	// timestamp
	Timestamp *int64 `json:"timestamp,omitempty" xml:"timestamp,omitempty" require:"true"`
	// transaction_type
	TransactionType *string `json:"transaction_type,omitempty" xml:"transaction_type,omitempty" require:"true"`
	// value
	Value *int64 `json:"value,omitempty" xml:"value,omitempty" require:"true"`
}

func (s BlockchainBrowserTransactionContract) String() string {
	return tea.Prettify(s)
}

func (s BlockchainBrowserTransactionContract) GoString() string {
	return s.String()
}

func (s *BlockchainBrowserTransactionContract) SetData(v string) *BlockchainBrowserTransactionContract {
	s.Data = &v
	return s
}

func (s *BlockchainBrowserTransactionContract) SetFrom(v string) *BlockchainBrowserTransactionContract {
	s.From = &v
	return s
}

func (s *BlockchainBrowserTransactionContract) SetTo(v string) *BlockchainBrowserTransactionContract {
	s.To = &v
	return s
}

func (s *BlockchainBrowserTransactionContract) SetGas(v int64) *BlockchainBrowserTransactionContract {
	s.Gas = &v
	return s
}

func (s *BlockchainBrowserTransactionContract) SetHash(v string) *BlockchainBrowserTransactionContract {
	s.Hash = &v
	return s
}

func (s *BlockchainBrowserTransactionContract) SetNonce(v string) *BlockchainBrowserTransactionContract {
	s.Nonce = &v
	return s
}

func (s *BlockchainBrowserTransactionContract) SetPeriod(v int64) *BlockchainBrowserTransactionContract {
	s.Period = &v
	return s
}

func (s *BlockchainBrowserTransactionContract) SetSignatureList(v []*string) *BlockchainBrowserTransactionContract {
	s.SignatureList = v
	return s
}

func (s *BlockchainBrowserTransactionContract) SetTimestamp(v int64) *BlockchainBrowserTransactionContract {
	s.Timestamp = &v
	return s
}

func (s *BlockchainBrowserTransactionContract) SetTransactionType(v string) *BlockchainBrowserTransactionContract {
	s.TransactionType = &v
	return s
}

func (s *BlockchainBrowserTransactionContract) SetValue(v int64) *BlockchainBrowserTransactionContract {
	s.Value = &v
	return s
}

// TriggerLogDTO类成员
type PositionStructBody struct {
	// 错误计数
	ErrorCount *string `json:"error_count,omitempty" xml:"error_count,omitempty"`
	// 高度
	Height *string `json:"height,omitempty" xml:"height,omitempty"`
	// 序号
	Index *string `json:"index,omitempty" xml:"index,omitempty"`
	// 最后一个错误
	LastError *string `json:"last_error,omitempty" xml:"last_error,omitempty"`
	// 类型
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
}

func (s PositionStructBody) String() string {
	return tea.Prettify(s)
}

func (s PositionStructBody) GoString() string {
	return s.String()
}

func (s *PositionStructBody) SetErrorCount(v string) *PositionStructBody {
	s.ErrorCount = &v
	return s
}

func (s *PositionStructBody) SetHeight(v string) *PositionStructBody {
	s.Height = &v
	return s
}

func (s *PositionStructBody) SetIndex(v string) *PositionStructBody {
	s.Index = &v
	return s
}

func (s *PositionStructBody) SetLastError(v string) *PositionStructBody {
	s.LastError = &v
	return s
}

func (s *PositionStructBody) SetType(v string) *PositionStructBody {
	s.Type = &v
	return s
}

// 授权服务参与方结构体
type Participant struct {
	// 业务系统唯一标示
	BizUid *string `json:"biz_uid,omitempty" xml:"biz_uid,omitempty" maxLength:"64"`
	// 区块链ID
	BlockchainId *string `json:"blockchain_id,omitempty" xml:"blockchain_id,omitempty"`
	// 创建时间
	CreateTime *int64 `json:"create_time,omitempty" xml:"create_time,omitempty" require:"true"`
	// 信用代码
	CreditNumber *string `json:"credit_number,omitempty" xml:"credit_number,omitempty"`
	// 扩展信息，标准JSON格式
	ExtensionInfo *string `json:"extension_info,omitempty" xml:"extension_info,omitempty"`
	// 参与方名字
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true" maxLength:"64"`
	// 回调通知服务地址
	NotificationService *string `json:"notification_service,omitempty" xml:"notification_service,omitempty"`
	// 参与方ID
	ParticipantId *string `json:"participant_id,omitempty" xml:"participant_id,omitempty" require:"true" maxLength:"100"`
	// DID  doc中的公开信息
	PublicInfo *string `json:"public_info,omitempty" xml:"public_info,omitempty"`
	// 参与方角色列表
	Role []*string `json:"role,omitempty" xml:"role,omitempty" require:"true" type:"Repeated"`
	// 空间ID
	SpaceId *string `json:"space_id,omitempty" xml:"space_id,omitempty"`
	// 参与方状态
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// 更新时间
	UpdateTime *int64 `json:"update_time,omitempty" xml:"update_time,omitempty" require:"true"`
	// 账户名称
	Account *string `json:"account,omitempty" xml:"account,omitempty"`
}

func (s Participant) String() string {
	return tea.Prettify(s)
}

func (s Participant) GoString() string {
	return s.String()
}

func (s *Participant) SetBizUid(v string) *Participant {
	s.BizUid = &v
	return s
}

func (s *Participant) SetBlockchainId(v string) *Participant {
	s.BlockchainId = &v
	return s
}

func (s *Participant) SetCreateTime(v int64) *Participant {
	s.CreateTime = &v
	return s
}

func (s *Participant) SetCreditNumber(v string) *Participant {
	s.CreditNumber = &v
	return s
}

func (s *Participant) SetExtensionInfo(v string) *Participant {
	s.ExtensionInfo = &v
	return s
}

func (s *Participant) SetName(v string) *Participant {
	s.Name = &v
	return s
}

func (s *Participant) SetNotificationService(v string) *Participant {
	s.NotificationService = &v
	return s
}

func (s *Participant) SetParticipantId(v string) *Participant {
	s.ParticipantId = &v
	return s
}

func (s *Participant) SetPublicInfo(v string) *Participant {
	s.PublicInfo = &v
	return s
}

func (s *Participant) SetRole(v []*string) *Participant {
	s.Role = v
	return s
}

func (s *Participant) SetSpaceId(v string) *Participant {
	s.SpaceId = &v
	return s
}

func (s *Participant) SetStatus(v string) *Participant {
	s.Status = &v
	return s
}

func (s *Participant) SetUpdateTime(v int64) *Participant {
	s.UpdateTime = &v
	return s
}

func (s *Participant) SetAccount(v string) *Participant {
	s.Account = &v
	return s
}

// 合约绑定关系
type ContractBindResp struct {
	// 合约标识
	ServiceId *string `json:"service_id,omitempty" xml:"service_id,omitempty"`
	// 合约名称
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 是否已关联
	Bind *bool `json:"bind,omitempty" xml:"bind,omitempty"`
}

func (s ContractBindResp) String() string {
	return tea.Prettify(s)
}

func (s ContractBindResp) GoString() string {
	return s.String()
}

func (s *ContractBindResp) SetServiceId(v string) *ContractBindResp {
	s.ServiceId = &v
	return s
}

func (s *ContractBindResp) SetName(v string) *ContractBindResp {
	s.Name = &v
	return s
}

func (s *ContractBindResp) SetBind(v bool) *ContractBindResp {
	s.Bind = &v
	return s
}

// 节点类型
type CrowdNodeTypeEnum struct {
	// 组合节点
	Group *string `json:"group,omitempty" xml:"group,omitempty"`
	// 条件节点
	Condition *string `json:"condition,omitempty" xml:"condition,omitempty"`
}

func (s CrowdNodeTypeEnum) String() string {
	return tea.Prettify(s)
}

func (s CrowdNodeTypeEnum) GoString() string {
	return s.String()
}

func (s *CrowdNodeTypeEnum) SetGroup(v string) *CrowdNodeTypeEnum {
	s.Group = &v
	return s
}

func (s *CrowdNodeTypeEnum) SetCondition(v string) *CrowdNodeTypeEnum {
	s.Condition = &v
	return s
}

// 任务列表返回体
type TaskListInfoDTO struct {
	// 任务名称
	TaskName *string `json:"task_name,omitempty" xml:"task_name,omitempty" require:"true"`
	// 任务ID
	TaskId *string `json:"task_id,omitempty" xml:"task_id,omitempty" require:"true"`
	// appId
	AppId *string `json:"app_id,omitempty" xml:"app_id,omitempty" require:"true"`
	// 自有ID
	SurveyId *string `json:"survey_id,omitempty" xml:"survey_id,omitempty" require:"true"`
	// 租户ID
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty" require:"true"`
	// 租户名称
	TenantName *string `json:"tenant_name,omitempty" xml:"tenant_name,omitempty" require:"true"`
	// 操作员
	Operator *string `json:"operator,omitempty" xml:"operator,omitempty" require:"true"`
	// 样本数量
	SampleNum *int64 `json:"sample_num,omitempty" xml:"sample_num,omitempty" require:"true"`
	// 完成数量
	CompletedNum *int64 `json:"completed_num,omitempty" xml:"completed_num,omitempty" require:"true"`
	// 甄别数量
	ScreenNum *int64 `json:"screen_num,omitempty" xml:"screen_num,omitempty" require:"true"`
	// 样本总金额
	SampleTotalAmount *string `json:"sample_total_amount,omitempty" xml:"sample_total_amount,omitempty" require:"true"`
	// 全额红包总金额
	RedPacketTotalAmount *string `json:"red_packet_total_amount,omitempty" xml:"red_packet_total_amount,omitempty" require:"true"`
	// 该任务总金额
	TaskTotalAmount *string `json:"task_total_amount,omitempty" xml:"task_total_amount,omitempty" require:"true"`
	// 全额红包金额
	FullRedPacketAmount *string `json:"full_red_packet_amount,omitempty" xml:"full_red_packet_amount,omitempty" require:"true"`
	// 甄别红包金额
	ExamineRedPacketAmount *string `json:"examine_red_packet_amount,omitempty" xml:"examine_red_packet_amount,omitempty" require:"true"`
	// 发证量
	IssuedNum *int64 `json:"issued_num,omitempty" xml:"issued_num,omitempty"`
	// 产品下单code类型（1-资源包 2-后付费）
	ProductCodeType *string `json:"product_code_type,omitempty" xml:"product_code_type,omitempty" require:"true"`
	// 审核理由
	ReviewContent *string `json:"review_content,omitempty" xml:"review_content,omitempty"`
	// 任务状态：0-已删、1-已完成、2-审核未通过、3-暂停、4-投放中、5-暂停中未重启、6、投放中未暂停、7-投放中未调整、8-投放中未完成、9-待投放、10-草稿任务
	Status *string `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// ap状态，1:启用，0：审批中
	ApStatus *string `json:"ap_status,omitempty" xml:"ap_status,omitempty" require:"true"`
	// 奖励渠道（0-手动发支付宝余额 1-海豚红包 2-问卷自带）
	PrizeChannel *int64 `json:"prize_channel,omitempty" xml:"prize_channel,omitempty" require:"true"`
	// 奖励渠道为问卷自带时，全额红包信息
	FullRedPacketTextInfo *string `json:"full_red_packet_text_info,omitempty" xml:"full_red_packet_text_info,omitempty"`
	// 修改时间
	GmtModified *string `json:"gmt_modified,omitempty" xml:"gmt_modified,omitempty" require:"true"`
	// 创建时间
	GmtCreate *string `json:"gmt_create,omitempty" xml:"gmt_create,omitempty" require:"true"`
	// 投放时间
	GmtOnline *string `json:"gmt_online,omitempty" xml:"gmt_online,omitempty"`
	// 最近暂停/完成时间
	GmtPauseOrComplete *string `json:"gmt_pause_or_complete,omitempty" xml:"gmt_pause_or_complete,omitempty"`
	// 最近一轮用时（h）
	LastRoundTime *int64 `json:"last_round_time,omitempty" xml:"last_round_time,omitempty"`
}

func (s TaskListInfoDTO) String() string {
	return tea.Prettify(s)
}

func (s TaskListInfoDTO) GoString() string {
	return s.String()
}

func (s *TaskListInfoDTO) SetTaskName(v string) *TaskListInfoDTO {
	s.TaskName = &v
	return s
}

func (s *TaskListInfoDTO) SetTaskId(v string) *TaskListInfoDTO {
	s.TaskId = &v
	return s
}

func (s *TaskListInfoDTO) SetAppId(v string) *TaskListInfoDTO {
	s.AppId = &v
	return s
}

func (s *TaskListInfoDTO) SetSurveyId(v string) *TaskListInfoDTO {
	s.SurveyId = &v
	return s
}

func (s *TaskListInfoDTO) SetTenantId(v string) *TaskListInfoDTO {
	s.TenantId = &v
	return s
}

func (s *TaskListInfoDTO) SetTenantName(v string) *TaskListInfoDTO {
	s.TenantName = &v
	return s
}

func (s *TaskListInfoDTO) SetOperator(v string) *TaskListInfoDTO {
	s.Operator = &v
	return s
}

func (s *TaskListInfoDTO) SetSampleNum(v int64) *TaskListInfoDTO {
	s.SampleNum = &v
	return s
}

func (s *TaskListInfoDTO) SetCompletedNum(v int64) *TaskListInfoDTO {
	s.CompletedNum = &v
	return s
}

func (s *TaskListInfoDTO) SetScreenNum(v int64) *TaskListInfoDTO {
	s.ScreenNum = &v
	return s
}

func (s *TaskListInfoDTO) SetSampleTotalAmount(v string) *TaskListInfoDTO {
	s.SampleTotalAmount = &v
	return s
}

func (s *TaskListInfoDTO) SetRedPacketTotalAmount(v string) *TaskListInfoDTO {
	s.RedPacketTotalAmount = &v
	return s
}

func (s *TaskListInfoDTO) SetTaskTotalAmount(v string) *TaskListInfoDTO {
	s.TaskTotalAmount = &v
	return s
}

func (s *TaskListInfoDTO) SetFullRedPacketAmount(v string) *TaskListInfoDTO {
	s.FullRedPacketAmount = &v
	return s
}

func (s *TaskListInfoDTO) SetExamineRedPacketAmount(v string) *TaskListInfoDTO {
	s.ExamineRedPacketAmount = &v
	return s
}

func (s *TaskListInfoDTO) SetIssuedNum(v int64) *TaskListInfoDTO {
	s.IssuedNum = &v
	return s
}

func (s *TaskListInfoDTO) SetProductCodeType(v string) *TaskListInfoDTO {
	s.ProductCodeType = &v
	return s
}

func (s *TaskListInfoDTO) SetReviewContent(v string) *TaskListInfoDTO {
	s.ReviewContent = &v
	return s
}

func (s *TaskListInfoDTO) SetStatus(v string) *TaskListInfoDTO {
	s.Status = &v
	return s
}

func (s *TaskListInfoDTO) SetApStatus(v string) *TaskListInfoDTO {
	s.ApStatus = &v
	return s
}

func (s *TaskListInfoDTO) SetPrizeChannel(v int64) *TaskListInfoDTO {
	s.PrizeChannel = &v
	return s
}

func (s *TaskListInfoDTO) SetFullRedPacketTextInfo(v string) *TaskListInfoDTO {
	s.FullRedPacketTextInfo = &v
	return s
}

func (s *TaskListInfoDTO) SetGmtModified(v string) *TaskListInfoDTO {
	s.GmtModified = &v
	return s
}

func (s *TaskListInfoDTO) SetGmtCreate(v string) *TaskListInfoDTO {
	s.GmtCreate = &v
	return s
}

func (s *TaskListInfoDTO) SetGmtOnline(v string) *TaskListInfoDTO {
	s.GmtOnline = &v
	return s
}

func (s *TaskListInfoDTO) SetGmtPauseOrComplete(v string) *TaskListInfoDTO {
	s.GmtPauseOrComplete = &v
	return s
}

func (s *TaskListInfoDTO) SetLastRoundTime(v int64) *TaskListInfoDTO {
	s.LastRoundTime = &v
	return s
}

// 阿里云联盟成员信息
type ALiYunMember struct {
	// 加入时间
	JoinTime *int64 `json:"join_time,omitempty" xml:"join_time,omitempty"`
	// 成员id
	MemberId *string `json:"member_id,omitempty" xml:"member_id,omitempty"`
	// 成员名称
	MemberName *string `json:"member_name,omitempty" xml:"member_name,omitempty"`
	// 角色
	Role *string `json:"role,omitempty" xml:"role,omitempty"`
	// 状态
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
}

func (s ALiYunMember) String() string {
	return tea.Prettify(s)
}

func (s ALiYunMember) GoString() string {
	return s.String()
}

func (s *ALiYunMember) SetJoinTime(v int64) *ALiYunMember {
	s.JoinTime = &v
	return s
}

func (s *ALiYunMember) SetMemberId(v string) *ALiYunMember {
	s.MemberId = &v
	return s
}

func (s *ALiYunMember) SetMemberName(v string) *ALiYunMember {
	s.MemberName = &v
	return s
}

func (s *ALiYunMember) SetRole(v string) *ALiYunMember {
	s.Role = &v
	return s
}

func (s *ALiYunMember) SetStatus(v string) *ALiYunMember {
	s.Status = &v
	return s
}

// 应用授权列表
type ApplicationPageListResp struct {
	// 应用标识
	ApplicationId *string `json:"application_id,omitempty" xml:"application_id,omitempty"`
	// 链ID
	AccessKey *string `json:"access_key,omitempty" xml:"access_key,omitempty"`
	// 合约(创建实例时填写的合约名称。)
	NameList []*string `json:"name_list,omitempty" xml:"name_list,omitempty" type:"Repeated"`
}

func (s ApplicationPageListResp) String() string {
	return tea.Prettify(s)
}

func (s ApplicationPageListResp) GoString() string {
	return s.String()
}

func (s *ApplicationPageListResp) SetApplicationId(v string) *ApplicationPageListResp {
	s.ApplicationId = &v
	return s
}

func (s *ApplicationPageListResp) SetAccessKey(v string) *ApplicationPageListResp {
	s.AccessKey = &v
	return s
}

func (s *ApplicationPageListResp) SetNameList(v []*string) *ApplicationPageListResp {
	s.NameList = v
	return s
}

// 实例进度信息
type InstanceProgressInfo struct {
	// 操作人
	Operator *string `json:"operator,omitempty" xml:"operator,omitempty"`
	// 操作时间
	Time *int64 `json:"time,omitempty" xml:"time,omitempty"`
	// 合约部署进度类型
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
	// 部署状态
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// 合约部署进度名称
	TypeName *string `json:"type_name,omitempty" xml:"type_name,omitempty"`
	// 额外参数
	Data *string `json:"data,omitempty" xml:"data,omitempty"`
}

func (s InstanceProgressInfo) String() string {
	return tea.Prettify(s)
}

func (s InstanceProgressInfo) GoString() string {
	return s.String()
}

func (s *InstanceProgressInfo) SetOperator(v string) *InstanceProgressInfo {
	s.Operator = &v
	return s
}

func (s *InstanceProgressInfo) SetTime(v int64) *InstanceProgressInfo {
	s.Time = &v
	return s
}

func (s *InstanceProgressInfo) SetType(v string) *InstanceProgressInfo {
	s.Type = &v
	return s
}

func (s *InstanceProgressInfo) SetStatus(v string) *InstanceProgressInfo {
	s.Status = &v
	return s
}

func (s *InstanceProgressInfo) SetTypeName(v string) *InstanceProgressInfo {
	s.TypeName = &v
	return s
}

func (s *InstanceProgressInfo) SetData(v string) *InstanceProgressInfo {
	s.Data = &v
	return s
}

// 授权服务数据模型结构体
type DataModel struct {
	// 业务系统唯一标示
	BizUid *string `json:"biz_uid,omitempty" xml:"biz_uid,omitempty"`
	// 空间ID
	SpaceId *string `json:"space_id,omitempty" xml:"space_id,omitempty" require:"true"`
	// 创建时间
	CreateTime *int64 `json:"create_time,omitempty" xml:"create_time,omitempty" require:"true"`
	// 数据模型描述
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// 模型字段详细信息
	FieldDetail *string `json:"field_detail,omitempty" xml:"field_detail,omitempty" require:"true"`
	// 数据模型业务ID
	ModelBizId *string `json:"model_biz_id,omitempty" xml:"model_biz_id,omitempty"`
	// 数据模型ID
	ModelId *string `json:"model_id,omitempty" xml:"model_id,omitempty" require:"true"`
	// 数据模型名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 提交人
	Submitter *Participant `json:"submitter,omitempty" xml:"submitter,omitempty" require:"true"`
	// 更新时间
	UpdateTime *int64 `json:"update_time,omitempty" xml:"update_time,omitempty" require:"true"`
	// 状态
	Status *string `json:"status,omitempty" xml:"status,omitempty" require:"true"`
}

func (s DataModel) String() string {
	return tea.Prettify(s)
}

func (s DataModel) GoString() string {
	return s.String()
}

func (s *DataModel) SetBizUid(v string) *DataModel {
	s.BizUid = &v
	return s
}

func (s *DataModel) SetSpaceId(v string) *DataModel {
	s.SpaceId = &v
	return s
}

func (s *DataModel) SetCreateTime(v int64) *DataModel {
	s.CreateTime = &v
	return s
}

func (s *DataModel) SetDescription(v string) *DataModel {
	s.Description = &v
	return s
}

func (s *DataModel) SetFieldDetail(v string) *DataModel {
	s.FieldDetail = &v
	return s
}

func (s *DataModel) SetModelBizId(v string) *DataModel {
	s.ModelBizId = &v
	return s
}

func (s *DataModel) SetModelId(v string) *DataModel {
	s.ModelId = &v
	return s
}

func (s *DataModel) SetName(v string) *DataModel {
	s.Name = &v
	return s
}

func (s *DataModel) SetSubmitter(v *Participant) *DataModel {
	s.Submitter = v
	return s
}

func (s *DataModel) SetUpdateTime(v int64) *DataModel {
	s.UpdateTime = &v
	return s
}

func (s *DataModel) SetStatus(v string) *DataModel {
	s.Status = &v
	return s
}

// 授权流程节点详细信息
type NodeDetail struct {
	// 节点审批意见
	Comment *string `json:"comment,omitempty" xml:"comment,omitempty" require:"true"`
	// 节点ID
	NodeId *string `json:"node_id,omitempty" xml:"node_id,omitempty" require:"true"`
	// 节点名称
	NodeName *string `json:"node_name,omitempty" xml:"node_name,omitempty" require:"true"`
	// 节点状态
	NodeStatus *string `json:"node_status,omitempty" xml:"node_status,omitempty" require:"true"`
	// 节点审批时间
	OperateTime *int64 `json:"operate_time,omitempty" xml:"operate_time,omitempty" require:"true"`
	// 扩展参数
	ExtensionInfo *string `json:"extension_info,omitempty" xml:"extension_info,omitempty"`
}

func (s NodeDetail) String() string {
	return tea.Prettify(s)
}

func (s NodeDetail) GoString() string {
	return s.String()
}

func (s *NodeDetail) SetComment(v string) *NodeDetail {
	s.Comment = &v
	return s
}

func (s *NodeDetail) SetNodeId(v string) *NodeDetail {
	s.NodeId = &v
	return s
}

func (s *NodeDetail) SetNodeName(v string) *NodeDetail {
	s.NodeName = &v
	return s
}

func (s *NodeDetail) SetNodeStatus(v string) *NodeDetail {
	s.NodeStatus = &v
	return s
}

func (s *NodeDetail) SetOperateTime(v int64) *NodeDetail {
	s.OperateTime = &v
	return s
}

func (s *NodeDetail) SetExtensionInfo(v string) *NodeDetail {
	s.ExtensionInfo = &v
	return s
}

// 合约链配置信息结果
type ContractIdeConfig struct {
	// 合约链的一个已创建的测试账户
	AccountName *string `json:"account_name,omitempty" xml:"account_name,omitempty" require:"true"`
	// 区块链唯一标识
	Bizid *string `json:"bizid,omitempty" xml:"bizid,omitempty" require:"true"`
	// 合约链的名字
	ChainName *string `json:"chain_name,omitempty" xml:"chain_name,omitempty" require:"true"`
	// 目标合约链的host地址
	Host *string `json:"host,omitempty" xml:"host,omitempty" require:"true"`
	// 说明是否开启wasm合约功能
	IsWasm *bool `json:"is_wasm,omitempty" xml:"is_wasm,omitempty"`
	// 目标合约链服务公开的端口号
	Port *string `json:"port,omitempty" xml:"port,omitempty" require:"true"`
	// 合约链已创建的测试账户的密钥
	PrivateKey *string `json:"private_key,omitempty" xml:"private_key,omitempty" require:"true"`
	// 如果是TEE硬件隐私合约链，会包含此字段内容
	RsaPublicKey *string `json:"rsa_public_key,omitempty" xml:"rsa_public_key,omitempty"`
	// 合约链的版本说明
	Version *string `json:"version,omitempty" xml:"version,omitempty"`
}

func (s ContractIdeConfig) String() string {
	return tea.Prettify(s)
}

func (s ContractIdeConfig) GoString() string {
	return s.String()
}

func (s *ContractIdeConfig) SetAccountName(v string) *ContractIdeConfig {
	s.AccountName = &v
	return s
}

func (s *ContractIdeConfig) SetBizid(v string) *ContractIdeConfig {
	s.Bizid = &v
	return s
}

func (s *ContractIdeConfig) SetChainName(v string) *ContractIdeConfig {
	s.ChainName = &v
	return s
}

func (s *ContractIdeConfig) SetHost(v string) *ContractIdeConfig {
	s.Host = &v
	return s
}

func (s *ContractIdeConfig) SetIsWasm(v bool) *ContractIdeConfig {
	s.IsWasm = &v
	return s
}

func (s *ContractIdeConfig) SetPort(v string) *ContractIdeConfig {
	s.Port = &v
	return s
}

func (s *ContractIdeConfig) SetPrivateKey(v string) *ContractIdeConfig {
	s.PrivateKey = &v
	return s
}

func (s *ContractIdeConfig) SetRsaPublicKey(v string) *ContractIdeConfig {
	s.RsaPublicKey = &v
	return s
}

func (s *ContractIdeConfig) SetVersion(v string) *ContractIdeConfig {
	s.Version = &v
	return s
}

// {"key":"value"}
type KeyValuePair struct {
	// 键名
	Key *string `json:"key,omitempty" xml:"key,omitempty" require:"true"`
	// 值
	Value *string `json:"value,omitempty" xml:"value,omitempty" require:"true"`
}

func (s KeyValuePair) String() string {
	return tea.Prettify(s)
}

func (s KeyValuePair) GoString() string {
	return s.String()
}

func (s *KeyValuePair) SetKey(v string) *KeyValuePair {
	s.Key = &v
	return s
}

func (s *KeyValuePair) SetValue(v string) *KeyValuePair {
	s.Value = &v
	return s
}

// 日志存储类型
type TriggerLogDTOStructBody struct {
	// 创建时间
	CreateTime *string `json:"create_time,omitempty" xml:"create_time,omitempty"`
	// 修改时间
	ModifyTime *string `json:"modify_time,omitempty" xml:"modify_time,omitempty"`
	// 状态
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// uuid
	Uuid *string `json:"uuid,omitempty" xml:"uuid,omitempty"`
	// 位置
	Position *PositionStructBody `json:"position,omitempty" xml:"position,omitempty"`
}

func (s TriggerLogDTOStructBody) String() string {
	return tea.Prettify(s)
}

func (s TriggerLogDTOStructBody) GoString() string {
	return s.String()
}

func (s *TriggerLogDTOStructBody) SetCreateTime(v string) *TriggerLogDTOStructBody {
	s.CreateTime = &v
	return s
}

func (s *TriggerLogDTOStructBody) SetModifyTime(v string) *TriggerLogDTOStructBody {
	s.ModifyTime = &v
	return s
}

func (s *TriggerLogDTOStructBody) SetStatus(v string) *TriggerLogDTOStructBody {
	s.Status = &v
	return s
}

func (s *TriggerLogDTOStructBody) SetUuid(v string) *TriggerLogDTOStructBody {
	s.Uuid = &v
	return s
}

func (s *TriggerLogDTOStructBody) SetPosition(v *PositionStructBody) *TriggerLogDTOStructBody {
	s.Position = v
	return s
}

// 合约类型
type ContractTypeListResp struct {
	// 名称
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 值
	Value *string `json:"value,omitempty" xml:"value,omitempty"`
}

func (s ContractTypeListResp) String() string {
	return tea.Prettify(s)
}

func (s ContractTypeListResp) GoString() string {
	return s.String()
}

func (s *ContractTypeListResp) SetName(v string) *ContractTypeListResp {
	s.Name = &v
	return s
}

func (s *ContractTypeListResp) SetValue(v string) *ContractTypeListResp {
	s.Value = &v
	return s
}

// 蚂蚁链浏览器交易信息
type BlockchainBrowserTransaction struct {
	// bizid
	Bizid *string `json:"bizid,omitempty" xml:"bizid,omitempty" require:"true"`
	// block_hash
	BlockHash *string `json:"block_hash,omitempty" xml:"block_hash,omitempty" require:"true"`
	// category
	Category *int64 `json:"category,omitempty" xml:"category,omitempty" require:"true"`
	// create_time
	CreateTime *int64 `json:"create_time,omitempty" xml:"create_time,omitempty" require:"true"`
	// from
	From *string `json:"from,omitempty" xml:"from,omitempty" require:"true"`
	// gas_used
	GasUsed *int64 `json:"gas_used,omitempty" xml:"gas_used,omitempty" require:"true"`
	// hash
	Hash *string `json:"hash,omitempty" xml:"hash,omitempty" require:"true"`
	// height
	Height *int64 `json:"height,omitempty" xml:"height,omitempty" require:"true"`
	// reference_count
	ReferenceCount *int64 `json:"reference_count,omitempty" xml:"reference_count,omitempty" require:"true"`
	// to
	To *string `json:"to,omitempty" xml:"to,omitempty" require:"true"`
	// transaction_type
	TransactionType *string `json:"transaction_type,omitempty" xml:"transaction_type,omitempty" require:"true"`
	// block_version
	BlockVersion *int64 `json:"block_version,omitempty" xml:"block_version,omitempty" require:"true"`
	// blockchain_name
	BlockchainName *string `json:"blockchain_name,omitempty" xml:"blockchain_name,omitempty" require:"true"`
	// blockchain_status
	BlockchainStatus *bool `json:"blockchain_status,omitempty" xml:"blockchain_status,omitempty" require:"true"`
	// content
	Content *string `json:"content,omitempty" xml:"content,omitempty" require:"true"`
	// hash_status
	HashStatus *bool `json:"hash_status,omitempty" xml:"hash_status,omitempty" require:"true"`
	// type
	Type *int64 `json:"type,omitempty" xml:"type,omitempty" require:"true"`
	// transaction_contract
	TransactionContract *BlockchainBrowserTransactionContract `json:"transaction_contract,omitempty" xml:"transaction_contract,omitempty" require:"true"`
}

func (s BlockchainBrowserTransaction) String() string {
	return tea.Prettify(s)
}

func (s BlockchainBrowserTransaction) GoString() string {
	return s.String()
}

func (s *BlockchainBrowserTransaction) SetBizid(v string) *BlockchainBrowserTransaction {
	s.Bizid = &v
	return s
}

func (s *BlockchainBrowserTransaction) SetBlockHash(v string) *BlockchainBrowserTransaction {
	s.BlockHash = &v
	return s
}

func (s *BlockchainBrowserTransaction) SetCategory(v int64) *BlockchainBrowserTransaction {
	s.Category = &v
	return s
}

func (s *BlockchainBrowserTransaction) SetCreateTime(v int64) *BlockchainBrowserTransaction {
	s.CreateTime = &v
	return s
}

func (s *BlockchainBrowserTransaction) SetFrom(v string) *BlockchainBrowserTransaction {
	s.From = &v
	return s
}

func (s *BlockchainBrowserTransaction) SetGasUsed(v int64) *BlockchainBrowserTransaction {
	s.GasUsed = &v
	return s
}

func (s *BlockchainBrowserTransaction) SetHash(v string) *BlockchainBrowserTransaction {
	s.Hash = &v
	return s
}

func (s *BlockchainBrowserTransaction) SetHeight(v int64) *BlockchainBrowserTransaction {
	s.Height = &v
	return s
}

func (s *BlockchainBrowserTransaction) SetReferenceCount(v int64) *BlockchainBrowserTransaction {
	s.ReferenceCount = &v
	return s
}

func (s *BlockchainBrowserTransaction) SetTo(v string) *BlockchainBrowserTransaction {
	s.To = &v
	return s
}

func (s *BlockchainBrowserTransaction) SetTransactionType(v string) *BlockchainBrowserTransaction {
	s.TransactionType = &v
	return s
}

func (s *BlockchainBrowserTransaction) SetBlockVersion(v int64) *BlockchainBrowserTransaction {
	s.BlockVersion = &v
	return s
}

func (s *BlockchainBrowserTransaction) SetBlockchainName(v string) *BlockchainBrowserTransaction {
	s.BlockchainName = &v
	return s
}

func (s *BlockchainBrowserTransaction) SetBlockchainStatus(v bool) *BlockchainBrowserTransaction {
	s.BlockchainStatus = &v
	return s
}

func (s *BlockchainBrowserTransaction) SetContent(v string) *BlockchainBrowserTransaction {
	s.Content = &v
	return s
}

func (s *BlockchainBrowserTransaction) SetHashStatus(v bool) *BlockchainBrowserTransaction {
	s.HashStatus = &v
	return s
}

func (s *BlockchainBrowserTransaction) SetType(v int64) *BlockchainBrowserTransaction {
	s.Type = &v
	return s
}

func (s *BlockchainBrowserTransaction) SetTransactionContract(v *BlockchainBrowserTransactionContract) *BlockchainBrowserTransaction {
	s.TransactionContract = v
	return s
}

// 阿里云蚂蚁链相关下载链接
type ALiYunDownloadPath struct {
	// client_crt_url
	ClientCrtUrl *string `json:"client_crt_url,omitempty" xml:"client_crt_url,omitempty"`
	// trust_ca_url
	TrustCaUrl *string `json:"trust_ca_url,omitempty" xml:"trust_ca_url,omitempty"`
	// ca_crt_url
	CaCrtUrl *string `json:"ca_crt_url,omitempty" xml:"ca_crt_url,omitempty"`
	// sdk_url
	SdkUrl *string `json:"sdk_url,omitempty" xml:"sdk_url,omitempty"`
}

func (s ALiYunDownloadPath) String() string {
	return tea.Prettify(s)
}

func (s ALiYunDownloadPath) GoString() string {
	return s.String()
}

func (s *ALiYunDownloadPath) SetClientCrtUrl(v string) *ALiYunDownloadPath {
	s.ClientCrtUrl = &v
	return s
}

func (s *ALiYunDownloadPath) SetTrustCaUrl(v string) *ALiYunDownloadPath {
	s.TrustCaUrl = &v
	return s
}

func (s *ALiYunDownloadPath) SetCaCrtUrl(v string) *ALiYunDownloadPath {
	s.CaCrtUrl = &v
	return s
}

func (s *ALiYunDownloadPath) SetSdkUrl(v string) *ALiYunDownloadPath {
	s.SdkUrl = &v
	return s
}

// 阿里云子链结构体
type ALiYunChainSubnet struct {
	// 子链id
	AntChainId *string `json:"ant_chain_id,omitempty" xml:"ant_chain_id,omitempty"`
	// 子链名称
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 子链节点数
	NodeSum *int64 `json:"node_sum,omitempty" xml:"node_sum,omitempty"`
	// 子链监控状态
	Monitor *bool `json:"monitor,omitempty" xml:"monitor,omitempty"`
	// 子链的块高
	BlockHeight *string `json:"block_height,omitempty" xml:"block_height,omitempty"`
	// 子链的业务总数
	TransactionSum *int64 `json:"transaction_sum,omitempty" xml:"transaction_sum,omitempty"`
	// 子链的创建时间
	CreateTime *int64 `json:"create_time,omitempty" xml:"create_time,omitempty"`
	// 子链的状态
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// 子链的权限
	ConsortiumMember *bool `json:"consortium_member,omitempty" xml:"consortium_member,omitempty"`
	// 主链id
	MainChainId *string `json:"main_chain_id,omitempty" xml:"main_chain_id,omitempty"`
	// rest申请状态
	Rest *string `json:"rest,omitempty" xml:"rest,omitempty"`
	// 子链序号
	GroupId *string `json:"group_id,omitempty" xml:"group_id,omitempty"`
}

func (s ALiYunChainSubnet) String() string {
	return tea.Prettify(s)
}

func (s ALiYunChainSubnet) GoString() string {
	return s.String()
}

func (s *ALiYunChainSubnet) SetAntChainId(v string) *ALiYunChainSubnet {
	s.AntChainId = &v
	return s
}

func (s *ALiYunChainSubnet) SetName(v string) *ALiYunChainSubnet {
	s.Name = &v
	return s
}

func (s *ALiYunChainSubnet) SetNodeSum(v int64) *ALiYunChainSubnet {
	s.NodeSum = &v
	return s
}

func (s *ALiYunChainSubnet) SetMonitor(v bool) *ALiYunChainSubnet {
	s.Monitor = &v
	return s
}

func (s *ALiYunChainSubnet) SetBlockHeight(v string) *ALiYunChainSubnet {
	s.BlockHeight = &v
	return s
}

func (s *ALiYunChainSubnet) SetTransactionSum(v int64) *ALiYunChainSubnet {
	s.TransactionSum = &v
	return s
}

func (s *ALiYunChainSubnet) SetCreateTime(v int64) *ALiYunChainSubnet {
	s.CreateTime = &v
	return s
}

func (s *ALiYunChainSubnet) SetStatus(v string) *ALiYunChainSubnet {
	s.Status = &v
	return s
}

func (s *ALiYunChainSubnet) SetConsortiumMember(v bool) *ALiYunChainSubnet {
	s.ConsortiumMember = &v
	return s
}

func (s *ALiYunChainSubnet) SetMainChainId(v string) *ALiYunChainSubnet {
	s.MainChainId = &v
	return s
}

func (s *ALiYunChainSubnet) SetRest(v string) *ALiYunChainSubnet {
	s.Rest = &v
	return s
}

func (s *ALiYunChainSubnet) SetGroupId(v string) *ALiYunChainSubnet {
	s.GroupId = &v
	return s
}

// Did doc中的service info
type DidServiceInfo struct {
	// 服务的end point info
	EndPoint *string `json:"end_point,omitempty" xml:"end_point,omitempty" require:"true"`
	// 扩展字段信息
	ExtensionInfo *string `json:"extension_info,omitempty" xml:"extension_info,omitempty" require:"true"`
}

func (s DidServiceInfo) String() string {
	return tea.Prettify(s)
}

func (s DidServiceInfo) GoString() string {
	return s.String()
}

func (s *DidServiceInfo) SetEndPoint(v string) *DidServiceInfo {
	s.EndPoint = &v
	return s
}

func (s *DidServiceInfo) SetExtensionInfo(v string) *DidServiceInfo {
	s.ExtensionInfo = &v
	return s
}

// 实例最近调用记录
type InstanceRecordInfo struct {
	// 应用标识
	Application *string `json:"application,omitempty" xml:"application,omitempty"`
	// 执行结果
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// 操作时间
	OperatingTime *string `json:"operating_time,omitempty" xml:"operating_time,omitempty"`
}

func (s InstanceRecordInfo) String() string {
	return tea.Prettify(s)
}

func (s InstanceRecordInfo) GoString() string {
	return s.String()
}

func (s *InstanceRecordInfo) SetApplication(v string) *InstanceRecordInfo {
	s.Application = &v
	return s
}

func (s *InstanceRecordInfo) SetStatus(v string) *InstanceRecordInfo {
	s.Status = &v
	return s
}

func (s *InstanceRecordInfo) SetOperatingTime(v string) *InstanceRecordInfo {
	s.OperatingTime = &v
	return s
}

// 阿里云账户信息
type ALiYunAccount struct {
	// ant_chain_id
	AntChainId *string `json:"ant_chain_id,omitempty" xml:"ant_chain_id,omitempty"`
	// account
	Account *string `json:"account,omitempty" xml:"account,omitempty"`
	// account_public_key
	AccountPublicKey *string `json:"account_public_key,omitempty" xml:"account_public_key,omitempty"`
	// account_recovery_key
	AccountRecoveryKey *string `json:"account_recovery_key,omitempty" xml:"account_recovery_key,omitempty"`
	// account_status
	AccountStatus *string `json:"account_status,omitempty" xml:"account_status,omitempty"`
	// 机构信息
	MemberName *string `json:"member_name,omitempty" xml:"member_name,omitempty"`
	// 创建时间
	CreateTime *int64 `json:"create_time,omitempty" xml:"create_time,omitempty"`
}

func (s ALiYunAccount) String() string {
	return tea.Prettify(s)
}

func (s ALiYunAccount) GoString() string {
	return s.String()
}

func (s *ALiYunAccount) SetAntChainId(v string) *ALiYunAccount {
	s.AntChainId = &v
	return s
}

func (s *ALiYunAccount) SetAccount(v string) *ALiYunAccount {
	s.Account = &v
	return s
}

func (s *ALiYunAccount) SetAccountPublicKey(v string) *ALiYunAccount {
	s.AccountPublicKey = &v
	return s
}

func (s *ALiYunAccount) SetAccountRecoveryKey(v string) *ALiYunAccount {
	s.AccountRecoveryKey = &v
	return s
}

func (s *ALiYunAccount) SetAccountStatus(v string) *ALiYunAccount {
	s.AccountStatus = &v
	return s
}

func (s *ALiYunAccount) SetMemberName(v string) *ALiYunAccount {
	s.MemberName = &v
	return s
}

func (s *ALiYunAccount) SetCreateTime(v int64) *ALiYunAccount {
	s.CreateTime = &v
	return s
}

// 阿里云链节点信息
type ALiYunChainNodeInfo struct {
	// block_height
	BlockHeight *int64 `json:"block_height,omitempty" xml:"block_height,omitempty"`
	// node_name
	NodeName *string `json:"node_name,omitempty" xml:"node_name,omitempty"`
	// status
	Status *bool `json:"status,omitempty" xml:"status,omitempty"`
	// version
	Version *string `json:"version,omitempty" xml:"version,omitempty"`
	// 节点id
	NodeId *string `json:"node_id,omitempty" xml:"node_id,omitempty"`
	// 节点ip
	NodeIp *string `json:"node_ip,omitempty" xml:"node_ip,omitempty"`
	// 节点的端口
	NodePort *string `json:"node_port,omitempty" xml:"node_port,omitempty"`
	// 节点类型
	NodeType *string `json:"node_type,omitempty" xml:"node_type,omitempty"`
	// 节点状态
	NodeState *string `json:"node_state,omitempty" xml:"node_state,omitempty"`
	// 节点来源
	NodeSource *string `json:"node_source,omitempty" xml:"node_source,omitempty"`
	// 节点存储空间使用量
	DiskUse *string `json:"disk_use,omitempty" xml:"disk_use,omitempty"`
	// 节点存储总空间大小
	DiskTotal *string `json:"disk_total,omitempty" xml:"disk_total,omitempty"`
	// 节点公钥
	PublicKey *string `json:"public_key,omitempty" xml:"public_key,omitempty"`
}

func (s ALiYunChainNodeInfo) String() string {
	return tea.Prettify(s)
}

func (s ALiYunChainNodeInfo) GoString() string {
	return s.String()
}

func (s *ALiYunChainNodeInfo) SetBlockHeight(v int64) *ALiYunChainNodeInfo {
	s.BlockHeight = &v
	return s
}

func (s *ALiYunChainNodeInfo) SetNodeName(v string) *ALiYunChainNodeInfo {
	s.NodeName = &v
	return s
}

func (s *ALiYunChainNodeInfo) SetStatus(v bool) *ALiYunChainNodeInfo {
	s.Status = &v
	return s
}

func (s *ALiYunChainNodeInfo) SetVersion(v string) *ALiYunChainNodeInfo {
	s.Version = &v
	return s
}

func (s *ALiYunChainNodeInfo) SetNodeId(v string) *ALiYunChainNodeInfo {
	s.NodeId = &v
	return s
}

func (s *ALiYunChainNodeInfo) SetNodeIp(v string) *ALiYunChainNodeInfo {
	s.NodeIp = &v
	return s
}

func (s *ALiYunChainNodeInfo) SetNodePort(v string) *ALiYunChainNodeInfo {
	s.NodePort = &v
	return s
}

func (s *ALiYunChainNodeInfo) SetNodeType(v string) *ALiYunChainNodeInfo {
	s.NodeType = &v
	return s
}

func (s *ALiYunChainNodeInfo) SetNodeState(v string) *ALiYunChainNodeInfo {
	s.NodeState = &v
	return s
}

func (s *ALiYunChainNodeInfo) SetNodeSource(v string) *ALiYunChainNodeInfo {
	s.NodeSource = &v
	return s
}

func (s *ALiYunChainNodeInfo) SetDiskUse(v string) *ALiYunChainNodeInfo {
	s.DiskUse = &v
	return s
}

func (s *ALiYunChainNodeInfo) SetDiskTotal(v string) *ALiYunChainNodeInfo {
	s.DiskTotal = &v
	return s
}

func (s *ALiYunChainNodeInfo) SetPublicKey(v string) *ALiYunChainNodeInfo {
	s.PublicKey = &v
	return s
}

// VC可信传输时，指定的目标did信息
type VcTransmitTargetStruct struct {
	// 目标did的公钥
	PublicKey *string `json:"public_key,omitempty" xml:"public_key,omitempty"`
	// 传输vc使用的区块链id
	VcChannel *string `json:"vc_channel,omitempty" xml:"vc_channel,omitempty" maxLength:"32" minLength:"8"`
	// 验证者did
	VerifierDid *string `json:"verifier_did,omitempty" xml:"verifier_did,omitempty" require:"true"`
}

func (s VcTransmitTargetStruct) String() string {
	return tea.Prettify(s)
}

func (s VcTransmitTargetStruct) GoString() string {
	return s.String()
}

func (s *VcTransmitTargetStruct) SetPublicKey(v string) *VcTransmitTargetStruct {
	s.PublicKey = &v
	return s
}

func (s *VcTransmitTargetStruct) SetVcChannel(v string) *VcTransmitTargetStruct {
	s.VcChannel = &v
	return s
}

func (s *VcTransmitTargetStruct) SetVerifierDid(v string) *VcTransmitTargetStruct {
	s.VerifierDid = &v
	return s
}

// 人群标签对象
type CrowdTagEnumItemDTO struct {
	// 枚举名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 枚举值
	Val *string `json:"val,omitempty" xml:"val,omitempty" require:"true"`
}

func (s CrowdTagEnumItemDTO) String() string {
	return tea.Prettify(s)
}

func (s CrowdTagEnumItemDTO) GoString() string {
	return s.String()
}

func (s *CrowdTagEnumItemDTO) SetName(v string) *CrowdTagEnumItemDTO {
	s.Name = &v
	return s
}

func (s *CrowdTagEnumItemDTO) SetVal(v string) *CrowdTagEnumItemDTO {
	s.Val = &v
	return s
}

// 阿里云交易查询信息
type ALiYunTransaction struct {
	// tx_type
	TxType *string `json:"tx_type,omitempty" xml:"tx_type,omitempty"`
	// data
	Data *string `json:"data,omitempty" xml:"data,omitempty"`
	// hash
	Hash *string `json:"hash,omitempty" xml:"hash,omitempty"`
	// from
	From *string `json:"from,omitempty" xml:"from,omitempty"`
	// to
	To *string `json:"to,omitempty" xml:"to,omitempty"`
	// timestamp
	Timestamp *int64 `json:"timestamp,omitempty" xml:"timestamp,omitempty"`
	// period
	Period *int64 `json:"period,omitempty" xml:"period,omitempty"`
	// nonce
	Nonce *string `json:"nonce,omitempty" xml:"nonce,omitempty"`
	// gas
	Gas *string `json:"gas,omitempty" xml:"gas,omitempty"`
	// value
	Value *string `json:"value,omitempty" xml:"value,omitempty"`
	// signatures
	Signatures []*string `json:"signatures,omitempty" xml:"signatures,omitempty" type:"Repeated"`
	// extentions
	Extentions []*string `json:"extentions,omitempty" xml:"extentions,omitempty" type:"Repeated"`
}

func (s ALiYunTransaction) String() string {
	return tea.Prettify(s)
}

func (s ALiYunTransaction) GoString() string {
	return s.String()
}

func (s *ALiYunTransaction) SetTxType(v string) *ALiYunTransaction {
	s.TxType = &v
	return s
}

func (s *ALiYunTransaction) SetData(v string) *ALiYunTransaction {
	s.Data = &v
	return s
}

func (s *ALiYunTransaction) SetHash(v string) *ALiYunTransaction {
	s.Hash = &v
	return s
}

func (s *ALiYunTransaction) SetFrom(v string) *ALiYunTransaction {
	s.From = &v
	return s
}

func (s *ALiYunTransaction) SetTo(v string) *ALiYunTransaction {
	s.To = &v
	return s
}

func (s *ALiYunTransaction) SetTimestamp(v int64) *ALiYunTransaction {
	s.Timestamp = &v
	return s
}

func (s *ALiYunTransaction) SetPeriod(v int64) *ALiYunTransaction {
	s.Period = &v
	return s
}

func (s *ALiYunTransaction) SetNonce(v string) *ALiYunTransaction {
	s.Nonce = &v
	return s
}

func (s *ALiYunTransaction) SetGas(v string) *ALiYunTransaction {
	s.Gas = &v
	return s
}

func (s *ALiYunTransaction) SetValue(v string) *ALiYunTransaction {
	s.Value = &v
	return s
}

func (s *ALiYunTransaction) SetSignatures(v []*string) *ALiYunTransaction {
	s.Signatures = v
	return s
}

func (s *ALiYunTransaction) SetExtentions(v []*string) *ALiYunTransaction {
	s.Extentions = v
	return s
}

// 阿里云存证链信息
type ALiYunNotaryBlockchain struct {
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// bizid
	Bizid *string `json:"bizid,omitempty" xml:"bizid,omitempty"`
	// chain_type
	ChainType *string `json:"chain_type,omitempty" xml:"chain_type,omitempty"`
	// node_num
	NodeNum *int64 `json:"node_num,omitempty" xml:"node_num,omitempty"`
	// member_status
	MemberStatus *string `json:"member_status,omitempty" xml:"member_status,omitempty"`
	// block_height
	BlockHeight *int64 `json:"block_height,omitempty" xml:"block_height,omitempty"`
	// transactions
	Transactions *int64 `json:"transactions,omitempty" xml:"transactions,omitempty"`
	// network
	Network *string `json:"network,omitempty" xml:"network,omitempty"`
	// version
	Version *string `json:"version,omitempty" xml:"version,omitempty"`
}

func (s ALiYunNotaryBlockchain) String() string {
	return tea.Prettify(s)
}

func (s ALiYunNotaryBlockchain) GoString() string {
	return s.String()
}

func (s *ALiYunNotaryBlockchain) SetName(v string) *ALiYunNotaryBlockchain {
	s.Name = &v
	return s
}

func (s *ALiYunNotaryBlockchain) SetBizid(v string) *ALiYunNotaryBlockchain {
	s.Bizid = &v
	return s
}

func (s *ALiYunNotaryBlockchain) SetChainType(v string) *ALiYunNotaryBlockchain {
	s.ChainType = &v
	return s
}

func (s *ALiYunNotaryBlockchain) SetNodeNum(v int64) *ALiYunNotaryBlockchain {
	s.NodeNum = &v
	return s
}

func (s *ALiYunNotaryBlockchain) SetMemberStatus(v string) *ALiYunNotaryBlockchain {
	s.MemberStatus = &v
	return s
}

func (s *ALiYunNotaryBlockchain) SetBlockHeight(v int64) *ALiYunNotaryBlockchain {
	s.BlockHeight = &v
	return s
}

func (s *ALiYunNotaryBlockchain) SetTransactions(v int64) *ALiYunNotaryBlockchain {
	s.Transactions = &v
	return s
}

func (s *ALiYunNotaryBlockchain) SetNetwork(v string) *ALiYunNotaryBlockchain {
	s.Network = &v
	return s
}

func (s *ALiYunNotaryBlockchain) SetVersion(v string) *ALiYunNotaryBlockchain {
	s.Version = &v
	return s
}

// 合约市场列表
type ContractTemplateResp struct {
	// 模板标识
	TemplateId *string `json:"template_id,omitempty" xml:"template_id,omitempty"`
	// 产品码
	ProductCode *string `json:"product_code,omitempty" xml:"product_code,omitempty"`
	// 合约名称
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 缩略图url
	ThumbUrl *string `json:"thumb_url,omitempty" xml:"thumb_url,omitempty"`
	// 合约描述
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// 文档地址
	DetailUrl *string `json:"detail_url,omitempty" xml:"detail_url,omitempty"`
	// 是否已开通合约
	Open *bool `json:"open,omitempty" xml:"open,omitempty"`
	// 后续展示：购买用户头像
	AvatarLogoList []*string `json:"avatar_logo_list,omitempty" xml:"avatar_logo_list,omitempty" type:"Repeated"`
	// 定制合约价格
	PriceMessage *string `json:"price_message,omitempty" xml:"price_message,omitempty"`
}

func (s ContractTemplateResp) String() string {
	return tea.Prettify(s)
}

func (s ContractTemplateResp) GoString() string {
	return s.String()
}

func (s *ContractTemplateResp) SetTemplateId(v string) *ContractTemplateResp {
	s.TemplateId = &v
	return s
}

func (s *ContractTemplateResp) SetProductCode(v string) *ContractTemplateResp {
	s.ProductCode = &v
	return s
}

func (s *ContractTemplateResp) SetName(v string) *ContractTemplateResp {
	s.Name = &v
	return s
}

func (s *ContractTemplateResp) SetThumbUrl(v string) *ContractTemplateResp {
	s.ThumbUrl = &v
	return s
}

func (s *ContractTemplateResp) SetDescription(v string) *ContractTemplateResp {
	s.Description = &v
	return s
}

func (s *ContractTemplateResp) SetDetailUrl(v string) *ContractTemplateResp {
	s.DetailUrl = &v
	return s
}

func (s *ContractTemplateResp) SetOpen(v bool) *ContractTemplateResp {
	s.Open = &v
	return s
}

func (s *ContractTemplateResp) SetAvatarLogoList(v []*string) *ContractTemplateResp {
	s.AvatarLogoList = v
	return s
}

func (s *ContractTemplateResp) SetPriceMessage(v string) *ContractTemplateResp {
	s.PriceMessage = &v
	return s
}

// 数据授权服务数据对象结构体
type DataEntity struct {
	// 授权状态
	AuthStatus *string `json:"auth_status,omitempty" xml:"auth_status,omitempty"`
	// 业务系统唯一标示
	BizUid *string `json:"biz_uid,omitempty" xml:"biz_uid,omitempty" maxLength:"64"`
	// 区块链ID
	BlockchainId *string `json:"blockchain_id,omitempty" xml:"blockchain_id,omitempty"`
	// 数据类别
	Category *string `json:"category,omitempty" xml:"category,omitempty" require:"true" maxLength:"32"`
	// 数据ID
	DataId *string `json:"data_id,omitempty" xml:"data_id,omitempty" require:"true" maxLength:"100"`
	// 数据模型ID
	DataModelId *string `json:"data_model_id,omitempty" xml:"data_model_id,omitempty"`
	// 扩展信息，标准JSON格式
	ExtensionInfo *string `json:"extension_info,omitempty" xml:"extension_info,omitempty"`
	// 数据名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true" maxLength:"64"`
	// 数据所有者ID
	OwnerId *string `json:"owner_id,omitempty" xml:"owner_id,omitempty" require:"true" maxLength:"100"`
	// 流程节点信息
	ProcessTemplate []*ProcessNode `json:"process_template,omitempty" xml:"process_template,omitempty" type:"Repeated"`
	// 数据状态
	Status *string `json:"status,omitempty" xml:"status,omitempty" maxLength:"16"`
	// 创建时间
	CreateTime *int64 `json:"create_time,omitempty" xml:"create_time,omitempty" require:"true"`
	// 修改时间
	UpdateTime *int64 `json:"update_time,omitempty" xml:"update_time,omitempty"`
	// DID doc里的公开信息
	PublicInfo *string `json:"public_info,omitempty" xml:"public_info,omitempty"`
}

func (s DataEntity) String() string {
	return tea.Prettify(s)
}

func (s DataEntity) GoString() string {
	return s.String()
}

func (s *DataEntity) SetAuthStatus(v string) *DataEntity {
	s.AuthStatus = &v
	return s
}

func (s *DataEntity) SetBizUid(v string) *DataEntity {
	s.BizUid = &v
	return s
}

func (s *DataEntity) SetBlockchainId(v string) *DataEntity {
	s.BlockchainId = &v
	return s
}

func (s *DataEntity) SetCategory(v string) *DataEntity {
	s.Category = &v
	return s
}

func (s *DataEntity) SetDataId(v string) *DataEntity {
	s.DataId = &v
	return s
}

func (s *DataEntity) SetDataModelId(v string) *DataEntity {
	s.DataModelId = &v
	return s
}

func (s *DataEntity) SetExtensionInfo(v string) *DataEntity {
	s.ExtensionInfo = &v
	return s
}

func (s *DataEntity) SetName(v string) *DataEntity {
	s.Name = &v
	return s
}

func (s *DataEntity) SetOwnerId(v string) *DataEntity {
	s.OwnerId = &v
	return s
}

func (s *DataEntity) SetProcessTemplate(v []*ProcessNode) *DataEntity {
	s.ProcessTemplate = v
	return s
}

func (s *DataEntity) SetStatus(v string) *DataEntity {
	s.Status = &v
	return s
}

func (s *DataEntity) SetCreateTime(v int64) *DataEntity {
	s.CreateTime = &v
	return s
}

func (s *DataEntity) SetUpdateTime(v int64) *DataEntity {
	s.UpdateTime = &v
	return s
}

func (s *DataEntity) SetPublicInfo(v string) *DataEntity {
	s.PublicInfo = &v
	return s
}

// 阿里云蚂蚁链对象
type ALiYunAntChain struct {
	// ant_chain_id
	AntChainId *string `json:"ant_chain_id,omitempty" xml:"ant_chain_id,omitempty"`
	// 链名称
	AntChainName *string `json:"ant_chain_name,omitempty" xml:"ant_chain_name,omitempty"`
	// 链的类型
	ChainType *string `json:"chain_type,omitempty" xml:"chain_type,omitempty"`
	// cipher_suit
	CipherSuit *string `json:"cipher_suit,omitempty" xml:"cipher_suit,omitempty"`
	// 创建时间
	CreateTime *int64 `json:"create_time,omitempty" xml:"create_time,omitempty"`
	// expire_time
	ExpireTime *int64 `json:"expire_time,omitempty" xml:"expire_time,omitempty"`
	// instance_id
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty"`
	// is_admin
	IsAdmin *bool `json:"is_admin,omitempty" xml:"is_admin,omitempty"`
	// 成员状态
	MemberStatus *string `json:"member_status,omitempty" xml:"member_status,omitempty"`
	// merkle_tree_suit
	MerkleTreeSuit *string `json:"merkle_tree_suit,omitempty" xml:"merkle_tree_suit,omitempty"`
	// Network
	Network *string `json:"network,omitempty" xml:"network,omitempty"`
	// 节点数
	NodeNum *int64 `json:"node_num,omitempty" xml:"node_num,omitempty"`
	// 区域信息
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty"`
	// 链的资源大小
	ResourceSize *string `json:"resource_size,omitempty" xml:"resource_size,omitempty"`
	// rest_status
	RestStatus *string `json:"rest_status,omitempty" xml:"rest_status,omitempty"`
	// 算法参数
	TlsAlgo *string `json:"tls_algo,omitempty" xml:"tls_algo,omitempty"`
	// 版本信息
	Version *string `json:"version,omitempty" xml:"version,omitempty"`
	// monitor_status
	MonitorStatus *bool `json:"monitor_status,omitempty" xml:"monitor_status,omitempty"`
}

func (s ALiYunAntChain) String() string {
	return tea.Prettify(s)
}

func (s ALiYunAntChain) GoString() string {
	return s.String()
}

func (s *ALiYunAntChain) SetAntChainId(v string) *ALiYunAntChain {
	s.AntChainId = &v
	return s
}

func (s *ALiYunAntChain) SetAntChainName(v string) *ALiYunAntChain {
	s.AntChainName = &v
	return s
}

func (s *ALiYunAntChain) SetChainType(v string) *ALiYunAntChain {
	s.ChainType = &v
	return s
}

func (s *ALiYunAntChain) SetCipherSuit(v string) *ALiYunAntChain {
	s.CipherSuit = &v
	return s
}

func (s *ALiYunAntChain) SetCreateTime(v int64) *ALiYunAntChain {
	s.CreateTime = &v
	return s
}

func (s *ALiYunAntChain) SetExpireTime(v int64) *ALiYunAntChain {
	s.ExpireTime = &v
	return s
}

func (s *ALiYunAntChain) SetInstanceId(v string) *ALiYunAntChain {
	s.InstanceId = &v
	return s
}

func (s *ALiYunAntChain) SetIsAdmin(v bool) *ALiYunAntChain {
	s.IsAdmin = &v
	return s
}

func (s *ALiYunAntChain) SetMemberStatus(v string) *ALiYunAntChain {
	s.MemberStatus = &v
	return s
}

func (s *ALiYunAntChain) SetMerkleTreeSuit(v string) *ALiYunAntChain {
	s.MerkleTreeSuit = &v
	return s
}

func (s *ALiYunAntChain) SetNetwork(v string) *ALiYunAntChain {
	s.Network = &v
	return s
}

func (s *ALiYunAntChain) SetNodeNum(v int64) *ALiYunAntChain {
	s.NodeNum = &v
	return s
}

func (s *ALiYunAntChain) SetRegionId(v string) *ALiYunAntChain {
	s.RegionId = &v
	return s
}

func (s *ALiYunAntChain) SetResourceSize(v string) *ALiYunAntChain {
	s.ResourceSize = &v
	return s
}

func (s *ALiYunAntChain) SetRestStatus(v string) *ALiYunAntChain {
	s.RestStatus = &v
	return s
}

func (s *ALiYunAntChain) SetTlsAlgo(v string) *ALiYunAntChain {
	s.TlsAlgo = &v
	return s
}

func (s *ALiYunAntChain) SetVersion(v string) *ALiYunAntChain {
	s.Version = &v
	return s
}

func (s *ALiYunAntChain) SetMonitorStatus(v bool) *ALiYunAntChain {
	s.MonitorStatus = &v
	return s
}

// Did Doc中的服务字段描述
type DidDocServicesInfo struct {
	// 服务的扩展字段
	Extension *string `json:"extension,omitempty" xml:"extension,omitempty"`
	// 服务ID，必须保证该服务ID在did doc中是唯一的。对于保留类型服务：
	// DidAuthService， 有且只能有一个，并且id必须为didauth-1；
	// VerifiableClaimRepository， 有且只有一个，并且id必须为vcrepository-1;
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 服务的可访问地址
	ServiceEndpoint *string `json:"service_endpoint,omitempty" xml:"service_endpoint,omitempty" require:"true"`
	// 服务类型，必须是已经注册的服务类型，或者是默认保留的服务类型
	Type *string `json:"type,omitempty" xml:"type,omitempty" require:"true"`
}

func (s DidDocServicesInfo) String() string {
	return tea.Prettify(s)
}

func (s DidDocServicesInfo) GoString() string {
	return s.String()
}

func (s *DidDocServicesInfo) SetExtension(v string) *DidDocServicesInfo {
	s.Extension = &v
	return s
}

func (s *DidDocServicesInfo) SetId(v string) *DidDocServicesInfo {
	s.Id = &v
	return s
}

func (s *DidDocServicesInfo) SetServiceEndpoint(v string) *DidDocServicesInfo {
	s.ServiceEndpoint = &v
	return s
}

func (s *DidDocServicesInfo) SetType(v string) *DidDocServicesInfo {
	s.Type = &v
	return s
}

// 阿里云蚂蚁区块链证书信息
type ALiYunCertificateApplication struct {
	// ant_chain_id
	AntChainId *string `json:"ant_chain_id,omitempty" xml:"ant_chain_id,omitempty"`
	// username
	Username *string `json:"username,omitempty" xml:"username,omitempty"`
	// createtime
	Createtime *int64 `json:"createtime,omitempty" xml:"createtime,omitempty"`
	// updatetime
	Updatetime *int64 `json:"updatetime,omitempty" xml:"updatetime,omitempty"`
	// bid
	Bid *string `json:"bid,omitempty" xml:"bid,omitempty"`
	// status
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
}

func (s ALiYunCertificateApplication) String() string {
	return tea.Prettify(s)
}

func (s ALiYunCertificateApplication) GoString() string {
	return s.String()
}

func (s *ALiYunCertificateApplication) SetAntChainId(v string) *ALiYunCertificateApplication {
	s.AntChainId = &v
	return s
}

func (s *ALiYunCertificateApplication) SetUsername(v string) *ALiYunCertificateApplication {
	s.Username = &v
	return s
}

func (s *ALiYunCertificateApplication) SetCreatetime(v int64) *ALiYunCertificateApplication {
	s.Createtime = &v
	return s
}

func (s *ALiYunCertificateApplication) SetUpdatetime(v int64) *ALiYunCertificateApplication {
	s.Updatetime = &v
	return s
}

func (s *ALiYunCertificateApplication) SetBid(v string) *ALiYunCertificateApplication {
	s.Bid = &v
	return s
}

func (s *ALiYunCertificateApplication) SetStatus(v string) *ALiYunCertificateApplication {
	s.Status = &v
	return s
}

// DidDoc中service的信息
type DisServicesInfo struct {
	// did doc service扩展字段
	Extesion *string `json:"extesion,omitempty" xml:"extesion,omitempty"`
	// did doc service id
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 服务endpoint
	ServiceEndpoint *string `json:"service_endpoint,omitempty" xml:"service_endpoint,omitempty" require:"true"`
	// service type
	Type *string `json:"type,omitempty" xml:"type,omitempty" require:"true"`
	// EXIST
	// CONFLICT
	// VALID
	// INVALID
	Desc *string `json:"desc,omitempty" xml:"desc,omitempty"`
}

func (s DisServicesInfo) String() string {
	return tea.Prettify(s)
}

func (s DisServicesInfo) GoString() string {
	return s.String()
}

func (s *DisServicesInfo) SetExtesion(v string) *DisServicesInfo {
	s.Extesion = &v
	return s
}

func (s *DisServicesInfo) SetId(v string) *DisServicesInfo {
	s.Id = &v
	return s
}

func (s *DisServicesInfo) SetServiceEndpoint(v string) *DisServicesInfo {
	s.ServiceEndpoint = &v
	return s
}

func (s *DisServicesInfo) SetType(v string) *DisServicesInfo {
	s.Type = &v
	return s
}

func (s *DisServicesInfo) SetDesc(v string) *DisServicesInfo {
	s.Desc = &v
	return s
}

// 阿里云合约链信息
type ALiYunContractBlockchain struct {
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// bizid
	Bizid *string `json:"bizid,omitempty" xml:"bizid,omitempty"`
	// chain_type
	ChainType *string `json:"chain_type,omitempty" xml:"chain_type,omitempty"`
	// node_num
	NodeNum *int64 `json:"node_num,omitempty" xml:"node_num,omitempty"`
	// member_status
	MemberStatus *string `json:"member_status,omitempty" xml:"member_status,omitempty"`
	// block_height
	BlockHeight *int64 `json:"block_height,omitempty" xml:"block_height,omitempty"`
	// transactions
	Transactions *int64 `json:"transactions,omitempty" xml:"transactions,omitempty"`
	// network
	Network *string `json:"network,omitempty" xml:"network,omitempty"`
	// version
	Version *string `json:"version,omitempty" xml:"version,omitempty"`
}

func (s ALiYunContractBlockchain) String() string {
	return tea.Prettify(s)
}

func (s ALiYunContractBlockchain) GoString() string {
	return s.String()
}

func (s *ALiYunContractBlockchain) SetName(v string) *ALiYunContractBlockchain {
	s.Name = &v
	return s
}

func (s *ALiYunContractBlockchain) SetBizid(v string) *ALiYunContractBlockchain {
	s.Bizid = &v
	return s
}

func (s *ALiYunContractBlockchain) SetChainType(v string) *ALiYunContractBlockchain {
	s.ChainType = &v
	return s
}

func (s *ALiYunContractBlockchain) SetNodeNum(v int64) *ALiYunContractBlockchain {
	s.NodeNum = &v
	return s
}

func (s *ALiYunContractBlockchain) SetMemberStatus(v string) *ALiYunContractBlockchain {
	s.MemberStatus = &v
	return s
}

func (s *ALiYunContractBlockchain) SetBlockHeight(v int64) *ALiYunContractBlockchain {
	s.BlockHeight = &v
	return s
}

func (s *ALiYunContractBlockchain) SetTransactions(v int64) *ALiYunContractBlockchain {
	s.Transactions = &v
	return s
}

func (s *ALiYunContractBlockchain) SetNetwork(v string) *ALiYunContractBlockchain {
	s.Network = &v
	return s
}

func (s *ALiYunContractBlockchain) SetVersion(v string) *ALiYunContractBlockchain {
	s.Version = &v
	return s
}

// 阿里云区块链小程序用户权限信息
type ALiYunChainMiniAppAuthorizedUser struct {
	// phone
	Phone *string `json:"phone,omitempty" xml:"phone,omitempty"`
	// gmt_authorized
	GmtAuthorized *string `json:"gmt_authorized,omitempty" xml:"gmt_authorized,omitempty"`
	// 记录id
	UserId *int64 `json:"user_id,omitempty" xml:"user_id,omitempty"`
}

func (s ALiYunChainMiniAppAuthorizedUser) String() string {
	return tea.Prettify(s)
}

func (s ALiYunChainMiniAppAuthorizedUser) GoString() string {
	return s.String()
}

func (s *ALiYunChainMiniAppAuthorizedUser) SetPhone(v string) *ALiYunChainMiniAppAuthorizedUser {
	s.Phone = &v
	return s
}

func (s *ALiYunChainMiniAppAuthorizedUser) SetGmtAuthorized(v string) *ALiYunChainMiniAppAuthorizedUser {
	s.GmtAuthorized = &v
	return s
}

func (s *ALiYunChainMiniAppAuthorizedUser) SetUserId(v int64) *ALiYunChainMiniAppAuthorizedUser {
	s.UserId = &v
	return s
}

// 阿里云合约工程信息
type ALiYunContractProject struct {
	// consortium_id
	ConsortiumId *string `json:"consortium_id,omitempty" xml:"consortium_id,omitempty"`
	// create_time
	CreateTime *int64 `json:"create_time,omitempty" xml:"create_time,omitempty"`
	// project_description
	ProjectDescription *string `json:"project_description,omitempty" xml:"project_description,omitempty"`
	// project_id
	ProjectId *string `json:"project_id,omitempty" xml:"project_id,omitempty"`
	// project_name
	ProjectName *string `json:"project_name,omitempty" xml:"project_name,omitempty"`
	// project_version
	ProjectVersion *string `json:"project_version,omitempty" xml:"project_version,omitempty"`
	// update_time
	UpdateTime *int64 `json:"update_time,omitempty" xml:"update_time,omitempty"`
}

func (s ALiYunContractProject) String() string {
	return tea.Prettify(s)
}

func (s ALiYunContractProject) GoString() string {
	return s.String()
}

func (s *ALiYunContractProject) SetConsortiumId(v string) *ALiYunContractProject {
	s.ConsortiumId = &v
	return s
}

func (s *ALiYunContractProject) SetCreateTime(v int64) *ALiYunContractProject {
	s.CreateTime = &v
	return s
}

func (s *ALiYunContractProject) SetProjectDescription(v string) *ALiYunContractProject {
	s.ProjectDescription = &v
	return s
}

func (s *ALiYunContractProject) SetProjectId(v string) *ALiYunContractProject {
	s.ProjectId = &v
	return s
}

func (s *ALiYunContractProject) SetProjectName(v string) *ALiYunContractProject {
	s.ProjectName = &v
	return s
}

func (s *ALiYunContractProject) SetProjectVersion(v string) *ALiYunContractProject {
	s.ProjectVersion = &v
	return s
}

func (s *ALiYunContractProject) SetUpdateTime(v int64) *ALiYunContractProject {
	s.UpdateTime = &v
	return s
}

// 合约列表
type ContractPageListResp struct {
	// 服务ID
	ServiceId *string `json:"service_id,omitempty" xml:"service_id,omitempty"`
	// 合约名称
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 合约类型
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
	// 创建时间
	CreateTime *int64 `json:"create_time,omitempty" xml:"create_time,omitempty"`
}

func (s ContractPageListResp) String() string {
	return tea.Prettify(s)
}

func (s ContractPageListResp) GoString() string {
	return s.String()
}

func (s *ContractPageListResp) SetServiceId(v string) *ContractPageListResp {
	s.ServiceId = &v
	return s
}

func (s *ContractPageListResp) SetName(v string) *ContractPageListResp {
	s.Name = &v
	return s
}

func (s *ContractPageListResp) SetType(v string) *ContractPageListResp {
	s.Type = &v
	return s
}

func (s *ContractPageListResp) SetCreateTime(v int64) *ContractPageListResp {
	s.CreateTime = &v
	return s
}

// 阿里云区块链信息
type ALiYunOldContractBlockchain struct {
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// bizid
	Bizid *string `json:"bizid,omitempty" xml:"bizid,omitempty"`
	// chain_type
	ChainType *string `json:"chain_type,omitempty" xml:"chain_type,omitempty"`
	// node_num
	NodeNum *int64 `json:"node_num,omitempty" xml:"node_num,omitempty"`
	// member_status
	MemberStatus *string `json:"member_status,omitempty" xml:"member_status,omitempty"`
	// block_height
	BlockHeight *int64 `json:"block_height,omitempty" xml:"block_height,omitempty"`
	// transactions
	Transactions *int64 `json:"transactions,omitempty" xml:"transactions,omitempty"`
	// network
	Network *string `json:"network,omitempty" xml:"network,omitempty"`
	// version
	Version *string `json:"version,omitempty" xml:"version,omitempty"`
}

func (s ALiYunOldContractBlockchain) String() string {
	return tea.Prettify(s)
}

func (s ALiYunOldContractBlockchain) GoString() string {
	return s.String()
}

func (s *ALiYunOldContractBlockchain) SetName(v string) *ALiYunOldContractBlockchain {
	s.Name = &v
	return s
}

func (s *ALiYunOldContractBlockchain) SetBizid(v string) *ALiYunOldContractBlockchain {
	s.Bizid = &v
	return s
}

func (s *ALiYunOldContractBlockchain) SetChainType(v string) *ALiYunOldContractBlockchain {
	s.ChainType = &v
	return s
}

func (s *ALiYunOldContractBlockchain) SetNodeNum(v int64) *ALiYunOldContractBlockchain {
	s.NodeNum = &v
	return s
}

func (s *ALiYunOldContractBlockchain) SetMemberStatus(v string) *ALiYunOldContractBlockchain {
	s.MemberStatus = &v
	return s
}

func (s *ALiYunOldContractBlockchain) SetBlockHeight(v int64) *ALiYunOldContractBlockchain {
	s.BlockHeight = &v
	return s
}

func (s *ALiYunOldContractBlockchain) SetTransactions(v int64) *ALiYunOldContractBlockchain {
	s.Transactions = &v
	return s
}

func (s *ALiYunOldContractBlockchain) SetNetwork(v string) *ALiYunOldContractBlockchain {
	s.Network = &v
	return s
}

func (s *ALiYunOldContractBlockchain) SetVersion(v string) *ALiYunOldContractBlockchain {
	s.Version = &v
	return s
}

// 分页属性
type ALiYunPagination struct {
	// 分页大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 分页编号
	PageNumber *int64 `json:"page_number,omitempty" xml:"page_number,omitempty"`
	// 总数大小
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
}

func (s ALiYunPagination) String() string {
	return tea.Prettify(s)
}

func (s ALiYunPagination) GoString() string {
	return s.String()
}

func (s *ALiYunPagination) SetPageSize(v int64) *ALiYunPagination {
	s.PageSize = &v
	return s
}

func (s *ALiYunPagination) SetPageNumber(v int64) *ALiYunPagination {
	s.PageNumber = &v
	return s
}

func (s *ALiYunPagination) SetTotalCount(v int64) *ALiYunPagination {
	s.TotalCount = &v
	return s
}

// 阿里云区块链交易的汇总信息
type ALiYunTransactionSummary struct {
	// alias
	Alias *string `json:"alias,omitempty" xml:"alias,omitempty"`
	// hash
	Hash *string `json:"hash,omitempty" xml:"hash,omitempty"`
	// trans_type_v6
	TransTypeV6 *string `json:"trans_type_v6,omitempty" xml:"trans_type_v6,omitempty"`
	// trans_type_v10
	TransTypeV10 *string `json:"trans_type_v10,omitempty" xml:"trans_type_v10,omitempty"`
	// category
	Category *int64 `json:"category,omitempty" xml:"category,omitempty"`
	// height
	Height *int64 `json:"height,omitempty" xml:"height,omitempty"`
	// block_hash
	BlockHash *string `json:"block_hash,omitempty" xml:"block_hash,omitempty"`
	// create_time
	CreateTime *int64 `json:"create_time,omitempty" xml:"create_time,omitempty"`
	// reference_count
	ReferenceCount *int64 `json:"reference_count,omitempty" xml:"reference_count,omitempty"`
	// from
	From *string `json:"from,omitempty" xml:"from,omitempty"`
	// to
	To *string `json:"to,omitempty" xml:"to,omitempty"`
	// gas_used
	GasUsed *int64 `json:"gas_used,omitempty" xml:"gas_used,omitempty"`
}

func (s ALiYunTransactionSummary) String() string {
	return tea.Prettify(s)
}

func (s ALiYunTransactionSummary) GoString() string {
	return s.String()
}

func (s *ALiYunTransactionSummary) SetAlias(v string) *ALiYunTransactionSummary {
	s.Alias = &v
	return s
}

func (s *ALiYunTransactionSummary) SetHash(v string) *ALiYunTransactionSummary {
	s.Hash = &v
	return s
}

func (s *ALiYunTransactionSummary) SetTransTypeV6(v string) *ALiYunTransactionSummary {
	s.TransTypeV6 = &v
	return s
}

func (s *ALiYunTransactionSummary) SetTransTypeV10(v string) *ALiYunTransactionSummary {
	s.TransTypeV10 = &v
	return s
}

func (s *ALiYunTransactionSummary) SetCategory(v int64) *ALiYunTransactionSummary {
	s.Category = &v
	return s
}

func (s *ALiYunTransactionSummary) SetHeight(v int64) *ALiYunTransactionSummary {
	s.Height = &v
	return s
}

func (s *ALiYunTransactionSummary) SetBlockHash(v string) *ALiYunTransactionSummary {
	s.BlockHash = &v
	return s
}

func (s *ALiYunTransactionSummary) SetCreateTime(v int64) *ALiYunTransactionSummary {
	s.CreateTime = &v
	return s
}

func (s *ALiYunTransactionSummary) SetReferenceCount(v int64) *ALiYunTransactionSummary {
	s.ReferenceCount = &v
	return s
}

func (s *ALiYunTransactionSummary) SetFrom(v string) *ALiYunTransactionSummary {
	s.From = &v
	return s
}

func (s *ALiYunTransactionSummary) SetTo(v string) *ALiYunTransactionSummary {
	s.To = &v
	return s
}

func (s *ALiYunTransactionSummary) SetGasUsed(v int64) *ALiYunTransactionSummary {
	s.GasUsed = &v
	return s
}

// 阿里云联盟信息
type ALiYunAntConsortium struct {
	// 链的数量
	ChainNum *int64 `json:"chain_num,omitempty" xml:"chain_num,omitempty"`
	// 成员数量
	MemberNum *int64 `json:"member_num,omitempty" xml:"member_num,omitempty"`
	// 时间戳
	CreateTime *int64 `json:"create_time,omitempty" xml:"create_time,omitempty"`
	// 角色
	Role *string `json:"role,omitempty" xml:"role,omitempty"`
	// 联盟id
	ConsortiumId *string `json:"consortium_id,omitempty" xml:"consortium_id,omitempty"`
	// 状态值
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// 联盟名称
	ConsortiumName *string `json:"consortium_name,omitempty" xml:"consortium_name,omitempty"`
	// 联盟描述
	ConsortiumDescription *string `json:"consortium_description,omitempty" xml:"consortium_description,omitempty"`
	// 是否为空联盟
	IsEmptyConsortium *bool `json:"is_empty_consortium,omitempty" xml:"is_empty_consortium,omitempty"`
}

func (s ALiYunAntConsortium) String() string {
	return tea.Prettify(s)
}

func (s ALiYunAntConsortium) GoString() string {
	return s.String()
}

func (s *ALiYunAntConsortium) SetChainNum(v int64) *ALiYunAntConsortium {
	s.ChainNum = &v
	return s
}

func (s *ALiYunAntConsortium) SetMemberNum(v int64) *ALiYunAntConsortium {
	s.MemberNum = &v
	return s
}

func (s *ALiYunAntConsortium) SetCreateTime(v int64) *ALiYunAntConsortium {
	s.CreateTime = &v
	return s
}

func (s *ALiYunAntConsortium) SetRole(v string) *ALiYunAntConsortium {
	s.Role = &v
	return s
}

func (s *ALiYunAntConsortium) SetConsortiumId(v string) *ALiYunAntConsortium {
	s.ConsortiumId = &v
	return s
}

func (s *ALiYunAntConsortium) SetStatus(v string) *ALiYunAntConsortium {
	s.Status = &v
	return s
}

func (s *ALiYunAntConsortium) SetConsortiumName(v string) *ALiYunAntConsortium {
	s.ConsortiumName = &v
	return s
}

func (s *ALiYunAntConsortium) SetConsortiumDescription(v string) *ALiYunAntConsortium {
	s.ConsortiumDescription = &v
	return s
}

func (s *ALiYunAntConsortium) SetIsEmptyConsortium(v bool) *ALiYunAntConsortium {
	s.IsEmptyConsortium = &v
	return s
}

// 阿里云数据导出任务checkpoint类
type CheckPointStructBody struct {
	// 高度
	Height *string `json:"height,omitempty" xml:"height,omitempty"`
	// 序号
	Index *string `json:"index,omitempty" xml:"index,omitempty"`
	// 类型
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
	// last_error
	LastError *string `json:"last_error,omitempty" xml:"last_error,omitempty"`
	// 错误统计
	ErrorCount *string `json:"error_count,omitempty" xml:"error_count,omitempty"`
	// 统计
	TotalCount *string `json:"total_count,omitempty" xml:"total_count,omitempty"`
}

func (s CheckPointStructBody) String() string {
	return tea.Prettify(s)
}

func (s CheckPointStructBody) GoString() string {
	return s.String()
}

func (s *CheckPointStructBody) SetHeight(v string) *CheckPointStructBody {
	s.Height = &v
	return s
}

func (s *CheckPointStructBody) SetIndex(v string) *CheckPointStructBody {
	s.Index = &v
	return s
}

func (s *CheckPointStructBody) SetType(v string) *CheckPointStructBody {
	s.Type = &v
	return s
}

func (s *CheckPointStructBody) SetLastError(v string) *CheckPointStructBody {
	s.LastError = &v
	return s
}

func (s *CheckPointStructBody) SetErrorCount(v string) *CheckPointStructBody {
	s.ErrorCount = &v
	return s
}

func (s *CheckPointStructBody) SetTotalCount(v string) *CheckPointStructBody {
	s.TotalCount = &v
	return s
}

// 人群匹配结果
type CrowdMatchResult struct {
	// 人群匹配结果
	Match *bool `json:"match,omitempty" xml:"match,omitempty" require:"true"`
}

func (s CrowdMatchResult) String() string {
	return tea.Prettify(s)
}

func (s CrowdMatchResult) GoString() string {
	return s.String()
}

func (s *CrowdMatchResult) SetMatch(v bool) *CrowdMatchResult {
	s.Match = &v
	return s
}

// 账户映射情况
type AccountMappingInfo struct {
	// 链上账户id
	BcAccount *string `json:"bc_account,omitempty" xml:"bc_account,omitempty" require:"true"`
	// 账户绑定状态，1为未绑定，2为绑定成功
	BindingStatus *int64 `json:"binding_status,omitempty" xml:"binding_status,omitempty" require:"true"`
	// 1是激活状态，2是冻结状态
	Status *int64 `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// 账户唯一标示
	Uid *string `json:"uid,omitempty" xml:"uid,omitempty" require:"true"`
}

func (s AccountMappingInfo) String() string {
	return tea.Prettify(s)
}

func (s AccountMappingInfo) GoString() string {
	return s.String()
}

func (s *AccountMappingInfo) SetBcAccount(v string) *AccountMappingInfo {
	s.BcAccount = &v
	return s
}

func (s *AccountMappingInfo) SetBindingStatus(v int64) *AccountMappingInfo {
	s.BindingStatus = &v
	return s
}

func (s *AccountMappingInfo) SetStatus(v int64) *AccountMappingInfo {
	s.Status = &v
	return s
}

func (s *AccountMappingInfo) SetUid(v string) *AccountMappingInfo {
	s.Uid = &v
	return s
}

// 证书实例详情
type CertInstanceDetail struct {
	// 主键
	BizId *string `json:"biz_id,omitempty" xml:"biz_id,omitempty" require:"true"`
	// 实例名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 版发者
	Issuer *string `json:"issuer,omitempty" xml:"issuer,omitempty" require:"true"`
	// 实例内容
	ClaimContent *string `json:"claim_content,omitempty" xml:"claim_content,omitempty" require:"true"`
	// 状态；-1：已删除 0：审核未通过, 1：审核通过, 2：待审核, 3：编辑中
	Status *int64 `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// 审核建议
	VerifyComment *string `json:"verify_comment,omitempty" xml:"verify_comment,omitempty" require:"true"`
	// 创建时间
	GmtCreate *string `json:"gmt_create,omitempty" xml:"gmt_create,omitempty" require:"true"`
	// 修改时间
	GmtModified *string `json:"gmt_modified,omitempty" xml:"gmt_modified,omitempty" require:"true"`
}

func (s CertInstanceDetail) String() string {
	return tea.Prettify(s)
}

func (s CertInstanceDetail) GoString() string {
	return s.String()
}

func (s *CertInstanceDetail) SetBizId(v string) *CertInstanceDetail {
	s.BizId = &v
	return s
}

func (s *CertInstanceDetail) SetName(v string) *CertInstanceDetail {
	s.Name = &v
	return s
}

func (s *CertInstanceDetail) SetIssuer(v string) *CertInstanceDetail {
	s.Issuer = &v
	return s
}

func (s *CertInstanceDetail) SetClaimContent(v string) *CertInstanceDetail {
	s.ClaimContent = &v
	return s
}

func (s *CertInstanceDetail) SetStatus(v int64) *CertInstanceDetail {
	s.Status = &v
	return s
}

func (s *CertInstanceDetail) SetVerifyComment(v string) *CertInstanceDetail {
	s.VerifyComment = &v
	return s
}

func (s *CertInstanceDetail) SetGmtCreate(v string) *CertInstanceDetail {
	s.GmtCreate = &v
	return s
}

func (s *CertInstanceDetail) SetGmtModified(v string) *CertInstanceDetail {
	s.GmtModified = &v
	return s
}

// 蚂蚁链用途申报结构体
type ChainPurpose struct {
	// 用途id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// 用途key
	Key *string `json:"key,omitempty" xml:"key,omitempty"`
	// 用途内容
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 用途申报时间
	Time *string `json:"time,omitempty" xml:"time,omitempty"`
	// 用途申报状态
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// 简短描述开关
	Item *bool `json:"item,omitempty" xml:"item,omitempty"`
	// 详细描述开关
	Extend *bool `json:"extend,omitempty" xml:"extend,omitempty"`
	// 用途申报简短描述
	PurposeItem *string `json:"purpose_item,omitempty" xml:"purpose_item,omitempty"`
}

func (s ChainPurpose) String() string {
	return tea.Prettify(s)
}

func (s ChainPurpose) GoString() string {
	return s.String()
}

func (s *ChainPurpose) SetId(v string) *ChainPurpose {
	s.Id = &v
	return s
}

func (s *ChainPurpose) SetKey(v string) *ChainPurpose {
	s.Key = &v
	return s
}

func (s *ChainPurpose) SetName(v string) *ChainPurpose {
	s.Name = &v
	return s
}

func (s *ChainPurpose) SetTime(v string) *ChainPurpose {
	s.Time = &v
	return s
}

func (s *ChainPurpose) SetStatus(v string) *ChainPurpose {
	s.Status = &v
	return s
}

func (s *ChainPurpose) SetItem(v bool) *ChainPurpose {
	s.Item = &v
	return s
}

func (s *ChainPurpose) SetExtend(v bool) *ChainPurpose {
	s.Extend = &v
	return s
}

func (s *ChainPurpose) SetPurposeItem(v string) *ChainPurpose {
	s.PurposeItem = &v
	return s
}

// 证书颁发校验错误描述
type TemplateInstanceErrorDetailDTO struct {
	// 当前错误类型的错误行数
	ErrorNum *int64 `json:"error_num,omitempty" xml:"error_num,omitempty" require:"true"`
	// 出错数据抽样
	Samples []*string `json:"samples,omitempty" xml:"samples,omitempty" require:"true" type:"Repeated"`
	// 出错列，从0开始
	ErrorColumnIndex *int64 `json:"error_column_index,omitempty" xml:"error_column_index,omitempty" require:"true"`
	// 当前错误类型的描述
	ErrorDescription *string `json:"error_description,omitempty" xml:"error_description,omitempty" require:"true"`
}

func (s TemplateInstanceErrorDetailDTO) String() string {
	return tea.Prettify(s)
}

func (s TemplateInstanceErrorDetailDTO) GoString() string {
	return s.String()
}

func (s *TemplateInstanceErrorDetailDTO) SetErrorNum(v int64) *TemplateInstanceErrorDetailDTO {
	s.ErrorNum = &v
	return s
}

func (s *TemplateInstanceErrorDetailDTO) SetSamples(v []*string) *TemplateInstanceErrorDetailDTO {
	s.Samples = v
	return s
}

func (s *TemplateInstanceErrorDetailDTO) SetErrorColumnIndex(v int64) *TemplateInstanceErrorDetailDTO {
	s.ErrorColumnIndex = &v
	return s
}

func (s *TemplateInstanceErrorDetailDTO) SetErrorDescription(v string) *TemplateInstanceErrorDetailDTO {
	s.ErrorDescription = &v
	return s
}

// 申请用户授权的目标可验证声明内容、过期时间等配置
type Claim struct {
	// 一个json的string，内容包含具体需要的声明，不同业务场景不同。
	ClaimContent *string `json:"claim_content,omitempty" xml:"claim_content,omitempty" require:"true"`
	// 如果在相同的biz_type下，还需要针对声明claim进行细化划分，可以使用此字段。
	ClaimType *string `json:"claim_type,omitempty" xml:"claim_type,omitempty"`
	// 申请声明颁发后的有效期，可选参数，如果不指定则默认申请永久有效。
	Expire *int64 `json:"expire,omitempty" xml:"expire,omitempty"`
	// 授权颁发可验证声明的目标did信息，通常为机构或组织的did
	Did *string `json:"did,omitempty" xml:"did,omitempty"`
	// 目标待授权的名称，标定唯一性，与claim内容配合使用，如果不指定did可以考虑使用此字段。
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
}

func (s Claim) String() string {
	return tea.Prettify(s)
}

func (s Claim) GoString() string {
	return s.String()
}

func (s *Claim) SetClaimContent(v string) *Claim {
	s.ClaimContent = &v
	return s
}

func (s *Claim) SetClaimType(v string) *Claim {
	s.ClaimType = &v
	return s
}

func (s *Claim) SetExpire(v int64) *Claim {
	s.Expire = &v
	return s
}

func (s *Claim) SetDid(v string) *Claim {
	s.Did = &v
	return s
}

func (s *Claim) SetName(v string) *Claim {
	s.Name = &v
	return s
}

// 阿里云子链检查结果
type ALiYunChainSubnetCheck struct {
	// 检查结果
	CheckResult *string `json:"check_result,omitempty" xml:"check_result,omitempty"`
	// 子链成员列表
	ConsortiumMemberList []*string `json:"consortium_member_list,omitempty" xml:"consortium_member_list,omitempty" type:"Repeated"`
	// 节点信息列表
	ChainNodeInfoList []*ALiYunChainNodeInfo `json:"chain_node_info_list,omitempty" xml:"chain_node_info_list,omitempty" type:"Repeated"`
	// 联盟管理员
	ConsortiumAdmin *bool `json:"consortium_admin,omitempty" xml:"consortium_admin,omitempty"`
	// 子链成员列表
	ConsortiumMemberInfoList []*ALiYunMember `json:"consortium_member_info_list,omitempty" xml:"consortium_member_info_list,omitempty" type:"Repeated"`
	// 分页信息
	Pagination *ALiYunPagination `json:"pagination,omitempty" xml:"pagination,omitempty"`
}

func (s ALiYunChainSubnetCheck) String() string {
	return tea.Prettify(s)
}

func (s ALiYunChainSubnetCheck) GoString() string {
	return s.String()
}

func (s *ALiYunChainSubnetCheck) SetCheckResult(v string) *ALiYunChainSubnetCheck {
	s.CheckResult = &v
	return s
}

func (s *ALiYunChainSubnetCheck) SetConsortiumMemberList(v []*string) *ALiYunChainSubnetCheck {
	s.ConsortiumMemberList = v
	return s
}

func (s *ALiYunChainSubnetCheck) SetChainNodeInfoList(v []*ALiYunChainNodeInfo) *ALiYunChainSubnetCheck {
	s.ChainNodeInfoList = v
	return s
}

func (s *ALiYunChainSubnetCheck) SetConsortiumAdmin(v bool) *ALiYunChainSubnetCheck {
	s.ConsortiumAdmin = &v
	return s
}

func (s *ALiYunChainSubnetCheck) SetConsortiumMemberInfoList(v []*ALiYunMember) *ALiYunChainSubnetCheck {
	s.ConsortiumMemberInfoList = v
	return s
}

func (s *ALiYunChainSubnetCheck) SetPagination(v *ALiYunPagination) *ALiYunChainSubnetCheck {
	s.Pagination = v
	return s
}

// 授权规则详细信息
type AuthorizationRule struct {
	// 规则来源
	Source *string `json:"source,omitempty" xml:"source,omitempty" require:"true"`
	// 规则索引
	Index *string `json:"index,omitempty" xml:"index,omitempty" require:"true"`
	// 规则类型
	Type *string `json:"type,omitempty" xml:"type,omitempty" require:"true"`
	// 规则表达式
	Expression *string `json:"expression,omitempty" xml:"expression,omitempty" require:"true"`
	// 规则内容
	Content *string `json:"content,omitempty" xml:"content,omitempty" require:"true"`
}

func (s AuthorizationRule) String() string {
	return tea.Prettify(s)
}

func (s AuthorizationRule) GoString() string {
	return s.String()
}

func (s *AuthorizationRule) SetSource(v string) *AuthorizationRule {
	s.Source = &v
	return s
}

func (s *AuthorizationRule) SetIndex(v string) *AuthorizationRule {
	s.Index = &v
	return s
}

func (s *AuthorizationRule) SetType(v string) *AuthorizationRule {
	s.Type = &v
	return s
}

func (s *AuthorizationRule) SetExpression(v string) *AuthorizationRule {
	s.Expression = &v
	return s
}

func (s *AuthorizationRule) SetContent(v string) *AuthorizationRule {
	s.Content = &v
	return s
}

// 账户映射结果
type AccountMappingResult struct {
	// 该账户在链上的唯一标示
	Baccount *string `json:"baccount,omitempty" xml:"baccount,omitempty" require:"true"`
	// 当前账户映射结果描述语句
	Message *string `json:"message,omitempty" xml:"message,omitempty" require:"true"`
	// 状态描述符
	Status *string `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// 自有系统中该账户唯一标示
	Uid *string `json:"uid,omitempty" xml:"uid,omitempty" require:"true"`
}

func (s AccountMappingResult) String() string {
	return tea.Prettify(s)
}

func (s AccountMappingResult) GoString() string {
	return s.String()
}

func (s *AccountMappingResult) SetBaccount(v string) *AccountMappingResult {
	s.Baccount = &v
	return s
}

func (s *AccountMappingResult) SetMessage(v string) *AccountMappingResult {
	s.Message = &v
	return s
}

func (s *AccountMappingResult) SetStatus(v string) *AccountMappingResult {
	s.Status = &v
	return s
}

func (s *AccountMappingResult) SetUid(v string) *AccountMappingResult {
	s.Uid = &v
	return s
}

// 可验证声明的完整内容以及状态，当前持有者的did等信息
type VcContent struct {
	// 可验证声明的唯一标识id，status 为 “1” 时候非空
	VcId *string `json:"vc_id,omitempty" xml:"vc_id,omitempty" require:"true"`
	// 可验证声明完整内容， status 为 “1” 时候非空
	VcContent *string `json:"vc_content,omitempty" xml:"vc_content,omitempty" require:"true"`
	// 可验证声明的颁发状态说明： -1：颁发失败，0：未授权 1：授权成功，此时vc_content字段会包含授权后的声明内容，其它状态码，待定义后增加。
	Status *string `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// 被颁发当前可验证声明的目标did
	Did *string `json:"did,omitempty" xml:"did,omitempty"`
	// 如果status 是 “-1”，则说明当前可验证声明颁发失败，此字段说明失败原因。
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
}

func (s VcContent) String() string {
	return tea.Prettify(s)
}

func (s VcContent) GoString() string {
	return s.String()
}

func (s *VcContent) SetVcId(v string) *VcContent {
	s.VcId = &v
	return s
}

func (s *VcContent) SetVcContent(v string) *VcContent {
	s.VcContent = &v
	return s
}

func (s *VcContent) SetStatus(v string) *VcContent {
	s.Status = &v
	return s
}

func (s *VcContent) SetDid(v string) *VcContent {
	s.Did = &v
	return s
}

func (s *VcContent) SetMessage(v string) *VcContent {
	s.Message = &v
	return s
}

// 用户身份、账户及手机号信息
type UserInfoParam struct {
	// 用户手机号信息
	Phone *string `json:"phone,omitempty" xml:"phone,omitempty" require:"true"`
	// 用户账号信息
	UserAccount *string `json:"user_account,omitempty" xml:"user_account,omitempty" require:"true"`
	// 用户名称
	UserName *string `json:"user_name,omitempty" xml:"user_name,omitempty" require:"true"`
}

func (s UserInfoParam) String() string {
	return tea.Prettify(s)
}

func (s UserInfoParam) GoString() string {
	return s.String()
}

func (s *UserInfoParam) SetPhone(v string) *UserInfoParam {
	s.Phone = &v
	return s
}

func (s *UserInfoParam) SetUserAccount(v string) *UserInfoParam {
	s.UserAccount = &v
	return s
}

func (s *UserInfoParam) SetUserName(v string) *UserInfoParam {
	s.UserName = &v
	return s
}

// 任务人群匹配返回列表
type TaskCrowdMatchResp struct {
	// 任务ID
	TaskId *string `json:"task_id,omitempty" xml:"task_id,omitempty" require:"true"`
	// 人群匹配结果
	CrowdMatchResult *CrowdMatchResult `json:"crowd_match_result,omitempty" xml:"crowd_match_result,omitempty" require:"true"`
}

func (s TaskCrowdMatchResp) String() string {
	return tea.Prettify(s)
}

func (s TaskCrowdMatchResp) GoString() string {
	return s.String()
}

func (s *TaskCrowdMatchResp) SetTaskId(v string) *TaskCrowdMatchResp {
	s.TaskId = &v
	return s
}

func (s *TaskCrowdMatchResp) SetCrowdMatchResult(v *CrowdMatchResult) *TaskCrowdMatchResp {
	s.CrowdMatchResult = v
	return s
}

// 链详情
type MyChainInfo struct {
	// 链id
	BizId *string `json:"biz_id,omitempty" xml:"biz_id,omitempty" require:"true"`
	// 授权租户id
	Tenant *string `json:"tenant,omitempty" xml:"tenant,omitempty" require:"true"`
}

func (s MyChainInfo) String() string {
	return tea.Prettify(s)
}

func (s MyChainInfo) GoString() string {
	return s.String()
}

func (s *MyChainInfo) SetBizId(v string) *MyChainInfo {
	s.BizId = &v
	return s
}

func (s *MyChainInfo) SetTenant(v string) *MyChainInfo {
	s.Tenant = &v
	return s
}

// 派生DID的具体参数
type DeriveDid struct {
	// 派生的子did
	Childdid *string `json:"childdid,omitempty" xml:"childdid,omitempty" require:"true"`
	// 子did 的did doc
	Childdiddoc *string `json:"childdiddoc,omitempty" xml:"childdiddoc,omitempty" require:"true"`
	// 用户输入用于派生子did的派生码
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
}

func (s DeriveDid) String() string {
	return tea.Prettify(s)
}

func (s DeriveDid) GoString() string {
	return s.String()
}

func (s *DeriveDid) SetChilddid(v string) *DeriveDid {
	s.Childdid = &v
	return s
}

func (s *DeriveDid) SetChilddiddoc(v string) *DeriveDid {
	s.Childdiddoc = &v
	return s
}

func (s *DeriveDid) SetCode(v string) *DeriveDid {
	s.Code = &v
	return s
}

// 授权明细详情
type AuthorizationDetail struct {
	// 授权凭证ID
	AuthorityCertId *string `json:"authority_cert_id,omitempty" xml:"authority_cert_id,omitempty" require:"true"`
	// 授权ID
	AuthorizationId *string `json:"authorization_id,omitempty" xml:"authorization_id,omitempty"`
	// 区块号
	BlockNum *int64 `json:"block_num,omitempty" xml:"block_num,omitempty" require:"true"`
	// 过期时间
	Expire *int64 `json:"expire,omitempty" xml:"expire,omitempty"`
	// 授权时间
	IssuanceTime *int64 `json:"issuance_time,omitempty" xml:"issuance_time,omitempty" require:"true"`
	// 授权人
	Issuer *Participant `json:"issuer,omitempty" xml:"issuer,omitempty" require:"true"`
	// 被授权人
	Subject *Participant `json:"subject,omitempty" xml:"subject,omitempty" require:"true"`
	// 哈希
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty" require:"true"`
	// 资产所有者
	Owner *Participant `json:"owner,omitempty" xml:"owner,omitempty" require:"true"`
}

func (s AuthorizationDetail) String() string {
	return tea.Prettify(s)
}

func (s AuthorizationDetail) GoString() string {
	return s.String()
}

func (s *AuthorizationDetail) SetAuthorityCertId(v string) *AuthorizationDetail {
	s.AuthorityCertId = &v
	return s
}

func (s *AuthorizationDetail) SetAuthorizationId(v string) *AuthorizationDetail {
	s.AuthorizationId = &v
	return s
}

func (s *AuthorizationDetail) SetBlockNum(v int64) *AuthorizationDetail {
	s.BlockNum = &v
	return s
}

func (s *AuthorizationDetail) SetExpire(v int64) *AuthorizationDetail {
	s.Expire = &v
	return s
}

func (s *AuthorizationDetail) SetIssuanceTime(v int64) *AuthorizationDetail {
	s.IssuanceTime = &v
	return s
}

func (s *AuthorizationDetail) SetIssuer(v *Participant) *AuthorizationDetail {
	s.Issuer = v
	return s
}

func (s *AuthorizationDetail) SetSubject(v *Participant) *AuthorizationDetail {
	s.Subject = v
	return s
}

func (s *AuthorizationDetail) SetTxHash(v string) *AuthorizationDetail {
	s.TxHash = &v
	return s
}

func (s *AuthorizationDetail) SetOwner(v *Participant) *AuthorizationDetail {
	s.Owner = v
	return s
}

// 阿里云CloudIde的配置
type ALiYunChainCloudIdeConfig struct {
	// bizid
	Bizid *string `json:"bizid,omitempty" xml:"bizid,omitempty"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// trial_account
	TrialAccount *string `json:"trial_account,omitempty" xml:"trial_account,omitempty"`
	// trial_account_private_key
	TrialAccountPrivateKey *string `json:"trial_account_private_key,omitempty" xml:"trial_account_private_key,omitempty"`
	// ant_chain_id
	AntChainId *string `json:"ant_chain_id,omitempty" xml:"ant_chain_id,omitempty"`
	// ant_chain_name
	AntChainName *string `json:"ant_chain_name,omitempty" xml:"ant_chain_name,omitempty"`
	// version
	Version *string `json:"version,omitempty" xml:"version,omitempty"`
}

func (s ALiYunChainCloudIdeConfig) String() string {
	return tea.Prettify(s)
}

func (s ALiYunChainCloudIdeConfig) GoString() string {
	return s.String()
}

func (s *ALiYunChainCloudIdeConfig) SetBizid(v string) *ALiYunChainCloudIdeConfig {
	s.Bizid = &v
	return s
}

func (s *ALiYunChainCloudIdeConfig) SetName(v string) *ALiYunChainCloudIdeConfig {
	s.Name = &v
	return s
}

func (s *ALiYunChainCloudIdeConfig) SetTrialAccount(v string) *ALiYunChainCloudIdeConfig {
	s.TrialAccount = &v
	return s
}

func (s *ALiYunChainCloudIdeConfig) SetTrialAccountPrivateKey(v string) *ALiYunChainCloudIdeConfig {
	s.TrialAccountPrivateKey = &v
	return s
}

func (s *ALiYunChainCloudIdeConfig) SetAntChainId(v string) *ALiYunChainCloudIdeConfig {
	s.AntChainId = &v
	return s
}

func (s *ALiYunChainCloudIdeConfig) SetAntChainName(v string) *ALiYunChainCloudIdeConfig {
	s.AntChainName = &v
	return s
}

func (s *ALiYunChainCloudIdeConfig) SetVersion(v string) *ALiYunChainCloudIdeConfig {
	s.Version = &v
	return s
}

// 创建应用响应信息
type ApplicationCreateResp struct {
	// 应用标识
	ApplicationId *string `json:"application_id,omitempty" xml:"application_id,omitempty"`
}

func (s ApplicationCreateResp) String() string {
	return tea.Prettify(s)
}

func (s ApplicationCreateResp) GoString() string {
	return s.String()
}

func (s *ApplicationCreateResp) SetApplicationId(v string) *ApplicationCreateResp {
	s.ApplicationId = &v
	return s
}

// 阿里云联盟返回结果
type ALiYunUnion struct {
	// 联盟内链的集合
	AntChains []*ALiYunAntChain `json:"ant_chains,omitempty" xml:"ant_chains,omitempty" type:"Repeated"`
	// 联盟信息
	AntConsortiums []*ALiYunAntConsortium `json:"ant_consortiums,omitempty" xml:"ant_consortiums,omitempty" type:"Repeated"`
	// 联盟Id
	ConsortiumId *string `json:"consortium_id,omitempty" xml:"consortium_id,omitempty"`
	// 联盟成员信息
	Members []*ALiYunMember `json:"members,omitempty" xml:"members,omitempty" type:"Repeated"`
	// 阿里云分页属性
	Pagination *ALiYunPagination `json:"pagination,omitempty" xml:"pagination,omitempty"`
	// is_exist
	IsExist *bool `json:"is_exist,omitempty" xml:"is_exist,omitempty"`
}

func (s ALiYunUnion) String() string {
	return tea.Prettify(s)
}

func (s ALiYunUnion) GoString() string {
	return s.String()
}

func (s *ALiYunUnion) SetAntChains(v []*ALiYunAntChain) *ALiYunUnion {
	s.AntChains = v
	return s
}

func (s *ALiYunUnion) SetAntConsortiums(v []*ALiYunAntConsortium) *ALiYunUnion {
	s.AntConsortiums = v
	return s
}

func (s *ALiYunUnion) SetConsortiumId(v string) *ALiYunUnion {
	s.ConsortiumId = &v
	return s
}

func (s *ALiYunUnion) SetMembers(v []*ALiYunMember) *ALiYunUnion {
	s.Members = v
	return s
}

func (s *ALiYunUnion) SetPagination(v *ALiYunPagination) *ALiYunUnion {
	s.Pagination = v
	return s
}

func (s *ALiYunUnion) SetIsExist(v bool) *ALiYunUnion {
	s.IsExist = &v
	return s
}

// 数据授权服务公钥矩阵关系结构体
type PublicKeyRelation struct {
	// 公钥颁发者ID
	IssuerId *string `json:"issuer_id,omitempty" xml:"issuer_id,omitempty" require:"true"`
	// 公钥接受者ID
	RecipientId *string `json:"recipient_id,omitempty" xml:"recipient_id,omitempty" require:"true"`
}

func (s PublicKeyRelation) String() string {
	return tea.Prettify(s)
}

func (s PublicKeyRelation) GoString() string {
	return s.String()
}

func (s *PublicKeyRelation) SetIssuerId(v string) *PublicKeyRelation {
	s.IssuerId = &v
	return s
}

func (s *PublicKeyRelation) SetRecipientId(v string) *PublicKeyRelation {
	s.RecipientId = &v
	return s
}

// 合约类型
type ContractTypeResp struct {
	// 合约服务类型
	TypeList []*ContractTypeListResp `json:"type_list,omitempty" xml:"type_list,omitempty" type:"Repeated"`
}

func (s ContractTypeResp) String() string {
	return tea.Prettify(s)
}

func (s ContractTypeResp) GoString() string {
	return s.String()
}

func (s *ContractTypeResp) SetTypeList(v []*ContractTypeListResp) *ContractTypeResp {
	s.TypeList = v
	return s
}

// 物流金融平台运单轨迹信息
type LogisticLocation struct {
	// 结构化地址信息,规则遵循：国家、省份、城市、区县、城镇、乡村、街道、门牌号码、屋邨、大厦
	Address *string `json:"address,omitempty" xml:"address,omitempty"`
	// 行政区划代码
	CityCode *string `json:"city_code,omitempty" xml:"city_code,omitempty"`
	// 纬度
	Lat *string `json:"lat,omitempty" xml:"lat,omitempty" require:"true"`
	// 经度
	Lon *string `json:"lon,omitempty" xml:"lon,omitempty" require:"true"`
	// 轨迹时间戳
	TrackTime *int64 `json:"track_time,omitempty" xml:"track_time,omitempty" require:"true"`
}

func (s LogisticLocation) String() string {
	return tea.Prettify(s)
}

func (s LogisticLocation) GoString() string {
	return s.String()
}

func (s *LogisticLocation) SetAddress(v string) *LogisticLocation {
	s.Address = &v
	return s
}

func (s *LogisticLocation) SetCityCode(v string) *LogisticLocation {
	s.CityCode = &v
	return s
}

func (s *LogisticLocation) SetLat(v string) *LogisticLocation {
	s.Lat = &v
	return s
}

func (s *LogisticLocation) SetLon(v string) *LogisticLocation {
	s.Lon = &v
	return s
}

func (s *LogisticLocation) SetTrackTime(v int64) *LogisticLocation {
	s.TrackTime = &v
	return s
}

// 阿里云订单结果
type ALiYunOrderResult struct {
	// request_id
	RequestId *string `json:"request_id,omitempty" xml:"request_id,omitempty"`
	// data
	Data *string `json:"data,omitempty" xml:"data,omitempty"`
	// success
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
	// code
	Code *string `json:"code,omitempty" xml:"code,omitempty"`
	// message
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// synchro
	Synchro *bool `json:"synchro,omitempty" xml:"synchro,omitempty"`
}

func (s ALiYunOrderResult) String() string {
	return tea.Prettify(s)
}

func (s ALiYunOrderResult) GoString() string {
	return s.String()
}

func (s *ALiYunOrderResult) SetRequestId(v string) *ALiYunOrderResult {
	s.RequestId = &v
	return s
}

func (s *ALiYunOrderResult) SetData(v string) *ALiYunOrderResult {
	s.Data = &v
	return s
}

func (s *ALiYunOrderResult) SetSuccess(v bool) *ALiYunOrderResult {
	s.Success = &v
	return s
}

func (s *ALiYunOrderResult) SetCode(v string) *ALiYunOrderResult {
	s.Code = &v
	return s
}

func (s *ALiYunOrderResult) SetMessage(v string) *ALiYunOrderResult {
	s.Message = &v
	return s
}

func (s *ALiYunOrderResult) SetSynchro(v bool) *ALiYunOrderResult {
	s.Synchro = &v
	return s
}

// 批量查询商户下已映射的账户信息接口，返回的对象
type QueryMappingBatchResult struct {
	// 本次查询获取的账户信息
	Accounts []*AccountMappingInfo `json:"accounts,omitempty" xml:"accounts,omitempty" require:"true" type:"Repeated"`
	// 该商户下总共映射账户的数量
	TotalNum *int64 `json:"total_num,omitempty" xml:"total_num,omitempty" require:"true"`
	// 该商户下账户信息的总页数
	TotalPage *int64 `json:"total_page,omitempty" xml:"total_page,omitempty" require:"true"`
}

func (s QueryMappingBatchResult) String() string {
	return tea.Prettify(s)
}

func (s QueryMappingBatchResult) GoString() string {
	return s.String()
}

func (s *QueryMappingBatchResult) SetAccounts(v []*AccountMappingInfo) *QueryMappingBatchResult {
	s.Accounts = v
	return s
}

func (s *QueryMappingBatchResult) SetTotalNum(v int64) *QueryMappingBatchResult {
	s.TotalNum = &v
	return s
}

func (s *QueryMappingBatchResult) SetTotalPage(v int64) *QueryMappingBatchResult {
	s.TotalPage = &v
	return s
}

// 阿里云区块链区块信息
type ALiYunChainBlock struct {
	// ant_chain_id
	AntChainId *string `json:"ant_chain_id,omitempty" xml:"ant_chain_id,omitempty"`
	// block_hash
	BlockHash *string `json:"block_hash,omitempty" xml:"block_hash,omitempty"`
	// create_time
	CreateTime *int64 `json:"create_time,omitempty" xml:"create_time,omitempty"`
	// height
	Height *int64 `json:"height,omitempty" xml:"height,omitempty"`
	// previous_hash
	PreviousHash *string `json:"previous_hash,omitempty" xml:"previous_hash,omitempty"`
	// root_tx_hash
	RootTxHash *string `json:"root_tx_hash,omitempty" xml:"root_tx_hash,omitempty"`
	// transaction_size
	TransactionSize *int64 `json:"transaction_size,omitempty" xml:"transaction_size,omitempty"`
	// trans_summary_list
	TransSummaryList []*ALiYunTransactionSummary `json:"trans_summary_list,omitempty" xml:"trans_summary_list,omitempty" type:"Repeated"`
	// Version
	Version *int64 `json:"version,omitempty" xml:"version,omitempty"`
}

func (s ALiYunChainBlock) String() string {
	return tea.Prettify(s)
}

func (s ALiYunChainBlock) GoString() string {
	return s.String()
}

func (s *ALiYunChainBlock) SetAntChainId(v string) *ALiYunChainBlock {
	s.AntChainId = &v
	return s
}

func (s *ALiYunChainBlock) SetBlockHash(v string) *ALiYunChainBlock {
	s.BlockHash = &v
	return s
}

func (s *ALiYunChainBlock) SetCreateTime(v int64) *ALiYunChainBlock {
	s.CreateTime = &v
	return s
}

func (s *ALiYunChainBlock) SetHeight(v int64) *ALiYunChainBlock {
	s.Height = &v
	return s
}

func (s *ALiYunChainBlock) SetPreviousHash(v string) *ALiYunChainBlock {
	s.PreviousHash = &v
	return s
}

func (s *ALiYunChainBlock) SetRootTxHash(v string) *ALiYunChainBlock {
	s.RootTxHash = &v
	return s
}

func (s *ALiYunChainBlock) SetTransactionSize(v int64) *ALiYunChainBlock {
	s.TransactionSize = &v
	return s
}

func (s *ALiYunChainBlock) SetTransSummaryList(v []*ALiYunTransactionSummary) *ALiYunChainBlock {
	s.TransSummaryList = v
	return s
}

func (s *ALiYunChainBlock) SetVersion(v int64) *ALiYunChainBlock {
	s.Version = &v
	return s
}

// 应用授权列表查询
type ApplicationPageResp struct {
	// 应用授权列表
	List []*ApplicationPageListResp `json:"list,omitempty" xml:"list,omitempty" type:"Repeated"`
	// 总数
	Total *int64 `json:"total,omitempty" xml:"total,omitempty"`
}

func (s ApplicationPageResp) String() string {
	return tea.Prettify(s)
}

func (s ApplicationPageResp) GoString() string {
	return s.String()
}

func (s *ApplicationPageResp) SetList(v []*ApplicationPageListResp) *ApplicationPageResp {
	s.List = v
	return s
}

func (s *ApplicationPageResp) SetTotal(v int64) *ApplicationPageResp {
	s.Total = &v
	return s
}

// did中使用ZKP生成证明需要的信息
type DidZKPInfo struct {
	// 需要生成证明的路径
	Path *string `json:"path,omitempty" xml:"path,omitempty" require:"true"`
	// 生成ZKP证明的公共信息
	PublicInputs *string `json:"public_inputs,omitempty" xml:"public_inputs,omitempty" require:"true"`
	// zkp方法
	ZkpType *string `json:"zkp_type,omitempty" xml:"zkp_type,omitempty" require:"true"`
}

func (s DidZKPInfo) String() string {
	return tea.Prettify(s)
}

func (s DidZKPInfo) GoString() string {
	return s.String()
}

func (s *DidZKPInfo) SetPath(v string) *DidZKPInfo {
	s.Path = &v
	return s
}

func (s *DidZKPInfo) SetPublicInputs(v string) *DidZKPInfo {
	s.PublicInputs = &v
	return s
}

func (s *DidZKPInfo) SetZkpType(v string) *DidZKPInfo {
	s.ZkpType = &v
	return s
}

// 阿里云账户列表信息
type ALiYunAccountList struct {
	// pagination
	Pagination *ALiYunPagination `json:"pagination,omitempty" xml:"pagination,omitempty"`
	// accounts
	Accounts []*ALiYunAccount `json:"accounts,omitempty" xml:"accounts,omitempty" type:"Repeated"`
	// 联盟管理员
	ConsortiumAdmin *bool `json:"consortium_admin,omitempty" xml:"consortium_admin,omitempty"`
}

func (s ALiYunAccountList) String() string {
	return tea.Prettify(s)
}

func (s ALiYunAccountList) GoString() string {
	return s.String()
}

func (s *ALiYunAccountList) SetPagination(v *ALiYunPagination) *ALiYunAccountList {
	s.Pagination = v
	return s
}

func (s *ALiYunAccountList) SetAccounts(v []*ALiYunAccount) *ALiYunAccountList {
	s.Accounts = v
	return s
}

func (s *ALiYunAccountList) SetConsortiumAdmin(v bool) *ALiYunAccountList {
	s.ConsortiumAdmin = &v
	return s
}

// 蚂蚁链用途申报结构体
type AntChainPurposeResponse struct {
	// 用户申报用途状态
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// 已申报的用途，比如供应链金融
	Purpose *string `json:"purpose,omitempty" xml:"purpose,omitempty"`
	// 申报时间
	CreateTime *string `json:"create_time,omitempty" xml:"create_time,omitempty"`
	// 简短说明用途
	ChainPurposeItem *string `json:"chain_purpose_item,omitempty" xml:"chain_purpose_item,omitempty"`
	// 用途详情
	ChainPurposeExtend *string `json:"chain_purpose_extend,omitempty" xml:"chain_purpose_extend,omitempty"`
	// 申请用途列表
	RecordList []*ChainPurpose `json:"record_list,omitempty" xml:"record_list,omitempty" type:"Repeated"`
}

func (s AntChainPurposeResponse) String() string {
	return tea.Prettify(s)
}

func (s AntChainPurposeResponse) GoString() string {
	return s.String()
}

func (s *AntChainPurposeResponse) SetStatus(v string) *AntChainPurposeResponse {
	s.Status = &v
	return s
}

func (s *AntChainPurposeResponse) SetPurpose(v string) *AntChainPurposeResponse {
	s.Purpose = &v
	return s
}

func (s *AntChainPurposeResponse) SetCreateTime(v string) *AntChainPurposeResponse {
	s.CreateTime = &v
	return s
}

func (s *AntChainPurposeResponse) SetChainPurposeItem(v string) *AntChainPurposeResponse {
	s.ChainPurposeItem = &v
	return s
}

func (s *AntChainPurposeResponse) SetChainPurposeExtend(v string) *AntChainPurposeResponse {
	s.ChainPurposeExtend = &v
	return s
}

func (s *AntChainPurposeResponse) SetRecordList(v []*ChainPurpose) *AntChainPurposeResponse {
	s.RecordList = v
	return s
}

// 阿里云交易收据
type ALiYunTransactionReceipt struct {
	// data
	Data *string `json:"data,omitempty" xml:"data,omitempty"`
	// gas_used
	GasUsed *string `json:"gas_used,omitempty" xml:"gas_used,omitempty"`
	// result
	Result *int64 `json:"result,omitempty" xml:"result,omitempty"`
	// logs
	Logs []*string `json:"logs,omitempty" xml:"logs,omitempty" type:"Repeated"`
}

func (s ALiYunTransactionReceipt) String() string {
	return tea.Prettify(s)
}

func (s ALiYunTransactionReceipt) GoString() string {
	return s.String()
}

func (s *ALiYunTransactionReceipt) SetData(v string) *ALiYunTransactionReceipt {
	s.Data = &v
	return s
}

func (s *ALiYunTransactionReceipt) SetGasUsed(v string) *ALiYunTransactionReceipt {
	s.GasUsed = &v
	return s
}

func (s *ALiYunTransactionReceipt) SetResult(v int64) *ALiYunTransactionReceipt {
	s.Result = &v
	return s
}

func (s *ALiYunTransactionReceipt) SetLogs(v []*string) *ALiYunTransactionReceipt {
	s.Logs = v
	return s
}

// 实例进度
type ContractCreateProcessResp struct {
	// 当前进度信息
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// 合约部署进度
	ProgressInfoList []*InstanceProgressInfo `json:"progress_info_list,omitempty" xml:"progress_info_list,omitempty" type:"Repeated"`
}

func (s ContractCreateProcessResp) String() string {
	return tea.Prettify(s)
}

func (s ContractCreateProcessResp) GoString() string {
	return s.String()
}

func (s *ContractCreateProcessResp) SetStatus(v string) *ContractCreateProcessResp {
	s.Status = &v
	return s
}

func (s *ContractCreateProcessResp) SetProgressInfoList(v []*InstanceProgressInfo) *ContractCreateProcessResp {
	s.ProgressInfoList = v
	return s
}

// 新建合约服务
type ContractCreateResp struct {
	// 合约标识
	ServiceId *string `json:"service_id,omitempty" xml:"service_id,omitempty"`
}

func (s ContractCreateResp) String() string {
	return tea.Prettify(s)
}

func (s ContractCreateResp) GoString() string {
	return s.String()
}

func (s *ContractCreateResp) SetServiceId(v string) *ContractCreateResp {
	s.ServiceId = &v
	return s
}

// 内部建链信息查询
type CreateBlockchainInfo struct {
	// 链id
	Bizid *string `json:"bizid,omitempty" xml:"bizid,omitempty" require:"true"`
	// 链的状态
	BlockchainStatus *string `json:"blockchain_status,omitempty" xml:"blockchain_status,omitempty" require:"true"`
	// 链的类型
	BlockchainType *string `json:"blockchain_type,omitempty" xml:"blockchain_type,omitempty" require:"true"`
	// 链的名称
	BlockchainName *string `json:"blockchain_name,omitempty" xml:"blockchain_name,omitempty" require:"true"`
	// 节点数量
	BlockchanNodeNum *int64 `json:"blockchan_node_num,omitempty" xml:"blockchan_node_num,omitempty" require:"true"`
	// 创建时间
	BlockchainCreateTime *int64 `json:"blockchain_create_time,omitempty" xml:"blockchain_create_time,omitempty" require:"true"`
}

func (s CreateBlockchainInfo) String() string {
	return tea.Prettify(s)
}

func (s CreateBlockchainInfo) GoString() string {
	return s.String()
}

func (s *CreateBlockchainInfo) SetBizid(v string) *CreateBlockchainInfo {
	s.Bizid = &v
	return s
}

func (s *CreateBlockchainInfo) SetBlockchainStatus(v string) *CreateBlockchainInfo {
	s.BlockchainStatus = &v
	return s
}

func (s *CreateBlockchainInfo) SetBlockchainType(v string) *CreateBlockchainInfo {
	s.BlockchainType = &v
	return s
}

func (s *CreateBlockchainInfo) SetBlockchainName(v string) *CreateBlockchainInfo {
	s.BlockchainName = &v
	return s
}

func (s *CreateBlockchainInfo) SetBlockchanNodeNum(v int64) *CreateBlockchainInfo {
	s.BlockchanNodeNum = &v
	return s
}

func (s *CreateBlockchainInfo) SetBlockchainCreateTime(v int64) *CreateBlockchainInfo {
	s.BlockchainCreateTime = &v
	return s
}

// VC分享的结果
type VcShareResult struct {
	// 目标分享的VC的id
	VcId *string `json:"vc_id,omitempty" xml:"vc_id,omitempty" require:"true"`
	// 分享给目标接受者的did
	TargetDid *string `json:"target_did,omitempty" xml:"target_did,omitempty" require:"true"`
	// 分享链上VC数据的交易hash，可用于直连区块链查询交易内容时使用。
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty"`
	// 分享是否成功，true：成功，false：失败
	Status *bool `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// 失败的对应原因信息
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty"`
}

func (s VcShareResult) String() string {
	return tea.Prettify(s)
}

func (s VcShareResult) GoString() string {
	return s.String()
}

func (s *VcShareResult) SetVcId(v string) *VcShareResult {
	s.VcId = &v
	return s
}

func (s *VcShareResult) SetTargetDid(v string) *VcShareResult {
	s.TargetDid = &v
	return s
}

func (s *VcShareResult) SetTxHash(v string) *VcShareResult {
	s.TxHash = &v
	return s
}

func (s *VcShareResult) SetStatus(v bool) *VcShareResult {
	s.Status = &v
	return s
}

func (s *VcShareResult) SetMsg(v string) *VcShareResult {
	s.Msg = &v
	return s
}

// 合约加密字段
type ContractEncryptKeyItem struct {
	// 字段对应的id
	Key *string `json:"key,omitempty" xml:"key,omitempty" require:"true"`
	// 0:encrypt_text,
	// 1:encrypt_array_text,
	// 2:encrypt_int
	// 3:encrypt_array_int
	Type *int64 `json:"type,omitempty" xml:"type,omitempty" require:"true"`
	// 字段对应的数据
	Value *string `json:"value,omitempty" xml:"value,omitempty" require:"true"`
}

func (s ContractEncryptKeyItem) String() string {
	return tea.Prettify(s)
}

func (s ContractEncryptKeyItem) GoString() string {
	return s.String()
}

func (s *ContractEncryptKeyItem) SetKey(v string) *ContractEncryptKeyItem {
	s.Key = &v
	return s
}

func (s *ContractEncryptKeyItem) SetType(v int64) *ContractEncryptKeyItem {
	s.Type = &v
	return s
}

func (s *ContractEncryptKeyItem) SetValue(v string) *ContractEncryptKeyItem {
	s.Value = &v
	return s
}

// did更新事件
type DidEvent struct {
	// 事件对应的合约方法
	Action *string `json:"action,omitempty" xml:"action,omitempty" require:"true"`
	// 对应did
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// did对应doc
	DidDoc *string `json:"did_doc,omitempty" xml:"did_doc,omitempty" require:"true"`
	// 本次事件的触发者
	From *string `json:"from,omitempty" xml:"from,omitempty" require:"true"`
	// 6500
	Height *int64 `json:"height,omitempty" xml:"height,omitempty" require:"true"`
	// 交易hash
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty" require:"true"`
	// 交易在区块中的index
	TxIndex *int64 `json:"tx_index,omitempty" xml:"tx_index,omitempty" require:"true"`
}

func (s DidEvent) String() string {
	return tea.Prettify(s)
}

func (s DidEvent) GoString() string {
	return s.String()
}

func (s *DidEvent) SetAction(v string) *DidEvent {
	s.Action = &v
	return s
}

func (s *DidEvent) SetDid(v string) *DidEvent {
	s.Did = &v
	return s
}

func (s *DidEvent) SetDidDoc(v string) *DidEvent {
	s.DidDoc = &v
	return s
}

func (s *DidEvent) SetFrom(v string) *DidEvent {
	s.From = &v
	return s
}

func (s *DidEvent) SetHeight(v int64) *DidEvent {
	s.Height = &v
	return s
}

func (s *DidEvent) SetTxHash(v string) *DidEvent {
	s.TxHash = &v
	return s
}

func (s *DidEvent) SetTxIndex(v int64) *DidEvent {
	s.TxIndex = &v
	return s
}

// Vc可信传输实际参数
type VcTransmitPayload struct {
	// 目标did相关信息列表
	TargetVerifier []*VcTransmitTargetStruct `json:"target_verifier,omitempty" xml:"target_verifier,omitempty" require:"true" type:"Repeated"`
	// 要传输的vc_id
	VcId *string `json:"vc_id,omitempty" xml:"vc_id,omitempty" require:"true"`
	// vc原文，如果vc原文出现在传输接口，那么VC仓库不会从本地查找，而是直接将传输的VC上链
	VcContent *string `json:"vc_content,omitempty" xml:"vc_content,omitempty"`
}

func (s VcTransmitPayload) String() string {
	return tea.Prettify(s)
}

func (s VcTransmitPayload) GoString() string {
	return s.String()
}

func (s *VcTransmitPayload) SetTargetVerifier(v []*VcTransmitTargetStruct) *VcTransmitPayload {
	s.TargetVerifier = v
	return s
}

func (s *VcTransmitPayload) SetVcId(v string) *VcTransmitPayload {
	s.VcId = &v
	return s
}

func (s *VcTransmitPayload) SetVcContent(v string) *VcTransmitPayload {
	s.VcContent = &v
	return s
}

// 阿里云合约内容
type ALiYunChainContractContent struct {
	// content
	Content *string `json:"content,omitempty" xml:"content,omitempty"`
	// content_id
	ContentId *string `json:"content_id,omitempty" xml:"content_id,omitempty"`
	// content_name
	ContentName *string `json:"content_name,omitempty" xml:"content_name,omitempty"`
	// create_time
	CreateTime *int64 `json:"create_time,omitempty" xml:"create_time,omitempty"`
	// is_directory
	IsDirectory *bool `json:"is_directory,omitempty" xml:"is_directory,omitempty"`
	// parent_content_id
	ParentContentId *string `json:"parent_content_id,omitempty" xml:"parent_content_id,omitempty"`
	// project_id
	ProjectId *string `json:"project_id,omitempty" xml:"project_id,omitempty"`
	// update_time
	UpdateTime *int64 `json:"update_time,omitempty" xml:"update_time,omitempty"`
}

func (s ALiYunChainContractContent) String() string {
	return tea.Prettify(s)
}

func (s ALiYunChainContractContent) GoString() string {
	return s.String()
}

func (s *ALiYunChainContractContent) SetContent(v string) *ALiYunChainContractContent {
	s.Content = &v
	return s
}

func (s *ALiYunChainContractContent) SetContentId(v string) *ALiYunChainContractContent {
	s.ContentId = &v
	return s
}

func (s *ALiYunChainContractContent) SetContentName(v string) *ALiYunChainContractContent {
	s.ContentName = &v
	return s
}

func (s *ALiYunChainContractContent) SetCreateTime(v int64) *ALiYunChainContractContent {
	s.CreateTime = &v
	return s
}

func (s *ALiYunChainContractContent) SetIsDirectory(v bool) *ALiYunChainContractContent {
	s.IsDirectory = &v
	return s
}

func (s *ALiYunChainContractContent) SetParentContentId(v string) *ALiYunChainContractContent {
	s.ParentContentId = &v
	return s
}

func (s *ALiYunChainContractContent) SetProjectId(v string) *ALiYunChainContractContent {
	s.ProjectId = &v
	return s
}

func (s *ALiYunChainContractContent) SetUpdateTime(v int64) *ALiYunChainContractContent {
	s.UpdateTime = &v
	return s
}

// 结果
type Result struct {
	// 联盟id
	ConsortiumId *string `json:"consortium_id,omitempty" xml:"consortium_id,omitempty" require:"true"`
}

func (s Result) String() string {
	return tea.Prettify(s)
}

func (s Result) GoString() string {
	return s.String()
}

func (s *Result) SetConsortiumId(v string) *Result {
	s.ConsortiumId = &v
	return s
}

// 更新did doc中的service信息
type UpdateDidService struct {
	// 待更新did之前的版本号
	PreviousVersion *int64 `json:"previous_version,omitempty" xml:"previous_version,omitempty" require:"true"`
	// did doc中的service id
	ServiceId *string `json:"service_id,omitempty" xml:"service_id,omitempty" require:"true"`
	// 服务信息
	ServiceInfo *DidServiceInfo `json:"service_info,omitempty" xml:"service_info,omitempty" require:"true"`
	// 服务类型
	ServiceType *string `json:"service_type,omitempty" xml:"service_type,omitempty" require:"true"`
}

func (s UpdateDidService) String() string {
	return tea.Prettify(s)
}

func (s UpdateDidService) GoString() string {
	return s.String()
}

func (s *UpdateDidService) SetPreviousVersion(v int64) *UpdateDidService {
	s.PreviousVersion = &v
	return s
}

func (s *UpdateDidService) SetServiceId(v string) *UpdateDidService {
	s.ServiceId = &v
	return s
}

func (s *UpdateDidService) SetServiceInfo(v *DidServiceInfo) *UpdateDidService {
	s.ServiceInfo = v
	return s
}

func (s *UpdateDidService) SetServiceType(v string) *UpdateDidService {
	s.ServiceType = &v
	return s
}

// 包含业务组的用户信息
type AccountInfoWithBiz struct {
	// 注册地址
	Address *string `json:"address,omitempty" xml:"address,omitempty"`
	// 业务场景code
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty" require:"true"`
	// 业务名称
	BizName *string `json:"biz_name,omitempty" xml:"biz_name,omitempty" require:"true"`
	// 业务类型，预留
	BizType *string `json:"biz_type,omitempty" xml:"biz_type,omitempty"`
	// 用户创建时间，格式yyyy-MM-dd HH:mm:ss
	CreateTime *string `json:"create_time,omitempty" xml:"create_time,omitempty"`
	// 用户注销时间，格式yyyy-MM-dd HH:mm:ss
	EndTime *string `json:"end_time,omitempty" xml:"end_time,omitempty"`
	// 扩展字段，使用json格式
	Extension *string `json:"extension,omitempty" xml:"extension,omitempty" maxLength:"200"`
	// 业务组code
	GroupCode *string `json:"group_code,omitempty" xml:"group_code,omitempty" require:"true"`
	// 业务组名称
	GroupName *string `json:"group_name,omitempty" xml:"group_name,omitempty" require:"true"`
	// 唯一标示类型，0:统一信用代码,1:开票机构代码,2:身份证号
	IdentityType *int64 `json:"identity_type,omitempty" xml:"identity_type,omitempty"`
	// 唯一标示码
	IdentityValue *string `json:"identity_value,omitempty" xml:"identity_value,omitempty"`
	// 用户标签
	Label *string `json:"label,omitempty" xml:"label,omitempty"`
	// 间连用户的上层直连用户名称
	Parent *string `json:"parent,omitempty" xml:"parent,omitempty"`
	// 统计时间，时间格式：yyyy-MM-dd HH:mm:ss
	StatDate *string `json:"stat_date,omitempty" xml:"stat_date,omitempty"`
	// 用户id
	UserId *string `json:"user_id,omitempty" xml:"user_id,omitempty"`
	// 用户或企业名称
	UserName *string `json:"user_name,omitempty" xml:"user_name,omitempty"`
	// 用户类型：direct直连，indirect间连，partner合作伙伴
	UserType *string `json:"user_type,omitempty" xml:"user_type,omitempty"`
}

func (s AccountInfoWithBiz) String() string {
	return tea.Prettify(s)
}

func (s AccountInfoWithBiz) GoString() string {
	return s.String()
}

func (s *AccountInfoWithBiz) SetAddress(v string) *AccountInfoWithBiz {
	s.Address = &v
	return s
}

func (s *AccountInfoWithBiz) SetBizCode(v string) *AccountInfoWithBiz {
	s.BizCode = &v
	return s
}

func (s *AccountInfoWithBiz) SetBizName(v string) *AccountInfoWithBiz {
	s.BizName = &v
	return s
}

func (s *AccountInfoWithBiz) SetBizType(v string) *AccountInfoWithBiz {
	s.BizType = &v
	return s
}

func (s *AccountInfoWithBiz) SetCreateTime(v string) *AccountInfoWithBiz {
	s.CreateTime = &v
	return s
}

func (s *AccountInfoWithBiz) SetEndTime(v string) *AccountInfoWithBiz {
	s.EndTime = &v
	return s
}

func (s *AccountInfoWithBiz) SetExtension(v string) *AccountInfoWithBiz {
	s.Extension = &v
	return s
}

func (s *AccountInfoWithBiz) SetGroupCode(v string) *AccountInfoWithBiz {
	s.GroupCode = &v
	return s
}

func (s *AccountInfoWithBiz) SetGroupName(v string) *AccountInfoWithBiz {
	s.GroupName = &v
	return s
}

func (s *AccountInfoWithBiz) SetIdentityType(v int64) *AccountInfoWithBiz {
	s.IdentityType = &v
	return s
}

func (s *AccountInfoWithBiz) SetIdentityValue(v string) *AccountInfoWithBiz {
	s.IdentityValue = &v
	return s
}

func (s *AccountInfoWithBiz) SetLabel(v string) *AccountInfoWithBiz {
	s.Label = &v
	return s
}

func (s *AccountInfoWithBiz) SetParent(v string) *AccountInfoWithBiz {
	s.Parent = &v
	return s
}

func (s *AccountInfoWithBiz) SetStatDate(v string) *AccountInfoWithBiz {
	s.StatDate = &v
	return s
}

func (s *AccountInfoWithBiz) SetUserId(v string) *AccountInfoWithBiz {
	s.UserId = &v
	return s
}

func (s *AccountInfoWithBiz) SetUserName(v string) *AccountInfoWithBiz {
	s.UserName = &v
	return s
}

func (s *AccountInfoWithBiz) SetUserType(v string) *AccountInfoWithBiz {
	s.UserType = &v
	return s
}

// 物流金融信用凭证信息
type IssueInfo struct {
	// 信用流转批次号
	BatchId *string `json:"batch_id,omitempty" xml:"batch_id,omitempty"`
	// 合同编号
	ContractId *string `json:"contract_id,omitempty" xml:"contract_id,omitempty"`
	// 信用凭证额度
	CreditLimit *string `json:"credit_limit,omitempty" xml:"credit_limit,omitempty"`
	// 失败原因信息
	ErrMsg *string `json:"err_msg,omitempty" xml:"err_msg,omitempty"`
	// 信用凭证到期时间
	ExpireDate *string `json:"expire_date,omitempty" xml:"expire_date,omitempty"`
	// 信用凭证发起时间
	IssueDate *string `json:"issue_date,omitempty" xml:"issue_date,omitempty"`
	// 信用流转凭证
	IssueId *string `json:"issue_id,omitempty" xml:"issue_id,omitempty"`
	// 发行结果状态
	// -1:发行失败状态， 0:未完成状态， 1:已发行状态
	Status *int64 `json:"status,omitempty" xml:"status,omitempty"`
	// 发行信用流转的运单号
	WaybillId *string `json:"waybill_id,omitempty" xml:"waybill_id,omitempty"`
}

func (s IssueInfo) String() string {
	return tea.Prettify(s)
}

func (s IssueInfo) GoString() string {
	return s.String()
}

func (s *IssueInfo) SetBatchId(v string) *IssueInfo {
	s.BatchId = &v
	return s
}

func (s *IssueInfo) SetContractId(v string) *IssueInfo {
	s.ContractId = &v
	return s
}

func (s *IssueInfo) SetCreditLimit(v string) *IssueInfo {
	s.CreditLimit = &v
	return s
}

func (s *IssueInfo) SetErrMsg(v string) *IssueInfo {
	s.ErrMsg = &v
	return s
}

func (s *IssueInfo) SetExpireDate(v string) *IssueInfo {
	s.ExpireDate = &v
	return s
}

func (s *IssueInfo) SetIssueDate(v string) *IssueInfo {
	s.IssueDate = &v
	return s
}

func (s *IssueInfo) SetIssueId(v string) *IssueInfo {
	s.IssueId = &v
	return s
}

func (s *IssueInfo) SetStatus(v int64) *IssueInfo {
	s.Status = &v
	return s
}

func (s *IssueInfo) SetWaybillId(v string) *IssueInfo {
	s.WaybillId = &v
	return s
}

// 查看应用秘钥响应信息
type ApplicationGetSkResp struct {
	// 应用秘钥
	Sk *string `json:"sk,omitempty" xml:"sk,omitempty"`
}

func (s ApplicationGetSkResp) String() string {
	return tea.Prettify(s)
}

func (s ApplicationGetSkResp) GoString() string {
	return s.String()
}

func (s *ApplicationGetSkResp) SetSk(v string) *ApplicationGetSkResp {
	s.Sk = &v
	return s
}

// 分页失败的展示日志（过滤器：待处理、成功、已忽略）
type CommonResponsePageableStructBody struct {
	// 页面规格
	PageSize *string `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 当前页码
	Current *string `json:"current,omitempty" xml:"current,omitempty"`
	// 总条数
	Total *string `json:"total,omitempty" xml:"total,omitempty"`
	// 失败日志数组
	List []*TriggerLogDTOStructBody `json:"list,omitempty" xml:"list,omitempty" type:"Repeated"`
}

func (s CommonResponsePageableStructBody) String() string {
	return tea.Prettify(s)
}

func (s CommonResponsePageableStructBody) GoString() string {
	return s.String()
}

func (s *CommonResponsePageableStructBody) SetPageSize(v string) *CommonResponsePageableStructBody {
	s.PageSize = &v
	return s
}

func (s *CommonResponsePageableStructBody) SetCurrent(v string) *CommonResponsePageableStructBody {
	s.Current = &v
	return s
}

func (s *CommonResponsePageableStructBody) SetTotal(v string) *CommonResponsePageableStructBody {
	s.Total = &v
	return s
}

func (s *CommonResponsePageableStructBody) SetList(v []*TriggerLogDTOStructBody) *CommonResponsePageableStructBody {
	s.List = v
	return s
}

// 阿里云售卖区信息
type ALiYunChainRegion struct {
	// region_id
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty"`
	// region_name
	RegionName *string `json:"region_name,omitempty" xml:"region_name,omitempty"`
}

func (s ALiYunChainRegion) String() string {
	return tea.Prettify(s)
}

func (s ALiYunChainRegion) GoString() string {
	return s.String()
}

func (s *ALiYunChainRegion) SetRegionId(v string) *ALiYunChainRegion {
	s.RegionId = &v
	return s
}

func (s *ALiYunChainRegion) SetRegionName(v string) *ALiYunChainRegion {
	s.RegionName = &v
	return s
}

// 阿里云售卖联盟信息
type ALiYunBuyUnion struct {
	// consortium_name
	ConsortiumName *string `json:"consortium_name,omitempty" xml:"consortium_name,omitempty"`
	// consortium_id
	ConsortiumId *string `json:"consortium_id,omitempty" xml:"consortium_id,omitempty"`
}

func (s ALiYunBuyUnion) String() string {
	return tea.Prettify(s)
}

func (s ALiYunBuyUnion) GoString() string {
	return s.String()
}

func (s *ALiYunBuyUnion) SetConsortiumName(v string) *ALiYunBuyUnion {
	s.ConsortiumName = &v
	return s
}

func (s *ALiYunBuyUnion) SetConsortiumId(v string) *ALiYunBuyUnion {
	s.ConsortiumId = &v
	return s
}

// 分享可验证声明时的核心内容
type VcShareStruct struct {
	// 分享的目标VC的id
	VcId *string `json:"vc_id,omitempty" xml:"vc_id,omitempty" require:"true"`
	// 目标的VC持有者的did
	OwnerDid *string `json:"owner_did,omitempty" xml:"owner_did,omitempty" require:"true"`
	// 在支持声明的claim字段级别分享能力时使用，可以指定哪些字段隐藏，哪些字段分享。示例中标记为”1“的是隐藏，”0“的是分享明文。
	Index *string `json:"index,omitempty" xml:"index,omitempty"`
	// 非托管模式下owner_did的签名，作为授权凭证
	Signature *string `json:"signature,omitempty" xml:"signature,omitempty"`
}

func (s VcShareStruct) String() string {
	return tea.Prettify(s)
}

func (s VcShareStruct) GoString() string {
	return s.String()
}

func (s *VcShareStruct) SetVcId(v string) *VcShareStruct {
	s.VcId = &v
	return s
}

func (s *VcShareStruct) SetOwnerDid(v string) *VcShareStruct {
	s.OwnerDid = &v
	return s
}

func (s *VcShareStruct) SetIndex(v string) *VcShareStruct {
	s.Index = &v
	return s
}

func (s *VcShareStruct) SetSignature(v string) *VcShareStruct {
	s.Signature = &v
	return s
}

// 小程序浏览器授权类型
type MiniAppBrowserAuthType struct {
	// 授权类型
	AuthType *string `json:"auth_type,omitempty" xml:"auth_type,omitempty" require:"true"`
}

func (s MiniAppBrowserAuthType) String() string {
	return tea.Prettify(s)
}

func (s MiniAppBrowserAuthType) GoString() string {
	return s.String()
}

func (s *MiniAppBrowserAuthType) SetAuthType(v string) *MiniAppBrowserAuthType {
	s.AuthType = &v
	return s
}

// 链上交易信息
type TxInfo struct {
	// 上链结果
	TxReceiptResult *string `json:"tx_receipt_result,omitempty" xml:"tx_receipt_result,omitempty" require:"true"`
	// 区块链id
	BizId *string `json:"biz_id,omitempty" xml:"biz_id,omitempty" require:"true"`
	// 交易hash
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty" require:"true"`
	// 交易类型
	TxType *string `json:"tx_type,omitempty" xml:"tx_type,omitempty" require:"true"`
	// 时间戳
	Timestamp *int64 `json:"timestamp,omitempty" xml:"timestamp,omitempty" require:"true"`
	// 区块高度
	BlockNumber *string `json:"block_number,omitempty" xml:"block_number,omitempty" require:"true"`
	// 交易随机数Nonce
	Nonce *string `json:"nonce,omitempty" xml:"nonce,omitempty" require:"true"`
	// 发起地址
	From *string `json:"from,omitempty" xml:"from,omitempty" require:"true"`
	// 目标地址
	To *string `json:"to,omitempty" xml:"to,omitempty" require:"true"`
	// 签名
	Signature *string `json:"signature,omitempty" xml:"signature,omitempty" require:"true"`
}

func (s TxInfo) String() string {
	return tea.Prettify(s)
}

func (s TxInfo) GoString() string {
	return s.String()
}

func (s *TxInfo) SetTxReceiptResult(v string) *TxInfo {
	s.TxReceiptResult = &v
	return s
}

func (s *TxInfo) SetBizId(v string) *TxInfo {
	s.BizId = &v
	return s
}

func (s *TxInfo) SetTxHash(v string) *TxInfo {
	s.TxHash = &v
	return s
}

func (s *TxInfo) SetTxType(v string) *TxInfo {
	s.TxType = &v
	return s
}

func (s *TxInfo) SetTimestamp(v int64) *TxInfo {
	s.Timestamp = &v
	return s
}

func (s *TxInfo) SetBlockNumber(v string) *TxInfo {
	s.BlockNumber = &v
	return s
}

func (s *TxInfo) SetNonce(v string) *TxInfo {
	s.Nonce = &v
	return s
}

func (s *TxInfo) SetFrom(v string) *TxInfo {
	s.From = &v
	return s
}

func (s *TxInfo) SetTo(v string) *TxInfo {
	s.To = &v
	return s
}

func (s *TxInfo) SetSignature(v string) *TxInfo {
	s.Signature = &v
	return s
}

// 服务发现结果
type ServiceDiscoveryResult struct {
	// 提供该服务能力的did
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 提供该服务能力的endpoint信息
	Services []*DidDocServicesInfo `json:"services,omitempty" xml:"services,omitempty" require:"true" type:"Repeated"`
}

func (s ServiceDiscoveryResult) String() string {
	return tea.Prettify(s)
}

func (s ServiceDiscoveryResult) GoString() string {
	return s.String()
}

func (s *ServiceDiscoveryResult) SetDid(v string) *ServiceDiscoveryResult {
	s.Did = &v
	return s
}

func (s *ServiceDiscoveryResult) SetServices(v []*DidDocServicesInfo) *ServiceDiscoveryResult {
	s.Services = v
	return s
}

// 蚂蚁链交易汇总信息
type BlockchainBrowserTransactionStatistic struct {
	// 蚂蚁链id
	Bizid *string `json:"bizid,omitempty" xml:"bizid,omitempty" require:"true"`
	// 开始时间
	CreateTime *int64 `json:"create_time,omitempty" xml:"create_time,omitempty" require:"true"`
	// 时间点
	DateTime *string `json:"date_time,omitempty" xml:"date_time,omitempty" require:"true"`
	// 统计时间内最新块高度
	LastSumBlockHeight *int64 `json:"last_sum_block_height,omitempty" xml:"last_sum_block_height,omitempty" require:"true"`
	// 统计周期内交易的数量
	TransCount *int64 `json:"trans_count,omitempty" xml:"trans_count,omitempty" require:"true"`
}

func (s BlockchainBrowserTransactionStatistic) String() string {
	return tea.Prettify(s)
}

func (s BlockchainBrowserTransactionStatistic) GoString() string {
	return s.String()
}

func (s *BlockchainBrowserTransactionStatistic) SetBizid(v string) *BlockchainBrowserTransactionStatistic {
	s.Bizid = &v
	return s
}

func (s *BlockchainBrowserTransactionStatistic) SetCreateTime(v int64) *BlockchainBrowserTransactionStatistic {
	s.CreateTime = &v
	return s
}

func (s *BlockchainBrowserTransactionStatistic) SetDateTime(v string) *BlockchainBrowserTransactionStatistic {
	s.DateTime = &v
	return s
}

func (s *BlockchainBrowserTransactionStatistic) SetLastSumBlockHeight(v int64) *BlockchainBrowserTransactionStatistic {
	s.LastSumBlockHeight = &v
	return s
}

func (s *BlockchainBrowserTransactionStatistic) SetTransCount(v int64) *BlockchainBrowserTransactionStatistic {
	s.TransCount = &v
	return s
}

// 阿里云区块链Rest信息
type ALiYunChainRest struct {
	// access_id
	AccessId *string `json:"access_id,omitempty" xml:"access_id,omitempty"`
	// create_time
	CreateTime *int64 `json:"create_time,omitempty" xml:"create_time,omitempty"`
	// rest
	Rest *string `json:"rest,omitempty" xml:"rest,omitempty"`
	// update_time
	UpdateTime *int64 `json:"update_time,omitempty" xml:"update_time,omitempty"`
	// REST开通结果
	Result *string `json:"result,omitempty" xml:"result,omitempty"`
}

func (s ALiYunChainRest) String() string {
	return tea.Prettify(s)
}

func (s ALiYunChainRest) GoString() string {
	return s.String()
}

func (s *ALiYunChainRest) SetAccessId(v string) *ALiYunChainRest {
	s.AccessId = &v
	return s
}

func (s *ALiYunChainRest) SetCreateTime(v int64) *ALiYunChainRest {
	s.CreateTime = &v
	return s
}

func (s *ALiYunChainRest) SetRest(v string) *ALiYunChainRest {
	s.Rest = &v
	return s
}

func (s *ALiYunChainRest) SetUpdateTime(v int64) *ALiYunChainRest {
	s.UpdateTime = &v
	return s
}

func (s *ALiYunChainRest) SetResult(v string) *ALiYunChainRest {
	s.Result = &v
	return s
}

// 通过controller注册用户
type VcControllerAddUserRegisterPayload struct {
	// 注册用户did
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 用户did对应的授权公钥
	PublicKey *string `json:"public_key,omitempty" xml:"public_key,omitempty" require:"true"`
	// 业务区块连的bizid
	VcChannel *string `json:"vc_channel,omitempty" xml:"vc_channel,omitempty" maxLength:"32" minLength:"8"`
}

func (s VcControllerAddUserRegisterPayload) String() string {
	return tea.Prettify(s)
}

func (s VcControllerAddUserRegisterPayload) GoString() string {
	return s.String()
}

func (s *VcControllerAddUserRegisterPayload) SetDid(v string) *VcControllerAddUserRegisterPayload {
	s.Did = &v
	return s
}

func (s *VcControllerAddUserRegisterPayload) SetPublicKey(v string) *VcControllerAddUserRegisterPayload {
	s.PublicKey = &v
	return s
}

func (s *VcControllerAddUserRegisterPayload) SetVcChannel(v string) *VcControllerAddUserRegisterPayload {
	s.VcChannel = &v
	return s
}

// 账户信息
type AccountInfo struct {
	// 版通数量
	EpAmount *int64 `json:"ep_amount,omitempty" xml:"ep_amount,omitempty" require:"true"`
	// 版通代码
	EpCode *string `json:"ep_code,omitempty" xml:"ep_code,omitempty" require:"true"`
}

func (s AccountInfo) String() string {
	return tea.Prettify(s)
}

func (s AccountInfo) GoString() string {
	return s.String()
}

func (s *AccountInfo) SetEpAmount(v int64) *AccountInfo {
	s.EpAmount = &v
	return s
}

func (s *AccountInfo) SetEpCode(v string) *AccountInfo {
	s.EpCode = &v
	return s
}

// 阿里云区块链配置信息
type ALiYunChainConfigOption struct {
	// config_option
	ConfigOption *string `json:"config_option,omitempty" xml:"config_option,omitempty"`
	// show_name
	ShowName *string `json:"show_name,omitempty" xml:"show_name,omitempty"`
	// enable
	Enable *bool `json:"enable,omitempty" xml:"enable,omitempty"`
}

func (s ALiYunChainConfigOption) String() string {
	return tea.Prettify(s)
}

func (s ALiYunChainConfigOption) GoString() string {
	return s.String()
}

func (s *ALiYunChainConfigOption) SetConfigOption(v string) *ALiYunChainConfigOption {
	s.ConfigOption = &v
	return s
}

func (s *ALiYunChainConfigOption) SetShowName(v string) *ALiYunChainConfigOption {
	s.ShowName = &v
	return s
}

func (s *ALiYunChainConfigOption) SetEnable(v bool) *ALiYunChainConfigOption {
	s.Enable = &v
	return s
}

// 删除资源返回结果
type ALiYunDeleteResource struct {
	// data
	Data *bool `json:"data,omitempty" xml:"data,omitempty"`
	// success
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s ALiYunDeleteResource) String() string {
	return tea.Prettify(s)
}

func (s ALiYunDeleteResource) GoString() string {
	return s.String()
}

func (s *ALiYunDeleteResource) SetData(v bool) *ALiYunDeleteResource {
	s.Data = &v
	return s
}

func (s *ALiYunDeleteResource) SetSuccess(v bool) *ALiYunDeleteResource {
	s.Success = &v
	return s
}

// 交易详情
type TransactionInfo struct {
	// 交易时间戳
	Timestamp *int64 `json:"timestamp,omitempty" xml:"timestamp,omitempty" require:"true"`
	// 交易hash
	Hash *string `json:"hash,omitempty" xml:"hash,omitempty" require:"true"`
	// 交易块高
	Height *int64 `json:"height,omitempty" xml:"height,omitempty" require:"true"`
	// 交易所在块高
	Blockhash *string `json:"blockhash,omitempty" xml:"blockhash,omitempty" require:"true"`
	// 交易来源
	From *string `json:"from,omitempty" xml:"from,omitempty" require:"true"`
	// 交易地址
	To *string `json:"to,omitempty" xml:"to,omitempty" require:"true"`
	// 交易类型
	Txtype *int64 `json:"txtype,omitempty" xml:"txtype,omitempty" require:"true"`
	// 转账额度
	Value *int64 `json:"value,omitempty" xml:"value,omitempty" require:"true"`
	// logs
	Logs *string `json:"logs,omitempty" xml:"logs,omitempty" require:"true"`
	// 燃料消耗
	Gasused *int64 `json:"gasused,omitempty" xml:"gasused,omitempty" require:"true"`
	// result
	Result *string `json:"result,omitempty" xml:"result,omitempty" require:"true"`
	// 拓展json字段
	Json *string `json:"json,omitempty" xml:"json,omitempty" require:"true"`
}

func (s TransactionInfo) String() string {
	return tea.Prettify(s)
}

func (s TransactionInfo) GoString() string {
	return s.String()
}

func (s *TransactionInfo) SetTimestamp(v int64) *TransactionInfo {
	s.Timestamp = &v
	return s
}

func (s *TransactionInfo) SetHash(v string) *TransactionInfo {
	s.Hash = &v
	return s
}

func (s *TransactionInfo) SetHeight(v int64) *TransactionInfo {
	s.Height = &v
	return s
}

func (s *TransactionInfo) SetBlockhash(v string) *TransactionInfo {
	s.Blockhash = &v
	return s
}

func (s *TransactionInfo) SetFrom(v string) *TransactionInfo {
	s.From = &v
	return s
}

func (s *TransactionInfo) SetTo(v string) *TransactionInfo {
	s.To = &v
	return s
}

func (s *TransactionInfo) SetTxtype(v int64) *TransactionInfo {
	s.Txtype = &v
	return s
}

func (s *TransactionInfo) SetValue(v int64) *TransactionInfo {
	s.Value = &v
	return s
}

func (s *TransactionInfo) SetLogs(v string) *TransactionInfo {
	s.Logs = &v
	return s
}

func (s *TransactionInfo) SetGasused(v int64) *TransactionInfo {
	s.Gasused = &v
	return s
}

func (s *TransactionInfo) SetResult(v string) *TransactionInfo {
	s.Result = &v
	return s
}

func (s *TransactionInfo) SetJson(v string) *TransactionInfo {
	s.Json = &v
	return s
}

// 阿里云区块链小程序权限控制信息
type ALiYunChainMiniAppAuthorization struct {
	// ant_chain_id
	AntChainId *string `json:"ant_chain_id,omitempty" xml:"ant_chain_id,omitempty"`
	// q_r_code_type
	QRCodeType *string `json:"q_r_code_type,omitempty" xml:"q_r_code_type,omitempty"`
	// authorization_type
	AuthorizationType *string `json:"authorization_type,omitempty" xml:"authorization_type,omitempty"`
}

func (s ALiYunChainMiniAppAuthorization) String() string {
	return tea.Prettify(s)
}

func (s ALiYunChainMiniAppAuthorization) GoString() string {
	return s.String()
}

func (s *ALiYunChainMiniAppAuthorization) SetAntChainId(v string) *ALiYunChainMiniAppAuthorization {
	s.AntChainId = &v
	return s
}

func (s *ALiYunChainMiniAppAuthorization) SetQRCodeType(v string) *ALiYunChainMiniAppAuthorization {
	s.QRCodeType = &v
	return s
}

func (s *ALiYunChainMiniAppAuthorization) SetAuthorizationType(v string) *ALiYunChainMiniAppAuthorization {
	s.AuthorizationType = &v
	return s
}

// 历史任务信息
type OldTaskInfo struct {
	// 任务标题(同一个租户不能重复)
	TaskName *string `json:"task_name,omitempty" xml:"task_name,omitempty" require:"true"`
	// appId
	AppId *string `json:"app_id,omitempty" xml:"app_id,omitempty" require:"true"`
	// 问卷ID
	SurveyId *string `json:"survey_id,omitempty" xml:"survey_id,omitempty" require:"true"`
	// 备注信息
	Notes *string `json:"notes,omitempty" xml:"notes,omitempty"`
	// 租户ID
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty" require:"true"`
	// 操作者
	Operator *string `json:"operator,omitempty" xml:"operator,omitempty" require:"true"`
	// banner标题
	BannerTitle *string `json:"banner_title,omitempty" xml:"banner_title,omitempty" require:"true"`
	// banner图片地址（最多支持3张）
	BannerImageUrls *string `json:"banner_image_urls,omitempty" xml:"banner_image_urls,omitempty"`
	// banner 图片地址, 拼装后的url
	BannerImageFullUrls []*string `json:"banner_image_full_urls,omitempty" xml:"banner_image_full_urls,omitempty" type:"Repeated"`
	// 题量
	QuestionNum *int64 `json:"question_num,omitempty" xml:"question_num,omitempty" require:"true"`
	// 任务连接地址
	TaskLinkUrl *string `json:"task_link_url,omitempty" xml:"task_link_url,omitempty" require:"true"`
	// 人群划分描述
	PersonDivideContent *string `json:"person_divide_content,omitempty" xml:"person_divide_content,omitempty"`
	// 城市列表
	CityDivideUrls *string `json:"city_divide_urls,omitempty" xml:"city_divide_urls,omitempty"`
	// 城市列表, 拼装后的url
	CityDivideFullUrls []*string `json:"city_divide_full_urls,omitempty" xml:"city_divide_full_urls,omitempty" type:"Repeated"`
	// 样本数量
	SampleNum *int64 `json:"sample_num,omitempty" xml:"sample_num,omitempty" require:"true"`
	// 完成样本量
	CompletedNum *int64 `json:"completed_num,omitempty" xml:"completed_num,omitempty" require:"true"`
	// 产品下单code类型（1-资源包 2-后付费）
	ProductCodeType *string `json:"product_code_type,omitempty" xml:"product_code_type,omitempty" require:"true"`
	// 产品余量
	ProductCapacity *int64 `json:"product_capacity,omitempty" xml:"product_capacity,omitempty" require:"true"`
	// 奖励渠道（0-手动发支付宝余额 1-海豚红包 2-问卷自带）
	PrizeChannel *int64 `json:"prize_channel,omitempty" xml:"prize_channel,omitempty" require:"true"`
	// 支付宝账号
	AlipayAccountId *string `json:"alipay_account_id,omitempty" xml:"alipay_account_id,omitempty"`
	// 奖励类型（0-定额红包）
	PrizeType *int64 `json:"prize_type,omitempty" xml:"prize_type,omitempty" require:"true"`
	// 全额红包金额，奖励渠道为0和1时
	FullRedPacketAmount *string `json:"full_red_packet_amount,omitempty" xml:"full_red_packet_amount,omitempty" require:"true"`
	// 全额红包描述，奖励渠道为2时，此处必填
	FullRedPacketTextInfo *string `json:"full_red_packet_text_info,omitempty" xml:"full_red_packet_text_info,omitempty"`
	// 甄别红包金额
	ExamineRedPacketAmount *string `json:"examine_red_packet_amount,omitempty" xml:"examine_red_packet_amount,omitempty" require:"true"`
	// 关联的证书instanceId
	CertInstanceId *string `json:"cert_instance_id,omitempty" xml:"cert_instance_id,omitempty"`
	// 证书实例详情
	CertInstanceDetail *CertInstanceDetail `json:"cert_instance_detail,omitempty" xml:"cert_instance_detail,omitempty"`
	// 审核建议
	VerifyComment *string `json:"verify_comment,omitempty" xml:"verify_comment,omitempty"`
	// 任务创建时间
	GmtCreate *string `json:"gmt_create,omitempty" xml:"gmt_create,omitempty" require:"true"`
	// 任务更新时间
	GmtModified *string `json:"gmt_modified,omitempty" xml:"gmt_modified,omitempty" require:"true"`
	// 审核理由
	ReviewContent *string `json:"review_content,omitempty" xml:"review_content,omitempty"`
	// 人群配置信息
	CrowdConfig *string `json:"crowd_config,omitempty" xml:"crowd_config,omitempty"`
	// 任务ID
	TaskId *string `json:"task_id,omitempty" xml:"task_id,omitempty" require:"true"`
	// 状态
	Status *int64 `json:"status,omitempty" xml:"status,omitempty" require:"true"`
}

func (s OldTaskInfo) String() string {
	return tea.Prettify(s)
}

func (s OldTaskInfo) GoString() string {
	return s.String()
}

func (s *OldTaskInfo) SetTaskName(v string) *OldTaskInfo {
	s.TaskName = &v
	return s
}

func (s *OldTaskInfo) SetAppId(v string) *OldTaskInfo {
	s.AppId = &v
	return s
}

func (s *OldTaskInfo) SetSurveyId(v string) *OldTaskInfo {
	s.SurveyId = &v
	return s
}

func (s *OldTaskInfo) SetNotes(v string) *OldTaskInfo {
	s.Notes = &v
	return s
}

func (s *OldTaskInfo) SetTenantId(v string) *OldTaskInfo {
	s.TenantId = &v
	return s
}

func (s *OldTaskInfo) SetOperator(v string) *OldTaskInfo {
	s.Operator = &v
	return s
}

func (s *OldTaskInfo) SetBannerTitle(v string) *OldTaskInfo {
	s.BannerTitle = &v
	return s
}

func (s *OldTaskInfo) SetBannerImageUrls(v string) *OldTaskInfo {
	s.BannerImageUrls = &v
	return s
}

func (s *OldTaskInfo) SetBannerImageFullUrls(v []*string) *OldTaskInfo {
	s.BannerImageFullUrls = v
	return s
}

func (s *OldTaskInfo) SetQuestionNum(v int64) *OldTaskInfo {
	s.QuestionNum = &v
	return s
}

func (s *OldTaskInfo) SetTaskLinkUrl(v string) *OldTaskInfo {
	s.TaskLinkUrl = &v
	return s
}

func (s *OldTaskInfo) SetPersonDivideContent(v string) *OldTaskInfo {
	s.PersonDivideContent = &v
	return s
}

func (s *OldTaskInfo) SetCityDivideUrls(v string) *OldTaskInfo {
	s.CityDivideUrls = &v
	return s
}

func (s *OldTaskInfo) SetCityDivideFullUrls(v []*string) *OldTaskInfo {
	s.CityDivideFullUrls = v
	return s
}

func (s *OldTaskInfo) SetSampleNum(v int64) *OldTaskInfo {
	s.SampleNum = &v
	return s
}

func (s *OldTaskInfo) SetCompletedNum(v int64) *OldTaskInfo {
	s.CompletedNum = &v
	return s
}

func (s *OldTaskInfo) SetProductCodeType(v string) *OldTaskInfo {
	s.ProductCodeType = &v
	return s
}

func (s *OldTaskInfo) SetProductCapacity(v int64) *OldTaskInfo {
	s.ProductCapacity = &v
	return s
}

func (s *OldTaskInfo) SetPrizeChannel(v int64) *OldTaskInfo {
	s.PrizeChannel = &v
	return s
}

func (s *OldTaskInfo) SetAlipayAccountId(v string) *OldTaskInfo {
	s.AlipayAccountId = &v
	return s
}

func (s *OldTaskInfo) SetPrizeType(v int64) *OldTaskInfo {
	s.PrizeType = &v
	return s
}

func (s *OldTaskInfo) SetFullRedPacketAmount(v string) *OldTaskInfo {
	s.FullRedPacketAmount = &v
	return s
}

func (s *OldTaskInfo) SetFullRedPacketTextInfo(v string) *OldTaskInfo {
	s.FullRedPacketTextInfo = &v
	return s
}

func (s *OldTaskInfo) SetExamineRedPacketAmount(v string) *OldTaskInfo {
	s.ExamineRedPacketAmount = &v
	return s
}

func (s *OldTaskInfo) SetCertInstanceId(v string) *OldTaskInfo {
	s.CertInstanceId = &v
	return s
}

func (s *OldTaskInfo) SetCertInstanceDetail(v *CertInstanceDetail) *OldTaskInfo {
	s.CertInstanceDetail = v
	return s
}

func (s *OldTaskInfo) SetVerifyComment(v string) *OldTaskInfo {
	s.VerifyComment = &v
	return s
}

func (s *OldTaskInfo) SetGmtCreate(v string) *OldTaskInfo {
	s.GmtCreate = &v
	return s
}

func (s *OldTaskInfo) SetGmtModified(v string) *OldTaskInfo {
	s.GmtModified = &v
	return s
}

func (s *OldTaskInfo) SetReviewContent(v string) *OldTaskInfo {
	s.ReviewContent = &v
	return s
}

func (s *OldTaskInfo) SetCrowdConfig(v string) *OldTaskInfo {
	s.CrowdConfig = &v
	return s
}

func (s *OldTaskInfo) SetTaskId(v string) *OldTaskInfo {
	s.TaskId = &v
	return s
}

func (s *OldTaskInfo) SetStatus(v int64) *OldTaskInfo {
	s.Status = &v
	return s
}

// 阿里云蚂蚁区块链相关下载结果
type ALiYunChainDownload struct {
	// private_key
	PrivateKey *string `json:"private_key,omitempty" xml:"private_key,omitempty"`
	// download_path
	DownloadPath *ALiYunDownloadPath `json:"download_path,omitempty" xml:"download_path,omitempty"`
}

func (s ALiYunChainDownload) String() string {
	return tea.Prettify(s)
}

func (s ALiYunChainDownload) GoString() string {
	return s.String()
}

func (s *ALiYunChainDownload) SetPrivateKey(v string) *ALiYunChainDownload {
	s.PrivateKey = &v
	return s
}

func (s *ALiYunChainDownload) SetDownloadPath(v *ALiYunDownloadPath) *ALiYunChainDownload {
	s.DownloadPath = v
	return s
}

// 授权协议信息
type AgreementConfigInfoDTO struct {
	// 协议名称
	AgreementName *string `json:"agreement_name,omitempty" xml:"agreement_name,omitempty" require:"true"`
	// 协议链接
	AgreementUrl *string `json:"agreement_url,omitempty" xml:"agreement_url,omitempty" require:"true"`
	// 协议描述
	AgreementDesc *string `json:"agreement_desc,omitempty" xml:"agreement_desc,omitempty" require:"true"`
	// 协议版本
	Version *int64 `json:"version,omitempty" xml:"version,omitempty"`
}

func (s AgreementConfigInfoDTO) String() string {
	return tea.Prettify(s)
}

func (s AgreementConfigInfoDTO) GoString() string {
	return s.String()
}

func (s *AgreementConfigInfoDTO) SetAgreementName(v string) *AgreementConfigInfoDTO {
	s.AgreementName = &v
	return s
}

func (s *AgreementConfigInfoDTO) SetAgreementUrl(v string) *AgreementConfigInfoDTO {
	s.AgreementUrl = &v
	return s
}

func (s *AgreementConfigInfoDTO) SetAgreementDesc(v string) *AgreementConfigInfoDTO {
	s.AgreementDesc = &v
	return s
}

func (s *AgreementConfigInfoDTO) SetVersion(v int64) *AgreementConfigInfoDTO {
	s.Version = &v
	return s
}

// 阿里云链统计信息
type ALiYunChainStatics struct {
	// alias
	Alias *string `json:"alias,omitempty" xml:"alias,omitempty"`
	// Dt
	Dt *int64 `json:"dt,omitempty" xml:"dt,omitempty"`
	// trans_count
	TransCount *int64 `json:"trans_count,omitempty" xml:"trans_count,omitempty"`
	// last_sum_block_height
	LastSumBlockHeight *int64 `json:"last_sum_block_height,omitempty" xml:"last_sum_block_height,omitempty"`
	// creat_time
	CreatTime *int64 `json:"creat_time,omitempty" xml:"creat_time,omitempty"`
}

func (s ALiYunChainStatics) String() string {
	return tea.Prettify(s)
}

func (s ALiYunChainStatics) GoString() string {
	return s.String()
}

func (s *ALiYunChainStatics) SetAlias(v string) *ALiYunChainStatics {
	s.Alias = &v
	return s
}

func (s *ALiYunChainStatics) SetDt(v int64) *ALiYunChainStatics {
	s.Dt = &v
	return s
}

func (s *ALiYunChainStatics) SetTransCount(v int64) *ALiYunChainStatics {
	s.TransCount = &v
	return s
}

func (s *ALiYunChainStatics) SetLastSumBlockHeight(v int64) *ALiYunChainStatics {
	s.LastSumBlockHeight = &v
	return s
}

func (s *ALiYunChainStatics) SetCreatTime(v int64) *ALiYunChainStatics {
	s.CreatTime = &v
	return s
}

// 阿里云蚂蚁区块链证书列表信息
type ALiYunCertificateApplications struct {
	// pagination
	Pagination *ALiYunPagination `json:"pagination,omitempty" xml:"pagination,omitempty"`
	// certificate_application
	CertificateApplications []*ALiYunCertificateApplication `json:"certificate_applications,omitempty" xml:"certificate_applications,omitempty" type:"Repeated"`
}

func (s ALiYunCertificateApplications) String() string {
	return tea.Prettify(s)
}

func (s ALiYunCertificateApplications) GoString() string {
	return s.String()
}

func (s *ALiYunCertificateApplications) SetPagination(v *ALiYunPagination) *ALiYunCertificateApplications {
	s.Pagination = v
	return s
}

func (s *ALiYunCertificateApplications) SetCertificateApplications(v []*ALiYunCertificateApplication) *ALiYunCertificateApplications {
	s.CertificateApplications = v
	return s
}

// vc传输初始化结果
type VcTransmitInitResult struct {
	// 初始化成功与否
	IsSuccess *bool `json:"is_success,omitempty" xml:"is_success,omitempty" require:"true"`
	// 失败时返回的额外信息
	Message *string `json:"message,omitempty" xml:"message,omitempty" require:"true"`
	// 接受者did
	TargetVerifier *string `json:"target_verifier,omitempty" xml:"target_verifier,omitempty" require:"true"`
	// 待签名的交易hash
	NeedSignatureTxHash *string `json:"need_signature_tx_hash,omitempty" xml:"need_signature_tx_hash,omitempty" require:"true"`
}

func (s VcTransmitInitResult) String() string {
	return tea.Prettify(s)
}

func (s VcTransmitInitResult) GoString() string {
	return s.String()
}

func (s *VcTransmitInitResult) SetIsSuccess(v bool) *VcTransmitInitResult {
	s.IsSuccess = &v
	return s
}

func (s *VcTransmitInitResult) SetMessage(v string) *VcTransmitInitResult {
	s.Message = &v
	return s
}

func (s *VcTransmitInitResult) SetTargetVerifier(v string) *VcTransmitInitResult {
	s.TargetVerifier = &v
	return s
}

func (s *VcTransmitInitResult) SetNeedSignatureTxHash(v string) *VcTransmitInitResult {
	s.NeedSignatureTxHash = &v
	return s
}

// 具体实体的身份信息
type EntityInfo struct {
	// 0，身份证；1，电话；2，email，3，企业营业执照号
	Type *int64 `json:"type,omitempty" xml:"type,omitempty" require:"true"`
	// 具体号码
	Value *string `json:"value,omitempty" xml:"value,omitempty" require:"true"`
}

func (s EntityInfo) String() string {
	return tea.Prettify(s)
}

func (s EntityInfo) GoString() string {
	return s.String()
}

func (s *EntityInfo) SetType(v int64) *EntityInfo {
	s.Type = &v
	return s
}

func (s *EntityInfo) SetValue(v string) *EntityInfo {
	s.Value = &v
	return s
}

// 链节点信息
type NodeInfo struct {
	// 链的区块高度
	Blockheight *int64 `json:"blockheight,omitempty" xml:"blockheight,omitempty"`
	// 节点名称
	Nodename *string `json:"nodename,omitempty" xml:"nodename,omitempty"`
	// 节点健康状况
	Status *bool `json:"status,omitempty" xml:"status,omitempty"`
	// 节点版本
	Version *string `json:"version,omitempty" xml:"version,omitempty"`
}

func (s NodeInfo) String() string {
	return tea.Prettify(s)
}

func (s NodeInfo) GoString() string {
	return s.String()
}

func (s *NodeInfo) SetBlockheight(v int64) *NodeInfo {
	s.Blockheight = &v
	return s
}

func (s *NodeInfo) SetNodename(v string) *NodeInfo {
	s.Nodename = &v
	return s
}

func (s *NodeInfo) SetStatus(v bool) *NodeInfo {
	s.Status = &v
	return s
}

func (s *NodeInfo) SetVersion(v string) *NodeInfo {
	s.Version = &v
	return s
}

// Did服务类型描述结构体
type DidServiceType struct {
	// 枚举类型，描述访问服务的方式
	AccessMode *string `json:"access_mode,omitempty" xml:"access_mode,omitempty"`
	// 对服务的文字描述，<1000个字符
	Description *string `json:"description,omitempty" xml:"description,omitempty" maxLength:"1000"`
	// 服务类型创建者did
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// { "item1":"", "item2":"",...
	ServiceInput *string `json:"service_input,omitempty" xml:"service_input,omitempty"`
	// 返回值类型描述，json形式
	ServiceOutput *string `json:"service_output,omitempty" xml:"service_output,omitempty"`
	// 自定义服务类型，字符数16～32个
	ServiceType *string `json:"service_type,omitempty" xml:"service_type,omitempty" require:"true"`
}

func (s DidServiceType) String() string {
	return tea.Prettify(s)
}

func (s DidServiceType) GoString() string {
	return s.String()
}

func (s *DidServiceType) SetAccessMode(v string) *DidServiceType {
	s.AccessMode = &v
	return s
}

func (s *DidServiceType) SetDescription(v string) *DidServiceType {
	s.Description = &v
	return s
}

func (s *DidServiceType) SetDid(v string) *DidServiceType {
	s.Did = &v
	return s
}

func (s *DidServiceType) SetServiceInput(v string) *DidServiceType {
	s.ServiceInput = &v
	return s
}

func (s *DidServiceType) SetServiceOutput(v string) *DidServiceType {
	s.ServiceOutput = &v
	return s
}

func (s *DidServiceType) SetServiceType(v string) *DidServiceType {
	s.ServiceType = &v
	return s
}

// 应用请求
type ApplicationQueryReq struct {
	// 应用程序ID
	ApplicationId *string `json:"application_id,omitempty" xml:"application_id,omitempty" require:"true" maxLength:"64" minLength:"1"`
}

func (s ApplicationQueryReq) String() string {
	return tea.Prettify(s)
}

func (s ApplicationQueryReq) GoString() string {
	return s.String()
}

func (s *ApplicationQueryReq) SetApplicationId(v string) *ApplicationQueryReq {
	s.ApplicationId = &v
	return s
}

// 合约信息
type ContractInfo struct {
	// 合约地址
	Contract *string `json:"contract,omitempty" xml:"contract,omitempty"`
	// 部署hash
	Hash *string `json:"hash,omitempty" xml:"hash,omitempty"`
	// 合约部署时间
	Timestamp *int64 `json:"timestamp,omitempty" xml:"timestamp,omitempty"`
}

func (s ContractInfo) String() string {
	return tea.Prettify(s)
}

func (s ContractInfo) GoString() string {
	return s.String()
}

func (s *ContractInfo) SetContract(v string) *ContractInfo {
	s.Contract = &v
	return s
}

func (s *ContractInfo) SetHash(v string) *ContractInfo {
	s.Hash = &v
	return s
}

func (s *ContractInfo) SetTimestamp(v int64) *ContractInfo {
	s.Timestamp = &v
	return s
}

// 创建VC参数
type AddVC struct {
	// vc原文hash
	ContentHash *string `json:"content_hash,omitempty" xml:"content_hash,omitempty" require:"true"`
	// issuer后缀的hash值
	IssuerHash *string `json:"issuer_hash,omitempty" xml:"issuer_hash,omitempty" require:"true"`
	// valid or invalid
	Status *string `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// 接收者后缀hash值
	SubjectHash *string `json:"subject_hash,omitempty" xml:"subject_hash,omitempty" require:"true"`
	// 可验证声明id
	VcId *string `json:"vc_id,omitempty" xml:"vc_id,omitempty" require:"true"`
}

func (s AddVC) String() string {
	return tea.Prettify(s)
}

func (s AddVC) GoString() string {
	return s.String()
}

func (s *AddVC) SetContentHash(v string) *AddVC {
	s.ContentHash = &v
	return s
}

func (s *AddVC) SetIssuerHash(v string) *AddVC {
	s.IssuerHash = &v
	return s
}

func (s *AddVC) SetStatus(v string) *AddVC {
	s.Status = &v
	return s
}

func (s *AddVC) SetSubjectHash(v string) *AddVC {
	s.SubjectHash = &v
	return s
}

func (s *AddVC) SetVcId(v string) *AddVC {
	s.VcId = &v
	return s
}

// 带单位的值
type ValueUnitPair struct {
	// 数值
	Value *int64 `json:"value,omitempty" xml:"value,omitempty" require:"true"`
	// 单位
	Unit *string `json:"unit,omitempty" xml:"unit,omitempty" require:"true"`
}

func (s ValueUnitPair) String() string {
	return tea.Prettify(s)
}

func (s ValueUnitPair) GoString() string {
	return s.String()
}

func (s *ValueUnitPair) SetValue(v int64) *ValueUnitPair {
	s.Value = &v
	return s
}

func (s *ValueUnitPair) SetUnit(v string) *ValueUnitPair {
	s.Unit = &v
	return s
}

// 阿里云区块链小程序交易二维码生成
type ALiYunChainMiniAppCodeCreate struct {
	// ant_chain_id
	AntChainId *string `json:"ant_chain_id,omitempty" xml:"ant_chain_id,omitempty"`
	// transaction_hash
	TransactionHash *string `json:"transaction_hash,omitempty" xml:"transaction_hash,omitempty"`
	// base64_q_r_code_p_n_g
	Base64QRCodePNG *string `json:"base64_q_r_code_p_n_g,omitempty" xml:"base64_q_r_code_p_n_g,omitempty"`
	// q_r_code_content
	QRCodeContent *string `json:"q_r_code_content,omitempty" xml:"q_r_code_content,omitempty"`
}

func (s ALiYunChainMiniAppCodeCreate) String() string {
	return tea.Prettify(s)
}

func (s ALiYunChainMiniAppCodeCreate) GoString() string {
	return s.String()
}

func (s *ALiYunChainMiniAppCodeCreate) SetAntChainId(v string) *ALiYunChainMiniAppCodeCreate {
	s.AntChainId = &v
	return s
}

func (s *ALiYunChainMiniAppCodeCreate) SetTransactionHash(v string) *ALiYunChainMiniAppCodeCreate {
	s.TransactionHash = &v
	return s
}

func (s *ALiYunChainMiniAppCodeCreate) SetBase64QRCodePNG(v string) *ALiYunChainMiniAppCodeCreate {
	s.Base64QRCodePNG = &v
	return s
}

func (s *ALiYunChainMiniAppCodeCreate) SetQRCodeContent(v string) *ALiYunChainMiniAppCodeCreate {
	s.QRCodeContent = &v
	return s
}

// 描述分布的结构，目前主要包含date和value值
type Curve struct {
	// 分布以day为单位的日期
	Date *string `json:"date,omitempty" xml:"date,omitempty" require:"true"`
	// 以day为单位的一天凭证颁发的数据量统计。
	Value *string `json:"value,omitempty" xml:"value,omitempty" require:"true"`
}

func (s Curve) String() string {
	return tea.Prettify(s)
}

func (s Curve) GoString() string {
	return s.String()
}

func (s *Curve) SetDate(v string) *Curve {
	s.Date = &v
	return s
}

func (s *Curve) SetValue(v string) *Curve {
	s.Value = &v
	return s
}

// 存证元数据
type NotaryMetaParam struct {
	// 描述本条存证在存证事务中的阶段，用户可自行维护
	Phase *string `json:"phase,omitempty" xml:"phase,omitempty" require:"true"`
	// 扩展字段
	Properties *string `json:"properties,omitempty" xml:"properties,omitempty"`
	// 全局唯一的存证事务ID
	Token *string `json:"token,omitempty" xml:"token,omitempty" require:"true"`
}

func (s NotaryMetaParam) String() string {
	return tea.Prettify(s)
}

func (s NotaryMetaParam) GoString() string {
	return s.String()
}

func (s *NotaryMetaParam) SetPhase(v string) *NotaryMetaParam {
	s.Phase = &v
	return s
}

func (s *NotaryMetaParam) SetProperties(v string) *NotaryMetaParam {
	s.Properties = &v
	return s
}

func (s *NotaryMetaParam) SetToken(v string) *NotaryMetaParam {
	s.Token = &v
	return s
}

// 用于内部业务统计的信息，外部商户请忽略
type BizInfo struct {
	// BPWZPFCN
	ClientTenent *string `json:"client_tenent,omitempty" xml:"client_tenent,omitempty"`
	// 业务代码
	Code *string `json:"code,omitempty" xml:"code,omitempty"`
}

func (s BizInfo) String() string {
	return tea.Prettify(s)
}

func (s BizInfo) GoString() string {
	return s.String()
}

func (s *BizInfo) SetClientTenent(v string) *BizInfo {
	s.ClientTenent = &v
	return s
}

func (s *BizInfo) SetCode(v string) *BizInfo {
	s.Code = &v
	return s
}

// 数字资产管理平台版通交易信息
type EPTradeInfo struct {
	// 版通代码
	EpCode *string `json:"ep_code,omitempty" xml:"ep_code,omitempty" require:"true"`
	// 版通交易号
	TxCode *string `json:"tx_code,omitempty" xml:"tx_code,omitempty" require:"true"`
	// 卖方账户
	TxFrom *string `json:"tx_from,omitempty" xml:"tx_from,omitempty" require:"true"`
	// 交易时间戳
	TxTime *int64 `json:"tx_time,omitempty" xml:"tx_time,omitempty" require:"true"`
	// 买方账户
	TxTo *string `json:"tx_to,omitempty" xml:"tx_to,omitempty" require:"true"`
	// 交易数量
	TxValue *int64 `json:"tx_value,omitempty" xml:"tx_value,omitempty" require:"true"`
}

func (s EPTradeInfo) String() string {
	return tea.Prettify(s)
}

func (s EPTradeInfo) GoString() string {
	return s.String()
}

func (s *EPTradeInfo) SetEpCode(v string) *EPTradeInfo {
	s.EpCode = &v
	return s
}

func (s *EPTradeInfo) SetTxCode(v string) *EPTradeInfo {
	s.TxCode = &v
	return s
}

func (s *EPTradeInfo) SetTxFrom(v string) *EPTradeInfo {
	s.TxFrom = &v
	return s
}

func (s *EPTradeInfo) SetTxTime(v int64) *EPTradeInfo {
	s.TxTime = &v
	return s
}

func (s *EPTradeInfo) SetTxTo(v string) *EPTradeInfo {
	s.TxTo = &v
	return s
}

func (s *EPTradeInfo) SetTxValue(v int64) *EPTradeInfo {
	s.TxValue = &v
	return s
}

// 可信存证身份识别信息
type Identity struct {
	// 经办人姓名，企业认证必选
	Agent *string `json:"agent,omitempty" xml:"agent,omitempty"`
	// 经办人身份证
	AgentId *string `json:"agent_id,omitempty" xml:"agent_id,omitempty"`
	// 用户名称
	CertName *string `json:"cert_name,omitempty" xml:"cert_name,omitempty" require:"true"`
	// 证件号
	CertNo *string `json:"cert_no,omitempty" xml:"cert_no,omitempty" require:"true"`
	// 证件类型，个人只支持身份证IDENTITY_CARD，企业支持UNIFIED_SOCIAL_CREDIT_CODE（统一社会信用代码）和ENTERPRISE_REGISTERED_NUMBER（企业工商注册号
	CertType *string `json:"cert_type,omitempty" xml:"cert_type,omitempty" require:"true"`
	// 法人姓名，企业认证必选
	LegalPerson *string `json:"legal_person,omitempty" xml:"legal_person,omitempty"`
	// 法人身份证,  企业认证必选
	LegalPersonId *string `json:"legal_person_id,omitempty" xml:"legal_person_id,omitempty"`
	// 用户手机号码
	MobileNo *string `json:"mobile_no,omitempty" xml:"mobile_no,omitempty"`
	// 扩展属性
	Properties *string `json:"properties,omitempty" xml:"properties,omitempty"`
	// 用户类型，PERSON或者ENTERPRISE
	UserType *string `json:"user_type,omitempty" xml:"user_type,omitempty" require:"true"`
}

func (s Identity) String() string {
	return tea.Prettify(s)
}

func (s Identity) GoString() string {
	return s.String()
}

func (s *Identity) SetAgent(v string) *Identity {
	s.Agent = &v
	return s
}

func (s *Identity) SetAgentId(v string) *Identity {
	s.AgentId = &v
	return s
}

func (s *Identity) SetCertName(v string) *Identity {
	s.CertName = &v
	return s
}

func (s *Identity) SetCertNo(v string) *Identity {
	s.CertNo = &v
	return s
}

func (s *Identity) SetCertType(v string) *Identity {
	s.CertType = &v
	return s
}

func (s *Identity) SetLegalPerson(v string) *Identity {
	s.LegalPerson = &v
	return s
}

func (s *Identity) SetLegalPersonId(v string) *Identity {
	s.LegalPersonId = &v
	return s
}

func (s *Identity) SetMobileNo(v string) *Identity {
	s.MobileNo = &v
	return s
}

func (s *Identity) SetProperties(v string) *Identity {
	s.Properties = &v
	return s
}

func (s *Identity) SetUserType(v string) *Identity {
	s.UserType = &v
	return s
}

// 营销分销平台推广人账户信息
type FundInfo struct {
	// 可提现余额
	Balance *string `json:"balance,omitempty" xml:"balance,omitempty" require:"true"`
	// 待结算额度
	SettleQuota *string `json:"settle_quota,omitempty" xml:"settle_quota,omitempty" require:"true"`
	// 商户id
	ShopId *string `json:"shop_id,omitempty" xml:"shop_id,omitempty" require:"true"`
}

func (s FundInfo) String() string {
	return tea.Prettify(s)
}

func (s FundInfo) GoString() string {
	return s.String()
}

func (s *FundInfo) SetBalance(v string) *FundInfo {
	s.Balance = &v
	return s
}

func (s *FundInfo) SetSettleQuota(v string) *FundInfo {
	s.SettleQuota = &v
	return s
}

func (s *FundInfo) SetShopId(v string) *FundInfo {
	s.ShopId = &v
	return s
}

// VC Repo用户注册结构体
type VcUserRegisterPayload struct {
	// 用户did对应的授权公钥
	PublicKey *string `json:"public_key,omitempty" xml:"public_key,omitempty"`
	// 业务区块连的bizid
	VcChannel *string `json:"vc_channel,omitempty" xml:"vc_channel,omitempty" maxLength:"32" minLength:"8"`
}

func (s VcUserRegisterPayload) String() string {
	return tea.Prettify(s)
}

func (s VcUserRegisterPayload) GoString() string {
	return s.String()
}

func (s *VcUserRegisterPayload) SetPublicKey(v string) *VcUserRegisterPayload {
	s.PublicKey = &v
	return s
}

func (s *VcUserRegisterPayload) SetVcChannel(v string) *VcUserRegisterPayload {
	s.VcChannel = &v
	return s
}

// 阿里云请求结果
type ALiYunHandleBabelMns struct {
	// message
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// request_id
	RequestId *string `json:"request_id,omitempty" xml:"request_id,omitempty"`
	// success
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s ALiYunHandleBabelMns) String() string {
	return tea.Prettify(s)
}

func (s ALiYunHandleBabelMns) GoString() string {
	return s.String()
}

func (s *ALiYunHandleBabelMns) SetMessage(v string) *ALiYunHandleBabelMns {
	s.Message = &v
	return s
}

func (s *ALiYunHandleBabelMns) SetRequestId(v string) *ALiYunHandleBabelMns {
	s.RequestId = &v
	return s
}

func (s *ALiYunHandleBabelMns) SetSuccess(v bool) *ALiYunHandleBabelMns {
	s.Success = &v
	return s
}

// 溯源信息中的一项记录。
type Item struct {
	// 溯源项的具体内容
	Desc *string `json:"desc,omitempty" xml:"desc,omitempty" require:"true"`
	// 扩展信息 ，json格式
	ExtInfo *string `json:"ext_info,omitempty" xml:"ext_info,omitempty" require:"true"`
	// 溯源项的键值
	Key *string `json:"key,omitempty" xml:"key,omitempty" require:"true"`
	// 溯源项的中文标题
	Title *string `json:"title,omitempty" xml:"title,omitempty" require:"true"`
	// 内容类型
	Type *string `json:"type,omitempty" xml:"type,omitempty" require:"true"`
}

func (s Item) String() string {
	return tea.Prettify(s)
}

func (s Item) GoString() string {
	return s.String()
}

func (s *Item) SetDesc(v string) *Item {
	s.Desc = &v
	return s
}

func (s *Item) SetExtInfo(v string) *Item {
	s.ExtInfo = &v
	return s
}

func (s *Item) SetKey(v string) *Item {
	s.Key = &v
	return s
}

func (s *Item) SetTitle(v string) *Item {
	s.Title = &v
	return s
}

func (s *Item) SetType(v string) *Item {
	s.Type = &v
	return s
}

// C3S可信计算服务TAPP应用信息
type TappInfo struct {
	// C3S可信计算TAPP应用标识
	TaapId *string `json:"taap_id,omitempty" xml:"taap_id,omitempty" require:"true"`
	// C3S可信计算TAPP版本
	TappVersion *int64 `json:"tapp_version,omitempty" xml:"tapp_version,omitempty" require:"true"`
}

func (s TappInfo) String() string {
	return tea.Prettify(s)
}

func (s TappInfo) GoString() string {
	return s.String()
}

func (s *TappInfo) SetTaapId(v string) *TappInfo {
	s.TaapId = &v
	return s
}

func (s *TappInfo) SetTappVersion(v int64) *TappInfo {
	s.TappVersion = &v
	return s
}

// BaaS平台联盟信息
type BaasUnionInfo struct {
	// 联盟名称
	UnionName *string `json:"union_name,omitempty" xml:"union_name,omitempty" require:"true"`
	// 描述
	UnionDescription *string `json:"union_description,omitempty" xml:"union_description,omitempty" require:"true"`
	// 联系人
	UnionUser *string `json:"union_user,omitempty" xml:"union_user,omitempty" require:"true"`
	// 联盟联系人手机号码
	UnionUserCell *string `json:"union_user_cell,omitempty" xml:"union_user_cell,omitempty" require:"true"`
	// 联盟联系人邮箱
	UnionUserMail *string `json:"union_user_mail,omitempty" xml:"union_user_mail,omitempty" require:"true"`
}

func (s BaasUnionInfo) String() string {
	return tea.Prettify(s)
}

func (s BaasUnionInfo) GoString() string {
	return s.String()
}

func (s *BaasUnionInfo) SetUnionName(v string) *BaasUnionInfo {
	s.UnionName = &v
	return s
}

func (s *BaasUnionInfo) SetUnionDescription(v string) *BaasUnionInfo {
	s.UnionDescription = &v
	return s
}

func (s *BaasUnionInfo) SetUnionUser(v string) *BaasUnionInfo {
	s.UnionUser = &v
	return s
}

func (s *BaasUnionInfo) SetUnionUserCell(v string) *BaasUnionInfo {
	s.UnionUserCell = &v
	return s
}

func (s *BaasUnionInfo) SetUnionUserMail(v string) *BaasUnionInfo {
	s.UnionUserMail = &v
	return s
}

// blockchain交易结构体
type TransactionPo struct {
	// 交易所在块hash
	BlockHash *string `json:"block_hash,omitempty" xml:"block_hash,omitempty"`
	// 交易来源
	From *string `json:"from,omitempty" xml:"from,omitempty"`
	// gas消耗
	GasUsed *int64 `json:"gas_used,omitempty" xml:"gas_used,omitempty"`
	// 交易hash
	Hash *string `json:"hash,omitempty" xml:"hash,omitempty"`
	// 交易所在块 块高
	Height *int64 `json:"height,omitempty" xml:"height,omitempty"`
	// 交易返回结果
	Result *string `json:"result,omitempty" xml:"result,omitempty"`
	// 交易时间
	Timestamp *int64 `json:"timestamp,omitempty" xml:"timestamp,omitempty"`
	// 交易地址
	To *string `json:"to,omitempty" xml:"to,omitempty"`
	// 交易类型 同SDK
	TxType *int64 `json:"tx_type,omitempty" xml:"tx_type,omitempty"`
	// 转账额度
	Value *int64 `json:"value,omitempty" xml:"value,omitempty"`
}

func (s TransactionPo) String() string {
	return tea.Prettify(s)
}

func (s TransactionPo) GoString() string {
	return s.String()
}

func (s *TransactionPo) SetBlockHash(v string) *TransactionPo {
	s.BlockHash = &v
	return s
}

func (s *TransactionPo) SetFrom(v string) *TransactionPo {
	s.From = &v
	return s
}

func (s *TransactionPo) SetGasUsed(v int64) *TransactionPo {
	s.GasUsed = &v
	return s
}

func (s *TransactionPo) SetHash(v string) *TransactionPo {
	s.Hash = &v
	return s
}

func (s *TransactionPo) SetHeight(v int64) *TransactionPo {
	s.Height = &v
	return s
}

func (s *TransactionPo) SetResult(v string) *TransactionPo {
	s.Result = &v
	return s
}

func (s *TransactionPo) SetTimestamp(v int64) *TransactionPo {
	s.Timestamp = &v
	return s
}

func (s *TransactionPo) SetTo(v string) *TransactionPo {
	s.To = &v
	return s
}

func (s *TransactionPo) SetTxType(v int64) *TransactionPo {
	s.TxType = &v
	return s
}

func (s *TransactionPo) SetValue(v int64) *TransactionPo {
	s.Value = &v
	return s
}

// VC链上传输结果
type VcTransmitResult struct {
	// 成功或者失败
	IsSuccess *bool `json:"is_success,omitempty" xml:"is_success,omitempty" require:"true"`
	// 失败信息
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// 验证verifier did
	TargetVerifier *string `json:"target_verifier,omitempty" xml:"target_verifier,omitempty" require:"true"`
	// 交易hash
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty"`
}

func (s VcTransmitResult) String() string {
	return tea.Prettify(s)
}

func (s VcTransmitResult) GoString() string {
	return s.String()
}

func (s *VcTransmitResult) SetIsSuccess(v bool) *VcTransmitResult {
	s.IsSuccess = &v
	return s
}

func (s *VcTransmitResult) SetMessage(v string) *VcTransmitResult {
	s.Message = &v
	return s
}

func (s *VcTransmitResult) SetTargetVerifier(v string) *VcTransmitResult {
	s.TargetVerifier = &v
	return s
}

func (s *VcTransmitResult) SetTxHash(v string) *VcTransmitResult {
	s.TxHash = &v
	return s
}

// 可信时间信息结构
type TsrResponse struct {
	// hash后的信息
	HashedMessage *string `json:"hashed_message,omitempty" xml:"hashed_message,omitempty" require:"true"`
	// 哈希算法
	HashAlgorithm *string `json:"hash_algorithm,omitempty" xml:"hash_algorithm,omitempty" require:"true"`
	// 时间
	Ts *string `json:"ts,omitempty" xml:"ts,omitempty" require:"true"`
}

func (s TsrResponse) String() string {
	return tea.Prettify(s)
}

func (s TsrResponse) GoString() string {
	return s.String()
}

func (s *TsrResponse) SetHashedMessage(v string) *TsrResponse {
	s.HashedMessage = &v
	return s
}

func (s *TsrResponse) SetHashAlgorithm(v string) *TsrResponse {
	s.HashAlgorithm = &v
	return s
}

func (s *TsrResponse) SetTs(v string) *TsrResponse {
	s.Ts = &v
	return s
}

// 阿里云数据导出服务TriggerDTO结构体
type TriggerDTOStructBody struct {
	// 名称
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 类型
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
	// 源
	Source *string `json:"source,omitempty" xml:"source,omitempty"`
	// 创建时间
	CreateTime *string `json:"create_time,omitempty" xml:"create_time,omitempty"`
	// 错误信息
	ErrorMessage *string `json:"error_message,omitempty" xml:"error_message,omitempty"`
	// 状态
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// option（map结构，由于金融云无map接口所以通过string类型传输json格式）
	Option *string `json:"option,omitempty" xml:"option,omitempty"`
	// checkpoint类
	Checkpoint *CheckPointStructBody `json:"checkpoint,omitempty" xml:"checkpoint,omitempty"`
	// 待处理的错误事件总数
	PendingErrorLogs *string `json:"pending_error_logs,omitempty" xml:"pending_error_logs,omitempty"`
}

func (s TriggerDTOStructBody) String() string {
	return tea.Prettify(s)
}

func (s TriggerDTOStructBody) GoString() string {
	return s.String()
}

func (s *TriggerDTOStructBody) SetName(v string) *TriggerDTOStructBody {
	s.Name = &v
	return s
}

func (s *TriggerDTOStructBody) SetType(v string) *TriggerDTOStructBody {
	s.Type = &v
	return s
}

func (s *TriggerDTOStructBody) SetSource(v string) *TriggerDTOStructBody {
	s.Source = &v
	return s
}

func (s *TriggerDTOStructBody) SetCreateTime(v string) *TriggerDTOStructBody {
	s.CreateTime = &v
	return s
}

func (s *TriggerDTOStructBody) SetErrorMessage(v string) *TriggerDTOStructBody {
	s.ErrorMessage = &v
	return s
}

func (s *TriggerDTOStructBody) SetStatus(v string) *TriggerDTOStructBody {
	s.Status = &v
	return s
}

func (s *TriggerDTOStructBody) SetOption(v string) *TriggerDTOStructBody {
	s.Option = &v
	return s
}

func (s *TriggerDTOStructBody) SetCheckpoint(v *CheckPointStructBody) *TriggerDTOStructBody {
	s.Checkpoint = v
	return s
}

func (s *TriggerDTOStructBody) SetPendingErrorLogs(v string) *TriggerDTOStructBody {
	s.PendingErrorLogs = &v
	return s
}

// 人群配置
type CrowdNodeDTO struct {
	// 节点id
	NodeId *string `json:"node_id,omitempty" xml:"node_id,omitempty" require:"true"`
	// 节点类型
	NodeType *CrowdNodeTypeEnum `json:"node_type,omitempty" xml:"node_type,omitempty" require:"true"`
	// 是否排除
	Exclude *bool `json:"exclude,omitempty" xml:"exclude,omitempty" require:"true"`
	// 节点配置
	NodeConfig *string `json:"node_config,omitempty" xml:"node_config,omitempty" require:"true"`
}

func (s CrowdNodeDTO) String() string {
	return tea.Prettify(s)
}

func (s CrowdNodeDTO) GoString() string {
	return s.String()
}

func (s *CrowdNodeDTO) SetNodeId(v string) *CrowdNodeDTO {
	s.NodeId = &v
	return s
}

func (s *CrowdNodeDTO) SetNodeType(v *CrowdNodeTypeEnum) *CrowdNodeDTO {
	s.NodeType = v
	return s
}

func (s *CrowdNodeDTO) SetExclude(v bool) *CrowdNodeDTO {
	s.Exclude = &v
	return s
}

func (s *CrowdNodeDTO) SetNodeConfig(v string) *CrowdNodeDTO {
	s.NodeConfig = &v
	return s
}

// 可信存证存证地点信息
type Location struct {
	// 所在城市
	City *string `json:"city,omitempty" xml:"city,omitempty"`
	// 操作IMEI
	Imei *string `json:"imei,omitempty" xml:"imei,omitempty"`
	// 操作IMSI
	Imsi *string `json:"imsi,omitempty" xml:"imsi,omitempty"`
	// 操作IP地址
	Ip *string `json:"ip,omitempty" xml:"ip,omitempty"`
	// 纬度
	Latitude *string `json:"latitude,omitempty" xml:"latitude,omitempty"`
	// 经度
	Longitude *string `json:"longitude,omitempty" xml:"longitude,omitempty"`
	// 扩展属性
	Propertities *string `json:"propertities,omitempty" xml:"propertities,omitempty"`
	// 操作Wi-Fi物理地址
	WifiMac *string `json:"wifi_mac,omitempty" xml:"wifi_mac,omitempty"`
}

func (s Location) String() string {
	return tea.Prettify(s)
}

func (s Location) GoString() string {
	return s.String()
}

func (s *Location) SetCity(v string) *Location {
	s.City = &v
	return s
}

func (s *Location) SetImei(v string) *Location {
	s.Imei = &v
	return s
}

func (s *Location) SetImsi(v string) *Location {
	s.Imsi = &v
	return s
}

func (s *Location) SetIp(v string) *Location {
	s.Ip = &v
	return s
}

func (s *Location) SetLatitude(v string) *Location {
	s.Latitude = &v
	return s
}

func (s *Location) SetLongitude(v string) *Location {
	s.Longitude = &v
	return s
}

func (s *Location) SetPropertities(v string) *Location {
	s.Propertities = &v
	return s
}

func (s *Location) SetWifiMac(v string) *Location {
	s.WifiMac = &v
	return s
}

// 营销分销推广人账户流水信息
type CapitalInfo struct {
	// 记录流水额度
	BalanceLog *string `json:"balance_log,omitempty" xml:"balance_log,omitempty" require:"true"`
	// 商户id
	ShopId *string `json:"shop_id,omitempty" xml:"shop_id,omitempty" require:"true"`
	// 记录时间
	TimeLog *int64 `json:"time_log,omitempty" xml:"time_log,omitempty" require:"true"`
	// 链上地址
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty" require:"true"`
}

func (s CapitalInfo) String() string {
	return tea.Prettify(s)
}

func (s CapitalInfo) GoString() string {
	return s.String()
}

func (s *CapitalInfo) SetBalanceLog(v string) *CapitalInfo {
	s.BalanceLog = &v
	return s
}

func (s *CapitalInfo) SetShopId(v string) *CapitalInfo {
	s.ShopId = &v
	return s
}

func (s *CapitalInfo) SetTimeLog(v int64) *CapitalInfo {
	s.TimeLog = &v
	return s
}

func (s *CapitalInfo) SetTxHash(v string) *CapitalInfo {
	s.TxHash = &v
	return s
}

// 阿里云区块链小程序日志查询
type ALiYunChainMiniAppLog struct {
	// access_count
	AccessCount *int64 `json:"access_count,omitempty" xml:"access_count,omitempty"`
	// access_alipay_account_count
	AccessAlipayAccountCount *int64 `json:"access_alipay_account_count,omitempty" xml:"access_alipay_account_count,omitempty"`
}

func (s ALiYunChainMiniAppLog) String() string {
	return tea.Prettify(s)
}

func (s ALiYunChainMiniAppLog) GoString() string {
	return s.String()
}

func (s *ALiYunChainMiniAppLog) SetAccessCount(v int64) *ALiYunChainMiniAppLog {
	s.AccessCount = &v
	return s
}

func (s *ALiYunChainMiniAppLog) SetAccessAlipayAccountCount(v int64) *ALiYunChainMiniAppLog {
	s.AccessAlipayAccountCount = &v
	return s
}

// 订单结果
type OrderResult struct {
	// 事例id
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 是否成功
	Success *bool `json:"success,omitempty" xml:"success,omitempty" require:"true"`
}

func (s OrderResult) String() string {
	return tea.Prettify(s)
}

func (s OrderResult) GoString() string {
	return s.String()
}

func (s *OrderResult) SetInstanceId(v string) *OrderResult {
	s.InstanceId = &v
	return s
}

func (s *OrderResult) SetSuccess(v bool) *OrderResult {
	s.Success = &v
	return s
}

// 蚂蚁链节点信息
type BlockchainBrowserNodeOwner struct {
	// node_id
	NodeId *string `json:"node_id,omitempty" xml:"node_id,omitempty" require:"true"`
	// node_ip
	NodeIp *string `json:"node_ip,omitempty" xml:"node_ip,omitempty" require:"true"`
	// node_name
	NodeName *string `json:"node_name,omitempty" xml:"node_name,omitempty" require:"true"`
	// node_owner
	NodeOwner *string `json:"node_owner,omitempty" xml:"node_owner,omitempty" require:"true"`
	// node_port
	NodePort *string `json:"node_port,omitempty" xml:"node_port,omitempty" require:"true"`
	// node_source
	NodeSource *string `json:"node_source,omitempty" xml:"node_source,omitempty" require:"true"`
	// node_state
	NodeState *string `json:"node_state,omitempty" xml:"node_state,omitempty" require:"true"`
	// node_type
	NodeType *string `json:"node_type,omitempty" xml:"node_type,omitempty" require:"true"`
	// 节点已使用的存储空间
	NodeDiskUsed *string `json:"node_disk_used,omitempty" xml:"node_disk_used,omitempty" require:"true"`
	// 节点的总存储空间
	NodeDiskTotal *string `json:"node_disk_total,omitempty" xml:"node_disk_total,omitempty" require:"true"`
}

func (s BlockchainBrowserNodeOwner) String() string {
	return tea.Prettify(s)
}

func (s BlockchainBrowserNodeOwner) GoString() string {
	return s.String()
}

func (s *BlockchainBrowserNodeOwner) SetNodeId(v string) *BlockchainBrowserNodeOwner {
	s.NodeId = &v
	return s
}

func (s *BlockchainBrowserNodeOwner) SetNodeIp(v string) *BlockchainBrowserNodeOwner {
	s.NodeIp = &v
	return s
}

func (s *BlockchainBrowserNodeOwner) SetNodeName(v string) *BlockchainBrowserNodeOwner {
	s.NodeName = &v
	return s
}

func (s *BlockchainBrowserNodeOwner) SetNodeOwner(v string) *BlockchainBrowserNodeOwner {
	s.NodeOwner = &v
	return s
}

func (s *BlockchainBrowserNodeOwner) SetNodePort(v string) *BlockchainBrowserNodeOwner {
	s.NodePort = &v
	return s
}

func (s *BlockchainBrowserNodeOwner) SetNodeSource(v string) *BlockchainBrowserNodeOwner {
	s.NodeSource = &v
	return s
}

func (s *BlockchainBrowserNodeOwner) SetNodeState(v string) *BlockchainBrowserNodeOwner {
	s.NodeState = &v
	return s
}

func (s *BlockchainBrowserNodeOwner) SetNodeType(v string) *BlockchainBrowserNodeOwner {
	s.NodeType = &v
	return s
}

func (s *BlockchainBrowserNodeOwner) SetNodeDiskUsed(v string) *BlockchainBrowserNodeOwner {
	s.NodeDiskUsed = &v
	return s
}

func (s *BlockchainBrowserNodeOwner) SetNodeDiskTotal(v string) *BlockchainBrowserNodeOwner {
	s.NodeDiskTotal = &v
	return s
}

// 阿里云蚂蚁区块链账户创建信息
type ALiYunChainAccount struct {
	// account_private_key
	AccountPrivateKey *string `json:"account_private_key,omitempty" xml:"account_private_key,omitempty"`
	// account_public_key
	AccountPublicKey *string `json:"account_public_key,omitempty" xml:"account_public_key,omitempty"`
	// account_recover_private_key
	AccountRecoverPrivateKey *string `json:"account_recover_private_key,omitempty" xml:"account_recover_private_key,omitempty"`
	// account_recover_public_key
	AccountRecoverPublicKey *string `json:"account_recover_public_key,omitempty" xml:"account_recover_public_key,omitempty"`
	// ant_chain_id
	AntChainId *string `json:"ant_chain_id,omitempty" xml:"ant_chain_id,omitempty"`
	// account
	Account *string `json:"account,omitempty" xml:"account,omitempty"`
}

func (s ALiYunChainAccount) String() string {
	return tea.Prettify(s)
}

func (s ALiYunChainAccount) GoString() string {
	return s.String()
}

func (s *ALiYunChainAccount) SetAccountPrivateKey(v string) *ALiYunChainAccount {
	s.AccountPrivateKey = &v
	return s
}

func (s *ALiYunChainAccount) SetAccountPublicKey(v string) *ALiYunChainAccount {
	s.AccountPublicKey = &v
	return s
}

func (s *ALiYunChainAccount) SetAccountRecoverPrivateKey(v string) *ALiYunChainAccount {
	s.AccountRecoverPrivateKey = &v
	return s
}

func (s *ALiYunChainAccount) SetAccountRecoverPublicKey(v string) *ALiYunChainAccount {
	s.AccountRecoverPublicKey = &v
	return s
}

func (s *ALiYunChainAccount) SetAntChainId(v string) *ALiYunChainAccount {
	s.AntChainId = &v
	return s
}

func (s *ALiYunChainAccount) SetAccount(v string) *ALiYunChainAccount {
	s.Account = &v
	return s
}

// 更新DID服务列表
type UpdateDidServiceList struct {
	// 待更新did之前的版本号
	PreviousVersion *int64 `json:"previous_version,omitempty" xml:"previous_version,omitempty" require:"true"`
	// 服务信息列表
	ServiceList []*DisServicesInfo `json:"service_list,omitempty" xml:"service_list,omitempty" require:"true" type:"Repeated"`
}

func (s UpdateDidServiceList) String() string {
	return tea.Prettify(s)
}

func (s UpdateDidServiceList) GoString() string {
	return s.String()
}

func (s *UpdateDidServiceList) SetPreviousVersion(v int64) *UpdateDidServiceList {
	s.PreviousVersion = &v
	return s
}

func (s *UpdateDidServiceList) SetServiceList(v []*DisServicesInfo) *UpdateDidServiceList {
	s.ServiceList = v
	return s
}

// 营销分销商品信息
type ItemDto struct {
	// 商品id
	ProductId *string `json:"product_id,omitempty" xml:"product_id,omitempty" require:"true"`
	// 商户id
	ShopId *string `json:"shop_id,omitempty" xml:"shop_id,omitempty" require:"true"`
	// 链上地址
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty" require:"true"`
}

func (s ItemDto) String() string {
	return tea.Prettify(s)
}

func (s ItemDto) GoString() string {
	return s.String()
}

func (s *ItemDto) SetProductId(v string) *ItemDto {
	s.ProductId = &v
	return s
}

func (s *ItemDto) SetShopId(v string) *ItemDto {
	s.ShopId = &v
	return s
}

func (s *ItemDto) SetTxHash(v string) *ItemDto {
	s.TxHash = &v
	return s
}

// 蚂蚁链最新区块列表信息
type BlockchainBrowserLatestBlock struct {
	// bizid
	Bizid *string `json:"bizid,omitempty" xml:"bizid,omitempty" require:"true"`
	// block_hash
	BlockHash *string `json:"block_hash,omitempty" xml:"block_hash,omitempty" require:"true"`
	// create_time
	CreateTime *int64 `json:"create_time,omitempty" xml:"create_time,omitempty" require:"true"`
	// height
	Height *int64 `json:"height,omitempty" xml:"height,omitempty" require:"true"`
	// previous_hash
	PreviousHash *string `json:"previous_hash,omitempty" xml:"previous_hash,omitempty" require:"true"`
	// root_tx_hash
	RootTxHash *string `json:"root_tx_hash,omitempty" xml:"root_tx_hash,omitempty" require:"true"`
	// size
	Size *int64 `json:"size,omitempty" xml:"size,omitempty" require:"true"`
	// transaction_size
	TransactionSize *int64 `json:"transaction_size,omitempty" xml:"transaction_size,omitempty" require:"true"`
	// version
	Version *int64 `json:"version,omitempty" xml:"version,omitempty" require:"true"`
}

func (s BlockchainBrowserLatestBlock) String() string {
	return tea.Prettify(s)
}

func (s BlockchainBrowserLatestBlock) GoString() string {
	return s.String()
}

func (s *BlockchainBrowserLatestBlock) SetBizid(v string) *BlockchainBrowserLatestBlock {
	s.Bizid = &v
	return s
}

func (s *BlockchainBrowserLatestBlock) SetBlockHash(v string) *BlockchainBrowserLatestBlock {
	s.BlockHash = &v
	return s
}

func (s *BlockchainBrowserLatestBlock) SetCreateTime(v int64) *BlockchainBrowserLatestBlock {
	s.CreateTime = &v
	return s
}

func (s *BlockchainBrowserLatestBlock) SetHeight(v int64) *BlockchainBrowserLatestBlock {
	s.Height = &v
	return s
}

func (s *BlockchainBrowserLatestBlock) SetPreviousHash(v string) *BlockchainBrowserLatestBlock {
	s.PreviousHash = &v
	return s
}

func (s *BlockchainBrowserLatestBlock) SetRootTxHash(v string) *BlockchainBrowserLatestBlock {
	s.RootTxHash = &v
	return s
}

func (s *BlockchainBrowserLatestBlock) SetSize(v int64) *BlockchainBrowserLatestBlock {
	s.Size = &v
	return s
}

func (s *BlockchainBrowserLatestBlock) SetTransactionSize(v int64) *BlockchainBrowserLatestBlock {
	s.TransactionSize = &v
	return s
}

func (s *BlockchainBrowserLatestBlock) SetVersion(v int64) *BlockchainBrowserLatestBlock {
	s.Version = &v
	return s
}

// VC传输确认
type VcTransmitCnf struct {
	// 针对tx_hash的签名
	Signature *string `json:"signature,omitempty" xml:"signature,omitempty" require:"true"`
	// 交易hash
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty" require:"true"`
	// vc传输目标did
	VerifierId *string `json:"verifier_id,omitempty" xml:"verifier_id,omitempty" require:"true"`
}

func (s VcTransmitCnf) String() string {
	return tea.Prettify(s)
}

func (s VcTransmitCnf) GoString() string {
	return s.String()
}

func (s *VcTransmitCnf) SetSignature(v string) *VcTransmitCnf {
	s.Signature = &v
	return s
}

func (s *VcTransmitCnf) SetTxHash(v string) *VcTransmitCnf {
	s.TxHash = &v
	return s
}

func (s *VcTransmitCnf) SetVerifierId(v string) *VcTransmitCnf {
	s.VerifierId = &v
	return s
}

// 阿里云区块链小程序用户权限查询
type ALiYunChainMiniAppUserPrivilege struct {
	// ant_chain_id
	AntChainId *string `json:"ant_chain_id,omitempty" xml:"ant_chain_id,omitempty"`
	// q_r_code_type
	QRCodeType *string `json:"q_r_code_type,omitempty" xml:"q_r_code_type,omitempty"`
	// authorization_type
	AuthorizationType *string `json:"authorization_type,omitempty" xml:"authorization_type,omitempty"`
	// pagination
	Pagination *ALiYunPagination `json:"pagination,omitempty" xml:"pagination,omitempty"`
	// ALiYunChainMiniAppAuthorizedUser
	AuthorizedUserList []*ALiYunChainMiniAppAuthorizedUser `json:"authorized_user_list,omitempty" xml:"authorized_user_list,omitempty" type:"Repeated"`
}

func (s ALiYunChainMiniAppUserPrivilege) String() string {
	return tea.Prettify(s)
}

func (s ALiYunChainMiniAppUserPrivilege) GoString() string {
	return s.String()
}

func (s *ALiYunChainMiniAppUserPrivilege) SetAntChainId(v string) *ALiYunChainMiniAppUserPrivilege {
	s.AntChainId = &v
	return s
}

func (s *ALiYunChainMiniAppUserPrivilege) SetQRCodeType(v string) *ALiYunChainMiniAppUserPrivilege {
	s.QRCodeType = &v
	return s
}

func (s *ALiYunChainMiniAppUserPrivilege) SetAuthorizationType(v string) *ALiYunChainMiniAppUserPrivilege {
	s.AuthorizationType = &v
	return s
}

func (s *ALiYunChainMiniAppUserPrivilege) SetPagination(v *ALiYunPagination) *ALiYunChainMiniAppUserPrivilege {
	s.Pagination = v
	return s
}

func (s *ALiYunChainMiniAppUserPrivilege) SetAuthorizedUserList(v []*ALiYunChainMiniAppAuthorizedUser) *ALiYunChainMiniAppUserPrivilege {
	s.AuthorizedUserList = v
	return s
}

// 授权服务流程信息
type ProcessInfo struct {
	// 当前处理节点
	CurrentNode *int64 `json:"current_node,omitempty" xml:"current_node,omitempty" require:"true" minimum:"0"`
	// 扩展信息
	ExtensionInfo *string `json:"extension_info,omitempty" xml:"extension_info,omitempty"`
	// 节点列表
	Nodes []*NodeDetail `json:"nodes,omitempty" xml:"nodes,omitempty" require:"true" type:"Repeated"`
	// 流程ID
	ProcessId *string `json:"process_id,omitempty" xml:"process_id,omitempty" require:"true"`
	// 流程状态
	ProcessStatus *string `json:"process_status,omitempty" xml:"process_status,omitempty" require:"true"`
	// 流程节点总数
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty" require:"true" minimum:"0"`
	// 数据对象ID
	DataId *string `json:"data_id,omitempty" xml:"data_id,omitempty" require:"true"`
}

func (s ProcessInfo) String() string {
	return tea.Prettify(s)
}

func (s ProcessInfo) GoString() string {
	return s.String()
}

func (s *ProcessInfo) SetCurrentNode(v int64) *ProcessInfo {
	s.CurrentNode = &v
	return s
}

func (s *ProcessInfo) SetExtensionInfo(v string) *ProcessInfo {
	s.ExtensionInfo = &v
	return s
}

func (s *ProcessInfo) SetNodes(v []*NodeDetail) *ProcessInfo {
	s.Nodes = v
	return s
}

func (s *ProcessInfo) SetProcessId(v string) *ProcessInfo {
	s.ProcessId = &v
	return s
}

func (s *ProcessInfo) SetProcessStatus(v string) *ProcessInfo {
	s.ProcessStatus = &v
	return s
}

func (s *ProcessInfo) SetTotalCount(v int64) *ProcessInfo {
	s.TotalCount = &v
	return s
}

func (s *ProcessInfo) SetDataId(v string) *ProcessInfo {
	s.DataId = &v
	return s
}

// 阿里云区块链售卖资源信息
type ALiYunChainResouceForSale struct {
	// region_id
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty"`
	// type_list
	TypeList []*string `json:"type_list,omitempty" xml:"type_list,omitempty" type:"Repeated"`
}

func (s ALiYunChainResouceForSale) String() string {
	return tea.Prettify(s)
}

func (s ALiYunChainResouceForSale) GoString() string {
	return s.String()
}

func (s *ALiYunChainResouceForSale) SetRegionId(v string) *ALiYunChainResouceForSale {
	s.RegionId = &v
	return s
}

func (s *ALiYunChainResouceForSale) SetTypeList(v []*string) *ALiYunChainResouceForSale {
	s.TypeList = v
	return s
}

// 数字资产管理平台账户映射结构
type ExchangeAccountMap struct {
	// 用户联系方式
	Phone *string `json:"phone,omitempty" xml:"phone,omitempty" require:"true"`
	// 用户账户
	UserAccount *string `json:"user_account,omitempty" xml:"user_account,omitempty" require:"true"`
	// 用户名称
	UserName *string `json:"user_name,omitempty" xml:"user_name,omitempty" require:"true"`
}

func (s ExchangeAccountMap) String() string {
	return tea.Prettify(s)
}

func (s ExchangeAccountMap) GoString() string {
	return s.String()
}

func (s *ExchangeAccountMap) SetPhone(v string) *ExchangeAccountMap {
	s.Phone = &v
	return s
}

func (s *ExchangeAccountMap) SetUserAccount(v string) *ExchangeAccountMap {
	s.UserAccount = &v
	return s
}

func (s *ExchangeAccountMap) SetUserName(v string) *ExchangeAccountMap {
	s.UserName = &v
	return s
}

// 阿里云区块链创建信息
type ALiYunChainExecuteOrder struct {
	// user_request_id
	UserRequestId *string `json:"user_request_id,omitempty" xml:"user_request_id,omitempty"`
	// data
	Data *string `json:"data,omitempty" xml:"data,omitempty"`
	// success
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
	// code
	Code *string `json:"code,omitempty" xml:"code,omitempty"`
	// message
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// synchro
	Synchro *bool `json:"synchro,omitempty" xml:"synchro,omitempty"`
}

func (s ALiYunChainExecuteOrder) String() string {
	return tea.Prettify(s)
}

func (s ALiYunChainExecuteOrder) GoString() string {
	return s.String()
}

func (s *ALiYunChainExecuteOrder) SetUserRequestId(v string) *ALiYunChainExecuteOrder {
	s.UserRequestId = &v
	return s
}

func (s *ALiYunChainExecuteOrder) SetData(v string) *ALiYunChainExecuteOrder {
	s.Data = &v
	return s
}

func (s *ALiYunChainExecuteOrder) SetSuccess(v bool) *ALiYunChainExecuteOrder {
	s.Success = &v
	return s
}

func (s *ALiYunChainExecuteOrder) SetCode(v string) *ALiYunChainExecuteOrder {
	s.Code = &v
	return s
}

func (s *ALiYunChainExecuteOrder) SetMessage(v string) *ALiYunChainExecuteOrder {
	s.Message = &v
	return s
}

func (s *ALiYunChainExecuteOrder) SetSynchro(v bool) *ALiYunChainExecuteOrder {
	s.Synchro = &v
	return s
}

// 账户映射的具体信息
type AccountMap struct {
	// 要映射的链对应的唯一id
	Bizid *string `json:"bizid,omitempty" xml:"bizid,omitempty" require:"true"`
	// 0: 身份证；1：手机；2: 电子邮箱；3: 企业营业执照号
	EntityInfoType *int64 `json:"entity_info_type,omitempty" xml:"entity_info_type,omitempty"`
	// 对应entity_info_type的具体值
	//
	EntityInfoValue *string `json:"entity_info_value,omitempty" xml:"entity_info_value,omitempty"`
	// 账户对应实体的全名
	FullName *string `json:"full_name,omitempty" xml:"full_name,omitempty"`
	// 该账户在指定链上的状态1，激活，2，冻结，新建账户只能为1
	Status *int64 `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// 希望映射后在链上的账户名
	TargetName *string `json:"target_name,omitempty" xml:"target_name,omitempty"`
	// 该账户对应实体的类型：0， 个人； 1， 企业
	Type *int64 `json:"type,omitempty" xml:"type,omitempty"`
	// 自有系统中该账户的唯一标示
	Uid *string `json:"uid,omitempty" xml:"uid,omitempty" require:"true"`
}

func (s AccountMap) String() string {
	return tea.Prettify(s)
}

func (s AccountMap) GoString() string {
	return s.String()
}

func (s *AccountMap) SetBizid(v string) *AccountMap {
	s.Bizid = &v
	return s
}

func (s *AccountMap) SetEntityInfoType(v int64) *AccountMap {
	s.EntityInfoType = &v
	return s
}

func (s *AccountMap) SetEntityInfoValue(v string) *AccountMap {
	s.EntityInfoValue = &v
	return s
}

func (s *AccountMap) SetFullName(v string) *AccountMap {
	s.FullName = &v
	return s
}

func (s *AccountMap) SetStatus(v int64) *AccountMap {
	s.Status = &v
	return s
}

func (s *AccountMap) SetTargetName(v string) *AccountMap {
	s.TargetName = &v
	return s
}

func (s *AccountMap) SetType(v int64) *AccountMap {
	s.Type = &v
	return s
}

func (s *AccountMap) SetUid(v string) *AccountMap {
	s.Uid = &v
	return s
}

// 任务列表分页结构体
type PageTaskListDTO struct {
	// 任务列表集合
	Content []*TaskListInfoDTO `json:"content,omitempty" xml:"content,omitempty" require:"true" type:"Repeated"`
	// 总记录条目
	TotalElements *int64 `json:"total_elements,omitempty" xml:"total_elements,omitempty" require:"true"`
	// 记录总页数
	TotalPages *int64 `json:"total_pages,omitempty" xml:"total_pages,omitempty" require:"true"`
	// 页码
	Number *int64 `json:"number,omitempty" xml:"number,omitempty" require:"true"`
	// 每页记录条目
	Size *int64 `json:"size,omitempty" xml:"size,omitempty" require:"true"`
	// 每页元素个数
	NumberOfElements *int64 `json:"number_of_elements,omitempty" xml:"number_of_elements,omitempty" require:"true"`
}

func (s PageTaskListDTO) String() string {
	return tea.Prettify(s)
}

func (s PageTaskListDTO) GoString() string {
	return s.String()
}

func (s *PageTaskListDTO) SetContent(v []*TaskListInfoDTO) *PageTaskListDTO {
	s.Content = v
	return s
}

func (s *PageTaskListDTO) SetTotalElements(v int64) *PageTaskListDTO {
	s.TotalElements = &v
	return s
}

func (s *PageTaskListDTO) SetTotalPages(v int64) *PageTaskListDTO {
	s.TotalPages = &v
	return s
}

func (s *PageTaskListDTO) SetNumber(v int64) *PageTaskListDTO {
	s.Number = &v
	return s
}

func (s *PageTaskListDTO) SetSize(v int64) *PageTaskListDTO {
	s.Size = &v
	return s
}

func (s *PageTaskListDTO) SetNumberOfElements(v int64) *PageTaskListDTO {
	s.NumberOfElements = &v
	return s
}

// 服务端签名oss的url然后client直传文件到oss，此结构包含了服务端签名后的数据。
type PresignedUrlPolicy struct {
	// oss访问的临时access id
	AccessId *string `json:"access_id,omitempty" xml:"access_id,omitempty" require:"true"`
	// 一个需要回调通知服务端的方法名，非必填
	Callback *string `json:"callback,omitempty" xml:"callback,omitempty"`
	// oss上的文件存放路径
	Dir *string `json:"dir,omitempty" xml:"dir,omitempty" require:"true"`
	// url超期的时间戳说明
	Expire *string `json:"expire,omitempty" xml:"expire,omitempty" require:"true"`
	// oss的地址
	Host *string `json:"host,omitempty" xml:"host,omitempty" require:"true"`
	// 被base64编码的policy内容
	Policy *string `json:"policy,omitempty" xml:"policy,omitempty" require:"true"`
	// 签名结果
	Signature *string `json:"signature,omitempty" xml:"signature,omitempty" require:"true"`
}

func (s PresignedUrlPolicy) String() string {
	return tea.Prettify(s)
}

func (s PresignedUrlPolicy) GoString() string {
	return s.String()
}

func (s *PresignedUrlPolicy) SetAccessId(v string) *PresignedUrlPolicy {
	s.AccessId = &v
	return s
}

func (s *PresignedUrlPolicy) SetCallback(v string) *PresignedUrlPolicy {
	s.Callback = &v
	return s
}

func (s *PresignedUrlPolicy) SetDir(v string) *PresignedUrlPolicy {
	s.Dir = &v
	return s
}

func (s *PresignedUrlPolicy) SetExpire(v string) *PresignedUrlPolicy {
	s.Expire = &v
	return s
}

func (s *PresignedUrlPolicy) SetHost(v string) *PresignedUrlPolicy {
	s.Host = &v
	return s
}

func (s *PresignedUrlPolicy) SetPolicy(v string) *PresignedUrlPolicy {
	s.Policy = &v
	return s
}

func (s *PresignedUrlPolicy) SetSignature(v string) *PresignedUrlPolicy {
	s.Signature = &v
	return s
}

// 更新did auth paylod结构体
type UpdateDidAuthPayload struct {
	// 新公钥的实际控制者
	Controller *string `json:"controller,omitempty" xml:"controller,omitempty" require:"true"`
	// 旧Auth Key的过期时间
	PreviousAuthKeyExpire *string `json:"previous_auth_key_expire,omitempty" xml:"previous_auth_key_expire,omitempty" require:"true"`
	// 更新Did doc的版本
	PreviousVersion *int64 `json:"previous_version,omitempty" xml:"previous_version,omitempty" require:"true"`
	// 新DID Auth key的public key id
	PublicKeyId *string `json:"public_key_id,omitempty" xml:"public_key_id,omitempty" require:"true"`
	// 密钥对生成算法
	PublicKeyType *string `json:"public_key_type,omitempty" xml:"public_key_type,omitempty" require:"true"`
	// 公钥的实际值
	Value *string `json:"value,omitempty" xml:"value,omitempty" require:"true"`
}

func (s UpdateDidAuthPayload) String() string {
	return tea.Prettify(s)
}

func (s UpdateDidAuthPayload) GoString() string {
	return s.String()
}

func (s *UpdateDidAuthPayload) SetController(v string) *UpdateDidAuthPayload {
	s.Controller = &v
	return s
}

func (s *UpdateDidAuthPayload) SetPreviousAuthKeyExpire(v string) *UpdateDidAuthPayload {
	s.PreviousAuthKeyExpire = &v
	return s
}

func (s *UpdateDidAuthPayload) SetPreviousVersion(v int64) *UpdateDidAuthPayload {
	s.PreviousVersion = &v
	return s
}

func (s *UpdateDidAuthPayload) SetPublicKeyId(v string) *UpdateDidAuthPayload {
	s.PublicKeyId = &v
	return s
}

func (s *UpdateDidAuthPayload) SetPublicKeyType(v string) *UpdateDidAuthPayload {
	s.PublicKeyType = &v
	return s
}

func (s *UpdateDidAuthPayload) SetValue(v string) *UpdateDidAuthPayload {
	s.Value = &v
	return s
}

// did详情
type DidDetail struct {
	// 控制者的did描述符
	Controller *string `json:"controller,omitempty" xml:"controller,omitempty" require:"true"`
	// did描述符
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// did doc
	DidDoc *string `json:"did_doc,omitempty" xml:"did_doc,omitempty" require:"true"`
}

func (s DidDetail) String() string {
	return tea.Prettify(s)
}

func (s DidDetail) GoString() string {
	return s.String()
}

func (s *DidDetail) SetController(v string) *DidDetail {
	s.Controller = &v
	return s
}

func (s *DidDetail) SetDid(v string) *DidDetail {
	s.Did = &v
	return s
}

func (s *DidDetail) SetDidDoc(v string) *DidDetail {
	s.DidDoc = &v
	return s
}

// 蚂蚁链浏览器区块信息
type BlockchainBrowserBlock struct {
	// bizid
	Bizid *string `json:"bizid,omitempty" xml:"bizid,omitempty" require:"true"`
	// blockchain_name
	BlockchainName *string `json:"blockchain_name,omitempty" xml:"blockchain_name,omitempty" require:"true"`
	// blockchain_status
	BlockchainStatus *bool `json:"blockchain_status,omitempty" xml:"blockchain_status,omitempty" require:"true"`
	// block_hash
	BlockHash *string `json:"block_hash,omitempty" xml:"block_hash,omitempty" require:"true"`
	// create_time
	CreateTime *int64 `json:"create_time,omitempty" xml:"create_time,omitempty" require:"true"`
	// hash_status
	HashStatus *bool `json:"hash_status,omitempty" xml:"hash_status,omitempty" require:"true"`
	// height
	Height *int64 `json:"height,omitempty" xml:"height,omitempty" require:"true"`
	// previous_hash
	PreviousHash *string `json:"previous_hash,omitempty" xml:"previous_hash,omitempty" require:"true"`
	// root_tx_hash
	RootTxHash *string `json:"root_tx_hash,omitempty" xml:"root_tx_hash,omitempty" require:"true"`
	// transaction_list
	TransactionList []*BlockchainBrowserTransaction `json:"transaction_list,omitempty" xml:"transaction_list,omitempty" require:"true" type:"Repeated"`
	// transaction_size
	TransactionSize *int64 `json:"transaction_size,omitempty" xml:"transaction_size,omitempty" require:"true"`
}

func (s BlockchainBrowserBlock) String() string {
	return tea.Prettify(s)
}

func (s BlockchainBrowserBlock) GoString() string {
	return s.String()
}

func (s *BlockchainBrowserBlock) SetBizid(v string) *BlockchainBrowserBlock {
	s.Bizid = &v
	return s
}

func (s *BlockchainBrowserBlock) SetBlockchainName(v string) *BlockchainBrowserBlock {
	s.BlockchainName = &v
	return s
}

func (s *BlockchainBrowserBlock) SetBlockchainStatus(v bool) *BlockchainBrowserBlock {
	s.BlockchainStatus = &v
	return s
}

func (s *BlockchainBrowserBlock) SetBlockHash(v string) *BlockchainBrowserBlock {
	s.BlockHash = &v
	return s
}

func (s *BlockchainBrowserBlock) SetCreateTime(v int64) *BlockchainBrowserBlock {
	s.CreateTime = &v
	return s
}

func (s *BlockchainBrowserBlock) SetHashStatus(v bool) *BlockchainBrowserBlock {
	s.HashStatus = &v
	return s
}

func (s *BlockchainBrowserBlock) SetHeight(v int64) *BlockchainBrowserBlock {
	s.Height = &v
	return s
}

func (s *BlockchainBrowserBlock) SetPreviousHash(v string) *BlockchainBrowserBlock {
	s.PreviousHash = &v
	return s
}

func (s *BlockchainBrowserBlock) SetRootTxHash(v string) *BlockchainBrowserBlock {
	s.RootTxHash = &v
	return s
}

func (s *BlockchainBrowserBlock) SetTransactionList(v []*BlockchainBrowserTransaction) *BlockchainBrowserBlock {
	s.TransactionList = v
	return s
}

func (s *BlockchainBrowserBlock) SetTransactionSize(v int64) *BlockchainBrowserBlock {
	s.TransactionSize = &v
	return s
}

// 任务人群配置
type TaskCrowdNodeDTO struct {
	// 节点ID
	NodeId *string `json:"node_id,omitempty" xml:"node_id,omitempty" require:"true"`
	// 节点类型
	NodeType *string `json:"node_type,omitempty" xml:"node_type,omitempty" require:"true"`
	// 是否排除
	Exclude *bool `json:"exclude,omitempty" xml:"exclude,omitempty" require:"true"`
	// 节点配置
	NodeConfig *string `json:"node_config,omitempty" xml:"node_config,omitempty" require:"true"`
}

func (s TaskCrowdNodeDTO) String() string {
	return tea.Prettify(s)
}

func (s TaskCrowdNodeDTO) GoString() string {
	return s.String()
}

func (s *TaskCrowdNodeDTO) SetNodeId(v string) *TaskCrowdNodeDTO {
	s.NodeId = &v
	return s
}

func (s *TaskCrowdNodeDTO) SetNodeType(v string) *TaskCrowdNodeDTO {
	s.NodeType = &v
	return s
}

func (s *TaskCrowdNodeDTO) SetExclude(v bool) *TaskCrowdNodeDTO {
	s.Exclude = &v
	return s
}

func (s *TaskCrowdNodeDTO) SetNodeConfig(v string) *TaskCrowdNodeDTO {
	s.NodeConfig = &v
	return s
}

// 人群匹配结果
type MatchResult struct {
	// 是否匹配
	Match *bool `json:"match,omitempty" xml:"match,omitempty" require:"true"`
}

func (s MatchResult) String() string {
	return tea.Prettify(s)
}

func (s MatchResult) GoString() string {
	return s.String()
}

func (s *MatchResult) SetMatch(v bool) *MatchResult {
	s.Match = &v
	return s
}

// 阿里云蚂蚁区块链信息
type ALiYunChain struct {
	// notary_blockchain
	NotaryBlockchain *ALiYunNotaryBlockchain `json:"notary_blockchain,omitempty" xml:"notary_blockchain,omitempty"`
	// contract_blockchain
	ContractBlockchain *ALiYunContractBlockchain `json:"contract_blockchain,omitempty" xml:"contract_blockchain,omitempty"`
	// old_contract_blockchain
	OldContractBlockchain *ALiYunOldContractBlockchain `json:"old_contract_blockchain,omitempty" xml:"old_contract_blockchain,omitempty"`
}

func (s ALiYunChain) String() string {
	return tea.Prettify(s)
}

func (s ALiYunChain) GoString() string {
	return s.String()
}

func (s *ALiYunChain) SetNotaryBlockchain(v *ALiYunNotaryBlockchain) *ALiYunChain {
	s.NotaryBlockchain = v
	return s
}

func (s *ALiYunChain) SetContractBlockchain(v *ALiYunContractBlockchain) *ALiYunChain {
	s.ContractBlockchain = v
	return s
}

func (s *ALiYunChain) SetOldContractBlockchain(v *ALiYunOldContractBlockchain) *ALiYunChain {
	s.OldContractBlockchain = v
	return s
}

// 营销分销平台返佣信息
type RakeBackInfo struct {
	// 推广层级
	Level *int64 `json:"level,omitempty" xml:"level,omitempty" require:"true"`
	// 上级推广订单id
	ParentId *string `json:"parent_id,omitempty" xml:"parent_id,omitempty" require:"true"`
	// 推广人id
	PromoterId *string `json:"promoter_id,omitempty" xml:"promoter_id,omitempty" require:"true"`
	// 返佣额度
	Quota *string `json:"quota,omitempty" xml:"quota,omitempty" require:"true"`
	// 返佣比例 10表示10%
	Rate *string `json:"rate,omitempty" xml:"rate,omitempty" require:"true"`
}

func (s RakeBackInfo) String() string {
	return tea.Prettify(s)
}

func (s RakeBackInfo) GoString() string {
	return s.String()
}

func (s *RakeBackInfo) SetLevel(v int64) *RakeBackInfo {
	s.Level = &v
	return s
}

func (s *RakeBackInfo) SetParentId(v string) *RakeBackInfo {
	s.ParentId = &v
	return s
}

func (s *RakeBackInfo) SetPromoterId(v string) *RakeBackInfo {
	s.PromoterId = &v
	return s
}

func (s *RakeBackInfo) SetQuota(v string) *RakeBackInfo {
	s.Quota = &v
	return s
}

func (s *RakeBackInfo) SetRate(v string) *RakeBackInfo {
	s.Rate = &v
	return s
}

// 阿里云区块链小程序交易查询信息
type ALiYunChainMiniAppTransaction struct {
	// authorized
	Authorized *bool `json:"authorized,omitempty" xml:"authorized,omitempty"`
	// transaction_response
	TransactionResponse *string `json:"transaction_response,omitempty" xml:"transaction_response,omitempty"`
	// transaction_receipt
	TransactionReceipt *string `json:"transaction_receipt,omitempty" xml:"transaction_receipt,omitempty"`
}

func (s ALiYunChainMiniAppTransaction) String() string {
	return tea.Prettify(s)
}

func (s ALiYunChainMiniAppTransaction) GoString() string {
	return s.String()
}

func (s *ALiYunChainMiniAppTransaction) SetAuthorized(v bool) *ALiYunChainMiniAppTransaction {
	s.Authorized = &v
	return s
}

func (s *ALiYunChainMiniAppTransaction) SetTransactionResponse(v string) *ALiYunChainMiniAppTransaction {
	s.TransactionResponse = &v
	return s
}

func (s *ALiYunChainMiniAppTransaction) SetTransactionReceipt(v string) *ALiYunChainMiniAppTransaction {
	s.TransactionReceipt = &v
	return s
}

// 阿里云托管账户信息
type ALiYunChainKmsAccount struct {
	// 账户公钥
	PubKey *string `json:"pub_key,omitempty" xml:"pub_key,omitempty"`
	// 托管秘钥ID
	MyKmsKeyId *string `json:"my_kms_key_id,omitempty" xml:"my_kms_key_id,omitempty"`
}

func (s ALiYunChainKmsAccount) String() string {
	return tea.Prettify(s)
}

func (s ALiYunChainKmsAccount) GoString() string {
	return s.String()
}

func (s *ALiYunChainKmsAccount) SetPubKey(v string) *ALiYunChainKmsAccount {
	s.PubKey = &v
	return s
}

func (s *ALiYunChainKmsAccount) SetMyKmsKeyId(v string) *ALiYunChainKmsAccount {
	s.MyKmsKeyId = &v
	return s
}

// 物流金融平台用户信息
type LogisticFinUser struct {
	// 纳税人识别号
	DraweeTaxNo *string `json:"drawee_tax_no,omitempty" xml:"drawee_tax_no,omitempty" require:"true"`
	// 业务方企业id
	OrgId *string `json:"org_id,omitempty" xml:"org_id,omitempty" require:"true"`
	// 业务方用户id
	UserId *string `json:"user_id,omitempty" xml:"user_id,omitempty" require:"true"`
}

func (s LogisticFinUser) String() string {
	return tea.Prettify(s)
}

func (s LogisticFinUser) GoString() string {
	return s.String()
}

func (s *LogisticFinUser) SetDraweeTaxNo(v string) *LogisticFinUser {
	s.DraweeTaxNo = &v
	return s
}

func (s *LogisticFinUser) SetOrgId(v string) *LogisticFinUser {
	s.OrgId = &v
	return s
}

func (s *LogisticFinUser) SetUserId(v string) *LogisticFinUser {
	s.UserId = &v
	return s
}

// 合约查询
type ContractQueryDetailReq struct {
	// 服务ID
	ServiceId *string `json:"service_id,omitempty" xml:"service_id,omitempty" require:"true" maxLength:"64" minLength:"1"`
}

func (s ContractQueryDetailReq) String() string {
	return tea.Prettify(s)
}

func (s ContractQueryDetailReq) GoString() string {
	return s.String()
}

func (s *ContractQueryDetailReq) SetServiceId(v string) *ContractQueryDetailReq {
	s.ServiceId = &v
	return s
}

// 智能合约市场列表查询
type ContractTemplateQueryReq struct {
	// 页码
	Num *int64 `json:"num,omitempty" xml:"num,omitempty" require:"true"`
	// 页大小
	Size *int64 `json:"size,omitempty" xml:"size,omitempty" require:"true"`
}

func (s ContractTemplateQueryReq) String() string {
	return tea.Prettify(s)
}

func (s ContractTemplateQueryReq) GoString() string {
	return s.String()
}

func (s *ContractTemplateQueryReq) SetNum(v int64) *ContractTemplateQueryReq {
	s.Num = &v
	return s
}

func (s *ContractTemplateQueryReq) SetSize(v int64) *ContractTemplateQueryReq {
	s.Size = &v
	return s
}

// 分销会员用户信息
type DistributionUser struct {
	// 用户创建时间
	CreateTime *string `json:"create_time,omitempty" xml:"create_time,omitempty" require:"true"`
	// 用户手机号
	Mobile *string `json:"mobile,omitempty" xml:"mobile,omitempty" require:"true"`
	// 用户唯一标识
	UserId *string `json:"user_id,omitempty" xml:"user_id,omitempty" require:"true"`
}

func (s DistributionUser) String() string {
	return tea.Prettify(s)
}

func (s DistributionUser) GoString() string {
	return s.String()
}

func (s *DistributionUser) SetCreateTime(v string) *DistributionUser {
	s.CreateTime = &v
	return s
}

func (s *DistributionUser) SetMobile(v string) *DistributionUser {
	s.Mobile = &v
	return s
}

func (s *DistributionUser) SetUserId(v string) *DistributionUser {
	s.UserId = &v
	return s
}

// 智能合约市场列表
type ContractTemplateListResp struct {
	// 合约市场列表
	List []*ContractTemplateResp `json:"list,omitempty" xml:"list,omitempty" type:"Repeated"`
	// 总数
	Total *int64 `json:"total,omitempty" xml:"total,omitempty"`
}

func (s ContractTemplateListResp) String() string {
	return tea.Prettify(s)
}

func (s ContractTemplateListResp) GoString() string {
	return s.String()
}

func (s *ContractTemplateListResp) SetList(v []*ContractTemplateResp) *ContractTemplateListResp {
	s.List = v
	return s
}

func (s *ContractTemplateListResp) SetTotal(v int64) *ContractTemplateListResp {
	s.Total = &v
	return s
}

// 授权流程操作结果
type ProcessResult struct {
	// 申请权限的扩展参数
	Extension *string `json:"extension,omitempty" xml:"extension,omitempty"`
	// 申请权限原因
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// 下一个处理节点ID
	Next *string `json:"next,omitempty" xml:"next,omitempty"`
	// 流程ID
	ProcessId *string `json:"process_id,omitempty" xml:"process_id,omitempty" require:"true"`
	// 流程状态
	Status *string `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// 数据对象ID
	DataId *string `json:"data_id,omitempty" xml:"data_id,omitempty" require:"true"`
	// 交易HASH
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty"`
	// 区块高度
	BlockNumber *int64 `json:"block_number,omitempty" xml:"block_number,omitempty"`
	// 授权凭证
	AuthorityCert *string `json:"authority_cert,omitempty" xml:"authority_cert,omitempty"`
}

func (s ProcessResult) String() string {
	return tea.Prettify(s)
}

func (s ProcessResult) GoString() string {
	return s.String()
}

func (s *ProcessResult) SetExtension(v string) *ProcessResult {
	s.Extension = &v
	return s
}

func (s *ProcessResult) SetMessage(v string) *ProcessResult {
	s.Message = &v
	return s
}

func (s *ProcessResult) SetNext(v string) *ProcessResult {
	s.Next = &v
	return s
}

func (s *ProcessResult) SetProcessId(v string) *ProcessResult {
	s.ProcessId = &v
	return s
}

func (s *ProcessResult) SetStatus(v string) *ProcessResult {
	s.Status = &v
	return s
}

func (s *ProcessResult) SetDataId(v string) *ProcessResult {
	s.DataId = &v
	return s
}

func (s *ProcessResult) SetTxHash(v string) *ProcessResult {
	s.TxHash = &v
	return s
}

func (s *ProcessResult) SetBlockNumber(v int64) *ProcessResult {
	s.BlockNumber = &v
	return s
}

func (s *ProcessResult) SetAuthorityCert(v string) *ProcessResult {
	s.AuthorityCert = &v
	return s
}

// 数据授权服务用户公钥结构体
type PublicKey struct {
	// 公钥颁发者ID
	IssuerId *string `json:"issuer_id,omitempty" xml:"issuer_id,omitempty" require:"true" maxLength:"100"`
	// 公钥内容
	PublicKeyContent *string `json:"public_key_content,omitempty" xml:"public_key_content,omitempty" require:"true"`
	// 公钥接受者ID
	RecipientId *string `json:"recipient_id,omitempty" xml:"recipient_id,omitempty" require:"true" maxLength:"100"`
}

func (s PublicKey) String() string {
	return tea.Prettify(s)
}

func (s PublicKey) GoString() string {
	return s.String()
}

func (s *PublicKey) SetIssuerId(v string) *PublicKey {
	s.IssuerId = &v
	return s
}

func (s *PublicKey) SetPublicKeyContent(v string) *PublicKey {
	s.PublicKeyContent = &v
	return s
}

func (s *PublicKey) SetRecipientId(v string) *PublicKey {
	s.RecipientId = &v
	return s
}

// 合约部署记录
type ContractRecord struct {
	// abi对应oss key
	AbiOssKey *string `json:"abi_oss_key,omitempty" xml:"abi_oss_key,omitempty" require:"true"`
	// abi oss 地址
	AbiOssUrl *string `json:"abi_oss_url,omitempty" xml:"abi_oss_url,omitempty"`
	// 区块链唯一标识
	Bizid *string `json:"bizid,omitempty" xml:"bizid,omitempty" require:"true"`
	// 区块链名称
	BlockchainName *string `json:"blockchain_name,omitempty" xml:"blockchain_name,omitempty" require:"true"`
	// bytecode对应oss key
	BytecodeOssKey *string `json:"bytecode_oss_key,omitempty" xml:"bytecode_oss_key,omitempty" require:"true"`
	// bytecode oss 地址
	BytecodeOssUrl *string `json:"bytecode_oss_url,omitempty" xml:"bytecode_oss_url,omitempty"`
	// 16进制表示的合约identity
	Identity *string `json:"identity,omitempty" xml:"identity,omitempty" require:"true"`
	// 合约代码中定义的合约实例名，比如solidity的contract 关键字后面的命名
	InstanceName *string `json:"instance_name,omitempty" xml:"instance_name,omitempty" require:"true"`
	// 合约名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 发布状态，1未发布，3已发布
	Publish *int64 `json:"publish,omitempty" xml:"publish,omitempty" require:"true"`
	// 交易hash
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty" require:"true"`
	// solidity|cpp|go
	Type *string `json:"type,omitempty" xml:"type,omitempty" require:"true"`
}

func (s ContractRecord) String() string {
	return tea.Prettify(s)
}

func (s ContractRecord) GoString() string {
	return s.String()
}

func (s *ContractRecord) SetAbiOssKey(v string) *ContractRecord {
	s.AbiOssKey = &v
	return s
}

func (s *ContractRecord) SetAbiOssUrl(v string) *ContractRecord {
	s.AbiOssUrl = &v
	return s
}

func (s *ContractRecord) SetBizid(v string) *ContractRecord {
	s.Bizid = &v
	return s
}

func (s *ContractRecord) SetBlockchainName(v string) *ContractRecord {
	s.BlockchainName = &v
	return s
}

func (s *ContractRecord) SetBytecodeOssKey(v string) *ContractRecord {
	s.BytecodeOssKey = &v
	return s
}

func (s *ContractRecord) SetBytecodeOssUrl(v string) *ContractRecord {
	s.BytecodeOssUrl = &v
	return s
}

func (s *ContractRecord) SetIdentity(v string) *ContractRecord {
	s.Identity = &v
	return s
}

func (s *ContractRecord) SetInstanceName(v string) *ContractRecord {
	s.InstanceName = &v
	return s
}

func (s *ContractRecord) SetName(v string) *ContractRecord {
	s.Name = &v
	return s
}

func (s *ContractRecord) SetPublish(v int64) *ContractRecord {
	s.Publish = &v
	return s
}

func (s *ContractRecord) SetTxHash(v string) *ContractRecord {
	s.TxHash = &v
	return s
}

func (s *ContractRecord) SetType(v string) *ContractRecord {
	s.Type = &v
	return s
}

// 蚂蚁链浏览器交易收据信息
type BlockchainBrowserTransactionReceipt struct {
	// data
	Data *string `json:"data,omitempty" xml:"data,omitempty" require:"true"`
	// gas_used
	GasUsed *int64 `json:"gas_used,omitempty" xml:"gas_used,omitempty" require:"true"`
	// logs
	Logs []*string `json:"logs,omitempty" xml:"logs,omitempty" require:"true" type:"Repeated"`
	// result
	Result *int64 `json:"result,omitempty" xml:"result,omitempty" require:"true"`
}

func (s BlockchainBrowserTransactionReceipt) String() string {
	return tea.Prettify(s)
}

func (s BlockchainBrowserTransactionReceipt) GoString() string {
	return s.String()
}

func (s *BlockchainBrowserTransactionReceipt) SetData(v string) *BlockchainBrowserTransactionReceipt {
	s.Data = &v
	return s
}

func (s *BlockchainBrowserTransactionReceipt) SetGasUsed(v int64) *BlockchainBrowserTransactionReceipt {
	s.GasUsed = &v
	return s
}

func (s *BlockchainBrowserTransactionReceipt) SetLogs(v []*string) *BlockchainBrowserTransactionReceipt {
	s.Logs = v
	return s
}

func (s *BlockchainBrowserTransactionReceipt) SetResult(v int64) *BlockchainBrowserTransactionReceipt {
	s.Result = &v
	return s
}

// 数字资产管理平台批发结构
type AccountWholesaleParam struct {
	// 批发数量
	EpAmount *int64 `json:"ep_amount,omitempty" xml:"ep_amount,omitempty" require:"true"`
	// 用户账户
	UserAccount *string `json:"user_account,omitempty" xml:"user_account,omitempty" require:"true"`
}

func (s AccountWholesaleParam) String() string {
	return tea.Prettify(s)
}

func (s AccountWholesaleParam) GoString() string {
	return s.String()
}

func (s *AccountWholesaleParam) SetEpAmount(v int64) *AccountWholesaleParam {
	s.EpAmount = &v
	return s
}

func (s *AccountWholesaleParam) SetUserAccount(v string) *AccountWholesaleParam {
	s.UserAccount = &v
	return s
}

// 更新后的任务信息
type UpdatedTaskInfo struct {
	// 任务标题(同一个租户不能重复)
	TaskName *string `json:"task_name,omitempty" xml:"task_name,omitempty" require:"true"`
	// appId
	AppId *string `json:"app_id,omitempty" xml:"app_id,omitempty" require:"true"`
	// 问卷ID
	SurveyId *string `json:"survey_id,omitempty" xml:"survey_id,omitempty" require:"true"`
	// 任务ID
	TaskId *string `json:"task_id,omitempty" xml:"task_id,omitempty" require:"true"`
	// 备注信息
	Notes *string `json:"notes,omitempty" xml:"notes,omitempty"`
	// 租户ID
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty" require:"true"`
	// 操作者ID
	Operator *string `json:"operator,omitempty" xml:"operator,omitempty" require:"true"`
	// banner标题
	BannerTitle *string `json:"banner_title,omitempty" xml:"banner_title,omitempty" require:"true"`
	// banner图片地址（最多支持3张）
	BannerImageUrls *string `json:"banner_image_urls,omitempty" xml:"banner_image_urls,omitempty"`
	// banner 图片地址, 拼装后的url
	BannerImageFullUrls []*string `json:"banner_image_full_urls,omitempty" xml:"banner_image_full_urls,omitempty" type:"Repeated"`
	// 题量
	QuestionNum *int64 `json:"question_num,omitempty" xml:"question_num,omitempty" require:"true"`
	// 任务连接地址
	TaskLinkUrl *string `json:"task_link_url,omitempty" xml:"task_link_url,omitempty" require:"true"`
	// 人群划分描述
	PersonDivideContent *string `json:"person_divide_content,omitempty" xml:"person_divide_content,omitempty"`
	// 城市列表
	CityDivideUrls *string `json:"city_divide_urls,omitempty" xml:"city_divide_urls,omitempty"`
	// 城市列表, 拼装后的url
	CityDivideFullUrls []*string `json:"city_divide_full_urls,omitempty" xml:"city_divide_full_urls,omitempty" type:"Repeated"`
	// 样本数量
	SampleNum *int64 `json:"sample_num,omitempty" xml:"sample_num,omitempty" require:"true"`
	// 完成样本量
	CompletedNum *int64 `json:"completed_num,omitempty" xml:"completed_num,omitempty" require:"true"`
	// 产品下单code类型（1-资源包 2-后付费）
	ProductCodeType *string `json:"product_code_type,omitempty" xml:"product_code_type,omitempty" require:"true"`
	// 产品余量
	ProductCapacity *int64 `json:"product_capacity,omitempty" xml:"product_capacity,omitempty" require:"true"`
	// 奖励渠道（0-手动发支付宝余额 1-海豚红包 2-问卷自带）
	PrizeChannel *int64 `json:"prize_channel,omitempty" xml:"prize_channel,omitempty" require:"true"`
	// 支付宝账号
	AlipayAccountId *string `json:"alipay_account_id,omitempty" xml:"alipay_account_id,omitempty"`
	// 奖励类型（0-定额红包）
	PrizeType *int64 `json:"prize_type,omitempty" xml:"prize_type,omitempty" require:"true"`
	// 全额红包金额，奖励渠道为0和1时
	FullRedPacketAmount *string `json:"full_red_packet_amount,omitempty" xml:"full_red_packet_amount,omitempty" require:"true"`
	// 全额红包描述，奖励渠道为2时，此处必填
	FullRedPacketTextInfo *string `json:"full_red_packet_text_info,omitempty" xml:"full_red_packet_text_info,omitempty"`
	// 甄别红包金额
	ExamineRedPacketAmount *string `json:"examine_red_packet_amount,omitempty" xml:"examine_red_packet_amount,omitempty" require:"true"`
	// 关联的证书instanceId
	CertInstanceId *string `json:"cert_instance_id,omitempty" xml:"cert_instance_id,omitempty"`
	// 证书实例详情
	CertInstanceDetail *CertInstanceDetail `json:"cert_instance_detail,omitempty" xml:"cert_instance_detail,omitempty" require:"true"`
	// 审核意见
	VerifyOmment *string `json:"verify_omment,omitempty" xml:"verify_omment,omitempty"`
	// 任务创建时间
	GmtCreate *string `json:"gmt_create,omitempty" xml:"gmt_create,omitempty" require:"true"`
	// 任务修改时间
	GmtModified *string `json:"gmt_modified,omitempty" xml:"gmt_modified,omitempty" require:"true"`
	// 审核理由
	ReviewContent *string `json:"review_content,omitempty" xml:"review_content,omitempty"`
	// 状态
	Status *int64 `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// 人群配置
	CrowdConfig *string `json:"crowd_config,omitempty" xml:"crowd_config,omitempty" require:"true"`
}

func (s UpdatedTaskInfo) String() string {
	return tea.Prettify(s)
}

func (s UpdatedTaskInfo) GoString() string {
	return s.String()
}

func (s *UpdatedTaskInfo) SetTaskName(v string) *UpdatedTaskInfo {
	s.TaskName = &v
	return s
}

func (s *UpdatedTaskInfo) SetAppId(v string) *UpdatedTaskInfo {
	s.AppId = &v
	return s
}

func (s *UpdatedTaskInfo) SetSurveyId(v string) *UpdatedTaskInfo {
	s.SurveyId = &v
	return s
}

func (s *UpdatedTaskInfo) SetTaskId(v string) *UpdatedTaskInfo {
	s.TaskId = &v
	return s
}

func (s *UpdatedTaskInfo) SetNotes(v string) *UpdatedTaskInfo {
	s.Notes = &v
	return s
}

func (s *UpdatedTaskInfo) SetTenantId(v string) *UpdatedTaskInfo {
	s.TenantId = &v
	return s
}

func (s *UpdatedTaskInfo) SetOperator(v string) *UpdatedTaskInfo {
	s.Operator = &v
	return s
}

func (s *UpdatedTaskInfo) SetBannerTitle(v string) *UpdatedTaskInfo {
	s.BannerTitle = &v
	return s
}

func (s *UpdatedTaskInfo) SetBannerImageUrls(v string) *UpdatedTaskInfo {
	s.BannerImageUrls = &v
	return s
}

func (s *UpdatedTaskInfo) SetBannerImageFullUrls(v []*string) *UpdatedTaskInfo {
	s.BannerImageFullUrls = v
	return s
}

func (s *UpdatedTaskInfo) SetQuestionNum(v int64) *UpdatedTaskInfo {
	s.QuestionNum = &v
	return s
}

func (s *UpdatedTaskInfo) SetTaskLinkUrl(v string) *UpdatedTaskInfo {
	s.TaskLinkUrl = &v
	return s
}

func (s *UpdatedTaskInfo) SetPersonDivideContent(v string) *UpdatedTaskInfo {
	s.PersonDivideContent = &v
	return s
}

func (s *UpdatedTaskInfo) SetCityDivideUrls(v string) *UpdatedTaskInfo {
	s.CityDivideUrls = &v
	return s
}

func (s *UpdatedTaskInfo) SetCityDivideFullUrls(v []*string) *UpdatedTaskInfo {
	s.CityDivideFullUrls = v
	return s
}

func (s *UpdatedTaskInfo) SetSampleNum(v int64) *UpdatedTaskInfo {
	s.SampleNum = &v
	return s
}

func (s *UpdatedTaskInfo) SetCompletedNum(v int64) *UpdatedTaskInfo {
	s.CompletedNum = &v
	return s
}

func (s *UpdatedTaskInfo) SetProductCodeType(v string) *UpdatedTaskInfo {
	s.ProductCodeType = &v
	return s
}

func (s *UpdatedTaskInfo) SetProductCapacity(v int64) *UpdatedTaskInfo {
	s.ProductCapacity = &v
	return s
}

func (s *UpdatedTaskInfo) SetPrizeChannel(v int64) *UpdatedTaskInfo {
	s.PrizeChannel = &v
	return s
}

func (s *UpdatedTaskInfo) SetAlipayAccountId(v string) *UpdatedTaskInfo {
	s.AlipayAccountId = &v
	return s
}

func (s *UpdatedTaskInfo) SetPrizeType(v int64) *UpdatedTaskInfo {
	s.PrizeType = &v
	return s
}

func (s *UpdatedTaskInfo) SetFullRedPacketAmount(v string) *UpdatedTaskInfo {
	s.FullRedPacketAmount = &v
	return s
}

func (s *UpdatedTaskInfo) SetFullRedPacketTextInfo(v string) *UpdatedTaskInfo {
	s.FullRedPacketTextInfo = &v
	return s
}

func (s *UpdatedTaskInfo) SetExamineRedPacketAmount(v string) *UpdatedTaskInfo {
	s.ExamineRedPacketAmount = &v
	return s
}

func (s *UpdatedTaskInfo) SetCertInstanceId(v string) *UpdatedTaskInfo {
	s.CertInstanceId = &v
	return s
}

func (s *UpdatedTaskInfo) SetCertInstanceDetail(v *CertInstanceDetail) *UpdatedTaskInfo {
	s.CertInstanceDetail = v
	return s
}

func (s *UpdatedTaskInfo) SetVerifyOmment(v string) *UpdatedTaskInfo {
	s.VerifyOmment = &v
	return s
}

func (s *UpdatedTaskInfo) SetGmtCreate(v string) *UpdatedTaskInfo {
	s.GmtCreate = &v
	return s
}

func (s *UpdatedTaskInfo) SetGmtModified(v string) *UpdatedTaskInfo {
	s.GmtModified = &v
	return s
}

func (s *UpdatedTaskInfo) SetReviewContent(v string) *UpdatedTaskInfo {
	s.ReviewContent = &v
	return s
}

func (s *UpdatedTaskInfo) SetStatus(v int64) *UpdatedTaskInfo {
	s.Status = &v
	return s
}

func (s *UpdatedTaskInfo) SetCrowdConfig(v string) *UpdatedTaskInfo {
	s.CrowdConfig = &v
	return s
}

// 阿里云交易查询结果
type ALiYunTransactionResult struct {
	// block_hash
	BlockHash *string `json:"block_hash,omitempty" xml:"block_hash,omitempty"`
	// block_height
	BlockHeight *int64 `json:"block_height,omitempty" xml:"block_height,omitempty"`
	// block_version
	BlockVersion *string `json:"block_version,omitempty" xml:"block_version,omitempty"`
	// create_time
	CreateTime *int64 `json:"create_time,omitempty" xml:"create_time,omitempty"`
	// hash
	Hash *string `json:"hash,omitempty" xml:"hash,omitempty"`
	// Transaction
	Transaction *ALiYunTransaction `json:"transaction,omitempty" xml:"transaction,omitempty"`
}

func (s ALiYunTransactionResult) String() string {
	return tea.Prettify(s)
}

func (s ALiYunTransactionResult) GoString() string {
	return s.String()
}

func (s *ALiYunTransactionResult) SetBlockHash(v string) *ALiYunTransactionResult {
	s.BlockHash = &v
	return s
}

func (s *ALiYunTransactionResult) SetBlockHeight(v int64) *ALiYunTransactionResult {
	s.BlockHeight = &v
	return s
}

func (s *ALiYunTransactionResult) SetBlockVersion(v string) *ALiYunTransactionResult {
	s.BlockVersion = &v
	return s
}

func (s *ALiYunTransactionResult) SetCreateTime(v int64) *ALiYunTransactionResult {
	s.CreateTime = &v
	return s
}

func (s *ALiYunTransactionResult) SetHash(v string) *ALiYunTransactionResult {
	s.Hash = &v
	return s
}

func (s *ALiYunTransactionResult) SetTransaction(v *ALiYunTransaction) *ALiYunTransactionResult {
	s.Transaction = v
	return s
}

// waas公钥信息
type PublicKeyInfo struct {
	// 公钥id
	KeyId *string `json:"key_id,omitempty" xml:"key_id,omitempty" require:"true"`
	// 公钥内容
	PublicKey *string `json:"public_key,omitempty" xml:"public_key,omitempty" require:"true"`
	// 算法类型
	SignType *string `json:"sign_type,omitempty" xml:"sign_type,omitempty" require:"true"`
	// 过期时间戳（毫秒）
	Expire *int64 `json:"expire,omitempty" xml:"expire,omitempty"`
	// 公钥状态，0:不可用 1:可用
	Status *int64 `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// 创建者的did
	Controller *string `json:"controller,omitempty" xml:"controller,omitempty"`
}

func (s PublicKeyInfo) String() string {
	return tea.Prettify(s)
}

func (s PublicKeyInfo) GoString() string {
	return s.String()
}

func (s *PublicKeyInfo) SetKeyId(v string) *PublicKeyInfo {
	s.KeyId = &v
	return s
}

func (s *PublicKeyInfo) SetPublicKey(v string) *PublicKeyInfo {
	s.PublicKey = &v
	return s
}

func (s *PublicKeyInfo) SetSignType(v string) *PublicKeyInfo {
	s.SignType = &v
	return s
}

func (s *PublicKeyInfo) SetExpire(v int64) *PublicKeyInfo {
	s.Expire = &v
	return s
}

func (s *PublicKeyInfo) SetStatus(v int64) *PublicKeyInfo {
	s.Status = &v
	return s
}

func (s *PublicKeyInfo) SetController(v string) *PublicKeyInfo {
	s.Controller = &v
	return s
}

// 更新VC状态数据结构
type UpdateVCStatus struct {
	// valid or invalid
	Status *string `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// 可验证声明id
	VcId *string `json:"vc_id,omitempty" xml:"vc_id,omitempty" require:"true"`
}

func (s UpdateVCStatus) String() string {
	return tea.Prettify(s)
}

func (s UpdateVCStatus) GoString() string {
	return s.String()
}

func (s *UpdateVCStatus) SetStatus(v string) *UpdateVCStatus {
	s.Status = &v
	return s
}

func (s *UpdateVCStatus) SetVcId(v string) *UpdateVCStatus {
	s.VcId = &v
	return s
}

// 关联应用
type ContractBindAppReq struct {
	// 应用ID
	ApplicationId *string `json:"application_id,omitempty" xml:"application_id,omitempty" require:"true" maxLength:"64" minLength:"1"`
	// 合约服务标识集合
	ServiceIds []*string `json:"service_ids,omitempty" xml:"service_ids,omitempty" type:"Repeated"`
}

func (s ContractBindAppReq) String() string {
	return tea.Prettify(s)
}

func (s ContractBindAppReq) GoString() string {
	return s.String()
}

func (s *ContractBindAppReq) SetApplicationId(v string) *ContractBindAppReq {
	s.ApplicationId = &v
	return s
}

func (s *ContractBindAppReq) SetServiceIds(v []*string) *ContractBindAppReq {
	s.ServiceIds = v
	return s
}

// 用户数据
type OCUserData struct {
	// 创建时间
	CreateTime *string `json:"create_time,omitempty" xml:"create_time,omitempty" require:"true" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 手机号
	PhoneNumber *string `json:"phone_number,omitempty" xml:"phone_number,omitempty" require:"true"`
	// 用户姓名
	UserName *string `json:"user_name,omitempty" xml:"user_name,omitempty" require:"true"`
}

func (s OCUserData) String() string {
	return tea.Prettify(s)
}

func (s OCUserData) GoString() string {
	return s.String()
}

func (s *OCUserData) SetCreateTime(v string) *OCUserData {
	s.CreateTime = &v
	return s
}

func (s *OCUserData) SetPhoneNumber(v string) *OCUserData {
	s.PhoneNumber = &v
	return s
}

func (s *OCUserData) SetUserName(v string) *OCUserData {
	s.UserName = &v
	return s
}

// 用户身份信息
type UserMetaInfo struct {
	// 用户身份信息类型
	Type *string `json:"type,omitempty" xml:"type,omitempty" require:"true"`
	// 用户身份信息
	Data []*KeyValuePair `json:"data,omitempty" xml:"data,omitempty" require:"true" type:"Repeated"`
}

func (s UserMetaInfo) String() string {
	return tea.Prettify(s)
}

func (s UserMetaInfo) GoString() string {
	return s.String()
}

func (s *UserMetaInfo) SetType(v string) *UserMetaInfo {
	s.Type = &v
	return s
}

func (s *UserMetaInfo) SetData(v []*KeyValuePair) *UserMetaInfo {
	s.Data = v
	return s
}

// 阿里云子链列表信息
type ALiYunChainSubnetList struct {
	// ant_chain_id
	AntChainId *string `json:"ant_chain_id,omitempty" xml:"ant_chain_id,omitempty"`
	// 子链名称
	BlockchainName *string `json:"blockchain_name,omitempty" xml:"blockchain_name,omitempty"`
	// 联盟管理员
	ConsortiumAdmin *bool `json:"consortium_admin,omitempty" xml:"consortium_admin,omitempty"`
	// 子链列表信息
	BlockchainSubnetList []*ALiYunChainSubnet `json:"blockchain_subnet_list,omitempty" xml:"blockchain_subnet_list,omitempty" type:"Repeated"`
}

func (s ALiYunChainSubnetList) String() string {
	return tea.Prettify(s)
}

func (s ALiYunChainSubnetList) GoString() string {
	return s.String()
}

func (s *ALiYunChainSubnetList) SetAntChainId(v string) *ALiYunChainSubnetList {
	s.AntChainId = &v
	return s
}

func (s *ALiYunChainSubnetList) SetBlockchainName(v string) *ALiYunChainSubnetList {
	s.BlockchainName = &v
	return s
}

func (s *ALiYunChainSubnetList) SetConsortiumAdmin(v bool) *ALiYunChainSubnetList {
	s.ConsortiumAdmin = &v
	return s
}

func (s *ALiYunChainSubnetList) SetBlockchainSubnetList(v []*ALiYunChainSubnet) *ALiYunChainSubnetList {
	s.BlockchainSubnetList = v
	return s
}

// 合约服务列表查询
type ContracPageReq struct {
	// 合约服务类别
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
	// 页码
	Num *int64 `json:"num,omitempty" xml:"num,omitempty" require:"true"`
	// 页大小
	Size *int64 `json:"size,omitempty" xml:"size,omitempty" require:"true"`
}

func (s ContracPageReq) String() string {
	return tea.Prettify(s)
}

func (s ContracPageReq) GoString() string {
	return s.String()
}

func (s *ContracPageReq) SetType(v string) *ContracPageReq {
	s.Type = &v
	return s
}

func (s *ContracPageReq) SetNum(v int64) *ContracPageReq {
	s.Num = &v
	return s
}

func (s *ContracPageReq) SetSize(v int64) *ContracPageReq {
	s.Size = &v
	return s
}

// 人群标签枚举集合对象
type CrowdTagEnumResp struct {
	// 人群标签code
	CrowdTag *string `json:"crowd_tag,omitempty" xml:"crowd_tag,omitempty" require:"true"`
	// 人群标签枚举列表对象
	CrowTagEnumItemList []*CrowdTagEnumItemDTO `json:"crow_tag_enum_item_list,omitempty" xml:"crow_tag_enum_item_list,omitempty" require:"true" type:"Repeated"`
}

func (s CrowdTagEnumResp) String() string {
	return tea.Prettify(s)
}

func (s CrowdTagEnumResp) GoString() string {
	return s.String()
}

func (s *CrowdTagEnumResp) SetCrowdTag(v string) *CrowdTagEnumResp {
	s.CrowdTag = &v
	return s
}

func (s *CrowdTagEnumResp) SetCrowTagEnumItemList(v []*CrowdTagEnumItemDTO) *CrowdTagEnumResp {
	s.CrowTagEnumItemList = v
	return s
}

// 阿里云最新区块列表查询的单元信息
type ALiYunChainBlockInfo struct {
	// alias
	Alias *string `json:"alias,omitempty" xml:"alias,omitempty"`
	// block_hash
	BlockHash *string `json:"block_hash,omitempty" xml:"block_hash,omitempty"`
	// root_tx_hash
	RootTxHash *string `json:"root_tx_hash,omitempty" xml:"root_tx_hash,omitempty"`
	// height
	Height *int64 `json:"height,omitempty" xml:"height,omitempty"`
	// previous_hash
	PreviousHash *string `json:"previous_hash,omitempty" xml:"previous_hash,omitempty"`
	// create_time
	CreateTime *int64 `json:"create_time,omitempty" xml:"create_time,omitempty"`
	// biz_data
	BizData *string `json:"biz_data,omitempty" xml:"biz_data,omitempty"`
	// transaction_size
	TransactionSize *int64 `json:"transaction_size,omitempty" xml:"transaction_size,omitempty"`
	// version
	Version *int64 `json:"version,omitempty" xml:"version,omitempty"`
	// size
	Size *int64 `json:"size,omitempty" xml:"size,omitempty"`
}

func (s ALiYunChainBlockInfo) String() string {
	return tea.Prettify(s)
}

func (s ALiYunChainBlockInfo) GoString() string {
	return s.String()
}

func (s *ALiYunChainBlockInfo) SetAlias(v string) *ALiYunChainBlockInfo {
	s.Alias = &v
	return s
}

func (s *ALiYunChainBlockInfo) SetBlockHash(v string) *ALiYunChainBlockInfo {
	s.BlockHash = &v
	return s
}

func (s *ALiYunChainBlockInfo) SetRootTxHash(v string) *ALiYunChainBlockInfo {
	s.RootTxHash = &v
	return s
}

func (s *ALiYunChainBlockInfo) SetHeight(v int64) *ALiYunChainBlockInfo {
	s.Height = &v
	return s
}

func (s *ALiYunChainBlockInfo) SetPreviousHash(v string) *ALiYunChainBlockInfo {
	s.PreviousHash = &v
	return s
}

func (s *ALiYunChainBlockInfo) SetCreateTime(v int64) *ALiYunChainBlockInfo {
	s.CreateTime = &v
	return s
}

func (s *ALiYunChainBlockInfo) SetBizData(v string) *ALiYunChainBlockInfo {
	s.BizData = &v
	return s
}

func (s *ALiYunChainBlockInfo) SetTransactionSize(v int64) *ALiYunChainBlockInfo {
	s.TransactionSize = &v
	return s
}

func (s *ALiYunChainBlockInfo) SetVersion(v int64) *ALiYunChainBlockInfo {
	s.Version = &v
	return s
}

func (s *ALiYunChainBlockInfo) SetSize(v int64) *ALiYunChainBlockInfo {
	s.Size = &v
	return s
}

// 组件信息
type DiscreteValue struct {
	// 排序id
	SortId *int64 `json:"sort_id,omitempty" xml:"sort_id,omitempty"`
	// 字段描述
	Text *string `json:"text,omitempty" xml:"text,omitempty" require:"true"`
	// 提示信息
	Tips *string `json:"tips,omitempty" xml:"tips,omitempty"`
	// 单位信息
	Unit *string `json:"unit,omitempty" xml:"unit,omitempty"`
	// 值内容
	Value *string `json:"value,omitempty" xml:"value,omitempty" require:"true"`
}

func (s DiscreteValue) String() string {
	return tea.Prettify(s)
}

func (s DiscreteValue) GoString() string {
	return s.String()
}

func (s *DiscreteValue) SetSortId(v int64) *DiscreteValue {
	s.SortId = &v
	return s
}

func (s *DiscreteValue) SetText(v string) *DiscreteValue {
	s.Text = &v
	return s
}

func (s *DiscreteValue) SetTips(v string) *DiscreteValue {
	s.Tips = &v
	return s
}

func (s *DiscreteValue) SetUnit(v string) *DiscreteValue {
	s.Unit = &v
	return s
}

func (s *DiscreteValue) SetValue(v string) *DiscreteValue {
	s.Value = &v
	return s
}

// 合约列表
type ContractPageResp struct {
	// 合约列表
	List []*ContractPageListResp `json:"list,omitempty" xml:"list,omitempty" type:"Repeated"`
	// 总数
	Total *int64 `json:"total,omitempty" xml:"total,omitempty"`
}

func (s ContractPageResp) String() string {
	return tea.Prettify(s)
}

func (s ContractPageResp) GoString() string {
	return s.String()
}

func (s *ContractPageResp) SetList(v []*ContractPageListResp) *ContractPageResp {
	s.List = v
	return s
}

func (s *ContractPageResp) SetTotal(v int64) *ContractPageResp {
	s.Total = &v
	return s
}

// AccountPo
type AccountPo struct {
	// 账户 hash
	Account *string `json:"account,omitempty" xml:"account,omitempty"`
	// 账户创建时间
	CreateTime *int64 `json:"create_time,omitempty" xml:"create_time,omitempty"`
	// 创建该账户的交易hash
	Hash *string `json:"hash,omitempty" xml:"hash,omitempty"`
	// 创建该账户的 账户hash
	Parent *string `json:"parent,omitempty" xml:"parent,omitempty"`
}

func (s AccountPo) String() string {
	return tea.Prettify(s)
}

func (s AccountPo) GoString() string {
	return s.String()
}

func (s *AccountPo) SetAccount(v string) *AccountPo {
	s.Account = &v
	return s
}

func (s *AccountPo) SetCreateTime(v int64) *AccountPo {
	s.CreateTime = &v
	return s
}

func (s *AccountPo) SetHash(v string) *AccountPo {
	s.Hash = &v
	return s
}

func (s *AccountPo) SetParent(v string) *AccountPo {
	s.Parent = &v
	return s
}

// doc删除service
type DidDeleteService struct {
	// 修改前did doc版本
	PreviousVersion *int64 `json:"previous_version,omitempty" xml:"previous_version,omitempty" require:"true"`
	// 指定服务的id
	ServiceId *string `json:"service_id,omitempty" xml:"service_id,omitempty" require:"true"`
}

func (s DidDeleteService) String() string {
	return tea.Prettify(s)
}

func (s DidDeleteService) GoString() string {
	return s.String()
}

func (s *DidDeleteService) SetPreviousVersion(v int64) *DidDeleteService {
	s.PreviousVersion = &v
	return s
}

func (s *DidDeleteService) SetServiceId(v string) *DidDeleteService {
	s.ServiceId = &v
	return s
}

// 可验证声明相关的事件
type VCEvent struct {
	// 事件对应的合约方法
	Action *string `json:"action,omitempty" xml:"action,omitempty" require:"true"`
	// 本次事件的触发者
	From *string `json:"from,omitempty" xml:"from,omitempty" require:"true"`
	// 事件在区块的高度
	Height *int64 `json:"height,omitempty" xml:"height,omitempty" require:"true"`
	// 该VC的颁发者
	Issuer *string `json:"issuer,omitempty" xml:"issuer,omitempty" require:"true"`
	// 有效，或者无效
	Status *string `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// 该vc的接受者
	Subjec *string `json:"subjec,omitempty" xml:"subjec,omitempty" require:"true"`
	// 交易hash
	//
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty" require:"true"`
	// 交易在区块中的index
	TxIndex *int64 `json:"tx_index,omitempty" xml:"tx_index,omitempty" require:"true"`
	// 可验证声明Hash值
	VcHash *string `json:"vc_hash,omitempty" xml:"vc_hash,omitempty" require:"true"`
	// vcid
	VcId *string `json:"vc_id,omitempty" xml:"vc_id,omitempty" require:"true"`
}

func (s VCEvent) String() string {
	return tea.Prettify(s)
}

func (s VCEvent) GoString() string {
	return s.String()
}

func (s *VCEvent) SetAction(v string) *VCEvent {
	s.Action = &v
	return s
}

func (s *VCEvent) SetFrom(v string) *VCEvent {
	s.From = &v
	return s
}

func (s *VCEvent) SetHeight(v int64) *VCEvent {
	s.Height = &v
	return s
}

func (s *VCEvent) SetIssuer(v string) *VCEvent {
	s.Issuer = &v
	return s
}

func (s *VCEvent) SetStatus(v string) *VCEvent {
	s.Status = &v
	return s
}

func (s *VCEvent) SetSubjec(v string) *VCEvent {
	s.Subjec = &v
	return s
}

func (s *VCEvent) SetTxHash(v string) *VCEvent {
	s.TxHash = &v
	return s
}

func (s *VCEvent) SetTxIndex(v int64) *VCEvent {
	s.TxIndex = &v
	return s
}

func (s *VCEvent) SetVcHash(v string) *VCEvent {
	s.VcHash = &v
	return s
}

func (s *VCEvent) SetVcId(v string) *VCEvent {
	s.VcId = &v
	return s
}

// dis服务发现对象
type DisServiceInfo struct {
	// 提供服务的did
	Controller *string `json:"controller,omitempty" xml:"controller,omitempty" require:"true"`
	// 服务地址
	EndPoint *string `json:"end_point,omitempty" xml:"end_point,omitempty" require:"true"`
	// 服务id
	ServiceId *string `json:"service_id,omitempty" xml:"service_id,omitempty" require:"true"`
	// 服务类型
	ServiceType *string `json:"service_type,omitempty" xml:"service_type,omitempty" require:"true"`
}

func (s DisServiceInfo) String() string {
	return tea.Prettify(s)
}

func (s DisServiceInfo) GoString() string {
	return s.String()
}

func (s *DisServiceInfo) SetController(v string) *DisServiceInfo {
	s.Controller = &v
	return s
}

func (s *DisServiceInfo) SetEndPoint(v string) *DisServiceInfo {
	s.EndPoint = &v
	return s
}

func (s *DisServiceInfo) SetServiceId(v string) *DisServiceInfo {
	s.ServiceId = &v
	return s
}

func (s *DisServiceInfo) SetServiceType(v string) *DisServiceInfo {
	s.ServiceType = &v
	return s
}

// POAP徽章的详细信息
type PoapInfo struct {
	// 徽章ID，具有唯一性
	PoapId *string `json:"poap_id,omitempty" xml:"poap_id,omitempty" require:"true"`
	// 徽章名字
	PoapName *string `json:"poap_name,omitempty" xml:"poap_name,omitempty" require:"true"`
	// 徽章HASH
	UniHash *string `json:"uni_hash,omitempty" xml:"uni_hash,omitempty" require:"true"`
	// 状态，枚举值
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// 徽章资源 URL
	PoapUrl *string `json:"poap_url,omitempty" xml:"poap_url,omitempty" require:"true"`
	// 枚举值，2D_IMAGE--2D图片渲染；3D_OASISENGINE--3D模型渲染
	RenderType *string `json:"render_type,omitempty" xml:"render_type,omitempty" require:"true"`
	// 3D模型降级使用的资源URL
	FaultToleranceUrl *string `json:"fault_tolerance_url,omitempty" xml:"fault_tolerance_url,omitempty"`
	// 小程序详情跳转URL。临时链接，过期时间为 detail_alipays_url_expire_time 字段的值
	DetailAlipaysUrl *string `json:"detail_alipays_url,omitempty" xml:"detail_alipays_url,omitempty"`
	// 详情页跳转URL过期时间
	DetailAlipaysUrlExpireTime *string `json:"detail_alipays_url_expire_time,omitempty" xml:"detail_alipays_url_expire_time,omitempty"`
}

func (s PoapInfo) String() string {
	return tea.Prettify(s)
}

func (s PoapInfo) GoString() string {
	return s.String()
}

func (s *PoapInfo) SetPoapId(v string) *PoapInfo {
	s.PoapId = &v
	return s
}

func (s *PoapInfo) SetPoapName(v string) *PoapInfo {
	s.PoapName = &v
	return s
}

func (s *PoapInfo) SetUniHash(v string) *PoapInfo {
	s.UniHash = &v
	return s
}

func (s *PoapInfo) SetStatus(v string) *PoapInfo {
	s.Status = &v
	return s
}

func (s *PoapInfo) SetPoapUrl(v string) *PoapInfo {
	s.PoapUrl = &v
	return s
}

func (s *PoapInfo) SetRenderType(v string) *PoapInfo {
	s.RenderType = &v
	return s
}

func (s *PoapInfo) SetFaultToleranceUrl(v string) *PoapInfo {
	s.FaultToleranceUrl = &v
	return s
}

func (s *PoapInfo) SetDetailAlipaysUrl(v string) *PoapInfo {
	s.DetailAlipaysUrl = &v
	return s
}

func (s *PoapInfo) SetDetailAlipaysUrlExpireTime(v string) *PoapInfo {
	s.DetailAlipaysUrlExpireTime = &v
	return s
}

// 分布式数字身份信息
type DidInfo struct {
	// 分布式数字身份id
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 分布式数字身份对应的用户名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
}

func (s DidInfo) String() string {
	return tea.Prettify(s)
}

func (s DidInfo) GoString() string {
	return s.String()
}

func (s *DidInfo) SetDid(v string) *DidInfo {
	s.Did = &v
	return s
}

func (s *DidInfo) SetName(v string) *DidInfo {
	s.Name = &v
	return s
}

// 数据隐私服务选择tapp信息的结构体
type ChoiceTappInfo struct {
	// 选择的tapp的名字
	TappName *string `json:"tapp_name,omitempty" xml:"tapp_name,omitempty" require:"true"`
	// 版本号，如果不填就选择最新的版本
	TappVersion *int64 `json:"tapp_version,omitempty" xml:"tapp_version,omitempty"`
	// 该tapp将被声明在did doc中的id
	ServiceId *string `json:"service_id,omitempty" xml:"service_id,omitempty" require:"true"`
}

func (s ChoiceTappInfo) String() string {
	return tea.Prettify(s)
}

func (s ChoiceTappInfo) GoString() string {
	return s.String()
}

func (s *ChoiceTappInfo) SetTappName(v string) *ChoiceTappInfo {
	s.TappName = &v
	return s
}

func (s *ChoiceTappInfo) SetTappVersion(v int64) *ChoiceTappInfo {
	s.TappVersion = &v
	return s
}

func (s *ChoiceTappInfo) SetServiceId(v string) *ChoiceTappInfo {
	s.ServiceId = &v
	return s
}

// 复制阿里云合约工程信息
type ALiYunContractProjectDuplicate struct {
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// consortium_id
	ConsortiumId *string `json:"consortium_id,omitempty" xml:"consortium_id,omitempty"`
	// gmt_create
	GmtCreate *int64 `json:"gmt_create,omitempty" xml:"gmt_create,omitempty"`
	// gmt_modified
	GmtModified *int64 `json:"gmt_modified,omitempty" xml:"gmt_modified,omitempty"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// version
	Version *string `json:"version,omitempty" xml:"version,omitempty"`
	// description
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
}

func (s ALiYunContractProjectDuplicate) String() string {
	return tea.Prettify(s)
}

func (s ALiYunContractProjectDuplicate) GoString() string {
	return s.String()
}

func (s *ALiYunContractProjectDuplicate) SetId(v string) *ALiYunContractProjectDuplicate {
	s.Id = &v
	return s
}

func (s *ALiYunContractProjectDuplicate) SetConsortiumId(v string) *ALiYunContractProjectDuplicate {
	s.ConsortiumId = &v
	return s
}

func (s *ALiYunContractProjectDuplicate) SetGmtCreate(v int64) *ALiYunContractProjectDuplicate {
	s.GmtCreate = &v
	return s
}

func (s *ALiYunContractProjectDuplicate) SetGmtModified(v int64) *ALiYunContractProjectDuplicate {
	s.GmtModified = &v
	return s
}

func (s *ALiYunContractProjectDuplicate) SetName(v string) *ALiYunContractProjectDuplicate {
	s.Name = &v
	return s
}

func (s *ALiYunContractProjectDuplicate) SetVersion(v string) *ALiYunContractProjectDuplicate {
	s.Version = &v
	return s
}

func (s *ALiYunContractProjectDuplicate) SetDescription(v string) *ALiYunContractProjectDuplicate {
	s.Description = &v
	return s
}

// 物流金融信用流转流水信息
type CreditTransferStatementInfo struct {
	// 信用凭证额度
	CreditLimit *string `json:"credit_limit,omitempty" xml:"credit_limit,omitempty"`
	// 信用凭证到期时间
	ExpireDate *string `json:"expire_date,omitempty" xml:"expire_date,omitempty"`
	// 凭证来源方did
	FromDid *string `json:"from_did,omitempty" xml:"from_did,omitempty"`
	// 信用凭证发起时间
	IssueDate *string `json:"issue_date,omitempty" xml:"issue_date,omitempty"`
	// 信用流转凭证
	IssueId *string `json:"issue_id,omitempty" xml:"issue_id,omitempty"`
	// 流水类型
	StateType *string `json:"state_type,omitempty" xml:"state_type,omitempty"`
	// 凭证流转方did
	ToDid *string `json:"to_did,omitempty" xml:"to_did,omitempty"`
}

func (s CreditTransferStatementInfo) String() string {
	return tea.Prettify(s)
}

func (s CreditTransferStatementInfo) GoString() string {
	return s.String()
}

func (s *CreditTransferStatementInfo) SetCreditLimit(v string) *CreditTransferStatementInfo {
	s.CreditLimit = &v
	return s
}

func (s *CreditTransferStatementInfo) SetExpireDate(v string) *CreditTransferStatementInfo {
	s.ExpireDate = &v
	return s
}

func (s *CreditTransferStatementInfo) SetFromDid(v string) *CreditTransferStatementInfo {
	s.FromDid = &v
	return s
}

func (s *CreditTransferStatementInfo) SetIssueDate(v string) *CreditTransferStatementInfo {
	s.IssueDate = &v
	return s
}

func (s *CreditTransferStatementInfo) SetIssueId(v string) *CreditTransferStatementInfo {
	s.IssueId = &v
	return s
}

func (s *CreditTransferStatementInfo) SetStateType(v string) *CreditTransferStatementInfo {
	s.StateType = &v
	return s
}

func (s *CreditTransferStatementInfo) SetToDid(v string) *CreditTransferStatementInfo {
	s.ToDid = &v
	return s
}

// 阿里云合约工程信息查询
type ALiYunContractProjects struct {
	// pagination
	Pagination *ALiYunPagination `json:"pagination,omitempty" xml:"pagination,omitempty"`
	// contract_projects
	ContractProjects []*ALiYunContractProject `json:"contract_projects,omitempty" xml:"contract_projects,omitempty" type:"Repeated"`
}

func (s ALiYunContractProjects) String() string {
	return tea.Prettify(s)
}

func (s ALiYunContractProjects) GoString() string {
	return s.String()
}

func (s *ALiYunContractProjects) SetPagination(v *ALiYunPagination) *ALiYunContractProjects {
	s.Pagination = v
	return s
}

func (s *ALiYunContractProjects) SetContractProjects(v []*ALiYunContractProject) *ALiYunContractProjects {
	s.ContractProjects = v
	return s
}

// 阿里云区块链资源类型信息
type ALiYunChainResouceType struct {
	// type_id
	TypeId *int64 `json:"type_id,omitempty" xml:"type_id,omitempty"`
	// cpu
	Cpu *int64 `json:"cpu,omitempty" xml:"cpu,omitempty"`
	// memory
	Memory *int64 `json:"memory,omitempty" xml:"memory,omitempty"`
	// disk
	Disk *int64 `json:"disk,omitempty" xml:"disk,omitempty"`
}

func (s ALiYunChainResouceType) String() string {
	return tea.Prettify(s)
}

func (s ALiYunChainResouceType) GoString() string {
	return s.String()
}

func (s *ALiYunChainResouceType) SetTypeId(v int64) *ALiYunChainResouceType {
	s.TypeId = &v
	return s
}

func (s *ALiYunChainResouceType) SetCpu(v int64) *ALiYunChainResouceType {
	s.Cpu = &v
	return s
}

func (s *ALiYunChainResouceType) SetMemory(v int64) *ALiYunChainResouceType {
	s.Memory = &v
	return s
}

func (s *ALiYunChainResouceType) SetDisk(v int64) *ALiYunChainResouceType {
	s.Disk = &v
	return s
}

// 结构化存证类型
type DepositMetaDataItem struct {
	// 结构化存证时该item的描述
	Desc *string `json:"desc,omitempty" xml:"desc,omitempty" require:"true"`
	// 结构化存证该数据字段的唯一索引
	Key *string `json:"key,omitempty" xml:"key,omitempty" require:"true"`
	// 结构化存证时该item的类型
	// 0 text
	// 1 encrypt text
	// 2 txHash
	// 3 image url
	// 4 vedio url
	// 5 map url
	Type *int64 `json:"type,omitempty" xml:"type,omitempty" require:"true"`
	// 结构化数据存证时，该item的值
	Value *string `json:"value,omitempty" xml:"value,omitempty" require:"true"`
}

func (s DepositMetaDataItem) String() string {
	return tea.Prettify(s)
}

func (s DepositMetaDataItem) GoString() string {
	return s.String()
}

func (s *DepositMetaDataItem) SetDesc(v string) *DepositMetaDataItem {
	s.Desc = &v
	return s
}

func (s *DepositMetaDataItem) SetKey(v string) *DepositMetaDataItem {
	s.Key = &v
	return s
}

func (s *DepositMetaDataItem) SetType(v int64) *DepositMetaDataItem {
	s.Type = &v
	return s
}

func (s *DepositMetaDataItem) SetValue(v string) *DepositMetaDataItem {
	s.Value = &v
	return s
}

// 阿里云最新交易信息
type ALiYunLatestTransaction struct {
	// hash
	Hash *string `json:"hash,omitempty" xml:"hash,omitempty"`
	// transaction_v10_type
	TransactionV10Type *string `json:"transaction_v10_type,omitempty" xml:"transaction_v10_type,omitempty"`
	// trans_type_v6
	TransTypeV6 *string `json:"trans_type_v6,omitempty" xml:"trans_type_v6,omitempty"`
	// from
	From *string `json:"from,omitempty" xml:"from,omitempty"`
	// to
	To *string `json:"to,omitempty" xml:"to,omitempty"`
	// create_time
	CreateTime *int64 `json:"create_time,omitempty" xml:"create_time,omitempty"`
}

func (s ALiYunLatestTransaction) String() string {
	return tea.Prettify(s)
}

func (s ALiYunLatestTransaction) GoString() string {
	return s.String()
}

func (s *ALiYunLatestTransaction) SetHash(v string) *ALiYunLatestTransaction {
	s.Hash = &v
	return s
}

func (s *ALiYunLatestTransaction) SetTransactionV10Type(v string) *ALiYunLatestTransaction {
	s.TransactionV10Type = &v
	return s
}

func (s *ALiYunLatestTransaction) SetTransTypeV6(v string) *ALiYunLatestTransaction {
	s.TransTypeV6 = &v
	return s
}

func (s *ALiYunLatestTransaction) SetFrom(v string) *ALiYunLatestTransaction {
	s.From = &v
	return s
}

func (s *ALiYunLatestTransaction) SetTo(v string) *ALiYunLatestTransaction {
	s.To = &v
	return s
}

func (s *ALiYunLatestTransaction) SetCreateTime(v int64) *ALiYunLatestTransaction {
	s.CreateTime = &v
	return s
}

// 分页查询请求信息
type PageReq struct {
	// 页码
	Num *int64 `json:"num,omitempty" xml:"num,omitempty" require:"true"`
	// 页大小
	Size *int64 `json:"size,omitempty" xml:"size,omitempty" require:"true"`
}

func (s PageReq) String() string {
	return tea.Prettify(s)
}

func (s PageReq) GoString() string {
	return s.String()
}

func (s *PageReq) SetNum(v int64) *PageReq {
	s.Num = &v
	return s
}

func (s *PageReq) SetSize(v int64) *PageReq {
	s.Size = &v
	return s
}

// 用户密钥信息
type UserBizKeyInfo struct {
	// 拥有该密钥的用户列表
	GrantedUser []*string `json:"granted_user,omitempty" xml:"granted_user,omitempty" require:"true" type:"Repeated"`
	// 密钥名称
	KeyName *string `json:"key_name,omitempty" xml:"key_name,omitempty" require:"true"`
}

func (s UserBizKeyInfo) String() string {
	return tea.Prettify(s)
}

func (s UserBizKeyInfo) GoString() string {
	return s.String()
}

func (s *UserBizKeyInfo) SetGrantedUser(v []*string) *UserBizKeyInfo {
	s.GrantedUser = v
	return s
}

func (s *UserBizKeyInfo) SetKeyName(v string) *UserBizKeyInfo {
	s.KeyName = &v
	return s
}

// 证书详情
type BareClaim struct {
	// 下面的内容由调用者自己定义，建议只存放必要的声明信息，不要放置敏感数据
	Claim *string `json:"claim,omitempty" xml:"claim,omitempty" require:"true"`
	// 证书类型
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
}

func (s BareClaim) String() string {
	return tea.Prettify(s)
}

func (s BareClaim) GoString() string {
	return s.String()
}

func (s *BareClaim) SetClaim(v string) *BareClaim {
	s.Claim = &v
	return s
}

func (s *BareClaim) SetType(v string) *BareClaim {
	s.Type = &v
	return s
}

// 合约链配置信息结果，内部包含一个列表，列举多个合约链的配置信息
type ContractIdeConfigResult struct {
	// 合约链的配置信息，可包含多个合约链的配置
	ContractIdeConfigList []*ContractIdeConfig `json:"contract_ide_config_list,omitempty" xml:"contract_ide_config_list,omitempty" require:"true" type:"Repeated"`
}

func (s ContractIdeConfigResult) String() string {
	return tea.Prettify(s)
}

func (s ContractIdeConfigResult) GoString() string {
	return s.String()
}

func (s *ContractIdeConfigResult) SetContractIdeConfigList(v []*ContractIdeConfig) *ContractIdeConfigResult {
	s.ContractIdeConfigList = v
	return s
}

// 合约与应用关联信息
type ContractBindListResp struct {
	// 合约关联列表
	List []*ContractBindResp `json:"list,omitempty" xml:"list,omitempty" type:"Repeated"`
}

func (s ContractBindListResp) String() string {
	return tea.Prettify(s)
}

func (s ContractBindListResp) GoString() string {
	return s.String()
}

func (s *ContractBindListResp) SetList(v []*ContractBindResp) *ContractBindListResp {
	s.List = v
	return s
}

// 合约详情
type ContractDetailResp struct {
	// 合约服务ID
	ServiceId *string `json:"service_id,omitempty" xml:"service_id,omitempty"`
	// 合约服务名称
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 创建人
	Creator *string `json:"creator,omitempty" xml:"creator,omitempty"`
	// 创建时间
	CreateTime *int64 `json:"create_time,omitempty" xml:"create_time,omitempty"`
	// 订购产品
	OrderingProducts *string `json:"ordering_products,omitempty" xml:"ordering_products,omitempty"`
	// 关联区块链id
	ChanId *string `json:"chan_id,omitempty" xml:"chan_id,omitempty"`
	// 合约状态
	ContractStatus *string `json:"contract_status,omitempty" xml:"contract_status,omitempty"`
	// 合约部署进度当前状态
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// 合约部署进度
	ProgressInfoList []*InstanceProgressInfo `json:"progress_info_list,omitempty" xml:"progress_info_list,omitempty" type:"Repeated"`
	// 实例最近调用记录(暂缓，先不做)
	RecordInfoList []*InstanceRecordInfo `json:"record_info_list,omitempty" xml:"record_info_list,omitempty" type:"Repeated"`
}

func (s ContractDetailResp) String() string {
	return tea.Prettify(s)
}

func (s ContractDetailResp) GoString() string {
	return s.String()
}

func (s *ContractDetailResp) SetServiceId(v string) *ContractDetailResp {
	s.ServiceId = &v
	return s
}

func (s *ContractDetailResp) SetName(v string) *ContractDetailResp {
	s.Name = &v
	return s
}

func (s *ContractDetailResp) SetCreator(v string) *ContractDetailResp {
	s.Creator = &v
	return s
}

func (s *ContractDetailResp) SetCreateTime(v int64) *ContractDetailResp {
	s.CreateTime = &v
	return s
}

func (s *ContractDetailResp) SetOrderingProducts(v string) *ContractDetailResp {
	s.OrderingProducts = &v
	return s
}

func (s *ContractDetailResp) SetChanId(v string) *ContractDetailResp {
	s.ChanId = &v
	return s
}

func (s *ContractDetailResp) SetContractStatus(v string) *ContractDetailResp {
	s.ContractStatus = &v
	return s
}

func (s *ContractDetailResp) SetStatus(v string) *ContractDetailResp {
	s.Status = &v
	return s
}

func (s *ContractDetailResp) SetProgressInfoList(v []*InstanceProgressInfo) *ContractDetailResp {
	s.ProgressInfoList = v
	return s
}

func (s *ContractDetailResp) SetRecordInfoList(v []*InstanceRecordInfo) *ContractDetailResp {
	s.RecordInfoList = v
	return s
}

// 托管数据库ManagedMQDTO结构体
type ManagedMQDTOStructBody struct {
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 实例
	Instance *string `json:"instance,omitempty" xml:"instance,omitempty"`
	// 主题
	Topic *string `json:"topic,omitempty" xml:"topic,omitempty"`
	// 类型
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
}

func (s ManagedMQDTOStructBody) String() string {
	return tea.Prettify(s)
}

func (s ManagedMQDTOStructBody) GoString() string {
	return s.String()
}

func (s *ManagedMQDTOStructBody) SetId(v string) *ManagedMQDTOStructBody {
	s.Id = &v
	return s
}

func (s *ManagedMQDTOStructBody) SetInstance(v string) *ManagedMQDTOStructBody {
	s.Instance = &v
	return s
}

func (s *ManagedMQDTOStructBody) SetTopic(v string) *ManagedMQDTOStructBody {
	s.Topic = &v
	return s
}

func (s *ManagedMQDTOStructBody) SetType(v string) *ManagedMQDTOStructBody {
	s.Type = &v
	return s
}

// 证书批量颁发进度
type CertIssueProgressDTO struct {
	// 证书实例id
	BizId *string `json:"biz_id,omitempty" xml:"biz_id,omitempty" require:"true"`
	// 存证ID，如果颁发失败，此值为null
	VcId *string `json:"vc_id,omitempty" xml:"vc_id,omitempty" require:"true"`
	// 因校验异常停止任务（不会继续校验文件内容和颁发证书） -3
	// 因校验内容不正确停止颁发任务(会校验完所有的行但不执行颁发) -2
	// 已手动取消（可重试状态下手动取消任务，取消状态下可以启动新的颁发任务） -1
	// 可重试 0
	// 执行中（初始状态） 1
	// 已成功完成 2
	Status *int64 `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// is_error=true时的错误描述
	ErrorMessage *string `json:"error_message,omitempty" xml:"error_message,omitempty" require:"true"`
	// 证书的字段标题列表
	Titles []*string `json:"titles,omitempty" xml:"titles,omitempty" require:"true" type:"Repeated"`
	// 颁发进度百分比
	ProgressPercent *int64 `json:"progress_percent,omitempty" xml:"progress_percent,omitempty" require:"true"`
	// 当前批次数据总行数（不含标题）
	TotalNum *string `json:"total_num,omitempty" xml:"total_num,omitempty" require:"true"`
	// 颁发证书当前执行的阶段，VERIFY：校验文件中，ISSUE：颁发中
	CurTaskType *string `json:"cur_task_type,omitempty" xml:"cur_task_type,omitempty" require:"true"`
	// 颁发开始的时间戳
	StartTimeMillis *int64 `json:"start_time_millis,omitempty" xml:"start_time_millis,omitempty" require:"true"`
	// 颁发结束的时间戳
	EndTimeMillis *int64 `json:"end_time_millis,omitempty" xml:"end_time_millis,omitempty" require:"true"`
	// 校验错误描述列表
	ErrorDetails []*TemplateInstanceErrorDetailDTO `json:"error_details,omitempty" xml:"error_details,omitempty" require:"true" type:"Repeated"`
}

func (s CertIssueProgressDTO) String() string {
	return tea.Prettify(s)
}

func (s CertIssueProgressDTO) GoString() string {
	return s.String()
}

func (s *CertIssueProgressDTO) SetBizId(v string) *CertIssueProgressDTO {
	s.BizId = &v
	return s
}

func (s *CertIssueProgressDTO) SetVcId(v string) *CertIssueProgressDTO {
	s.VcId = &v
	return s
}

func (s *CertIssueProgressDTO) SetStatus(v int64) *CertIssueProgressDTO {
	s.Status = &v
	return s
}

func (s *CertIssueProgressDTO) SetErrorMessage(v string) *CertIssueProgressDTO {
	s.ErrorMessage = &v
	return s
}

func (s *CertIssueProgressDTO) SetTitles(v []*string) *CertIssueProgressDTO {
	s.Titles = v
	return s
}

func (s *CertIssueProgressDTO) SetProgressPercent(v int64) *CertIssueProgressDTO {
	s.ProgressPercent = &v
	return s
}

func (s *CertIssueProgressDTO) SetTotalNum(v string) *CertIssueProgressDTO {
	s.TotalNum = &v
	return s
}

func (s *CertIssueProgressDTO) SetCurTaskType(v string) *CertIssueProgressDTO {
	s.CurTaskType = &v
	return s
}

func (s *CertIssueProgressDTO) SetStartTimeMillis(v int64) *CertIssueProgressDTO {
	s.StartTimeMillis = &v
	return s
}

func (s *CertIssueProgressDTO) SetEndTimeMillis(v int64) *CertIssueProgressDTO {
	s.EndTimeMillis = &v
	return s
}

func (s *CertIssueProgressDTO) SetErrorDetails(v []*TemplateInstanceErrorDetailDTO) *CertIssueProgressDTO {
	s.ErrorDetails = v
	return s
}

// 存证信息集合
type NotaryTransaction struct {
	// 如果存证类型为text, 则为存证内容
	// 如果存证类型为file,则为存证文件临时下载地址
	Content *string `json:"content,omitempty" xml:"content,omitempty" require:"true"`
	// 链上存证哈希
	TransactionHash *string `json:"transaction_hash,omitempty" xml:"transaction_hash,omitempty" require:"true"`
	// 存证类型
	Type *string `json:"type,omitempty" xml:"type,omitempty" require:"true"`
}

func (s NotaryTransaction) String() string {
	return tea.Prettify(s)
}

func (s NotaryTransaction) GoString() string {
	return s.String()
}

func (s *NotaryTransaction) SetContent(v string) *NotaryTransaction {
	s.Content = &v
	return s
}

func (s *NotaryTransaction) SetTransactionHash(v string) *NotaryTransaction {
	s.TransactionHash = &v
	return s
}

func (s *NotaryTransaction) SetType(v string) *NotaryTransaction {
	s.Type = &v
	return s
}

// 蚂蚁链最新交易信息
type BlockchainBrowserLatestTransaction struct {
	// create_time
	CreateTime *int64 `json:"create_time,omitempty" xml:"create_time,omitempty" require:"true"`
	// from
	From *string `json:"from,omitempty" xml:"from,omitempty" require:"true"`
	// to
	To *string `json:"to,omitempty" xml:"to,omitempty" require:"true"`
	// hash
	Hash *string `json:"hash,omitempty" xml:"hash,omitempty" require:"true"`
	// transactionV10Type
	TransactionType *string `json:"transaction_type,omitempty" xml:"transaction_type,omitempty" require:"true"`
}

func (s BlockchainBrowserLatestTransaction) String() string {
	return tea.Prettify(s)
}

func (s BlockchainBrowserLatestTransaction) GoString() string {
	return s.String()
}

func (s *BlockchainBrowserLatestTransaction) SetCreateTime(v int64) *BlockchainBrowserLatestTransaction {
	s.CreateTime = &v
	return s
}

func (s *BlockchainBrowserLatestTransaction) SetFrom(v string) *BlockchainBrowserLatestTransaction {
	s.From = &v
	return s
}

func (s *BlockchainBrowserLatestTransaction) SetTo(v string) *BlockchainBrowserLatestTransaction {
	s.To = &v
	return s
}

func (s *BlockchainBrowserLatestTransaction) SetHash(v string) *BlockchainBrowserLatestTransaction {
	s.Hash = &v
	return s
}

func (s *BlockchainBrowserLatestTransaction) SetTransactionType(v string) *BlockchainBrowserLatestTransaction {
	s.TransactionType = &v
	return s
}

// 版通历史发行记录信息
type EPIssueHisInfo struct {
	// 版通发行日期时间戳
	IssueDate *int64 `json:"issue_date,omitempty" xml:"issue_date,omitempty" require:"true"`
	// 版通线下发行量
	OfflineIssueAmount *int64 `json:"offline_issue_amount,omitempty" xml:"offline_issue_amount,omitempty" require:"true"`
	// 版通线上发行量
	OnlineIssueAmount *int64 `json:"online_issue_amount,omitempty" xml:"online_issue_amount,omitempty" require:"true"`
	// 版通自持发行量
	SelfIssueAmount *int64 `json:"self_issue_amount,omitempty" xml:"self_issue_amount,omitempty" require:"true"`
}

func (s EPIssueHisInfo) String() string {
	return tea.Prettify(s)
}

func (s EPIssueHisInfo) GoString() string {
	return s.String()
}

func (s *EPIssueHisInfo) SetIssueDate(v int64) *EPIssueHisInfo {
	s.IssueDate = &v
	return s
}

func (s *EPIssueHisInfo) SetOfflineIssueAmount(v int64) *EPIssueHisInfo {
	s.OfflineIssueAmount = &v
	return s
}

func (s *EPIssueHisInfo) SetOnlineIssueAmount(v int64) *EPIssueHisInfo {
	s.OnlineIssueAmount = &v
	return s
}

func (s *EPIssueHisInfo) SetSelfIssueAmount(v int64) *EPIssueHisInfo {
	s.SelfIssueAmount = &v
	return s
}

// 数据资产分页查询
type ListDataEntityResult struct {
	// 数据模型信息
	DataModel *DataModel `json:"data_model,omitempty" xml:"data_model,omitempty" require:"true"`
	// 数据资产信息
	DataEntity *DataEntity `json:"data_entity,omitempty" xml:"data_entity,omitempty" require:"true"`
}

func (s ListDataEntityResult) String() string {
	return tea.Prettify(s)
}

func (s ListDataEntityResult) GoString() string {
	return s.String()
}

func (s *ListDataEntityResult) SetDataModel(v *DataModel) *ListDataEntityResult {
	s.DataModel = v
	return s
}

func (s *ListDataEntityResult) SetDataEntity(v *DataEntity) *ListDataEntityResult {
	s.DataEntity = v
	return s
}

// 新建合约服务
type ContractCreateReq struct {
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 合约模板标识
	TemplateId *string `json:"template_id,omitempty" xml:"template_id,omitempty" require:"true"`
	// 合约名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
}

func (s ContractCreateReq) String() string {
	return tea.Prettify(s)
}

func (s ContractCreateReq) GoString() string {
	return s.String()
}

func (s *ContractCreateReq) SetChainId(v string) *ContractCreateReq {
	s.ChainId = &v
	return s
}

func (s *ContractCreateReq) SetTemplateId(v string) *ContractCreateReq {
	s.TemplateId = &v
	return s
}

func (s *ContractCreateReq) SetName(v string) *ContractCreateReq {
	s.Name = &v
	return s
}

// identity parameter
type IdentityParam struct {
	// 经办人姓名
	Agent *string `json:"agent,omitempty" xml:"agent,omitempty"`
	// 经办人身份证号
	AgentId *string `json:"agent_id,omitempty" xml:"agent_id,omitempty"`
	// 用户的姓名
	CertName *string `json:"cert_name,omitempty" xml:"cert_name,omitempty" require:"true"`
	// 用户的身份证号
	CertNo *string `json:"cert_no,omitempty" xml:"cert_no,omitempty" require:"true"`
	// 用户证件类型，目前只支持IDENTITY_CARD
	CertType *string `json:"cert_type,omitempty" xml:"cert_type,omitempty" require:"true"`
	// 法人姓名，企业认证必选
	LegalPerson *string `json:"legal_person,omitempty" xml:"legal_person,omitempty"`
	// 法人身份证，企业认证必选
	LegalPersonId *string `json:"legal_person_id,omitempty" xml:"legal_person_id,omitempty"`
	// 手机号码
	MobileNo *string `json:"mobile_no,omitempty" xml:"mobile_no,omitempty"`
	// 扩展属性字段
	Properties *string `json:"properties,omitempty" xml:"properties,omitempty"`
	// 用户类型，默认为PERSON
	UserType *string `json:"user_type,omitempty" xml:"user_type,omitempty"`
}

func (s IdentityParam) String() string {
	return tea.Prettify(s)
}

func (s IdentityParam) GoString() string {
	return s.String()
}

func (s *IdentityParam) SetAgent(v string) *IdentityParam {
	s.Agent = &v
	return s
}

func (s *IdentityParam) SetAgentId(v string) *IdentityParam {
	s.AgentId = &v
	return s
}

func (s *IdentityParam) SetCertName(v string) *IdentityParam {
	s.CertName = &v
	return s
}

func (s *IdentityParam) SetCertNo(v string) *IdentityParam {
	s.CertNo = &v
	return s
}

func (s *IdentityParam) SetCertType(v string) *IdentityParam {
	s.CertType = &v
	return s
}

func (s *IdentityParam) SetLegalPerson(v string) *IdentityParam {
	s.LegalPerson = &v
	return s
}

func (s *IdentityParam) SetLegalPersonId(v string) *IdentityParam {
	s.LegalPersonId = &v
	return s
}

func (s *IdentityParam) SetMobileNo(v string) *IdentityParam {
	s.MobileNo = &v
	return s
}

func (s *IdentityParam) SetProperties(v string) *IdentityParam {
	s.Properties = &v
	return s
}

func (s *IdentityParam) SetUserType(v string) *IdentityParam {
	s.UserType = &v
	return s
}

// 阿里云链信息
type ALiYunChainInfo struct {
	// abnormal_nodes
	AbnormalNodes *int64 `json:"abnormal_nodes,omitempty" xml:"abnormal_nodes,omitempty"`
	// ant_chain_id
	AntChainId *string `json:"ant_chain_id,omitempty" xml:"ant_chain_id,omitempty"`
	// block_height
	BlockHeight *int64 `json:"block_height,omitempty" xml:"block_height,omitempty"`
	// create_time
	CreateTime *int64 `json:"create_time,omitempty" xml:"create_time,omitempty"`
	// is_role
	IsRole *bool `json:"is_role,omitempty" xml:"is_role,omitempty"`
	// node_number
	NodeNumber *int64 `json:"node_number,omitempty" xml:"node_number,omitempty"`
	// normal
	Normal *bool `json:"normal,omitempty" xml:"normal,omitempty"`
	// transaction_sum
	TransactionSum *int64 `json:"transaction_sum,omitempty" xml:"transaction_sum,omitempty"`
	// Version
	Version *string `json:"version,omitempty" xml:"version,omitempty"`
	// node_infos
	NodeInfos []*ALiYunChainNodeInfo `json:"node_infos,omitempty" xml:"node_infos,omitempty" type:"Repeated"`
}

func (s ALiYunChainInfo) String() string {
	return tea.Prettify(s)
}

func (s ALiYunChainInfo) GoString() string {
	return s.String()
}

func (s *ALiYunChainInfo) SetAbnormalNodes(v int64) *ALiYunChainInfo {
	s.AbnormalNodes = &v
	return s
}

func (s *ALiYunChainInfo) SetAntChainId(v string) *ALiYunChainInfo {
	s.AntChainId = &v
	return s
}

func (s *ALiYunChainInfo) SetBlockHeight(v int64) *ALiYunChainInfo {
	s.BlockHeight = &v
	return s
}

func (s *ALiYunChainInfo) SetCreateTime(v int64) *ALiYunChainInfo {
	s.CreateTime = &v
	return s
}

func (s *ALiYunChainInfo) SetIsRole(v bool) *ALiYunChainInfo {
	s.IsRole = &v
	return s
}

func (s *ALiYunChainInfo) SetNodeNumber(v int64) *ALiYunChainInfo {
	s.NodeNumber = &v
	return s
}

func (s *ALiYunChainInfo) SetNormal(v bool) *ALiYunChainInfo {
	s.Normal = &v
	return s
}

func (s *ALiYunChainInfo) SetTransactionSum(v int64) *ALiYunChainInfo {
	s.TransactionSum = &v
	return s
}

func (s *ALiYunChainInfo) SetVersion(v string) *ALiYunChainInfo {
	s.Version = &v
	return s
}

func (s *ALiYunChainInfo) SetNodeInfos(v []*ALiYunChainNodeInfo) *ALiYunChainInfo {
	s.NodeInfos = v
	return s
}

// 创建did doc时的具体操作
type DidAddDoc struct {
	// did doc content
	Doc *string `json:"doc,omitempty" xml:"doc,omitempty" require:"true"`
}

func (s DidAddDoc) String() string {
	return tea.Prettify(s)
}

func (s DidAddDoc) GoString() string {
	return s.String()
}

func (s *DidAddDoc) SetDoc(v string) *DidAddDoc {
	s.Doc = &v
	return s
}

// 证书模板详情类
type TemplateInfoDTO struct {
	// 主键
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 模板类别：马拉松类、滑雪类
	Category *string `json:"category,omitempty" xml:"category,omitempty" require:"true"`
	// 模板内容， json格式文本
	ClaimTemplate *string `json:"claim_template,omitempty" xml:"claim_template,omitempty" require:"true"`
	// 创建时间
	GmtCreate *string `json:"gmt_create,omitempty" xml:"gmt_create,omitempty" require:"true"`
	// 修改时间
	GmtModified *string `json:"gmt_modified,omitempty" xml:"gmt_modified,omitempty" require:"true"`
}

func (s TemplateInfoDTO) String() string {
	return tea.Prettify(s)
}

func (s TemplateInfoDTO) GoString() string {
	return s.String()
}

func (s *TemplateInfoDTO) SetId(v int64) *TemplateInfoDTO {
	s.Id = &v
	return s
}

func (s *TemplateInfoDTO) SetCategory(v string) *TemplateInfoDTO {
	s.Category = &v
	return s
}

func (s *TemplateInfoDTO) SetClaimTemplate(v string) *TemplateInfoDTO {
	s.ClaimTemplate = &v
	return s
}

func (s *TemplateInfoDTO) SetGmtCreate(v string) *TemplateInfoDTO {
	s.GmtCreate = &v
	return s
}

func (s *TemplateInfoDTO) SetGmtModified(v string) *TemplateInfoDTO {
	s.GmtModified = &v
	return s
}

// 键值对
type XNameValuePair struct {
	// 键名
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 键值
	Value *string `json:"value,omitempty" xml:"value,omitempty" require:"true"`
}

func (s XNameValuePair) String() string {
	return tea.Prettify(s)
}

func (s XNameValuePair) GoString() string {
	return s.String()
}

func (s *XNameValuePair) SetName(v string) *XNameValuePair {
	s.Name = &v
	return s
}

func (s *XNameValuePair) SetValue(v string) *XNameValuePair {
	s.Value = &v
	return s
}

type StartAccountMappingRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 映射账户详细信息
	Account *AccountMap `json:"account,omitempty" xml:"account,omitempty" require:"true"`
	// 扩展信息
	Extension *string `json:"extension,omitempty" xml:"extension,omitempty" require:"true"`
}

func (s StartAccountMappingRequest) String() string {
	return tea.Prettify(s)
}

func (s StartAccountMappingRequest) GoString() string {
	return s.String()
}

func (s *StartAccountMappingRequest) SetAuthToken(v string) *StartAccountMappingRequest {
	s.AuthToken = &v
	return s
}

func (s *StartAccountMappingRequest) SetProductInstanceId(v string) *StartAccountMappingRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *StartAccountMappingRequest) SetAccount(v *AccountMap) *StartAccountMappingRequest {
	s.Account = v
	return s
}

func (s *StartAccountMappingRequest) SetExtension(v string) *StartAccountMappingRequest {
	s.Extension = &v
	return s
}

type StartAccountMappingResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 映射结果
	Data *AccountMappingResult `json:"data,omitempty" xml:"data,omitempty"`
}

func (s StartAccountMappingResponse) String() string {
	return tea.Prettify(s)
}

func (s StartAccountMappingResponse) GoString() string {
	return s.String()
}

func (s *StartAccountMappingResponse) SetReqMsgId(v string) *StartAccountMappingResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartAccountMappingResponse) SetResultCode(v string) *StartAccountMappingResponse {
	s.ResultCode = &v
	return s
}

func (s *StartAccountMappingResponse) SetResultMsg(v string) *StartAccountMappingResponse {
	s.ResultMsg = &v
	return s
}

func (s *StartAccountMappingResponse) SetData(v *AccountMappingResult) *StartAccountMappingResponse {
	s.Data = v
	return s
}

type BatchcreateAccountMappingRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 待映射处理的账户信息列表
	Data []*AccountMap `json:"data,omitempty" xml:"data,omitempty" require:"true" type:"Repeated"`
}

func (s BatchcreateAccountMappingRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchcreateAccountMappingRequest) GoString() string {
	return s.String()
}

func (s *BatchcreateAccountMappingRequest) SetAuthToken(v string) *BatchcreateAccountMappingRequest {
	s.AuthToken = &v
	return s
}

func (s *BatchcreateAccountMappingRequest) SetProductInstanceId(v string) *BatchcreateAccountMappingRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *BatchcreateAccountMappingRequest) SetData(v []*AccountMap) *BatchcreateAccountMappingRequest {
	s.Data = v
	return s
}

type BatchcreateAccountMappingResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 当前请求分配的请求ID，可以通过这个值查询映射结果
	BatchId *string `json:"batch_id,omitempty" xml:"batch_id,omitempty"`
}

func (s BatchcreateAccountMappingResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchcreateAccountMappingResponse) GoString() string {
	return s.String()
}

func (s *BatchcreateAccountMappingResponse) SetReqMsgId(v string) *BatchcreateAccountMappingResponse {
	s.ReqMsgId = &v
	return s
}

func (s *BatchcreateAccountMappingResponse) SetResultCode(v string) *BatchcreateAccountMappingResponse {
	s.ResultCode = &v
	return s
}

func (s *BatchcreateAccountMappingResponse) SetResultMsg(v string) *BatchcreateAccountMappingResponse {
	s.ResultMsg = &v
	return s
}

func (s *BatchcreateAccountMappingResponse) SetBatchId(v string) *BatchcreateAccountMappingResponse {
	s.BatchId = &v
	return s
}

type StartAccountSignatureRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 加密算法
	Algorithm *string `json:"algorithm,omitempty" xml:"algorithm,omitempty" require:"true"`
	// 区块链唯一标示
	Bizid *string `json:"bizid,omitempty" xml:"bizid,omitempty" require:"true"`
	// 用户需要签名的原始数据
	Data *string `json:"data,omitempty" xml:"data,omitempty" require:"true"`
	// 签名账户在原系统中的唯一标示
	Uid *string `json:"uid,omitempty" xml:"uid,omitempty" require:"true"`
}

func (s StartAccountSignatureRequest) String() string {
	return tea.Prettify(s)
}

func (s StartAccountSignatureRequest) GoString() string {
	return s.String()
}

func (s *StartAccountSignatureRequest) SetAuthToken(v string) *StartAccountSignatureRequest {
	s.AuthToken = &v
	return s
}

func (s *StartAccountSignatureRequest) SetProductInstanceId(v string) *StartAccountSignatureRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *StartAccountSignatureRequest) SetAlgorithm(v string) *StartAccountSignatureRequest {
	s.Algorithm = &v
	return s
}

func (s *StartAccountSignatureRequest) SetBizid(v string) *StartAccountSignatureRequest {
	s.Bizid = &v
	return s
}

func (s *StartAccountSignatureRequest) SetData(v string) *StartAccountSignatureRequest {
	s.Data = &v
	return s
}

func (s *StartAccountSignatureRequest) SetUid(v string) *StartAccountSignatureRequest {
	s.Uid = &v
	return s
}

type StartAccountSignatureResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 签名
	Signature *string `json:"signature,omitempty" xml:"signature,omitempty"`
}

func (s StartAccountSignatureResponse) String() string {
	return tea.Prettify(s)
}

func (s StartAccountSignatureResponse) GoString() string {
	return s.String()
}

func (s *StartAccountSignatureResponse) SetReqMsgId(v string) *StartAccountSignatureResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartAccountSignatureResponse) SetResultCode(v string) *StartAccountSignatureResponse {
	s.ResultCode = &v
	return s
}

func (s *StartAccountSignatureResponse) SetResultMsg(v string) *StartAccountSignatureResponse {
	s.ResultMsg = &v
	return s
}

func (s *StartAccountSignatureResponse) SetSignature(v string) *StartAccountSignatureResponse {
	s.Signature = &v
	return s
}

type QueryAccountMappingresultRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 查询之前对应批量映射请求的映射结果
	BatchId *string `json:"batch_id,omitempty" xml:"batch_id,omitempty" require:"true"`
}

func (s QueryAccountMappingresultRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryAccountMappingresultRequest) GoString() string {
	return s.String()
}

func (s *QueryAccountMappingresultRequest) SetAuthToken(v string) *QueryAccountMappingresultRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryAccountMappingresultRequest) SetProductInstanceId(v string) *QueryAccountMappingresultRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryAccountMappingresultRequest) SetBatchId(v string) *QueryAccountMappingresultRequest {
	s.BatchId = &v
	return s
}

type QueryAccountMappingresultResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 映射结果列表
	Data []*AccountMappingResult `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s QueryAccountMappingresultResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryAccountMappingresultResponse) GoString() string {
	return s.String()
}

func (s *QueryAccountMappingresultResponse) SetReqMsgId(v string) *QueryAccountMappingresultResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryAccountMappingresultResponse) SetResultCode(v string) *QueryAccountMappingresultResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryAccountMappingresultResponse) SetResultMsg(v string) *QueryAccountMappingresultResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryAccountMappingresultResponse) SetData(v []*AccountMappingResult) *QueryAccountMappingresultResponse {
	s.Data = v
	return s
}

type QueryAccountMappingRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 要映射的链对应的唯一id
	Bizid *string `json:"bizid,omitempty" xml:"bizid,omitempty" require:"true"`
	// 自有系统中该账户唯一标示
	Uid *string `json:"uid,omitempty" xml:"uid,omitempty" require:"true"`
}

func (s QueryAccountMappingRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryAccountMappingRequest) GoString() string {
	return s.String()
}

func (s *QueryAccountMappingRequest) SetAuthToken(v string) *QueryAccountMappingRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryAccountMappingRequest) SetProductInstanceId(v string) *QueryAccountMappingRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryAccountMappingRequest) SetBizid(v string) *QueryAccountMappingRequest {
	s.Bizid = &v
	return s
}

func (s *QueryAccountMappingRequest) SetUid(v string) *QueryAccountMappingRequest {
	s.Uid = &v
	return s
}

type QueryAccountMappingResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 该用户信息
	Data *AccountMappingInfo `json:"data,omitempty" xml:"data,omitempty"`
}

func (s QueryAccountMappingResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryAccountMappingResponse) GoString() string {
	return s.String()
}

func (s *QueryAccountMappingResponse) SetReqMsgId(v string) *QueryAccountMappingResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryAccountMappingResponse) SetResultCode(v string) *QueryAccountMappingResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryAccountMappingResponse) SetResultMsg(v string) *QueryAccountMappingResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryAccountMappingResponse) SetData(v *AccountMappingInfo) *QueryAccountMappingResponse {
	s.Data = v
	return s
}

type BatchqueryAccountMappingRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 要映射的链对应的唯一id
	Bizid *string `json:"bizid,omitempty" xml:"bizid,omitempty" require:"true"`
	// 查询页数
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty" require:"true" minimum:"1"`
	// 每页大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true" minimum:"1"`
}

func (s BatchqueryAccountMappingRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchqueryAccountMappingRequest) GoString() string {
	return s.String()
}

func (s *BatchqueryAccountMappingRequest) SetAuthToken(v string) *BatchqueryAccountMappingRequest {
	s.AuthToken = &v
	return s
}

func (s *BatchqueryAccountMappingRequest) SetProductInstanceId(v string) *BatchqueryAccountMappingRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *BatchqueryAccountMappingRequest) SetBizid(v string) *BatchqueryAccountMappingRequest {
	s.Bizid = &v
	return s
}

func (s *BatchqueryAccountMappingRequest) SetPageNum(v int64) *BatchqueryAccountMappingRequest {
	s.PageNum = &v
	return s
}

func (s *BatchqueryAccountMappingRequest) SetPageSize(v int64) *BatchqueryAccountMappingRequest {
	s.PageSize = &v
	return s
}

type BatchqueryAccountMappingResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 返回查询的数据
	Data *QueryMappingBatchResult `json:"data,omitempty" xml:"data,omitempty"`
}

func (s BatchqueryAccountMappingResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchqueryAccountMappingResponse) GoString() string {
	return s.String()
}

func (s *BatchqueryAccountMappingResponse) SetReqMsgId(v string) *BatchqueryAccountMappingResponse {
	s.ReqMsgId = &v
	return s
}

func (s *BatchqueryAccountMappingResponse) SetResultCode(v string) *BatchqueryAccountMappingResponse {
	s.ResultCode = &v
	return s
}

func (s *BatchqueryAccountMappingResponse) SetResultMsg(v string) *BatchqueryAccountMappingResponse {
	s.ResultMsg = &v
	return s
}

func (s *BatchqueryAccountMappingResponse) SetData(v *QueryMappingBatchResult) *BatchqueryAccountMappingResponse {
	s.Data = v
	return s
}

type CreateAccountMappingInfoRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 注册地址
	Address *string `json:"address,omitempty" xml:"address,omitempty"`
	// 业务场景code
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty" require:"true"`
	// 业务名称
	BizName *string `json:"biz_name,omitempty" xml:"biz_name,omitempty" require:"true"`
	// 业务类型，预留
	BizType *string `json:"biz_type,omitempty" xml:"biz_type,omitempty"`
	// 用户创建时间
	CreateTime *string `json:"create_time,omitempty" xml:"create_time,omitempty"`
	// 用户注销时间
	EndTime *string `json:"end_time,omitempty" xml:"end_time,omitempty"`
	// 扩展字段，使用json格式
	Extension *string `json:"extension,omitempty" xml:"extension,omitempty"`
	// 业务组code
	GroupCode *string `json:"group_code,omitempty" xml:"group_code,omitempty" require:"true"`
	// 业务组名称
	GroupName *string `json:"group_name,omitempty" xml:"group_name,omitempty" require:"true"`
	// 唯一标示类型，0:统一信用代码,1:开票机构代码,2:身份证号
	IdentityType *int64 `json:"identity_type,omitempty" xml:"identity_type,omitempty"`
	// 唯一标示码
	IdentityValue *string `json:"identity_value,omitempty" xml:"identity_value,omitempty"`
	// 用户标签
	Label *string `json:"label,omitempty" xml:"label,omitempty"`
	// 间连用户的上层直连用户名称
	Parent *string `json:"parent,omitempty" xml:"parent,omitempty"`
	// 统计时间
	StatDate *string `json:"stat_date,omitempty" xml:"stat_date,omitempty"`
	// 用户id
	UserId *string `json:"user_id,omitempty" xml:"user_id,omitempty"`
	// 用户或企业名称
	UserName *string `json:"user_name,omitempty" xml:"user_name,omitempty"`
	// 用户类型：direct直连，indirect间连，partner合作伙伴
	UserType *string `json:"user_type,omitempty" xml:"user_type,omitempty"`
}

func (s CreateAccountMappingInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateAccountMappingInfoRequest) GoString() string {
	return s.String()
}

func (s *CreateAccountMappingInfoRequest) SetAuthToken(v string) *CreateAccountMappingInfoRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateAccountMappingInfoRequest) SetProductInstanceId(v string) *CreateAccountMappingInfoRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateAccountMappingInfoRequest) SetAddress(v string) *CreateAccountMappingInfoRequest {
	s.Address = &v
	return s
}

func (s *CreateAccountMappingInfoRequest) SetBizCode(v string) *CreateAccountMappingInfoRequest {
	s.BizCode = &v
	return s
}

func (s *CreateAccountMappingInfoRequest) SetBizName(v string) *CreateAccountMappingInfoRequest {
	s.BizName = &v
	return s
}

func (s *CreateAccountMappingInfoRequest) SetBizType(v string) *CreateAccountMappingInfoRequest {
	s.BizType = &v
	return s
}

func (s *CreateAccountMappingInfoRequest) SetCreateTime(v string) *CreateAccountMappingInfoRequest {
	s.CreateTime = &v
	return s
}

func (s *CreateAccountMappingInfoRequest) SetEndTime(v string) *CreateAccountMappingInfoRequest {
	s.EndTime = &v
	return s
}

func (s *CreateAccountMappingInfoRequest) SetExtension(v string) *CreateAccountMappingInfoRequest {
	s.Extension = &v
	return s
}

func (s *CreateAccountMappingInfoRequest) SetGroupCode(v string) *CreateAccountMappingInfoRequest {
	s.GroupCode = &v
	return s
}

func (s *CreateAccountMappingInfoRequest) SetGroupName(v string) *CreateAccountMappingInfoRequest {
	s.GroupName = &v
	return s
}

func (s *CreateAccountMappingInfoRequest) SetIdentityType(v int64) *CreateAccountMappingInfoRequest {
	s.IdentityType = &v
	return s
}

func (s *CreateAccountMappingInfoRequest) SetIdentityValue(v string) *CreateAccountMappingInfoRequest {
	s.IdentityValue = &v
	return s
}

func (s *CreateAccountMappingInfoRequest) SetLabel(v string) *CreateAccountMappingInfoRequest {
	s.Label = &v
	return s
}

func (s *CreateAccountMappingInfoRequest) SetParent(v string) *CreateAccountMappingInfoRequest {
	s.Parent = &v
	return s
}

func (s *CreateAccountMappingInfoRequest) SetStatDate(v string) *CreateAccountMappingInfoRequest {
	s.StatDate = &v
	return s
}

func (s *CreateAccountMappingInfoRequest) SetUserId(v string) *CreateAccountMappingInfoRequest {
	s.UserId = &v
	return s
}

func (s *CreateAccountMappingInfoRequest) SetUserName(v string) *CreateAccountMappingInfoRequest {
	s.UserName = &v
	return s
}

func (s *CreateAccountMappingInfoRequest) SetUserType(v string) *CreateAccountMappingInfoRequest {
	s.UserType = &v
	return s
}

type CreateAccountMappingInfoResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 返回id
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty"`
}

func (s CreateAccountMappingInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateAccountMappingInfoResponse) GoString() string {
	return s.String()
}

func (s *CreateAccountMappingInfoResponse) SetReqMsgId(v string) *CreateAccountMappingInfoResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateAccountMappingInfoResponse) SetResultCode(v string) *CreateAccountMappingInfoResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateAccountMappingInfoResponse) SetResultMsg(v string) *CreateAccountMappingInfoResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateAccountMappingInfoResponse) SetAccountId(v string) *CreateAccountMappingInfoResponse {
	s.AccountId = &v
	return s
}

type BatchcreateAccountMappingInfoRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 批量上传的用户信息
	List []*AccountInfoWithBiz `json:"list,omitempty" xml:"list,omitempty" require:"true" type:"Repeated"`
}

func (s BatchcreateAccountMappingInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchcreateAccountMappingInfoRequest) GoString() string {
	return s.String()
}

func (s *BatchcreateAccountMappingInfoRequest) SetAuthToken(v string) *BatchcreateAccountMappingInfoRequest {
	s.AuthToken = &v
	return s
}

func (s *BatchcreateAccountMappingInfoRequest) SetProductInstanceId(v string) *BatchcreateAccountMappingInfoRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *BatchcreateAccountMappingInfoRequest) SetList(v []*AccountInfoWithBiz) *BatchcreateAccountMappingInfoRequest {
	s.List = v
	return s
}

type BatchcreateAccountMappingInfoResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 账户id列表
	Accounts []*string `json:"accounts,omitempty" xml:"accounts,omitempty" type:"Repeated"`
}

func (s BatchcreateAccountMappingInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchcreateAccountMappingInfoResponse) GoString() string {
	return s.String()
}

func (s *BatchcreateAccountMappingInfoResponse) SetReqMsgId(v string) *BatchcreateAccountMappingInfoResponse {
	s.ReqMsgId = &v
	return s
}

func (s *BatchcreateAccountMappingInfoResponse) SetResultCode(v string) *BatchcreateAccountMappingInfoResponse {
	s.ResultCode = &v
	return s
}

func (s *BatchcreateAccountMappingInfoResponse) SetResultMsg(v string) *BatchcreateAccountMappingInfoResponse {
	s.ResultMsg = &v
	return s
}

func (s *BatchcreateAccountMappingInfoResponse) SetAccounts(v []*string) *BatchcreateAccountMappingInfoResponse {
	s.Accounts = v
	return s
}

type GetAkdfUserbizkeyRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 区块链id
	Bizid *string `json:"bizid,omitempty" xml:"bizid,omitempty" require:"true"`
	// 密钥名称
	KeyName *string `json:"key_name,omitempty" xml:"key_name,omitempty" require:"true"`
}

func (s GetAkdfUserbizkeyRequest) String() string {
	return tea.Prettify(s)
}

func (s GetAkdfUserbizkeyRequest) GoString() string {
	return s.String()
}

func (s *GetAkdfUserbizkeyRequest) SetAuthToken(v string) *GetAkdfUserbizkeyRequest {
	s.AuthToken = &v
	return s
}

func (s *GetAkdfUserbizkeyRequest) SetProductInstanceId(v string) *GetAkdfUserbizkeyRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *GetAkdfUserbizkeyRequest) SetBizid(v string) *GetAkdfUserbizkeyRequest {
	s.Bizid = &v
	return s
}

func (s *GetAkdfUserbizkeyRequest) SetKeyName(v string) *GetAkdfUserbizkeyRequest {
	s.KeyName = &v
	return s
}

type GetAkdfUserbizkeyResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 区块链id
	Bizid *string `json:"bizid,omitempty" xml:"bizid,omitempty"`
	// 4dY3DnjHPogYcsiVujkdhBRBceY8ZT5cUBP1zRBAZia7WZhJZyHmWbARBAWvy13aB7cNenbBg5D4CnM1gijv5YiSgBgHTC89sag9M7cxxdaRMrvFEA4YpcaunZdd4Q1APBynsDsqmVyzyGnZk5Kez9WBz5PZRyRC3gqCNXhHLLwuJmGCn8aEv3Ar9vsFUQa6qAgNtVVgiDxEYqBNNQc9K51ytdpBX81ph8nzy2ctUvLqi4G7iFU1wVsdd14XS7oz1v54M5Hb2CUTkv7ncXZSnNJYDsGyKAmHiriL2rargNzp6v2nUXhGSrkCVMDCVkZVcpeVFqSxKGatVdkGYUAswt3vtRVCcs
	EncryptedPrivateKey *string `json:"encrypted_private_key,omitempty" xml:"encrypted_private_key,omitempty"`
}

func (s GetAkdfUserbizkeyResponse) String() string {
	return tea.Prettify(s)
}

func (s GetAkdfUserbizkeyResponse) GoString() string {
	return s.String()
}

func (s *GetAkdfUserbizkeyResponse) SetReqMsgId(v string) *GetAkdfUserbizkeyResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetAkdfUserbizkeyResponse) SetResultCode(v string) *GetAkdfUserbizkeyResponse {
	s.ResultCode = &v
	return s
}

func (s *GetAkdfUserbizkeyResponse) SetResultMsg(v string) *GetAkdfUserbizkeyResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetAkdfUserbizkeyResponse) SetBizid(v string) *GetAkdfUserbizkeyResponse {
	s.Bizid = &v
	return s
}

func (s *GetAkdfUserbizkeyResponse) SetEncryptedPrivateKey(v string) *GetAkdfUserbizkeyResponse {
	s.EncryptedPrivateKey = &v
	return s
}

type ListAkdfUserbizkeyRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 区块链id
	Bizid *string `json:"bizid,omitempty" xml:"bizid,omitempty" require:"true"`
}

func (s ListAkdfUserbizkeyRequest) String() string {
	return tea.Prettify(s)
}

func (s ListAkdfUserbizkeyRequest) GoString() string {
	return s.String()
}

func (s *ListAkdfUserbizkeyRequest) SetAuthToken(v string) *ListAkdfUserbizkeyRequest {
	s.AuthToken = &v
	return s
}

func (s *ListAkdfUserbizkeyRequest) SetProductInstanceId(v string) *ListAkdfUserbizkeyRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ListAkdfUserbizkeyRequest) SetBizid(v string) *ListAkdfUserbizkeyRequest {
	s.Bizid = &v
	return s
}

type ListAkdfUserbizkeyResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 区块链id
	Bizid *string `json:"bizid,omitempty" xml:"bizid,omitempty"`
	// 用户密钥信息
	UserBizKeyInfo []*UserBizKeyInfo `json:"user_biz_key_info,omitempty" xml:"user_biz_key_info,omitempty" type:"Repeated"`
}

func (s ListAkdfUserbizkeyResponse) String() string {
	return tea.Prettify(s)
}

func (s ListAkdfUserbizkeyResponse) GoString() string {
	return s.String()
}

func (s *ListAkdfUserbizkeyResponse) SetReqMsgId(v string) *ListAkdfUserbizkeyResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListAkdfUserbizkeyResponse) SetResultCode(v string) *ListAkdfUserbizkeyResponse {
	s.ResultCode = &v
	return s
}

func (s *ListAkdfUserbizkeyResponse) SetResultMsg(v string) *ListAkdfUserbizkeyResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListAkdfUserbizkeyResponse) SetBizid(v string) *ListAkdfUserbizkeyResponse {
	s.Bizid = &v
	return s
}

func (s *ListAkdfUserbizkeyResponse) SetUserBizKeyInfo(v []*UserBizKeyInfo) *ListAkdfUserbizkeyResponse {
	s.UserBizKeyInfo = v
	return s
}

type CheckBlockchainOrderRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 参数
	Data *string `json:"data,omitempty" xml:"data,omitempty" require:"true"`
	// region_id
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty"`
	// 用户请求ID
	UserRequestId *string `json:"user_request_id,omitempty" xml:"user_request_id,omitempty"`
}

func (s CheckBlockchainOrderRequest) String() string {
	return tea.Prettify(s)
}

func (s CheckBlockchainOrderRequest) GoString() string {
	return s.String()
}

func (s *CheckBlockchainOrderRequest) SetAuthToken(v string) *CheckBlockchainOrderRequest {
	s.AuthToken = &v
	return s
}

func (s *CheckBlockchainOrderRequest) SetProductInstanceId(v string) *CheckBlockchainOrderRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CheckBlockchainOrderRequest) SetData(v string) *CheckBlockchainOrderRequest {
	s.Data = &v
	return s
}

func (s *CheckBlockchainOrderRequest) SetRegionId(v string) *CheckBlockchainOrderRequest {
	s.RegionId = &v
	return s
}

func (s *CheckBlockchainOrderRequest) SetUserRequestId(v string) *CheckBlockchainOrderRequest {
	s.UserRequestId = &v
	return s
}

type CheckBlockchainOrderResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 阿里云订单结果
	Result *ALiYunOrderResult `json:"result,omitempty" xml:"result,omitempty"`
}

func (s CheckBlockchainOrderResponse) String() string {
	return tea.Prettify(s)
}

func (s CheckBlockchainOrderResponse) GoString() string {
	return s.String()
}

func (s *CheckBlockchainOrderResponse) SetReqMsgId(v string) *CheckBlockchainOrderResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CheckBlockchainOrderResponse) SetResultCode(v string) *CheckBlockchainOrderResponse {
	s.ResultCode = &v
	return s
}

func (s *CheckBlockchainOrderResponse) SetResultMsg(v string) *CheckBlockchainOrderResponse {
	s.ResultMsg = &v
	return s
}

func (s *CheckBlockchainOrderResponse) SetResult(v *ALiYunOrderResult) *CheckBlockchainOrderResponse {
	s.Result = v
	return s
}

type VerifyBlockchainOrderRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 参数信息
	Data *string `json:"data,omitempty" xml:"data,omitempty" require:"true"`
	// 区域信息
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty"`
	// 用户请求id
	UserRequestId *string `json:"user_request_id,omitempty" xml:"user_request_id,omitempty"`
}

func (s VerifyBlockchainOrderRequest) String() string {
	return tea.Prettify(s)
}

func (s VerifyBlockchainOrderRequest) GoString() string {
	return s.String()
}

func (s *VerifyBlockchainOrderRequest) SetAuthToken(v string) *VerifyBlockchainOrderRequest {
	s.AuthToken = &v
	return s
}

func (s *VerifyBlockchainOrderRequest) SetProductInstanceId(v string) *VerifyBlockchainOrderRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *VerifyBlockchainOrderRequest) SetData(v string) *VerifyBlockchainOrderRequest {
	s.Data = &v
	return s
}

func (s *VerifyBlockchainOrderRequest) SetRegionId(v string) *VerifyBlockchainOrderRequest {
	s.RegionId = &v
	return s
}

func (s *VerifyBlockchainOrderRequest) SetUserRequestId(v string) *VerifyBlockchainOrderRequest {
	s.UserRequestId = &v
	return s
}

type VerifyBlockchainOrderResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 阿里云请求返回结果
	Result *ALiYunOrderResult `json:"result,omitempty" xml:"result,omitempty"`
}

func (s VerifyBlockchainOrderResponse) String() string {
	return tea.Prettify(s)
}

func (s VerifyBlockchainOrderResponse) GoString() string {
	return s.String()
}

func (s *VerifyBlockchainOrderResponse) SetReqMsgId(v string) *VerifyBlockchainOrderResponse {
	s.ReqMsgId = &v
	return s
}

func (s *VerifyBlockchainOrderResponse) SetResultCode(v string) *VerifyBlockchainOrderResponse {
	s.ResultCode = &v
	return s
}

func (s *VerifyBlockchainOrderResponse) SetResultMsg(v string) *VerifyBlockchainOrderResponse {
	s.ResultMsg = &v
	return s
}

func (s *VerifyBlockchainOrderResponse) SetResult(v *ALiYunOrderResult) *VerifyBlockchainOrderResponse {
	s.Result = v
	return s
}

type InvalidateBlockchainOrderRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 参数
	Data *string `json:"data,omitempty" xml:"data,omitempty" require:"true"`
	// 区域信息
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty"`
	// 用户请求信息
	UserRequestId *string `json:"user_request_id,omitempty" xml:"user_request_id,omitempty"`
}

func (s InvalidateBlockchainOrderRequest) String() string {
	return tea.Prettify(s)
}

func (s InvalidateBlockchainOrderRequest) GoString() string {
	return s.String()
}

func (s *InvalidateBlockchainOrderRequest) SetAuthToken(v string) *InvalidateBlockchainOrderRequest {
	s.AuthToken = &v
	return s
}

func (s *InvalidateBlockchainOrderRequest) SetProductInstanceId(v string) *InvalidateBlockchainOrderRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *InvalidateBlockchainOrderRequest) SetData(v string) *InvalidateBlockchainOrderRequest {
	s.Data = &v
	return s
}

func (s *InvalidateBlockchainOrderRequest) SetRegionId(v string) *InvalidateBlockchainOrderRequest {
	s.RegionId = &v
	return s
}

func (s *InvalidateBlockchainOrderRequest) SetUserRequestId(v string) *InvalidateBlockchainOrderRequest {
	s.UserRequestId = &v
	return s
}

type InvalidateBlockchainOrderResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 阿里云请求参数
	Result *ALiYunOrderResult `json:"result,omitempty" xml:"result,omitempty"`
}

func (s InvalidateBlockchainOrderResponse) String() string {
	return tea.Prettify(s)
}

func (s InvalidateBlockchainOrderResponse) GoString() string {
	return s.String()
}

func (s *InvalidateBlockchainOrderResponse) SetReqMsgId(v string) *InvalidateBlockchainOrderResponse {
	s.ReqMsgId = &v
	return s
}

func (s *InvalidateBlockchainOrderResponse) SetResultCode(v string) *InvalidateBlockchainOrderResponse {
	s.ResultCode = &v
	return s
}

func (s *InvalidateBlockchainOrderResponse) SetResultMsg(v string) *InvalidateBlockchainOrderResponse {
	s.ResultMsg = &v
	return s
}

func (s *InvalidateBlockchainOrderResponse) SetResult(v *ALiYunOrderResult) *InvalidateBlockchainOrderResponse {
	s.Result = v
	return s
}

type ReleaseBlockchainOrderPhysicalRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// bid
	Bid *string `json:"bid,omitempty" xml:"bid,omitempty" require:"true"`
	// country
	Country *string `json:"country,omitempty" xml:"country,omitempty"`
	// gmt_wakeup
	GmtWakeup *string `json:"gmt_wakeup,omitempty" xml:"gmt_wakeup,omitempty"`
	// hid
	Hid *int64 `json:"hid,omitempty" xml:"hid,omitempty" require:"true"`
	// interrupt
	Interrupt *bool `json:"interrupt,omitempty" xml:"interrupt,omitempty"`
	// pk
	Pk *string `json:"pk,omitempty" xml:"pk,omitempty" require:"true"`
	// region_id
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty"`
	// request_id
	RequestId *string `json:"request_id,omitempty" xml:"request_id,omitempty"`
	// task_extra_data
	TaskExtraData *string `json:"task_extra_data,omitempty" xml:"task_extra_data,omitempty"`
	// task_identifier
	TaskIdentifier *string `json:"task_identifier,omitempty" xml:"task_identifier,omitempty"`
}

func (s ReleaseBlockchainOrderPhysicalRequest) String() string {
	return tea.Prettify(s)
}

func (s ReleaseBlockchainOrderPhysicalRequest) GoString() string {
	return s.String()
}

func (s *ReleaseBlockchainOrderPhysicalRequest) SetAuthToken(v string) *ReleaseBlockchainOrderPhysicalRequest {
	s.AuthToken = &v
	return s
}

func (s *ReleaseBlockchainOrderPhysicalRequest) SetProductInstanceId(v string) *ReleaseBlockchainOrderPhysicalRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ReleaseBlockchainOrderPhysicalRequest) SetBid(v string) *ReleaseBlockchainOrderPhysicalRequest {
	s.Bid = &v
	return s
}

func (s *ReleaseBlockchainOrderPhysicalRequest) SetCountry(v string) *ReleaseBlockchainOrderPhysicalRequest {
	s.Country = &v
	return s
}

func (s *ReleaseBlockchainOrderPhysicalRequest) SetGmtWakeup(v string) *ReleaseBlockchainOrderPhysicalRequest {
	s.GmtWakeup = &v
	return s
}

func (s *ReleaseBlockchainOrderPhysicalRequest) SetHid(v int64) *ReleaseBlockchainOrderPhysicalRequest {
	s.Hid = &v
	return s
}

func (s *ReleaseBlockchainOrderPhysicalRequest) SetInterrupt(v bool) *ReleaseBlockchainOrderPhysicalRequest {
	s.Interrupt = &v
	return s
}

func (s *ReleaseBlockchainOrderPhysicalRequest) SetPk(v string) *ReleaseBlockchainOrderPhysicalRequest {
	s.Pk = &v
	return s
}

func (s *ReleaseBlockchainOrderPhysicalRequest) SetRegionId(v string) *ReleaseBlockchainOrderPhysicalRequest {
	s.RegionId = &v
	return s
}

func (s *ReleaseBlockchainOrderPhysicalRequest) SetRequestId(v string) *ReleaseBlockchainOrderPhysicalRequest {
	s.RequestId = &v
	return s
}

func (s *ReleaseBlockchainOrderPhysicalRequest) SetTaskExtraData(v string) *ReleaseBlockchainOrderPhysicalRequest {
	s.TaskExtraData = &v
	return s
}

func (s *ReleaseBlockchainOrderPhysicalRequest) SetTaskIdentifier(v string) *ReleaseBlockchainOrderPhysicalRequest {
	s.TaskIdentifier = &v
	return s
}

type ReleaseBlockchainOrderPhysicalResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// bid
	Bid *string `json:"bid,omitempty" xml:"bid,omitempty"`
	// country
	Country *string `json:"country,omitempty" xml:"country,omitempty"`
	// gmt_wakeup
	GmtWakeup *string `json:"gmt_wakeup,omitempty" xml:"gmt_wakeup,omitempty"`
	// hid
	Hid *int64 `json:"hid,omitempty" xml:"hid,omitempty"`
	// interrupt
	Interrupt *bool `json:"interrupt,omitempty" xml:"interrupt,omitempty"`
	// invoker
	Invoker *string `json:"invoker,omitempty" xml:"invoker,omitempty"`
	// level
	Level *int64 `json:"level,omitempty" xml:"level,omitempty"`
	// message
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// pk
	Pk *string `json:"pk,omitempty" xml:"pk,omitempty"`
	// prompt
	Prompt *string `json:"prompt,omitempty" xml:"prompt,omitempty"`
	// request_id
	RequestId *string `json:"request_id,omitempty" xml:"request_id,omitempty"`
	// 阿里云请求返回结果
	Result *ALiYunDeleteResource `json:"result,omitempty" xml:"result,omitempty"`
	// task_extra_data
	TaskExtraData *string `json:"task_extra_data,omitempty" xml:"task_extra_data,omitempty"`
	// task_identifier
	TaskIdentifier *string `json:"task_identifier,omitempty" xml:"task_identifier,omitempty"`
	// url
	Url *string `json:"url,omitempty" xml:"url,omitempty"`
}

func (s ReleaseBlockchainOrderPhysicalResponse) String() string {
	return tea.Prettify(s)
}

func (s ReleaseBlockchainOrderPhysicalResponse) GoString() string {
	return s.String()
}

func (s *ReleaseBlockchainOrderPhysicalResponse) SetReqMsgId(v string) *ReleaseBlockchainOrderPhysicalResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ReleaseBlockchainOrderPhysicalResponse) SetResultCode(v string) *ReleaseBlockchainOrderPhysicalResponse {
	s.ResultCode = &v
	return s
}

func (s *ReleaseBlockchainOrderPhysicalResponse) SetResultMsg(v string) *ReleaseBlockchainOrderPhysicalResponse {
	s.ResultMsg = &v
	return s
}

func (s *ReleaseBlockchainOrderPhysicalResponse) SetBid(v string) *ReleaseBlockchainOrderPhysicalResponse {
	s.Bid = &v
	return s
}

func (s *ReleaseBlockchainOrderPhysicalResponse) SetCountry(v string) *ReleaseBlockchainOrderPhysicalResponse {
	s.Country = &v
	return s
}

func (s *ReleaseBlockchainOrderPhysicalResponse) SetGmtWakeup(v string) *ReleaseBlockchainOrderPhysicalResponse {
	s.GmtWakeup = &v
	return s
}

func (s *ReleaseBlockchainOrderPhysicalResponse) SetHid(v int64) *ReleaseBlockchainOrderPhysicalResponse {
	s.Hid = &v
	return s
}

func (s *ReleaseBlockchainOrderPhysicalResponse) SetInterrupt(v bool) *ReleaseBlockchainOrderPhysicalResponse {
	s.Interrupt = &v
	return s
}

func (s *ReleaseBlockchainOrderPhysicalResponse) SetInvoker(v string) *ReleaseBlockchainOrderPhysicalResponse {
	s.Invoker = &v
	return s
}

func (s *ReleaseBlockchainOrderPhysicalResponse) SetLevel(v int64) *ReleaseBlockchainOrderPhysicalResponse {
	s.Level = &v
	return s
}

func (s *ReleaseBlockchainOrderPhysicalResponse) SetMessage(v string) *ReleaseBlockchainOrderPhysicalResponse {
	s.Message = &v
	return s
}

func (s *ReleaseBlockchainOrderPhysicalResponse) SetPk(v string) *ReleaseBlockchainOrderPhysicalResponse {
	s.Pk = &v
	return s
}

func (s *ReleaseBlockchainOrderPhysicalResponse) SetPrompt(v string) *ReleaseBlockchainOrderPhysicalResponse {
	s.Prompt = &v
	return s
}

func (s *ReleaseBlockchainOrderPhysicalResponse) SetRequestId(v string) *ReleaseBlockchainOrderPhysicalResponse {
	s.RequestId = &v
	return s
}

func (s *ReleaseBlockchainOrderPhysicalResponse) SetResult(v *ALiYunDeleteResource) *ReleaseBlockchainOrderPhysicalResponse {
	s.Result = v
	return s
}

func (s *ReleaseBlockchainOrderPhysicalResponse) SetTaskExtraData(v string) *ReleaseBlockchainOrderPhysicalResponse {
	s.TaskExtraData = &v
	return s
}

func (s *ReleaseBlockchainOrderPhysicalResponse) SetTaskIdentifier(v string) *ReleaseBlockchainOrderPhysicalResponse {
	s.TaskIdentifier = &v
	return s
}

func (s *ReleaseBlockchainOrderPhysicalResponse) SetUrl(v string) *ReleaseBlockchainOrderPhysicalResponse {
	s.Url = &v
	return s
}

type ReleaseBlockchainOrderLogicalRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// bid
	Bid *string `json:"bid,omitempty" xml:"bid,omitempty" require:"true"`
	// country
	Country *string `json:"country,omitempty" xml:"country,omitempty"`
	// gmt_wakeup
	GmtWakeup *string `json:"gmt_wakeup,omitempty" xml:"gmt_wakeup,omitempty"`
	// hid
	Hid *int64 `json:"hid,omitempty" xml:"hid,omitempty" require:"true"`
	// 中断标识
	Interrupt *bool `json:"interrupt,omitempty" xml:"interrupt,omitempty"`
	// pk
	Pk *string `json:"pk,omitempty" xml:"pk,omitempty" require:"true"`
	// region_id
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty"`
	// request_id
	RequestId *string `json:"request_id,omitempty" xml:"request_id,omitempty"`
	// task_extra_data
	TaskExtraData *string `json:"task_extra_data,omitempty" xml:"task_extra_data,omitempty"`
	// task_identifier
	TaskIdentifier *string `json:"task_identifier,omitempty" xml:"task_identifier,omitempty"`
}

func (s ReleaseBlockchainOrderLogicalRequest) String() string {
	return tea.Prettify(s)
}

func (s ReleaseBlockchainOrderLogicalRequest) GoString() string {
	return s.String()
}

func (s *ReleaseBlockchainOrderLogicalRequest) SetAuthToken(v string) *ReleaseBlockchainOrderLogicalRequest {
	s.AuthToken = &v
	return s
}

func (s *ReleaseBlockchainOrderLogicalRequest) SetProductInstanceId(v string) *ReleaseBlockchainOrderLogicalRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ReleaseBlockchainOrderLogicalRequest) SetBid(v string) *ReleaseBlockchainOrderLogicalRequest {
	s.Bid = &v
	return s
}

func (s *ReleaseBlockchainOrderLogicalRequest) SetCountry(v string) *ReleaseBlockchainOrderLogicalRequest {
	s.Country = &v
	return s
}

func (s *ReleaseBlockchainOrderLogicalRequest) SetGmtWakeup(v string) *ReleaseBlockchainOrderLogicalRequest {
	s.GmtWakeup = &v
	return s
}

func (s *ReleaseBlockchainOrderLogicalRequest) SetHid(v int64) *ReleaseBlockchainOrderLogicalRequest {
	s.Hid = &v
	return s
}

func (s *ReleaseBlockchainOrderLogicalRequest) SetInterrupt(v bool) *ReleaseBlockchainOrderLogicalRequest {
	s.Interrupt = &v
	return s
}

func (s *ReleaseBlockchainOrderLogicalRequest) SetPk(v string) *ReleaseBlockchainOrderLogicalRequest {
	s.Pk = &v
	return s
}

func (s *ReleaseBlockchainOrderLogicalRequest) SetRegionId(v string) *ReleaseBlockchainOrderLogicalRequest {
	s.RegionId = &v
	return s
}

func (s *ReleaseBlockchainOrderLogicalRequest) SetRequestId(v string) *ReleaseBlockchainOrderLogicalRequest {
	s.RequestId = &v
	return s
}

func (s *ReleaseBlockchainOrderLogicalRequest) SetTaskExtraData(v string) *ReleaseBlockchainOrderLogicalRequest {
	s.TaskExtraData = &v
	return s
}

func (s *ReleaseBlockchainOrderLogicalRequest) SetTaskIdentifier(v string) *ReleaseBlockchainOrderLogicalRequest {
	s.TaskIdentifier = &v
	return s
}

type ReleaseBlockchainOrderLogicalResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// bid
	Bid *string `json:"bid,omitempty" xml:"bid,omitempty"`
	// country
	Country *string `json:"country,omitempty" xml:"country,omitempty"`
	// data
	Data *bool `json:"data,omitempty" xml:"data,omitempty"`
	// gmt_wakeup
	GmtWakeup *string `json:"gmt_wakeup,omitempty" xml:"gmt_wakeup,omitempty"`
	// hid
	Hid *int64 `json:"hid,omitempty" xml:"hid,omitempty"`
	// interrupt
	Interrupt *bool `json:"interrupt,omitempty" xml:"interrupt,omitempty"`
	// invoker
	Invoker *string `json:"invoker,omitempty" xml:"invoker,omitempty"`
	// level
	Level *int64 `json:"level,omitempty" xml:"level,omitempty"`
	// message
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// pk
	Pk *string `json:"pk,omitempty" xml:"pk,omitempty"`
	// prompt
	Prompt *string `json:"prompt,omitempty" xml:"prompt,omitempty"`
	// reques_id
	RequesId *string `json:"reques_id,omitempty" xml:"reques_id,omitempty"`
	// 阿里云请求返回结果
	Result *ALiYunDeleteResource `json:"result,omitempty" xml:"result,omitempty"`
	// task_extra_data
	TaskExtraData *string `json:"task_extra_data,omitempty" xml:"task_extra_data,omitempty"`
	// task_identifier
	TaskIdentifier *string `json:"task_identifier,omitempty" xml:"task_identifier,omitempty"`
	// url
	Url *string `json:"url,omitempty" xml:"url,omitempty"`
}

func (s ReleaseBlockchainOrderLogicalResponse) String() string {
	return tea.Prettify(s)
}

func (s ReleaseBlockchainOrderLogicalResponse) GoString() string {
	return s.String()
}

func (s *ReleaseBlockchainOrderLogicalResponse) SetReqMsgId(v string) *ReleaseBlockchainOrderLogicalResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ReleaseBlockchainOrderLogicalResponse) SetResultCode(v string) *ReleaseBlockchainOrderLogicalResponse {
	s.ResultCode = &v
	return s
}

func (s *ReleaseBlockchainOrderLogicalResponse) SetResultMsg(v string) *ReleaseBlockchainOrderLogicalResponse {
	s.ResultMsg = &v
	return s
}

func (s *ReleaseBlockchainOrderLogicalResponse) SetBid(v string) *ReleaseBlockchainOrderLogicalResponse {
	s.Bid = &v
	return s
}

func (s *ReleaseBlockchainOrderLogicalResponse) SetCountry(v string) *ReleaseBlockchainOrderLogicalResponse {
	s.Country = &v
	return s
}

func (s *ReleaseBlockchainOrderLogicalResponse) SetData(v bool) *ReleaseBlockchainOrderLogicalResponse {
	s.Data = &v
	return s
}

func (s *ReleaseBlockchainOrderLogicalResponse) SetGmtWakeup(v string) *ReleaseBlockchainOrderLogicalResponse {
	s.GmtWakeup = &v
	return s
}

func (s *ReleaseBlockchainOrderLogicalResponse) SetHid(v int64) *ReleaseBlockchainOrderLogicalResponse {
	s.Hid = &v
	return s
}

func (s *ReleaseBlockchainOrderLogicalResponse) SetInterrupt(v bool) *ReleaseBlockchainOrderLogicalResponse {
	s.Interrupt = &v
	return s
}

func (s *ReleaseBlockchainOrderLogicalResponse) SetInvoker(v string) *ReleaseBlockchainOrderLogicalResponse {
	s.Invoker = &v
	return s
}

func (s *ReleaseBlockchainOrderLogicalResponse) SetLevel(v int64) *ReleaseBlockchainOrderLogicalResponse {
	s.Level = &v
	return s
}

func (s *ReleaseBlockchainOrderLogicalResponse) SetMessage(v string) *ReleaseBlockchainOrderLogicalResponse {
	s.Message = &v
	return s
}

func (s *ReleaseBlockchainOrderLogicalResponse) SetPk(v string) *ReleaseBlockchainOrderLogicalResponse {
	s.Pk = &v
	return s
}

func (s *ReleaseBlockchainOrderLogicalResponse) SetPrompt(v string) *ReleaseBlockchainOrderLogicalResponse {
	s.Prompt = &v
	return s
}

func (s *ReleaseBlockchainOrderLogicalResponse) SetRequesId(v string) *ReleaseBlockchainOrderLogicalResponse {
	s.RequesId = &v
	return s
}

func (s *ReleaseBlockchainOrderLogicalResponse) SetResult(v *ALiYunDeleteResource) *ReleaseBlockchainOrderLogicalResponse {
	s.Result = v
	return s
}

func (s *ReleaseBlockchainOrderLogicalResponse) SetTaskExtraData(v string) *ReleaseBlockchainOrderLogicalResponse {
	s.TaskExtraData = &v
	return s
}

func (s *ReleaseBlockchainOrderLogicalResponse) SetTaskIdentifier(v string) *ReleaseBlockchainOrderLogicalResponse {
	s.TaskIdentifier = &v
	return s
}

func (s *ReleaseBlockchainOrderLogicalResponse) SetUrl(v string) *ReleaseBlockchainOrderLogicalResponse {
	s.Url = &v
	return s
}

type CheckBlockchainResourceRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// bid
	Bid *string `json:"bid,omitempty" xml:"bid,omitempty" require:"true"`
	// country
	Country *string `json:"country,omitempty" xml:"country,omitempty"`
	// gmt_wakeup
	GmtWakeup *string `json:"gmt_wakeup,omitempty" xml:"gmt_wakeup,omitempty"`
	// hid
	Hid *int64 `json:"hid,omitempty" xml:"hid,omitempty" require:"true"`
	// interrupt
	Interrupt *bool `json:"interrupt,omitempty" xml:"interrupt,omitempty"`
	// pk
	Pk *string `json:"pk,omitempty" xml:"pk,omitempty" require:"true"`
	// region_id
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty"`
	// request_id
	RequestId *string `json:"request_id,omitempty" xml:"request_id,omitempty"`
	// task_extra_data
	TaskExtraData *string `json:"task_extra_data,omitempty" xml:"task_extra_data,omitempty"`
	// task_identifier
	TaskIdentifier *string `json:"task_identifier,omitempty" xml:"task_identifier,omitempty"`
}

func (s CheckBlockchainResourceRequest) String() string {
	return tea.Prettify(s)
}

func (s CheckBlockchainResourceRequest) GoString() string {
	return s.String()
}

func (s *CheckBlockchainResourceRequest) SetAuthToken(v string) *CheckBlockchainResourceRequest {
	s.AuthToken = &v
	return s
}

func (s *CheckBlockchainResourceRequest) SetProductInstanceId(v string) *CheckBlockchainResourceRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CheckBlockchainResourceRequest) SetBid(v string) *CheckBlockchainResourceRequest {
	s.Bid = &v
	return s
}

func (s *CheckBlockchainResourceRequest) SetCountry(v string) *CheckBlockchainResourceRequest {
	s.Country = &v
	return s
}

func (s *CheckBlockchainResourceRequest) SetGmtWakeup(v string) *CheckBlockchainResourceRequest {
	s.GmtWakeup = &v
	return s
}

func (s *CheckBlockchainResourceRequest) SetHid(v int64) *CheckBlockchainResourceRequest {
	s.Hid = &v
	return s
}

func (s *CheckBlockchainResourceRequest) SetInterrupt(v bool) *CheckBlockchainResourceRequest {
	s.Interrupt = &v
	return s
}

func (s *CheckBlockchainResourceRequest) SetPk(v string) *CheckBlockchainResourceRequest {
	s.Pk = &v
	return s
}

func (s *CheckBlockchainResourceRequest) SetRegionId(v string) *CheckBlockchainResourceRequest {
	s.RegionId = &v
	return s
}

func (s *CheckBlockchainResourceRequest) SetRequestId(v string) *CheckBlockchainResourceRequest {
	s.RequestId = &v
	return s
}

func (s *CheckBlockchainResourceRequest) SetTaskExtraData(v string) *CheckBlockchainResourceRequest {
	s.TaskExtraData = &v
	return s
}

func (s *CheckBlockchainResourceRequest) SetTaskIdentifier(v string) *CheckBlockchainResourceRequest {
	s.TaskIdentifier = &v
	return s
}

type CheckBlockchainResourceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// bid
	Bid *string `json:"bid,omitempty" xml:"bid,omitempty"`
	// country
	Country *string `json:"country,omitempty" xml:"country,omitempty"`
	// gmt_wakeup
	GmtWakeup *string `json:"gmt_wakeup,omitempty" xml:"gmt_wakeup,omitempty"`
	// hid
	Hid *int64 `json:"hid,omitempty" xml:"hid,omitempty"`
	// interrupt
	Interrupt *bool `json:"interrupt,omitempty" xml:"interrupt,omitempty"`
	// invoker
	Invoker *string `json:"invoker,omitempty" xml:"invoker,omitempty"`
	// level
	Level *int64 `json:"level,omitempty" xml:"level,omitempty"`
	// message
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// pk
	Pk *string `json:"pk,omitempty" xml:"pk,omitempty"`
	// prompt
	Prompt *string `json:"prompt,omitempty" xml:"prompt,omitempty"`
	// request_id
	RequestId *string `json:"request_id,omitempty" xml:"request_id,omitempty"`
	// task_extra_data
	TaskExtraData *string `json:"task_extra_data,omitempty" xml:"task_extra_data,omitempty"`
	// task_identifier
	TaskIdentifier *string `json:"task_identifier,omitempty" xml:"task_identifier,omitempty"`
	// url
	Url *string `json:"url,omitempty" xml:"url,omitempty"`
	// 阿里云资源请求返回结果
	Result *ALiYunDeleteResource `json:"result,omitempty" xml:"result,omitempty"`
}

func (s CheckBlockchainResourceResponse) String() string {
	return tea.Prettify(s)
}

func (s CheckBlockchainResourceResponse) GoString() string {
	return s.String()
}

func (s *CheckBlockchainResourceResponse) SetReqMsgId(v string) *CheckBlockchainResourceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CheckBlockchainResourceResponse) SetResultCode(v string) *CheckBlockchainResourceResponse {
	s.ResultCode = &v
	return s
}

func (s *CheckBlockchainResourceResponse) SetResultMsg(v string) *CheckBlockchainResourceResponse {
	s.ResultMsg = &v
	return s
}

func (s *CheckBlockchainResourceResponse) SetBid(v string) *CheckBlockchainResourceResponse {
	s.Bid = &v
	return s
}

func (s *CheckBlockchainResourceResponse) SetCountry(v string) *CheckBlockchainResourceResponse {
	s.Country = &v
	return s
}

func (s *CheckBlockchainResourceResponse) SetGmtWakeup(v string) *CheckBlockchainResourceResponse {
	s.GmtWakeup = &v
	return s
}

func (s *CheckBlockchainResourceResponse) SetHid(v int64) *CheckBlockchainResourceResponse {
	s.Hid = &v
	return s
}

func (s *CheckBlockchainResourceResponse) SetInterrupt(v bool) *CheckBlockchainResourceResponse {
	s.Interrupt = &v
	return s
}

func (s *CheckBlockchainResourceResponse) SetInvoker(v string) *CheckBlockchainResourceResponse {
	s.Invoker = &v
	return s
}

func (s *CheckBlockchainResourceResponse) SetLevel(v int64) *CheckBlockchainResourceResponse {
	s.Level = &v
	return s
}

func (s *CheckBlockchainResourceResponse) SetMessage(v string) *CheckBlockchainResourceResponse {
	s.Message = &v
	return s
}

func (s *CheckBlockchainResourceResponse) SetPk(v string) *CheckBlockchainResourceResponse {
	s.Pk = &v
	return s
}

func (s *CheckBlockchainResourceResponse) SetPrompt(v string) *CheckBlockchainResourceResponse {
	s.Prompt = &v
	return s
}

func (s *CheckBlockchainResourceResponse) SetRequestId(v string) *CheckBlockchainResourceResponse {
	s.RequestId = &v
	return s
}

func (s *CheckBlockchainResourceResponse) SetTaskExtraData(v string) *CheckBlockchainResourceResponse {
	s.TaskExtraData = &v
	return s
}

func (s *CheckBlockchainResourceResponse) SetTaskIdentifier(v string) *CheckBlockchainResourceResponse {
	s.TaskIdentifier = &v
	return s
}

func (s *CheckBlockchainResourceResponse) SetUrl(v string) *CheckBlockchainResourceResponse {
	s.Url = &v
	return s
}

func (s *CheckBlockchainResourceResponse) SetResult(v *ALiYunDeleteResource) *CheckBlockchainResourceResponse {
	s.Result = v
	return s
}

type ConfirmBlockchainOrderRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// data
	Data *string `json:"data,omitempty" xml:"data,omitempty" require:"true"`
	// region_id
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty"`
	// user_request_id
	UserRequestId *string `json:"user_request_id,omitempty" xml:"user_request_id,omitempty"`
}

func (s ConfirmBlockchainOrderRequest) String() string {
	return tea.Prettify(s)
}

func (s ConfirmBlockchainOrderRequest) GoString() string {
	return s.String()
}

func (s *ConfirmBlockchainOrderRequest) SetAuthToken(v string) *ConfirmBlockchainOrderRequest {
	s.AuthToken = &v
	return s
}

func (s *ConfirmBlockchainOrderRequest) SetProductInstanceId(v string) *ConfirmBlockchainOrderRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ConfirmBlockchainOrderRequest) SetData(v string) *ConfirmBlockchainOrderRequest {
	s.Data = &v
	return s
}

func (s *ConfirmBlockchainOrderRequest) SetRegionId(v string) *ConfirmBlockchainOrderRequest {
	s.RegionId = &v
	return s
}

func (s *ConfirmBlockchainOrderRequest) SetUserRequestId(v string) *ConfirmBlockchainOrderRequest {
	s.UserRequestId = &v
	return s
}

type ConfirmBlockchainOrderResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 阿里云接口返回结果
	Result *ALiYunOrderResult `json:"result,omitempty" xml:"result,omitempty"`
}

func (s ConfirmBlockchainOrderResponse) String() string {
	return tea.Prettify(s)
}

func (s ConfirmBlockchainOrderResponse) GoString() string {
	return s.String()
}

func (s *ConfirmBlockchainOrderResponse) SetReqMsgId(v string) *ConfirmBlockchainOrderResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ConfirmBlockchainOrderResponse) SetResultCode(v string) *ConfirmBlockchainOrderResponse {
	s.ResultCode = &v
	return s
}

func (s *ConfirmBlockchainOrderResponse) SetResultMsg(v string) *ConfirmBlockchainOrderResponse {
	s.ResultMsg = &v
	return s
}

func (s *ConfirmBlockchainOrderResponse) SetResult(v *ALiYunOrderResult) *ConfirmBlockchainOrderResponse {
	s.Result = v
	return s
}

type ConnectBlockchainOrderRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// message
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// region_id
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty"`
}

func (s ConnectBlockchainOrderRequest) String() string {
	return tea.Prettify(s)
}

func (s ConnectBlockchainOrderRequest) GoString() string {
	return s.String()
}

func (s *ConnectBlockchainOrderRequest) SetAuthToken(v string) *ConnectBlockchainOrderRequest {
	s.AuthToken = &v
	return s
}

func (s *ConnectBlockchainOrderRequest) SetProductInstanceId(v string) *ConnectBlockchainOrderRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ConnectBlockchainOrderRequest) SetMessage(v string) *ConnectBlockchainOrderRequest {
	s.Message = &v
	return s
}

func (s *ConnectBlockchainOrderRequest) SetRegionId(v string) *ConnectBlockchainOrderRequest {
	s.RegionId = &v
	return s
}

type ConnectBlockchainOrderResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 阿里云请求参数
	Result *ALiYunHandleBabelMns `json:"result,omitempty" xml:"result,omitempty"`
}

func (s ConnectBlockchainOrderResponse) String() string {
	return tea.Prettify(s)
}

func (s ConnectBlockchainOrderResponse) GoString() string {
	return s.String()
}

func (s *ConnectBlockchainOrderResponse) SetReqMsgId(v string) *ConnectBlockchainOrderResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ConnectBlockchainOrderResponse) SetResultCode(v string) *ConnectBlockchainOrderResponse {
	s.ResultCode = &v
	return s
}

func (s *ConnectBlockchainOrderResponse) SetResultMsg(v string) *ConnectBlockchainOrderResponse {
	s.ResultMsg = &v
	return s
}

func (s *ConnectBlockchainOrderResponse) SetResult(v *ALiYunHandleBabelMns) *ConnectBlockchainOrderResponse {
	s.Result = v
	return s
}

type ExecBlockchainOrderRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// data
	Data *string `json:"data,omitempty" xml:"data,omitempty"`
	// region_id
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty"`
	// user_request_id
	UserRequestId *string `json:"user_request_id,omitempty" xml:"user_request_id,omitempty"`
}

func (s ExecBlockchainOrderRequest) String() string {
	return tea.Prettify(s)
}

func (s ExecBlockchainOrderRequest) GoString() string {
	return s.String()
}

func (s *ExecBlockchainOrderRequest) SetAuthToken(v string) *ExecBlockchainOrderRequest {
	s.AuthToken = &v
	return s
}

func (s *ExecBlockchainOrderRequest) SetProductInstanceId(v string) *ExecBlockchainOrderRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ExecBlockchainOrderRequest) SetData(v string) *ExecBlockchainOrderRequest {
	s.Data = &v
	return s
}

func (s *ExecBlockchainOrderRequest) SetRegionId(v string) *ExecBlockchainOrderRequest {
	s.RegionId = &v
	return s
}

func (s *ExecBlockchainOrderRequest) SetUserRequestId(v string) *ExecBlockchainOrderRequest {
	s.UserRequestId = &v
	return s
}

type ExecBlockchainOrderResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// result
	Result *ALiYunChainExecuteOrder `json:"result,omitempty" xml:"result,omitempty"`
}

func (s ExecBlockchainOrderResponse) String() string {
	return tea.Prettify(s)
}

func (s ExecBlockchainOrderResponse) GoString() string {
	return s.String()
}

func (s *ExecBlockchainOrderResponse) SetReqMsgId(v string) *ExecBlockchainOrderResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ExecBlockchainOrderResponse) SetResultCode(v string) *ExecBlockchainOrderResponse {
	s.ResultCode = &v
	return s
}

func (s *ExecBlockchainOrderResponse) SetResultMsg(v string) *ExecBlockchainOrderResponse {
	s.ResultMsg = &v
	return s
}

func (s *ExecBlockchainOrderResponse) SetResult(v *ALiYunChainExecuteOrder) *ExecBlockchainOrderResponse {
	s.Result = v
	return s
}

type CreateUnionUnionRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 联盟描述
	ConsortiumDescription *string `json:"consortium_description,omitempty" xml:"consortium_description,omitempty"`
	// 联盟名称
	ConsortiumName *string `json:"consortium_name,omitempty" xml:"consortium_name,omitempty" require:"true"`
	// 区域信息
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty"`
}

func (s CreateUnionUnionRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateUnionUnionRequest) GoString() string {
	return s.String()
}

func (s *CreateUnionUnionRequest) SetAuthToken(v string) *CreateUnionUnionRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateUnionUnionRequest) SetProductInstanceId(v string) *CreateUnionUnionRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateUnionUnionRequest) SetConsortiumDescription(v string) *CreateUnionUnionRequest {
	s.ConsortiumDescription = &v
	return s
}

func (s *CreateUnionUnionRequest) SetConsortiumName(v string) *CreateUnionUnionRequest {
	s.ConsortiumName = &v
	return s
}

func (s *CreateUnionUnionRequest) SetRegionId(v string) *CreateUnionUnionRequest {
	s.RegionId = &v
	return s
}

type CreateUnionUnionResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 联盟信息
	Result *ALiYunUnion `json:"result,omitempty" xml:"result,omitempty"`
}

func (s CreateUnionUnionResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateUnionUnionResponse) GoString() string {
	return s.String()
}

func (s *CreateUnionUnionResponse) SetReqMsgId(v string) *CreateUnionUnionResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateUnionUnionResponse) SetResultCode(v string) *CreateUnionUnionResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateUnionUnionResponse) SetResultMsg(v string) *CreateUnionUnionResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateUnionUnionResponse) SetResult(v *ALiYunUnion) *CreateUnionUnionResponse {
	s.Result = v
	return s
}

type DeleteUnionUnionRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 联盟ID
	ConsortiumId *string `json:"consortium_id,omitempty" xml:"consortium_id,omitempty" require:"true"`
	// 区域id
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty"`
}

func (s DeleteUnionUnionRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteUnionUnionRequest) GoString() string {
	return s.String()
}

func (s *DeleteUnionUnionRequest) SetAuthToken(v string) *DeleteUnionUnionRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteUnionUnionRequest) SetProductInstanceId(v string) *DeleteUnionUnionRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *DeleteUnionUnionRequest) SetConsortiumId(v string) *DeleteUnionUnionRequest {
	s.ConsortiumId = &v
	return s
}

func (s *DeleteUnionUnionRequest) SetRegionId(v string) *DeleteUnionUnionRequest {
	s.RegionId = &v
	return s
}

type DeleteUnionUnionResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 结果信息
	Result *string `json:"result,omitempty" xml:"result,omitempty"`
}

func (s DeleteUnionUnionResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteUnionUnionResponse) GoString() string {
	return s.String()
}

func (s *DeleteUnionUnionResponse) SetReqMsgId(v string) *DeleteUnionUnionResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteUnionUnionResponse) SetResultCode(v string) *DeleteUnionUnionResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteUnionUnionResponse) SetResultMsg(v string) *DeleteUnionUnionResponse {
	s.ResultMsg = &v
	return s
}

func (s *DeleteUnionUnionResponse) SetResult(v string) *DeleteUnionUnionResponse {
	s.Result = &v
	return s
}

type UpdateUnionUnionRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 联盟id
	ConsortiumId *string `json:"consortium_id,omitempty" xml:"consortium_id,omitempty" require:"true"`
	// 联盟名称
	ConsortiumName *string `json:"consortium_name,omitempty" xml:"consortium_name,omitempty" require:"true"`
	// 区域信息
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty"`
	// 联盟描述
	ConsortiumDescription *string `json:"consortium_description,omitempty" xml:"consortium_description,omitempty"`
}

func (s UpdateUnionUnionRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateUnionUnionRequest) GoString() string {
	return s.String()
}

func (s *UpdateUnionUnionRequest) SetAuthToken(v string) *UpdateUnionUnionRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateUnionUnionRequest) SetProductInstanceId(v string) *UpdateUnionUnionRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UpdateUnionUnionRequest) SetConsortiumId(v string) *UpdateUnionUnionRequest {
	s.ConsortiumId = &v
	return s
}

func (s *UpdateUnionUnionRequest) SetConsortiumName(v string) *UpdateUnionUnionRequest {
	s.ConsortiumName = &v
	return s
}

func (s *UpdateUnionUnionRequest) SetRegionId(v string) *UpdateUnionUnionRequest {
	s.RegionId = &v
	return s
}

func (s *UpdateUnionUnionRequest) SetConsortiumDescription(v string) *UpdateUnionUnionRequest {
	s.ConsortiumDescription = &v
	return s
}

type UpdateUnionUnionResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 结果信息
	Result *string `json:"result,omitempty" xml:"result,omitempty"`
}

func (s UpdateUnionUnionResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateUnionUnionResponse) GoString() string {
	return s.String()
}

func (s *UpdateUnionUnionResponse) SetReqMsgId(v string) *UpdateUnionUnionResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateUnionUnionResponse) SetResultCode(v string) *UpdateUnionUnionResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateUnionUnionResponse) SetResultMsg(v string) *UpdateUnionUnionResponse {
	s.ResultMsg = &v
	return s
}

func (s *UpdateUnionUnionResponse) SetResult(v string) *UpdateUnionUnionResponse {
	s.Result = &v
	return s
}

type QueryUnionUnionRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 分页编号
	PageNumber *string `json:"page_number,omitempty" xml:"page_number,omitempty"`
	// 分页大小
	PageSize *string `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
	// 区域信息
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty"`
}

func (s QueryUnionUnionRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryUnionUnionRequest) GoString() string {
	return s.String()
}

func (s *QueryUnionUnionRequest) SetAuthToken(v string) *QueryUnionUnionRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryUnionUnionRequest) SetProductInstanceId(v string) *QueryUnionUnionRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryUnionUnionRequest) SetPageNumber(v string) *QueryUnionUnionRequest {
	s.PageNumber = &v
	return s
}

func (s *QueryUnionUnionRequest) SetPageSize(v string) *QueryUnionUnionRequest {
	s.PageSize = &v
	return s
}

func (s *QueryUnionUnionRequest) SetRegionId(v string) *QueryUnionUnionRequest {
	s.RegionId = &v
	return s
}

type QueryUnionUnionResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 阿里云联盟查询结果
	Result *ALiYunUnion `json:"result,omitempty" xml:"result,omitempty"`
}

func (s QueryUnionUnionResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryUnionUnionResponse) GoString() string {
	return s.String()
}

func (s *QueryUnionUnionResponse) SetReqMsgId(v string) *QueryUnionUnionResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryUnionUnionResponse) SetResultCode(v string) *QueryUnionUnionResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryUnionUnionResponse) SetResultMsg(v string) *QueryUnionUnionResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryUnionUnionResponse) SetResult(v *ALiYunUnion) *QueryUnionUnionResponse {
	s.Result = v
	return s
}

type ApplyUnionMemberRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 联盟id
	ConsortiumId *string `json:"consortium_id,omitempty" xml:"consortium_id,omitempty"`
	// 被邀请用户的bid
	InviteBid *string `json:"invite_bid,omitempty" xml:"invite_bid,omitempty"`
	// 被邀请的用户id
	InviteUserId *int64 `json:"invite_user_id,omitempty" xml:"invite_user_id,omitempty"`
	// 区域信息
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty"`
}

func (s ApplyUnionMemberRequest) String() string {
	return tea.Prettify(s)
}

func (s ApplyUnionMemberRequest) GoString() string {
	return s.String()
}

func (s *ApplyUnionMemberRequest) SetAuthToken(v string) *ApplyUnionMemberRequest {
	s.AuthToken = &v
	return s
}

func (s *ApplyUnionMemberRequest) SetProductInstanceId(v string) *ApplyUnionMemberRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ApplyUnionMemberRequest) SetConsortiumId(v string) *ApplyUnionMemberRequest {
	s.ConsortiumId = &v
	return s
}

func (s *ApplyUnionMemberRequest) SetInviteBid(v string) *ApplyUnionMemberRequest {
	s.InviteBid = &v
	return s
}

func (s *ApplyUnionMemberRequest) SetInviteUserId(v int64) *ApplyUnionMemberRequest {
	s.InviteUserId = &v
	return s
}

func (s *ApplyUnionMemberRequest) SetRegionId(v string) *ApplyUnionMemberRequest {
	s.RegionId = &v
	return s
}

type ApplyUnionMemberResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 邀请联盟的结果
	Result *string `json:"result,omitempty" xml:"result,omitempty"`
}

func (s ApplyUnionMemberResponse) String() string {
	return tea.Prettify(s)
}

func (s ApplyUnionMemberResponse) GoString() string {
	return s.String()
}

func (s *ApplyUnionMemberResponse) SetReqMsgId(v string) *ApplyUnionMemberResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ApplyUnionMemberResponse) SetResultCode(v string) *ApplyUnionMemberResponse {
	s.ResultCode = &v
	return s
}

func (s *ApplyUnionMemberResponse) SetResultMsg(v string) *ApplyUnionMemberResponse {
	s.ResultMsg = &v
	return s
}

func (s *ApplyUnionMemberResponse) SetResult(v string) *ApplyUnionMemberResponse {
	s.Result = &v
	return s
}

type ConfirmUnionMemberRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 邀请码
	Code *string `json:"code,omitempty" xml:"code,omitempty"`
	// 区域信息
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty"`
}

func (s ConfirmUnionMemberRequest) String() string {
	return tea.Prettify(s)
}

func (s ConfirmUnionMemberRequest) GoString() string {
	return s.String()
}

func (s *ConfirmUnionMemberRequest) SetAuthToken(v string) *ConfirmUnionMemberRequest {
	s.AuthToken = &v
	return s
}

func (s *ConfirmUnionMemberRequest) SetProductInstanceId(v string) *ConfirmUnionMemberRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ConfirmUnionMemberRequest) SetCode(v string) *ConfirmUnionMemberRequest {
	s.Code = &v
	return s
}

func (s *ConfirmUnionMemberRequest) SetRegionId(v string) *ConfirmUnionMemberRequest {
	s.RegionId = &v
	return s
}

type ConfirmUnionMemberResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 阿里云联盟成员加入
	Result *string `json:"result,omitempty" xml:"result,omitempty"`
}

func (s ConfirmUnionMemberResponse) String() string {
	return tea.Prettify(s)
}

func (s ConfirmUnionMemberResponse) GoString() string {
	return s.String()
}

func (s *ConfirmUnionMemberResponse) SetReqMsgId(v string) *ConfirmUnionMemberResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ConfirmUnionMemberResponse) SetResultCode(v string) *ConfirmUnionMemberResponse {
	s.ResultCode = &v
	return s
}

func (s *ConfirmUnionMemberResponse) SetResultMsg(v string) *ConfirmUnionMemberResponse {
	s.ResultMsg = &v
	return s
}

func (s *ConfirmUnionMemberResponse) SetResult(v string) *ConfirmUnionMemberResponse {
	s.Result = &v
	return s
}

type QueryUnionChainRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 联盟id
	ConsortiumId *string `json:"consortium_id,omitempty" xml:"consortium_id,omitempty" require:"true"`
	// 分页编号
	PageNumber *int64 `json:"page_number,omitempty" xml:"page_number,omitempty"`
	// 分页大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
	// region_id
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty"`
}

func (s QueryUnionChainRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryUnionChainRequest) GoString() string {
	return s.String()
}

func (s *QueryUnionChainRequest) SetAuthToken(v string) *QueryUnionChainRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryUnionChainRequest) SetProductInstanceId(v string) *QueryUnionChainRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryUnionChainRequest) SetConsortiumId(v string) *QueryUnionChainRequest {
	s.ConsortiumId = &v
	return s
}

func (s *QueryUnionChainRequest) SetPageNumber(v int64) *QueryUnionChainRequest {
	s.PageNumber = &v
	return s
}

func (s *QueryUnionChainRequest) SetPageSize(v int64) *QueryUnionChainRequest {
	s.PageSize = &v
	return s
}

func (s *QueryUnionChainRequest) SetRegionId(v string) *QueryUnionChainRequest {
	s.RegionId = &v
	return s
}

type QueryUnionChainResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 联盟内链数据
	Result *ALiYunUnion `json:"result,omitempty" xml:"result,omitempty"`
}

func (s QueryUnionChainResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryUnionChainResponse) GoString() string {
	return s.String()
}

func (s *QueryUnionChainResponse) SetReqMsgId(v string) *QueryUnionChainResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryUnionChainResponse) SetResultCode(v string) *QueryUnionChainResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryUnionChainResponse) SetResultMsg(v string) *QueryUnionChainResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryUnionChainResponse) SetResult(v *ALiYunUnion) *QueryUnionChainResponse {
	s.Result = v
	return s
}

type QueryUnionMemberRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 联盟id
	ConsortiumId *string `json:"consortium_id,omitempty" xml:"consortium_id,omitempty" require:"true"`
	// page_number
	PageNumber *int64 `json:"page_number,omitempty" xml:"page_number,omitempty"`
	// page_size
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
	// 区域信息
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty"`
}

func (s QueryUnionMemberRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryUnionMemberRequest) GoString() string {
	return s.String()
}

func (s *QueryUnionMemberRequest) SetAuthToken(v string) *QueryUnionMemberRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryUnionMemberRequest) SetProductInstanceId(v string) *QueryUnionMemberRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryUnionMemberRequest) SetConsortiumId(v string) *QueryUnionMemberRequest {
	s.ConsortiumId = &v
	return s
}

func (s *QueryUnionMemberRequest) SetPageNumber(v int64) *QueryUnionMemberRequest {
	s.PageNumber = &v
	return s
}

func (s *QueryUnionMemberRequest) SetPageSize(v int64) *QueryUnionMemberRequest {
	s.PageSize = &v
	return s
}

func (s *QueryUnionMemberRequest) SetRegionId(v string) *QueryUnionMemberRequest {
	s.RegionId = &v
	return s
}

type QueryUnionMemberResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 结果信息
	Result *ALiYunUnion `json:"result,omitempty" xml:"result,omitempty"`
}

func (s QueryUnionMemberResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryUnionMemberResponse) GoString() string {
	return s.String()
}

func (s *QueryUnionMemberResponse) SetReqMsgId(v string) *QueryUnionMemberResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryUnionMemberResponse) SetResultCode(v string) *QueryUnionMemberResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryUnionMemberResponse) SetResultMsg(v string) *QueryUnionMemberResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryUnionMemberResponse) SetResult(v *ALiYunUnion) *QueryUnionMemberResponse {
	s.Result = v
	return s
}

type UpdateUnionMemberRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// region_id
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty"`
	// member_name
	MemberName *string `json:"member_name,omitempty" xml:"member_name,omitempty" require:"true"`
	// consortium_id
	ConsortiumId *string `json:"consortium_id,omitempty" xml:"consortium_id,omitempty" require:"true"`
	// member_id
	MemberId *string `json:"member_id,omitempty" xml:"member_id,omitempty" require:"true"`
}

func (s UpdateUnionMemberRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateUnionMemberRequest) GoString() string {
	return s.String()
}

func (s *UpdateUnionMemberRequest) SetAuthToken(v string) *UpdateUnionMemberRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateUnionMemberRequest) SetProductInstanceId(v string) *UpdateUnionMemberRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UpdateUnionMemberRequest) SetRegionId(v string) *UpdateUnionMemberRequest {
	s.RegionId = &v
	return s
}

func (s *UpdateUnionMemberRequest) SetMemberName(v string) *UpdateUnionMemberRequest {
	s.MemberName = &v
	return s
}

func (s *UpdateUnionMemberRequest) SetConsortiumId(v string) *UpdateUnionMemberRequest {
	s.ConsortiumId = &v
	return s
}

func (s *UpdateUnionMemberRequest) SetMemberId(v string) *UpdateUnionMemberRequest {
	s.MemberId = &v
	return s
}

type UpdateUnionMemberResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// result
	Result *string `json:"result,omitempty" xml:"result,omitempty"`
}

func (s UpdateUnionMemberResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateUnionMemberResponse) GoString() string {
	return s.String()
}

func (s *UpdateUnionMemberResponse) SetReqMsgId(v string) *UpdateUnionMemberResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateUnionMemberResponse) SetResultCode(v string) *UpdateUnionMemberResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateUnionMemberResponse) SetResultMsg(v string) *UpdateUnionMemberResponse {
	s.ResultMsg = &v
	return s
}

func (s *UpdateUnionMemberResponse) SetResult(v string) *UpdateUnionMemberResponse {
	s.Result = &v
	return s
}

type UpdateChainNameAntRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// ant_chain_id
	AntChainId *string `json:"ant_chain_id,omitempty" xml:"ant_chain_id,omitempty" require:"true"`
	// ant_chain_name
	AntChainName *string `json:"ant_chain_name,omitempty" xml:"ant_chain_name,omitempty" require:"true"`
	// region_id
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty"`
}

func (s UpdateChainNameAntRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateChainNameAntRequest) GoString() string {
	return s.String()
}

func (s *UpdateChainNameAntRequest) SetAuthToken(v string) *UpdateChainNameAntRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateChainNameAntRequest) SetProductInstanceId(v string) *UpdateChainNameAntRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UpdateChainNameAntRequest) SetAntChainId(v string) *UpdateChainNameAntRequest {
	s.AntChainId = &v
	return s
}

func (s *UpdateChainNameAntRequest) SetAntChainName(v string) *UpdateChainNameAntRequest {
	s.AntChainName = &v
	return s
}

func (s *UpdateChainNameAntRequest) SetRegionId(v string) *UpdateChainNameAntRequest {
	s.RegionId = &v
	return s
}

type UpdateChainNameAntResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// result
	Result *string `json:"result,omitempty" xml:"result,omitempty"`
}

func (s UpdateChainNameAntResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateChainNameAntResponse) GoString() string {
	return s.String()
}

func (s *UpdateChainNameAntResponse) SetReqMsgId(v string) *UpdateChainNameAntResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateChainNameAntResponse) SetResultCode(v string) *UpdateChainNameAntResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateChainNameAntResponse) SetResultMsg(v string) *UpdateChainNameAntResponse {
	s.ResultMsg = &v
	return s
}

func (s *UpdateChainNameAntResponse) SetResult(v string) *UpdateChainNameAntResponse {
	s.Result = &v
	return s
}

type CreateChainCertAntRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// ant_chain_id
	AntChainId *string `json:"ant_chain_id,omitempty" xml:"ant_chain_id,omitempty" require:"true"`
	// region_id
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty"`
	// upload_req
	UploadReq *string `json:"upload_req,omitempty" xml:"upload_req,omitempty" require:"true"`
}

func (s CreateChainCertAntRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateChainCertAntRequest) GoString() string {
	return s.String()
}

func (s *CreateChainCertAntRequest) SetAuthToken(v string) *CreateChainCertAntRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateChainCertAntRequest) SetProductInstanceId(v string) *CreateChainCertAntRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateChainCertAntRequest) SetAntChainId(v string) *CreateChainCertAntRequest {
	s.AntChainId = &v
	return s
}

func (s *CreateChainCertAntRequest) SetRegionId(v string) *CreateChainCertAntRequest {
	s.RegionId = &v
	return s
}

func (s *CreateChainCertAntRequest) SetUploadReq(v string) *CreateChainCertAntRequest {
	s.UploadReq = &v
	return s
}

type CreateChainCertAntResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// result
	Result *string `json:"result,omitempty" xml:"result,omitempty"`
}

func (s CreateChainCertAntResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateChainCertAntResponse) GoString() string {
	return s.String()
}

func (s *CreateChainCertAntResponse) SetReqMsgId(v string) *CreateChainCertAntResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateChainCertAntResponse) SetResultCode(v string) *CreateChainCertAntResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateChainCertAntResponse) SetResultMsg(v string) *CreateChainCertAntResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateChainCertAntResponse) SetResult(v string) *CreateChainCertAntResponse {
	s.Result = &v
	return s
}

type ApplyChainCertAntRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// ant_chain_id
	AntChainId *string `json:"ant_chain_id,omitempty" xml:"ant_chain_id,omitempty" require:"true"`
	// common_name
	CommonName *string `json:"common_name,omitempty" xml:"common_name,omitempty" require:"true"`
	// consortium_id
	ConsortiumId *string `json:"consortium_id,omitempty" xml:"consortium_id,omitempty" require:"true"`
	// country_name
	CountryName *string `json:"country_name,omitempty" xml:"country_name,omitempty" require:"true"`
	// locality_name
	LocalityName *string `json:"locality_name,omitempty" xml:"locality_name,omitempty" require:"true"`
	// organization_name
	OrganizationName *string `json:"organization_name,omitempty" xml:"organization_name,omitempty" require:"true"`
	// organization_unit_name
	OrganizationUnitName *string `json:"organization_unit_name,omitempty" xml:"organization_unit_name,omitempty" require:"true"`
	// password
	Password *string `json:"password,omitempty" xml:"password,omitempty" require:"true"`
	// region_id
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty"`
	// state_or_province_name
	StateOrProvinceName *string `json:"state_or_province_name,omitempty" xml:"state_or_province_name,omitempty" require:"true"`
}

func (s ApplyChainCertAntRequest) String() string {
	return tea.Prettify(s)
}

func (s ApplyChainCertAntRequest) GoString() string {
	return s.String()
}

func (s *ApplyChainCertAntRequest) SetAuthToken(v string) *ApplyChainCertAntRequest {
	s.AuthToken = &v
	return s
}

func (s *ApplyChainCertAntRequest) SetProductInstanceId(v string) *ApplyChainCertAntRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ApplyChainCertAntRequest) SetAntChainId(v string) *ApplyChainCertAntRequest {
	s.AntChainId = &v
	return s
}

func (s *ApplyChainCertAntRequest) SetCommonName(v string) *ApplyChainCertAntRequest {
	s.CommonName = &v
	return s
}

func (s *ApplyChainCertAntRequest) SetConsortiumId(v string) *ApplyChainCertAntRequest {
	s.ConsortiumId = &v
	return s
}

func (s *ApplyChainCertAntRequest) SetCountryName(v string) *ApplyChainCertAntRequest {
	s.CountryName = &v
	return s
}

func (s *ApplyChainCertAntRequest) SetLocalityName(v string) *ApplyChainCertAntRequest {
	s.LocalityName = &v
	return s
}

func (s *ApplyChainCertAntRequest) SetOrganizationName(v string) *ApplyChainCertAntRequest {
	s.OrganizationName = &v
	return s
}

func (s *ApplyChainCertAntRequest) SetOrganizationUnitName(v string) *ApplyChainCertAntRequest {
	s.OrganizationUnitName = &v
	return s
}

func (s *ApplyChainCertAntRequest) SetPassword(v string) *ApplyChainCertAntRequest {
	s.Password = &v
	return s
}

func (s *ApplyChainCertAntRequest) SetRegionId(v string) *ApplyChainCertAntRequest {
	s.RegionId = &v
	return s
}

func (s *ApplyChainCertAntRequest) SetStateOrProvinceName(v string) *ApplyChainCertAntRequest {
	s.StateOrProvinceName = &v
	return s
}

type ApplyChainCertAntResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// result
	Result *ALiYunChainDownload `json:"result,omitempty" xml:"result,omitempty"`
}

func (s ApplyChainCertAntResponse) String() string {
	return tea.Prettify(s)
}

func (s ApplyChainCertAntResponse) GoString() string {
	return s.String()
}

func (s *ApplyChainCertAntResponse) SetReqMsgId(v string) *ApplyChainCertAntResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ApplyChainCertAntResponse) SetResultCode(v string) *ApplyChainCertAntResponse {
	s.ResultCode = &v
	return s
}

func (s *ApplyChainCertAntResponse) SetResultMsg(v string) *ApplyChainCertAntResponse {
	s.ResultMsg = &v
	return s
}

func (s *ApplyChainCertAntResponse) SetResult(v *ALiYunChainDownload) *ApplyChainCertAntResponse {
	s.Result = v
	return s
}

type CreateChainPublicCertRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// bizid
	Bizid *string `json:"bizid,omitempty" xml:"bizid,omitempty"`
	// consortium_id
	ConsortiumId *string `json:"consortium_id,omitempty" xml:"consortium_id,omitempty"`
	// region_id
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty"`
	// upload_req
	UploadReq *string `json:"upload_req,omitempty" xml:"upload_req,omitempty"`
}

func (s CreateChainPublicCertRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateChainPublicCertRequest) GoString() string {
	return s.String()
}

func (s *CreateChainPublicCertRequest) SetAuthToken(v string) *CreateChainPublicCertRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateChainPublicCertRequest) SetProductInstanceId(v string) *CreateChainPublicCertRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateChainPublicCertRequest) SetBizid(v string) *CreateChainPublicCertRequest {
	s.Bizid = &v
	return s
}

func (s *CreateChainPublicCertRequest) SetConsortiumId(v string) *CreateChainPublicCertRequest {
	s.ConsortiumId = &v
	return s
}

func (s *CreateChainPublicCertRequest) SetRegionId(v string) *CreateChainPublicCertRequest {
	s.RegionId = &v
	return s
}

func (s *CreateChainPublicCertRequest) SetUploadReq(v string) *CreateChainPublicCertRequest {
	s.UploadReq = &v
	return s
}

type CreateChainPublicCertResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// result
	Result *string `json:"result,omitempty" xml:"result,omitempty"`
}

func (s CreateChainPublicCertResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateChainPublicCertResponse) GoString() string {
	return s.String()
}

func (s *CreateChainPublicCertResponse) SetReqMsgId(v string) *CreateChainPublicCertResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateChainPublicCertResponse) SetResultCode(v string) *CreateChainPublicCertResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateChainPublicCertResponse) SetResultMsg(v string) *CreateChainPublicCertResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateChainPublicCertResponse) SetResult(v string) *CreateChainPublicCertResponse {
	s.Result = &v
	return s
}

type ApplyChainPublicCertRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// bizid
	Bizid *string `json:"bizid,omitempty" xml:"bizid,omitempty"`
	// common_name
	CommonName *string `json:"common_name,omitempty" xml:"common_name,omitempty"`
	// country_name
	CountryName *string `json:"country_name,omitempty" xml:"country_name,omitempty"`
	// locality_name
	LocalityName *string `json:"locality_name,omitempty" xml:"locality_name,omitempty"`
	// organization_name
	OrganizationName *string `json:"organization_name,omitempty" xml:"organization_name,omitempty"`
	// organization_unit_name
	OrganizationUnitName *string `json:"organization_unit_name,omitempty" xml:"organization_unit_name,omitempty"`
	// password
	Password *string `json:"password,omitempty" xml:"password,omitempty"`
	// region_id
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty"`
	// state_or_province_name
	StateOrProvinceName *string `json:"state_or_province_name,omitempty" xml:"state_or_province_name,omitempty"`
}

func (s ApplyChainPublicCertRequest) String() string {
	return tea.Prettify(s)
}

func (s ApplyChainPublicCertRequest) GoString() string {
	return s.String()
}

func (s *ApplyChainPublicCertRequest) SetAuthToken(v string) *ApplyChainPublicCertRequest {
	s.AuthToken = &v
	return s
}

func (s *ApplyChainPublicCertRequest) SetProductInstanceId(v string) *ApplyChainPublicCertRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ApplyChainPublicCertRequest) SetBizid(v string) *ApplyChainPublicCertRequest {
	s.Bizid = &v
	return s
}

func (s *ApplyChainPublicCertRequest) SetCommonName(v string) *ApplyChainPublicCertRequest {
	s.CommonName = &v
	return s
}

func (s *ApplyChainPublicCertRequest) SetCountryName(v string) *ApplyChainPublicCertRequest {
	s.CountryName = &v
	return s
}

func (s *ApplyChainPublicCertRequest) SetLocalityName(v string) *ApplyChainPublicCertRequest {
	s.LocalityName = &v
	return s
}

func (s *ApplyChainPublicCertRequest) SetOrganizationName(v string) *ApplyChainPublicCertRequest {
	s.OrganizationName = &v
	return s
}

func (s *ApplyChainPublicCertRequest) SetOrganizationUnitName(v string) *ApplyChainPublicCertRequest {
	s.OrganizationUnitName = &v
	return s
}

func (s *ApplyChainPublicCertRequest) SetPassword(v string) *ApplyChainPublicCertRequest {
	s.Password = &v
	return s
}

func (s *ApplyChainPublicCertRequest) SetRegionId(v string) *ApplyChainPublicCertRequest {
	s.RegionId = &v
	return s
}

func (s *ApplyChainPublicCertRequest) SetStateOrProvinceName(v string) *ApplyChainPublicCertRequest {
	s.StateOrProvinceName = &v
	return s
}

type ApplyChainPublicCertResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// result
	Result *ALiYunChainDownload `json:"result,omitempty" xml:"result,omitempty"`
}

func (s ApplyChainPublicCertResponse) String() string {
	return tea.Prettify(s)
}

func (s ApplyChainPublicCertResponse) GoString() string {
	return s.String()
}

func (s *ApplyChainPublicCertResponse) SetReqMsgId(v string) *ApplyChainPublicCertResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ApplyChainPublicCertResponse) SetResultCode(v string) *ApplyChainPublicCertResponse {
	s.ResultCode = &v
	return s
}

func (s *ApplyChainPublicCertResponse) SetResultMsg(v string) *ApplyChainPublicCertResponse {
	s.ResultMsg = &v
	return s
}

func (s *ApplyChainPublicCertResponse) SetResult(v *ALiYunChainDownload) *ApplyChainPublicCertResponse {
	s.Result = v
	return s
}

type ReinitChainPublicCertRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// bizid
	Bizid *string `json:"bizid,omitempty" xml:"bizid,omitempty"`
	// region_id
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty"`
}

func (s ReinitChainPublicCertRequest) String() string {
	return tea.Prettify(s)
}

func (s ReinitChainPublicCertRequest) GoString() string {
	return s.String()
}

func (s *ReinitChainPublicCertRequest) SetAuthToken(v string) *ReinitChainPublicCertRequest {
	s.AuthToken = &v
	return s
}

func (s *ReinitChainPublicCertRequest) SetProductInstanceId(v string) *ReinitChainPublicCertRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ReinitChainPublicCertRequest) SetBizid(v string) *ReinitChainPublicCertRequest {
	s.Bizid = &v
	return s
}

func (s *ReinitChainPublicCertRequest) SetRegionId(v string) *ReinitChainPublicCertRequest {
	s.RegionId = &v
	return s
}

type ReinitChainPublicCertResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// result
	Result *string `json:"result,omitempty" xml:"result,omitempty"`
}

func (s ReinitChainPublicCertResponse) String() string {
	return tea.Prettify(s)
}

func (s ReinitChainPublicCertResponse) GoString() string {
	return s.String()
}

func (s *ReinitChainPublicCertResponse) SetReqMsgId(v string) *ReinitChainPublicCertResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ReinitChainPublicCertResponse) SetResultCode(v string) *ReinitChainPublicCertResponse {
	s.ResultCode = &v
	return s
}

func (s *ReinitChainPublicCertResponse) SetResultMsg(v string) *ReinitChainPublicCertResponse {
	s.ResultMsg = &v
	return s
}

func (s *ReinitChainPublicCertResponse) SetResult(v string) *ReinitChainPublicCertResponse {
	s.Result = &v
	return s
}

type CreateChainPublicAccountRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// account
	Account *string `json:"account,omitempty" xml:"account,omitempty"`
	// account_pub_key
	AccountPubKey *string `json:"account_pub_key,omitempty" xml:"account_pub_key,omitempty"`
	// account_recover_pub_key
	AccountRecoverPubKey *string `json:"account_recover_pub_key,omitempty" xml:"account_recover_pub_key,omitempty"`
	// bizid
	Bizid *string `json:"bizid,omitempty" xml:"bizid,omitempty"`
	// region_id
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty"`
}

func (s CreateChainPublicAccountRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateChainPublicAccountRequest) GoString() string {
	return s.String()
}

func (s *CreateChainPublicAccountRequest) SetAuthToken(v string) *CreateChainPublicAccountRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateChainPublicAccountRequest) SetProductInstanceId(v string) *CreateChainPublicAccountRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateChainPublicAccountRequest) SetAccount(v string) *CreateChainPublicAccountRequest {
	s.Account = &v
	return s
}

func (s *CreateChainPublicAccountRequest) SetAccountPubKey(v string) *CreateChainPublicAccountRequest {
	s.AccountPubKey = &v
	return s
}

func (s *CreateChainPublicAccountRequest) SetAccountRecoverPubKey(v string) *CreateChainPublicAccountRequest {
	s.AccountRecoverPubKey = &v
	return s
}

func (s *CreateChainPublicAccountRequest) SetBizid(v string) *CreateChainPublicAccountRequest {
	s.Bizid = &v
	return s
}

func (s *CreateChainPublicAccountRequest) SetRegionId(v string) *CreateChainPublicAccountRequest {
	s.RegionId = &v
	return s
}

type CreateChainPublicAccountResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// result
	Result *string `json:"result,omitempty" xml:"result,omitempty"`
}

func (s CreateChainPublicAccountResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateChainPublicAccountResponse) GoString() string {
	return s.String()
}

func (s *CreateChainPublicAccountResponse) SetReqMsgId(v string) *CreateChainPublicAccountResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateChainPublicAccountResponse) SetResultCode(v string) *CreateChainPublicAccountResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateChainPublicAccountResponse) SetResultMsg(v string) *CreateChainPublicAccountResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateChainPublicAccountResponse) SetResult(v string) *CreateChainPublicAccountResponse {
	s.Result = &v
	return s
}

type ApplyChainPublicAccountRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// account
	Account *string `json:"account,omitempty" xml:"account,omitempty"`
	// bizid
	Bizid *string `json:"bizid,omitempty" xml:"bizid,omitempty"`
	// password
	Password *string `json:"password,omitempty" xml:"password,omitempty"`
	// recover_password
	RecoverPassword *string `json:"recover_password,omitempty" xml:"recover_password,omitempty"`
	// region_id
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty"`
}

func (s ApplyChainPublicAccountRequest) String() string {
	return tea.Prettify(s)
}

func (s ApplyChainPublicAccountRequest) GoString() string {
	return s.String()
}

func (s *ApplyChainPublicAccountRequest) SetAuthToken(v string) *ApplyChainPublicAccountRequest {
	s.AuthToken = &v
	return s
}

func (s *ApplyChainPublicAccountRequest) SetProductInstanceId(v string) *ApplyChainPublicAccountRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ApplyChainPublicAccountRequest) SetAccount(v string) *ApplyChainPublicAccountRequest {
	s.Account = &v
	return s
}

func (s *ApplyChainPublicAccountRequest) SetBizid(v string) *ApplyChainPublicAccountRequest {
	s.Bizid = &v
	return s
}

func (s *ApplyChainPublicAccountRequest) SetPassword(v string) *ApplyChainPublicAccountRequest {
	s.Password = &v
	return s
}

func (s *ApplyChainPublicAccountRequest) SetRecoverPassword(v string) *ApplyChainPublicAccountRequest {
	s.RecoverPassword = &v
	return s
}

func (s *ApplyChainPublicAccountRequest) SetRegionId(v string) *ApplyChainPublicAccountRequest {
	s.RegionId = &v
	return s
}

type ApplyChainPublicAccountResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// result
	Result *ALiYunChainAccount `json:"result,omitempty" xml:"result,omitempty"`
}

func (s ApplyChainPublicAccountResponse) String() string {
	return tea.Prettify(s)
}

func (s ApplyChainPublicAccountResponse) GoString() string {
	return s.String()
}

func (s *ApplyChainPublicAccountResponse) SetReqMsgId(v string) *ApplyChainPublicAccountResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ApplyChainPublicAccountResponse) SetResultCode(v string) *ApplyChainPublicAccountResponse {
	s.ResultCode = &v
	return s
}

func (s *ApplyChainPublicAccountResponse) SetResultMsg(v string) *ApplyChainPublicAccountResponse {
	s.ResultMsg = &v
	return s
}

func (s *ApplyChainPublicAccountResponse) SetResult(v *ALiYunChainAccount) *ApplyChainPublicAccountResponse {
	s.Result = v
	return s
}

type QueryChainPublicRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// region_id
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty"`
}

func (s QueryChainPublicRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryChainPublicRequest) GoString() string {
	return s.String()
}

func (s *QueryChainPublicRequest) SetAuthToken(v string) *QueryChainPublicRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryChainPublicRequest) SetProductInstanceId(v string) *QueryChainPublicRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryChainPublicRequest) SetRegionId(v string) *QueryChainPublicRequest {
	s.RegionId = &v
	return s
}

type QueryChainPublicResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// result
	Result *ALiYunChain `json:"result,omitempty" xml:"result,omitempty"`
}

func (s QueryChainPublicResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryChainPublicResponse) GoString() string {
	return s.String()
}

func (s *QueryChainPublicResponse) SetReqMsgId(v string) *QueryChainPublicResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryChainPublicResponse) SetResultCode(v string) *QueryChainPublicResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryChainPublicResponse) SetResultMsg(v string) *QueryChainPublicResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryChainPublicResponse) SetResult(v *ALiYunChain) *QueryChainPublicResponse {
	s.Result = v
	return s
}

type DownloadChainPublicCertRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// bizid
	Bizid *string `json:"bizid,omitempty" xml:"bizid,omitempty"`
	// region_id
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty"`
}

func (s DownloadChainPublicCertRequest) String() string {
	return tea.Prettify(s)
}

func (s DownloadChainPublicCertRequest) GoString() string {
	return s.String()
}

func (s *DownloadChainPublicCertRequest) SetAuthToken(v string) *DownloadChainPublicCertRequest {
	s.AuthToken = &v
	return s
}

func (s *DownloadChainPublicCertRequest) SetProductInstanceId(v string) *DownloadChainPublicCertRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *DownloadChainPublicCertRequest) SetBizid(v string) *DownloadChainPublicCertRequest {
	s.Bizid = &v
	return s
}

func (s *DownloadChainPublicCertRequest) SetRegionId(v string) *DownloadChainPublicCertRequest {
	s.RegionId = &v
	return s
}

type DownloadChainPublicCertResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// result
	Result *ALiYunDownloadPath `json:"result,omitempty" xml:"result,omitempty"`
}

func (s DownloadChainPublicCertResponse) String() string {
	return tea.Prettify(s)
}

func (s DownloadChainPublicCertResponse) GoString() string {
	return s.String()
}

func (s *DownloadChainPublicCertResponse) SetReqMsgId(v string) *DownloadChainPublicCertResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DownloadChainPublicCertResponse) SetResultCode(v string) *DownloadChainPublicCertResponse {
	s.ResultCode = &v
	return s
}

func (s *DownloadChainPublicCertResponse) SetResultMsg(v string) *DownloadChainPublicCertResponse {
	s.ResultMsg = &v
	return s
}

func (s *DownloadChainPublicCertResponse) SetResult(v *ALiYunDownloadPath) *DownloadChainPublicCertResponse {
	s.Result = v
	return s
}

type CreateChainAccountAntRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// account
	Account *string `json:"account,omitempty" xml:"account,omitempty"`
	// account_pub_key
	AccountPubKey *string `json:"account_pub_key,omitempty" xml:"account_pub_key,omitempty"`
	// account_recover_pub_key
	AccountRecoverPubKey *string `json:"account_recover_pub_key,omitempty" xml:"account_recover_pub_key,omitempty"`
	// ant_chain_id
	AntChainId *string `json:"ant_chain_id,omitempty" xml:"ant_chain_id,omitempty"`
}

func (s CreateChainAccountAntRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateChainAccountAntRequest) GoString() string {
	return s.String()
}

func (s *CreateChainAccountAntRequest) SetAuthToken(v string) *CreateChainAccountAntRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateChainAccountAntRequest) SetProductInstanceId(v string) *CreateChainAccountAntRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateChainAccountAntRequest) SetAccount(v string) *CreateChainAccountAntRequest {
	s.Account = &v
	return s
}

func (s *CreateChainAccountAntRequest) SetAccountPubKey(v string) *CreateChainAccountAntRequest {
	s.AccountPubKey = &v
	return s
}

func (s *CreateChainAccountAntRequest) SetAccountRecoverPubKey(v string) *CreateChainAccountAntRequest {
	s.AccountRecoverPubKey = &v
	return s
}

func (s *CreateChainAccountAntRequest) SetAntChainId(v string) *CreateChainAccountAntRequest {
	s.AntChainId = &v
	return s
}

type CreateChainAccountAntResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// result
	Result *ALiYunChainAccount `json:"result,omitempty" xml:"result,omitempty"`
}

func (s CreateChainAccountAntResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateChainAccountAntResponse) GoString() string {
	return s.String()
}

func (s *CreateChainAccountAntResponse) SetReqMsgId(v string) *CreateChainAccountAntResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateChainAccountAntResponse) SetResultCode(v string) *CreateChainAccountAntResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateChainAccountAntResponse) SetResultMsg(v string) *CreateChainAccountAntResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateChainAccountAntResponse) SetResult(v *ALiYunChainAccount) *CreateChainAccountAntResponse {
	s.Result = v
	return s
}

type ApplyChainAccountAntRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// account
	Account *string `json:"account,omitempty" xml:"account,omitempty"`
	// ant_chain_id
	AntChainId *string `json:"ant_chain_id,omitempty" xml:"ant_chain_id,omitempty"`
	// password
	Password *string `json:"password,omitempty" xml:"password,omitempty"`
	// recover_password
	RecoverPassword *string `json:"recover_password,omitempty" xml:"recover_password,omitempty"`
}

func (s ApplyChainAccountAntRequest) String() string {
	return tea.Prettify(s)
}

func (s ApplyChainAccountAntRequest) GoString() string {
	return s.String()
}

func (s *ApplyChainAccountAntRequest) SetAuthToken(v string) *ApplyChainAccountAntRequest {
	s.AuthToken = &v
	return s
}

func (s *ApplyChainAccountAntRequest) SetProductInstanceId(v string) *ApplyChainAccountAntRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ApplyChainAccountAntRequest) SetAccount(v string) *ApplyChainAccountAntRequest {
	s.Account = &v
	return s
}

func (s *ApplyChainAccountAntRequest) SetAntChainId(v string) *ApplyChainAccountAntRequest {
	s.AntChainId = &v
	return s
}

func (s *ApplyChainAccountAntRequest) SetPassword(v string) *ApplyChainAccountAntRequest {
	s.Password = &v
	return s
}

func (s *ApplyChainAccountAntRequest) SetRecoverPassword(v string) *ApplyChainAccountAntRequest {
	s.RecoverPassword = &v
	return s
}

type ApplyChainAccountAntResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// result
	Result *ALiYunChainAccount `json:"result,omitempty" xml:"result,omitempty"`
}

func (s ApplyChainAccountAntResponse) String() string {
	return tea.Prettify(s)
}

func (s ApplyChainAccountAntResponse) GoString() string {
	return s.String()
}

func (s *ApplyChainAccountAntResponse) SetReqMsgId(v string) *ApplyChainAccountAntResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ApplyChainAccountAntResponse) SetResultCode(v string) *ApplyChainAccountAntResponse {
	s.ResultCode = &v
	return s
}

func (s *ApplyChainAccountAntResponse) SetResultMsg(v string) *ApplyChainAccountAntResponse {
	s.ResultMsg = &v
	return s
}

func (s *ApplyChainAccountAntResponse) SetResult(v *ALiYunChainAccount) *ApplyChainAccountAntResponse {
	s.Result = v
	return s
}

type QueryChainAccountAntRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// ant_chain_id
	AntChainId *string `json:"ant_chain_id,omitempty" xml:"ant_chain_id,omitempty" require:"true"`
	// page_number
	PageNumber *int64 `json:"page_number,omitempty" xml:"page_number,omitempty"`
	// page_size
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
}

func (s QueryChainAccountAntRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryChainAccountAntRequest) GoString() string {
	return s.String()
}

func (s *QueryChainAccountAntRequest) SetAuthToken(v string) *QueryChainAccountAntRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryChainAccountAntRequest) SetProductInstanceId(v string) *QueryChainAccountAntRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryChainAccountAntRequest) SetAntChainId(v string) *QueryChainAccountAntRequest {
	s.AntChainId = &v
	return s
}

func (s *QueryChainAccountAntRequest) SetPageNumber(v int64) *QueryChainAccountAntRequest {
	s.PageNumber = &v
	return s
}

func (s *QueryChainAccountAntRequest) SetPageSize(v int64) *QueryChainAccountAntRequest {
	s.PageSize = &v
	return s
}

type QueryChainAccountAntResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// result
	Result *ALiYunAccountList `json:"result,omitempty" xml:"result,omitempty"`
}

func (s QueryChainAccountAntResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryChainAccountAntResponse) GoString() string {
	return s.String()
}

func (s *QueryChainAccountAntResponse) SetReqMsgId(v string) *QueryChainAccountAntResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryChainAccountAntResponse) SetResultCode(v string) *QueryChainAccountAntResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryChainAccountAntResponse) SetResultMsg(v string) *QueryChainAccountAntResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryChainAccountAntResponse) SetResult(v *ALiYunAccountList) *QueryChainAccountAntResponse {
	s.Result = v
	return s
}

type DownloadChainCertAntRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// ant_chain_id
	AntChainId *string `json:"ant_chain_id,omitempty" xml:"ant_chain_id,omitempty" require:"true"`
	// region_id
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty"`
}

func (s DownloadChainCertAntRequest) String() string {
	return tea.Prettify(s)
}

func (s DownloadChainCertAntRequest) GoString() string {
	return s.String()
}

func (s *DownloadChainCertAntRequest) SetAuthToken(v string) *DownloadChainCertAntRequest {
	s.AuthToken = &v
	return s
}

func (s *DownloadChainCertAntRequest) SetProductInstanceId(v string) *DownloadChainCertAntRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *DownloadChainCertAntRequest) SetAntChainId(v string) *DownloadChainCertAntRequest {
	s.AntChainId = &v
	return s
}

func (s *DownloadChainCertAntRequest) SetRegionId(v string) *DownloadChainCertAntRequest {
	s.RegionId = &v
	return s
}

type DownloadChainCertAntResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// result
	Result *ALiYunDownloadPath `json:"result,omitempty" xml:"result,omitempty"`
}

func (s DownloadChainCertAntResponse) String() string {
	return tea.Prettify(s)
}

func (s DownloadChainCertAntResponse) GoString() string {
	return s.String()
}

func (s *DownloadChainCertAntResponse) SetReqMsgId(v string) *DownloadChainCertAntResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DownloadChainCertAntResponse) SetResultCode(v string) *DownloadChainCertAntResponse {
	s.ResultCode = &v
	return s
}

func (s *DownloadChainCertAntResponse) SetResultMsg(v string) *DownloadChainCertAntResponse {
	s.ResultMsg = &v
	return s
}

func (s *DownloadChainCertAntResponse) SetResult(v *ALiYunDownloadPath) *DownloadChainCertAntResponse {
	s.Result = v
	return s
}

type QueryChainNodeAntRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// ant_chain_id
	AntChainId *string `json:"ant_chain_id,omitempty" xml:"ant_chain_id,omitempty" require:"true"`
	// region_id
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty"`
}

func (s QueryChainNodeAntRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryChainNodeAntRequest) GoString() string {
	return s.String()
}

func (s *QueryChainNodeAntRequest) SetAuthToken(v string) *QueryChainNodeAntRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryChainNodeAntRequest) SetProductInstanceId(v string) *QueryChainNodeAntRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryChainNodeAntRequest) SetAntChainId(v string) *QueryChainNodeAntRequest {
	s.AntChainId = &v
	return s
}

func (s *QueryChainNodeAntRequest) SetRegionId(v string) *QueryChainNodeAntRequest {
	s.RegionId = &v
	return s
}

type QueryChainNodeAntResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// result
	Result []*string `json:"result,omitempty" xml:"result,omitempty" type:"Repeated"`
}

func (s QueryChainNodeAntResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryChainNodeAntResponse) GoString() string {
	return s.String()
}

func (s *QueryChainNodeAntResponse) SetReqMsgId(v string) *QueryChainNodeAntResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryChainNodeAntResponse) SetResultCode(v string) *QueryChainNodeAntResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryChainNodeAntResponse) SetResultMsg(v string) *QueryChainNodeAntResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryChainNodeAntResponse) SetResult(v []*string) *QueryChainNodeAntResponse {
	s.Result = v
	return s
}

type FreezeChainAccountAntRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// account
	Account *string `json:"account,omitempty" xml:"account,omitempty" require:"true"`
	// ant_chain_id
	AntChainId *string `json:"ant_chain_id,omitempty" xml:"ant_chain_id,omitempty" require:"true"`
	// region_id
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty"`
}

func (s FreezeChainAccountAntRequest) String() string {
	return tea.Prettify(s)
}

func (s FreezeChainAccountAntRequest) GoString() string {
	return s.String()
}

func (s *FreezeChainAccountAntRequest) SetAuthToken(v string) *FreezeChainAccountAntRequest {
	s.AuthToken = &v
	return s
}

func (s *FreezeChainAccountAntRequest) SetProductInstanceId(v string) *FreezeChainAccountAntRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *FreezeChainAccountAntRequest) SetAccount(v string) *FreezeChainAccountAntRequest {
	s.Account = &v
	return s
}

func (s *FreezeChainAccountAntRequest) SetAntChainId(v string) *FreezeChainAccountAntRequest {
	s.AntChainId = &v
	return s
}

func (s *FreezeChainAccountAntRequest) SetRegionId(v string) *FreezeChainAccountAntRequest {
	s.RegionId = &v
	return s
}

type FreezeChainAccountAntResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// result
	Result *string `json:"result,omitempty" xml:"result,omitempty"`
}

func (s FreezeChainAccountAntResponse) String() string {
	return tea.Prettify(s)
}

func (s FreezeChainAccountAntResponse) GoString() string {
	return s.String()
}

func (s *FreezeChainAccountAntResponse) SetReqMsgId(v string) *FreezeChainAccountAntResponse {
	s.ReqMsgId = &v
	return s
}

func (s *FreezeChainAccountAntResponse) SetResultCode(v string) *FreezeChainAccountAntResponse {
	s.ResultCode = &v
	return s
}

func (s *FreezeChainAccountAntResponse) SetResultMsg(v string) *FreezeChainAccountAntResponse {
	s.ResultMsg = &v
	return s
}

func (s *FreezeChainAccountAntResponse) SetResult(v string) *FreezeChainAccountAntResponse {
	s.Result = &v
	return s
}

type UnfreezeChainAccountAntRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// account
	Account *string `json:"account,omitempty" xml:"account,omitempty"`
	// ant_chain_id
	AntChainId *string `json:"ant_chain_id,omitempty" xml:"ant_chain_id,omitempty" require:"true"`
	// region_id
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty" require:"true"`
}

func (s UnfreezeChainAccountAntRequest) String() string {
	return tea.Prettify(s)
}

func (s UnfreezeChainAccountAntRequest) GoString() string {
	return s.String()
}

func (s *UnfreezeChainAccountAntRequest) SetAuthToken(v string) *UnfreezeChainAccountAntRequest {
	s.AuthToken = &v
	return s
}

func (s *UnfreezeChainAccountAntRequest) SetProductInstanceId(v string) *UnfreezeChainAccountAntRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UnfreezeChainAccountAntRequest) SetAccount(v string) *UnfreezeChainAccountAntRequest {
	s.Account = &v
	return s
}

func (s *UnfreezeChainAccountAntRequest) SetAntChainId(v string) *UnfreezeChainAccountAntRequest {
	s.AntChainId = &v
	return s
}

func (s *UnfreezeChainAccountAntRequest) SetRegionId(v string) *UnfreezeChainAccountAntRequest {
	s.RegionId = &v
	return s
}

type UnfreezeChainAccountAntResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// result
	Result *string `json:"result,omitempty" xml:"result,omitempty"`
}

func (s UnfreezeChainAccountAntResponse) String() string {
	return tea.Prettify(s)
}

func (s UnfreezeChainAccountAntResponse) GoString() string {
	return s.String()
}

func (s *UnfreezeChainAccountAntResponse) SetReqMsgId(v string) *UnfreezeChainAccountAntResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UnfreezeChainAccountAntResponse) SetResultCode(v string) *UnfreezeChainAccountAntResponse {
	s.ResultCode = &v
	return s
}

func (s *UnfreezeChainAccountAntResponse) SetResultMsg(v string) *UnfreezeChainAccountAntResponse {
	s.ResultMsg = &v
	return s
}

func (s *UnfreezeChainAccountAntResponse) SetResult(v string) *UnfreezeChainAccountAntResponse {
	s.Result = &v
	return s
}

type ReinitChainCertAntRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// ant_chain_id
	AntChainId *string `json:"ant_chain_id,omitempty" xml:"ant_chain_id,omitempty" require:"true"`
	// region_id
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty"`
	// username
	Username *string `json:"username,omitempty" xml:"username,omitempty"`
}

func (s ReinitChainCertAntRequest) String() string {
	return tea.Prettify(s)
}

func (s ReinitChainCertAntRequest) GoString() string {
	return s.String()
}

func (s *ReinitChainCertAntRequest) SetAuthToken(v string) *ReinitChainCertAntRequest {
	s.AuthToken = &v
	return s
}

func (s *ReinitChainCertAntRequest) SetProductInstanceId(v string) *ReinitChainCertAntRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ReinitChainCertAntRequest) SetAntChainId(v string) *ReinitChainCertAntRequest {
	s.AntChainId = &v
	return s
}

func (s *ReinitChainCertAntRequest) SetRegionId(v string) *ReinitChainCertAntRequest {
	s.RegionId = &v
	return s
}

func (s *ReinitChainCertAntRequest) SetUsername(v string) *ReinitChainCertAntRequest {
	s.Username = &v
	return s
}

type ReinitChainCertAntResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// result
	Result *string `json:"result,omitempty" xml:"result,omitempty"`
}

func (s ReinitChainCertAntResponse) String() string {
	return tea.Prettify(s)
}

func (s ReinitChainCertAntResponse) GoString() string {
	return s.String()
}

func (s *ReinitChainCertAntResponse) SetReqMsgId(v string) *ReinitChainCertAntResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ReinitChainCertAntResponse) SetResultCode(v string) *ReinitChainCertAntResponse {
	s.ResultCode = &v
	return s
}

func (s *ReinitChainCertAntResponse) SetResultMsg(v string) *ReinitChainCertAntResponse {
	s.ResultMsg = &v
	return s
}

func (s *ReinitChainCertAntResponse) SetResult(v string) *ReinitChainCertAntResponse {
	s.Result = &v
	return s
}

type QueryChainCertAntRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// ant_chain_id
	AntChainId *string `json:"ant_chain_id,omitempty" xml:"ant_chain_id,omitempty" require:"true"`
	// page_number
	PageNumber *int64 `json:"page_number,omitempty" xml:"page_number,omitempty" require:"true"`
	// page_size
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
	// region_id
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty"`
	// status
	Status *string `json:"status,omitempty" xml:"status,omitempty" require:"true"`
}

func (s QueryChainCertAntRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryChainCertAntRequest) GoString() string {
	return s.String()
}

func (s *QueryChainCertAntRequest) SetAuthToken(v string) *QueryChainCertAntRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryChainCertAntRequest) SetProductInstanceId(v string) *QueryChainCertAntRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryChainCertAntRequest) SetAntChainId(v string) *QueryChainCertAntRequest {
	s.AntChainId = &v
	return s
}

func (s *QueryChainCertAntRequest) SetPageNumber(v int64) *QueryChainCertAntRequest {
	s.PageNumber = &v
	return s
}

func (s *QueryChainCertAntRequest) SetPageSize(v int64) *QueryChainCertAntRequest {
	s.PageSize = &v
	return s
}

func (s *QueryChainCertAntRequest) SetRegionId(v string) *QueryChainCertAntRequest {
	s.RegionId = &v
	return s
}

func (s *QueryChainCertAntRequest) SetStatus(v string) *QueryChainCertAntRequest {
	s.Status = &v
	return s
}

type QueryChainCertAntResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// result
	Result *ALiYunCertificateApplications `json:"result,omitempty" xml:"result,omitempty"`
}

func (s QueryChainCertAntResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryChainCertAntResponse) GoString() string {
	return s.String()
}

func (s *QueryChainCertAntResponse) SetReqMsgId(v string) *QueryChainCertAntResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryChainCertAntResponse) SetResultCode(v string) *QueryChainCertAntResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryChainCertAntResponse) SetResultMsg(v string) *QueryChainCertAntResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryChainCertAntResponse) SetResult(v *ALiYunCertificateApplications) *QueryChainCertAntResponse {
	s.Result = v
	return s
}

type QueryChainBrowserInfoRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// ant_chain_id
	AntChainId *string `json:"ant_chain_id,omitempty" xml:"ant_chain_id,omitempty" require:"true"`
	// region_id
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty"`
}

func (s QueryChainBrowserInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryChainBrowserInfoRequest) GoString() string {
	return s.String()
}

func (s *QueryChainBrowserInfoRequest) SetAuthToken(v string) *QueryChainBrowserInfoRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryChainBrowserInfoRequest) SetProductInstanceId(v string) *QueryChainBrowserInfoRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryChainBrowserInfoRequest) SetAntChainId(v string) *QueryChainBrowserInfoRequest {
	s.AntChainId = &v
	return s
}

func (s *QueryChainBrowserInfoRequest) SetRegionId(v string) *QueryChainBrowserInfoRequest {
	s.RegionId = &v
	return s
}

type QueryChainBrowserInfoResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// result
	Result *ALiYunChainInfo `json:"result,omitempty" xml:"result,omitempty"`
}

func (s QueryChainBrowserInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryChainBrowserInfoResponse) GoString() string {
	return s.String()
}

func (s *QueryChainBrowserInfoResponse) SetReqMsgId(v string) *QueryChainBrowserInfoResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryChainBrowserInfoResponse) SetResultCode(v string) *QueryChainBrowserInfoResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryChainBrowserInfoResponse) SetResultMsg(v string) *QueryChainBrowserInfoResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryChainBrowserInfoResponse) SetResult(v *ALiYunChainInfo) *QueryChainBrowserInfoResponse {
	s.Result = v
	return s
}

type QueryChainBrowserBlocksRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// ant_chain_id
	AntChainId *string `json:"ant_chain_id,omitempty" xml:"ant_chain_id,omitempty" require:"true"`
	// region_id
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty"`
}

func (s QueryChainBrowserBlocksRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryChainBrowserBlocksRequest) GoString() string {
	return s.String()
}

func (s *QueryChainBrowserBlocksRequest) SetAuthToken(v string) *QueryChainBrowserBlocksRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryChainBrowserBlocksRequest) SetProductInstanceId(v string) *QueryChainBrowserBlocksRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryChainBrowserBlocksRequest) SetAntChainId(v string) *QueryChainBrowserBlocksRequest {
	s.AntChainId = &v
	return s
}

func (s *QueryChainBrowserBlocksRequest) SetRegionId(v string) *QueryChainBrowserBlocksRequest {
	s.RegionId = &v
	return s
}

type QueryChainBrowserBlocksResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// result
	Result []*ALiYunChainBlockInfo `json:"result,omitempty" xml:"result,omitempty" type:"Repeated"`
}

func (s QueryChainBrowserBlocksResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryChainBrowserBlocksResponse) GoString() string {
	return s.String()
}

func (s *QueryChainBrowserBlocksResponse) SetReqMsgId(v string) *QueryChainBrowserBlocksResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryChainBrowserBlocksResponse) SetResultCode(v string) *QueryChainBrowserBlocksResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryChainBrowserBlocksResponse) SetResultMsg(v string) *QueryChainBrowserBlocksResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryChainBrowserBlocksResponse) SetResult(v []*ALiYunChainBlockInfo) *QueryChainBrowserBlocksResponse {
	s.Result = v
	return s
}

type QueryChainBrowserTransactionsRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// bizid
	Bizid *string `json:"bizid,omitempty" xml:"bizid,omitempty"`
	// start
	Start *int64 `json:"start,omitempty" xml:"start,omitempty"`
	// end
	End *int64 `json:"end,omitempty" xml:"end,omitempty"`
	// region_id
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty"`
}

func (s QueryChainBrowserTransactionsRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryChainBrowserTransactionsRequest) GoString() string {
	return s.String()
}

func (s *QueryChainBrowserTransactionsRequest) SetAuthToken(v string) *QueryChainBrowserTransactionsRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryChainBrowserTransactionsRequest) SetProductInstanceId(v string) *QueryChainBrowserTransactionsRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryChainBrowserTransactionsRequest) SetBizid(v string) *QueryChainBrowserTransactionsRequest {
	s.Bizid = &v
	return s
}

func (s *QueryChainBrowserTransactionsRequest) SetStart(v int64) *QueryChainBrowserTransactionsRequest {
	s.Start = &v
	return s
}

func (s *QueryChainBrowserTransactionsRequest) SetEnd(v int64) *QueryChainBrowserTransactionsRequest {
	s.End = &v
	return s
}

func (s *QueryChainBrowserTransactionsRequest) SetRegionId(v string) *QueryChainBrowserTransactionsRequest {
	s.RegionId = &v
	return s
}

type QueryChainBrowserTransactionsResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// result
	Result []*ALiYunChainStatics `json:"result,omitempty" xml:"result,omitempty" type:"Repeated"`
}

func (s QueryChainBrowserTransactionsResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryChainBrowserTransactionsResponse) GoString() string {
	return s.String()
}

func (s *QueryChainBrowserTransactionsResponse) SetReqMsgId(v string) *QueryChainBrowserTransactionsResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryChainBrowserTransactionsResponse) SetResultCode(v string) *QueryChainBrowserTransactionsResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryChainBrowserTransactionsResponse) SetResultMsg(v string) *QueryChainBrowserTransactionsResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryChainBrowserTransactionsResponse) SetResult(v []*ALiYunChainStatics) *QueryChainBrowserTransactionsResponse {
	s.Result = v
	return s
}

type BatchqueryChainBrowserTransactionRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// ant_chain_id
	AntChainId *string `json:"ant_chain_id,omitempty" xml:"ant_chain_id,omitempty" require:"true"`
	// region_id
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty"`
}

func (s BatchqueryChainBrowserTransactionRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchqueryChainBrowserTransactionRequest) GoString() string {
	return s.String()
}

func (s *BatchqueryChainBrowserTransactionRequest) SetAuthToken(v string) *BatchqueryChainBrowserTransactionRequest {
	s.AuthToken = &v
	return s
}

func (s *BatchqueryChainBrowserTransactionRequest) SetProductInstanceId(v string) *BatchqueryChainBrowserTransactionRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *BatchqueryChainBrowserTransactionRequest) SetAntChainId(v string) *BatchqueryChainBrowserTransactionRequest {
	s.AntChainId = &v
	return s
}

func (s *BatchqueryChainBrowserTransactionRequest) SetRegionId(v string) *BatchqueryChainBrowserTransactionRequest {
	s.RegionId = &v
	return s
}

type BatchqueryChainBrowserTransactionResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// result
	Result []*ALiYunLatestTransaction `json:"result,omitempty" xml:"result,omitempty" type:"Repeated"`
}

func (s BatchqueryChainBrowserTransactionResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchqueryChainBrowserTransactionResponse) GoString() string {
	return s.String()
}

func (s *BatchqueryChainBrowserTransactionResponse) SetReqMsgId(v string) *BatchqueryChainBrowserTransactionResponse {
	s.ReqMsgId = &v
	return s
}

func (s *BatchqueryChainBrowserTransactionResponse) SetResultCode(v string) *BatchqueryChainBrowserTransactionResponse {
	s.ResultCode = &v
	return s
}

func (s *BatchqueryChainBrowserTransactionResponse) SetResultMsg(v string) *BatchqueryChainBrowserTransactionResponse {
	s.ResultMsg = &v
	return s
}

func (s *BatchqueryChainBrowserTransactionResponse) SetResult(v []*ALiYunLatestTransaction) *BatchqueryChainBrowserTransactionResponse {
	s.Result = v
	return s
}

type QueryChainBrowserReceiptRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// ant_chain_id
	AntChainId *string `json:"ant_chain_id,omitempty" xml:"ant_chain_id,omitempty" require:"true"`
	// hash
	Hash *string `json:"hash,omitempty" xml:"hash,omitempty" require:"true"`
	// region_id
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty"`
}

func (s QueryChainBrowserReceiptRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryChainBrowserReceiptRequest) GoString() string {
	return s.String()
}

func (s *QueryChainBrowserReceiptRequest) SetAuthToken(v string) *QueryChainBrowserReceiptRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryChainBrowserReceiptRequest) SetProductInstanceId(v string) *QueryChainBrowserReceiptRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryChainBrowserReceiptRequest) SetAntChainId(v string) *QueryChainBrowserReceiptRequest {
	s.AntChainId = &v
	return s
}

func (s *QueryChainBrowserReceiptRequest) SetHash(v string) *QueryChainBrowserReceiptRequest {
	s.Hash = &v
	return s
}

func (s *QueryChainBrowserReceiptRequest) SetRegionId(v string) *QueryChainBrowserReceiptRequest {
	s.RegionId = &v
	return s
}

type QueryChainBrowserReceiptResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// result
	Result *ALiYunTransactionReceipt `json:"result,omitempty" xml:"result,omitempty"`
}

func (s QueryChainBrowserReceiptResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryChainBrowserReceiptResponse) GoString() string {
	return s.String()
}

func (s *QueryChainBrowserReceiptResponse) SetReqMsgId(v string) *QueryChainBrowserReceiptResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryChainBrowserReceiptResponse) SetResultCode(v string) *QueryChainBrowserReceiptResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryChainBrowserReceiptResponse) SetResultMsg(v string) *QueryChainBrowserReceiptResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryChainBrowserReceiptResponse) SetResult(v *ALiYunTransactionReceipt) *QueryChainBrowserReceiptResponse {
	s.Result = v
	return s
}

type QueryChainBrowserTransactionRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// ant_chain_id
	AntChainId *string `json:"ant_chain_id,omitempty" xml:"ant_chain_id,omitempty" require:"true"`
	// hash
	Hash *string `json:"hash,omitempty" xml:"hash,omitempty" require:"true"`
	// region_id
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty"`
}

func (s QueryChainBrowserTransactionRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryChainBrowserTransactionRequest) GoString() string {
	return s.String()
}

func (s *QueryChainBrowserTransactionRequest) SetAuthToken(v string) *QueryChainBrowserTransactionRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryChainBrowserTransactionRequest) SetProductInstanceId(v string) *QueryChainBrowserTransactionRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryChainBrowserTransactionRequest) SetAntChainId(v string) *QueryChainBrowserTransactionRequest {
	s.AntChainId = &v
	return s
}

func (s *QueryChainBrowserTransactionRequest) SetHash(v string) *QueryChainBrowserTransactionRequest {
	s.Hash = &v
	return s
}

func (s *QueryChainBrowserTransactionRequest) SetRegionId(v string) *QueryChainBrowserTransactionRequest {
	s.RegionId = &v
	return s
}

type QueryChainBrowserTransactionResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// result
	Result *ALiYunTransactionResult `json:"result,omitempty" xml:"result,omitempty"`
}

func (s QueryChainBrowserTransactionResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryChainBrowserTransactionResponse) GoString() string {
	return s.String()
}

func (s *QueryChainBrowserTransactionResponse) SetReqMsgId(v string) *QueryChainBrowserTransactionResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryChainBrowserTransactionResponse) SetResultCode(v string) *QueryChainBrowserTransactionResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryChainBrowserTransactionResponse) SetResultMsg(v string) *QueryChainBrowserTransactionResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryChainBrowserTransactionResponse) SetResult(v *ALiYunTransactionResult) *QueryChainBrowserTransactionResponse {
	s.Result = v
	return s
}

type QueryChainBrowserBlockRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// ant_chain_id
	AntChainId *string `json:"ant_chain_id,omitempty" xml:"ant_chain_id,omitempty"`
	// height
	Height *int64 `json:"height,omitempty" xml:"height,omitempty"`
	// region_id
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty"`
}

func (s QueryChainBrowserBlockRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryChainBrowserBlockRequest) GoString() string {
	return s.String()
}

func (s *QueryChainBrowserBlockRequest) SetAuthToken(v string) *QueryChainBrowserBlockRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryChainBrowserBlockRequest) SetProductInstanceId(v string) *QueryChainBrowserBlockRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryChainBrowserBlockRequest) SetAntChainId(v string) *QueryChainBrowserBlockRequest {
	s.AntChainId = &v
	return s
}

func (s *QueryChainBrowserBlockRequest) SetHeight(v int64) *QueryChainBrowserBlockRequest {
	s.Height = &v
	return s
}

func (s *QueryChainBrowserBlockRequest) SetRegionId(v string) *QueryChainBrowserBlockRequest {
	s.RegionId = &v
	return s
}

type QueryChainBrowserBlockResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// result
	Result *ALiYunChainBlock `json:"result,omitempty" xml:"result,omitempty"`
}

func (s QueryChainBrowserBlockResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryChainBrowserBlockResponse) GoString() string {
	return s.String()
}

func (s *QueryChainBrowserBlockResponse) SetReqMsgId(v string) *QueryChainBrowserBlockResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryChainBrowserBlockResponse) SetResultCode(v string) *QueryChainBrowserBlockResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryChainBrowserBlockResponse) SetResultMsg(v string) *QueryChainBrowserBlockResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryChainBrowserBlockResponse) SetResult(v *ALiYunChainBlock) *QueryChainBrowserBlockResponse {
	s.Result = v
	return s
}

type QueryChainResouceRegionRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// region_id
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty"`
	// locale
	Locale *string `json:"locale,omitempty" xml:"locale,omitempty"`
}

func (s QueryChainResouceRegionRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryChainResouceRegionRequest) GoString() string {
	return s.String()
}

func (s *QueryChainResouceRegionRequest) SetAuthToken(v string) *QueryChainResouceRegionRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryChainResouceRegionRequest) SetProductInstanceId(v string) *QueryChainResouceRegionRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryChainResouceRegionRequest) SetRegionId(v string) *QueryChainResouceRegionRequest {
	s.RegionId = &v
	return s
}

func (s *QueryChainResouceRegionRequest) SetLocale(v string) *QueryChainResouceRegionRequest {
	s.Locale = &v
	return s
}

type QueryChainResouceRegionResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// result
	Result []*ALiYunChainRegion `json:"result,omitempty" xml:"result,omitempty" type:"Repeated"`
}

func (s QueryChainResouceRegionResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryChainResouceRegionResponse) GoString() string {
	return s.String()
}

func (s *QueryChainResouceRegionResponse) SetReqMsgId(v string) *QueryChainResouceRegionResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryChainResouceRegionResponse) SetResultCode(v string) *QueryChainResouceRegionResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryChainResouceRegionResponse) SetResultMsg(v string) *QueryChainResouceRegionResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryChainResouceRegionResponse) SetResult(v []*ALiYunChainRegion) *QueryChainResouceRegionResponse {
	s.Result = v
	return s
}

type QueryChainResourceTypeRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// region_id
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty"`
}

func (s QueryChainResourceTypeRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryChainResourceTypeRequest) GoString() string {
	return s.String()
}

func (s *QueryChainResourceTypeRequest) SetAuthToken(v string) *QueryChainResourceTypeRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryChainResourceTypeRequest) SetProductInstanceId(v string) *QueryChainResourceTypeRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryChainResourceTypeRequest) SetRegionId(v string) *QueryChainResourceTypeRequest {
	s.RegionId = &v
	return s
}

type QueryChainResourceTypeResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// result
	Result []*ALiYunChainResouceType `json:"result,omitempty" xml:"result,omitempty" type:"Repeated"`
}

func (s QueryChainResourceTypeResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryChainResourceTypeResponse) GoString() string {
	return s.String()
}

func (s *QueryChainResourceTypeResponse) SetReqMsgId(v string) *QueryChainResourceTypeResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryChainResourceTypeResponse) SetResultCode(v string) *QueryChainResourceTypeResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryChainResourceTypeResponse) SetResultMsg(v string) *QueryChainResourceTypeResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryChainResourceTypeResponse) SetResult(v []*ALiYunChainResouceType) *QueryChainResourceTypeResponse {
	s.Result = v
	return s
}

type QueryChainResouceSaleRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// region_id
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty"`
}

func (s QueryChainResouceSaleRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryChainResouceSaleRequest) GoString() string {
	return s.String()
}

func (s *QueryChainResouceSaleRequest) SetAuthToken(v string) *QueryChainResouceSaleRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryChainResouceSaleRequest) SetProductInstanceId(v string) *QueryChainResouceSaleRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryChainResouceSaleRequest) SetRegionId(v string) *QueryChainResouceSaleRequest {
	s.RegionId = &v
	return s
}

type QueryChainResouceSaleResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// reslut
	Reslut *ALiYunChainResouceForSale `json:"reslut,omitempty" xml:"reslut,omitempty"`
}

func (s QueryChainResouceSaleResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryChainResouceSaleResponse) GoString() string {
	return s.String()
}

func (s *QueryChainResouceSaleResponse) SetReqMsgId(v string) *QueryChainResouceSaleResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryChainResouceSaleResponse) SetResultCode(v string) *QueryChainResouceSaleResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryChainResouceSaleResponse) SetResultMsg(v string) *QueryChainResouceSaleResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryChainResouceSaleResponse) SetReslut(v *ALiYunChainResouceForSale) *QueryChainResouceSaleResponse {
	s.Reslut = v
	return s
}

type QueryChainResourceConfigRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// purpose
	Purpose *string `json:"purpose,omitempty" xml:"purpose,omitempty"`
	// region_id
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty"`
}

func (s QueryChainResourceConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryChainResourceConfigRequest) GoString() string {
	return s.String()
}

func (s *QueryChainResourceConfigRequest) SetAuthToken(v string) *QueryChainResourceConfigRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryChainResourceConfigRequest) SetProductInstanceId(v string) *QueryChainResourceConfigRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryChainResourceConfigRequest) SetPurpose(v string) *QueryChainResourceConfigRequest {
	s.Purpose = &v
	return s
}

func (s *QueryChainResourceConfigRequest) SetRegionId(v string) *QueryChainResourceConfigRequest {
	s.RegionId = &v
	return s
}

type QueryChainResourceConfigResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// result
	Result []*ALiYunChainConfigOption `json:"result,omitempty" xml:"result,omitempty" type:"Repeated"`
}

func (s QueryChainResourceConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryChainResourceConfigResponse) GoString() string {
	return s.String()
}

func (s *QueryChainResourceConfigResponse) SetReqMsgId(v string) *QueryChainResourceConfigResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryChainResourceConfigResponse) SetResultCode(v string) *QueryChainResourceConfigResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryChainResourceConfigResponse) SetResultMsg(v string) *QueryChainResourceConfigResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryChainResourceConfigResponse) SetResult(v []*ALiYunChainConfigOption) *QueryChainResourceConfigResponse {
	s.Result = v
	return s
}

type QueryChainBrowserStatisticsRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// ant_chain_id
	AntChainId *string `json:"ant_chain_id,omitempty" xml:"ant_chain_id,omitempty" require:"true"`
	// start
	Start *int64 `json:"start,omitempty" xml:"start,omitempty"`
	// end
	End *int64 `json:"end,omitempty" xml:"end,omitempty"`
	// region_id
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty"`
}

func (s QueryChainBrowserStatisticsRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryChainBrowserStatisticsRequest) GoString() string {
	return s.String()
}

func (s *QueryChainBrowserStatisticsRequest) SetAuthToken(v string) *QueryChainBrowserStatisticsRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryChainBrowserStatisticsRequest) SetProductInstanceId(v string) *QueryChainBrowserStatisticsRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryChainBrowserStatisticsRequest) SetAntChainId(v string) *QueryChainBrowserStatisticsRequest {
	s.AntChainId = &v
	return s
}

func (s *QueryChainBrowserStatisticsRequest) SetStart(v int64) *QueryChainBrowserStatisticsRequest {
	s.Start = &v
	return s
}

func (s *QueryChainBrowserStatisticsRequest) SetEnd(v int64) *QueryChainBrowserStatisticsRequest {
	s.End = &v
	return s
}

func (s *QueryChainBrowserStatisticsRequest) SetRegionId(v string) *QueryChainBrowserStatisticsRequest {
	s.RegionId = &v
	return s
}

type QueryChainBrowserStatisticsResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// result
	Result []*ALiYunChainStatics `json:"result,omitempty" xml:"result,omitempty" type:"Repeated"`
}

func (s QueryChainBrowserStatisticsResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryChainBrowserStatisticsResponse) GoString() string {
	return s.String()
}

func (s *QueryChainBrowserStatisticsResponse) SetReqMsgId(v string) *QueryChainBrowserStatisticsResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryChainBrowserStatisticsResponse) SetResultCode(v string) *QueryChainBrowserStatisticsResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryChainBrowserStatisticsResponse) SetResultMsg(v string) *QueryChainBrowserStatisticsResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryChainBrowserStatisticsResponse) SetResult(v []*ALiYunChainStatics) *QueryChainBrowserStatisticsResponse {
	s.Result = v
	return s
}

type ExecChainPublicContractRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// bizid
	Bizid *string `json:"bizid,omitempty" xml:"bizid,omitempty"`
	// transaction
	Transaction *string `json:"transaction,omitempty" xml:"transaction,omitempty"`
	// region_id
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty"`
}

func (s ExecChainPublicContractRequest) String() string {
	return tea.Prettify(s)
}

func (s ExecChainPublicContractRequest) GoString() string {
	return s.String()
}

func (s *ExecChainPublicContractRequest) SetAuthToken(v string) *ExecChainPublicContractRequest {
	s.AuthToken = &v
	return s
}

func (s *ExecChainPublicContractRequest) SetProductInstanceId(v string) *ExecChainPublicContractRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ExecChainPublicContractRequest) SetBizid(v string) *ExecChainPublicContractRequest {
	s.Bizid = &v
	return s
}

func (s *ExecChainPublicContractRequest) SetTransaction(v string) *ExecChainPublicContractRequest {
	s.Transaction = &v
	return s
}

func (s *ExecChainPublicContractRequest) SetRegionId(v string) *ExecChainPublicContractRequest {
	s.RegionId = &v
	return s
}

type ExecChainPublicContractResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// result
	Result *string `json:"result,omitempty" xml:"result,omitempty"`
}

func (s ExecChainPublicContractResponse) String() string {
	return tea.Prettify(s)
}

func (s ExecChainPublicContractResponse) GoString() string {
	return s.String()
}

func (s *ExecChainPublicContractResponse) SetReqMsgId(v string) *ExecChainPublicContractResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ExecChainPublicContractResponse) SetResultCode(v string) *ExecChainPublicContractResponse {
	s.ResultCode = &v
	return s
}

func (s *ExecChainPublicContractResponse) SetResultMsg(v string) *ExecChainPublicContractResponse {
	s.ResultMsg = &v
	return s
}

func (s *ExecChainPublicContractResponse) SetResult(v string) *ExecChainPublicContractResponse {
	s.Result = &v
	return s
}

type QueryChainPublicIdeRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// bizid
	Bizid *string `json:"bizid,omitempty" xml:"bizid,omitempty"`
	// region_id
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty"`
}

func (s QueryChainPublicIdeRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryChainPublicIdeRequest) GoString() string {
	return s.String()
}

func (s *QueryChainPublicIdeRequest) SetAuthToken(v string) *QueryChainPublicIdeRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryChainPublicIdeRequest) SetProductInstanceId(v string) *QueryChainPublicIdeRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryChainPublicIdeRequest) SetBizid(v string) *QueryChainPublicIdeRequest {
	s.Bizid = &v
	return s
}

func (s *QueryChainPublicIdeRequest) SetRegionId(v string) *QueryChainPublicIdeRequest {
	s.RegionId = &v
	return s
}

type QueryChainPublicIdeResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// result
	Result []*ALiYunChainCloudIdeConfig `json:"result,omitempty" xml:"result,omitempty" type:"Repeated"`
}

func (s QueryChainPublicIdeResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryChainPublicIdeResponse) GoString() string {
	return s.String()
}

func (s *QueryChainPublicIdeResponse) SetReqMsgId(v string) *QueryChainPublicIdeResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryChainPublicIdeResponse) SetResultCode(v string) *QueryChainPublicIdeResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryChainPublicIdeResponse) SetResultMsg(v string) *QueryChainPublicIdeResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryChainPublicIdeResponse) SetResult(v []*ALiYunChainCloudIdeConfig) *QueryChainPublicIdeResponse {
	s.Result = v
	return s
}

type QueryChainPublicContentRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// region_id
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty"`
}

func (s QueryChainPublicContentRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryChainPublicContentRequest) GoString() string {
	return s.String()
}

func (s *QueryChainPublicContentRequest) SetAuthToken(v string) *QueryChainPublicContentRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryChainPublicContentRequest) SetProductInstanceId(v string) *QueryChainPublicContentRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryChainPublicContentRequest) SetRegionId(v string) *QueryChainPublicContentRequest {
	s.RegionId = &v
	return s
}

type QueryChainPublicContentResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// result
	Result *string `json:"result,omitempty" xml:"result,omitempty"`
}

func (s QueryChainPublicContentResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryChainPublicContentResponse) GoString() string {
	return s.String()
}

func (s *QueryChainPublicContentResponse) SetReqMsgId(v string) *QueryChainPublicContentResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryChainPublicContentResponse) SetResultCode(v string) *QueryChainPublicContentResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryChainPublicContentResponse) SetResultMsg(v string) *QueryChainPublicContentResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryChainPublicContentResponse) SetResult(v string) *QueryChainPublicContentResponse {
	s.Result = &v
	return s
}

type CreateChainContractProjectRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// region_id
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty"`
	// consortium_id
	ConsortiumId *string `json:"consortium_id,omitempty" xml:"consortium_id,omitempty"`
	// project_name
	ProjectName *string `json:"project_name,omitempty" xml:"project_name,omitempty"`
	// project_version
	ProjectVersion *string `json:"project_version,omitempty" xml:"project_version,omitempty"`
	// project_description
	ProjectDescription *string `json:"project_description,omitempty" xml:"project_description,omitempty"`
}

func (s CreateChainContractProjectRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateChainContractProjectRequest) GoString() string {
	return s.String()
}

func (s *CreateChainContractProjectRequest) SetAuthToken(v string) *CreateChainContractProjectRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateChainContractProjectRequest) SetProductInstanceId(v string) *CreateChainContractProjectRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateChainContractProjectRequest) SetRegionId(v string) *CreateChainContractProjectRequest {
	s.RegionId = &v
	return s
}

func (s *CreateChainContractProjectRequest) SetConsortiumId(v string) *CreateChainContractProjectRequest {
	s.ConsortiumId = &v
	return s
}

func (s *CreateChainContractProjectRequest) SetProjectName(v string) *CreateChainContractProjectRequest {
	s.ProjectName = &v
	return s
}

func (s *CreateChainContractProjectRequest) SetProjectVersion(v string) *CreateChainContractProjectRequest {
	s.ProjectVersion = &v
	return s
}

func (s *CreateChainContractProjectRequest) SetProjectDescription(v string) *CreateChainContractProjectRequest {
	s.ProjectDescription = &v
	return s
}

type CreateChainContractProjectResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// result
	Result *ALiYunContractProject `json:"result,omitempty" xml:"result,omitempty"`
}

func (s CreateChainContractProjectResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateChainContractProjectResponse) GoString() string {
	return s.String()
}

func (s *CreateChainContractProjectResponse) SetReqMsgId(v string) *CreateChainContractProjectResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateChainContractProjectResponse) SetResultCode(v string) *CreateChainContractProjectResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateChainContractProjectResponse) SetResultMsg(v string) *CreateChainContractProjectResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateChainContractProjectResponse) SetResult(v *ALiYunContractProject) *CreateChainContractProjectResponse {
	s.Result = v
	return s
}

type DeleteChainContractProjectRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// project_id
	ProjectId *string `json:"project_id,omitempty" xml:"project_id,omitempty"`
	// region_id
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty"`
	// consortium_id
	ConsortiumId *string `json:"consortium_id,omitempty" xml:"consortium_id,omitempty"`
}

func (s DeleteChainContractProjectRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteChainContractProjectRequest) GoString() string {
	return s.String()
}

func (s *DeleteChainContractProjectRequest) SetAuthToken(v string) *DeleteChainContractProjectRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteChainContractProjectRequest) SetProductInstanceId(v string) *DeleteChainContractProjectRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *DeleteChainContractProjectRequest) SetProjectId(v string) *DeleteChainContractProjectRequest {
	s.ProjectId = &v
	return s
}

func (s *DeleteChainContractProjectRequest) SetRegionId(v string) *DeleteChainContractProjectRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteChainContractProjectRequest) SetConsortiumId(v string) *DeleteChainContractProjectRequest {
	s.ConsortiumId = &v
	return s
}

type DeleteChainContractProjectResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// result
	Result *string `json:"result,omitempty" xml:"result,omitempty"`
}

func (s DeleteChainContractProjectResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteChainContractProjectResponse) GoString() string {
	return s.String()
}

func (s *DeleteChainContractProjectResponse) SetReqMsgId(v string) *DeleteChainContractProjectResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteChainContractProjectResponse) SetResultCode(v string) *DeleteChainContractProjectResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteChainContractProjectResponse) SetResultMsg(v string) *DeleteChainContractProjectResponse {
	s.ResultMsg = &v
	return s
}

func (s *DeleteChainContractProjectResponse) SetResult(v string) *DeleteChainContractProjectResponse {
	s.Result = &v
	return s
}

type CloneChainContractProjectRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// project_description
	ProjectDescription *string `json:"project_description,omitempty" xml:"project_description,omitempty" require:"true"`
	// project_id
	ProjectId *string `json:"project_id,omitempty" xml:"project_id,omitempty" require:"true"`
	// project_name
	ProjectName *string `json:"project_name,omitempty" xml:"project_name,omitempty" require:"true"`
	// project_version
	ProjectVersion *string `json:"project_version,omitempty" xml:"project_version,omitempty" require:"true"`
	// region_id
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty"`
	// consortium_id
	ConsortiumId *string `json:"consortium_id,omitempty" xml:"consortium_id,omitempty" require:"true"`
}

func (s CloneChainContractProjectRequest) String() string {
	return tea.Prettify(s)
}

func (s CloneChainContractProjectRequest) GoString() string {
	return s.String()
}

func (s *CloneChainContractProjectRequest) SetAuthToken(v string) *CloneChainContractProjectRequest {
	s.AuthToken = &v
	return s
}

func (s *CloneChainContractProjectRequest) SetProductInstanceId(v string) *CloneChainContractProjectRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CloneChainContractProjectRequest) SetProjectDescription(v string) *CloneChainContractProjectRequest {
	s.ProjectDescription = &v
	return s
}

func (s *CloneChainContractProjectRequest) SetProjectId(v string) *CloneChainContractProjectRequest {
	s.ProjectId = &v
	return s
}

func (s *CloneChainContractProjectRequest) SetProjectName(v string) *CloneChainContractProjectRequest {
	s.ProjectName = &v
	return s
}

func (s *CloneChainContractProjectRequest) SetProjectVersion(v string) *CloneChainContractProjectRequest {
	s.ProjectVersion = &v
	return s
}

func (s *CloneChainContractProjectRequest) SetRegionId(v string) *CloneChainContractProjectRequest {
	s.RegionId = &v
	return s
}

func (s *CloneChainContractProjectRequest) SetConsortiumId(v string) *CloneChainContractProjectRequest {
	s.ConsortiumId = &v
	return s
}

type CloneChainContractProjectResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// result
	Result *ALiYunContractProject `json:"result,omitempty" xml:"result,omitempty"`
}

func (s CloneChainContractProjectResponse) String() string {
	return tea.Prettify(s)
}

func (s CloneChainContractProjectResponse) GoString() string {
	return s.String()
}

func (s *CloneChainContractProjectResponse) SetReqMsgId(v string) *CloneChainContractProjectResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CloneChainContractProjectResponse) SetResultCode(v string) *CloneChainContractProjectResponse {
	s.ResultCode = &v
	return s
}

func (s *CloneChainContractProjectResponse) SetResultMsg(v string) *CloneChainContractProjectResponse {
	s.ResultMsg = &v
	return s
}

func (s *CloneChainContractProjectResponse) SetResult(v *ALiYunContractProject) *CloneChainContractProjectResponse {
	s.Result = v
	return s
}

type QueryChainContractProjectRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// consortium_id
	ConsortiumId *string `json:"consortium_id,omitempty" xml:"consortium_id,omitempty" require:"true"`
	// page_number
	PageNumber *int64 `json:"page_number,omitempty" xml:"page_number,omitempty" require:"true"`
	// page_size
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
	// region_id
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty"`
}

func (s QueryChainContractProjectRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryChainContractProjectRequest) GoString() string {
	return s.String()
}

func (s *QueryChainContractProjectRequest) SetAuthToken(v string) *QueryChainContractProjectRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryChainContractProjectRequest) SetProductInstanceId(v string) *QueryChainContractProjectRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryChainContractProjectRequest) SetConsortiumId(v string) *QueryChainContractProjectRequest {
	s.ConsortiumId = &v
	return s
}

func (s *QueryChainContractProjectRequest) SetPageNumber(v int64) *QueryChainContractProjectRequest {
	s.PageNumber = &v
	return s
}

func (s *QueryChainContractProjectRequest) SetPageSize(v int64) *QueryChainContractProjectRequest {
	s.PageSize = &v
	return s
}

func (s *QueryChainContractProjectRequest) SetRegionId(v string) *QueryChainContractProjectRequest {
	s.RegionId = &v
	return s
}

type QueryChainContractProjectResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// result
	Result *ALiYunContractProjects `json:"result,omitempty" xml:"result,omitempty"`
}

func (s QueryChainContractProjectResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryChainContractProjectResponse) GoString() string {
	return s.String()
}

func (s *QueryChainContractProjectResponse) SetReqMsgId(v string) *QueryChainContractProjectResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryChainContractProjectResponse) SetResultCode(v string) *QueryChainContractProjectResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryChainContractProjectResponse) SetResultMsg(v string) *QueryChainContractProjectResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryChainContractProjectResponse) SetResult(v *ALiYunContractProjects) *QueryChainContractProjectResponse {
	s.Result = v
	return s
}

type RetryChainContractProjectRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// description
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// project_id
	ProjectId *string `json:"project_id,omitempty" xml:"project_id,omitempty"`
	// project_version
	ProjectVersion *string `json:"project_version,omitempty" xml:"project_version,omitempty"`
	// region_id
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty"`
	// consortium_id
	ConsortiumId *string `json:"consortium_id,omitempty" xml:"consortium_id,omitempty" require:"true"`
}

func (s RetryChainContractProjectRequest) String() string {
	return tea.Prettify(s)
}

func (s RetryChainContractProjectRequest) GoString() string {
	return s.String()
}

func (s *RetryChainContractProjectRequest) SetAuthToken(v string) *RetryChainContractProjectRequest {
	s.AuthToken = &v
	return s
}

func (s *RetryChainContractProjectRequest) SetProductInstanceId(v string) *RetryChainContractProjectRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *RetryChainContractProjectRequest) SetDescription(v string) *RetryChainContractProjectRequest {
	s.Description = &v
	return s
}

func (s *RetryChainContractProjectRequest) SetName(v string) *RetryChainContractProjectRequest {
	s.Name = &v
	return s
}

func (s *RetryChainContractProjectRequest) SetProjectId(v string) *RetryChainContractProjectRequest {
	s.ProjectId = &v
	return s
}

func (s *RetryChainContractProjectRequest) SetProjectVersion(v string) *RetryChainContractProjectRequest {
	s.ProjectVersion = &v
	return s
}

func (s *RetryChainContractProjectRequest) SetRegionId(v string) *RetryChainContractProjectRequest {
	s.RegionId = &v
	return s
}

func (s *RetryChainContractProjectRequest) SetConsortiumId(v string) *RetryChainContractProjectRequest {
	s.ConsortiumId = &v
	return s
}

type RetryChainContractProjectResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// result
	Result *ALiYunContractProjectDuplicate `json:"result,omitempty" xml:"result,omitempty"`
}

func (s RetryChainContractProjectResponse) String() string {
	return tea.Prettify(s)
}

func (s RetryChainContractProjectResponse) GoString() string {
	return s.String()
}

func (s *RetryChainContractProjectResponse) SetReqMsgId(v string) *RetryChainContractProjectResponse {
	s.ReqMsgId = &v
	return s
}

func (s *RetryChainContractProjectResponse) SetResultCode(v string) *RetryChainContractProjectResponse {
	s.ResultCode = &v
	return s
}

func (s *RetryChainContractProjectResponse) SetResultMsg(v string) *RetryChainContractProjectResponse {
	s.ResultMsg = &v
	return s
}

func (s *RetryChainContractProjectResponse) SetResult(v *ALiYunContractProjectDuplicate) *RetryChainContractProjectResponse {
	s.Result = v
	return s
}

type UpdateChainContractProjectRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// project_description
	ProjectDescription *string `json:"project_description,omitempty" xml:"project_description,omitempty"`
	// project_id
	ProjectId *string `json:"project_id,omitempty" xml:"project_id,omitempty" require:"true"`
	// project_name
	ProjectName *string `json:"project_name,omitempty" xml:"project_name,omitempty"`
	// project_version
	ProjectVersion *string `json:"project_version,omitempty" xml:"project_version,omitempty"`
	// region_id
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty"`
	// consortium_id
	ConsortiumId *string `json:"consortium_id,omitempty" xml:"consortium_id,omitempty" require:"true"`
}

func (s UpdateChainContractProjectRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateChainContractProjectRequest) GoString() string {
	return s.String()
}

func (s *UpdateChainContractProjectRequest) SetAuthToken(v string) *UpdateChainContractProjectRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateChainContractProjectRequest) SetProductInstanceId(v string) *UpdateChainContractProjectRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UpdateChainContractProjectRequest) SetProjectDescription(v string) *UpdateChainContractProjectRequest {
	s.ProjectDescription = &v
	return s
}

func (s *UpdateChainContractProjectRequest) SetProjectId(v string) *UpdateChainContractProjectRequest {
	s.ProjectId = &v
	return s
}

func (s *UpdateChainContractProjectRequest) SetProjectName(v string) *UpdateChainContractProjectRequest {
	s.ProjectName = &v
	return s
}

func (s *UpdateChainContractProjectRequest) SetProjectVersion(v string) *UpdateChainContractProjectRequest {
	s.ProjectVersion = &v
	return s
}

func (s *UpdateChainContractProjectRequest) SetRegionId(v string) *UpdateChainContractProjectRequest {
	s.RegionId = &v
	return s
}

func (s *UpdateChainContractProjectRequest) SetConsortiumId(v string) *UpdateChainContractProjectRequest {
	s.ConsortiumId = &v
	return s
}

type UpdateChainContractProjectResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// result
	Result *string `json:"result,omitempty" xml:"result,omitempty"`
}

func (s UpdateChainContractProjectResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateChainContractProjectResponse) GoString() string {
	return s.String()
}

func (s *UpdateChainContractProjectResponse) SetReqMsgId(v string) *UpdateChainContractProjectResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateChainContractProjectResponse) SetResultCode(v string) *UpdateChainContractProjectResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateChainContractProjectResponse) SetResultMsg(v string) *UpdateChainContractProjectResponse {
	s.ResultMsg = &v
	return s
}

func (s *UpdateChainContractProjectResponse) SetResult(v string) *UpdateChainContractProjectResponse {
	s.Result = &v
	return s
}

type CreateChainContractContentRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// content
	Content *string `json:"content,omitempty" xml:"content,omitempty"`
	// content_name
	ContentName *string `json:"content_name,omitempty" xml:"content_name,omitempty" require:"true"`
	// is_directory
	IsDirectory *bool `json:"is_directory,omitempty" xml:"is_directory,omitempty" require:"true"`
	// parent_content_id
	ParentContentId *string `json:"parent_content_id,omitempty" xml:"parent_content_id,omitempty"`
	// project_id
	ProjectId *string `json:"project_id,omitempty" xml:"project_id,omitempty" require:"true"`
	// region_id
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty"`
	// consortium_id
	ConsortiumId *string `json:"consortium_id,omitempty" xml:"consortium_id,omitempty" require:"true"`
}

func (s CreateChainContractContentRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateChainContractContentRequest) GoString() string {
	return s.String()
}

func (s *CreateChainContractContentRequest) SetAuthToken(v string) *CreateChainContractContentRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateChainContractContentRequest) SetProductInstanceId(v string) *CreateChainContractContentRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateChainContractContentRequest) SetContent(v string) *CreateChainContractContentRequest {
	s.Content = &v
	return s
}

func (s *CreateChainContractContentRequest) SetContentName(v string) *CreateChainContractContentRequest {
	s.ContentName = &v
	return s
}

func (s *CreateChainContractContentRequest) SetIsDirectory(v bool) *CreateChainContractContentRequest {
	s.IsDirectory = &v
	return s
}

func (s *CreateChainContractContentRequest) SetParentContentId(v string) *CreateChainContractContentRequest {
	s.ParentContentId = &v
	return s
}

func (s *CreateChainContractContentRequest) SetProjectId(v string) *CreateChainContractContentRequest {
	s.ProjectId = &v
	return s
}

func (s *CreateChainContractContentRequest) SetRegionId(v string) *CreateChainContractContentRequest {
	s.RegionId = &v
	return s
}

func (s *CreateChainContractContentRequest) SetConsortiumId(v string) *CreateChainContractContentRequest {
	s.ConsortiumId = &v
	return s
}

type CreateChainContractContentResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// result
	Result *ALiYunChainContractContent `json:"result,omitempty" xml:"result,omitempty"`
}

func (s CreateChainContractContentResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateChainContractContentResponse) GoString() string {
	return s.String()
}

func (s *CreateChainContractContentResponse) SetReqMsgId(v string) *CreateChainContractContentResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateChainContractContentResponse) SetResultCode(v string) *CreateChainContractContentResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateChainContractContentResponse) SetResultMsg(v string) *CreateChainContractContentResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateChainContractContentResponse) SetResult(v *ALiYunChainContractContent) *CreateChainContractContentResponse {
	s.Result = v
	return s
}

type UpdateChainContractContentRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// content
	Content *string `json:"content,omitempty" xml:"content,omitempty"`
	// content_id
	ContentId *string `json:"content_id,omitempty" xml:"content_id,omitempty" require:"true"`
	// content_name
	ContentName *string `json:"content_name,omitempty" xml:"content_name,omitempty"`
	// parent_content_id
	ParentContentId *string `json:"parent_content_id,omitempty" xml:"parent_content_id,omitempty"`
	// region_id
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty"`
	// consortium_id
	ConsortiumId *string `json:"consortium_id,omitempty" xml:"consortium_id,omitempty"`
}

func (s UpdateChainContractContentRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateChainContractContentRequest) GoString() string {
	return s.String()
}

func (s *UpdateChainContractContentRequest) SetAuthToken(v string) *UpdateChainContractContentRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateChainContractContentRequest) SetProductInstanceId(v string) *UpdateChainContractContentRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UpdateChainContractContentRequest) SetContent(v string) *UpdateChainContractContentRequest {
	s.Content = &v
	return s
}

func (s *UpdateChainContractContentRequest) SetContentId(v string) *UpdateChainContractContentRequest {
	s.ContentId = &v
	return s
}

func (s *UpdateChainContractContentRequest) SetContentName(v string) *UpdateChainContractContentRequest {
	s.ContentName = &v
	return s
}

func (s *UpdateChainContractContentRequest) SetParentContentId(v string) *UpdateChainContractContentRequest {
	s.ParentContentId = &v
	return s
}

func (s *UpdateChainContractContentRequest) SetRegionId(v string) *UpdateChainContractContentRequest {
	s.RegionId = &v
	return s
}

func (s *UpdateChainContractContentRequest) SetConsortiumId(v string) *UpdateChainContractContentRequest {
	s.ConsortiumId = &v
	return s
}

type UpdateChainContractContentResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// result
	Result *string `json:"result,omitempty" xml:"result,omitempty"`
}

func (s UpdateChainContractContentResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateChainContractContentResponse) GoString() string {
	return s.String()
}

func (s *UpdateChainContractContentResponse) SetReqMsgId(v string) *UpdateChainContractContentResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateChainContractContentResponse) SetResultCode(v string) *UpdateChainContractContentResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateChainContractContentResponse) SetResultMsg(v string) *UpdateChainContractContentResponse {
	s.ResultMsg = &v
	return s
}

func (s *UpdateChainContractContentResponse) SetResult(v string) *UpdateChainContractContentResponse {
	s.Result = &v
	return s
}

type QueryChainContractContentRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// project_id
	ProjectId *string `json:"project_id,omitempty" xml:"project_id,omitempty"`
	// region_id
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty"`
	// consortium_id
	ConsortiumId *string `json:"consortium_id,omitempty" xml:"consortium_id,omitempty" require:"true"`
}

func (s QueryChainContractContentRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryChainContractContentRequest) GoString() string {
	return s.String()
}

func (s *QueryChainContractContentRequest) SetAuthToken(v string) *QueryChainContractContentRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryChainContractContentRequest) SetProductInstanceId(v string) *QueryChainContractContentRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryChainContractContentRequest) SetProjectId(v string) *QueryChainContractContentRequest {
	s.ProjectId = &v
	return s
}

func (s *QueryChainContractContentRequest) SetRegionId(v string) *QueryChainContractContentRequest {
	s.RegionId = &v
	return s
}

func (s *QueryChainContractContentRequest) SetConsortiumId(v string) *QueryChainContractContentRequest {
	s.ConsortiumId = &v
	return s
}

type QueryChainContractContentResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// result
	Result *string `json:"result,omitempty" xml:"result,omitempty"`
}

func (s QueryChainContractContentResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryChainContractContentResponse) GoString() string {
	return s.String()
}

func (s *QueryChainContractContentResponse) SetReqMsgId(v string) *QueryChainContractContentResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryChainContractContentResponse) SetResultCode(v string) *QueryChainContractContentResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryChainContractContentResponse) SetResultMsg(v string) *QueryChainContractContentResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryChainContractContentResponse) SetResult(v string) *QueryChainContractContentResponse {
	s.Result = &v
	return s
}

type ExecChainContractRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// region_id
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty"`
	// ant_chain_id
	AntChainId *string `json:"ant_chain_id,omitempty" xml:"ant_chain_id,omitempty" require:"true"`
	// transaction
	Transaction *string `json:"transaction,omitempty" xml:"transaction,omitempty" require:"true"`
}

func (s ExecChainContractRequest) String() string {
	return tea.Prettify(s)
}

func (s ExecChainContractRequest) GoString() string {
	return s.String()
}

func (s *ExecChainContractRequest) SetAuthToken(v string) *ExecChainContractRequest {
	s.AuthToken = &v
	return s
}

func (s *ExecChainContractRequest) SetProductInstanceId(v string) *ExecChainContractRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ExecChainContractRequest) SetRegionId(v string) *ExecChainContractRequest {
	s.RegionId = &v
	return s
}

func (s *ExecChainContractRequest) SetAntChainId(v string) *ExecChainContractRequest {
	s.AntChainId = &v
	return s
}

func (s *ExecChainContractRequest) SetTransaction(v string) *ExecChainContractRequest {
	s.Transaction = &v
	return s
}

type ExecChainContractResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// result
	Result *string `json:"result,omitempty" xml:"result,omitempty"`
}

func (s ExecChainContractResponse) String() string {
	return tea.Prettify(s)
}

func (s ExecChainContractResponse) GoString() string {
	return s.String()
}

func (s *ExecChainContractResponse) SetReqMsgId(v string) *ExecChainContractResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ExecChainContractResponse) SetResultCode(v string) *ExecChainContractResponse {
	s.ResultCode = &v
	return s
}

func (s *ExecChainContractResponse) SetResultMsg(v string) *ExecChainContractResponse {
	s.ResultMsg = &v
	return s
}

func (s *ExecChainContractResponse) SetResult(v string) *ExecChainContractResponse {
	s.Result = &v
	return s
}

type QueryChainIdeRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// consortium_id
	ConsortiumId *string `json:"consortium_id,omitempty" xml:"consortium_id,omitempty" require:"true"`
	// region_id
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty"`
}

func (s QueryChainIdeRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryChainIdeRequest) GoString() string {
	return s.String()
}

func (s *QueryChainIdeRequest) SetAuthToken(v string) *QueryChainIdeRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryChainIdeRequest) SetProductInstanceId(v string) *QueryChainIdeRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryChainIdeRequest) SetConsortiumId(v string) *QueryChainIdeRequest {
	s.ConsortiumId = &v
	return s
}

func (s *QueryChainIdeRequest) SetRegionId(v string) *QueryChainIdeRequest {
	s.RegionId = &v
	return s
}

type QueryChainIdeResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// result
	Result []*ALiYunChainCloudIdeConfig `json:"result,omitempty" xml:"result,omitempty" type:"Repeated"`
}

func (s QueryChainIdeResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryChainIdeResponse) GoString() string {
	return s.String()
}

func (s *QueryChainIdeResponse) SetReqMsgId(v string) *QueryChainIdeResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryChainIdeResponse) SetResultCode(v string) *QueryChainIdeResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryChainIdeResponse) SetResultMsg(v string) *QueryChainIdeResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryChainIdeResponse) SetResult(v []*ALiYunChainCloudIdeConfig) *QueryChainIdeResponse {
	s.Result = v
	return s
}

type DeleteChainContractContentRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// content_id
	ContentId *string `json:"content_id,omitempty" xml:"content_id,omitempty" require:"true"`
	// region_id
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty"`
	// consortium_id
	ConsortiumId *string `json:"consortium_id,omitempty" xml:"consortium_id,omitempty" require:"true"`
}

func (s DeleteChainContractContentRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteChainContractContentRequest) GoString() string {
	return s.String()
}

func (s *DeleteChainContractContentRequest) SetAuthToken(v string) *DeleteChainContractContentRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteChainContractContentRequest) SetProductInstanceId(v string) *DeleteChainContractContentRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *DeleteChainContractContentRequest) SetContentId(v string) *DeleteChainContractContentRequest {
	s.ContentId = &v
	return s
}

func (s *DeleteChainContractContentRequest) SetRegionId(v string) *DeleteChainContractContentRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteChainContractContentRequest) SetConsortiumId(v string) *DeleteChainContractContentRequest {
	s.ConsortiumId = &v
	return s
}

type DeleteChainContractContentResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// result
	Result *string `json:"result,omitempty" xml:"result,omitempty"`
}

func (s DeleteChainContractContentResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteChainContractContentResponse) GoString() string {
	return s.String()
}

func (s *DeleteChainContractContentResponse) SetReqMsgId(v string) *DeleteChainContractContentResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteChainContractContentResponse) SetResultCode(v string) *DeleteChainContractContentResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteChainContractContentResponse) SetResultMsg(v string) *DeleteChainContractContentResponse {
	s.ResultMsg = &v
	return s
}

func (s *DeleteChainContractContentResponse) SetResult(v string) *DeleteChainContractContentResponse {
	s.Result = &v
	return s
}

type BatchcreateChainMiniappUserRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// ant_chain_id
	AntChainId *string `json:"ant_chain_id,omitempty" xml:"ant_chain_id,omitempty"`
	// phone_list
	PhoneList *string `json:"phone_list,omitempty" xml:"phone_list,omitempty"`
}

func (s BatchcreateChainMiniappUserRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchcreateChainMiniappUserRequest) GoString() string {
	return s.String()
}

func (s *BatchcreateChainMiniappUserRequest) SetAuthToken(v string) *BatchcreateChainMiniappUserRequest {
	s.AuthToken = &v
	return s
}

func (s *BatchcreateChainMiniappUserRequest) SetProductInstanceId(v string) *BatchcreateChainMiniappUserRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *BatchcreateChainMiniappUserRequest) SetAntChainId(v string) *BatchcreateChainMiniappUserRequest {
	s.AntChainId = &v
	return s
}

func (s *BatchcreateChainMiniappUserRequest) SetPhoneList(v string) *BatchcreateChainMiniappUserRequest {
	s.PhoneList = &v
	return s
}

type BatchcreateChainMiniappUserResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// result
	Result *string `json:"result,omitempty" xml:"result,omitempty"`
}

func (s BatchcreateChainMiniappUserResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchcreateChainMiniappUserResponse) GoString() string {
	return s.String()
}

func (s *BatchcreateChainMiniappUserResponse) SetReqMsgId(v string) *BatchcreateChainMiniappUserResponse {
	s.ReqMsgId = &v
	return s
}

func (s *BatchcreateChainMiniappUserResponse) SetResultCode(v string) *BatchcreateChainMiniappUserResponse {
	s.ResultCode = &v
	return s
}

func (s *BatchcreateChainMiniappUserResponse) SetResultMsg(v string) *BatchcreateChainMiniappUserResponse {
	s.ResultMsg = &v
	return s
}

func (s *BatchcreateChainMiniappUserResponse) SetResult(v string) *BatchcreateChainMiniappUserResponse {
	s.Result = &v
	return s
}

type DeleteChainMiniappUserRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// AntChainId
	AntChainId *string `json:"ant_chain_id,omitempty" xml:"ant_chain_id,omitempty"`
	// phone
	Phone *string `json:"phone,omitempty" xml:"phone,omitempty"`
}

func (s DeleteChainMiniappUserRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteChainMiniappUserRequest) GoString() string {
	return s.String()
}

func (s *DeleteChainMiniappUserRequest) SetAuthToken(v string) *DeleteChainMiniappUserRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteChainMiniappUserRequest) SetProductInstanceId(v string) *DeleteChainMiniappUserRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *DeleteChainMiniappUserRequest) SetAntChainId(v string) *DeleteChainMiniappUserRequest {
	s.AntChainId = &v
	return s
}

func (s *DeleteChainMiniappUserRequest) SetPhone(v string) *DeleteChainMiniappUserRequest {
	s.Phone = &v
	return s
}

type DeleteChainMiniappUserResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// result
	Result *string `json:"result,omitempty" xml:"result,omitempty"`
}

func (s DeleteChainMiniappUserResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteChainMiniappUserResponse) GoString() string {
	return s.String()
}

func (s *DeleteChainMiniappUserResponse) SetReqMsgId(v string) *DeleteChainMiniappUserResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteChainMiniappUserResponse) SetResultCode(v string) *DeleteChainMiniappUserResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteChainMiniappUserResponse) SetResultMsg(v string) *DeleteChainMiniappUserResponse {
	s.ResultMsg = &v
	return s
}

func (s *DeleteChainMiniappUserResponse) SetResult(v string) *DeleteChainMiniappUserResponse {
	s.Result = &v
	return s
}

type BatchqueryChainMiniappUserRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// ant_chain_id
	AntChainId *string `json:"ant_chain_id,omitempty" xml:"ant_chain_id,omitempty" require:"true"`
	// page_number
	PageNumber *int64 `json:"page_number,omitempty" xml:"page_number,omitempty" require:"true"`
	// page_size
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
	// q_r_code_type
	QRCodeType *string `json:"q_r_code_type,omitempty" xml:"q_r_code_type,omitempty" require:"true"`
}

func (s BatchqueryChainMiniappUserRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchqueryChainMiniappUserRequest) GoString() string {
	return s.String()
}

func (s *BatchqueryChainMiniappUserRequest) SetAuthToken(v string) *BatchqueryChainMiniappUserRequest {
	s.AuthToken = &v
	return s
}

func (s *BatchqueryChainMiniappUserRequest) SetProductInstanceId(v string) *BatchqueryChainMiniappUserRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *BatchqueryChainMiniappUserRequest) SetAntChainId(v string) *BatchqueryChainMiniappUserRequest {
	s.AntChainId = &v
	return s
}

func (s *BatchqueryChainMiniappUserRequest) SetPageNumber(v int64) *BatchqueryChainMiniappUserRequest {
	s.PageNumber = &v
	return s
}

func (s *BatchqueryChainMiniappUserRequest) SetPageSize(v int64) *BatchqueryChainMiniappUserRequest {
	s.PageSize = &v
	return s
}

func (s *BatchqueryChainMiniappUserRequest) SetQRCodeType(v string) *BatchqueryChainMiniappUserRequest {
	s.QRCodeType = &v
	return s
}

type BatchqueryChainMiniappUserResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// result
	Result *ALiYunChainMiniAppUserPrivilege `json:"result,omitempty" xml:"result,omitempty"`
}

func (s BatchqueryChainMiniappUserResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchqueryChainMiniappUserResponse) GoString() string {
	return s.String()
}

func (s *BatchqueryChainMiniappUserResponse) SetReqMsgId(v string) *BatchqueryChainMiniappUserResponse {
	s.ReqMsgId = &v
	return s
}

func (s *BatchqueryChainMiniappUserResponse) SetResultCode(v string) *BatchqueryChainMiniappUserResponse {
	s.ResultCode = &v
	return s
}

func (s *BatchqueryChainMiniappUserResponse) SetResultMsg(v string) *BatchqueryChainMiniappUserResponse {
	s.ResultMsg = &v
	return s
}

func (s *BatchqueryChainMiniappUserResponse) SetResult(v *ALiYunChainMiniAppUserPrivilege) *BatchqueryChainMiniappUserResponse {
	s.Result = v
	return s
}

type QueryChainMiniappAuthorizationRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// ant_chain_id
	AntChainId *string `json:"ant_chain_id,omitempty" xml:"ant_chain_id,omitempty" require:"true"`
	// q_r_code_type
	QRCodeType *string `json:"q_r_code_type,omitempty" xml:"q_r_code_type,omitempty" require:"true"`
}

func (s QueryChainMiniappAuthorizationRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryChainMiniappAuthorizationRequest) GoString() string {
	return s.String()
}

func (s *QueryChainMiniappAuthorizationRequest) SetAuthToken(v string) *QueryChainMiniappAuthorizationRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryChainMiniappAuthorizationRequest) SetProductInstanceId(v string) *QueryChainMiniappAuthorizationRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryChainMiniappAuthorizationRequest) SetAntChainId(v string) *QueryChainMiniappAuthorizationRequest {
	s.AntChainId = &v
	return s
}

func (s *QueryChainMiniappAuthorizationRequest) SetQRCodeType(v string) *QueryChainMiniappAuthorizationRequest {
	s.QRCodeType = &v
	return s
}

type QueryChainMiniappAuthorizationResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// result
	Result *ALiYunChainMiniAppAuthorization `json:"result,omitempty" xml:"result,omitempty"`
}

func (s QueryChainMiniappAuthorizationResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryChainMiniappAuthorizationResponse) GoString() string {
	return s.String()
}

func (s *QueryChainMiniappAuthorizationResponse) SetReqMsgId(v string) *QueryChainMiniappAuthorizationResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryChainMiniappAuthorizationResponse) SetResultCode(v string) *QueryChainMiniappAuthorizationResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryChainMiniappAuthorizationResponse) SetResultMsg(v string) *QueryChainMiniappAuthorizationResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryChainMiniappAuthorizationResponse) SetResult(v *ALiYunChainMiniAppAuthorization) *QueryChainMiniappAuthorizationResponse {
	s.Result = v
	return s
}

type UpdateChainMiniappAuthorizationRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// ant_chain_id
	AntChainId *string `json:"ant_chain_id,omitempty" xml:"ant_chain_id,omitempty"`
	// q_r_code_type
	QRCodeType *string `json:"q_r_code_type,omitempty" xml:"q_r_code_type,omitempty"`
	// authorization_type
	AuthorizationType *string `json:"authorization_type,omitempty" xml:"authorization_type,omitempty"`
}

func (s UpdateChainMiniappAuthorizationRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateChainMiniappAuthorizationRequest) GoString() string {
	return s.String()
}

func (s *UpdateChainMiniappAuthorizationRequest) SetAuthToken(v string) *UpdateChainMiniappAuthorizationRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateChainMiniappAuthorizationRequest) SetProductInstanceId(v string) *UpdateChainMiniappAuthorizationRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UpdateChainMiniappAuthorizationRequest) SetAntChainId(v string) *UpdateChainMiniappAuthorizationRequest {
	s.AntChainId = &v
	return s
}

func (s *UpdateChainMiniappAuthorizationRequest) SetQRCodeType(v string) *UpdateChainMiniappAuthorizationRequest {
	s.QRCodeType = &v
	return s
}

func (s *UpdateChainMiniappAuthorizationRequest) SetAuthorizationType(v string) *UpdateChainMiniappAuthorizationRequest {
	s.AuthorizationType = &v
	return s
}

type UpdateChainMiniappAuthorizationResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// result
	Result *string `json:"result,omitempty" xml:"result,omitempty"`
}

func (s UpdateChainMiniappAuthorizationResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateChainMiniappAuthorizationResponse) GoString() string {
	return s.String()
}

func (s *UpdateChainMiniappAuthorizationResponse) SetReqMsgId(v string) *UpdateChainMiniappAuthorizationResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateChainMiniappAuthorizationResponse) SetResultCode(v string) *UpdateChainMiniappAuthorizationResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateChainMiniappAuthorizationResponse) SetResultMsg(v string) *UpdateChainMiniappAuthorizationResponse {
	s.ResultMsg = &v
	return s
}

func (s *UpdateChainMiniappAuthorizationResponse) SetResult(v string) *UpdateChainMiniappAuthorizationResponse {
	s.Result = &v
	return s
}

type QueryChainMiniappTransactionRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// ant_chain_id
	AntChainId *string `json:"ant_chain_id,omitempty" xml:"ant_chain_id,omitempty" require:"true"`
	// transaction_hash
	TransactionHash *string `json:"transaction_hash,omitempty" xml:"transaction_hash,omitempty" require:"true"`
	// phone_hash
	PhoneHash *string `json:"phone_hash,omitempty" xml:"phone_hash,omitempty" require:"true"`
}

func (s QueryChainMiniappTransactionRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryChainMiniappTransactionRequest) GoString() string {
	return s.String()
}

func (s *QueryChainMiniappTransactionRequest) SetAuthToken(v string) *QueryChainMiniappTransactionRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryChainMiniappTransactionRequest) SetProductInstanceId(v string) *QueryChainMiniappTransactionRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryChainMiniappTransactionRequest) SetAntChainId(v string) *QueryChainMiniappTransactionRequest {
	s.AntChainId = &v
	return s
}

func (s *QueryChainMiniappTransactionRequest) SetTransactionHash(v string) *QueryChainMiniappTransactionRequest {
	s.TransactionHash = &v
	return s
}

func (s *QueryChainMiniappTransactionRequest) SetPhoneHash(v string) *QueryChainMiniappTransactionRequest {
	s.PhoneHash = &v
	return s
}

type QueryChainMiniappTransactionResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// result
	Result *ALiYunChainMiniAppTransaction `json:"result,omitempty" xml:"result,omitempty"`
}

func (s QueryChainMiniappTransactionResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryChainMiniappTransactionResponse) GoString() string {
	return s.String()
}

func (s *QueryChainMiniappTransactionResponse) SetReqMsgId(v string) *QueryChainMiniappTransactionResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryChainMiniappTransactionResponse) SetResultCode(v string) *QueryChainMiniappTransactionResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryChainMiniappTransactionResponse) SetResultMsg(v string) *QueryChainMiniappTransactionResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryChainMiniappTransactionResponse) SetResult(v *ALiYunChainMiniAppTransaction) *QueryChainMiniappTransactionResponse {
	s.Result = v
	return s
}

type QueryChainMiniappLogRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// ant_chain_id
	AntChainId *string `json:"ant_chain_id,omitempty" xml:"ant_chain_id,omitempty" require:"true"`
	// q_r_code_type
	QRCodeType *string `json:"q_r_code_type,omitempty" xml:"q_r_code_type,omitempty" require:"true"`
}

func (s QueryChainMiniappLogRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryChainMiniappLogRequest) GoString() string {
	return s.String()
}

func (s *QueryChainMiniappLogRequest) SetAuthToken(v string) *QueryChainMiniappLogRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryChainMiniappLogRequest) SetProductInstanceId(v string) *QueryChainMiniappLogRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryChainMiniappLogRequest) SetAntChainId(v string) *QueryChainMiniappLogRequest {
	s.AntChainId = &v
	return s
}

func (s *QueryChainMiniappLogRequest) SetQRCodeType(v string) *QueryChainMiniappLogRequest {
	s.QRCodeType = &v
	return s
}

type QueryChainMiniappLogResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// result
	Result *ALiYunChainMiniAppLog `json:"result,omitempty" xml:"result,omitempty"`
}

func (s QueryChainMiniappLogResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryChainMiniappLogResponse) GoString() string {
	return s.String()
}

func (s *QueryChainMiniappLogResponse) SetReqMsgId(v string) *QueryChainMiniappLogResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryChainMiniappLogResponse) SetResultCode(v string) *QueryChainMiniappLogResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryChainMiniappLogResponse) SetResultMsg(v string) *QueryChainMiniappLogResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryChainMiniappLogResponse) SetResult(v *ALiYunChainMiniAppLog) *QueryChainMiniappLogResponse {
	s.Result = v
	return s
}

type CreateChainMiniappCodeRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// ant_chain_id
	AntChainId *string `json:"ant_chain_id,omitempty" xml:"ant_chain_id,omitempty" require:"true"`
	// transaction_hash
	TransactionHash *string `json:"transaction_hash,omitempty" xml:"transaction_hash,omitempty" require:"true"`
	// contract_id
	ContractId *string `json:"contract_id,omitempty" xml:"contract_id,omitempty" require:"true"`
}

func (s CreateChainMiniappCodeRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateChainMiniappCodeRequest) GoString() string {
	return s.String()
}

func (s *CreateChainMiniappCodeRequest) SetAuthToken(v string) *CreateChainMiniappCodeRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateChainMiniappCodeRequest) SetProductInstanceId(v string) *CreateChainMiniappCodeRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateChainMiniappCodeRequest) SetAntChainId(v string) *CreateChainMiniappCodeRequest {
	s.AntChainId = &v
	return s
}

func (s *CreateChainMiniappCodeRequest) SetTransactionHash(v string) *CreateChainMiniappCodeRequest {
	s.TransactionHash = &v
	return s
}

func (s *CreateChainMiniappCodeRequest) SetContractId(v string) *CreateChainMiniappCodeRequest {
	s.ContractId = &v
	return s
}

type CreateChainMiniappCodeResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// result
	Result *ALiYunChainMiniAppCodeCreate `json:"result,omitempty" xml:"result,omitempty"`
}

func (s CreateChainMiniappCodeResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateChainMiniappCodeResponse) GoString() string {
	return s.String()
}

func (s *CreateChainMiniappCodeResponse) SetReqMsgId(v string) *CreateChainMiniappCodeResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateChainMiniappCodeResponse) SetResultCode(v string) *CreateChainMiniappCodeResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateChainMiniappCodeResponse) SetResultMsg(v string) *CreateChainMiniappCodeResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateChainMiniappCodeResponse) SetResult(v *ALiYunChainMiniAppCodeCreate) *CreateChainMiniappCodeResponse {
	s.Result = v
	return s
}

type QueryUnionBuyRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// region_id
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty"`
	// tenant_id
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty" require:"true"`
}

func (s QueryUnionBuyRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryUnionBuyRequest) GoString() string {
	return s.String()
}

func (s *QueryUnionBuyRequest) SetAuthToken(v string) *QueryUnionBuyRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryUnionBuyRequest) SetProductInstanceId(v string) *QueryUnionBuyRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryUnionBuyRequest) SetRegionId(v string) *QueryUnionBuyRequest {
	s.RegionId = &v
	return s
}

func (s *QueryUnionBuyRequest) SetTenantId(v string) *QueryUnionBuyRequest {
	s.TenantId = &v
	return s
}

type QueryUnionBuyResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// result
	Result []*ALiYunBuyUnion `json:"result,omitempty" xml:"result,omitempty" type:"Repeated"`
}

func (s QueryUnionBuyResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryUnionBuyResponse) GoString() string {
	return s.String()
}

func (s *QueryUnionBuyResponse) SetReqMsgId(v string) *QueryUnionBuyResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryUnionBuyResponse) SetResultCode(v string) *QueryUnionBuyResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryUnionBuyResponse) SetResultMsg(v string) *QueryUnionBuyResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryUnionBuyResponse) SetResult(v []*ALiYunBuyUnion) *QueryUnionBuyResponse {
	s.Result = v
	return s
}

type QueryChainPublicRestRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// bizid
	Bizid *string `json:"bizid,omitempty" xml:"bizid,omitempty" require:"true"`
	// region_id
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty"`
}

func (s QueryChainPublicRestRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryChainPublicRestRequest) GoString() string {
	return s.String()
}

func (s *QueryChainPublicRestRequest) SetAuthToken(v string) *QueryChainPublicRestRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryChainPublicRestRequest) SetProductInstanceId(v string) *QueryChainPublicRestRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryChainPublicRestRequest) SetBizid(v string) *QueryChainPublicRestRequest {
	s.Bizid = &v
	return s
}

func (s *QueryChainPublicRestRequest) SetRegionId(v string) *QueryChainPublicRestRequest {
	s.RegionId = &v
	return s
}

type QueryChainPublicRestResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// AccessId
	Result []*ALiYunChainRest `json:"result,omitempty" xml:"result,omitempty" type:"Repeated"`
}

func (s QueryChainPublicRestResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryChainPublicRestResponse) GoString() string {
	return s.String()
}

func (s *QueryChainPublicRestResponse) SetReqMsgId(v string) *QueryChainPublicRestResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryChainPublicRestResponse) SetResultCode(v string) *QueryChainPublicRestResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryChainPublicRestResponse) SetResultMsg(v string) *QueryChainPublicRestResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryChainPublicRestResponse) SetResult(v []*ALiYunChainRest) *QueryChainPublicRestResponse {
	s.Result = v
	return s
}

type ApplyChainPublicRestRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// bizid
	Bizid *string `json:"bizid,omitempty" xml:"bizid,omitempty" require:"true"`
	// region_id
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty"`
}

func (s ApplyChainPublicRestRequest) String() string {
	return tea.Prettify(s)
}

func (s ApplyChainPublicRestRequest) GoString() string {
	return s.String()
}

func (s *ApplyChainPublicRestRequest) SetAuthToken(v string) *ApplyChainPublicRestRequest {
	s.AuthToken = &v
	return s
}

func (s *ApplyChainPublicRestRequest) SetProductInstanceId(v string) *ApplyChainPublicRestRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ApplyChainPublicRestRequest) SetBizid(v string) *ApplyChainPublicRestRequest {
	s.Bizid = &v
	return s
}

func (s *ApplyChainPublicRestRequest) SetRegionId(v string) *ApplyChainPublicRestRequest {
	s.RegionId = &v
	return s
}

type ApplyChainPublicRestResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// result
	Result *ALiYunChainRest `json:"result,omitempty" xml:"result,omitempty"`
}

func (s ApplyChainPublicRestResponse) String() string {
	return tea.Prettify(s)
}

func (s ApplyChainPublicRestResponse) GoString() string {
	return s.String()
}

func (s *ApplyChainPublicRestResponse) SetReqMsgId(v string) *ApplyChainPublicRestResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ApplyChainPublicRestResponse) SetResultCode(v string) *ApplyChainPublicRestResponse {
	s.ResultCode = &v
	return s
}

func (s *ApplyChainPublicRestResponse) SetResultMsg(v string) *ApplyChainPublicRestResponse {
	s.ResultMsg = &v
	return s
}

func (s *ApplyChainPublicRestResponse) SetResult(v *ALiYunChainRest) *ApplyChainPublicRestResponse {
	s.Result = v
	return s
}

type ReinitChainPublicRestRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// access_id
	AccessId *string `json:"access_id,omitempty" xml:"access_id,omitempty" require:"true"`
	// bizid
	Bizid *string `json:"bizid,omitempty" xml:"bizid,omitempty" require:"true"`
	// region_id
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty"`
	// vcode
	Vcode *string `json:"vcode,omitempty" xml:"vcode,omitempty" require:"true"`
}

func (s ReinitChainPublicRestRequest) String() string {
	return tea.Prettify(s)
}

func (s ReinitChainPublicRestRequest) GoString() string {
	return s.String()
}

func (s *ReinitChainPublicRestRequest) SetAuthToken(v string) *ReinitChainPublicRestRequest {
	s.AuthToken = &v
	return s
}

func (s *ReinitChainPublicRestRequest) SetProductInstanceId(v string) *ReinitChainPublicRestRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ReinitChainPublicRestRequest) SetAccessId(v string) *ReinitChainPublicRestRequest {
	s.AccessId = &v
	return s
}

func (s *ReinitChainPublicRestRequest) SetBizid(v string) *ReinitChainPublicRestRequest {
	s.Bizid = &v
	return s
}

func (s *ReinitChainPublicRestRequest) SetRegionId(v string) *ReinitChainPublicRestRequest {
	s.RegionId = &v
	return s
}

func (s *ReinitChainPublicRestRequest) SetVcode(v string) *ReinitChainPublicRestRequest {
	s.Vcode = &v
	return s
}

type ReinitChainPublicRestResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// result
	Result *ALiYunChainRest `json:"result,omitempty" xml:"result,omitempty"`
}

func (s ReinitChainPublicRestResponse) String() string {
	return tea.Prettify(s)
}

func (s ReinitChainPublicRestResponse) GoString() string {
	return s.String()
}

func (s *ReinitChainPublicRestResponse) SetReqMsgId(v string) *ReinitChainPublicRestResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ReinitChainPublicRestResponse) SetResultCode(v string) *ReinitChainPublicRestResponse {
	s.ResultCode = &v
	return s
}

func (s *ReinitChainPublicRestResponse) SetResultMsg(v string) *ReinitChainPublicRestResponse {
	s.ResultMsg = &v
	return s
}

func (s *ReinitChainPublicRestResponse) SetResult(v *ALiYunChainRest) *ReinitChainPublicRestResponse {
	s.Result = v
	return s
}

type QueryChainRestAntRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// ant_chain_id
	AntChainId *string `json:"ant_chain_id,omitempty" xml:"ant_chain_id,omitempty" require:"true"`
	// region_id
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty"`
	// consortium_id
	ConsortiumId *string `json:"consortium_id,omitempty" xml:"consortium_id,omitempty" require:"true"`
}

func (s QueryChainRestAntRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryChainRestAntRequest) GoString() string {
	return s.String()
}

func (s *QueryChainRestAntRequest) SetAuthToken(v string) *QueryChainRestAntRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryChainRestAntRequest) SetProductInstanceId(v string) *QueryChainRestAntRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryChainRestAntRequest) SetAntChainId(v string) *QueryChainRestAntRequest {
	s.AntChainId = &v
	return s
}

func (s *QueryChainRestAntRequest) SetRegionId(v string) *QueryChainRestAntRequest {
	s.RegionId = &v
	return s
}

func (s *QueryChainRestAntRequest) SetConsortiumId(v string) *QueryChainRestAntRequest {
	s.ConsortiumId = &v
	return s
}

type QueryChainRestAntResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// result
	Result []*ALiYunChainRest `json:"result,omitempty" xml:"result,omitempty" type:"Repeated"`
}

func (s QueryChainRestAntResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryChainRestAntResponse) GoString() string {
	return s.String()
}

func (s *QueryChainRestAntResponse) SetReqMsgId(v string) *QueryChainRestAntResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryChainRestAntResponse) SetResultCode(v string) *QueryChainRestAntResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryChainRestAntResponse) SetResultMsg(v string) *QueryChainRestAntResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryChainRestAntResponse) SetResult(v []*ALiYunChainRest) *QueryChainRestAntResponse {
	s.Result = v
	return s
}

type ApplyChainRestAntRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// ant_chain_id
	AntChainId *string `json:"ant_chain_id,omitempty" xml:"ant_chain_id,omitempty" require:"true"`
	// region_id
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty"`
	// consortium_id
	ConsortiumId *string `json:"consortium_id,omitempty" xml:"consortium_id,omitempty" require:"true"`
}

func (s ApplyChainRestAntRequest) String() string {
	return tea.Prettify(s)
}

func (s ApplyChainRestAntRequest) GoString() string {
	return s.String()
}

func (s *ApplyChainRestAntRequest) SetAuthToken(v string) *ApplyChainRestAntRequest {
	s.AuthToken = &v
	return s
}

func (s *ApplyChainRestAntRequest) SetProductInstanceId(v string) *ApplyChainRestAntRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ApplyChainRestAntRequest) SetAntChainId(v string) *ApplyChainRestAntRequest {
	s.AntChainId = &v
	return s
}

func (s *ApplyChainRestAntRequest) SetRegionId(v string) *ApplyChainRestAntRequest {
	s.RegionId = &v
	return s
}

func (s *ApplyChainRestAntRequest) SetConsortiumId(v string) *ApplyChainRestAntRequest {
	s.ConsortiumId = &v
	return s
}

type ApplyChainRestAntResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// result
	Result *ALiYunChainRest `json:"result,omitempty" xml:"result,omitempty"`
}

func (s ApplyChainRestAntResponse) String() string {
	return tea.Prettify(s)
}

func (s ApplyChainRestAntResponse) GoString() string {
	return s.String()
}

func (s *ApplyChainRestAntResponse) SetReqMsgId(v string) *ApplyChainRestAntResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ApplyChainRestAntResponse) SetResultCode(v string) *ApplyChainRestAntResponse {
	s.ResultCode = &v
	return s
}

func (s *ApplyChainRestAntResponse) SetResultMsg(v string) *ApplyChainRestAntResponse {
	s.ResultMsg = &v
	return s
}

func (s *ApplyChainRestAntResponse) SetResult(v *ALiYunChainRest) *ApplyChainRestAntResponse {
	s.Result = v
	return s
}

type ReinitChainRestAntRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// access_id
	AccessId *string `json:"access_id,omitempty" xml:"access_id,omitempty" require:"true"`
	// ant_chain_id
	AntChainId *string `json:"ant_chain_id,omitempty" xml:"ant_chain_id,omitempty" require:"true"`
	// consortium_id
	ConsortiumId *string `json:"consortium_id,omitempty" xml:"consortium_id,omitempty" require:"true"`
	// region_id
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty"`
	// vcode
	Vcode *string `json:"vcode,omitempty" xml:"vcode,omitempty" require:"true"`
}

func (s ReinitChainRestAntRequest) String() string {
	return tea.Prettify(s)
}

func (s ReinitChainRestAntRequest) GoString() string {
	return s.String()
}

func (s *ReinitChainRestAntRequest) SetAuthToken(v string) *ReinitChainRestAntRequest {
	s.AuthToken = &v
	return s
}

func (s *ReinitChainRestAntRequest) SetProductInstanceId(v string) *ReinitChainRestAntRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ReinitChainRestAntRequest) SetAccessId(v string) *ReinitChainRestAntRequest {
	s.AccessId = &v
	return s
}

func (s *ReinitChainRestAntRequest) SetAntChainId(v string) *ReinitChainRestAntRequest {
	s.AntChainId = &v
	return s
}

func (s *ReinitChainRestAntRequest) SetConsortiumId(v string) *ReinitChainRestAntRequest {
	s.ConsortiumId = &v
	return s
}

func (s *ReinitChainRestAntRequest) SetRegionId(v string) *ReinitChainRestAntRequest {
	s.RegionId = &v
	return s
}

func (s *ReinitChainRestAntRequest) SetVcode(v string) *ReinitChainRestAntRequest {
	s.Vcode = &v
	return s
}

type ReinitChainRestAntResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// result
	Result *ALiYunChainRest `json:"result,omitempty" xml:"result,omitempty"`
}

func (s ReinitChainRestAntResponse) String() string {
	return tea.Prettify(s)
}

func (s ReinitChainRestAntResponse) GoString() string {
	return s.String()
}

func (s *ReinitChainRestAntResponse) SetReqMsgId(v string) *ReinitChainRestAntResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ReinitChainRestAntResponse) SetResultCode(v string) *ReinitChainRestAntResponse {
	s.ResultCode = &v
	return s
}

func (s *ReinitChainRestAntResponse) SetResultMsg(v string) *ReinitChainRestAntResponse {
	s.ResultMsg = &v
	return s
}

func (s *ReinitChainRestAntResponse) SetResult(v *ALiYunChainRest) *ReinitChainRestAntResponse {
	s.Result = v
	return s
}

type SendChainPublicRestRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// access_id
	AccessId *string `json:"access_id,omitempty" xml:"access_id,omitempty" require:"true"`
	// bizid
	Bizid *string `json:"bizid,omitempty" xml:"bizid,omitempty" require:"true"`
	// region_id
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty"`
}

func (s SendChainPublicRestRequest) String() string {
	return tea.Prettify(s)
}

func (s SendChainPublicRestRequest) GoString() string {
	return s.String()
}

func (s *SendChainPublicRestRequest) SetAuthToken(v string) *SendChainPublicRestRequest {
	s.AuthToken = &v
	return s
}

func (s *SendChainPublicRestRequest) SetProductInstanceId(v string) *SendChainPublicRestRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *SendChainPublicRestRequest) SetAccessId(v string) *SendChainPublicRestRequest {
	s.AccessId = &v
	return s
}

func (s *SendChainPublicRestRequest) SetBizid(v string) *SendChainPublicRestRequest {
	s.Bizid = &v
	return s
}

func (s *SendChainPublicRestRequest) SetRegionId(v string) *SendChainPublicRestRequest {
	s.RegionId = &v
	return s
}

type SendChainPublicRestResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// result
	Result *bool `json:"result,omitempty" xml:"result,omitempty"`
}

func (s SendChainPublicRestResponse) String() string {
	return tea.Prettify(s)
}

func (s SendChainPublicRestResponse) GoString() string {
	return s.String()
}

func (s *SendChainPublicRestResponse) SetReqMsgId(v string) *SendChainPublicRestResponse {
	s.ReqMsgId = &v
	return s
}

func (s *SendChainPublicRestResponse) SetResultCode(v string) *SendChainPublicRestResponse {
	s.ResultCode = &v
	return s
}

func (s *SendChainPublicRestResponse) SetResultMsg(v string) *SendChainPublicRestResponse {
	s.ResultMsg = &v
	return s
}

func (s *SendChainPublicRestResponse) SetResult(v bool) *SendChainPublicRestResponse {
	s.Result = &v
	return s
}

type SendChainRestAntRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// access_id
	AccessId *string `json:"access_id,omitempty" xml:"access_id,omitempty" require:"true"`
	// ant_chain_id
	AntChainId *string `json:"ant_chain_id,omitempty" xml:"ant_chain_id,omitempty" require:"true"`
	// consortium_id
	ConsortiumId *string `json:"consortium_id,omitempty" xml:"consortium_id,omitempty" require:"true"`
	// region_id
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty"`
}

func (s SendChainRestAntRequest) String() string {
	return tea.Prettify(s)
}

func (s SendChainRestAntRequest) GoString() string {
	return s.String()
}

func (s *SendChainRestAntRequest) SetAuthToken(v string) *SendChainRestAntRequest {
	s.AuthToken = &v
	return s
}

func (s *SendChainRestAntRequest) SetProductInstanceId(v string) *SendChainRestAntRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *SendChainRestAntRequest) SetAccessId(v string) *SendChainRestAntRequest {
	s.AccessId = &v
	return s
}

func (s *SendChainRestAntRequest) SetAntChainId(v string) *SendChainRestAntRequest {
	s.AntChainId = &v
	return s
}

func (s *SendChainRestAntRequest) SetConsortiumId(v string) *SendChainRestAntRequest {
	s.ConsortiumId = &v
	return s
}

func (s *SendChainRestAntRequest) SetRegionId(v string) *SendChainRestAntRequest {
	s.RegionId = &v
	return s
}

type SendChainRestAntResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// result
	Result *bool `json:"result,omitempty" xml:"result,omitempty"`
}

func (s SendChainRestAntResponse) String() string {
	return tea.Prettify(s)
}

func (s SendChainRestAntResponse) GoString() string {
	return s.String()
}

func (s *SendChainRestAntResponse) SetReqMsgId(v string) *SendChainRestAntResponse {
	s.ReqMsgId = &v
	return s
}

func (s *SendChainRestAntResponse) SetResultCode(v string) *SendChainRestAntResponse {
	s.ResultCode = &v
	return s
}

func (s *SendChainRestAntResponse) SetResultMsg(v string) *SendChainRestAntResponse {
	s.ResultMsg = &v
	return s
}

func (s *SendChainRestAntResponse) SetResult(v bool) *SendChainRestAntResponse {
	s.Result = &v
	return s
}

type QueryChainSubnetRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链id
	AntChainId *string `json:"ant_chain_id,omitempty" xml:"ant_chain_id,omitempty" require:"true"`
	// 联盟id
	ConsortiumId *string `json:"consortium_id,omitempty" xml:"consortium_id,omitempty" require:"true"`
}

func (s QueryChainSubnetRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryChainSubnetRequest) GoString() string {
	return s.String()
}

func (s *QueryChainSubnetRequest) SetAuthToken(v string) *QueryChainSubnetRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryChainSubnetRequest) SetProductInstanceId(v string) *QueryChainSubnetRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryChainSubnetRequest) SetAntChainId(v string) *QueryChainSubnetRequest {
	s.AntChainId = &v
	return s
}

func (s *QueryChainSubnetRequest) SetConsortiumId(v string) *QueryChainSubnetRequest {
	s.ConsortiumId = &v
	return s
}

type QueryChainSubnetResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 子链列表信息
	Result *ALiYunChainSubnetList `json:"result,omitempty" xml:"result,omitempty"`
}

func (s QueryChainSubnetResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryChainSubnetResponse) GoString() string {
	return s.String()
}

func (s *QueryChainSubnetResponse) SetReqMsgId(v string) *QueryChainSubnetResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryChainSubnetResponse) SetResultCode(v string) *QueryChainSubnetResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryChainSubnetResponse) SetResultMsg(v string) *QueryChainSubnetResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryChainSubnetResponse) SetResult(v *ALiYunChainSubnetList) *QueryChainSubnetResponse {
	s.Result = v
	return s
}

type CheckChainSubnetCreateRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链id
	AntChainId *string `json:"ant_chain_id,omitempty" xml:"ant_chain_id,omitempty" require:"true"`
	// 联盟id
	ConsortiumId *string `json:"consortium_id,omitempty" xml:"consortium_id,omitempty" require:"true"`
}

func (s CheckChainSubnetCreateRequest) String() string {
	return tea.Prettify(s)
}

func (s CheckChainSubnetCreateRequest) GoString() string {
	return s.String()
}

func (s *CheckChainSubnetCreateRequest) SetAuthToken(v string) *CheckChainSubnetCreateRequest {
	s.AuthToken = &v
	return s
}

func (s *CheckChainSubnetCreateRequest) SetProductInstanceId(v string) *CheckChainSubnetCreateRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CheckChainSubnetCreateRequest) SetAntChainId(v string) *CheckChainSubnetCreateRequest {
	s.AntChainId = &v
	return s
}

func (s *CheckChainSubnetCreateRequest) SetConsortiumId(v string) *CheckChainSubnetCreateRequest {
	s.ConsortiumId = &v
	return s
}

type CheckChainSubnetCreateResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 检查结果
	Result *ALiYunChainSubnetCheck `json:"result,omitempty" xml:"result,omitempty"`
}

func (s CheckChainSubnetCreateResponse) String() string {
	return tea.Prettify(s)
}

func (s CheckChainSubnetCreateResponse) GoString() string {
	return s.String()
}

func (s *CheckChainSubnetCreateResponse) SetReqMsgId(v string) *CheckChainSubnetCreateResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CheckChainSubnetCreateResponse) SetResultCode(v string) *CheckChainSubnetCreateResponse {
	s.ResultCode = &v
	return s
}

func (s *CheckChainSubnetCreateResponse) SetResultMsg(v string) *CheckChainSubnetCreateResponse {
	s.ResultMsg = &v
	return s
}

func (s *CheckChainSubnetCreateResponse) SetResult(v *ALiYunChainSubnetCheck) *CheckChainSubnetCreateResponse {
	s.Result = v
	return s
}

type CreateChainSubnetRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 主链id
	AntChainId *string `json:"ant_chain_id,omitempty" xml:"ant_chain_id,omitempty"`
	// 子链名称
	SubnetName *string `json:"subnet_name,omitempty" xml:"subnet_name,omitempty"`
	// 节点的id
	NodeId *string `json:"node_id,omitempty" xml:"node_id,omitempty"`
	// 联盟成员
	ConsortiumMember *string `json:"consortium_member,omitempty" xml:"consortium_member,omitempty"`
	// 联盟id
	ConsortiumId *string `json:"consortium_id,omitempty" xml:"consortium_id,omitempty"`
}

func (s CreateChainSubnetRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateChainSubnetRequest) GoString() string {
	return s.String()
}

func (s *CreateChainSubnetRequest) SetAuthToken(v string) *CreateChainSubnetRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateChainSubnetRequest) SetProductInstanceId(v string) *CreateChainSubnetRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateChainSubnetRequest) SetAntChainId(v string) *CreateChainSubnetRequest {
	s.AntChainId = &v
	return s
}

func (s *CreateChainSubnetRequest) SetSubnetName(v string) *CreateChainSubnetRequest {
	s.SubnetName = &v
	return s
}

func (s *CreateChainSubnetRequest) SetNodeId(v string) *CreateChainSubnetRequest {
	s.NodeId = &v
	return s
}

func (s *CreateChainSubnetRequest) SetConsortiumMember(v string) *CreateChainSubnetRequest {
	s.ConsortiumMember = &v
	return s
}

func (s *CreateChainSubnetRequest) SetConsortiumId(v string) *CreateChainSubnetRequest {
	s.ConsortiumId = &v
	return s
}

type CreateChainSubnetResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 建链结果
	Result *string `json:"result,omitempty" xml:"result,omitempty"`
}

func (s CreateChainSubnetResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateChainSubnetResponse) GoString() string {
	return s.String()
}

func (s *CreateChainSubnetResponse) SetReqMsgId(v string) *CreateChainSubnetResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateChainSubnetResponse) SetResultCode(v string) *CreateChainSubnetResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateChainSubnetResponse) SetResultMsg(v string) *CreateChainSubnetResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateChainSubnetResponse) SetResult(v string) *CreateChainSubnetResponse {
	s.Result = &v
	return s
}

type ExecChainSubnetRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 子链id
	AntChainId *string `json:"ant_chain_id,omitempty" xml:"ant_chain_id,omitempty"`
	// 联盟id
	ConsortiumId *string `json:"consortium_id,omitempty" xml:"consortium_id,omitempty"`
	// 子链操作的枚举类型
	OperateType *string `json:"operate_type,omitempty" xml:"operate_type,omitempty"`
}

func (s ExecChainSubnetRequest) String() string {
	return tea.Prettify(s)
}

func (s ExecChainSubnetRequest) GoString() string {
	return s.String()
}

func (s *ExecChainSubnetRequest) SetAuthToken(v string) *ExecChainSubnetRequest {
	s.AuthToken = &v
	return s
}

func (s *ExecChainSubnetRequest) SetProductInstanceId(v string) *ExecChainSubnetRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ExecChainSubnetRequest) SetAntChainId(v string) *ExecChainSubnetRequest {
	s.AntChainId = &v
	return s
}

func (s *ExecChainSubnetRequest) SetConsortiumId(v string) *ExecChainSubnetRequest {
	s.ConsortiumId = &v
	return s
}

func (s *ExecChainSubnetRequest) SetOperateType(v string) *ExecChainSubnetRequest {
	s.OperateType = &v
	return s
}

type ExecChainSubnetResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 子链启停的结果
	Result *string `json:"result,omitempty" xml:"result,omitempty"`
}

func (s ExecChainSubnetResponse) String() string {
	return tea.Prettify(s)
}

func (s ExecChainSubnetResponse) GoString() string {
	return s.String()
}

func (s *ExecChainSubnetResponse) SetReqMsgId(v string) *ExecChainSubnetResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ExecChainSubnetResponse) SetResultCode(v string) *ExecChainSubnetResponse {
	s.ResultCode = &v
	return s
}

func (s *ExecChainSubnetResponse) SetResultMsg(v string) *ExecChainSubnetResponse {
	s.ResultMsg = &v
	return s
}

func (s *ExecChainSubnetResponse) SetResult(v string) *ExecChainSubnetResponse {
	s.Result = &v
	return s
}

type UpdateChainSubnetNameRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 子链id
	AntChainId *string `json:"ant_chain_id,omitempty" xml:"ant_chain_id,omitempty"`
	// 联盟id
	ConsortiumId *string `json:"consortium_id,omitempty" xml:"consortium_id,omitempty"`
	// 子链名称
	SubnetName *string `json:"subnet_name,omitempty" xml:"subnet_name,omitempty"`
}

func (s UpdateChainSubnetNameRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateChainSubnetNameRequest) GoString() string {
	return s.String()
}

func (s *UpdateChainSubnetNameRequest) SetAuthToken(v string) *UpdateChainSubnetNameRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateChainSubnetNameRequest) SetProductInstanceId(v string) *UpdateChainSubnetNameRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UpdateChainSubnetNameRequest) SetAntChainId(v string) *UpdateChainSubnetNameRequest {
	s.AntChainId = &v
	return s
}

func (s *UpdateChainSubnetNameRequest) SetConsortiumId(v string) *UpdateChainSubnetNameRequest {
	s.ConsortiumId = &v
	return s
}

func (s *UpdateChainSubnetNameRequest) SetSubnetName(v string) *UpdateChainSubnetNameRequest {
	s.SubnetName = &v
	return s
}

type UpdateChainSubnetNameResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 修改子链的结果
	Result *string `json:"result,omitempty" xml:"result,omitempty"`
}

func (s UpdateChainSubnetNameResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateChainSubnetNameResponse) GoString() string {
	return s.String()
}

func (s *UpdateChainSubnetNameResponse) SetReqMsgId(v string) *UpdateChainSubnetNameResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateChainSubnetNameResponse) SetResultCode(v string) *UpdateChainSubnetNameResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateChainSubnetNameResponse) SetResultMsg(v string) *UpdateChainSubnetNameResponse {
	s.ResultMsg = &v
	return s
}

func (s *UpdateChainSubnetNameResponse) SetResult(v string) *UpdateChainSubnetNameResponse {
	s.Result = &v
	return s
}

type QueryChainSubnetNodeRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 子链id
	AntChainId *string `json:"ant_chain_id,omitempty" xml:"ant_chain_id,omitempty"`
	// 联盟id
	ConsortiumId *string `json:"consortium_id,omitempty" xml:"consortium_id,omitempty"`
}

func (s QueryChainSubnetNodeRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryChainSubnetNodeRequest) GoString() string {
	return s.String()
}

func (s *QueryChainSubnetNodeRequest) SetAuthToken(v string) *QueryChainSubnetNodeRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryChainSubnetNodeRequest) SetProductInstanceId(v string) *QueryChainSubnetNodeRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryChainSubnetNodeRequest) SetAntChainId(v string) *QueryChainSubnetNodeRequest {
	s.AntChainId = &v
	return s
}

func (s *QueryChainSubnetNodeRequest) SetConsortiumId(v string) *QueryChainSubnetNodeRequest {
	s.ConsortiumId = &v
	return s
}

type QueryChainSubnetNodeResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 子链节点信息列表
	Result *ALiYunChainSubnetCheck `json:"result,omitempty" xml:"result,omitempty"`
}

func (s QueryChainSubnetNodeResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryChainSubnetNodeResponse) GoString() string {
	return s.String()
}

func (s *QueryChainSubnetNodeResponse) SetReqMsgId(v string) *QueryChainSubnetNodeResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryChainSubnetNodeResponse) SetResultCode(v string) *QueryChainSubnetNodeResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryChainSubnetNodeResponse) SetResultMsg(v string) *QueryChainSubnetNodeResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryChainSubnetNodeResponse) SetResult(v *ALiYunChainSubnetCheck) *QueryChainSubnetNodeResponse {
	s.Result = v
	return s
}

type DeleteChainSubnetNodeRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 子链id
	AntChainId *string `json:"ant_chain_id,omitempty" xml:"ant_chain_id,omitempty"`
	// 联盟id
	ConsortiumId *string `json:"consortium_id,omitempty" xml:"consortium_id,omitempty"`
	// 待删除的节点id
	NodeId *string `json:"node_id,omitempty" xml:"node_id,omitempty"`
}

func (s DeleteChainSubnetNodeRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteChainSubnetNodeRequest) GoString() string {
	return s.String()
}

func (s *DeleteChainSubnetNodeRequest) SetAuthToken(v string) *DeleteChainSubnetNodeRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteChainSubnetNodeRequest) SetProductInstanceId(v string) *DeleteChainSubnetNodeRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *DeleteChainSubnetNodeRequest) SetAntChainId(v string) *DeleteChainSubnetNodeRequest {
	s.AntChainId = &v
	return s
}

func (s *DeleteChainSubnetNodeRequest) SetConsortiumId(v string) *DeleteChainSubnetNodeRequest {
	s.ConsortiumId = &v
	return s
}

func (s *DeleteChainSubnetNodeRequest) SetNodeId(v string) *DeleteChainSubnetNodeRequest {
	s.NodeId = &v
	return s
}

type DeleteChainSubnetNodeResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 删除节点的结果
	Result *string `json:"result,omitempty" xml:"result,omitempty"`
}

func (s DeleteChainSubnetNodeResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteChainSubnetNodeResponse) GoString() string {
	return s.String()
}

func (s *DeleteChainSubnetNodeResponse) SetReqMsgId(v string) *DeleteChainSubnetNodeResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteChainSubnetNodeResponse) SetResultCode(v string) *DeleteChainSubnetNodeResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteChainSubnetNodeResponse) SetResultMsg(v string) *DeleteChainSubnetNodeResponse {
	s.ResultMsg = &v
	return s
}

func (s *DeleteChainSubnetNodeResponse) SetResult(v string) *DeleteChainSubnetNodeResponse {
	s.Result = &v
	return s
}

type CheckChainSubnetNodeRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 子链id
	AntChainId *string `json:"ant_chain_id,omitempty" xml:"ant_chain_id,omitempty"`
	// 联盟id
	ConsortiumId *string `json:"consortium_id,omitempty" xml:"consortium_id,omitempty"`
}

func (s CheckChainSubnetNodeRequest) String() string {
	return tea.Prettify(s)
}

func (s CheckChainSubnetNodeRequest) GoString() string {
	return s.String()
}

func (s *CheckChainSubnetNodeRequest) SetAuthToken(v string) *CheckChainSubnetNodeRequest {
	s.AuthToken = &v
	return s
}

func (s *CheckChainSubnetNodeRequest) SetProductInstanceId(v string) *CheckChainSubnetNodeRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CheckChainSubnetNodeRequest) SetAntChainId(v string) *CheckChainSubnetNodeRequest {
	s.AntChainId = &v
	return s
}

func (s *CheckChainSubnetNodeRequest) SetConsortiumId(v string) *CheckChainSubnetNodeRequest {
	s.ConsortiumId = &v
	return s
}

type CheckChainSubnetNodeResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 阿里云节点信息列表
	Result []*ALiYunChainNodeInfo `json:"result,omitempty" xml:"result,omitempty" type:"Repeated"`
}

func (s CheckChainSubnetNodeResponse) String() string {
	return tea.Prettify(s)
}

func (s CheckChainSubnetNodeResponse) GoString() string {
	return s.String()
}

func (s *CheckChainSubnetNodeResponse) SetReqMsgId(v string) *CheckChainSubnetNodeResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CheckChainSubnetNodeResponse) SetResultCode(v string) *CheckChainSubnetNodeResponse {
	s.ResultCode = &v
	return s
}

func (s *CheckChainSubnetNodeResponse) SetResultMsg(v string) *CheckChainSubnetNodeResponse {
	s.ResultMsg = &v
	return s
}

func (s *CheckChainSubnetNodeResponse) SetResult(v []*ALiYunChainNodeInfo) *CheckChainSubnetNodeResponse {
	s.Result = v
	return s
}

type AddChainSubnetNodeRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 子链节点
	AntChainId *string `json:"ant_chain_id,omitempty" xml:"ant_chain_id,omitempty"`
	// 联盟id
	ConsortiumId *string `json:"consortium_id,omitempty" xml:"consortium_id,omitempty"`
	// 节点id
	NodeId *string `json:"node_id,omitempty" xml:"node_id,omitempty"`
}

func (s AddChainSubnetNodeRequest) String() string {
	return tea.Prettify(s)
}

func (s AddChainSubnetNodeRequest) GoString() string {
	return s.String()
}

func (s *AddChainSubnetNodeRequest) SetAuthToken(v string) *AddChainSubnetNodeRequest {
	s.AuthToken = &v
	return s
}

func (s *AddChainSubnetNodeRequest) SetProductInstanceId(v string) *AddChainSubnetNodeRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *AddChainSubnetNodeRequest) SetAntChainId(v string) *AddChainSubnetNodeRequest {
	s.AntChainId = &v
	return s
}

func (s *AddChainSubnetNodeRequest) SetConsortiumId(v string) *AddChainSubnetNodeRequest {
	s.ConsortiumId = &v
	return s
}

func (s *AddChainSubnetNodeRequest) SetNodeId(v string) *AddChainSubnetNodeRequest {
	s.NodeId = &v
	return s
}

type AddChainSubnetNodeResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 添加节点的结果
	Result *string `json:"result,omitempty" xml:"result,omitempty"`
}

func (s AddChainSubnetNodeResponse) String() string {
	return tea.Prettify(s)
}

func (s AddChainSubnetNodeResponse) GoString() string {
	return s.String()
}

func (s *AddChainSubnetNodeResponse) SetReqMsgId(v string) *AddChainSubnetNodeResponse {
	s.ReqMsgId = &v
	return s
}

func (s *AddChainSubnetNodeResponse) SetResultCode(v string) *AddChainSubnetNodeResponse {
	s.ResultCode = &v
	return s
}

func (s *AddChainSubnetNodeResponse) SetResultMsg(v string) *AddChainSubnetNodeResponse {
	s.ResultMsg = &v
	return s
}

func (s *AddChainSubnetNodeResponse) SetResult(v string) *AddChainSubnetNodeResponse {
	s.Result = &v
	return s
}

type QueryChainSubnetMemberRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 子链id
	AntChainId *string `json:"ant_chain_id,omitempty" xml:"ant_chain_id,omitempty"`
	// 联盟id
	ConsortiumId *string `json:"consortium_id,omitempty" xml:"consortium_id,omitempty"`
	// 分页编号
	PageNumber *string `json:"page_number,omitempty" xml:"page_number,omitempty"`
	// 分页大小
	PageSize *string `json:"page_size,omitempty" xml:"page_size,omitempty"`
}

func (s QueryChainSubnetMemberRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryChainSubnetMemberRequest) GoString() string {
	return s.String()
}

func (s *QueryChainSubnetMemberRequest) SetAuthToken(v string) *QueryChainSubnetMemberRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryChainSubnetMemberRequest) SetProductInstanceId(v string) *QueryChainSubnetMemberRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryChainSubnetMemberRequest) SetAntChainId(v string) *QueryChainSubnetMemberRequest {
	s.AntChainId = &v
	return s
}

func (s *QueryChainSubnetMemberRequest) SetConsortiumId(v string) *QueryChainSubnetMemberRequest {
	s.ConsortiumId = &v
	return s
}

func (s *QueryChainSubnetMemberRequest) SetPageNumber(v string) *QueryChainSubnetMemberRequest {
	s.PageNumber = &v
	return s
}

func (s *QueryChainSubnetMemberRequest) SetPageSize(v string) *QueryChainSubnetMemberRequest {
	s.PageSize = &v
	return s
}

type QueryChainSubnetMemberResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 子链机构信息
	Result *ALiYunChainSubnetCheck `json:"result,omitempty" xml:"result,omitempty"`
}

func (s QueryChainSubnetMemberResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryChainSubnetMemberResponse) GoString() string {
	return s.String()
}

func (s *QueryChainSubnetMemberResponse) SetReqMsgId(v string) *QueryChainSubnetMemberResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryChainSubnetMemberResponse) SetResultCode(v string) *QueryChainSubnetMemberResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryChainSubnetMemberResponse) SetResultMsg(v string) *QueryChainSubnetMemberResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryChainSubnetMemberResponse) SetResult(v *ALiYunChainSubnetCheck) *QueryChainSubnetMemberResponse {
	s.Result = v
	return s
}

type DeleteChainSubnetMemberRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 子链id
	AntChainId *string `json:"ant_chain_id,omitempty" xml:"ant_chain_id,omitempty"`
	// 联盟id
	ConsortiumId *string `json:"consortium_id,omitempty" xml:"consortium_id,omitempty"`
	// 子链成员id
	MemberId *string `json:"member_id,omitempty" xml:"member_id,omitempty"`
}

func (s DeleteChainSubnetMemberRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteChainSubnetMemberRequest) GoString() string {
	return s.String()
}

func (s *DeleteChainSubnetMemberRequest) SetAuthToken(v string) *DeleteChainSubnetMemberRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteChainSubnetMemberRequest) SetProductInstanceId(v string) *DeleteChainSubnetMemberRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *DeleteChainSubnetMemberRequest) SetAntChainId(v string) *DeleteChainSubnetMemberRequest {
	s.AntChainId = &v
	return s
}

func (s *DeleteChainSubnetMemberRequest) SetConsortiumId(v string) *DeleteChainSubnetMemberRequest {
	s.ConsortiumId = &v
	return s
}

func (s *DeleteChainSubnetMemberRequest) SetMemberId(v string) *DeleteChainSubnetMemberRequest {
	s.MemberId = &v
	return s
}

type DeleteChainSubnetMemberResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 子链成员删除结果
	Result *string `json:"result,omitempty" xml:"result,omitempty"`
}

func (s DeleteChainSubnetMemberResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteChainSubnetMemberResponse) GoString() string {
	return s.String()
}

func (s *DeleteChainSubnetMemberResponse) SetReqMsgId(v string) *DeleteChainSubnetMemberResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteChainSubnetMemberResponse) SetResultCode(v string) *DeleteChainSubnetMemberResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteChainSubnetMemberResponse) SetResultMsg(v string) *DeleteChainSubnetMemberResponse {
	s.ResultMsg = &v
	return s
}

func (s *DeleteChainSubnetMemberResponse) SetResult(v string) *DeleteChainSubnetMemberResponse {
	s.Result = &v
	return s
}

type CheckChainSubnetMemberRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 子链id
	AntChainId *string `json:"ant_chain_id,omitempty" xml:"ant_chain_id,omitempty"`
	// 联盟id
	ConsortiumId *string `json:"consortium_id,omitempty" xml:"consortium_id,omitempty"`
}

func (s CheckChainSubnetMemberRequest) String() string {
	return tea.Prettify(s)
}

func (s CheckChainSubnetMemberRequest) GoString() string {
	return s.String()
}

func (s *CheckChainSubnetMemberRequest) SetAuthToken(v string) *CheckChainSubnetMemberRequest {
	s.AuthToken = &v
	return s
}

func (s *CheckChainSubnetMemberRequest) SetProductInstanceId(v string) *CheckChainSubnetMemberRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CheckChainSubnetMemberRequest) SetAntChainId(v string) *CheckChainSubnetMemberRequest {
	s.AntChainId = &v
	return s
}

func (s *CheckChainSubnetMemberRequest) SetConsortiumId(v string) *CheckChainSubnetMemberRequest {
	s.ConsortiumId = &v
	return s
}

type CheckChainSubnetMemberResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 子链的机构列表
	Result *ALiYunChainSubnetCheck `json:"result,omitempty" xml:"result,omitempty"`
}

func (s CheckChainSubnetMemberResponse) String() string {
	return tea.Prettify(s)
}

func (s CheckChainSubnetMemberResponse) GoString() string {
	return s.String()
}

func (s *CheckChainSubnetMemberResponse) SetReqMsgId(v string) *CheckChainSubnetMemberResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CheckChainSubnetMemberResponse) SetResultCode(v string) *CheckChainSubnetMemberResponse {
	s.ResultCode = &v
	return s
}

func (s *CheckChainSubnetMemberResponse) SetResultMsg(v string) *CheckChainSubnetMemberResponse {
	s.ResultMsg = &v
	return s
}

func (s *CheckChainSubnetMemberResponse) SetResult(v *ALiYunChainSubnetCheck) *CheckChainSubnetMemberResponse {
	s.Result = v
	return s
}

type AddChainSubnetMemberRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 子链id
	AntChainId *string `json:"ant_chain_id,omitempty" xml:"ant_chain_id,omitempty"`
	// 联盟id
	ConsortiumId *string `json:"consortium_id,omitempty" xml:"consortium_id,omitempty"`
	// 联盟成员id
	ConsortiumMemberId *string `json:"consortium_member_id,omitempty" xml:"consortium_member_id,omitempty"`
}

func (s AddChainSubnetMemberRequest) String() string {
	return tea.Prettify(s)
}

func (s AddChainSubnetMemberRequest) GoString() string {
	return s.String()
}

func (s *AddChainSubnetMemberRequest) SetAuthToken(v string) *AddChainSubnetMemberRequest {
	s.AuthToken = &v
	return s
}

func (s *AddChainSubnetMemberRequest) SetProductInstanceId(v string) *AddChainSubnetMemberRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *AddChainSubnetMemberRequest) SetAntChainId(v string) *AddChainSubnetMemberRequest {
	s.AntChainId = &v
	return s
}

func (s *AddChainSubnetMemberRequest) SetConsortiumId(v string) *AddChainSubnetMemberRequest {
	s.ConsortiumId = &v
	return s
}

func (s *AddChainSubnetMemberRequest) SetConsortiumMemberId(v string) *AddChainSubnetMemberRequest {
	s.ConsortiumMemberId = &v
	return s
}

type AddChainSubnetMemberResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 子链添加成员的结果
	Result *string `json:"result,omitempty" xml:"result,omitempty"`
}

func (s AddChainSubnetMemberResponse) String() string {
	return tea.Prettify(s)
}

func (s AddChainSubnetMemberResponse) GoString() string {
	return s.String()
}

func (s *AddChainSubnetMemberResponse) SetReqMsgId(v string) *AddChainSubnetMemberResponse {
	s.ReqMsgId = &v
	return s
}

func (s *AddChainSubnetMemberResponse) SetResultCode(v string) *AddChainSubnetMemberResponse {
	s.ResultCode = &v
	return s
}

func (s *AddChainSubnetMemberResponse) SetResultMsg(v string) *AddChainSubnetMemberResponse {
	s.ResultMsg = &v
	return s
}

func (s *AddChainSubnetMemberResponse) SetResult(v string) *AddChainSubnetMemberResponse {
	s.Result = &v
	return s
}

type ApplyChainSubnetRestRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 子链id
	AntChainId *string `json:"ant_chain_id,omitempty" xml:"ant_chain_id,omitempty"`
	// 联盟id
	ConsortiumId *string `json:"consortium_id,omitempty" xml:"consortium_id,omitempty"`
}

func (s ApplyChainSubnetRestRequest) String() string {
	return tea.Prettify(s)
}

func (s ApplyChainSubnetRestRequest) GoString() string {
	return s.String()
}

func (s *ApplyChainSubnetRestRequest) SetAuthToken(v string) *ApplyChainSubnetRestRequest {
	s.AuthToken = &v
	return s
}

func (s *ApplyChainSubnetRestRequest) SetProductInstanceId(v string) *ApplyChainSubnetRestRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ApplyChainSubnetRestRequest) SetAntChainId(v string) *ApplyChainSubnetRestRequest {
	s.AntChainId = &v
	return s
}

func (s *ApplyChainSubnetRestRequest) SetConsortiumId(v string) *ApplyChainSubnetRestRequest {
	s.ConsortiumId = &v
	return s
}

type ApplyChainSubnetRestResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 阿里云REST开通结果
	Result *ALiYunChainRest `json:"result,omitempty" xml:"result,omitempty"`
}

func (s ApplyChainSubnetRestResponse) String() string {
	return tea.Prettify(s)
}

func (s ApplyChainSubnetRestResponse) GoString() string {
	return s.String()
}

func (s *ApplyChainSubnetRestResponse) SetReqMsgId(v string) *ApplyChainSubnetRestResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ApplyChainSubnetRestResponse) SetResultCode(v string) *ApplyChainSubnetRestResponse {
	s.ResultCode = &v
	return s
}

func (s *ApplyChainSubnetRestResponse) SetResultMsg(v string) *ApplyChainSubnetRestResponse {
	s.ResultMsg = &v
	return s
}

func (s *ApplyChainSubnetRestResponse) SetResult(v *ALiYunChainRest) *ApplyChainSubnetRestResponse {
	s.Result = v
	return s
}

type QueryChainDataexportTaskRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链id
	AntChainId *string `json:"ant_chain_id,omitempty" xml:"ant_chain_id,omitempty" require:"true"`
	// 联盟id
	ConsortiumId *string `json:"consortium_id,omitempty" xml:"consortium_id,omitempty" require:"true"`
}

func (s QueryChainDataexportTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryChainDataexportTaskRequest) GoString() string {
	return s.String()
}

func (s *QueryChainDataexportTaskRequest) SetAuthToken(v string) *QueryChainDataexportTaskRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryChainDataexportTaskRequest) SetProductInstanceId(v string) *QueryChainDataexportTaskRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryChainDataexportTaskRequest) SetAntChainId(v string) *QueryChainDataexportTaskRequest {
	s.AntChainId = &v
	return s
}

func (s *QueryChainDataexportTaskRequest) SetConsortiumId(v string) *QueryChainDataexportTaskRequest {
	s.ConsortiumId = &v
	return s
}

type QueryChainDataexportTaskResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 数据导出结果测试
	Result *string `json:"result,omitempty" xml:"result,omitempty"`
}

func (s QueryChainDataexportTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryChainDataexportTaskResponse) GoString() string {
	return s.String()
}

func (s *QueryChainDataexportTaskResponse) SetReqMsgId(v string) *QueryChainDataexportTaskResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryChainDataexportTaskResponse) SetResultCode(v string) *QueryChainDataexportTaskResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryChainDataexportTaskResponse) SetResultMsg(v string) *QueryChainDataexportTaskResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryChainDataexportTaskResponse) SetResult(v string) *QueryChainDataexportTaskResponse {
	s.Result = &v
	return s
}

type QueryChainDataExportRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链id
	AntChainId *string `json:"ant_chain_id,omitempty" xml:"ant_chain_id,omitempty" require:"true"`
	// 联盟id
	ConsortiumId *string `json:"consortium_id,omitempty" xml:"consortium_id,omitempty" require:"true"`
}

func (s QueryChainDataExportRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryChainDataExportRequest) GoString() string {
	return s.String()
}

func (s *QueryChainDataExportRequest) SetAuthToken(v string) *QueryChainDataExportRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryChainDataExportRequest) SetProductInstanceId(v string) *QueryChainDataExportRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryChainDataExportRequest) SetAntChainId(v string) *QueryChainDataExportRequest {
	s.AntChainId = &v
	return s
}

func (s *QueryChainDataExportRequest) SetConsortiumId(v string) *QueryChainDataExportRequest {
	s.ConsortiumId = &v
	return s
}

type QueryChainDataExportResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 返回结果为TriggerDTO类型的list
	Result []*TriggerDTOStructBody `json:"result,omitempty" xml:"result,omitempty" type:"Repeated"`
}

func (s QueryChainDataExportResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryChainDataExportResponse) GoString() string {
	return s.String()
}

func (s *QueryChainDataExportResponse) SetReqMsgId(v string) *QueryChainDataExportResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryChainDataExportResponse) SetResultCode(v string) *QueryChainDataExportResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryChainDataExportResponse) SetResultMsg(v string) *QueryChainDataExportResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryChainDataExportResponse) SetResult(v []*TriggerDTOStructBody) *QueryChainDataExportResponse {
	s.Result = v
	return s
}

type CreateChainDataexportTaskRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链id
	AntChainId *string `json:"ant_chain_id,omitempty" xml:"ant_chain_id,omitempty" require:"true"`
	// 联盟id
	ConsortiumId *string `json:"consortium_id,omitempty" xml:"consortium_id,omitempty" require:"true"`
	// {}
	Trigger *TriggerDTOStructBody `json:"trigger,omitempty" xml:"trigger,omitempty" require:"true"`
}

func (s CreateChainDataexportTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateChainDataexportTaskRequest) GoString() string {
	return s.String()
}

func (s *CreateChainDataexportTaskRequest) SetAuthToken(v string) *CreateChainDataexportTaskRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateChainDataexportTaskRequest) SetProductInstanceId(v string) *CreateChainDataexportTaskRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateChainDataexportTaskRequest) SetAntChainId(v string) *CreateChainDataexportTaskRequest {
	s.AntChainId = &v
	return s
}

func (s *CreateChainDataexportTaskRequest) SetConsortiumId(v string) *CreateChainDataexportTaskRequest {
	s.ConsortiumId = &v
	return s
}

func (s *CreateChainDataexportTaskRequest) SetTrigger(v *TriggerDTOStructBody) *CreateChainDataexportTaskRequest {
	s.Trigger = v
	return s
}

type CreateChainDataexportTaskResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// ""
	Result *string `json:"result,omitempty" xml:"result,omitempty"`
}

func (s CreateChainDataexportTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateChainDataexportTaskResponse) GoString() string {
	return s.String()
}

func (s *CreateChainDataexportTaskResponse) SetReqMsgId(v string) *CreateChainDataexportTaskResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateChainDataexportTaskResponse) SetResultCode(v string) *CreateChainDataexportTaskResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateChainDataexportTaskResponse) SetResultMsg(v string) *CreateChainDataexportTaskResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateChainDataexportTaskResponse) SetResult(v string) *CreateChainDataexportTaskResponse {
	s.Result = &v
	return s
}

type CreateChainTaskIdRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链id
	AntChainId *string `json:"ant_chain_id,omitempty" xml:"ant_chain_id,omitempty" require:"true"`
	// 联盟id
	ConsortiumId *string `json:"consortium_id,omitempty" xml:"consortium_id,omitempty" require:"true"`
	// TriggerDTO结构体
	Trigger *TriggerDTOStructBody `json:"trigger,omitempty" xml:"trigger,omitempty" require:"true"`
}

func (s CreateChainTaskIdRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateChainTaskIdRequest) GoString() string {
	return s.String()
}

func (s *CreateChainTaskIdRequest) SetAuthToken(v string) *CreateChainTaskIdRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateChainTaskIdRequest) SetProductInstanceId(v string) *CreateChainTaskIdRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateChainTaskIdRequest) SetAntChainId(v string) *CreateChainTaskIdRequest {
	s.AntChainId = &v
	return s
}

func (s *CreateChainTaskIdRequest) SetConsortiumId(v string) *CreateChainTaskIdRequest {
	s.ConsortiumId = &v
	return s
}

func (s *CreateChainTaskIdRequest) SetTrigger(v *TriggerDTOStructBody) *CreateChainTaskIdRequest {
	s.Trigger = v
	return s
}

type CreateChainTaskIdResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// ""
	Result *string `json:"result,omitempty" xml:"result,omitempty"`
}

func (s CreateChainTaskIdResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateChainTaskIdResponse) GoString() string {
	return s.String()
}

func (s *CreateChainTaskIdResponse) SetReqMsgId(v string) *CreateChainTaskIdResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateChainTaskIdResponse) SetResultCode(v string) *CreateChainTaskIdResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateChainTaskIdResponse) SetResultMsg(v string) *CreateChainTaskIdResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateChainTaskIdResponse) SetResult(v string) *CreateChainTaskIdResponse {
	s.Result = &v
	return s
}

type QueryChainDataPreviewRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链id
	AntChainId *string `json:"ant_chain_id,omitempty" xml:"ant_chain_id,omitempty" require:"true"`
	// 联盟id
	ConsortiumId *string `json:"consortium_id,omitempty" xml:"consortium_id,omitempty" require:"true"`
	// 任务id
	TaskId *string `json:"task_id,omitempty" xml:"task_id,omitempty" require:"true"`
}

func (s QueryChainDataPreviewRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryChainDataPreviewRequest) GoString() string {
	return s.String()
}

func (s *QueryChainDataPreviewRequest) SetAuthToken(v string) *QueryChainDataPreviewRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryChainDataPreviewRequest) SetProductInstanceId(v string) *QueryChainDataPreviewRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryChainDataPreviewRequest) SetAntChainId(v string) *QueryChainDataPreviewRequest {
	s.AntChainId = &v
	return s
}

func (s *QueryChainDataPreviewRequest) SetConsortiumId(v string) *QueryChainDataPreviewRequest {
	s.ConsortiumId = &v
	return s
}

func (s *QueryChainDataPreviewRequest) SetTaskId(v string) *QueryChainDataPreviewRequest {
	s.TaskId = &v
	return s
}

type QueryChainDataPreviewResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 返回预览数据
	Result *string `json:"result,omitempty" xml:"result,omitempty"`
}

func (s QueryChainDataPreviewResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryChainDataPreviewResponse) GoString() string {
	return s.String()
}

func (s *QueryChainDataPreviewResponse) SetReqMsgId(v string) *QueryChainDataPreviewResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryChainDataPreviewResponse) SetResultCode(v string) *QueryChainDataPreviewResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryChainDataPreviewResponse) SetResultMsg(v string) *QueryChainDataPreviewResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryChainDataPreviewResponse) SetResult(v string) *QueryChainDataPreviewResponse {
	s.Result = &v
	return s
}

type QueryChainMappingRelationshipRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链id
	AntChainId *string `json:"ant_chain_id,omitempty" xml:"ant_chain_id,omitempty" require:"true"`
	// 联盟id
	ConsortiumId *string `json:"consortium_id,omitempty" xml:"consortium_id,omitempty" require:"true"`
	// ""
	ServiceId *string `json:"service_id,omitempty" xml:"service_id,omitempty" require:"true"`
	// 映射方法类型
	MappingType *string `json:"mapping_type,omitempty" xml:"mapping_type,omitempty" require:"true"`
}

func (s QueryChainMappingRelationshipRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryChainMappingRelationshipRequest) GoString() string {
	return s.String()
}

func (s *QueryChainMappingRelationshipRequest) SetAuthToken(v string) *QueryChainMappingRelationshipRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryChainMappingRelationshipRequest) SetProductInstanceId(v string) *QueryChainMappingRelationshipRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryChainMappingRelationshipRequest) SetAntChainId(v string) *QueryChainMappingRelationshipRequest {
	s.AntChainId = &v
	return s
}

func (s *QueryChainMappingRelationshipRequest) SetConsortiumId(v string) *QueryChainMappingRelationshipRequest {
	s.ConsortiumId = &v
	return s
}

func (s *QueryChainMappingRelationshipRequest) SetServiceId(v string) *QueryChainMappingRelationshipRequest {
	s.ServiceId = &v
	return s
}

func (s *QueryChainMappingRelationshipRequest) SetMappingType(v string) *QueryChainMappingRelationshipRequest {
	s.MappingType = &v
	return s
}

type QueryChainMappingRelationshipResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 映射结果
	Result *string `json:"result,omitempty" xml:"result,omitempty"`
}

func (s QueryChainMappingRelationshipResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryChainMappingRelationshipResponse) GoString() string {
	return s.String()
}

func (s *QueryChainMappingRelationshipResponse) SetReqMsgId(v string) *QueryChainMappingRelationshipResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryChainMappingRelationshipResponse) SetResultCode(v string) *QueryChainMappingRelationshipResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryChainMappingRelationshipResponse) SetResultMsg(v string) *QueryChainMappingRelationshipResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryChainMappingRelationshipResponse) SetResult(v string) *QueryChainMappingRelationshipResponse {
	s.Result = &v
	return s
}

type CreateChainTableSqlRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链id
	AntChainId *string `json:"ant_chain_id,omitempty" xml:"ant_chain_id,omitempty" require:"true"`
	// 联盟id
	ConsortiumId *string `json:"consortium_id,omitempty" xml:"consortium_id,omitempty" require:"true"`
	// {}
	Trigger *TriggerDTOStructBody `json:"trigger,omitempty" xml:"trigger,omitempty" require:"true"`
}

func (s CreateChainTableSqlRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateChainTableSqlRequest) GoString() string {
	return s.String()
}

func (s *CreateChainTableSqlRequest) SetAuthToken(v string) *CreateChainTableSqlRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateChainTableSqlRequest) SetProductInstanceId(v string) *CreateChainTableSqlRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateChainTableSqlRequest) SetAntChainId(v string) *CreateChainTableSqlRequest {
	s.AntChainId = &v
	return s
}

func (s *CreateChainTableSqlRequest) SetConsortiumId(v string) *CreateChainTableSqlRequest {
	s.ConsortiumId = &v
	return s
}

func (s *CreateChainTableSqlRequest) SetTrigger(v *TriggerDTOStructBody) *CreateChainTableSqlRequest {
	s.Trigger = v
	return s
}

type CreateChainTableSqlResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 创建导出MySQL任务失败，获取 Create Table 语句
	Result *string `json:"result,omitempty" xml:"result,omitempty"`
}

func (s CreateChainTableSqlResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateChainTableSqlResponse) GoString() string {
	return s.String()
}

func (s *CreateChainTableSqlResponse) SetReqMsgId(v string) *CreateChainTableSqlResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateChainTableSqlResponse) SetResultCode(v string) *CreateChainTableSqlResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateChainTableSqlResponse) SetResultMsg(v string) *CreateChainTableSqlResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateChainTableSqlResponse) SetResult(v string) *CreateChainTableSqlResponse {
	s.Result = &v
	return s
}

type UpdateChainDataexportStatusRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链id
	AntChainId *string `json:"ant_chain_id,omitempty" xml:"ant_chain_id,omitempty" require:"true"`
	// 联盟id
	ConsortiumId *string `json:"consortium_id,omitempty" xml:"consortium_id,omitempty" require:"true"`
	// "9481b612d6ca4cfdbecc5c5d395eda423f007745-233d-4860-8fd4-a107233ace6c"
	TriggerName *string `json:"trigger_name,omitempty" xml:"trigger_name,omitempty" require:"true"`
	//  "Enabled/Disabled/DELETE"
	StatusAction *string `json:"status_action,omitempty" xml:"status_action,omitempty" require:"true"`
}

func (s UpdateChainDataexportStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateChainDataexportStatusRequest) GoString() string {
	return s.String()
}

func (s *UpdateChainDataexportStatusRequest) SetAuthToken(v string) *UpdateChainDataexportStatusRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateChainDataexportStatusRequest) SetProductInstanceId(v string) *UpdateChainDataexportStatusRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UpdateChainDataexportStatusRequest) SetAntChainId(v string) *UpdateChainDataexportStatusRequest {
	s.AntChainId = &v
	return s
}

func (s *UpdateChainDataexportStatusRequest) SetConsortiumId(v string) *UpdateChainDataexportStatusRequest {
	s.ConsortiumId = &v
	return s
}

func (s *UpdateChainDataexportStatusRequest) SetTriggerName(v string) *UpdateChainDataexportStatusRequest {
	s.TriggerName = &v
	return s
}

func (s *UpdateChainDataexportStatusRequest) SetStatusAction(v string) *UpdateChainDataexportStatusRequest {
	s.StatusAction = &v
	return s
}

type UpdateChainDataexportStatusResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// {}
	Result *TriggerDTOStructBody `json:"result,omitempty" xml:"result,omitempty"`
}

func (s UpdateChainDataexportStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateChainDataexportStatusResponse) GoString() string {
	return s.String()
}

func (s *UpdateChainDataexportStatusResponse) SetReqMsgId(v string) *UpdateChainDataexportStatusResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateChainDataexportStatusResponse) SetResultCode(v string) *UpdateChainDataexportStatusResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateChainDataexportStatusResponse) SetResultMsg(v string) *UpdateChainDataexportStatusResponse {
	s.ResultMsg = &v
	return s
}

func (s *UpdateChainDataexportStatusResponse) SetResult(v *TriggerDTOStructBody) *UpdateChainDataexportStatusResponse {
	s.Result = v
	return s
}

type UpdateChainDataexportTaskRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 联盟id
	ConsortiumId *string `json:"consortium_id,omitempty" xml:"consortium_id,omitempty" require:"true"`
	// 链id
	AntChainId *string `json:"ant_chain_id,omitempty" xml:"ant_chain_id,omitempty" require:"true"`
	// 任务名称
	TriggerName *string `json:"trigger_name,omitempty" xml:"trigger_name,omitempty" require:"true"`
	// 导出任务接口体
	Trigger *TriggerDTOStructBody `json:"trigger,omitempty" xml:"trigger,omitempty" require:"true"`
}

func (s UpdateChainDataexportTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateChainDataexportTaskRequest) GoString() string {
	return s.String()
}

func (s *UpdateChainDataexportTaskRequest) SetAuthToken(v string) *UpdateChainDataexportTaskRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateChainDataexportTaskRequest) SetProductInstanceId(v string) *UpdateChainDataexportTaskRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UpdateChainDataexportTaskRequest) SetConsortiumId(v string) *UpdateChainDataexportTaskRequest {
	s.ConsortiumId = &v
	return s
}

func (s *UpdateChainDataexportTaskRequest) SetAntChainId(v string) *UpdateChainDataexportTaskRequest {
	s.AntChainId = &v
	return s
}

func (s *UpdateChainDataexportTaskRequest) SetTriggerName(v string) *UpdateChainDataexportTaskRequest {
	s.TriggerName = &v
	return s
}

func (s *UpdateChainDataexportTaskRequest) SetTrigger(v *TriggerDTOStructBody) *UpdateChainDataexportTaskRequest {
	s.Trigger = v
	return s
}

type UpdateChainDataexportTaskResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	//  修改导出任务（名称、描述、告警地址）信息结构体
	//
	Result *TriggerDTOStructBody `json:"result,omitempty" xml:"result,omitempty"`
}

func (s UpdateChainDataexportTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateChainDataexportTaskResponse) GoString() string {
	return s.String()
}

func (s *UpdateChainDataexportTaskResponse) SetReqMsgId(v string) *UpdateChainDataexportTaskResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateChainDataexportTaskResponse) SetResultCode(v string) *UpdateChainDataexportTaskResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateChainDataexportTaskResponse) SetResultMsg(v string) *UpdateChainDataexportTaskResponse {
	s.ResultMsg = &v
	return s
}

func (s *UpdateChainDataexportTaskResponse) SetResult(v *TriggerDTOStructBody) *UpdateChainDataexportTaskResponse {
	s.Result = v
	return s
}

type QueryChainFailureLogRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链id
	AntChainId *string `json:"ant_chain_id,omitempty" xml:"ant_chain_id,omitempty" require:"true"`
	// 联盟id
	ConsortiumId *string `json:"consortium_id,omitempty" xml:"consortium_id,omitempty" require:"true"`
	// ""
	TriggerName *string `json:"trigger_name,omitempty" xml:"trigger_name,omitempty" require:"true"`
	// ""
	StatusAction *string `json:"status_action,omitempty" xml:"status_action,omitempty"`
	// 当前页码
	PageNo *string `json:"page_no,omitempty" xml:"page_no,omitempty"`
	// 页面规格
	PageSize *string `json:"page_size,omitempty" xml:"page_size,omitempty"`
}

func (s QueryChainFailureLogRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryChainFailureLogRequest) GoString() string {
	return s.String()
}

func (s *QueryChainFailureLogRequest) SetAuthToken(v string) *QueryChainFailureLogRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryChainFailureLogRequest) SetProductInstanceId(v string) *QueryChainFailureLogRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryChainFailureLogRequest) SetAntChainId(v string) *QueryChainFailureLogRequest {
	s.AntChainId = &v
	return s
}

func (s *QueryChainFailureLogRequest) SetConsortiumId(v string) *QueryChainFailureLogRequest {
	s.ConsortiumId = &v
	return s
}

func (s *QueryChainFailureLogRequest) SetTriggerName(v string) *QueryChainFailureLogRequest {
	s.TriggerName = &v
	return s
}

func (s *QueryChainFailureLogRequest) SetStatusAction(v string) *QueryChainFailureLogRequest {
	s.StatusAction = &v
	return s
}

func (s *QueryChainFailureLogRequest) SetPageNo(v string) *QueryChainFailureLogRequest {
	s.PageNo = &v
	return s
}

func (s *QueryChainFailureLogRequest) SetPageSize(v string) *QueryChainFailureLogRequest {
	s.PageSize = &v
	return s
}

type QueryChainFailureLogResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// {}
	Result *CommonResponsePageableStructBody `json:"result,omitempty" xml:"result,omitempty"`
}

func (s QueryChainFailureLogResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryChainFailureLogResponse) GoString() string {
	return s.String()
}

func (s *QueryChainFailureLogResponse) SetReqMsgId(v string) *QueryChainFailureLogResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryChainFailureLogResponse) SetResultCode(v string) *QueryChainFailureLogResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryChainFailureLogResponse) SetResultMsg(v string) *QueryChainFailureLogResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryChainFailureLogResponse) SetResult(v *CommonResponsePageableStructBody) *QueryChainFailureLogResponse {
	s.Result = v
	return s
}

type UpdateChainFailureLogRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链id
	AntChainId *string `json:"ant_chain_id,omitempty" xml:"ant_chain_id,omitempty" require:"true"`
	// 联盟id
	ConsortiumId *string `json:"consortium_id,omitempty" xml:"consortium_id,omitempty" require:"true"`
	// 日志名称
	TriggerName *string `json:"trigger_name,omitempty" xml:"trigger_name,omitempty"`
	// 日志状态
	StatusAction *string `json:"status_action,omitempty" xml:"status_action,omitempty"`
	// 日志id
	LogId *string `json:"log_id,omitempty" xml:"log_id,omitempty"`
}

func (s UpdateChainFailureLogRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateChainFailureLogRequest) GoString() string {
	return s.String()
}

func (s *UpdateChainFailureLogRequest) SetAuthToken(v string) *UpdateChainFailureLogRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateChainFailureLogRequest) SetProductInstanceId(v string) *UpdateChainFailureLogRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UpdateChainFailureLogRequest) SetAntChainId(v string) *UpdateChainFailureLogRequest {
	s.AntChainId = &v
	return s
}

func (s *UpdateChainFailureLogRequest) SetConsortiumId(v string) *UpdateChainFailureLogRequest {
	s.ConsortiumId = &v
	return s
}

func (s *UpdateChainFailureLogRequest) SetTriggerName(v string) *UpdateChainFailureLogRequest {
	s.TriggerName = &v
	return s
}

func (s *UpdateChainFailureLogRequest) SetStatusAction(v string) *UpdateChainFailureLogRequest {
	s.StatusAction = &v
	return s
}

func (s *UpdateChainFailureLogRequest) SetLogId(v string) *UpdateChainFailureLogRequest {
	s.LogId = &v
	return s
}

type UpdateChainFailureLogResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 返回结果
	Result *string `json:"result,omitempty" xml:"result,omitempty"`
}

func (s UpdateChainFailureLogResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateChainFailureLogResponse) GoString() string {
	return s.String()
}

func (s *UpdateChainFailureLogResponse) SetReqMsgId(v string) *UpdateChainFailureLogResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateChainFailureLogResponse) SetResultCode(v string) *UpdateChainFailureLogResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateChainFailureLogResponse) SetResultMsg(v string) *UpdateChainFailureLogResponse {
	s.ResultMsg = &v
	return s
}

func (s *UpdateChainFailureLogResponse) SetResult(v string) *UpdateChainFailureLogResponse {
	s.Result = &v
	return s
}

type QueryChainManagedMqRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链id
	AntChainId *string `json:"ant_chain_id,omitempty" xml:"ant_chain_id,omitempty" require:"true"`
	// 联盟id
	ConsortiumId *string `json:"consortium_id,omitempty" xml:"consortium_id,omitempty" require:"true"`
}

func (s QueryChainManagedMqRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryChainManagedMqRequest) GoString() string {
	return s.String()
}

func (s *QueryChainManagedMqRequest) SetAuthToken(v string) *QueryChainManagedMqRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryChainManagedMqRequest) SetProductInstanceId(v string) *QueryChainManagedMqRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryChainManagedMqRequest) SetAntChainId(v string) *QueryChainManagedMqRequest {
	s.AntChainId = &v
	return s
}

func (s *QueryChainManagedMqRequest) SetConsortiumId(v string) *QueryChainManagedMqRequest {
	s.ConsortiumId = &v
	return s
}

type QueryChainManagedMqResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// ManagedMQDTO接口体列表
	Result []*ManagedMQDTOStructBody `json:"result,omitempty" xml:"result,omitempty" type:"Repeated"`
}

func (s QueryChainManagedMqResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryChainManagedMqResponse) GoString() string {
	return s.String()
}

func (s *QueryChainManagedMqResponse) SetReqMsgId(v string) *QueryChainManagedMqResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryChainManagedMqResponse) SetResultCode(v string) *QueryChainManagedMqResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryChainManagedMqResponse) SetResultMsg(v string) *QueryChainManagedMqResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryChainManagedMqResponse) SetResult(v []*ManagedMQDTOStructBody) *QueryChainManagedMqResponse {
	s.Result = v
	return s
}

type InitChainManagedMqRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链id
	AntChainId *string `json:"ant_chain_id,omitempty" xml:"ant_chain_id,omitempty" require:"true"`
	// 联盟id
	ConsortiumId *string `json:"consortium_id,omitempty" xml:"consortium_id,omitempty" require:"true"`
}

func (s InitChainManagedMqRequest) String() string {
	return tea.Prettify(s)
}

func (s InitChainManagedMqRequest) GoString() string {
	return s.String()
}

func (s *InitChainManagedMqRequest) SetAuthToken(v string) *InitChainManagedMqRequest {
	s.AuthToken = &v
	return s
}

func (s *InitChainManagedMqRequest) SetProductInstanceId(v string) *InitChainManagedMqRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *InitChainManagedMqRequest) SetAntChainId(v string) *InitChainManagedMqRequest {
	s.AntChainId = &v
	return s
}

func (s *InitChainManagedMqRequest) SetConsortiumId(v string) *InitChainManagedMqRequest {
	s.ConsortiumId = &v
	return s
}

type InitChainManagedMqResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 初始化托管 MQ 实例
	Result *ManagedMQDTOStructBody `json:"result,omitempty" xml:"result,omitempty"`
}

func (s InitChainManagedMqResponse) String() string {
	return tea.Prettify(s)
}

func (s InitChainManagedMqResponse) GoString() string {
	return s.String()
}

func (s *InitChainManagedMqResponse) SetReqMsgId(v string) *InitChainManagedMqResponse {
	s.ReqMsgId = &v
	return s
}

func (s *InitChainManagedMqResponse) SetResultCode(v string) *InitChainManagedMqResponse {
	s.ResultCode = &v
	return s
}

func (s *InitChainManagedMqResponse) SetResultMsg(v string) *InitChainManagedMqResponse {
	s.ResultMsg = &v
	return s
}

func (s *InitChainManagedMqResponse) SetResult(v *ManagedMQDTOStructBody) *InitChainManagedMqResponse {
	s.Result = v
	return s
}

type QueryChainUseDeclarationRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
}

func (s QueryChainUseDeclarationRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryChainUseDeclarationRequest) GoString() string {
	return s.String()
}

func (s *QueryChainUseDeclarationRequest) SetAuthToken(v string) *QueryChainUseDeclarationRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryChainUseDeclarationRequest) SetProductInstanceId(v string) *QueryChainUseDeclarationRequest {
	s.ProductInstanceId = &v
	return s
}

type QueryChainUseDeclarationResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 用户申报用途类
	Result []*ChainPurpose `json:"result,omitempty" xml:"result,omitempty" type:"Repeated"`
}

func (s QueryChainUseDeclarationResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryChainUseDeclarationResponse) GoString() string {
	return s.String()
}

func (s *QueryChainUseDeclarationResponse) SetReqMsgId(v string) *QueryChainUseDeclarationResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryChainUseDeclarationResponse) SetResultCode(v string) *QueryChainUseDeclarationResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryChainUseDeclarationResponse) SetResultMsg(v string) *QueryChainUseDeclarationResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryChainUseDeclarationResponse) SetResult(v []*ChainPurpose) *QueryChainUseDeclarationResponse {
	s.Result = v
	return s
}

type ApplyChainUseDeclarationRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 用途KEY
	ChainPurposeKey *string `json:"chain_purpose_key,omitempty" xml:"chain_purpose_key,omitempty" require:"true"`
	// 选择其他类型时，用户输入（必填）
	ChainPurposeExtend *string `json:"chain_purpose_extend,omitempty" xml:"chain_purpose_extend,omitempty"`
	// 简短说明用途
	//
	// 选择其他类型时，用户输入
	ChainPurposeItem *string `json:"chain_purpose_item,omitempty" xml:"chain_purpose_item,omitempty"`
}

func (s ApplyChainUseDeclarationRequest) String() string {
	return tea.Prettify(s)
}

func (s ApplyChainUseDeclarationRequest) GoString() string {
	return s.String()
}

func (s *ApplyChainUseDeclarationRequest) SetAuthToken(v string) *ApplyChainUseDeclarationRequest {
	s.AuthToken = &v
	return s
}

func (s *ApplyChainUseDeclarationRequest) SetProductInstanceId(v string) *ApplyChainUseDeclarationRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ApplyChainUseDeclarationRequest) SetChainPurposeKey(v string) *ApplyChainUseDeclarationRequest {
	s.ChainPurposeKey = &v
	return s
}

func (s *ApplyChainUseDeclarationRequest) SetChainPurposeExtend(v string) *ApplyChainUseDeclarationRequest {
	s.ChainPurposeExtend = &v
	return s
}

func (s *ApplyChainUseDeclarationRequest) SetChainPurposeItem(v string) *ApplyChainUseDeclarationRequest {
	s.ChainPurposeItem = &v
	return s
}

type ApplyChainUseDeclarationResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 蚂蚁链申报用途接口体
	Result *AntChainPurposeResponse `json:"result,omitempty" xml:"result,omitempty"`
}

func (s ApplyChainUseDeclarationResponse) String() string {
	return tea.Prettify(s)
}

func (s ApplyChainUseDeclarationResponse) GoString() string {
	return s.String()
}

func (s *ApplyChainUseDeclarationResponse) SetReqMsgId(v string) *ApplyChainUseDeclarationResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ApplyChainUseDeclarationResponse) SetResultCode(v string) *ApplyChainUseDeclarationResponse {
	s.ResultCode = &v
	return s
}

func (s *ApplyChainUseDeclarationResponse) SetResultMsg(v string) *ApplyChainUseDeclarationResponse {
	s.ResultMsg = &v
	return s
}

func (s *ApplyChainUseDeclarationResponse) SetResult(v *AntChainPurposeResponse) *ApplyChainUseDeclarationResponse {
	s.Result = v
	return s
}

type QueryChainUseListRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
}

func (s QueryChainUseListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryChainUseListRequest) GoString() string {
	return s.String()
}

func (s *QueryChainUseListRequest) SetAuthToken(v string) *QueryChainUseListRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryChainUseListRequest) SetProductInstanceId(v string) *QueryChainUseListRequest {
	s.ProductInstanceId = &v
	return s
}

type QueryChainUseListResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 蚂蚁链用途申报结构体
	Result *AntChainPurposeResponse `json:"result,omitempty" xml:"result,omitempty"`
}

func (s QueryChainUseListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryChainUseListResponse) GoString() string {
	return s.String()
}

func (s *QueryChainUseListResponse) SetReqMsgId(v string) *QueryChainUseListResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryChainUseListResponse) SetResultCode(v string) *QueryChainUseListResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryChainUseListResponse) SetResultMsg(v string) *QueryChainUseListResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryChainUseListResponse) SetResult(v *AntChainPurposeResponse) *QueryChainUseListResponse {
	s.Result = v
	return s
}

type CheckChainSensitiveWordsRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 用途KEY
	ChainPurposeKey *string `json:"chain_purpose_key,omitempty" xml:"chain_purpose_key,omitempty" require:"true"`
	// 敏感词检查条目内容
	ChainPurposeItem *string `json:"chain_purpose_item,omitempty" xml:"chain_purpose_item,omitempty" require:"true"`
}

func (s CheckChainSensitiveWordsRequest) String() string {
	return tea.Prettify(s)
}

func (s CheckChainSensitiveWordsRequest) GoString() string {
	return s.String()
}

func (s *CheckChainSensitiveWordsRequest) SetAuthToken(v string) *CheckChainSensitiveWordsRequest {
	s.AuthToken = &v
	return s
}

func (s *CheckChainSensitiveWordsRequest) SetProductInstanceId(v string) *CheckChainSensitiveWordsRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CheckChainSensitiveWordsRequest) SetChainPurposeKey(v string) *CheckChainSensitiveWordsRequest {
	s.ChainPurposeKey = &v
	return s
}

func (s *CheckChainSensitiveWordsRequest) SetChainPurposeItem(v string) *CheckChainSensitiveWordsRequest {
	s.ChainPurposeItem = &v
	return s
}

type CheckChainSensitiveWordsResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 返回敏感词校验结果
	Result *string `json:"result,omitempty" xml:"result,omitempty"`
}

func (s CheckChainSensitiveWordsResponse) String() string {
	return tea.Prettify(s)
}

func (s CheckChainSensitiveWordsResponse) GoString() string {
	return s.String()
}

func (s *CheckChainSensitiveWordsResponse) SetReqMsgId(v string) *CheckChainSensitiveWordsResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CheckChainSensitiveWordsResponse) SetResultCode(v string) *CheckChainSensitiveWordsResponse {
	s.ResultCode = &v
	return s
}

func (s *CheckChainSensitiveWordsResponse) SetResultMsg(v string) *CheckChainSensitiveWordsResponse {
	s.ResultMsg = &v
	return s
}

func (s *CheckChainSensitiveWordsResponse) SetResult(v string) *CheckChainSensitiveWordsResponse {
	s.Result = &v
	return s
}

type CreateChainAccountAntkmsRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链账户名称
	Account *string `json:"account,omitempty" xml:"account,omitempty" require:"true" minLength:"1"`
	// 链ID
	AntChainId *string `json:"ant_chain_id,omitempty" xml:"ant_chain_id,omitempty" require:"true" minLength:"1"`
}

func (s CreateChainAccountAntkmsRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateChainAccountAntkmsRequest) GoString() string {
	return s.String()
}

func (s *CreateChainAccountAntkmsRequest) SetAuthToken(v string) *CreateChainAccountAntkmsRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateChainAccountAntkmsRequest) SetProductInstanceId(v string) *CreateChainAccountAntkmsRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateChainAccountAntkmsRequest) SetAccount(v string) *CreateChainAccountAntkmsRequest {
	s.Account = &v
	return s
}

func (s *CreateChainAccountAntkmsRequest) SetAntChainId(v string) *CreateChainAccountAntkmsRequest {
	s.AntChainId = &v
	return s
}

type CreateChainAccountAntkmsResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 阿里云托管账户返回值
	Result *ALiYunChainKmsAccount `json:"result,omitempty" xml:"result,omitempty"`
}

func (s CreateChainAccountAntkmsResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateChainAccountAntkmsResponse) GoString() string {
	return s.String()
}

func (s *CreateChainAccountAntkmsResponse) SetReqMsgId(v string) *CreateChainAccountAntkmsResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateChainAccountAntkmsResponse) SetResultCode(v string) *CreateChainAccountAntkmsResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateChainAccountAntkmsResponse) SetResultMsg(v string) *CreateChainAccountAntkmsResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateChainAccountAntkmsResponse) SetResult(v *ALiYunChainKmsAccount) *CreateChainAccountAntkmsResponse {
	s.Result = v
	return s
}

type OpenChainServiceRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 2e7e22c42bb8419bbf99b7f56aa2f17f
	AntChainId *string `json:"ant_chain_id,omitempty" xml:"ant_chain_id,omitempty" require:"true"`
	// 联盟id
	ConsortiumId *string `json:"consortium_id,omitempty" xml:"consortium_id,omitempty" require:"true"`
	// 内部产品code
	ProductCode *string `json:"product_code,omitempty" xml:"product_code,omitempty" require:"true"`
	// 自定义信息，json格式
	Extend *string `json:"extend,omitempty" xml:"extend,omitempty"`
}

func (s OpenChainServiceRequest) String() string {
	return tea.Prettify(s)
}

func (s OpenChainServiceRequest) GoString() string {
	return s.String()
}

func (s *OpenChainServiceRequest) SetAuthToken(v string) *OpenChainServiceRequest {
	s.AuthToken = &v
	return s
}

func (s *OpenChainServiceRequest) SetProductInstanceId(v string) *OpenChainServiceRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *OpenChainServiceRequest) SetAntChainId(v string) *OpenChainServiceRequest {
	s.AntChainId = &v
	return s
}

func (s *OpenChainServiceRequest) SetConsortiumId(v string) *OpenChainServiceRequest {
	s.ConsortiumId = &v
	return s
}

func (s *OpenChainServiceRequest) SetProductCode(v string) *OpenChainServiceRequest {
	s.ProductCode = &v
	return s
}

func (s *OpenChainServiceRequest) SetExtend(v string) *OpenChainServiceRequest {
	s.Extend = &v
	return s
}

type OpenChainServiceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 服务开通受理状态：
	//     UN_OPEN(0, "product.status.unopen"),
	//     INIT(1, "product.status.init"),
	//     OPEN(2, "product.status.open"),
	//     CLOSE(3, "product.status.close"),
	//     UNKNOWN(4, "product.status.unknown"),
	//     STOP(5, "product.status.stop");
	Result *int64 `json:"result,omitempty" xml:"result,omitempty"`
}

func (s OpenChainServiceResponse) String() string {
	return tea.Prettify(s)
}

func (s OpenChainServiceResponse) GoString() string {
	return s.String()
}

func (s *OpenChainServiceResponse) SetReqMsgId(v string) *OpenChainServiceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *OpenChainServiceResponse) SetResultCode(v string) *OpenChainServiceResponse {
	s.ResultCode = &v
	return s
}

func (s *OpenChainServiceResponse) SetResultMsg(v string) *OpenChainServiceResponse {
	s.ResultMsg = &v
	return s
}

func (s *OpenChainServiceResponse) SetResult(v int64) *OpenChainServiceResponse {
	s.Result = &v
	return s
}

type CheckChainServiceRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链id
	AntChainId *string `json:"ant_chain_id,omitempty" xml:"ant_chain_id,omitempty" require:"true"`
	// 联盟id
	ConsortiumId *string `json:"consortium_id,omitempty" xml:"consortium_id,omitempty" require:"true"`
	// BAAS-SERVICE1
	ProductCode *string `json:"product_code,omitempty" xml:"product_code,omitempty" require:"true"`
}

func (s CheckChainServiceRequest) String() string {
	return tea.Prettify(s)
}

func (s CheckChainServiceRequest) GoString() string {
	return s.String()
}

func (s *CheckChainServiceRequest) SetAuthToken(v string) *CheckChainServiceRequest {
	s.AuthToken = &v
	return s
}

func (s *CheckChainServiceRequest) SetProductInstanceId(v string) *CheckChainServiceRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CheckChainServiceRequest) SetAntChainId(v string) *CheckChainServiceRequest {
	s.AntChainId = &v
	return s
}

func (s *CheckChainServiceRequest) SetConsortiumId(v string) *CheckChainServiceRequest {
	s.ConsortiumId = &v
	return s
}

func (s *CheckChainServiceRequest) SetProductCode(v string) *CheckChainServiceRequest {
	s.ProductCode = &v
	return s
}

type CheckChainServiceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 服务开通受理状态： UN_OPEN(0, "product.status.unopen"), INIT(1, "product.status.init"), OPEN(2, "product.status.open"), CLOSE(3, "product.status.close"), UNKNOWN(4, "product.status.unknown"), STOP(5, "product.status.stop");
	Result *int64 `json:"result,omitempty" xml:"result,omitempty"`
}

func (s CheckChainServiceResponse) String() string {
	return tea.Prettify(s)
}

func (s CheckChainServiceResponse) GoString() string {
	return s.String()
}

func (s *CheckChainServiceResponse) SetReqMsgId(v string) *CheckChainServiceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CheckChainServiceResponse) SetResultCode(v string) *CheckChainServiceResponse {
	s.ResultCode = &v
	return s
}

func (s *CheckChainServiceResponse) SetResultMsg(v string) *CheckChainServiceResponse {
	s.ResultMsg = &v
	return s
}

func (s *CheckChainServiceResponse) SetResult(v int64) *CheckChainServiceResponse {
	s.Result = &v
	return s
}

type CloseChainServiceRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链id
	AntChainId *string `json:"ant_chain_id,omitempty" xml:"ant_chain_id,omitempty" require:"true"`
	// 联盟id
	ConsortiumId *string `json:"consortium_id,omitempty" xml:"consortium_id,omitempty" require:"true"`
	// 内部产品code
	ProductCode *string `json:"product_code,omitempty" xml:"product_code,omitempty" require:"true"`
	// 自定义信息，json格式
	Extend *string `json:"extend,omitempty" xml:"extend,omitempty"`
}

func (s CloseChainServiceRequest) String() string {
	return tea.Prettify(s)
}

func (s CloseChainServiceRequest) GoString() string {
	return s.String()
}

func (s *CloseChainServiceRequest) SetAuthToken(v string) *CloseChainServiceRequest {
	s.AuthToken = &v
	return s
}

func (s *CloseChainServiceRequest) SetProductInstanceId(v string) *CloseChainServiceRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CloseChainServiceRequest) SetAntChainId(v string) *CloseChainServiceRequest {
	s.AntChainId = &v
	return s
}

func (s *CloseChainServiceRequest) SetConsortiumId(v string) *CloseChainServiceRequest {
	s.ConsortiumId = &v
	return s
}

func (s *CloseChainServiceRequest) SetProductCode(v string) *CloseChainServiceRequest {
	s.ProductCode = &v
	return s
}

func (s *CloseChainServiceRequest) SetExtend(v string) *CloseChainServiceRequest {
	s.Extend = &v
	return s
}

type CloseChainServiceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 服务关闭受理状态： UN_OPEN(0, "product.status.unopen"), INIT(1, "product.status.init"), OPEN(2, "product.status.open"), CLOSE(3, "product.status.close"), UNKNOWN(4, "product.status.unknown"), STOP(5, "product.status.stop");
	Result *int64 `json:"result,omitempty" xml:"result,omitempty"`
}

func (s CloseChainServiceResponse) String() string {
	return tea.Prettify(s)
}

func (s CloseChainServiceResponse) GoString() string {
	return s.String()
}

func (s *CloseChainServiceResponse) SetReqMsgId(v string) *CloseChainServiceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CloseChainServiceResponse) SetResultCode(v string) *CloseChainServiceResponse {
	s.ResultCode = &v
	return s
}

func (s *CloseChainServiceResponse) SetResultMsg(v string) *CloseChainServiceResponse {
	s.ResultMsg = &v
	return s
}

func (s *CloseChainServiceResponse) SetResult(v int64) *CloseChainServiceResponse {
	s.Result = &v
	return s
}

type StartAmlCorporationJoinprepareRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 企业加入BaaS创建的反洗钱联盟时使用的邮箱地址
	Email *string `json:"email,omitempty" xml:"email,omitempty" require:"true"`
	// 扩展信息字段
	Extension *string `json:"extension,omitempty" xml:"extension,omitempty"`
	// 目前支持ECDSA K1公私密钥对
	PublicKey *string `json:"public_key,omitempty" xml:"public_key,omitempty" require:"true"`
	// 数字身份恢复密钥，支持ECDSA K1曲线的公私密钥对
	RecoveryKey *string `json:"recovery_key,omitempty" xml:"recovery_key,omitempty"`
}

func (s StartAmlCorporationJoinprepareRequest) String() string {
	return tea.Prettify(s)
}

func (s StartAmlCorporationJoinprepareRequest) GoString() string {
	return s.String()
}

func (s *StartAmlCorporationJoinprepareRequest) SetAuthToken(v string) *StartAmlCorporationJoinprepareRequest {
	s.AuthToken = &v
	return s
}

func (s *StartAmlCorporationJoinprepareRequest) SetProductInstanceId(v string) *StartAmlCorporationJoinprepareRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *StartAmlCorporationJoinprepareRequest) SetEmail(v string) *StartAmlCorporationJoinprepareRequest {
	s.Email = &v
	return s
}

func (s *StartAmlCorporationJoinprepareRequest) SetExtension(v string) *StartAmlCorporationJoinprepareRequest {
	s.Extension = &v
	return s
}

func (s *StartAmlCorporationJoinprepareRequest) SetPublicKey(v string) *StartAmlCorporationJoinprepareRequest {
	s.PublicKey = &v
	return s
}

func (s *StartAmlCorporationJoinprepareRequest) SetRecoveryKey(v string) *StartAmlCorporationJoinprepareRequest {
	s.RecoveryKey = &v
	return s
}

type StartAmlCorporationJoinprepareResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 企业在反洗钱联盟中的唯一区块链标示，后续和平台的交互都要通过该标示
	Did *string `json:"did,omitempty" xml:"did,omitempty"`
	// mytf的认证信息，加盟方可以验证其有效性
	MytfInfo *string `json:"mytf_info,omitempty" xml:"mytf_info,omitempty"`
	// 平台提供的各类tapp信息，入驻方需要从中选择自己使用的tapp，并记录下tapp的加密私钥和签名密钥；后续平台发给加盟放的所有信息都会携带签名；而所有发往TAPP的数据都需要使用对应加密公钥进行加密来保证数据安全
	TappInfos []*string `json:"tapp_infos,omitempty" xml:"tapp_infos,omitempty" type:"Repeated"`
}

func (s StartAmlCorporationJoinprepareResponse) String() string {
	return tea.Prettify(s)
}

func (s StartAmlCorporationJoinprepareResponse) GoString() string {
	return s.String()
}

func (s *StartAmlCorporationJoinprepareResponse) SetReqMsgId(v string) *StartAmlCorporationJoinprepareResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartAmlCorporationJoinprepareResponse) SetResultCode(v string) *StartAmlCorporationJoinprepareResponse {
	s.ResultCode = &v
	return s
}

func (s *StartAmlCorporationJoinprepareResponse) SetResultMsg(v string) *StartAmlCorporationJoinprepareResponse {
	s.ResultMsg = &v
	return s
}

func (s *StartAmlCorporationJoinprepareResponse) SetDid(v string) *StartAmlCorporationJoinprepareResponse {
	s.Did = &v
	return s
}

func (s *StartAmlCorporationJoinprepareResponse) SetMytfInfo(v string) *StartAmlCorporationJoinprepareResponse {
	s.MytfInfo = &v
	return s
}

func (s *StartAmlCorporationJoinprepareResponse) SetTappInfos(v []*string) *StartAmlCorporationJoinprepareResponse {
	s.TappInfos = v
	return s
}

type StartAmlCorporationJoincommitRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 入驻准备阶段得到的数字标识
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 选择采用的TAPP ID编号，如果不填，系统将选择默认的kyc tapp进行执行
	TappId *string `json:"tapp_id,omitempty" xml:"tapp_id,omitempty"`
	// 对应tapp的版本号。默认选择最新版本
	TappVersion *int64 `json:"tapp_version,omitempty" xml:"tapp_version,omitempty"`
}

func (s StartAmlCorporationJoincommitRequest) String() string {
	return tea.Prettify(s)
}

func (s StartAmlCorporationJoincommitRequest) GoString() string {
	return s.String()
}

func (s *StartAmlCorporationJoincommitRequest) SetAuthToken(v string) *StartAmlCorporationJoincommitRequest {
	s.AuthToken = &v
	return s
}

func (s *StartAmlCorporationJoincommitRequest) SetProductInstanceId(v string) *StartAmlCorporationJoincommitRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *StartAmlCorporationJoincommitRequest) SetDid(v string) *StartAmlCorporationJoincommitRequest {
	s.Did = &v
	return s
}

func (s *StartAmlCorporationJoincommitRequest) SetTappId(v string) *StartAmlCorporationJoincommitRequest {
	s.TappId = &v
	return s
}

func (s *StartAmlCorporationJoincommitRequest) SetTappVersion(v int64) *StartAmlCorporationJoincommitRequest {
	s.TappVersion = &v
	return s
}

type StartAmlCorporationJoincommitResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s StartAmlCorporationJoincommitResponse) String() string {
	return tea.Prettify(s)
}

func (s StartAmlCorporationJoincommitResponse) GoString() string {
	return s.String()
}

func (s *StartAmlCorporationJoincommitResponse) SetReqMsgId(v string) *StartAmlCorporationJoincommitResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartAmlCorporationJoincommitResponse) SetResultCode(v string) *StartAmlCorporationJoincommitResponse {
	s.ResultCode = &v
	return s
}

func (s *StartAmlCorporationJoincommitResponse) SetResultMsg(v string) *StartAmlCorporationJoincommitResponse {
	s.ResultMsg = &v
	return s
}

type StartAmlPersonTwofactorRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 完整证件号，与证件类型配对
	CertNo *string `json:"cert_no,omitempty" xml:"cert_no,omitempty" require:"true"`
	// 证件类型
	// 001，身份证
	// 目前只支持身份证
	CertType *int64 `json:"cert_type,omitempty" xml:"cert_type,omitempty" require:"true"`
	// 张三
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
}

func (s StartAmlPersonTwofactorRequest) String() string {
	return tea.Prettify(s)
}

func (s StartAmlPersonTwofactorRequest) GoString() string {
	return s.String()
}

func (s *StartAmlPersonTwofactorRequest) SetAuthToken(v string) *StartAmlPersonTwofactorRequest {
	s.AuthToken = &v
	return s
}

func (s *StartAmlPersonTwofactorRequest) SetProductInstanceId(v string) *StartAmlPersonTwofactorRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *StartAmlPersonTwofactorRequest) SetCertNo(v string) *StartAmlPersonTwofactorRequest {
	s.CertNo = &v
	return s
}

func (s *StartAmlPersonTwofactorRequest) SetCertType(v int64) *StartAmlPersonTwofactorRequest {
	s.CertType = &v
	return s
}

func (s *StartAmlPersonTwofactorRequest) SetName(v string) *StartAmlPersonTwofactorRequest {
	s.Name = &v
	return s
}

type StartAmlPersonTwofactorResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 如果验证通过会为用户创建did
	Did *string `json:"did,omitempty" xml:"did,omitempty"`
}

func (s StartAmlPersonTwofactorResponse) String() string {
	return tea.Prettify(s)
}

func (s StartAmlPersonTwofactorResponse) GoString() string {
	return s.String()
}

func (s *StartAmlPersonTwofactorResponse) SetReqMsgId(v string) *StartAmlPersonTwofactorResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartAmlPersonTwofactorResponse) SetResultCode(v string) *StartAmlPersonTwofactorResponse {
	s.ResultCode = &v
	return s
}

func (s *StartAmlPersonTwofactorResponse) SetResultMsg(v string) *StartAmlPersonTwofactorResponse {
	s.ResultMsg = &v
	return s
}

func (s *StartAmlPersonTwofactorResponse) SetDid(v string) *StartAmlPersonTwofactorResponse {
	s.Did = &v
	return s
}

type SaveBusinessDepositRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 业务链对应的bizId
	//
	BizId *string `json:"biz_id,omitempty" xml:"biz_id,omitempty" require:"true"`
	// 存证的内容
	Data *string `json:"data,omitempty" xml:"data,omitempty" require:"true"`
	// 用户的did地址
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 任意用户自定义的keyId(需要唯一)，根据该keyId可以查找存证的内容，若不填则使用txHash作为keyId
	KeyId *string `json:"key_id,omitempty" xml:"key_id,omitempty"`
}

func (s SaveBusinessDepositRequest) String() string {
	return tea.Prettify(s)
}

func (s SaveBusinessDepositRequest) GoString() string {
	return s.String()
}

func (s *SaveBusinessDepositRequest) SetAuthToken(v string) *SaveBusinessDepositRequest {
	s.AuthToken = &v
	return s
}

func (s *SaveBusinessDepositRequest) SetProductInstanceId(v string) *SaveBusinessDepositRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *SaveBusinessDepositRequest) SetBizId(v string) *SaveBusinessDepositRequest {
	s.BizId = &v
	return s
}

func (s *SaveBusinessDepositRequest) SetData(v string) *SaveBusinessDepositRequest {
	s.Data = &v
	return s
}

func (s *SaveBusinessDepositRequest) SetDid(v string) *SaveBusinessDepositRequest {
	s.Did = &v
	return s
}

func (s *SaveBusinessDepositRequest) SetKeyId(v string) *SaveBusinessDepositRequest {
	s.KeyId = &v
	return s
}

type SaveBusinessDepositResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// bizid+accountid+keyId/txHash 组成的唯一id，用户可以根据该id到服务中查询链上内容
	DepositId *string `json:"deposit_id,omitempty" xml:"deposit_id,omitempty"`
	// 是否存在成功
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// 链上返回的txHash值
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty"`
}

func (s SaveBusinessDepositResponse) String() string {
	return tea.Prettify(s)
}

func (s SaveBusinessDepositResponse) GoString() string {
	return s.String()
}

func (s *SaveBusinessDepositResponse) SetReqMsgId(v string) *SaveBusinessDepositResponse {
	s.ReqMsgId = &v
	return s
}

func (s *SaveBusinessDepositResponse) SetResultCode(v string) *SaveBusinessDepositResponse {
	s.ResultCode = &v
	return s
}

func (s *SaveBusinessDepositResponse) SetResultMsg(v string) *SaveBusinessDepositResponse {
	s.ResultMsg = &v
	return s
}

func (s *SaveBusinessDepositResponse) SetDepositId(v string) *SaveBusinessDepositResponse {
	s.DepositId = &v
	return s
}

func (s *SaveBusinessDepositResponse) SetStatus(v string) *SaveBusinessDepositResponse {
	s.Status = &v
	return s
}

func (s *SaveBusinessDepositResponse) SetTxHash(v string) *SaveBusinessDepositResponse {
	s.TxHash = &v
	return s
}

type SaveBusinessDepositMetadataRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 业务链对应的bizId
	//
	BizId *string `json:"biz_id,omitempty" xml:"biz_id,omitempty" require:"true"`
	// 具体存证的内容
	Data []*DepositMetaDataItem `json:"data,omitempty" xml:"data,omitempty" require:"true" type:"Repeated"`
	// 用户的did地址
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 用户自定义唯一keyId，可用该keyId到业务服务中查询存证内容
	KeyId *string `json:"key_id,omitempty" xml:"key_id,omitempty"`
}

func (s SaveBusinessDepositMetadataRequest) String() string {
	return tea.Prettify(s)
}

func (s SaveBusinessDepositMetadataRequest) GoString() string {
	return s.String()
}

func (s *SaveBusinessDepositMetadataRequest) SetAuthToken(v string) *SaveBusinessDepositMetadataRequest {
	s.AuthToken = &v
	return s
}

func (s *SaveBusinessDepositMetadataRequest) SetProductInstanceId(v string) *SaveBusinessDepositMetadataRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *SaveBusinessDepositMetadataRequest) SetBizId(v string) *SaveBusinessDepositMetadataRequest {
	s.BizId = &v
	return s
}

func (s *SaveBusinessDepositMetadataRequest) SetData(v []*DepositMetaDataItem) *SaveBusinessDepositMetadataRequest {
	s.Data = v
	return s
}

func (s *SaveBusinessDepositMetadataRequest) SetDid(v string) *SaveBusinessDepositMetadataRequest {
	s.Did = &v
	return s
}

func (s *SaveBusinessDepositMetadataRequest) SetKeyId(v string) *SaveBusinessDepositMetadataRequest {
	s.KeyId = &v
	return s
}

type SaveBusinessDepositMetadataResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 存证id，由bizId+accountId+keyId组成
	DepositId *string `json:"deposit_id,omitempty" xml:"deposit_id,omitempty"`
	// 是否存证成功
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// 链上存证对应的txHash
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty"`
}

func (s SaveBusinessDepositMetadataResponse) String() string {
	return tea.Prettify(s)
}

func (s SaveBusinessDepositMetadataResponse) GoString() string {
	return s.String()
}

func (s *SaveBusinessDepositMetadataResponse) SetReqMsgId(v string) *SaveBusinessDepositMetadataResponse {
	s.ReqMsgId = &v
	return s
}

func (s *SaveBusinessDepositMetadataResponse) SetResultCode(v string) *SaveBusinessDepositMetadataResponse {
	s.ResultCode = &v
	return s
}

func (s *SaveBusinessDepositMetadataResponse) SetResultMsg(v string) *SaveBusinessDepositMetadataResponse {
	s.ResultMsg = &v
	return s
}

func (s *SaveBusinessDepositMetadataResponse) SetDepositId(v string) *SaveBusinessDepositMetadataResponse {
	s.DepositId = &v
	return s
}

func (s *SaveBusinessDepositMetadataResponse) SetStatus(v string) *SaveBusinessDepositMetadataResponse {
	s.Status = &v
	return s
}

func (s *SaveBusinessDepositMetadataResponse) SetTxHash(v string) *SaveBusinessDepositMetadataResponse {
	s.TxHash = &v
	return s
}

type SaveBusinessDepositEncryptRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 业务链对应的bizId
	BizId *string `json:"biz_id,omitempty" xml:"biz_id,omitempty" require:"true"`
	// 要加密存储的内容
	Data *string `json:"data,omitempty" xml:"data,omitempty" require:"true"`
	// 用户did地址
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 业务唯一id，只需要本用户的应用唯一即可，因为最终会与用户的accountId拼接起来
	KeyId *string `json:"key_id,omitempty" xml:"key_id,omitempty"`
}

func (s SaveBusinessDepositEncryptRequest) String() string {
	return tea.Prettify(s)
}

func (s SaveBusinessDepositEncryptRequest) GoString() string {
	return s.String()
}

func (s *SaveBusinessDepositEncryptRequest) SetAuthToken(v string) *SaveBusinessDepositEncryptRequest {
	s.AuthToken = &v
	return s
}

func (s *SaveBusinessDepositEncryptRequest) SetProductInstanceId(v string) *SaveBusinessDepositEncryptRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *SaveBusinessDepositEncryptRequest) SetBizId(v string) *SaveBusinessDepositEncryptRequest {
	s.BizId = &v
	return s
}

func (s *SaveBusinessDepositEncryptRequest) SetData(v string) *SaveBusinessDepositEncryptRequest {
	s.Data = &v
	return s
}

func (s *SaveBusinessDepositEncryptRequest) SetDid(v string) *SaveBusinessDepositEncryptRequest {
	s.Did = &v
	return s
}

func (s *SaveBusinessDepositEncryptRequest) SetKeyId(v string) *SaveBusinessDepositEncryptRequest {
	s.KeyId = &v
	return s
}

type SaveBusinessDepositEncryptResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 可以用该id到服务上查询链的信息
	DepositId *string `json:"deposit_id,omitempty" xml:"deposit_id,omitempty"`
	// 是否存证成功
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// 交易的txHash
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty"`
}

func (s SaveBusinessDepositEncryptResponse) String() string {
	return tea.Prettify(s)
}

func (s SaveBusinessDepositEncryptResponse) GoString() string {
	return s.String()
}

func (s *SaveBusinessDepositEncryptResponse) SetReqMsgId(v string) *SaveBusinessDepositEncryptResponse {
	s.ReqMsgId = &v
	return s
}

func (s *SaveBusinessDepositEncryptResponse) SetResultCode(v string) *SaveBusinessDepositEncryptResponse {
	s.ResultCode = &v
	return s
}

func (s *SaveBusinessDepositEncryptResponse) SetResultMsg(v string) *SaveBusinessDepositEncryptResponse {
	s.ResultMsg = &v
	return s
}

func (s *SaveBusinessDepositEncryptResponse) SetDepositId(v string) *SaveBusinessDepositEncryptResponse {
	s.DepositId = &v
	return s
}

func (s *SaveBusinessDepositEncryptResponse) SetStatus(v string) *SaveBusinessDepositEncryptResponse {
	s.Status = &v
	return s
}

func (s *SaveBusinessDepositEncryptResponse) SetTxHash(v string) *SaveBusinessDepositEncryptResponse {
	s.TxHash = &v
	return s
}

type SaveBusinessDepositEncryptmetadataRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 业务链对应的bizId
	//
	BizId *string `json:"biz_id,omitempty" xml:"biz_id,omitempty" require:"true"`
	// 要加密的数据
	Data *string `json:"data,omitempty" xml:"data,omitempty" require:"true"`
	// 用户的did身份地址
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 业务唯一id，只需要本链本用户所用的业务keyId唯一即可
	KeyId *string `json:"key_id,omitempty" xml:"key_id,omitempty"`
	// 存证内容描述，格式为json，其中type为支持的类型：
	// text：文本类型
	// image：图片类型(待添加)
	// video：视频类型(待添加)
	// txHash：存证引用类型(待添加)
	// map:地图类型(待添加)
	Metadata *string `json:"metadata,omitempty" xml:"metadata,omitempty" require:"true"`
}

func (s SaveBusinessDepositEncryptmetadataRequest) String() string {
	return tea.Prettify(s)
}

func (s SaveBusinessDepositEncryptmetadataRequest) GoString() string {
	return s.String()
}

func (s *SaveBusinessDepositEncryptmetadataRequest) SetAuthToken(v string) *SaveBusinessDepositEncryptmetadataRequest {
	s.AuthToken = &v
	return s
}

func (s *SaveBusinessDepositEncryptmetadataRequest) SetProductInstanceId(v string) *SaveBusinessDepositEncryptmetadataRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *SaveBusinessDepositEncryptmetadataRequest) SetBizId(v string) *SaveBusinessDepositEncryptmetadataRequest {
	s.BizId = &v
	return s
}

func (s *SaveBusinessDepositEncryptmetadataRequest) SetData(v string) *SaveBusinessDepositEncryptmetadataRequest {
	s.Data = &v
	return s
}

func (s *SaveBusinessDepositEncryptmetadataRequest) SetDid(v string) *SaveBusinessDepositEncryptmetadataRequest {
	s.Did = &v
	return s
}

func (s *SaveBusinessDepositEncryptmetadataRequest) SetKeyId(v string) *SaveBusinessDepositEncryptmetadataRequest {
	s.KeyId = &v
	return s
}

func (s *SaveBusinessDepositEncryptmetadataRequest) SetMetadata(v string) *SaveBusinessDepositEncryptmetadataRequest {
	s.Metadata = &v
	return s
}

type SaveBusinessDepositEncryptmetadataResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 存证id，由bizId+accountId+keyId组成
	DepositId *string `json:"deposit_id,omitempty" xml:"deposit_id,omitempty"`
	// 是否存证成功
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// 链上交易的id
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty"`
}

func (s SaveBusinessDepositEncryptmetadataResponse) String() string {
	return tea.Prettify(s)
}

func (s SaveBusinessDepositEncryptmetadataResponse) GoString() string {
	return s.String()
}

func (s *SaveBusinessDepositEncryptmetadataResponse) SetReqMsgId(v string) *SaveBusinessDepositEncryptmetadataResponse {
	s.ReqMsgId = &v
	return s
}

func (s *SaveBusinessDepositEncryptmetadataResponse) SetResultCode(v string) *SaveBusinessDepositEncryptmetadataResponse {
	s.ResultCode = &v
	return s
}

func (s *SaveBusinessDepositEncryptmetadataResponse) SetResultMsg(v string) *SaveBusinessDepositEncryptmetadataResponse {
	s.ResultMsg = &v
	return s
}

func (s *SaveBusinessDepositEncryptmetadataResponse) SetDepositId(v string) *SaveBusinessDepositEncryptmetadataResponse {
	s.DepositId = &v
	return s
}

func (s *SaveBusinessDepositEncryptmetadataResponse) SetStatus(v string) *SaveBusinessDepositEncryptmetadataResponse {
	s.Status = &v
	return s
}

func (s *SaveBusinessDepositEncryptmetadataResponse) SetTxHash(v string) *SaveBusinessDepositEncryptmetadataResponse {
	s.TxHash = &v
	return s
}

type CreateBusinessDidRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 用户身份证号
	IdCardNumber *string `json:"id_card_number,omitempty" xml:"id_card_number,omitempty" require:"true"`
	// 用户手机号
	PhoneNumber *string `json:"phone_number,omitempty" xml:"phone_number,omitempty" require:"true"`
	// 用户姓名
	UserName *string `json:"user_name,omitempty" xml:"user_name,omitempty" require:"true"`
}

func (s CreateBusinessDidRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateBusinessDidRequest) GoString() string {
	return s.String()
}

func (s *CreateBusinessDidRequest) SetAuthToken(v string) *CreateBusinessDidRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateBusinessDidRequest) SetProductInstanceId(v string) *CreateBusinessDidRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateBusinessDidRequest) SetIdCardNumber(v string) *CreateBusinessDidRequest {
	s.IdCardNumber = &v
	return s
}

func (s *CreateBusinessDidRequest) SetPhoneNumber(v string) *CreateBusinessDidRequest {
	s.PhoneNumber = &v
	return s
}

func (s *CreateBusinessDidRequest) SetUserName(v string) *CreateBusinessDidRequest {
	s.UserName = &v
	return s
}

type CreateBusinessDidResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 链的业务编号
	BizId *string `json:"biz_id,omitempty" xml:"biz_id,omitempty"`
	// 生成的did用户身份号
	Did *string `json:"did,omitempty" xml:"did,omitempty"`
	// isv创建者身份
	IsvAccount *string `json:"isv_account,omitempty" xml:"isv_account,omitempty"`
	// 是否创建成功
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
}

func (s CreateBusinessDidResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateBusinessDidResponse) GoString() string {
	return s.String()
}

func (s *CreateBusinessDidResponse) SetReqMsgId(v string) *CreateBusinessDidResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateBusinessDidResponse) SetResultCode(v string) *CreateBusinessDidResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateBusinessDidResponse) SetResultMsg(v string) *CreateBusinessDidResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateBusinessDidResponse) SetBizId(v string) *CreateBusinessDidResponse {
	s.BizId = &v
	return s
}

func (s *CreateBusinessDidResponse) SetDid(v string) *CreateBusinessDidResponse {
	s.Did = &v
	return s
}

func (s *CreateBusinessDidResponse) SetIsvAccount(v string) *CreateBusinessDidResponse {
	s.IsvAccount = &v
	return s
}

func (s *CreateBusinessDidResponse) SetStatus(v string) *CreateBusinessDidResponse {
	s.Status = &v
	return s
}

type CreateBusinessBizaccountRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 业务链对应的bizId
	BizId *string `json:"biz_id,omitempty" xml:"biz_id,omitempty" require:"true"`
	// 申请者对应的did账户
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
}

func (s CreateBusinessBizaccountRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateBusinessBizaccountRequest) GoString() string {
	return s.String()
}

func (s *CreateBusinessBizaccountRequest) SetAuthToken(v string) *CreateBusinessBizaccountRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateBusinessBizaccountRequest) SetProductInstanceId(v string) *CreateBusinessBizaccountRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateBusinessBizaccountRequest) SetBizId(v string) *CreateBusinessBizaccountRequest {
	s.BizId = &v
	return s
}

func (s *CreateBusinessBizaccountRequest) SetDid(v string) *CreateBusinessBizaccountRequest {
	s.Did = &v
	return s
}

type CreateBusinessBizaccountResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// did地址
	Did *string `json:"did,omitempty" xml:"did,omitempty"`
	// 租户账户
	IsvAccount *string `json:"isv_account,omitempty" xml:"isv_account,omitempty"`
	// 生成的账户在kms上的密钥id
	//
	KmsId *string `json:"kms_id,omitempty" xml:"kms_id,omitempty"`
	// 调用接口是否成功
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
}

func (s CreateBusinessBizaccountResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateBusinessBizaccountResponse) GoString() string {
	return s.String()
}

func (s *CreateBusinessBizaccountResponse) SetReqMsgId(v string) *CreateBusinessBizaccountResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateBusinessBizaccountResponse) SetResultCode(v string) *CreateBusinessBizaccountResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateBusinessBizaccountResponse) SetResultMsg(v string) *CreateBusinessBizaccountResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateBusinessBizaccountResponse) SetDid(v string) *CreateBusinessBizaccountResponse {
	s.Did = &v
	return s
}

func (s *CreateBusinessBizaccountResponse) SetIsvAccount(v string) *CreateBusinessBizaccountResponse {
	s.IsvAccount = &v
	return s
}

func (s *CreateBusinessBizaccountResponse) SetKmsId(v string) *CreateBusinessBizaccountResponse {
	s.KmsId = &v
	return s
}

func (s *CreateBusinessBizaccountResponse) SetStatus(v string) *CreateBusinessBizaccountResponse {
	s.Status = &v
	return s
}

type QueryBusinessDepositRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 业务链对应的bizId
	//
	BizId *string `json:"biz_id,omitempty" xml:"biz_id,omitempty" require:"true"`
	// 用户did身份
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 存证数据业务逻辑id
	KeyId *string `json:"key_id,omitempty" xml:"key_id,omitempty" require:"true"`
	// 存证数据对应的链上交易哈希，若无则返回最新的交易哈希。
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty"`
}

func (s QueryBusinessDepositRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryBusinessDepositRequest) GoString() string {
	return s.String()
}

func (s *QueryBusinessDepositRequest) SetAuthToken(v string) *QueryBusinessDepositRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryBusinessDepositRequest) SetProductInstanceId(v string) *QueryBusinessDepositRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryBusinessDepositRequest) SetBizId(v string) *QueryBusinessDepositRequest {
	s.BizId = &v
	return s
}

func (s *QueryBusinessDepositRequest) SetDid(v string) *QueryBusinessDepositRequest {
	s.Did = &v
	return s
}

func (s *QueryBusinessDepositRequest) SetKeyId(v string) *QueryBusinessDepositRequest {
	s.KeyId = &v
	return s
}

func (s *QueryBusinessDepositRequest) SetTxHash(v string) *QueryBusinessDepositRequest {
	s.TxHash = &v
	return s
}

type QueryBusinessDepositResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 具体存证数据
	DepositData *string `json:"deposit_data,omitempty" xml:"deposit_data,omitempty"`
	// 业务逻辑对应的存证id
	DepositId *string `json:"deposit_id,omitempty" xml:"deposit_id,omitempty"`
	// keyId对应的所有相关的历史交易记录
	HistoryTxHashes []*string `json:"history_tx_hashes,omitempty" xml:"history_tx_hashes,omitempty" type:"Repeated"`
	// 是否查询成功
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
}

func (s QueryBusinessDepositResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryBusinessDepositResponse) GoString() string {
	return s.String()
}

func (s *QueryBusinessDepositResponse) SetReqMsgId(v string) *QueryBusinessDepositResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryBusinessDepositResponse) SetResultCode(v string) *QueryBusinessDepositResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryBusinessDepositResponse) SetResultMsg(v string) *QueryBusinessDepositResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryBusinessDepositResponse) SetDepositData(v string) *QueryBusinessDepositResponse {
	s.DepositData = &v
	return s
}

func (s *QueryBusinessDepositResponse) SetDepositId(v string) *QueryBusinessDepositResponse {
	s.DepositId = &v
	return s
}

func (s *QueryBusinessDepositResponse) SetHistoryTxHashes(v []*string) *QueryBusinessDepositResponse {
	s.HistoryTxHashes = v
	return s
}

func (s *QueryBusinessDepositResponse) SetStatus(v string) *QueryBusinessDepositResponse {
	s.Status = &v
	return s
}

type AuthBusinessDepositdataRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 业务链对应的bizId
	//
	BizId *string `json:"biz_id,omitempty" xml:"biz_id,omitempty" require:"true"`
	// 授权者身份
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 被授权者did身份
	GrantedDid *string `json:"granted_did,omitempty" xml:"granted_did,omitempty" require:"true"`
	// 被授权的字段
	ItemKeyId []*string `json:"item_key_id,omitempty" xml:"item_key_id,omitempty" require:"true" type:"Repeated"`
	// 业务逻辑唯一id
	KeyId *string `json:"key_id,omitempty" xml:"key_id,omitempty" require:"true"`
}

func (s AuthBusinessDepositdataRequest) String() string {
	return tea.Prettify(s)
}

func (s AuthBusinessDepositdataRequest) GoString() string {
	return s.String()
}

func (s *AuthBusinessDepositdataRequest) SetAuthToken(v string) *AuthBusinessDepositdataRequest {
	s.AuthToken = &v
	return s
}

func (s *AuthBusinessDepositdataRequest) SetProductInstanceId(v string) *AuthBusinessDepositdataRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *AuthBusinessDepositdataRequest) SetBizId(v string) *AuthBusinessDepositdataRequest {
	s.BizId = &v
	return s
}

func (s *AuthBusinessDepositdataRequest) SetDid(v string) *AuthBusinessDepositdataRequest {
	s.Did = &v
	return s
}

func (s *AuthBusinessDepositdataRequest) SetGrantedDid(v string) *AuthBusinessDepositdataRequest {
	s.GrantedDid = &v
	return s
}

func (s *AuthBusinessDepositdataRequest) SetItemKeyId(v []*string) *AuthBusinessDepositdataRequest {
	s.ItemKeyId = v
	return s
}

func (s *AuthBusinessDepositdataRequest) SetKeyId(v string) *AuthBusinessDepositdataRequest {
	s.KeyId = &v
	return s
}

type AuthBusinessDepositdataResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 被授权的逻辑交易
	DepositId *string `json:"deposit_id,omitempty" xml:"deposit_id,omitempty"`
	// 是否授权调用成功
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
}

func (s AuthBusinessDepositdataResponse) String() string {
	return tea.Prettify(s)
}

func (s AuthBusinessDepositdataResponse) GoString() string {
	return s.String()
}

func (s *AuthBusinessDepositdataResponse) SetReqMsgId(v string) *AuthBusinessDepositdataResponse {
	s.ReqMsgId = &v
	return s
}

func (s *AuthBusinessDepositdataResponse) SetResultCode(v string) *AuthBusinessDepositdataResponse {
	s.ResultCode = &v
	return s
}

func (s *AuthBusinessDepositdataResponse) SetResultMsg(v string) *AuthBusinessDepositdataResponse {
	s.ResultMsg = &v
	return s
}

func (s *AuthBusinessDepositdataResponse) SetDepositId(v string) *AuthBusinessDepositdataResponse {
	s.DepositId = &v
	return s
}

func (s *AuthBusinessDepositdataResponse) SetStatus(v string) *AuthBusinessDepositdataResponse {
	s.Status = &v
	return s
}

type CreateBusinessContractDeployRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 业务链对应的bizId
	BizId *string `json:"biz_id,omitempty" xml:"biz_id,omitempty" require:"true"`
	// 合约代码
	ContractCode *string `json:"contract_code,omitempty" xml:"contract_code,omitempty" require:"true"`
	// 合约名称
	ContractName *string `json:"contract_name,omitempty" xml:"contract_name,omitempty" require:"true"`
	// 合约类型
	ContractType *int64 `json:"contract_type,omitempty" xml:"contract_type,omitempty" require:"true"`
	// 合约部署者did身份
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 构造函数传入参数
	InputData *string `json:"input_data,omitempty" xml:"input_data,omitempty"`
}

func (s CreateBusinessContractDeployRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateBusinessContractDeployRequest) GoString() string {
	return s.String()
}

func (s *CreateBusinessContractDeployRequest) SetAuthToken(v string) *CreateBusinessContractDeployRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateBusinessContractDeployRequest) SetProductInstanceId(v string) *CreateBusinessContractDeployRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateBusinessContractDeployRequest) SetBizId(v string) *CreateBusinessContractDeployRequest {
	s.BizId = &v
	return s
}

func (s *CreateBusinessContractDeployRequest) SetContractCode(v string) *CreateBusinessContractDeployRequest {
	s.ContractCode = &v
	return s
}

func (s *CreateBusinessContractDeployRequest) SetContractName(v string) *CreateBusinessContractDeployRequest {
	s.ContractName = &v
	return s
}

func (s *CreateBusinessContractDeployRequest) SetContractType(v int64) *CreateBusinessContractDeployRequest {
	s.ContractType = &v
	return s
}

func (s *CreateBusinessContractDeployRequest) SetDid(v string) *CreateBusinessContractDeployRequest {
	s.Did = &v
	return s
}

func (s *CreateBusinessContractDeployRequest) SetInputData(v string) *CreateBusinessContractDeployRequest {
	s.InputData = &v
	return s
}

type CreateBusinessContractDeployResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 部署合约返回值
	Data *string `json:"data,omitempty" xml:"data,omitempty"`
	// 是否调用成功
	Status *int64 `json:"status,omitempty" xml:"status,omitempty"`
	// 部署合约在链上对应的交易地址
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty"`
}

func (s CreateBusinessContractDeployResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateBusinessContractDeployResponse) GoString() string {
	return s.String()
}

func (s *CreateBusinessContractDeployResponse) SetReqMsgId(v string) *CreateBusinessContractDeployResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateBusinessContractDeployResponse) SetResultCode(v string) *CreateBusinessContractDeployResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateBusinessContractDeployResponse) SetResultMsg(v string) *CreateBusinessContractDeployResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateBusinessContractDeployResponse) SetData(v string) *CreateBusinessContractDeployResponse {
	s.Data = &v
	return s
}

func (s *CreateBusinessContractDeployResponse) SetStatus(v int64) *CreateBusinessContractDeployResponse {
	s.Status = &v
	return s
}

func (s *CreateBusinessContractDeployResponse) SetTxHash(v string) *CreateBusinessContractDeployResponse {
	s.TxHash = &v
	return s
}

type CreateBusinessContractnormalcallRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 业务链对应的bizId
	//
	BizId *string `json:"biz_id,omitempty" xml:"biz_id,omitempty" require:"true"`
	// 合约名称
	ContractName *string `json:"contract_name,omitempty" xml:"contract_name,omitempty" require:"true"`
	// 合约类型
	ContractType *int64 `json:"contract_type,omitempty" xml:"contract_type,omitempty" require:"true"`
	// 调用合约者身份
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 传入参数
	InputData *string `json:"input_data,omitempty" xml:"input_data,omitempty" require:"true"`
	// 合约接口名称
	MethodSignature *string `json:"method_signature,omitempty" xml:"method_signature,omitempty" require:"true"`
	// 返回值类型
	OutputType *string `json:"output_type,omitempty" xml:"output_type,omitempty" require:"true"`
}

func (s CreateBusinessContractnormalcallRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateBusinessContractnormalcallRequest) GoString() string {
	return s.String()
}

func (s *CreateBusinessContractnormalcallRequest) SetAuthToken(v string) *CreateBusinessContractnormalcallRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateBusinessContractnormalcallRequest) SetProductInstanceId(v string) *CreateBusinessContractnormalcallRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateBusinessContractnormalcallRequest) SetBizId(v string) *CreateBusinessContractnormalcallRequest {
	s.BizId = &v
	return s
}

func (s *CreateBusinessContractnormalcallRequest) SetContractName(v string) *CreateBusinessContractnormalcallRequest {
	s.ContractName = &v
	return s
}

func (s *CreateBusinessContractnormalcallRequest) SetContractType(v int64) *CreateBusinessContractnormalcallRequest {
	s.ContractType = &v
	return s
}

func (s *CreateBusinessContractnormalcallRequest) SetDid(v string) *CreateBusinessContractnormalcallRequest {
	s.Did = &v
	return s
}

func (s *CreateBusinessContractnormalcallRequest) SetInputData(v string) *CreateBusinessContractnormalcallRequest {
	s.InputData = &v
	return s
}

func (s *CreateBusinessContractnormalcallRequest) SetMethodSignature(v string) *CreateBusinessContractnormalcallRequest {
	s.MethodSignature = &v
	return s
}

func (s *CreateBusinessContractnormalcallRequest) SetOutputType(v string) *CreateBusinessContractnormalcallRequest {
	s.OutputType = &v
	return s
}

type CreateBusinessContractnormalcallResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 调用合约接口返回值
	Data *string `json:"data,omitempty" xml:"data,omitempty"`
	// 是否调用成功
	Status *int64 `json:"status,omitempty" xml:"status,omitempty"`
	// 调用合约的交易地址
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty"`
}

func (s CreateBusinessContractnormalcallResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateBusinessContractnormalcallResponse) GoString() string {
	return s.String()
}

func (s *CreateBusinessContractnormalcallResponse) SetReqMsgId(v string) *CreateBusinessContractnormalcallResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateBusinessContractnormalcallResponse) SetResultCode(v string) *CreateBusinessContractnormalcallResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateBusinessContractnormalcallResponse) SetResultMsg(v string) *CreateBusinessContractnormalcallResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateBusinessContractnormalcallResponse) SetData(v string) *CreateBusinessContractnormalcallResponse {
	s.Data = &v
	return s
}

func (s *CreateBusinessContractnormalcallResponse) SetStatus(v int64) *CreateBusinessContractnormalcallResponse {
	s.Status = &v
	return s
}

func (s *CreateBusinessContractnormalcallResponse) SetTxHash(v string) *CreateBusinessContractnormalcallResponse {
	s.TxHash = &v
	return s
}

type CreateBusinessContractencryptcallRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 业务链对应的bizId
	BizId *string `json:"biz_id,omitempty" xml:"biz_id,omitempty" require:"true"`
	// 合约名称
	ContractName *string `json:"contract_name,omitempty" xml:"contract_name,omitempty" require:"true"`
	// 合约类型
	ContractType *int64 `json:"contract_type,omitempty" xml:"contract_type,omitempty" require:"true"`
	// 具体数据的定义，加密在服务端，需传入原始值、类型及key等相关信息
	Data []*ContractEncryptKeyItem `json:"data,omitempty" xml:"data,omitempty" require:"true" type:"Repeated"`
	// 调用合约者用户身份
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 合约方法名
	MethodSignature *string `json:"method_signature,omitempty" xml:"method_signature,omitempty" require:"true"`
	// 返回值类型
	OutputType *string `json:"output_type,omitempty" xml:"output_type,omitempty" require:"true"`
}

func (s CreateBusinessContractencryptcallRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateBusinessContractencryptcallRequest) GoString() string {
	return s.String()
}

func (s *CreateBusinessContractencryptcallRequest) SetAuthToken(v string) *CreateBusinessContractencryptcallRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateBusinessContractencryptcallRequest) SetProductInstanceId(v string) *CreateBusinessContractencryptcallRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateBusinessContractencryptcallRequest) SetBizId(v string) *CreateBusinessContractencryptcallRequest {
	s.BizId = &v
	return s
}

func (s *CreateBusinessContractencryptcallRequest) SetContractName(v string) *CreateBusinessContractencryptcallRequest {
	s.ContractName = &v
	return s
}

func (s *CreateBusinessContractencryptcallRequest) SetContractType(v int64) *CreateBusinessContractencryptcallRequest {
	s.ContractType = &v
	return s
}

func (s *CreateBusinessContractencryptcallRequest) SetData(v []*ContractEncryptKeyItem) *CreateBusinessContractencryptcallRequest {
	s.Data = v
	return s
}

func (s *CreateBusinessContractencryptcallRequest) SetDid(v string) *CreateBusinessContractencryptcallRequest {
	s.Did = &v
	return s
}

func (s *CreateBusinessContractencryptcallRequest) SetMethodSignature(v string) *CreateBusinessContractencryptcallRequest {
	s.MethodSignature = &v
	return s
}

func (s *CreateBusinessContractencryptcallRequest) SetOutputType(v string) *CreateBusinessContractencryptcallRequest {
	s.OutputType = &v
	return s
}

type CreateBusinessContractencryptcallResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 合约返回参数
	Data *string `json:"data,omitempty" xml:"data,omitempty"`
	// 是否调用成功
	Status *int64 `json:"status,omitempty" xml:"status,omitempty"`
	// 链上合约交易调用地址
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty"`
}

func (s CreateBusinessContractencryptcallResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateBusinessContractencryptcallResponse) GoString() string {
	return s.String()
}

func (s *CreateBusinessContractencryptcallResponse) SetReqMsgId(v string) *CreateBusinessContractencryptcallResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateBusinessContractencryptcallResponse) SetResultCode(v string) *CreateBusinessContractencryptcallResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateBusinessContractencryptcallResponse) SetResultMsg(v string) *CreateBusinessContractencryptcallResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateBusinessContractencryptcallResponse) SetData(v string) *CreateBusinessContractencryptcallResponse {
	s.Data = &v
	return s
}

func (s *CreateBusinessContractencryptcallResponse) SetStatus(v int64) *CreateBusinessContractencryptcallResponse {
	s.Status = &v
	return s
}

func (s *CreateBusinessContractencryptcallResponse) SetTxHash(v string) *CreateBusinessContractencryptcallResponse {
	s.TxHash = &v
	return s
}

type QueryBusinessContractreceiptRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 业务链的bizId
	BizId *string `json:"biz_id,omitempty" xml:"biz_id,omitempty" require:"true"`
	// 调用者用户did
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 链上交易txHash
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty" require:"true"`
}

func (s QueryBusinessContractreceiptRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryBusinessContractreceiptRequest) GoString() string {
	return s.String()
}

func (s *QueryBusinessContractreceiptRequest) SetAuthToken(v string) *QueryBusinessContractreceiptRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryBusinessContractreceiptRequest) SetProductInstanceId(v string) *QueryBusinessContractreceiptRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryBusinessContractreceiptRequest) SetBizId(v string) *QueryBusinessContractreceiptRequest {
	s.BizId = &v
	return s
}

func (s *QueryBusinessContractreceiptRequest) SetDid(v string) *QueryBusinessContractreceiptRequest {
	s.Did = &v
	return s
}

func (s *QueryBusinessContractreceiptRequest) SetTxHash(v string) *QueryBusinessContractreceiptRequest {
	s.TxHash = &v
	return s
}

type QueryBusinessContractreceiptResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 链上txHash对应的内容
	Data *string `json:"data,omitempty" xml:"data,omitempty"`
	// 接口调用是否成功
	Status *int64 `json:"status,omitempty" xml:"status,omitempty"`
	// 对应的链上交易txHash
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty"`
}

func (s QueryBusinessContractreceiptResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryBusinessContractreceiptResponse) GoString() string {
	return s.String()
}

func (s *QueryBusinessContractreceiptResponse) SetReqMsgId(v string) *QueryBusinessContractreceiptResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryBusinessContractreceiptResponse) SetResultCode(v string) *QueryBusinessContractreceiptResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryBusinessContractreceiptResponse) SetResultMsg(v string) *QueryBusinessContractreceiptResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryBusinessContractreceiptResponse) SetData(v string) *QueryBusinessContractreceiptResponse {
	s.Data = &v
	return s
}

func (s *QueryBusinessContractreceiptResponse) SetStatus(v int64) *QueryBusinessContractreceiptResponse {
	s.Status = &v
	return s
}

func (s *QueryBusinessContractreceiptResponse) SetTxHash(v string) *QueryBusinessContractreceiptResponse {
	s.TxHash = &v
	return s
}

type QueryBusinessContractencryptreceiptRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链的业务bizId
	BizId *string `json:"biz_id,omitempty" xml:"biz_id,omitempty" require:"true"`
	// test_contract_name
	ContractName *string `json:"contract_name,omitempty" xml:"contract_name,omitempty" require:"true"`
	// 调用者用户身份
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 交易对应的链上地址
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty" require:"true"`
}

func (s QueryBusinessContractencryptreceiptRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryBusinessContractencryptreceiptRequest) GoString() string {
	return s.String()
}

func (s *QueryBusinessContractencryptreceiptRequest) SetAuthToken(v string) *QueryBusinessContractencryptreceiptRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryBusinessContractencryptreceiptRequest) SetProductInstanceId(v string) *QueryBusinessContractencryptreceiptRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryBusinessContractencryptreceiptRequest) SetBizId(v string) *QueryBusinessContractencryptreceiptRequest {
	s.BizId = &v
	return s
}

func (s *QueryBusinessContractencryptreceiptRequest) SetContractName(v string) *QueryBusinessContractencryptreceiptRequest {
	s.ContractName = &v
	return s
}

func (s *QueryBusinessContractencryptreceiptRequest) SetDid(v string) *QueryBusinessContractencryptreceiptRequest {
	s.Did = &v
	return s
}

func (s *QueryBusinessContractencryptreceiptRequest) SetTxHash(v string) *QueryBusinessContractencryptreceiptRequest {
	s.TxHash = &v
	return s
}

type QueryBusinessContractencryptreceiptResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// txHash对应的交易内容
	Data *string `json:"data,omitempty" xml:"data,omitempty"`
	// 调用接口是否成功
	Status *int64 `json:"status,omitempty" xml:"status,omitempty"`
	// 交易对应的txHash
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty"`
}

func (s QueryBusinessContractencryptreceiptResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryBusinessContractencryptreceiptResponse) GoString() string {
	return s.String()
}

func (s *QueryBusinessContractencryptreceiptResponse) SetReqMsgId(v string) *QueryBusinessContractencryptreceiptResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryBusinessContractencryptreceiptResponse) SetResultCode(v string) *QueryBusinessContractencryptreceiptResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryBusinessContractencryptreceiptResponse) SetResultMsg(v string) *QueryBusinessContractencryptreceiptResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryBusinessContractencryptreceiptResponse) SetData(v string) *QueryBusinessContractencryptreceiptResponse {
	s.Data = &v
	return s
}

func (s *QueryBusinessContractencryptreceiptResponse) SetStatus(v int64) *QueryBusinessContractencryptreceiptResponse {
	s.Status = &v
	return s
}

func (s *QueryBusinessContractencryptreceiptResponse) SetTxHash(v string) *QueryBusinessContractencryptreceiptResponse {
	s.TxHash = &v
	return s
}

type QueryBusinessContractencryptmethodRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 合约链所在地址
	BizId *string `json:"biz_id,omitempty" xml:"biz_id,omitempty" require:"true"`
	// 合约名称
	ContractName *string `json:"contract_name,omitempty" xml:"contract_name,omitempty" require:"true"`
	// 合约类型
	ContractType *int64 `json:"contract_type,omitempty" xml:"contract_type,omitempty" require:"true"`
	// 用户的did身份
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 输入参数
	InputData *string `json:"input_data,omitempty" xml:"input_data,omitempty" require:"true"`
	// 查询方法名接口
	MethodSignature *string `json:"method_signature,omitempty" xml:"method_signature,omitempty" require:"true"`
}

func (s QueryBusinessContractencryptmethodRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryBusinessContractencryptmethodRequest) GoString() string {
	return s.String()
}

func (s *QueryBusinessContractencryptmethodRequest) SetAuthToken(v string) *QueryBusinessContractencryptmethodRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryBusinessContractencryptmethodRequest) SetProductInstanceId(v string) *QueryBusinessContractencryptmethodRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryBusinessContractencryptmethodRequest) SetBizId(v string) *QueryBusinessContractencryptmethodRequest {
	s.BizId = &v
	return s
}

func (s *QueryBusinessContractencryptmethodRequest) SetContractName(v string) *QueryBusinessContractencryptmethodRequest {
	s.ContractName = &v
	return s
}

func (s *QueryBusinessContractencryptmethodRequest) SetContractType(v int64) *QueryBusinessContractencryptmethodRequest {
	s.ContractType = &v
	return s
}

func (s *QueryBusinessContractencryptmethodRequest) SetDid(v string) *QueryBusinessContractencryptmethodRequest {
	s.Did = &v
	return s
}

func (s *QueryBusinessContractencryptmethodRequest) SetInputData(v string) *QueryBusinessContractencryptmethodRequest {
	s.InputData = &v
	return s
}

func (s *QueryBusinessContractencryptmethodRequest) SetMethodSignature(v string) *QueryBusinessContractencryptmethodRequest {
	s.MethodSignature = &v
	return s
}

type QueryBusinessContractencryptmethodResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 查询方法返回值
	Data *string `json:"data,omitempty" xml:"data,omitempty"`
	// 是否接口调用成功
	Status *int64 `json:"status,omitempty" xml:"status,omitempty"`
	// 该查询方法在链上所发的交易
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty"`
}

func (s QueryBusinessContractencryptmethodResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryBusinessContractencryptmethodResponse) GoString() string {
	return s.String()
}

func (s *QueryBusinessContractencryptmethodResponse) SetReqMsgId(v string) *QueryBusinessContractencryptmethodResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryBusinessContractencryptmethodResponse) SetResultCode(v string) *QueryBusinessContractencryptmethodResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryBusinessContractencryptmethodResponse) SetResultMsg(v string) *QueryBusinessContractencryptmethodResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryBusinessContractencryptmethodResponse) SetData(v string) *QueryBusinessContractencryptmethodResponse {
	s.Data = &v
	return s
}

func (s *QueryBusinessContractencryptmethodResponse) SetStatus(v int64) *QueryBusinessContractencryptmethodResponse {
	s.Status = &v
	return s
}

func (s *QueryBusinessContractencryptmethodResponse) SetTxHash(v string) *QueryBusinessContractencryptmethodResponse {
	s.TxHash = &v
	return s
}

type DeployBusinessAgreementRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 业务链的id编号
	BizId *string `json:"biz_id,omitempty" xml:"biz_id,omitempty" require:"true"`
	// 合约名称
	ContractName *string `json:"contract_name,omitempty" xml:"contract_name,omitempty" require:"true"`
	// 用户的did身份
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
}

func (s DeployBusinessAgreementRequest) String() string {
	return tea.Prettify(s)
}

func (s DeployBusinessAgreementRequest) GoString() string {
	return s.String()
}

func (s *DeployBusinessAgreementRequest) SetAuthToken(v string) *DeployBusinessAgreementRequest {
	s.AuthToken = &v
	return s
}

func (s *DeployBusinessAgreementRequest) SetProductInstanceId(v string) *DeployBusinessAgreementRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *DeployBusinessAgreementRequest) SetBizId(v string) *DeployBusinessAgreementRequest {
	s.BizId = &v
	return s
}

func (s *DeployBusinessAgreementRequest) SetContractName(v string) *DeployBusinessAgreementRequest {
	s.ContractName = &v
	return s
}

func (s *DeployBusinessAgreementRequest) SetDid(v string) *DeployBusinessAgreementRequest {
	s.Did = &v
	return s
}

type DeployBusinessAgreementResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 返回值
	Data *string `json:"data,omitempty" xml:"data,omitempty"`
	// 0表示成功
	Status *int64 `json:"status,omitempty" xml:"status,omitempty"`
	// 部署合约交易在链上的地址
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty"`
}

func (s DeployBusinessAgreementResponse) String() string {
	return tea.Prettify(s)
}

func (s DeployBusinessAgreementResponse) GoString() string {
	return s.String()
}

func (s *DeployBusinessAgreementResponse) SetReqMsgId(v string) *DeployBusinessAgreementResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeployBusinessAgreementResponse) SetResultCode(v string) *DeployBusinessAgreementResponse {
	s.ResultCode = &v
	return s
}

func (s *DeployBusinessAgreementResponse) SetResultMsg(v string) *DeployBusinessAgreementResponse {
	s.ResultMsg = &v
	return s
}

func (s *DeployBusinessAgreementResponse) SetData(v string) *DeployBusinessAgreementResponse {
	s.Data = &v
	return s
}

func (s *DeployBusinessAgreementResponse) SetStatus(v int64) *DeployBusinessAgreementResponse {
	s.Status = &v
	return s
}

func (s *DeployBusinessAgreementResponse) SetTxHash(v string) *DeployBusinessAgreementResponse {
	s.TxHash = &v
	return s
}

type CreateBusinessAgreementRegistertemplateRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 业务链对应的bizId
	BizId *string `json:"biz_id,omitempty" xml:"biz_id,omitempty" require:"true"`
	// 合约名称
	ContractName *string `json:"contract_name,omitempty" xml:"contract_name,omitempty" require:"true"`
	// 用户did身份
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 业务共识模板
	Template *string `json:"template,omitempty" xml:"template,omitempty" require:"true"`
}

func (s CreateBusinessAgreementRegistertemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateBusinessAgreementRegistertemplateRequest) GoString() string {
	return s.String()
}

func (s *CreateBusinessAgreementRegistertemplateRequest) SetAuthToken(v string) *CreateBusinessAgreementRegistertemplateRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateBusinessAgreementRegistertemplateRequest) SetProductInstanceId(v string) *CreateBusinessAgreementRegistertemplateRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateBusinessAgreementRegistertemplateRequest) SetBizId(v string) *CreateBusinessAgreementRegistertemplateRequest {
	s.BizId = &v
	return s
}

func (s *CreateBusinessAgreementRegistertemplateRequest) SetContractName(v string) *CreateBusinessAgreementRegistertemplateRequest {
	s.ContractName = &v
	return s
}

func (s *CreateBusinessAgreementRegistertemplateRequest) SetDid(v string) *CreateBusinessAgreementRegistertemplateRequest {
	s.Did = &v
	return s
}

func (s *CreateBusinessAgreementRegistertemplateRequest) SetTemplate(v string) *CreateBusinessAgreementRegistertemplateRequest {
	s.Template = &v
	return s
}

type CreateBusinessAgreementRegistertemplateResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 注册合约模板，链上合约返回值
	Data *string `json:"data,omitempty" xml:"data,omitempty"`
	// 是否该接口调用成功
	Status *int64 `json:"status,omitempty" xml:"status,omitempty"`
	// 该调用对应链上的交易地址
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty"`
}

func (s CreateBusinessAgreementRegistertemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateBusinessAgreementRegistertemplateResponse) GoString() string {
	return s.String()
}

func (s *CreateBusinessAgreementRegistertemplateResponse) SetReqMsgId(v string) *CreateBusinessAgreementRegistertemplateResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateBusinessAgreementRegistertemplateResponse) SetResultCode(v string) *CreateBusinessAgreementRegistertemplateResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateBusinessAgreementRegistertemplateResponse) SetResultMsg(v string) *CreateBusinessAgreementRegistertemplateResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateBusinessAgreementRegistertemplateResponse) SetData(v string) *CreateBusinessAgreementRegistertemplateResponse {
	s.Data = &v
	return s
}

func (s *CreateBusinessAgreementRegistertemplateResponse) SetStatus(v int64) *CreateBusinessAgreementRegistertemplateResponse {
	s.Status = &v
	return s
}

func (s *CreateBusinessAgreementRegistertemplateResponse) SetTxHash(v string) *CreateBusinessAgreementRegistertemplateResponse {
	s.TxHash = &v
	return s
}

type CreateBusinessAgreementRegisterRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 业务链的bizId
	BizId *string `json:"biz_id,omitempty" xml:"biz_id,omitempty" require:"true"`
	// 回调合约方法
	CallbackMethod *string `json:"callback_method,omitempty" xml:"callback_method,omitempty" require:"true"`
	// 回调合约名称
	ContractId *string `json:"contract_id,omitempty" xml:"contract_id,omitempty" require:"true"`
	// 合约名称
	ContractName *string `json:"contract_name,omitempty" xml:"contract_name,omitempty" require:"true"`
	// 用户身份的did
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 回调key
	Key *string `json:"key,omitempty" xml:"key,omitempty" require:"true"`
	// 合约模板id
	TemplateId *string `json:"template_id,omitempty" xml:"template_id,omitempty" require:"true"`
}

func (s CreateBusinessAgreementRegisterRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateBusinessAgreementRegisterRequest) GoString() string {
	return s.String()
}

func (s *CreateBusinessAgreementRegisterRequest) SetAuthToken(v string) *CreateBusinessAgreementRegisterRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateBusinessAgreementRegisterRequest) SetProductInstanceId(v string) *CreateBusinessAgreementRegisterRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateBusinessAgreementRegisterRequest) SetBizId(v string) *CreateBusinessAgreementRegisterRequest {
	s.BizId = &v
	return s
}

func (s *CreateBusinessAgreementRegisterRequest) SetCallbackMethod(v string) *CreateBusinessAgreementRegisterRequest {
	s.CallbackMethod = &v
	return s
}

func (s *CreateBusinessAgreementRegisterRequest) SetContractId(v string) *CreateBusinessAgreementRegisterRequest {
	s.ContractId = &v
	return s
}

func (s *CreateBusinessAgreementRegisterRequest) SetContractName(v string) *CreateBusinessAgreementRegisterRequest {
	s.ContractName = &v
	return s
}

func (s *CreateBusinessAgreementRegisterRequest) SetDid(v string) *CreateBusinessAgreementRegisterRequest {
	s.Did = &v
	return s
}

func (s *CreateBusinessAgreementRegisterRequest) SetKey(v string) *CreateBusinessAgreementRegisterRequest {
	s.Key = &v
	return s
}

func (s *CreateBusinessAgreementRegisterRequest) SetTemplateId(v string) *CreateBusinessAgreementRegisterRequest {
	s.TemplateId = &v
	return s
}

type CreateBusinessAgreementRegisterResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 合约调用返回值
	Data *string `json:"data,omitempty" xml:"data,omitempty"`
	// 该接口是否调用成功
	Status *int64 `json:"status,omitempty" xml:"status,omitempty"`
	// 该交易对应的链上地址
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty"`
}

func (s CreateBusinessAgreementRegisterResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateBusinessAgreementRegisterResponse) GoString() string {
	return s.String()
}

func (s *CreateBusinessAgreementRegisterResponse) SetReqMsgId(v string) *CreateBusinessAgreementRegisterResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateBusinessAgreementRegisterResponse) SetResultCode(v string) *CreateBusinessAgreementRegisterResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateBusinessAgreementRegisterResponse) SetResultMsg(v string) *CreateBusinessAgreementRegisterResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateBusinessAgreementRegisterResponse) SetData(v string) *CreateBusinessAgreementRegisterResponse {
	s.Data = &v
	return s
}

func (s *CreateBusinessAgreementRegisterResponse) SetStatus(v int64) *CreateBusinessAgreementRegisterResponse {
	s.Status = &v
	return s
}

func (s *CreateBusinessAgreementRegisterResponse) SetTxHash(v string) *CreateBusinessAgreementRegisterResponse {
	s.TxHash = &v
	return s
}

type CreateBusinessAgreementSignRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 业务链bizId
	BizId *string `json:"biz_id,omitempty" xml:"biz_id,omitempty" require:"true"`
	// 回调合约名称
	ContractId *string `json:"contract_id,omitempty" xml:"contract_id,omitempty" require:"true"`
	// 业务共识合约名称
	ContractName *string `json:"contract_name,omitempty" xml:"contract_name,omitempty" require:"true"`
	// 用户did身份
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 业务共识唯一标识
	Key *string `json:"key,omitempty" xml:"key,omitempty" require:"true"`
	// 用户签名
	SignData *string `json:"sign_data,omitempty" xml:"sign_data,omitempty" require:"true"`
}

func (s CreateBusinessAgreementSignRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateBusinessAgreementSignRequest) GoString() string {
	return s.String()
}

func (s *CreateBusinessAgreementSignRequest) SetAuthToken(v string) *CreateBusinessAgreementSignRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateBusinessAgreementSignRequest) SetProductInstanceId(v string) *CreateBusinessAgreementSignRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateBusinessAgreementSignRequest) SetBizId(v string) *CreateBusinessAgreementSignRequest {
	s.BizId = &v
	return s
}

func (s *CreateBusinessAgreementSignRequest) SetContractId(v string) *CreateBusinessAgreementSignRequest {
	s.ContractId = &v
	return s
}

func (s *CreateBusinessAgreementSignRequest) SetContractName(v string) *CreateBusinessAgreementSignRequest {
	s.ContractName = &v
	return s
}

func (s *CreateBusinessAgreementSignRequest) SetDid(v string) *CreateBusinessAgreementSignRequest {
	s.Did = &v
	return s
}

func (s *CreateBusinessAgreementSignRequest) SetKey(v string) *CreateBusinessAgreementSignRequest {
	s.Key = &v
	return s
}

func (s *CreateBusinessAgreementSignRequest) SetSignData(v string) *CreateBusinessAgreementSignRequest {
	s.SignData = &v
	return s
}

type CreateBusinessAgreementSignResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 该合约调用返回值
	Data *string `json:"data,omitempty" xml:"data,omitempty"`
	// 该接口是否调用成功，0表示成功
	Status *int64 `json:"status,omitempty" xml:"status,omitempty"`
	// 该调用对应的链上交易地址
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty"`
}

func (s CreateBusinessAgreementSignResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateBusinessAgreementSignResponse) GoString() string {
	return s.String()
}

func (s *CreateBusinessAgreementSignResponse) SetReqMsgId(v string) *CreateBusinessAgreementSignResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateBusinessAgreementSignResponse) SetResultCode(v string) *CreateBusinessAgreementSignResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateBusinessAgreementSignResponse) SetResultMsg(v string) *CreateBusinessAgreementSignResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateBusinessAgreementSignResponse) SetData(v string) *CreateBusinessAgreementSignResponse {
	s.Data = &v
	return s
}

func (s *CreateBusinessAgreementSignResponse) SetStatus(v int64) *CreateBusinessAgreementSignResponse {
	s.Status = &v
	return s
}

func (s *CreateBusinessAgreementSignResponse) SetTxHash(v string) *CreateBusinessAgreementSignResponse {
	s.TxHash = &v
	return s
}

type QueryBusinessAgreementRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 业务共识链id
	BizId *string `json:"biz_id,omitempty" xml:"biz_id,omitempty" require:"true"`
	// 回调合约id
	ContractId *string `json:"contract_id,omitempty" xml:"contract_id,omitempty" require:"true"`
	// 业务共识合约id
	ContractName *string `json:"contract_name,omitempty" xml:"contract_name,omitempty" require:"true"`
	// 发起者did账户
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 业务共识唯一id
	Key *string `json:"key,omitempty" xml:"key,omitempty" require:"true"`
}

func (s QueryBusinessAgreementRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryBusinessAgreementRequest) GoString() string {
	return s.String()
}

func (s *QueryBusinessAgreementRequest) SetAuthToken(v string) *QueryBusinessAgreementRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryBusinessAgreementRequest) SetProductInstanceId(v string) *QueryBusinessAgreementRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryBusinessAgreementRequest) SetBizId(v string) *QueryBusinessAgreementRequest {
	s.BizId = &v
	return s
}

func (s *QueryBusinessAgreementRequest) SetContractId(v string) *QueryBusinessAgreementRequest {
	s.ContractId = &v
	return s
}

func (s *QueryBusinessAgreementRequest) SetContractName(v string) *QueryBusinessAgreementRequest {
	s.ContractName = &v
	return s
}

func (s *QueryBusinessAgreementRequest) SetDid(v string) *QueryBusinessAgreementRequest {
	s.Did = &v
	return s
}

func (s *QueryBusinessAgreementRequest) SetKey(v string) *QueryBusinessAgreementRequest {
	s.Key = &v
	return s
}

type QueryBusinessAgreementResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 当前该共识的状态信息
	Data *string `json:"data,omitempty" xml:"data,omitempty"`
	// 业务共识查询接口是否调用成功，0表示成功
	Status *int64 `json:"status,omitempty" xml:"status,omitempty"`
	// 该接口调用对应的链上交易地址
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty"`
}

func (s QueryBusinessAgreementResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryBusinessAgreementResponse) GoString() string {
	return s.String()
}

func (s *QueryBusinessAgreementResponse) SetReqMsgId(v string) *QueryBusinessAgreementResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryBusinessAgreementResponse) SetResultCode(v string) *QueryBusinessAgreementResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryBusinessAgreementResponse) SetResultMsg(v string) *QueryBusinessAgreementResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryBusinessAgreementResponse) SetData(v string) *QueryBusinessAgreementResponse {
	s.Data = &v
	return s
}

func (s *QueryBusinessAgreementResponse) SetStatus(v int64) *QueryBusinessAgreementResponse {
	s.Status = &v
	return s
}

func (s *QueryBusinessAgreementResponse) SetTxHash(v string) *QueryBusinessAgreementResponse {
	s.TxHash = &v
	return s
}

type CreateBusinessContractGrantdidRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 租户业务链地址biz_id
	BizId *string `json:"biz_id,omitempty" xml:"biz_id,omitempty" require:"true"`
	// 授权的合约名称
	ContractName *string `json:"contract_name,omitempty" xml:"contract_name,omitempty" require:"true"`
	// 用户did身份
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 授权截止日期
	DueTime *string `json:"due_time,omitempty" xml:"due_time,omitempty" require:"true" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 被授权者身份
	GrantedDid *string `json:"granted_did,omitempty" xml:"granted_did,omitempty" require:"true"`
	// 授权的字段
	ItemIds []*string `json:"item_ids,omitempty" xml:"item_ids,omitempty" require:"true" type:"Repeated"`
}

func (s CreateBusinessContractGrantdidRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateBusinessContractGrantdidRequest) GoString() string {
	return s.String()
}

func (s *CreateBusinessContractGrantdidRequest) SetAuthToken(v string) *CreateBusinessContractGrantdidRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateBusinessContractGrantdidRequest) SetProductInstanceId(v string) *CreateBusinessContractGrantdidRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateBusinessContractGrantdidRequest) SetBizId(v string) *CreateBusinessContractGrantdidRequest {
	s.BizId = &v
	return s
}

func (s *CreateBusinessContractGrantdidRequest) SetContractName(v string) *CreateBusinessContractGrantdidRequest {
	s.ContractName = &v
	return s
}

func (s *CreateBusinessContractGrantdidRequest) SetDid(v string) *CreateBusinessContractGrantdidRequest {
	s.Did = &v
	return s
}

func (s *CreateBusinessContractGrantdidRequest) SetDueTime(v string) *CreateBusinessContractGrantdidRequest {
	s.DueTime = &v
	return s
}

func (s *CreateBusinessContractGrantdidRequest) SetGrantedDid(v string) *CreateBusinessContractGrantdidRequest {
	s.GrantedDid = &v
	return s
}

func (s *CreateBusinessContractGrantdidRequest) SetItemIds(v []*string) *CreateBusinessContractGrantdidRequest {
	s.ItemIds = v
	return s
}

type CreateBusinessContractGrantdidResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 成功被授权的字段
	Data *string `json:"data,omitempty" xml:"data,omitempty"`
	// 该接口是否调用成功，0表示成功
	Status *int64 `json:"status,omitempty" xml:"status,omitempty"`
}

func (s CreateBusinessContractGrantdidResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateBusinessContractGrantdidResponse) GoString() string {
	return s.String()
}

func (s *CreateBusinessContractGrantdidResponse) SetReqMsgId(v string) *CreateBusinessContractGrantdidResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateBusinessContractGrantdidResponse) SetResultCode(v string) *CreateBusinessContractGrantdidResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateBusinessContractGrantdidResponse) SetResultMsg(v string) *CreateBusinessContractGrantdidResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateBusinessContractGrantdidResponse) SetData(v string) *CreateBusinessContractGrantdidResponse {
	s.Data = &v
	return s
}

func (s *CreateBusinessContractGrantdidResponse) SetStatus(v int64) *CreateBusinessContractGrantdidResponse {
	s.Status = &v
	return s
}

type QueryBusinessDepositEncryptedmetadataRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链的业务id
	BizId *string `json:"biz_id,omitempty" xml:"biz_id,omitempty" require:"true"`
	// 发起者的did身份
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 存证的唯一主键key_id
	KeyId *string `json:"key_id,omitempty" xml:"key_id,omitempty" require:"true"`
	// 被存证的交易txHash，若不传则默认key_id最近的交易hash
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty"`
}

func (s QueryBusinessDepositEncryptedmetadataRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryBusinessDepositEncryptedmetadataRequest) GoString() string {
	return s.String()
}

func (s *QueryBusinessDepositEncryptedmetadataRequest) SetAuthToken(v string) *QueryBusinessDepositEncryptedmetadataRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryBusinessDepositEncryptedmetadataRequest) SetProductInstanceId(v string) *QueryBusinessDepositEncryptedmetadataRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryBusinessDepositEncryptedmetadataRequest) SetBizId(v string) *QueryBusinessDepositEncryptedmetadataRequest {
	s.BizId = &v
	return s
}

func (s *QueryBusinessDepositEncryptedmetadataRequest) SetDid(v string) *QueryBusinessDepositEncryptedmetadataRequest {
	s.Did = &v
	return s
}

func (s *QueryBusinessDepositEncryptedmetadataRequest) SetKeyId(v string) *QueryBusinessDepositEncryptedmetadataRequest {
	s.KeyId = &v
	return s
}

func (s *QueryBusinessDepositEncryptedmetadataRequest) SetTxHash(v string) *QueryBusinessDepositEncryptedmetadataRequest {
	s.TxHash = &v
	return s
}

type QueryBusinessDepositEncryptedmetadataResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 被存证的数据
	DepositData *string `json:"deposit_data,omitempty" xml:"deposit_data,omitempty"`
	// 存证的唯一主键
	DepositId *string `json:"deposit_id,omitempty" xml:"deposit_id,omitempty"`
	// 被存证的主键关联的历史交易
	HistoryTxId []*string `json:"history_tx_id,omitempty" xml:"history_tx_id,omitempty" type:"Repeated"`
	// 是否查询成功
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
}

func (s QueryBusinessDepositEncryptedmetadataResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryBusinessDepositEncryptedmetadataResponse) GoString() string {
	return s.String()
}

func (s *QueryBusinessDepositEncryptedmetadataResponse) SetReqMsgId(v string) *QueryBusinessDepositEncryptedmetadataResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryBusinessDepositEncryptedmetadataResponse) SetResultCode(v string) *QueryBusinessDepositEncryptedmetadataResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryBusinessDepositEncryptedmetadataResponse) SetResultMsg(v string) *QueryBusinessDepositEncryptedmetadataResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryBusinessDepositEncryptedmetadataResponse) SetDepositData(v string) *QueryBusinessDepositEncryptedmetadataResponse {
	s.DepositData = &v
	return s
}

func (s *QueryBusinessDepositEncryptedmetadataResponse) SetDepositId(v string) *QueryBusinessDepositEncryptedmetadataResponse {
	s.DepositId = &v
	return s
}

func (s *QueryBusinessDepositEncryptedmetadataResponse) SetHistoryTxId(v []*string) *QueryBusinessDepositEncryptedmetadataResponse {
	s.HistoryTxId = v
	return s
}

func (s *QueryBusinessDepositEncryptedmetadataResponse) SetStatus(v string) *QueryBusinessDepositEncryptedmetadataResponse {
	s.Status = &v
	return s
}

type AuthBusinessDepositdataCorpRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 被授权的存证数据所在的链
	BizId *string `json:"biz_id,omitempty" xml:"biz_id,omitempty" require:"true"`
	// 被授权者的did数字身份
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 授权的截止日期，超过该日期后，该组织不再具有访问加密数据的权限
	DueTime *string `json:"due_time,omitempty" xml:"due_time,omitempty" require:"true" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 被授权的组织名
	GrantedCorp *string `json:"granted_corp,omitempty" xml:"granted_corp,omitempty" require:"true"`
	// 被授权的字段
	ItemKeyId []*string `json:"item_key_id,omitempty" xml:"item_key_id,omitempty" require:"true" type:"Repeated"`
	// 被授权的存证内容逻辑主键
	KeyId *string `json:"key_id,omitempty" xml:"key_id,omitempty" require:"true"`
}

func (s AuthBusinessDepositdataCorpRequest) String() string {
	return tea.Prettify(s)
}

func (s AuthBusinessDepositdataCorpRequest) GoString() string {
	return s.String()
}

func (s *AuthBusinessDepositdataCorpRequest) SetAuthToken(v string) *AuthBusinessDepositdataCorpRequest {
	s.AuthToken = &v
	return s
}

func (s *AuthBusinessDepositdataCorpRequest) SetProductInstanceId(v string) *AuthBusinessDepositdataCorpRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *AuthBusinessDepositdataCorpRequest) SetBizId(v string) *AuthBusinessDepositdataCorpRequest {
	s.BizId = &v
	return s
}

func (s *AuthBusinessDepositdataCorpRequest) SetDid(v string) *AuthBusinessDepositdataCorpRequest {
	s.Did = &v
	return s
}

func (s *AuthBusinessDepositdataCorpRequest) SetDueTime(v string) *AuthBusinessDepositdataCorpRequest {
	s.DueTime = &v
	return s
}

func (s *AuthBusinessDepositdataCorpRequest) SetGrantedCorp(v string) *AuthBusinessDepositdataCorpRequest {
	s.GrantedCorp = &v
	return s
}

func (s *AuthBusinessDepositdataCorpRequest) SetItemKeyId(v []*string) *AuthBusinessDepositdataCorpRequest {
	s.ItemKeyId = v
	return s
}

func (s *AuthBusinessDepositdataCorpRequest) SetKeyId(v string) *AuthBusinessDepositdataCorpRequest {
	s.KeyId = &v
	return s
}

type AuthBusinessDepositdataCorpResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 被授权的逻辑主字段(biz_id与key_id的拼接）
	DepositId *string `json:"deposit_id,omitempty" xml:"deposit_id,omitempty"`
	// 是否授权成功
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// deposit_id对应的当前最新的交易
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty"`
}

func (s AuthBusinessDepositdataCorpResponse) String() string {
	return tea.Prettify(s)
}

func (s AuthBusinessDepositdataCorpResponse) GoString() string {
	return s.String()
}

func (s *AuthBusinessDepositdataCorpResponse) SetReqMsgId(v string) *AuthBusinessDepositdataCorpResponse {
	s.ReqMsgId = &v
	return s
}

func (s *AuthBusinessDepositdataCorpResponse) SetResultCode(v string) *AuthBusinessDepositdataCorpResponse {
	s.ResultCode = &v
	return s
}

func (s *AuthBusinessDepositdataCorpResponse) SetResultMsg(v string) *AuthBusinessDepositdataCorpResponse {
	s.ResultMsg = &v
	return s
}

func (s *AuthBusinessDepositdataCorpResponse) SetDepositId(v string) *AuthBusinessDepositdataCorpResponse {
	s.DepositId = &v
	return s
}

func (s *AuthBusinessDepositdataCorpResponse) SetStatus(v string) *AuthBusinessDepositdataCorpResponse {
	s.Status = &v
	return s
}

func (s *AuthBusinessDepositdataCorpResponse) SetTxHash(v string) *AuthBusinessDepositdataCorpResponse {
	s.TxHash = &v
	return s
}

type CancelBusinessDepositGrantdidRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 存证数据的发起者did身份
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 取消授权的did数字身份
	GrantedDid *string `json:"granted_did,omitempty" xml:"granted_did,omitempty" require:"true"`
	// 取消授权的字段名称
	ItemKeyId []*string `json:"item_key_id,omitempty" xml:"item_key_id,omitempty" require:"true" type:"Repeated"`
	// 存证数据的主键
	KeyId *string `json:"key_id,omitempty" xml:"key_id,omitempty" require:"true"`
}

func (s CancelBusinessDepositGrantdidRequest) String() string {
	return tea.Prettify(s)
}

func (s CancelBusinessDepositGrantdidRequest) GoString() string {
	return s.String()
}

func (s *CancelBusinessDepositGrantdidRequest) SetAuthToken(v string) *CancelBusinessDepositGrantdidRequest {
	s.AuthToken = &v
	return s
}

func (s *CancelBusinessDepositGrantdidRequest) SetProductInstanceId(v string) *CancelBusinessDepositGrantdidRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CancelBusinessDepositGrantdidRequest) SetDid(v string) *CancelBusinessDepositGrantdidRequest {
	s.Did = &v
	return s
}

func (s *CancelBusinessDepositGrantdidRequest) SetGrantedDid(v string) *CancelBusinessDepositGrantdidRequest {
	s.GrantedDid = &v
	return s
}

func (s *CancelBusinessDepositGrantdidRequest) SetItemKeyId(v []*string) *CancelBusinessDepositGrantdidRequest {
	s.ItemKeyId = v
	return s
}

func (s *CancelBusinessDepositGrantdidRequest) SetKeyId(v string) *CancelBusinessDepositGrantdidRequest {
	s.KeyId = &v
	return s
}

type CancelBusinessDepositGrantdidResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 取消授权的主键
	DepositId *string `json:"deposit_id,omitempty" xml:"deposit_id,omitempty"`
	// 取消授权成功
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
}

func (s CancelBusinessDepositGrantdidResponse) String() string {
	return tea.Prettify(s)
}

func (s CancelBusinessDepositGrantdidResponse) GoString() string {
	return s.String()
}

func (s *CancelBusinessDepositGrantdidResponse) SetReqMsgId(v string) *CancelBusinessDepositGrantdidResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CancelBusinessDepositGrantdidResponse) SetResultCode(v string) *CancelBusinessDepositGrantdidResponse {
	s.ResultCode = &v
	return s
}

func (s *CancelBusinessDepositGrantdidResponse) SetResultMsg(v string) *CancelBusinessDepositGrantdidResponse {
	s.ResultMsg = &v
	return s
}

func (s *CancelBusinessDepositGrantdidResponse) SetDepositId(v string) *CancelBusinessDepositGrantdidResponse {
	s.DepositId = &v
	return s
}

func (s *CancelBusinessDepositGrantdidResponse) SetStatus(v string) *CancelBusinessDepositGrantdidResponse {
	s.Status = &v
	return s
}

type CancelBusinessDepositGrantcorpRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 数据存证所在链的业务id
	BizId *string `json:"biz_id,omitempty" xml:"biz_id,omitempty" require:"true"`
	// 存证数据的发起者did数字身份
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 取消授权的组织名称
	GrantedCorp *string `json:"granted_corp,omitempty" xml:"granted_corp,omitempty" require:"true"`
	// 取消授权的子列名称
	ItemKeyId []*string `json:"item_key_id,omitempty" xml:"item_key_id,omitempty" require:"true" type:"Repeated"`
	// 存证数据的逻辑主keyId
	KeyId *string `json:"key_id,omitempty" xml:"key_id,omitempty" require:"true"`
}

func (s CancelBusinessDepositGrantcorpRequest) String() string {
	return tea.Prettify(s)
}

func (s CancelBusinessDepositGrantcorpRequest) GoString() string {
	return s.String()
}

func (s *CancelBusinessDepositGrantcorpRequest) SetAuthToken(v string) *CancelBusinessDepositGrantcorpRequest {
	s.AuthToken = &v
	return s
}

func (s *CancelBusinessDepositGrantcorpRequest) SetProductInstanceId(v string) *CancelBusinessDepositGrantcorpRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CancelBusinessDepositGrantcorpRequest) SetBizId(v string) *CancelBusinessDepositGrantcorpRequest {
	s.BizId = &v
	return s
}

func (s *CancelBusinessDepositGrantcorpRequest) SetDid(v string) *CancelBusinessDepositGrantcorpRequest {
	s.Did = &v
	return s
}

func (s *CancelBusinessDepositGrantcorpRequest) SetGrantedCorp(v string) *CancelBusinessDepositGrantcorpRequest {
	s.GrantedCorp = &v
	return s
}

func (s *CancelBusinessDepositGrantcorpRequest) SetItemKeyId(v []*string) *CancelBusinessDepositGrantcorpRequest {
	s.ItemKeyId = v
	return s
}

func (s *CancelBusinessDepositGrantcorpRequest) SetKeyId(v string) *CancelBusinessDepositGrantcorpRequest {
	s.KeyId = &v
	return s
}

type CancelBusinessDepositGrantcorpResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 存证数据的逻辑主id(biz_id与key_id的拼接)
	DepositId *string `json:"deposit_id,omitempty" xml:"deposit_id,omitempty"`
	// 是否取消授权成功
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
}

func (s CancelBusinessDepositGrantcorpResponse) String() string {
	return tea.Prettify(s)
}

func (s CancelBusinessDepositGrantcorpResponse) GoString() string {
	return s.String()
}

func (s *CancelBusinessDepositGrantcorpResponse) SetReqMsgId(v string) *CancelBusinessDepositGrantcorpResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CancelBusinessDepositGrantcorpResponse) SetResultCode(v string) *CancelBusinessDepositGrantcorpResponse {
	s.ResultCode = &v
	return s
}

func (s *CancelBusinessDepositGrantcorpResponse) SetResultMsg(v string) *CancelBusinessDepositGrantcorpResponse {
	s.ResultMsg = &v
	return s
}

func (s *CancelBusinessDepositGrantcorpResponse) SetDepositId(v string) *CancelBusinessDepositGrantcorpResponse {
	s.DepositId = &v
	return s
}

func (s *CancelBusinessDepositGrantcorpResponse) SetStatus(v string) *CancelBusinessDepositGrantcorpResponse {
	s.Status = &v
	return s
}

type CreateBusinessContractGrantcorpRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 数据所在的链业务id
	BizId *string `json:"biz_id,omitempty" xml:"biz_id,omitempty" require:"true"`
	// 合约名称
	ContractName *string `json:"contract_name,omitempty" xml:"contract_name,omitempty" require:"true"`
	// 合约keyId发起者的数字身份
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 授权截止日期，超过该日期则不可继续访问该数据
	DueTime *string `json:"due_time,omitempty" xml:"due_time,omitempty" require:"true" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 授权的组织名称
	GrantedCorp *string `json:"granted_corp,omitempty" xml:"granted_corp,omitempty" require:"true"`
	// 需要授权的字段名称
	ItemIds []*string `json:"item_ids,omitempty" xml:"item_ids,omitempty" require:"true" type:"Repeated"`
}

func (s CreateBusinessContractGrantcorpRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateBusinessContractGrantcorpRequest) GoString() string {
	return s.String()
}

func (s *CreateBusinessContractGrantcorpRequest) SetAuthToken(v string) *CreateBusinessContractGrantcorpRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateBusinessContractGrantcorpRequest) SetProductInstanceId(v string) *CreateBusinessContractGrantcorpRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateBusinessContractGrantcorpRequest) SetBizId(v string) *CreateBusinessContractGrantcorpRequest {
	s.BizId = &v
	return s
}

func (s *CreateBusinessContractGrantcorpRequest) SetContractName(v string) *CreateBusinessContractGrantcorpRequest {
	s.ContractName = &v
	return s
}

func (s *CreateBusinessContractGrantcorpRequest) SetDid(v string) *CreateBusinessContractGrantcorpRequest {
	s.Did = &v
	return s
}

func (s *CreateBusinessContractGrantcorpRequest) SetDueTime(v string) *CreateBusinessContractGrantcorpRequest {
	s.DueTime = &v
	return s
}

func (s *CreateBusinessContractGrantcorpRequest) SetGrantedCorp(v string) *CreateBusinessContractGrantcorpRequest {
	s.GrantedCorp = &v
	return s
}

func (s *CreateBusinessContractGrantcorpRequest) SetItemIds(v []*string) *CreateBusinessContractGrantcorpRequest {
	s.ItemIds = v
	return s
}

type CreateBusinessContractGrantcorpResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 授权的字段列表
	Data []*string `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	// 是否授权给组织成功，0表示成功
	Status *int64 `json:"status,omitempty" xml:"status,omitempty"`
}

func (s CreateBusinessContractGrantcorpResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateBusinessContractGrantcorpResponse) GoString() string {
	return s.String()
}

func (s *CreateBusinessContractGrantcorpResponse) SetReqMsgId(v string) *CreateBusinessContractGrantcorpResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateBusinessContractGrantcorpResponse) SetResultCode(v string) *CreateBusinessContractGrantcorpResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateBusinessContractGrantcorpResponse) SetResultMsg(v string) *CreateBusinessContractGrantcorpResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateBusinessContractGrantcorpResponse) SetData(v []*string) *CreateBusinessContractGrantcorpResponse {
	s.Data = v
	return s
}

func (s *CreateBusinessContractGrantcorpResponse) SetStatus(v int64) *CreateBusinessContractGrantcorpResponse {
	s.Status = &v
	return s
}

type CancelBusinessContractGrantdidRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 合约所在链的业务id
	BizId *string `json:"biz_id,omitempty" xml:"biz_id,omitempty" require:"true"`
	// 合约名称
	ContractName *string `json:"contract_name,omitempty" xml:"contract_name,omitempty" require:"true"`
	// keyId的创建者数字身份
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 取消被授权者的数字身份
	GrantedDid *string `json:"granted_did,omitempty" xml:"granted_did,omitempty" require:"true"`
	// 取消授权的字段
	ItemIds []*string `json:"item_ids,omitempty" xml:"item_ids,omitempty" require:"true" type:"Repeated"`
}

func (s CancelBusinessContractGrantdidRequest) String() string {
	return tea.Prettify(s)
}

func (s CancelBusinessContractGrantdidRequest) GoString() string {
	return s.String()
}

func (s *CancelBusinessContractGrantdidRequest) SetAuthToken(v string) *CancelBusinessContractGrantdidRequest {
	s.AuthToken = &v
	return s
}

func (s *CancelBusinessContractGrantdidRequest) SetProductInstanceId(v string) *CancelBusinessContractGrantdidRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CancelBusinessContractGrantdidRequest) SetBizId(v string) *CancelBusinessContractGrantdidRequest {
	s.BizId = &v
	return s
}

func (s *CancelBusinessContractGrantdidRequest) SetContractName(v string) *CancelBusinessContractGrantdidRequest {
	s.ContractName = &v
	return s
}

func (s *CancelBusinessContractGrantdidRequest) SetDid(v string) *CancelBusinessContractGrantdidRequest {
	s.Did = &v
	return s
}

func (s *CancelBusinessContractGrantdidRequest) SetGrantedDid(v string) *CancelBusinessContractGrantdidRequest {
	s.GrantedDid = &v
	return s
}

func (s *CancelBusinessContractGrantdidRequest) SetItemIds(v []*string) *CancelBusinessContractGrantdidRequest {
	s.ItemIds = v
	return s
}

type CancelBusinessContractGrantdidResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 取消授权成功的字段列表
	Data *string `json:"data,omitempty" xml:"data,omitempty"`
	// 是否取消授权成功，0表示成功
	Status *int64 `json:"status,omitempty" xml:"status,omitempty"`
}

func (s CancelBusinessContractGrantdidResponse) String() string {
	return tea.Prettify(s)
}

func (s CancelBusinessContractGrantdidResponse) GoString() string {
	return s.String()
}

func (s *CancelBusinessContractGrantdidResponse) SetReqMsgId(v string) *CancelBusinessContractGrantdidResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CancelBusinessContractGrantdidResponse) SetResultCode(v string) *CancelBusinessContractGrantdidResponse {
	s.ResultCode = &v
	return s
}

func (s *CancelBusinessContractGrantdidResponse) SetResultMsg(v string) *CancelBusinessContractGrantdidResponse {
	s.ResultMsg = &v
	return s
}

func (s *CancelBusinessContractGrantdidResponse) SetData(v string) *CancelBusinessContractGrantdidResponse {
	s.Data = &v
	return s
}

func (s *CancelBusinessContractGrantdidResponse) SetStatus(v int64) *CancelBusinessContractGrantdidResponse {
	s.Status = &v
	return s
}

type CancelBusinessContractGrantcorpRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 合约所在的业务链id
	BizId *string `json:"biz_id,omitempty" xml:"biz_id,omitempty" require:"true"`
	// 合约名称
	ContractName *string `json:"contract_name,omitempty" xml:"contract_name,omitempty" require:"true"`
	// 用户的did数字身份
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 取消被授权者的机构名称
	GrantedCorp *string `json:"granted_corp,omitempty" xml:"granted_corp,omitempty" require:"true"`
	// 取消授权的字段名
	ItemIds []*string `json:"item_ids,omitempty" xml:"item_ids,omitempty" require:"true" type:"Repeated"`
}

func (s CancelBusinessContractGrantcorpRequest) String() string {
	return tea.Prettify(s)
}

func (s CancelBusinessContractGrantcorpRequest) GoString() string {
	return s.String()
}

func (s *CancelBusinessContractGrantcorpRequest) SetAuthToken(v string) *CancelBusinessContractGrantcorpRequest {
	s.AuthToken = &v
	return s
}

func (s *CancelBusinessContractGrantcorpRequest) SetProductInstanceId(v string) *CancelBusinessContractGrantcorpRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CancelBusinessContractGrantcorpRequest) SetBizId(v string) *CancelBusinessContractGrantcorpRequest {
	s.BizId = &v
	return s
}

func (s *CancelBusinessContractGrantcorpRequest) SetContractName(v string) *CancelBusinessContractGrantcorpRequest {
	s.ContractName = &v
	return s
}

func (s *CancelBusinessContractGrantcorpRequest) SetDid(v string) *CancelBusinessContractGrantcorpRequest {
	s.Did = &v
	return s
}

func (s *CancelBusinessContractGrantcorpRequest) SetGrantedCorp(v string) *CancelBusinessContractGrantcorpRequest {
	s.GrantedCorp = &v
	return s
}

func (s *CancelBusinessContractGrantcorpRequest) SetItemIds(v []*string) *CancelBusinessContractGrantcorpRequest {
	s.ItemIds = v
	return s
}

type CancelBusinessContractGrantcorpResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 成功取消授权的字段
	Data *string `json:"data,omitempty" xml:"data,omitempty"`
	// 是否取消授权成功，0表示成功
	Status *int64 `json:"status,omitempty" xml:"status,omitempty"`
}

func (s CancelBusinessContractGrantcorpResponse) String() string {
	return tea.Prettify(s)
}

func (s CancelBusinessContractGrantcorpResponse) GoString() string {
	return s.String()
}

func (s *CancelBusinessContractGrantcorpResponse) SetReqMsgId(v string) *CancelBusinessContractGrantcorpResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CancelBusinessContractGrantcorpResponse) SetResultCode(v string) *CancelBusinessContractGrantcorpResponse {
	s.ResultCode = &v
	return s
}

func (s *CancelBusinessContractGrantcorpResponse) SetResultMsg(v string) *CancelBusinessContractGrantcorpResponse {
	s.ResultMsg = &v
	return s
}

func (s *CancelBusinessContractGrantcorpResponse) SetData(v string) *CancelBusinessContractGrantcorpResponse {
	s.Data = &v
	return s
}

func (s *CancelBusinessContractGrantcorpResponse) SetStatus(v int64) *CancelBusinessContractGrantcorpResponse {
	s.Status = &v
	return s
}

type ImportPlatformTestregionTestfuncRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 123
	TestParam1 *string `json:"test_param1,omitempty" xml:"test_param1,omitempty" require:"true"`
	// 123
	TestParam2 *int64 `json:"test_param2,omitempty" xml:"test_param2,omitempty" require:"true"`
	// 123
	TestParam3 []*NodeInfo `json:"test_param3,omitempty" xml:"test_param3,omitempty" require:"true" type:"Repeated"`
}

func (s ImportPlatformTestregionTestfuncRequest) String() string {
	return tea.Prettify(s)
}

func (s ImportPlatformTestregionTestfuncRequest) GoString() string {
	return s.String()
}

func (s *ImportPlatformTestregionTestfuncRequest) SetAuthToken(v string) *ImportPlatformTestregionTestfuncRequest {
	s.AuthToken = &v
	return s
}

func (s *ImportPlatformTestregionTestfuncRequest) SetProductInstanceId(v string) *ImportPlatformTestregionTestfuncRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ImportPlatformTestregionTestfuncRequest) SetTestParam1(v string) *ImportPlatformTestregionTestfuncRequest {
	s.TestParam1 = &v
	return s
}

func (s *ImportPlatformTestregionTestfuncRequest) SetTestParam2(v int64) *ImportPlatformTestregionTestfuncRequest {
	s.TestParam2 = &v
	return s
}

func (s *ImportPlatformTestregionTestfuncRequest) SetTestParam3(v []*NodeInfo) *ImportPlatformTestregionTestfuncRequest {
	s.TestParam3 = v
	return s
}

type ImportPlatformTestregionTestfuncResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 123
	TestResponse *string `json:"test_response,omitempty" xml:"test_response,omitempty"`
}

func (s ImportPlatformTestregionTestfuncResponse) String() string {
	return tea.Prettify(s)
}

func (s ImportPlatformTestregionTestfuncResponse) GoString() string {
	return s.String()
}

func (s *ImportPlatformTestregionTestfuncResponse) SetReqMsgId(v string) *ImportPlatformTestregionTestfuncResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ImportPlatformTestregionTestfuncResponse) SetResultCode(v string) *ImportPlatformTestregionTestfuncResponse {
	s.ResultCode = &v
	return s
}

func (s *ImportPlatformTestregionTestfuncResponse) SetResultMsg(v string) *ImportPlatformTestregionTestfuncResponse {
	s.ResultMsg = &v
	return s
}

func (s *ImportPlatformTestregionTestfuncResponse) SetTestResponse(v string) *ImportPlatformTestregionTestfuncResponse {
	s.TestResponse = &v
	return s
}

type CreatePlatformDepositAccountRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 业务链对应的bizId
	BizId *string `json:"biz_id,omitempty" xml:"biz_id,omitempty" require:"true"`
	// 申请者对应的did账户
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
}

func (s CreatePlatformDepositAccountRequest) String() string {
	return tea.Prettify(s)
}

func (s CreatePlatformDepositAccountRequest) GoString() string {
	return s.String()
}

func (s *CreatePlatformDepositAccountRequest) SetAuthToken(v string) *CreatePlatformDepositAccountRequest {
	s.AuthToken = &v
	return s
}

func (s *CreatePlatformDepositAccountRequest) SetProductInstanceId(v string) *CreatePlatformDepositAccountRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreatePlatformDepositAccountRequest) SetBizId(v string) *CreatePlatformDepositAccountRequest {
	s.BizId = &v
	return s
}

func (s *CreatePlatformDepositAccountRequest) SetDid(v string) *CreatePlatformDepositAccountRequest {
	s.Did = &v
	return s
}

type CreatePlatformDepositAccountResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// did地址
	Did *string `json:"did,omitempty" xml:"did,omitempty"`
	// 租户账户
	IsvAccount *string `json:"isv_account,omitempty" xml:"isv_account,omitempty"`
	// 生成的账户在kms上的密钥id
	KmsId *string `json:"kms_id,omitempty" xml:"kms_id,omitempty"`
	// 调用接口是否成功
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
}

func (s CreatePlatformDepositAccountResponse) String() string {
	return tea.Prettify(s)
}

func (s CreatePlatformDepositAccountResponse) GoString() string {
	return s.String()
}

func (s *CreatePlatformDepositAccountResponse) SetReqMsgId(v string) *CreatePlatformDepositAccountResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreatePlatformDepositAccountResponse) SetResultCode(v string) *CreatePlatformDepositAccountResponse {
	s.ResultCode = &v
	return s
}

func (s *CreatePlatformDepositAccountResponse) SetResultMsg(v string) *CreatePlatformDepositAccountResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreatePlatformDepositAccountResponse) SetDid(v string) *CreatePlatformDepositAccountResponse {
	s.Did = &v
	return s
}

func (s *CreatePlatformDepositAccountResponse) SetIsvAccount(v string) *CreatePlatformDepositAccountResponse {
	s.IsvAccount = &v
	return s
}

func (s *CreatePlatformDepositAccountResponse) SetKmsId(v string) *CreatePlatformDepositAccountResponse {
	s.KmsId = &v
	return s
}

func (s *CreatePlatformDepositAccountResponse) SetStatus(v string) *CreatePlatformDepositAccountResponse {
	s.Status = &v
	return s
}

type CreatePlatformDepositDidRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 用户身份证号
	IdCardNumber *string `json:"id_card_number,omitempty" xml:"id_card_number,omitempty" require:"true"`
	// 手机号
	PhoneNumber *string `json:"phone_number,omitempty" xml:"phone_number,omitempty" require:"true"`
	// 用户姓名
	UserName *string `json:"user_name,omitempty" xml:"user_name,omitempty" require:"true"`
}

func (s CreatePlatformDepositDidRequest) String() string {
	return tea.Prettify(s)
}

func (s CreatePlatformDepositDidRequest) GoString() string {
	return s.String()
}

func (s *CreatePlatformDepositDidRequest) SetAuthToken(v string) *CreatePlatformDepositDidRequest {
	s.AuthToken = &v
	return s
}

func (s *CreatePlatformDepositDidRequest) SetProductInstanceId(v string) *CreatePlatformDepositDidRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreatePlatformDepositDidRequest) SetIdCardNumber(v string) *CreatePlatformDepositDidRequest {
	s.IdCardNumber = &v
	return s
}

func (s *CreatePlatformDepositDidRequest) SetPhoneNumber(v string) *CreatePlatformDepositDidRequest {
	s.PhoneNumber = &v
	return s
}

func (s *CreatePlatformDepositDidRequest) SetUserName(v string) *CreatePlatformDepositDidRequest {
	s.UserName = &v
	return s
}

type CreatePlatformDepositDidResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 用户did
	Did *string `json:"did,omitempty" xml:"did,omitempty"`
	// 租户金融科技id
	IsvAccount *string `json:"isv_account,omitempty" xml:"isv_account,omitempty"`
	// 是否创建成果
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
}

func (s CreatePlatformDepositDidResponse) String() string {
	return tea.Prettify(s)
}

func (s CreatePlatformDepositDidResponse) GoString() string {
	return s.String()
}

func (s *CreatePlatformDepositDidResponse) SetReqMsgId(v string) *CreatePlatformDepositDidResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreatePlatformDepositDidResponse) SetResultCode(v string) *CreatePlatformDepositDidResponse {
	s.ResultCode = &v
	return s
}

func (s *CreatePlatformDepositDidResponse) SetResultMsg(v string) *CreatePlatformDepositDidResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreatePlatformDepositDidResponse) SetDid(v string) *CreatePlatformDepositDidResponse {
	s.Did = &v
	return s
}

func (s *CreatePlatformDepositDidResponse) SetIsvAccount(v string) *CreatePlatformDepositDidResponse {
	s.IsvAccount = &v
	return s
}

func (s *CreatePlatformDepositDidResponse) SetStatus(v string) *CreatePlatformDepositDidResponse {
	s.Status = &v
	return s
}

type SavePlatformDepositDepositRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 业务链对应的bizId
	BizId *string `json:"biz_id,omitempty" xml:"biz_id,omitempty" require:"true"`
	// 存证数据
	Data *string `json:"data,omitempty" xml:"data,omitempty" require:"true"`
	// 用户的did地址
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 任意用户自定义的keyId(需要唯一)，根据该keyId可以查找存证的内容，若不填则使用txHash作为keyId
	KeyId *string `json:"key_id,omitempty" xml:"key_id,omitempty" require:"true"`
}

func (s SavePlatformDepositDepositRequest) String() string {
	return tea.Prettify(s)
}

func (s SavePlatformDepositDepositRequest) GoString() string {
	return s.String()
}

func (s *SavePlatformDepositDepositRequest) SetAuthToken(v string) *SavePlatformDepositDepositRequest {
	s.AuthToken = &v
	return s
}

func (s *SavePlatformDepositDepositRequest) SetProductInstanceId(v string) *SavePlatformDepositDepositRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *SavePlatformDepositDepositRequest) SetBizId(v string) *SavePlatformDepositDepositRequest {
	s.BizId = &v
	return s
}

func (s *SavePlatformDepositDepositRequest) SetData(v string) *SavePlatformDepositDepositRequest {
	s.Data = &v
	return s
}

func (s *SavePlatformDepositDepositRequest) SetDid(v string) *SavePlatformDepositDepositRequest {
	s.Did = &v
	return s
}

func (s *SavePlatformDepositDepositRequest) SetKeyId(v string) *SavePlatformDepositDepositRequest {
	s.KeyId = &v
	return s
}

type SavePlatformDepositDepositResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// bizid+accountid+keyId/txHash 组成的唯一id，用户可以根据该id到服务中查询链上内容
	DepositId *string `json:"deposit_id,omitempty" xml:"deposit_id,omitempty"`
	// 是否存证成果
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// 链上返回的txHash值
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty"`
}

func (s SavePlatformDepositDepositResponse) String() string {
	return tea.Prettify(s)
}

func (s SavePlatformDepositDepositResponse) GoString() string {
	return s.String()
}

func (s *SavePlatformDepositDepositResponse) SetReqMsgId(v string) *SavePlatformDepositDepositResponse {
	s.ReqMsgId = &v
	return s
}

func (s *SavePlatformDepositDepositResponse) SetResultCode(v string) *SavePlatformDepositDepositResponse {
	s.ResultCode = &v
	return s
}

func (s *SavePlatformDepositDepositResponse) SetResultMsg(v string) *SavePlatformDepositDepositResponse {
	s.ResultMsg = &v
	return s
}

func (s *SavePlatformDepositDepositResponse) SetDepositId(v string) *SavePlatformDepositDepositResponse {
	s.DepositId = &v
	return s
}

func (s *SavePlatformDepositDepositResponse) SetStatus(v string) *SavePlatformDepositDepositResponse {
	s.Status = &v
	return s
}

func (s *SavePlatformDepositDepositResponse) SetTxHash(v string) *SavePlatformDepositDepositResponse {
	s.TxHash = &v
	return s
}

type CreatePlatformDepositCorpdidRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 企业名称
	//
	EpCertName *string `json:"ep_cert_name,omitempty" xml:"ep_cert_name,omitempty" require:"true"`
	// 企业证件号
	EpCertNo *string `json:"ep_cert_no,omitempty" xml:"ep_cert_no,omitempty" require:"true"`
	// 企业法人名称
	LegalPersonCertName *string `json:"legal_person_cert_name,omitempty" xml:"legal_person_cert_name,omitempty" require:"true"`
}

func (s CreatePlatformDepositCorpdidRequest) String() string {
	return tea.Prettify(s)
}

func (s CreatePlatformDepositCorpdidRequest) GoString() string {
	return s.String()
}

func (s *CreatePlatformDepositCorpdidRequest) SetAuthToken(v string) *CreatePlatformDepositCorpdidRequest {
	s.AuthToken = &v
	return s
}

func (s *CreatePlatformDepositCorpdidRequest) SetProductInstanceId(v string) *CreatePlatformDepositCorpdidRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreatePlatformDepositCorpdidRequest) SetEpCertName(v string) *CreatePlatformDepositCorpdidRequest {
	s.EpCertName = &v
	return s
}

func (s *CreatePlatformDepositCorpdidRequest) SetEpCertNo(v string) *CreatePlatformDepositCorpdidRequest {
	s.EpCertNo = &v
	return s
}

func (s *CreatePlatformDepositCorpdidRequest) SetLegalPersonCertName(v string) *CreatePlatformDepositCorpdidRequest {
	s.LegalPersonCertName = &v
	return s
}

type CreatePlatformDepositCorpdidResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 企业did
	Did *string `json:"did,omitempty" xml:"did,omitempty"`
	// 调用者金融科技id
	IsvAccount *string `json:"isv_account,omitempty" xml:"isv_account,omitempty"`
	// 是否调用成功
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
}

func (s CreatePlatformDepositCorpdidResponse) String() string {
	return tea.Prettify(s)
}

func (s CreatePlatformDepositCorpdidResponse) GoString() string {
	return s.String()
}

func (s *CreatePlatformDepositCorpdidResponse) SetReqMsgId(v string) *CreatePlatformDepositCorpdidResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreatePlatformDepositCorpdidResponse) SetResultCode(v string) *CreatePlatformDepositCorpdidResponse {
	s.ResultCode = &v
	return s
}

func (s *CreatePlatformDepositCorpdidResponse) SetResultMsg(v string) *CreatePlatformDepositCorpdidResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreatePlatformDepositCorpdidResponse) SetDid(v string) *CreatePlatformDepositCorpdidResponse {
	s.Did = &v
	return s
}

func (s *CreatePlatformDepositCorpdidResponse) SetIsvAccount(v string) *CreatePlatformDepositCorpdidResponse {
	s.IsvAccount = &v
	return s
}

func (s *CreatePlatformDepositCorpdidResponse) SetStatus(v string) *CreatePlatformDepositCorpdidResponse {
	s.Status = &v
	return s
}

type CreateDigitalassetartAccountRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 用户手机号
	Phone *string `json:"phone,omitempty" xml:"phone,omitempty" require:"true"`
	// 用户的支付宝账号
	UserAccount *string `json:"user_account,omitempty" xml:"user_account,omitempty" require:"true"`
	// 用户姓名
	UserName *string `json:"user_name,omitempty" xml:"user_name,omitempty" require:"true"`
}

func (s CreateDigitalassetartAccountRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDigitalassetartAccountRequest) GoString() string {
	return s.String()
}

func (s *CreateDigitalassetartAccountRequest) SetAuthToken(v string) *CreateDigitalassetartAccountRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateDigitalassetartAccountRequest) SetProductInstanceId(v string) *CreateDigitalassetartAccountRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateDigitalassetartAccountRequest) SetPhone(v string) *CreateDigitalassetartAccountRequest {
	s.Phone = &v
	return s
}

func (s *CreateDigitalassetartAccountRequest) SetUserAccount(v string) *CreateDigitalassetartAccountRequest {
	s.UserAccount = &v
	return s
}

func (s *CreateDigitalassetartAccountRequest) SetUserName(v string) *CreateDigitalassetartAccountRequest {
	s.UserName = &v
	return s
}

type CreateDigitalassetartAccountResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 用户链账户地址
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty"`
}

func (s CreateDigitalassetartAccountResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDigitalassetartAccountResponse) GoString() string {
	return s.String()
}

func (s *CreateDigitalassetartAccountResponse) SetReqMsgId(v string) *CreateDigitalassetartAccountResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateDigitalassetartAccountResponse) SetResultCode(v string) *CreateDigitalassetartAccountResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateDigitalassetartAccountResponse) SetResultMsg(v string) *CreateDigitalassetartAccountResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateDigitalassetartAccountResponse) SetAccountId(v string) *CreateDigitalassetartAccountResponse {
	s.AccountId = &v
	return s
}

type BatchcreateDigitalassetartAccountRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 批量用户账户、姓名、手机号等信息
	Users []*UserInfoParam `json:"users,omitempty" xml:"users,omitempty" require:"true" type:"Repeated"`
}

func (s BatchcreateDigitalassetartAccountRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchcreateDigitalassetartAccountRequest) GoString() string {
	return s.String()
}

func (s *BatchcreateDigitalassetartAccountRequest) SetAuthToken(v string) *BatchcreateDigitalassetartAccountRequest {
	s.AuthToken = &v
	return s
}

func (s *BatchcreateDigitalassetartAccountRequest) SetProductInstanceId(v string) *BatchcreateDigitalassetartAccountRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *BatchcreateDigitalassetartAccountRequest) SetUsers(v []*UserInfoParam) *BatchcreateDigitalassetartAccountRequest {
	s.Users = v
	return s
}

type BatchcreateDigitalassetartAccountResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 失败的账户
	FailList []*string `json:"fail_list,omitempty" xml:"fail_list,omitempty" type:"Repeated"`
	// 失败的个数
	FailNum *int64 `json:"fail_num,omitempty" xml:"fail_num,omitempty"`
	// 成功的个数
	SuccessNum *int64 `json:"success_num,omitempty" xml:"success_num,omitempty"`
}

func (s BatchcreateDigitalassetartAccountResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchcreateDigitalassetartAccountResponse) GoString() string {
	return s.String()
}

func (s *BatchcreateDigitalassetartAccountResponse) SetReqMsgId(v string) *BatchcreateDigitalassetartAccountResponse {
	s.ReqMsgId = &v
	return s
}

func (s *BatchcreateDigitalassetartAccountResponse) SetResultCode(v string) *BatchcreateDigitalassetartAccountResponse {
	s.ResultCode = &v
	return s
}

func (s *BatchcreateDigitalassetartAccountResponse) SetResultMsg(v string) *BatchcreateDigitalassetartAccountResponse {
	s.ResultMsg = &v
	return s
}

func (s *BatchcreateDigitalassetartAccountResponse) SetFailList(v []*string) *BatchcreateDigitalassetartAccountResponse {
	s.FailList = v
	return s
}

func (s *BatchcreateDigitalassetartAccountResponse) SetFailNum(v int64) *BatchcreateDigitalassetartAccountResponse {
	s.FailNum = &v
	return s
}

func (s *BatchcreateDigitalassetartAccountResponse) SetSuccessNum(v int64) *BatchcreateDigitalassetartAccountResponse {
	s.SuccessNum = &v
	return s
}

type CreateDigitalassetartArtCreateRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 艺术品锚定物
	ArtAnchor *string `json:"art_anchor,omitempty" xml:"art_anchor,omitempty" require:"true"`
	// 艺术品唯一id
	ArtId *string `json:"art_id,omitempty" xml:"art_id,omitempty" require:"true"`
	// 艺术品名称
	ArtName *string `json:"art_name,omitempty" xml:"art_name,omitempty" require:"true"`
	// 艺术品代码
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// 创建时间
	CreateDate *string `json:"create_date,omitempty" xml:"create_date,omitempty" require:"true"`
	// 鉴定者账户
	Identifiers []*string `json:"identifiers,omitempty" xml:"identifiers,omitempty" require:"true" type:"Repeated"`
	// 艺术品图片哈希
	ImageHashes []*string `json:"image_hashes,omitempty" xml:"image_hashes,omitempty" require:"true" type:"Repeated"`
	// 一级分类
	MainClass *string `json:"main_class,omitempty" xml:"main_class,omitempty" require:"true"`
	// 拥有者链上账户地址
	OwnerAccountId *string `json:"owner_account_id,omitempty" xml:"owner_account_id,omitempty" require:"true"`
	// 二级分类
	SubClass *string `json:"sub_class,omitempty" xml:"sub_class,omitempty" require:"true"`
	// 艺术品视频哈希
	VedioHashes []*string `json:"vedio_hashes,omitempty" xml:"vedio_hashes,omitempty" require:"true" type:"Repeated"`
}

func (s CreateDigitalassetartArtCreateRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDigitalassetartArtCreateRequest) GoString() string {
	return s.String()
}

func (s *CreateDigitalassetartArtCreateRequest) SetAuthToken(v string) *CreateDigitalassetartArtCreateRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateDigitalassetartArtCreateRequest) SetProductInstanceId(v string) *CreateDigitalassetartArtCreateRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateDigitalassetartArtCreateRequest) SetArtAnchor(v string) *CreateDigitalassetartArtCreateRequest {
	s.ArtAnchor = &v
	return s
}

func (s *CreateDigitalassetartArtCreateRequest) SetArtId(v string) *CreateDigitalassetartArtCreateRequest {
	s.ArtId = &v
	return s
}

func (s *CreateDigitalassetartArtCreateRequest) SetArtName(v string) *CreateDigitalassetartArtCreateRequest {
	s.ArtName = &v
	return s
}

func (s *CreateDigitalassetartArtCreateRequest) SetCode(v string) *CreateDigitalassetartArtCreateRequest {
	s.Code = &v
	return s
}

func (s *CreateDigitalassetartArtCreateRequest) SetCreateDate(v string) *CreateDigitalassetartArtCreateRequest {
	s.CreateDate = &v
	return s
}

func (s *CreateDigitalassetartArtCreateRequest) SetIdentifiers(v []*string) *CreateDigitalassetartArtCreateRequest {
	s.Identifiers = v
	return s
}

func (s *CreateDigitalassetartArtCreateRequest) SetImageHashes(v []*string) *CreateDigitalassetartArtCreateRequest {
	s.ImageHashes = v
	return s
}

func (s *CreateDigitalassetartArtCreateRequest) SetMainClass(v string) *CreateDigitalassetartArtCreateRequest {
	s.MainClass = &v
	return s
}

func (s *CreateDigitalassetartArtCreateRequest) SetOwnerAccountId(v string) *CreateDigitalassetartArtCreateRequest {
	s.OwnerAccountId = &v
	return s
}

func (s *CreateDigitalassetartArtCreateRequest) SetSubClass(v string) *CreateDigitalassetartArtCreateRequest {
	s.SubClass = &v
	return s
}

func (s *CreateDigitalassetartArtCreateRequest) SetVedioHashes(v []*string) *CreateDigitalassetartArtCreateRequest {
	s.VedioHashes = v
	return s
}

type CreateDigitalassetartArtCreateResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 艺术品唯一id
	ArtId *string `json:"art_id,omitempty" xml:"art_id,omitempty"`
	// 艺术品状态信息
	Status *int64 `json:"status,omitempty" xml:"status,omitempty"`
}

func (s CreateDigitalassetartArtCreateResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDigitalassetartArtCreateResponse) GoString() string {
	return s.String()
}

func (s *CreateDigitalassetartArtCreateResponse) SetReqMsgId(v string) *CreateDigitalassetartArtCreateResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateDigitalassetartArtCreateResponse) SetResultCode(v string) *CreateDigitalassetartArtCreateResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateDigitalassetartArtCreateResponse) SetResultMsg(v string) *CreateDigitalassetartArtCreateResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateDigitalassetartArtCreateResponse) SetArtId(v string) *CreateDigitalassetartArtCreateResponse {
	s.ArtId = &v
	return s
}

func (s *CreateDigitalassetartArtCreateResponse) SetStatus(v int64) *CreateDigitalassetartArtCreateResponse {
	s.Status = &v
	return s
}

type SetDigitalassetartArtIssueRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 拥有者链上账户地址
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty" require:"true"`
	// 艺术品id
	ArtId *string `json:"art_id,omitempty" xml:"art_id,omitempty" require:"true"`
}

func (s SetDigitalassetartArtIssueRequest) String() string {
	return tea.Prettify(s)
}

func (s SetDigitalassetartArtIssueRequest) GoString() string {
	return s.String()
}

func (s *SetDigitalassetartArtIssueRequest) SetAuthToken(v string) *SetDigitalassetartArtIssueRequest {
	s.AuthToken = &v
	return s
}

func (s *SetDigitalassetartArtIssueRequest) SetProductInstanceId(v string) *SetDigitalassetartArtIssueRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *SetDigitalassetartArtIssueRequest) SetAccountId(v string) *SetDigitalassetartArtIssueRequest {
	s.AccountId = &v
	return s
}

func (s *SetDigitalassetartArtIssueRequest) SetArtId(v string) *SetDigitalassetartArtIssueRequest {
	s.ArtId = &v
	return s
}

type SetDigitalassetartArtIssueResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 艺术品id
	ArtId *string `json:"art_id,omitempty" xml:"art_id,omitempty"`
	// 艺术品状态信息，1表示发行成功
	Status *int64 `json:"status,omitempty" xml:"status,omitempty"`
}

func (s SetDigitalassetartArtIssueResponse) String() string {
	return tea.Prettify(s)
}

func (s SetDigitalassetartArtIssueResponse) GoString() string {
	return s.String()
}

func (s *SetDigitalassetartArtIssueResponse) SetReqMsgId(v string) *SetDigitalassetartArtIssueResponse {
	s.ReqMsgId = &v
	return s
}

func (s *SetDigitalassetartArtIssueResponse) SetResultCode(v string) *SetDigitalassetartArtIssueResponse {
	s.ResultCode = &v
	return s
}

func (s *SetDigitalassetartArtIssueResponse) SetResultMsg(v string) *SetDigitalassetartArtIssueResponse {
	s.ResultMsg = &v
	return s
}

func (s *SetDigitalassetartArtIssueResponse) SetArtId(v string) *SetDigitalassetartArtIssueResponse {
	s.ArtId = &v
	return s
}

func (s *SetDigitalassetartArtIssueResponse) SetStatus(v int64) *SetDigitalassetartArtIssueResponse {
	s.Status = &v
	return s
}

type SetDigitalassetartArtIssuetoexchangeRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 拥有者账户地址
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty" require:"true"`
	// 艺术品id
	ArtId *string `json:"art_id,omitempty" xml:"art_id,omitempty" require:"true"`
	// 交易所代码
	ExchangeCode *string `json:"exchange_code,omitempty" xml:"exchange_code,omitempty" require:"true"`
}

func (s SetDigitalassetartArtIssuetoexchangeRequest) String() string {
	return tea.Prettify(s)
}

func (s SetDigitalassetartArtIssuetoexchangeRequest) GoString() string {
	return s.String()
}

func (s *SetDigitalassetartArtIssuetoexchangeRequest) SetAuthToken(v string) *SetDigitalassetartArtIssuetoexchangeRequest {
	s.AuthToken = &v
	return s
}

func (s *SetDigitalassetartArtIssuetoexchangeRequest) SetProductInstanceId(v string) *SetDigitalassetartArtIssuetoexchangeRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *SetDigitalassetartArtIssuetoexchangeRequest) SetAccountId(v string) *SetDigitalassetartArtIssuetoexchangeRequest {
	s.AccountId = &v
	return s
}

func (s *SetDigitalassetartArtIssuetoexchangeRequest) SetArtId(v string) *SetDigitalassetartArtIssuetoexchangeRequest {
	s.ArtId = &v
	return s
}

func (s *SetDigitalassetartArtIssuetoexchangeRequest) SetExchangeCode(v string) *SetDigitalassetartArtIssuetoexchangeRequest {
	s.ExchangeCode = &v
	return s
}

type SetDigitalassetartArtIssuetoexchangeResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 艺术品id
	ArtId *string `json:"art_id,omitempty" xml:"art_id,omitempty"`
	// 交易所代码
	ExchangeCode *string `json:"exchange_code,omitempty" xml:"exchange_code,omitempty"`
}

func (s SetDigitalassetartArtIssuetoexchangeResponse) String() string {
	return tea.Prettify(s)
}

func (s SetDigitalassetartArtIssuetoexchangeResponse) GoString() string {
	return s.String()
}

func (s *SetDigitalassetartArtIssuetoexchangeResponse) SetReqMsgId(v string) *SetDigitalassetartArtIssuetoexchangeResponse {
	s.ReqMsgId = &v
	return s
}

func (s *SetDigitalassetartArtIssuetoexchangeResponse) SetResultCode(v string) *SetDigitalassetartArtIssuetoexchangeResponse {
	s.ResultCode = &v
	return s
}

func (s *SetDigitalassetartArtIssuetoexchangeResponse) SetResultMsg(v string) *SetDigitalassetartArtIssuetoexchangeResponse {
	s.ResultMsg = &v
	return s
}

func (s *SetDigitalassetartArtIssuetoexchangeResponse) SetArtId(v string) *SetDigitalassetartArtIssuetoexchangeResponse {
	s.ArtId = &v
	return s
}

func (s *SetDigitalassetartArtIssuetoexchangeResponse) SetExchangeCode(v string) *SetDigitalassetartArtIssuetoexchangeResponse {
	s.ExchangeCode = &v
	return s
}

type SetDigitalassetartArtTradeRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 拥有者链上地址
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty" require:"true"`
	// 艺术品唯一id
	ArtId *string `json:"art_id,omitempty" xml:"art_id,omitempty" require:"true"`
}

func (s SetDigitalassetartArtTradeRequest) String() string {
	return tea.Prettify(s)
}

func (s SetDigitalassetartArtTradeRequest) GoString() string {
	return s.String()
}

func (s *SetDigitalassetartArtTradeRequest) SetAuthToken(v string) *SetDigitalassetartArtTradeRequest {
	s.AuthToken = &v
	return s
}

func (s *SetDigitalassetartArtTradeRequest) SetProductInstanceId(v string) *SetDigitalassetartArtTradeRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *SetDigitalassetartArtTradeRequest) SetAccountId(v string) *SetDigitalassetartArtTradeRequest {
	s.AccountId = &v
	return s
}

func (s *SetDigitalassetartArtTradeRequest) SetArtId(v string) *SetDigitalassetartArtTradeRequest {
	s.ArtId = &v
	return s
}

type SetDigitalassetartArtTradeResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 艺术品交易成功
	ArtId *string `json:"art_id,omitempty" xml:"art_id,omitempty"`
}

func (s SetDigitalassetartArtTradeResponse) String() string {
	return tea.Prettify(s)
}

func (s SetDigitalassetartArtTradeResponse) GoString() string {
	return s.String()
}

func (s *SetDigitalassetartArtTradeResponse) SetReqMsgId(v string) *SetDigitalassetartArtTradeResponse {
	s.ReqMsgId = &v
	return s
}

func (s *SetDigitalassetartArtTradeResponse) SetResultCode(v string) *SetDigitalassetartArtTradeResponse {
	s.ResultCode = &v
	return s
}

func (s *SetDigitalassetartArtTradeResponse) SetResultMsg(v string) *SetDigitalassetartArtTradeResponse {
	s.ResultMsg = &v
	return s
}

func (s *SetDigitalassetartArtTradeResponse) SetArtId(v string) *SetDigitalassetartArtTradeResponse {
	s.ArtId = &v
	return s
}

type SetDigitalassetartArtTradeonexchangeRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 交易所代码
	ExchangeCode *string `json:"exchange_code,omitempty" xml:"exchange_code,omitempty" require:"true"`
	// 交易者账户
	TradeAccountId *string `json:"trade_account_id,omitempty" xml:"trade_account_id,omitempty" require:"true"`
	// 交易txHash
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty" require:"true"`
}

func (s SetDigitalassetartArtTradeonexchangeRequest) String() string {
	return tea.Prettify(s)
}

func (s SetDigitalassetartArtTradeonexchangeRequest) GoString() string {
	return s.String()
}

func (s *SetDigitalassetartArtTradeonexchangeRequest) SetAuthToken(v string) *SetDigitalassetartArtTradeonexchangeRequest {
	s.AuthToken = &v
	return s
}

func (s *SetDigitalassetartArtTradeonexchangeRequest) SetProductInstanceId(v string) *SetDigitalassetartArtTradeonexchangeRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *SetDigitalassetartArtTradeonexchangeRequest) SetExchangeCode(v string) *SetDigitalassetartArtTradeonexchangeRequest {
	s.ExchangeCode = &v
	return s
}

func (s *SetDigitalassetartArtTradeonexchangeRequest) SetTradeAccountId(v string) *SetDigitalassetartArtTradeonexchangeRequest {
	s.TradeAccountId = &v
	return s
}

func (s *SetDigitalassetartArtTradeonexchangeRequest) SetTxHash(v string) *SetDigitalassetartArtTradeonexchangeRequest {
	s.TxHash = &v
	return s
}

type SetDigitalassetartArtTradeonexchangeResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 0 在交易成功
	// 1 在交易失败
	Status *int64 `json:"status,omitempty" xml:"status,omitempty"`
}

func (s SetDigitalassetartArtTradeonexchangeResponse) String() string {
	return tea.Prettify(s)
}

func (s SetDigitalassetartArtTradeonexchangeResponse) GoString() string {
	return s.String()
}

func (s *SetDigitalassetartArtTradeonexchangeResponse) SetReqMsgId(v string) *SetDigitalassetartArtTradeonexchangeResponse {
	s.ReqMsgId = &v
	return s
}

func (s *SetDigitalassetartArtTradeonexchangeResponse) SetResultCode(v string) *SetDigitalassetartArtTradeonexchangeResponse {
	s.ResultCode = &v
	return s
}

func (s *SetDigitalassetartArtTradeonexchangeResponse) SetResultMsg(v string) *SetDigitalassetartArtTradeonexchangeResponse {
	s.ResultMsg = &v
	return s
}

func (s *SetDigitalassetartArtTradeonexchangeResponse) SetStatus(v int64) *SetDigitalassetartArtTradeonexchangeResponse {
	s.Status = &v
	return s
}

type FreezeDigitalassetartArtAccountRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 管理员账户
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty" require:"true"`
	// 艺术品id
	ArtId *string `json:"art_id,omitempty" xml:"art_id,omitempty" require:"true"`
}

func (s FreezeDigitalassetartArtAccountRequest) String() string {
	return tea.Prettify(s)
}

func (s FreezeDigitalassetartArtAccountRequest) GoString() string {
	return s.String()
}

func (s *FreezeDigitalassetartArtAccountRequest) SetAuthToken(v string) *FreezeDigitalassetartArtAccountRequest {
	s.AuthToken = &v
	return s
}

func (s *FreezeDigitalassetartArtAccountRequest) SetProductInstanceId(v string) *FreezeDigitalassetartArtAccountRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *FreezeDigitalassetartArtAccountRequest) SetAccountId(v string) *FreezeDigitalassetartArtAccountRequest {
	s.AccountId = &v
	return s
}

func (s *FreezeDigitalassetartArtAccountRequest) SetArtId(v string) *FreezeDigitalassetartArtAccountRequest {
	s.ArtId = &v
	return s
}

type FreezeDigitalassetartArtAccountResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 艺术品id
	ArtId *string `json:"art_id,omitempty" xml:"art_id,omitempty"`
	// 艺术品冻结是否成功，0表示成功
	Status *int64 `json:"status,omitempty" xml:"status,omitempty"`
}

func (s FreezeDigitalassetartArtAccountResponse) String() string {
	return tea.Prettify(s)
}

func (s FreezeDigitalassetartArtAccountResponse) GoString() string {
	return s.String()
}

func (s *FreezeDigitalassetartArtAccountResponse) SetReqMsgId(v string) *FreezeDigitalassetartArtAccountResponse {
	s.ReqMsgId = &v
	return s
}

func (s *FreezeDigitalassetartArtAccountResponse) SetResultCode(v string) *FreezeDigitalassetartArtAccountResponse {
	s.ResultCode = &v
	return s
}

func (s *FreezeDigitalassetartArtAccountResponse) SetResultMsg(v string) *FreezeDigitalassetartArtAccountResponse {
	s.ResultMsg = &v
	return s
}

func (s *FreezeDigitalassetartArtAccountResponse) SetArtId(v string) *FreezeDigitalassetartArtAccountResponse {
	s.ArtId = &v
	return s
}

func (s *FreezeDigitalassetartArtAccountResponse) SetStatus(v int64) *FreezeDigitalassetartArtAccountResponse {
	s.Status = &v
	return s
}

type UnfreezeDigitalassetartArtAccountRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 管理员账户id
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty" require:"true"`
	// 艺术品id
	ArtId *string `json:"art_id,omitempty" xml:"art_id,omitempty" require:"true"`
}

func (s UnfreezeDigitalassetartArtAccountRequest) String() string {
	return tea.Prettify(s)
}

func (s UnfreezeDigitalassetartArtAccountRequest) GoString() string {
	return s.String()
}

func (s *UnfreezeDigitalassetartArtAccountRequest) SetAuthToken(v string) *UnfreezeDigitalassetartArtAccountRequest {
	s.AuthToken = &v
	return s
}

func (s *UnfreezeDigitalassetartArtAccountRequest) SetProductInstanceId(v string) *UnfreezeDigitalassetartArtAccountRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UnfreezeDigitalassetartArtAccountRequest) SetAccountId(v string) *UnfreezeDigitalassetartArtAccountRequest {
	s.AccountId = &v
	return s
}

func (s *UnfreezeDigitalassetartArtAccountRequest) SetArtId(v string) *UnfreezeDigitalassetartArtAccountRequest {
	s.ArtId = &v
	return s
}

type UnfreezeDigitalassetartArtAccountResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 艺术品id
	ArtId *string `json:"art_id,omitempty" xml:"art_id,omitempty"`
	// 解冻是否成功，0表示成功
	Status *int64 `json:"status,omitempty" xml:"status,omitempty"`
}

func (s UnfreezeDigitalassetartArtAccountResponse) String() string {
	return tea.Prettify(s)
}

func (s UnfreezeDigitalassetartArtAccountResponse) GoString() string {
	return s.String()
}

func (s *UnfreezeDigitalassetartArtAccountResponse) SetReqMsgId(v string) *UnfreezeDigitalassetartArtAccountResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UnfreezeDigitalassetartArtAccountResponse) SetResultCode(v string) *UnfreezeDigitalassetartArtAccountResponse {
	s.ResultCode = &v
	return s
}

func (s *UnfreezeDigitalassetartArtAccountResponse) SetResultMsg(v string) *UnfreezeDigitalassetartArtAccountResponse {
	s.ResultMsg = &v
	return s
}

func (s *UnfreezeDigitalassetartArtAccountResponse) SetArtId(v string) *UnfreezeDigitalassetartArtAccountResponse {
	s.ArtId = &v
	return s
}

func (s *UnfreezeDigitalassetartArtAccountResponse) SetStatus(v int64) *UnfreezeDigitalassetartArtAccountResponse {
	s.Status = &v
	return s
}

type SetDigitalassetartArtUnissuetoexchangeRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 管理员账户地址
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty" require:"true"`
	// 艺术品id
	ArtId *string `json:"art_id,omitempty" xml:"art_id,omitempty" require:"true"`
	// 交易所代码
	ExchangeCode *string `json:"exchange_code,omitempty" xml:"exchange_code,omitempty" require:"true"`
}

func (s SetDigitalassetartArtUnissuetoexchangeRequest) String() string {
	return tea.Prettify(s)
}

func (s SetDigitalassetartArtUnissuetoexchangeRequest) GoString() string {
	return s.String()
}

func (s *SetDigitalassetartArtUnissuetoexchangeRequest) SetAuthToken(v string) *SetDigitalassetartArtUnissuetoexchangeRequest {
	s.AuthToken = &v
	return s
}

func (s *SetDigitalassetartArtUnissuetoexchangeRequest) SetProductInstanceId(v string) *SetDigitalassetartArtUnissuetoexchangeRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *SetDigitalassetartArtUnissuetoexchangeRequest) SetAccountId(v string) *SetDigitalassetartArtUnissuetoexchangeRequest {
	s.AccountId = &v
	return s
}

func (s *SetDigitalassetartArtUnissuetoexchangeRequest) SetArtId(v string) *SetDigitalassetartArtUnissuetoexchangeRequest {
	s.ArtId = &v
	return s
}

func (s *SetDigitalassetartArtUnissuetoexchangeRequest) SetExchangeCode(v string) *SetDigitalassetartArtUnissuetoexchangeRequest {
	s.ExchangeCode = &v
	return s
}

type SetDigitalassetartArtUnissuetoexchangeResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 取消在交易所发布艺术品成功或者失败原因详情
	Reason *string `json:"reason,omitempty" xml:"reason,omitempty"`
	// 取消在交易发布艺术品调用是否成功
	// 0 表示成功
	Status *int64 `json:"status,omitempty" xml:"status,omitempty"`
}

func (s SetDigitalassetartArtUnissuetoexchangeResponse) String() string {
	return tea.Prettify(s)
}

func (s SetDigitalassetartArtUnissuetoexchangeResponse) GoString() string {
	return s.String()
}

func (s *SetDigitalassetartArtUnissuetoexchangeResponse) SetReqMsgId(v string) *SetDigitalassetartArtUnissuetoexchangeResponse {
	s.ReqMsgId = &v
	return s
}

func (s *SetDigitalassetartArtUnissuetoexchangeResponse) SetResultCode(v string) *SetDigitalassetartArtUnissuetoexchangeResponse {
	s.ResultCode = &v
	return s
}

func (s *SetDigitalassetartArtUnissuetoexchangeResponse) SetResultMsg(v string) *SetDigitalassetartArtUnissuetoexchangeResponse {
	s.ResultMsg = &v
	return s
}

func (s *SetDigitalassetartArtUnissuetoexchangeResponse) SetReason(v string) *SetDigitalassetartArtUnissuetoexchangeResponse {
	s.Reason = &v
	return s
}

func (s *SetDigitalassetartArtUnissuetoexchangeResponse) SetStatus(v int64) *SetDigitalassetartArtUnissuetoexchangeResponse {
	s.Status = &v
	return s
}

type QueryDigitalassetartArtRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 管理员账户
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty" require:"true"`
	// 艺术品id
	ArtId *string `json:"art_id,omitempty" xml:"art_id,omitempty" require:"true"`
}

func (s QueryDigitalassetartArtRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDigitalassetartArtRequest) GoString() string {
	return s.String()
}

func (s *QueryDigitalassetartArtRequest) SetAuthToken(v string) *QueryDigitalassetartArtRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryDigitalassetartArtRequest) SetProductInstanceId(v string) *QueryDigitalassetartArtRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryDigitalassetartArtRequest) SetAccountId(v string) *QueryDigitalassetartArtRequest {
	s.AccountId = &v
	return s
}

func (s *QueryDigitalassetartArtRequest) SetArtId(v string) *QueryDigitalassetartArtRequest {
	s.ArtId = &v
	return s
}

type QueryDigitalassetartArtResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 艺术品id
	ArtId *string `json:"art_id,omitempty" xml:"art_id,omitempty"`
	// 艺术品名称
	ArtName *string `json:"art_name,omitempty" xml:"art_name,omitempty"`
	// 艺术品代码
	Code *string `json:"code,omitempty" xml:"code,omitempty"`
	// 艺术品所在交易所代码
	Exchanges []*string `json:"exchanges,omitempty" xml:"exchanges,omitempty" type:"Repeated"`
	// 艺术品鉴定者列表
	Identifiers []*string `json:"identifiers,omitempty" xml:"identifiers,omitempty" type:"Repeated"`
	// 艺术品图片哈希
	ImageHash []*string `json:"image_hash,omitempty" xml:"image_hash,omitempty" type:"Repeated"`
	// 发行方账户信息
	IssueAccount *string `json:"issue_account,omitempty" xml:"issue_account,omitempty"`
	// 艺术品在链上发行时间
	IssueDate *int64 `json:"issue_date,omitempty" xml:"issue_date,omitempty"`
	// 艺术品所属主分类
	MainClass *string `json:"main_class,omitempty" xml:"main_class,omitempty"`
	// 艺术品拥有者id
	OwnerId *string `json:"owner_id,omitempty" xml:"owner_id,omitempty"`
	// 艺术品状态信息
	// 1未发行
	// 2已发行
	// 3冻结
	// 4回购
	State *int64 `json:"state,omitempty" xml:"state,omitempty"`
	// 艺术品所属分类次分类
	SubClass *string `json:"sub_class,omitempty" xml:"sub_class,omitempty"`
	// 艺术品视频哈希
	VedioHash *string `json:"vedio_hash,omitempty" xml:"vedio_hash,omitempty"`
}

func (s QueryDigitalassetartArtResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDigitalassetartArtResponse) GoString() string {
	return s.String()
}

func (s *QueryDigitalassetartArtResponse) SetReqMsgId(v string) *QueryDigitalassetartArtResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryDigitalassetartArtResponse) SetResultCode(v string) *QueryDigitalassetartArtResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryDigitalassetartArtResponse) SetResultMsg(v string) *QueryDigitalassetartArtResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryDigitalassetartArtResponse) SetArtId(v string) *QueryDigitalassetartArtResponse {
	s.ArtId = &v
	return s
}

func (s *QueryDigitalassetartArtResponse) SetArtName(v string) *QueryDigitalassetartArtResponse {
	s.ArtName = &v
	return s
}

func (s *QueryDigitalassetartArtResponse) SetCode(v string) *QueryDigitalassetartArtResponse {
	s.Code = &v
	return s
}

func (s *QueryDigitalassetartArtResponse) SetExchanges(v []*string) *QueryDigitalassetartArtResponse {
	s.Exchanges = v
	return s
}

func (s *QueryDigitalassetartArtResponse) SetIdentifiers(v []*string) *QueryDigitalassetartArtResponse {
	s.Identifiers = v
	return s
}

func (s *QueryDigitalassetartArtResponse) SetImageHash(v []*string) *QueryDigitalassetartArtResponse {
	s.ImageHash = v
	return s
}

func (s *QueryDigitalassetartArtResponse) SetIssueAccount(v string) *QueryDigitalassetartArtResponse {
	s.IssueAccount = &v
	return s
}

func (s *QueryDigitalassetartArtResponse) SetIssueDate(v int64) *QueryDigitalassetartArtResponse {
	s.IssueDate = &v
	return s
}

func (s *QueryDigitalassetartArtResponse) SetMainClass(v string) *QueryDigitalassetartArtResponse {
	s.MainClass = &v
	return s
}

func (s *QueryDigitalassetartArtResponse) SetOwnerId(v string) *QueryDigitalassetartArtResponse {
	s.OwnerId = &v
	return s
}

func (s *QueryDigitalassetartArtResponse) SetState(v int64) *QueryDigitalassetartArtResponse {
	s.State = &v
	return s
}

func (s *QueryDigitalassetartArtResponse) SetSubClass(v string) *QueryDigitalassetartArtResponse {
	s.SubClass = &v
	return s
}

func (s *QueryDigitalassetartArtResponse) SetVedioHash(v string) *QueryDigitalassetartArtResponse {
	s.VedioHash = &v
	return s
}

type CreateDigitalassetExchangeAccountmapRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 交易所代码
	ExchangeCode *string `json:"exchange_code,omitempty" xml:"exchange_code,omitempty" require:"true"`
	// 用户联系方式
	Phone *string `json:"phone,omitempty" xml:"phone,omitempty" require:"true"`
	// 业务方用户账号
	UserAccount *string `json:"user_account,omitempty" xml:"user_account,omitempty" require:"true"`
	// 业务方用户名称
	UserName *string `json:"user_name,omitempty" xml:"user_name,omitempty" require:"true"`
}

func (s CreateDigitalassetExchangeAccountmapRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDigitalassetExchangeAccountmapRequest) GoString() string {
	return s.String()
}

func (s *CreateDigitalassetExchangeAccountmapRequest) SetAuthToken(v string) *CreateDigitalassetExchangeAccountmapRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateDigitalassetExchangeAccountmapRequest) SetProductInstanceId(v string) *CreateDigitalassetExchangeAccountmapRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateDigitalassetExchangeAccountmapRequest) SetExchangeCode(v string) *CreateDigitalassetExchangeAccountmapRequest {
	s.ExchangeCode = &v
	return s
}

func (s *CreateDigitalassetExchangeAccountmapRequest) SetPhone(v string) *CreateDigitalassetExchangeAccountmapRequest {
	s.Phone = &v
	return s
}

func (s *CreateDigitalassetExchangeAccountmapRequest) SetUserAccount(v string) *CreateDigitalassetExchangeAccountmapRequest {
	s.UserAccount = &v
	return s
}

func (s *CreateDigitalassetExchangeAccountmapRequest) SetUserName(v string) *CreateDigitalassetExchangeAccountmapRequest {
	s.UserName = &v
	return s
}

type CreateDigitalassetExchangeAccountmapResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 返回调用结果 正常为 success
	Result *string `json:"result,omitempty" xml:"result,omitempty"`
}

func (s CreateDigitalassetExchangeAccountmapResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDigitalassetExchangeAccountmapResponse) GoString() string {
	return s.String()
}

func (s *CreateDigitalassetExchangeAccountmapResponse) SetReqMsgId(v string) *CreateDigitalassetExchangeAccountmapResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateDigitalassetExchangeAccountmapResponse) SetResultCode(v string) *CreateDigitalassetExchangeAccountmapResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateDigitalassetExchangeAccountmapResponse) SetResultMsg(v string) *CreateDigitalassetExchangeAccountmapResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateDigitalassetExchangeAccountmapResponse) SetResult(v string) *CreateDigitalassetExchangeAccountmapResponse {
	s.Result = &v
	return s
}

type BatchcreateDigitalassetExchangeAccountmapRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 业务方需映射的账户列表
	AccountMapParams []*ExchangeAccountMap `json:"account_map_params,omitempty" xml:"account_map_params,omitempty" require:"true" type:"Repeated"`
	// 交易所代码
	ExchangeCode *string `json:"exchange_code,omitempty" xml:"exchange_code,omitempty" require:"true"`
}

func (s BatchcreateDigitalassetExchangeAccountmapRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchcreateDigitalassetExchangeAccountmapRequest) GoString() string {
	return s.String()
}

func (s *BatchcreateDigitalassetExchangeAccountmapRequest) SetAuthToken(v string) *BatchcreateDigitalassetExchangeAccountmapRequest {
	s.AuthToken = &v
	return s
}

func (s *BatchcreateDigitalassetExchangeAccountmapRequest) SetProductInstanceId(v string) *BatchcreateDigitalassetExchangeAccountmapRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *BatchcreateDigitalassetExchangeAccountmapRequest) SetAccountMapParams(v []*ExchangeAccountMap) *BatchcreateDigitalassetExchangeAccountmapRequest {
	s.AccountMapParams = v
	return s
}

func (s *BatchcreateDigitalassetExchangeAccountmapRequest) SetExchangeCode(v string) *BatchcreateDigitalassetExchangeAccountmapRequest {
	s.ExchangeCode = &v
	return s
}

type BatchcreateDigitalassetExchangeAccountmapResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 返回失败账户列表
	FailList []*string `json:"fail_list,omitempty" xml:"fail_list,omitempty" type:"Repeated"`
	// 失败数量
	FailNum *int64 `json:"fail_num,omitempty" xml:"fail_num,omitempty"`
	// 成功数量
	SuccessNum *int64 `json:"success_num,omitempty" xml:"success_num,omitempty"`
}

func (s BatchcreateDigitalassetExchangeAccountmapResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchcreateDigitalassetExchangeAccountmapResponse) GoString() string {
	return s.String()
}

func (s *BatchcreateDigitalassetExchangeAccountmapResponse) SetReqMsgId(v string) *BatchcreateDigitalassetExchangeAccountmapResponse {
	s.ReqMsgId = &v
	return s
}

func (s *BatchcreateDigitalassetExchangeAccountmapResponse) SetResultCode(v string) *BatchcreateDigitalassetExchangeAccountmapResponse {
	s.ResultCode = &v
	return s
}

func (s *BatchcreateDigitalassetExchangeAccountmapResponse) SetResultMsg(v string) *BatchcreateDigitalassetExchangeAccountmapResponse {
	s.ResultMsg = &v
	return s
}

func (s *BatchcreateDigitalassetExchangeAccountmapResponse) SetFailList(v []*string) *BatchcreateDigitalassetExchangeAccountmapResponse {
	s.FailList = v
	return s
}

func (s *BatchcreateDigitalassetExchangeAccountmapResponse) SetFailNum(v int64) *BatchcreateDigitalassetExchangeAccountmapResponse {
	s.FailNum = &v
	return s
}

func (s *BatchcreateDigitalassetExchangeAccountmapResponse) SetSuccessNum(v int64) *BatchcreateDigitalassetExchangeAccountmapResponse {
	s.SuccessNum = &v
	return s
}

type StartDigitalassetExchangeUnfreezeRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 版通代码
	EpCode *string `json:"ep_code,omitempty" xml:"ep_code,omitempty" require:"true"`
	// 解限数量
	EpUnfreezeAmount *int64 `json:"ep_unfreeze_amount,omitempty" xml:"ep_unfreeze_amount,omitempty" require:"true"`
	// 交易所代码
	ExchangeCode *string `json:"exchange_code,omitempty" xml:"exchange_code,omitempty" require:"true"`
	// 业务方用户账户
	UserAccount *string `json:"user_account,omitempty" xml:"user_account,omitempty" require:"true"`
}

func (s StartDigitalassetExchangeUnfreezeRequest) String() string {
	return tea.Prettify(s)
}

func (s StartDigitalassetExchangeUnfreezeRequest) GoString() string {
	return s.String()
}

func (s *StartDigitalassetExchangeUnfreezeRequest) SetAuthToken(v string) *StartDigitalassetExchangeUnfreezeRequest {
	s.AuthToken = &v
	return s
}

func (s *StartDigitalassetExchangeUnfreezeRequest) SetProductInstanceId(v string) *StartDigitalassetExchangeUnfreezeRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *StartDigitalassetExchangeUnfreezeRequest) SetEpCode(v string) *StartDigitalassetExchangeUnfreezeRequest {
	s.EpCode = &v
	return s
}

func (s *StartDigitalassetExchangeUnfreezeRequest) SetEpUnfreezeAmount(v int64) *StartDigitalassetExchangeUnfreezeRequest {
	s.EpUnfreezeAmount = &v
	return s
}

func (s *StartDigitalassetExchangeUnfreezeRequest) SetExchangeCode(v string) *StartDigitalassetExchangeUnfreezeRequest {
	s.ExchangeCode = &v
	return s
}

func (s *StartDigitalassetExchangeUnfreezeRequest) SetUserAccount(v string) *StartDigitalassetExchangeUnfreezeRequest {
	s.UserAccount = &v
	return s
}

type StartDigitalassetExchangeUnfreezeResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 操作结果 success 为正常
	Result *string `json:"result,omitempty" xml:"result,omitempty"`
}

func (s StartDigitalassetExchangeUnfreezeResponse) String() string {
	return tea.Prettify(s)
}

func (s StartDigitalassetExchangeUnfreezeResponse) GoString() string {
	return s.String()
}

func (s *StartDigitalassetExchangeUnfreezeResponse) SetReqMsgId(v string) *StartDigitalassetExchangeUnfreezeResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartDigitalassetExchangeUnfreezeResponse) SetResultCode(v string) *StartDigitalassetExchangeUnfreezeResponse {
	s.ResultCode = &v
	return s
}

func (s *StartDigitalassetExchangeUnfreezeResponse) SetResultMsg(v string) *StartDigitalassetExchangeUnfreezeResponse {
	s.ResultMsg = &v
	return s
}

func (s *StartDigitalassetExchangeUnfreezeResponse) SetResult(v string) *StartDigitalassetExchangeUnfreezeResponse {
	s.Result = &v
	return s
}

type StartDigitalassetExchangeLockpositionRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 版通代码
	EpCode *string `json:"ep_code,omitempty" xml:"ep_code,omitempty"`
	// 交易所代码
	ExchangeCode *string `json:"exchange_code,omitempty" xml:"exchange_code,omitempty" require:"true"`
	// 锁定操作，0为解锁，1为锁定
	Operate *int64 `json:"operate,omitempty" xml:"operate,omitempty" require:"true"`
	// 业务方账户
	UserAccount *string `json:"user_account,omitempty" xml:"user_account,omitempty"`
}

func (s StartDigitalassetExchangeLockpositionRequest) String() string {
	return tea.Prettify(s)
}

func (s StartDigitalassetExchangeLockpositionRequest) GoString() string {
	return s.String()
}

func (s *StartDigitalassetExchangeLockpositionRequest) SetAuthToken(v string) *StartDigitalassetExchangeLockpositionRequest {
	s.AuthToken = &v
	return s
}

func (s *StartDigitalassetExchangeLockpositionRequest) SetProductInstanceId(v string) *StartDigitalassetExchangeLockpositionRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *StartDigitalassetExchangeLockpositionRequest) SetEpCode(v string) *StartDigitalassetExchangeLockpositionRequest {
	s.EpCode = &v
	return s
}

func (s *StartDigitalassetExchangeLockpositionRequest) SetExchangeCode(v string) *StartDigitalassetExchangeLockpositionRequest {
	s.ExchangeCode = &v
	return s
}

func (s *StartDigitalassetExchangeLockpositionRequest) SetOperate(v int64) *StartDigitalassetExchangeLockpositionRequest {
	s.Operate = &v
	return s
}

func (s *StartDigitalassetExchangeLockpositionRequest) SetUserAccount(v string) *StartDigitalassetExchangeLockpositionRequest {
	s.UserAccount = &v
	return s
}

type StartDigitalassetExchangeLockpositionResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 操作结果 success 为正常
	Result *string `json:"result,omitempty" xml:"result,omitempty"`
}

func (s StartDigitalassetExchangeLockpositionResponse) String() string {
	return tea.Prettify(s)
}

func (s StartDigitalassetExchangeLockpositionResponse) GoString() string {
	return s.String()
}

func (s *StartDigitalassetExchangeLockpositionResponse) SetReqMsgId(v string) *StartDigitalassetExchangeLockpositionResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartDigitalassetExchangeLockpositionResponse) SetResultCode(v string) *StartDigitalassetExchangeLockpositionResponse {
	s.ResultCode = &v
	return s
}

func (s *StartDigitalassetExchangeLockpositionResponse) SetResultMsg(v string) *StartDigitalassetExchangeLockpositionResponse {
	s.ResultMsg = &v
	return s
}

func (s *StartDigitalassetExchangeLockpositionResponse) SetResult(v string) *StartDigitalassetExchangeLockpositionResponse {
	s.Result = &v
	return s
}

type CreateDigitalassetExchangeEpissueRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 版通锚定物
	EpAnchor *string `json:"ep_anchor,omitempty" xml:"ep_anchor,omitempty" require:"true"`
	// 版通代码
	EpCode *string `json:"ep_code,omitempty" xml:"ep_code,omitempty" require:"true"`
	// 版通首发量
	EpFirstAmount *int64 `json:"ep_first_amount,omitempty" xml:"ep_first_amount,omitempty" require:"true"`
	// 版通发行方账户
	EpIssueAccount *string `json:"ep_issue_account,omitempty" xml:"ep_issue_account,omitempty" require:"true"`
	// 版通发行时间戳
	EpIssueDate *int64 `json:"ep_issue_date,omitempty" xml:"ep_issue_date,omitempty" require:"true"`
	// 版通名称
	EpName *string `json:"ep_name,omitempty" xml:"ep_name,omitempty" require:"true"`
	// 版通线下发行配额
	EpOfflineIssueAmount *int64 `json:"ep_offline_issue_amount,omitempty" xml:"ep_offline_issue_amount,omitempty" require:"true"`
	// 版通线下日解限比例
	EpOfflineUnfreeze *int64 `json:"ep_offline_unfreeze,omitempty" xml:"ep_offline_unfreeze,omitempty" require:"true"`
	// 版通线上发行配额
	EpOnlineIssueAmount *int64 `json:"ep_online_issue_amount,omitempty" xml:"ep_online_issue_amount,omitempty" require:"true"`
	// 发行方版通自持量
	EpSelfAmount *int64 `json:"ep_self_amount,omitempty" xml:"ep_self_amount,omitempty" require:"true"`
	// 发行方版通日解限比例
	EpSelfUnfreeze *int64 `json:"ep_self_unfreeze,omitempty" xml:"ep_self_unfreeze,omitempty" require:"true"`
	// 版通发行数量
	EpTotalAmount *int64 `json:"ep_total_amount,omitempty" xml:"ep_total_amount,omitempty" require:"true"`
	// 版通类型
	EpType *string `json:"ep_type,omitempty" xml:"ep_type,omitempty" require:"true"`
	// 交易所代码
	ExchangeCode *string `json:"exchange_code,omitempty" xml:"exchange_code,omitempty" require:"true"`
	// 预留扩展字段
	Extend *string `json:"extend,omitempty" xml:"extend,omitempty"`
}

func (s CreateDigitalassetExchangeEpissueRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDigitalassetExchangeEpissueRequest) GoString() string {
	return s.String()
}

func (s *CreateDigitalassetExchangeEpissueRequest) SetAuthToken(v string) *CreateDigitalassetExchangeEpissueRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateDigitalassetExchangeEpissueRequest) SetProductInstanceId(v string) *CreateDigitalassetExchangeEpissueRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateDigitalassetExchangeEpissueRequest) SetEpAnchor(v string) *CreateDigitalassetExchangeEpissueRequest {
	s.EpAnchor = &v
	return s
}

func (s *CreateDigitalassetExchangeEpissueRequest) SetEpCode(v string) *CreateDigitalassetExchangeEpissueRequest {
	s.EpCode = &v
	return s
}

func (s *CreateDigitalassetExchangeEpissueRequest) SetEpFirstAmount(v int64) *CreateDigitalassetExchangeEpissueRequest {
	s.EpFirstAmount = &v
	return s
}

func (s *CreateDigitalassetExchangeEpissueRequest) SetEpIssueAccount(v string) *CreateDigitalassetExchangeEpissueRequest {
	s.EpIssueAccount = &v
	return s
}

func (s *CreateDigitalassetExchangeEpissueRequest) SetEpIssueDate(v int64) *CreateDigitalassetExchangeEpissueRequest {
	s.EpIssueDate = &v
	return s
}

func (s *CreateDigitalassetExchangeEpissueRequest) SetEpName(v string) *CreateDigitalassetExchangeEpissueRequest {
	s.EpName = &v
	return s
}

func (s *CreateDigitalassetExchangeEpissueRequest) SetEpOfflineIssueAmount(v int64) *CreateDigitalassetExchangeEpissueRequest {
	s.EpOfflineIssueAmount = &v
	return s
}

func (s *CreateDigitalassetExchangeEpissueRequest) SetEpOfflineUnfreeze(v int64) *CreateDigitalassetExchangeEpissueRequest {
	s.EpOfflineUnfreeze = &v
	return s
}

func (s *CreateDigitalassetExchangeEpissueRequest) SetEpOnlineIssueAmount(v int64) *CreateDigitalassetExchangeEpissueRequest {
	s.EpOnlineIssueAmount = &v
	return s
}

func (s *CreateDigitalassetExchangeEpissueRequest) SetEpSelfAmount(v int64) *CreateDigitalassetExchangeEpissueRequest {
	s.EpSelfAmount = &v
	return s
}

func (s *CreateDigitalassetExchangeEpissueRequest) SetEpSelfUnfreeze(v int64) *CreateDigitalassetExchangeEpissueRequest {
	s.EpSelfUnfreeze = &v
	return s
}

func (s *CreateDigitalassetExchangeEpissueRequest) SetEpTotalAmount(v int64) *CreateDigitalassetExchangeEpissueRequest {
	s.EpTotalAmount = &v
	return s
}

func (s *CreateDigitalassetExchangeEpissueRequest) SetEpType(v string) *CreateDigitalassetExchangeEpissueRequest {
	s.EpType = &v
	return s
}

func (s *CreateDigitalassetExchangeEpissueRequest) SetExchangeCode(v string) *CreateDigitalassetExchangeEpissueRequest {
	s.ExchangeCode = &v
	return s
}

func (s *CreateDigitalassetExchangeEpissueRequest) SetExtend(v string) *CreateDigitalassetExchangeEpissueRequest {
	s.Extend = &v
	return s
}

type CreateDigitalassetExchangeEpissueResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 操作结果 success 为成功
	Result *string `json:"result,omitempty" xml:"result,omitempty"`
}

func (s CreateDigitalassetExchangeEpissueResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDigitalassetExchangeEpissueResponse) GoString() string {
	return s.String()
}

func (s *CreateDigitalassetExchangeEpissueResponse) SetReqMsgId(v string) *CreateDigitalassetExchangeEpissueResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateDigitalassetExchangeEpissueResponse) SetResultCode(v string) *CreateDigitalassetExchangeEpissueResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateDigitalassetExchangeEpissueResponse) SetResultMsg(v string) *CreateDigitalassetExchangeEpissueResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateDigitalassetExchangeEpissueResponse) SetResult(v string) *CreateDigitalassetExchangeEpissueResponse {
	s.Result = &v
	return s
}

type CreateDigitalassetExchangeEpstockissueRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 版通代码
	EpCode *string `json:"ep_code,omitempty" xml:"ep_code,omitempty" require:"true"`
	// 版通发行方账户
	EpIssueAccount *string `json:"ep_issue_account,omitempty" xml:"ep_issue_account,omitempty" require:"true"`
	// 版通存量发行线下量
	EpOfflineIssueAmount *int64 `json:"ep_offline_issue_amount,omitempty" xml:"ep_offline_issue_amount,omitempty" require:"true"`
	// 版通存量发行线上量
	EpOnlineIssueAmount *int64 `json:"ep_online_issue_amount,omitempty" xml:"ep_online_issue_amount,omitempty" require:"true"`
	// 版通存量发行自持量
	EpSelfIssueAmount *int64 `json:"ep_self_issue_amount,omitempty" xml:"ep_self_issue_amount,omitempty" require:"true"`
	// 交易所代码
	ExchangeCode *string `json:"exchange_code,omitempty" xml:"exchange_code,omitempty" require:"true"`
}

func (s CreateDigitalassetExchangeEpstockissueRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDigitalassetExchangeEpstockissueRequest) GoString() string {
	return s.String()
}

func (s *CreateDigitalassetExchangeEpstockissueRequest) SetAuthToken(v string) *CreateDigitalassetExchangeEpstockissueRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateDigitalassetExchangeEpstockissueRequest) SetProductInstanceId(v string) *CreateDigitalassetExchangeEpstockissueRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateDigitalassetExchangeEpstockissueRequest) SetEpCode(v string) *CreateDigitalassetExchangeEpstockissueRequest {
	s.EpCode = &v
	return s
}

func (s *CreateDigitalassetExchangeEpstockissueRequest) SetEpIssueAccount(v string) *CreateDigitalassetExchangeEpstockissueRequest {
	s.EpIssueAccount = &v
	return s
}

func (s *CreateDigitalassetExchangeEpstockissueRequest) SetEpOfflineIssueAmount(v int64) *CreateDigitalassetExchangeEpstockissueRequest {
	s.EpOfflineIssueAmount = &v
	return s
}

func (s *CreateDigitalassetExchangeEpstockissueRequest) SetEpOnlineIssueAmount(v int64) *CreateDigitalassetExchangeEpstockissueRequest {
	s.EpOnlineIssueAmount = &v
	return s
}

func (s *CreateDigitalassetExchangeEpstockissueRequest) SetEpSelfIssueAmount(v int64) *CreateDigitalassetExchangeEpstockissueRequest {
	s.EpSelfIssueAmount = &v
	return s
}

func (s *CreateDigitalassetExchangeEpstockissueRequest) SetExchangeCode(v string) *CreateDigitalassetExchangeEpstockissueRequest {
	s.ExchangeCode = &v
	return s
}

type CreateDigitalassetExchangeEpstockissueResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 操作结果 success 为成功
	Result *string `json:"result,omitempty" xml:"result,omitempty"`
}

func (s CreateDigitalassetExchangeEpstockissueResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDigitalassetExchangeEpstockissueResponse) GoString() string {
	return s.String()
}

func (s *CreateDigitalassetExchangeEpstockissueResponse) SetReqMsgId(v string) *CreateDigitalassetExchangeEpstockissueResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateDigitalassetExchangeEpstockissueResponse) SetResultCode(v string) *CreateDigitalassetExchangeEpstockissueResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateDigitalassetExchangeEpstockissueResponse) SetResultMsg(v string) *CreateDigitalassetExchangeEpstockissueResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateDigitalassetExchangeEpstockissueResponse) SetResult(v string) *CreateDigitalassetExchangeEpstockissueResponse {
	s.Result = &v
	return s
}

type StartDigitalassetExchangeEpwholesaleRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 批发账户信息列表
	AccountList []*AccountWholesaleParam `json:"account_list,omitempty" xml:"account_list,omitempty" require:"true" type:"Repeated"`
	// 版通代码
	EpCode *string `json:"ep_code,omitempty" xml:"ep_code,omitempty" require:"true"`
	// 版通发行方账户
	EpIssueAccount *string `json:"ep_issue_account,omitempty" xml:"ep_issue_account,omitempty" require:"true"`
	// 交易所代码
	ExchangeCode *string `json:"exchange_code,omitempty" xml:"exchange_code,omitempty" require:"true"`
}

func (s StartDigitalassetExchangeEpwholesaleRequest) String() string {
	return tea.Prettify(s)
}

func (s StartDigitalassetExchangeEpwholesaleRequest) GoString() string {
	return s.String()
}

func (s *StartDigitalassetExchangeEpwholesaleRequest) SetAuthToken(v string) *StartDigitalassetExchangeEpwholesaleRequest {
	s.AuthToken = &v
	return s
}

func (s *StartDigitalassetExchangeEpwholesaleRequest) SetProductInstanceId(v string) *StartDigitalassetExchangeEpwholesaleRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *StartDigitalassetExchangeEpwholesaleRequest) SetAccountList(v []*AccountWholesaleParam) *StartDigitalassetExchangeEpwholesaleRequest {
	s.AccountList = v
	return s
}

func (s *StartDigitalassetExchangeEpwholesaleRequest) SetEpCode(v string) *StartDigitalassetExchangeEpwholesaleRequest {
	s.EpCode = &v
	return s
}

func (s *StartDigitalassetExchangeEpwholesaleRequest) SetEpIssueAccount(v string) *StartDigitalassetExchangeEpwholesaleRequest {
	s.EpIssueAccount = &v
	return s
}

func (s *StartDigitalassetExchangeEpwholesaleRequest) SetExchangeCode(v string) *StartDigitalassetExchangeEpwholesaleRequest {
	s.ExchangeCode = &v
	return s
}

type StartDigitalassetExchangeEpwholesaleResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 失败账户列表
	FailList []*string `json:"fail_list,omitempty" xml:"fail_list,omitempty" type:"Repeated"`
	// 失败原因 0:成功 1:执行失败 2:线下配额数量不足
	Reason *int64 `json:"reason,omitempty" xml:"reason,omitempty"`
	// 成功账户列表
	SuccessList []*string `json:"success_list,omitempty" xml:"success_list,omitempty" type:"Repeated"`
}

func (s StartDigitalassetExchangeEpwholesaleResponse) String() string {
	return tea.Prettify(s)
}

func (s StartDigitalassetExchangeEpwholesaleResponse) GoString() string {
	return s.String()
}

func (s *StartDigitalassetExchangeEpwholesaleResponse) SetReqMsgId(v string) *StartDigitalassetExchangeEpwholesaleResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartDigitalassetExchangeEpwholesaleResponse) SetResultCode(v string) *StartDigitalassetExchangeEpwholesaleResponse {
	s.ResultCode = &v
	return s
}

func (s *StartDigitalassetExchangeEpwholesaleResponse) SetResultMsg(v string) *StartDigitalassetExchangeEpwholesaleResponse {
	s.ResultMsg = &v
	return s
}

func (s *StartDigitalassetExchangeEpwholesaleResponse) SetFailList(v []*string) *StartDigitalassetExchangeEpwholesaleResponse {
	s.FailList = v
	return s
}

func (s *StartDigitalassetExchangeEpwholesaleResponse) SetReason(v int64) *StartDigitalassetExchangeEpwholesaleResponse {
	s.Reason = &v
	return s
}

func (s *StartDigitalassetExchangeEpwholesaleResponse) SetSuccessList(v []*string) *StartDigitalassetExchangeEpwholesaleResponse {
	s.SuccessList = v
	return s
}

type QueryDigitalassetExchangeEpinfoRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 版通代码
	EpCode *string `json:"ep_code,omitempty" xml:"ep_code,omitempty" require:"true"`
	// 交易所代码
	ExchangeCode *string `json:"exchange_code,omitempty" xml:"exchange_code,omitempty" require:"true"`
}

func (s QueryDigitalassetExchangeEpinfoRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDigitalassetExchangeEpinfoRequest) GoString() string {
	return s.String()
}

func (s *QueryDigitalassetExchangeEpinfoRequest) SetAuthToken(v string) *QueryDigitalassetExchangeEpinfoRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryDigitalassetExchangeEpinfoRequest) SetProductInstanceId(v string) *QueryDigitalassetExchangeEpinfoRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryDigitalassetExchangeEpinfoRequest) SetEpCode(v string) *QueryDigitalassetExchangeEpinfoRequest {
	s.EpCode = &v
	return s
}

func (s *QueryDigitalassetExchangeEpinfoRequest) SetExchangeCode(v string) *QueryDigitalassetExchangeEpinfoRequest {
	s.ExchangeCode = &v
	return s
}

type QueryDigitalassetExchangeEpinfoResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 版通锚定物
	EpAnchor *string `json:"ep_anchor,omitempty" xml:"ep_anchor,omitempty"`
	// 版通代码
	EpCode *string `json:"ep_code,omitempty" xml:"ep_code,omitempty"`
	// 版通首发量
	EpFirstAmount *int64 `json:"ep_first_amount,omitempty" xml:"ep_first_amount,omitempty"`
	// 版通发行方账户
	EpIssueAccount *string `json:"ep_issue_account,omitempty" xml:"ep_issue_account,omitempty"`
	// 版通发行日时间戳
	EpIssueDate *int64 `json:"ep_issue_date,omitempty" xml:"ep_issue_date,omitempty"`
	// 版通历史发行记录
	EpIssueHistory []*EPIssueHisInfo `json:"ep_issue_history,omitempty" xml:"ep_issue_history,omitempty" type:"Repeated"`
	// 版通名称
	EpName *string `json:"ep_name,omitempty" xml:"ep_name,omitempty"`
	// 版通线下发行量
	EpOfflineIssueAmount *int64 `json:"ep_offline_issue_amount,omitempty" xml:"ep_offline_issue_amount,omitempty"`
	// 版通线下日解限量
	EpOfflineUnfreeze *int64 `json:"ep_offline_unfreeze,omitempty" xml:"ep_offline_unfreeze,omitempty"`
	// 版通线上发行量
	EpOnlineIssueAmount *int64 `json:"ep_online_issue_amount,omitempty" xml:"ep_online_issue_amount,omitempty"`
	// 版通发行方自持量
	EpSelfAmount *int64 `json:"ep_self_amount,omitempty" xml:"ep_self_amount,omitempty"`
	// 版通自持日解限量
	EpSelfUnfreeze *int64 `json:"ep_self_unfreeze,omitempty" xml:"ep_self_unfreeze,omitempty"`
	// 版通状态 0:正常 1:锁定
	EpStatus *int64 `json:"ep_status,omitempty" xml:"ep_status,omitempty"`
	// 版通总发行量
	EpTotalAmount *int64 `json:"ep_total_amount,omitempty" xml:"ep_total_amount,omitempty"`
	// 版通类型
	EpType *string `json:"ep_type,omitempty" xml:"ep_type,omitempty"`
	// 扩展字段
	Extend *string `json:"extend,omitempty" xml:"extend,omitempty"`
}

func (s QueryDigitalassetExchangeEpinfoResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDigitalassetExchangeEpinfoResponse) GoString() string {
	return s.String()
}

func (s *QueryDigitalassetExchangeEpinfoResponse) SetReqMsgId(v string) *QueryDigitalassetExchangeEpinfoResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryDigitalassetExchangeEpinfoResponse) SetResultCode(v string) *QueryDigitalassetExchangeEpinfoResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryDigitalassetExchangeEpinfoResponse) SetResultMsg(v string) *QueryDigitalassetExchangeEpinfoResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryDigitalassetExchangeEpinfoResponse) SetEpAnchor(v string) *QueryDigitalassetExchangeEpinfoResponse {
	s.EpAnchor = &v
	return s
}

func (s *QueryDigitalassetExchangeEpinfoResponse) SetEpCode(v string) *QueryDigitalassetExchangeEpinfoResponse {
	s.EpCode = &v
	return s
}

func (s *QueryDigitalassetExchangeEpinfoResponse) SetEpFirstAmount(v int64) *QueryDigitalassetExchangeEpinfoResponse {
	s.EpFirstAmount = &v
	return s
}

func (s *QueryDigitalassetExchangeEpinfoResponse) SetEpIssueAccount(v string) *QueryDigitalassetExchangeEpinfoResponse {
	s.EpIssueAccount = &v
	return s
}

func (s *QueryDigitalassetExchangeEpinfoResponse) SetEpIssueDate(v int64) *QueryDigitalassetExchangeEpinfoResponse {
	s.EpIssueDate = &v
	return s
}

func (s *QueryDigitalassetExchangeEpinfoResponse) SetEpIssueHistory(v []*EPIssueHisInfo) *QueryDigitalassetExchangeEpinfoResponse {
	s.EpIssueHistory = v
	return s
}

func (s *QueryDigitalassetExchangeEpinfoResponse) SetEpName(v string) *QueryDigitalassetExchangeEpinfoResponse {
	s.EpName = &v
	return s
}

func (s *QueryDigitalassetExchangeEpinfoResponse) SetEpOfflineIssueAmount(v int64) *QueryDigitalassetExchangeEpinfoResponse {
	s.EpOfflineIssueAmount = &v
	return s
}

func (s *QueryDigitalassetExchangeEpinfoResponse) SetEpOfflineUnfreeze(v int64) *QueryDigitalassetExchangeEpinfoResponse {
	s.EpOfflineUnfreeze = &v
	return s
}

func (s *QueryDigitalassetExchangeEpinfoResponse) SetEpOnlineIssueAmount(v int64) *QueryDigitalassetExchangeEpinfoResponse {
	s.EpOnlineIssueAmount = &v
	return s
}

func (s *QueryDigitalassetExchangeEpinfoResponse) SetEpSelfAmount(v int64) *QueryDigitalassetExchangeEpinfoResponse {
	s.EpSelfAmount = &v
	return s
}

func (s *QueryDigitalassetExchangeEpinfoResponse) SetEpSelfUnfreeze(v int64) *QueryDigitalassetExchangeEpinfoResponse {
	s.EpSelfUnfreeze = &v
	return s
}

func (s *QueryDigitalassetExchangeEpinfoResponse) SetEpStatus(v int64) *QueryDigitalassetExchangeEpinfoResponse {
	s.EpStatus = &v
	return s
}

func (s *QueryDigitalassetExchangeEpinfoResponse) SetEpTotalAmount(v int64) *QueryDigitalassetExchangeEpinfoResponse {
	s.EpTotalAmount = &v
	return s
}

func (s *QueryDigitalassetExchangeEpinfoResponse) SetEpType(v string) *QueryDigitalassetExchangeEpinfoResponse {
	s.EpType = &v
	return s
}

func (s *QueryDigitalassetExchangeEpinfoResponse) SetExtend(v string) *QueryDigitalassetExchangeEpinfoResponse {
	s.Extend = &v
	return s
}

type QueryDigitalassetExchangeEptradeRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 查询截止时间
	EndDate *string `json:"end_date,omitempty" xml:"end_date,omitempty" require:"true"`
	// 版通代码 （版通代码与用户账户至少选一个）
	EpCode *string `json:"ep_code,omitempty" xml:"ep_code,omitempty"`
	// 交易所代码
	ExchangeCode *string `json:"exchange_code,omitempty" xml:"exchange_code,omitempty" require:"true"`
	// 页数 从1开始
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty" require:"true"`
	// 每页显示数量
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
	// 查询起始时间
	StartDate *string `json:"start_date,omitempty" xml:"start_date,omitempty" require:"true"`
	// 用户账户 （版通代码与用户账户至少选一个）
	UserAccount *string `json:"user_account,omitempty" xml:"user_account,omitempty"`
}

func (s QueryDigitalassetExchangeEptradeRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDigitalassetExchangeEptradeRequest) GoString() string {
	return s.String()
}

func (s *QueryDigitalassetExchangeEptradeRequest) SetAuthToken(v string) *QueryDigitalassetExchangeEptradeRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryDigitalassetExchangeEptradeRequest) SetProductInstanceId(v string) *QueryDigitalassetExchangeEptradeRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryDigitalassetExchangeEptradeRequest) SetEndDate(v string) *QueryDigitalassetExchangeEptradeRequest {
	s.EndDate = &v
	return s
}

func (s *QueryDigitalassetExchangeEptradeRequest) SetEpCode(v string) *QueryDigitalassetExchangeEptradeRequest {
	s.EpCode = &v
	return s
}

func (s *QueryDigitalassetExchangeEptradeRequest) SetExchangeCode(v string) *QueryDigitalassetExchangeEptradeRequest {
	s.ExchangeCode = &v
	return s
}

func (s *QueryDigitalassetExchangeEptradeRequest) SetPageNum(v int64) *QueryDigitalassetExchangeEptradeRequest {
	s.PageNum = &v
	return s
}

func (s *QueryDigitalassetExchangeEptradeRequest) SetPageSize(v int64) *QueryDigitalassetExchangeEptradeRequest {
	s.PageSize = &v
	return s
}

func (s *QueryDigitalassetExchangeEptradeRequest) SetStartDate(v string) *QueryDigitalassetExchangeEptradeRequest {
	s.StartDate = &v
	return s
}

func (s *QueryDigitalassetExchangeEptradeRequest) SetUserAccount(v string) *QueryDigitalassetExchangeEptradeRequest {
	s.UserAccount = &v
	return s
}

type QueryDigitalassetExchangeEptradeResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 页数 从1开始
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty"`
	// 每页显示数量
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 数据总量
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
	// 交易信息列表
	TxInfos []*EPTradeInfo `json:"tx_infos,omitempty" xml:"tx_infos,omitempty" type:"Repeated"`
}

func (s QueryDigitalassetExchangeEptradeResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDigitalassetExchangeEptradeResponse) GoString() string {
	return s.String()
}

func (s *QueryDigitalassetExchangeEptradeResponse) SetReqMsgId(v string) *QueryDigitalassetExchangeEptradeResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryDigitalassetExchangeEptradeResponse) SetResultCode(v string) *QueryDigitalassetExchangeEptradeResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryDigitalassetExchangeEptradeResponse) SetResultMsg(v string) *QueryDigitalassetExchangeEptradeResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryDigitalassetExchangeEptradeResponse) SetPageNum(v int64) *QueryDigitalassetExchangeEptradeResponse {
	s.PageNum = &v
	return s
}

func (s *QueryDigitalassetExchangeEptradeResponse) SetPageSize(v int64) *QueryDigitalassetExchangeEptradeResponse {
	s.PageSize = &v
	return s
}

func (s *QueryDigitalassetExchangeEptradeResponse) SetTotalCount(v int64) *QueryDigitalassetExchangeEptradeResponse {
	s.TotalCount = &v
	return s
}

func (s *QueryDigitalassetExchangeEptradeResponse) SetTxInfos(v []*EPTradeInfo) *QueryDigitalassetExchangeEptradeResponse {
	s.TxInfos = v
	return s
}

type QueryDigitalassetExchangeEpaccountRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 交易所代码
	ExchangeCode *string `json:"exchange_code,omitempty" xml:"exchange_code,omitempty" require:"true"`
	// 用户账户
	UserAccount *string `json:"user_account,omitempty" xml:"user_account,omitempty" require:"true"`
}

func (s QueryDigitalassetExchangeEpaccountRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDigitalassetExchangeEpaccountRequest) GoString() string {
	return s.String()
}

func (s *QueryDigitalassetExchangeEpaccountRequest) SetAuthToken(v string) *QueryDigitalassetExchangeEpaccountRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryDigitalassetExchangeEpaccountRequest) SetProductInstanceId(v string) *QueryDigitalassetExchangeEpaccountRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryDigitalassetExchangeEpaccountRequest) SetExchangeCode(v string) *QueryDigitalassetExchangeEpaccountRequest {
	s.ExchangeCode = &v
	return s
}

func (s *QueryDigitalassetExchangeEpaccountRequest) SetUserAccount(v string) *QueryDigitalassetExchangeEpaccountRequest {
	s.UserAccount = &v
	return s
}

type QueryDigitalassetExchangeEpaccountResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 账户状态 0:正常 1:锁定
	AccountStatus *int64 `json:"account_status,omitempty" xml:"account_status,omitempty"`
	// 版通回购账户信息
	BuybackAccounts []*AccountInfo `json:"buyback_accounts,omitempty" xml:"buyback_accounts,omitempty" type:"Repeated"`
	// 版通限制交易账户信息
	ConstrainedAccounts []*AccountInfo `json:"constrained_accounts,omitempty" xml:"constrained_accounts,omitempty" type:"Repeated"`
	// 版通可交易账户信息
	TradeAccounts []*AccountInfo `json:"trade_accounts,omitempty" xml:"trade_accounts,omitempty" type:"Repeated"`
}

func (s QueryDigitalassetExchangeEpaccountResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDigitalassetExchangeEpaccountResponse) GoString() string {
	return s.String()
}

func (s *QueryDigitalassetExchangeEpaccountResponse) SetReqMsgId(v string) *QueryDigitalassetExchangeEpaccountResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryDigitalassetExchangeEpaccountResponse) SetResultCode(v string) *QueryDigitalassetExchangeEpaccountResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryDigitalassetExchangeEpaccountResponse) SetResultMsg(v string) *QueryDigitalassetExchangeEpaccountResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryDigitalassetExchangeEpaccountResponse) SetAccountStatus(v int64) *QueryDigitalassetExchangeEpaccountResponse {
	s.AccountStatus = &v
	return s
}

func (s *QueryDigitalassetExchangeEpaccountResponse) SetBuybackAccounts(v []*AccountInfo) *QueryDigitalassetExchangeEpaccountResponse {
	s.BuybackAccounts = v
	return s
}

func (s *QueryDigitalassetExchangeEpaccountResponse) SetConstrainedAccounts(v []*AccountInfo) *QueryDigitalassetExchangeEpaccountResponse {
	s.ConstrainedAccounts = v
	return s
}

func (s *QueryDigitalassetExchangeEpaccountResponse) SetTradeAccounts(v []*AccountInfo) *QueryDigitalassetExchangeEpaccountResponse {
	s.TradeAccounts = v
	return s
}

type StartDigitalassetExchangeEptradeRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 交易数量
	EpAmount *int64 `json:"ep_amount,omitempty" xml:"ep_amount,omitempty" require:"true"`
	// 版通代码
	EpCode *string `json:"ep_code,omitempty" xml:"ep_code,omitempty" require:"true"`
	// 交易所代码
	ExchangeCode *string `json:"exchange_code,omitempty" xml:"exchange_code,omitempty" require:"true"`
	// 卖方账户
	FromAccount *string `json:"from_account,omitempty" xml:"from_account,omitempty" require:"true"`
	// 买方账户
	ToAccount *string `json:"to_account,omitempty" xml:"to_account,omitempty" require:"true"`
}

func (s StartDigitalassetExchangeEptradeRequest) String() string {
	return tea.Prettify(s)
}

func (s StartDigitalassetExchangeEptradeRequest) GoString() string {
	return s.String()
}

func (s *StartDigitalassetExchangeEptradeRequest) SetAuthToken(v string) *StartDigitalassetExchangeEptradeRequest {
	s.AuthToken = &v
	return s
}

func (s *StartDigitalassetExchangeEptradeRequest) SetProductInstanceId(v string) *StartDigitalassetExchangeEptradeRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *StartDigitalassetExchangeEptradeRequest) SetEpAmount(v int64) *StartDigitalassetExchangeEptradeRequest {
	s.EpAmount = &v
	return s
}

func (s *StartDigitalassetExchangeEptradeRequest) SetEpCode(v string) *StartDigitalassetExchangeEptradeRequest {
	s.EpCode = &v
	return s
}

func (s *StartDigitalassetExchangeEptradeRequest) SetExchangeCode(v string) *StartDigitalassetExchangeEptradeRequest {
	s.ExchangeCode = &v
	return s
}

func (s *StartDigitalassetExchangeEptradeRequest) SetFromAccount(v string) *StartDigitalassetExchangeEptradeRequest {
	s.FromAccount = &v
	return s
}

func (s *StartDigitalassetExchangeEptradeRequest) SetToAccount(v string) *StartDigitalassetExchangeEptradeRequest {
	s.ToAccount = &v
	return s
}

type StartDigitalassetExchangeEptradeResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 交易号
	TxCode *string `json:"tx_code,omitempty" xml:"tx_code,omitempty"`
}

func (s StartDigitalassetExchangeEptradeResponse) String() string {
	return tea.Prettify(s)
}

func (s StartDigitalassetExchangeEptradeResponse) GoString() string {
	return s.String()
}

func (s *StartDigitalassetExchangeEptradeResponse) SetReqMsgId(v string) *StartDigitalassetExchangeEptradeResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartDigitalassetExchangeEptradeResponse) SetResultCode(v string) *StartDigitalassetExchangeEptradeResponse {
	s.ResultCode = &v
	return s
}

func (s *StartDigitalassetExchangeEptradeResponse) SetResultMsg(v string) *StartDigitalassetExchangeEptradeResponse {
	s.ResultMsg = &v
	return s
}

func (s *StartDigitalassetExchangeEptradeResponse) SetTxCode(v string) *StartDigitalassetExchangeEptradeResponse {
	s.TxCode = &v
	return s
}

type StartDigitalassetExchangeEpbuybackRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 版通回购数量
	EpAmount *int64 `json:"ep_amount,omitempty" xml:"ep_amount,omitempty" require:"true"`
	// 版通代码
	EpCode *string `json:"ep_code,omitempty" xml:"ep_code,omitempty" require:"true"`
	// 交易所代码
	ExchangeCode *string `json:"exchange_code,omitempty" xml:"exchange_code,omitempty" require:"true"`
	// 用户账户
	UserAccount *string `json:"user_account,omitempty" xml:"user_account,omitempty" require:"true"`
}

func (s StartDigitalassetExchangeEpbuybackRequest) String() string {
	return tea.Prettify(s)
}

func (s StartDigitalassetExchangeEpbuybackRequest) GoString() string {
	return s.String()
}

func (s *StartDigitalassetExchangeEpbuybackRequest) SetAuthToken(v string) *StartDigitalassetExchangeEpbuybackRequest {
	s.AuthToken = &v
	return s
}

func (s *StartDigitalassetExchangeEpbuybackRequest) SetProductInstanceId(v string) *StartDigitalassetExchangeEpbuybackRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *StartDigitalassetExchangeEpbuybackRequest) SetEpAmount(v int64) *StartDigitalassetExchangeEpbuybackRequest {
	s.EpAmount = &v
	return s
}

func (s *StartDigitalassetExchangeEpbuybackRequest) SetEpCode(v string) *StartDigitalassetExchangeEpbuybackRequest {
	s.EpCode = &v
	return s
}

func (s *StartDigitalassetExchangeEpbuybackRequest) SetExchangeCode(v string) *StartDigitalassetExchangeEpbuybackRequest {
	s.ExchangeCode = &v
	return s
}

func (s *StartDigitalassetExchangeEpbuybackRequest) SetUserAccount(v string) *StartDigitalassetExchangeEpbuybackRequest {
	s.UserAccount = &v
	return s
}

type StartDigitalassetExchangeEpbuybackResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 操作结果 success 为成功
	Result *string `json:"result,omitempty" xml:"result,omitempty"`
}

func (s StartDigitalassetExchangeEpbuybackResponse) String() string {
	return tea.Prettify(s)
}

func (s StartDigitalassetExchangeEpbuybackResponse) GoString() string {
	return s.String()
}

func (s *StartDigitalassetExchangeEpbuybackResponse) SetReqMsgId(v string) *StartDigitalassetExchangeEpbuybackResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartDigitalassetExchangeEpbuybackResponse) SetResultCode(v string) *StartDigitalassetExchangeEpbuybackResponse {
	s.ResultCode = &v
	return s
}

func (s *StartDigitalassetExchangeEpbuybackResponse) SetResultMsg(v string) *StartDigitalassetExchangeEpbuybackResponse {
	s.ResultMsg = &v
	return s
}

func (s *StartDigitalassetExchangeEpbuybackResponse) SetResult(v string) *StartDigitalassetExchangeEpbuybackResponse {
	s.Result = &v
	return s
}

type CreateDistributionUserRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 用户在ISV中的唯一标识
	Identity *string `json:"identity,omitempty" xml:"identity,omitempty" require:"true"`
	// 其他说明
	Info *string `json:"info,omitempty" xml:"info,omitempty"`
	// 用户手机号码
	Mobile *string `json:"mobile,omitempty" xml:"mobile,omitempty" require:"true"`
	// 来源: 微信朋友圈/微信小程序/支付宝小程序/H5/商户自有APP/其他
	Source *string `json:"source,omitempty" xml:"source,omitempty" require:"true"`
}

func (s CreateDistributionUserRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDistributionUserRequest) GoString() string {
	return s.String()
}

func (s *CreateDistributionUserRequest) SetAuthToken(v string) *CreateDistributionUserRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateDistributionUserRequest) SetProductInstanceId(v string) *CreateDistributionUserRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateDistributionUserRequest) SetIdentity(v string) *CreateDistributionUserRequest {
	s.Identity = &v
	return s
}

func (s *CreateDistributionUserRequest) SetInfo(v string) *CreateDistributionUserRequest {
	s.Info = &v
	return s
}

func (s *CreateDistributionUserRequest) SetMobile(v string) *CreateDistributionUserRequest {
	s.Mobile = &v
	return s
}

func (s *CreateDistributionUserRequest) SetSource(v string) *CreateDistributionUserRequest {
	s.Source = &v
	return s
}

type CreateDistributionUserResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 用户创建时间
	CreateTime *string `json:"create_time,omitempty" xml:"create_time,omitempty"`
	// 用户唯一标示
	UserId *string `json:"user_id,omitempty" xml:"user_id,omitempty"`
}

func (s CreateDistributionUserResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDistributionUserResponse) GoString() string {
	return s.String()
}

func (s *CreateDistributionUserResponse) SetReqMsgId(v string) *CreateDistributionUserResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateDistributionUserResponse) SetResultCode(v string) *CreateDistributionUserResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateDistributionUserResponse) SetResultMsg(v string) *CreateDistributionUserResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateDistributionUserResponse) SetCreateTime(v string) *CreateDistributionUserResponse {
	s.CreateTime = &v
	return s
}

func (s *CreateDistributionUserResponse) SetUserId(v string) *CreateDistributionUserResponse {
	s.UserId = &v
	return s
}

type QueryDistributionUserTeamRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 商品唯一标识
	ItemId *string `json:"item_id,omitempty" xml:"item_id,omitempty"`
	// 分页查询当前页号，默认值1
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty"`
	// 分页查询当前页大小，默认值20
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 商户唯一标识
	ShopId *string `json:"shop_id,omitempty" xml:"shop_id,omitempty" require:"true"`
	// 用户唯一标识
	UserId *string `json:"user_id,omitempty" xml:"user_id,omitempty" require:"true"`
}

func (s QueryDistributionUserTeamRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDistributionUserTeamRequest) GoString() string {
	return s.String()
}

func (s *QueryDistributionUserTeamRequest) SetAuthToken(v string) *QueryDistributionUserTeamRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryDistributionUserTeamRequest) SetProductInstanceId(v string) *QueryDistributionUserTeamRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryDistributionUserTeamRequest) SetItemId(v string) *QueryDistributionUserTeamRequest {
	s.ItemId = &v
	return s
}

func (s *QueryDistributionUserTeamRequest) SetPageNum(v int64) *QueryDistributionUserTeamRequest {
	s.PageNum = &v
	return s
}

func (s *QueryDistributionUserTeamRequest) SetPageSize(v int64) *QueryDistributionUserTeamRequest {
	s.PageSize = &v
	return s
}

func (s *QueryDistributionUserTeamRequest) SetShopId(v string) *QueryDistributionUserTeamRequest {
	s.ShopId = &v
	return s
}

func (s *QueryDistributionUserTeamRequest) SetUserId(v string) *QueryDistributionUserTeamRequest {
	s.UserId = &v
	return s
}

type QueryDistributionUserTeamResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 一级会员信息
	Members []*DistributionUser `json:"members,omitempty" xml:"members,omitempty" type:"Repeated"`
	// 下级用户总数
	MemberNum *int64 `json:"member_num,omitempty" xml:"member_num,omitempty"`
	// 一级会员数
	OneLevelMemberNum *int64 `json:"one_level_member_num,omitempty" xml:"one_level_member_num,omitempty"`
	// 分页查询当前页号
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty"`
	// 分页查询当前页大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 二级会员数
	TwoLevelMemberNum *int64 `json:"two_level_member_num,omitempty" xml:"two_level_member_num,omitempty"`
}

func (s QueryDistributionUserTeamResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDistributionUserTeamResponse) GoString() string {
	return s.String()
}

func (s *QueryDistributionUserTeamResponse) SetReqMsgId(v string) *QueryDistributionUserTeamResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryDistributionUserTeamResponse) SetResultCode(v string) *QueryDistributionUserTeamResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryDistributionUserTeamResponse) SetResultMsg(v string) *QueryDistributionUserTeamResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryDistributionUserTeamResponse) SetMembers(v []*DistributionUser) *QueryDistributionUserTeamResponse {
	s.Members = v
	return s
}

func (s *QueryDistributionUserTeamResponse) SetMemberNum(v int64) *QueryDistributionUserTeamResponse {
	s.MemberNum = &v
	return s
}

func (s *QueryDistributionUserTeamResponse) SetOneLevelMemberNum(v int64) *QueryDistributionUserTeamResponse {
	s.OneLevelMemberNum = &v
	return s
}

func (s *QueryDistributionUserTeamResponse) SetPageNum(v int64) *QueryDistributionUserTeamResponse {
	s.PageNum = &v
	return s
}

func (s *QueryDistributionUserTeamResponse) SetPageSize(v int64) *QueryDistributionUserTeamResponse {
	s.PageSize = &v
	return s
}

func (s *QueryDistributionUserTeamResponse) SetTwoLevelMemberNum(v int64) *QueryDistributionUserTeamResponse {
	s.TwoLevelMemberNum = &v
	return s
}

type CreateDistributionShopRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 商户在ISV中的标识
	Identity *string `json:"identity,omitempty" xml:"identity,omitempty" require:"true"`
	// 其他说明
	Info *string `json:"info,omitempty" xml:"info,omitempty"`
	// 商户名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
}

func (s CreateDistributionShopRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDistributionShopRequest) GoString() string {
	return s.String()
}

func (s *CreateDistributionShopRequest) SetAuthToken(v string) *CreateDistributionShopRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateDistributionShopRequest) SetProductInstanceId(v string) *CreateDistributionShopRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateDistributionShopRequest) SetIdentity(v string) *CreateDistributionShopRequest {
	s.Identity = &v
	return s
}

func (s *CreateDistributionShopRequest) SetInfo(v string) *CreateDistributionShopRequest {
	s.Info = &v
	return s
}

func (s *CreateDistributionShopRequest) SetName(v string) *CreateDistributionShopRequest {
	s.Name = &v
	return s
}

type CreateDistributionShopResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 商户管理员唯一标识
	AdminUserId *string `json:"admin_user_id,omitempty" xml:"admin_user_id,omitempty"`
	// 商户创建时间
	CreateTime *string `json:"create_time,omitempty" xml:"create_time,omitempty"`
	// 商户唯一标识
	ShopId *string `json:"shop_id,omitempty" xml:"shop_id,omitempty"`
}

func (s CreateDistributionShopResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDistributionShopResponse) GoString() string {
	return s.String()
}

func (s *CreateDistributionShopResponse) SetReqMsgId(v string) *CreateDistributionShopResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateDistributionShopResponse) SetResultCode(v string) *CreateDistributionShopResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateDistributionShopResponse) SetResultMsg(v string) *CreateDistributionShopResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateDistributionShopResponse) SetAdminUserId(v string) *CreateDistributionShopResponse {
	s.AdminUserId = &v
	return s
}

func (s *CreateDistributionShopResponse) SetCreateTime(v string) *CreateDistributionShopResponse {
	s.CreateTime = &v
	return s
}

func (s *CreateDistributionShopResponse) SetShopId(v string) *CreateDistributionShopResponse {
	s.ShopId = &v
	return s
}

type CreateDistributionUserRelationRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 上级用户唯一标识
	FromUserId *string `json:"from_user_id,omitempty" xml:"from_user_id,omitempty"`
	// 商品唯一标识
	ItemId *string `json:"item_id,omitempty" xml:"item_id,omitempty"`
	// 商户唯一标识
	ShopId *string `json:"shop_id,omitempty" xml:"shop_id,omitempty" require:"true"`
	// 来源，微信朋友圈/微信小程序/支付宝小程序/H5/商户自有APP/其他
	Source *string `json:"source,omitempty" xml:"source,omitempty" require:"true"`
	// 用户唯一标识
	UserId *string `json:"user_id,omitempty" xml:"user_id,omitempty" require:"true"`
}

func (s CreateDistributionUserRelationRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDistributionUserRelationRequest) GoString() string {
	return s.String()
}

func (s *CreateDistributionUserRelationRequest) SetAuthToken(v string) *CreateDistributionUserRelationRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateDistributionUserRelationRequest) SetProductInstanceId(v string) *CreateDistributionUserRelationRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateDistributionUserRelationRequest) SetFromUserId(v string) *CreateDistributionUserRelationRequest {
	s.FromUserId = &v
	return s
}

func (s *CreateDistributionUserRelationRequest) SetItemId(v string) *CreateDistributionUserRelationRequest {
	s.ItemId = &v
	return s
}

func (s *CreateDistributionUserRelationRequest) SetShopId(v string) *CreateDistributionUserRelationRequest {
	s.ShopId = &v
	return s
}

func (s *CreateDistributionUserRelationRequest) SetSource(v string) *CreateDistributionUserRelationRequest {
	s.Source = &v
	return s
}

func (s *CreateDistributionUserRelationRequest) SetUserId(v string) *CreateDistributionUserRelationRequest {
	s.UserId = &v
	return s
}

type CreateDistributionUserRelationResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 区块链交易hash
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty"`
}

func (s CreateDistributionUserRelationResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDistributionUserRelationResponse) GoString() string {
	return s.String()
}

func (s *CreateDistributionUserRelationResponse) SetReqMsgId(v string) *CreateDistributionUserRelationResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateDistributionUserRelationResponse) SetResultCode(v string) *CreateDistributionUserRelationResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateDistributionUserRelationResponse) SetResultMsg(v string) *CreateDistributionUserRelationResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateDistributionUserRelationResponse) SetTxHash(v string) *CreateDistributionUserRelationResponse {
	s.TxHash = &v
	return s
}

type InitDistributionContractRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 初始化合约名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
}

func (s InitDistributionContractRequest) String() string {
	return tea.Prettify(s)
}

func (s InitDistributionContractRequest) GoString() string {
	return s.String()
}

func (s *InitDistributionContractRequest) SetAuthToken(v string) *InitDistributionContractRequest {
	s.AuthToken = &v
	return s
}

func (s *InitDistributionContractRequest) SetProductInstanceId(v string) *InitDistributionContractRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *InitDistributionContractRequest) SetName(v string) *InitDistributionContractRequest {
	s.Name = &v
	return s
}

type InitDistributionContractResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 合约链上地址
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty"`
}

func (s InitDistributionContractResponse) String() string {
	return tea.Prettify(s)
}

func (s InitDistributionContractResponse) GoString() string {
	return s.String()
}

func (s *InitDistributionContractResponse) SetReqMsgId(v string) *InitDistributionContractResponse {
	s.ReqMsgId = &v
	return s
}

func (s *InitDistributionContractResponse) SetResultCode(v string) *InitDistributionContractResponse {
	s.ResultCode = &v
	return s
}

func (s *InitDistributionContractResponse) SetResultMsg(v string) *InitDistributionContractResponse {
	s.ResultMsg = &v
	return s
}

func (s *InitDistributionContractResponse) SetTxHash(v string) *InitDistributionContractResponse {
	s.TxHash = &v
	return s
}

type CreateDistributionProductItemRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 分销比例  10 表示 10%
	DistributionRate *string `json:"distribution_rate,omitempty" xml:"distribution_rate,omitempty" require:"true"`
	// 上架时间戳
	EnableDate *string `json:"enable_date,omitempty" xml:"enable_date,omitempty" require:"true"`
	// 划线价格
	LinePrice *string `json:"line_price,omitempty" xml:"line_price,omitempty" require:"true"`
	// 商品id
	ProductId *string `json:"product_id,omitempty" xml:"product_id,omitempty" require:"true"`
	// 商品封面图片url
	ProductImg *string `json:"product_img,omitempty" xml:"product_img,omitempty" require:"true"`
	// 商品信息
	ProductInfo *string `json:"product_info,omitempty" xml:"product_info,omitempty" require:"true"`
	// 商品名称
	ProductName *string `json:"product_name,omitempty" xml:"product_name,omitempty" require:"true"`
	// 商品价格
	ProductPrice *string `json:"product_price,omitempty" xml:"product_price,omitempty" require:"true"`
	// 商品类型
	ProductType *string `json:"product_type,omitempty" xml:"product_type,omitempty" require:"true"`
	// 商户id
	ShopId *string `json:"shop_id,omitempty" xml:"shop_id,omitempty" require:"true"`
}

func (s CreateDistributionProductItemRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDistributionProductItemRequest) GoString() string {
	return s.String()
}

func (s *CreateDistributionProductItemRequest) SetAuthToken(v string) *CreateDistributionProductItemRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateDistributionProductItemRequest) SetProductInstanceId(v string) *CreateDistributionProductItemRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateDistributionProductItemRequest) SetDistributionRate(v string) *CreateDistributionProductItemRequest {
	s.DistributionRate = &v
	return s
}

func (s *CreateDistributionProductItemRequest) SetEnableDate(v string) *CreateDistributionProductItemRequest {
	s.EnableDate = &v
	return s
}

func (s *CreateDistributionProductItemRequest) SetLinePrice(v string) *CreateDistributionProductItemRequest {
	s.LinePrice = &v
	return s
}

func (s *CreateDistributionProductItemRequest) SetProductId(v string) *CreateDistributionProductItemRequest {
	s.ProductId = &v
	return s
}

func (s *CreateDistributionProductItemRequest) SetProductImg(v string) *CreateDistributionProductItemRequest {
	s.ProductImg = &v
	return s
}

func (s *CreateDistributionProductItemRequest) SetProductInfo(v string) *CreateDistributionProductItemRequest {
	s.ProductInfo = &v
	return s
}

func (s *CreateDistributionProductItemRequest) SetProductName(v string) *CreateDistributionProductItemRequest {
	s.ProductName = &v
	return s
}

func (s *CreateDistributionProductItemRequest) SetProductPrice(v string) *CreateDistributionProductItemRequest {
	s.ProductPrice = &v
	return s
}

func (s *CreateDistributionProductItemRequest) SetProductType(v string) *CreateDistributionProductItemRequest {
	s.ProductType = &v
	return s
}

func (s *CreateDistributionProductItemRequest) SetShopId(v string) *CreateDistributionProductItemRequest {
	s.ShopId = &v
	return s
}

type CreateDistributionProductItemResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 商品id
	ProductId *string `json:"product_id,omitempty" xml:"product_id,omitempty"`
	// 商户id
	ShopId *string `json:"shop_id,omitempty" xml:"shop_id,omitempty"`
	// 链上地址
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty"`
}

func (s CreateDistributionProductItemResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDistributionProductItemResponse) GoString() string {
	return s.String()
}

func (s *CreateDistributionProductItemResponse) SetReqMsgId(v string) *CreateDistributionProductItemResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateDistributionProductItemResponse) SetResultCode(v string) *CreateDistributionProductItemResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateDistributionProductItemResponse) SetResultMsg(v string) *CreateDistributionProductItemResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateDistributionProductItemResponse) SetProductId(v string) *CreateDistributionProductItemResponse {
	s.ProductId = &v
	return s
}

func (s *CreateDistributionProductItemResponse) SetShopId(v string) *CreateDistributionProductItemResponse {
	s.ShopId = &v
	return s
}

func (s *CreateDistributionProductItemResponse) SetTxHash(v string) *CreateDistributionProductItemResponse {
	s.TxHash = &v
	return s
}

type QueryDistributionProductItemRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 商品id
	ProductId *string `json:"product_id,omitempty" xml:"product_id,omitempty"`
	// 商户id
	ShopId *string `json:"shop_id,omitempty" xml:"shop_id,omitempty" require:"true"`
}

func (s QueryDistributionProductItemRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDistributionProductItemRequest) GoString() string {
	return s.String()
}

func (s *QueryDistributionProductItemRequest) SetAuthToken(v string) *QueryDistributionProductItemRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryDistributionProductItemRequest) SetProductInstanceId(v string) *QueryDistributionProductItemRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryDistributionProductItemRequest) SetProductId(v string) *QueryDistributionProductItemRequest {
	s.ProductId = &v
	return s
}

func (s *QueryDistributionProductItemRequest) SetShopId(v string) *QueryDistributionProductItemRequest {
	s.ShopId = &v
	return s
}

type QueryDistributionProductItemResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 商品列表
	Products []*ItemDto `json:"products,omitempty" xml:"products,omitempty" type:"Repeated"`
}

func (s QueryDistributionProductItemResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDistributionProductItemResponse) GoString() string {
	return s.String()
}

func (s *QueryDistributionProductItemResponse) SetReqMsgId(v string) *QueryDistributionProductItemResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryDistributionProductItemResponse) SetResultCode(v string) *QueryDistributionProductItemResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryDistributionProductItemResponse) SetResultMsg(v string) *QueryDistributionProductItemResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryDistributionProductItemResponse) SetProducts(v []*ItemDto) *QueryDistributionProductItemResponse {
	s.Products = v
	return s
}

type UpdateDistributionFundPromoterRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 可提现余额
	Balance *string `json:"balance,omitempty" xml:"balance,omitempty" require:"true"`
	// 推广人id
	PromoterId *string `json:"promoter_id,omitempty" xml:"promoter_id,omitempty" require:"true"`
	// 待结算
	SettleQuota *string `json:"settle_quota,omitempty" xml:"settle_quota,omitempty" require:"true"`
	// 商户id
	ShopId *string `json:"shop_id,omitempty" xml:"shop_id,omitempty" require:"true"`
}

func (s UpdateDistributionFundPromoterRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateDistributionFundPromoterRequest) GoString() string {
	return s.String()
}

func (s *UpdateDistributionFundPromoterRequest) SetAuthToken(v string) *UpdateDistributionFundPromoterRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateDistributionFundPromoterRequest) SetProductInstanceId(v string) *UpdateDistributionFundPromoterRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UpdateDistributionFundPromoterRequest) SetBalance(v string) *UpdateDistributionFundPromoterRequest {
	s.Balance = &v
	return s
}

func (s *UpdateDistributionFundPromoterRequest) SetPromoterId(v string) *UpdateDistributionFundPromoterRequest {
	s.PromoterId = &v
	return s
}

func (s *UpdateDistributionFundPromoterRequest) SetSettleQuota(v string) *UpdateDistributionFundPromoterRequest {
	s.SettleQuota = &v
	return s
}

func (s *UpdateDistributionFundPromoterRequest) SetShopId(v string) *UpdateDistributionFundPromoterRequest {
	s.ShopId = &v
	return s
}

type UpdateDistributionFundPromoterResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 链上地址
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty"`
}

func (s UpdateDistributionFundPromoterResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateDistributionFundPromoterResponse) GoString() string {
	return s.String()
}

func (s *UpdateDistributionFundPromoterResponse) SetReqMsgId(v string) *UpdateDistributionFundPromoterResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateDistributionFundPromoterResponse) SetResultCode(v string) *UpdateDistributionFundPromoterResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateDistributionFundPromoterResponse) SetResultMsg(v string) *UpdateDistributionFundPromoterResponse {
	s.ResultMsg = &v
	return s
}

func (s *UpdateDistributionFundPromoterResponse) SetTxHash(v string) *UpdateDistributionFundPromoterResponse {
	s.TxHash = &v
	return s
}

type UpdateDistributionFundShopRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 审批中额度
	ApproveQuota *string `json:"approve_quota,omitempty" xml:"approve_quota,omitempty" require:"true"`
	// 可提现余额
	Balance *string `json:"balance,omitempty" xml:"balance,omitempty" require:"true"`
	// 已到账额度
	FinishQuota *string `json:"finish_quota,omitempty" xml:"finish_quota,omitempty" require:"true"`
	// 商户id
	ShopId *string `json:"shop_id,omitempty" xml:"shop_id,omitempty" require:"true"`
}

func (s UpdateDistributionFundShopRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateDistributionFundShopRequest) GoString() string {
	return s.String()
}

func (s *UpdateDistributionFundShopRequest) SetAuthToken(v string) *UpdateDistributionFundShopRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateDistributionFundShopRequest) SetProductInstanceId(v string) *UpdateDistributionFundShopRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UpdateDistributionFundShopRequest) SetApproveQuota(v string) *UpdateDistributionFundShopRequest {
	s.ApproveQuota = &v
	return s
}

func (s *UpdateDistributionFundShopRequest) SetBalance(v string) *UpdateDistributionFundShopRequest {
	s.Balance = &v
	return s
}

func (s *UpdateDistributionFundShopRequest) SetFinishQuota(v string) *UpdateDistributionFundShopRequest {
	s.FinishQuota = &v
	return s
}

func (s *UpdateDistributionFundShopRequest) SetShopId(v string) *UpdateDistributionFundShopRequest {
	s.ShopId = &v
	return s
}

type UpdateDistributionFundShopResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 链上地址
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty"`
}

func (s UpdateDistributionFundShopResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateDistributionFundShopResponse) GoString() string {
	return s.String()
}

func (s *UpdateDistributionFundShopResponse) SetReqMsgId(v string) *UpdateDistributionFundShopResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateDistributionFundShopResponse) SetResultCode(v string) *UpdateDistributionFundShopResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateDistributionFundShopResponse) SetResultMsg(v string) *UpdateDistributionFundShopResponse {
	s.ResultMsg = &v
	return s
}

func (s *UpdateDistributionFundShopResponse) SetTxHash(v string) *UpdateDistributionFundShopResponse {
	s.TxHash = &v
	return s
}

type QueryDistributionFundPromoterRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 分页号
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty" require:"true"`
	// 分页显示条数
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
	// 推广人id
	PromoterId *string `json:"promoter_id,omitempty" xml:"promoter_id,omitempty" require:"true"`
}

func (s QueryDistributionFundPromoterRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDistributionFundPromoterRequest) GoString() string {
	return s.String()
}

func (s *QueryDistributionFundPromoterRequest) SetAuthToken(v string) *QueryDistributionFundPromoterRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryDistributionFundPromoterRequest) SetProductInstanceId(v string) *QueryDistributionFundPromoterRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryDistributionFundPromoterRequest) SetPageNum(v int64) *QueryDistributionFundPromoterRequest {
	s.PageNum = &v
	return s
}

func (s *QueryDistributionFundPromoterRequest) SetPageSize(v int64) *QueryDistributionFundPromoterRequest {
	s.PageSize = &v
	return s
}

func (s *QueryDistributionFundPromoterRequest) SetPromoterId(v string) *QueryDistributionFundPromoterRequest {
	s.PromoterId = &v
	return s
}

type QueryDistributionFundPromoterResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 推广人账户列表
	FundList []*FundInfo `json:"fund_list,omitempty" xml:"fund_list,omitempty" type:"Repeated"`
	// 分页号
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty"`
	// 分页显示条数
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 推广人id
	PromoterId *string `json:"promoter_id,omitempty" xml:"promoter_id,omitempty"`
	// 总量
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
}

func (s QueryDistributionFundPromoterResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDistributionFundPromoterResponse) GoString() string {
	return s.String()
}

func (s *QueryDistributionFundPromoterResponse) SetReqMsgId(v string) *QueryDistributionFundPromoterResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryDistributionFundPromoterResponse) SetResultCode(v string) *QueryDistributionFundPromoterResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryDistributionFundPromoterResponse) SetResultMsg(v string) *QueryDistributionFundPromoterResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryDistributionFundPromoterResponse) SetFundList(v []*FundInfo) *QueryDistributionFundPromoterResponse {
	s.FundList = v
	return s
}

func (s *QueryDistributionFundPromoterResponse) SetPageNum(v int64) *QueryDistributionFundPromoterResponse {
	s.PageNum = &v
	return s
}

func (s *QueryDistributionFundPromoterResponse) SetPageSize(v int64) *QueryDistributionFundPromoterResponse {
	s.PageSize = &v
	return s
}

func (s *QueryDistributionFundPromoterResponse) SetPromoterId(v string) *QueryDistributionFundPromoterResponse {
	s.PromoterId = &v
	return s
}

func (s *QueryDistributionFundPromoterResponse) SetTotalCount(v int64) *QueryDistributionFundPromoterResponse {
	s.TotalCount = &v
	return s
}

type QueryDistributionFundShopRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 商户id
	ShopId *string `json:"shop_id,omitempty" xml:"shop_id,omitempty" require:"true"`
}

func (s QueryDistributionFundShopRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDistributionFundShopRequest) GoString() string {
	return s.String()
}

func (s *QueryDistributionFundShopRequest) SetAuthToken(v string) *QueryDistributionFundShopRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryDistributionFundShopRequest) SetProductInstanceId(v string) *QueryDistributionFundShopRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryDistributionFundShopRequest) SetShopId(v string) *QueryDistributionFundShopRequest {
	s.ShopId = &v
	return s
}

type QueryDistributionFundShopResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 审批中额度
	ApproveQuota *string `json:"approve_quota,omitempty" xml:"approve_quota,omitempty"`
	// 可提现额度
	Balance *string `json:"balance,omitempty" xml:"balance,omitempty"`
	// 已到账额度
	FinishQuota *string `json:"finish_quota,omitempty" xml:"finish_quota,omitempty"`
	// 商户id
	ShopId *string `json:"shop_id,omitempty" xml:"shop_id,omitempty"`
}

func (s QueryDistributionFundShopResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDistributionFundShopResponse) GoString() string {
	return s.String()
}

func (s *QueryDistributionFundShopResponse) SetReqMsgId(v string) *QueryDistributionFundShopResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryDistributionFundShopResponse) SetResultCode(v string) *QueryDistributionFundShopResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryDistributionFundShopResponse) SetResultMsg(v string) *QueryDistributionFundShopResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryDistributionFundShopResponse) SetApproveQuota(v string) *QueryDistributionFundShopResponse {
	s.ApproveQuota = &v
	return s
}

func (s *QueryDistributionFundShopResponse) SetBalance(v string) *QueryDistributionFundShopResponse {
	s.Balance = &v
	return s
}

func (s *QueryDistributionFundShopResponse) SetFinishQuota(v string) *QueryDistributionFundShopResponse {
	s.FinishQuota = &v
	return s
}

func (s *QueryDistributionFundShopResponse) SetShopId(v string) *QueryDistributionFundShopResponse {
	s.ShopId = &v
	return s
}

type QueryDistributionFundPromoterflowRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 分页号
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty" require:"true"`
	// 分页显示条数
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
	// 推广人id
	PromoterId *string `json:"promoter_id,omitempty" xml:"promoter_id,omitempty" require:"true"`
	// 商户id
	ShopId *string `json:"shop_id,omitempty" xml:"shop_id,omitempty" require:"true"`
}

func (s QueryDistributionFundPromoterflowRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDistributionFundPromoterflowRequest) GoString() string {
	return s.String()
}

func (s *QueryDistributionFundPromoterflowRequest) SetAuthToken(v string) *QueryDistributionFundPromoterflowRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryDistributionFundPromoterflowRequest) SetProductInstanceId(v string) *QueryDistributionFundPromoterflowRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryDistributionFundPromoterflowRequest) SetPageNum(v int64) *QueryDistributionFundPromoterflowRequest {
	s.PageNum = &v
	return s
}

func (s *QueryDistributionFundPromoterflowRequest) SetPageSize(v int64) *QueryDistributionFundPromoterflowRequest {
	s.PageSize = &v
	return s
}

func (s *QueryDistributionFundPromoterflowRequest) SetPromoterId(v string) *QueryDistributionFundPromoterflowRequest {
	s.PromoterId = &v
	return s
}

func (s *QueryDistributionFundPromoterflowRequest) SetShopId(v string) *QueryDistributionFundPromoterflowRequest {
	s.ShopId = &v
	return s
}

type QueryDistributionFundPromoterflowResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 流水信息列表
	CapitalFlows []*CapitalInfo `json:"capital_flows,omitempty" xml:"capital_flows,omitempty" type:"Repeated"`
	// 分页号
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty"`
	// 分页显示条数
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 总数量
	TotalCount *string `json:"total_count,omitempty" xml:"total_count,omitempty"`
}

func (s QueryDistributionFundPromoterflowResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDistributionFundPromoterflowResponse) GoString() string {
	return s.String()
}

func (s *QueryDistributionFundPromoterflowResponse) SetReqMsgId(v string) *QueryDistributionFundPromoterflowResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryDistributionFundPromoterflowResponse) SetResultCode(v string) *QueryDistributionFundPromoterflowResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryDistributionFundPromoterflowResponse) SetResultMsg(v string) *QueryDistributionFundPromoterflowResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryDistributionFundPromoterflowResponse) SetCapitalFlows(v []*CapitalInfo) *QueryDistributionFundPromoterflowResponse {
	s.CapitalFlows = v
	return s
}

func (s *QueryDistributionFundPromoterflowResponse) SetPageNum(v int64) *QueryDistributionFundPromoterflowResponse {
	s.PageNum = &v
	return s
}

func (s *QueryDistributionFundPromoterflowResponse) SetPageSize(v int64) *QueryDistributionFundPromoterflowResponse {
	s.PageSize = &v
	return s
}

func (s *QueryDistributionFundPromoterflowResponse) SetTotalCount(v string) *QueryDistributionFundPromoterflowResponse {
	s.TotalCount = &v
	return s
}

type CreateDistributionOrderPromoterRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 购买用户id
	BuyerId *string `json:"buyer_id,omitempty" xml:"buyer_id,omitempty" require:"true"`
	// 佣金
	Commission *string `json:"commission,omitempty" xml:"commission,omitempty" require:"true"`
	// 佣金比例 10表示10%
	CommissionRate *string `json:"commission_rate,omitempty" xml:"commission_rate,omitempty" require:"true"`
	// 推广订单id
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true"`
	// 订单金额
	OrderPrice *string `json:"order_price,omitempty" xml:"order_price,omitempty" require:"true"`
	// 推广人上级ID
	PrevPromoterId *string `json:"prev_promoter_id,omitempty" xml:"prev_promoter_id,omitempty" require:"true"`
	// 推广人上级分佣金额
	PrevPromoterPrice *string `json:"prev_promoter_price,omitempty" xml:"prev_promoter_price,omitempty" require:"true"`
	// 商品id
	ProductId *string `json:"product_id,omitempty" xml:"product_id,omitempty" require:"true"`
	// 推广人id
	PromoterId *string `json:"promoter_id,omitempty" xml:"promoter_id,omitempty" require:"true"`
}

func (s CreateDistributionOrderPromoterRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDistributionOrderPromoterRequest) GoString() string {
	return s.String()
}

func (s *CreateDistributionOrderPromoterRequest) SetAuthToken(v string) *CreateDistributionOrderPromoterRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateDistributionOrderPromoterRequest) SetProductInstanceId(v string) *CreateDistributionOrderPromoterRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateDistributionOrderPromoterRequest) SetBuyerId(v string) *CreateDistributionOrderPromoterRequest {
	s.BuyerId = &v
	return s
}

func (s *CreateDistributionOrderPromoterRequest) SetCommission(v string) *CreateDistributionOrderPromoterRequest {
	s.Commission = &v
	return s
}

func (s *CreateDistributionOrderPromoterRequest) SetCommissionRate(v string) *CreateDistributionOrderPromoterRequest {
	s.CommissionRate = &v
	return s
}

func (s *CreateDistributionOrderPromoterRequest) SetOrderId(v string) *CreateDistributionOrderPromoterRequest {
	s.OrderId = &v
	return s
}

func (s *CreateDistributionOrderPromoterRequest) SetOrderPrice(v string) *CreateDistributionOrderPromoterRequest {
	s.OrderPrice = &v
	return s
}

func (s *CreateDistributionOrderPromoterRequest) SetPrevPromoterId(v string) *CreateDistributionOrderPromoterRequest {
	s.PrevPromoterId = &v
	return s
}

func (s *CreateDistributionOrderPromoterRequest) SetPrevPromoterPrice(v string) *CreateDistributionOrderPromoterRequest {
	s.PrevPromoterPrice = &v
	return s
}

func (s *CreateDistributionOrderPromoterRequest) SetProductId(v string) *CreateDistributionOrderPromoterRequest {
	s.ProductId = &v
	return s
}

func (s *CreateDistributionOrderPromoterRequest) SetPromoterId(v string) *CreateDistributionOrderPromoterRequest {
	s.PromoterId = &v
	return s
}

type CreateDistributionOrderPromoterResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 链上地址
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty"`
}

func (s CreateDistributionOrderPromoterResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDistributionOrderPromoterResponse) GoString() string {
	return s.String()
}

func (s *CreateDistributionOrderPromoterResponse) SetReqMsgId(v string) *CreateDistributionOrderPromoterResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateDistributionOrderPromoterResponse) SetResultCode(v string) *CreateDistributionOrderPromoterResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateDistributionOrderPromoterResponse) SetResultMsg(v string) *CreateDistributionOrderPromoterResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateDistributionOrderPromoterResponse) SetTxHash(v string) *CreateDistributionOrderPromoterResponse {
	s.TxHash = &v
	return s
}

type CreateDistributionOrderTradeRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 买家id
	BuyerId *string `json:"buyer_id,omitempty" xml:"buyer_id,omitempty" require:"true"`
	// 买家信息
	BuyerInfo *string `json:"buyer_info,omitempty" xml:"buyer_info,omitempty" require:"true"`
	// 买家名称
	BuyerName *string `json:"buyer_name,omitempty" xml:"buyer_name,omitempty" require:"true"`
	// 收银单号
	CashierId *string `json:"cashier_id,omitempty" xml:"cashier_id,omitempty" require:"true"`
	// 外部子订单id
	ChildId *string `json:"child_id,omitempty" xml:"child_id,omitempty" require:"true"`
	// 分销交易分佣信息
	DistributionInfo *string `json:"distribution_info,omitempty" xml:"distribution_info,omitempty" require:"true"`
	// 分销商城id
	DistributionShopId *string `json:"distribution_shop_id,omitempty" xml:"distribution_shop_id,omitempty" require:"true"`
	// 分销商城名称
	DistributionShopName *string `json:"distribution_shop_name,omitempty" xml:"distribution_shop_name,omitempty" require:"true"`
	// 订单过期时间戳
	ExpireTime *int64 `json:"expire_time,omitempty" xml:"expire_time,omitempty" require:"true"`
	// 订单扩展信息
	Extend *string `json:"extend,omitempty" xml:"extend,omitempty" require:"true"`
	// 内部渠道
	InnerSource *string `json:"inner_source,omitempty" xml:"inner_source,omitempty" require:"true"`
	// 交易参与方
	JoinTrader *string `json:"join_trader,omitempty" xml:"join_trader,omitempty" require:"true"`
	// 订单id
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true"`
	// 订单金额 单位 分
	OrderPrice *int64 `json:"order_price,omitempty" xml:"order_price,omitempty" require:"true"`
	// 外部父订单id
	ParentId *string `json:"parent_id,omitempty" xml:"parent_id,omitempty" require:"true"`
	// 订单支付信息
	PayInfo *string `json:"pay_info,omitempty" xml:"pay_info,omitempty" require:"true"`
	// 结算状态 I待结算 S已结算
	PayStatus *string `json:"pay_status,omitempty" xml:"pay_status,omitempty" require:"true"`
	// 上级推广金额
	PrevPromoterPrice *string `json:"prev_promoter_price,omitempty" xml:"prev_promoter_price,omitempty" require:"true"`
	// 商品描述
	ProductDesc *string `json:"product_desc,omitempty" xml:"product_desc,omitempty" require:"true"`
	// 商品id
	ProductId *string `json:"product_id,omitempty" xml:"product_id,omitempty" require:"true"`
	// 商品名称
	ProductName *string `json:"product_name,omitempty" xml:"product_name,omitempty" require:"true"`
	// 商品数量
	ProductNum *int64 `json:"product_num,omitempty" xml:"product_num,omitempty" require:"true"`
	// 商品价格
	ProductPrice *string `json:"product_price,omitempty" xml:"product_price,omitempty" require:"true"`
	// 商品类型
	ProductType *string `json:"product_type,omitempty" xml:"product_type,omitempty" require:"true"`
	// 推广订单id
	PromoterOrderId *string `json:"promoter_order_id,omitempty" xml:"promoter_order_id,omitempty" require:"true"`
	// 商品原始金额
	RealPrice *string `json:"real_price,omitempty" xml:"real_price,omitempty" require:"true"`
	// 退款时间戳
	RefundTime *int64 `json:"refund_time,omitempty" xml:"refund_time,omitempty" require:"true"`
	// 请求系统
	ReqSystem *string `json:"req_system,omitempty" xml:"req_system,omitempty" require:"true"`
	// 卖方id
	SellerId *string `json:"seller_id,omitempty" xml:"seller_id,omitempty" require:"true"`
	// 卖方信息
	SellerInfo *string `json:"seller_info,omitempty" xml:"seller_info,omitempty" require:"true"`
	// 卖方名称
	SellerName *string `json:"seller_name,omitempty" xml:"seller_name,omitempty" require:"true"`
	// 分享人
	Share *string `json:"share,omitempty" xml:"share,omitempty" require:"true"`
	// 商户id
	ShopId *string `json:"shop_id,omitempty" xml:"shop_id,omitempty" require:"true"`
	// 订单渠道
	Source *string `json:"source,omitempty" xml:"source,omitempty" require:"true"`
	// 交易状态 W-待付款、S-成功、F-失败、C-待确认
	Status *string `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// 购买订单id
	TradeId *string `json:"trade_id,omitempty" xml:"trade_id,omitempty" require:"true"`
	// 交易时间戳
	TradeTime *int64 `json:"trade_time,omitempty" xml:"trade_time,omitempty" require:"true"`
	// 交易类型
	TradeType *string `json:"trade_type,omitempty" xml:"trade_type,omitempty" require:"true"`
	// 业务类型
	Type *string `json:"type,omitempty" xml:"type,omitempty" require:"true"`
}

func (s CreateDistributionOrderTradeRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDistributionOrderTradeRequest) GoString() string {
	return s.String()
}

func (s *CreateDistributionOrderTradeRequest) SetAuthToken(v string) *CreateDistributionOrderTradeRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateDistributionOrderTradeRequest) SetProductInstanceId(v string) *CreateDistributionOrderTradeRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateDistributionOrderTradeRequest) SetBuyerId(v string) *CreateDistributionOrderTradeRequest {
	s.BuyerId = &v
	return s
}

func (s *CreateDistributionOrderTradeRequest) SetBuyerInfo(v string) *CreateDistributionOrderTradeRequest {
	s.BuyerInfo = &v
	return s
}

func (s *CreateDistributionOrderTradeRequest) SetBuyerName(v string) *CreateDistributionOrderTradeRequest {
	s.BuyerName = &v
	return s
}

func (s *CreateDistributionOrderTradeRequest) SetCashierId(v string) *CreateDistributionOrderTradeRequest {
	s.CashierId = &v
	return s
}

func (s *CreateDistributionOrderTradeRequest) SetChildId(v string) *CreateDistributionOrderTradeRequest {
	s.ChildId = &v
	return s
}

func (s *CreateDistributionOrderTradeRequest) SetDistributionInfo(v string) *CreateDistributionOrderTradeRequest {
	s.DistributionInfo = &v
	return s
}

func (s *CreateDistributionOrderTradeRequest) SetDistributionShopId(v string) *CreateDistributionOrderTradeRequest {
	s.DistributionShopId = &v
	return s
}

func (s *CreateDistributionOrderTradeRequest) SetDistributionShopName(v string) *CreateDistributionOrderTradeRequest {
	s.DistributionShopName = &v
	return s
}

func (s *CreateDistributionOrderTradeRequest) SetExpireTime(v int64) *CreateDistributionOrderTradeRequest {
	s.ExpireTime = &v
	return s
}

func (s *CreateDistributionOrderTradeRequest) SetExtend(v string) *CreateDistributionOrderTradeRequest {
	s.Extend = &v
	return s
}

func (s *CreateDistributionOrderTradeRequest) SetInnerSource(v string) *CreateDistributionOrderTradeRequest {
	s.InnerSource = &v
	return s
}

func (s *CreateDistributionOrderTradeRequest) SetJoinTrader(v string) *CreateDistributionOrderTradeRequest {
	s.JoinTrader = &v
	return s
}

func (s *CreateDistributionOrderTradeRequest) SetOrderId(v string) *CreateDistributionOrderTradeRequest {
	s.OrderId = &v
	return s
}

func (s *CreateDistributionOrderTradeRequest) SetOrderPrice(v int64) *CreateDistributionOrderTradeRequest {
	s.OrderPrice = &v
	return s
}

func (s *CreateDistributionOrderTradeRequest) SetParentId(v string) *CreateDistributionOrderTradeRequest {
	s.ParentId = &v
	return s
}

func (s *CreateDistributionOrderTradeRequest) SetPayInfo(v string) *CreateDistributionOrderTradeRequest {
	s.PayInfo = &v
	return s
}

func (s *CreateDistributionOrderTradeRequest) SetPayStatus(v string) *CreateDistributionOrderTradeRequest {
	s.PayStatus = &v
	return s
}

func (s *CreateDistributionOrderTradeRequest) SetPrevPromoterPrice(v string) *CreateDistributionOrderTradeRequest {
	s.PrevPromoterPrice = &v
	return s
}

func (s *CreateDistributionOrderTradeRequest) SetProductDesc(v string) *CreateDistributionOrderTradeRequest {
	s.ProductDesc = &v
	return s
}

func (s *CreateDistributionOrderTradeRequest) SetProductId(v string) *CreateDistributionOrderTradeRequest {
	s.ProductId = &v
	return s
}

func (s *CreateDistributionOrderTradeRequest) SetProductName(v string) *CreateDistributionOrderTradeRequest {
	s.ProductName = &v
	return s
}

func (s *CreateDistributionOrderTradeRequest) SetProductNum(v int64) *CreateDistributionOrderTradeRequest {
	s.ProductNum = &v
	return s
}

func (s *CreateDistributionOrderTradeRequest) SetProductPrice(v string) *CreateDistributionOrderTradeRequest {
	s.ProductPrice = &v
	return s
}

func (s *CreateDistributionOrderTradeRequest) SetProductType(v string) *CreateDistributionOrderTradeRequest {
	s.ProductType = &v
	return s
}

func (s *CreateDistributionOrderTradeRequest) SetPromoterOrderId(v string) *CreateDistributionOrderTradeRequest {
	s.PromoterOrderId = &v
	return s
}

func (s *CreateDistributionOrderTradeRequest) SetRealPrice(v string) *CreateDistributionOrderTradeRequest {
	s.RealPrice = &v
	return s
}

func (s *CreateDistributionOrderTradeRequest) SetRefundTime(v int64) *CreateDistributionOrderTradeRequest {
	s.RefundTime = &v
	return s
}

func (s *CreateDistributionOrderTradeRequest) SetReqSystem(v string) *CreateDistributionOrderTradeRequest {
	s.ReqSystem = &v
	return s
}

func (s *CreateDistributionOrderTradeRequest) SetSellerId(v string) *CreateDistributionOrderTradeRequest {
	s.SellerId = &v
	return s
}

func (s *CreateDistributionOrderTradeRequest) SetSellerInfo(v string) *CreateDistributionOrderTradeRequest {
	s.SellerInfo = &v
	return s
}

func (s *CreateDistributionOrderTradeRequest) SetSellerName(v string) *CreateDistributionOrderTradeRequest {
	s.SellerName = &v
	return s
}

func (s *CreateDistributionOrderTradeRequest) SetShare(v string) *CreateDistributionOrderTradeRequest {
	s.Share = &v
	return s
}

func (s *CreateDistributionOrderTradeRequest) SetShopId(v string) *CreateDistributionOrderTradeRequest {
	s.ShopId = &v
	return s
}

func (s *CreateDistributionOrderTradeRequest) SetSource(v string) *CreateDistributionOrderTradeRequest {
	s.Source = &v
	return s
}

func (s *CreateDistributionOrderTradeRequest) SetStatus(v string) *CreateDistributionOrderTradeRequest {
	s.Status = &v
	return s
}

func (s *CreateDistributionOrderTradeRequest) SetTradeId(v string) *CreateDistributionOrderTradeRequest {
	s.TradeId = &v
	return s
}

func (s *CreateDistributionOrderTradeRequest) SetTradeTime(v int64) *CreateDistributionOrderTradeRequest {
	s.TradeTime = &v
	return s
}

func (s *CreateDistributionOrderTradeRequest) SetTradeType(v string) *CreateDistributionOrderTradeRequest {
	s.TradeType = &v
	return s
}

func (s *CreateDistributionOrderTradeRequest) SetType(v string) *CreateDistributionOrderTradeRequest {
	s.Type = &v
	return s
}

type CreateDistributionOrderTradeResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 链上地址
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty"`
}

func (s CreateDistributionOrderTradeResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDistributionOrderTradeResponse) GoString() string {
	return s.String()
}

func (s *CreateDistributionOrderTradeResponse) SetReqMsgId(v string) *CreateDistributionOrderTradeResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateDistributionOrderTradeResponse) SetResultCode(v string) *CreateDistributionOrderTradeResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateDistributionOrderTradeResponse) SetResultMsg(v string) *CreateDistributionOrderTradeResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateDistributionOrderTradeResponse) SetTxHash(v string) *CreateDistributionOrderTradeResponse {
	s.TxHash = &v
	return s
}

type QueryDistributionOrderPromoterRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 订单id
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true"`
}

func (s QueryDistributionOrderPromoterRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDistributionOrderPromoterRequest) GoString() string {
	return s.String()
}

func (s *QueryDistributionOrderPromoterRequest) SetAuthToken(v string) *QueryDistributionOrderPromoterRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryDistributionOrderPromoterRequest) SetProductInstanceId(v string) *QueryDistributionOrderPromoterRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryDistributionOrderPromoterRequest) SetOrderId(v string) *QueryDistributionOrderPromoterRequest {
	s.OrderId = &v
	return s
}

type QueryDistributionOrderPromoterResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 佣金
	Commission *string `json:"commission,omitempty" xml:"commission,omitempty"`
	// 佣金比例 10表示 10%
	CommissionRate *string `json:"commission_rate,omitempty" xml:"commission_rate,omitempty"`
	// 订单id
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty"`
	// 订单金额
	OrderPrice *string `json:"order_price,omitempty" xml:"order_price,omitempty"`
	// 推广人上级ID
	PrevPromoterId *string `json:"prev_promoter_id,omitempty" xml:"prev_promoter_id,omitempty"`
	// 推广人上级分佣金额
	PrevPromoterPrice *string `json:"prev_promoter_price,omitempty" xml:"prev_promoter_price,omitempty"`
	// 商品id
	ProductId *string `json:"product_id,omitempty" xml:"product_id,omitempty"`
	// 推广人id
	PromoterId *string `json:"promoter_id,omitempty" xml:"promoter_id,omitempty"`
	// 链上地址
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty"`
}

func (s QueryDistributionOrderPromoterResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDistributionOrderPromoterResponse) GoString() string {
	return s.String()
}

func (s *QueryDistributionOrderPromoterResponse) SetReqMsgId(v string) *QueryDistributionOrderPromoterResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryDistributionOrderPromoterResponse) SetResultCode(v string) *QueryDistributionOrderPromoterResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryDistributionOrderPromoterResponse) SetResultMsg(v string) *QueryDistributionOrderPromoterResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryDistributionOrderPromoterResponse) SetCommission(v string) *QueryDistributionOrderPromoterResponse {
	s.Commission = &v
	return s
}

func (s *QueryDistributionOrderPromoterResponse) SetCommissionRate(v string) *QueryDistributionOrderPromoterResponse {
	s.CommissionRate = &v
	return s
}

func (s *QueryDistributionOrderPromoterResponse) SetOrderId(v string) *QueryDistributionOrderPromoterResponse {
	s.OrderId = &v
	return s
}

func (s *QueryDistributionOrderPromoterResponse) SetOrderPrice(v string) *QueryDistributionOrderPromoterResponse {
	s.OrderPrice = &v
	return s
}

func (s *QueryDistributionOrderPromoterResponse) SetPrevPromoterId(v string) *QueryDistributionOrderPromoterResponse {
	s.PrevPromoterId = &v
	return s
}

func (s *QueryDistributionOrderPromoterResponse) SetPrevPromoterPrice(v string) *QueryDistributionOrderPromoterResponse {
	s.PrevPromoterPrice = &v
	return s
}

func (s *QueryDistributionOrderPromoterResponse) SetProductId(v string) *QueryDistributionOrderPromoterResponse {
	s.ProductId = &v
	return s
}

func (s *QueryDistributionOrderPromoterResponse) SetPromoterId(v string) *QueryDistributionOrderPromoterResponse {
	s.PromoterId = &v
	return s
}

func (s *QueryDistributionOrderPromoterResponse) SetTxHash(v string) *QueryDistributionOrderPromoterResponse {
	s.TxHash = &v
	return s
}

type QueryDistributionOrderRakebackRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 订单id
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true"`
}

func (s QueryDistributionOrderRakebackRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDistributionOrderRakebackRequest) GoString() string {
	return s.String()
}

func (s *QueryDistributionOrderRakebackRequest) SetAuthToken(v string) *QueryDistributionOrderRakebackRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryDistributionOrderRakebackRequest) SetProductInstanceId(v string) *QueryDistributionOrderRakebackRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryDistributionOrderRakebackRequest) SetOrderId(v string) *QueryDistributionOrderRakebackRequest {
	s.OrderId = &v
	return s
}

type QueryDistributionOrderRakebackResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 订单id
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty"`
	// 返佣信息列表
	RakebackList []*RakeBackInfo `json:"rakeback_list,omitempty" xml:"rakeback_list,omitempty" type:"Repeated"`
}

func (s QueryDistributionOrderRakebackResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDistributionOrderRakebackResponse) GoString() string {
	return s.String()
}

func (s *QueryDistributionOrderRakebackResponse) SetReqMsgId(v string) *QueryDistributionOrderRakebackResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryDistributionOrderRakebackResponse) SetResultCode(v string) *QueryDistributionOrderRakebackResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryDistributionOrderRakebackResponse) SetResultMsg(v string) *QueryDistributionOrderRakebackResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryDistributionOrderRakebackResponse) SetOrderId(v string) *QueryDistributionOrderRakebackResponse {
	s.OrderId = &v
	return s
}

func (s *QueryDistributionOrderRakebackResponse) SetRakebackList(v []*RakeBackInfo) *QueryDistributionOrderRakebackResponse {
	s.RakebackList = v
	return s
}

type QueryDistributionOrderTradeRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 订单id
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true"`
}

func (s QueryDistributionOrderTradeRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDistributionOrderTradeRequest) GoString() string {
	return s.String()
}

func (s *QueryDistributionOrderTradeRequest) SetAuthToken(v string) *QueryDistributionOrderTradeRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryDistributionOrderTradeRequest) SetProductInstanceId(v string) *QueryDistributionOrderTradeRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryDistributionOrderTradeRequest) SetOrderId(v string) *QueryDistributionOrderTradeRequest {
	s.OrderId = &v
	return s
}

type QueryDistributionOrderTradeResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 买家id
	BuyerId *string `json:"buyer_id,omitempty" xml:"buyer_id,omitempty"`
	// 买家信息
	BuyerInfo *string `json:"buyer_info,omitempty" xml:"buyer_info,omitempty"`
	// 买家名称
	BuyerName *string `json:"buyer_name,omitempty" xml:"buyer_name,omitempty"`
	// 收银单号
	CashierId *string `json:"cashier_id,omitempty" xml:"cashier_id,omitempty"`
	// 外部子订单id
	ChildId *string `json:"child_id,omitempty" xml:"child_id,omitempty"`
	// 分销交易分佣信息
	DistributionInfo *string `json:"distribution_info,omitempty" xml:"distribution_info,omitempty"`
	// 分销商城id
	DistributionShopId *string `json:"distribution_shop_id,omitempty" xml:"distribution_shop_id,omitempty"`
	// 分销商城名称
	DistributionShopName *string `json:"distribution_shop_name,omitempty" xml:"distribution_shop_name,omitempty"`
	// 订单过期时间戳
	ExpireTime *int64 `json:"expire_time,omitempty" xml:"expire_time,omitempty"`
	// 订单扩展信息
	Extend *string `json:"extend,omitempty" xml:"extend,omitempty"`
	// 内部渠道
	InnerSource *string `json:"inner_source,omitempty" xml:"inner_source,omitempty"`
	// 交易参与方
	JoinTrader *string `json:"join_trader,omitempty" xml:"join_trader,omitempty"`
	// 订单id
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty"`
	// 订单金额
	OrderPrice *string `json:"order_price,omitempty" xml:"order_price,omitempty"`
	// 外部父订单id
	ParentId *string `json:"parent_id,omitempty" xml:"parent_id,omitempty"`
	// 订单支付信息f
	PayInfo *string `json:"pay_info,omitempty" xml:"pay_info,omitempty"`
	// 结算状态 I待结算 S已结算
	PayStatus *string `json:"pay_status,omitempty" xml:"pay_status,omitempty"`
	// 商品描述
	ProductDesc *string `json:"product_desc,omitempty" xml:"product_desc,omitempty"`
	// 商品id
	ProductId *string `json:"product_id,omitempty" xml:"product_id,omitempty"`
	// 商品名称
	ProductName *string `json:"product_name,omitempty" xml:"product_name,omitempty"`
	// 商品数量
	ProductNum *int64 `json:"product_num,omitempty" xml:"product_num,omitempty"`
	// 商品单价
	ProductPrice *string `json:"product_price,omitempty" xml:"product_price,omitempty"`
	// 商品类型
	ProductType *string `json:"product_type,omitempty" xml:"product_type,omitempty"`
	// 推广人订单id
	PromoterOrderId *string `json:"promoter_order_id,omitempty" xml:"promoter_order_id,omitempty"`
	// 商品原始金额
	RealPrice *string `json:"real_price,omitempty" xml:"real_price,omitempty"`
	// 退款时间
	RefundTime *int64 `json:"refund_time,omitempty" xml:"refund_time,omitempty"`
	// 请求系统
	ReqSystem *string `json:"req_system,omitempty" xml:"req_system,omitempty"`
	// 卖家id
	SellerId *string `json:"seller_id,omitempty" xml:"seller_id,omitempty"`
	// 卖家信息
	SellerInfo *string `json:"seller_info,omitempty" xml:"seller_info,omitempty"`
	// 卖家名称
	SellerName *string `json:"seller_name,omitempty" xml:"seller_name,omitempty"`
	// 分享人
	Share *string `json:"share,omitempty" xml:"share,omitempty"`
	// 商户id
	ShopId *string `json:"shop_id,omitempty" xml:"shop_id,omitempty"`
	// 订单渠道
	Source *string `json:"source,omitempty" xml:"source,omitempty"`
	// 状态 W-待付款、S-成功、F-失败、C-待确认
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// 购买订单id
	TradeId *string `json:"trade_id,omitempty" xml:"trade_id,omitempty"`
	// 交易时间戳
	TradeTime *int64 `json:"trade_time,omitempty" xml:"trade_time,omitempty"`
	// 交易类型
	TradeType *string `json:"trade_type,omitempty" xml:"trade_type,omitempty"`
	// 业务类型
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
}

func (s QueryDistributionOrderTradeResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDistributionOrderTradeResponse) GoString() string {
	return s.String()
}

func (s *QueryDistributionOrderTradeResponse) SetReqMsgId(v string) *QueryDistributionOrderTradeResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryDistributionOrderTradeResponse) SetResultCode(v string) *QueryDistributionOrderTradeResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryDistributionOrderTradeResponse) SetResultMsg(v string) *QueryDistributionOrderTradeResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryDistributionOrderTradeResponse) SetBuyerId(v string) *QueryDistributionOrderTradeResponse {
	s.BuyerId = &v
	return s
}

func (s *QueryDistributionOrderTradeResponse) SetBuyerInfo(v string) *QueryDistributionOrderTradeResponse {
	s.BuyerInfo = &v
	return s
}

func (s *QueryDistributionOrderTradeResponse) SetBuyerName(v string) *QueryDistributionOrderTradeResponse {
	s.BuyerName = &v
	return s
}

func (s *QueryDistributionOrderTradeResponse) SetCashierId(v string) *QueryDistributionOrderTradeResponse {
	s.CashierId = &v
	return s
}

func (s *QueryDistributionOrderTradeResponse) SetChildId(v string) *QueryDistributionOrderTradeResponse {
	s.ChildId = &v
	return s
}

func (s *QueryDistributionOrderTradeResponse) SetDistributionInfo(v string) *QueryDistributionOrderTradeResponse {
	s.DistributionInfo = &v
	return s
}

func (s *QueryDistributionOrderTradeResponse) SetDistributionShopId(v string) *QueryDistributionOrderTradeResponse {
	s.DistributionShopId = &v
	return s
}

func (s *QueryDistributionOrderTradeResponse) SetDistributionShopName(v string) *QueryDistributionOrderTradeResponse {
	s.DistributionShopName = &v
	return s
}

func (s *QueryDistributionOrderTradeResponse) SetExpireTime(v int64) *QueryDistributionOrderTradeResponse {
	s.ExpireTime = &v
	return s
}

func (s *QueryDistributionOrderTradeResponse) SetExtend(v string) *QueryDistributionOrderTradeResponse {
	s.Extend = &v
	return s
}

func (s *QueryDistributionOrderTradeResponse) SetInnerSource(v string) *QueryDistributionOrderTradeResponse {
	s.InnerSource = &v
	return s
}

func (s *QueryDistributionOrderTradeResponse) SetJoinTrader(v string) *QueryDistributionOrderTradeResponse {
	s.JoinTrader = &v
	return s
}

func (s *QueryDistributionOrderTradeResponse) SetOrderId(v string) *QueryDistributionOrderTradeResponse {
	s.OrderId = &v
	return s
}

func (s *QueryDistributionOrderTradeResponse) SetOrderPrice(v string) *QueryDistributionOrderTradeResponse {
	s.OrderPrice = &v
	return s
}

func (s *QueryDistributionOrderTradeResponse) SetParentId(v string) *QueryDistributionOrderTradeResponse {
	s.ParentId = &v
	return s
}

func (s *QueryDistributionOrderTradeResponse) SetPayInfo(v string) *QueryDistributionOrderTradeResponse {
	s.PayInfo = &v
	return s
}

func (s *QueryDistributionOrderTradeResponse) SetPayStatus(v string) *QueryDistributionOrderTradeResponse {
	s.PayStatus = &v
	return s
}

func (s *QueryDistributionOrderTradeResponse) SetProductDesc(v string) *QueryDistributionOrderTradeResponse {
	s.ProductDesc = &v
	return s
}

func (s *QueryDistributionOrderTradeResponse) SetProductId(v string) *QueryDistributionOrderTradeResponse {
	s.ProductId = &v
	return s
}

func (s *QueryDistributionOrderTradeResponse) SetProductName(v string) *QueryDistributionOrderTradeResponse {
	s.ProductName = &v
	return s
}

func (s *QueryDistributionOrderTradeResponse) SetProductNum(v int64) *QueryDistributionOrderTradeResponse {
	s.ProductNum = &v
	return s
}

func (s *QueryDistributionOrderTradeResponse) SetProductPrice(v string) *QueryDistributionOrderTradeResponse {
	s.ProductPrice = &v
	return s
}

func (s *QueryDistributionOrderTradeResponse) SetProductType(v string) *QueryDistributionOrderTradeResponse {
	s.ProductType = &v
	return s
}

func (s *QueryDistributionOrderTradeResponse) SetPromoterOrderId(v string) *QueryDistributionOrderTradeResponse {
	s.PromoterOrderId = &v
	return s
}

func (s *QueryDistributionOrderTradeResponse) SetRealPrice(v string) *QueryDistributionOrderTradeResponse {
	s.RealPrice = &v
	return s
}

func (s *QueryDistributionOrderTradeResponse) SetRefundTime(v int64) *QueryDistributionOrderTradeResponse {
	s.RefundTime = &v
	return s
}

func (s *QueryDistributionOrderTradeResponse) SetReqSystem(v string) *QueryDistributionOrderTradeResponse {
	s.ReqSystem = &v
	return s
}

func (s *QueryDistributionOrderTradeResponse) SetSellerId(v string) *QueryDistributionOrderTradeResponse {
	s.SellerId = &v
	return s
}

func (s *QueryDistributionOrderTradeResponse) SetSellerInfo(v string) *QueryDistributionOrderTradeResponse {
	s.SellerInfo = &v
	return s
}

func (s *QueryDistributionOrderTradeResponse) SetSellerName(v string) *QueryDistributionOrderTradeResponse {
	s.SellerName = &v
	return s
}

func (s *QueryDistributionOrderTradeResponse) SetShare(v string) *QueryDistributionOrderTradeResponse {
	s.Share = &v
	return s
}

func (s *QueryDistributionOrderTradeResponse) SetShopId(v string) *QueryDistributionOrderTradeResponse {
	s.ShopId = &v
	return s
}

func (s *QueryDistributionOrderTradeResponse) SetSource(v string) *QueryDistributionOrderTradeResponse {
	s.Source = &v
	return s
}

func (s *QueryDistributionOrderTradeResponse) SetStatus(v string) *QueryDistributionOrderTradeResponse {
	s.Status = &v
	return s
}

func (s *QueryDistributionOrderTradeResponse) SetTradeId(v string) *QueryDistributionOrderTradeResponse {
	s.TradeId = &v
	return s
}

func (s *QueryDistributionOrderTradeResponse) SetTradeTime(v int64) *QueryDistributionOrderTradeResponse {
	s.TradeTime = &v
	return s
}

func (s *QueryDistributionOrderTradeResponse) SetTradeType(v string) *QueryDistributionOrderTradeResponse {
	s.TradeType = &v
	return s
}

func (s *QueryDistributionOrderTradeResponse) SetType(v string) *QueryDistributionOrderTradeResponse {
	s.Type = &v
	return s
}

type CreateLogisticFinanceDisRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 扩展字段
	Extend *string `json:"extend,omitempty" xml:"extend,omitempty"`
	// 是否为他人代理申请分布式数字身份,缺省时为自己创建分布式数字身份
	IsAgent *bool `json:"is_agent,omitempty" xml:"is_agent,omitempty"`
	// 用户（企业）名称
	UserName *string `json:"user_name,omitempty" xml:"user_name,omitempty" require:"true"`
}

func (s CreateLogisticFinanceDisRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateLogisticFinanceDisRequest) GoString() string {
	return s.String()
}

func (s *CreateLogisticFinanceDisRequest) SetAuthToken(v string) *CreateLogisticFinanceDisRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateLogisticFinanceDisRequest) SetProductInstanceId(v string) *CreateLogisticFinanceDisRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateLogisticFinanceDisRequest) SetExtend(v string) *CreateLogisticFinanceDisRequest {
	s.Extend = &v
	return s
}

func (s *CreateLogisticFinanceDisRequest) SetIsAgent(v bool) *CreateLogisticFinanceDisRequest {
	s.IsAgent = &v
	return s
}

func (s *CreateLogisticFinanceDisRequest) SetUserName(v string) *CreateLogisticFinanceDisRequest {
	s.UserName = &v
	return s
}

type CreateLogisticFinanceDisResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 生成的分布式数字身份id
	Did *string `json:"did,omitempty" xml:"did,omitempty"`
}

func (s CreateLogisticFinanceDisResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateLogisticFinanceDisResponse) GoString() string {
	return s.String()
}

func (s *CreateLogisticFinanceDisResponse) SetReqMsgId(v string) *CreateLogisticFinanceDisResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateLogisticFinanceDisResponse) SetResultCode(v string) *CreateLogisticFinanceDisResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateLogisticFinanceDisResponse) SetResultMsg(v string) *CreateLogisticFinanceDisResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateLogisticFinanceDisResponse) SetDid(v string) *CreateLogisticFinanceDisResponse {
	s.Did = &v
	return s
}

type ListLogisticFinanceDisRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
}

func (s ListLogisticFinanceDisRequest) String() string {
	return tea.Prettify(s)
}

func (s ListLogisticFinanceDisRequest) GoString() string {
	return s.String()
}

func (s *ListLogisticFinanceDisRequest) SetAuthToken(v string) *ListLogisticFinanceDisRequest {
	s.AuthToken = &v
	return s
}

func (s *ListLogisticFinanceDisRequest) SetProductInstanceId(v string) *ListLogisticFinanceDisRequest {
	s.ProductInstanceId = &v
	return s
}

type ListLogisticFinanceDisResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 分布式数字身份列表
	DidList []*DidInfo `json:"did_list,omitempty" xml:"did_list,omitempty" type:"Repeated"`
}

func (s ListLogisticFinanceDisResponse) String() string {
	return tea.Prettify(s)
}

func (s ListLogisticFinanceDisResponse) GoString() string {
	return s.String()
}

func (s *ListLogisticFinanceDisResponse) SetReqMsgId(v string) *ListLogisticFinanceDisResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListLogisticFinanceDisResponse) SetResultCode(v string) *ListLogisticFinanceDisResponse {
	s.ResultCode = &v
	return s
}

func (s *ListLogisticFinanceDisResponse) SetResultMsg(v string) *ListLogisticFinanceDisResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListLogisticFinanceDisResponse) SetDidList(v []*DidInfo) *ListLogisticFinanceDisResponse {
	s.DidList = v
	return s
}

type CreateLogisticFinanceDisvcRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 指定可验证声明颁发对象的分布式数字身份id
	DestDid *string `json:"dest_did,omitempty" xml:"dest_did,omitempty" require:"true"`
	// 可验证声明有效期 (时间戳) ， 到达该时间戳表示的时间时过期， 默认一天
	Expire *string `json:"expire,omitempty" xml:"expire,omitempty"`
	// vc颁发者分布式数字身份，缺省时为调用者的默认分布式数字身份
	SrcDid *string `json:"src_did,omitempty" xml:"src_did,omitempty"`
}

func (s CreateLogisticFinanceDisvcRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateLogisticFinanceDisvcRequest) GoString() string {
	return s.String()
}

func (s *CreateLogisticFinanceDisvcRequest) SetAuthToken(v string) *CreateLogisticFinanceDisvcRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateLogisticFinanceDisvcRequest) SetProductInstanceId(v string) *CreateLogisticFinanceDisvcRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateLogisticFinanceDisvcRequest) SetDestDid(v string) *CreateLogisticFinanceDisvcRequest {
	s.DestDid = &v
	return s
}

func (s *CreateLogisticFinanceDisvcRequest) SetExpire(v string) *CreateLogisticFinanceDisvcRequest {
	s.Expire = &v
	return s
}

func (s *CreateLogisticFinanceDisvcRequest) SetSrcDid(v string) *CreateLogisticFinanceDisvcRequest {
	s.SrcDid = &v
	return s
}

type CreateLogisticFinanceDisvcResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 可验证声明id
	VcId *string `json:"vc_id,omitempty" xml:"vc_id,omitempty"`
}

func (s CreateLogisticFinanceDisvcResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateLogisticFinanceDisvcResponse) GoString() string {
	return s.String()
}

func (s *CreateLogisticFinanceDisvcResponse) SetReqMsgId(v string) *CreateLogisticFinanceDisvcResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateLogisticFinanceDisvcResponse) SetResultCode(v string) *CreateLogisticFinanceDisvcResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateLogisticFinanceDisvcResponse) SetResultMsg(v string) *CreateLogisticFinanceDisvcResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateLogisticFinanceDisvcResponse) SetVcId(v string) *CreateLogisticFinanceDisvcResponse {
	s.VcId = &v
	return s
}

type QueryLogisticFinanceDisvcRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 代理申请的分布式数字身份，缺省时为自己的分布式数字身份
	AgentDid *string `json:"agent_did,omitempty" xml:"agent_did,omitempty"`
	// 可验证声明id
	VcId *string `json:"vc_id,omitempty" xml:"vc_id,omitempty" require:"true"`
}

func (s QueryLogisticFinanceDisvcRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryLogisticFinanceDisvcRequest) GoString() string {
	return s.String()
}

func (s *QueryLogisticFinanceDisvcRequest) SetAuthToken(v string) *QueryLogisticFinanceDisvcRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryLogisticFinanceDisvcRequest) SetProductInstanceId(v string) *QueryLogisticFinanceDisvcRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryLogisticFinanceDisvcRequest) SetAgentDid(v string) *QueryLogisticFinanceDisvcRequest {
	s.AgentDid = &v
	return s
}

func (s *QueryLogisticFinanceDisvcRequest) SetVcId(v string) *QueryLogisticFinanceDisvcRequest {
	s.VcId = &v
	return s
}

type QueryLogisticFinanceDisvcResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 可验证声明完整内容
	Vc *string `json:"vc,omitempty" xml:"vc,omitempty"`
}

func (s QueryLogisticFinanceDisvcResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryLogisticFinanceDisvcResponse) GoString() string {
	return s.String()
}

func (s *QueryLogisticFinanceDisvcResponse) SetReqMsgId(v string) *QueryLogisticFinanceDisvcResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryLogisticFinanceDisvcResponse) SetResultCode(v string) *QueryLogisticFinanceDisvcResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryLogisticFinanceDisvcResponse) SetResultMsg(v string) *QueryLogisticFinanceDisvcResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryLogisticFinanceDisvcResponse) SetVc(v string) *QueryLogisticFinanceDisvcResponse {
	s.Vc = &v
	return s
}

type CreateLogisticFinanceAccountRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 指定的分布式数字身份，缺省时默认为自己的分布式数字身份
	Did *string `json:"did,omitempty" xml:"did,omitempty"`
	// 纳税人识别号
	DraweeTaxNo *string `json:"drawee_tax_no,omitempty" xml:"drawee_tax_no,omitempty" require:"true"`
	// 业务方企业id
	OrgId *string `json:"org_id,omitempty" xml:"org_id,omitempty" require:"true"`
	// 业务方用户id
	UserId *string `json:"user_id,omitempty" xml:"user_id,omitempty" require:"true"`
}

func (s CreateLogisticFinanceAccountRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateLogisticFinanceAccountRequest) GoString() string {
	return s.String()
}

func (s *CreateLogisticFinanceAccountRequest) SetAuthToken(v string) *CreateLogisticFinanceAccountRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateLogisticFinanceAccountRequest) SetProductInstanceId(v string) *CreateLogisticFinanceAccountRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateLogisticFinanceAccountRequest) SetDid(v string) *CreateLogisticFinanceAccountRequest {
	s.Did = &v
	return s
}

func (s *CreateLogisticFinanceAccountRequest) SetDraweeTaxNo(v string) *CreateLogisticFinanceAccountRequest {
	s.DraweeTaxNo = &v
	return s
}

func (s *CreateLogisticFinanceAccountRequest) SetOrgId(v string) *CreateLogisticFinanceAccountRequest {
	s.OrgId = &v
	return s
}

func (s *CreateLogisticFinanceAccountRequest) SetUserId(v string) *CreateLogisticFinanceAccountRequest {
	s.UserId = &v
	return s
}

type CreateLogisticFinanceAccountResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 平台内唯一标识，格式为 org_id:user_id:drawee_tax_no
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty"`
}

func (s CreateLogisticFinanceAccountResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateLogisticFinanceAccountResponse) GoString() string {
	return s.String()
}

func (s *CreateLogisticFinanceAccountResponse) SetReqMsgId(v string) *CreateLogisticFinanceAccountResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateLogisticFinanceAccountResponse) SetResultCode(v string) *CreateLogisticFinanceAccountResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateLogisticFinanceAccountResponse) SetResultMsg(v string) *CreateLogisticFinanceAccountResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateLogisticFinanceAccountResponse) SetAccountId(v string) *CreateLogisticFinanceAccountResponse {
	s.AccountId = &v
	return s
}

type BatchcreateLogisticFinanceAccountRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 指定的分布式数字身份，缺省时为自己的分布式数字身份
	Did *string `json:"did,omitempty" xml:"did,omitempty"`
	// 业务方用户列表，一次最多不超过200
	Users []*LogisticFinUser `json:"users,omitempty" xml:"users,omitempty" require:"true" type:"Repeated"`
}

func (s BatchcreateLogisticFinanceAccountRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchcreateLogisticFinanceAccountRequest) GoString() string {
	return s.String()
}

func (s *BatchcreateLogisticFinanceAccountRequest) SetAuthToken(v string) *BatchcreateLogisticFinanceAccountRequest {
	s.AuthToken = &v
	return s
}

func (s *BatchcreateLogisticFinanceAccountRequest) SetProductInstanceId(v string) *BatchcreateLogisticFinanceAccountRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *BatchcreateLogisticFinanceAccountRequest) SetDid(v string) *BatchcreateLogisticFinanceAccountRequest {
	s.Did = &v
	return s
}

func (s *BatchcreateLogisticFinanceAccountRequest) SetUsers(v []*LogisticFinUser) *BatchcreateLogisticFinanceAccountRequest {
	s.Users = v
	return s
}

type BatchcreateLogisticFinanceAccountResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 失败列表
	FailList []*LogisticFinUser `json:"fail_list,omitempty" xml:"fail_list,omitempty" type:"Repeated"`
	// 映射失败数
	FailNum *int64 `json:"fail_num,omitempty" xml:"fail_num,omitempty"`
	// 成功列表
	SuccessList []*string `json:"success_list,omitempty" xml:"success_list,omitempty" type:"Repeated"`
	// 映射成功数
	SuccessNum *int64 `json:"success_num,omitempty" xml:"success_num,omitempty"`
}

func (s BatchcreateLogisticFinanceAccountResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchcreateLogisticFinanceAccountResponse) GoString() string {
	return s.String()
}

func (s *BatchcreateLogisticFinanceAccountResponse) SetReqMsgId(v string) *BatchcreateLogisticFinanceAccountResponse {
	s.ReqMsgId = &v
	return s
}

func (s *BatchcreateLogisticFinanceAccountResponse) SetResultCode(v string) *BatchcreateLogisticFinanceAccountResponse {
	s.ResultCode = &v
	return s
}

func (s *BatchcreateLogisticFinanceAccountResponse) SetResultMsg(v string) *BatchcreateLogisticFinanceAccountResponse {
	s.ResultMsg = &v
	return s
}

func (s *BatchcreateLogisticFinanceAccountResponse) SetFailList(v []*LogisticFinUser) *BatchcreateLogisticFinanceAccountResponse {
	s.FailList = v
	return s
}

func (s *BatchcreateLogisticFinanceAccountResponse) SetFailNum(v int64) *BatchcreateLogisticFinanceAccountResponse {
	s.FailNum = &v
	return s
}

func (s *BatchcreateLogisticFinanceAccountResponse) SetSuccessList(v []*string) *BatchcreateLogisticFinanceAccountResponse {
	s.SuccessList = v
	return s
}

func (s *BatchcreateLogisticFinanceAccountResponse) SetSuccessNum(v int64) *BatchcreateLogisticFinanceAccountResponse {
	s.SuccessNum = &v
	return s
}

type CreateLogisticFinanceOrderRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 用户链上账户
	// 与司机did 二选一填写
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty"`
	// 运费
	AllFreight *string `json:"all_freight,omitempty" xml:"all_freight,omitempty"`
	// 回单押金
	//
	BackFee *string `json:"back_fee,omitempty" xml:"back_fee,omitempty"`
	// 货源单号
	CargoOrder *string `json:"cargo_order,omitempty" xml:"cargo_order,omitempty"`
	// 车牌颜色
	CartBadgeColor *string `json:"cart_badge_color,omitempty" xml:"cart_badge_color,omitempty" require:"true"`
	// 车牌号
	CartBadgeNo *string `json:"cart_badge_no,omitempty" xml:"cart_badge_no,omitempty" require:"true"`
	// 建单时间
	CreatedTime *int64 `json:"created_time,omitempty" xml:"created_time,omitempty" require:"true"`
	// 受票方名称
	Drawee *string `json:"drawee,omitempty" xml:"drawee,omitempty" require:"true"`
	// 受票方纳税人识别号
	DraweeTaxNo *string `json:"drawee_tax_no,omitempty" xml:"drawee_tax_no,omitempty" require:"true"`
	// 司机分布式身份
	DriverDid *string `json:"driver_did,omitempty" xml:"driver_did,omitempty"`
	// 司机姓名
	// 已填司机分布式身份的情况下可不填
	DriverName *string `json:"driver_name,omitempty" xml:"driver_name,omitempty"`
	// 目的地城市CODE
	EndCityCode *string `json:"end_city_code,omitempty" xml:"end_city_code,omitempty" require:"true"`
	// 目的地城市名称
	EndCityName *string `json:"end_city_name,omitempty" xml:"end_city_name,omitempty" require:"true"`
	// 目的地区县CODE
	EndCountyCode *string `json:"end_county_code,omitempty" xml:"end_county_code,omitempty"`
	// 目的地区县名称
	EndCountyName *string `json:"end_county_name,omitempty" xml:"end_county_name,omitempty"`
	// 结束行政区划代码
	EndDivisionCode *string `json:"end_division_code,omitempty" xml:"end_division_code,omitempty" require:"true"`
	// 目的地省份CODE
	EndProvinceCode *string `json:"end_province_code,omitempty" xml:"end_province_code,omitempty" require:"true"`
	// 目的地省份名称
	EndProvinceName *string `json:"end_province_name,omitempty" xml:"end_province_name,omitempty" require:"true"`
	// 运费增项
	FreightIncr *string `json:"freight_incr,omitempty" xml:"freight_incr,omitempty"`
	// 货物数量
	GoodsAmount *int64 `json:"goods_amount,omitempty" xml:"goods_amount,omitempty"`
	// 货物数量单位类型
	GoodsAmountType *string `json:"goods_amount_type,omitempty" xml:"goods_amount_type,omitempty"`
	// 货物名称
	GoodsName *string `json:"goods_name,omitempty" xml:"goods_name,omitempty" require:"true"`
	// 司机身份证号
	// 已填司机分布式身份的情况下可不填
	IdCard *string `json:"id_card,omitempty" xml:"id_card,omitempty"`
	// 运费扣减
	//
	LossFee *string `json:"loss_fee,omitempty" xml:"loss_fee,omitempty"`
	// 司机手机号
	// 已填司机分布式身份的情况下可不填
	MobileNo *string `json:"mobile_no,omitempty" xml:"mobile_no,omitempty"`
	// 系统识别id
	// 网商识别号
	PartnerId *string `json:"partner_id,omitempty" xml:"partner_id,omitempty"`
	// 无车承运平台分布式数字身份，缺省时为自己的分布式数字身份
	PlatformDid *string `json:"platform_did,omitempty" xml:"platform_did,omitempty"`
	// 预付款金额
	Prepayments *string `json:"prepayments,omitempty" xml:"prepayments,omitempty"`
	// 线下预付ETC
	PrepaymentsBuyEtc *string `json:"prepayments_buy_etc,omitempty" xml:"prepayments_buy_etc,omitempty"`
	// 线下气款金额
	PrepaymentsBuyGas *string `json:"prepayments_buy_gas,omitempty" xml:"prepayments_buy_gas,omitempty"`
	// 线下油款预付
	PrepaymentsBuyOil *string `json:"prepayments_buy_oil,omitempty" xml:"prepayments_buy_oil,omitempty"`
	// 预付ETC卡金额
	PrepaymentsEtccard *string `json:"prepayments_etccard,omitempty" xml:"prepayments_etccard,omitempty"`
	// 预付油卡金额
	PrepaymentsOilcard *string `json:"prepayments_oilcard,omitempty" xml:"prepayments_oilcard,omitempty"`
	// 油卡赠送金额
	PresentAmountOil *string `json:"present_amount_oil,omitempty" xml:"present_amount_oil,omitempty"`
	// 起始地CODE
	StartCityCode *string `json:"start_city_code,omitempty" xml:"start_city_code,omitempty" require:"true"`
	// 起始地城市名称
	StartCityName *string `json:"start_city_name,omitempty" xml:"start_city_name,omitempty" require:"true"`
	// 起始地区县CODE
	StartCountyCode *string `json:"start_county_code,omitempty" xml:"start_county_code,omitempty"`
	// 起始地区县名称
	StartCountyName *string `json:"start_county_name,omitempty" xml:"start_county_name,omitempty"`
	// 起始行政区划代码
	StartDivisionCode *string `json:"start_division_code,omitempty" xml:"start_division_code,omitempty" require:"true"`
	// 起始地省份CODE
	StartProvinceCode *string `json:"start_province_code,omitempty" xml:"start_province_code,omitempty" require:"true"`
	// 起始地省份名称
	StartProvinceName *string `json:"start_province_name,omitempty" xml:"start_province_name,omitempty" require:"true"`
	// 起运时间戳
	StartTime *int64 `json:"start_time,omitempty" xml:"start_time,omitempty" require:"true"`
	// 运单id
	TaxWaybillId *string `json:"tax_waybill_id,omitempty" xml:"tax_waybill_id,omitempty" require:"true"`
	// 运输单价
	UnitPrice *string `json:"unit_price,omitempty" xml:"unit_price,omitempty"`
}

func (s CreateLogisticFinanceOrderRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateLogisticFinanceOrderRequest) GoString() string {
	return s.String()
}

func (s *CreateLogisticFinanceOrderRequest) SetAuthToken(v string) *CreateLogisticFinanceOrderRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateLogisticFinanceOrderRequest) SetProductInstanceId(v string) *CreateLogisticFinanceOrderRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateLogisticFinanceOrderRequest) SetAccountId(v string) *CreateLogisticFinanceOrderRequest {
	s.AccountId = &v
	return s
}

func (s *CreateLogisticFinanceOrderRequest) SetAllFreight(v string) *CreateLogisticFinanceOrderRequest {
	s.AllFreight = &v
	return s
}

func (s *CreateLogisticFinanceOrderRequest) SetBackFee(v string) *CreateLogisticFinanceOrderRequest {
	s.BackFee = &v
	return s
}

func (s *CreateLogisticFinanceOrderRequest) SetCargoOrder(v string) *CreateLogisticFinanceOrderRequest {
	s.CargoOrder = &v
	return s
}

func (s *CreateLogisticFinanceOrderRequest) SetCartBadgeColor(v string) *CreateLogisticFinanceOrderRequest {
	s.CartBadgeColor = &v
	return s
}

func (s *CreateLogisticFinanceOrderRequest) SetCartBadgeNo(v string) *CreateLogisticFinanceOrderRequest {
	s.CartBadgeNo = &v
	return s
}

func (s *CreateLogisticFinanceOrderRequest) SetCreatedTime(v int64) *CreateLogisticFinanceOrderRequest {
	s.CreatedTime = &v
	return s
}

func (s *CreateLogisticFinanceOrderRequest) SetDrawee(v string) *CreateLogisticFinanceOrderRequest {
	s.Drawee = &v
	return s
}

func (s *CreateLogisticFinanceOrderRequest) SetDraweeTaxNo(v string) *CreateLogisticFinanceOrderRequest {
	s.DraweeTaxNo = &v
	return s
}

func (s *CreateLogisticFinanceOrderRequest) SetDriverDid(v string) *CreateLogisticFinanceOrderRequest {
	s.DriverDid = &v
	return s
}

func (s *CreateLogisticFinanceOrderRequest) SetDriverName(v string) *CreateLogisticFinanceOrderRequest {
	s.DriverName = &v
	return s
}

func (s *CreateLogisticFinanceOrderRequest) SetEndCityCode(v string) *CreateLogisticFinanceOrderRequest {
	s.EndCityCode = &v
	return s
}

func (s *CreateLogisticFinanceOrderRequest) SetEndCityName(v string) *CreateLogisticFinanceOrderRequest {
	s.EndCityName = &v
	return s
}

func (s *CreateLogisticFinanceOrderRequest) SetEndCountyCode(v string) *CreateLogisticFinanceOrderRequest {
	s.EndCountyCode = &v
	return s
}

func (s *CreateLogisticFinanceOrderRequest) SetEndCountyName(v string) *CreateLogisticFinanceOrderRequest {
	s.EndCountyName = &v
	return s
}

func (s *CreateLogisticFinanceOrderRequest) SetEndDivisionCode(v string) *CreateLogisticFinanceOrderRequest {
	s.EndDivisionCode = &v
	return s
}

func (s *CreateLogisticFinanceOrderRequest) SetEndProvinceCode(v string) *CreateLogisticFinanceOrderRequest {
	s.EndProvinceCode = &v
	return s
}

func (s *CreateLogisticFinanceOrderRequest) SetEndProvinceName(v string) *CreateLogisticFinanceOrderRequest {
	s.EndProvinceName = &v
	return s
}

func (s *CreateLogisticFinanceOrderRequest) SetFreightIncr(v string) *CreateLogisticFinanceOrderRequest {
	s.FreightIncr = &v
	return s
}

func (s *CreateLogisticFinanceOrderRequest) SetGoodsAmount(v int64) *CreateLogisticFinanceOrderRequest {
	s.GoodsAmount = &v
	return s
}

func (s *CreateLogisticFinanceOrderRequest) SetGoodsAmountType(v string) *CreateLogisticFinanceOrderRequest {
	s.GoodsAmountType = &v
	return s
}

func (s *CreateLogisticFinanceOrderRequest) SetGoodsName(v string) *CreateLogisticFinanceOrderRequest {
	s.GoodsName = &v
	return s
}

func (s *CreateLogisticFinanceOrderRequest) SetIdCard(v string) *CreateLogisticFinanceOrderRequest {
	s.IdCard = &v
	return s
}

func (s *CreateLogisticFinanceOrderRequest) SetLossFee(v string) *CreateLogisticFinanceOrderRequest {
	s.LossFee = &v
	return s
}

func (s *CreateLogisticFinanceOrderRequest) SetMobileNo(v string) *CreateLogisticFinanceOrderRequest {
	s.MobileNo = &v
	return s
}

func (s *CreateLogisticFinanceOrderRequest) SetPartnerId(v string) *CreateLogisticFinanceOrderRequest {
	s.PartnerId = &v
	return s
}

func (s *CreateLogisticFinanceOrderRequest) SetPlatformDid(v string) *CreateLogisticFinanceOrderRequest {
	s.PlatformDid = &v
	return s
}

func (s *CreateLogisticFinanceOrderRequest) SetPrepayments(v string) *CreateLogisticFinanceOrderRequest {
	s.Prepayments = &v
	return s
}

func (s *CreateLogisticFinanceOrderRequest) SetPrepaymentsBuyEtc(v string) *CreateLogisticFinanceOrderRequest {
	s.PrepaymentsBuyEtc = &v
	return s
}

func (s *CreateLogisticFinanceOrderRequest) SetPrepaymentsBuyGas(v string) *CreateLogisticFinanceOrderRequest {
	s.PrepaymentsBuyGas = &v
	return s
}

func (s *CreateLogisticFinanceOrderRequest) SetPrepaymentsBuyOil(v string) *CreateLogisticFinanceOrderRequest {
	s.PrepaymentsBuyOil = &v
	return s
}

func (s *CreateLogisticFinanceOrderRequest) SetPrepaymentsEtccard(v string) *CreateLogisticFinanceOrderRequest {
	s.PrepaymentsEtccard = &v
	return s
}

func (s *CreateLogisticFinanceOrderRequest) SetPrepaymentsOilcard(v string) *CreateLogisticFinanceOrderRequest {
	s.PrepaymentsOilcard = &v
	return s
}

func (s *CreateLogisticFinanceOrderRequest) SetPresentAmountOil(v string) *CreateLogisticFinanceOrderRequest {
	s.PresentAmountOil = &v
	return s
}

func (s *CreateLogisticFinanceOrderRequest) SetStartCityCode(v string) *CreateLogisticFinanceOrderRequest {
	s.StartCityCode = &v
	return s
}

func (s *CreateLogisticFinanceOrderRequest) SetStartCityName(v string) *CreateLogisticFinanceOrderRequest {
	s.StartCityName = &v
	return s
}

func (s *CreateLogisticFinanceOrderRequest) SetStartCountyCode(v string) *CreateLogisticFinanceOrderRequest {
	s.StartCountyCode = &v
	return s
}

func (s *CreateLogisticFinanceOrderRequest) SetStartCountyName(v string) *CreateLogisticFinanceOrderRequest {
	s.StartCountyName = &v
	return s
}

func (s *CreateLogisticFinanceOrderRequest) SetStartDivisionCode(v string) *CreateLogisticFinanceOrderRequest {
	s.StartDivisionCode = &v
	return s
}

func (s *CreateLogisticFinanceOrderRequest) SetStartProvinceCode(v string) *CreateLogisticFinanceOrderRequest {
	s.StartProvinceCode = &v
	return s
}

func (s *CreateLogisticFinanceOrderRequest) SetStartProvinceName(v string) *CreateLogisticFinanceOrderRequest {
	s.StartProvinceName = &v
	return s
}

func (s *CreateLogisticFinanceOrderRequest) SetStartTime(v int64) *CreateLogisticFinanceOrderRequest {
	s.StartTime = &v
	return s
}

func (s *CreateLogisticFinanceOrderRequest) SetTaxWaybillId(v string) *CreateLogisticFinanceOrderRequest {
	s.TaxWaybillId = &v
	return s
}

func (s *CreateLogisticFinanceOrderRequest) SetUnitPrice(v string) *CreateLogisticFinanceOrderRequest {
	s.UnitPrice = &v
	return s
}

type CreateLogisticFinanceOrderResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 链上凭证
	TxCode *string `json:"tx_code,omitempty" xml:"tx_code,omitempty"`
}

func (s CreateLogisticFinanceOrderResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateLogisticFinanceOrderResponse) GoString() string {
	return s.String()
}

func (s *CreateLogisticFinanceOrderResponse) SetReqMsgId(v string) *CreateLogisticFinanceOrderResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateLogisticFinanceOrderResponse) SetResultCode(v string) *CreateLogisticFinanceOrderResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateLogisticFinanceOrderResponse) SetResultMsg(v string) *CreateLogisticFinanceOrderResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateLogisticFinanceOrderResponse) SetTxCode(v string) *CreateLogisticFinanceOrderResponse {
	s.TxCode = &v
	return s
}

type FinishLogisticFinanceOrderRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链上账号
	// 与司机did 二选一填写
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty"`
	// 运费
	AllFreight *string `json:"all_freight,omitempty" xml:"all_freight,omitempty"`
	// 回单押金
	BackFee *string `json:"back_fee,omitempty" xml:"back_fee,omitempty"`
	// 货源单号
	CargoOrder *string `json:"cargo_order,omitempty" xml:"cargo_order,omitempty"`
	// 车牌颜色
	CartBadgeColor *string `json:"cart_badge_color,omitempty" xml:"cart_badge_color,omitempty" require:"true"`
	// 车牌号
	CartBadgeNo *string `json:"cart_badge_no,omitempty" xml:"cart_badge_no,omitempty" require:"true"`
	// 建单时间
	CreatedTime *int64 `json:"created_time,omitempty" xml:"created_time,omitempty" require:"true"`
	// 受票方名称
	Drawee *string `json:"drawee,omitempty" xml:"drawee,omitempty" require:"true"`
	// 受票方纳税人识别号
	DraweeTaxNo *string `json:"drawee_tax_no,omitempty" xml:"drawee_tax_no,omitempty" require:"true"`
	// 司机分布式数字身份
	DriverDid *string `json:"driver_did,omitempty" xml:"driver_did,omitempty"`
	// 司机姓名
	// 已填司机分布式身份的情况下可不填
	DriverName *string `json:"driver_name,omitempty" xml:"driver_name,omitempty"`
	// 目的地城市CODE
	EndCityCode *string `json:"end_city_code,omitempty" xml:"end_city_code,omitempty" require:"true"`
	// 目的地城市名称
	EndCityName *string `json:"end_city_name,omitempty" xml:"end_city_name,omitempty" require:"true"`
	// 目的地区县CODE
	EndCountyCode *string `json:"end_county_code,omitempty" xml:"end_county_code,omitempty"`
	// 目的地区县名称
	EndCountyName *string `json:"end_county_name,omitempty" xml:"end_county_name,omitempty"`
	// 结束行政区划代码
	EndDivisionCode *string `json:"end_division_code,omitempty" xml:"end_division_code,omitempty" require:"true"`
	// 目的地省份CODE
	EndProvinceCode *string `json:"end_province_code,omitempty" xml:"end_province_code,omitempty" require:"true"`
	// 目的地省份名称
	EndProvinceName *string `json:"end_province_name,omitempty" xml:"end_province_name,omitempty" require:"true"`
	// 终结时间
	EndTime *int64 `json:"end_time,omitempty" xml:"end_time,omitempty" require:"true"`
	// 运费增项
	FreightIncr *string `json:"freight_incr,omitempty" xml:"freight_incr,omitempty"`
	// 货物数量
	GoodsAmount *int64 `json:"goods_amount,omitempty" xml:"goods_amount,omitempty"`
	// 货物数量单位类型
	GoodsAmountType *string `json:"goods_amount_type,omitempty" xml:"goods_amount_type,omitempty"`
	// 货物名称
	GoodsName *string `json:"goods_name,omitempty" xml:"goods_name,omitempty" require:"true"`
	// 司机身份证号
	// 已填司机分布式身份的情况下可不填
	IdCard *string `json:"id_card,omitempty" xml:"id_card,omitempty"`
	// 运费扣减
	LossFee *string `json:"loss_fee,omitempty" xml:"loss_fee,omitempty"`
	// 司机手机号
	// 已填司机分布式身份的情况下可不填
	MobileNo *string `json:"mobile_no,omitempty" xml:"mobile_no,omitempty"`
	// 系统识别id
	// 网商识别号
	PartnerId *string `json:"partner_id,omitempty" xml:"partner_id,omitempty"`
	// 是否进行资金验证
	PayCheck *bool `json:"pay_check,omitempty" xml:"pay_check,omitempty"`
	// 无车承运平台分布式数字身份，缺省时为自己的分布式数字身份
	PlatformDid *string `json:"platform_did,omitempty" xml:"platform_did,omitempty"`
	// 预付款金额
	Prepayments *string `json:"prepayments,omitempty" xml:"prepayments,omitempty"`
	// 线下预付ETC
	PrepaymentsBuyEtc *string `json:"prepayments_buy_etc,omitempty" xml:"prepayments_buy_etc,omitempty"`
	// 线下气款金额
	PrepaymentsBuyGas *string `json:"prepayments_buy_gas,omitempty" xml:"prepayments_buy_gas,omitempty"`
	// 线下油款预付
	PrepaymentsBuyOil *string `json:"prepayments_buy_oil,omitempty" xml:"prepayments_buy_oil,omitempty"`
	// 预付ETC卡金额
	PrepaymentsEtccard *string `json:"prepayments_etccard,omitempty" xml:"prepayments_etccard,omitempty"`
	// 预付油卡金额
	PrepaymentsOilcard *string `json:"prepayments_oilcard,omitempty" xml:"prepayments_oilcard,omitempty"`
	// 油卡赠送金额
	PresentAmountOil *string `json:"present_amount_oil,omitempty" xml:"present_amount_oil,omitempty"`
	// 起始地CODE
	StartCityCode *string `json:"start_city_code,omitempty" xml:"start_city_code,omitempty" require:"true"`
	// 起始地城市名称
	StartCityName *string `json:"start_city_name,omitempty" xml:"start_city_name,omitempty" require:"true"`
	// 起始地区县CODE
	StartCountyCode *string `json:"start_county_code,omitempty" xml:"start_county_code,omitempty"`
	// 起始地区县名称
	StartCountyName *string `json:"start_county_name,omitempty" xml:"start_county_name,omitempty"`
	// 起始行政区划代码
	StartDivisionCode *string `json:"start_division_code,omitempty" xml:"start_division_code,omitempty" require:"true"`
	// 起始地省份CODE
	StartProvinceCode *string `json:"start_province_code,omitempty" xml:"start_province_code,omitempty" require:"true"`
	// 起始地省份名称
	StartProvinceName *string `json:"start_province_name,omitempty" xml:"start_province_name,omitempty" require:"true"`
	// 起运时间
	StartTime *int64 `json:"start_time,omitempty" xml:"start_time,omitempty" require:"true"`
	// 运单ID
	TaxWaybillId *string `json:"tax_waybill_id,omitempty" xml:"tax_waybill_id,omitempty" require:"true"`
	// 运输单价
	UnitPrice *string `json:"unit_price,omitempty" xml:"unit_price,omitempty"`
}

func (s FinishLogisticFinanceOrderRequest) String() string {
	return tea.Prettify(s)
}

func (s FinishLogisticFinanceOrderRequest) GoString() string {
	return s.String()
}

func (s *FinishLogisticFinanceOrderRequest) SetAuthToken(v string) *FinishLogisticFinanceOrderRequest {
	s.AuthToken = &v
	return s
}

func (s *FinishLogisticFinanceOrderRequest) SetProductInstanceId(v string) *FinishLogisticFinanceOrderRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *FinishLogisticFinanceOrderRequest) SetAccountId(v string) *FinishLogisticFinanceOrderRequest {
	s.AccountId = &v
	return s
}

func (s *FinishLogisticFinanceOrderRequest) SetAllFreight(v string) *FinishLogisticFinanceOrderRequest {
	s.AllFreight = &v
	return s
}

func (s *FinishLogisticFinanceOrderRequest) SetBackFee(v string) *FinishLogisticFinanceOrderRequest {
	s.BackFee = &v
	return s
}

func (s *FinishLogisticFinanceOrderRequest) SetCargoOrder(v string) *FinishLogisticFinanceOrderRequest {
	s.CargoOrder = &v
	return s
}

func (s *FinishLogisticFinanceOrderRequest) SetCartBadgeColor(v string) *FinishLogisticFinanceOrderRequest {
	s.CartBadgeColor = &v
	return s
}

func (s *FinishLogisticFinanceOrderRequest) SetCartBadgeNo(v string) *FinishLogisticFinanceOrderRequest {
	s.CartBadgeNo = &v
	return s
}

func (s *FinishLogisticFinanceOrderRequest) SetCreatedTime(v int64) *FinishLogisticFinanceOrderRequest {
	s.CreatedTime = &v
	return s
}

func (s *FinishLogisticFinanceOrderRequest) SetDrawee(v string) *FinishLogisticFinanceOrderRequest {
	s.Drawee = &v
	return s
}

func (s *FinishLogisticFinanceOrderRequest) SetDraweeTaxNo(v string) *FinishLogisticFinanceOrderRequest {
	s.DraweeTaxNo = &v
	return s
}

func (s *FinishLogisticFinanceOrderRequest) SetDriverDid(v string) *FinishLogisticFinanceOrderRequest {
	s.DriverDid = &v
	return s
}

func (s *FinishLogisticFinanceOrderRequest) SetDriverName(v string) *FinishLogisticFinanceOrderRequest {
	s.DriverName = &v
	return s
}

func (s *FinishLogisticFinanceOrderRequest) SetEndCityCode(v string) *FinishLogisticFinanceOrderRequest {
	s.EndCityCode = &v
	return s
}

func (s *FinishLogisticFinanceOrderRequest) SetEndCityName(v string) *FinishLogisticFinanceOrderRequest {
	s.EndCityName = &v
	return s
}

func (s *FinishLogisticFinanceOrderRequest) SetEndCountyCode(v string) *FinishLogisticFinanceOrderRequest {
	s.EndCountyCode = &v
	return s
}

func (s *FinishLogisticFinanceOrderRequest) SetEndCountyName(v string) *FinishLogisticFinanceOrderRequest {
	s.EndCountyName = &v
	return s
}

func (s *FinishLogisticFinanceOrderRequest) SetEndDivisionCode(v string) *FinishLogisticFinanceOrderRequest {
	s.EndDivisionCode = &v
	return s
}

func (s *FinishLogisticFinanceOrderRequest) SetEndProvinceCode(v string) *FinishLogisticFinanceOrderRequest {
	s.EndProvinceCode = &v
	return s
}

func (s *FinishLogisticFinanceOrderRequest) SetEndProvinceName(v string) *FinishLogisticFinanceOrderRequest {
	s.EndProvinceName = &v
	return s
}

func (s *FinishLogisticFinanceOrderRequest) SetEndTime(v int64) *FinishLogisticFinanceOrderRequest {
	s.EndTime = &v
	return s
}

func (s *FinishLogisticFinanceOrderRequest) SetFreightIncr(v string) *FinishLogisticFinanceOrderRequest {
	s.FreightIncr = &v
	return s
}

func (s *FinishLogisticFinanceOrderRequest) SetGoodsAmount(v int64) *FinishLogisticFinanceOrderRequest {
	s.GoodsAmount = &v
	return s
}

func (s *FinishLogisticFinanceOrderRequest) SetGoodsAmountType(v string) *FinishLogisticFinanceOrderRequest {
	s.GoodsAmountType = &v
	return s
}

func (s *FinishLogisticFinanceOrderRequest) SetGoodsName(v string) *FinishLogisticFinanceOrderRequest {
	s.GoodsName = &v
	return s
}

func (s *FinishLogisticFinanceOrderRequest) SetIdCard(v string) *FinishLogisticFinanceOrderRequest {
	s.IdCard = &v
	return s
}

func (s *FinishLogisticFinanceOrderRequest) SetLossFee(v string) *FinishLogisticFinanceOrderRequest {
	s.LossFee = &v
	return s
}

func (s *FinishLogisticFinanceOrderRequest) SetMobileNo(v string) *FinishLogisticFinanceOrderRequest {
	s.MobileNo = &v
	return s
}

func (s *FinishLogisticFinanceOrderRequest) SetPartnerId(v string) *FinishLogisticFinanceOrderRequest {
	s.PartnerId = &v
	return s
}

func (s *FinishLogisticFinanceOrderRequest) SetPayCheck(v bool) *FinishLogisticFinanceOrderRequest {
	s.PayCheck = &v
	return s
}

func (s *FinishLogisticFinanceOrderRequest) SetPlatformDid(v string) *FinishLogisticFinanceOrderRequest {
	s.PlatformDid = &v
	return s
}

func (s *FinishLogisticFinanceOrderRequest) SetPrepayments(v string) *FinishLogisticFinanceOrderRequest {
	s.Prepayments = &v
	return s
}

func (s *FinishLogisticFinanceOrderRequest) SetPrepaymentsBuyEtc(v string) *FinishLogisticFinanceOrderRequest {
	s.PrepaymentsBuyEtc = &v
	return s
}

func (s *FinishLogisticFinanceOrderRequest) SetPrepaymentsBuyGas(v string) *FinishLogisticFinanceOrderRequest {
	s.PrepaymentsBuyGas = &v
	return s
}

func (s *FinishLogisticFinanceOrderRequest) SetPrepaymentsBuyOil(v string) *FinishLogisticFinanceOrderRequest {
	s.PrepaymentsBuyOil = &v
	return s
}

func (s *FinishLogisticFinanceOrderRequest) SetPrepaymentsEtccard(v string) *FinishLogisticFinanceOrderRequest {
	s.PrepaymentsEtccard = &v
	return s
}

func (s *FinishLogisticFinanceOrderRequest) SetPrepaymentsOilcard(v string) *FinishLogisticFinanceOrderRequest {
	s.PrepaymentsOilcard = &v
	return s
}

func (s *FinishLogisticFinanceOrderRequest) SetPresentAmountOil(v string) *FinishLogisticFinanceOrderRequest {
	s.PresentAmountOil = &v
	return s
}

func (s *FinishLogisticFinanceOrderRequest) SetStartCityCode(v string) *FinishLogisticFinanceOrderRequest {
	s.StartCityCode = &v
	return s
}

func (s *FinishLogisticFinanceOrderRequest) SetStartCityName(v string) *FinishLogisticFinanceOrderRequest {
	s.StartCityName = &v
	return s
}

func (s *FinishLogisticFinanceOrderRequest) SetStartCountyCode(v string) *FinishLogisticFinanceOrderRequest {
	s.StartCountyCode = &v
	return s
}

func (s *FinishLogisticFinanceOrderRequest) SetStartCountyName(v string) *FinishLogisticFinanceOrderRequest {
	s.StartCountyName = &v
	return s
}

func (s *FinishLogisticFinanceOrderRequest) SetStartDivisionCode(v string) *FinishLogisticFinanceOrderRequest {
	s.StartDivisionCode = &v
	return s
}

func (s *FinishLogisticFinanceOrderRequest) SetStartProvinceCode(v string) *FinishLogisticFinanceOrderRequest {
	s.StartProvinceCode = &v
	return s
}

func (s *FinishLogisticFinanceOrderRequest) SetStartProvinceName(v string) *FinishLogisticFinanceOrderRequest {
	s.StartProvinceName = &v
	return s
}

func (s *FinishLogisticFinanceOrderRequest) SetStartTime(v int64) *FinishLogisticFinanceOrderRequest {
	s.StartTime = &v
	return s
}

func (s *FinishLogisticFinanceOrderRequest) SetTaxWaybillId(v string) *FinishLogisticFinanceOrderRequest {
	s.TaxWaybillId = &v
	return s
}

func (s *FinishLogisticFinanceOrderRequest) SetUnitPrice(v string) *FinishLogisticFinanceOrderRequest {
	s.UnitPrice = &v
	return s
}

type FinishLogisticFinanceOrderResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 链上凭证
	TxCode *string `json:"tx_code,omitempty" xml:"tx_code,omitempty"`
}

func (s FinishLogisticFinanceOrderResponse) String() string {
	return tea.Prettify(s)
}

func (s FinishLogisticFinanceOrderResponse) GoString() string {
	return s.String()
}

func (s *FinishLogisticFinanceOrderResponse) SetReqMsgId(v string) *FinishLogisticFinanceOrderResponse {
	s.ReqMsgId = &v
	return s
}

func (s *FinishLogisticFinanceOrderResponse) SetResultCode(v string) *FinishLogisticFinanceOrderResponse {
	s.ResultCode = &v
	return s
}

func (s *FinishLogisticFinanceOrderResponse) SetResultMsg(v string) *FinishLogisticFinanceOrderResponse {
	s.ResultMsg = &v
	return s
}

func (s *FinishLogisticFinanceOrderResponse) SetTxCode(v string) *FinishLogisticFinanceOrderResponse {
	s.TxCode = &v
	return s
}

type CreateLogisticFinancePayorderRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 确认到账时间
	ArriveTime *int64 `json:"arrive_time,omitempty" xml:"arrive_time,omitempty" require:"true"`
	// 关联银行流水号
	BankSn *string `json:"bank_sn,omitempty" xml:"bank_sn,omitempty" require:"true"`
	// 付款金额
	PayAmount *string `json:"pay_amount,omitempty" xml:"pay_amount,omitempty" require:"true"`
	// 付款方银行账号
	PayBankCardNo *string `json:"pay_bank_card_no,omitempty" xml:"pay_bank_card_no,omitempty" require:"true"`
	// 付款方开户行
	PayBankName *string `json:"pay_bank_name,omitempty" xml:"pay_bank_name,omitempty" require:"true"`
	// 付款方did
	PayDid *string `json:"pay_did,omitempty" xml:"pay_did,omitempty"`
	// 付款方名称
	PayName *string `json:"pay_name,omitempty" xml:"pay_name,omitempty" require:"true"`
	// 付款时间戳
	PayTime *int64 `json:"pay_time,omitempty" xml:"pay_time,omitempty" require:"true"`
	// 支付类型
	PayTypeNew *string `json:"pay_type_new,omitempty" xml:"pay_type_new,omitempty" require:"true"`
	// 支付方式
	PayWay *string `json:"pay_way,omitempty" xml:"pay_way,omitempty" require:"true"`
	// 无车承运平台分布式数字身份，缺省为自己的分布式数字身份
	PlatformDid *string `json:"platform_did,omitempty" xml:"platform_did,omitempty"`
	// 支付订单ID
	PosInfoId *string `json:"pos_info_id,omitempty" xml:"pos_info_id,omitempty" require:"true"`
	// 实际付款方开户行
	RealPayBank *string `json:"real_pay_bank,omitempty" xml:"real_pay_bank,omitempty" require:"true"`
	// 实际付款方银行账号
	RealPayBankCardNo *string `json:"real_pay_bank_card_no,omitempty" xml:"real_pay_bank_card_no,omitempty" require:"true"`
	// 实际付款方名称
	RealPayName *string `json:"real_pay_name,omitempty" xml:"real_pay_name,omitempty" require:"true"`
	// 收款方银行账号
	RecvBankCardNo *string `json:"recv_bank_card_no,omitempty" xml:"recv_bank_card_no,omitempty" require:"true"`
	// 收款方开户行
	RecvBankName *string `json:"recv_bank_name,omitempty" xml:"recv_bank_name,omitempty" require:"true"`
	// 收款方did
	RecvDid *string `json:"recv_did,omitempty" xml:"recv_did,omitempty"`
	// 收款方名称
	RecvName *string `json:"recv_name,omitempty" xml:"recv_name,omitempty" require:"true"`
	// 关联的运单ID
	WaybillId *string `json:"waybill_id,omitempty" xml:"waybill_id,omitempty" require:"true"`
}

func (s CreateLogisticFinancePayorderRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateLogisticFinancePayorderRequest) GoString() string {
	return s.String()
}

func (s *CreateLogisticFinancePayorderRequest) SetAuthToken(v string) *CreateLogisticFinancePayorderRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateLogisticFinancePayorderRequest) SetProductInstanceId(v string) *CreateLogisticFinancePayorderRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateLogisticFinancePayorderRequest) SetArriveTime(v int64) *CreateLogisticFinancePayorderRequest {
	s.ArriveTime = &v
	return s
}

func (s *CreateLogisticFinancePayorderRequest) SetBankSn(v string) *CreateLogisticFinancePayorderRequest {
	s.BankSn = &v
	return s
}

func (s *CreateLogisticFinancePayorderRequest) SetPayAmount(v string) *CreateLogisticFinancePayorderRequest {
	s.PayAmount = &v
	return s
}

func (s *CreateLogisticFinancePayorderRequest) SetPayBankCardNo(v string) *CreateLogisticFinancePayorderRequest {
	s.PayBankCardNo = &v
	return s
}

func (s *CreateLogisticFinancePayorderRequest) SetPayBankName(v string) *CreateLogisticFinancePayorderRequest {
	s.PayBankName = &v
	return s
}

func (s *CreateLogisticFinancePayorderRequest) SetPayDid(v string) *CreateLogisticFinancePayorderRequest {
	s.PayDid = &v
	return s
}

func (s *CreateLogisticFinancePayorderRequest) SetPayName(v string) *CreateLogisticFinancePayorderRequest {
	s.PayName = &v
	return s
}

func (s *CreateLogisticFinancePayorderRequest) SetPayTime(v int64) *CreateLogisticFinancePayorderRequest {
	s.PayTime = &v
	return s
}

func (s *CreateLogisticFinancePayorderRequest) SetPayTypeNew(v string) *CreateLogisticFinancePayorderRequest {
	s.PayTypeNew = &v
	return s
}

func (s *CreateLogisticFinancePayorderRequest) SetPayWay(v string) *CreateLogisticFinancePayorderRequest {
	s.PayWay = &v
	return s
}

func (s *CreateLogisticFinancePayorderRequest) SetPlatformDid(v string) *CreateLogisticFinancePayorderRequest {
	s.PlatformDid = &v
	return s
}

func (s *CreateLogisticFinancePayorderRequest) SetPosInfoId(v string) *CreateLogisticFinancePayorderRequest {
	s.PosInfoId = &v
	return s
}

func (s *CreateLogisticFinancePayorderRequest) SetRealPayBank(v string) *CreateLogisticFinancePayorderRequest {
	s.RealPayBank = &v
	return s
}

func (s *CreateLogisticFinancePayorderRequest) SetRealPayBankCardNo(v string) *CreateLogisticFinancePayorderRequest {
	s.RealPayBankCardNo = &v
	return s
}

func (s *CreateLogisticFinancePayorderRequest) SetRealPayName(v string) *CreateLogisticFinancePayorderRequest {
	s.RealPayName = &v
	return s
}

func (s *CreateLogisticFinancePayorderRequest) SetRecvBankCardNo(v string) *CreateLogisticFinancePayorderRequest {
	s.RecvBankCardNo = &v
	return s
}

func (s *CreateLogisticFinancePayorderRequest) SetRecvBankName(v string) *CreateLogisticFinancePayorderRequest {
	s.RecvBankName = &v
	return s
}

func (s *CreateLogisticFinancePayorderRequest) SetRecvDid(v string) *CreateLogisticFinancePayorderRequest {
	s.RecvDid = &v
	return s
}

func (s *CreateLogisticFinancePayorderRequest) SetRecvName(v string) *CreateLogisticFinancePayorderRequest {
	s.RecvName = &v
	return s
}

func (s *CreateLogisticFinancePayorderRequest) SetWaybillId(v string) *CreateLogisticFinancePayorderRequest {
	s.WaybillId = &v
	return s
}

type CreateLogisticFinancePayorderResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 链上凭证
	TxCode *string `json:"tx_code,omitempty" xml:"tx_code,omitempty"`
}

func (s CreateLogisticFinancePayorderResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateLogisticFinancePayorderResponse) GoString() string {
	return s.String()
}

func (s *CreateLogisticFinancePayorderResponse) SetReqMsgId(v string) *CreateLogisticFinancePayorderResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateLogisticFinancePayorderResponse) SetResultCode(v string) *CreateLogisticFinancePayorderResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateLogisticFinancePayorderResponse) SetResultMsg(v string) *CreateLogisticFinancePayorderResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateLogisticFinancePayorderResponse) SetTxCode(v string) *CreateLogisticFinancePayorderResponse {
	s.TxCode = &v
	return s
}

type QueryLogisticFinanceOrderRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 无车承运平台分布式数字身份，缺省时为自己的分布式数字身份
	PlatformDid *string `json:"platform_did,omitempty" xml:"platform_did,omitempty"`
	// 运单ID
	TaxWaybillId *string `json:"tax_waybill_id,omitempty" xml:"tax_waybill_id,omitempty" require:"true"`
}

func (s QueryLogisticFinanceOrderRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryLogisticFinanceOrderRequest) GoString() string {
	return s.String()
}

func (s *QueryLogisticFinanceOrderRequest) SetAuthToken(v string) *QueryLogisticFinanceOrderRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryLogisticFinanceOrderRequest) SetProductInstanceId(v string) *QueryLogisticFinanceOrderRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryLogisticFinanceOrderRequest) SetPlatformDid(v string) *QueryLogisticFinanceOrderRequest {
	s.PlatformDid = &v
	return s
}

func (s *QueryLogisticFinanceOrderRequest) SetTaxWaybillId(v string) *QueryLogisticFinanceOrderRequest {
	s.TaxWaybillId = &v
	return s
}

type QueryLogisticFinanceOrderResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 运单状态
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
}

func (s QueryLogisticFinanceOrderResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryLogisticFinanceOrderResponse) GoString() string {
	return s.String()
}

func (s *QueryLogisticFinanceOrderResponse) SetReqMsgId(v string) *QueryLogisticFinanceOrderResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryLogisticFinanceOrderResponse) SetResultCode(v string) *QueryLogisticFinanceOrderResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryLogisticFinanceOrderResponse) SetResultMsg(v string) *QueryLogisticFinanceOrderResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryLogisticFinanceOrderResponse) SetStatus(v string) *QueryLogisticFinanceOrderResponse {
	s.Status = &v
	return s
}

type CreateLogisticFinanceBillorderRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 受票方名称
	Drawee *string `json:"drawee,omitempty" xml:"drawee,omitempty" require:"true"`
	// 受票方纳税人识别号
	DraweeTaxNo *string `json:"drawee_tax_no,omitempty" xml:"drawee_tax_no,omitempty" require:"true"`
	// 发票代码
	Lzfpdm *string `json:"lzfpdm,omitempty" xml:"lzfpdm,omitempty"`
	// 发票号码
	Lzfphm *string `json:"lzfphm,omitempty" xml:"lzfphm,omitempty"`
	// 开票时间戳
	OpenTime *int64 `json:"open_time,omitempty" xml:"open_time,omitempty" require:"true"`
	// 所属平台的分布式数字身份，缺省时为自己的分布式数字身份
	PlatformDid *string `json:"platform_did,omitempty" xml:"platform_did,omitempty"`
	// 关联的运单ID
	WaybillId *string `json:"waybill_id,omitempty" xml:"waybill_id,omitempty" require:"true"`
}

func (s CreateLogisticFinanceBillorderRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateLogisticFinanceBillorderRequest) GoString() string {
	return s.String()
}

func (s *CreateLogisticFinanceBillorderRequest) SetAuthToken(v string) *CreateLogisticFinanceBillorderRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateLogisticFinanceBillorderRequest) SetProductInstanceId(v string) *CreateLogisticFinanceBillorderRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateLogisticFinanceBillorderRequest) SetDrawee(v string) *CreateLogisticFinanceBillorderRequest {
	s.Drawee = &v
	return s
}

func (s *CreateLogisticFinanceBillorderRequest) SetDraweeTaxNo(v string) *CreateLogisticFinanceBillorderRequest {
	s.DraweeTaxNo = &v
	return s
}

func (s *CreateLogisticFinanceBillorderRequest) SetLzfpdm(v string) *CreateLogisticFinanceBillorderRequest {
	s.Lzfpdm = &v
	return s
}

func (s *CreateLogisticFinanceBillorderRequest) SetLzfphm(v string) *CreateLogisticFinanceBillorderRequest {
	s.Lzfphm = &v
	return s
}

func (s *CreateLogisticFinanceBillorderRequest) SetOpenTime(v int64) *CreateLogisticFinanceBillorderRequest {
	s.OpenTime = &v
	return s
}

func (s *CreateLogisticFinanceBillorderRequest) SetPlatformDid(v string) *CreateLogisticFinanceBillorderRequest {
	s.PlatformDid = &v
	return s
}

func (s *CreateLogisticFinanceBillorderRequest) SetWaybillId(v string) *CreateLogisticFinanceBillorderRequest {
	s.WaybillId = &v
	return s
}

type CreateLogisticFinanceBillorderResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 链上凭证
	TxCode *string `json:"tx_code,omitempty" xml:"tx_code,omitempty"`
}

func (s CreateLogisticFinanceBillorderResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateLogisticFinanceBillorderResponse) GoString() string {
	return s.String()
}

func (s *CreateLogisticFinanceBillorderResponse) SetReqMsgId(v string) *CreateLogisticFinanceBillorderResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateLogisticFinanceBillorderResponse) SetResultCode(v string) *CreateLogisticFinanceBillorderResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateLogisticFinanceBillorderResponse) SetResultMsg(v string) *CreateLogisticFinanceBillorderResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateLogisticFinanceBillorderResponse) SetTxCode(v string) *CreateLogisticFinanceBillorderResponse {
	s.TxCode = &v
	return s
}

type ImportLogisticFinanceLocationRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 描述信息
	Desc *string `json:"desc,omitempty" xml:"desc,omitempty"`
	// 运单轨迹信息
	Location []*LogisticLocation `json:"location,omitempty" xml:"location,omitempty" require:"true" type:"Repeated"`
	// 所属平台分布式数字身份，缺省时为自己的分布式数字身份
	PlatformDid *string `json:"platform_did,omitempty" xml:"platform_did,omitempty"`
	// 运单id
	TaxWaybillId *string `json:"tax_waybill_id,omitempty" xml:"tax_waybill_id,omitempty" require:"true"`
}

func (s ImportLogisticFinanceLocationRequest) String() string {
	return tea.Prettify(s)
}

func (s ImportLogisticFinanceLocationRequest) GoString() string {
	return s.String()
}

func (s *ImportLogisticFinanceLocationRequest) SetAuthToken(v string) *ImportLogisticFinanceLocationRequest {
	s.AuthToken = &v
	return s
}

func (s *ImportLogisticFinanceLocationRequest) SetProductInstanceId(v string) *ImportLogisticFinanceLocationRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ImportLogisticFinanceLocationRequest) SetDesc(v string) *ImportLogisticFinanceLocationRequest {
	s.Desc = &v
	return s
}

func (s *ImportLogisticFinanceLocationRequest) SetLocation(v []*LogisticLocation) *ImportLogisticFinanceLocationRequest {
	s.Location = v
	return s
}

func (s *ImportLogisticFinanceLocationRequest) SetPlatformDid(v string) *ImportLogisticFinanceLocationRequest {
	s.PlatformDid = &v
	return s
}

func (s *ImportLogisticFinanceLocationRequest) SetTaxWaybillId(v string) *ImportLogisticFinanceLocationRequest {
	s.TaxWaybillId = &v
	return s
}

type ImportLogisticFinanceLocationResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s ImportLogisticFinanceLocationResponse) String() string {
	return tea.Prettify(s)
}

func (s ImportLogisticFinanceLocationResponse) GoString() string {
	return s.String()
}

func (s *ImportLogisticFinanceLocationResponse) SetReqMsgId(v string) *ImportLogisticFinanceLocationResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ImportLogisticFinanceLocationResponse) SetResultCode(v string) *ImportLogisticFinanceLocationResponse {
	s.ResultCode = &v
	return s
}

func (s *ImportLogisticFinanceLocationResponse) SetResultMsg(v string) *ImportLogisticFinanceLocationResponse {
	s.ResultMsg = &v
	return s
}

type CreateLogisticFinanceConsignorRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 企业名称
	EpCertName *string `json:"ep_cert_name,omitempty" xml:"ep_cert_name,omitempty" require:"true"`
	// 企业证件号
	EpCertNo *string `json:"ep_cert_no,omitempty" xml:"ep_cert_no,omitempty" require:"true"`
	// 扩展字段
	ExtensionInfo *string `json:"extension_info,omitempty" xml:"extension_info,omitempty"`
	// 法人姓名
	LegalPersonCertName *string `json:"legal_person_cert_name,omitempty" xml:"legal_person_cert_name,omitempty" require:"true"`
	// 法人身份证
	LegalPersonCertNo *string `json:"legal_person_cert_no,omitempty" xml:"legal_person_cert_no,omitempty" require:"true"`
	// 所属无车平台DIS
	PlatformDid *string `json:"platform_did,omitempty" xml:"platform_did,omitempty" require:"true"`
}

func (s CreateLogisticFinanceConsignorRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateLogisticFinanceConsignorRequest) GoString() string {
	return s.String()
}

func (s *CreateLogisticFinanceConsignorRequest) SetAuthToken(v string) *CreateLogisticFinanceConsignorRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateLogisticFinanceConsignorRequest) SetProductInstanceId(v string) *CreateLogisticFinanceConsignorRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateLogisticFinanceConsignorRequest) SetEpCertName(v string) *CreateLogisticFinanceConsignorRequest {
	s.EpCertName = &v
	return s
}

func (s *CreateLogisticFinanceConsignorRequest) SetEpCertNo(v string) *CreateLogisticFinanceConsignorRequest {
	s.EpCertNo = &v
	return s
}

func (s *CreateLogisticFinanceConsignorRequest) SetExtensionInfo(v string) *CreateLogisticFinanceConsignorRequest {
	s.ExtensionInfo = &v
	return s
}

func (s *CreateLogisticFinanceConsignorRequest) SetLegalPersonCertName(v string) *CreateLogisticFinanceConsignorRequest {
	s.LegalPersonCertName = &v
	return s
}

func (s *CreateLogisticFinanceConsignorRequest) SetLegalPersonCertNo(v string) *CreateLogisticFinanceConsignorRequest {
	s.LegalPersonCertNo = &v
	return s
}

func (s *CreateLogisticFinanceConsignorRequest) SetPlatformDid(v string) *CreateLogisticFinanceConsignorRequest {
	s.PlatformDid = &v
	return s
}

type CreateLogisticFinanceConsignorResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 返回货主did信息
	Did *string `json:"did,omitempty" xml:"did,omitempty"`
}

func (s CreateLogisticFinanceConsignorResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateLogisticFinanceConsignorResponse) GoString() string {
	return s.String()
}

func (s *CreateLogisticFinanceConsignorResponse) SetReqMsgId(v string) *CreateLogisticFinanceConsignorResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateLogisticFinanceConsignorResponse) SetResultCode(v string) *CreateLogisticFinanceConsignorResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateLogisticFinanceConsignorResponse) SetResultMsg(v string) *CreateLogisticFinanceConsignorResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateLogisticFinanceConsignorResponse) SetDid(v string) *CreateLogisticFinanceConsignorResponse {
	s.Did = &v
	return s
}

type CreateLogisticFinancePlatformRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 企业名称
	EpCertName *string `json:"ep_cert_name,omitempty" xml:"ep_cert_name,omitempty" require:"true"`
	// 企业证件号
	EpCertNo *string `json:"ep_cert_no,omitempty" xml:"ep_cert_no,omitempty" require:"true"`
	// 扩展字段
	ExtensionInfo *string `json:"extension_info,omitempty" xml:"extension_info,omitempty"`
	// 法人姓名
	LegalPersonCertName *string `json:"legal_person_cert_name,omitempty" xml:"legal_person_cert_name,omitempty" require:"true"`
	// 法人身份证
	LegalPersonCertNo *string `json:"legal_person_cert_no,omitempty" xml:"legal_person_cert_no,omitempty" require:"true"`
}

func (s CreateLogisticFinancePlatformRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateLogisticFinancePlatformRequest) GoString() string {
	return s.String()
}

func (s *CreateLogisticFinancePlatformRequest) SetAuthToken(v string) *CreateLogisticFinancePlatformRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateLogisticFinancePlatformRequest) SetProductInstanceId(v string) *CreateLogisticFinancePlatformRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateLogisticFinancePlatformRequest) SetEpCertName(v string) *CreateLogisticFinancePlatformRequest {
	s.EpCertName = &v
	return s
}

func (s *CreateLogisticFinancePlatformRequest) SetEpCertNo(v string) *CreateLogisticFinancePlatformRequest {
	s.EpCertNo = &v
	return s
}

func (s *CreateLogisticFinancePlatformRequest) SetExtensionInfo(v string) *CreateLogisticFinancePlatformRequest {
	s.ExtensionInfo = &v
	return s
}

func (s *CreateLogisticFinancePlatformRequest) SetLegalPersonCertName(v string) *CreateLogisticFinancePlatformRequest {
	s.LegalPersonCertName = &v
	return s
}

func (s *CreateLogisticFinancePlatformRequest) SetLegalPersonCertNo(v string) *CreateLogisticFinancePlatformRequest {
	s.LegalPersonCertNo = &v
	return s
}

type CreateLogisticFinancePlatformResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 返回无车承运平台DIS
	Did *string `json:"did,omitempty" xml:"did,omitempty"`
}

func (s CreateLogisticFinancePlatformResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateLogisticFinancePlatformResponse) GoString() string {
	return s.String()
}

func (s *CreateLogisticFinancePlatformResponse) SetReqMsgId(v string) *CreateLogisticFinancePlatformResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateLogisticFinancePlatformResponse) SetResultCode(v string) *CreateLogisticFinancePlatformResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateLogisticFinancePlatformResponse) SetResultMsg(v string) *CreateLogisticFinancePlatformResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateLogisticFinancePlatformResponse) SetDid(v string) *CreateLogisticFinancePlatformResponse {
	s.Did = &v
	return s
}

type CreateLogistFinanceAgentplatformRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 代理创建者did
	AgentDid *string `json:"agent_did,omitempty" xml:"agent_did,omitempty" require:"true"`
	// 企业名称
	EpCertName *string `json:"ep_cert_name,omitempty" xml:"ep_cert_name,omitempty" require:"true"`
	// 企业证件号
	EpCertNo *string `json:"ep_cert_no,omitempty" xml:"ep_cert_no,omitempty" require:"true"`
	// 扩展字段
	ExtensionInfo *string `json:"extension_info,omitempty" xml:"extension_info,omitempty"`
	// 法人姓名
	LegalPersonCertName *string `json:"legal_person_cert_name,omitempty" xml:"legal_person_cert_name,omitempty" require:"true"`
	// 法人身份证号
	LegalPersonCertNo *string `json:"legal_person_cert_no,omitempty" xml:"legal_person_cert_no,omitempty" require:"true"`
}

func (s CreateLogistFinanceAgentplatformRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateLogistFinanceAgentplatformRequest) GoString() string {
	return s.String()
}

func (s *CreateLogistFinanceAgentplatformRequest) SetAuthToken(v string) *CreateLogistFinanceAgentplatformRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateLogistFinanceAgentplatformRequest) SetProductInstanceId(v string) *CreateLogistFinanceAgentplatformRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateLogistFinanceAgentplatformRequest) SetAgentDid(v string) *CreateLogistFinanceAgentplatformRequest {
	s.AgentDid = &v
	return s
}

func (s *CreateLogistFinanceAgentplatformRequest) SetEpCertName(v string) *CreateLogistFinanceAgentplatformRequest {
	s.EpCertName = &v
	return s
}

func (s *CreateLogistFinanceAgentplatformRequest) SetEpCertNo(v string) *CreateLogistFinanceAgentplatformRequest {
	s.EpCertNo = &v
	return s
}

func (s *CreateLogistFinanceAgentplatformRequest) SetExtensionInfo(v string) *CreateLogistFinanceAgentplatformRequest {
	s.ExtensionInfo = &v
	return s
}

func (s *CreateLogistFinanceAgentplatformRequest) SetLegalPersonCertName(v string) *CreateLogistFinanceAgentplatformRequest {
	s.LegalPersonCertName = &v
	return s
}

func (s *CreateLogistFinanceAgentplatformRequest) SetLegalPersonCertNo(v string) *CreateLogistFinanceAgentplatformRequest {
	s.LegalPersonCertNo = &v
	return s
}

type CreateLogistFinanceAgentplatformResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 返回无车承运平台did
	Did *string `json:"did,omitempty" xml:"did,omitempty"`
}

func (s CreateLogistFinanceAgentplatformResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateLogistFinanceAgentplatformResponse) GoString() string {
	return s.String()
}

func (s *CreateLogistFinanceAgentplatformResponse) SetReqMsgId(v string) *CreateLogistFinanceAgentplatformResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateLogistFinanceAgentplatformResponse) SetResultCode(v string) *CreateLogistFinanceAgentplatformResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateLogistFinanceAgentplatformResponse) SetResultMsg(v string) *CreateLogistFinanceAgentplatformResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateLogistFinanceAgentplatformResponse) SetDid(v string) *CreateLogistFinanceAgentplatformResponse {
	s.Did = &v
	return s
}

type CreateLogisticFinanceDriverRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 身份证号码
	CertNo *string `json:"cert_no,omitempty" xml:"cert_no,omitempty" require:"true"`
	// 扩展字段
	ExtensionInfo *string `json:"extension_info,omitempty" xml:"extension_info,omitempty"`
	// 手机号码
	Mobile *string `json:"mobile,omitempty" xml:"mobile,omitempty" require:"true"`
	// 姓名
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 所属平台did
	PlatformDid *string `json:"platform_did,omitempty" xml:"platform_did,omitempty" require:"true"`
}

func (s CreateLogisticFinanceDriverRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateLogisticFinanceDriverRequest) GoString() string {
	return s.String()
}

func (s *CreateLogisticFinanceDriverRequest) SetAuthToken(v string) *CreateLogisticFinanceDriverRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateLogisticFinanceDriverRequest) SetProductInstanceId(v string) *CreateLogisticFinanceDriverRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateLogisticFinanceDriverRequest) SetCertNo(v string) *CreateLogisticFinanceDriverRequest {
	s.CertNo = &v
	return s
}

func (s *CreateLogisticFinanceDriverRequest) SetExtensionInfo(v string) *CreateLogisticFinanceDriverRequest {
	s.ExtensionInfo = &v
	return s
}

func (s *CreateLogisticFinanceDriverRequest) SetMobile(v string) *CreateLogisticFinanceDriverRequest {
	s.Mobile = &v
	return s
}

func (s *CreateLogisticFinanceDriverRequest) SetName(v string) *CreateLogisticFinanceDriverRequest {
	s.Name = &v
	return s
}

func (s *CreateLogisticFinanceDriverRequest) SetPlatformDid(v string) *CreateLogisticFinanceDriverRequest {
	s.PlatformDid = &v
	return s
}

type CreateLogisticFinanceDriverResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 返回司机did
	Did *string `json:"did,omitempty" xml:"did,omitempty"`
}

func (s CreateLogisticFinanceDriverResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateLogisticFinanceDriverResponse) GoString() string {
	return s.String()
}

func (s *CreateLogisticFinanceDriverResponse) SetReqMsgId(v string) *CreateLogisticFinanceDriverResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateLogisticFinanceDriverResponse) SetResultCode(v string) *CreateLogisticFinanceDriverResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateLogisticFinanceDriverResponse) SetResultMsg(v string) *CreateLogisticFinanceDriverResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateLogisticFinanceDriverResponse) SetDid(v string) *CreateLogisticFinanceDriverResponse {
	s.Did = &v
	return s
}

type CreateLogisticFinanceCargoorderRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 运费
	AllFreight *string `json:"all_freight,omitempty" xml:"all_freight,omitempty" require:"true"`
	// 货物名称
	CargoName *string `json:"cargo_name,omitempty" xml:"cargo_name,omitempty" require:"true"`
	// 货源单号
	CargoOrder *string `json:"cargo_order,omitempty" xml:"cargo_order,omitempty" require:"true"`
	// 货物类型
	CargoType *string `json:"cargo_type,omitempty" xml:"cargo_type,omitempty" require:"true"`
	// 货主did
	ConsignorDid *string `json:"consignor_did,omitempty" xml:"consignor_did,omitempty" require:"true"`
	// 卸货地
	DeliveryPlace *string `json:"delivery_place,omitempty" xml:"delivery_place,omitempty" require:"true"`
	// 装货地
	LoadingPlace *string `json:"loading_place,omitempty" xml:"loading_place,omitempty" require:"true"`
	// 平台did
	PlatformDid *string `json:"platform_did,omitempty" xml:"platform_did,omitempty" require:"true"`
	// 联系人电话
	UserPhone *string `json:"user_phone,omitempty" xml:"user_phone,omitempty"`
	// 重量
	Weight *string `json:"weight,omitempty" xml:"weight,omitempty" require:"true"`
}

func (s CreateLogisticFinanceCargoorderRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateLogisticFinanceCargoorderRequest) GoString() string {
	return s.String()
}

func (s *CreateLogisticFinanceCargoorderRequest) SetAuthToken(v string) *CreateLogisticFinanceCargoorderRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateLogisticFinanceCargoorderRequest) SetProductInstanceId(v string) *CreateLogisticFinanceCargoorderRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateLogisticFinanceCargoorderRequest) SetAllFreight(v string) *CreateLogisticFinanceCargoorderRequest {
	s.AllFreight = &v
	return s
}

func (s *CreateLogisticFinanceCargoorderRequest) SetCargoName(v string) *CreateLogisticFinanceCargoorderRequest {
	s.CargoName = &v
	return s
}

func (s *CreateLogisticFinanceCargoorderRequest) SetCargoOrder(v string) *CreateLogisticFinanceCargoorderRequest {
	s.CargoOrder = &v
	return s
}

func (s *CreateLogisticFinanceCargoorderRequest) SetCargoType(v string) *CreateLogisticFinanceCargoorderRequest {
	s.CargoType = &v
	return s
}

func (s *CreateLogisticFinanceCargoorderRequest) SetConsignorDid(v string) *CreateLogisticFinanceCargoorderRequest {
	s.ConsignorDid = &v
	return s
}

func (s *CreateLogisticFinanceCargoorderRequest) SetDeliveryPlace(v string) *CreateLogisticFinanceCargoorderRequest {
	s.DeliveryPlace = &v
	return s
}

func (s *CreateLogisticFinanceCargoorderRequest) SetLoadingPlace(v string) *CreateLogisticFinanceCargoorderRequest {
	s.LoadingPlace = &v
	return s
}

func (s *CreateLogisticFinanceCargoorderRequest) SetPlatformDid(v string) *CreateLogisticFinanceCargoorderRequest {
	s.PlatformDid = &v
	return s
}

func (s *CreateLogisticFinanceCargoorderRequest) SetUserPhone(v string) *CreateLogisticFinanceCargoorderRequest {
	s.UserPhone = &v
	return s
}

func (s *CreateLogisticFinanceCargoorderRequest) SetWeight(v string) *CreateLogisticFinanceCargoorderRequest {
	s.Weight = &v
	return s
}

type CreateLogisticFinanceCargoorderResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 货源链上凭证
	TxCode *string `json:"tx_code,omitempty" xml:"tx_code,omitempty"`
}

func (s CreateLogisticFinanceCargoorderResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateLogisticFinanceCargoorderResponse) GoString() string {
	return s.String()
}

func (s *CreateLogisticFinanceCargoorderResponse) SetReqMsgId(v string) *CreateLogisticFinanceCargoorderResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateLogisticFinanceCargoorderResponse) SetResultCode(v string) *CreateLogisticFinanceCargoorderResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateLogisticFinanceCargoorderResponse) SetResultMsg(v string) *CreateLogisticFinanceCargoorderResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateLogisticFinanceCargoorderResponse) SetTxCode(v string) *CreateLogisticFinanceCargoorderResponse {
	s.TxCode = &v
	return s
}

type CreateLogisticFinanceCargopayorderRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 银行流水号
	BankNo *string `json:"bank_no,omitempty" xml:"bank_no,omitempty" require:"true"`
	// 货源单号
	CargoOrder *string `json:"cargo_order,omitempty" xml:"cargo_order,omitempty" require:"true"`
	// 费用类型   (运费、调度费、服务费)
	ExpenseType *string `json:"expense_type,omitempty" xml:"expense_type,omitempty" require:"true"`
	// 支付金额
	Payment *string `json:"payment,omitempty" xml:"payment,omitempty" require:"true"`
	// 付款方did
	PayDid *string `json:"pay_did,omitempty" xml:"pay_did,omitempty" require:"true"`
	// 平台支付单号
	PayId *string `json:"pay_id,omitempty" xml:"pay_id,omitempty" require:"true"`
	// 支付备注
	PayNote *string `json:"pay_note,omitempty" xml:"pay_note,omitempty"`
	// 收款方did
	RecvDid *string `json:"recv_did,omitempty" xml:"recv_did,omitempty" require:"true"`
}

func (s CreateLogisticFinanceCargopayorderRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateLogisticFinanceCargopayorderRequest) GoString() string {
	return s.String()
}

func (s *CreateLogisticFinanceCargopayorderRequest) SetAuthToken(v string) *CreateLogisticFinanceCargopayorderRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateLogisticFinanceCargopayorderRequest) SetProductInstanceId(v string) *CreateLogisticFinanceCargopayorderRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateLogisticFinanceCargopayorderRequest) SetBankNo(v string) *CreateLogisticFinanceCargopayorderRequest {
	s.BankNo = &v
	return s
}

func (s *CreateLogisticFinanceCargopayorderRequest) SetCargoOrder(v string) *CreateLogisticFinanceCargopayorderRequest {
	s.CargoOrder = &v
	return s
}

func (s *CreateLogisticFinanceCargopayorderRequest) SetExpenseType(v string) *CreateLogisticFinanceCargopayorderRequest {
	s.ExpenseType = &v
	return s
}

func (s *CreateLogisticFinanceCargopayorderRequest) SetPayment(v string) *CreateLogisticFinanceCargopayorderRequest {
	s.Payment = &v
	return s
}

func (s *CreateLogisticFinanceCargopayorderRequest) SetPayDid(v string) *CreateLogisticFinanceCargopayorderRequest {
	s.PayDid = &v
	return s
}

func (s *CreateLogisticFinanceCargopayorderRequest) SetPayId(v string) *CreateLogisticFinanceCargopayorderRequest {
	s.PayId = &v
	return s
}

func (s *CreateLogisticFinanceCargopayorderRequest) SetPayNote(v string) *CreateLogisticFinanceCargopayorderRequest {
	s.PayNote = &v
	return s
}

func (s *CreateLogisticFinanceCargopayorderRequest) SetRecvDid(v string) *CreateLogisticFinanceCargopayorderRequest {
	s.RecvDid = &v
	return s
}

type CreateLogisticFinanceCargopayorderResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 货源支付链上凭证
	TxCode *string `json:"tx_code,omitempty" xml:"tx_code,omitempty"`
}

func (s CreateLogisticFinanceCargopayorderResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateLogisticFinanceCargopayorderResponse) GoString() string {
	return s.String()
}

func (s *CreateLogisticFinanceCargopayorderResponse) SetReqMsgId(v string) *CreateLogisticFinanceCargopayorderResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateLogisticFinanceCargopayorderResponse) SetResultCode(v string) *CreateLogisticFinanceCargopayorderResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateLogisticFinanceCargopayorderResponse) SetResultMsg(v string) *CreateLogisticFinanceCargopayorderResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateLogisticFinanceCargopayorderResponse) SetTxCode(v string) *CreateLogisticFinanceCargopayorderResponse {
	s.TxCode = &v
	return s
}

type CreateOcpProductRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 联盟Id
	BaasAlliance *string `json:"baas_alliance,omitempty" xml:"baas_alliance,omitempty" require:"true"`
	// 意义：链扩容字段，表示在默认空间大小基础上，新增空间大小，单位为G，默认值为0。
	// 仅链版本为企业版（enterpriseVer）时，才发挥作用。
	BaasCapacity *string `json:"baas_capacity,omitempty" xml:"baas_capacity,omitempty"`
	// 区块链的名称
	BaasName *string `json:"baas_name,omitempty" xml:"baas_name,omitempty" require:"true"`
	// 意义：链新增节点数，表示在默认4个节点基础上，新增节点数，单位为个，默认值为0。
	//  仅链版本为企业版（enterpriseVer）时，才发挥作用。
	BaasNode *string `json:"baas_node,omitempty" xml:"baas_node,omitempty"`
	// 意义：Tee链标志，表示创建Tee区块链，默认值为false。
	// 注意：仅链版本为企业版（enterpriseVer）时，才发挥作用。
	BaasTee *bool `json:"baas_tee,omitempty" xml:"baas_tee,omitempty"`
	// 基础版（basicVer）、企业版（enterpriseVer）
	BaasVer *string `json:"baas_ver,omitempty" xml:"baas_ver,omitempty" require:"true"`
	// 业务组详细码
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty" require:"true"`
	// 业务组详细类型
	BizType *string `json:"biz_type,omitempty" xml:"biz_type,omitempty" require:"true"`
	// 业务组码
	GroupCode *string `json:"group_code,omitempty" xml:"group_code,omitempty" require:"true"`
	// 产品码 全局唯一
	ProductCode *string `json:"product_code,omitempty" xml:"product_code,omitempty" require:"true"`
}

func (s CreateOcpProductRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateOcpProductRequest) GoString() string {
	return s.String()
}

func (s *CreateOcpProductRequest) SetAuthToken(v string) *CreateOcpProductRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateOcpProductRequest) SetProductInstanceId(v string) *CreateOcpProductRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateOcpProductRequest) SetBaasAlliance(v string) *CreateOcpProductRequest {
	s.BaasAlliance = &v
	return s
}

func (s *CreateOcpProductRequest) SetBaasCapacity(v string) *CreateOcpProductRequest {
	s.BaasCapacity = &v
	return s
}

func (s *CreateOcpProductRequest) SetBaasName(v string) *CreateOcpProductRequest {
	s.BaasName = &v
	return s
}

func (s *CreateOcpProductRequest) SetBaasNode(v string) *CreateOcpProductRequest {
	s.BaasNode = &v
	return s
}

func (s *CreateOcpProductRequest) SetBaasTee(v bool) *CreateOcpProductRequest {
	s.BaasTee = &v
	return s
}

func (s *CreateOcpProductRequest) SetBaasVer(v string) *CreateOcpProductRequest {
	s.BaasVer = &v
	return s
}

func (s *CreateOcpProductRequest) SetBizCode(v string) *CreateOcpProductRequest {
	s.BizCode = &v
	return s
}

func (s *CreateOcpProductRequest) SetBizType(v string) *CreateOcpProductRequest {
	s.BizType = &v
	return s
}

func (s *CreateOcpProductRequest) SetGroupCode(v string) *CreateOcpProductRequest {
	s.GroupCode = &v
	return s
}

func (s *CreateOcpProductRequest) SetProductCode(v string) *CreateOcpProductRequest {
	s.ProductCode = &v
	return s
}

type CreateOcpProductResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s CreateOcpProductResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateOcpProductResponse) GoString() string {
	return s.String()
}

func (s *CreateOcpProductResponse) SetReqMsgId(v string) *CreateOcpProductResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateOcpProductResponse) SetResultCode(v string) *CreateOcpProductResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateOcpProductResponse) SetResultMsg(v string) *CreateOcpProductResponse {
	s.ResultMsg = &v
	return s
}

type UpdateOcpProductRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 产品实例Id
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 产品码 全局唯一
	ProductCode *string `json:"product_code,omitempty" xml:"product_code,omitempty" require:"true"`
	// 增量规格信息（JSON格式）会按照key进行排序
	Specification *string `json:"specification,omitempty" xml:"specification,omitempty" require:"true"`
}

func (s UpdateOcpProductRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateOcpProductRequest) GoString() string {
	return s.String()
}

func (s *UpdateOcpProductRequest) SetAuthToken(v string) *UpdateOcpProductRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateOcpProductRequest) SetProductInstanceId(v string) *UpdateOcpProductRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UpdateOcpProductRequest) SetInstanceId(v string) *UpdateOcpProductRequest {
	s.InstanceId = &v
	return s
}

func (s *UpdateOcpProductRequest) SetProductCode(v string) *UpdateOcpProductRequest {
	s.ProductCode = &v
	return s
}

func (s *UpdateOcpProductRequest) SetSpecification(v string) *UpdateOcpProductRequest {
	s.Specification = &v
	return s
}

type UpdateOcpProductResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 签名结果
	Sign *string `json:"sign,omitempty" xml:"sign,omitempty"`
}

func (s UpdateOcpProductResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateOcpProductResponse) GoString() string {
	return s.String()
}

func (s *UpdateOcpProductResponse) SetReqMsgId(v string) *UpdateOcpProductResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateOcpProductResponse) SetResultCode(v string) *UpdateOcpProductResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateOcpProductResponse) SetResultMsg(v string) *UpdateOcpProductResponse {
	s.ResultMsg = &v
	return s
}

func (s *UpdateOcpProductResponse) SetSign(v string) *UpdateOcpProductResponse {
	s.Sign = &v
	return s
}

type CloseOcpProductRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 产品实例Id列
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 产品码 全局唯一
	ProductCode *string `json:"product_code,omitempty" xml:"product_code,omitempty" require:"true"`
}

func (s CloseOcpProductRequest) String() string {
	return tea.Prettify(s)
}

func (s CloseOcpProductRequest) GoString() string {
	return s.String()
}

func (s *CloseOcpProductRequest) SetAuthToken(v string) *CloseOcpProductRequest {
	s.AuthToken = &v
	return s
}

func (s *CloseOcpProductRequest) SetProductInstanceId(v string) *CloseOcpProductRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CloseOcpProductRequest) SetInstanceId(v string) *CloseOcpProductRequest {
	s.InstanceId = &v
	return s
}

func (s *CloseOcpProductRequest) SetProductCode(v string) *CloseOcpProductRequest {
	s.ProductCode = &v
	return s
}

type CloseOcpProductResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s CloseOcpProductResponse) String() string {
	return tea.Prettify(s)
}

func (s CloseOcpProductResponse) GoString() string {
	return s.String()
}

func (s *CloseOcpProductResponse) SetReqMsgId(v string) *CloseOcpProductResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CloseOcpProductResponse) SetResultCode(v string) *CloseOcpProductResponse {
	s.ResultCode = &v
	return s
}

func (s *CloseOcpProductResponse) SetResultMsg(v string) *CloseOcpProductResponse {
	s.ResultMsg = &v
	return s
}

type EnableOcpProductRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 产品实例Id
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 产品码 全局唯一
	ProductCode *string `json:"product_code,omitempty" xml:"product_code,omitempty" require:"true"`
}

func (s EnableOcpProductRequest) String() string {
	return tea.Prettify(s)
}

func (s EnableOcpProductRequest) GoString() string {
	return s.String()
}

func (s *EnableOcpProductRequest) SetAuthToken(v string) *EnableOcpProductRequest {
	s.AuthToken = &v
	return s
}

func (s *EnableOcpProductRequest) SetProductInstanceId(v string) *EnableOcpProductRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *EnableOcpProductRequest) SetInstanceId(v string) *EnableOcpProductRequest {
	s.InstanceId = &v
	return s
}

func (s *EnableOcpProductRequest) SetProductCode(v string) *EnableOcpProductRequest {
	s.ProductCode = &v
	return s
}

type EnableOcpProductResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 签名结果
	Sign *string `json:"sign,omitempty" xml:"sign,omitempty"`
}

func (s EnableOcpProductResponse) String() string {
	return tea.Prettify(s)
}

func (s EnableOcpProductResponse) GoString() string {
	return s.String()
}

func (s *EnableOcpProductResponse) SetReqMsgId(v string) *EnableOcpProductResponse {
	s.ReqMsgId = &v
	return s
}

func (s *EnableOcpProductResponse) SetResultCode(v string) *EnableOcpProductResponse {
	s.ResultCode = &v
	return s
}

func (s *EnableOcpProductResponse) SetResultMsg(v string) *EnableOcpProductResponse {
	s.ResultMsg = &v
	return s
}

func (s *EnableOcpProductResponse) SetSign(v string) *EnableOcpProductResponse {
	s.Sign = &v
	return s
}

type StopOcpProductRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 产品实例Id
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 产品码 全局唯一
	ProductCode *string `json:"product_code,omitempty" xml:"product_code,omitempty" require:"true"`
}

func (s StopOcpProductRequest) String() string {
	return tea.Prettify(s)
}

func (s StopOcpProductRequest) GoString() string {
	return s.String()
}

func (s *StopOcpProductRequest) SetAuthToken(v string) *StopOcpProductRequest {
	s.AuthToken = &v
	return s
}

func (s *StopOcpProductRequest) SetProductInstanceId(v string) *StopOcpProductRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *StopOcpProductRequest) SetInstanceId(v string) *StopOcpProductRequest {
	s.InstanceId = &v
	return s
}

func (s *StopOcpProductRequest) SetProductCode(v string) *StopOcpProductRequest {
	s.ProductCode = &v
	return s
}

type StopOcpProductResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 签名结果
	Sign *string `json:"sign,omitempty" xml:"sign,omitempty"`
}

func (s StopOcpProductResponse) String() string {
	return tea.Prettify(s)
}

func (s StopOcpProductResponse) GoString() string {
	return s.String()
}

func (s *StopOcpProductResponse) SetReqMsgId(v string) *StopOcpProductResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StopOcpProductResponse) SetResultCode(v string) *StopOcpProductResponse {
	s.ResultCode = &v
	return s
}

func (s *StopOcpProductResponse) SetResultMsg(v string) *StopOcpProductResponse {
	s.ResultMsg = &v
	return s
}

func (s *StopOcpProductResponse) SetSign(v string) *StopOcpProductResponse {
	s.Sign = &v
	return s
}

type InitOcpProductRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 加载业务的场景
	BusinessAction *string `json:"business_action,omitempty" xml:"business_action,omitempty" require:"true"`
	// 用于加载对应场景数据的上下文（JSON格式具体同产品方定义）
	BusinessContext *string `json:"business_context,omitempty" xml:"business_context,omitempty" require:"true"`
	// 流水号用于业务串联，以及幂等
	OrderNo *string `json:"order_no,omitempty" xml:"order_no,omitempty"`
	// 产品码 全局唯一
	ProductCode *string `json:"product_code,omitempty" xml:"product_code,omitempty" require:"true"`
	// 区域
	Region *string `json:"region,omitempty" xml:"region,omitempty"`
}

func (s InitOcpProductRequest) String() string {
	return tea.Prettify(s)
}

func (s InitOcpProductRequest) GoString() string {
	return s.String()
}

func (s *InitOcpProductRequest) SetAuthToken(v string) *InitOcpProductRequest {
	s.AuthToken = &v
	return s
}

func (s *InitOcpProductRequest) SetProductInstanceId(v string) *InitOcpProductRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *InitOcpProductRequest) SetBusinessAction(v string) *InitOcpProductRequest {
	s.BusinessAction = &v
	return s
}

func (s *InitOcpProductRequest) SetBusinessContext(v string) *InitOcpProductRequest {
	s.BusinessContext = &v
	return s
}

func (s *InitOcpProductRequest) SetOrderNo(v string) *InitOcpProductRequest {
	s.OrderNo = &v
	return s
}

func (s *InitOcpProductRequest) SetProductCode(v string) *InitOcpProductRequest {
	s.ProductCode = &v
	return s
}

func (s *InitOcpProductRequest) SetRegion(v string) *InitOcpProductRequest {
	s.Region = &v
	return s
}

type InitOcpProductResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 组合内容
	DiscreteValues []*DiscreteValue `json:"discrete_values,omitempty" xml:"discrete_values,omitempty" type:"Repeated"`
	// 签名结果
	Sign *string `json:"sign,omitempty" xml:"sign,omitempty"`
}

func (s InitOcpProductResponse) String() string {
	return tea.Prettify(s)
}

func (s InitOcpProductResponse) GoString() string {
	return s.String()
}

func (s *InitOcpProductResponse) SetReqMsgId(v string) *InitOcpProductResponse {
	s.ReqMsgId = &v
	return s
}

func (s *InitOcpProductResponse) SetResultCode(v string) *InitOcpProductResponse {
	s.ResultCode = &v
	return s
}

func (s *InitOcpProductResponse) SetResultMsg(v string) *InitOcpProductResponse {
	s.ResultMsg = &v
	return s
}

func (s *InitOcpProductResponse) SetDiscreteValues(v []*DiscreteValue) *InitOcpProductResponse {
	s.DiscreteValues = v
	return s
}

func (s *InitOcpProductResponse) SetSign(v string) *InitOcpProductResponse {
	s.Sign = &v
	return s
}

type QueryOcpProductRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 实例id
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 产品码
	ProductCode *string `json:"product_code,omitempty" xml:"product_code,omitempty" require:"true"`
	// 租户id
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty" require:"true"`
}

func (s QueryOcpProductRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryOcpProductRequest) GoString() string {
	return s.String()
}

func (s *QueryOcpProductRequest) SetAuthToken(v string) *QueryOcpProductRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryOcpProductRequest) SetProductInstanceId(v string) *QueryOcpProductRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryOcpProductRequest) SetInstanceId(v string) *QueryOcpProductRequest {
	s.InstanceId = &v
	return s
}

func (s *QueryOcpProductRequest) SetProductCode(v string) *QueryOcpProductRequest {
	s.ProductCode = &v
	return s
}

func (s *QueryOcpProductRequest) SetTenantId(v string) *QueryOcpProductRequest {
	s.TenantId = &v
	return s
}

type QueryOcpProductResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 状态描述：未开通（UN_OPEN）、初始化（INIT）、开通（OPEN）、释放\关闭（CLOSE）、未知（UNKNOWN）、暂停（STOP）。
	Info *string `json:"info,omitempty" xml:"info,omitempty"`
}

func (s QueryOcpProductResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryOcpProductResponse) GoString() string {
	return s.String()
}

func (s *QueryOcpProductResponse) SetReqMsgId(v string) *QueryOcpProductResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryOcpProductResponse) SetResultCode(v string) *QueryOcpProductResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryOcpProductResponse) SetResultMsg(v string) *QueryOcpProductResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryOcpProductResponse) SetInfo(v string) *QueryOcpProductResponse {
	s.Info = &v
	return s
}

type OpenOcpProductRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 实例id
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 产品码
	ProductCode *string `json:"product_code,omitempty" xml:"product_code,omitempty" require:"true"`
}

func (s OpenOcpProductRequest) String() string {
	return tea.Prettify(s)
}

func (s OpenOcpProductRequest) GoString() string {
	return s.String()
}

func (s *OpenOcpProductRequest) SetAuthToken(v string) *OpenOcpProductRequest {
	s.AuthToken = &v
	return s
}

func (s *OpenOcpProductRequest) SetProductInstanceId(v string) *OpenOcpProductRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *OpenOcpProductRequest) SetInstanceId(v string) *OpenOcpProductRequest {
	s.InstanceId = &v
	return s
}

func (s *OpenOcpProductRequest) SetProductCode(v string) *OpenOcpProductRequest {
	s.ProductCode = &v
	return s
}

type OpenOcpProductResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s OpenOcpProductResponse) String() string {
	return tea.Prettify(s)
}

func (s OpenOcpProductResponse) GoString() string {
	return s.String()
}

func (s *OpenOcpProductResponse) SetReqMsgId(v string) *OpenOcpProductResponse {
	s.ReqMsgId = &v
	return s
}

func (s *OpenOcpProductResponse) SetResultCode(v string) *OpenOcpProductResponse {
	s.ResultCode = &v
	return s
}

func (s *OpenOcpProductResponse) SetResultMsg(v string) *OpenOcpProductResponse {
	s.ResultMsg = &v
	return s
}

type CreateOcpProductsRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 实例id
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 产品码
	ProductCode *string `json:"product_code,omitempty" xml:"product_code,omitempty" require:"true"`
	// 产品规格
	Specification *string `json:"specification,omitempty" xml:"specification,omitempty" require:"true"`
}

func (s CreateOcpProductsRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateOcpProductsRequest) GoString() string {
	return s.String()
}

func (s *CreateOcpProductsRequest) SetAuthToken(v string) *CreateOcpProductsRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateOcpProductsRequest) SetProductInstanceId(v string) *CreateOcpProductsRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateOcpProductsRequest) SetInstanceId(v string) *CreateOcpProductsRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateOcpProductsRequest) SetProductCode(v string) *CreateOcpProductsRequest {
	s.ProductCode = &v
	return s
}

func (s *CreateOcpProductsRequest) SetSpecification(v string) *CreateOcpProductsRequest {
	s.Specification = &v
	return s
}

type CreateOcpProductsResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s CreateOcpProductsResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateOcpProductsResponse) GoString() string {
	return s.String()
}

func (s *CreateOcpProductsResponse) SetReqMsgId(v string) *CreateOcpProductsResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateOcpProductsResponse) SetResultCode(v string) *CreateOcpProductsResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateOcpProductsResponse) SetResultMsg(v string) *CreateOcpProductsResponse {
	s.ResultMsg = &v
	return s
}

type CallbackOcpProductRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 任务状态变更，是否成功；
	Downstatus *bool `json:"downstatus,omitempty" xml:"downstatus,omitempty" require:"true"`
	// 事件类型：开通、变更、释放、创建、停止、恢复等
	Event *string `json:"event,omitempty" xml:"event,omitempty" require:"true"`
	// 产品实例Id列
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 产品码 全局唯一
	ProductCode *string `json:"product_code,omitempty" xml:"product_code,omitempty" require:"true"`
	// 租户id
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty" require:"true"`
}

func (s CallbackOcpProductRequest) String() string {
	return tea.Prettify(s)
}

func (s CallbackOcpProductRequest) GoString() string {
	return s.String()
}

func (s *CallbackOcpProductRequest) SetAuthToken(v string) *CallbackOcpProductRequest {
	s.AuthToken = &v
	return s
}

func (s *CallbackOcpProductRequest) SetProductInstanceId(v string) *CallbackOcpProductRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CallbackOcpProductRequest) SetDownstatus(v bool) *CallbackOcpProductRequest {
	s.Downstatus = &v
	return s
}

func (s *CallbackOcpProductRequest) SetEvent(v string) *CallbackOcpProductRequest {
	s.Event = &v
	return s
}

func (s *CallbackOcpProductRequest) SetInstanceId(v string) *CallbackOcpProductRequest {
	s.InstanceId = &v
	return s
}

func (s *CallbackOcpProductRequest) SetProductCode(v string) *CallbackOcpProductRequest {
	s.ProductCode = &v
	return s
}

func (s *CallbackOcpProductRequest) SetTenantId(v string) *CallbackOcpProductRequest {
	s.TenantId = &v
	return s
}

type CallbackOcpProductResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s CallbackOcpProductResponse) String() string {
	return tea.Prettify(s)
}

func (s CallbackOcpProductResponse) GoString() string {
	return s.String()
}

func (s *CallbackOcpProductResponse) SetReqMsgId(v string) *CallbackOcpProductResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CallbackOcpProductResponse) SetResultCode(v string) *CallbackOcpProductResponse {
	s.ResultCode = &v
	return s
}

func (s *CallbackOcpProductResponse) SetResultMsg(v string) *CallbackOcpProductResponse {
	s.ResultMsg = &v
	return s
}

type CheckOcpTaskRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 事件类型：开通（AF_OPEN）、变更（AF_MODIFY）、释放（AF_RELEASE）、创建（AF_PROVISION）、停止（AF_STOP）、恢复（AF_RESUME）等。
	Event *string `json:"event,omitempty" xml:"event,omitempty" require:"true"`
	// 实例id
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 请求平台来源
	Platform *string `json:"platform,omitempty" xml:"platform,omitempty" require:"true"`
	// 产品码
	ProductCode *string `json:"product_code,omitempty" xml:"product_code,omitempty" require:"true"`
	// 租户id
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty" require:"true"`
	// 商品码
	AccessCode *string `json:"access_code,omitempty" xml:"access_code,omitempty" require:"true"`
}

func (s CheckOcpTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s CheckOcpTaskRequest) GoString() string {
	return s.String()
}

func (s *CheckOcpTaskRequest) SetAuthToken(v string) *CheckOcpTaskRequest {
	s.AuthToken = &v
	return s
}

func (s *CheckOcpTaskRequest) SetProductInstanceId(v string) *CheckOcpTaskRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CheckOcpTaskRequest) SetEvent(v string) *CheckOcpTaskRequest {
	s.Event = &v
	return s
}

func (s *CheckOcpTaskRequest) SetInstanceId(v string) *CheckOcpTaskRequest {
	s.InstanceId = &v
	return s
}

func (s *CheckOcpTaskRequest) SetPlatform(v string) *CheckOcpTaskRequest {
	s.Platform = &v
	return s
}

func (s *CheckOcpTaskRequest) SetProductCode(v string) *CheckOcpTaskRequest {
	s.ProductCode = &v
	return s
}

func (s *CheckOcpTaskRequest) SetTenantId(v string) *CheckOcpTaskRequest {
	s.TenantId = &v
	return s
}

func (s *CheckOcpTaskRequest) SetAccessCode(v string) *CheckOcpTaskRequest {
	s.AccessCode = &v
	return s
}

type CheckOcpTaskResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 任务是否成功
	TaskResult *bool `json:"task_result,omitempty" xml:"task_result,omitempty"`
}

func (s CheckOcpTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s CheckOcpTaskResponse) GoString() string {
	return s.String()
}

func (s *CheckOcpTaskResponse) SetReqMsgId(v string) *CheckOcpTaskResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CheckOcpTaskResponse) SetResultCode(v string) *CheckOcpTaskResponse {
	s.ResultCode = &v
	return s
}

func (s *CheckOcpTaskResponse) SetResultMsg(v string) *CheckOcpTaskResponse {
	s.ResultMsg = &v
	return s
}

func (s *CheckOcpTaskResponse) SetTaskResult(v bool) *CheckOcpTaskResponse {
	s.TaskResult = &v
	return s
}

type ExecOcpTaskRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 事件类型：开通（AF_OPEN）、变更（AF_MODIFY）、释放（AF_RELEASE）、创建（AF_PROVISION）、停止（AF_STOP）、恢复（AF_RESUME）等。
	Event *string `json:"event,omitempty" xml:"event,omitempty" require:"true"`
	// 实例id
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 订单号码
	OrderNo *string `json:"order_no,omitempty" xml:"order_no,omitempty" require:"true"`
	// 请求平台来源
	Platform *string `json:"platform,omitempty" xml:"platform,omitempty" require:"true"`
	// 产品码
	ProductCode *string `json:"product_code,omitempty" xml:"product_code,omitempty" require:"true"`
	// 产品规格
	Specification *string `json:"specification,omitempty" xml:"specification,omitempty" require:"true"`
	// 租户Id
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty" require:"true"`
	// 商品码
	AccessCode *string `json:"access_code,omitempty" xml:"access_code,omitempty" require:"true"`
}

func (s ExecOcpTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s ExecOcpTaskRequest) GoString() string {
	return s.String()
}

func (s *ExecOcpTaskRequest) SetAuthToken(v string) *ExecOcpTaskRequest {
	s.AuthToken = &v
	return s
}

func (s *ExecOcpTaskRequest) SetProductInstanceId(v string) *ExecOcpTaskRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ExecOcpTaskRequest) SetEvent(v string) *ExecOcpTaskRequest {
	s.Event = &v
	return s
}

func (s *ExecOcpTaskRequest) SetInstanceId(v string) *ExecOcpTaskRequest {
	s.InstanceId = &v
	return s
}

func (s *ExecOcpTaskRequest) SetOrderNo(v string) *ExecOcpTaskRequest {
	s.OrderNo = &v
	return s
}

func (s *ExecOcpTaskRequest) SetPlatform(v string) *ExecOcpTaskRequest {
	s.Platform = &v
	return s
}

func (s *ExecOcpTaskRequest) SetProductCode(v string) *ExecOcpTaskRequest {
	s.ProductCode = &v
	return s
}

func (s *ExecOcpTaskRequest) SetSpecification(v string) *ExecOcpTaskRequest {
	s.Specification = &v
	return s
}

func (s *ExecOcpTaskRequest) SetTenantId(v string) *ExecOcpTaskRequest {
	s.TenantId = &v
	return s
}

func (s *ExecOcpTaskRequest) SetAccessCode(v string) *ExecOcpTaskRequest {
	s.AccessCode = &v
	return s
}

type ExecOcpTaskResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 任务是否成功
	TaskResult *bool `json:"task_result,omitempty" xml:"task_result,omitempty"`
}

func (s ExecOcpTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s ExecOcpTaskResponse) GoString() string {
	return s.String()
}

func (s *ExecOcpTaskResponse) SetReqMsgId(v string) *ExecOcpTaskResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ExecOcpTaskResponse) SetResultCode(v string) *ExecOcpTaskResponse {
	s.ResultCode = &v
	return s
}

func (s *ExecOcpTaskResponse) SetResultMsg(v string) *ExecOcpTaskResponse {
	s.ResultMsg = &v
	return s
}

func (s *ExecOcpTaskResponse) SetTaskResult(v bool) *ExecOcpTaskResponse {
	s.TaskResult = &v
	return s
}

type CreateBlockchainInstanceInnerRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 区块链名称
	BlockchainName *string `json:"blockchain_name,omitempty" xml:"blockchain_name,omitempty" require:"true"`
	// 链打标内容
	BlockchainTag *string `json:"blockchain_tag,omitempty" xml:"blockchain_tag,omitempty"`
	// Tee链/企业版/企业版  enterprise
	BlockchainType *string `json:"blockchain_type,omitempty" xml:"blockchain_type,omitempty" require:"true"`
	// 待创建联盟的信息
	CreateUnionInfo *BaasUnionInfo `json:"create_union_info,omitempty" xml:"create_union_info,omitempty"`
	// 节点数
	NodeNumber *int64 `json:"node_number,omitempty" xml:"node_number,omitempty" require:"true"`
	// 联盟id
	UnionId *int64 `json:"union_id,omitempty" xml:"union_id,omitempty"`
	// 业务线code
	GroupCode *string `json:"group_code,omitempty" xml:"group_code,omitempty" require:"true"`
	// 业务线子码
	GroupSubCode *string `json:"group_sub_code,omitempty" xml:"group_sub_code,omitempty" require:"true"`
	// 是否需要创建测试链
	TestChain *bool `json:"test_chain,omitempty" xml:"test_chain,omitempty" require:"true"`
}

func (s CreateBlockchainInstanceInnerRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateBlockchainInstanceInnerRequest) GoString() string {
	return s.String()
}

func (s *CreateBlockchainInstanceInnerRequest) SetAuthToken(v string) *CreateBlockchainInstanceInnerRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateBlockchainInstanceInnerRequest) SetProductInstanceId(v string) *CreateBlockchainInstanceInnerRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateBlockchainInstanceInnerRequest) SetBlockchainName(v string) *CreateBlockchainInstanceInnerRequest {
	s.BlockchainName = &v
	return s
}

func (s *CreateBlockchainInstanceInnerRequest) SetBlockchainTag(v string) *CreateBlockchainInstanceInnerRequest {
	s.BlockchainTag = &v
	return s
}

func (s *CreateBlockchainInstanceInnerRequest) SetBlockchainType(v string) *CreateBlockchainInstanceInnerRequest {
	s.BlockchainType = &v
	return s
}

func (s *CreateBlockchainInstanceInnerRequest) SetCreateUnionInfo(v *BaasUnionInfo) *CreateBlockchainInstanceInnerRequest {
	s.CreateUnionInfo = v
	return s
}

func (s *CreateBlockchainInstanceInnerRequest) SetNodeNumber(v int64) *CreateBlockchainInstanceInnerRequest {
	s.NodeNumber = &v
	return s
}

func (s *CreateBlockchainInstanceInnerRequest) SetUnionId(v int64) *CreateBlockchainInstanceInnerRequest {
	s.UnionId = &v
	return s
}

func (s *CreateBlockchainInstanceInnerRequest) SetGroupCode(v string) *CreateBlockchainInstanceInnerRequest {
	s.GroupCode = &v
	return s
}

func (s *CreateBlockchainInstanceInnerRequest) SetGroupSubCode(v string) *CreateBlockchainInstanceInnerRequest {
	s.GroupSubCode = &v
	return s
}

func (s *CreateBlockchainInstanceInnerRequest) SetTestChain(v bool) *CreateBlockchainInstanceInnerRequest {
	s.TestChain = &v
	return s
}

type CreateBlockchainInstanceInnerResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// instanceId
	Result *string `json:"result,omitempty" xml:"result,omitempty"`
}

func (s CreateBlockchainInstanceInnerResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateBlockchainInstanceInnerResponse) GoString() string {
	return s.String()
}

func (s *CreateBlockchainInstanceInnerResponse) SetReqMsgId(v string) *CreateBlockchainInstanceInnerResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateBlockchainInstanceInnerResponse) SetResultCode(v string) *CreateBlockchainInstanceInnerResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateBlockchainInstanceInnerResponse) SetResultMsg(v string) *CreateBlockchainInstanceInnerResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateBlockchainInstanceInnerResponse) SetResult(v string) *CreateBlockchainInstanceInnerResponse {
	s.Result = &v
	return s
}

type QueryBlockchainInstanceBizidRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 内部建链的实例id
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
}

func (s QueryBlockchainInstanceBizidRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryBlockchainInstanceBizidRequest) GoString() string {
	return s.String()
}

func (s *QueryBlockchainInstanceBizidRequest) SetAuthToken(v string) *QueryBlockchainInstanceBizidRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryBlockchainInstanceBizidRequest) SetProductInstanceId(v string) *QueryBlockchainInstanceBizidRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryBlockchainInstanceBizidRequest) SetInstanceId(v string) *QueryBlockchainInstanceBizidRequest {
	s.InstanceId = &v
	return s
}

type QueryBlockchainInstanceBizidResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 区块链的相关信息
	Result []*CreateBlockchainInfo `json:"result,omitempty" xml:"result,omitempty" type:"Repeated"`
}

func (s QueryBlockchainInstanceBizidResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryBlockchainInstanceBizidResponse) GoString() string {
	return s.String()
}

func (s *QueryBlockchainInstanceBizidResponse) SetReqMsgId(v string) *QueryBlockchainInstanceBizidResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryBlockchainInstanceBizidResponse) SetResultCode(v string) *QueryBlockchainInstanceBizidResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryBlockchainInstanceBizidResponse) SetResultMsg(v string) *QueryBlockchainInstanceBizidResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryBlockchainInstanceBizidResponse) SetResult(v []*CreateBlockchainInfo) *QueryBlockchainInstanceBizidResponse {
	s.Result = v
	return s
}

type CreateApiConsortiumRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 某某联盟的使用场景描述
	Description *string `json:"description,omitempty" xml:"description,omitempty" require:"true"`
	// 联盟名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
}

func (s CreateApiConsortiumRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateApiConsortiumRequest) GoString() string {
	return s.String()
}

func (s *CreateApiConsortiumRequest) SetAuthToken(v string) *CreateApiConsortiumRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateApiConsortiumRequest) SetProductInstanceId(v string) *CreateApiConsortiumRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateApiConsortiumRequest) SetDescription(v string) *CreateApiConsortiumRequest {
	s.Description = &v
	return s
}

func (s *CreateApiConsortiumRequest) SetName(v string) *CreateApiConsortiumRequest {
	s.Name = &v
	return s
}

type CreateApiConsortiumResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 请求id
	RequestId *string `json:"request_id,omitempty" xml:"request_id,omitempty"`
	// 结果
	Result *Result `json:"result,omitempty" xml:"result,omitempty"`
}

func (s CreateApiConsortiumResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateApiConsortiumResponse) GoString() string {
	return s.String()
}

func (s *CreateApiConsortiumResponse) SetReqMsgId(v string) *CreateApiConsortiumResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateApiConsortiumResponse) SetResultCode(v string) *CreateApiConsortiumResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateApiConsortiumResponse) SetResultMsg(v string) *CreateApiConsortiumResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateApiConsortiumResponse) SetRequestId(v string) *CreateApiConsortiumResponse {
	s.RequestId = &v
	return s
}

func (s *CreateApiConsortiumResponse) SetResult(v *Result) *CreateApiConsortiumResponse {
	s.Result = v
	return s
}

type QueryApiMiniappbrowserAuthtypeRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链 ID
	AntChainId *string `json:"ant_chain_id,omitempty" xml:"ant_chain_id,omitempty" require:"true"`
}

func (s QueryApiMiniappbrowserAuthtypeRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryApiMiniappbrowserAuthtypeRequest) GoString() string {
	return s.String()
}

func (s *QueryApiMiniappbrowserAuthtypeRequest) SetAuthToken(v string) *QueryApiMiniappbrowserAuthtypeRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryApiMiniappbrowserAuthtypeRequest) SetProductInstanceId(v string) *QueryApiMiniappbrowserAuthtypeRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryApiMiniappbrowserAuthtypeRequest) SetAntChainId(v string) *QueryApiMiniappbrowserAuthtypeRequest {
	s.AntChainId = &v
	return s
}

type QueryApiMiniappbrowserAuthtypeResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 请求 ID
	RequestId *string `json:"request_id,omitempty" xml:"request_id,omitempty"`
	// 授权类型
	Result *MiniAppBrowserAuthType `json:"result,omitempty" xml:"result,omitempty"`
}

func (s QueryApiMiniappbrowserAuthtypeResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryApiMiniappbrowserAuthtypeResponse) GoString() string {
	return s.String()
}

func (s *QueryApiMiniappbrowserAuthtypeResponse) SetReqMsgId(v string) *QueryApiMiniappbrowserAuthtypeResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryApiMiniappbrowserAuthtypeResponse) SetResultCode(v string) *QueryApiMiniappbrowserAuthtypeResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryApiMiniappbrowserAuthtypeResponse) SetResultMsg(v string) *QueryApiMiniappbrowserAuthtypeResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryApiMiniappbrowserAuthtypeResponse) SetRequestId(v string) *QueryApiMiniappbrowserAuthtypeResponse {
	s.RequestId = &v
	return s
}

func (s *QueryApiMiniappbrowserAuthtypeResponse) SetResult(v *MiniAppBrowserAuthType) *QueryApiMiniappbrowserAuthtypeResponse {
	s.Result = v
	return s
}

type QueryStatisticsPortHeightRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链id
	Bizid *string `json:"bizid,omitempty" xml:"bizid,omitempty" require:"true"`
}

func (s QueryStatisticsPortHeightRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryStatisticsPortHeightRequest) GoString() string {
	return s.String()
}

func (s *QueryStatisticsPortHeightRequest) SetAuthToken(v string) *QueryStatisticsPortHeightRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryStatisticsPortHeightRequest) SetProductInstanceId(v string) *QueryStatisticsPortHeightRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryStatisticsPortHeightRequest) SetBizid(v string) *QueryStatisticsPortHeightRequest {
	s.Bizid = &v
	return s
}

type QueryStatisticsPortHeightResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 当前块高
	Height *int64 `json:"height,omitempty" xml:"height,omitempty"`
}

func (s QueryStatisticsPortHeightResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryStatisticsPortHeightResponse) GoString() string {
	return s.String()
}

func (s *QueryStatisticsPortHeightResponse) SetReqMsgId(v string) *QueryStatisticsPortHeightResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryStatisticsPortHeightResponse) SetResultCode(v string) *QueryStatisticsPortHeightResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryStatisticsPortHeightResponse) SetResultMsg(v string) *QueryStatisticsPortHeightResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryStatisticsPortHeightResponse) SetHeight(v int64) *QueryStatisticsPortHeightResponse {
	s.Height = &v
	return s
}

type QueryStatisticPortBizidRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
}

func (s QueryStatisticPortBizidRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryStatisticPortBizidRequest) GoString() string {
	return s.String()
}

func (s *QueryStatisticPortBizidRequest) SetAuthToken(v string) *QueryStatisticPortBizidRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryStatisticPortBizidRequest) SetProductInstanceId(v string) *QueryStatisticPortBizidRequest {
	s.ProductInstanceId = &v
	return s
}

type QueryStatisticPortBizidResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 链授权列表
	BizList []*MyChainInfo `json:"biz_list,omitempty" xml:"biz_list,omitempty" type:"Repeated"`
}

func (s QueryStatisticPortBizidResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryStatisticPortBizidResponse) GoString() string {
	return s.String()
}

func (s *QueryStatisticPortBizidResponse) SetReqMsgId(v string) *QueryStatisticPortBizidResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryStatisticPortBizidResponse) SetResultCode(v string) *QueryStatisticPortBizidResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryStatisticPortBizidResponse) SetResultMsg(v string) *QueryStatisticPortBizidResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryStatisticPortBizidResponse) SetBizList(v []*MyChainInfo) *QueryStatisticPortBizidResponse {
	s.BizList = v
	return s
}

type AddStatisticsPortTaskRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链id
	Bizid *string `json:"bizid,omitempty" xml:"bizid,omitempty" require:"true"`
	// 结束块高
	End *int64 `json:"end,omitempty" xml:"end,omitempty" require:"true"`
	// 开始块高
	Start *int64 `json:"start,omitempty" xml:"start,omitempty" require:"true"`
}

func (s AddStatisticsPortTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s AddStatisticsPortTaskRequest) GoString() string {
	return s.String()
}

func (s *AddStatisticsPortTaskRequest) SetAuthToken(v string) *AddStatisticsPortTaskRequest {
	s.AuthToken = &v
	return s
}

func (s *AddStatisticsPortTaskRequest) SetProductInstanceId(v string) *AddStatisticsPortTaskRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *AddStatisticsPortTaskRequest) SetBizid(v string) *AddStatisticsPortTaskRequest {
	s.Bizid = &v
	return s
}

func (s *AddStatisticsPortTaskRequest) SetEnd(v int64) *AddStatisticsPortTaskRequest {
	s.End = &v
	return s
}

func (s *AddStatisticsPortTaskRequest) SetStart(v int64) *AddStatisticsPortTaskRequest {
	s.Start = &v
	return s
}

type AddStatisticsPortTaskResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s AddStatisticsPortTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s AddStatisticsPortTaskResponse) GoString() string {
	return s.String()
}

func (s *AddStatisticsPortTaskResponse) SetReqMsgId(v string) *AddStatisticsPortTaskResponse {
	s.ReqMsgId = &v
	return s
}

func (s *AddStatisticsPortTaskResponse) SetResultCode(v string) *AddStatisticsPortTaskResponse {
	s.ResultCode = &v
	return s
}

func (s *AddStatisticsPortTaskResponse) SetResultMsg(v string) *AddStatisticsPortTaskResponse {
	s.ResultMsg = &v
	return s
}

type QueryApiDwhTransactionRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链bizid
	BizId *string `json:"biz_id,omitempty" xml:"biz_id,omitempty" require:"true"`
	// block_hash
	BlockHash *string `json:"block_hash,omitempty" xml:"block_hash,omitempty"`
	// end_timestamp
	EndTimestamp *int64 `json:"end_timestamp,omitempty" xml:"end_timestamp,omitempty"`
	// from
	From *string `json:"from,omitempty" xml:"from,omitempty"`
	// pageNo
	PageNo *int64 `json:"page_no,omitempty" xml:"page_no,omitempty"`
	// pageSize
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" maximum:"100"`
	// startTimestamp
	StartTimestamp *int64 `json:"start_timestamp,omitempty" xml:"start_timestamp,omitempty"`
	// to
	To *string `json:"to,omitempty" xml:"to,omitempty"`
	// transactionHash
	TransactionHash *string `json:"transaction_hash,omitempty" xml:"transaction_hash,omitempty"`
	// transactionType
	TransactionType *int64 `json:"transaction_type,omitempty" xml:"transaction_type,omitempty"`
}

func (s QueryApiDwhTransactionRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryApiDwhTransactionRequest) GoString() string {
	return s.String()
}

func (s *QueryApiDwhTransactionRequest) SetAuthToken(v string) *QueryApiDwhTransactionRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryApiDwhTransactionRequest) SetProductInstanceId(v string) *QueryApiDwhTransactionRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryApiDwhTransactionRequest) SetBizId(v string) *QueryApiDwhTransactionRequest {
	s.BizId = &v
	return s
}

func (s *QueryApiDwhTransactionRequest) SetBlockHash(v string) *QueryApiDwhTransactionRequest {
	s.BlockHash = &v
	return s
}

func (s *QueryApiDwhTransactionRequest) SetEndTimestamp(v int64) *QueryApiDwhTransactionRequest {
	s.EndTimestamp = &v
	return s
}

func (s *QueryApiDwhTransactionRequest) SetFrom(v string) *QueryApiDwhTransactionRequest {
	s.From = &v
	return s
}

func (s *QueryApiDwhTransactionRequest) SetPageNo(v int64) *QueryApiDwhTransactionRequest {
	s.PageNo = &v
	return s
}

func (s *QueryApiDwhTransactionRequest) SetPageSize(v int64) *QueryApiDwhTransactionRequest {
	s.PageSize = &v
	return s
}

func (s *QueryApiDwhTransactionRequest) SetStartTimestamp(v int64) *QueryApiDwhTransactionRequest {
	s.StartTimestamp = &v
	return s
}

func (s *QueryApiDwhTransactionRequest) SetTo(v string) *QueryApiDwhTransactionRequest {
	s.To = &v
	return s
}

func (s *QueryApiDwhTransactionRequest) SetTransactionHash(v string) *QueryApiDwhTransactionRequest {
	s.TransactionHash = &v
	return s
}

func (s *QueryApiDwhTransactionRequest) SetTransactionType(v int64) *QueryApiDwhTransactionRequest {
	s.TransactionType = &v
	return s
}

type QueryApiDwhTransactionResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// transaction_list
	TransactionList []*TransactionPo `json:"transaction_list,omitempty" xml:"transaction_list,omitempty" type:"Repeated"`
}

func (s QueryApiDwhTransactionResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryApiDwhTransactionResponse) GoString() string {
	return s.String()
}

func (s *QueryApiDwhTransactionResponse) SetReqMsgId(v string) *QueryApiDwhTransactionResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryApiDwhTransactionResponse) SetResultCode(v string) *QueryApiDwhTransactionResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryApiDwhTransactionResponse) SetResultMsg(v string) *QueryApiDwhTransactionResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryApiDwhTransactionResponse) SetTransactionList(v []*TransactionPo) *QueryApiDwhTransactionResponse {
	s.TransactionList = v
	return s
}

type QueryApiDwhAccountRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 账户hash ，如果根据账户hash查询账户信息可以填写该字段
	AccountHash *string `json:"account_hash,omitempty" xml:"account_hash,omitempty"`
	// 链id
	BizId *string `json:"biz_id,omitempty" xml:"biz_id,omitempty" require:"true"`
	// 结束时间，如果查询时间段创建的账户，可以填写该字段
	EndTimestamp *int64 `json:"end_timestamp,omitempty" xml:"end_timestamp,omitempty"`
	// 页数，分页使用，从1开始
	PageNo *int64 `json:"page_no,omitempty" xml:"page_no,omitempty"`
	// 分页大小，取值不能超过100，默认100
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" maximum:"100" minimum:"0"`
	// 开始时间，如果查询时间段创建的账户，可以填写该字段
	StartTimestamp *int64 `json:"start_timestamp,omitempty" xml:"start_timestamp,omitempty"`
}

func (s QueryApiDwhAccountRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryApiDwhAccountRequest) GoString() string {
	return s.String()
}

func (s *QueryApiDwhAccountRequest) SetAuthToken(v string) *QueryApiDwhAccountRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryApiDwhAccountRequest) SetProductInstanceId(v string) *QueryApiDwhAccountRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryApiDwhAccountRequest) SetAccountHash(v string) *QueryApiDwhAccountRequest {
	s.AccountHash = &v
	return s
}

func (s *QueryApiDwhAccountRequest) SetBizId(v string) *QueryApiDwhAccountRequest {
	s.BizId = &v
	return s
}

func (s *QueryApiDwhAccountRequest) SetEndTimestamp(v int64) *QueryApiDwhAccountRequest {
	s.EndTimestamp = &v
	return s
}

func (s *QueryApiDwhAccountRequest) SetPageNo(v int64) *QueryApiDwhAccountRequest {
	s.PageNo = &v
	return s
}

func (s *QueryApiDwhAccountRequest) SetPageSize(v int64) *QueryApiDwhAccountRequest {
	s.PageSize = &v
	return s
}

func (s *QueryApiDwhAccountRequest) SetStartTimestamp(v int64) *QueryApiDwhAccountRequest {
	s.StartTimestamp = &v
	return s
}

type QueryApiDwhAccountResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 账户列表
	AccountList []*AccountPo `json:"account_list,omitempty" xml:"account_list,omitempty" type:"Repeated"`
}

func (s QueryApiDwhAccountResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryApiDwhAccountResponse) GoString() string {
	return s.String()
}

func (s *QueryApiDwhAccountResponse) SetReqMsgId(v string) *QueryApiDwhAccountResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryApiDwhAccountResponse) SetResultCode(v string) *QueryApiDwhAccountResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryApiDwhAccountResponse) SetResultMsg(v string) *QueryApiDwhAccountResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryApiDwhAccountResponse) SetAccountList(v []*AccountPo) *QueryApiDwhAccountResponse {
	s.AccountList = v
	return s
}

type QueryApiDwhContractRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// biz_id 链id
	BizId *string `json:"biz_id,omitempty" xml:"biz_id,omitempty"`
	// 合约地址：如果根据合约地址查询，可以填该字段
	Contract *string `json:"contract,omitempty" xml:"contract,omitempty"`
	// 结束时间：如果根据时间范围查询创建的合约，可以填写该字段
	EndTimestamp *int64 `json:"end_timestamp,omitempty" xml:"end_timestamp,omitempty"`
	// 页数，分页使用，从1开始默认为1
	PageNo *int64 `json:"page_no,omitempty" xml:"page_no,omitempty"`
	// 分页大小，取值不能超过100，默认100
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" maximum:"100" minimum:"0"`
	// 开始时间：如果根据时间范围查询创建的账户，可以填写该字段
	StartTimestamp *int64 `json:"start_timestamp,omitempty" xml:"start_timestamp,omitempty"`
}

func (s QueryApiDwhContractRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryApiDwhContractRequest) GoString() string {
	return s.String()
}

func (s *QueryApiDwhContractRequest) SetAuthToken(v string) *QueryApiDwhContractRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryApiDwhContractRequest) SetProductInstanceId(v string) *QueryApiDwhContractRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryApiDwhContractRequest) SetBizId(v string) *QueryApiDwhContractRequest {
	s.BizId = &v
	return s
}

func (s *QueryApiDwhContractRequest) SetContract(v string) *QueryApiDwhContractRequest {
	s.Contract = &v
	return s
}

func (s *QueryApiDwhContractRequest) SetEndTimestamp(v int64) *QueryApiDwhContractRequest {
	s.EndTimestamp = &v
	return s
}

func (s *QueryApiDwhContractRequest) SetPageNo(v int64) *QueryApiDwhContractRequest {
	s.PageNo = &v
	return s
}

func (s *QueryApiDwhContractRequest) SetPageSize(v int64) *QueryApiDwhContractRequest {
	s.PageSize = &v
	return s
}

func (s *QueryApiDwhContractRequest) SetStartTimestamp(v int64) *QueryApiDwhContractRequest {
	s.StartTimestamp = &v
	return s
}

type QueryApiDwhContractResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 合约列表
	ContractList []*ContractInfo `json:"contract_list,omitempty" xml:"contract_list,omitempty" type:"Repeated"`
}

func (s QueryApiDwhContractResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryApiDwhContractResponse) GoString() string {
	return s.String()
}

func (s *QueryApiDwhContractResponse) SetReqMsgId(v string) *QueryApiDwhContractResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryApiDwhContractResponse) SetResultCode(v string) *QueryApiDwhContractResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryApiDwhContractResponse) SetResultMsg(v string) *QueryApiDwhContractResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryApiDwhContractResponse) SetContractList(v []*ContractInfo) *QueryApiDwhContractResponse {
	s.ContractList = v
	return s
}

type QueryApiDwhbTransactionRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// biz_id
	BizId *string `json:"biz_id,omitempty" xml:"biz_id,omitempty" require:"true"`
	// hash_list
	HashList []*string `json:"hash_list,omitempty" xml:"hash_list,omitempty" require:"true" type:"Repeated"`
}

func (s QueryApiDwhbTransactionRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryApiDwhbTransactionRequest) GoString() string {
	return s.String()
}

func (s *QueryApiDwhbTransactionRequest) SetAuthToken(v string) *QueryApiDwhbTransactionRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryApiDwhbTransactionRequest) SetProductInstanceId(v string) *QueryApiDwhbTransactionRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryApiDwhbTransactionRequest) SetBizId(v string) *QueryApiDwhbTransactionRequest {
	s.BizId = &v
	return s
}

func (s *QueryApiDwhbTransactionRequest) SetHashList(v []*string) *QueryApiDwhbTransactionRequest {
	s.HashList = v
	return s
}

type QueryApiDwhbTransactionResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// transaction
	TransactionList []*TransactionInfo `json:"transaction_list,omitempty" xml:"transaction_list,omitempty" type:"Repeated"`
}

func (s QueryApiDwhbTransactionResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryApiDwhbTransactionResponse) GoString() string {
	return s.String()
}

func (s *QueryApiDwhbTransactionResponse) SetReqMsgId(v string) *QueryApiDwhbTransactionResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryApiDwhbTransactionResponse) SetResultCode(v string) *QueryApiDwhbTransactionResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryApiDwhbTransactionResponse) SetResultMsg(v string) *QueryApiDwhbTransactionResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryApiDwhbTransactionResponse) SetTransactionList(v []*TransactionInfo) *QueryApiDwhbTransactionResponse {
	s.TransactionList = v
	return s
}

type DeleteCaasContractServiceRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 服务ID
	ServiceId *string `json:"service_id,omitempty" xml:"service_id,omitempty" require:"true"`
}

func (s DeleteCaasContractServiceRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteCaasContractServiceRequest) GoString() string {
	return s.String()
}

func (s *DeleteCaasContractServiceRequest) SetAuthToken(v string) *DeleteCaasContractServiceRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteCaasContractServiceRequest) SetProductInstanceId(v string) *DeleteCaasContractServiceRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *DeleteCaasContractServiceRequest) SetServiceId(v string) *DeleteCaasContractServiceRequest {
	s.ServiceId = &v
	return s
}

type DeleteCaasContractServiceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s DeleteCaasContractServiceResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteCaasContractServiceResponse) GoString() string {
	return s.String()
}

func (s *DeleteCaasContractServiceResponse) SetReqMsgId(v string) *DeleteCaasContractServiceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteCaasContractServiceResponse) SetResultCode(v string) *DeleteCaasContractServiceResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteCaasContractServiceResponse) SetResultMsg(v string) *DeleteCaasContractServiceResponse {
	s.ResultMsg = &v
	return s
}

type CreateCaasContractServiceRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true" maxLength:"64" minLength:"1"`
	// 联盟ID
	UnionId *string `json:"union_id,omitempty" xml:"union_id,omitempty" require:"true"`
	// 合约模板标识
	TemplateId *string `json:"template_id,omitempty" xml:"template_id,omitempty" require:"true" maxLength:"64" minLength:"1"`
	// 合约名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true" maxLength:"64" minLength:"1"`
}

func (s CreateCaasContractServiceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateCaasContractServiceRequest) GoString() string {
	return s.String()
}

func (s *CreateCaasContractServiceRequest) SetAuthToken(v string) *CreateCaasContractServiceRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateCaasContractServiceRequest) SetProductInstanceId(v string) *CreateCaasContractServiceRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateCaasContractServiceRequest) SetChainId(v string) *CreateCaasContractServiceRequest {
	s.ChainId = &v
	return s
}

func (s *CreateCaasContractServiceRequest) SetUnionId(v string) *CreateCaasContractServiceRequest {
	s.UnionId = &v
	return s
}

func (s *CreateCaasContractServiceRequest) SetTemplateId(v string) *CreateCaasContractServiceRequest {
	s.TemplateId = &v
	return s
}

func (s *CreateCaasContractServiceRequest) SetName(v string) *CreateCaasContractServiceRequest {
	s.Name = &v
	return s
}

type CreateCaasContractServiceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 返回结果
	Result *ContractCreateResp `json:"result,omitempty" xml:"result,omitempty"`
}

func (s CreateCaasContractServiceResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateCaasContractServiceResponse) GoString() string {
	return s.String()
}

func (s *CreateCaasContractServiceResponse) SetReqMsgId(v string) *CreateCaasContractServiceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateCaasContractServiceResponse) SetResultCode(v string) *CreateCaasContractServiceResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateCaasContractServiceResponse) SetResultMsg(v string) *CreateCaasContractServiceResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateCaasContractServiceResponse) SetResult(v *ContractCreateResp) *CreateCaasContractServiceResponse {
	s.Result = v
	return s
}

type PagequeryCaasContractServiceRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 合约服务类别
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
	// 页码
	Num *int64 `json:"num,omitempty" xml:"num,omitempty" require:"true"`
	// 页大小
	Size *int64 `json:"size,omitempty" xml:"size,omitempty" require:"true"`
	// 链id
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
}

func (s PagequeryCaasContractServiceRequest) String() string {
	return tea.Prettify(s)
}

func (s PagequeryCaasContractServiceRequest) GoString() string {
	return s.String()
}

func (s *PagequeryCaasContractServiceRequest) SetAuthToken(v string) *PagequeryCaasContractServiceRequest {
	s.AuthToken = &v
	return s
}

func (s *PagequeryCaasContractServiceRequest) SetProductInstanceId(v string) *PagequeryCaasContractServiceRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *PagequeryCaasContractServiceRequest) SetType(v string) *PagequeryCaasContractServiceRequest {
	s.Type = &v
	return s
}

func (s *PagequeryCaasContractServiceRequest) SetNum(v int64) *PagequeryCaasContractServiceRequest {
	s.Num = &v
	return s
}

func (s *PagequeryCaasContractServiceRequest) SetSize(v int64) *PagequeryCaasContractServiceRequest {
	s.Size = &v
	return s
}

func (s *PagequeryCaasContractServiceRequest) SetChainId(v string) *PagequeryCaasContractServiceRequest {
	s.ChainId = &v
	return s
}

type PagequeryCaasContractServiceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 返回结果
	Result *ContractPageResp `json:"result,omitempty" xml:"result,omitempty"`
}

func (s PagequeryCaasContractServiceResponse) String() string {
	return tea.Prettify(s)
}

func (s PagequeryCaasContractServiceResponse) GoString() string {
	return s.String()
}

func (s *PagequeryCaasContractServiceResponse) SetReqMsgId(v string) *PagequeryCaasContractServiceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *PagequeryCaasContractServiceResponse) SetResultCode(v string) *PagequeryCaasContractServiceResponse {
	s.ResultCode = &v
	return s
}

func (s *PagequeryCaasContractServiceResponse) SetResultMsg(v string) *PagequeryCaasContractServiceResponse {
	s.ResultMsg = &v
	return s
}

func (s *PagequeryCaasContractServiceResponse) SetResult(v *ContractPageResp) *PagequeryCaasContractServiceResponse {
	s.Result = v
	return s
}

type QueryCaasContractServiceRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 服务ID
	ServiceId *string `json:"service_id,omitempty" xml:"service_id,omitempty" require:"true"`
}

func (s QueryCaasContractServiceRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryCaasContractServiceRequest) GoString() string {
	return s.String()
}

func (s *QueryCaasContractServiceRequest) SetAuthToken(v string) *QueryCaasContractServiceRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryCaasContractServiceRequest) SetProductInstanceId(v string) *QueryCaasContractServiceRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryCaasContractServiceRequest) SetServiceId(v string) *QueryCaasContractServiceRequest {
	s.ServiceId = &v
	return s
}

type QueryCaasContractServiceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 返回结果
	Result *ContractCreateProcessResp `json:"result,omitempty" xml:"result,omitempty"`
}

func (s QueryCaasContractServiceResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryCaasContractServiceResponse) GoString() string {
	return s.String()
}

func (s *QueryCaasContractServiceResponse) SetReqMsgId(v string) *QueryCaasContractServiceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryCaasContractServiceResponse) SetResultCode(v string) *QueryCaasContractServiceResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryCaasContractServiceResponse) SetResultMsg(v string) *QueryCaasContractServiceResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryCaasContractServiceResponse) SetResult(v *ContractCreateProcessResp) *QueryCaasContractServiceResponse {
	s.Result = v
	return s
}

type DeployCaasContractServiceRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true" maxLength:"64" minLength:"1"`
	// 联盟id
	UnionId *string `json:"union_id,omitempty" xml:"union_id,omitempty" require:"true"`
	// 合约模板标识
	TemplateId *string `json:"template_id,omitempty" xml:"template_id,omitempty" require:"true" maxLength:"64" minLength:"1"`
	// 合约名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true" maxLength:"64" minLength:"1"`
}

func (s DeployCaasContractServiceRequest) String() string {
	return tea.Prettify(s)
}

func (s DeployCaasContractServiceRequest) GoString() string {
	return s.String()
}

func (s *DeployCaasContractServiceRequest) SetAuthToken(v string) *DeployCaasContractServiceRequest {
	s.AuthToken = &v
	return s
}

func (s *DeployCaasContractServiceRequest) SetProductInstanceId(v string) *DeployCaasContractServiceRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *DeployCaasContractServiceRequest) SetChainId(v string) *DeployCaasContractServiceRequest {
	s.ChainId = &v
	return s
}

func (s *DeployCaasContractServiceRequest) SetUnionId(v string) *DeployCaasContractServiceRequest {
	s.UnionId = &v
	return s
}

func (s *DeployCaasContractServiceRequest) SetTemplateId(v string) *DeployCaasContractServiceRequest {
	s.TemplateId = &v
	return s
}

func (s *DeployCaasContractServiceRequest) SetName(v string) *DeployCaasContractServiceRequest {
	s.Name = &v
	return s
}

type DeployCaasContractServiceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 返回结果
	Result *ContractCreateResp `json:"result,omitempty" xml:"result,omitempty"`
}

func (s DeployCaasContractServiceResponse) String() string {
	return tea.Prettify(s)
}

func (s DeployCaasContractServiceResponse) GoString() string {
	return s.String()
}

func (s *DeployCaasContractServiceResponse) SetReqMsgId(v string) *DeployCaasContractServiceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeployCaasContractServiceResponse) SetResultCode(v string) *DeployCaasContractServiceResponse {
	s.ResultCode = &v
	return s
}

func (s *DeployCaasContractServiceResponse) SetResultMsg(v string) *DeployCaasContractServiceResponse {
	s.ResultMsg = &v
	return s
}

func (s *DeployCaasContractServiceResponse) SetResult(v *ContractCreateResp) *DeployCaasContractServiceResponse {
	s.Result = v
	return s
}

type ListCaasContractServiceRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
}

func (s ListCaasContractServiceRequest) String() string {
	return tea.Prettify(s)
}

func (s ListCaasContractServiceRequest) GoString() string {
	return s.String()
}

func (s *ListCaasContractServiceRequest) SetAuthToken(v string) *ListCaasContractServiceRequest {
	s.AuthToken = &v
	return s
}

func (s *ListCaasContractServiceRequest) SetProductInstanceId(v string) *ListCaasContractServiceRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ListCaasContractServiceRequest) SetChainId(v string) *ListCaasContractServiceRequest {
	s.ChainId = &v
	return s
}

type ListCaasContractServiceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 返回结果
	Result *ContractTypeResp `json:"result,omitempty" xml:"result,omitempty"`
}

func (s ListCaasContractServiceResponse) String() string {
	return tea.Prettify(s)
}

func (s ListCaasContractServiceResponse) GoString() string {
	return s.String()
}

func (s *ListCaasContractServiceResponse) SetReqMsgId(v string) *ListCaasContractServiceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListCaasContractServiceResponse) SetResultCode(v string) *ListCaasContractServiceResponse {
	s.ResultCode = &v
	return s
}

func (s *ListCaasContractServiceResponse) SetResultMsg(v string) *ListCaasContractServiceResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListCaasContractServiceResponse) SetResult(v *ContractTypeResp) *ListCaasContractServiceResponse {
	s.Result = v
	return s
}

type DetailCaasContractServiceRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 服务ID
	ServiceId *string `json:"service_id,omitempty" xml:"service_id,omitempty" require:"true"`
}

func (s DetailCaasContractServiceRequest) String() string {
	return tea.Prettify(s)
}

func (s DetailCaasContractServiceRequest) GoString() string {
	return s.String()
}

func (s *DetailCaasContractServiceRequest) SetAuthToken(v string) *DetailCaasContractServiceRequest {
	s.AuthToken = &v
	return s
}

func (s *DetailCaasContractServiceRequest) SetProductInstanceId(v string) *DetailCaasContractServiceRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *DetailCaasContractServiceRequest) SetServiceId(v string) *DetailCaasContractServiceRequest {
	s.ServiceId = &v
	return s
}

type DetailCaasContractServiceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 返回结果
	Result *ContractDetailResp `json:"result,omitempty" xml:"result,omitempty"`
}

func (s DetailCaasContractServiceResponse) String() string {
	return tea.Prettify(s)
}

func (s DetailCaasContractServiceResponse) GoString() string {
	return s.String()
}

func (s *DetailCaasContractServiceResponse) SetReqMsgId(v string) *DetailCaasContractServiceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DetailCaasContractServiceResponse) SetResultCode(v string) *DetailCaasContractServiceResponse {
	s.ResultCode = &v
	return s
}

func (s *DetailCaasContractServiceResponse) SetResultMsg(v string) *DetailCaasContractServiceResponse {
	s.ResultMsg = &v
	return s
}

func (s *DetailCaasContractServiceResponse) SetResult(v *ContractDetailResp) *DetailCaasContractServiceResponse {
	s.Result = v
	return s
}

type CreateCaasApplicationManageRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 联盟id
	UnionId *string `json:"union_id,omitempty" xml:"union_id,omitempty" require:"true"`
}

func (s CreateCaasApplicationManageRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateCaasApplicationManageRequest) GoString() string {
	return s.String()
}

func (s *CreateCaasApplicationManageRequest) SetAuthToken(v string) *CreateCaasApplicationManageRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateCaasApplicationManageRequest) SetProductInstanceId(v string) *CreateCaasApplicationManageRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateCaasApplicationManageRequest) SetChainId(v string) *CreateCaasApplicationManageRequest {
	s.ChainId = &v
	return s
}

func (s *CreateCaasApplicationManageRequest) SetUnionId(v string) *CreateCaasApplicationManageRequest {
	s.UnionId = &v
	return s
}

type CreateCaasApplicationManageResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 返回结果
	Result *ApplicationCreateResp `json:"result,omitempty" xml:"result,omitempty"`
}

func (s CreateCaasApplicationManageResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateCaasApplicationManageResponse) GoString() string {
	return s.String()
}

func (s *CreateCaasApplicationManageResponse) SetReqMsgId(v string) *CreateCaasApplicationManageResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateCaasApplicationManageResponse) SetResultCode(v string) *CreateCaasApplicationManageResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateCaasApplicationManageResponse) SetResultMsg(v string) *CreateCaasApplicationManageResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateCaasApplicationManageResponse) SetResult(v *ApplicationCreateResp) *CreateCaasApplicationManageResponse {
	s.Result = v
	return s
}

type PagequeryCaasApplicationManageRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 页码
	Num *int64 `json:"num,omitempty" xml:"num,omitempty" require:"true"`
	// 页大小
	Size *int64 `json:"size,omitempty" xml:"size,omitempty" require:"true"`
	// 链ID
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
}

func (s PagequeryCaasApplicationManageRequest) String() string {
	return tea.Prettify(s)
}

func (s PagequeryCaasApplicationManageRequest) GoString() string {
	return s.String()
}

func (s *PagequeryCaasApplicationManageRequest) SetAuthToken(v string) *PagequeryCaasApplicationManageRequest {
	s.AuthToken = &v
	return s
}

func (s *PagequeryCaasApplicationManageRequest) SetProductInstanceId(v string) *PagequeryCaasApplicationManageRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *PagequeryCaasApplicationManageRequest) SetNum(v int64) *PagequeryCaasApplicationManageRequest {
	s.Num = &v
	return s
}

func (s *PagequeryCaasApplicationManageRequest) SetSize(v int64) *PagequeryCaasApplicationManageRequest {
	s.Size = &v
	return s
}

func (s *PagequeryCaasApplicationManageRequest) SetChainId(v string) *PagequeryCaasApplicationManageRequest {
	s.ChainId = &v
	return s
}

type PagequeryCaasApplicationManageResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 返回结果
	Result *ApplicationPageResp `json:"result,omitempty" xml:"result,omitempty"`
}

func (s PagequeryCaasApplicationManageResponse) String() string {
	return tea.Prettify(s)
}

func (s PagequeryCaasApplicationManageResponse) GoString() string {
	return s.String()
}

func (s *PagequeryCaasApplicationManageResponse) SetReqMsgId(v string) *PagequeryCaasApplicationManageResponse {
	s.ReqMsgId = &v
	return s
}

func (s *PagequeryCaasApplicationManageResponse) SetResultCode(v string) *PagequeryCaasApplicationManageResponse {
	s.ResultCode = &v
	return s
}

func (s *PagequeryCaasApplicationManageResponse) SetResultMsg(v string) *PagequeryCaasApplicationManageResponse {
	s.ResultMsg = &v
	return s
}

func (s *PagequeryCaasApplicationManageResponse) SetResult(v *ApplicationPageResp) *PagequeryCaasApplicationManageResponse {
	s.Result = v
	return s
}

type QueryCaasApplicationManageRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 应用程序ID
	ApplicationId *string `json:"application_id,omitempty" xml:"application_id,omitempty" require:"true"`
}

func (s QueryCaasApplicationManageRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryCaasApplicationManageRequest) GoString() string {
	return s.String()
}

func (s *QueryCaasApplicationManageRequest) SetAuthToken(v string) *QueryCaasApplicationManageRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryCaasApplicationManageRequest) SetProductInstanceId(v string) *QueryCaasApplicationManageRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryCaasApplicationManageRequest) SetApplicationId(v string) *QueryCaasApplicationManageRequest {
	s.ApplicationId = &v
	return s
}

type QueryCaasApplicationManageResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 返回结果
	Result *ContractBindListResp `json:"result,omitempty" xml:"result,omitempty"`
}

func (s QueryCaasApplicationManageResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryCaasApplicationManageResponse) GoString() string {
	return s.String()
}

func (s *QueryCaasApplicationManageResponse) SetReqMsgId(v string) *QueryCaasApplicationManageResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryCaasApplicationManageResponse) SetResultCode(v string) *QueryCaasApplicationManageResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryCaasApplicationManageResponse) SetResultMsg(v string) *QueryCaasApplicationManageResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryCaasApplicationManageResponse) SetResult(v *ContractBindListResp) *QueryCaasApplicationManageResponse {
	s.Result = v
	return s
}

type UnbindCaasApplicationManageRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 应用程序ID
	ApplicationId *string `json:"application_id,omitempty" xml:"application_id,omitempty" require:"true"`
}

func (s UnbindCaasApplicationManageRequest) String() string {
	return tea.Prettify(s)
}

func (s UnbindCaasApplicationManageRequest) GoString() string {
	return s.String()
}

func (s *UnbindCaasApplicationManageRequest) SetAuthToken(v string) *UnbindCaasApplicationManageRequest {
	s.AuthToken = &v
	return s
}

func (s *UnbindCaasApplicationManageRequest) SetProductInstanceId(v string) *UnbindCaasApplicationManageRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UnbindCaasApplicationManageRequest) SetApplicationId(v string) *UnbindCaasApplicationManageRequest {
	s.ApplicationId = &v
	return s
}

type UnbindCaasApplicationManageResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UnbindCaasApplicationManageResponse) String() string {
	return tea.Prettify(s)
}

func (s UnbindCaasApplicationManageResponse) GoString() string {
	return s.String()
}

func (s *UnbindCaasApplicationManageResponse) SetReqMsgId(v string) *UnbindCaasApplicationManageResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UnbindCaasApplicationManageResponse) SetResultCode(v string) *UnbindCaasApplicationManageResponse {
	s.ResultCode = &v
	return s
}

func (s *UnbindCaasApplicationManageResponse) SetResultMsg(v string) *UnbindCaasApplicationManageResponse {
	s.ResultMsg = &v
	return s
}

type BindCaasApplicationManageRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 应用ID
	ApplicationId *string `json:"application_id,omitempty" xml:"application_id,omitempty" require:"true"`
	// 合约服务标识集合
	ServiceIds []*string `json:"service_ids,omitempty" xml:"service_ids,omitempty" type:"Repeated"`
}

func (s BindCaasApplicationManageRequest) String() string {
	return tea.Prettify(s)
}

func (s BindCaasApplicationManageRequest) GoString() string {
	return s.String()
}

func (s *BindCaasApplicationManageRequest) SetAuthToken(v string) *BindCaasApplicationManageRequest {
	s.AuthToken = &v
	return s
}

func (s *BindCaasApplicationManageRequest) SetProductInstanceId(v string) *BindCaasApplicationManageRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *BindCaasApplicationManageRequest) SetApplicationId(v string) *BindCaasApplicationManageRequest {
	s.ApplicationId = &v
	return s
}

func (s *BindCaasApplicationManageRequest) SetServiceIds(v []*string) *BindCaasApplicationManageRequest {
	s.ServiceIds = v
	return s
}

type BindCaasApplicationManageResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s BindCaasApplicationManageResponse) String() string {
	return tea.Prettify(s)
}

func (s BindCaasApplicationManageResponse) GoString() string {
	return s.String()
}

func (s *BindCaasApplicationManageResponse) SetReqMsgId(v string) *BindCaasApplicationManageResponse {
	s.ReqMsgId = &v
	return s
}

func (s *BindCaasApplicationManageResponse) SetResultCode(v string) *BindCaasApplicationManageResponse {
	s.ResultCode = &v
	return s
}

func (s *BindCaasApplicationManageResponse) SetResultMsg(v string) *BindCaasApplicationManageResponse {
	s.ResultMsg = &v
	return s
}

type GetCaasApplicationManageRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 应用程序ID
	ApplicationId *string `json:"application_id,omitempty" xml:"application_id,omitempty" require:"true"`
}

func (s GetCaasApplicationManageRequest) String() string {
	return tea.Prettify(s)
}

func (s GetCaasApplicationManageRequest) GoString() string {
	return s.String()
}

func (s *GetCaasApplicationManageRequest) SetAuthToken(v string) *GetCaasApplicationManageRequest {
	s.AuthToken = &v
	return s
}

func (s *GetCaasApplicationManageRequest) SetProductInstanceId(v string) *GetCaasApplicationManageRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *GetCaasApplicationManageRequest) SetApplicationId(v string) *GetCaasApplicationManageRequest {
	s.ApplicationId = &v
	return s
}

type GetCaasApplicationManageResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 返回结果
	Result *ApplicationGetSkResp `json:"result,omitempty" xml:"result,omitempty"`
}

func (s GetCaasApplicationManageResponse) String() string {
	return tea.Prettify(s)
}

func (s GetCaasApplicationManageResponse) GoString() string {
	return s.String()
}

func (s *GetCaasApplicationManageResponse) SetReqMsgId(v string) *GetCaasApplicationManageResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetCaasApplicationManageResponse) SetResultCode(v string) *GetCaasApplicationManageResponse {
	s.ResultCode = &v
	return s
}

func (s *GetCaasApplicationManageResponse) SetResultMsg(v string) *GetCaasApplicationManageResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetCaasApplicationManageResponse) SetResult(v *ApplicationGetSkResp) *GetCaasApplicationManageResponse {
	s.Result = v
	return s
}

type PagequeryCaasContractMarketRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 页码
	Num *int64 `json:"num,omitempty" xml:"num,omitempty" require:"true"`
	// 页大小
	Size *int64 `json:"size,omitempty" xml:"size,omitempty" require:"true"`
	// 链id
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
}

func (s PagequeryCaasContractMarketRequest) String() string {
	return tea.Prettify(s)
}

func (s PagequeryCaasContractMarketRequest) GoString() string {
	return s.String()
}

func (s *PagequeryCaasContractMarketRequest) SetAuthToken(v string) *PagequeryCaasContractMarketRequest {
	s.AuthToken = &v
	return s
}

func (s *PagequeryCaasContractMarketRequest) SetProductInstanceId(v string) *PagequeryCaasContractMarketRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *PagequeryCaasContractMarketRequest) SetNum(v int64) *PagequeryCaasContractMarketRequest {
	s.Num = &v
	return s
}

func (s *PagequeryCaasContractMarketRequest) SetSize(v int64) *PagequeryCaasContractMarketRequest {
	s.Size = &v
	return s
}

func (s *PagequeryCaasContractMarketRequest) SetChainId(v string) *PagequeryCaasContractMarketRequest {
	s.ChainId = &v
	return s
}

type PagequeryCaasContractMarketResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 返回结果
	Result *ContractTemplateListResp `json:"result,omitempty" xml:"result,omitempty"`
}

func (s PagequeryCaasContractMarketResponse) String() string {
	return tea.Prettify(s)
}

func (s PagequeryCaasContractMarketResponse) GoString() string {
	return s.String()
}

func (s *PagequeryCaasContractMarketResponse) SetReqMsgId(v string) *PagequeryCaasContractMarketResponse {
	s.ReqMsgId = &v
	return s
}

func (s *PagequeryCaasContractMarketResponse) SetResultCode(v string) *PagequeryCaasContractMarketResponse {
	s.ResultCode = &v
	return s
}

func (s *PagequeryCaasContractMarketResponse) SetResultMsg(v string) *PagequeryCaasContractMarketResponse {
	s.ResultMsg = &v
	return s
}

func (s *PagequeryCaasContractMarketResponse) SetResult(v *ContractTemplateListResp) *PagequeryCaasContractMarketResponse {
	s.Result = v
	return s
}

type CreateContractRecordRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// abi对应oss key
	AbiOssKey *string `json:"abi_oss_key,omitempty" xml:"abi_oss_key,omitempty" require:"true"`
	// 区块链唯一标识
	Bizid *string `json:"bizid,omitempty" xml:"bizid,omitempty" require:"true"`
	// bytecode对应oss key
	BytecodeOssKey *string `json:"bytecode_oss_key,omitempty" xml:"bytecode_oss_key,omitempty" require:"true"`
	// 16进制表示的合约identity
	Identity *string `json:"identity,omitempty" xml:"identity,omitempty" require:"true" maxLength:"64" minLength:"64"`
	// 合约代码中定义的合约实例名，比如solidity的contract 关键字后面的命名
	InstanceName *string `json:"instance_name,omitempty" xml:"instance_name,omitempty" require:"true"`
	// 合约名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 交易hash
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty" require:"true" maxLength:"64" minLength:"64"`
	// solidity|cpp|go
	Type *string `json:"type,omitempty" xml:"type,omitempty" require:"true"`
}

func (s CreateContractRecordRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateContractRecordRequest) GoString() string {
	return s.String()
}

func (s *CreateContractRecordRequest) SetAuthToken(v string) *CreateContractRecordRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateContractRecordRequest) SetProductInstanceId(v string) *CreateContractRecordRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateContractRecordRequest) SetAbiOssKey(v string) *CreateContractRecordRequest {
	s.AbiOssKey = &v
	return s
}

func (s *CreateContractRecordRequest) SetBizid(v string) *CreateContractRecordRequest {
	s.Bizid = &v
	return s
}

func (s *CreateContractRecordRequest) SetBytecodeOssKey(v string) *CreateContractRecordRequest {
	s.BytecodeOssKey = &v
	return s
}

func (s *CreateContractRecordRequest) SetIdentity(v string) *CreateContractRecordRequest {
	s.Identity = &v
	return s
}

func (s *CreateContractRecordRequest) SetInstanceName(v string) *CreateContractRecordRequest {
	s.InstanceName = &v
	return s
}

func (s *CreateContractRecordRequest) SetName(v string) *CreateContractRecordRequest {
	s.Name = &v
	return s
}

func (s *CreateContractRecordRequest) SetTxHash(v string) *CreateContractRecordRequest {
	s.TxHash = &v
	return s
}

func (s *CreateContractRecordRequest) SetType(v string) *CreateContractRecordRequest {
	s.Type = &v
	return s
}

type CreateContractRecordResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 是否成功
	Result *bool `json:"result,omitempty" xml:"result,omitempty"`
}

func (s CreateContractRecordResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateContractRecordResponse) GoString() string {
	return s.String()
}

func (s *CreateContractRecordResponse) SetReqMsgId(v string) *CreateContractRecordResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateContractRecordResponse) SetResultCode(v string) *CreateContractRecordResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateContractRecordResponse) SetResultMsg(v string) *CreateContractRecordResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateContractRecordResponse) SetResult(v bool) *CreateContractRecordResponse {
	s.Result = &v
	return s
}

type GetContractRecordRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 区块链唯一标识
	Bizid *string `json:"bizid,omitempty" xml:"bizid,omitempty" require:"true"`
	// 16进制表示的合约identity
	Identity *string `json:"identity,omitempty" xml:"identity,omitempty" require:"true" maxLength:"64" minLength:"64"`
}

func (s GetContractRecordRequest) String() string {
	return tea.Prettify(s)
}

func (s GetContractRecordRequest) GoString() string {
	return s.String()
}

func (s *GetContractRecordRequest) SetAuthToken(v string) *GetContractRecordRequest {
	s.AuthToken = &v
	return s
}

func (s *GetContractRecordRequest) SetProductInstanceId(v string) *GetContractRecordRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *GetContractRecordRequest) SetBizid(v string) *GetContractRecordRequest {
	s.Bizid = &v
	return s
}

func (s *GetContractRecordRequest) SetIdentity(v string) *GetContractRecordRequest {
	s.Identity = &v
	return s
}

type GetContractRecordResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 合约部署记录
	Result *ContractRecord `json:"result,omitempty" xml:"result,omitempty"`
}

func (s GetContractRecordResponse) String() string {
	return tea.Prettify(s)
}

func (s GetContractRecordResponse) GoString() string {
	return s.String()
}

func (s *GetContractRecordResponse) SetReqMsgId(v string) *GetContractRecordResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetContractRecordResponse) SetResultCode(v string) *GetContractRecordResponse {
	s.ResultCode = &v
	return s
}

func (s *GetContractRecordResponse) SetResultMsg(v string) *GetContractRecordResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetContractRecordResponse) SetResult(v *ContractRecord) *GetContractRecordResponse {
	s.Result = v
	return s
}

type UpdateContractRecordRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// abi对应oss key
	AbiOssKey *string `json:"abi_oss_key,omitempty" xml:"abi_oss_key,omitempty" require:"true"`
	// 区块链唯一标识
	Bizid *string `json:"bizid,omitempty" xml:"bizid,omitempty" require:"true"`
	// bytecode对应oss key
	BytecodeOssKey *string `json:"bytecode_oss_key,omitempty" xml:"bytecode_oss_key,omitempty" require:"true"`
	// 16进制表示的合约identity
	Identity *string `json:"identity,omitempty" xml:"identity,omitempty" require:"true"`
}

func (s UpdateContractRecordRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateContractRecordRequest) GoString() string {
	return s.String()
}

func (s *UpdateContractRecordRequest) SetAuthToken(v string) *UpdateContractRecordRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateContractRecordRequest) SetProductInstanceId(v string) *UpdateContractRecordRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UpdateContractRecordRequest) SetAbiOssKey(v string) *UpdateContractRecordRequest {
	s.AbiOssKey = &v
	return s
}

func (s *UpdateContractRecordRequest) SetBizid(v string) *UpdateContractRecordRequest {
	s.Bizid = &v
	return s
}

func (s *UpdateContractRecordRequest) SetBytecodeOssKey(v string) *UpdateContractRecordRequest {
	s.BytecodeOssKey = &v
	return s
}

func (s *UpdateContractRecordRequest) SetIdentity(v string) *UpdateContractRecordRequest {
	s.Identity = &v
	return s
}

type UpdateContractRecordResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 是否成功
	Result *bool `json:"result,omitempty" xml:"result,omitempty"`
}

func (s UpdateContractRecordResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateContractRecordResponse) GoString() string {
	return s.String()
}

func (s *UpdateContractRecordResponse) SetReqMsgId(v string) *UpdateContractRecordResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateContractRecordResponse) SetResultCode(v string) *UpdateContractRecordResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateContractRecordResponse) SetResultMsg(v string) *UpdateContractRecordResponse {
	s.ResultMsg = &v
	return s
}

func (s *UpdateContractRecordResponse) SetResult(v bool) *UpdateContractRecordResponse {
	s.Result = &v
	return s
}

type OnlineContractRecordRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 区块链唯一标识
	Bizid *string `json:"bizid,omitempty" xml:"bizid,omitempty" require:"true"`
	// 16进制表示的合约identity
	Identity *string `json:"identity,omitempty" xml:"identity,omitempty" require:"true"`
}

func (s OnlineContractRecordRequest) String() string {
	return tea.Prettify(s)
}

func (s OnlineContractRecordRequest) GoString() string {
	return s.String()
}

func (s *OnlineContractRecordRequest) SetAuthToken(v string) *OnlineContractRecordRequest {
	s.AuthToken = &v
	return s
}

func (s *OnlineContractRecordRequest) SetProductInstanceId(v string) *OnlineContractRecordRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *OnlineContractRecordRequest) SetBizid(v string) *OnlineContractRecordRequest {
	s.Bizid = &v
	return s
}

func (s *OnlineContractRecordRequest) SetIdentity(v string) *OnlineContractRecordRequest {
	s.Identity = &v
	return s
}

type OnlineContractRecordResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 是否成功
	Result *bool `json:"result,omitempty" xml:"result,omitempty"`
}

func (s OnlineContractRecordResponse) String() string {
	return tea.Prettify(s)
}

func (s OnlineContractRecordResponse) GoString() string {
	return s.String()
}

func (s *OnlineContractRecordResponse) SetReqMsgId(v string) *OnlineContractRecordResponse {
	s.ReqMsgId = &v
	return s
}

func (s *OnlineContractRecordResponse) SetResultCode(v string) *OnlineContractRecordResponse {
	s.ResultCode = &v
	return s
}

func (s *OnlineContractRecordResponse) SetResultMsg(v string) *OnlineContractRecordResponse {
	s.ResultMsg = &v
	return s
}

func (s *OnlineContractRecordResponse) SetResult(v bool) *OnlineContractRecordResponse {
	s.Result = &v
	return s
}

type OfflineContractRecordRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 区块链唯一标识
	Bizid *string `json:"bizid,omitempty" xml:"bizid,omitempty" require:"true"`
	// 16进制表示的合约identity
	Identity *string `json:"identity,omitempty" xml:"identity,omitempty" require:"true"`
}

func (s OfflineContractRecordRequest) String() string {
	return tea.Prettify(s)
}

func (s OfflineContractRecordRequest) GoString() string {
	return s.String()
}

func (s *OfflineContractRecordRequest) SetAuthToken(v string) *OfflineContractRecordRequest {
	s.AuthToken = &v
	return s
}

func (s *OfflineContractRecordRequest) SetProductInstanceId(v string) *OfflineContractRecordRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *OfflineContractRecordRequest) SetBizid(v string) *OfflineContractRecordRequest {
	s.Bizid = &v
	return s
}

func (s *OfflineContractRecordRequest) SetIdentity(v string) *OfflineContractRecordRequest {
	s.Identity = &v
	return s
}

type OfflineContractRecordResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 是否成功
	Result *bool `json:"result,omitempty" xml:"result,omitempty"`
}

func (s OfflineContractRecordResponse) String() string {
	return tea.Prettify(s)
}

func (s OfflineContractRecordResponse) GoString() string {
	return s.String()
}

func (s *OfflineContractRecordResponse) SetReqMsgId(v string) *OfflineContractRecordResponse {
	s.ReqMsgId = &v
	return s
}

func (s *OfflineContractRecordResponse) SetResultCode(v string) *OfflineContractRecordResponse {
	s.ResultCode = &v
	return s
}

func (s *OfflineContractRecordResponse) SetResultMsg(v string) *OfflineContractRecordResponse {
	s.ResultMsg = &v
	return s
}

func (s *OfflineContractRecordResponse) SetResult(v bool) *OfflineContractRecordResponse {
	s.Result = &v
	return s
}

type QueryContractRecordRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 区块链唯一标识
	Bizid *string `json:"bizid,omitempty" xml:"bizid,omitempty" require:"true"`
	// 页号
	PageNo *int64 `json:"page_no,omitempty" xml:"page_no,omitempty" require:"true"`
	// 页大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
	// 查询状态
	QueryStatus *int64 `json:"query_status,omitempty" xml:"query_status,omitempty"`
}

func (s QueryContractRecordRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryContractRecordRequest) GoString() string {
	return s.String()
}

func (s *QueryContractRecordRequest) SetAuthToken(v string) *QueryContractRecordRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryContractRecordRequest) SetProductInstanceId(v string) *QueryContractRecordRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryContractRecordRequest) SetBizid(v string) *QueryContractRecordRequest {
	s.Bizid = &v
	return s
}

func (s *QueryContractRecordRequest) SetPageNo(v int64) *QueryContractRecordRequest {
	s.PageNo = &v
	return s
}

func (s *QueryContractRecordRequest) SetPageSize(v int64) *QueryContractRecordRequest {
	s.PageSize = &v
	return s
}

func (s *QueryContractRecordRequest) SetQueryStatus(v int64) *QueryContractRecordRequest {
	s.QueryStatus = &v
	return s
}

type QueryContractRecordResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 当前页元素列表
	Content []*ContractRecord `json:"content,omitempty" xml:"content,omitempty" type:"Repeated"`
	// 当前页号
	Number *string `json:"number,omitempty" xml:"number,omitempty"`
	// 当前页大小
	Size *string `json:"size,omitempty" xml:"size,omitempty"`
	// 元素总个数
	TotalElements *int64 `json:"total_elements,omitempty" xml:"total_elements,omitempty"`
	// 总页数
	TotalPages *int64 `json:"total_pages,omitempty" xml:"total_pages,omitempty"`
}

func (s QueryContractRecordResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryContractRecordResponse) GoString() string {
	return s.String()
}

func (s *QueryContractRecordResponse) SetReqMsgId(v string) *QueryContractRecordResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryContractRecordResponse) SetResultCode(v string) *QueryContractRecordResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryContractRecordResponse) SetResultMsg(v string) *QueryContractRecordResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryContractRecordResponse) SetContent(v []*ContractRecord) *QueryContractRecordResponse {
	s.Content = v
	return s
}

func (s *QueryContractRecordResponse) SetNumber(v string) *QueryContractRecordResponse {
	s.Number = &v
	return s
}

func (s *QueryContractRecordResponse) SetSize(v string) *QueryContractRecordResponse {
	s.Size = &v
	return s
}

func (s *QueryContractRecordResponse) SetTotalElements(v int64) *QueryContractRecordResponse {
	s.TotalElements = &v
	return s
}

func (s *QueryContractRecordResponse) SetTotalPages(v int64) *QueryContractRecordResponse {
	s.TotalPages = &v
	return s
}

type ExecContractDelegateRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 区块链唯一标识
	Bizid *string `json:"bizid,omitempty" xml:"bizid,omitempty" require:"true"`
	// 交易消息体
	Body *string `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ExecContractDelegateRequest) String() string {
	return tea.Prettify(s)
}

func (s ExecContractDelegateRequest) GoString() string {
	return s.String()
}

func (s *ExecContractDelegateRequest) SetAuthToken(v string) *ExecContractDelegateRequest {
	s.AuthToken = &v
	return s
}

func (s *ExecContractDelegateRequest) SetProductInstanceId(v string) *ExecContractDelegateRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ExecContractDelegateRequest) SetBizid(v string) *ExecContractDelegateRequest {
	s.Bizid = &v
	return s
}

func (s *ExecContractDelegateRequest) SetBody(v string) *ExecContractDelegateRequest {
	s.Body = &v
	return s
}

type ExecContractDelegateResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 返回结果
	Result *string `json:"result,omitempty" xml:"result,omitempty"`
}

func (s ExecContractDelegateResponse) String() string {
	return tea.Prettify(s)
}

func (s ExecContractDelegateResponse) GoString() string {
	return s.String()
}

func (s *ExecContractDelegateResponse) SetReqMsgId(v string) *ExecContractDelegateResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ExecContractDelegateResponse) SetResultCode(v string) *ExecContractDelegateResponse {
	s.ResultCode = &v
	return s
}

func (s *ExecContractDelegateResponse) SetResultMsg(v string) *ExecContractDelegateResponse {
	s.ResultMsg = &v
	return s
}

func (s *ExecContractDelegateResponse) SetResult(v string) *ExecContractDelegateResponse {
	s.Result = &v
	return s
}

type ExecContractServiceRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 区块链唯一标识
	Bizid *string `json:"bizid,omitempty" xml:"bizid,omitempty" require:"true"`
	// 交易消息体
	Body *string `json:"body,omitempty" xml:"body,omitempty" require:"true"`
	// 16进制表示的合约identity
	Identity *string `json:"identity,omitempty" xml:"identity,omitempty" require:"true"`
}

func (s ExecContractServiceRequest) String() string {
	return tea.Prettify(s)
}

func (s ExecContractServiceRequest) GoString() string {
	return s.String()
}

func (s *ExecContractServiceRequest) SetAuthToken(v string) *ExecContractServiceRequest {
	s.AuthToken = &v
	return s
}

func (s *ExecContractServiceRequest) SetProductInstanceId(v string) *ExecContractServiceRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ExecContractServiceRequest) SetBizid(v string) *ExecContractServiceRequest {
	s.Bizid = &v
	return s
}

func (s *ExecContractServiceRequest) SetBody(v string) *ExecContractServiceRequest {
	s.Body = &v
	return s
}

func (s *ExecContractServiceRequest) SetIdentity(v string) *ExecContractServiceRequest {
	s.Identity = &v
	return s
}

type ExecContractServiceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 执行结果
	Result *string `json:"result,omitempty" xml:"result,omitempty"`
}

func (s ExecContractServiceResponse) String() string {
	return tea.Prettify(s)
}

func (s ExecContractServiceResponse) GoString() string {
	return s.String()
}

func (s *ExecContractServiceResponse) SetReqMsgId(v string) *ExecContractServiceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ExecContractServiceResponse) SetResultCode(v string) *ExecContractServiceResponse {
	s.ResultCode = &v
	return s
}

func (s *ExecContractServiceResponse) SetResultMsg(v string) *ExecContractServiceResponse {
	s.ResultMsg = &v
	return s
}

func (s *ExecContractServiceResponse) SetResult(v string) *ExecContractServiceResponse {
	s.Result = &v
	return s
}

type GetContractConfigChainRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
}

func (s GetContractConfigChainRequest) String() string {
	return tea.Prettify(s)
}

func (s GetContractConfigChainRequest) GoString() string {
	return s.String()
}

func (s *GetContractConfigChainRequest) SetAuthToken(v string) *GetContractConfigChainRequest {
	s.AuthToken = &v
	return s
}

func (s *GetContractConfigChainRequest) SetProductInstanceId(v string) *GetContractConfigChainRequest {
	s.ProductInstanceId = &v
	return s
}

type GetContractConfigChainResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 当前租户具有访问权限的合约链配置信息列表
	Result *ContractIdeConfigResult `json:"result,omitempty" xml:"result,omitempty"`
}

func (s GetContractConfigChainResponse) String() string {
	return tea.Prettify(s)
}

func (s GetContractConfigChainResponse) GoString() string {
	return s.String()
}

func (s *GetContractConfigChainResponse) SetReqMsgId(v string) *GetContractConfigChainResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetContractConfigChainResponse) SetResultCode(v string) *GetContractConfigChainResponse {
	s.ResultCode = &v
	return s
}

func (s *GetContractConfigChainResponse) SetResultMsg(v string) *GetContractConfigChainResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetContractConfigChainResponse) SetResult(v *ContractIdeConfigResult) *GetContractConfigChainResponse {
	s.Result = v
	return s
}

type GetContractAbiUrlRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
}

func (s GetContractAbiUrlRequest) String() string {
	return tea.Prettify(s)
}

func (s GetContractAbiUrlRequest) GoString() string {
	return s.String()
}

func (s *GetContractAbiUrlRequest) SetAuthToken(v string) *GetContractAbiUrlRequest {
	s.AuthToken = &v
	return s
}

func (s *GetContractAbiUrlRequest) SetProductInstanceId(v string) *GetContractAbiUrlRequest {
	s.ProductInstanceId = &v
	return s
}

type GetContractAbiUrlResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 可用于上传文件到oss的相关oss client字段配置，包括服务端的签名，url超期时间等。
	Result *PresignedUrlPolicy `json:"result,omitempty" xml:"result,omitempty"`
}

func (s GetContractAbiUrlResponse) String() string {
	return tea.Prettify(s)
}

func (s GetContractAbiUrlResponse) GoString() string {
	return s.String()
}

func (s *GetContractAbiUrlResponse) SetReqMsgId(v string) *GetContractAbiUrlResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetContractAbiUrlResponse) SetResultCode(v string) *GetContractAbiUrlResponse {
	s.ResultCode = &v
	return s
}

func (s *GetContractAbiUrlResponse) SetResultMsg(v string) *GetContractAbiUrlResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetContractAbiUrlResponse) SetResult(v *PresignedUrlPolicy) *GetContractAbiUrlResponse {
	s.Result = v
	return s
}

type GetContractBytecodeUrlRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
}

func (s GetContractBytecodeUrlRequest) String() string {
	return tea.Prettify(s)
}

func (s GetContractBytecodeUrlRequest) GoString() string {
	return s.String()
}

func (s *GetContractBytecodeUrlRequest) SetAuthToken(v string) *GetContractBytecodeUrlRequest {
	s.AuthToken = &v
	return s
}

func (s *GetContractBytecodeUrlRequest) SetProductInstanceId(v string) *GetContractBytecodeUrlRequest {
	s.ProductInstanceId = &v
	return s
}

type GetContractBytecodeUrlResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 可用于上传文件到oss的相关oss client字段配置，包括服务端的签名，url超期时间等。
	Result *PresignedUrlPolicy `json:"result,omitempty" xml:"result,omitempty"`
}

func (s GetContractBytecodeUrlResponse) String() string {
	return tea.Prettify(s)
}

func (s GetContractBytecodeUrlResponse) GoString() string {
	return s.String()
}

func (s *GetContractBytecodeUrlResponse) SetReqMsgId(v string) *GetContractBytecodeUrlResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetContractBytecodeUrlResponse) SetResultCode(v string) *GetContractBytecodeUrlResponse {
	s.ResultCode = &v
	return s
}

func (s *GetContractBytecodeUrlResponse) SetResultMsg(v string) *GetContractBytecodeUrlResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetContractBytecodeUrlResponse) SetResult(v *PresignedUrlPolicy) *GetContractBytecodeUrlResponse {
	s.Result = v
	return s
}

type UploadDataFileBatchqueryRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 上传文件md5值
	FileMd5 *string `json:"file_md5,omitempty" xml:"file_md5,omitempty" require:"true"`
	// 数据集id
	DataSetId *string `json:"data_set_id,omitempty" xml:"data_set_id,omitempty" require:"true"`
	// 文件id
	// 待上传文件
	FileObject io.Reader `json:"fileObject,omitempty" xml:"fileObject,omitempty"`
	// 待上传文件名
	FileObjectName *string `json:"fileObjectName,omitempty" xml:"fileObjectName,omitempty"`
	FileId         *string `json:"file_id,omitempty" xml:"file_id,omitempty" require:"true"`
}

func (s UploadDataFileBatchqueryRequest) String() string {
	return tea.Prettify(s)
}

func (s UploadDataFileBatchqueryRequest) GoString() string {
	return s.String()
}

func (s *UploadDataFileBatchqueryRequest) SetAuthToken(v string) *UploadDataFileBatchqueryRequest {
	s.AuthToken = &v
	return s
}

func (s *UploadDataFileBatchqueryRequest) SetProductInstanceId(v string) *UploadDataFileBatchqueryRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UploadDataFileBatchqueryRequest) SetFileMd5(v string) *UploadDataFileBatchqueryRequest {
	s.FileMd5 = &v
	return s
}

func (s *UploadDataFileBatchqueryRequest) SetDataSetId(v string) *UploadDataFileBatchqueryRequest {
	s.DataSetId = &v
	return s
}

func (s *UploadDataFileBatchqueryRequest) SetFileObject(v io.Reader) *UploadDataFileBatchqueryRequest {
	s.FileObject = v
	return s
}

func (s *UploadDataFileBatchqueryRequest) SetFileObjectName(v string) *UploadDataFileBatchqueryRequest {
	s.FileObjectName = &v
	return s
}

func (s *UploadDataFileBatchqueryRequest) SetFileId(v string) *UploadDataFileBatchqueryRequest {
	s.FileId = &v
	return s
}

type UploadDataFileBatchqueryResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 离线任务查询id，批量任务结束后可通过该字段查询结果
	QueryId *string `json:"query_id,omitempty" xml:"query_id,omitempty"`
}

func (s UploadDataFileBatchqueryResponse) String() string {
	return tea.Prettify(s)
}

func (s UploadDataFileBatchqueryResponse) GoString() string {
	return s.String()
}

func (s *UploadDataFileBatchqueryResponse) SetReqMsgId(v string) *UploadDataFileBatchqueryResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UploadDataFileBatchqueryResponse) SetResultCode(v string) *UploadDataFileBatchqueryResponse {
	s.ResultCode = &v
	return s
}

func (s *UploadDataFileBatchqueryResponse) SetResultMsg(v string) *UploadDataFileBatchqueryResponse {
	s.ResultMsg = &v
	return s
}

func (s *UploadDataFileBatchqueryResponse) SetQueryId(v string) *UploadDataFileBatchqueryResponse {
	s.QueryId = &v
	return s
}

type QueryDataResultBatchqueryRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 上传待查询数据集文件后得到的查询id，在此接口进行结果查询
	QueryId *string `json:"query_id,omitempty" xml:"query_id,omitempty" require:"true"`
}

func (s QueryDataResultBatchqueryRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDataResultBatchqueryRequest) GoString() string {
	return s.String()
}

func (s *QueryDataResultBatchqueryRequest) SetAuthToken(v string) *QueryDataResultBatchqueryRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryDataResultBatchqueryRequest) SetProductInstanceId(v string) *QueryDataResultBatchqueryRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryDataResultBatchqueryRequest) SetQueryId(v string) *QueryDataResultBatchqueryRequest {
	s.QueryId = &v
	return s
}

type QueryDataResultBatchqueryResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 结果文件临时链接
	FilePath *string `json:"file_path,omitempty" xml:"file_path,omitempty"`
}

func (s QueryDataResultBatchqueryResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDataResultBatchqueryResponse) GoString() string {
	return s.String()
}

func (s *QueryDataResultBatchqueryResponse) SetReqMsgId(v string) *QueryDataResultBatchqueryResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryDataResultBatchqueryResponse) SetResultCode(v string) *QueryDataResultBatchqueryResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryDataResultBatchqueryResponse) SetResultMsg(v string) *QueryDataResultBatchqueryResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryDataResultBatchqueryResponse) SetFilePath(v string) *QueryDataResultBatchqueryResponse {
	s.FilePath = &v
	return s
}

type CreateDataauthorizationParticipantRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 账户名称
	Account *string `json:"account,omitempty" xml:"account,omitempty"`
	// 业务系统唯一标示
	BizUid *string `json:"biz_uid,omitempty" xml:"biz_uid,omitempty" require:"true" maxLength:"64"`
	// 区块链ID
	BlockchainId *string `json:"blockchain_id,omitempty" xml:"blockchain_id,omitempty"`
	// 信用编号
	CreditNumber *string `json:"credit_number,omitempty" xml:"credit_number,omitempty"`
	// 扩展参数，标准JSON格式
	ExtensionInfo *string `json:"extension_info,omitempty" xml:"extension_info,omitempty" maxLength:"2000"`
	// 用户名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true" maxLength:"64"`
	// 回调通知服务地址
	NotificationService *string `json:"notification_service,omitempty" xml:"notification_service,omitempty"`
	// did doc中的公开信息
	PublicInfo *string `json:"public_info,omitempty" xml:"public_info,omitempty"`
	// 用户角色列表
	Role []*string `json:"role,omitempty" xml:"role,omitempty" require:"true" type:"Repeated"`
	// 空间ID
	SpaceId *string `json:"space_id,omitempty" xml:"space_id,omitempty"`
}

func (s CreateDataauthorizationParticipantRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDataauthorizationParticipantRequest) GoString() string {
	return s.String()
}

func (s *CreateDataauthorizationParticipantRequest) SetAuthToken(v string) *CreateDataauthorizationParticipantRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateDataauthorizationParticipantRequest) SetProductInstanceId(v string) *CreateDataauthorizationParticipantRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateDataauthorizationParticipantRequest) SetAccount(v string) *CreateDataauthorizationParticipantRequest {
	s.Account = &v
	return s
}

func (s *CreateDataauthorizationParticipantRequest) SetBizUid(v string) *CreateDataauthorizationParticipantRequest {
	s.BizUid = &v
	return s
}

func (s *CreateDataauthorizationParticipantRequest) SetBlockchainId(v string) *CreateDataauthorizationParticipantRequest {
	s.BlockchainId = &v
	return s
}

func (s *CreateDataauthorizationParticipantRequest) SetCreditNumber(v string) *CreateDataauthorizationParticipantRequest {
	s.CreditNumber = &v
	return s
}

func (s *CreateDataauthorizationParticipantRequest) SetExtensionInfo(v string) *CreateDataauthorizationParticipantRequest {
	s.ExtensionInfo = &v
	return s
}

func (s *CreateDataauthorizationParticipantRequest) SetName(v string) *CreateDataauthorizationParticipantRequest {
	s.Name = &v
	return s
}

func (s *CreateDataauthorizationParticipantRequest) SetNotificationService(v string) *CreateDataauthorizationParticipantRequest {
	s.NotificationService = &v
	return s
}

func (s *CreateDataauthorizationParticipantRequest) SetPublicInfo(v string) *CreateDataauthorizationParticipantRequest {
	s.PublicInfo = &v
	return s
}

func (s *CreateDataauthorizationParticipantRequest) SetRole(v []*string) *CreateDataauthorizationParticipantRequest {
	s.Role = v
	return s
}

func (s *CreateDataauthorizationParticipantRequest) SetSpaceId(v string) *CreateDataauthorizationParticipantRequest {
	s.SpaceId = &v
	return s
}

type CreateDataauthorizationParticipantResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 参与方信息
	Participant *Participant `json:"participant,omitempty" xml:"participant,omitempty"`
}

func (s CreateDataauthorizationParticipantResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDataauthorizationParticipantResponse) GoString() string {
	return s.String()
}

func (s *CreateDataauthorizationParticipantResponse) SetReqMsgId(v string) *CreateDataauthorizationParticipantResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateDataauthorizationParticipantResponse) SetResultCode(v string) *CreateDataauthorizationParticipantResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateDataauthorizationParticipantResponse) SetResultMsg(v string) *CreateDataauthorizationParticipantResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateDataauthorizationParticipantResponse) SetParticipant(v *Participant) *CreateDataauthorizationParticipantResponse {
	s.Participant = v
	return s
}

type DeleteDataauthorizationParticipantRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 参与方ID
	ParticipantId *string `json:"participant_id,omitempty" xml:"participant_id,omitempty" require:"true"`
}

func (s DeleteDataauthorizationParticipantRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDataauthorizationParticipantRequest) GoString() string {
	return s.String()
}

func (s *DeleteDataauthorizationParticipantRequest) SetAuthToken(v string) *DeleteDataauthorizationParticipantRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteDataauthorizationParticipantRequest) SetProductInstanceId(v string) *DeleteDataauthorizationParticipantRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *DeleteDataauthorizationParticipantRequest) SetParticipantId(v string) *DeleteDataauthorizationParticipantRequest {
	s.ParticipantId = &v
	return s
}

type DeleteDataauthorizationParticipantResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s DeleteDataauthorizationParticipantResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDataauthorizationParticipantResponse) GoString() string {
	return s.String()
}

func (s *DeleteDataauthorizationParticipantResponse) SetReqMsgId(v string) *DeleteDataauthorizationParticipantResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteDataauthorizationParticipantResponse) SetResultCode(v string) *DeleteDataauthorizationParticipantResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteDataauthorizationParticipantResponse) SetResultMsg(v string) *DeleteDataauthorizationParticipantResponse {
	s.ResultMsg = &v
	return s
}

type UpdateDataauthorizationParticipantRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 扩展参数，标准JSON格式
	ExtensionInfo *string `json:"extension_info,omitempty" xml:"extension_info,omitempty" maxLength:"2000"`
	// 用户名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true" maxLength:"64"`
	// 回调通知服务地址
	NotificationService *string `json:"notification_service,omitempty" xml:"notification_service,omitempty"`
	// 参与方ID
	ParticipantId *string `json:"participant_id,omitempty" xml:"participant_id,omitempty" require:"true" maxLength:"100"`
	// did doc中的公开信息
	PublicInfo *string `json:"public_info,omitempty" xml:"public_info,omitempty"`
	// 用户角色列表
	Role []*string `json:"role,omitempty" xml:"role,omitempty" require:"true" type:"Repeated"`
	// 账户名称
	Account *string `json:"account,omitempty" xml:"account,omitempty"`
}

func (s UpdateDataauthorizationParticipantRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateDataauthorizationParticipantRequest) GoString() string {
	return s.String()
}

func (s *UpdateDataauthorizationParticipantRequest) SetAuthToken(v string) *UpdateDataauthorizationParticipantRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateDataauthorizationParticipantRequest) SetProductInstanceId(v string) *UpdateDataauthorizationParticipantRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UpdateDataauthorizationParticipantRequest) SetExtensionInfo(v string) *UpdateDataauthorizationParticipantRequest {
	s.ExtensionInfo = &v
	return s
}

func (s *UpdateDataauthorizationParticipantRequest) SetName(v string) *UpdateDataauthorizationParticipantRequest {
	s.Name = &v
	return s
}

func (s *UpdateDataauthorizationParticipantRequest) SetNotificationService(v string) *UpdateDataauthorizationParticipantRequest {
	s.NotificationService = &v
	return s
}

func (s *UpdateDataauthorizationParticipantRequest) SetParticipantId(v string) *UpdateDataauthorizationParticipantRequest {
	s.ParticipantId = &v
	return s
}

func (s *UpdateDataauthorizationParticipantRequest) SetPublicInfo(v string) *UpdateDataauthorizationParticipantRequest {
	s.PublicInfo = &v
	return s
}

func (s *UpdateDataauthorizationParticipantRequest) SetRole(v []*string) *UpdateDataauthorizationParticipantRequest {
	s.Role = v
	return s
}

func (s *UpdateDataauthorizationParticipantRequest) SetAccount(v string) *UpdateDataauthorizationParticipantRequest {
	s.Account = &v
	return s
}

type UpdateDataauthorizationParticipantResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateDataauthorizationParticipantResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateDataauthorizationParticipantResponse) GoString() string {
	return s.String()
}

func (s *UpdateDataauthorizationParticipantResponse) SetReqMsgId(v string) *UpdateDataauthorizationParticipantResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateDataauthorizationParticipantResponse) SetResultCode(v string) *UpdateDataauthorizationParticipantResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateDataauthorizationParticipantResponse) SetResultMsg(v string) *UpdateDataauthorizationParticipantResponse {
	s.ResultMsg = &v
	return s
}

type QueryDataauthorizationParticipantRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 参与方ID
	ParticipantId *string `json:"participant_id,omitempty" xml:"participant_id,omitempty" require:"true" maxLength:"100"`
}

func (s QueryDataauthorizationParticipantRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDataauthorizationParticipantRequest) GoString() string {
	return s.String()
}

func (s *QueryDataauthorizationParticipantRequest) SetAuthToken(v string) *QueryDataauthorizationParticipantRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryDataauthorizationParticipantRequest) SetProductInstanceId(v string) *QueryDataauthorizationParticipantRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryDataauthorizationParticipantRequest) SetParticipantId(v string) *QueryDataauthorizationParticipantRequest {
	s.ParticipantId = &v
	return s
}

type QueryDataauthorizationParticipantResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 参与方信息
	Participant *Participant `json:"participant,omitempty" xml:"participant,omitempty"`
}

func (s QueryDataauthorizationParticipantResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDataauthorizationParticipantResponse) GoString() string {
	return s.String()
}

func (s *QueryDataauthorizationParticipantResponse) SetReqMsgId(v string) *QueryDataauthorizationParticipantResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryDataauthorizationParticipantResponse) SetResultCode(v string) *QueryDataauthorizationParticipantResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryDataauthorizationParticipantResponse) SetResultMsg(v string) *QueryDataauthorizationParticipantResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryDataauthorizationParticipantResponse) SetParticipant(v *Participant) *QueryDataauthorizationParticipantResponse {
	s.Participant = v
	return s
}

type ListDataauthorizationParticipantRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 空间ID
	SpaceId *string `json:"space_id,omitempty" xml:"space_id,omitempty"`
	// 用户角色
	Role *string `json:"role,omitempty" xml:"role,omitempty" require:"true"`
}

func (s ListDataauthorizationParticipantRequest) String() string {
	return tea.Prettify(s)
}

func (s ListDataauthorizationParticipantRequest) GoString() string {
	return s.String()
}

func (s *ListDataauthorizationParticipantRequest) SetAuthToken(v string) *ListDataauthorizationParticipantRequest {
	s.AuthToken = &v
	return s
}

func (s *ListDataauthorizationParticipantRequest) SetProductInstanceId(v string) *ListDataauthorizationParticipantRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ListDataauthorizationParticipantRequest) SetSpaceId(v string) *ListDataauthorizationParticipantRequest {
	s.SpaceId = &v
	return s
}

func (s *ListDataauthorizationParticipantRequest) SetRole(v string) *ListDataauthorizationParticipantRequest {
	s.Role = &v
	return s
}

type ListDataauthorizationParticipantResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 参与方列表
	Participants []*Participant `json:"participants,omitempty" xml:"participants,omitempty" type:"Repeated"`
}

func (s ListDataauthorizationParticipantResponse) String() string {
	return tea.Prettify(s)
}

func (s ListDataauthorizationParticipantResponse) GoString() string {
	return s.String()
}

func (s *ListDataauthorizationParticipantResponse) SetReqMsgId(v string) *ListDataauthorizationParticipantResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListDataauthorizationParticipantResponse) SetResultCode(v string) *ListDataauthorizationParticipantResponse {
	s.ResultCode = &v
	return s
}

func (s *ListDataauthorizationParticipantResponse) SetResultMsg(v string) *ListDataauthorizationParticipantResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListDataauthorizationParticipantResponse) SetParticipants(v []*Participant) *ListDataauthorizationParticipantResponse {
	s.Participants = v
	return s
}

type CreateDataauthorizationDataEntityRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 业务系统数据对象唯一标示
	BizUid *string `json:"biz_uid,omitempty" xml:"biz_uid,omitempty" require:"true"`
	// 区块链ID
	BlockchainId *string `json:"blockchain_id,omitempty" xml:"blockchain_id,omitempty"`
	// 数据类别
	Category *string `json:"category,omitempty" xml:"category,omitempty" require:"true" maxLength:"32"`
	// 数据模型ID
	DataModelId *string `json:"data_model_id,omitempty" xml:"data_model_id,omitempty"`
	// 扩展参数，标准JSON格式
	ExtensionInfo *string `json:"extension_info,omitempty" xml:"extension_info,omitempty" maxLength:"2000"`
	// 数据名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true" maxLength:"64"`
	// 数据所有者ID
	OwnerId *string `json:"owner_id,omitempty" xml:"owner_id,omitempty" require:"true" maxLength:"100"`
	// 审批模版
	ProcessTemplate []*ProcessNode `json:"process_template,omitempty" xml:"process_template,omitempty" type:"Repeated"`
	// DID doc里的公开信息
	PublicInfo *string `json:"public_info,omitempty" xml:"public_info,omitempty"`
}

func (s CreateDataauthorizationDataEntityRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDataauthorizationDataEntityRequest) GoString() string {
	return s.String()
}

func (s *CreateDataauthorizationDataEntityRequest) SetAuthToken(v string) *CreateDataauthorizationDataEntityRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateDataauthorizationDataEntityRequest) SetProductInstanceId(v string) *CreateDataauthorizationDataEntityRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateDataauthorizationDataEntityRequest) SetBizUid(v string) *CreateDataauthorizationDataEntityRequest {
	s.BizUid = &v
	return s
}

func (s *CreateDataauthorizationDataEntityRequest) SetBlockchainId(v string) *CreateDataauthorizationDataEntityRequest {
	s.BlockchainId = &v
	return s
}

func (s *CreateDataauthorizationDataEntityRequest) SetCategory(v string) *CreateDataauthorizationDataEntityRequest {
	s.Category = &v
	return s
}

func (s *CreateDataauthorizationDataEntityRequest) SetDataModelId(v string) *CreateDataauthorizationDataEntityRequest {
	s.DataModelId = &v
	return s
}

func (s *CreateDataauthorizationDataEntityRequest) SetExtensionInfo(v string) *CreateDataauthorizationDataEntityRequest {
	s.ExtensionInfo = &v
	return s
}

func (s *CreateDataauthorizationDataEntityRequest) SetName(v string) *CreateDataauthorizationDataEntityRequest {
	s.Name = &v
	return s
}

func (s *CreateDataauthorizationDataEntityRequest) SetOwnerId(v string) *CreateDataauthorizationDataEntityRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateDataauthorizationDataEntityRequest) SetProcessTemplate(v []*ProcessNode) *CreateDataauthorizationDataEntityRequest {
	s.ProcessTemplate = v
	return s
}

func (s *CreateDataauthorizationDataEntityRequest) SetPublicInfo(v string) *CreateDataauthorizationDataEntityRequest {
	s.PublicInfo = &v
	return s
}

type CreateDataauthorizationDataEntityResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 数据对象ID
	DataId *string `json:"data_id,omitempty" xml:"data_id,omitempty"`
}

func (s CreateDataauthorizationDataEntityResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDataauthorizationDataEntityResponse) GoString() string {
	return s.String()
}

func (s *CreateDataauthorizationDataEntityResponse) SetReqMsgId(v string) *CreateDataauthorizationDataEntityResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateDataauthorizationDataEntityResponse) SetResultCode(v string) *CreateDataauthorizationDataEntityResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateDataauthorizationDataEntityResponse) SetResultMsg(v string) *CreateDataauthorizationDataEntityResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateDataauthorizationDataEntityResponse) SetDataId(v string) *CreateDataauthorizationDataEntityResponse {
	s.DataId = &v
	return s
}

type QueryDataauthorizationDataEntityRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 数据ID
	DataId *string `json:"data_id,omitempty" xml:"data_id,omitempty" require:"true" maxLength:"100"`
}

func (s QueryDataauthorizationDataEntityRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDataauthorizationDataEntityRequest) GoString() string {
	return s.String()
}

func (s *QueryDataauthorizationDataEntityRequest) SetAuthToken(v string) *QueryDataauthorizationDataEntityRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryDataauthorizationDataEntityRequest) SetProductInstanceId(v string) *QueryDataauthorizationDataEntityRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryDataauthorizationDataEntityRequest) SetDataId(v string) *QueryDataauthorizationDataEntityRequest {
	s.DataId = &v
	return s
}

type QueryDataauthorizationDataEntityResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 数据目录详细信息
	DataEntity *DataEntity `json:"data_entity,omitempty" xml:"data_entity,omitempty"`
}

func (s QueryDataauthorizationDataEntityResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDataauthorizationDataEntityResponse) GoString() string {
	return s.String()
}

func (s *QueryDataauthorizationDataEntityResponse) SetReqMsgId(v string) *QueryDataauthorizationDataEntityResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryDataauthorizationDataEntityResponse) SetResultCode(v string) *QueryDataauthorizationDataEntityResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryDataauthorizationDataEntityResponse) SetResultMsg(v string) *QueryDataauthorizationDataEntityResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryDataauthorizationDataEntityResponse) SetDataEntity(v *DataEntity) *QueryDataauthorizationDataEntityResponse {
	s.DataEntity = v
	return s
}

type UpdateDataauthorizationPublicKeyRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 公钥列表
	PublicKeys []*PublicKey `json:"public_keys,omitempty" xml:"public_keys,omitempty" require:"true" type:"Repeated"`
}

func (s UpdateDataauthorizationPublicKeyRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateDataauthorizationPublicKeyRequest) GoString() string {
	return s.String()
}

func (s *UpdateDataauthorizationPublicKeyRequest) SetAuthToken(v string) *UpdateDataauthorizationPublicKeyRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateDataauthorizationPublicKeyRequest) SetProductInstanceId(v string) *UpdateDataauthorizationPublicKeyRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UpdateDataauthorizationPublicKeyRequest) SetPublicKeys(v []*PublicKey) *UpdateDataauthorizationPublicKeyRequest {
	s.PublicKeys = v
	return s
}

type UpdateDataauthorizationPublicKeyResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateDataauthorizationPublicKeyResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateDataauthorizationPublicKeyResponse) GoString() string {
	return s.String()
}

func (s *UpdateDataauthorizationPublicKeyResponse) SetReqMsgId(v string) *UpdateDataauthorizationPublicKeyResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateDataauthorizationPublicKeyResponse) SetResultCode(v string) *UpdateDataauthorizationPublicKeyResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateDataauthorizationPublicKeyResponse) SetResultMsg(v string) *UpdateDataauthorizationPublicKeyResponse {
	s.ResultMsg = &v
	return s
}

type ListDataauthorizationPublicKeyRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 生成公钥时的关联关系
	PublicKeyRelations []*PublicKeyRelation `json:"public_key_relations,omitempty" xml:"public_key_relations,omitempty" require:"true" type:"Repeated"`
}

func (s ListDataauthorizationPublicKeyRequest) String() string {
	return tea.Prettify(s)
}

func (s ListDataauthorizationPublicKeyRequest) GoString() string {
	return s.String()
}

func (s *ListDataauthorizationPublicKeyRequest) SetAuthToken(v string) *ListDataauthorizationPublicKeyRequest {
	s.AuthToken = &v
	return s
}

func (s *ListDataauthorizationPublicKeyRequest) SetProductInstanceId(v string) *ListDataauthorizationPublicKeyRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ListDataauthorizationPublicKeyRequest) SetPublicKeyRelations(v []*PublicKeyRelation) *ListDataauthorizationPublicKeyRequest {
	s.PublicKeyRelations = v
	return s
}

type ListDataauthorizationPublicKeyResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 公钥列表
	PublicKeys []*PublicKey `json:"public_keys,omitempty" xml:"public_keys,omitempty" type:"Repeated"`
}

func (s ListDataauthorizationPublicKeyResponse) String() string {
	return tea.Prettify(s)
}

func (s ListDataauthorizationPublicKeyResponse) GoString() string {
	return s.String()
}

func (s *ListDataauthorizationPublicKeyResponse) SetReqMsgId(v string) *ListDataauthorizationPublicKeyResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListDataauthorizationPublicKeyResponse) SetResultCode(v string) *ListDataauthorizationPublicKeyResponse {
	s.ResultCode = &v
	return s
}

func (s *ListDataauthorizationPublicKeyResponse) SetResultMsg(v string) *ListDataauthorizationPublicKeyResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListDataauthorizationPublicKeyResponse) SetPublicKeys(v []*PublicKey) *ListDataauthorizationPublicKeyResponse {
	s.PublicKeys = v
	return s
}

type OpenDataauthorizationAuthorizationServiceRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 租户ID
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty" require:"true" maxLength:"50"`
	// 租户AK
	TenantAccessKey *string `json:"tenant_access_key,omitempty" xml:"tenant_access_key,omitempty"`
	// 开通原因
	Remark *string `json:"remark,omitempty" xml:"remark,omitempty" maxLength:"255"`
}

func (s OpenDataauthorizationAuthorizationServiceRequest) String() string {
	return tea.Prettify(s)
}

func (s OpenDataauthorizationAuthorizationServiceRequest) GoString() string {
	return s.String()
}

func (s *OpenDataauthorizationAuthorizationServiceRequest) SetAuthToken(v string) *OpenDataauthorizationAuthorizationServiceRequest {
	s.AuthToken = &v
	return s
}

func (s *OpenDataauthorizationAuthorizationServiceRequest) SetProductInstanceId(v string) *OpenDataauthorizationAuthorizationServiceRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *OpenDataauthorizationAuthorizationServiceRequest) SetTenantId(v string) *OpenDataauthorizationAuthorizationServiceRequest {
	s.TenantId = &v
	return s
}

func (s *OpenDataauthorizationAuthorizationServiceRequest) SetTenantAccessKey(v string) *OpenDataauthorizationAuthorizationServiceRequest {
	s.TenantAccessKey = &v
	return s
}

func (s *OpenDataauthorizationAuthorizationServiceRequest) SetRemark(v string) *OpenDataauthorizationAuthorizationServiceRequest {
	s.Remark = &v
	return s
}

type OpenDataauthorizationAuthorizationServiceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 租户AK
	TenantAccessKey *string `json:"tenant_access_key,omitempty" xml:"tenant_access_key,omitempty"`
	// 租户ID
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty"`
}

func (s OpenDataauthorizationAuthorizationServiceResponse) String() string {
	return tea.Prettify(s)
}

func (s OpenDataauthorizationAuthorizationServiceResponse) GoString() string {
	return s.String()
}

func (s *OpenDataauthorizationAuthorizationServiceResponse) SetReqMsgId(v string) *OpenDataauthorizationAuthorizationServiceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *OpenDataauthorizationAuthorizationServiceResponse) SetResultCode(v string) *OpenDataauthorizationAuthorizationServiceResponse {
	s.ResultCode = &v
	return s
}

func (s *OpenDataauthorizationAuthorizationServiceResponse) SetResultMsg(v string) *OpenDataauthorizationAuthorizationServiceResponse {
	s.ResultMsg = &v
	return s
}

func (s *OpenDataauthorizationAuthorizationServiceResponse) SetTenantAccessKey(v string) *OpenDataauthorizationAuthorizationServiceResponse {
	s.TenantAccessKey = &v
	return s
}

func (s *OpenDataauthorizationAuthorizationServiceResponse) SetTenantId(v string) *OpenDataauthorizationAuthorizationServiceResponse {
	s.TenantId = &v
	return s
}

type CloseDataauthorizationAuthorizationServiceRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 租户ID
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty" require:"true"`
	// 关闭服务原因
	Remark *string `json:"remark,omitempty" xml:"remark,omitempty"`
}

func (s CloseDataauthorizationAuthorizationServiceRequest) String() string {
	return tea.Prettify(s)
}

func (s CloseDataauthorizationAuthorizationServiceRequest) GoString() string {
	return s.String()
}

func (s *CloseDataauthorizationAuthorizationServiceRequest) SetAuthToken(v string) *CloseDataauthorizationAuthorizationServiceRequest {
	s.AuthToken = &v
	return s
}

func (s *CloseDataauthorizationAuthorizationServiceRequest) SetProductInstanceId(v string) *CloseDataauthorizationAuthorizationServiceRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CloseDataauthorizationAuthorizationServiceRequest) SetTenantId(v string) *CloseDataauthorizationAuthorizationServiceRequest {
	s.TenantId = &v
	return s
}

func (s *CloseDataauthorizationAuthorizationServiceRequest) SetRemark(v string) *CloseDataauthorizationAuthorizationServiceRequest {
	s.Remark = &v
	return s
}

type CloseDataauthorizationAuthorizationServiceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s CloseDataauthorizationAuthorizationServiceResponse) String() string {
	return tea.Prettify(s)
}

func (s CloseDataauthorizationAuthorizationServiceResponse) GoString() string {
	return s.String()
}

func (s *CloseDataauthorizationAuthorizationServiceResponse) SetReqMsgId(v string) *CloseDataauthorizationAuthorizationServiceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CloseDataauthorizationAuthorizationServiceResponse) SetResultCode(v string) *CloseDataauthorizationAuthorizationServiceResponse {
	s.ResultCode = &v
	return s
}

func (s *CloseDataauthorizationAuthorizationServiceResponse) SetResultMsg(v string) *CloseDataauthorizationAuthorizationServiceResponse {
	s.ResultMsg = &v
	return s
}

type ApplyDataauthorizationAuthorizationRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 申请人ID
	ApplicantId *string `json:"applicant_id,omitempty" xml:"applicant_id,omitempty" require:"true"`
	// 1592877833149
	ApplicantTime *int64 `json:"applicant_time,omitempty" xml:"applicant_time,omitempty" require:"true"`
	// 申请ID，业务系统唯一
	BizUid *string `json:"biz_uid,omitempty" xml:"biz_uid,omitempty" require:"true"`
	// 申请原因
	Comment *string `json:"comment,omitempty" xml:"comment,omitempty" require:"true"`
	// 数据ID
	DataId *string `json:"data_id,omitempty" xml:"data_id,omitempty" require:"true"`
	// 扩展参数
	ExtensionInfo *string `json:"extension_info,omitempty" xml:"extension_info,omitempty"`
}

func (s ApplyDataauthorizationAuthorizationRequest) String() string {
	return tea.Prettify(s)
}

func (s ApplyDataauthorizationAuthorizationRequest) GoString() string {
	return s.String()
}

func (s *ApplyDataauthorizationAuthorizationRequest) SetAuthToken(v string) *ApplyDataauthorizationAuthorizationRequest {
	s.AuthToken = &v
	return s
}

func (s *ApplyDataauthorizationAuthorizationRequest) SetProductInstanceId(v string) *ApplyDataauthorizationAuthorizationRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ApplyDataauthorizationAuthorizationRequest) SetApplicantId(v string) *ApplyDataauthorizationAuthorizationRequest {
	s.ApplicantId = &v
	return s
}

func (s *ApplyDataauthorizationAuthorizationRequest) SetApplicantTime(v int64) *ApplyDataauthorizationAuthorizationRequest {
	s.ApplicantTime = &v
	return s
}

func (s *ApplyDataauthorizationAuthorizationRequest) SetBizUid(v string) *ApplyDataauthorizationAuthorizationRequest {
	s.BizUid = &v
	return s
}

func (s *ApplyDataauthorizationAuthorizationRequest) SetComment(v string) *ApplyDataauthorizationAuthorizationRequest {
	s.Comment = &v
	return s
}

func (s *ApplyDataauthorizationAuthorizationRequest) SetDataId(v string) *ApplyDataauthorizationAuthorizationRequest {
	s.DataId = &v
	return s
}

func (s *ApplyDataauthorizationAuthorizationRequest) SetExtensionInfo(v string) *ApplyDataauthorizationAuthorizationRequest {
	s.ExtensionInfo = &v
	return s
}

type ApplyDataauthorizationAuthorizationResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 申请处理结果
	ProcessResult *ProcessResult `json:"process_result,omitempty" xml:"process_result,omitempty"`
}

func (s ApplyDataauthorizationAuthorizationResponse) String() string {
	return tea.Prettify(s)
}

func (s ApplyDataauthorizationAuthorizationResponse) GoString() string {
	return s.String()
}

func (s *ApplyDataauthorizationAuthorizationResponse) SetReqMsgId(v string) *ApplyDataauthorizationAuthorizationResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ApplyDataauthorizationAuthorizationResponse) SetResultCode(v string) *ApplyDataauthorizationAuthorizationResponse {
	s.ResultCode = &v
	return s
}

func (s *ApplyDataauthorizationAuthorizationResponse) SetResultMsg(v string) *ApplyDataauthorizationAuthorizationResponse {
	s.ResultMsg = &v
	return s
}

func (s *ApplyDataauthorizationAuthorizationResponse) SetProcessResult(v *ProcessResult) *ApplyDataauthorizationAuthorizationResponse {
	s.ProcessResult = v
	return s
}

type ExecDataauthorizationProcessRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 审批操作意见
	Comment *string `json:"comment,omitempty" xml:"comment,omitempty" require:"true"`
	// 扩展参数
	ExtensionInfo *string `json:"extension_info,omitempty" xml:"extension_info,omitempty"`
	// 新节点ID列表
	ForwardNodeIds []*string `json:"forward_node_ids,omitempty" xml:"forward_node_ids,omitempty" type:"Repeated"`
	// 审批操作结果
	OperateResult *string `json:"operate_result,omitempty" xml:"operate_result,omitempty" require:"true"`
	// 审批操作时间
	OperateTime *int64 `json:"operate_time,omitempty" xml:"operate_time,omitempty" require:"true"`
	// 审批操作人ID
	OperatorId *string `json:"operator_id,omitempty" xml:"operator_id,omitempty" require:"true"`
	// 流程ID
	ProcessId *string `json:"process_id,omitempty" xml:"process_id,omitempty" require:"true"`
}

func (s ExecDataauthorizationProcessRequest) String() string {
	return tea.Prettify(s)
}

func (s ExecDataauthorizationProcessRequest) GoString() string {
	return s.String()
}

func (s *ExecDataauthorizationProcessRequest) SetAuthToken(v string) *ExecDataauthorizationProcessRequest {
	s.AuthToken = &v
	return s
}

func (s *ExecDataauthorizationProcessRequest) SetProductInstanceId(v string) *ExecDataauthorizationProcessRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ExecDataauthorizationProcessRequest) SetComment(v string) *ExecDataauthorizationProcessRequest {
	s.Comment = &v
	return s
}

func (s *ExecDataauthorizationProcessRequest) SetExtensionInfo(v string) *ExecDataauthorizationProcessRequest {
	s.ExtensionInfo = &v
	return s
}

func (s *ExecDataauthorizationProcessRequest) SetForwardNodeIds(v []*string) *ExecDataauthorizationProcessRequest {
	s.ForwardNodeIds = v
	return s
}

func (s *ExecDataauthorizationProcessRequest) SetOperateResult(v string) *ExecDataauthorizationProcessRequest {
	s.OperateResult = &v
	return s
}

func (s *ExecDataauthorizationProcessRequest) SetOperateTime(v int64) *ExecDataauthorizationProcessRequest {
	s.OperateTime = &v
	return s
}

func (s *ExecDataauthorizationProcessRequest) SetOperatorId(v string) *ExecDataauthorizationProcessRequest {
	s.OperatorId = &v
	return s
}

func (s *ExecDataauthorizationProcessRequest) SetProcessId(v string) *ExecDataauthorizationProcessRequest {
	s.ProcessId = &v
	return s
}

type ExecDataauthorizationProcessResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s ExecDataauthorizationProcessResponse) String() string {
	return tea.Prettify(s)
}

func (s ExecDataauthorizationProcessResponse) GoString() string {
	return s.String()
}

func (s *ExecDataauthorizationProcessResponse) SetReqMsgId(v string) *ExecDataauthorizationProcessResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ExecDataauthorizationProcessResponse) SetResultCode(v string) *ExecDataauthorizationProcessResponse {
	s.ResultCode = &v
	return s
}

func (s *ExecDataauthorizationProcessResponse) SetResultMsg(v string) *ExecDataauthorizationProcessResponse {
	s.ResultMsg = &v
	return s
}

type CancelDataauthorizationAuthorizationRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 权限凭证
	AuthorityCert *string `json:"authority_cert,omitempty" xml:"authority_cert,omitempty" require:"true"`
	// 操作人ID
	OperatorId *string `json:"operator_id,omitempty" xml:"operator_id,omitempty" require:"true"`
}

func (s CancelDataauthorizationAuthorizationRequest) String() string {
	return tea.Prettify(s)
}

func (s CancelDataauthorizationAuthorizationRequest) GoString() string {
	return s.String()
}

func (s *CancelDataauthorizationAuthorizationRequest) SetAuthToken(v string) *CancelDataauthorizationAuthorizationRequest {
	s.AuthToken = &v
	return s
}

func (s *CancelDataauthorizationAuthorizationRequest) SetProductInstanceId(v string) *CancelDataauthorizationAuthorizationRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CancelDataauthorizationAuthorizationRequest) SetAuthorityCert(v string) *CancelDataauthorizationAuthorizationRequest {
	s.AuthorityCert = &v
	return s
}

func (s *CancelDataauthorizationAuthorizationRequest) SetOperatorId(v string) *CancelDataauthorizationAuthorizationRequest {
	s.OperatorId = &v
	return s
}

type CancelDataauthorizationAuthorizationResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s CancelDataauthorizationAuthorizationResponse) String() string {
	return tea.Prettify(s)
}

func (s CancelDataauthorizationAuthorizationResponse) GoString() string {
	return s.String()
}

func (s *CancelDataauthorizationAuthorizationResponse) SetReqMsgId(v string) *CancelDataauthorizationAuthorizationResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CancelDataauthorizationAuthorizationResponse) SetResultCode(v string) *CancelDataauthorizationAuthorizationResponse {
	s.ResultCode = &v
	return s
}

func (s *CancelDataauthorizationAuthorizationResponse) SetResultMsg(v string) *CancelDataauthorizationAuthorizationResponse {
	s.ResultMsg = &v
	return s
}

type CheckDataauthorizationAuthorizationRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 权限凭证
	AuthorityCert *string `json:"authority_cert,omitempty" xml:"authority_cert,omitempty" require:"true"`
	// 数据ID
	DataId *string `json:"data_id,omitempty" xml:"data_id,omitempty" require:"true"`
	// 参与方ID
	ParticipantId *string `json:"participant_id,omitempty" xml:"participant_id,omitempty" require:"true"`
}

func (s CheckDataauthorizationAuthorizationRequest) String() string {
	return tea.Prettify(s)
}

func (s CheckDataauthorizationAuthorizationRequest) GoString() string {
	return s.String()
}

func (s *CheckDataauthorizationAuthorizationRequest) SetAuthToken(v string) *CheckDataauthorizationAuthorizationRequest {
	s.AuthToken = &v
	return s
}

func (s *CheckDataauthorizationAuthorizationRequest) SetProductInstanceId(v string) *CheckDataauthorizationAuthorizationRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CheckDataauthorizationAuthorizationRequest) SetAuthorityCert(v string) *CheckDataauthorizationAuthorizationRequest {
	s.AuthorityCert = &v
	return s
}

func (s *CheckDataauthorizationAuthorizationRequest) SetDataId(v string) *CheckDataauthorizationAuthorizationRequest {
	s.DataId = &v
	return s
}

func (s *CheckDataauthorizationAuthorizationRequest) SetParticipantId(v string) *CheckDataauthorizationAuthorizationRequest {
	s.ParticipantId = &v
	return s
}

type CheckDataauthorizationAuthorizationResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 是否有权限
	Authority *bool `json:"authority,omitempty" xml:"authority,omitempty"`
}

func (s CheckDataauthorizationAuthorizationResponse) String() string {
	return tea.Prettify(s)
}

func (s CheckDataauthorizationAuthorizationResponse) GoString() string {
	return s.String()
}

func (s *CheckDataauthorizationAuthorizationResponse) SetReqMsgId(v string) *CheckDataauthorizationAuthorizationResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CheckDataauthorizationAuthorizationResponse) SetResultCode(v string) *CheckDataauthorizationAuthorizationResponse {
	s.ResultCode = &v
	return s
}

func (s *CheckDataauthorizationAuthorizationResponse) SetResultMsg(v string) *CheckDataauthorizationAuthorizationResponse {
	s.ResultMsg = &v
	return s
}

func (s *CheckDataauthorizationAuthorizationResponse) SetAuthority(v bool) *CheckDataauthorizationAuthorizationResponse {
	s.Authority = &v
	return s
}

type QueryDataauthorizationProcessRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 流程ID
	ProcessId *string `json:"process_id,omitempty" xml:"process_id,omitempty" require:"true"`
}

func (s QueryDataauthorizationProcessRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDataauthorizationProcessRequest) GoString() string {
	return s.String()
}

func (s *QueryDataauthorizationProcessRequest) SetAuthToken(v string) *QueryDataauthorizationProcessRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryDataauthorizationProcessRequest) SetProductInstanceId(v string) *QueryDataauthorizationProcessRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryDataauthorizationProcessRequest) SetProcessId(v string) *QueryDataauthorizationProcessRequest {
	s.ProcessId = &v
	return s
}

type QueryDataauthorizationProcessResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 流程详细信息
	ProcessInfo *ProcessInfo `json:"process_info,omitempty" xml:"process_info,omitempty"`
}

func (s QueryDataauthorizationProcessResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDataauthorizationProcessResponse) GoString() string {
	return s.String()
}

func (s *QueryDataauthorizationProcessResponse) SetReqMsgId(v string) *QueryDataauthorizationProcessResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryDataauthorizationProcessResponse) SetResultCode(v string) *QueryDataauthorizationProcessResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryDataauthorizationProcessResponse) SetResultMsg(v string) *QueryDataauthorizationProcessResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryDataauthorizationProcessResponse) SetProcessInfo(v *ProcessInfo) *QueryDataauthorizationProcessResponse {
	s.ProcessInfo = v
	return s
}

type SendDataauthorizationDepositDataRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 通知人列表
	NotificationIds []*string `json:"notification_ids,omitempty" xml:"notification_ids,omitempty" type:"Repeated"`
	// 数据发送人
	SenderId *string `json:"sender_id,omitempty" xml:"sender_id,omitempty"`
	// 存证交易内容
	TxData *string `json:"tx_data,omitempty" xml:"tx_data,omitempty" require:"true"`
}

func (s SendDataauthorizationDepositDataRequest) String() string {
	return tea.Prettify(s)
}

func (s SendDataauthorizationDepositDataRequest) GoString() string {
	return s.String()
}

func (s *SendDataauthorizationDepositDataRequest) SetAuthToken(v string) *SendDataauthorizationDepositDataRequest {
	s.AuthToken = &v
	return s
}

func (s *SendDataauthorizationDepositDataRequest) SetProductInstanceId(v string) *SendDataauthorizationDepositDataRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *SendDataauthorizationDepositDataRequest) SetNotificationIds(v []*string) *SendDataauthorizationDepositDataRequest {
	s.NotificationIds = v
	return s
}

func (s *SendDataauthorizationDepositDataRequest) SetSenderId(v string) *SendDataauthorizationDepositDataRequest {
	s.SenderId = &v
	return s
}

func (s *SendDataauthorizationDepositDataRequest) SetTxData(v string) *SendDataauthorizationDepositDataRequest {
	s.TxData = &v
	return s
}

type SendDataauthorizationDepositDataResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 存证交易hash
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty"`
}

func (s SendDataauthorizationDepositDataResponse) String() string {
	return tea.Prettify(s)
}

func (s SendDataauthorizationDepositDataResponse) GoString() string {
	return s.String()
}

func (s *SendDataauthorizationDepositDataResponse) SetReqMsgId(v string) *SendDataauthorizationDepositDataResponse {
	s.ReqMsgId = &v
	return s
}

func (s *SendDataauthorizationDepositDataResponse) SetResultCode(v string) *SendDataauthorizationDepositDataResponse {
	s.ResultCode = &v
	return s
}

func (s *SendDataauthorizationDepositDataResponse) SetResultMsg(v string) *SendDataauthorizationDepositDataResponse {
	s.ResultMsg = &v
	return s
}

func (s *SendDataauthorizationDepositDataResponse) SetTxHash(v string) *SendDataauthorizationDepositDataResponse {
	s.TxHash = &v
	return s
}

type QueryDataauthorizationDepositDataRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 存证交易hash
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty" require:"true"`
}

func (s QueryDataauthorizationDepositDataRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDataauthorizationDepositDataRequest) GoString() string {
	return s.String()
}

func (s *QueryDataauthorizationDepositDataRequest) SetAuthToken(v string) *QueryDataauthorizationDepositDataRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryDataauthorizationDepositDataRequest) SetProductInstanceId(v string) *QueryDataauthorizationDepositDataRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryDataauthorizationDepositDataRequest) SetTxHash(v string) *QueryDataauthorizationDepositDataRequest {
	s.TxHash = &v
	return s
}

type QueryDataauthorizationDepositDataResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 存证交易内容
	TxData *string `json:"tx_data,omitempty" xml:"tx_data,omitempty"`
}

func (s QueryDataauthorizationDepositDataResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDataauthorizationDepositDataResponse) GoString() string {
	return s.String()
}

func (s *QueryDataauthorizationDepositDataResponse) SetReqMsgId(v string) *QueryDataauthorizationDepositDataResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryDataauthorizationDepositDataResponse) SetResultCode(v string) *QueryDataauthorizationDepositDataResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryDataauthorizationDepositDataResponse) SetResultMsg(v string) *QueryDataauthorizationDepositDataResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryDataauthorizationDepositDataResponse) SetTxData(v string) *QueryDataauthorizationDepositDataResponse {
	s.TxData = &v
	return s
}

type ResumeDataauthorizationAuthorizationRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 权限凭证
	AuthorityCert *string `json:"authority_cert,omitempty" xml:"authority_cert,omitempty" require:"true"`
	// 操作人ID
	OperatorId *string `json:"operator_id,omitempty" xml:"operator_id,omitempty" require:"true"`
}

func (s ResumeDataauthorizationAuthorizationRequest) String() string {
	return tea.Prettify(s)
}

func (s ResumeDataauthorizationAuthorizationRequest) GoString() string {
	return s.String()
}

func (s *ResumeDataauthorizationAuthorizationRequest) SetAuthToken(v string) *ResumeDataauthorizationAuthorizationRequest {
	s.AuthToken = &v
	return s
}

func (s *ResumeDataauthorizationAuthorizationRequest) SetProductInstanceId(v string) *ResumeDataauthorizationAuthorizationRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ResumeDataauthorizationAuthorizationRequest) SetAuthorityCert(v string) *ResumeDataauthorizationAuthorizationRequest {
	s.AuthorityCert = &v
	return s
}

func (s *ResumeDataauthorizationAuthorizationRequest) SetOperatorId(v string) *ResumeDataauthorizationAuthorizationRequest {
	s.OperatorId = &v
	return s
}

type ResumeDataauthorizationAuthorizationResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s ResumeDataauthorizationAuthorizationResponse) String() string {
	return tea.Prettify(s)
}

func (s ResumeDataauthorizationAuthorizationResponse) GoString() string {
	return s.String()
}

func (s *ResumeDataauthorizationAuthorizationResponse) SetReqMsgId(v string) *ResumeDataauthorizationAuthorizationResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ResumeDataauthorizationAuthorizationResponse) SetResultCode(v string) *ResumeDataauthorizationAuthorizationResponse {
	s.ResultCode = &v
	return s
}

func (s *ResumeDataauthorizationAuthorizationResponse) SetResultMsg(v string) *ResumeDataauthorizationAuthorizationResponse {
	s.ResultMsg = &v
	return s
}

type UpdateDataauthorizationDataEntityRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 数据类别
	Category *string `json:"category,omitempty" xml:"category,omitempty" require:"true"`
	// 数据ID
	DataId *string `json:"data_id,omitempty" xml:"data_id,omitempty" require:"true"`
	// 数据模型ID
	DataModelId *string `json:"data_model_id,omitempty" xml:"data_model_id,omitempty"`
	// 扩展参数
	ExtensionInfo *string `json:"extension_info,omitempty" xml:"extension_info,omitempty"`
	// 数据名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 数据所有者ID
	OwnerId *string `json:"owner_id,omitempty" xml:"owner_id,omitempty" require:"true"`
	// 流程模版
	ProcessTemplate []*ProcessNode `json:"process_template,omitempty" xml:"process_template,omitempty" type:"Repeated"`
	// DID doc里的公开信息
	PublicInfo *string `json:"public_info,omitempty" xml:"public_info,omitempty"`
}

func (s UpdateDataauthorizationDataEntityRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateDataauthorizationDataEntityRequest) GoString() string {
	return s.String()
}

func (s *UpdateDataauthorizationDataEntityRequest) SetAuthToken(v string) *UpdateDataauthorizationDataEntityRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateDataauthorizationDataEntityRequest) SetProductInstanceId(v string) *UpdateDataauthorizationDataEntityRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UpdateDataauthorizationDataEntityRequest) SetCategory(v string) *UpdateDataauthorizationDataEntityRequest {
	s.Category = &v
	return s
}

func (s *UpdateDataauthorizationDataEntityRequest) SetDataId(v string) *UpdateDataauthorizationDataEntityRequest {
	s.DataId = &v
	return s
}

func (s *UpdateDataauthorizationDataEntityRequest) SetDataModelId(v string) *UpdateDataauthorizationDataEntityRequest {
	s.DataModelId = &v
	return s
}

func (s *UpdateDataauthorizationDataEntityRequest) SetExtensionInfo(v string) *UpdateDataauthorizationDataEntityRequest {
	s.ExtensionInfo = &v
	return s
}

func (s *UpdateDataauthorizationDataEntityRequest) SetName(v string) *UpdateDataauthorizationDataEntityRequest {
	s.Name = &v
	return s
}

func (s *UpdateDataauthorizationDataEntityRequest) SetOwnerId(v string) *UpdateDataauthorizationDataEntityRequest {
	s.OwnerId = &v
	return s
}

func (s *UpdateDataauthorizationDataEntityRequest) SetProcessTemplate(v []*ProcessNode) *UpdateDataauthorizationDataEntityRequest {
	s.ProcessTemplate = v
	return s
}

func (s *UpdateDataauthorizationDataEntityRequest) SetPublicInfo(v string) *UpdateDataauthorizationDataEntityRequest {
	s.PublicInfo = &v
	return s
}

type UpdateDataauthorizationDataEntityResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateDataauthorizationDataEntityResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateDataauthorizationDataEntityResponse) GoString() string {
	return s.String()
}

func (s *UpdateDataauthorizationDataEntityResponse) SetReqMsgId(v string) *UpdateDataauthorizationDataEntityResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateDataauthorizationDataEntityResponse) SetResultCode(v string) *UpdateDataauthorizationDataEntityResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateDataauthorizationDataEntityResponse) SetResultMsg(v string) *UpdateDataauthorizationDataEntityResponse {
	s.ResultMsg = &v
	return s
}

type DeleteDataauthorizationDataEntityRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 数据ID
	DataId *string `json:"data_id,omitempty" xml:"data_id,omitempty" require:"true"`
}

func (s DeleteDataauthorizationDataEntityRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDataauthorizationDataEntityRequest) GoString() string {
	return s.String()
}

func (s *DeleteDataauthorizationDataEntityRequest) SetAuthToken(v string) *DeleteDataauthorizationDataEntityRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteDataauthorizationDataEntityRequest) SetProductInstanceId(v string) *DeleteDataauthorizationDataEntityRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *DeleteDataauthorizationDataEntityRequest) SetDataId(v string) *DeleteDataauthorizationDataEntityRequest {
	s.DataId = &v
	return s
}

type DeleteDataauthorizationDataEntityResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s DeleteDataauthorizationDataEntityResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDataauthorizationDataEntityResponse) GoString() string {
	return s.String()
}

func (s *DeleteDataauthorizationDataEntityResponse) SetReqMsgId(v string) *DeleteDataauthorizationDataEntityResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteDataauthorizationDataEntityResponse) SetResultCode(v string) *DeleteDataauthorizationDataEntityResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteDataauthorizationDataEntityResponse) SetResultMsg(v string) *DeleteDataauthorizationDataEntityResponse {
	s.ResultMsg = &v
	return s
}

type CreateDataauthorizationCustomParticipantRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 区块链ID
	BlockchainId *string `json:"blockchain_id,omitempty" xml:"blockchain_id,omitempty"`
	// 扩展参数
	ExtensionInfo *string `json:"extension_info,omitempty" xml:"extension_info,omitempty"`
	// 参与方名字
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 服务地址
	NotificationService *string `json:"notification_service,omitempty" xml:"notification_service,omitempty"`
	// 参与方ID，全局唯一
	ParticipantId *string `json:"participant_id,omitempty" xml:"participant_id,omitempty" require:"true"`
	// 公钥
	PublicKey *string `json:"public_key,omitempty" xml:"public_key,omitempty" require:"true"`
	// 恢复公钥
	RecoverKey *string `json:"recover_key,omitempty" xml:"recover_key,omitempty" require:"true"`
	// 参与方角色列表
	Role []*string `json:"role,omitempty" xml:"role,omitempty" require:"true" type:"Repeated"`
	// 信用代码，证件号等
	CreditNumber *string `json:"credit_number,omitempty" xml:"credit_number,omitempty"`
	// 空间ID
	SpaceId *string `json:"space_id,omitempty" xml:"space_id,omitempty"`
}

func (s CreateDataauthorizationCustomParticipantRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDataauthorizationCustomParticipantRequest) GoString() string {
	return s.String()
}

func (s *CreateDataauthorizationCustomParticipantRequest) SetAuthToken(v string) *CreateDataauthorizationCustomParticipantRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateDataauthorizationCustomParticipantRequest) SetProductInstanceId(v string) *CreateDataauthorizationCustomParticipantRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateDataauthorizationCustomParticipantRequest) SetBlockchainId(v string) *CreateDataauthorizationCustomParticipantRequest {
	s.BlockchainId = &v
	return s
}

func (s *CreateDataauthorizationCustomParticipantRequest) SetExtensionInfo(v string) *CreateDataauthorizationCustomParticipantRequest {
	s.ExtensionInfo = &v
	return s
}

func (s *CreateDataauthorizationCustomParticipantRequest) SetName(v string) *CreateDataauthorizationCustomParticipantRequest {
	s.Name = &v
	return s
}

func (s *CreateDataauthorizationCustomParticipantRequest) SetNotificationService(v string) *CreateDataauthorizationCustomParticipantRequest {
	s.NotificationService = &v
	return s
}

func (s *CreateDataauthorizationCustomParticipantRequest) SetParticipantId(v string) *CreateDataauthorizationCustomParticipantRequest {
	s.ParticipantId = &v
	return s
}

func (s *CreateDataauthorizationCustomParticipantRequest) SetPublicKey(v string) *CreateDataauthorizationCustomParticipantRequest {
	s.PublicKey = &v
	return s
}

func (s *CreateDataauthorizationCustomParticipantRequest) SetRecoverKey(v string) *CreateDataauthorizationCustomParticipantRequest {
	s.RecoverKey = &v
	return s
}

func (s *CreateDataauthorizationCustomParticipantRequest) SetRole(v []*string) *CreateDataauthorizationCustomParticipantRequest {
	s.Role = v
	return s
}

func (s *CreateDataauthorizationCustomParticipantRequest) SetCreditNumber(v string) *CreateDataauthorizationCustomParticipantRequest {
	s.CreditNumber = &v
	return s
}

func (s *CreateDataauthorizationCustomParticipantRequest) SetSpaceId(v string) *CreateDataauthorizationCustomParticipantRequest {
	s.SpaceId = &v
	return s
}

type CreateDataauthorizationCustomParticipantResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 参与方ID
	ParticipantId *string `json:"participant_id,omitempty" xml:"participant_id,omitempty"`
}

func (s CreateDataauthorizationCustomParticipantResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDataauthorizationCustomParticipantResponse) GoString() string {
	return s.String()
}

func (s *CreateDataauthorizationCustomParticipantResponse) SetReqMsgId(v string) *CreateDataauthorizationCustomParticipantResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateDataauthorizationCustomParticipantResponse) SetResultCode(v string) *CreateDataauthorizationCustomParticipantResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateDataauthorizationCustomParticipantResponse) SetResultMsg(v string) *CreateDataauthorizationCustomParticipantResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateDataauthorizationCustomParticipantResponse) SetParticipantId(v string) *CreateDataauthorizationCustomParticipantResponse {
	s.ParticipantId = &v
	return s
}

type CreateDataauthorizationCustomDataRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 区块链ID
	BlockchainId *string `json:"blockchain_id,omitempty" xml:"blockchain_id,omitempty" require:"true"`
	// 数据对象类别
	Category *string `json:"category,omitempty" xml:"category,omitempty" require:"true"`
	// 数据对象ID，全局唯一
	DataId *string `json:"data_id,omitempty" xml:"data_id,omitempty" require:"true"`
	// 扩展参数
	ExtensionInfo *string `json:"extension_info,omitempty" xml:"extension_info,omitempty"`
	// 数据对象名字
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 数据所有者ID
	OwnerId *string `json:"owner_id,omitempty" xml:"owner_id,omitempty" require:"true"`
	// 流程审批模版
	ProcessTemplate []*ProcessNode `json:"process_template,omitempty" xml:"process_template,omitempty" type:"Repeated"`
	// 带签名信息的参数信息
	Parameters *string `json:"parameters,omitempty" xml:"parameters,omitempty" require:"true"`
}

func (s CreateDataauthorizationCustomDataRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDataauthorizationCustomDataRequest) GoString() string {
	return s.String()
}

func (s *CreateDataauthorizationCustomDataRequest) SetAuthToken(v string) *CreateDataauthorizationCustomDataRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateDataauthorizationCustomDataRequest) SetProductInstanceId(v string) *CreateDataauthorizationCustomDataRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateDataauthorizationCustomDataRequest) SetBlockchainId(v string) *CreateDataauthorizationCustomDataRequest {
	s.BlockchainId = &v
	return s
}

func (s *CreateDataauthorizationCustomDataRequest) SetCategory(v string) *CreateDataauthorizationCustomDataRequest {
	s.Category = &v
	return s
}

func (s *CreateDataauthorizationCustomDataRequest) SetDataId(v string) *CreateDataauthorizationCustomDataRequest {
	s.DataId = &v
	return s
}

func (s *CreateDataauthorizationCustomDataRequest) SetExtensionInfo(v string) *CreateDataauthorizationCustomDataRequest {
	s.ExtensionInfo = &v
	return s
}

func (s *CreateDataauthorizationCustomDataRequest) SetName(v string) *CreateDataauthorizationCustomDataRequest {
	s.Name = &v
	return s
}

func (s *CreateDataauthorizationCustomDataRequest) SetOwnerId(v string) *CreateDataauthorizationCustomDataRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateDataauthorizationCustomDataRequest) SetProcessTemplate(v []*ProcessNode) *CreateDataauthorizationCustomDataRequest {
	s.ProcessTemplate = v
	return s
}

func (s *CreateDataauthorizationCustomDataRequest) SetParameters(v string) *CreateDataauthorizationCustomDataRequest {
	s.Parameters = &v
	return s
}

type CreateDataauthorizationCustomDataResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 数据对象ID
	DataId *string `json:"data_id,omitempty" xml:"data_id,omitempty"`
}

func (s CreateDataauthorizationCustomDataResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDataauthorizationCustomDataResponse) GoString() string {
	return s.String()
}

func (s *CreateDataauthorizationCustomDataResponse) SetReqMsgId(v string) *CreateDataauthorizationCustomDataResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateDataauthorizationCustomDataResponse) SetResultCode(v string) *CreateDataauthorizationCustomDataResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateDataauthorizationCustomDataResponse) SetResultMsg(v string) *CreateDataauthorizationCustomDataResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateDataauthorizationCustomDataResponse) SetDataId(v string) *CreateDataauthorizationCustomDataResponse {
	s.DataId = &v
	return s
}

type ApplyDataauthorizationAuthorizationWithsignatureRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 申请ID
	BizUid *string `json:"biz_uid,omitempty" xml:"biz_uid,omitempty" require:"true"`
	// 区块链ID
	BlockchainId *string `json:"blockchain_id,omitempty" xml:"blockchain_id,omitempty" require:"true"`
	// 带签名的参数信息
	Parameters *string `json:"parameters,omitempty" xml:"parameters,omitempty" require:"true"`
}

func (s ApplyDataauthorizationAuthorizationWithsignatureRequest) String() string {
	return tea.Prettify(s)
}

func (s ApplyDataauthorizationAuthorizationWithsignatureRequest) GoString() string {
	return s.String()
}

func (s *ApplyDataauthorizationAuthorizationWithsignatureRequest) SetAuthToken(v string) *ApplyDataauthorizationAuthorizationWithsignatureRequest {
	s.AuthToken = &v
	return s
}

func (s *ApplyDataauthorizationAuthorizationWithsignatureRequest) SetProductInstanceId(v string) *ApplyDataauthorizationAuthorizationWithsignatureRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ApplyDataauthorizationAuthorizationWithsignatureRequest) SetBizUid(v string) *ApplyDataauthorizationAuthorizationWithsignatureRequest {
	s.BizUid = &v
	return s
}

func (s *ApplyDataauthorizationAuthorizationWithsignatureRequest) SetBlockchainId(v string) *ApplyDataauthorizationAuthorizationWithsignatureRequest {
	s.BlockchainId = &v
	return s
}

func (s *ApplyDataauthorizationAuthorizationWithsignatureRequest) SetParameters(v string) *ApplyDataauthorizationAuthorizationWithsignatureRequest {
	s.Parameters = &v
	return s
}

type ApplyDataauthorizationAuthorizationWithsignatureResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 操作结果
	ProcessResult *ProcessResult `json:"process_result,omitempty" xml:"process_result,omitempty"`
	// 权限凭证
	AuthorityCert *string `json:"authority_cert,omitempty" xml:"authority_cert,omitempty"`
}

func (s ApplyDataauthorizationAuthorizationWithsignatureResponse) String() string {
	return tea.Prettify(s)
}

func (s ApplyDataauthorizationAuthorizationWithsignatureResponse) GoString() string {
	return s.String()
}

func (s *ApplyDataauthorizationAuthorizationWithsignatureResponse) SetReqMsgId(v string) *ApplyDataauthorizationAuthorizationWithsignatureResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ApplyDataauthorizationAuthorizationWithsignatureResponse) SetResultCode(v string) *ApplyDataauthorizationAuthorizationWithsignatureResponse {
	s.ResultCode = &v
	return s
}

func (s *ApplyDataauthorizationAuthorizationWithsignatureResponse) SetResultMsg(v string) *ApplyDataauthorizationAuthorizationWithsignatureResponse {
	s.ResultMsg = &v
	return s
}

func (s *ApplyDataauthorizationAuthorizationWithsignatureResponse) SetProcessResult(v *ProcessResult) *ApplyDataauthorizationAuthorizationWithsignatureResponse {
	s.ProcessResult = v
	return s
}

func (s *ApplyDataauthorizationAuthorizationWithsignatureResponse) SetAuthorityCert(v string) *ApplyDataauthorizationAuthorizationWithsignatureResponse {
	s.AuthorityCert = &v
	return s
}

type ExecDataauthorizationProcessWithsignatureRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 区块链ID
	BlockchainId *string `json:"blockchain_id,omitempty" xml:"blockchain_id,omitempty" require:"true"`
	// 带签名的参数信息
	Parameters *string `json:"parameters,omitempty" xml:"parameters,omitempty" require:"true"`
}

func (s ExecDataauthorizationProcessWithsignatureRequest) String() string {
	return tea.Prettify(s)
}

func (s ExecDataauthorizationProcessWithsignatureRequest) GoString() string {
	return s.String()
}

func (s *ExecDataauthorizationProcessWithsignatureRequest) SetAuthToken(v string) *ExecDataauthorizationProcessWithsignatureRequest {
	s.AuthToken = &v
	return s
}

func (s *ExecDataauthorizationProcessWithsignatureRequest) SetProductInstanceId(v string) *ExecDataauthorizationProcessWithsignatureRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ExecDataauthorizationProcessWithsignatureRequest) SetBlockchainId(v string) *ExecDataauthorizationProcessWithsignatureRequest {
	s.BlockchainId = &v
	return s
}

func (s *ExecDataauthorizationProcessWithsignatureRequest) SetParameters(v string) *ExecDataauthorizationProcessWithsignatureRequest {
	s.Parameters = &v
	return s
}

type ExecDataauthorizationProcessWithsignatureResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 流程处理结果
	ProcessResult *ProcessResult `json:"process_result,omitempty" xml:"process_result,omitempty"`
	// 权限凭证
	AuthorityCert *string `json:"authority_cert,omitempty" xml:"authority_cert,omitempty"`
}

func (s ExecDataauthorizationProcessWithsignatureResponse) String() string {
	return tea.Prettify(s)
}

func (s ExecDataauthorizationProcessWithsignatureResponse) GoString() string {
	return s.String()
}

func (s *ExecDataauthorizationProcessWithsignatureResponse) SetReqMsgId(v string) *ExecDataauthorizationProcessWithsignatureResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ExecDataauthorizationProcessWithsignatureResponse) SetResultCode(v string) *ExecDataauthorizationProcessWithsignatureResponse {
	s.ResultCode = &v
	return s
}

func (s *ExecDataauthorizationProcessWithsignatureResponse) SetResultMsg(v string) *ExecDataauthorizationProcessWithsignatureResponse {
	s.ResultMsg = &v
	return s
}

func (s *ExecDataauthorizationProcessWithsignatureResponse) SetProcessResult(v *ProcessResult) *ExecDataauthorizationProcessWithsignatureResponse {
	s.ProcessResult = v
	return s
}

func (s *ExecDataauthorizationProcessWithsignatureResponse) SetAuthorityCert(v string) *ExecDataauthorizationProcessWithsignatureResponse {
	s.AuthorityCert = &v
	return s
}

type CreateDataauthorizationDataModelRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 业务系统唯一标示
	BizUid *string `json:"biz_uid,omitempty" xml:"biz_uid,omitempty" require:"true"`
	// 数据模型描述
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// 模型字段详细信息
	FieldDetail *string `json:"field_detail,omitempty" xml:"field_detail,omitempty" require:"true"`
	// 数据模型业务ID
	ModelBizId *string `json:"model_biz_id,omitempty" xml:"model_biz_id,omitempty"`
	// 数据模型名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 空间ID
	SpaceId *string `json:"space_id,omitempty" xml:"space_id,omitempty"`
	// 提交人ID
	SubmitterId *string `json:"submitter_id,omitempty" xml:"submitter_id,omitempty"`
}

func (s CreateDataauthorizationDataModelRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDataauthorizationDataModelRequest) GoString() string {
	return s.String()
}

func (s *CreateDataauthorizationDataModelRequest) SetAuthToken(v string) *CreateDataauthorizationDataModelRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateDataauthorizationDataModelRequest) SetProductInstanceId(v string) *CreateDataauthorizationDataModelRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateDataauthorizationDataModelRequest) SetBizUid(v string) *CreateDataauthorizationDataModelRequest {
	s.BizUid = &v
	return s
}

func (s *CreateDataauthorizationDataModelRequest) SetDescription(v string) *CreateDataauthorizationDataModelRequest {
	s.Description = &v
	return s
}

func (s *CreateDataauthorizationDataModelRequest) SetFieldDetail(v string) *CreateDataauthorizationDataModelRequest {
	s.FieldDetail = &v
	return s
}

func (s *CreateDataauthorizationDataModelRequest) SetModelBizId(v string) *CreateDataauthorizationDataModelRequest {
	s.ModelBizId = &v
	return s
}

func (s *CreateDataauthorizationDataModelRequest) SetName(v string) *CreateDataauthorizationDataModelRequest {
	s.Name = &v
	return s
}

func (s *CreateDataauthorizationDataModelRequest) SetSpaceId(v string) *CreateDataauthorizationDataModelRequest {
	s.SpaceId = &v
	return s
}

func (s *CreateDataauthorizationDataModelRequest) SetSubmitterId(v string) *CreateDataauthorizationDataModelRequest {
	s.SubmitterId = &v
	return s
}

type CreateDataauthorizationDataModelResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 数据模型ID
	DataModelId *string `json:"data_model_id,omitempty" xml:"data_model_id,omitempty"`
}

func (s CreateDataauthorizationDataModelResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDataauthorizationDataModelResponse) GoString() string {
	return s.String()
}

func (s *CreateDataauthorizationDataModelResponse) SetReqMsgId(v string) *CreateDataauthorizationDataModelResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateDataauthorizationDataModelResponse) SetResultCode(v string) *CreateDataauthorizationDataModelResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateDataauthorizationDataModelResponse) SetResultMsg(v string) *CreateDataauthorizationDataModelResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateDataauthorizationDataModelResponse) SetDataModelId(v string) *CreateDataauthorizationDataModelResponse {
	s.DataModelId = &v
	return s
}

type UpdateDataauthorizationDataModelRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 数据模型ID
	DataModelId *string `json:"data_model_id,omitempty" xml:"data_model_id,omitempty" require:"true"`
	// 数据模型描述
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// 模型字段详细信息
	FieldDetail *string `json:"field_detail,omitempty" xml:"field_detail,omitempty" require:"true"`
	// 模型业务ID
	ModelBizId *string `json:"model_biz_id,omitempty" xml:"model_biz_id,omitempty"`
	// 数据模型名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
}

func (s UpdateDataauthorizationDataModelRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateDataauthorizationDataModelRequest) GoString() string {
	return s.String()
}

func (s *UpdateDataauthorizationDataModelRequest) SetAuthToken(v string) *UpdateDataauthorizationDataModelRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateDataauthorizationDataModelRequest) SetProductInstanceId(v string) *UpdateDataauthorizationDataModelRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UpdateDataauthorizationDataModelRequest) SetDataModelId(v string) *UpdateDataauthorizationDataModelRequest {
	s.DataModelId = &v
	return s
}

func (s *UpdateDataauthorizationDataModelRequest) SetDescription(v string) *UpdateDataauthorizationDataModelRequest {
	s.Description = &v
	return s
}

func (s *UpdateDataauthorizationDataModelRequest) SetFieldDetail(v string) *UpdateDataauthorizationDataModelRequest {
	s.FieldDetail = &v
	return s
}

func (s *UpdateDataauthorizationDataModelRequest) SetModelBizId(v string) *UpdateDataauthorizationDataModelRequest {
	s.ModelBizId = &v
	return s
}

func (s *UpdateDataauthorizationDataModelRequest) SetName(v string) *UpdateDataauthorizationDataModelRequest {
	s.Name = &v
	return s
}

type UpdateDataauthorizationDataModelResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateDataauthorizationDataModelResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateDataauthorizationDataModelResponse) GoString() string {
	return s.String()
}

func (s *UpdateDataauthorizationDataModelResponse) SetReqMsgId(v string) *UpdateDataauthorizationDataModelResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateDataauthorizationDataModelResponse) SetResultCode(v string) *UpdateDataauthorizationDataModelResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateDataauthorizationDataModelResponse) SetResultMsg(v string) *UpdateDataauthorizationDataModelResponse {
	s.ResultMsg = &v
	return s
}

type DeleteDataauthorizationDataModelRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 数据模型ID
	DataModelId *string `json:"data_model_id,omitempty" xml:"data_model_id,omitempty" require:"true"`
}

func (s DeleteDataauthorizationDataModelRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDataauthorizationDataModelRequest) GoString() string {
	return s.String()
}

func (s *DeleteDataauthorizationDataModelRequest) SetAuthToken(v string) *DeleteDataauthorizationDataModelRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteDataauthorizationDataModelRequest) SetProductInstanceId(v string) *DeleteDataauthorizationDataModelRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *DeleteDataauthorizationDataModelRequest) SetDataModelId(v string) *DeleteDataauthorizationDataModelRequest {
	s.DataModelId = &v
	return s
}

type DeleteDataauthorizationDataModelResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s DeleteDataauthorizationDataModelResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDataauthorizationDataModelResponse) GoString() string {
	return s.String()
}

func (s *DeleteDataauthorizationDataModelResponse) SetReqMsgId(v string) *DeleteDataauthorizationDataModelResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteDataauthorizationDataModelResponse) SetResultCode(v string) *DeleteDataauthorizationDataModelResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteDataauthorizationDataModelResponse) SetResultMsg(v string) *DeleteDataauthorizationDataModelResponse {
	s.ResultMsg = &v
	return s
}

type ListDataauthorizationParticipantPageRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 信用代码编号
	CreditNumber *string `json:"credit_number,omitempty" xml:"credit_number,omitempty"`
	// 参与方名字
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 页码
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty" require:"true" minimum:"1"`
	// 每页数量
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
	// 角色
	Role *string `json:"role,omitempty" xml:"role,omitempty"`
	// 空间ID
	SpaceId *string `json:"space_id,omitempty" xml:"space_id,omitempty" require:"true"`
	// 账户名称
	Account *string `json:"account,omitempty" xml:"account,omitempty"`
}

func (s ListDataauthorizationParticipantPageRequest) String() string {
	return tea.Prettify(s)
}

func (s ListDataauthorizationParticipantPageRequest) GoString() string {
	return s.String()
}

func (s *ListDataauthorizationParticipantPageRequest) SetAuthToken(v string) *ListDataauthorizationParticipantPageRequest {
	s.AuthToken = &v
	return s
}

func (s *ListDataauthorizationParticipantPageRequest) SetProductInstanceId(v string) *ListDataauthorizationParticipantPageRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ListDataauthorizationParticipantPageRequest) SetCreditNumber(v string) *ListDataauthorizationParticipantPageRequest {
	s.CreditNumber = &v
	return s
}

func (s *ListDataauthorizationParticipantPageRequest) SetName(v string) *ListDataauthorizationParticipantPageRequest {
	s.Name = &v
	return s
}

func (s *ListDataauthorizationParticipantPageRequest) SetPageNum(v int64) *ListDataauthorizationParticipantPageRequest {
	s.PageNum = &v
	return s
}

func (s *ListDataauthorizationParticipantPageRequest) SetPageSize(v int64) *ListDataauthorizationParticipantPageRequest {
	s.PageSize = &v
	return s
}

func (s *ListDataauthorizationParticipantPageRequest) SetRole(v string) *ListDataauthorizationParticipantPageRequest {
	s.Role = &v
	return s
}

func (s *ListDataauthorizationParticipantPageRequest) SetSpaceId(v string) *ListDataauthorizationParticipantPageRequest {
	s.SpaceId = &v
	return s
}

func (s *ListDataauthorizationParticipantPageRequest) SetAccount(v string) *ListDataauthorizationParticipantPageRequest {
	s.Account = &v
	return s
}

type ListDataauthorizationParticipantPageResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 参与方列表
	Data []*Participant `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	// 是否有下一页
	HasNextPage *bool `json:"has_next_page,omitempty" xml:"has_next_page,omitempty"`
	// 是否有上一页
	HasPreviousPage *bool `json:"has_previous_page,omitempty" xml:"has_previous_page,omitempty"`
	// 页码
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty"`
	// 每页数量
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 数据总量
	Total *int64 `json:"total,omitempty" xml:"total,omitempty"`
}

func (s ListDataauthorizationParticipantPageResponse) String() string {
	return tea.Prettify(s)
}

func (s ListDataauthorizationParticipantPageResponse) GoString() string {
	return s.String()
}

func (s *ListDataauthorizationParticipantPageResponse) SetReqMsgId(v string) *ListDataauthorizationParticipantPageResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListDataauthorizationParticipantPageResponse) SetResultCode(v string) *ListDataauthorizationParticipantPageResponse {
	s.ResultCode = &v
	return s
}

func (s *ListDataauthorizationParticipantPageResponse) SetResultMsg(v string) *ListDataauthorizationParticipantPageResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListDataauthorizationParticipantPageResponse) SetData(v []*Participant) *ListDataauthorizationParticipantPageResponse {
	s.Data = v
	return s
}

func (s *ListDataauthorizationParticipantPageResponse) SetHasNextPage(v bool) *ListDataauthorizationParticipantPageResponse {
	s.HasNextPage = &v
	return s
}

func (s *ListDataauthorizationParticipantPageResponse) SetHasPreviousPage(v bool) *ListDataauthorizationParticipantPageResponse {
	s.HasPreviousPage = &v
	return s
}

func (s *ListDataauthorizationParticipantPageResponse) SetPageNum(v int64) *ListDataauthorizationParticipantPageResponse {
	s.PageNum = &v
	return s
}

func (s *ListDataauthorizationParticipantPageResponse) SetPageSize(v int64) *ListDataauthorizationParticipantPageResponse {
	s.PageSize = &v
	return s
}

func (s *ListDataauthorizationParticipantPageResponse) SetTotal(v int64) *ListDataauthorizationParticipantPageResponse {
	s.Total = &v
	return s
}

type QueryDataauthorizationDataModelRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 数据模型ID
	DataModelId *string `json:"data_model_id,omitempty" xml:"data_model_id,omitempty" require:"true"`
}

func (s QueryDataauthorizationDataModelRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDataauthorizationDataModelRequest) GoString() string {
	return s.String()
}

func (s *QueryDataauthorizationDataModelRequest) SetAuthToken(v string) *QueryDataauthorizationDataModelRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryDataauthorizationDataModelRequest) SetProductInstanceId(v string) *QueryDataauthorizationDataModelRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryDataauthorizationDataModelRequest) SetDataModelId(v string) *QueryDataauthorizationDataModelRequest {
	s.DataModelId = &v
	return s
}

type QueryDataauthorizationDataModelResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 数据模型详细信息
	DataModel *DataModel `json:"data_model,omitempty" xml:"data_model,omitempty"`
}

func (s QueryDataauthorizationDataModelResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDataauthorizationDataModelResponse) GoString() string {
	return s.String()
}

func (s *QueryDataauthorizationDataModelResponse) SetReqMsgId(v string) *QueryDataauthorizationDataModelResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryDataauthorizationDataModelResponse) SetResultCode(v string) *QueryDataauthorizationDataModelResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryDataauthorizationDataModelResponse) SetResultMsg(v string) *QueryDataauthorizationDataModelResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryDataauthorizationDataModelResponse) SetDataModel(v *DataModel) *QueryDataauthorizationDataModelResponse {
	s.DataModel = v
	return s
}

type ListDataauthorizationDatamodelPageRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 模型业务ID
	ModelBizId *string `json:"model_biz_id,omitempty" xml:"model_biz_id,omitempty"`
	// 模型名称
	ModelName *string `json:"model_name,omitempty" xml:"model_name,omitempty"`
	// 页码
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty" require:"true" minimum:"1"`
	// 每页大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
	// 空间ID
	SpaceId *string `json:"space_id,omitempty" xml:"space_id,omitempty" require:"true"`
	// 提交人名字
	SubmitterName *string `json:"submitter_name,omitempty" xml:"submitter_name,omitempty"`
}

func (s ListDataauthorizationDatamodelPageRequest) String() string {
	return tea.Prettify(s)
}

func (s ListDataauthorizationDatamodelPageRequest) GoString() string {
	return s.String()
}

func (s *ListDataauthorizationDatamodelPageRequest) SetAuthToken(v string) *ListDataauthorizationDatamodelPageRequest {
	s.AuthToken = &v
	return s
}

func (s *ListDataauthorizationDatamodelPageRequest) SetProductInstanceId(v string) *ListDataauthorizationDatamodelPageRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ListDataauthorizationDatamodelPageRequest) SetModelBizId(v string) *ListDataauthorizationDatamodelPageRequest {
	s.ModelBizId = &v
	return s
}

func (s *ListDataauthorizationDatamodelPageRequest) SetModelName(v string) *ListDataauthorizationDatamodelPageRequest {
	s.ModelName = &v
	return s
}

func (s *ListDataauthorizationDatamodelPageRequest) SetPageNum(v int64) *ListDataauthorizationDatamodelPageRequest {
	s.PageNum = &v
	return s
}

func (s *ListDataauthorizationDatamodelPageRequest) SetPageSize(v int64) *ListDataauthorizationDatamodelPageRequest {
	s.PageSize = &v
	return s
}

func (s *ListDataauthorizationDatamodelPageRequest) SetSpaceId(v string) *ListDataauthorizationDatamodelPageRequest {
	s.SpaceId = &v
	return s
}

func (s *ListDataauthorizationDatamodelPageRequest) SetSubmitterName(v string) *ListDataauthorizationDatamodelPageRequest {
	s.SubmitterName = &v
	return s
}

type ListDataauthorizationDatamodelPageResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 数据模型列表
	Data []*DataModel `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	// 是否有下一页
	HasNextPage *bool `json:"has_next_page,omitempty" xml:"has_next_page,omitempty"`
	// 是否有上一页
	HasPreviousPage *bool `json:"has_previous_page,omitempty" xml:"has_previous_page,omitempty"`
	// 页码
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty"`
	// 每页大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 数据总量
	Total *int64 `json:"total,omitempty" xml:"total,omitempty"`
}

func (s ListDataauthorizationDatamodelPageResponse) String() string {
	return tea.Prettify(s)
}

func (s ListDataauthorizationDatamodelPageResponse) GoString() string {
	return s.String()
}

func (s *ListDataauthorizationDatamodelPageResponse) SetReqMsgId(v string) *ListDataauthorizationDatamodelPageResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListDataauthorizationDatamodelPageResponse) SetResultCode(v string) *ListDataauthorizationDatamodelPageResponse {
	s.ResultCode = &v
	return s
}

func (s *ListDataauthorizationDatamodelPageResponse) SetResultMsg(v string) *ListDataauthorizationDatamodelPageResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListDataauthorizationDatamodelPageResponse) SetData(v []*DataModel) *ListDataauthorizationDatamodelPageResponse {
	s.Data = v
	return s
}

func (s *ListDataauthorizationDatamodelPageResponse) SetHasNextPage(v bool) *ListDataauthorizationDatamodelPageResponse {
	s.HasNextPage = &v
	return s
}

func (s *ListDataauthorizationDatamodelPageResponse) SetHasPreviousPage(v bool) *ListDataauthorizationDatamodelPageResponse {
	s.HasPreviousPage = &v
	return s
}

func (s *ListDataauthorizationDatamodelPageResponse) SetPageNum(v int64) *ListDataauthorizationDatamodelPageResponse {
	s.PageNum = &v
	return s
}

func (s *ListDataauthorizationDatamodelPageResponse) SetPageSize(v int64) *ListDataauthorizationDatamodelPageResponse {
	s.PageSize = &v
	return s
}

func (s *ListDataauthorizationDatamodelPageResponse) SetTotal(v int64) *ListDataauthorizationDatamodelPageResponse {
	s.Total = &v
	return s
}

type ListDataauthorizationAvailableDatamodelRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 参与方DID
	ParticipantId *string `json:"participant_id,omitempty" xml:"participant_id,omitempty" require:"true"`
}

func (s ListDataauthorizationAvailableDatamodelRequest) String() string {
	return tea.Prettify(s)
}

func (s ListDataauthorizationAvailableDatamodelRequest) GoString() string {
	return s.String()
}

func (s *ListDataauthorizationAvailableDatamodelRequest) SetAuthToken(v string) *ListDataauthorizationAvailableDatamodelRequest {
	s.AuthToken = &v
	return s
}

func (s *ListDataauthorizationAvailableDatamodelRequest) SetProductInstanceId(v string) *ListDataauthorizationAvailableDatamodelRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ListDataauthorizationAvailableDatamodelRequest) SetParticipantId(v string) *ListDataauthorizationAvailableDatamodelRequest {
	s.ParticipantId = &v
	return s
}

type ListDataauthorizationAvailableDatamodelResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 数据模型列表
	DataModels []*DataModel `json:"data_models,omitempty" xml:"data_models,omitempty" type:"Repeated"`
}

func (s ListDataauthorizationAvailableDatamodelResponse) String() string {
	return tea.Prettify(s)
}

func (s ListDataauthorizationAvailableDatamodelResponse) GoString() string {
	return s.String()
}

func (s *ListDataauthorizationAvailableDatamodelResponse) SetReqMsgId(v string) *ListDataauthorizationAvailableDatamodelResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListDataauthorizationAvailableDatamodelResponse) SetResultCode(v string) *ListDataauthorizationAvailableDatamodelResponse {
	s.ResultCode = &v
	return s
}

func (s *ListDataauthorizationAvailableDatamodelResponse) SetResultMsg(v string) *ListDataauthorizationAvailableDatamodelResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListDataauthorizationAvailableDatamodelResponse) SetDataModels(v []*DataModel) *ListDataauthorizationAvailableDatamodelResponse {
	s.DataModels = v
	return s
}

type ListDataauthorizationDataentityPageRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 授权状态
	AuthStatus *string `json:"auth_status,omitempty" xml:"auth_status,omitempty"`
	// 模型名称
	ModelName *string `json:"model_name,omitempty" xml:"model_name,omitempty"`
	// 页码
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty" require:"true" minimum:"1"`
	// 每页大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
	// 参与方DID
	ParticipantId *string `json:"participant_id,omitempty" xml:"participant_id,omitempty" require:"true"`
	// 数据模型业务ID
	ModelBizId *string `json:"model_biz_id,omitempty" xml:"model_biz_id,omitempty"`
}

func (s ListDataauthorizationDataentityPageRequest) String() string {
	return tea.Prettify(s)
}

func (s ListDataauthorizationDataentityPageRequest) GoString() string {
	return s.String()
}

func (s *ListDataauthorizationDataentityPageRequest) SetAuthToken(v string) *ListDataauthorizationDataentityPageRequest {
	s.AuthToken = &v
	return s
}

func (s *ListDataauthorizationDataentityPageRequest) SetProductInstanceId(v string) *ListDataauthorizationDataentityPageRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ListDataauthorizationDataentityPageRequest) SetAuthStatus(v string) *ListDataauthorizationDataentityPageRequest {
	s.AuthStatus = &v
	return s
}

func (s *ListDataauthorizationDataentityPageRequest) SetModelName(v string) *ListDataauthorizationDataentityPageRequest {
	s.ModelName = &v
	return s
}

func (s *ListDataauthorizationDataentityPageRequest) SetPageNum(v int64) *ListDataauthorizationDataentityPageRequest {
	s.PageNum = &v
	return s
}

func (s *ListDataauthorizationDataentityPageRequest) SetPageSize(v int64) *ListDataauthorizationDataentityPageRequest {
	s.PageSize = &v
	return s
}

func (s *ListDataauthorizationDataentityPageRequest) SetParticipantId(v string) *ListDataauthorizationDataentityPageRequest {
	s.ParticipantId = &v
	return s
}

func (s *ListDataauthorizationDataentityPageRequest) SetModelBizId(v string) *ListDataauthorizationDataentityPageRequest {
	s.ModelBizId = &v
	return s
}

type ListDataauthorizationDataentityPageResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 分页数据列表
	Data []*ListDataEntityResult `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	// 是否有下一页
	HasNextPage *bool `json:"has_next_page,omitempty" xml:"has_next_page,omitempty"`
	// 是否有上一页
	HasPreviousPage *bool `json:"has_previous_page,omitempty" xml:"has_previous_page,omitempty"`
	// 页码
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty"`
	// 每页大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 数据总量
	Total *int64 `json:"total,omitempty" xml:"total,omitempty"`
}

func (s ListDataauthorizationDataentityPageResponse) String() string {
	return tea.Prettify(s)
}

func (s ListDataauthorizationDataentityPageResponse) GoString() string {
	return s.String()
}

func (s *ListDataauthorizationDataentityPageResponse) SetReqMsgId(v string) *ListDataauthorizationDataentityPageResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListDataauthorizationDataentityPageResponse) SetResultCode(v string) *ListDataauthorizationDataentityPageResponse {
	s.ResultCode = &v
	return s
}

func (s *ListDataauthorizationDataentityPageResponse) SetResultMsg(v string) *ListDataauthorizationDataentityPageResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListDataauthorizationDataentityPageResponse) SetData(v []*ListDataEntityResult) *ListDataauthorizationDataentityPageResponse {
	s.Data = v
	return s
}

func (s *ListDataauthorizationDataentityPageResponse) SetHasNextPage(v bool) *ListDataauthorizationDataentityPageResponse {
	s.HasNextPage = &v
	return s
}

func (s *ListDataauthorizationDataentityPageResponse) SetHasPreviousPage(v bool) *ListDataauthorizationDataentityPageResponse {
	s.HasPreviousPage = &v
	return s
}

func (s *ListDataauthorizationDataentityPageResponse) SetPageNum(v int64) *ListDataauthorizationDataentityPageResponse {
	s.PageNum = &v
	return s
}

func (s *ListDataauthorizationDataentityPageResponse) SetPageSize(v int64) *ListDataauthorizationDataentityPageResponse {
	s.PageSize = &v
	return s
}

func (s *ListDataauthorizationDataentityPageResponse) SetTotal(v int64) *ListDataauthorizationDataentityPageResponse {
	s.Total = &v
	return s
}

type CreateDataauthorizationDirectAuthorizationRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 业务UUID,业务系统唯一标示
	BizUid *string `json:"biz_uid,omitempty" xml:"biz_uid,omitempty" require:"true"`
	// 直接授权原因
	Comment *string `json:"comment,omitempty" xml:"comment,omitempty" require:"true"`
	// 数据ID
	DataId *string `json:"data_id,omitempty" xml:"data_id,omitempty" require:"true"`
	// 过期时间
	Expire *int64 `json:"expire,omitempty" xml:"expire,omitempty" require:"true"`
	// 扩展参数
	ExtensionInfo *string `json:"extension_info,omitempty" xml:"extension_info,omitempty"`
	// 授权者ID
	IssuerId *string `json:"issuer_id,omitempty" xml:"issuer_id,omitempty" require:"true"`
	// 被授予者ID
	SubjectId *string `json:"subject_id,omitempty" xml:"subject_id,omitempty" require:"true"`
}

func (s CreateDataauthorizationDirectAuthorizationRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDataauthorizationDirectAuthorizationRequest) GoString() string {
	return s.String()
}

func (s *CreateDataauthorizationDirectAuthorizationRequest) SetAuthToken(v string) *CreateDataauthorizationDirectAuthorizationRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateDataauthorizationDirectAuthorizationRequest) SetProductInstanceId(v string) *CreateDataauthorizationDirectAuthorizationRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateDataauthorizationDirectAuthorizationRequest) SetBizUid(v string) *CreateDataauthorizationDirectAuthorizationRequest {
	s.BizUid = &v
	return s
}

func (s *CreateDataauthorizationDirectAuthorizationRequest) SetComment(v string) *CreateDataauthorizationDirectAuthorizationRequest {
	s.Comment = &v
	return s
}

func (s *CreateDataauthorizationDirectAuthorizationRequest) SetDataId(v string) *CreateDataauthorizationDirectAuthorizationRequest {
	s.DataId = &v
	return s
}

func (s *CreateDataauthorizationDirectAuthorizationRequest) SetExpire(v int64) *CreateDataauthorizationDirectAuthorizationRequest {
	s.Expire = &v
	return s
}

func (s *CreateDataauthorizationDirectAuthorizationRequest) SetExtensionInfo(v string) *CreateDataauthorizationDirectAuthorizationRequest {
	s.ExtensionInfo = &v
	return s
}

func (s *CreateDataauthorizationDirectAuthorizationRequest) SetIssuerId(v string) *CreateDataauthorizationDirectAuthorizationRequest {
	s.IssuerId = &v
	return s
}

func (s *CreateDataauthorizationDirectAuthorizationRequest) SetSubjectId(v string) *CreateDataauthorizationDirectAuthorizationRequest {
	s.SubjectId = &v
	return s
}

type CreateDataauthorizationDirectAuthorizationResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 权限凭证
	AuthorityCert *string `json:"authority_cert,omitempty" xml:"authority_cert,omitempty"`
}

func (s CreateDataauthorizationDirectAuthorizationResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDataauthorizationDirectAuthorizationResponse) GoString() string {
	return s.String()
}

func (s *CreateDataauthorizationDirectAuthorizationResponse) SetReqMsgId(v string) *CreateDataauthorizationDirectAuthorizationResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateDataauthorizationDirectAuthorizationResponse) SetResultCode(v string) *CreateDataauthorizationDirectAuthorizationResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateDataauthorizationDirectAuthorizationResponse) SetResultMsg(v string) *CreateDataauthorizationDirectAuthorizationResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateDataauthorizationDirectAuthorizationResponse) SetAuthorityCert(v string) *CreateDataauthorizationDirectAuthorizationResponse {
	s.AuthorityCert = &v
	return s
}

type ListDataauthorizationAuthorizationPageRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 授权时间终点
	EndTime *int64 `json:"end_time,omitempty" xml:"end_time,omitempty"`
	// 授权人ID
	IssuerId *string `json:"issuer_id,omitempty" xml:"issuer_id,omitempty"`
	// 授权人名字
	IssuerName *string `json:"issuer_name,omitempty" xml:"issuer_name,omitempty"`
	// 页码
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty" require:"true"`
	// 每页大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
	// 空间ID
	SpaceId *string `json:"space_id,omitempty" xml:"space_id,omitempty" require:"true"`
	// 授权时间起点
	StartIme *int64 `json:"start_ime,omitempty" xml:"start_ime,omitempty"`
	// 被授权人ID
	SubjectId *string `json:"subject_id,omitempty" xml:"subject_id,omitempty"`
	// 被授权人名字
	SubjectName *string `json:"subject_name,omitempty" xml:"subject_name,omitempty"`
	// 数据资产ID
	DataId *string `json:"data_id,omitempty" xml:"data_id,omitempty"`
	// 数据模型ID
	DataModelId *string `json:"data_model_id,omitempty" xml:"data_model_id,omitempty"`
}

func (s ListDataauthorizationAuthorizationPageRequest) String() string {
	return tea.Prettify(s)
}

func (s ListDataauthorizationAuthorizationPageRequest) GoString() string {
	return s.String()
}

func (s *ListDataauthorizationAuthorizationPageRequest) SetAuthToken(v string) *ListDataauthorizationAuthorizationPageRequest {
	s.AuthToken = &v
	return s
}

func (s *ListDataauthorizationAuthorizationPageRequest) SetProductInstanceId(v string) *ListDataauthorizationAuthorizationPageRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ListDataauthorizationAuthorizationPageRequest) SetEndTime(v int64) *ListDataauthorizationAuthorizationPageRequest {
	s.EndTime = &v
	return s
}

func (s *ListDataauthorizationAuthorizationPageRequest) SetIssuerId(v string) *ListDataauthorizationAuthorizationPageRequest {
	s.IssuerId = &v
	return s
}

func (s *ListDataauthorizationAuthorizationPageRequest) SetIssuerName(v string) *ListDataauthorizationAuthorizationPageRequest {
	s.IssuerName = &v
	return s
}

func (s *ListDataauthorizationAuthorizationPageRequest) SetPageNum(v int64) *ListDataauthorizationAuthorizationPageRequest {
	s.PageNum = &v
	return s
}

func (s *ListDataauthorizationAuthorizationPageRequest) SetPageSize(v int64) *ListDataauthorizationAuthorizationPageRequest {
	s.PageSize = &v
	return s
}

func (s *ListDataauthorizationAuthorizationPageRequest) SetSpaceId(v string) *ListDataauthorizationAuthorizationPageRequest {
	s.SpaceId = &v
	return s
}

func (s *ListDataauthorizationAuthorizationPageRequest) SetStartIme(v int64) *ListDataauthorizationAuthorizationPageRequest {
	s.StartIme = &v
	return s
}

func (s *ListDataauthorizationAuthorizationPageRequest) SetSubjectId(v string) *ListDataauthorizationAuthorizationPageRequest {
	s.SubjectId = &v
	return s
}

func (s *ListDataauthorizationAuthorizationPageRequest) SetSubjectName(v string) *ListDataauthorizationAuthorizationPageRequest {
	s.SubjectName = &v
	return s
}

func (s *ListDataauthorizationAuthorizationPageRequest) SetDataId(v string) *ListDataauthorizationAuthorizationPageRequest {
	s.DataId = &v
	return s
}

func (s *ListDataauthorizationAuthorizationPageRequest) SetDataModelId(v string) *ListDataauthorizationAuthorizationPageRequest {
	s.DataModelId = &v
	return s
}

type ListDataauthorizationAuthorizationPageResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 授权明细列表
	Data []*AuthorizationDetail `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	// 是否有下
	HasNextPage *bool `json:"has_next_page,omitempty" xml:"has_next_page,omitempty"`
	// 是否有上一页
	HasPreviousPage *bool `json:"has_previous_page,omitempty" xml:"has_previous_page,omitempty"`
	// 页码
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty"`
	// 每页大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 数据总量
	Total *int64 `json:"total,omitempty" xml:"total,omitempty"`
}

func (s ListDataauthorizationAuthorizationPageResponse) String() string {
	return tea.Prettify(s)
}

func (s ListDataauthorizationAuthorizationPageResponse) GoString() string {
	return s.String()
}

func (s *ListDataauthorizationAuthorizationPageResponse) SetReqMsgId(v string) *ListDataauthorizationAuthorizationPageResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListDataauthorizationAuthorizationPageResponse) SetResultCode(v string) *ListDataauthorizationAuthorizationPageResponse {
	s.ResultCode = &v
	return s
}

func (s *ListDataauthorizationAuthorizationPageResponse) SetResultMsg(v string) *ListDataauthorizationAuthorizationPageResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListDataauthorizationAuthorizationPageResponse) SetData(v []*AuthorizationDetail) *ListDataauthorizationAuthorizationPageResponse {
	s.Data = v
	return s
}

func (s *ListDataauthorizationAuthorizationPageResponse) SetHasNextPage(v bool) *ListDataauthorizationAuthorizationPageResponse {
	s.HasNextPage = &v
	return s
}

func (s *ListDataauthorizationAuthorizationPageResponse) SetHasPreviousPage(v bool) *ListDataauthorizationAuthorizationPageResponse {
	s.HasPreviousPage = &v
	return s
}

func (s *ListDataauthorizationAuthorizationPageResponse) SetPageNum(v int64) *ListDataauthorizationAuthorizationPageResponse {
	s.PageNum = &v
	return s
}

func (s *ListDataauthorizationAuthorizationPageResponse) SetPageSize(v int64) *ListDataauthorizationAuthorizationPageResponse {
	s.PageSize = &v
	return s
}

func (s *ListDataauthorizationAuthorizationPageResponse) SetTotal(v int64) *ListDataauthorizationAuthorizationPageResponse {
	s.Total = &v
	return s
}

type ListDataauthorizationAuthparticipantPageRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 数据资产ID
	DataId *string `json:"data_id,omitempty" xml:"data_id,omitempty" require:"true"`
	// 页码
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty" require:"true" minimum:"1"`
	// 每页大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
}

func (s ListDataauthorizationAuthparticipantPageRequest) String() string {
	return tea.Prettify(s)
}

func (s ListDataauthorizationAuthparticipantPageRequest) GoString() string {
	return s.String()
}

func (s *ListDataauthorizationAuthparticipantPageRequest) SetAuthToken(v string) *ListDataauthorizationAuthparticipantPageRequest {
	s.AuthToken = &v
	return s
}

func (s *ListDataauthorizationAuthparticipantPageRequest) SetProductInstanceId(v string) *ListDataauthorizationAuthparticipantPageRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ListDataauthorizationAuthparticipantPageRequest) SetDataId(v string) *ListDataauthorizationAuthparticipantPageRequest {
	s.DataId = &v
	return s
}

func (s *ListDataauthorizationAuthparticipantPageRequest) SetPageNum(v int64) *ListDataauthorizationAuthparticipantPageRequest {
	s.PageNum = &v
	return s
}

func (s *ListDataauthorizationAuthparticipantPageRequest) SetPageSize(v int64) *ListDataauthorizationAuthparticipantPageRequest {
	s.PageSize = &v
	return s
}

type ListDataauthorizationAuthparticipantPageResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 授权列表
	Data []*AuthorizationDetail `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	// 是否有下一页
	HasNextPage *bool `json:"has_next_page,omitempty" xml:"has_next_page,omitempty"`
	// 是否有上一页
	HasPreviousPage *bool `json:"has_previous_page,omitempty" xml:"has_previous_page,omitempty"`
	// 页码
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty"`
	// 每页大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 数据总量
	Total *int64 `json:"total,omitempty" xml:"total,omitempty"`
}

func (s ListDataauthorizationAuthparticipantPageResponse) String() string {
	return tea.Prettify(s)
}

func (s ListDataauthorizationAuthparticipantPageResponse) GoString() string {
	return s.String()
}

func (s *ListDataauthorizationAuthparticipantPageResponse) SetReqMsgId(v string) *ListDataauthorizationAuthparticipantPageResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListDataauthorizationAuthparticipantPageResponse) SetResultCode(v string) *ListDataauthorizationAuthparticipantPageResponse {
	s.ResultCode = &v
	return s
}

func (s *ListDataauthorizationAuthparticipantPageResponse) SetResultMsg(v string) *ListDataauthorizationAuthparticipantPageResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListDataauthorizationAuthparticipantPageResponse) SetData(v []*AuthorizationDetail) *ListDataauthorizationAuthparticipantPageResponse {
	s.Data = v
	return s
}

func (s *ListDataauthorizationAuthparticipantPageResponse) SetHasNextPage(v bool) *ListDataauthorizationAuthparticipantPageResponse {
	s.HasNextPage = &v
	return s
}

func (s *ListDataauthorizationAuthparticipantPageResponse) SetHasPreviousPage(v bool) *ListDataauthorizationAuthparticipantPageResponse {
	s.HasPreviousPage = &v
	return s
}

func (s *ListDataauthorizationAuthparticipantPageResponse) SetPageNum(v int64) *ListDataauthorizationAuthparticipantPageResponse {
	s.PageNum = &v
	return s
}

func (s *ListDataauthorizationAuthparticipantPageResponse) SetPageSize(v int64) *ListDataauthorizationAuthparticipantPageResponse {
	s.PageSize = &v
	return s
}

func (s *ListDataauthorizationAuthparticipantPageResponse) SetTotal(v int64) *ListDataauthorizationAuthparticipantPageResponse {
	s.Total = &v
	return s
}

type CreateDataauthorizationDataAssertRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 业务系统数据唯一标示
	BizUid *string `json:"biz_uid,omitempty" xml:"biz_uid,omitempty" require:"true"`
	// 区块链ID
	BlockchainId *string `json:"blockchain_id,omitempty" xml:"blockchain_id,omitempty"`
	// 资产类别
	Category *string `json:"category,omitempty" xml:"category,omitempty" require:"true"`
	// 数据模型ID
	DataModelId *string `json:"data_model_id,omitempty" xml:"data_model_id,omitempty"`
	// 扩展参数
	ExtensionInfo *string `json:"extension_info,omitempty" xml:"extension_info,omitempty"`
	// 资产名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 所有者ID
	OwnerId *string `json:"owner_id,omitempty" xml:"owner_id,omitempty" require:"true"`
	// 审批流程模版
	ProcessTemplate []*ProcessNode `json:"process_template,omitempty" xml:"process_template,omitempty" type:"Repeated"`
}

func (s CreateDataauthorizationDataAssertRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDataauthorizationDataAssertRequest) GoString() string {
	return s.String()
}

func (s *CreateDataauthorizationDataAssertRequest) SetAuthToken(v string) *CreateDataauthorizationDataAssertRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateDataauthorizationDataAssertRequest) SetProductInstanceId(v string) *CreateDataauthorizationDataAssertRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateDataauthorizationDataAssertRequest) SetBizUid(v string) *CreateDataauthorizationDataAssertRequest {
	s.BizUid = &v
	return s
}

func (s *CreateDataauthorizationDataAssertRequest) SetBlockchainId(v string) *CreateDataauthorizationDataAssertRequest {
	s.BlockchainId = &v
	return s
}

func (s *CreateDataauthorizationDataAssertRequest) SetCategory(v string) *CreateDataauthorizationDataAssertRequest {
	s.Category = &v
	return s
}

func (s *CreateDataauthorizationDataAssertRequest) SetDataModelId(v string) *CreateDataauthorizationDataAssertRequest {
	s.DataModelId = &v
	return s
}

func (s *CreateDataauthorizationDataAssertRequest) SetExtensionInfo(v string) *CreateDataauthorizationDataAssertRequest {
	s.ExtensionInfo = &v
	return s
}

func (s *CreateDataauthorizationDataAssertRequest) SetName(v string) *CreateDataauthorizationDataAssertRequest {
	s.Name = &v
	return s
}

func (s *CreateDataauthorizationDataAssertRequest) SetOwnerId(v string) *CreateDataauthorizationDataAssertRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateDataauthorizationDataAssertRequest) SetProcessTemplate(v []*ProcessNode) *CreateDataauthorizationDataAssertRequest {
	s.ProcessTemplate = v
	return s
}

type CreateDataauthorizationDataAssertResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 数据资产ID
	DataId *string `json:"data_id,omitempty" xml:"data_id,omitempty"`
}

func (s CreateDataauthorizationDataAssertResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDataauthorizationDataAssertResponse) GoString() string {
	return s.String()
}

func (s *CreateDataauthorizationDataAssertResponse) SetReqMsgId(v string) *CreateDataauthorizationDataAssertResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateDataauthorizationDataAssertResponse) SetResultCode(v string) *CreateDataauthorizationDataAssertResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateDataauthorizationDataAssertResponse) SetResultMsg(v string) *CreateDataauthorizationDataAssertResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateDataauthorizationDataAssertResponse) SetDataId(v string) *CreateDataauthorizationDataAssertResponse {
	s.DataId = &v
	return s
}

type UpdateDataauthorizationDataAssertRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 数据资产类别
	Category *string `json:"category,omitempty" xml:"category,omitempty" require:"true"`
	// 数据资产ID
	DataId *string `json:"data_id,omitempty" xml:"data_id,omitempty" require:"true"`
	// 扩展参数
	ExtensionInfo *string `json:"extension_info,omitempty" xml:"extension_info,omitempty"`
	// 数据资产名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 审批流程模版
	ProcessTemplate []*ProcessNode `json:"process_template,omitempty" xml:"process_template,omitempty" type:"Repeated"`
	// 数据模型ID
	DataModelId *string `json:"data_model_id,omitempty" xml:"data_model_id,omitempty"`
}

func (s UpdateDataauthorizationDataAssertRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateDataauthorizationDataAssertRequest) GoString() string {
	return s.String()
}

func (s *UpdateDataauthorizationDataAssertRequest) SetAuthToken(v string) *UpdateDataauthorizationDataAssertRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateDataauthorizationDataAssertRequest) SetProductInstanceId(v string) *UpdateDataauthorizationDataAssertRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UpdateDataauthorizationDataAssertRequest) SetCategory(v string) *UpdateDataauthorizationDataAssertRequest {
	s.Category = &v
	return s
}

func (s *UpdateDataauthorizationDataAssertRequest) SetDataId(v string) *UpdateDataauthorizationDataAssertRequest {
	s.DataId = &v
	return s
}

func (s *UpdateDataauthorizationDataAssertRequest) SetExtensionInfo(v string) *UpdateDataauthorizationDataAssertRequest {
	s.ExtensionInfo = &v
	return s
}

func (s *UpdateDataauthorizationDataAssertRequest) SetName(v string) *UpdateDataauthorizationDataAssertRequest {
	s.Name = &v
	return s
}

func (s *UpdateDataauthorizationDataAssertRequest) SetProcessTemplate(v []*ProcessNode) *UpdateDataauthorizationDataAssertRequest {
	s.ProcessTemplate = v
	return s
}

func (s *UpdateDataauthorizationDataAssertRequest) SetDataModelId(v string) *UpdateDataauthorizationDataAssertRequest {
	s.DataModelId = &v
	return s
}

type UpdateDataauthorizationDataAssertResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateDataauthorizationDataAssertResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateDataauthorizationDataAssertResponse) GoString() string {
	return s.String()
}

func (s *UpdateDataauthorizationDataAssertResponse) SetReqMsgId(v string) *UpdateDataauthorizationDataAssertResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateDataauthorizationDataAssertResponse) SetResultCode(v string) *UpdateDataauthorizationDataAssertResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateDataauthorizationDataAssertResponse) SetResultMsg(v string) *UpdateDataauthorizationDataAssertResponse {
	s.ResultMsg = &v
	return s
}

type DeleteDataauthorizationDataAssertRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 数据资产ID
	DataId *string `json:"data_id,omitempty" xml:"data_id,omitempty" require:"true"`
}

func (s DeleteDataauthorizationDataAssertRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDataauthorizationDataAssertRequest) GoString() string {
	return s.String()
}

func (s *DeleteDataauthorizationDataAssertRequest) SetAuthToken(v string) *DeleteDataauthorizationDataAssertRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteDataauthorizationDataAssertRequest) SetProductInstanceId(v string) *DeleteDataauthorizationDataAssertRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *DeleteDataauthorizationDataAssertRequest) SetDataId(v string) *DeleteDataauthorizationDataAssertRequest {
	s.DataId = &v
	return s
}

type DeleteDataauthorizationDataAssertResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s DeleteDataauthorizationDataAssertResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDataauthorizationDataAssertResponse) GoString() string {
	return s.String()
}

func (s *DeleteDataauthorizationDataAssertResponse) SetReqMsgId(v string) *DeleteDataauthorizationDataAssertResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteDataauthorizationDataAssertResponse) SetResultCode(v string) *DeleteDataauthorizationDataAssertResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteDataauthorizationDataAssertResponse) SetResultMsg(v string) *DeleteDataauthorizationDataAssertResponse {
	s.ResultMsg = &v
	return s
}

type CreateDataauthorizationAgentAuthorizationRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 业务UUID
	BizUid *string `json:"biz_uid,omitempty" xml:"biz_uid,omitempty" require:"true"`
	// 授权原因
	Comment *string `json:"comment,omitempty" xml:"comment,omitempty" require:"true"`
	// 数据资产ID
	DataId *string `json:"data_id,omitempty" xml:"data_id,omitempty" require:"true"`
	// 过期时间
	Expire *int64 `json:"expire,omitempty" xml:"expire,omitempty" require:"true"`
	// 扩展参数
	ExtensionInfo *string `json:"extension_info,omitempty" xml:"extension_info,omitempty"`
	// 授权规则
	Rule *AuthorizationRule `json:"rule,omitempty" xml:"rule,omitempty"`
	// 被授权人ID
	SubjectId *string `json:"subject_id,omitempty" xml:"subject_id,omitempty" require:"true"`
	// 申请代理授权的参与方DID
	ApplicantId *string `json:"applicant_id,omitempty" xml:"applicant_id,omitempty" require:"true"`
}

func (s CreateDataauthorizationAgentAuthorizationRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDataauthorizationAgentAuthorizationRequest) GoString() string {
	return s.String()
}

func (s *CreateDataauthorizationAgentAuthorizationRequest) SetAuthToken(v string) *CreateDataauthorizationAgentAuthorizationRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateDataauthorizationAgentAuthorizationRequest) SetProductInstanceId(v string) *CreateDataauthorizationAgentAuthorizationRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateDataauthorizationAgentAuthorizationRequest) SetBizUid(v string) *CreateDataauthorizationAgentAuthorizationRequest {
	s.BizUid = &v
	return s
}

func (s *CreateDataauthorizationAgentAuthorizationRequest) SetComment(v string) *CreateDataauthorizationAgentAuthorizationRequest {
	s.Comment = &v
	return s
}

func (s *CreateDataauthorizationAgentAuthorizationRequest) SetDataId(v string) *CreateDataauthorizationAgentAuthorizationRequest {
	s.DataId = &v
	return s
}

func (s *CreateDataauthorizationAgentAuthorizationRequest) SetExpire(v int64) *CreateDataauthorizationAgentAuthorizationRequest {
	s.Expire = &v
	return s
}

func (s *CreateDataauthorizationAgentAuthorizationRequest) SetExtensionInfo(v string) *CreateDataauthorizationAgentAuthorizationRequest {
	s.ExtensionInfo = &v
	return s
}

func (s *CreateDataauthorizationAgentAuthorizationRequest) SetRule(v *AuthorizationRule) *CreateDataauthorizationAgentAuthorizationRequest {
	s.Rule = v
	return s
}

func (s *CreateDataauthorizationAgentAuthorizationRequest) SetSubjectId(v string) *CreateDataauthorizationAgentAuthorizationRequest {
	s.SubjectId = &v
	return s
}

func (s *CreateDataauthorizationAgentAuthorizationRequest) SetApplicantId(v string) *CreateDataauthorizationAgentAuthorizationRequest {
	s.ApplicantId = &v
	return s
}

type CreateDataauthorizationAgentAuthorizationResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 授权凭证
	AuthorityCert *string `json:"authority_cert,omitempty" xml:"authority_cert,omitempty"`
}

func (s CreateDataauthorizationAgentAuthorizationResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDataauthorizationAgentAuthorizationResponse) GoString() string {
	return s.String()
}

func (s *CreateDataauthorizationAgentAuthorizationResponse) SetReqMsgId(v string) *CreateDataauthorizationAgentAuthorizationResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateDataauthorizationAgentAuthorizationResponse) SetResultCode(v string) *CreateDataauthorizationAgentAuthorizationResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateDataauthorizationAgentAuthorizationResponse) SetResultMsg(v string) *CreateDataauthorizationAgentAuthorizationResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateDataauthorizationAgentAuthorizationResponse) SetAuthorityCert(v string) *CreateDataauthorizationAgentAuthorizationResponse {
	s.AuthorityCert = &v
	return s
}

type ListDataauthorizationAuthorityCertRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 授权凭证ID列表
	AuthorityCertIds []*string `json:"authority_cert_ids,omitempty" xml:"authority_cert_ids,omitempty" require:"true" type:"Repeated"`
}

func (s ListDataauthorizationAuthorityCertRequest) String() string {
	return tea.Prettify(s)
}

func (s ListDataauthorizationAuthorityCertRequest) GoString() string {
	return s.String()
}

func (s *ListDataauthorizationAuthorityCertRequest) SetAuthToken(v string) *ListDataauthorizationAuthorityCertRequest {
	s.AuthToken = &v
	return s
}

func (s *ListDataauthorizationAuthorityCertRequest) SetProductInstanceId(v string) *ListDataauthorizationAuthorityCertRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ListDataauthorizationAuthorityCertRequest) SetAuthorityCertIds(v []*string) *ListDataauthorizationAuthorityCertRequest {
	s.AuthorityCertIds = v
	return s
}

type ListDataauthorizationAuthorityCertResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 授权详情列表
	Data []*AuthorizationDetail `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s ListDataauthorizationAuthorityCertResponse) String() string {
	return tea.Prettify(s)
}

func (s ListDataauthorizationAuthorityCertResponse) GoString() string {
	return s.String()
}

func (s *ListDataauthorizationAuthorityCertResponse) SetReqMsgId(v string) *ListDataauthorizationAuthorityCertResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListDataauthorizationAuthorityCertResponse) SetResultCode(v string) *ListDataauthorizationAuthorityCertResponse {
	s.ResultCode = &v
	return s
}

func (s *ListDataauthorizationAuthorityCertResponse) SetResultMsg(v string) *ListDataauthorizationAuthorityCertResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListDataauthorizationAuthorityCertResponse) SetData(v []*AuthorizationDetail) *ListDataauthorizationAuthorityCertResponse {
	s.Data = v
	return s
}

type SaveDataauthorizationDepositDataRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 存证内容
	TxData *string `json:"tx_data,omitempty" xml:"tx_data,omitempty" require:"true"`
	// 发送数据上链的DID
	SenderId *string `json:"sender_id,omitempty" xml:"sender_id,omitempty"`
}

func (s SaveDataauthorizationDepositDataRequest) String() string {
	return tea.Prettify(s)
}

func (s SaveDataauthorizationDepositDataRequest) GoString() string {
	return s.String()
}

func (s *SaveDataauthorizationDepositDataRequest) SetAuthToken(v string) *SaveDataauthorizationDepositDataRequest {
	s.AuthToken = &v
	return s
}

func (s *SaveDataauthorizationDepositDataRequest) SetProductInstanceId(v string) *SaveDataauthorizationDepositDataRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *SaveDataauthorizationDepositDataRequest) SetTxData(v string) *SaveDataauthorizationDepositDataRequest {
	s.TxData = &v
	return s
}

func (s *SaveDataauthorizationDepositDataRequest) SetSenderId(v string) *SaveDataauthorizationDepositDataRequest {
	s.SenderId = &v
	return s
}

type SaveDataauthorizationDepositDataResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 交易HASH
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty"`
}

func (s SaveDataauthorizationDepositDataResponse) String() string {
	return tea.Prettify(s)
}

func (s SaveDataauthorizationDepositDataResponse) GoString() string {
	return s.String()
}

func (s *SaveDataauthorizationDepositDataResponse) SetReqMsgId(v string) *SaveDataauthorizationDepositDataResponse {
	s.ReqMsgId = &v
	return s
}

func (s *SaveDataauthorizationDepositDataResponse) SetResultCode(v string) *SaveDataauthorizationDepositDataResponse {
	s.ResultCode = &v
	return s
}

func (s *SaveDataauthorizationDepositDataResponse) SetResultMsg(v string) *SaveDataauthorizationDepositDataResponse {
	s.ResultMsg = &v
	return s
}

func (s *SaveDataauthorizationDepositDataResponse) SetTxHash(v string) *SaveDataauthorizationDepositDataResponse {
	s.TxHash = &v
	return s
}

type StartDataauthorizationSyncDataRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 枚举值：
	// DATAENTITY：数据目录
	// PARTICIPANT：参与方
	Type *string `json:"type,omitempty" xml:"type,omitempty" require:"true"`
	// 接收同步数据的DID
	ReceiverId *string `json:"receiver_id,omitempty" xml:"receiver_id,omitempty" require:"true"`
}

func (s StartDataauthorizationSyncDataRequest) String() string {
	return tea.Prettify(s)
}

func (s StartDataauthorizationSyncDataRequest) GoString() string {
	return s.String()
}

func (s *StartDataauthorizationSyncDataRequest) SetAuthToken(v string) *StartDataauthorizationSyncDataRequest {
	s.AuthToken = &v
	return s
}

func (s *StartDataauthorizationSyncDataRequest) SetProductInstanceId(v string) *StartDataauthorizationSyncDataRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *StartDataauthorizationSyncDataRequest) SetType(v string) *StartDataauthorizationSyncDataRequest {
	s.Type = &v
	return s
}

func (s *StartDataauthorizationSyncDataRequest) SetReceiverId(v string) *StartDataauthorizationSyncDataRequest {
	s.ReceiverId = &v
	return s
}

type StartDataauthorizationSyncDataResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 待同步的数据总量
	Total *int64 `json:"total,omitempty" xml:"total,omitempty"`
	// 最后一条数据的创建时间
	LastCreateTime *int64 `json:"last_create_time,omitempty" xml:"last_create_time,omitempty"`
	// 任务ID
	TaskId *string `json:"task_id,omitempty" xml:"task_id,omitempty"`
}

func (s StartDataauthorizationSyncDataResponse) String() string {
	return tea.Prettify(s)
}

func (s StartDataauthorizationSyncDataResponse) GoString() string {
	return s.String()
}

func (s *StartDataauthorizationSyncDataResponse) SetReqMsgId(v string) *StartDataauthorizationSyncDataResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartDataauthorizationSyncDataResponse) SetResultCode(v string) *StartDataauthorizationSyncDataResponse {
	s.ResultCode = &v
	return s
}

func (s *StartDataauthorizationSyncDataResponse) SetResultMsg(v string) *StartDataauthorizationSyncDataResponse {
	s.ResultMsg = &v
	return s
}

func (s *StartDataauthorizationSyncDataResponse) SetTotal(v int64) *StartDataauthorizationSyncDataResponse {
	s.Total = &v
	return s
}

func (s *StartDataauthorizationSyncDataResponse) SetLastCreateTime(v int64) *StartDataauthorizationSyncDataResponse {
	s.LastCreateTime = &v
	return s
}

func (s *StartDataauthorizationSyncDataResponse) SetTaskId(v string) *StartDataauthorizationSyncDataResponse {
	s.TaskId = &v
	return s
}

type QueryTraceabilityTxCheckRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 接入业务标识，一接入方有条链或者必须区分统计业务类型情况下必填。
	BizType *string `json:"biz_type,omitempty" xml:"biz_type,omitempty"`
	// 溯源信息内容校验码用sha256hex(内容) 计算出其正确性。
	PayloadHash *string `json:"payload_hash,omitempty" xml:"payload_hash,omitempty"`
	// 区块链接入来源
	Source *string `json:"source,omitempty" xml:"source,omitempty" require:"true"`
	// 区块查证信息透传
	SubTitle *string `json:"sub_title,omitempty" xml:"sub_title,omitempty"`
	// 透传到查证结果的标题信息
	Title *string `json:"title,omitempty" xml:"title,omitempty"`
	// 要查询的区块链交易信息。
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty" require:"true"`
}

func (s QueryTraceabilityTxCheckRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryTraceabilityTxCheckRequest) GoString() string {
	return s.String()
}

func (s *QueryTraceabilityTxCheckRequest) SetAuthToken(v string) *QueryTraceabilityTxCheckRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryTraceabilityTxCheckRequest) SetProductInstanceId(v string) *QueryTraceabilityTxCheckRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryTraceabilityTxCheckRequest) SetBizType(v string) *QueryTraceabilityTxCheckRequest {
	s.BizType = &v
	return s
}

func (s *QueryTraceabilityTxCheckRequest) SetPayloadHash(v string) *QueryTraceabilityTxCheckRequest {
	s.PayloadHash = &v
	return s
}

func (s *QueryTraceabilityTxCheckRequest) SetSource(v string) *QueryTraceabilityTxCheckRequest {
	s.Source = &v
	return s
}

func (s *QueryTraceabilityTxCheckRequest) SetSubTitle(v string) *QueryTraceabilityTxCheckRequest {
	s.SubTitle = &v
	return s
}

func (s *QueryTraceabilityTxCheckRequest) SetTitle(v string) *QueryTraceabilityTxCheckRequest {
	s.Title = &v
	return s
}

func (s *QueryTraceabilityTxCheckRequest) SetTxHash(v string) *QueryTraceabilityTxCheckRequest {
	s.TxHash = &v
	return s
}

type QueryTraceabilityTxCheckResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 溯源项列表
	Items []*Item `json:"items,omitempty" xml:"items,omitempty" type:"Repeated"`
	// 提示信息
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// 展现信息的副标题
	SubTitle *string `json:"sub_title,omitempty" xml:"sub_title,omitempty"`
	// 显示查证结果的标题
	Title *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s QueryTraceabilityTxCheckResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryTraceabilityTxCheckResponse) GoString() string {
	return s.String()
}

func (s *QueryTraceabilityTxCheckResponse) SetReqMsgId(v string) *QueryTraceabilityTxCheckResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryTraceabilityTxCheckResponse) SetResultCode(v string) *QueryTraceabilityTxCheckResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryTraceabilityTxCheckResponse) SetResultMsg(v string) *QueryTraceabilityTxCheckResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryTraceabilityTxCheckResponse) SetItems(v []*Item) *QueryTraceabilityTxCheckResponse {
	s.Items = v
	return s
}

func (s *QueryTraceabilityTxCheckResponse) SetMessage(v string) *QueryTraceabilityTxCheckResponse {
	s.Message = &v
	return s
}

func (s *QueryTraceabilityTxCheckResponse) SetSubTitle(v string) *QueryTraceabilityTxCheckResponse {
	s.SubTitle = &v
	return s
}

func (s *QueryTraceabilityTxCheckResponse) SetTitle(v string) *QueryTraceabilityTxCheckResponse {
	s.Title = &v
	return s
}

type QueryTraceabilityBlockchainInfosRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 区块链id
	Bizid *string `json:"bizid,omitempty" xml:"bizid,omitempty" require:"true"`
}

func (s QueryTraceabilityBlockchainInfosRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryTraceabilityBlockchainInfosRequest) GoString() string {
	return s.String()
}

func (s *QueryTraceabilityBlockchainInfosRequest) SetAuthToken(v string) *QueryTraceabilityBlockchainInfosRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryTraceabilityBlockchainInfosRequest) SetProductInstanceId(v string) *QueryTraceabilityBlockchainInfosRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryTraceabilityBlockchainInfosRequest) SetBizid(v string) *QueryTraceabilityBlockchainInfosRequest {
	s.Bizid = &v
	return s
}

type QueryTraceabilityBlockchainInfosResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 异常的节点数
	AbnormalNodes *int64 `json:"abnormal_nodes,omitempty" xml:"abnormal_nodes,omitempty"`
	// 区块链id
	Bizid *string `json:"bizid,omitempty" xml:"bizid,omitempty"`
	// 区块高度
	BlockHeight *int64 `json:"block_height,omitempty" xml:"block_height,omitempty"`
	// 创建时间
	CreateTime *string `json:"create_time,omitempty" xml:"create_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 链的状态，是否正常
	IsNormal *bool `json:"is_normal,omitempty" xml:"is_normal,omitempty"`
	// 是否为管理员权限
	IsRole *bool `json:"is_role,omitempty" xml:"is_role,omitempty"`
	// 链的名字
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 节点信息
	NodeInfoList []*NodeInfo `json:"node_info_list,omitempty" xml:"node_info_list,omitempty" type:"Repeated"`
	// 节点数
	NodeNumber *int64 `json:"node_number,omitempty" xml:"node_number,omitempty"`
	// 链上交易数
	TransactionSum *int64 `json:"transaction_sum,omitempty" xml:"transaction_sum,omitempty"`
	// 链的版本
	Version *string `json:"version,omitempty" xml:"version,omitempty"`
}

func (s QueryTraceabilityBlockchainInfosResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryTraceabilityBlockchainInfosResponse) GoString() string {
	return s.String()
}

func (s *QueryTraceabilityBlockchainInfosResponse) SetReqMsgId(v string) *QueryTraceabilityBlockchainInfosResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryTraceabilityBlockchainInfosResponse) SetResultCode(v string) *QueryTraceabilityBlockchainInfosResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryTraceabilityBlockchainInfosResponse) SetResultMsg(v string) *QueryTraceabilityBlockchainInfosResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryTraceabilityBlockchainInfosResponse) SetAbnormalNodes(v int64) *QueryTraceabilityBlockchainInfosResponse {
	s.AbnormalNodes = &v
	return s
}

func (s *QueryTraceabilityBlockchainInfosResponse) SetBizid(v string) *QueryTraceabilityBlockchainInfosResponse {
	s.Bizid = &v
	return s
}

func (s *QueryTraceabilityBlockchainInfosResponse) SetBlockHeight(v int64) *QueryTraceabilityBlockchainInfosResponse {
	s.BlockHeight = &v
	return s
}

func (s *QueryTraceabilityBlockchainInfosResponse) SetCreateTime(v string) *QueryTraceabilityBlockchainInfosResponse {
	s.CreateTime = &v
	return s
}

func (s *QueryTraceabilityBlockchainInfosResponse) SetIsNormal(v bool) *QueryTraceabilityBlockchainInfosResponse {
	s.IsNormal = &v
	return s
}

func (s *QueryTraceabilityBlockchainInfosResponse) SetIsRole(v bool) *QueryTraceabilityBlockchainInfosResponse {
	s.IsRole = &v
	return s
}

func (s *QueryTraceabilityBlockchainInfosResponse) SetName(v string) *QueryTraceabilityBlockchainInfosResponse {
	s.Name = &v
	return s
}

func (s *QueryTraceabilityBlockchainInfosResponse) SetNodeInfoList(v []*NodeInfo) *QueryTraceabilityBlockchainInfosResponse {
	s.NodeInfoList = v
	return s
}

func (s *QueryTraceabilityBlockchainInfosResponse) SetNodeNumber(v int64) *QueryTraceabilityBlockchainInfosResponse {
	s.NodeNumber = &v
	return s
}

func (s *QueryTraceabilityBlockchainInfosResponse) SetTransactionSum(v int64) *QueryTraceabilityBlockchainInfosResponse {
	s.TransactionSum = &v
	return s
}

func (s *QueryTraceabilityBlockchainInfosResponse) SetVersion(v string) *QueryTraceabilityBlockchainInfosResponse {
	s.Version = &v
	return s
}

type SaveBlockchainBrowserPrivilegeRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链id
	Bizid *string `json:"bizid,omitempty" xml:"bizid,omitempty" require:"true"`
	// ORGJC1CN
	Tenantid *string `json:"tenantid,omitempty" xml:"tenantid,omitempty" require:"true"`
}

func (s SaveBlockchainBrowserPrivilegeRequest) String() string {
	return tea.Prettify(s)
}

func (s SaveBlockchainBrowserPrivilegeRequest) GoString() string {
	return s.String()
}

func (s *SaveBlockchainBrowserPrivilegeRequest) SetAuthToken(v string) *SaveBlockchainBrowserPrivilegeRequest {
	s.AuthToken = &v
	return s
}

func (s *SaveBlockchainBrowserPrivilegeRequest) SetProductInstanceId(v string) *SaveBlockchainBrowserPrivilegeRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *SaveBlockchainBrowserPrivilegeRequest) SetBizid(v string) *SaveBlockchainBrowserPrivilegeRequest {
	s.Bizid = &v
	return s
}

func (s *SaveBlockchainBrowserPrivilegeRequest) SetTenantid(v string) *SaveBlockchainBrowserPrivilegeRequest {
	s.Tenantid = &v
	return s
}

type SaveBlockchainBrowserPrivilegeResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s SaveBlockchainBrowserPrivilegeResponse) String() string {
	return tea.Prettify(s)
}

func (s SaveBlockchainBrowserPrivilegeResponse) GoString() string {
	return s.String()
}

func (s *SaveBlockchainBrowserPrivilegeResponse) SetReqMsgId(v string) *SaveBlockchainBrowserPrivilegeResponse {
	s.ReqMsgId = &v
	return s
}

func (s *SaveBlockchainBrowserPrivilegeResponse) SetResultCode(v string) *SaveBlockchainBrowserPrivilegeResponse {
	s.ResultCode = &v
	return s
}

func (s *SaveBlockchainBrowserPrivilegeResponse) SetResultMsg(v string) *SaveBlockchainBrowserPrivilegeResponse {
	s.ResultMsg = &v
	return s
}

type QueryBlockchainBrowserPrivilegeRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链id
	Bizid *string `json:"bizid,omitempty" xml:"bizid,omitempty" require:"true"`
	// 租户id
	Tenantid *string `json:"tenantid,omitempty" xml:"tenantid,omitempty" require:"true"`
}

func (s QueryBlockchainBrowserPrivilegeRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryBlockchainBrowserPrivilegeRequest) GoString() string {
	return s.String()
}

func (s *QueryBlockchainBrowserPrivilegeRequest) SetAuthToken(v string) *QueryBlockchainBrowserPrivilegeRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryBlockchainBrowserPrivilegeRequest) SetProductInstanceId(v string) *QueryBlockchainBrowserPrivilegeRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryBlockchainBrowserPrivilegeRequest) SetBizid(v string) *QueryBlockchainBrowserPrivilegeRequest {
	s.Bizid = &v
	return s
}

func (s *QueryBlockchainBrowserPrivilegeRequest) SetTenantid(v string) *QueryBlockchainBrowserPrivilegeRequest {
	s.Tenantid = &v
	return s
}

type QueryBlockchainBrowserPrivilegeResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s QueryBlockchainBrowserPrivilegeResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryBlockchainBrowserPrivilegeResponse) GoString() string {
	return s.String()
}

func (s *QueryBlockchainBrowserPrivilegeResponse) SetReqMsgId(v string) *QueryBlockchainBrowserPrivilegeResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryBlockchainBrowserPrivilegeResponse) SetResultCode(v string) *QueryBlockchainBrowserPrivilegeResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryBlockchainBrowserPrivilegeResponse) SetResultMsg(v string) *QueryBlockchainBrowserPrivilegeResponse {
	s.ResultMsg = &v
	return s
}

type DeleteBlockchainBrowserPrivilegeRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链id
	Bizid *string `json:"bizid,omitempty" xml:"bizid,omitempty" require:"true"`
	// ORGJC1CN
	Tenantid *string `json:"tenantid,omitempty" xml:"tenantid,omitempty" require:"true"`
}

func (s DeleteBlockchainBrowserPrivilegeRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteBlockchainBrowserPrivilegeRequest) GoString() string {
	return s.String()
}

func (s *DeleteBlockchainBrowserPrivilegeRequest) SetAuthToken(v string) *DeleteBlockchainBrowserPrivilegeRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteBlockchainBrowserPrivilegeRequest) SetProductInstanceId(v string) *DeleteBlockchainBrowserPrivilegeRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *DeleteBlockchainBrowserPrivilegeRequest) SetBizid(v string) *DeleteBlockchainBrowserPrivilegeRequest {
	s.Bizid = &v
	return s
}

func (s *DeleteBlockchainBrowserPrivilegeRequest) SetTenantid(v string) *DeleteBlockchainBrowserPrivilegeRequest {
	s.Tenantid = &v
	return s
}

type DeleteBlockchainBrowserPrivilegeResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s DeleteBlockchainBrowserPrivilegeResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteBlockchainBrowserPrivilegeResponse) GoString() string {
	return s.String()
}

func (s *DeleteBlockchainBrowserPrivilegeResponse) SetReqMsgId(v string) *DeleteBlockchainBrowserPrivilegeResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteBlockchainBrowserPrivilegeResponse) SetResultCode(v string) *DeleteBlockchainBrowserPrivilegeResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteBlockchainBrowserPrivilegeResponse) SetResultMsg(v string) *DeleteBlockchainBrowserPrivilegeResponse {
	s.ResultMsg = &v
	return s
}

type GetBlockchainMiniprogramRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 蚂蚁区块链的唯一链id
	Bizid *string `json:"bizid,omitempty" xml:"bizid,omitempty" require:"true"`
	// 蚂蚁区块链的链上交易hash值
	Hash *string `json:"hash,omitempty" xml:"hash,omitempty" require:"true"`
	// 原生存证数据展示自定义合约地址
	ContractId *string `json:"contract_id,omitempty" xml:"contract_id,omitempty"`
}

func (s GetBlockchainMiniprogramRequest) String() string {
	return tea.Prettify(s)
}

func (s GetBlockchainMiniprogramRequest) GoString() string {
	return s.String()
}

func (s *GetBlockchainMiniprogramRequest) SetAuthToken(v string) *GetBlockchainMiniprogramRequest {
	s.AuthToken = &v
	return s
}

func (s *GetBlockchainMiniprogramRequest) SetProductInstanceId(v string) *GetBlockchainMiniprogramRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *GetBlockchainMiniprogramRequest) SetBizid(v string) *GetBlockchainMiniprogramRequest {
	s.Bizid = &v
	return s
}

func (s *GetBlockchainMiniprogramRequest) SetHash(v string) *GetBlockchainMiniprogramRequest {
	s.Hash = &v
	return s
}

func (s *GetBlockchainMiniprogramRequest) SetContractId(v string) *GetBlockchainMiniprogramRequest {
	s.ContractId = &v
	return s
}

type GetBlockchainMiniprogramResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 交易二维码二进制内容的Base64编码
	QrCodeDownloadUrl *string `json:"qr_code_download_url,omitempty" xml:"qr_code_download_url,omitempty"`
}

func (s GetBlockchainMiniprogramResponse) String() string {
	return tea.Prettify(s)
}

func (s GetBlockchainMiniprogramResponse) GoString() string {
	return s.String()
}

func (s *GetBlockchainMiniprogramResponse) SetReqMsgId(v string) *GetBlockchainMiniprogramResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetBlockchainMiniprogramResponse) SetResultCode(v string) *GetBlockchainMiniprogramResponse {
	s.ResultCode = &v
	return s
}

func (s *GetBlockchainMiniprogramResponse) SetResultMsg(v string) *GetBlockchainMiniprogramResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetBlockchainMiniprogramResponse) SetQrCodeDownloadUrl(v string) *GetBlockchainMiniprogramResponse {
	s.QrCodeDownloadUrl = &v
	return s
}

type AddBlockchainMiniprogramRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 蚂蚁区块链的唯一链id
	Bizid *string `json:"bizid,omitempty" xml:"bizid,omitempty" require:"true"`
	// 授权查看权限的支付宝电话号码集合
	PhoneNumbers *string `json:"phone_numbers,omitempty" xml:"phone_numbers,omitempty" require:"true"`
}

func (s AddBlockchainMiniprogramRequest) String() string {
	return tea.Prettify(s)
}

func (s AddBlockchainMiniprogramRequest) GoString() string {
	return s.String()
}

func (s *AddBlockchainMiniprogramRequest) SetAuthToken(v string) *AddBlockchainMiniprogramRequest {
	s.AuthToken = &v
	return s
}

func (s *AddBlockchainMiniprogramRequest) SetProductInstanceId(v string) *AddBlockchainMiniprogramRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *AddBlockchainMiniprogramRequest) SetBizid(v string) *AddBlockchainMiniprogramRequest {
	s.Bizid = &v
	return s
}

func (s *AddBlockchainMiniprogramRequest) SetPhoneNumbers(v string) *AddBlockchainMiniprogramRequest {
	s.PhoneNumbers = &v
	return s
}

type AddBlockchainMiniprogramResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 批量添加权限成功与否
	Status *int64 `json:"status,omitempty" xml:"status,omitempty"`
}

func (s AddBlockchainMiniprogramResponse) String() string {
	return tea.Prettify(s)
}

func (s AddBlockchainMiniprogramResponse) GoString() string {
	return s.String()
}

func (s *AddBlockchainMiniprogramResponse) SetReqMsgId(v string) *AddBlockchainMiniprogramResponse {
	s.ReqMsgId = &v
	return s
}

func (s *AddBlockchainMiniprogramResponse) SetResultCode(v string) *AddBlockchainMiniprogramResponse {
	s.ResultCode = &v
	return s
}

func (s *AddBlockchainMiniprogramResponse) SetResultMsg(v string) *AddBlockchainMiniprogramResponse {
	s.ResultMsg = &v
	return s
}

func (s *AddBlockchainMiniprogramResponse) SetStatus(v int64) *AddBlockchainMiniprogramResponse {
	s.Status = &v
	return s
}

type QueryBrowserTransactionStatisticRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// bizid
	Bizid *string `json:"bizid,omitempty" xml:"bizid,omitempty" require:"true"`
	// 截止时间
	EndTime *int64 `json:"end_time,omitempty" xml:"end_time,omitempty" require:"true"`
	// 开始时间
	StartTime *int64 `json:"start_time,omitempty" xml:"start_time,omitempty" require:"true"`
}

func (s QueryBrowserTransactionStatisticRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryBrowserTransactionStatisticRequest) GoString() string {
	return s.String()
}

func (s *QueryBrowserTransactionStatisticRequest) SetAuthToken(v string) *QueryBrowserTransactionStatisticRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryBrowserTransactionStatisticRequest) SetProductInstanceId(v string) *QueryBrowserTransactionStatisticRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryBrowserTransactionStatisticRequest) SetBizid(v string) *QueryBrowserTransactionStatisticRequest {
	s.Bizid = &v
	return s
}

func (s *QueryBrowserTransactionStatisticRequest) SetEndTime(v int64) *QueryBrowserTransactionStatisticRequest {
	s.EndTime = &v
	return s
}

func (s *QueryBrowserTransactionStatisticRequest) SetStartTime(v int64) *QueryBrowserTransactionStatisticRequest {
	s.StartTime = &v
	return s
}

type QueryBrowserTransactionStatisticResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// result
	Result []*BlockchainBrowserTransactionStatistic `json:"result,omitempty" xml:"result,omitempty" type:"Repeated"`
}

func (s QueryBrowserTransactionStatisticResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryBrowserTransactionStatisticResponse) GoString() string {
	return s.String()
}

func (s *QueryBrowserTransactionStatisticResponse) SetReqMsgId(v string) *QueryBrowserTransactionStatisticResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryBrowserTransactionStatisticResponse) SetResultCode(v string) *QueryBrowserTransactionStatisticResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryBrowserTransactionStatisticResponse) SetResultMsg(v string) *QueryBrowserTransactionStatisticResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryBrowserTransactionStatisticResponse) SetResult(v []*BlockchainBrowserTransactionStatistic) *QueryBrowserTransactionStatisticResponse {
	s.Result = v
	return s
}

type QueryBrowserBlockLatestRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// bizid
	Bizid *string `json:"bizid,omitempty" xml:"bizid,omitempty" require:"true"`
}

func (s QueryBrowserBlockLatestRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryBrowserBlockLatestRequest) GoString() string {
	return s.String()
}

func (s *QueryBrowserBlockLatestRequest) SetAuthToken(v string) *QueryBrowserBlockLatestRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryBrowserBlockLatestRequest) SetProductInstanceId(v string) *QueryBrowserBlockLatestRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryBrowserBlockLatestRequest) SetBizid(v string) *QueryBrowserBlockLatestRequest {
	s.Bizid = &v
	return s
}

type QueryBrowserBlockLatestResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// result
	Result []*BlockchainBrowserLatestBlock `json:"result,omitempty" xml:"result,omitempty" type:"Repeated"`
}

func (s QueryBrowserBlockLatestResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryBrowserBlockLatestResponse) GoString() string {
	return s.String()
}

func (s *QueryBrowserBlockLatestResponse) SetReqMsgId(v string) *QueryBrowserBlockLatestResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryBrowserBlockLatestResponse) SetResultCode(v string) *QueryBrowserBlockLatestResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryBrowserBlockLatestResponse) SetResultMsg(v string) *QueryBrowserBlockLatestResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryBrowserBlockLatestResponse) SetResult(v []*BlockchainBrowserLatestBlock) *QueryBrowserBlockLatestResponse {
	s.Result = v
	return s
}

type QueryBrowserTransactionLatestRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// bizid
	Bizid *string `json:"bizid,omitempty" xml:"bizid,omitempty" require:"true"`
}

func (s QueryBrowserTransactionLatestRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryBrowserTransactionLatestRequest) GoString() string {
	return s.String()
}

func (s *QueryBrowserTransactionLatestRequest) SetAuthToken(v string) *QueryBrowserTransactionLatestRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryBrowserTransactionLatestRequest) SetProductInstanceId(v string) *QueryBrowserTransactionLatestRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryBrowserTransactionLatestRequest) SetBizid(v string) *QueryBrowserTransactionLatestRequest {
	s.Bizid = &v
	return s
}

type QueryBrowserTransactionLatestResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// result
	Result []*BlockchainBrowserLatestTransaction `json:"result,omitempty" xml:"result,omitempty" type:"Repeated"`
}

func (s QueryBrowserTransactionLatestResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryBrowserTransactionLatestResponse) GoString() string {
	return s.String()
}

func (s *QueryBrowserTransactionLatestResponse) SetReqMsgId(v string) *QueryBrowserTransactionLatestResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryBrowserTransactionLatestResponse) SetResultCode(v string) *QueryBrowserTransactionLatestResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryBrowserTransactionLatestResponse) SetResultMsg(v string) *QueryBrowserTransactionLatestResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryBrowserTransactionLatestResponse) SetResult(v []*BlockchainBrowserLatestTransaction) *QueryBrowserTransactionLatestResponse {
	s.Result = v
	return s
}

type QueryBrowserBlockRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// bizid
	Bizid *string `json:"bizid,omitempty" xml:"bizid,omitempty" require:"true"`
	// height
	Height *int64 `json:"height,omitempty" xml:"height,omitempty" require:"true"`
}

func (s QueryBrowserBlockRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryBrowserBlockRequest) GoString() string {
	return s.String()
}

func (s *QueryBrowserBlockRequest) SetAuthToken(v string) *QueryBrowserBlockRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryBrowserBlockRequest) SetProductInstanceId(v string) *QueryBrowserBlockRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryBrowserBlockRequest) SetBizid(v string) *QueryBrowserBlockRequest {
	s.Bizid = &v
	return s
}

func (s *QueryBrowserBlockRequest) SetHeight(v int64) *QueryBrowserBlockRequest {
	s.Height = &v
	return s
}

type QueryBrowserBlockResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// BlockchainBrowserTransaction
	Result *BlockchainBrowserBlock `json:"result,omitempty" xml:"result,omitempty"`
}

func (s QueryBrowserBlockResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryBrowserBlockResponse) GoString() string {
	return s.String()
}

func (s *QueryBrowserBlockResponse) SetReqMsgId(v string) *QueryBrowserBlockResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryBrowserBlockResponse) SetResultCode(v string) *QueryBrowserBlockResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryBrowserBlockResponse) SetResultMsg(v string) *QueryBrowserBlockResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryBrowserBlockResponse) SetResult(v *BlockchainBrowserBlock) *QueryBrowserBlockResponse {
	s.Result = v
	return s
}

type QueryBrowserTransactionRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// bizid
	Bizid *string `json:"bizid,omitempty" xml:"bizid,omitempty" require:"true"`
	// hash
	Hash *string `json:"hash,omitempty" xml:"hash,omitempty" require:"true"`
}

func (s QueryBrowserTransactionRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryBrowserTransactionRequest) GoString() string {
	return s.String()
}

func (s *QueryBrowserTransactionRequest) SetAuthToken(v string) *QueryBrowserTransactionRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryBrowserTransactionRequest) SetProductInstanceId(v string) *QueryBrowserTransactionRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryBrowserTransactionRequest) SetBizid(v string) *QueryBrowserTransactionRequest {
	s.Bizid = &v
	return s
}

func (s *QueryBrowserTransactionRequest) SetHash(v string) *QueryBrowserTransactionRequest {
	s.Hash = &v
	return s
}

type QueryBrowserTransactionResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// result
	Result *BlockchainBrowserTransaction `json:"result,omitempty" xml:"result,omitempty"`
}

func (s QueryBrowserTransactionResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryBrowserTransactionResponse) GoString() string {
	return s.String()
}

func (s *QueryBrowserTransactionResponse) SetReqMsgId(v string) *QueryBrowserTransactionResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryBrowserTransactionResponse) SetResultCode(v string) *QueryBrowserTransactionResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryBrowserTransactionResponse) SetResultMsg(v string) *QueryBrowserTransactionResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryBrowserTransactionResponse) SetResult(v *BlockchainBrowserTransaction) *QueryBrowserTransactionResponse {
	s.Result = v
	return s
}

type QueryBrowserTransactionReceiptRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// bizid
	Bizid *string `json:"bizid,omitempty" xml:"bizid,omitempty" require:"true"`
	// hash
	Hash *string `json:"hash,omitempty" xml:"hash,omitempty" require:"true"`
}

func (s QueryBrowserTransactionReceiptRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryBrowserTransactionReceiptRequest) GoString() string {
	return s.String()
}

func (s *QueryBrowserTransactionReceiptRequest) SetAuthToken(v string) *QueryBrowserTransactionReceiptRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryBrowserTransactionReceiptRequest) SetProductInstanceId(v string) *QueryBrowserTransactionReceiptRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryBrowserTransactionReceiptRequest) SetBizid(v string) *QueryBrowserTransactionReceiptRequest {
	s.Bizid = &v
	return s
}

func (s *QueryBrowserTransactionReceiptRequest) SetHash(v string) *QueryBrowserTransactionReceiptRequest {
	s.Hash = &v
	return s
}

type QueryBrowserTransactionReceiptResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// BlockchainBrowserTransactionReceipt
	Result *BlockchainBrowserTransactionReceipt `json:"result,omitempty" xml:"result,omitempty"`
}

func (s QueryBrowserTransactionReceiptResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryBrowserTransactionReceiptResponse) GoString() string {
	return s.String()
}

func (s *QueryBrowserTransactionReceiptResponse) SetReqMsgId(v string) *QueryBrowserTransactionReceiptResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryBrowserTransactionReceiptResponse) SetResultCode(v string) *QueryBrowserTransactionReceiptResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryBrowserTransactionReceiptResponse) SetResultMsg(v string) *QueryBrowserTransactionReceiptResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryBrowserTransactionReceiptResponse) SetResult(v *BlockchainBrowserTransactionReceipt) *QueryBrowserTransactionReceiptResponse {
	s.Result = v
	return s
}

type QueryBrowserNodeOwnerRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// bizid
	Bizid *string `json:"bizid,omitempty" xml:"bizid,omitempty" require:"true"`
}

func (s QueryBrowserNodeOwnerRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryBrowserNodeOwnerRequest) GoString() string {
	return s.String()
}

func (s *QueryBrowserNodeOwnerRequest) SetAuthToken(v string) *QueryBrowserNodeOwnerRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryBrowserNodeOwnerRequest) SetProductInstanceId(v string) *QueryBrowserNodeOwnerRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryBrowserNodeOwnerRequest) SetBizid(v string) *QueryBrowserNodeOwnerRequest {
	s.Bizid = &v
	return s
}

type QueryBrowserNodeOwnerResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// result
	Result []*BlockchainBrowserNodeOwner `json:"result,omitempty" xml:"result,omitempty" type:"Repeated"`
}

func (s QueryBrowserNodeOwnerResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryBrowserNodeOwnerResponse) GoString() string {
	return s.String()
}

func (s *QueryBrowserNodeOwnerResponse) SetReqMsgId(v string) *QueryBrowserNodeOwnerResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryBrowserNodeOwnerResponse) SetResultCode(v string) *QueryBrowserNodeOwnerResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryBrowserNodeOwnerResponse) SetResultMsg(v string) *QueryBrowserNodeOwnerResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryBrowserNodeOwnerResponse) SetResult(v []*BlockchainBrowserNodeOwner) *QueryBrowserNodeOwnerResponse {
	s.Result = v
	return s
}

type DeleteBlockchainMiniprogramRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 蚂蚁区块链的唯一链id
	Bizid *string `json:"bizid,omitempty" xml:"bizid,omitempty" require:"true"`
	// 取消查看权限的支付宝电话号码集合
	PhoneNumbers *string `json:"phone_numbers,omitempty" xml:"phone_numbers,omitempty" require:"true"`
}

func (s DeleteBlockchainMiniprogramRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteBlockchainMiniprogramRequest) GoString() string {
	return s.String()
}

func (s *DeleteBlockchainMiniprogramRequest) SetAuthToken(v string) *DeleteBlockchainMiniprogramRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteBlockchainMiniprogramRequest) SetProductInstanceId(v string) *DeleteBlockchainMiniprogramRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *DeleteBlockchainMiniprogramRequest) SetBizid(v string) *DeleteBlockchainMiniprogramRequest {
	s.Bizid = &v
	return s
}

func (s *DeleteBlockchainMiniprogramRequest) SetPhoneNumbers(v string) *DeleteBlockchainMiniprogramRequest {
	s.PhoneNumbers = &v
	return s
}

type DeleteBlockchainMiniprogramResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 批量取消权限成功与否
	Status *int64 `json:"status,omitempty" xml:"status,omitempty"`
}

func (s DeleteBlockchainMiniprogramResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteBlockchainMiniprogramResponse) GoString() string {
	return s.String()
}

func (s *DeleteBlockchainMiniprogramResponse) SetReqMsgId(v string) *DeleteBlockchainMiniprogramResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteBlockchainMiniprogramResponse) SetResultCode(v string) *DeleteBlockchainMiniprogramResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteBlockchainMiniprogramResponse) SetResultMsg(v string) *DeleteBlockchainMiniprogramResponse {
	s.ResultMsg = &v
	return s
}

func (s *DeleteBlockchainMiniprogramResponse) SetStatus(v int64) *DeleteBlockchainMiniprogramResponse {
	s.Status = &v
	return s
}

type QueryBlockchainMiniprogramRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 蚂蚁区块链的唯一链id
	Bizid *string `json:"bizid,omitempty" xml:"bizid,omitempty" require:"true"`
	// 查看权限的支付宝电话号码
	PhoneNumber *string `json:"phone_number,omitempty" xml:"phone_number,omitempty" require:"true"`
}

func (s QueryBlockchainMiniprogramRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryBlockchainMiniprogramRequest) GoString() string {
	return s.String()
}

func (s *QueryBlockchainMiniprogramRequest) SetAuthToken(v string) *QueryBlockchainMiniprogramRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryBlockchainMiniprogramRequest) SetProductInstanceId(v string) *QueryBlockchainMiniprogramRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryBlockchainMiniprogramRequest) SetBizid(v string) *QueryBlockchainMiniprogramRequest {
	s.Bizid = &v
	return s
}

func (s *QueryBlockchainMiniprogramRequest) SetPhoneNumber(v string) *QueryBlockchainMiniprogramRequest {
	s.PhoneNumber = &v
	return s
}

type QueryBlockchainMiniprogramResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 权限成功与否
	Status *int64 `json:"status,omitempty" xml:"status,omitempty"`
}

func (s QueryBlockchainMiniprogramResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryBlockchainMiniprogramResponse) GoString() string {
	return s.String()
}

func (s *QueryBlockchainMiniprogramResponse) SetReqMsgId(v string) *QueryBlockchainMiniprogramResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryBlockchainMiniprogramResponse) SetResultCode(v string) *QueryBlockchainMiniprogramResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryBlockchainMiniprogramResponse) SetResultMsg(v string) *QueryBlockchainMiniprogramResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryBlockchainMiniprogramResponse) SetStatus(v int64) *QueryBlockchainMiniprogramResponse {
	s.Status = &v
	return s
}

type QueryCreditTransferApplyRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 货主分布式数字身份
	ConsignorDid *string `json:"consignor_did,omitempty" xml:"consignor_did,omitempty" require:"true"`
	// 业务发起方分布式数字身
	PlatformDid *string `json:"platform_did,omitempty" xml:"platform_did,omitempty" require:"true"`
}

func (s QueryCreditTransferApplyRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryCreditTransferApplyRequest) GoString() string {
	return s.String()
}

func (s *QueryCreditTransferApplyRequest) SetAuthToken(v string) *QueryCreditTransferApplyRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryCreditTransferApplyRequest) SetProductInstanceId(v string) *QueryCreditTransferApplyRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryCreditTransferApplyRequest) SetConsignorDid(v string) *QueryCreditTransferApplyRequest {
	s.ConsignorDid = &v
	return s
}

func (s *QueryCreditTransferApplyRequest) SetPlatformDid(v string) *QueryCreditTransferApplyRequest {
	s.PlatformDid = &v
	return s
}

type QueryCreditTransferApplyResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 查询结果信息，失败时为失败原因信息
	QueryMsg *string `json:"query_msg,omitempty" xml:"query_msg,omitempty"`
	// 查询结果状态
	// -1:注册失败， 0:注册中， 1:注册完成
	Status *int64 `json:"status,omitempty" xml:"status,omitempty"`
}

func (s QueryCreditTransferApplyResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryCreditTransferApplyResponse) GoString() string {
	return s.String()
}

func (s *QueryCreditTransferApplyResponse) SetReqMsgId(v string) *QueryCreditTransferApplyResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryCreditTransferApplyResponse) SetResultCode(v string) *QueryCreditTransferApplyResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryCreditTransferApplyResponse) SetResultMsg(v string) *QueryCreditTransferApplyResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryCreditTransferApplyResponse) SetQueryMsg(v string) *QueryCreditTransferApplyResponse {
	s.QueryMsg = &v
	return s
}

func (s *QueryCreditTransferApplyResponse) SetStatus(v int64) *QueryCreditTransferApplyResponse {
	s.Status = &v
	return s
}

type QueryCreditTransferBalanceRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 货主分布式数字身份
	ConsignorDid *string `json:"consignor_did,omitempty" xml:"consignor_did,omitempty" require:"true"`
	// 需发行信用流转的运费，运费最多精确到小数点后2位
	Freight *string `json:"freight,omitempty" xml:"freight,omitempty" require:"true"`
	// 业务发起方分布式数字身
	PlatformDid *string `json:"platform_did,omitempty" xml:"platform_did,omitempty" require:"true"`
}

func (s QueryCreditTransferBalanceRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryCreditTransferBalanceRequest) GoString() string {
	return s.String()
}

func (s *QueryCreditTransferBalanceRequest) SetAuthToken(v string) *QueryCreditTransferBalanceRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryCreditTransferBalanceRequest) SetProductInstanceId(v string) *QueryCreditTransferBalanceRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryCreditTransferBalanceRequest) SetConsignorDid(v string) *QueryCreditTransferBalanceRequest {
	s.ConsignorDid = &v
	return s
}

func (s *QueryCreditTransferBalanceRequest) SetFreight(v string) *QueryCreditTransferBalanceRequest {
	s.Freight = &v
	return s
}

func (s *QueryCreditTransferBalanceRequest) SetPlatformDid(v string) *QueryCreditTransferBalanceRequest {
	s.PlatformDid = &v
	return s
}

type QueryCreditTransferBalanceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 是否有信用流转额度
	HasBalance *bool `json:"has_balance,omitempty" xml:"has_balance,omitempty"`
}

func (s QueryCreditTransferBalanceResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryCreditTransferBalanceResponse) GoString() string {
	return s.String()
}

func (s *QueryCreditTransferBalanceResponse) SetReqMsgId(v string) *QueryCreditTransferBalanceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryCreditTransferBalanceResponse) SetResultCode(v string) *QueryCreditTransferBalanceResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryCreditTransferBalanceResponse) SetResultMsg(v string) *QueryCreditTransferBalanceResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryCreditTransferBalanceResponse) SetHasBalance(v bool) *QueryCreditTransferBalanceResponse {
	s.HasBalance = &v
	return s
}

type QueryCreditTransferIssuebyidRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 信用流转发行批次号，与issueId信用流转发行结果查询号不可同时为空
	BatchId *string `json:"batch_id,omitempty" xml:"batch_id,omitempty"`
	// 货主分布式数字身份
	ConsignorDid *string `json:"consignor_did,omitempty" xml:"consignor_did,omitempty" require:"true"`
	// 信用流转发行凭证Id，与batchId信用流转发行批次号不可同时为空
	IssueId *string `json:"issue_id,omitempty" xml:"issue_id,omitempty"`
	// 是否只返回已发行凭证信息
	IssueOnly *bool `json:"issue_only,omitempty" xml:"issue_only,omitempty" require:"true"`
	// 页数 从1开始
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty" require:"true"`
	// 每页显示数量
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
	// 业务发起方分布式数字身份
	PlatformDid *string `json:"platform_did,omitempty" xml:"platform_did,omitempty" require:"true"`
}

func (s QueryCreditTransferIssuebyidRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryCreditTransferIssuebyidRequest) GoString() string {
	return s.String()
}

func (s *QueryCreditTransferIssuebyidRequest) SetAuthToken(v string) *QueryCreditTransferIssuebyidRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryCreditTransferIssuebyidRequest) SetProductInstanceId(v string) *QueryCreditTransferIssuebyidRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryCreditTransferIssuebyidRequest) SetBatchId(v string) *QueryCreditTransferIssuebyidRequest {
	s.BatchId = &v
	return s
}

func (s *QueryCreditTransferIssuebyidRequest) SetConsignorDid(v string) *QueryCreditTransferIssuebyidRequest {
	s.ConsignorDid = &v
	return s
}

func (s *QueryCreditTransferIssuebyidRequest) SetIssueId(v string) *QueryCreditTransferIssuebyidRequest {
	s.IssueId = &v
	return s
}

func (s *QueryCreditTransferIssuebyidRequest) SetIssueOnly(v bool) *QueryCreditTransferIssuebyidRequest {
	s.IssueOnly = &v
	return s
}

func (s *QueryCreditTransferIssuebyidRequest) SetPageNum(v int64) *QueryCreditTransferIssuebyidRequest {
	s.PageNum = &v
	return s
}

func (s *QueryCreditTransferIssuebyidRequest) SetPageSize(v int64) *QueryCreditTransferIssuebyidRequest {
	s.PageSize = &v
	return s
}

func (s *QueryCreditTransferIssuebyidRequest) SetPlatformDid(v string) *QueryCreditTransferIssuebyidRequest {
	s.PlatformDid = &v
	return s
}

type QueryCreditTransferIssuebyidResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 凭证所属did
	Did *string `json:"did,omitempty" xml:"did,omitempty"`
	// 凭证列表
	IssueIds []*IssueInfo `json:"issue_ids,omitempty" xml:"issue_ids,omitempty" type:"Repeated"`
	// 页数 从1开始
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty"`
	// 每页显示数量
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 数据总量
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
}

func (s QueryCreditTransferIssuebyidResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryCreditTransferIssuebyidResponse) GoString() string {
	return s.String()
}

func (s *QueryCreditTransferIssuebyidResponse) SetReqMsgId(v string) *QueryCreditTransferIssuebyidResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryCreditTransferIssuebyidResponse) SetResultCode(v string) *QueryCreditTransferIssuebyidResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryCreditTransferIssuebyidResponse) SetResultMsg(v string) *QueryCreditTransferIssuebyidResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryCreditTransferIssuebyidResponse) SetDid(v string) *QueryCreditTransferIssuebyidResponse {
	s.Did = &v
	return s
}

func (s *QueryCreditTransferIssuebyidResponse) SetIssueIds(v []*IssueInfo) *QueryCreditTransferIssuebyidResponse {
	s.IssueIds = v
	return s
}

func (s *QueryCreditTransferIssuebyidResponse) SetPageNum(v int64) *QueryCreditTransferIssuebyidResponse {
	s.PageNum = &v
	return s
}

func (s *QueryCreditTransferIssuebyidResponse) SetPageSize(v int64) *QueryCreditTransferIssuebyidResponse {
	s.PageSize = &v
	return s
}

func (s *QueryCreditTransferIssuebyidResponse) SetTotalCount(v int64) *QueryCreditTransferIssuebyidResponse {
	s.TotalCount = &v
	return s
}

type QueryCreditTransferIssuebytimeRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 需查询对象的分布式数字身份
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 查询截止时间
	EndDate *string `json:"end_date,omitempty" xml:"end_date,omitempty" require:"true"`
	// 是否只返回已发行凭证信息
	IssueOnle *bool `json:"issue_onle,omitempty" xml:"issue_onle,omitempty" require:"true"`
	// 页数 从1开始
	PageNum *string `json:"page_num,omitempty" xml:"page_num,omitempty" require:"true"`
	// 每页显示数量
	PageSize *string `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
	// 业务发起方分布式数字身份
	PlatformDid *string `json:"platform_did,omitempty" xml:"platform_did,omitempty" require:"true"`
	// 查询起始时间
	StartDate *string `json:"start_date,omitempty" xml:"start_date,omitempty" require:"true"`
}

func (s QueryCreditTransferIssuebytimeRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryCreditTransferIssuebytimeRequest) GoString() string {
	return s.String()
}

func (s *QueryCreditTransferIssuebytimeRequest) SetAuthToken(v string) *QueryCreditTransferIssuebytimeRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryCreditTransferIssuebytimeRequest) SetProductInstanceId(v string) *QueryCreditTransferIssuebytimeRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryCreditTransferIssuebytimeRequest) SetDid(v string) *QueryCreditTransferIssuebytimeRequest {
	s.Did = &v
	return s
}

func (s *QueryCreditTransferIssuebytimeRequest) SetEndDate(v string) *QueryCreditTransferIssuebytimeRequest {
	s.EndDate = &v
	return s
}

func (s *QueryCreditTransferIssuebytimeRequest) SetIssueOnle(v bool) *QueryCreditTransferIssuebytimeRequest {
	s.IssueOnle = &v
	return s
}

func (s *QueryCreditTransferIssuebytimeRequest) SetPageNum(v string) *QueryCreditTransferIssuebytimeRequest {
	s.PageNum = &v
	return s
}

func (s *QueryCreditTransferIssuebytimeRequest) SetPageSize(v string) *QueryCreditTransferIssuebytimeRequest {
	s.PageSize = &v
	return s
}

func (s *QueryCreditTransferIssuebytimeRequest) SetPlatformDid(v string) *QueryCreditTransferIssuebytimeRequest {
	s.PlatformDid = &v
	return s
}

func (s *QueryCreditTransferIssuebytimeRequest) SetStartDate(v string) *QueryCreditTransferIssuebytimeRequest {
	s.StartDate = &v
	return s
}

type QueryCreditTransferIssuebytimeResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	//  凭证所属did
	Did *string `json:"did,omitempty" xml:"did,omitempty"`
	// 凭证列表
	IssueIds []*IssueInfo `json:"issue_ids,omitempty" xml:"issue_ids,omitempty" type:"Repeated"`
	// 页数 从1开始
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty"`
	// 每页显示数量
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 数据总量
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
}

func (s QueryCreditTransferIssuebytimeResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryCreditTransferIssuebytimeResponse) GoString() string {
	return s.String()
}

func (s *QueryCreditTransferIssuebytimeResponse) SetReqMsgId(v string) *QueryCreditTransferIssuebytimeResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryCreditTransferIssuebytimeResponse) SetResultCode(v string) *QueryCreditTransferIssuebytimeResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryCreditTransferIssuebytimeResponse) SetResultMsg(v string) *QueryCreditTransferIssuebytimeResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryCreditTransferIssuebytimeResponse) SetDid(v string) *QueryCreditTransferIssuebytimeResponse {
	s.Did = &v
	return s
}

func (s *QueryCreditTransferIssuebytimeResponse) SetIssueIds(v []*IssueInfo) *QueryCreditTransferIssuebytimeResponse {
	s.IssueIds = v
	return s
}

func (s *QueryCreditTransferIssuebytimeResponse) SetPageNum(v int64) *QueryCreditTransferIssuebytimeResponse {
	s.PageNum = &v
	return s
}

func (s *QueryCreditTransferIssuebytimeResponse) SetPageSize(v int64) *QueryCreditTransferIssuebytimeResponse {
	s.PageSize = &v
	return s
}

func (s *QueryCreditTransferIssuebytimeResponse) SetTotalCount(v int64) *QueryCreditTransferIssuebytimeResponse {
	s.TotalCount = &v
	return s
}

type QueryCreditTransferStatementRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 需查询对象的分布式数字身份
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 查询截止时间
	EndDate *string `json:"end_date,omitempty" xml:"end_date,omitempty" require:"true"`
	// 页数 从1开始
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty" require:"true"`
	// 每页显示数量
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
	// 业务发起方分布式数字身份
	PlatformDid *string `json:"platform_did,omitempty" xml:"platform_did,omitempty" require:"true"`
	// 查询起始时间
	StartDate *string `json:"start_date,omitempty" xml:"start_date,omitempty" require:"true"`
}

func (s QueryCreditTransferStatementRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryCreditTransferStatementRequest) GoString() string {
	return s.String()
}

func (s *QueryCreditTransferStatementRequest) SetAuthToken(v string) *QueryCreditTransferStatementRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryCreditTransferStatementRequest) SetProductInstanceId(v string) *QueryCreditTransferStatementRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryCreditTransferStatementRequest) SetDid(v string) *QueryCreditTransferStatementRequest {
	s.Did = &v
	return s
}

func (s *QueryCreditTransferStatementRequest) SetEndDate(v string) *QueryCreditTransferStatementRequest {
	s.EndDate = &v
	return s
}

func (s *QueryCreditTransferStatementRequest) SetPageNum(v int64) *QueryCreditTransferStatementRequest {
	s.PageNum = &v
	return s
}

func (s *QueryCreditTransferStatementRequest) SetPageSize(v int64) *QueryCreditTransferStatementRequest {
	s.PageSize = &v
	return s
}

func (s *QueryCreditTransferStatementRequest) SetPlatformDid(v string) *QueryCreditTransferStatementRequest {
	s.PlatformDid = &v
	return s
}

func (s *QueryCreditTransferStatementRequest) SetStartDate(v string) *QueryCreditTransferStatementRequest {
	s.StartDate = &v
	return s
}

type QueryCreditTransferStatementResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 需查询对象的分布式数字身份
	Did *string `json:"did,omitempty" xml:"did,omitempty"`
	// 页数 从1开始
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty"`
	// 每页显示数量
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 流水列表
	StatementInfos []*CreditTransferStatementInfo `json:"statement_infos,omitempty" xml:"statement_infos,omitempty" type:"Repeated"`
	// 数据总量
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
}

func (s QueryCreditTransferStatementResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryCreditTransferStatementResponse) GoString() string {
	return s.String()
}

func (s *QueryCreditTransferStatementResponse) SetReqMsgId(v string) *QueryCreditTransferStatementResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryCreditTransferStatementResponse) SetResultCode(v string) *QueryCreditTransferStatementResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryCreditTransferStatementResponse) SetResultMsg(v string) *QueryCreditTransferStatementResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryCreditTransferStatementResponse) SetDid(v string) *QueryCreditTransferStatementResponse {
	s.Did = &v
	return s
}

func (s *QueryCreditTransferStatementResponse) SetPageNum(v int64) *QueryCreditTransferStatementResponse {
	s.PageNum = &v
	return s
}

func (s *QueryCreditTransferStatementResponse) SetPageSize(v int64) *QueryCreditTransferStatementResponse {
	s.PageSize = &v
	return s
}

func (s *QueryCreditTransferStatementResponse) SetStatementInfos(v []*CreditTransferStatementInfo) *QueryCreditTransferStatementResponse {
	s.StatementInfos = v
	return s
}

func (s *QueryCreditTransferStatementResponse) SetTotalCount(v int64) *QueryCreditTransferStatementResponse {
	s.TotalCount = &v
	return s
}

type CallbackCreditTransferRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 回调消息内容
	MsgData *string `json:"msg_data,omitempty" xml:"msg_data,omitempty" require:"true"`
	// 回调消息方法类型
	MsgMethod *string `json:"msg_method,omitempty" xml:"msg_method,omitempty" require:"true"`
}

func (s CallbackCreditTransferRequest) String() string {
	return tea.Prettify(s)
}

func (s CallbackCreditTransferRequest) GoString() string {
	return s.String()
}

func (s *CallbackCreditTransferRequest) SetAuthToken(v string) *CallbackCreditTransferRequest {
	s.AuthToken = &v
	return s
}

func (s *CallbackCreditTransferRequest) SetProductInstanceId(v string) *CallbackCreditTransferRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CallbackCreditTransferRequest) SetMsgData(v string) *CallbackCreditTransferRequest {
	s.MsgData = &v
	return s
}

func (s *CallbackCreditTransferRequest) SetMsgMethod(v string) *CallbackCreditTransferRequest {
	s.MsgMethod = &v
	return s
}

type CallbackCreditTransferResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 是否已接收
	IsRecv *bool `json:"is_recv,omitempty" xml:"is_recv,omitempty"`
}

func (s CallbackCreditTransferResponse) String() string {
	return tea.Prettify(s)
}

func (s CallbackCreditTransferResponse) GoString() string {
	return s.String()
}

func (s *CallbackCreditTransferResponse) SetReqMsgId(v string) *CallbackCreditTransferResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CallbackCreditTransferResponse) SetResultCode(v string) *CallbackCreditTransferResponse {
	s.ResultCode = &v
	return s
}

func (s *CallbackCreditTransferResponse) SetResultMsg(v string) *CallbackCreditTransferResponse {
	s.ResultMsg = &v
	return s
}

func (s *CallbackCreditTransferResponse) SetIsRecv(v bool) *CallbackCreditTransferResponse {
	s.IsRecv = &v
	return s
}

type PushAuthUserVcRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 长度不超过64字符的业务唯一ID，用于对一个业务流的追踪。
	BizId *string `json:"biz_id,omitempty" xml:"biz_id,omitempty" require:"true" maxLength:"64"`
	// 具体的业务类型，长度不超过32字符，具体需要与DIS小组业务对接商定新增的业务类型。
	BizType *string `json:"biz_type,omitempty" xml:"biz_type,omitempty" require:"true" maxLength:"32"`
	// 推送的业务方自己所属的did，也就是颁发此声明的 issuer
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 使用did字段的密钥进行整体传送内容（不包括此signature字段）签名的结果，具体签名规则：
	// 1. Map<String,String> params 的key按照字典序排序
	// 2. 拼接为 key1=value1&key2=value2&key3=value3 ...
	// 3. 计算sha256(第2步结果)得到hash
	// 4. 使用hash 和 签名的did请求DIS的签名接口进行签名：baas.account.signature.start，https://apdevcenter.cloud.alipay.com/console/openapi/product/BLOCKCHAIN/apis/baas.account.signature.start/versions/1.0/document?
	Signature *string `json:"signature,omitempty" xml:"signature,omitempty" require:"true"`
	// 通过DIS颁发的声明详细信息，其中content的claim字段是和业务相关的实际声明内容。
	VcContent *string `json:"vc_content,omitempty" xml:"vc_content,omitempty" require:"true"`
}

func (s PushAuthUserVcRequest) String() string {
	return tea.Prettify(s)
}

func (s PushAuthUserVcRequest) GoString() string {
	return s.String()
}

func (s *PushAuthUserVcRequest) SetAuthToken(v string) *PushAuthUserVcRequest {
	s.AuthToken = &v
	return s
}

func (s *PushAuthUserVcRequest) SetProductInstanceId(v string) *PushAuthUserVcRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *PushAuthUserVcRequest) SetBizId(v string) *PushAuthUserVcRequest {
	s.BizId = &v
	return s
}

func (s *PushAuthUserVcRequest) SetBizType(v string) *PushAuthUserVcRequest {
	s.BizType = &v
	return s
}

func (s *PushAuthUserVcRequest) SetDid(v string) *PushAuthUserVcRequest {
	s.Did = &v
	return s
}

func (s *PushAuthUserVcRequest) SetSignature(v string) *PushAuthUserVcRequest {
	s.Signature = &v
	return s
}

func (s *PushAuthUserVcRequest) SetVcContent(v string) *PushAuthUserVcRequest {
	s.VcContent = &v
	return s
}

type PushAuthUserVcResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 是否推送成功到DIS的C端应用
	Result *bool `json:"result,omitempty" xml:"result,omitempty"`
}

func (s PushAuthUserVcResponse) String() string {
	return tea.Prettify(s)
}

func (s PushAuthUserVcResponse) GoString() string {
	return s.String()
}

func (s *PushAuthUserVcResponse) SetReqMsgId(v string) *PushAuthUserVcResponse {
	s.ReqMsgId = &v
	return s
}

func (s *PushAuthUserVcResponse) SetResultCode(v string) *PushAuthUserVcResponse {
	s.ResultCode = &v
	return s
}

func (s *PushAuthUserVcResponse) SetResultMsg(v string) *PushAuthUserVcResponse {
	s.ResultMsg = &v
	return s
}

func (s *PushAuthUserVcResponse) SetResult(v bool) *PushAuthUserVcResponse {
	s.Result = &v
	return s
}

type PushAuthClaimVcRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 长度不超过64字符的业务唯一ID，用于对一个业务流的追踪，查询等。
	BizId *string `json:"biz_id,omitempty" xml:"biz_id,omitempty" require:"true"`
	// 具体的业务类型，长度不超过32字符，具体需要与DIS小组业务对接商定新增的业务类型。
	BizType *string `json:"biz_type,omitempty" xml:"biz_type,omitempty" require:"true"`
	// 申请授权的具体内容，通常由业务方对接定义，在小程序展示声明详细内容给用户，用户进行确认后，授权颁发声明。
	ClaimContent *string `json:"claim_content,omitempty" xml:"claim_content,omitempty" require:"true"`
	// 如果在相同的biz_type下，还需要针对声明claim进行细化划分，可以使用此字段。
	ClaimType *string `json:"claim_type,omitempty" xml:"claim_type,omitempty"`
	// 业务方持有的did身份
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 申请声明颁发后的有效期，可选参数，如果不指定则默认申请永久有效。
	Expire *int64 `json:"expire,omitempty" xml:"expire,omitempty"`
	// 申请目标did身份持有者，对声明进行授权颁发。
	IssuerDid *string `json:"issuer_did,omitempty" xml:"issuer_did,omitempty" require:"true"`
	// 使用did字段的密钥进行整体传送内容（不包括此signature字段）签名的结果，具体签名规则：
	// 1. Map<String,String> params 的key按照字典序排序
	// 2. 拼接为 key1=value1&key2=value2&key3=value3 ...
	// 3. 计算sha256(第2步结果)得到hash
	// 4. 使用hash 和 签名的did请求DIS的签名接口进行签名：baas.account.signature.start，https://apdevcenter.cloud.alipay.com/console/openapi/product/BLOCKCHAIN/apis/baas.account.signature.start/versions/1.0/document?
	Signature *string `json:"signature,omitempty" xml:"signature,omitempty" require:"true"`
}

func (s PushAuthClaimVcRequest) String() string {
	return tea.Prettify(s)
}

func (s PushAuthClaimVcRequest) GoString() string {
	return s.String()
}

func (s *PushAuthClaimVcRequest) SetAuthToken(v string) *PushAuthClaimVcRequest {
	s.AuthToken = &v
	return s
}

func (s *PushAuthClaimVcRequest) SetProductInstanceId(v string) *PushAuthClaimVcRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *PushAuthClaimVcRequest) SetBizId(v string) *PushAuthClaimVcRequest {
	s.BizId = &v
	return s
}

func (s *PushAuthClaimVcRequest) SetBizType(v string) *PushAuthClaimVcRequest {
	s.BizType = &v
	return s
}

func (s *PushAuthClaimVcRequest) SetClaimContent(v string) *PushAuthClaimVcRequest {
	s.ClaimContent = &v
	return s
}

func (s *PushAuthClaimVcRequest) SetClaimType(v string) *PushAuthClaimVcRequest {
	s.ClaimType = &v
	return s
}

func (s *PushAuthClaimVcRequest) SetDid(v string) *PushAuthClaimVcRequest {
	s.Did = &v
	return s
}

func (s *PushAuthClaimVcRequest) SetExpire(v int64) *PushAuthClaimVcRequest {
	s.Expire = &v
	return s
}

func (s *PushAuthClaimVcRequest) SetIssuerDid(v string) *PushAuthClaimVcRequest {
	s.IssuerDid = &v
	return s
}

func (s *PushAuthClaimVcRequest) SetSignature(v string) *PushAuthClaimVcRequest {
	s.Signature = &v
	return s
}

type PushAuthClaimVcResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 是否推送成功到DIS的C端应用
	Result *bool `json:"result,omitempty" xml:"result,omitempty"`
}

func (s PushAuthClaimVcResponse) String() string {
	return tea.Prettify(s)
}

func (s PushAuthClaimVcResponse) GoString() string {
	return s.String()
}

func (s *PushAuthClaimVcResponse) SetReqMsgId(v string) *PushAuthClaimVcResponse {
	s.ReqMsgId = &v
	return s
}

func (s *PushAuthClaimVcResponse) SetResultCode(v string) *PushAuthClaimVcResponse {
	s.ResultCode = &v
	return s
}

func (s *PushAuthClaimVcResponse) SetResultMsg(v string) *PushAuthClaimVcResponse {
	s.ResultMsg = &v
	return s
}

func (s *PushAuthClaimVcResponse) SetResult(v bool) *PushAuthClaimVcResponse {
	s.Result = &v
	return s
}

type PullAuthUserDidRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 长度不超过64字符的业务唯一ID，用于对一个业务流的追踪、查询。
	BizId *string `json:"biz_id,omitempty" xml:"biz_id,omitempty" require:"true" maxLength:"64"`
	// 业务方持有的did
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 使用did字段的密钥进行整体传送内容（不包括此signature字段）签名的结果，具体签名规则： 1. Map<String,String> params 的key按照字典序排序 2. 拼接为 key1=value1&key2=value2&key3=value3 ... 3. 计算sha256(第2步结果)得到hash 4. 使用hash 和 签名的did请求DIS的签名接口进行签名：baas.account.signature.start，https://apdevcenter.cloud.alipay.com/console/openapi/product/BLOCKCHAIN/apis/baas.account.signature.start/versions/1.0/document?
	Signature *string `json:"signature,omitempty" xml:"signature,omitempty" require:"true"`
}

func (s PullAuthUserDidRequest) String() string {
	return tea.Prettify(s)
}

func (s PullAuthUserDidRequest) GoString() string {
	return s.String()
}

func (s *PullAuthUserDidRequest) SetAuthToken(v string) *PullAuthUserDidRequest {
	s.AuthToken = &v
	return s
}

func (s *PullAuthUserDidRequest) SetProductInstanceId(v string) *PullAuthUserDidRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *PullAuthUserDidRequest) SetBizId(v string) *PullAuthUserDidRequest {
	s.BizId = &v
	return s
}

func (s *PullAuthUserDidRequest) SetDid(v string) *PullAuthUserDidRequest {
	s.Did = &v
	return s
}

func (s *PullAuthUserDidRequest) SetSignature(v string) *PullAuthUserDidRequest {
	s.Signature = &v
	return s
}

type PullAuthUserDidResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 长度不超过64字符的业务唯一ID，用于对一个业务流的追踪，与请求中的biz_id一致方便业务方使用。
	BizId *string `json:"biz_id,omitempty" xml:"biz_id,omitempty"`
	// 获取到关联的用户did
	UserDid *string `json:"user_did,omitempty" xml:"user_did,omitempty"`
}

func (s PullAuthUserDidResponse) String() string {
	return tea.Prettify(s)
}

func (s PullAuthUserDidResponse) GoString() string {
	return s.String()
}

func (s *PullAuthUserDidResponse) SetReqMsgId(v string) *PullAuthUserDidResponse {
	s.ReqMsgId = &v
	return s
}

func (s *PullAuthUserDidResponse) SetResultCode(v string) *PullAuthUserDidResponse {
	s.ResultCode = &v
	return s
}

func (s *PullAuthUserDidResponse) SetResultMsg(v string) *PullAuthUserDidResponse {
	s.ResultMsg = &v
	return s
}

func (s *PullAuthUserDidResponse) SetBizId(v string) *PullAuthUserDidResponse {
	s.BizId = &v
	return s
}

func (s *PullAuthUserDidResponse) SetUserDid(v string) *PullAuthUserDidResponse {
	s.UserDid = &v
	return s
}

type PullAuthClaimVcRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 长度不超过64字符的业务唯一ID，用于对一个业务流的追踪、查询。
	BizId *string `json:"biz_id,omitempty" xml:"biz_id,omitempty" require:"true" maxLength:"64"`
	// 业务方持有的did
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 使用did字段的密钥进行整体传送内容（不包括此signature字段）签名的结果，具体签名规则： 1. Map<String,String> params 的key按照字典序排序 2. 拼接为 key1=value1&key2=value2&key3=value3 ... 3. 计算sha256(第2步结果)得到hash 4. 使用hash 和 签名的did请求DIS的签名接口进行签名：baas.account.signature.start，https://apdevcenter.cloud.alipay.com/console/openapi/product/BLOCKCHAIN/apis/baas.account.signature.start/versions/1.0/document?
	Signature *string `json:"signature,omitempty" xml:"signature,omitempty" require:"true"`
}

func (s PullAuthClaimVcRequest) String() string {
	return tea.Prettify(s)
}

func (s PullAuthClaimVcRequest) GoString() string {
	return s.String()
}

func (s *PullAuthClaimVcRequest) SetAuthToken(v string) *PullAuthClaimVcRequest {
	s.AuthToken = &v
	return s
}

func (s *PullAuthClaimVcRequest) SetProductInstanceId(v string) *PullAuthClaimVcRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *PullAuthClaimVcRequest) SetBizId(v string) *PullAuthClaimVcRequest {
	s.BizId = &v
	return s
}

func (s *PullAuthClaimVcRequest) SetDid(v string) *PullAuthClaimVcRequest {
	s.Did = &v
	return s
}

func (s *PullAuthClaimVcRequest) SetSignature(v string) *PullAuthClaimVcRequest {
	s.Signature = &v
	return s
}

type PullAuthClaimVcResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 长度不超过64字符的业务唯一ID，用于对一个业务流的追踪，与请求中的biz_id一致方便业务方使用。
	BizId *string `json:"biz_id,omitempty" xml:"biz_id,omitempty"`
	// 具体的业务类型，长度不超过32字符，具体需要对接确定新增的业务类型。
	BizType *string `json:"biz_type,omitempty" xml:"biz_type,omitempty"`
	// 当前声明的状态说明：
	// 0：用户未授权
	// 1：用户授权成功，此时vc_content字段会包含授权后的声明内容
	// 101：业务方发起声明claim_content中的用户三要素（姓名，电话，身份证号），与目标用户真实的三要素匹配失败
	//
	// 其它状态码，待定义后增加。
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// 申请授权的用户did
	UserDid *string `json:"user_did,omitempty" xml:"user_did,omitempty"`
	// 如果status的值是“1”，则此字段就是用户授权成功后的声明（vc）的完整内容。
	VcContent *string `json:"vc_content,omitempty" xml:"vc_content,omitempty"`
}

func (s PullAuthClaimVcResponse) String() string {
	return tea.Prettify(s)
}

func (s PullAuthClaimVcResponse) GoString() string {
	return s.String()
}

func (s *PullAuthClaimVcResponse) SetReqMsgId(v string) *PullAuthClaimVcResponse {
	s.ReqMsgId = &v
	return s
}

func (s *PullAuthClaimVcResponse) SetResultCode(v string) *PullAuthClaimVcResponse {
	s.ResultCode = &v
	return s
}

func (s *PullAuthClaimVcResponse) SetResultMsg(v string) *PullAuthClaimVcResponse {
	s.ResultMsg = &v
	return s
}

func (s *PullAuthClaimVcResponse) SetBizId(v string) *PullAuthClaimVcResponse {
	s.BizId = &v
	return s
}

func (s *PullAuthClaimVcResponse) SetBizType(v string) *PullAuthClaimVcResponse {
	s.BizType = &v
	return s
}

func (s *PullAuthClaimVcResponse) SetStatus(v string) *PullAuthClaimVcResponse {
	s.Status = &v
	return s
}

func (s *PullAuthClaimVcResponse) SetUserDid(v string) *PullAuthClaimVcResponse {
	s.UserDid = &v
	return s
}

func (s *PullAuthClaimVcResponse) SetVcContent(v string) *PullAuthClaimVcResponse {
	s.VcContent = &v
	return s
}

type CreateAuthUserDidRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 通常为业务方持有的企业did身份
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 扩展用户信息字段，用于创建did特别场景，传递更多用户信息。
	Extension *string `json:"extension,omitempty" xml:"extension,omitempty"`
	// 是否实人认证，如果"T"表示已实人认证，否则未认证。
	IsCertified *string `json:"is_certified,omitempty" xml:"is_certified,omitempty"`
	// 使用did字段的密钥进行整体传送内容（不包括此signature字段）签名的结果，具体签名规则： 1. Map<String,String> params 的key按照字典序排序 2. 拼接为 key1=value1&key2=value2&key3=value3 ... 3. 计算sha256(第2步结果)得到hash 4. 使用hash 和 签名的did请求DIS的签名接口进行签名：baas.account.signature.start，https://apdevcenter.cloud.alipay.com/console/openapi/product/BLOCKCHAIN/apis/baas.account.signature.start/versions/1.0/document?
	Signature *string `json:"signature,omitempty" xml:"signature,omitempty"`
	// 业务方内部用户的id，可脱敏id，在一些id打通场景有特别用途。
	UserId *string `json:"user_id,omitempty" xml:"user_id,omitempty" require:"true"`
}

func (s CreateAuthUserDidRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateAuthUserDidRequest) GoString() string {
	return s.String()
}

func (s *CreateAuthUserDidRequest) SetAuthToken(v string) *CreateAuthUserDidRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateAuthUserDidRequest) SetProductInstanceId(v string) *CreateAuthUserDidRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateAuthUserDidRequest) SetDid(v string) *CreateAuthUserDidRequest {
	s.Did = &v
	return s
}

func (s *CreateAuthUserDidRequest) SetExtension(v string) *CreateAuthUserDidRequest {
	s.Extension = &v
	return s
}

func (s *CreateAuthUserDidRequest) SetIsCertified(v string) *CreateAuthUserDidRequest {
	s.IsCertified = &v
	return s
}

func (s *CreateAuthUserDidRequest) SetSignature(v string) *CreateAuthUserDidRequest {
	s.Signature = &v
	return s
}

func (s *CreateAuthUserDidRequest) SetUserId(v string) *CreateAuthUserDidRequest {
	s.UserId = &v
	return s
}

type CreateAuthUserDidResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 返回给指定用户创建的did结果，如果入参对应userId的did之前已经存在，则不会新建did，直接返回已有did。
	Result *string `json:"result,omitempty" xml:"result,omitempty"`
}

func (s CreateAuthUserDidResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateAuthUserDidResponse) GoString() string {
	return s.String()
}

func (s *CreateAuthUserDidResponse) SetReqMsgId(v string) *CreateAuthUserDidResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateAuthUserDidResponse) SetResultCode(v string) *CreateAuthUserDidResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateAuthUserDidResponse) SetResultMsg(v string) *CreateAuthUserDidResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateAuthUserDidResponse) SetResult(v string) *CreateAuthUserDidResponse {
	s.Result = &v
	return s
}

type CreateAuthCorporateDidRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 对企业描述的扩展字段，用于传递更多企业信息，支持业务。
	ExtensionInfo *string `json:"extension_info,omitempty" xml:"extension_info,omitempty"`
	// 企业名称，通常为法定的公司实体名称
	OwnerName *string `json:"owner_name,omitempty" xml:"owner_name,omitempty" require:"true"`
	// 调用方体系内企业的唯一ID，作为创建DID的绑定目标，调用者需要保证其唯一性。
	OwnerUid *string `json:"owner_uid,omitempty" xml:"owner_uid,omitempty" require:"true"`
}

func (s CreateAuthCorporateDidRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateAuthCorporateDidRequest) GoString() string {
	return s.String()
}

func (s *CreateAuthCorporateDidRequest) SetAuthToken(v string) *CreateAuthCorporateDidRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateAuthCorporateDidRequest) SetProductInstanceId(v string) *CreateAuthCorporateDidRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateAuthCorporateDidRequest) SetExtensionInfo(v string) *CreateAuthCorporateDidRequest {
	s.ExtensionInfo = &v
	return s
}

func (s *CreateAuthCorporateDidRequest) SetOwnerName(v string) *CreateAuthCorporateDidRequest {
	s.OwnerName = &v
	return s
}

func (s *CreateAuthCorporateDidRequest) SetOwnerUid(v string) *CreateAuthCorporateDidRequest {
	s.OwnerUid = &v
	return s
}

type CreateAuthCorporateDidResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 为企业创建的DID结果
	Did *string `json:"did,omitempty" xml:"did,omitempty"`
}

func (s CreateAuthCorporateDidResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateAuthCorporateDidResponse) GoString() string {
	return s.String()
}

func (s *CreateAuthCorporateDidResponse) SetReqMsgId(v string) *CreateAuthCorporateDidResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateAuthCorporateDidResponse) SetResultCode(v string) *CreateAuthCorporateDidResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateAuthCorporateDidResponse) SetResultMsg(v string) *CreateAuthCorporateDidResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateAuthCorporateDidResponse) SetDid(v string) *CreateAuthCorporateDidResponse {
	s.Did = &v
	return s
}

type PullAuthWebpageVcRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 企业B类的唯一ID，对应的did在返回值vc_content中的subject字段
	PkId *string `json:"pk_id,omitempty" xml:"pk_id,omitempty" require:"true"`
	// C类用户的唯一ID，当前为通过姓名+身份证号组合计算哈希得到user_id = sha256(name+certNo)，对应的did在返回值vc_content中的issuer字段
	UserId *string `json:"user_id,omitempty" xml:"user_id,omitempty" require:"true"`
}

func (s PullAuthWebpageVcRequest) String() string {
	return tea.Prettify(s)
}

func (s PullAuthWebpageVcRequest) GoString() string {
	return s.String()
}

func (s *PullAuthWebpageVcRequest) SetAuthToken(v string) *PullAuthWebpageVcRequest {
	s.AuthToken = &v
	return s
}

func (s *PullAuthWebpageVcRequest) SetProductInstanceId(v string) *PullAuthWebpageVcRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *PullAuthWebpageVcRequest) SetPkId(v string) *PullAuthWebpageVcRequest {
	s.PkId = &v
	return s
}

func (s *PullAuthWebpageVcRequest) SetUserId(v string) *PullAuthWebpageVcRequest {
	s.UserId = &v
	return s
}

type PullAuthWebpageVcResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// C类用户实际授权发生的时间，GMT标准时间
	GmtAuthTime *int64 `json:"gmt_auth_time,omitempty" xml:"gmt_auth_time,omitempty"`
	// 企业B类的唯一ID，对应的did在vc_content中的subject字段
	PkId *string `json:"pk_id,omitempty" xml:"pk_id,omitempty"`
	// 当前声明的状态说明： 0：用户未授权 1：用户授权成功，此时vc_content字段会包含授权后的声明内容 ，101：信息校验失败，其他授权错误码情况待明确
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// 授权的可验证声明具体类型说明，有助于未来业务区分不同授权场景。
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
	// C类用户的唯一ID，当前为通过姓名+身份证号组合计算哈希得到user_id = sha256(name+certNo)，对应的did在vc_content中的issuer字段
	UserId *string `json:"user_id,omitempty" xml:"user_id,omitempty"`
	// 如果status的值是“1”，则此字段就是用户授权成功后的声明（vc）的完整内容。
	VcContent *string `json:"vc_content,omitempty" xml:"vc_content,omitempty"`
}

func (s PullAuthWebpageVcResponse) String() string {
	return tea.Prettify(s)
}

func (s PullAuthWebpageVcResponse) GoString() string {
	return s.String()
}

func (s *PullAuthWebpageVcResponse) SetReqMsgId(v string) *PullAuthWebpageVcResponse {
	s.ReqMsgId = &v
	return s
}

func (s *PullAuthWebpageVcResponse) SetResultCode(v string) *PullAuthWebpageVcResponse {
	s.ResultCode = &v
	return s
}

func (s *PullAuthWebpageVcResponse) SetResultMsg(v string) *PullAuthWebpageVcResponse {
	s.ResultMsg = &v
	return s
}

func (s *PullAuthWebpageVcResponse) SetGmtAuthTime(v int64) *PullAuthWebpageVcResponse {
	s.GmtAuthTime = &v
	return s
}

func (s *PullAuthWebpageVcResponse) SetPkId(v string) *PullAuthWebpageVcResponse {
	s.PkId = &v
	return s
}

func (s *PullAuthWebpageVcResponse) SetStatus(v string) *PullAuthWebpageVcResponse {
	s.Status = &v
	return s
}

func (s *PullAuthWebpageVcResponse) SetType(v string) *PullAuthWebpageVcResponse {
	s.Type = &v
	return s
}

func (s *PullAuthWebpageVcResponse) SetUserId(v string) *PullAuthWebpageVcResponse {
	s.UserId = &v
	return s
}

func (s *PullAuthWebpageVcResponse) SetVcContent(v string) *PullAuthWebpageVcResponse {
	s.VcContent = &v
	return s
}

type PullAuthWebpageUrlRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 实人认证使用的biz_id，长度不超过64字符的业务唯一id
	BizId *string `json:"biz_id,omitempty" xml:"biz_id,omitempty" require:"true"`
	// 实人认证使用的biz_type，通常为业务方自己在阿里云实人认证控制台创建。
	BizType *string `json:"biz_type,omitempty" xml:"biz_type,omitempty" require:"true"`
	// 业务方C端用户身份证信息，会进入可验证声明claim内容中。
	CertNo *string `json:"cert_no,omitempty" xml:"cert_no,omitempty" require:"true"`
	// 业务方可以传递的附加信息，通常跟可验证声明的claim有关，目前是可选项，将来业务复杂后，需要指定claim类型，或者附加信息内容说明.
	Extension *string `json:"extension,omitempty" xml:"extension,omitempty"`
	// 业务方C端用户姓名信息，会进入可验证声明claim内容中。
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 业务方B类身份标识id，与创建的业务方B类DID（颁发可验证声明的subject目标）时baas.auth.corporate.did.create接口的入参owner_uid相同。
	PkId *string `json:"pk_id,omitempty" xml:"pk_id,omitempty"`
}

func (s PullAuthWebpageUrlRequest) String() string {
	return tea.Prettify(s)
}

func (s PullAuthWebpageUrlRequest) GoString() string {
	return s.String()
}

func (s *PullAuthWebpageUrlRequest) SetAuthToken(v string) *PullAuthWebpageUrlRequest {
	s.AuthToken = &v
	return s
}

func (s *PullAuthWebpageUrlRequest) SetProductInstanceId(v string) *PullAuthWebpageUrlRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *PullAuthWebpageUrlRequest) SetBizId(v string) *PullAuthWebpageUrlRequest {
	s.BizId = &v
	return s
}

func (s *PullAuthWebpageUrlRequest) SetBizType(v string) *PullAuthWebpageUrlRequest {
	s.BizType = &v
	return s
}

func (s *PullAuthWebpageUrlRequest) SetCertNo(v string) *PullAuthWebpageUrlRequest {
	s.CertNo = &v
	return s
}

func (s *PullAuthWebpageUrlRequest) SetExtension(v string) *PullAuthWebpageUrlRequest {
	s.Extension = &v
	return s
}

func (s *PullAuthWebpageUrlRequest) SetName(v string) *PullAuthWebpageUrlRequest {
	s.Name = &v
	return s
}

func (s *PullAuthWebpageUrlRequest) SetPkId(v string) *PullAuthWebpageUrlRequest {
	s.PkId = &v
	return s
}

type PullAuthWebpageUrlResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 可用的H5的Url，并且已经携带授权宝侧相关的参数：token、bizId等.
	AuthUrl *string `json:"auth_url,omitempty" xml:"auth_url,omitempty"`
	// 此请求业务方的C端用户的DID，在授权宝侧相当于C端用户给业务方做授权，因此C端用户是issuer，业务方的B类客户是目标subject。
	IssuerDid *string `json:"issuer_did,omitempty" xml:"issuer_did,omitempty"`
	// 此请求业务方B类客户的DID
	SubjectDid *string `json:"subject_did,omitempty" xml:"subject_did,omitempty"`
}

func (s PullAuthWebpageUrlResponse) String() string {
	return tea.Prettify(s)
}

func (s PullAuthWebpageUrlResponse) GoString() string {
	return s.String()
}

func (s *PullAuthWebpageUrlResponse) SetReqMsgId(v string) *PullAuthWebpageUrlResponse {
	s.ReqMsgId = &v
	return s
}

func (s *PullAuthWebpageUrlResponse) SetResultCode(v string) *PullAuthWebpageUrlResponse {
	s.ResultCode = &v
	return s
}

func (s *PullAuthWebpageUrlResponse) SetResultMsg(v string) *PullAuthWebpageUrlResponse {
	s.ResultMsg = &v
	return s
}

func (s *PullAuthWebpageUrlResponse) SetAuthUrl(v string) *PullAuthWebpageUrlResponse {
	s.AuthUrl = &v
	return s
}

func (s *PullAuthWebpageUrlResponse) SetIssuerDid(v string) *PullAuthWebpageUrlResponse {
	s.IssuerDid = &v
	return s
}

func (s *PullAuthWebpageUrlResponse) SetSubjectDid(v string) *PullAuthWebpageUrlResponse {
	s.SubjectDid = &v
	return s
}

type StartAuthVcAuthRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 长度不超过64字符的业务唯一ID，用于对一个业务流的追踪，查询等。
	BizId *string `json:"biz_id,omitempty" xml:"biz_id,omitempty" require:"true"`
	// 业务类型，通常需要与授权宝服务沟通确定，业务类型可能影响此接口内部实现逻辑，长度不超过32字符。
	BizType *string `json:"biz_type,omitempty" xml:"biz_type,omitempty" require:"true"`
	// 一个json的string。内容包含具体需要的声明，不同业务场景不同。
	ClaimContent *string `json:"claim_content,omitempty" xml:"claim_content,omitempty" require:"true"`
	// 如果在相同的biz_type下，还需要针对声明claim进行细化划分，可以使用此字段。
	ClaimType *string `json:"claim_type,omitempty" xml:"claim_type,omitempty"`
	// 非托管的情况下必选，业务方持有的did身份。
	Did *string `json:"did,omitempty" xml:"did,omitempty"`
	// 申请声明颁发后的有效期，可选参数，如果不指定则默认申请永久有效。
	Expire *int64 `json:"expire,omitempty" xml:"expire,omitempty"`
	// 业务方可以传递的附加信息，通常跟可验证声明的claim有关，目前是可选项，将来业务复杂后，需要指定claim类型，或者附加信息内容说明。
	Extension *string `json:"extension,omitempty" xml:"extension,omitempty"`
	// 非托管的情况下必选。
	// 使用did字段的密钥进行整体传送内容（不包括此signature字段）签名的结果，具体签名规则： 1. Map<String,String> params 的key按照字典序排序 2. 拼接为 key1=value1&key2=value2&key3=value3 ... 3. 计算sha256(第2步结果)得到hash 4. 使用hash 和 签名的did请求DIS的签名。
	Signature *string `json:"signature,omitempty" xml:"signature,omitempty"`
	// 涉及的C类用户身份信息，如果是支付宝体系内，需要提供userId，并且提供二要素信息(name，certNo)
	UserInfo *string `json:"user_info,omitempty" xml:"user_info,omitempty" require:"true"`
}

func (s StartAuthVcAuthRequest) String() string {
	return tea.Prettify(s)
}

func (s StartAuthVcAuthRequest) GoString() string {
	return s.String()
}

func (s *StartAuthVcAuthRequest) SetAuthToken(v string) *StartAuthVcAuthRequest {
	s.AuthToken = &v
	return s
}

func (s *StartAuthVcAuthRequest) SetProductInstanceId(v string) *StartAuthVcAuthRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *StartAuthVcAuthRequest) SetBizId(v string) *StartAuthVcAuthRequest {
	s.BizId = &v
	return s
}

func (s *StartAuthVcAuthRequest) SetBizType(v string) *StartAuthVcAuthRequest {
	s.BizType = &v
	return s
}

func (s *StartAuthVcAuthRequest) SetClaimContent(v string) *StartAuthVcAuthRequest {
	s.ClaimContent = &v
	return s
}

func (s *StartAuthVcAuthRequest) SetClaimType(v string) *StartAuthVcAuthRequest {
	s.ClaimType = &v
	return s
}

func (s *StartAuthVcAuthRequest) SetDid(v string) *StartAuthVcAuthRequest {
	s.Did = &v
	return s
}

func (s *StartAuthVcAuthRequest) SetExpire(v int64) *StartAuthVcAuthRequest {
	s.Expire = &v
	return s
}

func (s *StartAuthVcAuthRequest) SetExtension(v string) *StartAuthVcAuthRequest {
	s.Extension = &v
	return s
}

func (s *StartAuthVcAuthRequest) SetSignature(v string) *StartAuthVcAuthRequest {
	s.Signature = &v
	return s
}

func (s *StartAuthVcAuthRequest) SetUserInfo(v string) *StartAuthVcAuthRequest {
	s.UserInfo = &v
	return s
}

type StartAuthVcAuthResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 输入参数的bizId返回
	BizId *string `json:"biz_id,omitempty" xml:"biz_id,omitempty"`
	// 具体业务的类型说明，来自入参。
	BizType *string `json:"biz_type,omitempty" xml:"biz_type,omitempty"`
	// 本次可验证声明颁发者的DID
	IssuerDid *string `json:"issuer_did,omitempty" xml:"issuer_did,omitempty"`
	// 可验证声明的颁发状态说明： 0：未授权 1：授权成功，此时vc_content字段会包含授权后的声明内容，其它状态码，待定义后增加。
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// 本次可验证声明目标者的DID
	SubjectDid *string `json:"subject_did,omitempty" xml:"subject_did,omitempty"`
	// 可验证声明完整内容， status 为 “1” 时候非空
	VcContent *string `json:"vc_content,omitempty" xml:"vc_content,omitempty"`
	// 可验证声明的唯一标识id，status 为 “1” 时候非空
	VcId *string `json:"vc_id,omitempty" xml:"vc_id,omitempty"`
}

func (s StartAuthVcAuthResponse) String() string {
	return tea.Prettify(s)
}

func (s StartAuthVcAuthResponse) GoString() string {
	return s.String()
}

func (s *StartAuthVcAuthResponse) SetReqMsgId(v string) *StartAuthVcAuthResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartAuthVcAuthResponse) SetResultCode(v string) *StartAuthVcAuthResponse {
	s.ResultCode = &v
	return s
}

func (s *StartAuthVcAuthResponse) SetResultMsg(v string) *StartAuthVcAuthResponse {
	s.ResultMsg = &v
	return s
}

func (s *StartAuthVcAuthResponse) SetBizId(v string) *StartAuthVcAuthResponse {
	s.BizId = &v
	return s
}

func (s *StartAuthVcAuthResponse) SetBizType(v string) *StartAuthVcAuthResponse {
	s.BizType = &v
	return s
}

func (s *StartAuthVcAuthResponse) SetIssuerDid(v string) *StartAuthVcAuthResponse {
	s.IssuerDid = &v
	return s
}

func (s *StartAuthVcAuthResponse) SetStatus(v string) *StartAuthVcAuthResponse {
	s.Status = &v
	return s
}

func (s *StartAuthVcAuthResponse) SetSubjectDid(v string) *StartAuthVcAuthResponse {
	s.SubjectDid = &v
	return s
}

func (s *StartAuthVcAuthResponse) SetVcContent(v string) *StartAuthVcAuthResponse {
	s.VcContent = &v
	return s
}

func (s *StartAuthVcAuthResponse) SetVcId(v string) *StartAuthVcAuthResponse {
	s.VcId = &v
	return s
}

type StartAuthVcShareRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 非托管的情况下必选，业务方持有的did身份。
	Did *string `json:"did,omitempty" xml:"did,omitempty"`
	// 在支持声明的claim字段级别分享能力时使用，可以指定哪些字段隐藏，哪些字段分享。示例中标记为”1“的是隐藏，”0“的是分享明文。
	Index *string `json:"index,omitempty" xml:"index,omitempty"`
	// 非托管的情况下必选。 使用did字段的密钥进行整体传送内容（不包括此signature字段）签名的结果，具体签名规则： 1. Map<String,String> params 的key按照字典序排序 2. 拼接为 key1=value1&key2=value2&key3=value3 ... 3. 计算sha256(第2步结果)得到hash 4. 使用hash 和 签名的did请求DIS的签名。
	Signature *string `json:"signature,omitempty" xml:"signature,omitempty"`
	// 分享声明的目标方DID
	TargetDid *string `json:"target_did,omitempty" xml:"target_did,omitempty" require:"true"`
	// 分享权限的目标可验证声明(VC)的ID
	VcId *string `json:"vc_id,omitempty" xml:"vc_id,omitempty" require:"true"`
	// vc_id的owner，将持有的vc_id分享给目标target_did
	OwnerDid *string `json:"owner_did,omitempty" xml:"owner_did,omitempty" require:"true"`
}

func (s StartAuthVcShareRequest) String() string {
	return tea.Prettify(s)
}

func (s StartAuthVcShareRequest) GoString() string {
	return s.String()
}

func (s *StartAuthVcShareRequest) SetAuthToken(v string) *StartAuthVcShareRequest {
	s.AuthToken = &v
	return s
}

func (s *StartAuthVcShareRequest) SetProductInstanceId(v string) *StartAuthVcShareRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *StartAuthVcShareRequest) SetDid(v string) *StartAuthVcShareRequest {
	s.Did = &v
	return s
}

func (s *StartAuthVcShareRequest) SetIndex(v string) *StartAuthVcShareRequest {
	s.Index = &v
	return s
}

func (s *StartAuthVcShareRequest) SetSignature(v string) *StartAuthVcShareRequest {
	s.Signature = &v
	return s
}

func (s *StartAuthVcShareRequest) SetTargetDid(v string) *StartAuthVcShareRequest {
	s.TargetDid = &v
	return s
}

func (s *StartAuthVcShareRequest) SetVcId(v string) *StartAuthVcShareRequest {
	s.VcId = &v
	return s
}

func (s *StartAuthVcShareRequest) SetOwnerDid(v string) *StartAuthVcShareRequest {
	s.OwnerDid = &v
	return s
}

type StartAuthVcShareResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 分享可验证声明的目标方DID
	TargetDid *string `json:"target_did,omitempty" xml:"target_did,omitempty"`
	// 分享链上VC数据的交易hash，可用于直连区块链查询交易内容时使用。
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty"`
}

func (s StartAuthVcShareResponse) String() string {
	return tea.Prettify(s)
}

func (s StartAuthVcShareResponse) GoString() string {
	return s.String()
}

func (s *StartAuthVcShareResponse) SetReqMsgId(v string) *StartAuthVcShareResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartAuthVcShareResponse) SetResultCode(v string) *StartAuthVcShareResponse {
	s.ResultCode = &v
	return s
}

func (s *StartAuthVcShareResponse) SetResultMsg(v string) *StartAuthVcShareResponse {
	s.ResultMsg = &v
	return s
}

func (s *StartAuthVcShareResponse) SetTargetDid(v string) *StartAuthVcShareResponse {
	s.TargetDid = &v
	return s
}

func (s *StartAuthVcShareResponse) SetTxHash(v string) *StartAuthVcShareResponse {
	s.TxHash = &v
	return s
}

type QueryAuthVcContentRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 如果此字段为空，则默认使用当前请求租户在授权宝配置的did来进行查询(此did需授权有权限)，此外情况都需要指定目标vc_id的owner_did
	OwnerDid *string `json:"owner_did,omitempty" xml:"owner_did,omitempty"`
	// 查询目标可验证声明的ID
	VcId *string `json:"vc_id,omitempty" xml:"vc_id,omitempty" require:"true"`
}

func (s QueryAuthVcContentRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryAuthVcContentRequest) GoString() string {
	return s.String()
}

func (s *QueryAuthVcContentRequest) SetAuthToken(v string) *QueryAuthVcContentRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryAuthVcContentRequest) SetProductInstanceId(v string) *QueryAuthVcContentRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryAuthVcContentRequest) SetOwnerDid(v string) *QueryAuthVcContentRequest {
	s.OwnerDid = &v
	return s
}

func (s *QueryAuthVcContentRequest) SetVcId(v string) *QueryAuthVcContentRequest {
	s.VcId = &v
	return s
}

type QueryAuthVcContentResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 目标查询的可验证声明的完整内容，如果有权限则返回明文内容，否则获取失败，此内容为空。
	VcContent *string `json:"vc_content,omitempty" xml:"vc_content,omitempty"`
	// 目标可验证声明的唯一ID
	VcId *string `json:"vc_id,omitempty" xml:"vc_id,omitempty"`
	// 当前声明的状态说明： 0：未授权 1：授权成功，-1：已吊销
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
}

func (s QueryAuthVcContentResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryAuthVcContentResponse) GoString() string {
	return s.String()
}

func (s *QueryAuthVcContentResponse) SetReqMsgId(v string) *QueryAuthVcContentResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryAuthVcContentResponse) SetResultCode(v string) *QueryAuthVcContentResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryAuthVcContentResponse) SetResultMsg(v string) *QueryAuthVcContentResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryAuthVcContentResponse) SetVcContent(v string) *QueryAuthVcContentResponse {
	s.VcContent = &v
	return s
}

func (s *QueryAuthVcContentResponse) SetVcId(v string) *QueryAuthVcContentResponse {
	s.VcId = &v
	return s
}

func (s *QueryAuthVcContentResponse) SetStatus(v string) *QueryAuthVcContentResponse {
	s.Status = &v
	return s
}

type CreateAuthUserinfoDidRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 业务类型，通常需要与授权宝服务沟通确定，业务类型可能影响此接口内部实现逻辑，长度不超过32字符。
	BizType *string `json:"biz_type,omitempty" xml:"biz_type,omitempty" require:"true"`
	// 非托管的情况下必选，业务方持有的did身份。
	Did *string `json:"did,omitempty" xml:"did,omitempty"`
	// 业务方可以传递的附加信息，暂时未启用
	Extension *string `json:"extension,omitempty" xml:"extension,omitempty"`
	// 非托管的情况下必选。 使用did字段的密钥进行整体传送内容（不包括此signature字段）签名的结果，具体签名规则： 1. Map<String,String> params 的key按照字典序排序 2. 拼接为 key1=value1&key2=value2&key3=value3 ... 3. 计算sha256(第2步结果)得到hash 4. 使用hash 和 签名的did请求DIS的签名。
	Signature *string `json:"signature,omitempty" xml:"signature,omitempty"`
	// 目标用户的相关信息描述，用于创建DID绑定
	UserInfo *string `json:"user_info,omitempty" xml:"user_info,omitempty" require:"true"`
	// 所有需要关联的外键，外键必须以did auth key controller的did作为前缀+“sidekey:”+外键
	Indexes []*string `json:"indexes,omitempty" xml:"indexes,omitempty" type:"Repeated"`
}

func (s CreateAuthUserinfoDidRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateAuthUserinfoDidRequest) GoString() string {
	return s.String()
}

func (s *CreateAuthUserinfoDidRequest) SetAuthToken(v string) *CreateAuthUserinfoDidRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateAuthUserinfoDidRequest) SetProductInstanceId(v string) *CreateAuthUserinfoDidRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateAuthUserinfoDidRequest) SetBizType(v string) *CreateAuthUserinfoDidRequest {
	s.BizType = &v
	return s
}

func (s *CreateAuthUserinfoDidRequest) SetDid(v string) *CreateAuthUserinfoDidRequest {
	s.Did = &v
	return s
}

func (s *CreateAuthUserinfoDidRequest) SetExtension(v string) *CreateAuthUserinfoDidRequest {
	s.Extension = &v
	return s
}

func (s *CreateAuthUserinfoDidRequest) SetSignature(v string) *CreateAuthUserinfoDidRequest {
	s.Signature = &v
	return s
}

func (s *CreateAuthUserinfoDidRequest) SetUserInfo(v string) *CreateAuthUserinfoDidRequest {
	s.UserInfo = &v
	return s
}

func (s *CreateAuthUserinfoDidRequest) SetIndexes(v []*string) *CreateAuthUserinfoDidRequest {
	s.Indexes = v
	return s
}

type CreateAuthUserinfoDidResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 返回给指定用户创建的did结果，如果入参对应的did之前已经存在，则不会新建did，直接返回已有did。
	Result *string `json:"result,omitempty" xml:"result,omitempty"`
}

func (s CreateAuthUserinfoDidResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateAuthUserinfoDidResponse) GoString() string {
	return s.String()
}

func (s *CreateAuthUserinfoDidResponse) SetReqMsgId(v string) *CreateAuthUserinfoDidResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateAuthUserinfoDidResponse) SetResultCode(v string) *CreateAuthUserinfoDidResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateAuthUserinfoDidResponse) SetResultMsg(v string) *CreateAuthUserinfoDidResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateAuthUserinfoDidResponse) SetResult(v string) *CreateAuthUserinfoDidResponse {
	s.Result = &v
	return s
}

type StartAuthVcRevokeRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 在type参数为1时，此did参数不需要传递，默认调用方吊销给用户颁发的卡证。
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 类型说明，1：机构给用户颁发的证书，2：用户授权机构的证书(需要用户授权)
	Type *int64 `json:"type,omitempty" xml:"type,omitempty"`
	// 吊销的目标可验证声明ID，如果type参数为1时，此参数可以默认不传，授权宝将会找到目标user当前持有的有效卡证，进行吊销处理。
	// 当type不为1时，此参数也可以不传，此时授权宝会根据userInfo和did信息去找到一个可吊销的VC进行吊销（应用层慎重使用，确保这样筛选的目标唯一性）。
	VcId *string `json:"vc_id,omitempty" xml:"vc_id,omitempty"`
	// 当type参数为1时，此参数和did参数，两者选一个使用，使用userId或者did参数指明did，代表的都是目标C类用户身份。
	// 当type不为1时，此参数代表C类用户身份，did参数指明授权的目标机构身份。
	//
	UserInfo *string `json:"user_info,omitempty" xml:"user_info,omitempty"`
}

func (s StartAuthVcRevokeRequest) String() string {
	return tea.Prettify(s)
}

func (s StartAuthVcRevokeRequest) GoString() string {
	return s.String()
}

func (s *StartAuthVcRevokeRequest) SetAuthToken(v string) *StartAuthVcRevokeRequest {
	s.AuthToken = &v
	return s
}

func (s *StartAuthVcRevokeRequest) SetProductInstanceId(v string) *StartAuthVcRevokeRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *StartAuthVcRevokeRequest) SetDid(v string) *StartAuthVcRevokeRequest {
	s.Did = &v
	return s
}

func (s *StartAuthVcRevokeRequest) SetType(v int64) *StartAuthVcRevokeRequest {
	s.Type = &v
	return s
}

func (s *StartAuthVcRevokeRequest) SetVcId(v string) *StartAuthVcRevokeRequest {
	s.VcId = &v
	return s
}

func (s *StartAuthVcRevokeRequest) SetUserInfo(v string) *StartAuthVcRevokeRequest {
	s.UserInfo = &v
	return s
}

type StartAuthVcRevokeResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// true:吊销成功，false:吊销失败
	Result *bool `json:"result,omitempty" xml:"result,omitempty"`
}

func (s StartAuthVcRevokeResponse) String() string {
	return tea.Prettify(s)
}

func (s StartAuthVcRevokeResponse) GoString() string {
	return s.String()
}

func (s *StartAuthVcRevokeResponse) SetReqMsgId(v string) *StartAuthVcRevokeResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartAuthVcRevokeResponse) SetResultCode(v string) *StartAuthVcRevokeResponse {
	s.ResultCode = &v
	return s
}

func (s *StartAuthVcRevokeResponse) SetResultMsg(v string) *StartAuthVcRevokeResponse {
	s.ResultMsg = &v
	return s
}

func (s *StartAuthVcRevokeResponse) SetResult(v bool) *StartAuthVcRevokeResponse {
	s.Result = &v
	return s
}

type StartAuthVcGiveRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 长度不超过64字符的业务唯一ID，用于对一个业务流的追踪，查询等。
	BizId *string `json:"biz_id,omitempty" xml:"biz_id,omitempty" require:"true"`
	// 业务类型，通常需要与授权宝服务沟通确定，业务类型可能影响此接口内部实现逻辑，长度不超过32字符。
	BizType *string `json:"biz_type,omitempty" xml:"biz_type,omitempty" require:"true"`
	// 一个json的string。内容包含具体需要的声明，不同业务场景不同。
	ClaimContent *string `json:"claim_content,omitempty" xml:"claim_content,omitempty"`
	// 如果在相同的biz_type下，还需要针对声明claim进行细化划分，可以使用此字段。
	ClaimType *string `json:"claim_type,omitempty" xml:"claim_type,omitempty"`
	// 非托管的情况下必选，业务方持有的did身份。
	Did *string `json:"did,omitempty" xml:"did,omitempty"`
	// 业务方可以传递的附加信息
	Extension *string `json:"extension,omitempty" xml:"extension,omitempty"`
	// 发起转增的发起方did，其实为发起请求之前的vc_id持有人
	OwnerDid *string `json:"owner_did,omitempty" xml:"owner_did,omitempty" require:"true"`
	// 非托管的情况下必选。 使用did字段的密钥进行整体传送内容（不包括此signature字段）签名的结果，具体签名规则： 1. Map<String,String> params 的key按照字典序排序 2. 拼接为 key1=value1&key2=value2&key3=value3 ... 3. 计算sha256(第2步结果)得到hash 4. 使用hash 和 签名的did请求DIS的签名。
	Signature *string `json:"signature,omitempty" xml:"signature,omitempty"`
	// 转增目标的did内容
	TargetDid *string `json:"target_did,omitempty" xml:"target_did,omitempty" require:"true"`
	// 目标票据所在的可验证证明的id
	VcId *string `json:"vc_id,omitempty" xml:"vc_id,omitempty" require:"true"`
	// 申请声明颁发后的有效期，可选参数，如果不指定则默认申请永久有效。
	Expire *int64 `json:"expire,omitempty" xml:"expire,omitempty"`
}

func (s StartAuthVcGiveRequest) String() string {
	return tea.Prettify(s)
}

func (s StartAuthVcGiveRequest) GoString() string {
	return s.String()
}

func (s *StartAuthVcGiveRequest) SetAuthToken(v string) *StartAuthVcGiveRequest {
	s.AuthToken = &v
	return s
}

func (s *StartAuthVcGiveRequest) SetProductInstanceId(v string) *StartAuthVcGiveRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *StartAuthVcGiveRequest) SetBizId(v string) *StartAuthVcGiveRequest {
	s.BizId = &v
	return s
}

func (s *StartAuthVcGiveRequest) SetBizType(v string) *StartAuthVcGiveRequest {
	s.BizType = &v
	return s
}

func (s *StartAuthVcGiveRequest) SetClaimContent(v string) *StartAuthVcGiveRequest {
	s.ClaimContent = &v
	return s
}

func (s *StartAuthVcGiveRequest) SetClaimType(v string) *StartAuthVcGiveRequest {
	s.ClaimType = &v
	return s
}

func (s *StartAuthVcGiveRequest) SetDid(v string) *StartAuthVcGiveRequest {
	s.Did = &v
	return s
}

func (s *StartAuthVcGiveRequest) SetExtension(v string) *StartAuthVcGiveRequest {
	s.Extension = &v
	return s
}

func (s *StartAuthVcGiveRequest) SetOwnerDid(v string) *StartAuthVcGiveRequest {
	s.OwnerDid = &v
	return s
}

func (s *StartAuthVcGiveRequest) SetSignature(v string) *StartAuthVcGiveRequest {
	s.Signature = &v
	return s
}

func (s *StartAuthVcGiveRequest) SetTargetDid(v string) *StartAuthVcGiveRequest {
	s.TargetDid = &v
	return s
}

func (s *StartAuthVcGiveRequest) SetVcId(v string) *StartAuthVcGiveRequest {
	s.VcId = &v
	return s
}

func (s *StartAuthVcGiveRequest) SetExpire(v int64) *StartAuthVcGiveRequest {
	s.Expire = &v
	return s
}

type StartAuthVcGiveResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 入参返回
	BizId *string `json:"biz_id,omitempty" xml:"biz_id,omitempty"`
	// 业务类型，入参返回
	BizType *string `json:"biz_type,omitempty" xml:"biz_type,omitempty"`
	// 本次转增后新颁发的可验证声明的issuer
	IssuerDid *string `json:"issuer_did,omitempty" xml:"issuer_did,omitempty"`
	// 可验证声明的颁发状态说明： 0：未授权 1：授权成功，此时vc_content字段会包含授权后的声明内容，其它状态码，待定义后增加。
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// 本次转增的目标，也是新颁发的可验证声明的持有者owner的did
	SubjectDid *string `json:"subject_did,omitempty" xml:"subject_did,omitempty"`
	// 可验证声明完整内容， status 为 “1” 时候非空
	VcContent *string `json:"vc_content,omitempty" xml:"vc_content,omitempty"`
	// 可验证声明的id
	VcId *string `json:"vc_id,omitempty" xml:"vc_id,omitempty"`
}

func (s StartAuthVcGiveResponse) String() string {
	return tea.Prettify(s)
}

func (s StartAuthVcGiveResponse) GoString() string {
	return s.String()
}

func (s *StartAuthVcGiveResponse) SetReqMsgId(v string) *StartAuthVcGiveResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartAuthVcGiveResponse) SetResultCode(v string) *StartAuthVcGiveResponse {
	s.ResultCode = &v
	return s
}

func (s *StartAuthVcGiveResponse) SetResultMsg(v string) *StartAuthVcGiveResponse {
	s.ResultMsg = &v
	return s
}

func (s *StartAuthVcGiveResponse) SetBizId(v string) *StartAuthVcGiveResponse {
	s.BizId = &v
	return s
}

func (s *StartAuthVcGiveResponse) SetBizType(v string) *StartAuthVcGiveResponse {
	s.BizType = &v
	return s
}

func (s *StartAuthVcGiveResponse) SetIssuerDid(v string) *StartAuthVcGiveResponse {
	s.IssuerDid = &v
	return s
}

func (s *StartAuthVcGiveResponse) SetStatus(v string) *StartAuthVcGiveResponse {
	s.Status = &v
	return s
}

func (s *StartAuthVcGiveResponse) SetSubjectDid(v string) *StartAuthVcGiveResponse {
	s.SubjectDid = &v
	return s
}

func (s *StartAuthVcGiveResponse) SetVcContent(v string) *StartAuthVcGiveResponse {
	s.VcContent = &v
	return s
}

func (s *StartAuthVcGiveResponse) SetVcId(v string) *StartAuthVcGiveResponse {
	s.VcId = &v
	return s
}

type StartAuthVcSharebatchRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 非托管的情况下必选，业务方持有的did身份。
	Did *string `json:"did,omitempty" xml:"did,omitempty"`
	// 非托管的情况下必选。 使用did字段的密钥进行整体传送内容（不包括此signature字段）签名的结果，具体签名规则： 1. Map<String,String> params 的key按照字典序排序 2. 拼接为 key1=value1&key2=value2&key3=value3 ... 3. 计算sha256(第2步结果)得到hash 4. 使用hash 和 签名的did请求DIS的签名。
	Signature *string `json:"signature,omitempty" xml:"signature,omitempty"`
	// 分享声明的目标方DID
	TargetDid *string `json:"target_did,omitempty" xml:"target_did,omitempty" require:"true"`
	// 目标待分享的VC列表，不超过10个
	VcShareList []*VcShareStruct `json:"vc_share_list,omitempty" xml:"vc_share_list,omitempty" require:"true" type:"Repeated"`
}

func (s StartAuthVcSharebatchRequest) String() string {
	return tea.Prettify(s)
}

func (s StartAuthVcSharebatchRequest) GoString() string {
	return s.String()
}

func (s *StartAuthVcSharebatchRequest) SetAuthToken(v string) *StartAuthVcSharebatchRequest {
	s.AuthToken = &v
	return s
}

func (s *StartAuthVcSharebatchRequest) SetProductInstanceId(v string) *StartAuthVcSharebatchRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *StartAuthVcSharebatchRequest) SetDid(v string) *StartAuthVcSharebatchRequest {
	s.Did = &v
	return s
}

func (s *StartAuthVcSharebatchRequest) SetSignature(v string) *StartAuthVcSharebatchRequest {
	s.Signature = &v
	return s
}

func (s *StartAuthVcSharebatchRequest) SetTargetDid(v string) *StartAuthVcSharebatchRequest {
	s.TargetDid = &v
	return s
}

func (s *StartAuthVcSharebatchRequest) SetVcShareList(v []*VcShareStruct) *StartAuthVcSharebatchRequest {
	s.VcShareList = v
	return s
}

type StartAuthVcSharebatchResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// VC分享的结果列表，分别带有结果tx_hash
	VcShareResults []*VcShareResult `json:"vc_share_results,omitempty" xml:"vc_share_results,omitempty" type:"Repeated"`
}

func (s StartAuthVcSharebatchResponse) String() string {
	return tea.Prettify(s)
}

func (s StartAuthVcSharebatchResponse) GoString() string {
	return s.String()
}

func (s *StartAuthVcSharebatchResponse) SetReqMsgId(v string) *StartAuthVcSharebatchResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartAuthVcSharebatchResponse) SetResultCode(v string) *StartAuthVcSharebatchResponse {
	s.ResultCode = &v
	return s
}

func (s *StartAuthVcSharebatchResponse) SetResultMsg(v string) *StartAuthVcSharebatchResponse {
	s.ResultMsg = &v
	return s
}

func (s *StartAuthVcSharebatchResponse) SetVcShareResults(v []*VcShareResult) *StartAuthVcSharebatchResponse {
	s.VcShareResults = v
	return s
}

type StartAuthCorporateSignRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 需要进行签名的字符串，按规定方式进行传参拼接并sha256
	Data *string `json:"data,omitempty" xml:"data,omitempty" require:"true"`
	// 需要代理签名的目标did，此did是当前请求方申请在授权宝控制创建
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
}

func (s StartAuthCorporateSignRequest) String() string {
	return tea.Prettify(s)
}

func (s StartAuthCorporateSignRequest) GoString() string {
	return s.String()
}

func (s *StartAuthCorporateSignRequest) SetAuthToken(v string) *StartAuthCorporateSignRequest {
	s.AuthToken = &v
	return s
}

func (s *StartAuthCorporateSignRequest) SetProductInstanceId(v string) *StartAuthCorporateSignRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *StartAuthCorporateSignRequest) SetData(v string) *StartAuthCorporateSignRequest {
	s.Data = &v
	return s
}

func (s *StartAuthCorporateSignRequest) SetDid(v string) *StartAuthCorporateSignRequest {
	s.Did = &v
	return s
}

type StartAuthCorporateSignResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 签名结果
	Signature *string `json:"signature,omitempty" xml:"signature,omitempty"`
}

func (s StartAuthCorporateSignResponse) String() string {
	return tea.Prettify(s)
}

func (s StartAuthCorporateSignResponse) GoString() string {
	return s.String()
}

func (s *StartAuthCorporateSignResponse) SetReqMsgId(v string) *StartAuthCorporateSignResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartAuthCorporateSignResponse) SetResultCode(v string) *StartAuthCorporateSignResponse {
	s.ResultCode = &v
	return s
}

func (s *StartAuthCorporateSignResponse) SetResultMsg(v string) *StartAuthCorporateSignResponse {
	s.ResultMsg = &v
	return s
}

func (s *StartAuthCorporateSignResponse) SetSignature(v string) *StartAuthCorporateSignResponse {
	s.Signature = &v
	return s
}

type StartAuthVcBatchauthRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 长度不超过64字符的业务唯一ID，用于对一个业务流的追踪，查询等。
	BizId *string `json:"biz_id,omitempty" xml:"biz_id,omitempty" require:"true"`
	// 业务类型，通常需要与授权宝服务沟通确定，业务类型可能影响此接口内部实现逻辑，长度不超过32字符。
	BizType *string `json:"biz_type,omitempty" xml:"biz_type,omitempty" require:"true"`
	// 批量进行可验证声明颁发的所有候选声明内容
	ClaimList []*Claim `json:"claim_list,omitempty" xml:"claim_list,omitempty" require:"true" type:"Repeated"`
	// 非托管的情况下必选，业务方持有的did身份。
	Did *string `json:"did,omitempty" xml:"did,omitempty"`
	// 业务方可以传递的附加信息，通常跟可验证声明的claim有关，目前是可选项，将来业务复杂后，需要指定claim类型，或者附加信息内容说明。
	Extension *string `json:"extension,omitempty" xml:"extension,omitempty"`
	// jN1LVH5YhbTvgrdeBqlImPJBWDzVdNyyHZ1n9A0pSOQKnt11jWM5Qn707+wEa7bc8TOd1WvRItTe\r\nmx4xYCqX0gE=\r\n
	Signature *string `json:"signature,omitempty" xml:"signature,omitempty"`
	// 涉及的C类用户身份信息，如果是支付宝体系内，需要提供userId，并且提供二要素信息(name，certNo)
	UserInfo *string `json:"user_info,omitempty" xml:"user_info,omitempty" require:"true"`
}

func (s StartAuthVcBatchauthRequest) String() string {
	return tea.Prettify(s)
}

func (s StartAuthVcBatchauthRequest) GoString() string {
	return s.String()
}

func (s *StartAuthVcBatchauthRequest) SetAuthToken(v string) *StartAuthVcBatchauthRequest {
	s.AuthToken = &v
	return s
}

func (s *StartAuthVcBatchauthRequest) SetProductInstanceId(v string) *StartAuthVcBatchauthRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *StartAuthVcBatchauthRequest) SetBizId(v string) *StartAuthVcBatchauthRequest {
	s.BizId = &v
	return s
}

func (s *StartAuthVcBatchauthRequest) SetBizType(v string) *StartAuthVcBatchauthRequest {
	s.BizType = &v
	return s
}

func (s *StartAuthVcBatchauthRequest) SetClaimList(v []*Claim) *StartAuthVcBatchauthRequest {
	s.ClaimList = v
	return s
}

func (s *StartAuthVcBatchauthRequest) SetDid(v string) *StartAuthVcBatchauthRequest {
	s.Did = &v
	return s
}

func (s *StartAuthVcBatchauthRequest) SetExtension(v string) *StartAuthVcBatchauthRequest {
	s.Extension = &v
	return s
}

func (s *StartAuthVcBatchauthRequest) SetSignature(v string) *StartAuthVcBatchauthRequest {
	s.Signature = &v
	return s
}

func (s *StartAuthVcBatchauthRequest) SetUserInfo(v string) *StartAuthVcBatchauthRequest {
	s.UserInfo = &v
	return s
}

type StartAuthVcBatchauthResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 输入参数的bizId返回
	BizId *string `json:"biz_id,omitempty" xml:"biz_id,omitempty"`
	// 具体业务的类型说明，来自入参。
	BizType *string `json:"biz_type,omitempty" xml:"biz_type,omitempty"`
	// 本次可验证声明颁发者的DID
	IssuerDid *string `json:"issuer_did,omitempty" xml:"issuer_did,omitempty"`
	// 颁发的多个可验证声明结果列表。
	VcList []*VcContent `json:"vc_list,omitempty" xml:"vc_list,omitempty" type:"Repeated"`
}

func (s StartAuthVcBatchauthResponse) String() string {
	return tea.Prettify(s)
}

func (s StartAuthVcBatchauthResponse) GoString() string {
	return s.String()
}

func (s *StartAuthVcBatchauthResponse) SetReqMsgId(v string) *StartAuthVcBatchauthResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartAuthVcBatchauthResponse) SetResultCode(v string) *StartAuthVcBatchauthResponse {
	s.ResultCode = &v
	return s
}

func (s *StartAuthVcBatchauthResponse) SetResultMsg(v string) *StartAuthVcBatchauthResponse {
	s.ResultMsg = &v
	return s
}

func (s *StartAuthVcBatchauthResponse) SetBizId(v string) *StartAuthVcBatchauthResponse {
	s.BizId = &v
	return s
}

func (s *StartAuthVcBatchauthResponse) SetBizType(v string) *StartAuthVcBatchauthResponse {
	s.BizType = &v
	return s
}

func (s *StartAuthVcBatchauthResponse) SetIssuerDid(v string) *StartAuthVcBatchauthResponse {
	s.IssuerDid = &v
	return s
}

func (s *StartAuthVcBatchauthResponse) SetVcList(v []*VcContent) *StartAuthVcBatchauthResponse {
	s.VcList = v
	return s
}

type StartAuthVcReplaceRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 长度不超过64字符的业务流水唯一ID，用于对一个业务流的追踪，查询等。
	BizId *string `json:"biz_id,omitempty" xml:"biz_id,omitempty" require:"true"`
	// 业务类型，通常需要与授权宝服务沟通确定，业务类型可能影响此接口内部实现逻辑，长度不超过32字符。
	BizType *string `json:"biz_type,omitempty" xml:"biz_type,omitempty" require:"true"`
	// 一个json的string。内容包含具体需要的声明，不同业务场景不同。
	ClaimContent *string `json:"claim_content,omitempty" xml:"claim_content,omitempty" require:"true"`
	// 如果在相同的biz_type下，还需要针对声明claim进行细化划分，可以使用此字段。
	ClaimType *string `json:"claim_type,omitempty" xml:"claim_type,omitempty"`
	// 非托管的情况下必选，业务方持有的did身份。
	Did *string `json:"did,omitempty" xml:"did,omitempty"`
	// 申请声明颁发后的有效期，可选参数，如果不指定则默认申请永久有效。
	Expire *int64 `json:"expire,omitempty" xml:"expire,omitempty"`
	// 业务方可以传递的附加信息
	Extension *string `json:"extension,omitempty" xml:"extension,omitempty"`
	// 非托管的情况下必选。 使用did字段的密钥进行整体传送内容（不包括此signature字段）签名的结果，具体签名规则： 1. Map<String,String> params 的key按照字典序排序 2. 拼接为 key1=value1&key2=value2&key3=value3 ... 3. 计算sha256(第2步结果)得到hash 4. 使用hash 和 签名的did请求DIS的签名。
	Signature *string `json:"signature,omitempty" xml:"signature,omitempty"`
	// 涉及的C类用户身份信息，如果是支付宝体系内，需要提供userId，并且提供二要素信息(name，certNo)
	// 如果已知目标C类用户的did，则可以直接指定did，比如：{"did": "XXXX"}
	UserInfo *string `json:"user_info,omitempty" xml:"user_info,omitempty" require:"true"`
	// 目标被替换的卡证vcId，此vcId指向的VC将被吊销，然后颁发新的vc。
	// 如果不指定此字段，如果有效卡证唯一，授权宝会默认找到唯一的有效卡证vcId进行吊销，然后颁发新的vc。
	VcId *string `json:"vc_id,omitempty" xml:"vc_id,omitempty"`
}

func (s StartAuthVcReplaceRequest) String() string {
	return tea.Prettify(s)
}

func (s StartAuthVcReplaceRequest) GoString() string {
	return s.String()
}

func (s *StartAuthVcReplaceRequest) SetAuthToken(v string) *StartAuthVcReplaceRequest {
	s.AuthToken = &v
	return s
}

func (s *StartAuthVcReplaceRequest) SetProductInstanceId(v string) *StartAuthVcReplaceRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *StartAuthVcReplaceRequest) SetBizId(v string) *StartAuthVcReplaceRequest {
	s.BizId = &v
	return s
}

func (s *StartAuthVcReplaceRequest) SetBizType(v string) *StartAuthVcReplaceRequest {
	s.BizType = &v
	return s
}

func (s *StartAuthVcReplaceRequest) SetClaimContent(v string) *StartAuthVcReplaceRequest {
	s.ClaimContent = &v
	return s
}

func (s *StartAuthVcReplaceRequest) SetClaimType(v string) *StartAuthVcReplaceRequest {
	s.ClaimType = &v
	return s
}

func (s *StartAuthVcReplaceRequest) SetDid(v string) *StartAuthVcReplaceRequest {
	s.Did = &v
	return s
}

func (s *StartAuthVcReplaceRequest) SetExpire(v int64) *StartAuthVcReplaceRequest {
	s.Expire = &v
	return s
}

func (s *StartAuthVcReplaceRequest) SetExtension(v string) *StartAuthVcReplaceRequest {
	s.Extension = &v
	return s
}

func (s *StartAuthVcReplaceRequest) SetSignature(v string) *StartAuthVcReplaceRequest {
	s.Signature = &v
	return s
}

func (s *StartAuthVcReplaceRequest) SetUserInfo(v string) *StartAuthVcReplaceRequest {
	s.UserInfo = &v
	return s
}

func (s *StartAuthVcReplaceRequest) SetVcId(v string) *StartAuthVcReplaceRequest {
	s.VcId = &v
	return s
}

type StartAuthVcReplaceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 输入参数的bizId返回
	BizId *string `json:"biz_id,omitempty" xml:"biz_id,omitempty"`
	// 具体业务的类型说明，来自入参。
	BizType *string `json:"biz_type,omitempty" xml:"biz_type,omitempty"`
	// 本次可验证声明颁发者的DID
	IssuerDid *string `json:"issuer_did,omitempty" xml:"issuer_did,omitempty"`
	// 可验证声明的颁发状态说明： 0：未授权 1：授权成功，此时vc_content字段会包含授权后的声明内容，其它状态码，待定义后增加。
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// 本次可验证声明目标者的DID
	SubjectDid *string `json:"subject_did,omitempty" xml:"subject_did,omitempty"`
	// 可验证声明完整内容， status 为 “1” 时候非空
	VcContent *string `json:"vc_content,omitempty" xml:"vc_content,omitempty"`
	// 可验证声明的唯一标识id，status 为 “1” 时候非空
	VcId *string `json:"vc_id,omitempty" xml:"vc_id,omitempty"`
}

func (s StartAuthVcReplaceResponse) String() string {
	return tea.Prettify(s)
}

func (s StartAuthVcReplaceResponse) GoString() string {
	return s.String()
}

func (s *StartAuthVcReplaceResponse) SetReqMsgId(v string) *StartAuthVcReplaceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartAuthVcReplaceResponse) SetResultCode(v string) *StartAuthVcReplaceResponse {
	s.ResultCode = &v
	return s
}

func (s *StartAuthVcReplaceResponse) SetResultMsg(v string) *StartAuthVcReplaceResponse {
	s.ResultMsg = &v
	return s
}

func (s *StartAuthVcReplaceResponse) SetBizId(v string) *StartAuthVcReplaceResponse {
	s.BizId = &v
	return s
}

func (s *StartAuthVcReplaceResponse) SetBizType(v string) *StartAuthVcReplaceResponse {
	s.BizType = &v
	return s
}

func (s *StartAuthVcReplaceResponse) SetIssuerDid(v string) *StartAuthVcReplaceResponse {
	s.IssuerDid = &v
	return s
}

func (s *StartAuthVcReplaceResponse) SetStatus(v string) *StartAuthVcReplaceResponse {
	s.Status = &v
	return s
}

func (s *StartAuthVcReplaceResponse) SetSubjectDid(v string) *StartAuthVcReplaceResponse {
	s.SubjectDid = &v
	return s
}

func (s *StartAuthVcReplaceResponse) SetVcContent(v string) *StartAuthVcReplaceResponse {
	s.VcContent = &v
	return s
}

func (s *StartAuthVcReplaceResponse) SetVcId(v string) *StartAuthVcReplaceResponse {
	s.VcId = &v
	return s
}

type PushAuthInsurancePolicyRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 投保人证件号码
	CertNo *string `json:"cert_no,omitempty" xml:"cert_no,omitempty" require:"true"`
	// 投保人证件类型
	CertType *string `json:"cert_type,omitempty" xml:"cert_type,omitempty"`
	// 投保人的did
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 保单失效时间
	EffectEndTime *string `json:"effect_end_time,omitempty" xml:"effect_end_time,omitempty" require:"true"`
	// 保单生效时间
	EffectStartTime *string `json:"effect_start_time,omitempty" xml:"effect_start_time,omitempty" require:"true"`
	// 投保时间
	InsuredTime *string `json:"insured_time,omitempty" xml:"insured_time,omitempty" require:"true"`
	// 出单时间
	IssueTime *string `json:"issue_time,omitempty" xml:"issue_time,omitempty" require:"true"`
	// 投保人姓名
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 保单编号
	PolicyNo *string `json:"policy_no,omitempty" xml:"policy_no,omitempty" require:"true"`
	// 保单类型
	PolicyType *string `json:"policy_type,omitempty" xml:"policy_type,omitempty"`
	// 产品名称
	ProdName *string `json:"prod_name,omitempty" xml:"prod_name,omitempty" require:"true"`
	// 产品编号
	ProdNo *string `json:"prod_no,omitempty" xml:"prod_no,omitempty" require:"true"`
	// 行为回溯的整体编号
	UserTraceCode *string `json:"user_trace_code,omitempty" xml:"user_trace_code,omitempty" require:"true"`
}

func (s PushAuthInsurancePolicyRequest) String() string {
	return tea.Prettify(s)
}

func (s PushAuthInsurancePolicyRequest) GoString() string {
	return s.String()
}

func (s *PushAuthInsurancePolicyRequest) SetAuthToken(v string) *PushAuthInsurancePolicyRequest {
	s.AuthToken = &v
	return s
}

func (s *PushAuthInsurancePolicyRequest) SetProductInstanceId(v string) *PushAuthInsurancePolicyRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *PushAuthInsurancePolicyRequest) SetCertNo(v string) *PushAuthInsurancePolicyRequest {
	s.CertNo = &v
	return s
}

func (s *PushAuthInsurancePolicyRequest) SetCertType(v string) *PushAuthInsurancePolicyRequest {
	s.CertType = &v
	return s
}

func (s *PushAuthInsurancePolicyRequest) SetDid(v string) *PushAuthInsurancePolicyRequest {
	s.Did = &v
	return s
}

func (s *PushAuthInsurancePolicyRequest) SetEffectEndTime(v string) *PushAuthInsurancePolicyRequest {
	s.EffectEndTime = &v
	return s
}

func (s *PushAuthInsurancePolicyRequest) SetEffectStartTime(v string) *PushAuthInsurancePolicyRequest {
	s.EffectStartTime = &v
	return s
}

func (s *PushAuthInsurancePolicyRequest) SetInsuredTime(v string) *PushAuthInsurancePolicyRequest {
	s.InsuredTime = &v
	return s
}

func (s *PushAuthInsurancePolicyRequest) SetIssueTime(v string) *PushAuthInsurancePolicyRequest {
	s.IssueTime = &v
	return s
}

func (s *PushAuthInsurancePolicyRequest) SetName(v string) *PushAuthInsurancePolicyRequest {
	s.Name = &v
	return s
}

func (s *PushAuthInsurancePolicyRequest) SetPolicyNo(v string) *PushAuthInsurancePolicyRequest {
	s.PolicyNo = &v
	return s
}

func (s *PushAuthInsurancePolicyRequest) SetPolicyType(v string) *PushAuthInsurancePolicyRequest {
	s.PolicyType = &v
	return s
}

func (s *PushAuthInsurancePolicyRequest) SetProdName(v string) *PushAuthInsurancePolicyRequest {
	s.ProdName = &v
	return s
}

func (s *PushAuthInsurancePolicyRequest) SetProdNo(v string) *PushAuthInsurancePolicyRequest {
	s.ProdNo = &v
	return s
}

func (s *PushAuthInsurancePolicyRequest) SetUserTraceCode(v string) *PushAuthInsurancePolicyRequest {
	s.UserTraceCode = &v
	return s
}

type PushAuthInsurancePolicyResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 凭证id
	VcId *string `json:"vc_id,omitempty" xml:"vc_id,omitempty"`
	// 合并之后的录屏记录的id，recordingId
	RecordingId *string `json:"recording_id,omitempty" xml:"recording_id,omitempty"`
}

func (s PushAuthInsurancePolicyResponse) String() string {
	return tea.Prettify(s)
}

func (s PushAuthInsurancePolicyResponse) GoString() string {
	return s.String()
}

func (s *PushAuthInsurancePolicyResponse) SetReqMsgId(v string) *PushAuthInsurancePolicyResponse {
	s.ReqMsgId = &v
	return s
}

func (s *PushAuthInsurancePolicyResponse) SetResultCode(v string) *PushAuthInsurancePolicyResponse {
	s.ResultCode = &v
	return s
}

func (s *PushAuthInsurancePolicyResponse) SetResultMsg(v string) *PushAuthInsurancePolicyResponse {
	s.ResultMsg = &v
	return s
}

func (s *PushAuthInsurancePolicyResponse) SetVcId(v string) *PushAuthInsurancePolicyResponse {
	s.VcId = &v
	return s
}

func (s *PushAuthInsurancePolicyResponse) SetRecordingId(v string) *PushAuthInsurancePolicyResponse {
	s.RecordingId = &v
	return s
}

type GetAuthFrontendAccesstokenRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 业务类型
	BizType *string `json:"biz_type,omitempty" xml:"biz_type,omitempty" require:"true"`
	// 用户did
	UserDid *string `json:"user_did,omitempty" xml:"user_did,omitempty" require:"true"`
}

func (s GetAuthFrontendAccesstokenRequest) String() string {
	return tea.Prettify(s)
}

func (s GetAuthFrontendAccesstokenRequest) GoString() string {
	return s.String()
}

func (s *GetAuthFrontendAccesstokenRequest) SetAuthToken(v string) *GetAuthFrontendAccesstokenRequest {
	s.AuthToken = &v
	return s
}

func (s *GetAuthFrontendAccesstokenRequest) SetProductInstanceId(v string) *GetAuthFrontendAccesstokenRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *GetAuthFrontendAccesstokenRequest) SetBizType(v string) *GetAuthFrontendAccesstokenRequest {
	s.BizType = &v
	return s
}

func (s *GetAuthFrontendAccesstokenRequest) SetUserDid(v string) *GetAuthFrontendAccesstokenRequest {
	s.UserDid = &v
	return s
}

type GetAuthFrontendAccesstokenResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 访问令牌
	AccessToken *string `json:"access_token,omitempty" xml:"access_token,omitempty"`
	// 过期时间
	Expire *string `json:"expire,omitempty" xml:"expire,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// refresh_token
	RefreshToken *string `json:"refresh_token,omitempty" xml:"refresh_token,omitempty"`
	// 和xreplay交互时使用的令牌
	XreplayToken *string `json:"xreplay_token,omitempty" xml:"xreplay_token,omitempty"`
}

func (s GetAuthFrontendAccesstokenResponse) String() string {
	return tea.Prettify(s)
}

func (s GetAuthFrontendAccesstokenResponse) GoString() string {
	return s.String()
}

func (s *GetAuthFrontendAccesstokenResponse) SetReqMsgId(v string) *GetAuthFrontendAccesstokenResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetAuthFrontendAccesstokenResponse) SetResultCode(v string) *GetAuthFrontendAccesstokenResponse {
	s.ResultCode = &v
	return s
}

func (s *GetAuthFrontendAccesstokenResponse) SetResultMsg(v string) *GetAuthFrontendAccesstokenResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetAuthFrontendAccesstokenResponse) SetAccessToken(v string) *GetAuthFrontendAccesstokenResponse {
	s.AccessToken = &v
	return s
}

func (s *GetAuthFrontendAccesstokenResponse) SetExpire(v string) *GetAuthFrontendAccesstokenResponse {
	s.Expire = &v
	return s
}

func (s *GetAuthFrontendAccesstokenResponse) SetRefreshToken(v string) *GetAuthFrontendAccesstokenResponse {
	s.RefreshToken = &v
	return s
}

func (s *GetAuthFrontendAccesstokenResponse) SetXreplayToken(v string) *GetAuthFrontendAccesstokenResponse {
	s.XreplayToken = &v
	return s
}

type CreateAuthClaimUrlRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 业务类型
	BizType *string `json:"biz_type,omitempty" xml:"biz_type,omitempty" require:"true"`
	// 授权声明内容
	ClaimValue *string `json:"claim_value,omitempty" xml:"claim_value,omitempty" require:"true"`
	// 被授权企业did
	CorpDid *string `json:"corp_did,omitempty" xml:"corp_did,omitempty" require:"true"`
	// 过期时间选项
	ExpireOptions []*ValueUnitPair `json:"expire_options,omitempty" xml:"expire_options,omitempty" require:"true" type:"Repeated"`
	// 授权是否可撤销
	Revocable *bool `json:"revocable,omitempty" xml:"revocable,omitempty" require:"true"`
}

func (s CreateAuthClaimUrlRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateAuthClaimUrlRequest) GoString() string {
	return s.String()
}

func (s *CreateAuthClaimUrlRequest) SetAuthToken(v string) *CreateAuthClaimUrlRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateAuthClaimUrlRequest) SetProductInstanceId(v string) *CreateAuthClaimUrlRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateAuthClaimUrlRequest) SetBizType(v string) *CreateAuthClaimUrlRequest {
	s.BizType = &v
	return s
}

func (s *CreateAuthClaimUrlRequest) SetClaimValue(v string) *CreateAuthClaimUrlRequest {
	s.ClaimValue = &v
	return s
}

func (s *CreateAuthClaimUrlRequest) SetCorpDid(v string) *CreateAuthClaimUrlRequest {
	s.CorpDid = &v
	return s
}

func (s *CreateAuthClaimUrlRequest) SetExpireOptions(v []*ValueUnitPair) *CreateAuthClaimUrlRequest {
	s.ExpireOptions = v
	return s
}

func (s *CreateAuthClaimUrlRequest) SetRevocable(v bool) *CreateAuthClaimUrlRequest {
	s.Revocable = &v
	return s
}

type CreateAuthClaimUrlResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 待认证的业务id
	BizId *string `json:"biz_id,omitempty" xml:"biz_id,omitempty"`
	// 授权模版跳转url
	ClaimUrl *string `json:"claim_url,omitempty" xml:"claim_url,omitempty"`
}

func (s CreateAuthClaimUrlResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateAuthClaimUrlResponse) GoString() string {
	return s.String()
}

func (s *CreateAuthClaimUrlResponse) SetReqMsgId(v string) *CreateAuthClaimUrlResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateAuthClaimUrlResponse) SetResultCode(v string) *CreateAuthClaimUrlResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateAuthClaimUrlResponse) SetResultMsg(v string) *CreateAuthClaimUrlResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateAuthClaimUrlResponse) SetBizId(v string) *CreateAuthClaimUrlResponse {
	s.BizId = &v
	return s
}

func (s *CreateAuthClaimUrlResponse) SetClaimUrl(v string) *CreateAuthClaimUrlResponse {
	s.ClaimUrl = &v
	return s
}

type StartAuthVerifyCarinfoRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 长度不超过64字符的业务唯一ID，用于对一个业务流的追踪，查询等。
	BizId *string `json:"biz_id,omitempty" xml:"biz_id,omitempty" require:"true"`
	// 业务类型，通常需要与授权宝服务沟通确定，业务类型可能影响此接口内部实现逻辑，长度不超过32字符。
	BizType *string `json:"biz_type,omitempty" xml:"biz_type,omitempty" require:"true"`
	// 加密前身份证号最后一位为字母 X 时，请使用大写 X，SHA256 加密字符串(小写)，身份证需 18
	// 岁以上。
	CertNo *string `json:"cert_no,omitempty" xml:"cert_no,omitempty" require:"true"`
	// 保留字段，待扩展使用的JSON字符串内容
	Extension *string `json:"extension,omitempty" xml:"extension,omitempty"`
	// 车牌号加密前车牌字母均为大写，SHA256 的加密后字符串(小写字母)
	LicenseNo *string `json:"license_no,omitempty" xml:"license_no,omitempty" require:"true"`
	// 目标用户姓名的SHA256计算结果(小写字母)
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 姓名和身份证号拼接之后，SHA256加密的结果(小写字母)，身份证最后一位为字母 X 时， 请使用大写 X，加密后 SHA256 的 字符串(小写)， 身份证需 18 岁以上。
	TwoMeta *string `json:"two_meta,omitempty" xml:"two_meta,omitempty" require:"true"`
}

func (s StartAuthVerifyCarinfoRequest) String() string {
	return tea.Prettify(s)
}

func (s StartAuthVerifyCarinfoRequest) GoString() string {
	return s.String()
}

func (s *StartAuthVerifyCarinfoRequest) SetAuthToken(v string) *StartAuthVerifyCarinfoRequest {
	s.AuthToken = &v
	return s
}

func (s *StartAuthVerifyCarinfoRequest) SetProductInstanceId(v string) *StartAuthVerifyCarinfoRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *StartAuthVerifyCarinfoRequest) SetBizId(v string) *StartAuthVerifyCarinfoRequest {
	s.BizId = &v
	return s
}

func (s *StartAuthVerifyCarinfoRequest) SetBizType(v string) *StartAuthVerifyCarinfoRequest {
	s.BizType = &v
	return s
}

func (s *StartAuthVerifyCarinfoRequest) SetCertNo(v string) *StartAuthVerifyCarinfoRequest {
	s.CertNo = &v
	return s
}

func (s *StartAuthVerifyCarinfoRequest) SetExtension(v string) *StartAuthVerifyCarinfoRequest {
	s.Extension = &v
	return s
}

func (s *StartAuthVerifyCarinfoRequest) SetLicenseNo(v string) *StartAuthVerifyCarinfoRequest {
	s.LicenseNo = &v
	return s
}

func (s *StartAuthVerifyCarinfoRequest) SetName(v string) *StartAuthVerifyCarinfoRequest {
	s.Name = &v
	return s
}

func (s *StartAuthVerifyCarinfoRequest) SetTwoMeta(v string) *StartAuthVerifyCarinfoRequest {
	s.TwoMeta = &v
	return s
}

type StartAuthVerifyCarinfoResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 业务流水号，输入参数的bizId返回。
	BizId *string `json:"biz_id,omitempty" xml:"biz_id,omitempty"`
	// 来自入参，具体看业务场景。
	BizType *string `json:"biz_type,omitempty" xml:"biz_type,omitempty"`
	// 目标用户创建的did结果，如果为空则表明未创建。
	Did *string `json:"did,omitempty" xml:"did,omitempty"`
	// 查询结果
	// 1 一致(收费)
	// 2 姓名不一致(收费)
	// 3 身份证未命中(收费)
	// 4 车牌号不一致(收费)
	// 0 无意义(responsecode 不为 100 时 出现)
	ResultStatus *int64 `json:"result_status,omitempty" xml:"result_status,omitempty"`
	// 查询结果数据，result_status 不等于 1 时为null，结果是一个JSON字符串，具体结果内容解释，需要参考文档说明。
	ResultData *string `json:"result_data,omitempty" xml:"result_data,omitempty"`
}

func (s StartAuthVerifyCarinfoResponse) String() string {
	return tea.Prettify(s)
}

func (s StartAuthVerifyCarinfoResponse) GoString() string {
	return s.String()
}

func (s *StartAuthVerifyCarinfoResponse) SetReqMsgId(v string) *StartAuthVerifyCarinfoResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartAuthVerifyCarinfoResponse) SetResultCode(v string) *StartAuthVerifyCarinfoResponse {
	s.ResultCode = &v
	return s
}

func (s *StartAuthVerifyCarinfoResponse) SetResultMsg(v string) *StartAuthVerifyCarinfoResponse {
	s.ResultMsg = &v
	return s
}

func (s *StartAuthVerifyCarinfoResponse) SetBizId(v string) *StartAuthVerifyCarinfoResponse {
	s.BizId = &v
	return s
}

func (s *StartAuthVerifyCarinfoResponse) SetBizType(v string) *StartAuthVerifyCarinfoResponse {
	s.BizType = &v
	return s
}

func (s *StartAuthVerifyCarinfoResponse) SetDid(v string) *StartAuthVerifyCarinfoResponse {
	s.Did = &v
	return s
}

func (s *StartAuthVerifyCarinfoResponse) SetResultStatus(v int64) *StartAuthVerifyCarinfoResponse {
	s.ResultStatus = &v
	return s
}

func (s *StartAuthVerifyCarinfoResponse) SetResultData(v string) *StartAuthVerifyCarinfoResponse {
	s.ResultData = &v
	return s
}

type StartAuthVerifyDriverinfoRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 业务流水号，长度不超过64字符的业务唯一ID，用于对一个业务流的追踪，查询等。
	BizId *string `json:"biz_id,omitempty" xml:"biz_id,omitempty" require:"true"`
	// 业务类型，通常需要与授权宝服务沟通确定，业务类型可能影响此接口内部实现逻辑，长度不超过32字符。
	BizType *string `json:"biz_type,omitempty" xml:"biz_type,omitempty" require:"true"`
	// 加密前身份证号最后一位为字母 X 时，请使用大写 X，SHA256 加密字符串(小写)，身份证需 18 岁以上。
	CertNo *string `json:"cert_no,omitempty" xml:"cert_no,omitempty" require:"true"`
	// 保留字段，待扩展使用的JSON字符串内容
	Extension *string `json:"extension,omitempty" xml:"extension,omitempty"`
	// 目标用户姓名的SHA256计算结果(小写字母)。
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 姓名和身份证号拼接之后，SHA256加密的结果(小写字母)，身份证最后一位为字母 X 时， 请使用大写 X，加密后 SHA256 的 字符串(小写)， 身份证需 18 岁以上。
	TwoMeta *string `json:"two_meta,omitempty" xml:"two_meta,omitempty" require:"true"`
}

func (s StartAuthVerifyDriverinfoRequest) String() string {
	return tea.Prettify(s)
}

func (s StartAuthVerifyDriverinfoRequest) GoString() string {
	return s.String()
}

func (s *StartAuthVerifyDriverinfoRequest) SetAuthToken(v string) *StartAuthVerifyDriverinfoRequest {
	s.AuthToken = &v
	return s
}

func (s *StartAuthVerifyDriverinfoRequest) SetProductInstanceId(v string) *StartAuthVerifyDriverinfoRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *StartAuthVerifyDriverinfoRequest) SetBizId(v string) *StartAuthVerifyDriverinfoRequest {
	s.BizId = &v
	return s
}

func (s *StartAuthVerifyDriverinfoRequest) SetBizType(v string) *StartAuthVerifyDriverinfoRequest {
	s.BizType = &v
	return s
}

func (s *StartAuthVerifyDriverinfoRequest) SetCertNo(v string) *StartAuthVerifyDriverinfoRequest {
	s.CertNo = &v
	return s
}

func (s *StartAuthVerifyDriverinfoRequest) SetExtension(v string) *StartAuthVerifyDriverinfoRequest {
	s.Extension = &v
	return s
}

func (s *StartAuthVerifyDriverinfoRequest) SetName(v string) *StartAuthVerifyDriverinfoRequest {
	s.Name = &v
	return s
}

func (s *StartAuthVerifyDriverinfoRequest) SetTwoMeta(v string) *StartAuthVerifyDriverinfoRequest {
	s.TwoMeta = &v
	return s
}

type StartAuthVerifyDriverinfoResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 业务流水号，输入参数的bizId返回。
	BizId *string `json:"biz_id,omitempty" xml:"biz_id,omitempty"`
	// 来自入参，具体看业务场景。
	BizType *string `json:"biz_type,omitempty" xml:"biz_type,omitempty"`
	// 目标用户创建的did结果，如果为空则表明未创建。
	Did *string `json:"did,omitempty" xml:"did,omitempty"`
	// 查询结果：
	// 1 一致(收费)
	// 2 姓名不一致(收费)
	// 3 身份证未命中(收费)
	// 4 车牌号不一致(收费)
	// 0 无意义
	ResultStatus *int64 `json:"result_status,omitempty" xml:"result_status,omitempty"`
	// 查询结果数据，result_status 不等于 1 时为null，结果是一个JSON字符串，具体结果内容解释，需要参考文档说明。
	ResultData *string `json:"result_data,omitempty" xml:"result_data,omitempty"`
}

func (s StartAuthVerifyDriverinfoResponse) String() string {
	return tea.Prettify(s)
}

func (s StartAuthVerifyDriverinfoResponse) GoString() string {
	return s.String()
}

func (s *StartAuthVerifyDriverinfoResponse) SetReqMsgId(v string) *StartAuthVerifyDriverinfoResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartAuthVerifyDriverinfoResponse) SetResultCode(v string) *StartAuthVerifyDriverinfoResponse {
	s.ResultCode = &v
	return s
}

func (s *StartAuthVerifyDriverinfoResponse) SetResultMsg(v string) *StartAuthVerifyDriverinfoResponse {
	s.ResultMsg = &v
	return s
}

func (s *StartAuthVerifyDriverinfoResponse) SetBizId(v string) *StartAuthVerifyDriverinfoResponse {
	s.BizId = &v
	return s
}

func (s *StartAuthVerifyDriverinfoResponse) SetBizType(v string) *StartAuthVerifyDriverinfoResponse {
	s.BizType = &v
	return s
}

func (s *StartAuthVerifyDriverinfoResponse) SetDid(v string) *StartAuthVerifyDriverinfoResponse {
	s.Did = &v
	return s
}

func (s *StartAuthVerifyDriverinfoResponse) SetResultStatus(v int64) *StartAuthVerifyDriverinfoResponse {
	s.ResultStatus = &v
	return s
}

func (s *StartAuthVerifyDriverinfoResponse) SetResultData(v string) *StartAuthVerifyDriverinfoResponse {
	s.ResultData = &v
	return s
}

type StartAuthVerifyCarinspectRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 长度不超过64字符的业务唯一ID，用于对一个业务流的追踪，查询等。
	BizId *string `json:"biz_id,omitempty" xml:"biz_id,omitempty" require:"true"`
	// 业务类型，通常需要与授权宝服务沟通确定，业务类型可能影响此接口内部实现逻辑，长度不超过32字符。
	BizType *string `json:"biz_type,omitempty" xml:"biz_type,omitempty" require:"true"`
	// 车牌号，内容大写，不带空格。
	PlateNo *string `json:"plate_no,omitempty" xml:"plate_no,omitempty" require:"true"`
	// 非必填参数，号牌种类说明，比如"01"代表大型汽车，具体类型入参说明参考文档枚举。
	PlateType *string `json:"plate_type,omitempty" xml:"plate_type,omitempty"`
}

func (s StartAuthVerifyCarinspectRequest) String() string {
	return tea.Prettify(s)
}

func (s StartAuthVerifyCarinspectRequest) GoString() string {
	return s.String()
}

func (s *StartAuthVerifyCarinspectRequest) SetAuthToken(v string) *StartAuthVerifyCarinspectRequest {
	s.AuthToken = &v
	return s
}

func (s *StartAuthVerifyCarinspectRequest) SetProductInstanceId(v string) *StartAuthVerifyCarinspectRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *StartAuthVerifyCarinspectRequest) SetBizId(v string) *StartAuthVerifyCarinspectRequest {
	s.BizId = &v
	return s
}

func (s *StartAuthVerifyCarinspectRequest) SetBizType(v string) *StartAuthVerifyCarinspectRequest {
	s.BizType = &v
	return s
}

func (s *StartAuthVerifyCarinspectRequest) SetPlateNo(v string) *StartAuthVerifyCarinspectRequest {
	s.PlateNo = &v
	return s
}

func (s *StartAuthVerifyCarinspectRequest) SetPlateType(v string) *StartAuthVerifyCarinspectRequest {
	s.PlateType = &v
	return s
}

type StartAuthVerifyCarinspectResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 年检有效期止。
	InspectionDate *string `json:"inspection_date,omitempty" xml:"inspection_date,omitempty"`
	//  0：正常   1：逾期未检验  2：无法判断
	Status *int64 `json:"status,omitempty" xml:"status,omitempty"`
}

func (s StartAuthVerifyCarinspectResponse) String() string {
	return tea.Prettify(s)
}

func (s StartAuthVerifyCarinspectResponse) GoString() string {
	return s.String()
}

func (s *StartAuthVerifyCarinspectResponse) SetReqMsgId(v string) *StartAuthVerifyCarinspectResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartAuthVerifyCarinspectResponse) SetResultCode(v string) *StartAuthVerifyCarinspectResponse {
	s.ResultCode = &v
	return s
}

func (s *StartAuthVerifyCarinspectResponse) SetResultMsg(v string) *StartAuthVerifyCarinspectResponse {
	s.ResultMsg = &v
	return s
}

func (s *StartAuthVerifyCarinspectResponse) SetInspectionDate(v string) *StartAuthVerifyCarinspectResponse {
	s.InspectionDate = &v
	return s
}

func (s *StartAuthVerifyCarinspectResponse) SetStatus(v int64) *StartAuthVerifyCarinspectResponse {
	s.Status = &v
	return s
}

type GetAuthClaimTemplateRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 业务类型
	BizType *string `json:"biz_type,omitempty" xml:"biz_type,omitempty" require:"true"`
}

func (s GetAuthClaimTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s GetAuthClaimTemplateRequest) GoString() string {
	return s.String()
}

func (s *GetAuthClaimTemplateRequest) SetAuthToken(v string) *GetAuthClaimTemplateRequest {
	s.AuthToken = &v
	return s
}

func (s *GetAuthClaimTemplateRequest) SetProductInstanceId(v string) *GetAuthClaimTemplateRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *GetAuthClaimTemplateRequest) SetBizType(v string) *GetAuthClaimTemplateRequest {
	s.BizType = &v
	return s
}

type GetAuthClaimTemplateResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 授权声明模版
	ClaimTemplate *string `json:"claim_template,omitempty" xml:"claim_template,omitempty"`
}

func (s GetAuthClaimTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s GetAuthClaimTemplateResponse) GoString() string {
	return s.String()
}

func (s *GetAuthClaimTemplateResponse) SetReqMsgId(v string) *GetAuthClaimTemplateResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetAuthClaimTemplateResponse) SetResultCode(v string) *GetAuthClaimTemplateResponse {
	s.ResultCode = &v
	return s
}

func (s *GetAuthClaimTemplateResponse) SetResultMsg(v string) *GetAuthClaimTemplateResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetAuthClaimTemplateResponse) SetClaimTemplate(v string) *GetAuthClaimTemplateResponse {
	s.ClaimTemplate = &v
	return s
}

type CreateAuthClaimVcRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 业务类型
	BizType *string `json:"biz_type,omitempty" xml:"biz_type,omitempty" require:"true"`
	// 业务id
	BizId *string `json:"biz_id,omitempty" xml:"biz_id,omitempty" require:"true"`
	// 被授权者did
	SubjectDid *string `json:"subject_did,omitempty" xml:"subject_did,omitempty" require:"true"`
	// 授权内容
	Content *string `json:"content,omitempty" xml:"content,omitempty" require:"true"`
	// 授权发起者did
	IssuerDid *string `json:"issuer_did,omitempty" xml:"issuer_did,omitempty" require:"true"`
	// 过期时间，长期为-1, 单位为毫秒
	Expire *int64 `json:"expire,omitempty" xml:"expire,omitempty" require:"true"`
	// 授权是否可撤销
	Revocable *bool `json:"revocable,omitempty" xml:"revocable,omitempty" require:"true"`
}

func (s CreateAuthClaimVcRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateAuthClaimVcRequest) GoString() string {
	return s.String()
}

func (s *CreateAuthClaimVcRequest) SetAuthToken(v string) *CreateAuthClaimVcRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateAuthClaimVcRequest) SetProductInstanceId(v string) *CreateAuthClaimVcRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateAuthClaimVcRequest) SetBizType(v string) *CreateAuthClaimVcRequest {
	s.BizType = &v
	return s
}

func (s *CreateAuthClaimVcRequest) SetBizId(v string) *CreateAuthClaimVcRequest {
	s.BizId = &v
	return s
}

func (s *CreateAuthClaimVcRequest) SetSubjectDid(v string) *CreateAuthClaimVcRequest {
	s.SubjectDid = &v
	return s
}

func (s *CreateAuthClaimVcRequest) SetContent(v string) *CreateAuthClaimVcRequest {
	s.Content = &v
	return s
}

func (s *CreateAuthClaimVcRequest) SetIssuerDid(v string) *CreateAuthClaimVcRequest {
	s.IssuerDid = &v
	return s
}

func (s *CreateAuthClaimVcRequest) SetExpire(v int64) *CreateAuthClaimVcRequest {
	s.Expire = &v
	return s
}

func (s *CreateAuthClaimVcRequest) SetRevocable(v bool) *CreateAuthClaimVcRequest {
	s.Revocable = &v
	return s
}

type CreateAuthClaimVcResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 业务id
	BizId *string `json:"biz_id,omitempty" xml:"biz_id,omitempty"`
	// 可验证声明id
	VcId *string `json:"vc_id,omitempty" xml:"vc_id,omitempty"`
}

func (s CreateAuthClaimVcResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateAuthClaimVcResponse) GoString() string {
	return s.String()
}

func (s *CreateAuthClaimVcResponse) SetReqMsgId(v string) *CreateAuthClaimVcResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateAuthClaimVcResponse) SetResultCode(v string) *CreateAuthClaimVcResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateAuthClaimVcResponse) SetResultMsg(v string) *CreateAuthClaimVcResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateAuthClaimVcResponse) SetBizId(v string) *CreateAuthClaimVcResponse {
	s.BizId = &v
	return s
}

func (s *CreateAuthClaimVcResponse) SetVcId(v string) *CreateAuthClaimVcResponse {
	s.VcId = &v
	return s
}

type QueryAuthClaimVcRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 可验证声明id
	VcId *string `json:"vc_id,omitempty" xml:"vc_id,omitempty" require:"true"`
	// 业务类型
	BizType *string `json:"biz_type,omitempty" xml:"biz_type,omitempty" require:"true"`
}

func (s QueryAuthClaimVcRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryAuthClaimVcRequest) GoString() string {
	return s.String()
}

func (s *QueryAuthClaimVcRequest) SetAuthToken(v string) *QueryAuthClaimVcRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryAuthClaimVcRequest) SetProductInstanceId(v string) *QueryAuthClaimVcRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryAuthClaimVcRequest) SetVcId(v string) *QueryAuthClaimVcRequest {
	s.VcId = &v
	return s
}

func (s *QueryAuthClaimVcRequest) SetBizType(v string) *QueryAuthClaimVcRequest {
	s.BizType = &v
	return s
}

type QueryAuthClaimVcResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 可验证声明id
	VcId *string `json:"vc_id,omitempty" xml:"vc_id,omitempty"`
	// vc详情
	VcContent *string `json:"vc_content,omitempty" xml:"vc_content,omitempty"`
	// vc状态
	// 0:未授权
	// 1:已授权
	// 2: 拒绝授权
	// 3: 授权已撤销
	Status *int64 `json:"status,omitempty" xml:"status,omitempty"`
	// 业务类型
	BizType *string `json:"biz_type,omitempty" xml:"biz_type,omitempty"`
	// 授权是否可撤销
	Revocable *bool `json:"revocable,omitempty" xml:"revocable,omitempty"`
	// 过期时间
	Expire *int64 `json:"expire,omitempty" xml:"expire,omitempty"`
}

func (s QueryAuthClaimVcResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryAuthClaimVcResponse) GoString() string {
	return s.String()
}

func (s *QueryAuthClaimVcResponse) SetReqMsgId(v string) *QueryAuthClaimVcResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryAuthClaimVcResponse) SetResultCode(v string) *QueryAuthClaimVcResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryAuthClaimVcResponse) SetResultMsg(v string) *QueryAuthClaimVcResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryAuthClaimVcResponse) SetVcId(v string) *QueryAuthClaimVcResponse {
	s.VcId = &v
	return s
}

func (s *QueryAuthClaimVcResponse) SetVcContent(v string) *QueryAuthClaimVcResponse {
	s.VcContent = &v
	return s
}

func (s *QueryAuthClaimVcResponse) SetStatus(v int64) *QueryAuthClaimVcResponse {
	s.Status = &v
	return s
}

func (s *QueryAuthClaimVcResponse) SetBizType(v string) *QueryAuthClaimVcResponse {
	s.BizType = &v
	return s
}

func (s *QueryAuthClaimVcResponse) SetRevocable(v bool) *QueryAuthClaimVcResponse {
	s.Revocable = &v
	return s
}

func (s *QueryAuthClaimVcResponse) SetExpire(v int64) *QueryAuthClaimVcResponse {
	s.Expire = &v
	return s
}

type QueryAuthVehicleinsuranceRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 车牌号
	VehicleNo *string `json:"vehicle_no,omitempty" xml:"vehicle_no,omitempty" require:"true"`
	// 车型代码. 可选, 02 普通小客车(默认); 52 新能源小客车
	VehicleType *string `json:"vehicle_type,omitempty" xml:"vehicle_type,omitempty"`
	// 车辆识别码
	Vin *string `json:"vin,omitempty" xml:"vin,omitempty" require:"true"`
	// 车主认证信息
	OwnerMetaInfo *UserMetaInfo `json:"owner_meta_info,omitempty" xml:"owner_meta_info,omitempty" require:"true"`
	// 业务类型
	BizType *string `json:"biz_type,omitempty" xml:"biz_type,omitempty" require:"true"`
	// 业务id
	BizId *string `json:"biz_id,omitempty" xml:"biz_id,omitempty" require:"true"`
}

func (s QueryAuthVehicleinsuranceRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryAuthVehicleinsuranceRequest) GoString() string {
	return s.String()
}

func (s *QueryAuthVehicleinsuranceRequest) SetAuthToken(v string) *QueryAuthVehicleinsuranceRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryAuthVehicleinsuranceRequest) SetProductInstanceId(v string) *QueryAuthVehicleinsuranceRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryAuthVehicleinsuranceRequest) SetVehicleNo(v string) *QueryAuthVehicleinsuranceRequest {
	s.VehicleNo = &v
	return s
}

func (s *QueryAuthVehicleinsuranceRequest) SetVehicleType(v string) *QueryAuthVehicleinsuranceRequest {
	s.VehicleType = &v
	return s
}

func (s *QueryAuthVehicleinsuranceRequest) SetVin(v string) *QueryAuthVehicleinsuranceRequest {
	s.Vin = &v
	return s
}

func (s *QueryAuthVehicleinsuranceRequest) SetOwnerMetaInfo(v *UserMetaInfo) *QueryAuthVehicleinsuranceRequest {
	s.OwnerMetaInfo = v
	return s
}

func (s *QueryAuthVehicleinsuranceRequest) SetBizType(v string) *QueryAuthVehicleinsuranceRequest {
	s.BizType = &v
	return s
}

func (s *QueryAuthVehicleinsuranceRequest) SetBizId(v string) *QueryAuthVehicleinsuranceRequest {
	s.BizId = &v
	return s
}

type QueryAuthVehicleinsuranceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 上次交强险投保年月
	LastInsuranceDate *string `json:"last_insurance_date,omitempty" xml:"last_insurance_date,omitempty"`
	// 初次投保日期
	FirstInsuranceDate *string `json:"first_insurance_date,omitempty" xml:"first_insurance_date,omitempty"`
	// 最近交强险投保期止
	LatestInsuranceDate *string `json:"latest_insurance_date,omitempty" xml:"latest_insurance_date,omitempty"`
	// 车辆did
	VehicleDid *string `json:"vehicle_did,omitempty" xml:"vehicle_did,omitempty"`
	// 车主did
	OwnerUserDid *string `json:"owner_user_did,omitempty" xml:"owner_user_did,omitempty"`
	// 服务提供方代码
	IspType *int64 `json:"isp_type,omitempty" xml:"isp_type,omitempty"`
}

func (s QueryAuthVehicleinsuranceResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryAuthVehicleinsuranceResponse) GoString() string {
	return s.String()
}

func (s *QueryAuthVehicleinsuranceResponse) SetReqMsgId(v string) *QueryAuthVehicleinsuranceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryAuthVehicleinsuranceResponse) SetResultCode(v string) *QueryAuthVehicleinsuranceResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryAuthVehicleinsuranceResponse) SetResultMsg(v string) *QueryAuthVehicleinsuranceResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryAuthVehicleinsuranceResponse) SetLastInsuranceDate(v string) *QueryAuthVehicleinsuranceResponse {
	s.LastInsuranceDate = &v
	return s
}

func (s *QueryAuthVehicleinsuranceResponse) SetFirstInsuranceDate(v string) *QueryAuthVehicleinsuranceResponse {
	s.FirstInsuranceDate = &v
	return s
}

func (s *QueryAuthVehicleinsuranceResponse) SetLatestInsuranceDate(v string) *QueryAuthVehicleinsuranceResponse {
	s.LatestInsuranceDate = &v
	return s
}

func (s *QueryAuthVehicleinsuranceResponse) SetVehicleDid(v string) *QueryAuthVehicleinsuranceResponse {
	s.VehicleDid = &v
	return s
}

func (s *QueryAuthVehicleinsuranceResponse) SetOwnerUserDid(v string) *QueryAuthVehicleinsuranceResponse {
	s.OwnerUserDid = &v
	return s
}

func (s *QueryAuthVehicleinsuranceResponse) SetIspType(v int64) *QueryAuthVehicleinsuranceResponse {
	s.IspType = &v
	return s
}

type QueryAuthVehicleinsuranceVcRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 车牌号
	VehicleNo *string `json:"vehicle_no,omitempty" xml:"vehicle_no,omitempty" require:"true"`
	// 车型代码. 可选, 02 普通小客车(默认); 52 新能源小客车
	VehicleType *string `json:"vehicle_type,omitempty" xml:"vehicle_type,omitempty"`
	// 车辆识别码
	Vin *string `json:"vin,omitempty" xml:"vin,omitempty" require:"true"`
	// 车主认证信息
	OwnerMetaInfo *UserMetaInfo `json:"owner_meta_info,omitempty" xml:"owner_meta_info,omitempty" require:"true"`
	// 业务类型
	BizType *string `json:"biz_type,omitempty" xml:"biz_type,omitempty" require:"true"`
	// 业务id
	BizId *string `json:"biz_id,omitempty" xml:"biz_id,omitempty" require:"true"`
}

func (s QueryAuthVehicleinsuranceVcRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryAuthVehicleinsuranceVcRequest) GoString() string {
	return s.String()
}

func (s *QueryAuthVehicleinsuranceVcRequest) SetAuthToken(v string) *QueryAuthVehicleinsuranceVcRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryAuthVehicleinsuranceVcRequest) SetProductInstanceId(v string) *QueryAuthVehicleinsuranceVcRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryAuthVehicleinsuranceVcRequest) SetVehicleNo(v string) *QueryAuthVehicleinsuranceVcRequest {
	s.VehicleNo = &v
	return s
}

func (s *QueryAuthVehicleinsuranceVcRequest) SetVehicleType(v string) *QueryAuthVehicleinsuranceVcRequest {
	s.VehicleType = &v
	return s
}

func (s *QueryAuthVehicleinsuranceVcRequest) SetVin(v string) *QueryAuthVehicleinsuranceVcRequest {
	s.Vin = &v
	return s
}

func (s *QueryAuthVehicleinsuranceVcRequest) SetOwnerMetaInfo(v *UserMetaInfo) *QueryAuthVehicleinsuranceVcRequest {
	s.OwnerMetaInfo = v
	return s
}

func (s *QueryAuthVehicleinsuranceVcRequest) SetBizType(v string) *QueryAuthVehicleinsuranceVcRequest {
	s.BizType = &v
	return s
}

func (s *QueryAuthVehicleinsuranceVcRequest) SetBizId(v string) *QueryAuthVehicleinsuranceVcRequest {
	s.BizId = &v
	return s
}

type QueryAuthVehicleinsuranceVcResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 上次交强险投保年月
	LastInsuranceDate *string `json:"last_insurance_date,omitempty" xml:"last_insurance_date,omitempty"`
	// 初次投保日期
	FirstInsuranceDate *string `json:"first_insurance_date,omitempty" xml:"first_insurance_date,omitempty"`
	// 最近交强险投保期止
	LatestInsuranceDate *string `json:"latest_insurance_date,omitempty" xml:"latest_insurance_date,omitempty"`
	// 车辆did
	VehicleDid *string `json:"vehicle_did,omitempty" xml:"vehicle_did,omitempty"`
	// 车主did
	OwnerUserDid *string `json:"owner_user_did,omitempty" xml:"owner_user_did,omitempty"`
	// 可验证声明id
	VcId *string `json:"vc_id,omitempty" xml:"vc_id,omitempty"`
	// 业务提供方代码
	IspType *int64 `json:"isp_type,omitempty" xml:"isp_type,omitempty"`
}

func (s QueryAuthVehicleinsuranceVcResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryAuthVehicleinsuranceVcResponse) GoString() string {
	return s.String()
}

func (s *QueryAuthVehicleinsuranceVcResponse) SetReqMsgId(v string) *QueryAuthVehicleinsuranceVcResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryAuthVehicleinsuranceVcResponse) SetResultCode(v string) *QueryAuthVehicleinsuranceVcResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryAuthVehicleinsuranceVcResponse) SetResultMsg(v string) *QueryAuthVehicleinsuranceVcResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryAuthVehicleinsuranceVcResponse) SetLastInsuranceDate(v string) *QueryAuthVehicleinsuranceVcResponse {
	s.LastInsuranceDate = &v
	return s
}

func (s *QueryAuthVehicleinsuranceVcResponse) SetFirstInsuranceDate(v string) *QueryAuthVehicleinsuranceVcResponse {
	s.FirstInsuranceDate = &v
	return s
}

func (s *QueryAuthVehicleinsuranceVcResponse) SetLatestInsuranceDate(v string) *QueryAuthVehicleinsuranceVcResponse {
	s.LatestInsuranceDate = &v
	return s
}

func (s *QueryAuthVehicleinsuranceVcResponse) SetVehicleDid(v string) *QueryAuthVehicleinsuranceVcResponse {
	s.VehicleDid = &v
	return s
}

func (s *QueryAuthVehicleinsuranceVcResponse) SetOwnerUserDid(v string) *QueryAuthVehicleinsuranceVcResponse {
	s.OwnerUserDid = &v
	return s
}

func (s *QueryAuthVehicleinsuranceVcResponse) SetVcId(v string) *QueryAuthVehicleinsuranceVcResponse {
	s.VcId = &v
	return s
}

func (s *QueryAuthVehicleinsuranceVcResponse) SetIspType(v int64) *QueryAuthVehicleinsuranceVcResponse {
	s.IspType = &v
	return s
}

type QueryAuthVcStatisticsRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 业务场景码，通常特定的业务场景需要与授权宝约定使用
	BizType *string `json:"biz_type,omitempty" xml:"biz_type,omitempty" require:"true"`
	// 返回分布数据以day为单位的数量，当前此参数保留，只返回7day的分布，后续启用此参数。
	Size *string `json:"size,omitempty" xml:"size,omitempty"`
}

func (s QueryAuthVcStatisticsRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryAuthVcStatisticsRequest) GoString() string {
	return s.String()
}

func (s *QueryAuthVcStatisticsRequest) SetAuthToken(v string) *QueryAuthVcStatisticsRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryAuthVcStatisticsRequest) SetProductInstanceId(v string) *QueryAuthVcStatisticsRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryAuthVcStatisticsRequest) SetBizType(v string) *QueryAuthVcStatisticsRequest {
	s.BizType = &v
	return s
}

func (s *QueryAuthVcStatisticsRequest) SetSize(v string) *QueryAuthVcStatisticsRequest {
	s.Size = &v
	return s
}

type QueryAuthVcStatisticsResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 业务场景值，与入参相同
	BizType *string `json:"biz_type,omitempty" xml:"biz_type,omitempty"`
	// 指定业务场景的数据量，在核酸检测场景，就是整体核酸检测数据的数量
	Total *int64 `json:"total,omitempty" xml:"total,omitempty"`
	// 分布曲线描绘的一个点，day为单位的分布数据汇总情况。
	List []*Curve `json:"list,omitempty" xml:"list,omitempty" type:"Repeated"`
}

func (s QueryAuthVcStatisticsResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryAuthVcStatisticsResponse) GoString() string {
	return s.String()
}

func (s *QueryAuthVcStatisticsResponse) SetReqMsgId(v string) *QueryAuthVcStatisticsResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryAuthVcStatisticsResponse) SetResultCode(v string) *QueryAuthVcStatisticsResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryAuthVcStatisticsResponse) SetResultMsg(v string) *QueryAuthVcStatisticsResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryAuthVcStatisticsResponse) SetBizType(v string) *QueryAuthVcStatisticsResponse {
	s.BizType = &v
	return s
}

func (s *QueryAuthVcStatisticsResponse) SetTotal(v int64) *QueryAuthVcStatisticsResponse {
	s.Total = &v
	return s
}

func (s *QueryAuthVcStatisticsResponse) SetList(v []*Curve) *QueryAuthVcStatisticsResponse {
	s.List = v
	return s
}

type QueryAuthVcRealtimeRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 查询目标业务的实时凭证颁发情况
	BizType *string `json:"biz_type,omitempty" xml:"biz_type,omitempty" require:"true"`
	// 最新实时颁发的凭证查看数目，可以不设定，默认返回10个结果，如果整体结果少于10，则按情况返回。
	Size *int64 `json:"size,omitempty" xml:"size,omitempty"`
}

func (s QueryAuthVcRealtimeRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryAuthVcRealtimeRequest) GoString() string {
	return s.String()
}

func (s *QueryAuthVcRealtimeRequest) SetAuthToken(v string) *QueryAuthVcRealtimeRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryAuthVcRealtimeRequest) SetProductInstanceId(v string) *QueryAuthVcRealtimeRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryAuthVcRealtimeRequest) SetBizType(v string) *QueryAuthVcRealtimeRequest {
	s.BizType = &v
	return s
}

func (s *QueryAuthVcRealtimeRequest) SetSize(v int64) *QueryAuthVcRealtimeRequest {
	s.Size = &v
	return s
}

type QueryAuthVcRealtimeResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 业务类型场景码，与入参相同。
	BizType *string `json:"biz_type,omitempty" xml:"biz_type,omitempty"`
	// 实际返回的结果数目，如果真是数据量小于request中的size的情况下，total 不等于 size，否则 total 与size值相等。
	Total *int64 `json:"total,omitempty" xml:"total,omitempty"`
	// 列表结果，其中每个元素是一个json的string，这个json实际就是数据源提供的数据上链之前的内容。
	//
	// {
	//   "key":"vc:mychain:01364d9acbda8d09d8c30d94987b40b28f2c28d4ff8f86dbe16197a8f2b0c031",
	//   "name": "张三",           //个人姓名
	//   "certNo": "210XXXXXX90", //个人证件号码
	//   "mobile": "138XXXXXX90", //个人手机号码
	//   "orgName": "XXX检测中心",      //检测机构名称
	//   "orgNo": "90XXXX00",    //检测机构编号 (可选)
	//   "type":"1",             //具体类型说明：1：核酸检测证明，2：疫苗接种证明，其他类型后续扩展
	//   "result":"阴性",
	//   "date":"2021-03-09",    //检测的日期，请统一使用此标准
	//   "timestamp":"检测准确时间戳"   //其它字段可以再补充
	// }
	List []*string `json:"list,omitempty" xml:"list,omitempty" type:"Repeated"`
}

func (s QueryAuthVcRealtimeResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryAuthVcRealtimeResponse) GoString() string {
	return s.String()
}

func (s *QueryAuthVcRealtimeResponse) SetReqMsgId(v string) *QueryAuthVcRealtimeResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryAuthVcRealtimeResponse) SetResultCode(v string) *QueryAuthVcRealtimeResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryAuthVcRealtimeResponse) SetResultMsg(v string) *QueryAuthVcRealtimeResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryAuthVcRealtimeResponse) SetBizType(v string) *QueryAuthVcRealtimeResponse {
	s.BizType = &v
	return s
}

func (s *QueryAuthVcRealtimeResponse) SetTotal(v int64) *QueryAuthVcRealtimeResponse {
	s.Total = &v
	return s
}

func (s *QueryAuthVcRealtimeResponse) SetList(v []*string) *QueryAuthVcRealtimeResponse {
	s.List = v
	return s
}

type QueryAuthOrgStatusRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 业务类型说明，当前查询的业务类型，不同业务的机构列表不同。
	BizType *string `json:"biz_type,omitempty" xml:"biz_type,omitempty" require:"true"`
}

func (s QueryAuthOrgStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryAuthOrgStatusRequest) GoString() string {
	return s.String()
}

func (s *QueryAuthOrgStatusRequest) SetAuthToken(v string) *QueryAuthOrgStatusRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryAuthOrgStatusRequest) SetProductInstanceId(v string) *QueryAuthOrgStatusRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryAuthOrgStatusRequest) SetBizType(v string) *QueryAuthOrgStatusRequest {
	s.BizType = &v
	return s
}

type QueryAuthOrgStatusResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 业务场景码类型
	BizType *string `json:"biz_type,omitempty" xml:"biz_type,omitempty"`
	// 列表结果，其中每个元素是一个json的string，这个json实际就是数据源提供的数据上链之前的内容。
	//
	// [
	//   {
	//     "did": "did:mychain:b11dd863d31c38507d6cf8e615b897c7a9160d145e404b8a991964179c0e0bfd",
	//     "orgName": "XX检查门诊-1",
	//     "orgNo": "机构编号-1",
	//     "logoUrl": "https://gw.alipayobjects.com/mdn/rms_40e4ff/afts/img/A*a8QOSJysDlsAAAAAAAAAAABkARQnAQ",
	//     "status": 1
	//   },
	//   {
	//     "did": "did:mychain:b11dd863d31c38507d6cf8e615b897c7a9160d145e404b8a991964179c0e0bfe",
	//     "orgName": "XX检查门诊-2",
	//     "orgNo": "机构编号-2",
	//     "logoUrl": "https://gw.alipayobjects.com/mdn/rms_40e4ff/afts/img/A*a8QOSJysDlsAAAAAAAAAAABkARQnAQ",
	//     "status": 0
	//   }
	// ]
	List []*string `json:"list,omitempty" xml:"list,omitempty" type:"Repeated"`
}

func (s QueryAuthOrgStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryAuthOrgStatusResponse) GoString() string {
	return s.String()
}

func (s *QueryAuthOrgStatusResponse) SetReqMsgId(v string) *QueryAuthOrgStatusResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryAuthOrgStatusResponse) SetResultCode(v string) *QueryAuthOrgStatusResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryAuthOrgStatusResponse) SetResultMsg(v string) *QueryAuthOrgStatusResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryAuthOrgStatusResponse) SetBizType(v string) *QueryAuthOrgStatusResponse {
	s.BizType = &v
	return s
}

func (s *QueryAuthOrgStatusResponse) SetList(v []*string) *QueryAuthOrgStatusResponse {
	s.List = v
	return s
}

type StartAuthAssetIssueRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 长度不超过64字符的业务唯一ID，用于对一个业务流的追踪，查询等。
	BizId *string `json:"biz_id,omitempty" xml:"biz_id,omitempty" require:"true"`
	// 具体的业务类型，长度不超过32字符，具体需要与DIS小组业务对接商定新增的业务类型。
	BizType *string `json:"biz_type,omitempty" xml:"biz_type,omitempty" require:"true"`
	// 目前区分content的两种数据：
	// - "b_total"：商户维度聚合数据，（分城市消费者统计数据），相关商家属性。
	// - "c_deposit"：C类个人充值数据，未来扩展C类核销，退款等数据类型，"c_"前缀。
	// - "c_total"：C类个人充值数据聚合(安心充+学费码整体去重按照地理位置维度聚合)
	Type *string `json:"type,omitempty" xml:"type,omitempty" require:"true"`
	// 当 type参数为："b_total"
	// 主要设定“商户统一信用码” ，其name字段从mif如果获取到也填入：
	// {"name": "XXXX",
	// "certNo":"信用码"}，
	//
	// 当type参数为："c_deposit"时，设定C类用户信息，使用uid，如果有二要素信息，则计算二要素“姓名+身份证号”的拼接字符串计算Hash得到twoMeta：
	// {"userId": "XXXX",
	// "twoMeta":"SHA256(姓名+身份证号码)"}
	//
	// 当 type参数为："c_total"，可以不设定此参数。
	Identity *string `json:"identity,omitempty" xml:"identity,omitempty"`
	// 可能两种类型数据：
	// 商户维度的统计数据，是聚合的数据结果
	// C类充值数据，包含 充值明细数据，目标商户信用码，商户所在城市地理位置信息等。
	Content *string `json:"content,omitempty" xml:"content,omitempty" require:"true"`
	// 传递的附加信息说明，暂时未定义
	Extension *string `json:"extension,omitempty" xml:"extension,omitempty"`
}

func (s StartAuthAssetIssueRequest) String() string {
	return tea.Prettify(s)
}

func (s StartAuthAssetIssueRequest) GoString() string {
	return s.String()
}

func (s *StartAuthAssetIssueRequest) SetAuthToken(v string) *StartAuthAssetIssueRequest {
	s.AuthToken = &v
	return s
}

func (s *StartAuthAssetIssueRequest) SetProductInstanceId(v string) *StartAuthAssetIssueRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *StartAuthAssetIssueRequest) SetBizId(v string) *StartAuthAssetIssueRequest {
	s.BizId = &v
	return s
}

func (s *StartAuthAssetIssueRequest) SetBizType(v string) *StartAuthAssetIssueRequest {
	s.BizType = &v
	return s
}

func (s *StartAuthAssetIssueRequest) SetType(v string) *StartAuthAssetIssueRequest {
	s.Type = &v
	return s
}

func (s *StartAuthAssetIssueRequest) SetIdentity(v string) *StartAuthAssetIssueRequest {
	s.Identity = &v
	return s
}

func (s *StartAuthAssetIssueRequest) SetContent(v string) *StartAuthAssetIssueRequest {
	s.Content = &v
	return s
}

func (s *StartAuthAssetIssueRequest) SetExtension(v string) *StartAuthAssetIssueRequest {
	s.Extension = &v
	return s
}

type StartAuthAssetIssueResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 数据在目标链上的交易hash
	Hash *string `json:"hash,omitempty" xml:"hash,omitempty"`
	// 颁发的凭证的索引id
	VcId *string `json:"vc_id,omitempty" xml:"vc_id,omitempty"`
	// 目标identity在分布式数字身份这边创建的did
	Did *string `json:"did,omitempty" xml:"did,omitempty"`
}

func (s StartAuthAssetIssueResponse) String() string {
	return tea.Prettify(s)
}

func (s StartAuthAssetIssueResponse) GoString() string {
	return s.String()
}

func (s *StartAuthAssetIssueResponse) SetReqMsgId(v string) *StartAuthAssetIssueResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartAuthAssetIssueResponse) SetResultCode(v string) *StartAuthAssetIssueResponse {
	s.ResultCode = &v
	return s
}

func (s *StartAuthAssetIssueResponse) SetResultMsg(v string) *StartAuthAssetIssueResponse {
	s.ResultMsg = &v
	return s
}

func (s *StartAuthAssetIssueResponse) SetHash(v string) *StartAuthAssetIssueResponse {
	s.Hash = &v
	return s
}

func (s *StartAuthAssetIssueResponse) SetVcId(v string) *StartAuthAssetIssueResponse {
	s.VcId = &v
	return s
}

func (s *StartAuthAssetIssueResponse) SetDid(v string) *StartAuthAssetIssueResponse {
	s.Did = &v
	return s
}

type AllAuthCertTemplateRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 证书模板的分类，目前支持马拉松和荣誉证书，marathon 、honor 、employee
	Category *string `json:"category,omitempty" xml:"category,omitempty" require:"true"`
}

func (s AllAuthCertTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s AllAuthCertTemplateRequest) GoString() string {
	return s.String()
}

func (s *AllAuthCertTemplateRequest) SetAuthToken(v string) *AllAuthCertTemplateRequest {
	s.AuthToken = &v
	return s
}

func (s *AllAuthCertTemplateRequest) SetProductInstanceId(v string) *AllAuthCertTemplateRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *AllAuthCertTemplateRequest) SetCategory(v string) *AllAuthCertTemplateRequest {
	s.Category = &v
	return s
}

type AllAuthCertTemplateResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 模板类别：马拉松类、滑雪类
	Category *string `json:"category,omitempty" xml:"category,omitempty"`
	// 模板详情列表
	Templates []*TemplateInfoDTO `json:"templates,omitempty" xml:"templates,omitempty" type:"Repeated"`
}

func (s AllAuthCertTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s AllAuthCertTemplateResponse) GoString() string {
	return s.String()
}

func (s *AllAuthCertTemplateResponse) SetReqMsgId(v string) *AllAuthCertTemplateResponse {
	s.ReqMsgId = &v
	return s
}

func (s *AllAuthCertTemplateResponse) SetResultCode(v string) *AllAuthCertTemplateResponse {
	s.ResultCode = &v
	return s
}

func (s *AllAuthCertTemplateResponse) SetResultMsg(v string) *AllAuthCertTemplateResponse {
	s.ResultMsg = &v
	return s
}

func (s *AllAuthCertTemplateResponse) SetCategory(v string) *AllAuthCertTemplateResponse {
	s.Category = &v
	return s
}

func (s *AllAuthCertTemplateResponse) SetTemplates(v []*TemplateInfoDTO) *AllAuthCertTemplateResponse {
	s.Templates = v
	return s
}

type SaveAuthCertInstanceforcustomRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 证书内容，json格式，可以根据证书模板增加自定义字段
	Content *string `json:"content,omitempty" xml:"content,omitempty" require:"true"`
	// 需要编辑的证书实例id，如果是新增场景则传null
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty"`
	// 创建证书实例后的状态，新增场景默认为3，修改场景不用传值
	//
	// 3: 编辑中 2: 待审核  1: 审核通过
	//
	// 只有3: 编辑中 状态可以对证书实例进行修改
	Status *int64 `json:"status,omitempty" xml:"status,omitempty"`
}

func (s SaveAuthCertInstanceforcustomRequest) String() string {
	return tea.Prettify(s)
}

func (s SaveAuthCertInstanceforcustomRequest) GoString() string {
	return s.String()
}

func (s *SaveAuthCertInstanceforcustomRequest) SetAuthToken(v string) *SaveAuthCertInstanceforcustomRequest {
	s.AuthToken = &v
	return s
}

func (s *SaveAuthCertInstanceforcustomRequest) SetProductInstanceId(v string) *SaveAuthCertInstanceforcustomRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *SaveAuthCertInstanceforcustomRequest) SetContent(v string) *SaveAuthCertInstanceforcustomRequest {
	s.Content = &v
	return s
}

func (s *SaveAuthCertInstanceforcustomRequest) SetInstanceId(v string) *SaveAuthCertInstanceforcustomRequest {
	s.InstanceId = &v
	return s
}

func (s *SaveAuthCertInstanceforcustomRequest) SetStatus(v int64) *SaveAuthCertInstanceforcustomRequest {
	s.Status = &v
	return s
}

type SaveAuthCertInstanceforcustomResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 创建成功的证书实例id
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty"`
}

func (s SaveAuthCertInstanceforcustomResponse) String() string {
	return tea.Prettify(s)
}

func (s SaveAuthCertInstanceforcustomResponse) GoString() string {
	return s.String()
}

func (s *SaveAuthCertInstanceforcustomResponse) SetReqMsgId(v string) *SaveAuthCertInstanceforcustomResponse {
	s.ReqMsgId = &v
	return s
}

func (s *SaveAuthCertInstanceforcustomResponse) SetResultCode(v string) *SaveAuthCertInstanceforcustomResponse {
	s.ResultCode = &v
	return s
}

func (s *SaveAuthCertInstanceforcustomResponse) SetResultMsg(v string) *SaveAuthCertInstanceforcustomResponse {
	s.ResultMsg = &v
	return s
}

func (s *SaveAuthCertInstanceforcustomResponse) SetInstanceId(v string) *SaveAuthCertInstanceforcustomResponse {
	s.InstanceId = &v
	return s
}

type BatchcreateAuthCertRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 证书实例id
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 通过上传领取人明细文件接口返回的csv文件名
	Path *string `json:"path,omitempty" xml:"path,omitempty" require:"true"`
}

func (s BatchcreateAuthCertRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchcreateAuthCertRequest) GoString() string {
	return s.String()
}

func (s *BatchcreateAuthCertRequest) SetAuthToken(v string) *BatchcreateAuthCertRequest {
	s.AuthToken = &v
	return s
}

func (s *BatchcreateAuthCertRequest) SetProductInstanceId(v string) *BatchcreateAuthCertRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *BatchcreateAuthCertRequest) SetInstanceId(v string) *BatchcreateAuthCertRequest {
	s.InstanceId = &v
	return s
}

func (s *BatchcreateAuthCertRequest) SetPath(v string) *BatchcreateAuthCertRequest {
	s.Path = &v
	return s
}

type BatchcreateAuthCertResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 证书颁发进度描述
	CertIssueProgress *CertIssueProgressDTO `json:"cert_issue_progress,omitempty" xml:"cert_issue_progress,omitempty"`
}

func (s BatchcreateAuthCertResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchcreateAuthCertResponse) GoString() string {
	return s.String()
}

func (s *BatchcreateAuthCertResponse) SetReqMsgId(v string) *BatchcreateAuthCertResponse {
	s.ReqMsgId = &v
	return s
}

func (s *BatchcreateAuthCertResponse) SetResultCode(v string) *BatchcreateAuthCertResponse {
	s.ResultCode = &v
	return s
}

func (s *BatchcreateAuthCertResponse) SetResultMsg(v string) *BatchcreateAuthCertResponse {
	s.ResultMsg = &v
	return s
}

func (s *BatchcreateAuthCertResponse) SetCertIssueProgress(v *CertIssueProgressDTO) *BatchcreateAuthCertResponse {
	s.CertIssueProgress = v
	return s
}

type CreateAuthCertRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 证书实例id
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 证书的字段标题列表
	Titles []*string `json:"titles,omitempty" xml:"titles,omitempty" require:"true" type:"Repeated"`
	// 证书的字段内容数组
	Data []*string `json:"data,omitempty" xml:"data,omitempty" require:"true" type:"Repeated"`
}

func (s CreateAuthCertRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateAuthCertRequest) GoString() string {
	return s.String()
}

func (s *CreateAuthCertRequest) SetAuthToken(v string) *CreateAuthCertRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateAuthCertRequest) SetProductInstanceId(v string) *CreateAuthCertRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateAuthCertRequest) SetInstanceId(v string) *CreateAuthCertRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateAuthCertRequest) SetTitles(v []*string) *CreateAuthCertRequest {
	s.Titles = v
	return s
}

func (s *CreateAuthCertRequest) SetData(v []*string) *CreateAuthCertRequest {
	s.Data = v
	return s
}

type CreateAuthCertResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 颁发进度的详细描述
	CertIssueProgress *CertIssueProgressDTO `json:"cert_issue_progress,omitempty" xml:"cert_issue_progress,omitempty"`
}

func (s CreateAuthCertResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateAuthCertResponse) GoString() string {
	return s.String()
}

func (s *CreateAuthCertResponse) SetReqMsgId(v string) *CreateAuthCertResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateAuthCertResponse) SetResultCode(v string) *CreateAuthCertResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateAuthCertResponse) SetResultMsg(v string) *CreateAuthCertResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateAuthCertResponse) SetCertIssueProgress(v *CertIssueProgressDTO) *CreateAuthCertResponse {
	s.CertIssueProgress = v
	return s
}

type InvalidateAuthCertRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 证书id
	CertId *string `json:"cert_id,omitempty" xml:"cert_id,omitempty" require:"true"`
}

func (s InvalidateAuthCertRequest) String() string {
	return tea.Prettify(s)
}

func (s InvalidateAuthCertRequest) GoString() string {
	return s.String()
}

func (s *InvalidateAuthCertRequest) SetAuthToken(v string) *InvalidateAuthCertRequest {
	s.AuthToken = &v
	return s
}

func (s *InvalidateAuthCertRequest) SetProductInstanceId(v string) *InvalidateAuthCertRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *InvalidateAuthCertRequest) SetCertId(v string) *InvalidateAuthCertRequest {
	s.CertId = &v
	return s
}

type InvalidateAuthCertResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s InvalidateAuthCertResponse) String() string {
	return tea.Prettify(s)
}

func (s InvalidateAuthCertResponse) GoString() string {
	return s.String()
}

func (s *InvalidateAuthCertResponse) SetReqMsgId(v string) *InvalidateAuthCertResponse {
	s.ReqMsgId = &v
	return s
}

func (s *InvalidateAuthCertResponse) SetResultCode(v string) *InvalidateAuthCertResponse {
	s.ResultCode = &v
	return s
}

func (s *InvalidateAuthCertResponse) SetResultMsg(v string) *InvalidateAuthCertResponse {
	s.ResultMsg = &v
	return s
}

type QueryAuthCertProgressRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 证书实例id
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
}

func (s QueryAuthCertProgressRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryAuthCertProgressRequest) GoString() string {
	return s.String()
}

func (s *QueryAuthCertProgressRequest) SetAuthToken(v string) *QueryAuthCertProgressRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryAuthCertProgressRequest) SetProductInstanceId(v string) *QueryAuthCertProgressRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryAuthCertProgressRequest) SetInstanceId(v string) *QueryAuthCertProgressRequest {
	s.InstanceId = &v
	return s
}

type QueryAuthCertProgressResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 批量颁发的任务进度
	CertIssueProgress *CertIssueProgressDTO `json:"cert_issue_progress,omitempty" xml:"cert_issue_progress,omitempty"`
}

func (s QueryAuthCertProgressResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryAuthCertProgressResponse) GoString() string {
	return s.String()
}

func (s *QueryAuthCertProgressResponse) SetReqMsgId(v string) *QueryAuthCertProgressResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryAuthCertProgressResponse) SetResultCode(v string) *QueryAuthCertProgressResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryAuthCertProgressResponse) SetResultMsg(v string) *QueryAuthCertProgressResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryAuthCertProgressResponse) SetCertIssueProgress(v *CertIssueProgressDTO) *QueryAuthCertProgressResponse {
	s.CertIssueProgress = v
	return s
}

type UploadAuthCertInstanceRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 自动生成的唯一id，不需要传入
	// 待上传文件
	FileObject io.Reader `json:"fileObject,omitempty" xml:"fileObject,omitempty"`
	// 待上传文件名
	FileObjectName *string `json:"fileObjectName,omitempty" xml:"fileObjectName,omitempty"`
	FileId         *string `json:"file_id,omitempty" xml:"file_id,omitempty"`
}

func (s UploadAuthCertInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s UploadAuthCertInstanceRequest) GoString() string {
	return s.String()
}

func (s *UploadAuthCertInstanceRequest) SetAuthToken(v string) *UploadAuthCertInstanceRequest {
	s.AuthToken = &v
	return s
}

func (s *UploadAuthCertInstanceRequest) SetProductInstanceId(v string) *UploadAuthCertInstanceRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UploadAuthCertInstanceRequest) SetFileObject(v io.Reader) *UploadAuthCertInstanceRequest {
	s.FileObject = v
	return s
}

func (s *UploadAuthCertInstanceRequest) SetFileObjectName(v string) *UploadAuthCertInstanceRequest {
	s.FileObjectName = &v
	return s
}

func (s *UploadAuthCertInstanceRequest) SetFileId(v string) *UploadAuthCertInstanceRequest {
	s.FileId = &v
	return s
}

type UploadAuthCertInstanceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 上传成功后的文件名，作为批量颁发证书接口的入参
	Path *string `json:"path,omitempty" xml:"path,omitempty"`
}

func (s UploadAuthCertInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s UploadAuthCertInstanceResponse) GoString() string {
	return s.String()
}

func (s *UploadAuthCertInstanceResponse) SetReqMsgId(v string) *UploadAuthCertInstanceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UploadAuthCertInstanceResponse) SetResultCode(v string) *UploadAuthCertInstanceResponse {
	s.ResultCode = &v
	return s
}

func (s *UploadAuthCertInstanceResponse) SetResultMsg(v string) *UploadAuthCertInstanceResponse {
	s.ResultMsg = &v
	return s
}

func (s *UploadAuthCertInstanceResponse) SetPath(v string) *UploadAuthCertInstanceResponse {
	s.Path = &v
	return s
}

type SaveAuthCertInstanceRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 证书内容，json格式，可以根据证书模板增加自定义字段
	Content *string `json:"content,omitempty" xml:"content,omitempty" require:"true"`
	// 需要编辑的证书实例id，如果是新增场景则传null
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty"`
	// 创建证书实例后的状态，新增和修改场景默认为3
	// 3: 编辑中
	// 2: 待审核
	//
	// 只有3: 编辑中 状态可以对证书实例进行修改
	Status *int64 `json:"status,omitempty" xml:"status,omitempty"`
}

func (s SaveAuthCertInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s SaveAuthCertInstanceRequest) GoString() string {
	return s.String()
}

func (s *SaveAuthCertInstanceRequest) SetAuthToken(v string) *SaveAuthCertInstanceRequest {
	s.AuthToken = &v
	return s
}

func (s *SaveAuthCertInstanceRequest) SetProductInstanceId(v string) *SaveAuthCertInstanceRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *SaveAuthCertInstanceRequest) SetContent(v string) *SaveAuthCertInstanceRequest {
	s.Content = &v
	return s
}

func (s *SaveAuthCertInstanceRequest) SetInstanceId(v string) *SaveAuthCertInstanceRequest {
	s.InstanceId = &v
	return s
}

func (s *SaveAuthCertInstanceRequest) SetStatus(v int64) *SaveAuthCertInstanceRequest {
	s.Status = &v
	return s
}

type SaveAuthCertInstanceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 创建或修改成功的证书实例id
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty"`
}

func (s SaveAuthCertInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s SaveAuthCertInstanceResponse) GoString() string {
	return s.String()
}

func (s *SaveAuthCertInstanceResponse) SetReqMsgId(v string) *SaveAuthCertInstanceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *SaveAuthCertInstanceResponse) SetResultCode(v string) *SaveAuthCertInstanceResponse {
	s.ResultCode = &v
	return s
}

func (s *SaveAuthCertInstanceResponse) SetResultMsg(v string) *SaveAuthCertInstanceResponse {
	s.ResultMsg = &v
	return s
}

func (s *SaveAuthCertInstanceResponse) SetInstanceId(v string) *SaveAuthCertInstanceResponse {
	s.InstanceId = &v
	return s
}

type ApplyAuthCertInstanceRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 证书实例id
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
}

func (s ApplyAuthCertInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s ApplyAuthCertInstanceRequest) GoString() string {
	return s.String()
}

func (s *ApplyAuthCertInstanceRequest) SetAuthToken(v string) *ApplyAuthCertInstanceRequest {
	s.AuthToken = &v
	return s
}

func (s *ApplyAuthCertInstanceRequest) SetProductInstanceId(v string) *ApplyAuthCertInstanceRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ApplyAuthCertInstanceRequest) SetInstanceId(v string) *ApplyAuthCertInstanceRequest {
	s.InstanceId = &v
	return s
}

type ApplyAuthCertInstanceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s ApplyAuthCertInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s ApplyAuthCertInstanceResponse) GoString() string {
	return s.String()
}

func (s *ApplyAuthCertInstanceResponse) SetReqMsgId(v string) *ApplyAuthCertInstanceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ApplyAuthCertInstanceResponse) SetResultCode(v string) *ApplyAuthCertInstanceResponse {
	s.ResultCode = &v
	return s
}

func (s *ApplyAuthCertInstanceResponse) SetResultMsg(v string) *ApplyAuthCertInstanceResponse {
	s.ResultMsg = &v
	return s
}

type GetAuthCertInstancedataurlRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
}

func (s GetAuthCertInstancedataurlRequest) String() string {
	return tea.Prettify(s)
}

func (s GetAuthCertInstancedataurlRequest) GoString() string {
	return s.String()
}

func (s *GetAuthCertInstancedataurlRequest) SetAuthToken(v string) *GetAuthCertInstancedataurlRequest {
	s.AuthToken = &v
	return s
}

func (s *GetAuthCertInstancedataurlRequest) SetProductInstanceId(v string) *GetAuthCertInstancedataurlRequest {
	s.ProductInstanceId = &v
	return s
}

type GetAuthCertInstancedataurlResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// oss服务地址
	Host *string `json:"host,omitempty" xml:"host,omitempty"`
	// 申请的证书领取人csv的名称，使用该key作为批量颁发证书的path参数
	Dir *string `json:"dir,omitempty" xml:"dir,omitempty"`
	// ak
	AccessId *string `json:"access_id,omitempty" xml:"access_id,omitempty"`
	// Policy规定了请求表单域的合法性
	Policy *string `json:"policy,omitempty" xml:"policy,omitempty"`
	// 签名
	Signature *string `json:"signature,omitempty" xml:"signature,omitempty"`
	// 过期时间戳
	Expire *string `json:"expire,omitempty" xml:"expire,omitempty"`
	// 加密回调信息
	Callback *string `json:"callback,omitempty" xml:"callback,omitempty"`
}

func (s GetAuthCertInstancedataurlResponse) String() string {
	return tea.Prettify(s)
}

func (s GetAuthCertInstancedataurlResponse) GoString() string {
	return s.String()
}

func (s *GetAuthCertInstancedataurlResponse) SetReqMsgId(v string) *GetAuthCertInstancedataurlResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetAuthCertInstancedataurlResponse) SetResultCode(v string) *GetAuthCertInstancedataurlResponse {
	s.ResultCode = &v
	return s
}

func (s *GetAuthCertInstancedataurlResponse) SetResultMsg(v string) *GetAuthCertInstancedataurlResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetAuthCertInstancedataurlResponse) SetHost(v string) *GetAuthCertInstancedataurlResponse {
	s.Host = &v
	return s
}

func (s *GetAuthCertInstancedataurlResponse) SetDir(v string) *GetAuthCertInstancedataurlResponse {
	s.Dir = &v
	return s
}

func (s *GetAuthCertInstancedataurlResponse) SetAccessId(v string) *GetAuthCertInstancedataurlResponse {
	s.AccessId = &v
	return s
}

func (s *GetAuthCertInstancedataurlResponse) SetPolicy(v string) *GetAuthCertInstancedataurlResponse {
	s.Policy = &v
	return s
}

func (s *GetAuthCertInstancedataurlResponse) SetSignature(v string) *GetAuthCertInstancedataurlResponse {
	s.Signature = &v
	return s
}

func (s *GetAuthCertInstancedataurlResponse) SetExpire(v string) *GetAuthCertInstancedataurlResponse {
	s.Expire = &v
	return s
}

func (s *GetAuthCertInstancedataurlResponse) SetCallback(v string) *GetAuthCertInstancedataurlResponse {
	s.Callback = &v
	return s
}

type CreateAuthCertClaimRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 长度不超过64字符的业务唯一ID，用于对一个业务流的追踪，查询等。
	BizId *string `json:"biz_id,omitempty" xml:"biz_id,omitempty" require:"true"`
	// 业务类型，通常需要与授权宝服务沟通确定，业务类型可能影响此接口内部实现逻辑，长度不超过32字符。
	//
	BizType *string `json:"biz_type,omitempty" xml:"biz_type,omitempty" require:"true"`
	// 一个json的string。内容包含具体需要的声明，不同业务场景不同。
	//
	ClaimContent *string `json:"claim_content,omitempty" xml:"claim_content,omitempty" require:"true"`
	// 如果在相同的biz_type下，还需要针对声明claim进行细化划分，可以使用此字段。
	//
	ClaimType *string `json:"claim_type,omitempty" xml:"claim_type,omitempty"`
	// 申请声明颁发后的有效期，可选参数，如果不指定则默认申请永久有效。
	//
	Expire *int64 `json:"expire,omitempty" xml:"expire,omitempty"`
}

func (s CreateAuthCertClaimRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateAuthCertClaimRequest) GoString() string {
	return s.String()
}

func (s *CreateAuthCertClaimRequest) SetAuthToken(v string) *CreateAuthCertClaimRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateAuthCertClaimRequest) SetProductInstanceId(v string) *CreateAuthCertClaimRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateAuthCertClaimRequest) SetBizId(v string) *CreateAuthCertClaimRequest {
	s.BizId = &v
	return s
}

func (s *CreateAuthCertClaimRequest) SetBizType(v string) *CreateAuthCertClaimRequest {
	s.BizType = &v
	return s
}

func (s *CreateAuthCertClaimRequest) SetClaimContent(v string) *CreateAuthCertClaimRequest {
	s.ClaimContent = &v
	return s
}

func (s *CreateAuthCertClaimRequest) SetClaimType(v string) *CreateAuthCertClaimRequest {
	s.ClaimType = &v
	return s
}

func (s *CreateAuthCertClaimRequest) SetExpire(v int64) *CreateAuthCertClaimRequest {
	s.Expire = &v
	return s
}

type CreateAuthCertClaimResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 可验证声明的唯一标识id，status 为 “1” 时候非空
	VcId *string `json:"vc_id,omitempty" xml:"vc_id,omitempty"`
}

func (s CreateAuthCertClaimResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateAuthCertClaimResponse) GoString() string {
	return s.String()
}

func (s *CreateAuthCertClaimResponse) SetReqMsgId(v string) *CreateAuthCertClaimResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateAuthCertClaimResponse) SetResultCode(v string) *CreateAuthCertClaimResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateAuthCertClaimResponse) SetResultMsg(v string) *CreateAuthCertClaimResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateAuthCertClaimResponse) SetVcId(v string) *CreateAuthCertClaimResponse {
	s.VcId = &v
	return s
}

type QueryAuthCertClaimRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 可验证声明id
	VcId *string `json:"vc_id,omitempty" xml:"vc_id,omitempty" require:"true"`
	// 业务类型
	BizType *string `json:"biz_type,omitempty" xml:"biz_type,omitempty" require:"true"`
}

func (s QueryAuthCertClaimRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryAuthCertClaimRequest) GoString() string {
	return s.String()
}

func (s *QueryAuthCertClaimRequest) SetAuthToken(v string) *QueryAuthCertClaimRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryAuthCertClaimRequest) SetProductInstanceId(v string) *QueryAuthCertClaimRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryAuthCertClaimRequest) SetVcId(v string) *QueryAuthCertClaimRequest {
	s.VcId = &v
	return s
}

func (s *QueryAuthCertClaimRequest) SetBizType(v string) *QueryAuthCertClaimRequest {
	s.BizType = &v
	return s
}

type QueryAuthCertClaimResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 可验证声明id
	VcId *string `json:"vc_id,omitempty" xml:"vc_id,omitempty"`
	// 交易hash（仅上链成功后会有值）
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty"`
	// vc详情
	VcContent *string `json:"vc_content,omitempty" xml:"vc_content,omitempty"`
	// vc状态 0:未授权 1:已授权 2: 拒绝授权 3: 授权已撤销
	Status *int64 `json:"status,omitempty" xml:"status,omitempty"`
	// 业务类型
	BizType *string `json:"biz_type,omitempty" xml:"biz_type,omitempty"`
	// 过期时间
	Expire *int64 `json:"expire,omitempty" xml:"expire,omitempty"`
	// 授权是否可撤销
	Revocable *bool `json:"revocable,omitempty" xml:"revocable,omitempty"`
	// 存证请求创建时间
	GmtCreate *string `json:"gmt_create,omitempty" xml:"gmt_create,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 存证上链时间（仅上链成功后会有值）
	GmtTransmit *string `json:"gmt_transmit,omitempty" xml:"gmt_transmit,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
}

func (s QueryAuthCertClaimResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryAuthCertClaimResponse) GoString() string {
	return s.String()
}

func (s *QueryAuthCertClaimResponse) SetReqMsgId(v string) *QueryAuthCertClaimResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryAuthCertClaimResponse) SetResultCode(v string) *QueryAuthCertClaimResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryAuthCertClaimResponse) SetResultMsg(v string) *QueryAuthCertClaimResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryAuthCertClaimResponse) SetVcId(v string) *QueryAuthCertClaimResponse {
	s.VcId = &v
	return s
}

func (s *QueryAuthCertClaimResponse) SetTxHash(v string) *QueryAuthCertClaimResponse {
	s.TxHash = &v
	return s
}

func (s *QueryAuthCertClaimResponse) SetVcContent(v string) *QueryAuthCertClaimResponse {
	s.VcContent = &v
	return s
}

func (s *QueryAuthCertClaimResponse) SetStatus(v int64) *QueryAuthCertClaimResponse {
	s.Status = &v
	return s
}

func (s *QueryAuthCertClaimResponse) SetBizType(v string) *QueryAuthCertClaimResponse {
	s.BizType = &v
	return s
}

func (s *QueryAuthCertClaimResponse) SetExpire(v int64) *QueryAuthCertClaimResponse {
	s.Expire = &v
	return s
}

func (s *QueryAuthCertClaimResponse) SetRevocable(v bool) *QueryAuthCertClaimResponse {
	s.Revocable = &v
	return s
}

func (s *QueryAuthCertClaimResponse) SetGmtCreate(v string) *QueryAuthCertClaimResponse {
	s.GmtCreate = &v
	return s
}

func (s *QueryAuthCertClaimResponse) SetGmtTransmit(v string) *QueryAuthCertClaimResponse {
	s.GmtTransmit = &v
	return s
}

type CreateAuthCertClaimurlRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 存证唯一id
	VcId *string `json:"vc_id,omitempty" xml:"vc_id,omitempty" require:"true"`
}

func (s CreateAuthCertClaimurlRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateAuthCertClaimurlRequest) GoString() string {
	return s.String()
}

func (s *CreateAuthCertClaimurlRequest) SetAuthToken(v string) *CreateAuthCertClaimurlRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateAuthCertClaimurlRequest) SetProductInstanceId(v string) *CreateAuthCertClaimurlRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateAuthCertClaimurlRequest) SetVcId(v string) *CreateAuthCertClaimurlRequest {
	s.VcId = &v
	return s
}

type CreateAuthCertClaimurlResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 证书平台支付宝小程序查验存证的url
	MiniUrl *string `json:"mini_url,omitempty" xml:"mini_url,omitempty"`
}

func (s CreateAuthCertClaimurlResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateAuthCertClaimurlResponse) GoString() string {
	return s.String()
}

func (s *CreateAuthCertClaimurlResponse) SetReqMsgId(v string) *CreateAuthCertClaimurlResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateAuthCertClaimurlResponse) SetResultCode(v string) *CreateAuthCertClaimurlResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateAuthCertClaimurlResponse) SetResultMsg(v string) *CreateAuthCertClaimurlResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateAuthCertClaimurlResponse) SetMiniUrl(v string) *CreateAuthCertClaimurlResponse {
	s.MiniUrl = &v
	return s
}

type GetAuthClaimRecentRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 业务类型
	BizType *string `json:"biz_type,omitempty" xml:"biz_type,omitempty" require:"true"`
	// C类用户支付宝2088id
	Uid *string `json:"uid,omitempty" xml:"uid,omitempty" require:"true"`
	// 被授权机构did
	Subject *string `json:"subject,omitempty" xml:"subject,omitempty"`
}

func (s GetAuthClaimRecentRequest) String() string {
	return tea.Prettify(s)
}

func (s GetAuthClaimRecentRequest) GoString() string {
	return s.String()
}

func (s *GetAuthClaimRecentRequest) SetAuthToken(v string) *GetAuthClaimRecentRequest {
	s.AuthToken = &v
	return s
}

func (s *GetAuthClaimRecentRequest) SetProductInstanceId(v string) *GetAuthClaimRecentRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *GetAuthClaimRecentRequest) SetBizType(v string) *GetAuthClaimRecentRequest {
	s.BizType = &v
	return s
}

func (s *GetAuthClaimRecentRequest) SetUid(v string) *GetAuthClaimRecentRequest {
	s.Uid = &v
	return s
}

func (s *GetAuthClaimRecentRequest) SetSubject(v string) *GetAuthClaimRecentRequest {
	s.Subject = &v
	return s
}

type GetAuthClaimRecentResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 声明的 id，status 为 “1” 时候非空
	VcId *string `json:"vc_id,omitempty" xml:"vc_id,omitempty"`
	// 可验证声明完成内容， status 为 “1” 时候非空
	VcContent *string `json:"vc_content,omitempty" xml:"vc_content,omitempty"`
	// 业务类型
	BizType *string `json:"biz_type,omitempty" xml:"biz_type,omitempty"`
	// vc状态 0:未授权 1:已授权 2: 拒绝授权 3: 授权已撤销
	Status *int64 `json:"status,omitempty" xml:"status,omitempty"`
	// 授权是否可撤销
	Revocable *bool `json:"revocable,omitempty" xml:"revocable,omitempty"`
	// 过期时间
	Expire *int64 `json:"expire,omitempty" xml:"expire,omitempty"`
}

func (s GetAuthClaimRecentResponse) String() string {
	return tea.Prettify(s)
}

func (s GetAuthClaimRecentResponse) GoString() string {
	return s.String()
}

func (s *GetAuthClaimRecentResponse) SetReqMsgId(v string) *GetAuthClaimRecentResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetAuthClaimRecentResponse) SetResultCode(v string) *GetAuthClaimRecentResponse {
	s.ResultCode = &v
	return s
}

func (s *GetAuthClaimRecentResponse) SetResultMsg(v string) *GetAuthClaimRecentResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetAuthClaimRecentResponse) SetVcId(v string) *GetAuthClaimRecentResponse {
	s.VcId = &v
	return s
}

func (s *GetAuthClaimRecentResponse) SetVcContent(v string) *GetAuthClaimRecentResponse {
	s.VcContent = &v
	return s
}

func (s *GetAuthClaimRecentResponse) SetBizType(v string) *GetAuthClaimRecentResponse {
	s.BizType = &v
	return s
}

func (s *GetAuthClaimRecentResponse) SetStatus(v int64) *GetAuthClaimRecentResponse {
	s.Status = &v
	return s
}

func (s *GetAuthClaimRecentResponse) SetRevocable(v bool) *GetAuthClaimRecentResponse {
	s.Revocable = &v
	return s
}

func (s *GetAuthClaimRecentResponse) SetExpire(v int64) *GetAuthClaimRecentResponse {
	s.Expire = &v
	return s
}

type ExecAuthContractRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 地区
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty"`
	// ant_chain_id
	AntChainId *string `json:"ant_chain_id,omitempty" xml:"ant_chain_id,omitempty" require:"true"`
	// transaction
	Transaction *string `json:"transaction,omitempty" xml:"transaction,omitempty" require:"true"`
}

func (s ExecAuthContractRequest) String() string {
	return tea.Prettify(s)
}

func (s ExecAuthContractRequest) GoString() string {
	return s.String()
}

func (s *ExecAuthContractRequest) SetAuthToken(v string) *ExecAuthContractRequest {
	s.AuthToken = &v
	return s
}

func (s *ExecAuthContractRequest) SetProductInstanceId(v string) *ExecAuthContractRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ExecAuthContractRequest) SetRegionId(v string) *ExecAuthContractRequest {
	s.RegionId = &v
	return s
}

func (s *ExecAuthContractRequest) SetAntChainId(v string) *ExecAuthContractRequest {
	s.AntChainId = &v
	return s
}

func (s *ExecAuthContractRequest) SetTransaction(v string) *ExecAuthContractRequest {
	s.Transaction = &v
	return s
}

type ExecAuthContractResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// result
	Result *string `json:"result,omitempty" xml:"result,omitempty"`
}

func (s ExecAuthContractResponse) String() string {
	return tea.Prettify(s)
}

func (s ExecAuthContractResponse) GoString() string {
	return s.String()
}

func (s *ExecAuthContractResponse) SetReqMsgId(v string) *ExecAuthContractResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ExecAuthContractResponse) SetResultCode(v string) *ExecAuthContractResponse {
	s.ResultCode = &v
	return s
}

func (s *ExecAuthContractResponse) SetResultMsg(v string) *ExecAuthContractResponse {
	s.ResultMsg = &v
	return s
}

func (s *ExecAuthContractResponse) SetResult(v string) *ExecAuthContractResponse {
	s.Result = &v
	return s
}

type QueryAuthSceneAuthstatusRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 支付宝会员id
	UserId *string `json:"user_id,omitempty" xml:"user_id,omitempty" require:"true"`
	// 当前场景id
	SceneId *string `json:"scene_id,omitempty" xml:"scene_id,omitempty" require:"true"`
}

func (s QueryAuthSceneAuthstatusRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryAuthSceneAuthstatusRequest) GoString() string {
	return s.String()
}

func (s *QueryAuthSceneAuthstatusRequest) SetAuthToken(v string) *QueryAuthSceneAuthstatusRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryAuthSceneAuthstatusRequest) SetProductInstanceId(v string) *QueryAuthSceneAuthstatusRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryAuthSceneAuthstatusRequest) SetUserId(v string) *QueryAuthSceneAuthstatusRequest {
	s.UserId = &v
	return s
}

func (s *QueryAuthSceneAuthstatusRequest) SetSceneId(v string) *QueryAuthSceneAuthstatusRequest {
	s.SceneId = &v
	return s
}

type QueryAuthSceneAuthstatusResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// Authorized 已授权
	// Unauthorized 未授权
	AuthStatus *string `json:"auth_status,omitempty" xml:"auth_status,omitempty"`
}

func (s QueryAuthSceneAuthstatusResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryAuthSceneAuthstatusResponse) GoString() string {
	return s.String()
}

func (s *QueryAuthSceneAuthstatusResponse) SetReqMsgId(v string) *QueryAuthSceneAuthstatusResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryAuthSceneAuthstatusResponse) SetResultCode(v string) *QueryAuthSceneAuthstatusResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryAuthSceneAuthstatusResponse) SetResultMsg(v string) *QueryAuthSceneAuthstatusResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryAuthSceneAuthstatusResponse) SetAuthStatus(v string) *QueryAuthSceneAuthstatusResponse {
	s.AuthStatus = &v
	return s
}

type ExecAuthContractClaimRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 长度不超过64字符的业务流水唯一ID，用于对一个业务流的追踪，与请求中的biz_id一致方便业务方使用。
	BizId *string `json:"biz_id,omitempty" xml:"biz_id,omitempty" require:"true"`
	// 业务类型
	BizType *string `json:"biz_type,omitempty" xml:"biz_type,omitempty" require:"true"`
	// 合约名称
	ContractName *string `json:"contract_name,omitempty" xml:"contract_name,omitempty" require:"true"`
	// 合约方法名称
	FunctionName *string `json:"function_name,omitempty" xml:"function_name,omitempty" require:"true"`
	// 合约入参类型，和 arguments对应， 取值类型： DOUBLE，STRING，INTEGER，LONG，FLOAT； 默认为String
	Arguments []*string `json:"arguments,omitempty" xml:"arguments,omitempty" type:"Repeated"`
	// 保留参数，选填，目前暂未用到，合约入参类型，和 arguments对应 取值类型： DOUBLE，STRING，INTEGER，LONG，FLOAT；
	Types []*string `json:"types,omitempty" xml:"types,omitempty" type:"Repeated"`
}

func (s ExecAuthContractClaimRequest) String() string {
	return tea.Prettify(s)
}

func (s ExecAuthContractClaimRequest) GoString() string {
	return s.String()
}

func (s *ExecAuthContractClaimRequest) SetAuthToken(v string) *ExecAuthContractClaimRequest {
	s.AuthToken = &v
	return s
}

func (s *ExecAuthContractClaimRequest) SetProductInstanceId(v string) *ExecAuthContractClaimRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ExecAuthContractClaimRequest) SetBizId(v string) *ExecAuthContractClaimRequest {
	s.BizId = &v
	return s
}

func (s *ExecAuthContractClaimRequest) SetBizType(v string) *ExecAuthContractClaimRequest {
	s.BizType = &v
	return s
}

func (s *ExecAuthContractClaimRequest) SetContractName(v string) *ExecAuthContractClaimRequest {
	s.ContractName = &v
	return s
}

func (s *ExecAuthContractClaimRequest) SetFunctionName(v string) *ExecAuthContractClaimRequest {
	s.FunctionName = &v
	return s
}

func (s *ExecAuthContractClaimRequest) SetArguments(v []*string) *ExecAuthContractClaimRequest {
	s.Arguments = v
	return s
}

func (s *ExecAuthContractClaimRequest) SetTypes(v []*string) *ExecAuthContractClaimRequest {
	s.Types = v
	return s
}

type ExecAuthContractClaimResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 场景码
	BizId *string `json:"biz_id,omitempty" xml:"biz_id,omitempty"`
	// 业务场景码类型
	BizType *string `json:"biz_type,omitempty" xml:"biz_type,omitempty"`
	// 合约执行结果
	ResultData *string `json:"result_data,omitempty" xml:"result_data,omitempty"`
}

func (s ExecAuthContractClaimResponse) String() string {
	return tea.Prettify(s)
}

func (s ExecAuthContractClaimResponse) GoString() string {
	return s.String()
}

func (s *ExecAuthContractClaimResponse) SetReqMsgId(v string) *ExecAuthContractClaimResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ExecAuthContractClaimResponse) SetResultCode(v string) *ExecAuthContractClaimResponse {
	s.ResultCode = &v
	return s
}

func (s *ExecAuthContractClaimResponse) SetResultMsg(v string) *ExecAuthContractClaimResponse {
	s.ResultMsg = &v
	return s
}

func (s *ExecAuthContractClaimResponse) SetBizId(v string) *ExecAuthContractClaimResponse {
	s.BizId = &v
	return s
}

func (s *ExecAuthContractClaimResponse) SetBizType(v string) *ExecAuthContractClaimResponse {
	s.BizType = &v
	return s
}

func (s *ExecAuthContractClaimResponse) SetResultData(v string) *ExecAuthContractClaimResponse {
	s.ResultData = &v
	return s
}

type CreateAuthCertDetailpageurlRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 证书实例ID
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 用户领取条件信息, JSON结构，信息同颁发证书时使用的领取条件
	UserInfo *string `json:"user_info,omitempty" xml:"user_info,omitempty" require:"true"`
}

func (s CreateAuthCertDetailpageurlRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateAuthCertDetailpageurlRequest) GoString() string {
	return s.String()
}

func (s *CreateAuthCertDetailpageurlRequest) SetAuthToken(v string) *CreateAuthCertDetailpageurlRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateAuthCertDetailpageurlRequest) SetProductInstanceId(v string) *CreateAuthCertDetailpageurlRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateAuthCertDetailpageurlRequest) SetInstanceId(v string) *CreateAuthCertDetailpageurlRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateAuthCertDetailpageurlRequest) SetUserInfo(v string) *CreateAuthCertDetailpageurlRequest {
	s.UserInfo = &v
	return s
}

type CreateAuthCertDetailpageurlResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// H5页面url
	ResultData *string `json:"result_data,omitempty" xml:"result_data,omitempty"`
}

func (s CreateAuthCertDetailpageurlResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateAuthCertDetailpageurlResponse) GoString() string {
	return s.String()
}

func (s *CreateAuthCertDetailpageurlResponse) SetReqMsgId(v string) *CreateAuthCertDetailpageurlResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateAuthCertDetailpageurlResponse) SetResultCode(v string) *CreateAuthCertDetailpageurlResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateAuthCertDetailpageurlResponse) SetResultMsg(v string) *CreateAuthCertDetailpageurlResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateAuthCertDetailpageurlResponse) SetResultData(v string) *CreateAuthCertDetailpageurlResponse {
	s.ResultData = &v
	return s
}

type SignAuthAgreementUserRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 用户id
	UserId *string `json:"user_id,omitempty" xml:"user_id,omitempty" require:"true"`
	// 协议id
	AgreementId *string `json:"agreement_id,omitempty" xml:"agreement_id,omitempty" require:"true"`
	// 签约时间
	SignDate *string `json:"sign_date,omitempty" xml:"sign_date,omitempty" require:"true" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
}

func (s SignAuthAgreementUserRequest) String() string {
	return tea.Prettify(s)
}

func (s SignAuthAgreementUserRequest) GoString() string {
	return s.String()
}

func (s *SignAuthAgreementUserRequest) SetAuthToken(v string) *SignAuthAgreementUserRequest {
	s.AuthToken = &v
	return s
}

func (s *SignAuthAgreementUserRequest) SetProductInstanceId(v string) *SignAuthAgreementUserRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *SignAuthAgreementUserRequest) SetUserId(v string) *SignAuthAgreementUserRequest {
	s.UserId = &v
	return s
}

func (s *SignAuthAgreementUserRequest) SetAgreementId(v string) *SignAuthAgreementUserRequest {
	s.AgreementId = &v
	return s
}

func (s *SignAuthAgreementUserRequest) SetSignDate(v string) *SignAuthAgreementUserRequest {
	s.SignDate = &v
	return s
}

type SignAuthAgreementUserResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s SignAuthAgreementUserResponse) String() string {
	return tea.Prettify(s)
}

func (s SignAuthAgreementUserResponse) GoString() string {
	return s.String()
}

func (s *SignAuthAgreementUserResponse) SetReqMsgId(v string) *SignAuthAgreementUserResponse {
	s.ReqMsgId = &v
	return s
}

func (s *SignAuthAgreementUserResponse) SetResultCode(v string) *SignAuthAgreementUserResponse {
	s.ResultCode = &v
	return s
}

func (s *SignAuthAgreementUserResponse) SetResultMsg(v string) *SignAuthAgreementUserResponse {
	s.ResultMsg = &v
	return s
}

type BindAuthPoapRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 长度不超过64字符的业务流水唯一id，可作幂等处理
	BizId *string `json:"biz_id,omitempty" xml:"biz_id,omitempty" require:"true"`
	// 徽章元数据ID
	PoapMetaId *string `json:"poap_meta_id,omitempty" xml:"poap_meta_id,omitempty" require:"true"`
	// 支付宝UID，2088开头
	UserId *string `json:"user_id,omitempty" xml:"user_id,omitempty"`
	// 用户真实姓名
	UserName *string `json:"user_name,omitempty" xml:"user_name,omitempty"`
	// 用户手机号
	UserCertNo *string `json:"user_cert_no,omitempty" xml:"user_cert_no,omitempty"`
	// 用户手机号
	UserMobile *string `json:"user_mobile,omitempty" xml:"user_mobile,omitempty"`
	// 定制id会有白名单进行权限限制。id格式要求：长度6-20，允许字母、数字、部分特殊字符(_#:|)
	PoapId *string `json:"poap_id,omitempty" xml:"poap_id,omitempty"`
	// 徽章关联权益时，用户领取权益的动作类型
	ProfitAction *string `json:"profit_action,omitempty" xml:"profit_action,omitempty"`
	// 徽章关联权益时，用户领取权益的地址
	ProfitUrl *string `json:"profit_url,omitempty" xml:"profit_url,omitempty"`
	// 徽章关联权益时附带信息，buttonName为自定义领取按钮名称，needAuth为是否需要授权，authId为授权请求id，authBizId为授权请求场景id
	Payload *string `json:"payload,omitempty" xml:"payload,omitempty"`
}

func (s BindAuthPoapRequest) String() string {
	return tea.Prettify(s)
}

func (s BindAuthPoapRequest) GoString() string {
	return s.String()
}

func (s *BindAuthPoapRequest) SetAuthToken(v string) *BindAuthPoapRequest {
	s.AuthToken = &v
	return s
}

func (s *BindAuthPoapRequest) SetProductInstanceId(v string) *BindAuthPoapRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *BindAuthPoapRequest) SetBizId(v string) *BindAuthPoapRequest {
	s.BizId = &v
	return s
}

func (s *BindAuthPoapRequest) SetPoapMetaId(v string) *BindAuthPoapRequest {
	s.PoapMetaId = &v
	return s
}

func (s *BindAuthPoapRequest) SetUserId(v string) *BindAuthPoapRequest {
	s.UserId = &v
	return s
}

func (s *BindAuthPoapRequest) SetUserName(v string) *BindAuthPoapRequest {
	s.UserName = &v
	return s
}

func (s *BindAuthPoapRequest) SetUserCertNo(v string) *BindAuthPoapRequest {
	s.UserCertNo = &v
	return s
}

func (s *BindAuthPoapRequest) SetUserMobile(v string) *BindAuthPoapRequest {
	s.UserMobile = &v
	return s
}

func (s *BindAuthPoapRequest) SetPoapId(v string) *BindAuthPoapRequest {
	s.PoapId = &v
	return s
}

func (s *BindAuthPoapRequest) SetProfitAction(v string) *BindAuthPoapRequest {
	s.ProfitAction = &v
	return s
}

func (s *BindAuthPoapRequest) SetProfitUrl(v string) *BindAuthPoapRequest {
	s.ProfitUrl = &v
	return s
}

func (s *BindAuthPoapRequest) SetPayload(v string) *BindAuthPoapRequest {
	s.Payload = &v
	return s
}

type BindAuthPoapResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 徽章ID
	PoapId *string `json:"poap_id,omitempty" xml:"poap_id,omitempty"`
}

func (s BindAuthPoapResponse) String() string {
	return tea.Prettify(s)
}

func (s BindAuthPoapResponse) GoString() string {
	return s.String()
}

func (s *BindAuthPoapResponse) SetReqMsgId(v string) *BindAuthPoapResponse {
	s.ReqMsgId = &v
	return s
}

func (s *BindAuthPoapResponse) SetResultCode(v string) *BindAuthPoapResponse {
	s.ResultCode = &v
	return s
}

func (s *BindAuthPoapResponse) SetResultMsg(v string) *BindAuthPoapResponse {
	s.ResultMsg = &v
	return s
}

func (s *BindAuthPoapResponse) SetPoapId(v string) *BindAuthPoapResponse {
	s.PoapId = &v
	return s
}

type QueryAuthPoapRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// POAP徽章ID
	PoapId *string `json:"poap_id,omitempty" xml:"poap_id,omitempty" require:"true"`
}

func (s QueryAuthPoapRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryAuthPoapRequest) GoString() string {
	return s.String()
}

func (s *QueryAuthPoapRequest) SetAuthToken(v string) *QueryAuthPoapRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryAuthPoapRequest) SetProductInstanceId(v string) *QueryAuthPoapRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryAuthPoapRequest) SetPoapId(v string) *QueryAuthPoapRequest {
	s.PoapId = &v
	return s
}

type QueryAuthPoapResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 徽章信息信息
	PoapInfo *PoapInfo `json:"poap_info,omitempty" xml:"poap_info,omitempty"`
}

func (s QueryAuthPoapResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryAuthPoapResponse) GoString() string {
	return s.String()
}

func (s *QueryAuthPoapResponse) SetReqMsgId(v string) *QueryAuthPoapResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryAuthPoapResponse) SetResultCode(v string) *QueryAuthPoapResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryAuthPoapResponse) SetResultMsg(v string) *QueryAuthPoapResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryAuthPoapResponse) SetPoapInfo(v *PoapInfo) *QueryAuthPoapResponse {
	s.PoapInfo = v
	return s
}

type StartAuthDataRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 调用方生成的请求id，需保证唯一
	AuthId *string `json:"auth_id,omitempty" xml:"auth_id,omitempty" require:"true"`
	// 调用方请求的数据类型
	DataType *string `json:"data_type,omitempty" xml:"data_type,omitempty" require:"true"`
	// 授权结果通知调用方的方式
	CallbackType *string `json:"callback_type,omitempty" xml:"callback_type,omitempty" require:"true"`
	// 授权结果通知调用方的地址
	CallbackUrl *string `json:"callback_url,omitempty" xml:"callback_url,omitempty" require:"true"`
}

func (s StartAuthDataRequest) String() string {
	return tea.Prettify(s)
}

func (s StartAuthDataRequest) GoString() string {
	return s.String()
}

func (s *StartAuthDataRequest) SetAuthToken(v string) *StartAuthDataRequest {
	s.AuthToken = &v
	return s
}

func (s *StartAuthDataRequest) SetProductInstanceId(v string) *StartAuthDataRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *StartAuthDataRequest) SetAuthId(v string) *StartAuthDataRequest {
	s.AuthId = &v
	return s
}

func (s *StartAuthDataRequest) SetDataType(v string) *StartAuthDataRequest {
	s.DataType = &v
	return s
}

func (s *StartAuthDataRequest) SetCallbackType(v string) *StartAuthDataRequest {
	s.CallbackType = &v
	return s
}

func (s *StartAuthDataRequest) SetCallbackUrl(v string) *StartAuthDataRequest {
	s.CallbackUrl = &v
	return s
}

type StartAuthDataResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 授权宝小程序的地址，调用方需要访问该地址从而进行用户授权
	MyauthUrl *string `json:"myauth_url,omitempty" xml:"myauth_url,omitempty"`
}

func (s StartAuthDataResponse) String() string {
	return tea.Prettify(s)
}

func (s StartAuthDataResponse) GoString() string {
	return s.String()
}

func (s *StartAuthDataResponse) SetReqMsgId(v string) *StartAuthDataResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartAuthDataResponse) SetResultCode(v string) *StartAuthDataResponse {
	s.ResultCode = &v
	return s
}

func (s *StartAuthDataResponse) SetResultMsg(v string) *StartAuthDataResponse {
	s.ResultMsg = &v
	return s
}

func (s *StartAuthDataResponse) SetMyauthUrl(v string) *StartAuthDataResponse {
	s.MyauthUrl = &v
	return s
}

type GetAuthDataRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 调用方在发起授权请求时创建的请求id
	AuthId *string `json:"auth_id,omitempty" xml:"auth_id,omitempty" require:"true"`
	// 授权数据类型
	DataType *string `json:"data_type,omitempty" xml:"data_type,omitempty" require:"true"`
}

func (s GetAuthDataRequest) String() string {
	return tea.Prettify(s)
}

func (s GetAuthDataRequest) GoString() string {
	return s.String()
}

func (s *GetAuthDataRequest) SetAuthToken(v string) *GetAuthDataRequest {
	s.AuthToken = &v
	return s
}

func (s *GetAuthDataRequest) SetProductInstanceId(v string) *GetAuthDataRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *GetAuthDataRequest) SetAuthId(v string) *GetAuthDataRequest {
	s.AuthId = &v
	return s
}

func (s *GetAuthDataRequest) SetDataType(v string) *GetAuthDataRequest {
	s.DataType = &v
	return s
}

type GetAuthDataResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 使用调用方的公钥加密后的授权数据
	EncryptedData *string `json:"encrypted_data,omitempty" xml:"encrypted_data,omitempty"`
}

func (s GetAuthDataResponse) String() string {
	return tea.Prettify(s)
}

func (s GetAuthDataResponse) GoString() string {
	return s.String()
}

func (s *GetAuthDataResponse) SetReqMsgId(v string) *GetAuthDataResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetAuthDataResponse) SetResultCode(v string) *GetAuthDataResponse {
	s.ResultCode = &v
	return s
}

func (s *GetAuthDataResponse) SetResultMsg(v string) *GetAuthDataResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetAuthDataResponse) SetEncryptedData(v string) *GetAuthDataResponse {
	s.EncryptedData = &v
	return s
}

type QueryAuthIdentityauthRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 授权宝生成的bizId 与 核身token 用 ; 拼接成的字符串
	SecurityId *string `json:"security_id,omitempty" xml:"security_id,omitempty" require:"true"`
	// 核身的userid
	UserId *string `json:"user_id,omitempty" xml:"user_id,omitempty" require:"true"`
	// 核身对应的操作类型，目前只有0，代表创建did
	OperationType *int64 `json:"operation_type,omitempty" xml:"operation_type,omitempty" require:"true"`
	// 其它类型操作时的参数，json形式字符串
	Params *string `json:"params,omitempty" xml:"params,omitempty"`
}

func (s QueryAuthIdentityauthRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryAuthIdentityauthRequest) GoString() string {
	return s.String()
}

func (s *QueryAuthIdentityauthRequest) SetAuthToken(v string) *QueryAuthIdentityauthRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryAuthIdentityauthRequest) SetProductInstanceId(v string) *QueryAuthIdentityauthRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryAuthIdentityauthRequest) SetSecurityId(v string) *QueryAuthIdentityauthRequest {
	s.SecurityId = &v
	return s
}

func (s *QueryAuthIdentityauthRequest) SetUserId(v string) *QueryAuthIdentityauthRequest {
	s.UserId = &v
	return s
}

func (s *QueryAuthIdentityauthRequest) SetOperationType(v int64) *QueryAuthIdentityauthRequest {
	s.OperationType = &v
	return s
}

func (s *QueryAuthIdentityauthRequest) SetParams(v string) *QueryAuthIdentityauthRequest {
	s.Params = &v
	return s
}

type QueryAuthIdentityauthResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 核身结果
	VerifyResult *bool `json:"verify_result,omitempty" xml:"verify_result,omitempty"`
}

func (s QueryAuthIdentityauthResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryAuthIdentityauthResponse) GoString() string {
	return s.String()
}

func (s *QueryAuthIdentityauthResponse) SetReqMsgId(v string) *QueryAuthIdentityauthResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryAuthIdentityauthResponse) SetResultCode(v string) *QueryAuthIdentityauthResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryAuthIdentityauthResponse) SetResultMsg(v string) *QueryAuthIdentityauthResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryAuthIdentityauthResponse) SetVerifyResult(v bool) *QueryAuthIdentityauthResponse {
	s.VerifyResult = &v
	return s
}

type QueryAuthCertDetailurlRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 证书的bizId
	BizId *string `json:"biz_id,omitempty" xml:"biz_id,omitempty" require:"true"`
}

func (s QueryAuthCertDetailurlRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryAuthCertDetailurlRequest) GoString() string {
	return s.String()
}

func (s *QueryAuthCertDetailurlRequest) SetAuthToken(v string) *QueryAuthCertDetailurlRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryAuthCertDetailurlRequest) SetProductInstanceId(v string) *QueryAuthCertDetailurlRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryAuthCertDetailurlRequest) SetBizId(v string) *QueryAuthCertDetailurlRequest {
	s.BizId = &v
	return s
}

type QueryAuthCertDetailurlResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 证书的详情h5链接
	DetailUrl *string `json:"detail_url,omitempty" xml:"detail_url,omitempty"`
}

func (s QueryAuthCertDetailurlResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryAuthCertDetailurlResponse) GoString() string {
	return s.String()
}

func (s *QueryAuthCertDetailurlResponse) SetReqMsgId(v string) *QueryAuthCertDetailurlResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryAuthCertDetailurlResponse) SetResultCode(v string) *QueryAuthCertDetailurlResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryAuthCertDetailurlResponse) SetResultMsg(v string) *QueryAuthCertDetailurlResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryAuthCertDetailurlResponse) SetDetailUrl(v string) *QueryAuthCertDetailurlResponse {
	s.DetailUrl = &v
	return s
}

type NotifyAuthTaskStatusRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 任务id
	TaskId *string `json:"task_id,omitempty" xml:"task_id,omitempty" require:"true"`
	// 支uid
	UserId *string `json:"user_id,omitempty" xml:"user_id,omitempty" require:"true"`
	// NO_START, NO_SUBMIT, NOT_COMPLETE, COMPLETE
	Status *string `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// 状态发生时间
	HappenTime *string `json:"happen_time,omitempty" xml:"happen_time,omitempty" require:"true" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 业务流水号，问卷方传给主站后透传给授权宝
	OutBizNo *string `json:"out_biz_no,omitempty" xml:"out_biz_no,omitempty"`
}

func (s NotifyAuthTaskStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s NotifyAuthTaskStatusRequest) GoString() string {
	return s.String()
}

func (s *NotifyAuthTaskStatusRequest) SetAuthToken(v string) *NotifyAuthTaskStatusRequest {
	s.AuthToken = &v
	return s
}

func (s *NotifyAuthTaskStatusRequest) SetProductInstanceId(v string) *NotifyAuthTaskStatusRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *NotifyAuthTaskStatusRequest) SetTaskId(v string) *NotifyAuthTaskStatusRequest {
	s.TaskId = &v
	return s
}

func (s *NotifyAuthTaskStatusRequest) SetUserId(v string) *NotifyAuthTaskStatusRequest {
	s.UserId = &v
	return s
}

func (s *NotifyAuthTaskStatusRequest) SetStatus(v string) *NotifyAuthTaskStatusRequest {
	s.Status = &v
	return s
}

func (s *NotifyAuthTaskStatusRequest) SetHappenTime(v string) *NotifyAuthTaskStatusRequest {
	s.HappenTime = &v
	return s
}

func (s *NotifyAuthTaskStatusRequest) SetOutBizNo(v string) *NotifyAuthTaskStatusRequest {
	s.OutBizNo = &v
	return s
}

type NotifyAuthTaskStatusResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s NotifyAuthTaskStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s NotifyAuthTaskStatusResponse) GoString() string {
	return s.String()
}

func (s *NotifyAuthTaskStatusResponse) SetReqMsgId(v string) *NotifyAuthTaskStatusResponse {
	s.ReqMsgId = &v
	return s
}

func (s *NotifyAuthTaskStatusResponse) SetResultCode(v string) *NotifyAuthTaskStatusResponse {
	s.ResultCode = &v
	return s
}

func (s *NotifyAuthTaskStatusResponse) SetResultMsg(v string) *NotifyAuthTaskStatusResponse {
	s.ResultMsg = &v
	return s
}

type PauseAuthTaskRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 任务id
	TaskId *string `json:"task_id,omitempty" xml:"task_id,omitempty" require:"true"`
	// 操作者
	Operator *string `json:"operator,omitempty" xml:"operator,omitempty" require:"true"`
}

func (s PauseAuthTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s PauseAuthTaskRequest) GoString() string {
	return s.String()
}

func (s *PauseAuthTaskRequest) SetAuthToken(v string) *PauseAuthTaskRequest {
	s.AuthToken = &v
	return s
}

func (s *PauseAuthTaskRequest) SetProductInstanceId(v string) *PauseAuthTaskRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *PauseAuthTaskRequest) SetTaskId(v string) *PauseAuthTaskRequest {
	s.TaskId = &v
	return s
}

func (s *PauseAuthTaskRequest) SetOperator(v string) *PauseAuthTaskRequest {
	s.Operator = &v
	return s
}

type PauseAuthTaskResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 任务暂停成功/失败
	Data *bool `json:"data,omitempty" xml:"data,omitempty"`
}

func (s PauseAuthTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s PauseAuthTaskResponse) GoString() string {
	return s.String()
}

func (s *PauseAuthTaskResponse) SetReqMsgId(v string) *PauseAuthTaskResponse {
	s.ReqMsgId = &v
	return s
}

func (s *PauseAuthTaskResponse) SetResultCode(v string) *PauseAuthTaskResponse {
	s.ResultCode = &v
	return s
}

func (s *PauseAuthTaskResponse) SetResultMsg(v string) *PauseAuthTaskResponse {
	s.ResultMsg = &v
	return s
}

func (s *PauseAuthTaskResponse) SetData(v bool) *PauseAuthTaskResponse {
	s.Data = &v
	return s
}

type FinishAuthTaskRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 任务id
	TaskId *string `json:"task_id,omitempty" xml:"task_id,omitempty" require:"true"`
	// 操作者
	Operator *string `json:"operator,omitempty" xml:"operator,omitempty" require:"true"`
}

func (s FinishAuthTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s FinishAuthTaskRequest) GoString() string {
	return s.String()
}

func (s *FinishAuthTaskRequest) SetAuthToken(v string) *FinishAuthTaskRequest {
	s.AuthToken = &v
	return s
}

func (s *FinishAuthTaskRequest) SetProductInstanceId(v string) *FinishAuthTaskRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *FinishAuthTaskRequest) SetTaskId(v string) *FinishAuthTaskRequest {
	s.TaskId = &v
	return s
}

func (s *FinishAuthTaskRequest) SetOperator(v string) *FinishAuthTaskRequest {
	s.Operator = &v
	return s
}

type FinishAuthTaskResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 任务完成操作成功/失败
	Data *bool `json:"data,omitempty" xml:"data,omitempty"`
}

func (s FinishAuthTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s FinishAuthTaskResponse) GoString() string {
	return s.String()
}

func (s *FinishAuthTaskResponse) SetReqMsgId(v string) *FinishAuthTaskResponse {
	s.ReqMsgId = &v
	return s
}

func (s *FinishAuthTaskResponse) SetResultCode(v string) *FinishAuthTaskResponse {
	s.ResultCode = &v
	return s
}

func (s *FinishAuthTaskResponse) SetResultMsg(v string) *FinishAuthTaskResponse {
	s.ResultMsg = &v
	return s
}

func (s *FinishAuthTaskResponse) SetData(v bool) *FinishAuthTaskResponse {
	s.Data = &v
	return s
}

type ReopenAuthTaskRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 任务id
	TaskId *string `json:"task_id,omitempty" xml:"task_id,omitempty" require:"true"`
}

func (s ReopenAuthTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s ReopenAuthTaskRequest) GoString() string {
	return s.String()
}

func (s *ReopenAuthTaskRequest) SetAuthToken(v string) *ReopenAuthTaskRequest {
	s.AuthToken = &v
	return s
}

func (s *ReopenAuthTaskRequest) SetProductInstanceId(v string) *ReopenAuthTaskRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ReopenAuthTaskRequest) SetTaskId(v string) *ReopenAuthTaskRequest {
	s.TaskId = &v
	return s
}

type ReopenAuthTaskResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 任务重启成功/失败
	Data *bool `json:"data,omitempty" xml:"data,omitempty"`
}

func (s ReopenAuthTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s ReopenAuthTaskResponse) GoString() string {
	return s.String()
}

func (s *ReopenAuthTaskResponse) SetReqMsgId(v string) *ReopenAuthTaskResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ReopenAuthTaskResponse) SetResultCode(v string) *ReopenAuthTaskResponse {
	s.ResultCode = &v
	return s
}

func (s *ReopenAuthTaskResponse) SetResultMsg(v string) *ReopenAuthTaskResponse {
	s.ResultMsg = &v
	return s
}

func (s *ReopenAuthTaskResponse) SetData(v bool) *ReopenAuthTaskResponse {
	s.Data = &v
	return s
}

type OperateAuthTaskRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 任务id
	TaskId *string `json:"task_id,omitempty" xml:"task_id,omitempty" require:"true"`
	// 样本数量
	SampleNum *int64 `json:"sample_num,omitempty" xml:"sample_num,omitempty" require:"true"`
	// 操作人
	Operator *string `json:"operator,omitempty" xml:"operator,omitempty" require:"true"`
}

func (s OperateAuthTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s OperateAuthTaskRequest) GoString() string {
	return s.String()
}

func (s *OperateAuthTaskRequest) SetAuthToken(v string) *OperateAuthTaskRequest {
	s.AuthToken = &v
	return s
}

func (s *OperateAuthTaskRequest) SetProductInstanceId(v string) *OperateAuthTaskRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *OperateAuthTaskRequest) SetTaskId(v string) *OperateAuthTaskRequest {
	s.TaskId = &v
	return s
}

func (s *OperateAuthTaskRequest) SetSampleNum(v int64) *OperateAuthTaskRequest {
	s.SampleNum = &v
	return s
}

func (s *OperateAuthTaskRequest) SetOperator(v string) *OperateAuthTaskRequest {
	s.Operator = &v
	return s
}

type OperateAuthTaskResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s OperateAuthTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s OperateAuthTaskResponse) GoString() string {
	return s.String()
}

func (s *OperateAuthTaskResponse) SetReqMsgId(v string) *OperateAuthTaskResponse {
	s.ReqMsgId = &v
	return s
}

func (s *OperateAuthTaskResponse) SetResultCode(v string) *OperateAuthTaskResponse {
	s.ResultCode = &v
	return s
}

func (s *OperateAuthTaskResponse) SetResultMsg(v string) *OperateAuthTaskResponse {
	s.ResultMsg = &v
	return s
}

type QueryAuthTaskRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 标签列表
	TagCodeList []*string `json:"tag_code_list,omitempty" xml:"tag_code_list,omitempty" require:"true" type:"Repeated"`
}

func (s QueryAuthTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryAuthTaskRequest) GoString() string {
	return s.String()
}

func (s *QueryAuthTaskRequest) SetAuthToken(v string) *QueryAuthTaskRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryAuthTaskRequest) SetProductInstanceId(v string) *QueryAuthTaskRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryAuthTaskRequest) SetTagCodeList(v []*string) *QueryAuthTaskRequest {
	s.TagCodeList = v
	return s
}

type QueryAuthTaskResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 人群标签返回列表
	Data []*CrowdTagEnumResp `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s QueryAuthTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryAuthTaskResponse) GoString() string {
	return s.String()
}

func (s *QueryAuthTaskResponse) SetReqMsgId(v string) *QueryAuthTaskResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryAuthTaskResponse) SetResultCode(v string) *QueryAuthTaskResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryAuthTaskResponse) SetResultMsg(v string) *QueryAuthTaskResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryAuthTaskResponse) SetData(v []*CrowdTagEnumResp) *QueryAuthTaskResponse {
	s.Data = v
	return s
}

type CountAuthTaskRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 任务id
	TaskId *string `json:"task_id,omitempty" xml:"task_id,omitempty" require:"true"`
}

func (s CountAuthTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s CountAuthTaskRequest) GoString() string {
	return s.String()
}

func (s *CountAuthTaskRequest) SetAuthToken(v string) *CountAuthTaskRequest {
	s.AuthToken = &v
	return s
}

func (s *CountAuthTaskRequest) SetProductInstanceId(v string) *CountAuthTaskRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CountAuthTaskRequest) SetTaskId(v string) *CountAuthTaskRequest {
	s.TaskId = &v
	return s
}

type CountAuthTaskResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 任务对应的人群预估数量
	Data *int64 `json:"data,omitempty" xml:"data,omitempty"`
}

func (s CountAuthTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s CountAuthTaskResponse) GoString() string {
	return s.String()
}

func (s *CountAuthTaskResponse) SetReqMsgId(v string) *CountAuthTaskResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CountAuthTaskResponse) SetResultCode(v string) *CountAuthTaskResponse {
	s.ResultCode = &v
	return s
}

func (s *CountAuthTaskResponse) SetResultMsg(v string) *CountAuthTaskResponse {
	s.ResultMsg = &v
	return s
}

func (s *CountAuthTaskResponse) SetData(v int64) *CountAuthTaskResponse {
	s.Data = &v
	return s
}

type MatchAuthTaskRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 用户id
	UserId *string `json:"user_id,omitempty" xml:"user_id,omitempty" require:"true"`
	// 任务ID，支持批量
	TaskIds []*string `json:"task_ids,omitempty" xml:"task_ids,omitempty" require:"true" type:"Repeated"`
}

func (s MatchAuthTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s MatchAuthTaskRequest) GoString() string {
	return s.String()
}

func (s *MatchAuthTaskRequest) SetAuthToken(v string) *MatchAuthTaskRequest {
	s.AuthToken = &v
	return s
}

func (s *MatchAuthTaskRequest) SetProductInstanceId(v string) *MatchAuthTaskRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *MatchAuthTaskRequest) SetUserId(v string) *MatchAuthTaskRequest {
	s.UserId = &v
	return s
}

func (s *MatchAuthTaskRequest) SetTaskIds(v []*string) *MatchAuthTaskRequest {
	s.TaskIds = v
	return s
}

type MatchAuthTaskResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 人群匹配结果
	Data []*TaskCrowdMatchResp `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s MatchAuthTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s MatchAuthTaskResponse) GoString() string {
	return s.String()
}

func (s *MatchAuthTaskResponse) SetReqMsgId(v string) *MatchAuthTaskResponse {
	s.ReqMsgId = &v
	return s
}

func (s *MatchAuthTaskResponse) SetResultCode(v string) *MatchAuthTaskResponse {
	s.ResultCode = &v
	return s
}

func (s *MatchAuthTaskResponse) SetResultMsg(v string) *MatchAuthTaskResponse {
	s.ResultMsg = &v
	return s
}

func (s *MatchAuthTaskResponse) SetData(v []*TaskCrowdMatchResp) *MatchAuthTaskResponse {
	s.Data = v
	return s
}

type SubmitAuthTaskRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 任务标题(同一个租户不能重复)
	TaskName *string `json:"task_name,omitempty" xml:"task_name,omitempty" require:"true" maxLength:"20"`
	// appId
	AppId *string `json:"app_id,omitempty" xml:"app_id,omitempty" require:"true" maxLength:"32"`
	// 问卷id(同一个租户不能重复，只能包含字母、数组或者下划线)
	SurveyId *string `json:"survey_id,omitempty" xml:"survey_id,omitempty" require:"true" maxLength:"32"`
	// notes
	Notes *string `json:"notes,omitempty" xml:"notes,omitempty" maxLength:"32"`
	// 任务创建者
	Operator *string `json:"operator,omitempty" xml:"operator,omitempty" require:"true" maxLength:"100"`
	// banner标题
	BannerTitle *string `json:"banner_title,omitempty" xml:"banner_title,omitempty" require:"true" maxLength:"30"`
	// banner图片地址（最多支持3张）
	BannerImageUrls []*string `json:"banner_image_urls,omitempty" xml:"banner_image_urls,omitempty" type:"Repeated"`
	// 题量
	QuestionNum *int64 `json:"question_num,omitempty" xml:"question_num,omitempty" require:"true" maximum:"1000"`
	// 任务连接地址
	TaskLinkUrl *string `json:"task_link_url,omitempty" xml:"task_link_url,omitempty" require:"true" maxLength:"1000"`
	// 人群划分描述
	PersonDivideContent *string `json:"person_divide_content,omitempty" xml:"person_divide_content,omitempty" maxLength:"1000"`
	// 城市列表
	CityDivideUrls []*string `json:"city_divide_urls,omitempty" xml:"city_divide_urls,omitempty" type:"Repeated"`
	// 样本数量
	SampleNum *int64 `json:"sample_num,omitempty" xml:"sample_num,omitempty" require:"true" maximum:"100000"`
	// 产品下单code类型（1-资源包 2-后付费）
	ProductCodeType *string `json:"product_code_type,omitempty" xml:"product_code_type,omitempty" require:"true" maxLength:"4"`
	// 奖励渠道（0-手动发支付宝余额 1-海豚红包 2-问卷自带）
	PrizeChannel *int64 `json:"prize_channel,omitempty" xml:"prize_channel,omitempty" require:"true"`
	// 支付宝账号
	AlipayAccountId *string `json:"alipay_account_id,omitempty" xml:"alipay_account_id,omitempty" maxLength:"100"`
	// 奖励类型（0-定额红包）
	PrizeType *int64 `json:"prize_type,omitempty" xml:"prize_type,omitempty" require:"true"`
	// 全额红包金额（价格在0.01~100），奖励渠道为0和1时
	FullRedPacketAmount *string `json:"full_red_packet_amount,omitempty" xml:"full_red_packet_amount,omitempty" require:"true"`
	// 甄别红包金额
	ExamineRedPacketAmount *string `json:"examine_red_packet_amount,omitempty" xml:"examine_red_packet_amount,omitempty" require:"true"`
	// 全额红包描述，奖励渠道为2时，此处必填
	FullRedPacketTextInfo *string `json:"full_red_packet_text_info,omitempty" xml:"full_red_packet_text_info,omitempty"`
	// 证书内容
	CertContent *string `json:"cert_content,omitempty" xml:"cert_content,omitempty"`
	// 人群配置
	CrowdConfig *string `json:"crowd_config,omitempty" xml:"crowd_config,omitempty" require:"true"`
	// 是否草稿，1表示草稿
	Draft *string `json:"draft,omitempty" xml:"draft,omitempty" require:"true"`
}

func (s SubmitAuthTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitAuthTaskRequest) GoString() string {
	return s.String()
}

func (s *SubmitAuthTaskRequest) SetAuthToken(v string) *SubmitAuthTaskRequest {
	s.AuthToken = &v
	return s
}

func (s *SubmitAuthTaskRequest) SetProductInstanceId(v string) *SubmitAuthTaskRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *SubmitAuthTaskRequest) SetTaskName(v string) *SubmitAuthTaskRequest {
	s.TaskName = &v
	return s
}

func (s *SubmitAuthTaskRequest) SetAppId(v string) *SubmitAuthTaskRequest {
	s.AppId = &v
	return s
}

func (s *SubmitAuthTaskRequest) SetSurveyId(v string) *SubmitAuthTaskRequest {
	s.SurveyId = &v
	return s
}

func (s *SubmitAuthTaskRequest) SetNotes(v string) *SubmitAuthTaskRequest {
	s.Notes = &v
	return s
}

func (s *SubmitAuthTaskRequest) SetOperator(v string) *SubmitAuthTaskRequest {
	s.Operator = &v
	return s
}

func (s *SubmitAuthTaskRequest) SetBannerTitle(v string) *SubmitAuthTaskRequest {
	s.BannerTitle = &v
	return s
}

func (s *SubmitAuthTaskRequest) SetBannerImageUrls(v []*string) *SubmitAuthTaskRequest {
	s.BannerImageUrls = v
	return s
}

func (s *SubmitAuthTaskRequest) SetQuestionNum(v int64) *SubmitAuthTaskRequest {
	s.QuestionNum = &v
	return s
}

func (s *SubmitAuthTaskRequest) SetTaskLinkUrl(v string) *SubmitAuthTaskRequest {
	s.TaskLinkUrl = &v
	return s
}

func (s *SubmitAuthTaskRequest) SetPersonDivideContent(v string) *SubmitAuthTaskRequest {
	s.PersonDivideContent = &v
	return s
}

func (s *SubmitAuthTaskRequest) SetCityDivideUrls(v []*string) *SubmitAuthTaskRequest {
	s.CityDivideUrls = v
	return s
}

func (s *SubmitAuthTaskRequest) SetSampleNum(v int64) *SubmitAuthTaskRequest {
	s.SampleNum = &v
	return s
}

func (s *SubmitAuthTaskRequest) SetProductCodeType(v string) *SubmitAuthTaskRequest {
	s.ProductCodeType = &v
	return s
}

func (s *SubmitAuthTaskRequest) SetPrizeChannel(v int64) *SubmitAuthTaskRequest {
	s.PrizeChannel = &v
	return s
}

func (s *SubmitAuthTaskRequest) SetAlipayAccountId(v string) *SubmitAuthTaskRequest {
	s.AlipayAccountId = &v
	return s
}

func (s *SubmitAuthTaskRequest) SetPrizeType(v int64) *SubmitAuthTaskRequest {
	s.PrizeType = &v
	return s
}

func (s *SubmitAuthTaskRequest) SetFullRedPacketAmount(v string) *SubmitAuthTaskRequest {
	s.FullRedPacketAmount = &v
	return s
}

func (s *SubmitAuthTaskRequest) SetExamineRedPacketAmount(v string) *SubmitAuthTaskRequest {
	s.ExamineRedPacketAmount = &v
	return s
}

func (s *SubmitAuthTaskRequest) SetFullRedPacketTextInfo(v string) *SubmitAuthTaskRequest {
	s.FullRedPacketTextInfo = &v
	return s
}

func (s *SubmitAuthTaskRequest) SetCertContent(v string) *SubmitAuthTaskRequest {
	s.CertContent = &v
	return s
}

func (s *SubmitAuthTaskRequest) SetCrowdConfig(v string) *SubmitAuthTaskRequest {
	s.CrowdConfig = &v
	return s
}

func (s *SubmitAuthTaskRequest) SetDraft(v string) *SubmitAuthTaskRequest {
	s.Draft = &v
	return s
}

type SubmitAuthTaskResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 任务id
	Data *string `json:"data,omitempty" xml:"data,omitempty"`
}

func (s SubmitAuthTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitAuthTaskResponse) GoString() string {
	return s.String()
}

func (s *SubmitAuthTaskResponse) SetReqMsgId(v string) *SubmitAuthTaskResponse {
	s.ReqMsgId = &v
	return s
}

func (s *SubmitAuthTaskResponse) SetResultCode(v string) *SubmitAuthTaskResponse {
	s.ResultCode = &v
	return s
}

func (s *SubmitAuthTaskResponse) SetResultMsg(v string) *SubmitAuthTaskResponse {
	s.ResultMsg = &v
	return s
}

func (s *SubmitAuthTaskResponse) SetData(v string) *SubmitAuthTaskResponse {
	s.Data = &v
	return s
}

type DetailAuthTaskRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 任务ID
	TaskId *string `json:"task_id,omitempty" xml:"task_id,omitempty" require:"true"`
}

func (s DetailAuthTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s DetailAuthTaskRequest) GoString() string {
	return s.String()
}

func (s *DetailAuthTaskRequest) SetAuthToken(v string) *DetailAuthTaskRequest {
	s.AuthToken = &v
	return s
}

func (s *DetailAuthTaskRequest) SetProductInstanceId(v string) *DetailAuthTaskRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *DetailAuthTaskRequest) SetTaskId(v string) *DetailAuthTaskRequest {
	s.TaskId = &v
	return s
}

type DetailAuthTaskResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 历史任务信息
	OldTaskInfo *OldTaskInfo `json:"old_task_info,omitempty" xml:"old_task_info,omitempty"`
	// 最新的任务信息
	UpdateTaskInfo *UpdatedTaskInfo `json:"update_task_info,omitempty" xml:"update_task_info,omitempty"`
	// 是否有未完成的圈人任务
	HaveNotFinishedCrowdTask *bool `json:"have_not_finished_crowd_task,omitempty" xml:"have_not_finished_crowd_task,omitempty"`
}

func (s DetailAuthTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s DetailAuthTaskResponse) GoString() string {
	return s.String()
}

func (s *DetailAuthTaskResponse) SetReqMsgId(v string) *DetailAuthTaskResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DetailAuthTaskResponse) SetResultCode(v string) *DetailAuthTaskResponse {
	s.ResultCode = &v
	return s
}

func (s *DetailAuthTaskResponse) SetResultMsg(v string) *DetailAuthTaskResponse {
	s.ResultMsg = &v
	return s
}

func (s *DetailAuthTaskResponse) SetOldTaskInfo(v *OldTaskInfo) *DetailAuthTaskResponse {
	s.OldTaskInfo = v
	return s
}

func (s *DetailAuthTaskResponse) SetUpdateTaskInfo(v *UpdatedTaskInfo) *DetailAuthTaskResponse {
	s.UpdateTaskInfo = v
	return s
}

func (s *DetailAuthTaskResponse) SetHaveNotFinishedCrowdTask(v bool) *DetailAuthTaskResponse {
	s.HaveNotFinishedCrowdTask = &v
	return s
}

type UpdateAuthTaskRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 任务ID
	TaskId *string `json:"task_id,omitempty" xml:"task_id,omitempty" require:"true" maxLength:"20"`
	// 任务标题(同一个租户不能重复)
	TaskName *string `json:"task_name,omitempty" xml:"task_name,omitempty" require:"true" maxLength:"20"`
	// appId
	AppId *string `json:"app_id,omitempty" xml:"app_id,omitempty" require:"true" maxLength:"32"`
	// 问卷id(同一个租户不能重复，只能包含字母、数组或者下划线)
	SurveyId *string `json:"survey_id,omitempty" xml:"survey_id,omitempty" require:"true" maxLength:"32"`
	// notes
	Notes *string `json:"notes,omitempty" xml:"notes,omitempty" maxLength:"32"`
	// 任务调整操作者
	Operator *string `json:"operator,omitempty" xml:"operator,omitempty" require:"true" maxLength:"100"`
	// banner标题
	BannerTitle *string `json:"banner_title,omitempty" xml:"banner_title,omitempty" require:"true" maxLength:"30"`
	// banner图片地址（最多支持3张）
	BannerImageUrls []*string `json:"banner_image_urls,omitempty" xml:"banner_image_urls,omitempty" type:"Repeated"`
	// 题量
	QuestionNum *int64 `json:"question_num,omitempty" xml:"question_num,omitempty" require:"true"`
	// 任务连接地址
	TaskLinkUrl *string `json:"task_link_url,omitempty" xml:"task_link_url,omitempty" require:"true" maxLength:"1000"`
	// 人群划分描述
	PersonDivideContent *string `json:"person_divide_content,omitempty" xml:"person_divide_content,omitempty" maxLength:"1000"`
	// 城市列表
	CityDivideUrls []*string `json:"city_divide_urls,omitempty" xml:"city_divide_urls,omitempty" type:"Repeated"`
	// 样本数量
	SampleNum *int64 `json:"sample_num,omitempty" xml:"sample_num,omitempty" require:"true"`
	// 产品下单code类型（1-资源包 2-后付费）
	ProductCodeType *string `json:"product_code_type,omitempty" xml:"product_code_type,omitempty" require:"true" maxLength:"4"`
	// 奖励渠道（0-手动发支付宝余额 1-海豚红包 2-问卷自带）
	PrizeChannel *int64 `json:"prize_channel,omitempty" xml:"prize_channel,omitempty" require:"true"`
	// 支付宝账号
	AlipayAccountId *string `json:"alipay_account_id,omitempty" xml:"alipay_account_id,omitempty"`
	// 奖励类型（0-定额红包）
	PrizeType *int64 `json:"prize_type,omitempty" xml:"prize_type,omitempty" require:"true"`
	// 全额红包金额（价格在0.01~100），奖励渠道为0和1时
	FullRedPacketAmount *string `json:"full_red_packet_amount,omitempty" xml:"full_red_packet_amount,omitempty" require:"true"`
	// 甄别红包金额
	ExamineRedPacketAmount *string `json:"examine_red_packet_amount,omitempty" xml:"examine_red_packet_amount,omitempty" require:"true"`
	// 全额红包描述，奖励渠道为2时，此处必填
	FullRedPacketTextInfo *string `json:"full_red_packet_text_info,omitempty" xml:"full_red_packet_text_info,omitempty"`
	// 证书内容
	CertContent *string `json:"cert_content,omitempty" xml:"cert_content,omitempty" require:"true"`
	// 人群配置
	CrowdConfig *string `json:"crowd_config,omitempty" xml:"crowd_config,omitempty" require:"true"`
	// 是否草稿，1表示草稿
	Draft *string `json:"draft,omitempty" xml:"draft,omitempty" require:"true"`
}

func (s UpdateAuthTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateAuthTaskRequest) GoString() string {
	return s.String()
}

func (s *UpdateAuthTaskRequest) SetAuthToken(v string) *UpdateAuthTaskRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateAuthTaskRequest) SetProductInstanceId(v string) *UpdateAuthTaskRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UpdateAuthTaskRequest) SetTaskId(v string) *UpdateAuthTaskRequest {
	s.TaskId = &v
	return s
}

func (s *UpdateAuthTaskRequest) SetTaskName(v string) *UpdateAuthTaskRequest {
	s.TaskName = &v
	return s
}

func (s *UpdateAuthTaskRequest) SetAppId(v string) *UpdateAuthTaskRequest {
	s.AppId = &v
	return s
}

func (s *UpdateAuthTaskRequest) SetSurveyId(v string) *UpdateAuthTaskRequest {
	s.SurveyId = &v
	return s
}

func (s *UpdateAuthTaskRequest) SetNotes(v string) *UpdateAuthTaskRequest {
	s.Notes = &v
	return s
}

func (s *UpdateAuthTaskRequest) SetOperator(v string) *UpdateAuthTaskRequest {
	s.Operator = &v
	return s
}

func (s *UpdateAuthTaskRequest) SetBannerTitle(v string) *UpdateAuthTaskRequest {
	s.BannerTitle = &v
	return s
}

func (s *UpdateAuthTaskRequest) SetBannerImageUrls(v []*string) *UpdateAuthTaskRequest {
	s.BannerImageUrls = v
	return s
}

func (s *UpdateAuthTaskRequest) SetQuestionNum(v int64) *UpdateAuthTaskRequest {
	s.QuestionNum = &v
	return s
}

func (s *UpdateAuthTaskRequest) SetTaskLinkUrl(v string) *UpdateAuthTaskRequest {
	s.TaskLinkUrl = &v
	return s
}

func (s *UpdateAuthTaskRequest) SetPersonDivideContent(v string) *UpdateAuthTaskRequest {
	s.PersonDivideContent = &v
	return s
}

func (s *UpdateAuthTaskRequest) SetCityDivideUrls(v []*string) *UpdateAuthTaskRequest {
	s.CityDivideUrls = v
	return s
}

func (s *UpdateAuthTaskRequest) SetSampleNum(v int64) *UpdateAuthTaskRequest {
	s.SampleNum = &v
	return s
}

func (s *UpdateAuthTaskRequest) SetProductCodeType(v string) *UpdateAuthTaskRequest {
	s.ProductCodeType = &v
	return s
}

func (s *UpdateAuthTaskRequest) SetPrizeChannel(v int64) *UpdateAuthTaskRequest {
	s.PrizeChannel = &v
	return s
}

func (s *UpdateAuthTaskRequest) SetAlipayAccountId(v string) *UpdateAuthTaskRequest {
	s.AlipayAccountId = &v
	return s
}

func (s *UpdateAuthTaskRequest) SetPrizeType(v int64) *UpdateAuthTaskRequest {
	s.PrizeType = &v
	return s
}

func (s *UpdateAuthTaskRequest) SetFullRedPacketAmount(v string) *UpdateAuthTaskRequest {
	s.FullRedPacketAmount = &v
	return s
}

func (s *UpdateAuthTaskRequest) SetExamineRedPacketAmount(v string) *UpdateAuthTaskRequest {
	s.ExamineRedPacketAmount = &v
	return s
}

func (s *UpdateAuthTaskRequest) SetFullRedPacketTextInfo(v string) *UpdateAuthTaskRequest {
	s.FullRedPacketTextInfo = &v
	return s
}

func (s *UpdateAuthTaskRequest) SetCertContent(v string) *UpdateAuthTaskRequest {
	s.CertContent = &v
	return s
}

func (s *UpdateAuthTaskRequest) SetCrowdConfig(v string) *UpdateAuthTaskRequest {
	s.CrowdConfig = &v
	return s
}

func (s *UpdateAuthTaskRequest) SetDraft(v string) *UpdateAuthTaskRequest {
	s.Draft = &v
	return s
}

type UpdateAuthTaskResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateAuthTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateAuthTaskResponse) GoString() string {
	return s.String()
}

func (s *UpdateAuthTaskResponse) SetReqMsgId(v string) *UpdateAuthTaskResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateAuthTaskResponse) SetResultCode(v string) *UpdateAuthTaskResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateAuthTaskResponse) SetResultMsg(v string) *UpdateAuthTaskResponse {
	s.ResultMsg = &v
	return s
}

type CountAuthTaskCrowdRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 任务ID
	TaskId *string `json:"task_id,omitempty" xml:"task_id,omitempty" require:"true"`
}

func (s CountAuthTaskCrowdRequest) String() string {
	return tea.Prettify(s)
}

func (s CountAuthTaskCrowdRequest) GoString() string {
	return s.String()
}

func (s *CountAuthTaskCrowdRequest) SetAuthToken(v string) *CountAuthTaskCrowdRequest {
	s.AuthToken = &v
	return s
}

func (s *CountAuthTaskCrowdRequest) SetProductInstanceId(v string) *CountAuthTaskCrowdRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CountAuthTaskCrowdRequest) SetTaskId(v string) *CountAuthTaskCrowdRequest {
	s.TaskId = &v
	return s
}

type CountAuthTaskCrowdResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 人群预估数量
	CrowdCount *int64 `json:"crowd_count,omitempty" xml:"crowd_count,omitempty"`
	// 人群导出时间
	BizDate *string `json:"biz_date,omitempty" xml:"biz_date,omitempty"`
	// 生效的圈选人群的设置
	CrowdConfigInfo *string `json:"crowd_config_info,omitempty" xml:"crowd_config_info,omitempty"`
	// EXPORTING 导出中
	// SUCCESS 导出成功
	// FAIL 导出失败
	ExportStatus *string `json:"export_status,omitempty" xml:"export_status,omitempty"`
}

func (s CountAuthTaskCrowdResponse) String() string {
	return tea.Prettify(s)
}

func (s CountAuthTaskCrowdResponse) GoString() string {
	return s.String()
}

func (s *CountAuthTaskCrowdResponse) SetReqMsgId(v string) *CountAuthTaskCrowdResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CountAuthTaskCrowdResponse) SetResultCode(v string) *CountAuthTaskCrowdResponse {
	s.ResultCode = &v
	return s
}

func (s *CountAuthTaskCrowdResponse) SetResultMsg(v string) *CountAuthTaskCrowdResponse {
	s.ResultMsg = &v
	return s
}

func (s *CountAuthTaskCrowdResponse) SetCrowdCount(v int64) *CountAuthTaskCrowdResponse {
	s.CrowdCount = &v
	return s
}

func (s *CountAuthTaskCrowdResponse) SetBizDate(v string) *CountAuthTaskCrowdResponse {
	s.BizDate = &v
	return s
}

func (s *CountAuthTaskCrowdResponse) SetCrowdConfigInfo(v string) *CountAuthTaskCrowdResponse {
	s.CrowdConfigInfo = &v
	return s
}

func (s *CountAuthTaskCrowdResponse) SetExportStatus(v string) *CountAuthTaskCrowdResponse {
	s.ExportStatus = &v
	return s
}

type MatchAuthTaskCrowdRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 用户ID
	UserId *string `json:"user_id,omitempty" xml:"user_id,omitempty" require:"true"`
	// 任务ID
	TaskIds []*string `json:"task_ids,omitempty" xml:"task_ids,omitempty" require:"true" type:"Repeated"`
}

func (s MatchAuthTaskCrowdRequest) String() string {
	return tea.Prettify(s)
}

func (s MatchAuthTaskCrowdRequest) GoString() string {
	return s.String()
}

func (s *MatchAuthTaskCrowdRequest) SetAuthToken(v string) *MatchAuthTaskCrowdRequest {
	s.AuthToken = &v
	return s
}

func (s *MatchAuthTaskCrowdRequest) SetProductInstanceId(v string) *MatchAuthTaskCrowdRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *MatchAuthTaskCrowdRequest) SetUserId(v string) *MatchAuthTaskCrowdRequest {
	s.UserId = &v
	return s
}

func (s *MatchAuthTaskCrowdRequest) SetTaskIds(v []*string) *MatchAuthTaskCrowdRequest {
	s.TaskIds = v
	return s
}

type MatchAuthTaskCrowdResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 人群匹配结果
	Data []*TaskCrowdMatchResp `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s MatchAuthTaskCrowdResponse) String() string {
	return tea.Prettify(s)
}

func (s MatchAuthTaskCrowdResponse) GoString() string {
	return s.String()
}

func (s *MatchAuthTaskCrowdResponse) SetReqMsgId(v string) *MatchAuthTaskCrowdResponse {
	s.ReqMsgId = &v
	return s
}

func (s *MatchAuthTaskCrowdResponse) SetResultCode(v string) *MatchAuthTaskCrowdResponse {
	s.ResultCode = &v
	return s
}

func (s *MatchAuthTaskCrowdResponse) SetResultMsg(v string) *MatchAuthTaskCrowdResponse {
	s.ResultMsg = &v
	return s
}

func (s *MatchAuthTaskCrowdResponse) SetData(v []*TaskCrowdMatchResp) *MatchAuthTaskCrowdResponse {
	s.Data = v
	return s
}

type QueryAuthTaskLabelRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 人群标签
	TagCodeList []*string `json:"tag_code_list,omitempty" xml:"tag_code_list,omitempty" require:"true" type:"Repeated"`
}

func (s QueryAuthTaskLabelRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryAuthTaskLabelRequest) GoString() string {
	return s.String()
}

func (s *QueryAuthTaskLabelRequest) SetAuthToken(v string) *QueryAuthTaskLabelRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryAuthTaskLabelRequest) SetProductInstanceId(v string) *QueryAuthTaskLabelRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryAuthTaskLabelRequest) SetTagCodeList(v []*string) *QueryAuthTaskLabelRequest {
	s.TagCodeList = v
	return s
}

type QueryAuthTaskLabelResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 人群标签返回结果
	Data []*CrowdTagEnumResp `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s QueryAuthTaskLabelResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryAuthTaskLabelResponse) GoString() string {
	return s.String()
}

func (s *QueryAuthTaskLabelResponse) SetReqMsgId(v string) *QueryAuthTaskLabelResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryAuthTaskLabelResponse) SetResultCode(v string) *QueryAuthTaskLabelResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryAuthTaskLabelResponse) SetResultMsg(v string) *QueryAuthTaskLabelResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryAuthTaskLabelResponse) SetData(v []*CrowdTagEnumResp) *QueryAuthTaskLabelResponse {
	s.Data = v
	return s
}

type ListAuthTaskRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 任务名称/任务id/自有id 模糊搜索
	TaskName *string `json:"task_name,omitempty" xml:"task_name,omitempty"`
	// 页码，默认是0开始
	PageNo *int64 `json:"page_no,omitempty" xml:"page_no,omitempty" require:"true"`
	// 每页大小，默认是6
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
	// 操作人列表
	Operators []*string `json:"operators,omitempty" xml:"operators,omitempty" type:"Repeated"`
}

func (s ListAuthTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s ListAuthTaskRequest) GoString() string {
	return s.String()
}

func (s *ListAuthTaskRequest) SetAuthToken(v string) *ListAuthTaskRequest {
	s.AuthToken = &v
	return s
}

func (s *ListAuthTaskRequest) SetProductInstanceId(v string) *ListAuthTaskRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ListAuthTaskRequest) SetTaskName(v string) *ListAuthTaskRequest {
	s.TaskName = &v
	return s
}

func (s *ListAuthTaskRequest) SetPageNo(v int64) *ListAuthTaskRequest {
	s.PageNo = &v
	return s
}

func (s *ListAuthTaskRequest) SetPageSize(v int64) *ListAuthTaskRequest {
	s.PageSize = &v
	return s
}

func (s *ListAuthTaskRequest) SetOperators(v []*string) *ListAuthTaskRequest {
	s.Operators = v
	return s
}

type ListAuthTaskResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 任务分页列表返回体
	Data *PageTaskListDTO `json:"data,omitempty" xml:"data,omitempty"`
}

func (s ListAuthTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s ListAuthTaskResponse) GoString() string {
	return s.String()
}

func (s *ListAuthTaskResponse) SetReqMsgId(v string) *ListAuthTaskResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListAuthTaskResponse) SetResultCode(v string) *ListAuthTaskResponse {
	s.ResultCode = &v
	return s
}

func (s *ListAuthTaskResponse) SetResultMsg(v string) *ListAuthTaskResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListAuthTaskResponse) SetData(v *PageTaskListDTO) *ListAuthTaskResponse {
	s.Data = v
	return s
}

type UnbindAuthEquityRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 权益开通时ISV返回的业务订单号
	OutBizNo *string `json:"out_biz_no,omitempty" xml:"out_biz_no,omitempty" require:"true"`
}

func (s UnbindAuthEquityRequest) String() string {
	return tea.Prettify(s)
}

func (s UnbindAuthEquityRequest) GoString() string {
	return s.String()
}

func (s *UnbindAuthEquityRequest) SetAuthToken(v string) *UnbindAuthEquityRequest {
	s.AuthToken = &v
	return s
}

func (s *UnbindAuthEquityRequest) SetProductInstanceId(v string) *UnbindAuthEquityRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UnbindAuthEquityRequest) SetOutBizNo(v string) *UnbindAuthEquityRequest {
	s.OutBizNo = &v
	return s
}

type UnbindAuthEquityResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UnbindAuthEquityResponse) String() string {
	return tea.Prettify(s)
}

func (s UnbindAuthEquityResponse) GoString() string {
	return s.String()
}

func (s *UnbindAuthEquityResponse) SetReqMsgId(v string) *UnbindAuthEquityResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UnbindAuthEquityResponse) SetResultCode(v string) *UnbindAuthEquityResponse {
	s.ResultCode = &v
	return s
}

func (s *UnbindAuthEquityResponse) SetResultMsg(v string) *UnbindAuthEquityResponse {
	s.ResultMsg = &v
	return s
}

type RepayAuthEquityRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 权益开通时ISV返回的业务订单号
	OutBizNo *string `json:"out_biz_no,omitempty" xml:"out_biz_no,omitempty" require:"true"`
	// 需要退款的交易订单号(权益扣款成功后回调消息返回的交易号)
	TradeNo *string `json:"trade_no,omitempty" xml:"trade_no,omitempty" require:"true"`
}

func (s RepayAuthEquityRequest) String() string {
	return tea.Prettify(s)
}

func (s RepayAuthEquityRequest) GoString() string {
	return s.String()
}

func (s *RepayAuthEquityRequest) SetAuthToken(v string) *RepayAuthEquityRequest {
	s.AuthToken = &v
	return s
}

func (s *RepayAuthEquityRequest) SetProductInstanceId(v string) *RepayAuthEquityRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *RepayAuthEquityRequest) SetOutBizNo(v string) *RepayAuthEquityRequest {
	s.OutBizNo = &v
	return s
}

func (s *RepayAuthEquityRequest) SetTradeNo(v string) *RepayAuthEquityRequest {
	s.TradeNo = &v
	return s
}

type RepayAuthEquityResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s RepayAuthEquityResponse) String() string {
	return tea.Prettify(s)
}

func (s RepayAuthEquityResponse) GoString() string {
	return s.String()
}

func (s *RepayAuthEquityResponse) SetReqMsgId(v string) *RepayAuthEquityResponse {
	s.ReqMsgId = &v
	return s
}

func (s *RepayAuthEquityResponse) SetResultCode(v string) *RepayAuthEquityResponse {
	s.ResultCode = &v
	return s
}

func (s *RepayAuthEquityResponse) SetResultMsg(v string) *RepayAuthEquityResponse {
	s.ResultMsg = &v
	return s
}

type VerifyAuthTokenValidityRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 用户ID
	UserId *string `json:"user_id,omitempty" xml:"user_id,omitempty" require:"true"`
	// 授权凭证
	AuthorizedToken *string `json:"authorized_token,omitempty" xml:"authorized_token,omitempty" require:"true"`
	// 数据产品类型
	DataType *string `json:"data_type,omitempty" xml:"data_type,omitempty" require:"true"`
	// 授权场景码
	SceneCode *string `json:"scene_code,omitempty" xml:"scene_code,omitempty" require:"true"`
}

func (s VerifyAuthTokenValidityRequest) String() string {
	return tea.Prettify(s)
}

func (s VerifyAuthTokenValidityRequest) GoString() string {
	return s.String()
}

func (s *VerifyAuthTokenValidityRequest) SetAuthToken(v string) *VerifyAuthTokenValidityRequest {
	s.AuthToken = &v
	return s
}

func (s *VerifyAuthTokenValidityRequest) SetProductInstanceId(v string) *VerifyAuthTokenValidityRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *VerifyAuthTokenValidityRequest) SetUserId(v string) *VerifyAuthTokenValidityRequest {
	s.UserId = &v
	return s
}

func (s *VerifyAuthTokenValidityRequest) SetAuthorizedToken(v string) *VerifyAuthTokenValidityRequest {
	s.AuthorizedToken = &v
	return s
}

func (s *VerifyAuthTokenValidityRequest) SetDataType(v string) *VerifyAuthTokenValidityRequest {
	s.DataType = &v
	return s
}

func (s *VerifyAuthTokenValidityRequest) SetSceneCode(v string) *VerifyAuthTokenValidityRequest {
	s.SceneCode = &v
	return s
}

type VerifyAuthTokenValidityResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 验证结果（ture表示通过，false表示不通过）
	VerifyResult *bool `json:"verify_result,omitempty" xml:"verify_result,omitempty"`
	// 错误信息
	ErrMsg *string `json:"err_msg,omitempty" xml:"err_msg,omitempty"`
}

func (s VerifyAuthTokenValidityResponse) String() string {
	return tea.Prettify(s)
}

func (s VerifyAuthTokenValidityResponse) GoString() string {
	return s.String()
}

func (s *VerifyAuthTokenValidityResponse) SetReqMsgId(v string) *VerifyAuthTokenValidityResponse {
	s.ReqMsgId = &v
	return s
}

func (s *VerifyAuthTokenValidityResponse) SetResultCode(v string) *VerifyAuthTokenValidityResponse {
	s.ResultCode = &v
	return s
}

func (s *VerifyAuthTokenValidityResponse) SetResultMsg(v string) *VerifyAuthTokenValidityResponse {
	s.ResultMsg = &v
	return s
}

func (s *VerifyAuthTokenValidityResponse) SetVerifyResult(v bool) *VerifyAuthTokenValidityResponse {
	s.VerifyResult = &v
	return s
}

func (s *VerifyAuthTokenValidityResponse) SetErrMsg(v string) *VerifyAuthTokenValidityResponse {
	s.ErrMsg = &v
	return s
}

type VerifyAuthBusinessUserRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 用户id
	UserId *string `json:"user_id,omitempty" xml:"user_id,omitempty" require:"true"`
	// 场景码
	SceneCode *string `json:"scene_code,omitempty" xml:"scene_code,omitempty" require:"true"`
}

func (s VerifyAuthBusinessUserRequest) String() string {
	return tea.Prettify(s)
}

func (s VerifyAuthBusinessUserRequest) GoString() string {
	return s.String()
}

func (s *VerifyAuthBusinessUserRequest) SetAuthToken(v string) *VerifyAuthBusinessUserRequest {
	s.AuthToken = &v
	return s
}

func (s *VerifyAuthBusinessUserRequest) SetProductInstanceId(v string) *VerifyAuthBusinessUserRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *VerifyAuthBusinessUserRequest) SetUserId(v string) *VerifyAuthBusinessUserRequest {
	s.UserId = &v
	return s
}

func (s *VerifyAuthBusinessUserRequest) SetSceneCode(v string) *VerifyAuthBusinessUserRequest {
	s.SceneCode = &v
	return s
}

type VerifyAuthBusinessUserResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 用户当前记录状态
	RecordType *string `json:"record_type,omitempty" xml:"record_type,omitempty"`
	// 加密后的用户授权记录id
	EncryptBizId *string `json:"encrypt_biz_id,omitempty" xml:"encrypt_biz_id,omitempty"`
	// 授权协议信息列表
	AgreementConfigInfoList []*AgreementConfigInfoDTO `json:"agreement_config_info_list,omitempty" xml:"agreement_config_info_list,omitempty" type:"Repeated"`
}

func (s VerifyAuthBusinessUserResponse) String() string {
	return tea.Prettify(s)
}

func (s VerifyAuthBusinessUserResponse) GoString() string {
	return s.String()
}

func (s *VerifyAuthBusinessUserResponse) SetReqMsgId(v string) *VerifyAuthBusinessUserResponse {
	s.ReqMsgId = &v
	return s
}

func (s *VerifyAuthBusinessUserResponse) SetResultCode(v string) *VerifyAuthBusinessUserResponse {
	s.ResultCode = &v
	return s
}

func (s *VerifyAuthBusinessUserResponse) SetResultMsg(v string) *VerifyAuthBusinessUserResponse {
	s.ResultMsg = &v
	return s
}

func (s *VerifyAuthBusinessUserResponse) SetRecordType(v string) *VerifyAuthBusinessUserResponse {
	s.RecordType = &v
	return s
}

func (s *VerifyAuthBusinessUserResponse) SetEncryptBizId(v string) *VerifyAuthBusinessUserResponse {
	s.EncryptBizId = &v
	return s
}

func (s *VerifyAuthBusinessUserResponse) SetAgreementConfigInfoList(v []*AgreementConfigInfoDTO) *VerifyAuthBusinessUserResponse {
	s.AgreementConfigInfoList = v
	return s
}

type SubmitAuthBusinessDataRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 用户id
	UserId *string `json:"user_id,omitempty" xml:"user_id,omitempty" require:"true"`
	// 场景码
	SceneCode *string `json:"scene_code,omitempty" xml:"scene_code,omitempty" require:"true"`
	// 推送的数据内容，json字符串形式
	PushDataContent *string `json:"push_data_content,omitempty" xml:"push_data_content,omitempty" require:"true"`
}

func (s SubmitAuthBusinessDataRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitAuthBusinessDataRequest) GoString() string {
	return s.String()
}

func (s *SubmitAuthBusinessDataRequest) SetAuthToken(v string) *SubmitAuthBusinessDataRequest {
	s.AuthToken = &v
	return s
}

func (s *SubmitAuthBusinessDataRequest) SetProductInstanceId(v string) *SubmitAuthBusinessDataRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *SubmitAuthBusinessDataRequest) SetUserId(v string) *SubmitAuthBusinessDataRequest {
	s.UserId = &v
	return s
}

func (s *SubmitAuthBusinessDataRequest) SetSceneCode(v string) *SubmitAuthBusinessDataRequest {
	s.SceneCode = &v
	return s
}

func (s *SubmitAuthBusinessDataRequest) SetPushDataContent(v string) *SubmitAuthBusinessDataRequest {
	s.PushDataContent = &v
	return s
}

type SubmitAuthBusinessDataResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 推送是否成功
	PushSuccess *bool `json:"push_success,omitempty" xml:"push_success,omitempty"`
}

func (s SubmitAuthBusinessDataResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitAuthBusinessDataResponse) GoString() string {
	return s.String()
}

func (s *SubmitAuthBusinessDataResponse) SetReqMsgId(v string) *SubmitAuthBusinessDataResponse {
	s.ReqMsgId = &v
	return s
}

func (s *SubmitAuthBusinessDataResponse) SetResultCode(v string) *SubmitAuthBusinessDataResponse {
	s.ResultCode = &v
	return s
}

func (s *SubmitAuthBusinessDataResponse) SetResultMsg(v string) *SubmitAuthBusinessDataResponse {
	s.ResultMsg = &v
	return s
}

func (s *SubmitAuthBusinessDataResponse) SetPushSuccess(v bool) *SubmitAuthBusinessDataResponse {
	s.PushSuccess = &v
	return s
}

type UploadAuthBusinessCardRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 用户id
	UserId *string `json:"user_id,omitempty" xml:"user_id,omitempty" require:"true"`
	// 运营场景码
	SceneCode *string `json:"scene_code,omitempty" xml:"scene_code,omitempty" require:"true"`
	// 上传证件类型
	FileType *string `json:"file_type,omitempty" xml:"file_type,omitempty" require:"true"`
}

func (s UploadAuthBusinessCardRequest) String() string {
	return tea.Prettify(s)
}

func (s UploadAuthBusinessCardRequest) GoString() string {
	return s.String()
}

func (s *UploadAuthBusinessCardRequest) SetAuthToken(v string) *UploadAuthBusinessCardRequest {
	s.AuthToken = &v
	return s
}

func (s *UploadAuthBusinessCardRequest) SetProductInstanceId(v string) *UploadAuthBusinessCardRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UploadAuthBusinessCardRequest) SetUserId(v string) *UploadAuthBusinessCardRequest {
	s.UserId = &v
	return s
}

func (s *UploadAuthBusinessCardRequest) SetSceneCode(v string) *UploadAuthBusinessCardRequest {
	s.SceneCode = &v
	return s
}

func (s *UploadAuthBusinessCardRequest) SetFileType(v string) *UploadAuthBusinessCardRequest {
	s.FileType = &v
	return s
}

type UploadAuthBusinessCardResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// oss文件上传策略
	PresignedUrlPolicy *PresignedUrlPolicy `json:"presigned_url_policy,omitempty" xml:"presigned_url_policy,omitempty"`
}

func (s UploadAuthBusinessCardResponse) String() string {
	return tea.Prettify(s)
}

func (s UploadAuthBusinessCardResponse) GoString() string {
	return s.String()
}

func (s *UploadAuthBusinessCardResponse) SetReqMsgId(v string) *UploadAuthBusinessCardResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UploadAuthBusinessCardResponse) SetResultCode(v string) *UploadAuthBusinessCardResponse {
	s.ResultCode = &v
	return s
}

func (s *UploadAuthBusinessCardResponse) SetResultMsg(v string) *UploadAuthBusinessCardResponse {
	s.ResultMsg = &v
	return s
}

func (s *UploadAuthBusinessCardResponse) SetPresignedUrlPolicy(v *PresignedUrlPolicy) *UploadAuthBusinessCardResponse {
	s.PresignedUrlPolicy = v
	return s
}

type QueryAuthVcTransactionRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 查询目标可验证声明的ID
	VcId *string `json:"vc_id,omitempty" xml:"vc_id,omitempty" require:"true"`
	// 业务类型，通常需要与授权宝服务沟通确定，业务类型可能影响此接口内部实现逻辑，长度不超过32字符。
	BizType *string `json:"biz_type,omitempty" xml:"biz_type,omitempty" require:"true"`
	// 如果此字段为空，则默认使用当前请求租户在授权宝配置的did来进行查询(此did需授权有权限)，此外情况都需要指定目标vc_id的owner_did
	//
	OwnerDid *string `json:"owner_did,omitempty" xml:"owner_did,omitempty"`
}

func (s QueryAuthVcTransactionRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryAuthVcTransactionRequest) GoString() string {
	return s.String()
}

func (s *QueryAuthVcTransactionRequest) SetAuthToken(v string) *QueryAuthVcTransactionRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryAuthVcTransactionRequest) SetProductInstanceId(v string) *QueryAuthVcTransactionRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryAuthVcTransactionRequest) SetVcId(v string) *QueryAuthVcTransactionRequest {
	s.VcId = &v
	return s
}

func (s *QueryAuthVcTransactionRequest) SetBizType(v string) *QueryAuthVcTransactionRequest {
	s.BizType = &v
	return s
}

func (s *QueryAuthVcTransactionRequest) SetOwnerDid(v string) *QueryAuthVcTransactionRequest {
	s.OwnerDid = &v
	return s
}

type QueryAuthVcTransactionResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 链上交易信息
	TxInfo *TxInfo `json:"tx_info,omitempty" xml:"tx_info,omitempty"`
}

func (s QueryAuthVcTransactionResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryAuthVcTransactionResponse) GoString() string {
	return s.String()
}

func (s *QueryAuthVcTransactionResponse) SetReqMsgId(v string) *QueryAuthVcTransactionResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryAuthVcTransactionResponse) SetResultCode(v string) *QueryAuthVcTransactionResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryAuthVcTransactionResponse) SetResultMsg(v string) *QueryAuthVcTransactionResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryAuthVcTransactionResponse) SetTxInfo(v *TxInfo) *QueryAuthVcTransactionResponse {
	s.TxInfo = v
	return s
}

type AuthAuthBusinessUserRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 加密后的授权记录bizId
	EncryptBizId *string `json:"encrypt_biz_id,omitempty" xml:"encrypt_biz_id,omitempty" require:"true"`
	// 唯一场景码
	SceneCode *string `json:"scene_code,omitempty" xml:"scene_code,omitempty" require:"true"`
}

func (s AuthAuthBusinessUserRequest) String() string {
	return tea.Prettify(s)
}

func (s AuthAuthBusinessUserRequest) GoString() string {
	return s.String()
}

func (s *AuthAuthBusinessUserRequest) SetAuthToken(v string) *AuthAuthBusinessUserRequest {
	s.AuthToken = &v
	return s
}

func (s *AuthAuthBusinessUserRequest) SetProductInstanceId(v string) *AuthAuthBusinessUserRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *AuthAuthBusinessUserRequest) SetEncryptBizId(v string) *AuthAuthBusinessUserRequest {
	s.EncryptBizId = &v
	return s
}

func (s *AuthAuthBusinessUserRequest) SetSceneCode(v string) *AuthAuthBusinessUserRequest {
	s.SceneCode = &v
	return s
}

type AuthAuthBusinessUserResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 确认授权后生成的授权凭证
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
}

func (s AuthAuthBusinessUserResponse) String() string {
	return tea.Prettify(s)
}

func (s AuthAuthBusinessUserResponse) GoString() string {
	return s.String()
}

func (s *AuthAuthBusinessUserResponse) SetReqMsgId(v string) *AuthAuthBusinessUserResponse {
	s.ReqMsgId = &v
	return s
}

func (s *AuthAuthBusinessUserResponse) SetResultCode(v string) *AuthAuthBusinessUserResponse {
	s.ResultCode = &v
	return s
}

func (s *AuthAuthBusinessUserResponse) SetResultMsg(v string) *AuthAuthBusinessUserResponse {
	s.ResultMsg = &v
	return s
}

func (s *AuthAuthBusinessUserResponse) SetAuthToken(v string) *AuthAuthBusinessUserResponse {
	s.AuthToken = &v
	return s
}

type StartDidCorporateAgentcreateRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 场景码，找dis工作人员进行分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
	// 扩展字段
	ExtensionInfo *string `json:"extension_info,omitempty" xml:"extension_info,omitempty"`
	// 所有需要关联的外键，外键必须已did auth key controller的did作为前缀+“sidekey:”+外键
	Indexs []*string `json:"indexs,omitempty" xml:"indexs,omitempty" type:"Repeated"`
	// 企业名称
	OwnerName *string `json:"owner_name,omitempty" xml:"owner_name,omitempty"`
	// 自定义企业唯一id，企业在自有模式下的唯一号bid的hash值，调用者需要保证其唯一性
	OwnerUid *string `json:"owner_uid,omitempty" xml:"owner_uid,omitempty" require:"true" maxLength:"128"`
	// 携带自己定义的服务类型
	Services []*DidDocServicesInfo `json:"services,omitempty" xml:"services,omitempty" type:"Repeated"`
}

func (s StartDidCorporateAgentcreateRequest) String() string {
	return tea.Prettify(s)
}

func (s StartDidCorporateAgentcreateRequest) GoString() string {
	return s.String()
}

func (s *StartDidCorporateAgentcreateRequest) SetAuthToken(v string) *StartDidCorporateAgentcreateRequest {
	s.AuthToken = &v
	return s
}

func (s *StartDidCorporateAgentcreateRequest) SetProductInstanceId(v string) *StartDidCorporateAgentcreateRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *StartDidCorporateAgentcreateRequest) SetBizCode(v string) *StartDidCorporateAgentcreateRequest {
	s.BizCode = &v
	return s
}

func (s *StartDidCorporateAgentcreateRequest) SetExtensionInfo(v string) *StartDidCorporateAgentcreateRequest {
	s.ExtensionInfo = &v
	return s
}

func (s *StartDidCorporateAgentcreateRequest) SetIndexs(v []*string) *StartDidCorporateAgentcreateRequest {
	s.Indexs = v
	return s
}

func (s *StartDidCorporateAgentcreateRequest) SetOwnerName(v string) *StartDidCorporateAgentcreateRequest {
	s.OwnerName = &v
	return s
}

func (s *StartDidCorporateAgentcreateRequest) SetOwnerUid(v string) *StartDidCorporateAgentcreateRequest {
	s.OwnerUid = &v
	return s
}

func (s *StartDidCorporateAgentcreateRequest) SetServices(v []*DidDocServicesInfo) *StartDidCorporateAgentcreateRequest {
	s.Services = v
	return s
}

type StartDidCorporateAgentcreateResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 生成的did字符串
	Did *string `json:"did,omitempty" xml:"did,omitempty"`
}

func (s StartDidCorporateAgentcreateResponse) String() string {
	return tea.Prettify(s)
}

func (s StartDidCorporateAgentcreateResponse) GoString() string {
	return s.String()
}

func (s *StartDidCorporateAgentcreateResponse) SetReqMsgId(v string) *StartDidCorporateAgentcreateResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartDidCorporateAgentcreateResponse) SetResultCode(v string) *StartDidCorporateAgentcreateResponse {
	s.ResultCode = &v
	return s
}

func (s *StartDidCorporateAgentcreateResponse) SetResultMsg(v string) *StartDidCorporateAgentcreateResponse {
	s.ResultMsg = &v
	return s
}

func (s *StartDidCorporateAgentcreateResponse) SetDid(v string) *StartDidCorporateAgentcreateResponse {
	s.Did = &v
	return s
}

type StartDidPersonAgentcreateRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 企业自定信息
	ExtensionInfo *string `json:"extension_info,omitempty" xml:"extension_info,omitempty"`
	// 所有需要关联的外键，外键必须已did auth key controller的did作为前缀+“sidekey:”+外键
	Indexs []*string `json:"indexs,omitempty" xml:"indexs,omitempty" type:"Repeated"`
	// 名称
	OwnerName *string `json:"owner_name,omitempty" xml:"owner_name,omitempty"`
	// 唯一号，比如可以是hash(证件类型+企业营业执照号) 计算出来的唯一值等
	OwnerUid *string `json:"owner_uid,omitempty" xml:"owner_uid,omitempty" require:"true"`
	// 携带自己定义的服务类型
	Services []*DidDocServicesInfo `json:"services,omitempty" xml:"services,omitempty" type:"Repeated"`
	// 场景码，找dis工作人员进行分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
}

func (s StartDidPersonAgentcreateRequest) String() string {
	return tea.Prettify(s)
}

func (s StartDidPersonAgentcreateRequest) GoString() string {
	return s.String()
}

func (s *StartDidPersonAgentcreateRequest) SetAuthToken(v string) *StartDidPersonAgentcreateRequest {
	s.AuthToken = &v
	return s
}

func (s *StartDidPersonAgentcreateRequest) SetProductInstanceId(v string) *StartDidPersonAgentcreateRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *StartDidPersonAgentcreateRequest) SetExtensionInfo(v string) *StartDidPersonAgentcreateRequest {
	s.ExtensionInfo = &v
	return s
}

func (s *StartDidPersonAgentcreateRequest) SetIndexs(v []*string) *StartDidPersonAgentcreateRequest {
	s.Indexs = v
	return s
}

func (s *StartDidPersonAgentcreateRequest) SetOwnerName(v string) *StartDidPersonAgentcreateRequest {
	s.OwnerName = &v
	return s
}

func (s *StartDidPersonAgentcreateRequest) SetOwnerUid(v string) *StartDidPersonAgentcreateRequest {
	s.OwnerUid = &v
	return s
}

func (s *StartDidPersonAgentcreateRequest) SetServices(v []*DidDocServicesInfo) *StartDidPersonAgentcreateRequest {
	s.Services = v
	return s
}

func (s *StartDidPersonAgentcreateRequest) SetBizCode(v string) *StartDidPersonAgentcreateRequest {
	s.BizCode = &v
	return s
}

type StartDidPersonAgentcreateResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 生成的did字符串
	Did *string `json:"did,omitempty" xml:"did,omitempty"`
}

func (s StartDidPersonAgentcreateResponse) String() string {
	return tea.Prettify(s)
}

func (s StartDidPersonAgentcreateResponse) GoString() string {
	return s.String()
}

func (s *StartDidPersonAgentcreateResponse) SetReqMsgId(v string) *StartDidPersonAgentcreateResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartDidPersonAgentcreateResponse) SetResultCode(v string) *StartDidPersonAgentcreateResponse {
	s.ResultCode = &v
	return s
}

func (s *StartDidPersonAgentcreateResponse) SetResultMsg(v string) *StartDidPersonAgentcreateResponse {
	s.ResultMsg = &v
	return s
}

func (s *StartDidPersonAgentcreateResponse) SetDid(v string) *StartDidPersonAgentcreateResponse {
	s.Did = &v
	return s
}

type StartDidCorporateSelfcreateRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 扩展信息
	Extension *string `json:"extension,omitempty" xml:"extension,omitempty"`
	// 公司名称
	OwnerName *string `json:"owner_name,omitempty" xml:"owner_name,omitempty"`
	// 携带自己定义的服务类型
	Services []*DidDocServicesInfo `json:"services,omitempty" xml:"services,omitempty" type:"Repeated"`
	// 场景码，找dis工作人员进行分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
}

func (s StartDidCorporateSelfcreateRequest) String() string {
	return tea.Prettify(s)
}

func (s StartDidCorporateSelfcreateRequest) GoString() string {
	return s.String()
}

func (s *StartDidCorporateSelfcreateRequest) SetAuthToken(v string) *StartDidCorporateSelfcreateRequest {
	s.AuthToken = &v
	return s
}

func (s *StartDidCorporateSelfcreateRequest) SetProductInstanceId(v string) *StartDidCorporateSelfcreateRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *StartDidCorporateSelfcreateRequest) SetExtension(v string) *StartDidCorporateSelfcreateRequest {
	s.Extension = &v
	return s
}

func (s *StartDidCorporateSelfcreateRequest) SetOwnerName(v string) *StartDidCorporateSelfcreateRequest {
	s.OwnerName = &v
	return s
}

func (s *StartDidCorporateSelfcreateRequest) SetServices(v []*DidDocServicesInfo) *StartDidCorporateSelfcreateRequest {
	s.Services = v
	return s
}

func (s *StartDidCorporateSelfcreateRequest) SetBizCode(v string) *StartDidCorporateSelfcreateRequest {
	s.BizCode = &v
	return s
}

type StartDidCorporateSelfcreateResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 生成的did字符串
	Did *string `json:"did,omitempty" xml:"did,omitempty"`
}

func (s StartDidCorporateSelfcreateResponse) String() string {
	return tea.Prettify(s)
}

func (s StartDidCorporateSelfcreateResponse) GoString() string {
	return s.String()
}

func (s *StartDidCorporateSelfcreateResponse) SetReqMsgId(v string) *StartDidCorporateSelfcreateResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartDidCorporateSelfcreateResponse) SetResultCode(v string) *StartDidCorporateSelfcreateResponse {
	s.ResultCode = &v
	return s
}

func (s *StartDidCorporateSelfcreateResponse) SetResultMsg(v string) *StartDidCorporateSelfcreateResponse {
	s.ResultMsg = &v
	return s
}

func (s *StartDidCorporateSelfcreateResponse) SetDid(v string) *StartDidCorporateSelfcreateResponse {
	s.Did = &v
	return s
}

type StartDidPersonSelfcreateRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 扩展字段
	ExtensionInfo *string `json:"extension_info,omitempty" xml:"extension_info,omitempty"`
	// 由调用者，或者浏览器直接生成
	OwnerName *string `json:"owner_name,omitempty" xml:"owner_name,omitempty"`
	// 携带自己定义的服务类型
	//
	Services []*DidDocServicesInfo `json:"services,omitempty" xml:"services,omitempty" type:"Repeated"`
	// 场景码，找dis工作人员进行分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
}

func (s StartDidPersonSelfcreateRequest) String() string {
	return tea.Prettify(s)
}

func (s StartDidPersonSelfcreateRequest) GoString() string {
	return s.String()
}

func (s *StartDidPersonSelfcreateRequest) SetAuthToken(v string) *StartDidPersonSelfcreateRequest {
	s.AuthToken = &v
	return s
}

func (s *StartDidPersonSelfcreateRequest) SetProductInstanceId(v string) *StartDidPersonSelfcreateRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *StartDidPersonSelfcreateRequest) SetExtensionInfo(v string) *StartDidPersonSelfcreateRequest {
	s.ExtensionInfo = &v
	return s
}

func (s *StartDidPersonSelfcreateRequest) SetOwnerName(v string) *StartDidPersonSelfcreateRequest {
	s.OwnerName = &v
	return s
}

func (s *StartDidPersonSelfcreateRequest) SetServices(v []*DidDocServicesInfo) *StartDidPersonSelfcreateRequest {
	s.Services = v
	return s
}

func (s *StartDidPersonSelfcreateRequest) SetBizCode(v string) *StartDidPersonSelfcreateRequest {
	s.BizCode = &v
	return s
}

type StartDidPersonSelfcreateResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 生成的did字符串
	Did *string `json:"did,omitempty" xml:"did,omitempty"`
}

func (s StartDidPersonSelfcreateResponse) String() string {
	return tea.Prettify(s)
}

func (s StartDidPersonSelfcreateResponse) GoString() string {
	return s.String()
}

func (s *StartDidPersonSelfcreateResponse) SetReqMsgId(v string) *StartDidPersonSelfcreateResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartDidPersonSelfcreateResponse) SetResultCode(v string) *StartDidPersonSelfcreateResponse {
	s.ResultCode = &v
	return s
}

func (s *StartDidPersonSelfcreateResponse) SetResultMsg(v string) *StartDidPersonSelfcreateResponse {
	s.ResultMsg = &v
	return s
}

func (s *StartDidPersonSelfcreateResponse) SetDid(v string) *StartDidPersonSelfcreateResponse {
	s.Did = &v
	return s
}

type StartDidVerifiableclaimIssureRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 颁发证书声明
	BareClaim *BareClaim `json:"bare_claim,omitempty" xml:"bare_claim,omitempty" require:"true"`
	// 过期时间
	Expire *int64 `json:"expire,omitempty" xml:"expire,omitempty" require:"true"`
	// 由谁来颁发，该did必须为调用者自己或者自己代理的did
	Issuer *string `json:"issuer,omitempty" xml:"issuer,omitempty" require:"true"`
	// 为哪个did颁发
	Subject *string `json:"subject,omitempty" xml:"subject,omitempty" require:"true"`
	// 验证声明类型，目前默认VerifiableCredential
	Type []*string `json:"type,omitempty" xml:"type,omitempty" type:"Repeated"`
	// 验证声明状态方式，目前只支持直接通过声明id上链查找状态方式，后续会支持更多方式
	VerifyStatusType *string `json:"verify_status_type,omitempty" xml:"verify_status_type,omitempty"`
	// 场景码，找dis工作人员进行分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
}

func (s StartDidVerifiableclaimIssureRequest) String() string {
	return tea.Prettify(s)
}

func (s StartDidVerifiableclaimIssureRequest) GoString() string {
	return s.String()
}

func (s *StartDidVerifiableclaimIssureRequest) SetAuthToken(v string) *StartDidVerifiableclaimIssureRequest {
	s.AuthToken = &v
	return s
}

func (s *StartDidVerifiableclaimIssureRequest) SetProductInstanceId(v string) *StartDidVerifiableclaimIssureRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *StartDidVerifiableclaimIssureRequest) SetBareClaim(v *BareClaim) *StartDidVerifiableclaimIssureRequest {
	s.BareClaim = v
	return s
}

func (s *StartDidVerifiableclaimIssureRequest) SetExpire(v int64) *StartDidVerifiableclaimIssureRequest {
	s.Expire = &v
	return s
}

func (s *StartDidVerifiableclaimIssureRequest) SetIssuer(v string) *StartDidVerifiableclaimIssureRequest {
	s.Issuer = &v
	return s
}

func (s *StartDidVerifiableclaimIssureRequest) SetSubject(v string) *StartDidVerifiableclaimIssureRequest {
	s.Subject = &v
	return s
}

func (s *StartDidVerifiableclaimIssureRequest) SetType(v []*string) *StartDidVerifiableclaimIssureRequest {
	s.Type = v
	return s
}

func (s *StartDidVerifiableclaimIssureRequest) SetVerifyStatusType(v string) *StartDidVerifiableclaimIssureRequest {
	s.VerifyStatusType = &v
	return s
}

func (s *StartDidVerifiableclaimIssureRequest) SetBizCode(v string) *StartDidVerifiableclaimIssureRequest {
	s.BizCode = &v
	return s
}

type StartDidVerifiableclaimIssureResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 可验证声明的完整声明 {"content":{"verion":"0.7.0","issuer":"xxxx","subject":"xxxx","expire":1530735444,"issucanceDate":1530735000,"id":"XXXX","claim":{//用户自定义},"status":{"type":"XXXX","id":"XXXXX"}},"proof":{"type":"ecdsa","created":"2018-06-18T21:19:10Z","verificationMethod":"XXXX","signatureValue":"XXXXX"}}
	VerifiableClaimContent *string `json:"verifiable_claim_content,omitempty" xml:"verifiable_claim_content,omitempty"`
	// 声明id
	VerifiableClaimId *string `json:"verifiable_claim_id,omitempty" xml:"verifiable_claim_id,omitempty"`
}

func (s StartDidVerifiableclaimIssureResponse) String() string {
	return tea.Prettify(s)
}

func (s StartDidVerifiableclaimIssureResponse) GoString() string {
	return s.String()
}

func (s *StartDidVerifiableclaimIssureResponse) SetReqMsgId(v string) *StartDidVerifiableclaimIssureResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartDidVerifiableclaimIssureResponse) SetResultCode(v string) *StartDidVerifiableclaimIssureResponse {
	s.ResultCode = &v
	return s
}

func (s *StartDidVerifiableclaimIssureResponse) SetResultMsg(v string) *StartDidVerifiableclaimIssureResponse {
	s.ResultMsg = &v
	return s
}

func (s *StartDidVerifiableclaimIssureResponse) SetVerifiableClaimContent(v string) *StartDidVerifiableclaimIssureResponse {
	s.VerifiableClaimContent = &v
	return s
}

func (s *StartDidVerifiableclaimIssureResponse) SetVerifiableClaimId(v string) *StartDidVerifiableclaimIssureResponse {
	s.VerifiableClaimId = &v
	return s
}

type StartDidVerifiableclaimVerifierRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 用于零知识证明类型的可验证声明的验证。index是对应于完整VC的一个json字符串，其中key值保持和原始VC一致，value如果是1表示verificate_claim对应key携带的是对应field的原始值，而如果Key的value是0表示verificate_claim对应key携带的是对应field的merkle root值。
	Indexs *string `json:"indexs,omitempty" xml:"indexs,omitempty"`
	// 可验证声明
	VerifiableClaim *string `json:"verifiable_claim,omitempty" xml:"verifiable_claim,omitempty" require:"true"`
	// 场景码，找dis工作人员进行分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
}

func (s StartDidVerifiableclaimVerifierRequest) String() string {
	return tea.Prettify(s)
}

func (s StartDidVerifiableclaimVerifierRequest) GoString() string {
	return s.String()
}

func (s *StartDidVerifiableclaimVerifierRequest) SetAuthToken(v string) *StartDidVerifiableclaimVerifierRequest {
	s.AuthToken = &v
	return s
}

func (s *StartDidVerifiableclaimVerifierRequest) SetProductInstanceId(v string) *StartDidVerifiableclaimVerifierRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *StartDidVerifiableclaimVerifierRequest) SetIndexs(v string) *StartDidVerifiableclaimVerifierRequest {
	s.Indexs = &v
	return s
}

func (s *StartDidVerifiableclaimVerifierRequest) SetVerifiableClaim(v string) *StartDidVerifiableclaimVerifierRequest {
	s.VerifiableClaim = &v
	return s
}

func (s *StartDidVerifiableclaimVerifierRequest) SetBizCode(v string) *StartDidVerifiableclaimVerifierRequest {
	s.BizCode = &v
	return s
}

type StartDidVerifiableclaimVerifierResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s StartDidVerifiableclaimVerifierResponse) String() string {
	return tea.Prettify(s)
}

func (s StartDidVerifiableclaimVerifierResponse) GoString() string {
	return s.String()
}

func (s *StartDidVerifiableclaimVerifierResponse) SetReqMsgId(v string) *StartDidVerifiableclaimVerifierResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartDidVerifiableclaimVerifierResponse) SetResultCode(v string) *StartDidVerifiableclaimVerifierResponse {
	s.ResultCode = &v
	return s
}

func (s *StartDidVerifiableclaimVerifierResponse) SetResultMsg(v string) *StartDidVerifiableclaimVerifierResponse {
	s.ResultMsg = &v
	return s
}

type QueryDidDocRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 请求者did
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 场景码，找dis工作人员进行分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
}

func (s QueryDidDocRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDidDocRequest) GoString() string {
	return s.String()
}

func (s *QueryDidDocRequest) SetAuthToken(v string) *QueryDidDocRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryDidDocRequest) SetProductInstanceId(v string) *QueryDidDocRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryDidDocRequest) SetDid(v string) *QueryDidDocRequest {
	s.Did = &v
	return s
}

func (s *QueryDidDocRequest) SetBizCode(v string) *QueryDidDocRequest {
	s.BizCode = &v
	return s
}

type QueryDidDocResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// did对应的doc
	Doc *string `json:"doc,omitempty" xml:"doc,omitempty"`
}

func (s QueryDidDocResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDidDocResponse) GoString() string {
	return s.String()
}

func (s *QueryDidDocResponse) SetReqMsgId(v string) *QueryDidDocResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryDidDocResponse) SetResultCode(v string) *QueryDidDocResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryDidDocResponse) SetResultMsg(v string) *QueryDidDocResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryDidDocResponse) SetDoc(v string) *QueryDidDocResponse {
	s.Doc = &v
	return s
}

type UpdateDidVerifiableclaimStatusRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 场景码，找dis工作人员进行分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
	// 希望可验证声明的状态， 0无效，1生效
	Status *string `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// 可验证声明id
	VcId *string `json:"vc_id,omitempty" xml:"vc_id,omitempty" require:"true"`
	// 该VC的颁发者
	IssuerDid *string `json:"issuer_did,omitempty" xml:"issuer_did,omitempty"`
}

func (s UpdateDidVerifiableclaimStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateDidVerifiableclaimStatusRequest) GoString() string {
	return s.String()
}

func (s *UpdateDidVerifiableclaimStatusRequest) SetAuthToken(v string) *UpdateDidVerifiableclaimStatusRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateDidVerifiableclaimStatusRequest) SetProductInstanceId(v string) *UpdateDidVerifiableclaimStatusRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UpdateDidVerifiableclaimStatusRequest) SetBizCode(v string) *UpdateDidVerifiableclaimStatusRequest {
	s.BizCode = &v
	return s
}

func (s *UpdateDidVerifiableclaimStatusRequest) SetStatus(v string) *UpdateDidVerifiableclaimStatusRequest {
	s.Status = &v
	return s
}

func (s *UpdateDidVerifiableclaimStatusRequest) SetVcId(v string) *UpdateDidVerifiableclaimStatusRequest {
	s.VcId = &v
	return s
}

func (s *UpdateDidVerifiableclaimStatusRequest) SetIssuerDid(v string) *UpdateDidVerifiableclaimStatusRequest {
	s.IssuerDid = &v
	return s
}

type UpdateDidVerifiableclaimStatusResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateDidVerifiableclaimStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateDidVerifiableclaimStatusResponse) GoString() string {
	return s.String()
}

func (s *UpdateDidVerifiableclaimStatusResponse) SetReqMsgId(v string) *UpdateDidVerifiableclaimStatusResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateDidVerifiableclaimStatusResponse) SetResultCode(v string) *UpdateDidVerifiableclaimStatusResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateDidVerifiableclaimStatusResponse) SetResultMsg(v string) *UpdateDidVerifiableclaimStatusResponse {
	s.ResultMsg = &v
	return s
}

type UpdateDidCorporateExtensionserviceRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 需要更新的did doc对应的did字段；该did必须为调用者自己的did，或者托管给调用者的did
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 修改后的全量扩展字段
	Extension *string `json:"extension,omitempty" xml:"extension,omitempty" require:"true"`
	// 场景码，找dis工作人员进行分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
}

func (s UpdateDidCorporateExtensionserviceRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateDidCorporateExtensionserviceRequest) GoString() string {
	return s.String()
}

func (s *UpdateDidCorporateExtensionserviceRequest) SetAuthToken(v string) *UpdateDidCorporateExtensionserviceRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateDidCorporateExtensionserviceRequest) SetProductInstanceId(v string) *UpdateDidCorporateExtensionserviceRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UpdateDidCorporateExtensionserviceRequest) SetDid(v string) *UpdateDidCorporateExtensionserviceRequest {
	s.Did = &v
	return s
}

func (s *UpdateDidCorporateExtensionserviceRequest) SetExtension(v string) *UpdateDidCorporateExtensionserviceRequest {
	s.Extension = &v
	return s
}

func (s *UpdateDidCorporateExtensionserviceRequest) SetBizCode(v string) *UpdateDidCorporateExtensionserviceRequest {
	s.BizCode = &v
	return s
}

type UpdateDidCorporateExtensionserviceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateDidCorporateExtensionserviceResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateDidCorporateExtensionserviceResponse) GoString() string {
	return s.String()
}

func (s *UpdateDidCorporateExtensionserviceResponse) SetReqMsgId(v string) *UpdateDidCorporateExtensionserviceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateDidCorporateExtensionserviceResponse) SetResultCode(v string) *UpdateDidCorporateExtensionserviceResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateDidCorporateExtensionserviceResponse) SetResultMsg(v string) *UpdateDidCorporateExtensionserviceResponse {
	s.ResultMsg = &v
	return s
}

type StartDidCorporateCustomerservicetypeRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 自定义的扩展服务类型
	ServiceTypes []*DidServiceType `json:"service_types,omitempty" xml:"service_types,omitempty" require:"true" type:"Repeated"`
	// 场景码，找dis工作人员进行分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
}

func (s StartDidCorporateCustomerservicetypeRequest) String() string {
	return tea.Prettify(s)
}

func (s StartDidCorporateCustomerservicetypeRequest) GoString() string {
	return s.String()
}

func (s *StartDidCorporateCustomerservicetypeRequest) SetAuthToken(v string) *StartDidCorporateCustomerservicetypeRequest {
	s.AuthToken = &v
	return s
}

func (s *StartDidCorporateCustomerservicetypeRequest) SetProductInstanceId(v string) *StartDidCorporateCustomerservicetypeRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *StartDidCorporateCustomerservicetypeRequest) SetServiceTypes(v []*DidServiceType) *StartDidCorporateCustomerservicetypeRequest {
	s.ServiceTypes = v
	return s
}

func (s *StartDidCorporateCustomerservicetypeRequest) SetBizCode(v string) *StartDidCorporateCustomerservicetypeRequest {
	s.BizCode = &v
	return s
}

type StartDidCorporateCustomerservicetypeResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s StartDidCorporateCustomerservicetypeResponse) String() string {
	return tea.Prettify(s)
}

func (s StartDidCorporateCustomerservicetypeResponse) GoString() string {
	return s.String()
}

func (s *StartDidCorporateCustomerservicetypeResponse) SetReqMsgId(v string) *StartDidCorporateCustomerservicetypeResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartDidCorporateCustomerservicetypeResponse) SetResultCode(v string) *StartDidCorporateCustomerservicetypeResponse {
	s.ResultCode = &v
	return s
}

func (s *StartDidCorporateCustomerservicetypeResponse) SetResultMsg(v string) *StartDidCorporateCustomerservicetypeResponse {
	s.ResultMsg = &v
	return s
}

type StartDidCertificationThreemetaRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 身份证号码
	//
	CertNo *string `json:"cert_no,omitempty" xml:"cert_no,omitempty" require:"true"`
	// 证书的subject did，不给此参数时候三要素验证不颁发vc
	//
	Did *string `json:"did,omitempty" xml:"did,omitempty"`
	// 手机号码
	//
	Mobile *string `json:"mobile,omitempty" xml:"mobile,omitempty" require:"true"`
	// 姓名
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 场景码，找dis工作人员进行分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
}

func (s StartDidCertificationThreemetaRequest) String() string {
	return tea.Prettify(s)
}

func (s StartDidCertificationThreemetaRequest) GoString() string {
	return s.String()
}

func (s *StartDidCertificationThreemetaRequest) SetAuthToken(v string) *StartDidCertificationThreemetaRequest {
	s.AuthToken = &v
	return s
}

func (s *StartDidCertificationThreemetaRequest) SetProductInstanceId(v string) *StartDidCertificationThreemetaRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *StartDidCertificationThreemetaRequest) SetCertNo(v string) *StartDidCertificationThreemetaRequest {
	s.CertNo = &v
	return s
}

func (s *StartDidCertificationThreemetaRequest) SetDid(v string) *StartDidCertificationThreemetaRequest {
	s.Did = &v
	return s
}

func (s *StartDidCertificationThreemetaRequest) SetMobile(v string) *StartDidCertificationThreemetaRequest {
	s.Mobile = &v
	return s
}

func (s *StartDidCertificationThreemetaRequest) SetName(v string) *StartDidCertificationThreemetaRequest {
	s.Name = &v
	return s
}

func (s *StartDidCertificationThreemetaRequest) SetBizCode(v string) *StartDidCertificationThreemetaRequest {
	s.BizCode = &v
	return s
}

type StartDidCertificationThreemetaResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// vc id，可通过该字符串来查询vc具体内容
	//
	VcId *string `json:"vc_id,omitempty" xml:"vc_id,omitempty"`
}

func (s StartDidCertificationThreemetaResponse) String() string {
	return tea.Prettify(s)
}

func (s StartDidCertificationThreemetaResponse) GoString() string {
	return s.String()
}

func (s *StartDidCertificationThreemetaResponse) SetReqMsgId(v string) *StartDidCertificationThreemetaResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartDidCertificationThreemetaResponse) SetResultCode(v string) *StartDidCertificationThreemetaResponse {
	s.ResultCode = &v
	return s
}

func (s *StartDidCertificationThreemetaResponse) SetResultMsg(v string) *StartDidCertificationThreemetaResponse {
	s.ResultMsg = &v
	return s
}

func (s *StartDidCertificationThreemetaResponse) SetVcId(v string) *StartDidCertificationThreemetaResponse {
	s.VcId = &v
	return s
}

type StartDidCertificationTwometaRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 身份证号码
	CertNo *string `json:"cert_no,omitempty" xml:"cert_no,omitempty" require:"true"`
	// 颁发证书的subject did
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 姓名
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 场景码，找dis工作人员进行分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
}

func (s StartDidCertificationTwometaRequest) String() string {
	return tea.Prettify(s)
}

func (s StartDidCertificationTwometaRequest) GoString() string {
	return s.String()
}

func (s *StartDidCertificationTwometaRequest) SetAuthToken(v string) *StartDidCertificationTwometaRequest {
	s.AuthToken = &v
	return s
}

func (s *StartDidCertificationTwometaRequest) SetProductInstanceId(v string) *StartDidCertificationTwometaRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *StartDidCertificationTwometaRequest) SetCertNo(v string) *StartDidCertificationTwometaRequest {
	s.CertNo = &v
	return s
}

func (s *StartDidCertificationTwometaRequest) SetDid(v string) *StartDidCertificationTwometaRequest {
	s.Did = &v
	return s
}

func (s *StartDidCertificationTwometaRequest) SetName(v string) *StartDidCertificationTwometaRequest {
	s.Name = &v
	return s
}

func (s *StartDidCertificationTwometaRequest) SetBizCode(v string) *StartDidCertificationTwometaRequest {
	s.BizCode = &v
	return s
}

type StartDidCertificationTwometaResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// vc id，可通过该字符串来查询vc具体内容
	VcId *string `json:"vc_id,omitempty" xml:"vc_id,omitempty"`
}

func (s StartDidCertificationTwometaResponse) String() string {
	return tea.Prettify(s)
}

func (s StartDidCertificationTwometaResponse) GoString() string {
	return s.String()
}

func (s *StartDidCertificationTwometaResponse) SetReqMsgId(v string) *StartDidCertificationTwometaResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartDidCertificationTwometaResponse) SetResultCode(v string) *StartDidCertificationTwometaResponse {
	s.ResultCode = &v
	return s
}

func (s *StartDidCertificationTwometaResponse) SetResultMsg(v string) *StartDidCertificationTwometaResponse {
	s.ResultMsg = &v
	return s
}

func (s *StartDidCertificationTwometaResponse) SetVcId(v string) *StartDidCertificationTwometaResponse {
	s.VcId = &v
	return s
}

type QueryDidVcRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// vc id，可通过该字符串来查询vc具体内容
	VcId *string `json:"vc_id,omitempty" xml:"vc_id,omitempty" require:"true"`
	// 验证者id
	VerifierDid *string `json:"verifier_did,omitempty" xml:"verifier_did,omitempty"`
	// 场景码，找dis工作人员进行分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
}

func (s QueryDidVcRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDidVcRequest) GoString() string {
	return s.String()
}

func (s *QueryDidVcRequest) SetAuthToken(v string) *QueryDidVcRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryDidVcRequest) SetProductInstanceId(v string) *QueryDidVcRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryDidVcRequest) SetVcId(v string) *QueryDidVcRequest {
	s.VcId = &v
	return s
}

func (s *QueryDidVcRequest) SetVerifierDid(v string) *QueryDidVcRequest {
	s.VerifierDid = &v
	return s
}

func (s *QueryDidVcRequest) SetBizCode(v string) *QueryDidVcRequest {
	s.BizCode = &v
	return s
}

type QueryDidVcResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 可验证声明的完整声明 {"content":{"verion":"0.7.0","issuer":"xxxx","subject":"xxxx","expire":1530735444,"issucanceDate":1530735000,"id":"XXXX","claim":{//用户自定义},"status":{"type":"XXXX","id":"XXXXX"}},"proof":{"type":"ecdsa","created":"2018-06-18T21:19:10Z","verificationMethod":"XXXX","signatureValue":"XXXXX"}}
	VcContent *string `json:"vc_content,omitempty" xml:"vc_content,omitempty"`
}

func (s QueryDidVcResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDidVcResponse) GoString() string {
	return s.String()
}

func (s *QueryDidVcResponse) SetReqMsgId(v string) *QueryDidVcResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryDidVcResponse) SetResultCode(v string) *QueryDidVcResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryDidVcResponse) SetResultMsg(v string) *QueryDidVcResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryDidVcResponse) SetVcContent(v string) *QueryDidVcResponse {
	s.VcContent = &v
	return s
}

type StartDidIdentificationFaceauthRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 认证类型,枚举值 PC_AUTH、APP_AUTH
	AuthType *string `json:"auth_type,omitempty" xml:"auth_type,omitempty" require:"true"`
	// 颁发证书的subject did
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 用户身份信息
	IdentityParam *IdentityParam `json:"identity_param,omitempty" xml:"identity_param,omitempty" require:"true"`
	// 认证接口回调路径，POST接口 请求示例： { "certifyId":"0242de204e1a2c3ed6ee5e21d8a57a4c", "did":"xxxxx","vcId":"xxxxx" }
	ReturnUrl *string `json:"return_url,omitempty" xml:"return_url,omitempty"`
	// 场景码，找dis工作人员进行分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
}

func (s StartDidIdentificationFaceauthRequest) String() string {
	return tea.Prettify(s)
}

func (s StartDidIdentificationFaceauthRequest) GoString() string {
	return s.String()
}

func (s *StartDidIdentificationFaceauthRequest) SetAuthToken(v string) *StartDidIdentificationFaceauthRequest {
	s.AuthToken = &v
	return s
}

func (s *StartDidIdentificationFaceauthRequest) SetProductInstanceId(v string) *StartDidIdentificationFaceauthRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *StartDidIdentificationFaceauthRequest) SetAuthType(v string) *StartDidIdentificationFaceauthRequest {
	s.AuthType = &v
	return s
}

func (s *StartDidIdentificationFaceauthRequest) SetDid(v string) *StartDidIdentificationFaceauthRequest {
	s.Did = &v
	return s
}

func (s *StartDidIdentificationFaceauthRequest) SetIdentityParam(v *IdentityParam) *StartDidIdentificationFaceauthRequest {
	s.IdentityParam = v
	return s
}

func (s *StartDidIdentificationFaceauthRequest) SetReturnUrl(v string) *StartDidIdentificationFaceauthRequest {
	s.ReturnUrl = &v
	return s
}

func (s *StartDidIdentificationFaceauthRequest) SetBizCode(v string) *StartDidIdentificationFaceauthRequest {
	s.BizCode = &v
	return s
}

type StartDidIdentificationFaceauthResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 认证ID
	CertifyId *string `json:"certify_id,omitempty" xml:"certify_id,omitempty"`
	// 二维码URL，用户支付宝扫一扫实人认证
	CertifyUrl *string `json:"certify_url,omitempty" xml:"certify_url,omitempty"`
}

func (s StartDidIdentificationFaceauthResponse) String() string {
	return tea.Prettify(s)
}

func (s StartDidIdentificationFaceauthResponse) GoString() string {
	return s.String()
}

func (s *StartDidIdentificationFaceauthResponse) SetReqMsgId(v string) *StartDidIdentificationFaceauthResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartDidIdentificationFaceauthResponse) SetResultCode(v string) *StartDidIdentificationFaceauthResponse {
	s.ResultCode = &v
	return s
}

func (s *StartDidIdentificationFaceauthResponse) SetResultMsg(v string) *StartDidIdentificationFaceauthResponse {
	s.ResultMsg = &v
	return s
}

func (s *StartDidIdentificationFaceauthResponse) SetCertifyId(v string) *StartDidIdentificationFaceauthResponse {
	s.CertifyId = &v
	return s
}

func (s *StartDidIdentificationFaceauthResponse) SetCertifyUrl(v string) *StartDidIdentificationFaceauthResponse {
	s.CertifyUrl = &v
	return s
}

type QueryDidIdentificationFaceauthRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 认证ID，用于查询认证结果
	CertifyId *string `json:"certify_id,omitempty" xml:"certify_id,omitempty" require:"true"`
	// 场景码，找dis工作人员进行分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
}

func (s QueryDidIdentificationFaceauthRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDidIdentificationFaceauthRequest) GoString() string {
	return s.String()
}

func (s *QueryDidIdentificationFaceauthRequest) SetAuthToken(v string) *QueryDidIdentificationFaceauthRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryDidIdentificationFaceauthRequest) SetProductInstanceId(v string) *QueryDidIdentificationFaceauthRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryDidIdentificationFaceauthRequest) SetCertifyId(v string) *QueryDidIdentificationFaceauthRequest {
	s.CertifyId = &v
	return s
}

func (s *QueryDidIdentificationFaceauthRequest) SetBizCode(v string) *QueryDidIdentificationFaceauthRequest {
	s.BizCode = &v
	return s
}

type QueryDidIdentificationFaceauthResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// vc id，可通过该字符串来查询vc具体内容
	VcId *string `json:"vc_id,omitempty" xml:"vc_id,omitempty"`
}

func (s QueryDidIdentificationFaceauthResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDidIdentificationFaceauthResponse) GoString() string {
	return s.String()
}

func (s *QueryDidIdentificationFaceauthResponse) SetReqMsgId(v string) *QueryDidIdentificationFaceauthResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryDidIdentificationFaceauthResponse) SetResultCode(v string) *QueryDidIdentificationFaceauthResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryDidIdentificationFaceauthResponse) SetResultMsg(v string) *QueryDidIdentificationFaceauthResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryDidIdentificationFaceauthResponse) SetVcId(v string) *QueryDidIdentificationFaceauthResponse {
	s.VcId = &v
	return s
}

type StartDidNotificationConsumerRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	//  事件发生时的回调路径，必须满足：
	// metho：POST
	// Content-Type：application/json
	CallBackUrl *string `json:"call_back_url,omitempty" xml:"call_back_url,omitempty" require:"true"`
	// 关注的did；这个did必须是调用者自己的did，也可以是托管给调用者的did
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 1 所有相关事件，
	// 2 所有相关did事件，
	// 3 所有相关vc事件，
	Type *int64 `json:"type,omitempty" xml:"type,omitempty" require:"true"`
	// 场景码，找dis工作人员进行分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
}

func (s StartDidNotificationConsumerRequest) String() string {
	return tea.Prettify(s)
}

func (s StartDidNotificationConsumerRequest) GoString() string {
	return s.String()
}

func (s *StartDidNotificationConsumerRequest) SetAuthToken(v string) *StartDidNotificationConsumerRequest {
	s.AuthToken = &v
	return s
}

func (s *StartDidNotificationConsumerRequest) SetProductInstanceId(v string) *StartDidNotificationConsumerRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *StartDidNotificationConsumerRequest) SetCallBackUrl(v string) *StartDidNotificationConsumerRequest {
	s.CallBackUrl = &v
	return s
}

func (s *StartDidNotificationConsumerRequest) SetDid(v string) *StartDidNotificationConsumerRequest {
	s.Did = &v
	return s
}

func (s *StartDidNotificationConsumerRequest) SetType(v int64) *StartDidNotificationConsumerRequest {
	s.Type = &v
	return s
}

func (s *StartDidNotificationConsumerRequest) SetBizCode(v string) *StartDidNotificationConsumerRequest {
	s.BizCode = &v
	return s
}

type StartDidNotificationConsumerResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 分配的消费者id，当需要重新注册时，需要使用这个consumer_id;
	ConsumerId *string `json:"consumer_id,omitempty" xml:"consumer_id,omitempty"`
}

func (s StartDidNotificationConsumerResponse) String() string {
	return tea.Prettify(s)
}

func (s StartDidNotificationConsumerResponse) GoString() string {
	return s.String()
}

func (s *StartDidNotificationConsumerResponse) SetReqMsgId(v string) *StartDidNotificationConsumerResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartDidNotificationConsumerResponse) SetResultCode(v string) *StartDidNotificationConsumerResponse {
	s.ResultCode = &v
	return s
}

func (s *StartDidNotificationConsumerResponse) SetResultMsg(v string) *StartDidNotificationConsumerResponse {
	s.ResultMsg = &v
	return s
}

func (s *StartDidNotificationConsumerResponse) SetConsumerId(v string) *StartDidNotificationConsumerResponse {
	s.ConsumerId = &v
	return s
}

type RebootDidNotificationConsumerRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// method： POST
	// applicatoin/json
	CallBackUrl *string `json:"call_back_url,omitempty" xml:"call_back_url,omitempty" require:"true"`
	// 注册是得到的consumer_id
	ConsumerId *string `json:"consumer_id,omitempty" xml:"consumer_id,omitempty" require:"true"`
	// 重新从哪个高度开始同步信息，目前did messager只保留1周之内的数据，所以这个高度如果早于一周，会返回异常。
	RestartBlockHeight *int64 `json:"restart_block_height,omitempty" xml:"restart_block_height,omitempty" require:"true"`
	// 场景码，找dis工作人员进行分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
}

func (s RebootDidNotificationConsumerRequest) String() string {
	return tea.Prettify(s)
}

func (s RebootDidNotificationConsumerRequest) GoString() string {
	return s.String()
}

func (s *RebootDidNotificationConsumerRequest) SetAuthToken(v string) *RebootDidNotificationConsumerRequest {
	s.AuthToken = &v
	return s
}

func (s *RebootDidNotificationConsumerRequest) SetProductInstanceId(v string) *RebootDidNotificationConsumerRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *RebootDidNotificationConsumerRequest) SetCallBackUrl(v string) *RebootDidNotificationConsumerRequest {
	s.CallBackUrl = &v
	return s
}

func (s *RebootDidNotificationConsumerRequest) SetConsumerId(v string) *RebootDidNotificationConsumerRequest {
	s.ConsumerId = &v
	return s
}

func (s *RebootDidNotificationConsumerRequest) SetRestartBlockHeight(v int64) *RebootDidNotificationConsumerRequest {
	s.RestartBlockHeight = &v
	return s
}

func (s *RebootDidNotificationConsumerRequest) SetBizCode(v string) *RebootDidNotificationConsumerRequest {
	s.BizCode = &v
	return s
}

type RebootDidNotificationConsumerResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 如果成功，会返回consumer_id
	ConsumerId *string `json:"consumer_id,omitempty" xml:"consumer_id,omitempty"`
}

func (s RebootDidNotificationConsumerResponse) String() string {
	return tea.Prettify(s)
}

func (s RebootDidNotificationConsumerResponse) GoString() string {
	return s.String()
}

func (s *RebootDidNotificationConsumerResponse) SetReqMsgId(v string) *RebootDidNotificationConsumerResponse {
	s.ReqMsgId = &v
	return s
}

func (s *RebootDidNotificationConsumerResponse) SetResultCode(v string) *RebootDidNotificationConsumerResponse {
	s.ResultCode = &v
	return s
}

func (s *RebootDidNotificationConsumerResponse) SetResultMsg(v string) *RebootDidNotificationConsumerResponse {
	s.ResultMsg = &v
	return s
}

func (s *RebootDidNotificationConsumerResponse) SetConsumerId(v string) *RebootDidNotificationConsumerResponse {
	s.ConsumerId = &v
	return s
}

type InitDidCorporateDirectRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 扩展字段
	Extension *string `json:"extension,omitempty" xml:"extension,omitempty"`
	// owner名
	OwnerName *string `json:"owner_name,omitempty" xml:"owner_name,omitempty"`
	// 租户自有用户的唯1号，每个owner_uid只能申请一个did
	OwnerUid *string `json:"owner_uid,omitempty" xml:"owner_uid,omitempty" require:"true"`
	// 公钥
	PublicKey *string `json:"public_key,omitempty" xml:"public_key,omitempty" require:"true"`
	// did doc service信息列表
	Services []*DisServicesInfo `json:"services,omitempty" xml:"services,omitempty" type:"Repeated"`
	// 场景码，找dis工作人员进行分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
}

func (s InitDidCorporateDirectRequest) String() string {
	return tea.Prettify(s)
}

func (s InitDidCorporateDirectRequest) GoString() string {
	return s.String()
}

func (s *InitDidCorporateDirectRequest) SetAuthToken(v string) *InitDidCorporateDirectRequest {
	s.AuthToken = &v
	return s
}

func (s *InitDidCorporateDirectRequest) SetProductInstanceId(v string) *InitDidCorporateDirectRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *InitDidCorporateDirectRequest) SetExtension(v string) *InitDidCorporateDirectRequest {
	s.Extension = &v
	return s
}

func (s *InitDidCorporateDirectRequest) SetOwnerName(v string) *InitDidCorporateDirectRequest {
	s.OwnerName = &v
	return s
}

func (s *InitDidCorporateDirectRequest) SetOwnerUid(v string) *InitDidCorporateDirectRequest {
	s.OwnerUid = &v
	return s
}

func (s *InitDidCorporateDirectRequest) SetPublicKey(v string) *InitDidCorporateDirectRequest {
	s.PublicKey = &v
	return s
}

func (s *InitDidCorporateDirectRequest) SetServices(v []*DisServicesInfo) *InitDidCorporateDirectRequest {
	s.Services = v
	return s
}

func (s *InitDidCorporateDirectRequest) SetBizCode(v string) *InitDidCorporateDirectRequest {
	s.BizCode = &v
	return s
}

type InitDidCorporateDirectResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// did
	Did *string `json:"did,omitempty" xml:"did,omitempty"`
	// did doc content
	Doc *string `json:"doc,omitempty" xml:"doc,omitempty"`
	// 后续did doc上链需要使用私钥对这个hash值进行签名
	Hash *string `json:"hash,omitempty" xml:"hash,omitempty"`
}

func (s InitDidCorporateDirectResponse) String() string {
	return tea.Prettify(s)
}

func (s InitDidCorporateDirectResponse) GoString() string {
	return s.String()
}

func (s *InitDidCorporateDirectResponse) SetReqMsgId(v string) *InitDidCorporateDirectResponse {
	s.ReqMsgId = &v
	return s
}

func (s *InitDidCorporateDirectResponse) SetResultCode(v string) *InitDidCorporateDirectResponse {
	s.ResultCode = &v
	return s
}

func (s *InitDidCorporateDirectResponse) SetResultMsg(v string) *InitDidCorporateDirectResponse {
	s.ResultMsg = &v
	return s
}

func (s *InitDidCorporateDirectResponse) SetDid(v string) *InitDidCorporateDirectResponse {
	s.Did = &v
	return s
}

func (s *InitDidCorporateDirectResponse) SetDoc(v string) *InitDidCorporateDirectResponse {
	s.Doc = &v
	return s
}

func (s *InitDidCorporateDirectResponse) SetHash(v string) *InitDidCorporateDirectResponse {
	s.Hash = &v
	return s
}

type PushDidCorporateDirectRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// did
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// did doc json string
	Doc *string `json:"doc,omitempty" xml:"doc,omitempty" require:"true"`
	// 对hash进行签名后接字符串
	SignData *string `json:"sign_data,omitempty" xml:"sign_data,omitempty" require:"true"`
	// 场景码，找dis工作人员进行分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
}

func (s PushDidCorporateDirectRequest) String() string {
	return tea.Prettify(s)
}

func (s PushDidCorporateDirectRequest) GoString() string {
	return s.String()
}

func (s *PushDidCorporateDirectRequest) SetAuthToken(v string) *PushDidCorporateDirectRequest {
	s.AuthToken = &v
	return s
}

func (s *PushDidCorporateDirectRequest) SetProductInstanceId(v string) *PushDidCorporateDirectRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *PushDidCorporateDirectRequest) SetDid(v string) *PushDidCorporateDirectRequest {
	s.Did = &v
	return s
}

func (s *PushDidCorporateDirectRequest) SetDoc(v string) *PushDidCorporateDirectRequest {
	s.Doc = &v
	return s
}

func (s *PushDidCorporateDirectRequest) SetSignData(v string) *PushDidCorporateDirectRequest {
	s.SignData = &v
	return s
}

func (s *PushDidCorporateDirectRequest) SetBizCode(v string) *PushDidCorporateDirectRequest {
	s.BizCode = &v
	return s
}

type PushDidCorporateDirectResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s PushDidCorporateDirectResponse) String() string {
	return tea.Prettify(s)
}

func (s PushDidCorporateDirectResponse) GoString() string {
	return s.String()
}

func (s *PushDidCorporateDirectResponse) SetReqMsgId(v string) *PushDidCorporateDirectResponse {
	s.ReqMsgId = &v
	return s
}

func (s *PushDidCorporateDirectResponse) SetResultCode(v string) *PushDidCorporateDirectResponse {
	s.ResultCode = &v
	return s
}

func (s *PushDidCorporateDirectResponse) SetResultMsg(v string) *PushDidCorporateDirectResponse {
	s.ResultMsg = &v
	return s
}

type InitDidCorporateIdentityRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 扩展字段
	ExtensionInfo *string `json:"extension_info,omitempty" xml:"extension_info,omitempty"`
	// 持有者名字
	OwnerName *string `json:"owner_name,omitempty" xml:"owner_name,omitempty"`
	// 用户在租户下的唯一ID
	OwnerUid *string `json:"owner_uid,omitempty" xml:"owner_uid,omitempty" require:"true"`
	// 场景码，找dis工作人员进行分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
}

func (s InitDidCorporateIdentityRequest) String() string {
	return tea.Prettify(s)
}

func (s InitDidCorporateIdentityRequest) GoString() string {
	return s.String()
}

func (s *InitDidCorporateIdentityRequest) SetAuthToken(v string) *InitDidCorporateIdentityRequest {
	s.AuthToken = &v
	return s
}

func (s *InitDidCorporateIdentityRequest) SetProductInstanceId(v string) *InitDidCorporateIdentityRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *InitDidCorporateIdentityRequest) SetExtensionInfo(v string) *InitDidCorporateIdentityRequest {
	s.ExtensionInfo = &v
	return s
}

func (s *InitDidCorporateIdentityRequest) SetOwnerName(v string) *InitDidCorporateIdentityRequest {
	s.OwnerName = &v
	return s
}

func (s *InitDidCorporateIdentityRequest) SetOwnerUid(v string) *InitDidCorporateIdentityRequest {
	s.OwnerUid = &v
	return s
}

func (s *InitDidCorporateIdentityRequest) SetBizCode(v string) *InitDidCorporateIdentityRequest {
	s.BizCode = &v
	return s
}

type InitDidCorporateIdentityResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// did
	Did *string `json:"did,omitempty" xml:"did,omitempty"`
}

func (s InitDidCorporateIdentityResponse) String() string {
	return tea.Prettify(s)
}

func (s InitDidCorporateIdentityResponse) GoString() string {
	return s.String()
}

func (s *InitDidCorporateIdentityResponse) SetReqMsgId(v string) *InitDidCorporateIdentityResponse {
	s.ReqMsgId = &v
	return s
}

func (s *InitDidCorporateIdentityResponse) SetResultCode(v string) *InitDidCorporateIdentityResponse {
	s.ResultCode = &v
	return s
}

func (s *InitDidCorporateIdentityResponse) SetResultMsg(v string) *InitDidCorporateIdentityResponse {
	s.ResultMsg = &v
	return s
}

func (s *InitDidCorporateIdentityResponse) SetDid(v string) *InitDidCorporateIdentityResponse {
	s.Did = &v
	return s
}

type StartDidAgentChallengeresponseRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 场景码，找dis工作人员进行分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
	// 一段auth challenge明文，即需要被计算签名的明文
	ChallengeRequest *string `json:"challenge_request,omitempty" xml:"challenge_request,omitempty" require:"true"`
	// 指定的did，该did必须是租户自己，或托管给租户的did
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 0 原始字符串，1 hash值
	ChallengeType *int64 `json:"challenge_type,omitempty" xml:"challenge_type,omitempty"`
}

func (s StartDidAgentChallengeresponseRequest) String() string {
	return tea.Prettify(s)
}

func (s StartDidAgentChallengeresponseRequest) GoString() string {
	return s.String()
}

func (s *StartDidAgentChallengeresponseRequest) SetAuthToken(v string) *StartDidAgentChallengeresponseRequest {
	s.AuthToken = &v
	return s
}

func (s *StartDidAgentChallengeresponseRequest) SetProductInstanceId(v string) *StartDidAgentChallengeresponseRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *StartDidAgentChallengeresponseRequest) SetBizCode(v string) *StartDidAgentChallengeresponseRequest {
	s.BizCode = &v
	return s
}

func (s *StartDidAgentChallengeresponseRequest) SetChallengeRequest(v string) *StartDidAgentChallengeresponseRequest {
	s.ChallengeRequest = &v
	return s
}

func (s *StartDidAgentChallengeresponseRequest) SetDid(v string) *StartDidAgentChallengeresponseRequest {
	s.Did = &v
	return s
}

func (s *StartDidAgentChallengeresponseRequest) SetChallengeType(v int64) *StartDidAgentChallengeresponseRequest {
	s.ChallengeType = &v
	return s
}

type StartDidAgentChallengeresponseResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// {
	//   __challenge":xxxx, //待签名的明文
	//   “expired”：xxxx,//签名有效时间
	//   “sign”：xxxx，//对上述字段进行的签名
	// }
	SignData *string `json:"sign_data,omitempty" xml:"sign_data,omitempty"`
}

func (s StartDidAgentChallengeresponseResponse) String() string {
	return tea.Prettify(s)
}

func (s StartDidAgentChallengeresponseResponse) GoString() string {
	return s.String()
}

func (s *StartDidAgentChallengeresponseResponse) SetReqMsgId(v string) *StartDidAgentChallengeresponseResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartDidAgentChallengeresponseResponse) SetResultCode(v string) *StartDidAgentChallengeresponseResponse {
	s.ResultCode = &v
	return s
}

func (s *StartDidAgentChallengeresponseResponse) SetResultMsg(v string) *StartDidAgentChallengeresponseResponse {
	s.ResultMsg = &v
	return s
}

func (s *StartDidAgentChallengeresponseResponse) SetSignData(v string) *StartDidAgentChallengeresponseResponse {
	s.SignData = &v
	return s
}

type StartDidAgentVerifyauthresponseRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// { __challenge":xxxx, //待签名的明文
	//  “expired”：xxxx,//签名有效时间
	// “sign”：xxxx，//对上述字段进行的签名
	// }
	AuthResponse *string `json:"auth_response,omitempty" xml:"auth_response,omitempty" require:"true"`
	// 待验证的did
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 场景码，找dis工作人员进行分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
}

func (s StartDidAgentVerifyauthresponseRequest) String() string {
	return tea.Prettify(s)
}

func (s StartDidAgentVerifyauthresponseRequest) GoString() string {
	return s.String()
}

func (s *StartDidAgentVerifyauthresponseRequest) SetAuthToken(v string) *StartDidAgentVerifyauthresponseRequest {
	s.AuthToken = &v
	return s
}

func (s *StartDidAgentVerifyauthresponseRequest) SetProductInstanceId(v string) *StartDidAgentVerifyauthresponseRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *StartDidAgentVerifyauthresponseRequest) SetAuthResponse(v string) *StartDidAgentVerifyauthresponseRequest {
	s.AuthResponse = &v
	return s
}

func (s *StartDidAgentVerifyauthresponseRequest) SetDid(v string) *StartDidAgentVerifyauthresponseRequest {
	s.Did = &v
	return s
}

func (s *StartDidAgentVerifyauthresponseRequest) SetBizCode(v string) *StartDidAgentVerifyauthresponseRequest {
	s.BizCode = &v
	return s
}

type StartDidAgentVerifyauthresponseResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s StartDidAgentVerifyauthresponseResponse) String() string {
	return tea.Prettify(s)
}

func (s StartDidAgentVerifyauthresponseResponse) GoString() string {
	return s.String()
}

func (s *StartDidAgentVerifyauthresponseResponse) SetReqMsgId(v string) *StartDidAgentVerifyauthresponseResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartDidAgentVerifyauthresponseResponse) SetResultCode(v string) *StartDidAgentVerifyauthresponseResponse {
	s.ResultCode = &v
	return s
}

func (s *StartDidAgentVerifyauthresponseResponse) SetResultMsg(v string) *StartDidAgentVerifyauthresponseResponse {
	s.ResultMsg = &v
	return s
}

type StartDidCertificationMaskRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 身份证号码
	CertNo *string `json:"cert_no,omitempty" xml:"cert_no,omitempty" require:"true"`
	// 颁发证书的subject did
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 手机号码
	Mobile *string `json:"mobile,omitempty" xml:"mobile,omitempty" require:"true"`
	// 姓名
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 场景码，找dis工作人员进行分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
}

func (s StartDidCertificationMaskRequest) String() string {
	return tea.Prettify(s)
}

func (s StartDidCertificationMaskRequest) GoString() string {
	return s.String()
}

func (s *StartDidCertificationMaskRequest) SetAuthToken(v string) *StartDidCertificationMaskRequest {
	s.AuthToken = &v
	return s
}

func (s *StartDidCertificationMaskRequest) SetProductInstanceId(v string) *StartDidCertificationMaskRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *StartDidCertificationMaskRequest) SetCertNo(v string) *StartDidCertificationMaskRequest {
	s.CertNo = &v
	return s
}

func (s *StartDidCertificationMaskRequest) SetDid(v string) *StartDidCertificationMaskRequest {
	s.Did = &v
	return s
}

func (s *StartDidCertificationMaskRequest) SetMobile(v string) *StartDidCertificationMaskRequest {
	s.Mobile = &v
	return s
}

func (s *StartDidCertificationMaskRequest) SetName(v string) *StartDidCertificationMaskRequest {
	s.Name = &v
	return s
}

func (s *StartDidCertificationMaskRequest) SetBizCode(v string) *StartDidCertificationMaskRequest {
	s.BizCode = &v
	return s
}

type StartDidCertificationMaskResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// vc id，可通过该字符串来查询vc具体内容
	VcId *string `json:"vc_id,omitempty" xml:"vc_id,omitempty"`
}

func (s StartDidCertificationMaskResponse) String() string {
	return tea.Prettify(s)
}

func (s StartDidCertificationMaskResponse) GoString() string {
	return s.String()
}

func (s *StartDidCertificationMaskResponse) SetReqMsgId(v string) *StartDidCertificationMaskResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartDidCertificationMaskResponse) SetResultCode(v string) *StartDidCertificationMaskResponse {
	s.ResultCode = &v
	return s
}

func (s *StartDidCertificationMaskResponse) SetResultMsg(v string) *StartDidCertificationMaskResponse {
	s.ResultMsg = &v
	return s
}

func (s *StartDidCertificationMaskResponse) SetVcId(v string) *StartDidCertificationMaskResponse {
	s.VcId = &v
	return s
}

type OpenDidAdminServiceRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 场景码，找dis工作人员进行分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
	// 账户接入公钥
	DisAccessKey *string `json:"dis_access_key,omitempty" xml:"dis_access_key,omitempty"`
	// 扩展字段
	Specification *string `json:"specification,omitempty" xml:"specification,omitempty"`
	// 租户id
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty" require:"true"`
}

func (s OpenDidAdminServiceRequest) String() string {
	return tea.Prettify(s)
}

func (s OpenDidAdminServiceRequest) GoString() string {
	return s.String()
}

func (s *OpenDidAdminServiceRequest) SetAuthToken(v string) *OpenDidAdminServiceRequest {
	s.AuthToken = &v
	return s
}

func (s *OpenDidAdminServiceRequest) SetProductInstanceId(v string) *OpenDidAdminServiceRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *OpenDidAdminServiceRequest) SetBizCode(v string) *OpenDidAdminServiceRequest {
	s.BizCode = &v
	return s
}

func (s *OpenDidAdminServiceRequest) SetDisAccessKey(v string) *OpenDidAdminServiceRequest {
	s.DisAccessKey = &v
	return s
}

func (s *OpenDidAdminServiceRequest) SetSpecification(v string) *OpenDidAdminServiceRequest {
	s.Specification = &v
	return s
}

func (s *OpenDidAdminServiceRequest) SetTenantId(v string) *OpenDidAdminServiceRequest {
	s.TenantId = &v
	return s
}

type OpenDidAdminServiceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 分配给该租户的访问密钥
	DisAccessKey *string `json:"dis_access_key,omitempty" xml:"dis_access_key,omitempty"`
}

func (s OpenDidAdminServiceResponse) String() string {
	return tea.Prettify(s)
}

func (s OpenDidAdminServiceResponse) GoString() string {
	return s.String()
}

func (s *OpenDidAdminServiceResponse) SetReqMsgId(v string) *OpenDidAdminServiceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *OpenDidAdminServiceResponse) SetResultCode(v string) *OpenDidAdminServiceResponse {
	s.ResultCode = &v
	return s
}

func (s *OpenDidAdminServiceResponse) SetResultMsg(v string) *OpenDidAdminServiceResponse {
	s.ResultMsg = &v
	return s
}

func (s *OpenDidAdminServiceResponse) SetDisAccessKey(v string) *OpenDidAdminServiceResponse {
	s.DisAccessKey = &v
	return s
}

type StopDidAdminServiceRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 场景码，找dis工作人员进行分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
	// 扩展字段
	Specification *string `json:"specification,omitempty" xml:"specification,omitempty"`
	// 指定租户
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty" require:"true"`
}

func (s StopDidAdminServiceRequest) String() string {
	return tea.Prettify(s)
}

func (s StopDidAdminServiceRequest) GoString() string {
	return s.String()
}

func (s *StopDidAdminServiceRequest) SetAuthToken(v string) *StopDidAdminServiceRequest {
	s.AuthToken = &v
	return s
}

func (s *StopDidAdminServiceRequest) SetProductInstanceId(v string) *StopDidAdminServiceRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *StopDidAdminServiceRequest) SetBizCode(v string) *StopDidAdminServiceRequest {
	s.BizCode = &v
	return s
}

func (s *StopDidAdminServiceRequest) SetSpecification(v string) *StopDidAdminServiceRequest {
	s.Specification = &v
	return s
}

func (s *StopDidAdminServiceRequest) SetTenantId(v string) *StopDidAdminServiceRequest {
	s.TenantId = &v
	return s
}

type StopDidAdminServiceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s StopDidAdminServiceResponse) String() string {
	return tea.Prettify(s)
}

func (s StopDidAdminServiceResponse) GoString() string {
	return s.String()
}

func (s *StopDidAdminServiceResponse) SetReqMsgId(v string) *StopDidAdminServiceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StopDidAdminServiceResponse) SetResultCode(v string) *StopDidAdminServiceResponse {
	s.ResultCode = &v
	return s
}

func (s *StopDidAdminServiceResponse) SetResultMsg(v string) *StopDidAdminServiceResponse {
	s.ResultMsg = &v
	return s
}

type StartDidSignatureAgentRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 场景码，找dis工作人员进行分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
	// 需要进行签名的字符串
	Data *string `json:"data,omitempty" xml:"data,omitempty" require:"true"`
	// 0 原始数据
	// 1 hash值
	DataType *int64 `json:"data_type,omitempty" xml:"data_type,omitempty"`
	// 需要进行代理签名的did
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
}

func (s StartDidSignatureAgentRequest) String() string {
	return tea.Prettify(s)
}

func (s StartDidSignatureAgentRequest) GoString() string {
	return s.String()
}

func (s *StartDidSignatureAgentRequest) SetAuthToken(v string) *StartDidSignatureAgentRequest {
	s.AuthToken = &v
	return s
}

func (s *StartDidSignatureAgentRequest) SetProductInstanceId(v string) *StartDidSignatureAgentRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *StartDidSignatureAgentRequest) SetBizCode(v string) *StartDidSignatureAgentRequest {
	s.BizCode = &v
	return s
}

func (s *StartDidSignatureAgentRequest) SetData(v string) *StartDidSignatureAgentRequest {
	s.Data = &v
	return s
}

func (s *StartDidSignatureAgentRequest) SetDataType(v int64) *StartDidSignatureAgentRequest {
	s.DataType = &v
	return s
}

func (s *StartDidSignatureAgentRequest) SetDid(v string) *StartDidSignatureAgentRequest {
	s.Did = &v
	return s
}

type StartDidSignatureAgentResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 签名之后的结果
	Signature *string `json:"signature,omitempty" xml:"signature,omitempty"`
}

func (s StartDidSignatureAgentResponse) String() string {
	return tea.Prettify(s)
}

func (s StartDidSignatureAgentResponse) GoString() string {
	return s.String()
}

func (s *StartDidSignatureAgentResponse) SetReqMsgId(v string) *StartDidSignatureAgentResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartDidSignatureAgentResponse) SetResultCode(v string) *StartDidSignatureAgentResponse {
	s.ResultCode = &v
	return s
}

func (s *StartDidSignatureAgentResponse) SetResultMsg(v string) *StartDidSignatureAgentResponse {
	s.ResultMsg = &v
	return s
}

func (s *StartDidSignatureAgentResponse) SetSignature(v string) *StartDidSignatureAgentResponse {
	s.Signature = &v
	return s
}

type CheckDidSignRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 需要验签的字符串
	CheckData *string `json:"check_data,omitempty" xml:"check_data,omitempty" require:"true"`
	// 对字符串签名的did
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 签名后的字符串
	Signature *string `json:"signature,omitempty" xml:"signature,omitempty" require:"true"`
	// 场景码，找dis工作人员进行分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
}

func (s CheckDidSignRequest) String() string {
	return tea.Prettify(s)
}

func (s CheckDidSignRequest) GoString() string {
	return s.String()
}

func (s *CheckDidSignRequest) SetAuthToken(v string) *CheckDidSignRequest {
	s.AuthToken = &v
	return s
}

func (s *CheckDidSignRequest) SetProductInstanceId(v string) *CheckDidSignRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CheckDidSignRequest) SetCheckData(v string) *CheckDidSignRequest {
	s.CheckData = &v
	return s
}

func (s *CheckDidSignRequest) SetDid(v string) *CheckDidSignRequest {
	s.Did = &v
	return s
}

func (s *CheckDidSignRequest) SetSignature(v string) *CheckDidSignRequest {
	s.Signature = &v
	return s
}

func (s *CheckDidSignRequest) SetBizCode(v string) *CheckDidSignRequest {
	s.BizCode = &v
	return s
}

type CheckDidSignResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s CheckDidSignResponse) String() string {
	return tea.Prettify(s)
}

func (s CheckDidSignResponse) GoString() string {
	return s.String()
}

func (s *CheckDidSignResponse) SetReqMsgId(v string) *CheckDidSignResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CheckDidSignResponse) SetResultCode(v string) *CheckDidSignResponse {
	s.ResultCode = &v
	return s
}

func (s *CheckDidSignResponse) SetResultMsg(v string) *CheckDidSignResponse {
	s.ResultMsg = &v
	return s
}

type StartDidZkpverifiableclaimVisibilityRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// vc颁发者
	Issuer *string `json:"issuer,omitempty" xml:"issuer,omitempty" require:"true"`
	// 哪些字段将被展示。
	// 如果父路径和子路径都被包含，那么将以最上级路径为准，展示上级路径对应的内容
	Path []*string `json:"path,omitempty" xml:"path,omitempty" require:"true" type:"Repeated"`
	// vc完整原文
	Vc *string `json:"vc,omitempty" xml:"vc,omitempty" require:"true"`
	// 场景码，找dis工作人员进行分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
}

func (s StartDidZkpverifiableclaimVisibilityRequest) String() string {
	return tea.Prettify(s)
}

func (s StartDidZkpverifiableclaimVisibilityRequest) GoString() string {
	return s.String()
}

func (s *StartDidZkpverifiableclaimVisibilityRequest) SetAuthToken(v string) *StartDidZkpverifiableclaimVisibilityRequest {
	s.AuthToken = &v
	return s
}

func (s *StartDidZkpverifiableclaimVisibilityRequest) SetProductInstanceId(v string) *StartDidZkpverifiableclaimVisibilityRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *StartDidZkpverifiableclaimVisibilityRequest) SetIssuer(v string) *StartDidZkpverifiableclaimVisibilityRequest {
	s.Issuer = &v
	return s
}

func (s *StartDidZkpverifiableclaimVisibilityRequest) SetPath(v []*string) *StartDidZkpverifiableclaimVisibilityRequest {
	s.Path = v
	return s
}

func (s *StartDidZkpverifiableclaimVisibilityRequest) SetVc(v string) *StartDidZkpverifiableclaimVisibilityRequest {
	s.Vc = &v
	return s
}

func (s *StartDidZkpverifiableclaimVisibilityRequest) SetBizCode(v string) *StartDidZkpverifiableclaimVisibilityRequest {
	s.BizCode = &v
	return s
}

type StartDidZkpverifiableclaimVisibilityResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 索引字段，标示哪些字段是原始值，哪些字段是hash值
	Index *string `json:"index,omitempty" xml:"index,omitempty"`
	// 被隐藏了部分内容的VC内容
	VcView *string `json:"vc_view,omitempty" xml:"vc_view,omitempty"`
}

func (s StartDidZkpverifiableclaimVisibilityResponse) String() string {
	return tea.Prettify(s)
}

func (s StartDidZkpverifiableclaimVisibilityResponse) GoString() string {
	return s.String()
}

func (s *StartDidZkpverifiableclaimVisibilityResponse) SetReqMsgId(v string) *StartDidZkpverifiableclaimVisibilityResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartDidZkpverifiableclaimVisibilityResponse) SetResultCode(v string) *StartDidZkpverifiableclaimVisibilityResponse {
	s.ResultCode = &v
	return s
}

func (s *StartDidZkpverifiableclaimVisibilityResponse) SetResultMsg(v string) *StartDidZkpverifiableclaimVisibilityResponse {
	s.ResultMsg = &v
	return s
}

func (s *StartDidZkpverifiableclaimVisibilityResponse) SetIndex(v string) *StartDidZkpverifiableclaimVisibilityResponse {
	s.Index = &v
	return s
}

func (s *StartDidZkpverifiableclaimVisibilityResponse) SetVcView(v string) *StartDidZkpverifiableclaimVisibilityResponse {
	s.VcView = &v
	return s
}

type StartDidAgentSidekeyRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 指定did进行外键关联
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 所有需要关联的外键，外键必须已did auth key controller的did作为前缀+“sidekey:”+外键
	Indexs []*string `json:"indexs,omitempty" xml:"indexs,omitempty" require:"true" type:"Repeated"`
	// 场景码，找dis工作人员进行分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
}

func (s StartDidAgentSidekeyRequest) String() string {
	return tea.Prettify(s)
}

func (s StartDidAgentSidekeyRequest) GoString() string {
	return s.String()
}

func (s *StartDidAgentSidekeyRequest) SetAuthToken(v string) *StartDidAgentSidekeyRequest {
	s.AuthToken = &v
	return s
}

func (s *StartDidAgentSidekeyRequest) SetProductInstanceId(v string) *StartDidAgentSidekeyRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *StartDidAgentSidekeyRequest) SetDid(v string) *StartDidAgentSidekeyRequest {
	s.Did = &v
	return s
}

func (s *StartDidAgentSidekeyRequest) SetIndexs(v []*string) *StartDidAgentSidekeyRequest {
	s.Indexs = v
	return s
}

func (s *StartDidAgentSidekeyRequest) SetBizCode(v string) *StartDidAgentSidekeyRequest {
	s.BizCode = &v
	return s
}

type StartDidAgentSidekeyResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s StartDidAgentSidekeyResponse) String() string {
	return tea.Prettify(s)
}

func (s StartDidAgentSidekeyResponse) GoString() string {
	return s.String()
}

func (s *StartDidAgentSidekeyResponse) SetReqMsgId(v string) *StartDidAgentSidekeyResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartDidAgentSidekeyResponse) SetResultCode(v string) *StartDidAgentSidekeyResponse {
	s.ResultCode = &v
	return s
}

func (s *StartDidAgentSidekeyResponse) SetResultMsg(v string) *StartDidAgentSidekeyResponse {
	s.ResultMsg = &v
	return s
}

type UpdateDidAgentSidekeyRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 新增的外键
	AddIndexs []*string `json:"add_indexs,omitempty" xml:"add_indexs,omitempty" type:"Repeated"`
	// 去掉哪些外键
	DeleteIndexs []*string `json:"delete_indexs,omitempty" xml:"delete_indexs,omitempty" type:"Repeated"`
	// 指定did进行外键关联
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 场景码，找dis工作人员进行分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
}

func (s UpdateDidAgentSidekeyRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateDidAgentSidekeyRequest) GoString() string {
	return s.String()
}

func (s *UpdateDidAgentSidekeyRequest) SetAuthToken(v string) *UpdateDidAgentSidekeyRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateDidAgentSidekeyRequest) SetProductInstanceId(v string) *UpdateDidAgentSidekeyRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UpdateDidAgentSidekeyRequest) SetAddIndexs(v []*string) *UpdateDidAgentSidekeyRequest {
	s.AddIndexs = v
	return s
}

func (s *UpdateDidAgentSidekeyRequest) SetDeleteIndexs(v []*string) *UpdateDidAgentSidekeyRequest {
	s.DeleteIndexs = v
	return s
}

func (s *UpdateDidAgentSidekeyRequest) SetDid(v string) *UpdateDidAgentSidekeyRequest {
	s.Did = &v
	return s
}

func (s *UpdateDidAgentSidekeyRequest) SetBizCode(v string) *UpdateDidAgentSidekeyRequest {
	s.BizCode = &v
	return s
}

type UpdateDidAgentSidekeyResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateDidAgentSidekeyResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateDidAgentSidekeyResponse) GoString() string {
	return s.String()
}

func (s *UpdateDidAgentSidekeyResponse) SetReqMsgId(v string) *UpdateDidAgentSidekeyResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateDidAgentSidekeyResponse) SetResultCode(v string) *UpdateDidAgentSidekeyResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateDidAgentSidekeyResponse) SetResultMsg(v string) *UpdateDidAgentSidekeyResponse {
	s.ResultMsg = &v
	return s
}

type StartDidCorporateAgentcreatewithsidekeyRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// {
	//     "自定义服务相关字段": 自定义字符串,
	//     "nation": "CN",
	//     "type": "LimitedCompany",
	//     "name": "演示用户名",
	//     "licenceNo": "1111",
	//     "address": "1111",
	//     "parentName": "演示直连公司",
	//     "linkType": "indirect",
	//     "certifyDate": "2019-1-1",
	//     "licenceExpireDate": "2020-1-1",
	//     "businessScope": "1111",
	//     "businessAddress": "1111",
	//     "corporateBusinessType": 0
	// }
	ExtensionInfo *string `json:"extension_info,omitempty" xml:"extension_info,omitempty"`
	// 所有需要关联的外键，外键必须已did auth key controller的did作为前缀+“sidekey:”+外键
	Indexs []*string `json:"indexs,omitempty" xml:"indexs,omitempty" require:"true" type:"Repeated"`
	// 企业名称
	OwnerName *string `json:"owner_name,omitempty" xml:"owner_name,omitempty"`
	// 自定义企业唯一id，企业在自有模式下的唯一号bid的has...
	OwnerUid *string `json:"owner_uid,omitempty" xml:"owner_uid,omitempty" require:"true"`
	// 场景码，找dis工作人员进行分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
}

func (s StartDidCorporateAgentcreatewithsidekeyRequest) String() string {
	return tea.Prettify(s)
}

func (s StartDidCorporateAgentcreatewithsidekeyRequest) GoString() string {
	return s.String()
}

func (s *StartDidCorporateAgentcreatewithsidekeyRequest) SetAuthToken(v string) *StartDidCorporateAgentcreatewithsidekeyRequest {
	s.AuthToken = &v
	return s
}

func (s *StartDidCorporateAgentcreatewithsidekeyRequest) SetProductInstanceId(v string) *StartDidCorporateAgentcreatewithsidekeyRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *StartDidCorporateAgentcreatewithsidekeyRequest) SetExtensionInfo(v string) *StartDidCorporateAgentcreatewithsidekeyRequest {
	s.ExtensionInfo = &v
	return s
}

func (s *StartDidCorporateAgentcreatewithsidekeyRequest) SetIndexs(v []*string) *StartDidCorporateAgentcreatewithsidekeyRequest {
	s.Indexs = v
	return s
}

func (s *StartDidCorporateAgentcreatewithsidekeyRequest) SetOwnerName(v string) *StartDidCorporateAgentcreatewithsidekeyRequest {
	s.OwnerName = &v
	return s
}

func (s *StartDidCorporateAgentcreatewithsidekeyRequest) SetOwnerUid(v string) *StartDidCorporateAgentcreatewithsidekeyRequest {
	s.OwnerUid = &v
	return s
}

func (s *StartDidCorporateAgentcreatewithsidekeyRequest) SetBizCode(v string) *StartDidCorporateAgentcreatewithsidekeyRequest {
	s.BizCode = &v
	return s
}

type StartDidCorporateAgentcreatewithsidekeyResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 生成的did字符串
	Did *string `json:"did,omitempty" xml:"did,omitempty"`
}

func (s StartDidCorporateAgentcreatewithsidekeyResponse) String() string {
	return tea.Prettify(s)
}

func (s StartDidCorporateAgentcreatewithsidekeyResponse) GoString() string {
	return s.String()
}

func (s *StartDidCorporateAgentcreatewithsidekeyResponse) SetReqMsgId(v string) *StartDidCorporateAgentcreatewithsidekeyResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartDidCorporateAgentcreatewithsidekeyResponse) SetResultCode(v string) *StartDidCorporateAgentcreatewithsidekeyResponse {
	s.ResultCode = &v
	return s
}

func (s *StartDidCorporateAgentcreatewithsidekeyResponse) SetResultMsg(v string) *StartDidCorporateAgentcreatewithsidekeyResponse {
	s.ResultMsg = &v
	return s
}

func (s *StartDidCorporateAgentcreatewithsidekeyResponse) SetDid(v string) *StartDidCorporateAgentcreatewithsidekeyResponse {
	s.Did = &v
	return s
}

type UpdateDidCorporateExtensionservicewithsidekeyRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 新增的外键
	AddIndexs []*string `json:"add_indexs,omitempty" xml:"add_indexs,omitempty" type:"Repeated"`
	// 去掉哪些外键
	DeleteIndexs []*string `json:"delete_indexs,omitempty" xml:"delete_indexs,omitempty" type:"Repeated"`
	// 需要更新的did doc对应的did字段；该did必须为调用者自己的did，或者托管给调用者的did
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 修改后的全量扩展字段
	Extension *string `json:"extension,omitempty" xml:"extension,omitempty" require:"true"`
	// 场景码，找dis工作人员进行分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
}

func (s UpdateDidCorporateExtensionservicewithsidekeyRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateDidCorporateExtensionservicewithsidekeyRequest) GoString() string {
	return s.String()
}

func (s *UpdateDidCorporateExtensionservicewithsidekeyRequest) SetAuthToken(v string) *UpdateDidCorporateExtensionservicewithsidekeyRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateDidCorporateExtensionservicewithsidekeyRequest) SetProductInstanceId(v string) *UpdateDidCorporateExtensionservicewithsidekeyRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UpdateDidCorporateExtensionservicewithsidekeyRequest) SetAddIndexs(v []*string) *UpdateDidCorporateExtensionservicewithsidekeyRequest {
	s.AddIndexs = v
	return s
}

func (s *UpdateDidCorporateExtensionservicewithsidekeyRequest) SetDeleteIndexs(v []*string) *UpdateDidCorporateExtensionservicewithsidekeyRequest {
	s.DeleteIndexs = v
	return s
}

func (s *UpdateDidCorporateExtensionservicewithsidekeyRequest) SetDid(v string) *UpdateDidCorporateExtensionservicewithsidekeyRequest {
	s.Did = &v
	return s
}

func (s *UpdateDidCorporateExtensionservicewithsidekeyRequest) SetExtension(v string) *UpdateDidCorporateExtensionservicewithsidekeyRequest {
	s.Extension = &v
	return s
}

func (s *UpdateDidCorporateExtensionservicewithsidekeyRequest) SetBizCode(v string) *UpdateDidCorporateExtensionservicewithsidekeyRequest {
	s.BizCode = &v
	return s
}

type UpdateDidCorporateExtensionservicewithsidekeyResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateDidCorporateExtensionservicewithsidekeyResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateDidCorporateExtensionservicewithsidekeyResponse) GoString() string {
	return s.String()
}

func (s *UpdateDidCorporateExtensionservicewithsidekeyResponse) SetReqMsgId(v string) *UpdateDidCorporateExtensionservicewithsidekeyResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateDidCorporateExtensionservicewithsidekeyResponse) SetResultCode(v string) *UpdateDidCorporateExtensionservicewithsidekeyResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateDidCorporateExtensionservicewithsidekeyResponse) SetResultMsg(v string) *UpdateDidCorporateExtensionservicewithsidekeyResponse {
	s.ResultMsg = &v
	return s
}

type QueryDidDocSidekeyRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 是否需要分页返回
	NeedPage *bool `json:"need_page,omitempty" xml:"need_page,omitempty"`
	// 按分页查询
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty"`
	// 前缀+z40_uid
	SideKey *string `json:"side_key,omitempty" xml:"side_key,omitempty" require:"true"`
	// 通过外键查询did，需要以下条件之一：
	// 1. 查询者为外键前缀对应的did；
	// 2. 查询者能够提供外键前缀对应的did的授权vc。
	VerifiableClaim *string `json:"verifiable_claim,omitempty" xml:"verifiable_claim,omitempty"`
	// 场景码，找dis工作人员进行分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
}

func (s QueryDidDocSidekeyRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDidDocSidekeyRequest) GoString() string {
	return s.String()
}

func (s *QueryDidDocSidekeyRequest) SetAuthToken(v string) *QueryDidDocSidekeyRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryDidDocSidekeyRequest) SetProductInstanceId(v string) *QueryDidDocSidekeyRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryDidDocSidekeyRequest) SetNeedPage(v bool) *QueryDidDocSidekeyRequest {
	s.NeedPage = &v
	return s
}

func (s *QueryDidDocSidekeyRequest) SetPageNum(v int64) *QueryDidDocSidekeyRequest {
	s.PageNum = &v
	return s
}

func (s *QueryDidDocSidekeyRequest) SetSideKey(v string) *QueryDidDocSidekeyRequest {
	s.SideKey = &v
	return s
}

func (s *QueryDidDocSidekeyRequest) SetVerifiableClaim(v string) *QueryDidDocSidekeyRequest {
	s.VerifiableClaim = &v
	return s
}

func (s *QueryDidDocSidekeyRequest) SetBizCode(v string) *QueryDidDocSidekeyRequest {
	s.BizCode = &v
	return s
}

type QueryDidDocSidekeyResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// side可以查找到的所有did doc数组，以json方式输出
	Doc *string `json:"doc,omitempty" xml:"doc,omitempty"`
	// 总个数
	TotalNum *int64 `json:"total_num,omitempty" xml:"total_num,omitempty"`
	// 总页数
	TotalPage *int64 `json:"total_page,omitempty" xml:"total_page,omitempty"`
}

func (s QueryDidDocSidekeyResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDidDocSidekeyResponse) GoString() string {
	return s.String()
}

func (s *QueryDidDocSidekeyResponse) SetReqMsgId(v string) *QueryDidDocSidekeyResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryDidDocSidekeyResponse) SetResultCode(v string) *QueryDidDocSidekeyResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryDidDocSidekeyResponse) SetResultMsg(v string) *QueryDidDocSidekeyResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryDidDocSidekeyResponse) SetDoc(v string) *QueryDidDocSidekeyResponse {
	s.Doc = &v
	return s
}

func (s *QueryDidDocSidekeyResponse) SetTotalNum(v int64) *QueryDidDocSidekeyResponse {
	s.TotalNum = &v
	return s
}

func (s *QueryDidDocSidekeyResponse) SetTotalPage(v int64) *QueryDidDocSidekeyResponse {
	s.TotalPage = &v
	return s
}

type StartDidPersonAgentcreatewithsidekeyRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// { "自定义服务相关字段": 自定义字符串, "nation": "CN", "certType": "身份证", "name": "演示用户名", "certNo": "1111"}
	ExtensionInfo *string `json:"extension_info,omitempty" xml:"extension_info,omitempty"`
	// 所有需要关联的外键，外键必须已did auth key controller的did作为前缀+“sidekey:”+外键
	Indexs []*string `json:"indexs,omitempty" xml:"indexs,omitempty" require:"true" type:"Repeated"`
	// 个人名称
	OwnerName *string `json:"owner_name,omitempty" xml:"owner_name,omitempty"`
	// 自定义企业唯一id，企业在自有模式下的唯一号bid的has...
	OwnerUid *string `json:"owner_uid,omitempty" xml:"owner_uid,omitempty" require:"true"`
	// 场景码，找dis工作人员进行分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
}

func (s StartDidPersonAgentcreatewithsidekeyRequest) String() string {
	return tea.Prettify(s)
}

func (s StartDidPersonAgentcreatewithsidekeyRequest) GoString() string {
	return s.String()
}

func (s *StartDidPersonAgentcreatewithsidekeyRequest) SetAuthToken(v string) *StartDidPersonAgentcreatewithsidekeyRequest {
	s.AuthToken = &v
	return s
}

func (s *StartDidPersonAgentcreatewithsidekeyRequest) SetProductInstanceId(v string) *StartDidPersonAgentcreatewithsidekeyRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *StartDidPersonAgentcreatewithsidekeyRequest) SetExtensionInfo(v string) *StartDidPersonAgentcreatewithsidekeyRequest {
	s.ExtensionInfo = &v
	return s
}

func (s *StartDidPersonAgentcreatewithsidekeyRequest) SetIndexs(v []*string) *StartDidPersonAgentcreatewithsidekeyRequest {
	s.Indexs = v
	return s
}

func (s *StartDidPersonAgentcreatewithsidekeyRequest) SetOwnerName(v string) *StartDidPersonAgentcreatewithsidekeyRequest {
	s.OwnerName = &v
	return s
}

func (s *StartDidPersonAgentcreatewithsidekeyRequest) SetOwnerUid(v string) *StartDidPersonAgentcreatewithsidekeyRequest {
	s.OwnerUid = &v
	return s
}

func (s *StartDidPersonAgentcreatewithsidekeyRequest) SetBizCode(v string) *StartDidPersonAgentcreatewithsidekeyRequest {
	s.BizCode = &v
	return s
}

type StartDidPersonAgentcreatewithsidekeyResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 生成的did字符串
	Did *string `json:"did,omitempty" xml:"did,omitempty"`
}

func (s StartDidPersonAgentcreatewithsidekeyResponse) String() string {
	return tea.Prettify(s)
}

func (s StartDidPersonAgentcreatewithsidekeyResponse) GoString() string {
	return s.String()
}

func (s *StartDidPersonAgentcreatewithsidekeyResponse) SetReqMsgId(v string) *StartDidPersonAgentcreatewithsidekeyResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartDidPersonAgentcreatewithsidekeyResponse) SetResultCode(v string) *StartDidPersonAgentcreatewithsidekeyResponse {
	s.ResultCode = &v
	return s
}

func (s *StartDidPersonAgentcreatewithsidekeyResponse) SetResultMsg(v string) *StartDidPersonAgentcreatewithsidekeyResponse {
	s.ResultMsg = &v
	return s
}

func (s *StartDidPersonAgentcreatewithsidekeyResponse) SetDid(v string) *StartDidPersonAgentcreatewithsidekeyResponse {
	s.Did = &v
	return s
}

type StartDidIotAgentcreateRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// { "自定义服务相关字段": 自定义字符串, "type": "IOT设备类型", "name": "演示用户名", "licenceNo": "设备唯一号", "address": "1111" }
	ExtensionInfo *string `json:"extension_info,omitempty" xml:"extension_info,omitempty"`
	// 所有需要关联的外键，外键必须已did auth key controller的did作为前缀+“sidekey:”+外键
	Indexs []*string `json:"indexs,omitempty" xml:"indexs,omitempty" type:"Repeated"`
	// 企业名称
	OwnerName *string `json:"owner_name,omitempty" xml:"owner_name,omitempty"`
	// 自定义企业唯一id，企业在自有模式下的唯一号bid的has...
	OwnerUid *string `json:"owner_uid,omitempty" xml:"owner_uid,omitempty" require:"true"`
	// 携带自己定义的服务类型
	//
	Services []*DidDocServicesInfo `json:"services,omitempty" xml:"services,omitempty" type:"Repeated"`
	// 场景码，找dis工作人员进行分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
}

func (s StartDidIotAgentcreateRequest) String() string {
	return tea.Prettify(s)
}

func (s StartDidIotAgentcreateRequest) GoString() string {
	return s.String()
}

func (s *StartDidIotAgentcreateRequest) SetAuthToken(v string) *StartDidIotAgentcreateRequest {
	s.AuthToken = &v
	return s
}

func (s *StartDidIotAgentcreateRequest) SetProductInstanceId(v string) *StartDidIotAgentcreateRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *StartDidIotAgentcreateRequest) SetExtensionInfo(v string) *StartDidIotAgentcreateRequest {
	s.ExtensionInfo = &v
	return s
}

func (s *StartDidIotAgentcreateRequest) SetIndexs(v []*string) *StartDidIotAgentcreateRequest {
	s.Indexs = v
	return s
}

func (s *StartDidIotAgentcreateRequest) SetOwnerName(v string) *StartDidIotAgentcreateRequest {
	s.OwnerName = &v
	return s
}

func (s *StartDidIotAgentcreateRequest) SetOwnerUid(v string) *StartDidIotAgentcreateRequest {
	s.OwnerUid = &v
	return s
}

func (s *StartDidIotAgentcreateRequest) SetServices(v []*DidDocServicesInfo) *StartDidIotAgentcreateRequest {
	s.Services = v
	return s
}

func (s *StartDidIotAgentcreateRequest) SetBizCode(v string) *StartDidIotAgentcreateRequest {
	s.BizCode = &v
	return s
}

type StartDidIotAgentcreateResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 生成的did字符串
	Did *string `json:"did,omitempty" xml:"did,omitempty"`
}

func (s StartDidIotAgentcreateResponse) String() string {
	return tea.Prettify(s)
}

func (s StartDidIotAgentcreateResponse) GoString() string {
	return s.String()
}

func (s *StartDidIotAgentcreateResponse) SetReqMsgId(v string) *StartDidIotAgentcreateResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartDidIotAgentcreateResponse) SetResultCode(v string) *StartDidIotAgentcreateResponse {
	s.ResultCode = &v
	return s
}

func (s *StartDidIotAgentcreateResponse) SetResultMsg(v string) *StartDidIotAgentcreateResponse {
	s.ResultMsg = &v
	return s
}

func (s *StartDidIotAgentcreateResponse) SetDid(v string) *StartDidIotAgentcreateResponse {
	s.Did = &v
	return s
}

type StartDidIotAgentcreatewithsidekeyRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// { "自定义服务相关字段": 自定义字符串, "type": "IOT设备类型", "name": "演示用户名", "licenceNo": "设备唯一号", "address": "1111" }
	ExtensionInfo *string `json:"extension_info,omitempty" xml:"extension_info,omitempty"`
	// 所有需要关联的外键，外键必须已did auth key controller的did作为前缀+“sidekey:”+外键
	Indexs []*string `json:"indexs,omitempty" xml:"indexs,omitempty" require:"true" type:"Repeated"`
	// iot设备名
	OwnerName *string `json:"owner_name,omitempty" xml:"owner_name,omitempty"`
	// 自定义企业唯一id，企业在自有模式下的唯一号bid的has...
	OwnerUid *string `json:"owner_uid,omitempty" xml:"owner_uid,omitempty" require:"true"`
	// 场景码，找dis工作人员进行分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
}

func (s StartDidIotAgentcreatewithsidekeyRequest) String() string {
	return tea.Prettify(s)
}

func (s StartDidIotAgentcreatewithsidekeyRequest) GoString() string {
	return s.String()
}

func (s *StartDidIotAgentcreatewithsidekeyRequest) SetAuthToken(v string) *StartDidIotAgentcreatewithsidekeyRequest {
	s.AuthToken = &v
	return s
}

func (s *StartDidIotAgentcreatewithsidekeyRequest) SetProductInstanceId(v string) *StartDidIotAgentcreatewithsidekeyRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *StartDidIotAgentcreatewithsidekeyRequest) SetExtensionInfo(v string) *StartDidIotAgentcreatewithsidekeyRequest {
	s.ExtensionInfo = &v
	return s
}

func (s *StartDidIotAgentcreatewithsidekeyRequest) SetIndexs(v []*string) *StartDidIotAgentcreatewithsidekeyRequest {
	s.Indexs = v
	return s
}

func (s *StartDidIotAgentcreatewithsidekeyRequest) SetOwnerName(v string) *StartDidIotAgentcreatewithsidekeyRequest {
	s.OwnerName = &v
	return s
}

func (s *StartDidIotAgentcreatewithsidekeyRequest) SetOwnerUid(v string) *StartDidIotAgentcreatewithsidekeyRequest {
	s.OwnerUid = &v
	return s
}

func (s *StartDidIotAgentcreatewithsidekeyRequest) SetBizCode(v string) *StartDidIotAgentcreatewithsidekeyRequest {
	s.BizCode = &v
	return s
}

type StartDidIotAgentcreatewithsidekeyResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 生成的iot did字符串
	Did *string `json:"did,omitempty" xml:"did,omitempty"`
}

func (s StartDidIotAgentcreatewithsidekeyResponse) String() string {
	return tea.Prettify(s)
}

func (s StartDidIotAgentcreatewithsidekeyResponse) GoString() string {
	return s.String()
}

func (s *StartDidIotAgentcreatewithsidekeyResponse) SetReqMsgId(v string) *StartDidIotAgentcreatewithsidekeyResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartDidIotAgentcreatewithsidekeyResponse) SetResultCode(v string) *StartDidIotAgentcreatewithsidekeyResponse {
	s.ResultCode = &v
	return s
}

func (s *StartDidIotAgentcreatewithsidekeyResponse) SetResultMsg(v string) *StartDidIotAgentcreatewithsidekeyResponse {
	s.ResultMsg = &v
	return s
}

func (s *StartDidIotAgentcreatewithsidekeyResponse) SetDid(v string) *StartDidIotAgentcreatewithsidekeyResponse {
	s.Did = &v
	return s
}

type UpdateDidIotExtensionservicewithsidekeyRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 新增的外键
	AddIndexs []*string `json:"add_indexs,omitempty" xml:"add_indexs,omitempty" type:"Repeated"`
	// 去掉哪些外键
	DeleteIndexs []*string `json:"delete_indexs,omitempty" xml:"delete_indexs,omitempty" type:"Repeated"`
	// 需要更新的did doc对应的did字段；该did必须为调用者自己的did，或者托管给调用者的did
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 修改后的全量扩展字段
	Extension *string `json:"extension,omitempty" xml:"extension,omitempty" require:"true"`
	// 场景码，找dis工作人员进行分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
}

func (s UpdateDidIotExtensionservicewithsidekeyRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateDidIotExtensionservicewithsidekeyRequest) GoString() string {
	return s.String()
}

func (s *UpdateDidIotExtensionservicewithsidekeyRequest) SetAuthToken(v string) *UpdateDidIotExtensionservicewithsidekeyRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateDidIotExtensionservicewithsidekeyRequest) SetProductInstanceId(v string) *UpdateDidIotExtensionservicewithsidekeyRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UpdateDidIotExtensionservicewithsidekeyRequest) SetAddIndexs(v []*string) *UpdateDidIotExtensionservicewithsidekeyRequest {
	s.AddIndexs = v
	return s
}

func (s *UpdateDidIotExtensionservicewithsidekeyRequest) SetDeleteIndexs(v []*string) *UpdateDidIotExtensionservicewithsidekeyRequest {
	s.DeleteIndexs = v
	return s
}

func (s *UpdateDidIotExtensionservicewithsidekeyRequest) SetDid(v string) *UpdateDidIotExtensionservicewithsidekeyRequest {
	s.Did = &v
	return s
}

func (s *UpdateDidIotExtensionservicewithsidekeyRequest) SetExtension(v string) *UpdateDidIotExtensionservicewithsidekeyRequest {
	s.Extension = &v
	return s
}

func (s *UpdateDidIotExtensionservicewithsidekeyRequest) SetBizCode(v string) *UpdateDidIotExtensionservicewithsidekeyRequest {
	s.BizCode = &v
	return s
}

type UpdateDidIotExtensionservicewithsidekeyResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateDidIotExtensionservicewithsidekeyResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateDidIotExtensionservicewithsidekeyResponse) GoString() string {
	return s.String()
}

func (s *UpdateDidIotExtensionservicewithsidekeyResponse) SetReqMsgId(v string) *UpdateDidIotExtensionservicewithsidekeyResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateDidIotExtensionservicewithsidekeyResponse) SetResultCode(v string) *UpdateDidIotExtensionservicewithsidekeyResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateDidIotExtensionservicewithsidekeyResponse) SetResultMsg(v string) *UpdateDidIotExtensionservicewithsidekeyResponse {
	s.ResultMsg = &v
	return s
}

type UpdateDidPersonExtensionservicewithsidekeyRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 新增的外键
	AddIndexs []*string `json:"add_indexs,omitempty" xml:"add_indexs,omitempty" type:"Repeated"`
	// 去掉哪些外键
	DeleteIndexs []*string `json:"delete_indexs,omitempty" xml:"delete_indexs,omitempty" type:"Repeated"`
	// 需要更新的did doc对应的did字段；该did必须为调用者自己的did，或者托管给调用者的did
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 修改后的全量扩展字段
	//
	Extension *string `json:"extension,omitempty" xml:"extension,omitempty"`
	// 场景码，找dis工作人员进行分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
}

func (s UpdateDidPersonExtensionservicewithsidekeyRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateDidPersonExtensionservicewithsidekeyRequest) GoString() string {
	return s.String()
}

func (s *UpdateDidPersonExtensionservicewithsidekeyRequest) SetAuthToken(v string) *UpdateDidPersonExtensionservicewithsidekeyRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateDidPersonExtensionservicewithsidekeyRequest) SetProductInstanceId(v string) *UpdateDidPersonExtensionservicewithsidekeyRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UpdateDidPersonExtensionservicewithsidekeyRequest) SetAddIndexs(v []*string) *UpdateDidPersonExtensionservicewithsidekeyRequest {
	s.AddIndexs = v
	return s
}

func (s *UpdateDidPersonExtensionservicewithsidekeyRequest) SetDeleteIndexs(v []*string) *UpdateDidPersonExtensionservicewithsidekeyRequest {
	s.DeleteIndexs = v
	return s
}

func (s *UpdateDidPersonExtensionservicewithsidekeyRequest) SetDid(v string) *UpdateDidPersonExtensionservicewithsidekeyRequest {
	s.Did = &v
	return s
}

func (s *UpdateDidPersonExtensionservicewithsidekeyRequest) SetExtension(v string) *UpdateDidPersonExtensionservicewithsidekeyRequest {
	s.Extension = &v
	return s
}

func (s *UpdateDidPersonExtensionservicewithsidekeyRequest) SetBizCode(v string) *UpdateDidPersonExtensionservicewithsidekeyRequest {
	s.BizCode = &v
	return s
}

type UpdateDidPersonExtensionservicewithsidekeyResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateDidPersonExtensionservicewithsidekeyResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateDidPersonExtensionservicewithsidekeyResponse) GoString() string {
	return s.String()
}

func (s *UpdateDidPersonExtensionservicewithsidekeyResponse) SetReqMsgId(v string) *UpdateDidPersonExtensionservicewithsidekeyResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateDidPersonExtensionservicewithsidekeyResponse) SetResultCode(v string) *UpdateDidPersonExtensionservicewithsidekeyResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateDidPersonExtensionservicewithsidekeyResponse) SetResultMsg(v string) *UpdateDidPersonExtensionservicewithsidekeyResponse {
	s.ResultMsg = &v
	return s
}

type CreateDidPersonWiththreemetaRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 身份证号码
	CertNo *string `json:"cert_no,omitempty" xml:"cert_no,omitempty" require:"true"`
	// 扩展字段
	ExtensionInfo *string `json:"extension_info,omitempty" xml:"extension_info,omitempty"`
	// 手机号码
	Mobile *string `json:"mobile,omitempty" xml:"mobile,omitempty" require:"true"`
	// 姓名
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 名称
	OwnerName *string `json:"owner_name,omitempty" xml:"owner_name,omitempty"`
	// 自定义个人唯一id，个人在自有模式下的唯一号，调用者需要保证其唯一性
	OwnerUid *string `json:"owner_uid,omitempty" xml:"owner_uid,omitempty" require:"true"`
	// 场景码，找dis工作人员进行分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
}

func (s CreateDidPersonWiththreemetaRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDidPersonWiththreemetaRequest) GoString() string {
	return s.String()
}

func (s *CreateDidPersonWiththreemetaRequest) SetAuthToken(v string) *CreateDidPersonWiththreemetaRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateDidPersonWiththreemetaRequest) SetProductInstanceId(v string) *CreateDidPersonWiththreemetaRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateDidPersonWiththreemetaRequest) SetCertNo(v string) *CreateDidPersonWiththreemetaRequest {
	s.CertNo = &v
	return s
}

func (s *CreateDidPersonWiththreemetaRequest) SetExtensionInfo(v string) *CreateDidPersonWiththreemetaRequest {
	s.ExtensionInfo = &v
	return s
}

func (s *CreateDidPersonWiththreemetaRequest) SetMobile(v string) *CreateDidPersonWiththreemetaRequest {
	s.Mobile = &v
	return s
}

func (s *CreateDidPersonWiththreemetaRequest) SetName(v string) *CreateDidPersonWiththreemetaRequest {
	s.Name = &v
	return s
}

func (s *CreateDidPersonWiththreemetaRequest) SetOwnerName(v string) *CreateDidPersonWiththreemetaRequest {
	s.OwnerName = &v
	return s
}

func (s *CreateDidPersonWiththreemetaRequest) SetOwnerUid(v string) *CreateDidPersonWiththreemetaRequest {
	s.OwnerUid = &v
	return s
}

func (s *CreateDidPersonWiththreemetaRequest) SetBizCode(v string) *CreateDidPersonWiththreemetaRequest {
	s.BizCode = &v
	return s
}

type CreateDidPersonWiththreemetaResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 生成的did字符串
	Did *string `json:"did,omitempty" xml:"did,omitempty"`
	// 颁发的vcId
	VcId *string `json:"vc_id,omitempty" xml:"vc_id,omitempty"`
}

func (s CreateDidPersonWiththreemetaResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDidPersonWiththreemetaResponse) GoString() string {
	return s.String()
}

func (s *CreateDidPersonWiththreemetaResponse) SetReqMsgId(v string) *CreateDidPersonWiththreemetaResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateDidPersonWiththreemetaResponse) SetResultCode(v string) *CreateDidPersonWiththreemetaResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateDidPersonWiththreemetaResponse) SetResultMsg(v string) *CreateDidPersonWiththreemetaResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateDidPersonWiththreemetaResponse) SetDid(v string) *CreateDidPersonWiththreemetaResponse {
	s.Did = &v
	return s
}

func (s *CreateDidPersonWiththreemetaResponse) SetVcId(v string) *CreateDidPersonWiththreemetaResponse {
	s.VcId = &v
	return s
}

type CreateDidCorporateWiththreemetaRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 企业名称
	EpCertName *string `json:"ep_cert_name,omitempty" xml:"ep_cert_name,omitempty" require:"true"`
	// 企业证件号
	EpCertNo *string `json:"ep_cert_no,omitempty" xml:"ep_cert_no,omitempty" require:"true"`
	// { "nation": "CN", //企业注册地址 "type": "LimitedCompany", //企业类型 "name": "演示用户名", //必选字段，企业名 "licenceNo": "1111", //营业执照 "address": "1111", //企业地址 "parentName": "", //<-必选字段 业务方名 需要提前协商 "linkType": "indirect", //<- 连接类型，direct直链企业， indirect间链企业 "certifyDate": "2019-1-1", //证书颁发时间 "licenceExpireDate": "2020-1-1", //证书到期时间 "businessScope": "1111", //企业经营范围 "businessAddress": "1111", //企业经营地址 "corporateBusinessType": 0, //<- 企业类型：0 一般企业， 1 个人商户 "channelName": "" //<- 必选字段 业务渠道 需要提前沟通 }
	ExtensionInfo *string `json:"extension_info,omitempty" xml:"extension_info,omitempty"`
	// 法人姓名
	LegalPersonCertName *string `json:"legal_person_cert_name,omitempty" xml:"legal_person_cert_name,omitempty" require:"true"`
	// 名称
	OwnerName *string `json:"owner_name,omitempty" xml:"owner_name,omitempty"`
	// 自定义企业唯一id，企业在自有模式下的唯一号，调用者需要保证其唯一性
	OwnerUid *string `json:"owner_uid,omitempty" xml:"owner_uid,omitempty" require:"true"`
	// 场景码，找dis工作人员进行分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
}

func (s CreateDidCorporateWiththreemetaRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDidCorporateWiththreemetaRequest) GoString() string {
	return s.String()
}

func (s *CreateDidCorporateWiththreemetaRequest) SetAuthToken(v string) *CreateDidCorporateWiththreemetaRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateDidCorporateWiththreemetaRequest) SetProductInstanceId(v string) *CreateDidCorporateWiththreemetaRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateDidCorporateWiththreemetaRequest) SetEpCertName(v string) *CreateDidCorporateWiththreemetaRequest {
	s.EpCertName = &v
	return s
}

func (s *CreateDidCorporateWiththreemetaRequest) SetEpCertNo(v string) *CreateDidCorporateWiththreemetaRequest {
	s.EpCertNo = &v
	return s
}

func (s *CreateDidCorporateWiththreemetaRequest) SetExtensionInfo(v string) *CreateDidCorporateWiththreemetaRequest {
	s.ExtensionInfo = &v
	return s
}

func (s *CreateDidCorporateWiththreemetaRequest) SetLegalPersonCertName(v string) *CreateDidCorporateWiththreemetaRequest {
	s.LegalPersonCertName = &v
	return s
}

func (s *CreateDidCorporateWiththreemetaRequest) SetOwnerName(v string) *CreateDidCorporateWiththreemetaRequest {
	s.OwnerName = &v
	return s
}

func (s *CreateDidCorporateWiththreemetaRequest) SetOwnerUid(v string) *CreateDidCorporateWiththreemetaRequest {
	s.OwnerUid = &v
	return s
}

func (s *CreateDidCorporateWiththreemetaRequest) SetBizCode(v string) *CreateDidCorporateWiththreemetaRequest {
	s.BizCode = &v
	return s
}

type CreateDidCorporateWiththreemetaResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 生成的did
	Did *string `json:"did,omitempty" xml:"did,omitempty"`
	// 颁发的vcId
	VcId *string `json:"vc_id,omitempty" xml:"vc_id,omitempty"`
}

func (s CreateDidCorporateWiththreemetaResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDidCorporateWiththreemetaResponse) GoString() string {
	return s.String()
}

func (s *CreateDidCorporateWiththreemetaResponse) SetReqMsgId(v string) *CreateDidCorporateWiththreemetaResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateDidCorporateWiththreemetaResponse) SetResultCode(v string) *CreateDidCorporateWiththreemetaResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateDidCorporateWiththreemetaResponse) SetResultMsg(v string) *CreateDidCorporateWiththreemetaResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateDidCorporateWiththreemetaResponse) SetDid(v string) *CreateDidCorporateWiththreemetaResponse {
	s.Did = &v
	return s
}

func (s *CreateDidCorporateWiththreemetaResponse) SetVcId(v string) *CreateDidCorporateWiththreemetaResponse {
	s.VcId = &v
	return s
}

type StartDidVcrepositoryIssueRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 配置此列表，则说明需要DIS对证书声明内容加密处理，并且控制访问权限，此列表为初始配置的did名单，拥有对此颁发证书的读取权限。
	// 如果不配置此列表，则DIS默认将明文存储此证书，任何did都可以访问此证书声明内容。
	//
	AuthDidList []*string `json:"auth_did_list,omitempty" xml:"auth_did_list,omitempty" type:"Repeated"`
	// 颁发证书声明的原始声明内容，其中claim字段为json格式
	BareClaim *BareClaim `json:"bare_claim,omitempty" xml:"bare_claim,omitempty" require:"true"`
	// 过期时间，如果用不过期可以设置为：-1。
	// 注意如果证书过期，则无法再通过VC Repository读取访问此证书内容。
	Expire *int64 `json:"expire,omitempty" xml:"expire,omitempty" require:"true"`
	// 颁发证书方，该did必须为调用者自己或者自己代理的did。
	//
	Issuer *string `json:"issuer,omitempty" xml:"issuer,omitempty" require:"true"`
	// 1 - 指定id将被按照verifiable_claim_id = "vc:mychain:" + SHA256(Joiner.on(":").join(subject, verifiable_claim_id.substring(0,50)))+verifiable_claim_id.substring(50);此表达式参与SHA256的 verifiable_claim_id 为用户指定的参数。
	SpecifiedClaimIdType *int64 `json:"specified_claim_id_type,omitempty" xml:"specified_claim_id_type,omitempty"`
	// 颁发证书的目标did，此目标did将拥有存储到VC Repository的数据管控权限，比如：授权给其它did读取此证书的权限。
	Subject *string `json:"subject,omitempty" xml:"subject,omitempty" require:"true"`
	// 通过层级定义的证书类型说明，在使用VC Repository的情况下默认为：["VerifiableCredential","DelegateVCRepository"]。
	// 如果用户希望通过type来过滤读取证书VC，那么可以在此列表后面追加层次定义说明，方便后续读取证书在VC Repository进行过滤。（如果读取方已知verifiable_claim_id可以直接过滤读取）
	Type []*string `json:"type,omitempty" xml:"type,omitempty" type:"Repeated"`
	// 如果指定，最终会使用此id会参与生成的证书的verifiable_claim_id，但是调用方需要保证设置值的唯一性，重复的id会引起最终verifiable_claim_id重复，导致被拒绝颁发证书。
	// 如果不指定，则会随机生成一个规范的verifiable_claim_id。
	// verifiable_claim_id = "vc:mychain:" + SHA256(Joiner.on(":").join(subject, verifiable_claim_id)); 此表达式参与SHA256的 verifiable_claim_id 为用户指定的参数。
	VerifiableClaimId *string `json:"verifiable_claim_id,omitempty" xml:"verifiable_claim_id,omitempty"`
	// 验证声明状态方式，目前只支持直接通过声明id上链查找状态方式，后续会支持更多方式
	VerifyStatusType *string `json:"verify_status_type,omitempty" xml:"verify_status_type,omitempty"`
	// 场景码，找dis工作人员进行分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
}

func (s StartDidVcrepositoryIssueRequest) String() string {
	return tea.Prettify(s)
}

func (s StartDidVcrepositoryIssueRequest) GoString() string {
	return s.String()
}

func (s *StartDidVcrepositoryIssueRequest) SetAuthToken(v string) *StartDidVcrepositoryIssueRequest {
	s.AuthToken = &v
	return s
}

func (s *StartDidVcrepositoryIssueRequest) SetProductInstanceId(v string) *StartDidVcrepositoryIssueRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *StartDidVcrepositoryIssueRequest) SetAuthDidList(v []*string) *StartDidVcrepositoryIssueRequest {
	s.AuthDidList = v
	return s
}

func (s *StartDidVcrepositoryIssueRequest) SetBareClaim(v *BareClaim) *StartDidVcrepositoryIssueRequest {
	s.BareClaim = v
	return s
}

func (s *StartDidVcrepositoryIssueRequest) SetExpire(v int64) *StartDidVcrepositoryIssueRequest {
	s.Expire = &v
	return s
}

func (s *StartDidVcrepositoryIssueRequest) SetIssuer(v string) *StartDidVcrepositoryIssueRequest {
	s.Issuer = &v
	return s
}

func (s *StartDidVcrepositoryIssueRequest) SetSpecifiedClaimIdType(v int64) *StartDidVcrepositoryIssueRequest {
	s.SpecifiedClaimIdType = &v
	return s
}

func (s *StartDidVcrepositoryIssueRequest) SetSubject(v string) *StartDidVcrepositoryIssueRequest {
	s.Subject = &v
	return s
}

func (s *StartDidVcrepositoryIssueRequest) SetType(v []*string) *StartDidVcrepositoryIssueRequest {
	s.Type = v
	return s
}

func (s *StartDidVcrepositoryIssueRequest) SetVerifiableClaimId(v string) *StartDidVcrepositoryIssueRequest {
	s.VerifiableClaimId = &v
	return s
}

func (s *StartDidVcrepositoryIssueRequest) SetVerifyStatusType(v string) *StartDidVcrepositoryIssueRequest {
	s.VerifyStatusType = &v
	return s
}

func (s *StartDidVcrepositoryIssueRequest) SetBizCode(v string) *StartDidVcrepositoryIssueRequest {
	s.BizCode = &v
	return s
}

type StartDidVcrepositoryIssueResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 可验证声明的完整声明 {"content":{"verion":"0.7.0","issuer":"xxxx","subject":"xxxx","expire":1530735444,"issucanceDate":1530735000,"id":"XXXX","claim":{//用户自定义},"status":{"type":"XXXX","id":"XXXXX"}},"proof":{"type":"ecdsa","created":"2018-06-18T21:19:10Z","verificationMethod":"XXXX","signatureValue":"XXXXX"}}
	VerifiableClaimContent *string `json:"verifiable_claim_content,omitempty" xml:"verifiable_claim_content,omitempty"`
	// 颁发的证书唯一id，颁发成功后返回。
	VerifiableClaimId *string `json:"verifiable_claim_id,omitempty" xml:"verifiable_claim_id,omitempty"`
}

func (s StartDidVcrepositoryIssueResponse) String() string {
	return tea.Prettify(s)
}

func (s StartDidVcrepositoryIssueResponse) GoString() string {
	return s.String()
}

func (s *StartDidVcrepositoryIssueResponse) SetReqMsgId(v string) *StartDidVcrepositoryIssueResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartDidVcrepositoryIssueResponse) SetResultCode(v string) *StartDidVcrepositoryIssueResponse {
	s.ResultCode = &v
	return s
}

func (s *StartDidVcrepositoryIssueResponse) SetResultMsg(v string) *StartDidVcrepositoryIssueResponse {
	s.ResultMsg = &v
	return s
}

func (s *StartDidVcrepositoryIssueResponse) SetVerifiableClaimContent(v string) *StartDidVcrepositoryIssueResponse {
	s.VerifiableClaimContent = &v
	return s
}

func (s *StartDidVcrepositoryIssueResponse) SetVerifiableClaimId(v string) *StartDidVcrepositoryIssueResponse {
	s.VerifiableClaimId = &v
	return s
}

type StartDidVcrepositoryReadRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 请求读取数据的did。
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 配合owner_did字段一起使用，指定查询目标VC时的过滤字段（可是标准VC内容的字段），指定此字段后，配合需指定filter_value字段。
	FilterField *string `json:"filter_field,omitempty" xml:"filter_field,omitempty"`
	// 配合filter_field字段，设定具体过滤VC的使用的值，示例说明是在使用`type`字段过滤VC时候的样例。
	FilterValue *string `json:"filter_value,omitempty" xml:"filter_value,omitempty"`
	// 如果没有配置参数verifiable_claim_id，则只能通过制定subject_did、issuer_did和filter参数来查找目标VC内容。 因此只有在调用方未知verifiable_claim_id的情况下，才需要配置此参数。
	IssuerDid *string `json:"issuer_did,omitempty" xml:"issuer_did,omitempty"`
	// 保留字段，请求读的did身份对应公钥对所有数据参数的签名（目前托管模式可缺省此字段，未来非托管时需请求端签名，需填此字段）
	Signature *string `json:"signature,omitempty" xml:"signature,omitempty"`
	// 如果没有配置参数verifiable_claim_id，则只能通过制定subject_did、issuer_did和filter参数来查找目标VC内容。
	// 因此只有在调用方未知verifiable_claim_id的情况下，才需要配置此参数。
	SubjectDid *string `json:"subject_did,omitempty" xml:"subject_did,omitempty"`
	// 调用方如果已知目标VC的verifiable_claim_id，建议通过配置此参数来读取目标VC内容，并且不需要配置subject_did、issuer_did和 filter相关参数。
	// 注意如果不配置此字段，则必须配置subject_did, issuer_did, filter_field, filter_value 字段。
	// 注意：如果此字段不是"vc:mychain:"前缀开头，则会使用如下规则生成：
	// verifiable_claim_id = "vc:mychain:" + SHA256(Joiner.on(":").join(issuer_did, subject_did, verifiable_claim_id)); 此表达式参与SHA256的 verifiable_claim_id 为用户指定的参数。
	VerifiableClaimId *string `json:"verifiable_claim_id,omitempty" xml:"verifiable_claim_id,omitempty"`
	// 场景码，找dis工作人员进行分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
}

func (s StartDidVcrepositoryReadRequest) String() string {
	return tea.Prettify(s)
}

func (s StartDidVcrepositoryReadRequest) GoString() string {
	return s.String()
}

func (s *StartDidVcrepositoryReadRequest) SetAuthToken(v string) *StartDidVcrepositoryReadRequest {
	s.AuthToken = &v
	return s
}

func (s *StartDidVcrepositoryReadRequest) SetProductInstanceId(v string) *StartDidVcrepositoryReadRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *StartDidVcrepositoryReadRequest) SetDid(v string) *StartDidVcrepositoryReadRequest {
	s.Did = &v
	return s
}

func (s *StartDidVcrepositoryReadRequest) SetFilterField(v string) *StartDidVcrepositoryReadRequest {
	s.FilterField = &v
	return s
}

func (s *StartDidVcrepositoryReadRequest) SetFilterValue(v string) *StartDidVcrepositoryReadRequest {
	s.FilterValue = &v
	return s
}

func (s *StartDidVcrepositoryReadRequest) SetIssuerDid(v string) *StartDidVcrepositoryReadRequest {
	s.IssuerDid = &v
	return s
}

func (s *StartDidVcrepositoryReadRequest) SetSignature(v string) *StartDidVcrepositoryReadRequest {
	s.Signature = &v
	return s
}

func (s *StartDidVcrepositoryReadRequest) SetSubjectDid(v string) *StartDidVcrepositoryReadRequest {
	s.SubjectDid = &v
	return s
}

func (s *StartDidVcrepositoryReadRequest) SetVerifiableClaimId(v string) *StartDidVcrepositoryReadRequest {
	s.VerifiableClaimId = &v
	return s
}

func (s *StartDidVcrepositoryReadRequest) SetBizCode(v string) *StartDidVcrepositoryReadRequest {
	s.BizCode = &v
	return s
}

type StartDidVcrepositoryReadResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 可验证声明的完整声明 {"content":{"verion":"0.7.0","issuer":"xxxx","subject":"xxxx","expire":1530735444,"issucanceDate":1530735000,"id":"XXXX","claim":{//用户自定义},"status":{"type":"XXXX","id":"XXXXX"}},"proof":{"type":"ecdsa","created":"2018-06-18T21:19:10Z","verificationMethod":"XXXX","signatureValue":"XXXXX"}}
	VerifiableClaimContent *string `json:"verifiable_claim_content,omitempty" xml:"verifiable_claim_content,omitempty"`
}

func (s StartDidVcrepositoryReadResponse) String() string {
	return tea.Prettify(s)
}

func (s StartDidVcrepositoryReadResponse) GoString() string {
	return s.String()
}

func (s *StartDidVcrepositoryReadResponse) SetReqMsgId(v string) *StartDidVcrepositoryReadResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartDidVcrepositoryReadResponse) SetResultCode(v string) *StartDidVcrepositoryReadResponse {
	s.ResultCode = &v
	return s
}

func (s *StartDidVcrepositoryReadResponse) SetResultMsg(v string) *StartDidVcrepositoryReadResponse {
	s.ResultMsg = &v
	return s
}

func (s *StartDidVcrepositoryReadResponse) SetVerifiableClaimContent(v string) *StartDidVcrepositoryReadResponse {
	s.VerifiableClaimContent = &v
	return s
}

type StartDidVcrepositoryAuthRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 配置此did列表，为这些did分配读取目标VC的权限，如果目标VC存储时是明文存储，则操作失败（无需做此权限管控）。
	AuthDidList []*string `json:"auth_did_list,omitempty" xml:"auth_did_list,omitempty" require:"true" type:"Repeated"`
	// 场景码，找dis工作人员进行分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
	// 目标VC的owner，也就是VC内容中的subject身份。
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 指定查询目标VC时的过滤字段（可是标准VC内容的field），指定此字段后，配合需指定filter_value字段。
	FilterField *string `json:"filter_field,omitempty" xml:"filter_field,omitempty" require:"true"`
	// ["VerifiableCredential","DelegateVCRepository","LocationInfo"]
	FilterValue *string `json:"filter_value,omitempty" xml:"filter_value,omitempty"`
	// 保留字段，请求增加授权的调用方did身份对应公钥对所有数据参数的签名（目前托管模式可缺省此字段，未来非托管时需请求端签名，需填此字段）
	Signature *string `json:"signature,omitempty" xml:"signature,omitempty"`
	// 读取目标证书VC的id，通过配置此参数可以直接找到目标VC。
	VerifiableClaimId *string `json:"verifiable_claim_id,omitempty" xml:"verifiable_claim_id,omitempty"`
}

func (s StartDidVcrepositoryAuthRequest) String() string {
	return tea.Prettify(s)
}

func (s StartDidVcrepositoryAuthRequest) GoString() string {
	return s.String()
}

func (s *StartDidVcrepositoryAuthRequest) SetAuthToken(v string) *StartDidVcrepositoryAuthRequest {
	s.AuthToken = &v
	return s
}

func (s *StartDidVcrepositoryAuthRequest) SetProductInstanceId(v string) *StartDidVcrepositoryAuthRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *StartDidVcrepositoryAuthRequest) SetAuthDidList(v []*string) *StartDidVcrepositoryAuthRequest {
	s.AuthDidList = v
	return s
}

func (s *StartDidVcrepositoryAuthRequest) SetBizCode(v string) *StartDidVcrepositoryAuthRequest {
	s.BizCode = &v
	return s
}

func (s *StartDidVcrepositoryAuthRequest) SetDid(v string) *StartDidVcrepositoryAuthRequest {
	s.Did = &v
	return s
}

func (s *StartDidVcrepositoryAuthRequest) SetFilterField(v string) *StartDidVcrepositoryAuthRequest {
	s.FilterField = &v
	return s
}

func (s *StartDidVcrepositoryAuthRequest) SetFilterValue(v string) *StartDidVcrepositoryAuthRequest {
	s.FilterValue = &v
	return s
}

func (s *StartDidVcrepositoryAuthRequest) SetSignature(v string) *StartDidVcrepositoryAuthRequest {
	s.Signature = &v
	return s
}

func (s *StartDidVcrepositoryAuthRequest) SetVerifiableClaimId(v string) *StartDidVcrepositoryAuthRequest {
	s.VerifiableClaimId = &v
	return s
}

type StartDidVcrepositoryAuthResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s StartDidVcrepositoryAuthResponse) String() string {
	return tea.Prettify(s)
}

func (s StartDidVcrepositoryAuthResponse) GoString() string {
	return s.String()
}

func (s *StartDidVcrepositoryAuthResponse) SetReqMsgId(v string) *StartDidVcrepositoryAuthResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartDidVcrepositoryAuthResponse) SetResultCode(v string) *StartDidVcrepositoryAuthResponse {
	s.ResultCode = &v
	return s
}

func (s *StartDidVcrepositoryAuthResponse) SetResultMsg(v string) *StartDidVcrepositoryAuthResponse {
	s.ResultMsg = &v
	return s
}

type StartDidVcrepositoryFilterandreadRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 请求读取数据的did。
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 配合owner_did字段一起使用，指定查询目标VC时的过滤字段（可是标准VC内容的字段），指定此字段后，配合需指定filter_value字段。
	FilterField *string `json:"filter_field,omitempty" xml:"filter_field,omitempty" require:"true"`
	// ["VerifiableCredential","DelegateVCRepository","LocationInfo"]
	FilterValue *string `json:"filter_value,omitempty" xml:"filter_value,omitempty" require:"true"`
	// 保留字段，请求读的did身份对应公钥对所有数据参数的签名（目前托管模式可缺省此字段，未来非托管时需请求端签名，需填此字段）
	Signature *string `json:"signature,omitempty" xml:"signature,omitempty"`
	// 目标VC的subject字段，参与过滤条件。
	SubjectDid *string `json:"subject_did,omitempty" xml:"subject_did,omitempty" require:"true"`
	// 场景码，找dis工作人员进行分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
}

func (s StartDidVcrepositoryFilterandreadRequest) String() string {
	return tea.Prettify(s)
}

func (s StartDidVcrepositoryFilterandreadRequest) GoString() string {
	return s.String()
}

func (s *StartDidVcrepositoryFilterandreadRequest) SetAuthToken(v string) *StartDidVcrepositoryFilterandreadRequest {
	s.AuthToken = &v
	return s
}

func (s *StartDidVcrepositoryFilterandreadRequest) SetProductInstanceId(v string) *StartDidVcrepositoryFilterandreadRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *StartDidVcrepositoryFilterandreadRequest) SetDid(v string) *StartDidVcrepositoryFilterandreadRequest {
	s.Did = &v
	return s
}

func (s *StartDidVcrepositoryFilterandreadRequest) SetFilterField(v string) *StartDidVcrepositoryFilterandreadRequest {
	s.FilterField = &v
	return s
}

func (s *StartDidVcrepositoryFilterandreadRequest) SetFilterValue(v string) *StartDidVcrepositoryFilterandreadRequest {
	s.FilterValue = &v
	return s
}

func (s *StartDidVcrepositoryFilterandreadRequest) SetSignature(v string) *StartDidVcrepositoryFilterandreadRequest {
	s.Signature = &v
	return s
}

func (s *StartDidVcrepositoryFilterandreadRequest) SetSubjectDid(v string) *StartDidVcrepositoryFilterandreadRequest {
	s.SubjectDid = &v
	return s
}

func (s *StartDidVcrepositoryFilterandreadRequest) SetBizCode(v string) *StartDidVcrepositoryFilterandreadRequest {
	s.BizCode = &v
	return s
}

type StartDidVcrepositoryFilterandreadResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 可验证声明的完整声明 {"content":{"verion":"0.7.0","issuer":"xxxx","subject":"xxxx","expire":1530735444,"issucanceDate":1530735000,"id":"XXXX","claim":{//用户自定义},"status":{"type":"XXXX","id":"XXXXX"}},"proof":{"type":"ecdsa","created":"2018-06-18T21:19:10Z","verificationMethod":"XXXX","signatureValue":"XXXXX"}}
	VerifiableClaimContent *string `json:"verifiable_claim_content,omitempty" xml:"verifiable_claim_content,omitempty"`
}

func (s StartDidVcrepositoryFilterandreadResponse) String() string {
	return tea.Prettify(s)
}

func (s StartDidVcrepositoryFilterandreadResponse) GoString() string {
	return s.String()
}

func (s *StartDidVcrepositoryFilterandreadResponse) SetReqMsgId(v string) *StartDidVcrepositoryFilterandreadResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartDidVcrepositoryFilterandreadResponse) SetResultCode(v string) *StartDidVcrepositoryFilterandreadResponse {
	s.ResultCode = &v
	return s
}

func (s *StartDidVcrepositoryFilterandreadResponse) SetResultMsg(v string) *StartDidVcrepositoryFilterandreadResponse {
	s.ResultMsg = &v
	return s
}

func (s *StartDidVcrepositoryFilterandreadResponse) SetVerifiableClaimContent(v string) *StartDidVcrepositoryFilterandreadResponse {
	s.VerifiableClaimContent = &v
	return s
}

type StartDidVcrepositoryReadwithvcidRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 请求读取数据的did。
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 保留字段，请求读的did身份对应公钥对所有数据参数的签名（目前托管模式可缺省此字段，未来非托管时需请求端签名，需填此字段）
	Signature *string `json:"signature,omitempty" xml:"signature,omitempty"`
	// 要查询的这个vc属于哪个did，如果未指定，did会尝试从默认vc仓库获取
	SubjectDid *string `json:"subject_did,omitempty" xml:"subject_did,omitempty"`
	// 通过指定目标证书VC的唯一verifiable_claim_id来读取内容。
	VerifiableClaimId *string `json:"verifiable_claim_id,omitempty" xml:"verifiable_claim_id,omitempty" require:"true"`
	// 场景码，找dis工作人员进行分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
}

func (s StartDidVcrepositoryReadwithvcidRequest) String() string {
	return tea.Prettify(s)
}

func (s StartDidVcrepositoryReadwithvcidRequest) GoString() string {
	return s.String()
}

func (s *StartDidVcrepositoryReadwithvcidRequest) SetAuthToken(v string) *StartDidVcrepositoryReadwithvcidRequest {
	s.AuthToken = &v
	return s
}

func (s *StartDidVcrepositoryReadwithvcidRequest) SetProductInstanceId(v string) *StartDidVcrepositoryReadwithvcidRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *StartDidVcrepositoryReadwithvcidRequest) SetDid(v string) *StartDidVcrepositoryReadwithvcidRequest {
	s.Did = &v
	return s
}

func (s *StartDidVcrepositoryReadwithvcidRequest) SetSignature(v string) *StartDidVcrepositoryReadwithvcidRequest {
	s.Signature = &v
	return s
}

func (s *StartDidVcrepositoryReadwithvcidRequest) SetSubjectDid(v string) *StartDidVcrepositoryReadwithvcidRequest {
	s.SubjectDid = &v
	return s
}

func (s *StartDidVcrepositoryReadwithvcidRequest) SetVerifiableClaimId(v string) *StartDidVcrepositoryReadwithvcidRequest {
	s.VerifiableClaimId = &v
	return s
}

func (s *StartDidVcrepositoryReadwithvcidRequest) SetBizCode(v string) *StartDidVcrepositoryReadwithvcidRequest {
	s.BizCode = &v
	return s
}

type StartDidVcrepositoryReadwithvcidResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 可验证声明的完整声明 {"content":{"verion":"0.7.0","issuer":"xxxx","subject":"xxxx","expire":1530735444,"issucanceDate":1530735000,"id":"XXXX","claim":{//用户自定义},"status":{"type":"XXXX","id":"XXXXX"}},"proof":{"type":"ecdsa","created":"2018-06-18T21:19:10Z","verificationMethod":"XXXX","signatureValue":"XXXXX"}}
	VerifiableClaimContent *string `json:"verifiable_claim_content,omitempty" xml:"verifiable_claim_content,omitempty"`
}

func (s StartDidVcrepositoryReadwithvcidResponse) String() string {
	return tea.Prettify(s)
}

func (s StartDidVcrepositoryReadwithvcidResponse) GoString() string {
	return s.String()
}

func (s *StartDidVcrepositoryReadwithvcidResponse) SetReqMsgId(v string) *StartDidVcrepositoryReadwithvcidResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartDidVcrepositoryReadwithvcidResponse) SetResultCode(v string) *StartDidVcrepositoryReadwithvcidResponse {
	s.ResultCode = &v
	return s
}

func (s *StartDidVcrepositoryReadwithvcidResponse) SetResultMsg(v string) *StartDidVcrepositoryReadwithvcidResponse {
	s.ResultMsg = &v
	return s
}

func (s *StartDidVcrepositoryReadwithvcidResponse) SetVerifiableClaimContent(v string) *StartDidVcrepositoryReadwithvcidResponse {
	s.VerifiableClaimContent = &v
	return s
}

type StartDidVcrepositoryReadwithdefineidRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 自定义的业务id，通常此字段不是"vc:mychain:"前缀开头，会使用如下规则生成最终verifiable_claim_id： verifiable_claim_id = "vc:mychain:" + SHA256(Joiner.on(":").join(issuer_did, subject_did, define_id)); 此表达式参与SHA256的 define_id 为用户指定的当前参数。
	DefineId *string `json:"define_id,omitempty" xml:"define_id,omitempty" require:"true"`
	// 请求读取数据的did。
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 目标证书VC的颁发者did。
	IssuerDid *string `json:"issuer_did,omitempty" xml:"issuer_did,omitempty" require:"true"`
	// 保留字段，请求读的did身份对应公钥对所有数据参数的签名（目前托管模式可缺省此字段，未来非托管时需请求端签名，需填此字段）
	Signature *string `json:"signature,omitempty" xml:"signature,omitempty"`
	// 目标证书VC的颁发目标did。
	SubjectDid *string `json:"subject_did,omitempty" xml:"subject_did,omitempty" require:"true"`
	// 场景码，找dis工作人员进行分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
}

func (s StartDidVcrepositoryReadwithdefineidRequest) String() string {
	return tea.Prettify(s)
}

func (s StartDidVcrepositoryReadwithdefineidRequest) GoString() string {
	return s.String()
}

func (s *StartDidVcrepositoryReadwithdefineidRequest) SetAuthToken(v string) *StartDidVcrepositoryReadwithdefineidRequest {
	s.AuthToken = &v
	return s
}

func (s *StartDidVcrepositoryReadwithdefineidRequest) SetProductInstanceId(v string) *StartDidVcrepositoryReadwithdefineidRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *StartDidVcrepositoryReadwithdefineidRequest) SetDefineId(v string) *StartDidVcrepositoryReadwithdefineidRequest {
	s.DefineId = &v
	return s
}

func (s *StartDidVcrepositoryReadwithdefineidRequest) SetDid(v string) *StartDidVcrepositoryReadwithdefineidRequest {
	s.Did = &v
	return s
}

func (s *StartDidVcrepositoryReadwithdefineidRequest) SetIssuerDid(v string) *StartDidVcrepositoryReadwithdefineidRequest {
	s.IssuerDid = &v
	return s
}

func (s *StartDidVcrepositoryReadwithdefineidRequest) SetSignature(v string) *StartDidVcrepositoryReadwithdefineidRequest {
	s.Signature = &v
	return s
}

func (s *StartDidVcrepositoryReadwithdefineidRequest) SetSubjectDid(v string) *StartDidVcrepositoryReadwithdefineidRequest {
	s.SubjectDid = &v
	return s
}

func (s *StartDidVcrepositoryReadwithdefineidRequest) SetBizCode(v string) *StartDidVcrepositoryReadwithdefineidRequest {
	s.BizCode = &v
	return s
}

type StartDidVcrepositoryReadwithdefineidResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 可验证声明的完整声明 {"content":{"verion":"0.7.0","issuer":"xxxx","subject":"xxxx","expire":1530735444,"issucanceDate":1530735000,"id":"XXXX","claim":{//用户自定义},"status":{"type":"XXXX","id":"XXXXX"}},"proof":{"type":"ecdsa","created":"2018-06-18T21:19:10Z","verificationMethod":"XXXX","signatureValue":"XXXXX"}}
	VerifiableClaimContent *string `json:"verifiable_claim_content,omitempty" xml:"verifiable_claim_content,omitempty"`
}

func (s StartDidVcrepositoryReadwithdefineidResponse) String() string {
	return tea.Prettify(s)
}

func (s StartDidVcrepositoryReadwithdefineidResponse) GoString() string {
	return s.String()
}

func (s *StartDidVcrepositoryReadwithdefineidResponse) SetReqMsgId(v string) *StartDidVcrepositoryReadwithdefineidResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartDidVcrepositoryReadwithdefineidResponse) SetResultCode(v string) *StartDidVcrepositoryReadwithdefineidResponse {
	s.ResultCode = &v
	return s
}

func (s *StartDidVcrepositoryReadwithdefineidResponse) SetResultMsg(v string) *StartDidVcrepositoryReadwithdefineidResponse {
	s.ResultMsg = &v
	return s
}

func (s *StartDidVcrepositoryReadwithdefineidResponse) SetVerifiableClaimContent(v string) *StartDidVcrepositoryReadwithdefineidResponse {
	s.VerifiableClaimContent = &v
	return s
}

type StartDidVcrepositoryAuthwithvcidRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 配置此did列表，为这些did分配读取目标VC的权限，如果目标VC存储时是明文存储，则操作失败（无需做此权限管控）。
	AuthDidList *string `json:"auth_did_list,omitempty" xml:"auth_did_list,omitempty" require:"true"`
	// 场景码，找dis工作人员进行分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
	// 目标VC的owner，也就是VC内容中的subject did身份。
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 保留字段，请求增加授权的调用方did身份对应公钥对所有数据参数的签名（目前托管模式可缺省此字段，未来非托管时需请求端签名，需填此字段）
	Signature *string `json:"signature,omitempty" xml:"signature,omitempty"`
	// 通过指定目标证书VC的唯一verifiable_claim_id来找到目标证书VC并新增授权。
	VerifiableClaimId *string `json:"verifiable_claim_id,omitempty" xml:"verifiable_claim_id,omitempty" require:"true"`
}

func (s StartDidVcrepositoryAuthwithvcidRequest) String() string {
	return tea.Prettify(s)
}

func (s StartDidVcrepositoryAuthwithvcidRequest) GoString() string {
	return s.String()
}

func (s *StartDidVcrepositoryAuthwithvcidRequest) SetAuthToken(v string) *StartDidVcrepositoryAuthwithvcidRequest {
	s.AuthToken = &v
	return s
}

func (s *StartDidVcrepositoryAuthwithvcidRequest) SetProductInstanceId(v string) *StartDidVcrepositoryAuthwithvcidRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *StartDidVcrepositoryAuthwithvcidRequest) SetAuthDidList(v string) *StartDidVcrepositoryAuthwithvcidRequest {
	s.AuthDidList = &v
	return s
}

func (s *StartDidVcrepositoryAuthwithvcidRequest) SetBizCode(v string) *StartDidVcrepositoryAuthwithvcidRequest {
	s.BizCode = &v
	return s
}

func (s *StartDidVcrepositoryAuthwithvcidRequest) SetDid(v string) *StartDidVcrepositoryAuthwithvcidRequest {
	s.Did = &v
	return s
}

func (s *StartDidVcrepositoryAuthwithvcidRequest) SetSignature(v string) *StartDidVcrepositoryAuthwithvcidRequest {
	s.Signature = &v
	return s
}

func (s *StartDidVcrepositoryAuthwithvcidRequest) SetVerifiableClaimId(v string) *StartDidVcrepositoryAuthwithvcidRequest {
	s.VerifiableClaimId = &v
	return s
}

type StartDidVcrepositoryAuthwithvcidResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s StartDidVcrepositoryAuthwithvcidResponse) String() string {
	return tea.Prettify(s)
}

func (s StartDidVcrepositoryAuthwithvcidResponse) GoString() string {
	return s.String()
}

func (s *StartDidVcrepositoryAuthwithvcidResponse) SetReqMsgId(v string) *StartDidVcrepositoryAuthwithvcidResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartDidVcrepositoryAuthwithvcidResponse) SetResultCode(v string) *StartDidVcrepositoryAuthwithvcidResponse {
	s.ResultCode = &v
	return s
}

func (s *StartDidVcrepositoryAuthwithvcidResponse) SetResultMsg(v string) *StartDidVcrepositoryAuthwithvcidResponse {
	s.ResultMsg = &v
	return s
}

type StartDidVcrepositoryAuthwithdefineidRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 配置此did列表，为这些did分配读取目标VC的权限，如果目标VC存储时是明文存储，则操作失败（无需做此权限管控）。
	AuthDidList *string `json:"auth_did_list,omitempty" xml:"auth_did_list,omitempty" require:"true"`
	// 场景码，找dis工作人员进行分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
	// 自定义的业务id，通常此字段不是"vc:mychain:"前缀开头，会使用如下规则生成最终verifiable_claim_id： verifiable_claim_id = "vc:mychain:" + SHA256(Joiner.on(":").join(issuer_did, subject_did, define_id)); 此表达式参与SHA256的 define_id 为用户指定的当前参数。
	DefineId *string `json:"define_id,omitempty" xml:"define_id,omitempty" require:"true"`
	// 请求操作的did，也是目标VC的owner，也就是VC内容中的subject did身份。
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 目标证书的颁发者did。
	IssuerDid *string `json:"issuer_did,omitempty" xml:"issuer_did,omitempty" require:"true"`
	// 保留字段，请求增加授权的调用方did身份对应公钥对所有数据参数的签名（目前托管模式可缺省此字段，未来非托管时需请求端签名，需填此字段）
	Signature *string `json:"signature,omitempty" xml:"signature,omitempty"`
	// 目标证书VC的颁发目标did。
	SubjectDid *string `json:"subject_did,omitempty" xml:"subject_did,omitempty" require:"true"`
}

func (s StartDidVcrepositoryAuthwithdefineidRequest) String() string {
	return tea.Prettify(s)
}

func (s StartDidVcrepositoryAuthwithdefineidRequest) GoString() string {
	return s.String()
}

func (s *StartDidVcrepositoryAuthwithdefineidRequest) SetAuthToken(v string) *StartDidVcrepositoryAuthwithdefineidRequest {
	s.AuthToken = &v
	return s
}

func (s *StartDidVcrepositoryAuthwithdefineidRequest) SetProductInstanceId(v string) *StartDidVcrepositoryAuthwithdefineidRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *StartDidVcrepositoryAuthwithdefineidRequest) SetAuthDidList(v string) *StartDidVcrepositoryAuthwithdefineidRequest {
	s.AuthDidList = &v
	return s
}

func (s *StartDidVcrepositoryAuthwithdefineidRequest) SetBizCode(v string) *StartDidVcrepositoryAuthwithdefineidRequest {
	s.BizCode = &v
	return s
}

func (s *StartDidVcrepositoryAuthwithdefineidRequest) SetDefineId(v string) *StartDidVcrepositoryAuthwithdefineidRequest {
	s.DefineId = &v
	return s
}

func (s *StartDidVcrepositoryAuthwithdefineidRequest) SetDid(v string) *StartDidVcrepositoryAuthwithdefineidRequest {
	s.Did = &v
	return s
}

func (s *StartDidVcrepositoryAuthwithdefineidRequest) SetIssuerDid(v string) *StartDidVcrepositoryAuthwithdefineidRequest {
	s.IssuerDid = &v
	return s
}

func (s *StartDidVcrepositoryAuthwithdefineidRequest) SetSignature(v string) *StartDidVcrepositoryAuthwithdefineidRequest {
	s.Signature = &v
	return s
}

func (s *StartDidVcrepositoryAuthwithdefineidRequest) SetSubjectDid(v string) *StartDidVcrepositoryAuthwithdefineidRequest {
	s.SubjectDid = &v
	return s
}

type StartDidVcrepositoryAuthwithdefineidResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s StartDidVcrepositoryAuthwithdefineidResponse) String() string {
	return tea.Prettify(s)
}

func (s StartDidVcrepositoryAuthwithdefineidResponse) GoString() string {
	return s.String()
}

func (s *StartDidVcrepositoryAuthwithdefineidResponse) SetReqMsgId(v string) *StartDidVcrepositoryAuthwithdefineidResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartDidVcrepositoryAuthwithdefineidResponse) SetResultCode(v string) *StartDidVcrepositoryAuthwithdefineidResponse {
	s.ResultCode = &v
	return s
}

func (s *StartDidVcrepositoryAuthwithdefineidResponse) SetResultMsg(v string) *StartDidVcrepositoryAuthwithdefineidResponse {
	s.ResultMsg = &v
	return s
}

type StartDidAgentServicetypeRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 枚举类型，描述访问服务的方式
	AccessMode *string `json:"access_mode,omitempty" xml:"access_mode,omitempty"`
	// 对服务的文字描述，<1000个字符
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// 服务类型创建者did
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// {
	//   "item1":"",
	//   "item2":"",
	//   ...
	// }
	ServiceInput *string `json:"service_input,omitempty" xml:"service_input,omitempty"`
	// {
	//    "item1":""
	//    "item2":""
	//    ...
	// }
	ServiceOutput *string `json:"service_output,omitempty" xml:"service_output,omitempty"`
	// 自定义服务类型，字符数16～32个
	ServiceType *string `json:"service_type,omitempty" xml:"service_type,omitempty" require:"true"`
	// 场景码，找dis工作人员进行分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
}

func (s StartDidAgentServicetypeRequest) String() string {
	return tea.Prettify(s)
}

func (s StartDidAgentServicetypeRequest) GoString() string {
	return s.String()
}

func (s *StartDidAgentServicetypeRequest) SetAuthToken(v string) *StartDidAgentServicetypeRequest {
	s.AuthToken = &v
	return s
}

func (s *StartDidAgentServicetypeRequest) SetProductInstanceId(v string) *StartDidAgentServicetypeRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *StartDidAgentServicetypeRequest) SetAccessMode(v string) *StartDidAgentServicetypeRequest {
	s.AccessMode = &v
	return s
}

func (s *StartDidAgentServicetypeRequest) SetDescription(v string) *StartDidAgentServicetypeRequest {
	s.Description = &v
	return s
}

func (s *StartDidAgentServicetypeRequest) SetDid(v string) *StartDidAgentServicetypeRequest {
	s.Did = &v
	return s
}

func (s *StartDidAgentServicetypeRequest) SetServiceInput(v string) *StartDidAgentServicetypeRequest {
	s.ServiceInput = &v
	return s
}

func (s *StartDidAgentServicetypeRequest) SetServiceOutput(v string) *StartDidAgentServicetypeRequest {
	s.ServiceOutput = &v
	return s
}

func (s *StartDidAgentServicetypeRequest) SetServiceType(v string) *StartDidAgentServicetypeRequest {
	s.ServiceType = &v
	return s
}

func (s *StartDidAgentServicetypeRequest) SetBizCode(v string) *StartDidAgentServicetypeRequest {
	s.BizCode = &v
	return s
}

type StartDidAgentServicetypeResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 创建成功之后，返回服务类型名
	ServiceType *string `json:"service_type,omitempty" xml:"service_type,omitempty"`
}

func (s StartDidAgentServicetypeResponse) String() string {
	return tea.Prettify(s)
}

func (s StartDidAgentServicetypeResponse) GoString() string {
	return s.String()
}

func (s *StartDidAgentServicetypeResponse) SetReqMsgId(v string) *StartDidAgentServicetypeResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartDidAgentServicetypeResponse) SetResultCode(v string) *StartDidAgentServicetypeResponse {
	s.ResultCode = &v
	return s
}

func (s *StartDidAgentServicetypeResponse) SetResultMsg(v string) *StartDidAgentServicetypeResponse {
	s.ResultMsg = &v
	return s
}

func (s *StartDidAgentServicetypeResponse) SetServiceType(v string) *StartDidAgentServicetypeResponse {
	s.ServiceType = &v
	return s
}

type QueryDidAgentServicetypeRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 查询者did
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 指定查询的服务类型名
	ServiceType *string `json:"service_type,omitempty" xml:"service_type,omitempty" require:"true"`
	// 场景码，找dis工作人员进行分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
}

func (s QueryDidAgentServicetypeRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDidAgentServicetypeRequest) GoString() string {
	return s.String()
}

func (s *QueryDidAgentServicetypeRequest) SetAuthToken(v string) *QueryDidAgentServicetypeRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryDidAgentServicetypeRequest) SetProductInstanceId(v string) *QueryDidAgentServicetypeRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryDidAgentServicetypeRequest) SetDid(v string) *QueryDidAgentServicetypeRequest {
	s.Did = &v
	return s
}

func (s *QueryDidAgentServicetypeRequest) SetServiceType(v string) *QueryDidAgentServicetypeRequest {
	s.ServiceType = &v
	return s
}

func (s *QueryDidAgentServicetypeRequest) SetBizCode(v string) *QueryDidAgentServicetypeRequest {
	s.BizCode = &v
	return s
}

type QueryDidAgentServicetypeResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 服务类型定义列表
	ServiceTypes []*string `json:"service_types,omitempty" xml:"service_types,omitempty" type:"Repeated"`
	// 总共有几项
	TotalNumber *int64 `json:"total_number,omitempty" xml:"total_number,omitempty"`
	// 总共有几页
	TotalPage *int64 `json:"total_page,omitempty" xml:"total_page,omitempty"`
}

func (s QueryDidAgentServicetypeResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDidAgentServicetypeResponse) GoString() string {
	return s.String()
}

func (s *QueryDidAgentServicetypeResponse) SetReqMsgId(v string) *QueryDidAgentServicetypeResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryDidAgentServicetypeResponse) SetResultCode(v string) *QueryDidAgentServicetypeResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryDidAgentServicetypeResponse) SetResultMsg(v string) *QueryDidAgentServicetypeResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryDidAgentServicetypeResponse) SetServiceTypes(v []*string) *QueryDidAgentServicetypeResponse {
	s.ServiceTypes = v
	return s
}

func (s *QueryDidAgentServicetypeResponse) SetTotalNumber(v int64) *QueryDidAgentServicetypeResponse {
	s.TotalNumber = &v
	return s
}

func (s *QueryDidAgentServicetypeResponse) SetTotalPage(v int64) *QueryDidAgentServicetypeResponse {
	s.TotalPage = &v
	return s
}

type UpdateDidServicesRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 新增的服务信息
	AddSevices []*DidDocServicesInfo `json:"add_sevices,omitempty" xml:"add_sevices,omitempty" type:"Repeated"`
	// 要删除的服务id列表
	DelServices []*string `json:"del_services,omitempty" xml:"del_services,omitempty" type:"Repeated"`
	// 指定要更新的did
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// did类型，个人|企业|设备(IOT)
	DidType *string `json:"did_type,omitempty" xml:"did_type,omitempty" require:"true"`
	// 场景码，找dis工作人员进行分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
}

func (s UpdateDidServicesRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateDidServicesRequest) GoString() string {
	return s.String()
}

func (s *UpdateDidServicesRequest) SetAuthToken(v string) *UpdateDidServicesRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateDidServicesRequest) SetProductInstanceId(v string) *UpdateDidServicesRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UpdateDidServicesRequest) SetAddSevices(v []*DidDocServicesInfo) *UpdateDidServicesRequest {
	s.AddSevices = v
	return s
}

func (s *UpdateDidServicesRequest) SetDelServices(v []*string) *UpdateDidServicesRequest {
	s.DelServices = v
	return s
}

func (s *UpdateDidServicesRequest) SetDid(v string) *UpdateDidServicesRequest {
	s.Did = &v
	return s
}

func (s *UpdateDidServicesRequest) SetDidType(v string) *UpdateDidServicesRequest {
	s.DidType = &v
	return s
}

func (s *UpdateDidServicesRequest) SetBizCode(v string) *UpdateDidServicesRequest {
	s.BizCode = &v
	return s
}

type UpdateDidServicesResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 更新后的did doc
	DidDoc *string `json:"did_doc,omitempty" xml:"did_doc,omitempty"`
}

func (s UpdateDidServicesResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateDidServicesResponse) GoString() string {
	return s.String()
}

func (s *UpdateDidServicesResponse) SetReqMsgId(v string) *UpdateDidServicesResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateDidServicesResponse) SetResultCode(v string) *UpdateDidServicesResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateDidServicesResponse) SetResultMsg(v string) *UpdateDidServicesResponse {
	s.ResultMsg = &v
	return s
}

func (s *UpdateDidServicesResponse) SetDidDoc(v string) *UpdateDidServicesResponse {
	s.DidDoc = &v
	return s
}

type QueryDidAgentServicediscoveryRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 查询页数
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty" require:"true"`
	// 需要查找的服务类型
	ServiceType *string `json:"service_type,omitempty" xml:"service_type,omitempty" require:"true"`
	// 场景码，找dis工作人员进行分配
	//
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
}

func (s QueryDidAgentServicediscoveryRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDidAgentServicediscoveryRequest) GoString() string {
	return s.String()
}

func (s *QueryDidAgentServicediscoveryRequest) SetAuthToken(v string) *QueryDidAgentServicediscoveryRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryDidAgentServicediscoveryRequest) SetProductInstanceId(v string) *QueryDidAgentServicediscoveryRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryDidAgentServicediscoveryRequest) SetPageNum(v int64) *QueryDidAgentServicediscoveryRequest {
	s.PageNum = &v
	return s
}

func (s *QueryDidAgentServicediscoveryRequest) SetServiceType(v string) *QueryDidAgentServicediscoveryRequest {
	s.ServiceType = &v
	return s
}

func (s *QueryDidAgentServicediscoveryRequest) SetBizCode(v string) *QueryDidAgentServicediscoveryRequest {
	s.BizCode = &v
	return s
}

type QueryDidAgentServicediscoveryResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 当前页数
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	// 服务列表
	Services []*DisServiceInfo `json:"services,omitempty" xml:"services,omitempty" type:"Repeated"`
	// 总个数
	TotalNum *int64 `json:"total_num,omitempty" xml:"total_num,omitempty"`
	// 总页数
	TotalPage *int64 `json:"total_page,omitempty" xml:"total_page,omitempty"`
}

func (s QueryDidAgentServicediscoveryResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDidAgentServicediscoveryResponse) GoString() string {
	return s.String()
}

func (s *QueryDidAgentServicediscoveryResponse) SetReqMsgId(v string) *QueryDidAgentServicediscoveryResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryDidAgentServicediscoveryResponse) SetResultCode(v string) *QueryDidAgentServicediscoveryResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryDidAgentServicediscoveryResponse) SetResultMsg(v string) *QueryDidAgentServicediscoveryResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryDidAgentServicediscoveryResponse) SetCurrentPage(v int64) *QueryDidAgentServicediscoveryResponse {
	s.CurrentPage = &v
	return s
}

func (s *QueryDidAgentServicediscoveryResponse) SetServices(v []*DisServiceInfo) *QueryDidAgentServicediscoveryResponse {
	s.Services = v
	return s
}

func (s *QueryDidAgentServicediscoveryResponse) SetTotalNum(v int64) *QueryDidAgentServicediscoveryResponse {
	s.TotalNum = &v
	return s
}

func (s *QueryDidAgentServicediscoveryResponse) SetTotalPage(v int64) *QueryDidAgentServicediscoveryResponse {
	s.TotalPage = &v
	return s
}

type StartDidVerifiableclaimIssuerandsaveRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 颁发证书声明
	BareClaim *BareClaim `json:"bare_claim,omitempty" xml:"bare_claim,omitempty" require:"true"`
	// 过期时间
	Expire *int64 `json:"expire,omitempty" xml:"expire,omitempty" require:"true"`
	// 由谁来颁发，该did必须为调用者自己或者自己代理的did
	Issuer *string `json:"issuer,omitempty" xml:"issuer,omitempty" require:"true"`
	// 为哪个did颁发
	Subject *string `json:"subject,omitempty" xml:"subject,omitempty" require:"true"`
	// 验证声明类型，目前默认VerifiableCredential
	Type []*string `json:"type,omitempty" xml:"type,omitempty" type:"Repeated"`
	// 验证声明状态方式，目前只支持直接通过声明id上链查找状态方式，后续会支持更多方式
	VerifyStatusType *string `json:"verify_status_type,omitempty" xml:"verify_status_type,omitempty"`
	// 场景码，找dis工作人员进行分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
}

func (s StartDidVerifiableclaimIssuerandsaveRequest) String() string {
	return tea.Prettify(s)
}

func (s StartDidVerifiableclaimIssuerandsaveRequest) GoString() string {
	return s.String()
}

func (s *StartDidVerifiableclaimIssuerandsaveRequest) SetAuthToken(v string) *StartDidVerifiableclaimIssuerandsaveRequest {
	s.AuthToken = &v
	return s
}

func (s *StartDidVerifiableclaimIssuerandsaveRequest) SetProductInstanceId(v string) *StartDidVerifiableclaimIssuerandsaveRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *StartDidVerifiableclaimIssuerandsaveRequest) SetBareClaim(v *BareClaim) *StartDidVerifiableclaimIssuerandsaveRequest {
	s.BareClaim = v
	return s
}

func (s *StartDidVerifiableclaimIssuerandsaveRequest) SetExpire(v int64) *StartDidVerifiableclaimIssuerandsaveRequest {
	s.Expire = &v
	return s
}

func (s *StartDidVerifiableclaimIssuerandsaveRequest) SetIssuer(v string) *StartDidVerifiableclaimIssuerandsaveRequest {
	s.Issuer = &v
	return s
}

func (s *StartDidVerifiableclaimIssuerandsaveRequest) SetSubject(v string) *StartDidVerifiableclaimIssuerandsaveRequest {
	s.Subject = &v
	return s
}

func (s *StartDidVerifiableclaimIssuerandsaveRequest) SetType(v []*string) *StartDidVerifiableclaimIssuerandsaveRequest {
	s.Type = v
	return s
}

func (s *StartDidVerifiableclaimIssuerandsaveRequest) SetVerifyStatusType(v string) *StartDidVerifiableclaimIssuerandsaveRequest {
	s.VerifyStatusType = &v
	return s
}

func (s *StartDidVerifiableclaimIssuerandsaveRequest) SetBizCode(v string) *StartDidVerifiableclaimIssuerandsaveRequest {
	s.BizCode = &v
	return s
}

type StartDidVerifiableclaimIssuerandsaveResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 可验证声明的完整声明 {"content":{"verion":"0.7.0","issuer":"xxxx","subject":"xxxx","expire":1530735444,"issucanceDate":1530735000,"id":"XXXX","claim":{//用户自定义},"status":{"type":"XXXX","id":"XXXXX"}},"proof":{"type":"ecdsa","created":"2018-06-18T21:19:10Z","verificationMethod":"XXXX","signatureValue":"XXXXX"}}
	VerifiableClaimContent *string `json:"verifiable_claim_content,omitempty" xml:"verifiable_claim_content,omitempty"`
	// 声明id
	VerifiableClaimId *string `json:"verifiable_claim_id,omitempty" xml:"verifiable_claim_id,omitempty"`
}

func (s StartDidVerifiableclaimIssuerandsaveResponse) String() string {
	return tea.Prettify(s)
}

func (s StartDidVerifiableclaimIssuerandsaveResponse) GoString() string {
	return s.String()
}

func (s *StartDidVerifiableclaimIssuerandsaveResponse) SetReqMsgId(v string) *StartDidVerifiableclaimIssuerandsaveResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartDidVerifiableclaimIssuerandsaveResponse) SetResultCode(v string) *StartDidVerifiableclaimIssuerandsaveResponse {
	s.ResultCode = &v
	return s
}

func (s *StartDidVerifiableclaimIssuerandsaveResponse) SetResultMsg(v string) *StartDidVerifiableclaimIssuerandsaveResponse {
	s.ResultMsg = &v
	return s
}

func (s *StartDidVerifiableclaimIssuerandsaveResponse) SetVerifiableClaimContent(v string) *StartDidVerifiableclaimIssuerandsaveResponse {
	s.VerifiableClaimContent = &v
	return s
}

func (s *StartDidVerifiableclaimIssuerandsaveResponse) SetVerifiableClaimId(v string) *StartDidVerifiableclaimIssuerandsaveResponse {
	s.VerifiableClaimId = &v
	return s
}

type StartDidVcrepositoryVctransmitRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 用户did标示
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 实际参数
	Payload *VcTransmitPayload `json:"payload,omitempty" xml:"payload,omitempty" require:"true"`
	// 场景码，找dis工作人员进行分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
	// transmit在底层vc仓库使用时候是否需要使用did密钥进行信封封装加密，如果设定true则不需要底层信封加密，需要调用方执行vcContent的加密保护。
	NotEncrypt *bool `json:"not_encrypt,omitempty" xml:"not_encrypt,omitempty"`
}

func (s StartDidVcrepositoryVctransmitRequest) String() string {
	return tea.Prettify(s)
}

func (s StartDidVcrepositoryVctransmitRequest) GoString() string {
	return s.String()
}

func (s *StartDidVcrepositoryVctransmitRequest) SetAuthToken(v string) *StartDidVcrepositoryVctransmitRequest {
	s.AuthToken = &v
	return s
}

func (s *StartDidVcrepositoryVctransmitRequest) SetProductInstanceId(v string) *StartDidVcrepositoryVctransmitRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *StartDidVcrepositoryVctransmitRequest) SetDid(v string) *StartDidVcrepositoryVctransmitRequest {
	s.Did = &v
	return s
}

func (s *StartDidVcrepositoryVctransmitRequest) SetPayload(v *VcTransmitPayload) *StartDidVcrepositoryVctransmitRequest {
	s.Payload = v
	return s
}

func (s *StartDidVcrepositoryVctransmitRequest) SetBizCode(v string) *StartDidVcrepositoryVctransmitRequest {
	s.BizCode = &v
	return s
}

func (s *StartDidVcrepositoryVctransmitRequest) SetNotEncrypt(v bool) *StartDidVcrepositoryVctransmitRequest {
	s.NotEncrypt = &v
	return s
}

type StartDidVcrepositoryVctransmitResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 具体传输结果
	Result []*VcTransmitResult `json:"result,omitempty" xml:"result,omitempty" type:"Repeated"`
}

func (s StartDidVcrepositoryVctransmitResponse) String() string {
	return tea.Prettify(s)
}

func (s StartDidVcrepositoryVctransmitResponse) GoString() string {
	return s.String()
}

func (s *StartDidVcrepositoryVctransmitResponse) SetReqMsgId(v string) *StartDidVcrepositoryVctransmitResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartDidVcrepositoryVctransmitResponse) SetResultCode(v string) *StartDidVcrepositoryVctransmitResponse {
	s.ResultCode = &v
	return s
}

func (s *StartDidVcrepositoryVctransmitResponse) SetResultMsg(v string) *StartDidVcrepositoryVctransmitResponse {
	s.ResultMsg = &v
	return s
}

func (s *StartDidVcrepositoryVctransmitResponse) SetResult(v []*VcTransmitResult) *StartDidVcrepositoryVctransmitResponse {
	s.Result = v
	return s
}

type CreateDidPersonWithtwometaRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 身份证号码
	CertNo *string `json:"cert_no,omitempty" xml:"cert_no,omitempty" require:"true"`
	// 扩展字段
	ExtensionInfo *string `json:"extension_info,omitempty" xml:"extension_info,omitempty"`
	// 姓名
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 名称
	OwnerName *string `json:"owner_name,omitempty" xml:"owner_name,omitempty"`
	// 自定义个人唯一id，个人在自有模式下的唯一号，调用者需要保证其唯一性
	OwnerUid *string `json:"owner_uid,omitempty" xml:"owner_uid,omitempty" require:"true"`
	// 场景码，找dis工作人员进行分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
}

func (s CreateDidPersonWithtwometaRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDidPersonWithtwometaRequest) GoString() string {
	return s.String()
}

func (s *CreateDidPersonWithtwometaRequest) SetAuthToken(v string) *CreateDidPersonWithtwometaRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateDidPersonWithtwometaRequest) SetProductInstanceId(v string) *CreateDidPersonWithtwometaRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateDidPersonWithtwometaRequest) SetCertNo(v string) *CreateDidPersonWithtwometaRequest {
	s.CertNo = &v
	return s
}

func (s *CreateDidPersonWithtwometaRequest) SetExtensionInfo(v string) *CreateDidPersonWithtwometaRequest {
	s.ExtensionInfo = &v
	return s
}

func (s *CreateDidPersonWithtwometaRequest) SetName(v string) *CreateDidPersonWithtwometaRequest {
	s.Name = &v
	return s
}

func (s *CreateDidPersonWithtwometaRequest) SetOwnerName(v string) *CreateDidPersonWithtwometaRequest {
	s.OwnerName = &v
	return s
}

func (s *CreateDidPersonWithtwometaRequest) SetOwnerUid(v string) *CreateDidPersonWithtwometaRequest {
	s.OwnerUid = &v
	return s
}

func (s *CreateDidPersonWithtwometaRequest) SetBizCode(v string) *CreateDidPersonWithtwometaRequest {
	s.BizCode = &v
	return s
}

type CreateDidPersonWithtwometaResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 生成的did字符串
	Did *string `json:"did,omitempty" xml:"did,omitempty"`
	// 颁发的vcId
	VcId *string `json:"vc_id,omitempty" xml:"vc_id,omitempty"`
}

func (s CreateDidPersonWithtwometaResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDidPersonWithtwometaResponse) GoString() string {
	return s.String()
}

func (s *CreateDidPersonWithtwometaResponse) SetReqMsgId(v string) *CreateDidPersonWithtwometaResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateDidPersonWithtwometaResponse) SetResultCode(v string) *CreateDidPersonWithtwometaResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateDidPersonWithtwometaResponse) SetResultMsg(v string) *CreateDidPersonWithtwometaResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateDidPersonWithtwometaResponse) SetDid(v string) *CreateDidPersonWithtwometaResponse {
	s.Did = &v
	return s
}

func (s *CreateDidPersonWithtwometaResponse) SetVcId(v string) *CreateDidPersonWithtwometaResponse {
	s.VcId = &v
	return s
}

type CreateDidCorporateWithtwometaRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 企业名称
	EpCertName *string `json:"ep_cert_name,omitempty" xml:"ep_cert_name,omitempty" require:"true"`
	// 企业证件号
	EpCertNo *string `json:"ep_cert_no,omitempty" xml:"ep_cert_no,omitempty" require:"true"`
	// {
	//   "nation": "CN", //企业注册地址
	//   "type": "LimitedCompany", //企业类型
	//   "name": "演示用户名", //必选字段，企业名
	//   "licenceNo": "1111", //营业执照
	//   "address": "1111", //企业地址
	//   "parentName": "", //<-必选字段 业务方名 需要提前协商
	//   "linkType": "indirect", //<- 连接类型，direct直链企业， indirect间链企业
	//   "certifyDate": "2019-1-1", //证书颁发时间
	//   "licenceExpireDate": "2020-1-1", //证书到期时间
	//   "businessScope": "1111", //企业经营范围
	//   "businessAddress": "1111", //企业经营地址
	//   "corporateBusinessType": 0, //<- 企业类型：0 一般企业， 1 个人商户
	//   "channelName": "" //<- 必选字段 业务渠道 需要提前沟通
	// }
	ExtensionInfo *string `json:"extension_info,omitempty" xml:"extension_info,omitempty"`
	// 名称
	//
	OwnerName *string `json:"owner_name,omitempty" xml:"owner_name,omitempty"`
	// 自定义企业唯一id，企业在自有模式下的唯一号，调用者需要保证其唯一性
	OwnerUid *string `json:"owner_uid,omitempty" xml:"owner_uid,omitempty" require:"true"`
	// 场景码，找dis工作人员进行分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
}

func (s CreateDidCorporateWithtwometaRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDidCorporateWithtwometaRequest) GoString() string {
	return s.String()
}

func (s *CreateDidCorporateWithtwometaRequest) SetAuthToken(v string) *CreateDidCorporateWithtwometaRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateDidCorporateWithtwometaRequest) SetProductInstanceId(v string) *CreateDidCorporateWithtwometaRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateDidCorporateWithtwometaRequest) SetEpCertName(v string) *CreateDidCorporateWithtwometaRequest {
	s.EpCertName = &v
	return s
}

func (s *CreateDidCorporateWithtwometaRequest) SetEpCertNo(v string) *CreateDidCorporateWithtwometaRequest {
	s.EpCertNo = &v
	return s
}

func (s *CreateDidCorporateWithtwometaRequest) SetExtensionInfo(v string) *CreateDidCorporateWithtwometaRequest {
	s.ExtensionInfo = &v
	return s
}

func (s *CreateDidCorporateWithtwometaRequest) SetOwnerName(v string) *CreateDidCorporateWithtwometaRequest {
	s.OwnerName = &v
	return s
}

func (s *CreateDidCorporateWithtwometaRequest) SetOwnerUid(v string) *CreateDidCorporateWithtwometaRequest {
	s.OwnerUid = &v
	return s
}

func (s *CreateDidCorporateWithtwometaRequest) SetBizCode(v string) *CreateDidCorporateWithtwometaRequest {
	s.BizCode = &v
	return s
}

type CreateDidCorporateWithtwometaResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 生成的did
	//
	Did *string `json:"did,omitempty" xml:"did,omitempty"`
	// 颁发的vcId
	VcId *string `json:"vc_id,omitempty" xml:"vc_id,omitempty"`
}

func (s CreateDidCorporateWithtwometaResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDidCorporateWithtwometaResponse) GoString() string {
	return s.String()
}

func (s *CreateDidCorporateWithtwometaResponse) SetReqMsgId(v string) *CreateDidCorporateWithtwometaResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateDidCorporateWithtwometaResponse) SetResultCode(v string) *CreateDidCorporateWithtwometaResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateDidCorporateWithtwometaResponse) SetResultMsg(v string) *CreateDidCorporateWithtwometaResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateDidCorporateWithtwometaResponse) SetDid(v string) *CreateDidCorporateWithtwometaResponse {
	s.Did = &v
	return s
}

func (s *CreateDidCorporateWithtwometaResponse) SetVcId(v string) *CreateDidCorporateWithtwometaResponse {
	s.VcId = &v
	return s
}

type CreateDidCorporateWithfourmetaRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 企业名称
	//
	EpCertName *string `json:"ep_cert_name,omitempty" xml:"ep_cert_name,omitempty" require:"true"`
	// 企业证件号
	//
	EpCertNo *string `json:"ep_cert_no,omitempty" xml:"ep_cert_no,omitempty" require:"true"`
	// { "nation": "CN", //企业注册地址 "type": "LimitedCompany", //企业类型 "name": "演示用户名", //必选字段，企业名 "licenceNo": "1111", //营业执照 "address": "1111", //企业地址 "parentName": "", //<-必选字段 业务方名 需要提前协商 "linkType": "indirect", //<- 连接类型，direct直链企业， indirect间链企业 "certifyDate": "2019-1-1", //证书颁发时间 "licenceExpireDate": "2020-1-1", //证书到期时间 "businessScope": "1111", //企业经营范围 "businessAddress": "1111", //企业经营地址 "corporateBusinessType": 0, //<- 企业类型：0 一般企业， 1 个人商户 "channelName": "" //<- 必选字段 业务渠道 需要提前沟通 }
	//
	ExtensionInfo *string `json:"extension_info,omitempty" xml:"extension_info,omitempty"`
	// 法人姓名
	//
	LegalPersonCertName *string `json:"legal_person_cert_name,omitempty" xml:"legal_person_cert_name,omitempty" require:"true"`
	// 法人身份证件号
	LegalPersonCertNo *string `json:"legal_person_cert_no,omitempty" xml:"legal_person_cert_no,omitempty" require:"true"`
	// 名称
	//
	OwnerName *string `json:"owner_name,omitempty" xml:"owner_name,omitempty"`
	// 自定义企业唯一id，企业在自有模式下的唯一号，调用者需要保证其唯一性
	OwnerUid *string `json:"owner_uid,omitempty" xml:"owner_uid,omitempty" require:"true"`
	// 场景码，找dis工作人员进行分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
}

func (s CreateDidCorporateWithfourmetaRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDidCorporateWithfourmetaRequest) GoString() string {
	return s.String()
}

func (s *CreateDidCorporateWithfourmetaRequest) SetAuthToken(v string) *CreateDidCorporateWithfourmetaRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateDidCorporateWithfourmetaRequest) SetProductInstanceId(v string) *CreateDidCorporateWithfourmetaRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateDidCorporateWithfourmetaRequest) SetEpCertName(v string) *CreateDidCorporateWithfourmetaRequest {
	s.EpCertName = &v
	return s
}

func (s *CreateDidCorporateWithfourmetaRequest) SetEpCertNo(v string) *CreateDidCorporateWithfourmetaRequest {
	s.EpCertNo = &v
	return s
}

func (s *CreateDidCorporateWithfourmetaRequest) SetExtensionInfo(v string) *CreateDidCorporateWithfourmetaRequest {
	s.ExtensionInfo = &v
	return s
}

func (s *CreateDidCorporateWithfourmetaRequest) SetLegalPersonCertName(v string) *CreateDidCorporateWithfourmetaRequest {
	s.LegalPersonCertName = &v
	return s
}

func (s *CreateDidCorporateWithfourmetaRequest) SetLegalPersonCertNo(v string) *CreateDidCorporateWithfourmetaRequest {
	s.LegalPersonCertNo = &v
	return s
}

func (s *CreateDidCorporateWithfourmetaRequest) SetOwnerName(v string) *CreateDidCorporateWithfourmetaRequest {
	s.OwnerName = &v
	return s
}

func (s *CreateDidCorporateWithfourmetaRequest) SetOwnerUid(v string) *CreateDidCorporateWithfourmetaRequest {
	s.OwnerUid = &v
	return s
}

func (s *CreateDidCorporateWithfourmetaRequest) SetBizCode(v string) *CreateDidCorporateWithfourmetaRequest {
	s.BizCode = &v
	return s
}

type CreateDidCorporateWithfourmetaResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 生成的did
	//
	Did *string `json:"did,omitempty" xml:"did,omitempty"`
	// 颁发的vcId
	//
	VcId *string `json:"vc_id,omitempty" xml:"vc_id,omitempty"`
}

func (s CreateDidCorporateWithfourmetaResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDidCorporateWithfourmetaResponse) GoString() string {
	return s.String()
}

func (s *CreateDidCorporateWithfourmetaResponse) SetReqMsgId(v string) *CreateDidCorporateWithfourmetaResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateDidCorporateWithfourmetaResponse) SetResultCode(v string) *CreateDidCorporateWithfourmetaResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateDidCorporateWithfourmetaResponse) SetResultMsg(v string) *CreateDidCorporateWithfourmetaResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateDidCorporateWithfourmetaResponse) SetDid(v string) *CreateDidCorporateWithfourmetaResponse {
	s.Did = &v
	return s
}

func (s *CreateDidCorporateWithfourmetaResponse) SetVcId(v string) *CreateDidCorporateWithfourmetaResponse {
	s.VcId = &v
	return s
}

type CreateDidPersonWithfourmetaRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 银行卡号
	BankCard *string `json:"bank_card,omitempty" xml:"bank_card,omitempty" require:"true"`
	// 身份证号码
	//
	CertNo *string `json:"cert_no,omitempty" xml:"cert_no,omitempty" require:"true"`
	// 扩展字段
	//
	ExtensionInfo *string `json:"extension_info,omitempty" xml:"extension_info,omitempty"`
	// 手机号码
	//
	Mobile *string `json:"mobile,omitempty" xml:"mobile,omitempty" require:"true"`
	// 姓名
	//
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 名称
	//
	OwnerName *string `json:"owner_name,omitempty" xml:"owner_name,omitempty"`
	// 自定义个人唯一id，个人在自有模式下的唯一号，调用者需要保证其唯一性
	OwnerUid *string `json:"owner_uid,omitempty" xml:"owner_uid,omitempty" require:"true"`
	// 场景码，找dis工作人员进行分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
}

func (s CreateDidPersonWithfourmetaRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDidPersonWithfourmetaRequest) GoString() string {
	return s.String()
}

func (s *CreateDidPersonWithfourmetaRequest) SetAuthToken(v string) *CreateDidPersonWithfourmetaRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateDidPersonWithfourmetaRequest) SetProductInstanceId(v string) *CreateDidPersonWithfourmetaRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateDidPersonWithfourmetaRequest) SetBankCard(v string) *CreateDidPersonWithfourmetaRequest {
	s.BankCard = &v
	return s
}

func (s *CreateDidPersonWithfourmetaRequest) SetCertNo(v string) *CreateDidPersonWithfourmetaRequest {
	s.CertNo = &v
	return s
}

func (s *CreateDidPersonWithfourmetaRequest) SetExtensionInfo(v string) *CreateDidPersonWithfourmetaRequest {
	s.ExtensionInfo = &v
	return s
}

func (s *CreateDidPersonWithfourmetaRequest) SetMobile(v string) *CreateDidPersonWithfourmetaRequest {
	s.Mobile = &v
	return s
}

func (s *CreateDidPersonWithfourmetaRequest) SetName(v string) *CreateDidPersonWithfourmetaRequest {
	s.Name = &v
	return s
}

func (s *CreateDidPersonWithfourmetaRequest) SetOwnerName(v string) *CreateDidPersonWithfourmetaRequest {
	s.OwnerName = &v
	return s
}

func (s *CreateDidPersonWithfourmetaRequest) SetOwnerUid(v string) *CreateDidPersonWithfourmetaRequest {
	s.OwnerUid = &v
	return s
}

func (s *CreateDidPersonWithfourmetaRequest) SetBizCode(v string) *CreateDidPersonWithfourmetaRequest {
	s.BizCode = &v
	return s
}

type CreateDidPersonWithfourmetaResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 生成的did字符串
	//
	Did *string `json:"did,omitempty" xml:"did,omitempty"`
	// 颁发的vcId
	//
	VcId *string `json:"vc_id,omitempty" xml:"vc_id,omitempty"`
}

func (s CreateDidPersonWithfourmetaResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDidPersonWithfourmetaResponse) GoString() string {
	return s.String()
}

func (s *CreateDidPersonWithfourmetaResponse) SetReqMsgId(v string) *CreateDidPersonWithfourmetaResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateDidPersonWithfourmetaResponse) SetResultCode(v string) *CreateDidPersonWithfourmetaResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateDidPersonWithfourmetaResponse) SetResultMsg(v string) *CreateDidPersonWithfourmetaResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateDidPersonWithfourmetaResponse) SetDid(v string) *CreateDidPersonWithfourmetaResponse {
	s.Did = &v
	return s
}

func (s *CreateDidPersonWithfourmetaResponse) SetVcId(v string) *CreateDidPersonWithfourmetaResponse {
	s.VcId = &v
	return s
}

type StartDidCorporateTwometaRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 颁发证书的subject did
	//
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 企业名称
	EpCertName *string `json:"ep_cert_name,omitempty" xml:"ep_cert_name,omitempty" require:"true"`
	// 企业证件号
	//
	EpCertNo *string `json:"ep_cert_no,omitempty" xml:"ep_cert_no,omitempty" require:"true"`
	// 场景码，找dis工作人员进行分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
}

func (s StartDidCorporateTwometaRequest) String() string {
	return tea.Prettify(s)
}

func (s StartDidCorporateTwometaRequest) GoString() string {
	return s.String()
}

func (s *StartDidCorporateTwometaRequest) SetAuthToken(v string) *StartDidCorporateTwometaRequest {
	s.AuthToken = &v
	return s
}

func (s *StartDidCorporateTwometaRequest) SetProductInstanceId(v string) *StartDidCorporateTwometaRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *StartDidCorporateTwometaRequest) SetDid(v string) *StartDidCorporateTwometaRequest {
	s.Did = &v
	return s
}

func (s *StartDidCorporateTwometaRequest) SetEpCertName(v string) *StartDidCorporateTwometaRequest {
	s.EpCertName = &v
	return s
}

func (s *StartDidCorporateTwometaRequest) SetEpCertNo(v string) *StartDidCorporateTwometaRequest {
	s.EpCertNo = &v
	return s
}

func (s *StartDidCorporateTwometaRequest) SetBizCode(v string) *StartDidCorporateTwometaRequest {
	s.BizCode = &v
	return s
}

type StartDidCorporateTwometaResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// vc id，可通过该字符串来查询vc具体内容
	VcId *string `json:"vc_id,omitempty" xml:"vc_id,omitempty"`
}

func (s StartDidCorporateTwometaResponse) String() string {
	return tea.Prettify(s)
}

func (s StartDidCorporateTwometaResponse) GoString() string {
	return s.String()
}

func (s *StartDidCorporateTwometaResponse) SetReqMsgId(v string) *StartDidCorporateTwometaResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartDidCorporateTwometaResponse) SetResultCode(v string) *StartDidCorporateTwometaResponse {
	s.ResultCode = &v
	return s
}

func (s *StartDidCorporateTwometaResponse) SetResultMsg(v string) *StartDidCorporateTwometaResponse {
	s.ResultMsg = &v
	return s
}

func (s *StartDidCorporateTwometaResponse) SetVcId(v string) *StartDidCorporateTwometaResponse {
	s.VcId = &v
	return s
}

type StartDidCorporateThreemetaRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 证书的subject did
	//
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 企业名称
	//
	EpCertName *string `json:"ep_cert_name,omitempty" xml:"ep_cert_name,omitempty" require:"true"`
	// 企业证件号
	//
	EpCertNo *string `json:"ep_cert_no,omitempty" xml:"ep_cert_no,omitempty" require:"true"`
	// 法人姓名
	//
	LegalPersonCertName *string `json:"legal_person_cert_name,omitempty" xml:"legal_person_cert_name,omitempty" require:"true"`
	// 场景码，找dis工作人员进行分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
}

func (s StartDidCorporateThreemetaRequest) String() string {
	return tea.Prettify(s)
}

func (s StartDidCorporateThreemetaRequest) GoString() string {
	return s.String()
}

func (s *StartDidCorporateThreemetaRequest) SetAuthToken(v string) *StartDidCorporateThreemetaRequest {
	s.AuthToken = &v
	return s
}

func (s *StartDidCorporateThreemetaRequest) SetProductInstanceId(v string) *StartDidCorporateThreemetaRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *StartDidCorporateThreemetaRequest) SetDid(v string) *StartDidCorporateThreemetaRequest {
	s.Did = &v
	return s
}

func (s *StartDidCorporateThreemetaRequest) SetEpCertName(v string) *StartDidCorporateThreemetaRequest {
	s.EpCertName = &v
	return s
}

func (s *StartDidCorporateThreemetaRequest) SetEpCertNo(v string) *StartDidCorporateThreemetaRequest {
	s.EpCertNo = &v
	return s
}

func (s *StartDidCorporateThreemetaRequest) SetLegalPersonCertName(v string) *StartDidCorporateThreemetaRequest {
	s.LegalPersonCertName = &v
	return s
}

func (s *StartDidCorporateThreemetaRequest) SetBizCode(v string) *StartDidCorporateThreemetaRequest {
	s.BizCode = &v
	return s
}

type StartDidCorporateThreemetaResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// vc id，可通过该字符串来查询vc具体内容
	//
	VcId *string `json:"vc_id,omitempty" xml:"vc_id,omitempty"`
}

func (s StartDidCorporateThreemetaResponse) String() string {
	return tea.Prettify(s)
}

func (s StartDidCorporateThreemetaResponse) GoString() string {
	return s.String()
}

func (s *StartDidCorporateThreemetaResponse) SetReqMsgId(v string) *StartDidCorporateThreemetaResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartDidCorporateThreemetaResponse) SetResultCode(v string) *StartDidCorporateThreemetaResponse {
	s.ResultCode = &v
	return s
}

func (s *StartDidCorporateThreemetaResponse) SetResultMsg(v string) *StartDidCorporateThreemetaResponse {
	s.ResultMsg = &v
	return s
}

func (s *StartDidCorporateThreemetaResponse) SetVcId(v string) *StartDidCorporateThreemetaResponse {
	s.VcId = &v
	return s
}

type StartDidCorporateFourmetaRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 颁发证书的subject did
	//
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 企业名称
	//
	EpCertName *string `json:"ep_cert_name,omitempty" xml:"ep_cert_name,omitempty" require:"true"`
	// 企业证件号
	//
	EpCertNo *string `json:"ep_cert_no,omitempty" xml:"ep_cert_no,omitempty" require:"true"`
	// 法人姓名
	//
	LegalPersonCertName *string `json:"legal_person_cert_name,omitempty" xml:"legal_person_cert_name,omitempty" require:"true"`
	// 法人身份证件号
	//
	LegalPersonCertNo *string `json:"legal_person_cert_no,omitempty" xml:"legal_person_cert_no,omitempty" require:"true"`
	// 场景码，找dis工作人员进行分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
}

func (s StartDidCorporateFourmetaRequest) String() string {
	return tea.Prettify(s)
}

func (s StartDidCorporateFourmetaRequest) GoString() string {
	return s.String()
}

func (s *StartDidCorporateFourmetaRequest) SetAuthToken(v string) *StartDidCorporateFourmetaRequest {
	s.AuthToken = &v
	return s
}

func (s *StartDidCorporateFourmetaRequest) SetProductInstanceId(v string) *StartDidCorporateFourmetaRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *StartDidCorporateFourmetaRequest) SetDid(v string) *StartDidCorporateFourmetaRequest {
	s.Did = &v
	return s
}

func (s *StartDidCorporateFourmetaRequest) SetEpCertName(v string) *StartDidCorporateFourmetaRequest {
	s.EpCertName = &v
	return s
}

func (s *StartDidCorporateFourmetaRequest) SetEpCertNo(v string) *StartDidCorporateFourmetaRequest {
	s.EpCertNo = &v
	return s
}

func (s *StartDidCorporateFourmetaRequest) SetLegalPersonCertName(v string) *StartDidCorporateFourmetaRequest {
	s.LegalPersonCertName = &v
	return s
}

func (s *StartDidCorporateFourmetaRequest) SetLegalPersonCertNo(v string) *StartDidCorporateFourmetaRequest {
	s.LegalPersonCertNo = &v
	return s
}

func (s *StartDidCorporateFourmetaRequest) SetBizCode(v string) *StartDidCorporateFourmetaRequest {
	s.BizCode = &v
	return s
}

type StartDidCorporateFourmetaResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// vc id，可通过该字符串来查询vc具体内容
	//
	VcId *string `json:"vc_id,omitempty" xml:"vc_id,omitempty"`
}

func (s StartDidCorporateFourmetaResponse) String() string {
	return tea.Prettify(s)
}

func (s StartDidCorporateFourmetaResponse) GoString() string {
	return s.String()
}

func (s *StartDidCorporateFourmetaResponse) SetReqMsgId(v string) *StartDidCorporateFourmetaResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartDidCorporateFourmetaResponse) SetResultCode(v string) *StartDidCorporateFourmetaResponse {
	s.ResultCode = &v
	return s
}

func (s *StartDidCorporateFourmetaResponse) SetResultMsg(v string) *StartDidCorporateFourmetaResponse {
	s.ResultMsg = &v
	return s
}

func (s *StartDidCorporateFourmetaResponse) SetVcId(v string) *StartDidCorporateFourmetaResponse {
	s.VcId = &v
	return s
}

type StartDidCertificationFourmetaRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 银行卡号
	//
	BankCard *string `json:"bank_card,omitempty" xml:"bank_card,omitempty" require:"true"`
	// 身份证号码
	//
	CertNo *string `json:"cert_no,omitempty" xml:"cert_no,omitempty" require:"true"`
	// 证书的subject did
	//
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 手机号码
	//
	Mobile *string `json:"mobile,omitempty" xml:"mobile,omitempty" require:"true"`
	// 姓名
	//
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 场景码，找dis工作人员进行分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
}

func (s StartDidCertificationFourmetaRequest) String() string {
	return tea.Prettify(s)
}

func (s StartDidCertificationFourmetaRequest) GoString() string {
	return s.String()
}

func (s *StartDidCertificationFourmetaRequest) SetAuthToken(v string) *StartDidCertificationFourmetaRequest {
	s.AuthToken = &v
	return s
}

func (s *StartDidCertificationFourmetaRequest) SetProductInstanceId(v string) *StartDidCertificationFourmetaRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *StartDidCertificationFourmetaRequest) SetBankCard(v string) *StartDidCertificationFourmetaRequest {
	s.BankCard = &v
	return s
}

func (s *StartDidCertificationFourmetaRequest) SetCertNo(v string) *StartDidCertificationFourmetaRequest {
	s.CertNo = &v
	return s
}

func (s *StartDidCertificationFourmetaRequest) SetDid(v string) *StartDidCertificationFourmetaRequest {
	s.Did = &v
	return s
}

func (s *StartDidCertificationFourmetaRequest) SetMobile(v string) *StartDidCertificationFourmetaRequest {
	s.Mobile = &v
	return s
}

func (s *StartDidCertificationFourmetaRequest) SetName(v string) *StartDidCertificationFourmetaRequest {
	s.Name = &v
	return s
}

func (s *StartDidCertificationFourmetaRequest) SetBizCode(v string) *StartDidCertificationFourmetaRequest {
	s.BizCode = &v
	return s
}

type StartDidCertificationFourmetaResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// vc id，可通过该字符串来查询vc具体内容
	//
	VcId *string `json:"vc_id,omitempty" xml:"vc_id,omitempty"`
}

func (s StartDidCertificationFourmetaResponse) String() string {
	return tea.Prettify(s)
}

func (s StartDidCertificationFourmetaResponse) GoString() string {
	return s.String()
}

func (s *StartDidCertificationFourmetaResponse) SetReqMsgId(v string) *StartDidCertificationFourmetaResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartDidCertificationFourmetaResponse) SetResultCode(v string) *StartDidCertificationFourmetaResponse {
	s.ResultCode = &v
	return s
}

func (s *StartDidCertificationFourmetaResponse) SetResultMsg(v string) *StartDidCertificationFourmetaResponse {
	s.ResultMsg = &v
	return s
}

func (s *StartDidCertificationFourmetaResponse) SetVcId(v string) *StartDidCertificationFourmetaResponse {
	s.VcId = &v
	return s
}

type QueryDidVcrepositoryFuzzyquerywithdefinedidRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 自定义的业务id，通常此字段不是"vc:mychain:"前缀开头，会使用如下规则生成最终verifiable_claim_id： verifiable_claim_id = "vc:mychain:" + SHA256(Joiner.on(":").join(issuer_did, subject_did, define_id)); 此表达式参与SHA256的 define_id 为用户指定的当前参数。查询时使用verifiable_claim_id*
	DefineId *string `json:"define_id,omitempty" xml:"define_id,omitempty" require:"true"`
	// 请求读取数据的did
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 目标证书VC的颁发者did。
	IssuerDid *string `json:"issuer_did,omitempty" xml:"issuer_did,omitempty" require:"true"`
	// 目标证书VC的颁发目标did。
	//
	SubjectDid *string `json:"subject_did,omitempty" xml:"subject_did,omitempty" require:"true"`
	// 场景码，找dis工作人员进行分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
}

func (s QueryDidVcrepositoryFuzzyquerywithdefinedidRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDidVcrepositoryFuzzyquerywithdefinedidRequest) GoString() string {
	return s.String()
}

func (s *QueryDidVcrepositoryFuzzyquerywithdefinedidRequest) SetAuthToken(v string) *QueryDidVcrepositoryFuzzyquerywithdefinedidRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryDidVcrepositoryFuzzyquerywithdefinedidRequest) SetProductInstanceId(v string) *QueryDidVcrepositoryFuzzyquerywithdefinedidRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryDidVcrepositoryFuzzyquerywithdefinedidRequest) SetDefineId(v string) *QueryDidVcrepositoryFuzzyquerywithdefinedidRequest {
	s.DefineId = &v
	return s
}

func (s *QueryDidVcrepositoryFuzzyquerywithdefinedidRequest) SetDid(v string) *QueryDidVcrepositoryFuzzyquerywithdefinedidRequest {
	s.Did = &v
	return s
}

func (s *QueryDidVcrepositoryFuzzyquerywithdefinedidRequest) SetIssuerDid(v string) *QueryDidVcrepositoryFuzzyquerywithdefinedidRequest {
	s.IssuerDid = &v
	return s
}

func (s *QueryDidVcrepositoryFuzzyquerywithdefinedidRequest) SetSubjectDid(v string) *QueryDidVcrepositoryFuzzyquerywithdefinedidRequest {
	s.SubjectDid = &v
	return s
}

func (s *QueryDidVcrepositoryFuzzyquerywithdefinedidRequest) SetBizCode(v string) *QueryDidVcrepositoryFuzzyquerywithdefinedidRequest {
	s.BizCode = &v
	return s
}

type QueryDidVcrepositoryFuzzyquerywithdefinedidResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 可验证声明的完整声明列表
	VerifiableClaimContent []*string `json:"verifiable_claim_content,omitempty" xml:"verifiable_claim_content,omitempty" type:"Repeated"`
}

func (s QueryDidVcrepositoryFuzzyquerywithdefinedidResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDidVcrepositoryFuzzyquerywithdefinedidResponse) GoString() string {
	return s.String()
}

func (s *QueryDidVcrepositoryFuzzyquerywithdefinedidResponse) SetReqMsgId(v string) *QueryDidVcrepositoryFuzzyquerywithdefinedidResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryDidVcrepositoryFuzzyquerywithdefinedidResponse) SetResultCode(v string) *QueryDidVcrepositoryFuzzyquerywithdefinedidResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryDidVcrepositoryFuzzyquerywithdefinedidResponse) SetResultMsg(v string) *QueryDidVcrepositoryFuzzyquerywithdefinedidResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryDidVcrepositoryFuzzyquerywithdefinedidResponse) SetVerifiableClaimContent(v []*string) *QueryDidVcrepositoryFuzzyquerywithdefinedidResponse {
	s.VerifiableClaimContent = v
	return s
}

type StartDidCommonAgentcreateRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 场景码，找dis工作人员进行分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
	// 自定信息
	ExtensionInfo *string `json:"extension_info,omitempty" xml:"extension_info,omitempty"`
	// 所有需要关联的外键，外键必须已did auth key controller的did作为前缀+“sidekey:”+外键
	Indexs []*string `json:"indexs,omitempty" xml:"indexs,omitempty" type:"Repeated"`
	// 名称
	OwnerName *string `json:"owner_name,omitempty" xml:"owner_name,omitempty" require:"true"`
	// 唯一号，比如可以是hash(证件类型+企业营业执照号) 计算出来的唯一值等
	OwnerUid *string `json:"owner_uid,omitempty" xml:"owner_uid,omitempty" require:"true"`
	// 携带自己定义的服务类型
	Services []*DidDocServicesInfo `json:"services,omitempty" xml:"services,omitempty" type:"Repeated"`
	// 指定did的类型
	EntityType *string `json:"entity_type,omitempty" xml:"entity_type,omitempty"`
}

func (s StartDidCommonAgentcreateRequest) String() string {
	return tea.Prettify(s)
}

func (s StartDidCommonAgentcreateRequest) GoString() string {
	return s.String()
}

func (s *StartDidCommonAgentcreateRequest) SetAuthToken(v string) *StartDidCommonAgentcreateRequest {
	s.AuthToken = &v
	return s
}

func (s *StartDidCommonAgentcreateRequest) SetProductInstanceId(v string) *StartDidCommonAgentcreateRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *StartDidCommonAgentcreateRequest) SetBizCode(v string) *StartDidCommonAgentcreateRequest {
	s.BizCode = &v
	return s
}

func (s *StartDidCommonAgentcreateRequest) SetExtensionInfo(v string) *StartDidCommonAgentcreateRequest {
	s.ExtensionInfo = &v
	return s
}

func (s *StartDidCommonAgentcreateRequest) SetIndexs(v []*string) *StartDidCommonAgentcreateRequest {
	s.Indexs = v
	return s
}

func (s *StartDidCommonAgentcreateRequest) SetOwnerName(v string) *StartDidCommonAgentcreateRequest {
	s.OwnerName = &v
	return s
}

func (s *StartDidCommonAgentcreateRequest) SetOwnerUid(v string) *StartDidCommonAgentcreateRequest {
	s.OwnerUid = &v
	return s
}

func (s *StartDidCommonAgentcreateRequest) SetServices(v []*DidDocServicesInfo) *StartDidCommonAgentcreateRequest {
	s.Services = v
	return s
}

func (s *StartDidCommonAgentcreateRequest) SetEntityType(v string) *StartDidCommonAgentcreateRequest {
	s.EntityType = &v
	return s
}

type StartDidCommonAgentcreateResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 生成的did字符串
	Did *string `json:"did,omitempty" xml:"did,omitempty"`
}

func (s StartDidCommonAgentcreateResponse) String() string {
	return tea.Prettify(s)
}

func (s StartDidCommonAgentcreateResponse) GoString() string {
	return s.String()
}

func (s *StartDidCommonAgentcreateResponse) SetReqMsgId(v string) *StartDidCommonAgentcreateResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartDidCommonAgentcreateResponse) SetResultCode(v string) *StartDidCommonAgentcreateResponse {
	s.ResultCode = &v
	return s
}

func (s *StartDidCommonAgentcreateResponse) SetResultMsg(v string) *StartDidCommonAgentcreateResponse {
	s.ResultMsg = &v
	return s
}

func (s *StartDidCommonAgentcreateResponse) SetDid(v string) *StartDidCommonAgentcreateResponse {
	s.Did = &v
	return s
}

type StartDidCorporateFaceauthRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 回调通知地址
	CallBackUrl *string `json:"call_back_url,omitempty" xml:"call_back_url,omitempty"`
	// 企业名称
	EpCertName *string `json:"ep_cert_name,omitempty" xml:"ep_cert_name,omitempty" require:"true"`
	// 企业证件号
	EpCertNo *string `json:"ep_cert_no,omitempty" xml:"ep_cert_no,omitempty" require:"true"`
	// 企业证件类型（NATIONAL_LEGAL（工商注册号）或 NATIONAL_LEGAL_MERGE （ 社会统一信用代码））
	EpCertType *string `json:"ep_cert_type,omitempty" xml:"ep_cert_type,omitempty" require:"true"`
	// { "nation": "CN", //企业注册地址 "type": "LimitedCompany", //企业类型 "name": "演示用户名", //必选字段，企业名 "licenceNo": "1111", //营业执照 "address": "1111", //企业地址 "parentName": "", //<-必选字段 业务方名 需要提前协商 "linkType": "indirect", //<- 连接类型，direct直链企业， indirect间链企业 "certifyDate": "2019-1-1", //证书颁发时间 "licenceExpireDate": "2020-1-1", //证书到期时间 "businessScope": "1111", //企业经营范围 "businessAddress": "1111", //企业经营地址 "corporateBusinessType": 0, //<- 企业类型：0 一般企业， 1 个人商户 "channelName": "" //<- 必选字段 业务渠道 需要提前沟通 }
	ExtensionInfo *string `json:"extension_info,omitempty" xml:"extension_info,omitempty"`
	// 企业法人
	LegalPersonCertName *string `json:"legal_person_cert_name,omitempty" xml:"legal_person_cert_name,omitempty" require:"true"`
	// 法人身份证号
	LegalPersonCertNo *string `json:"legal_person_cert_no,omitempty" xml:"legal_person_cert_no,omitempty" require:"true"`
	// 认证完成后回跳地址
	MerchantUrl *string `json:"merchant_url,omitempty" xml:"merchant_url,omitempty"`
	// 名称
	OwnerName *string `json:"owner_name,omitempty" xml:"owner_name,omitempty"`
	// 自定义企业唯一id，企业在自有模式下的唯一号，调用者需要保证其唯一性
	OwnerUid *string `json:"owner_uid,omitempty" xml:"owner_uid,omitempty"`
	// 场景码，找dis工作人员进行分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
	// 产品渲染方式：H5、NATIVE 或 PC, 默认为H5
	Group *string `json:"group,omitempty" xml:"group,omitempty"`
}

func (s StartDidCorporateFaceauthRequest) String() string {
	return tea.Prettify(s)
}

func (s StartDidCorporateFaceauthRequest) GoString() string {
	return s.String()
}

func (s *StartDidCorporateFaceauthRequest) SetAuthToken(v string) *StartDidCorporateFaceauthRequest {
	s.AuthToken = &v
	return s
}

func (s *StartDidCorporateFaceauthRequest) SetProductInstanceId(v string) *StartDidCorporateFaceauthRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *StartDidCorporateFaceauthRequest) SetCallBackUrl(v string) *StartDidCorporateFaceauthRequest {
	s.CallBackUrl = &v
	return s
}

func (s *StartDidCorporateFaceauthRequest) SetEpCertName(v string) *StartDidCorporateFaceauthRequest {
	s.EpCertName = &v
	return s
}

func (s *StartDidCorporateFaceauthRequest) SetEpCertNo(v string) *StartDidCorporateFaceauthRequest {
	s.EpCertNo = &v
	return s
}

func (s *StartDidCorporateFaceauthRequest) SetEpCertType(v string) *StartDidCorporateFaceauthRequest {
	s.EpCertType = &v
	return s
}

func (s *StartDidCorporateFaceauthRequest) SetExtensionInfo(v string) *StartDidCorporateFaceauthRequest {
	s.ExtensionInfo = &v
	return s
}

func (s *StartDidCorporateFaceauthRequest) SetLegalPersonCertName(v string) *StartDidCorporateFaceauthRequest {
	s.LegalPersonCertName = &v
	return s
}

func (s *StartDidCorporateFaceauthRequest) SetLegalPersonCertNo(v string) *StartDidCorporateFaceauthRequest {
	s.LegalPersonCertNo = &v
	return s
}

func (s *StartDidCorporateFaceauthRequest) SetMerchantUrl(v string) *StartDidCorporateFaceauthRequest {
	s.MerchantUrl = &v
	return s
}

func (s *StartDidCorporateFaceauthRequest) SetOwnerName(v string) *StartDidCorporateFaceauthRequest {
	s.OwnerName = &v
	return s
}

func (s *StartDidCorporateFaceauthRequest) SetOwnerUid(v string) *StartDidCorporateFaceauthRequest {
	s.OwnerUid = &v
	return s
}

func (s *StartDidCorporateFaceauthRequest) SetBizCode(v string) *StartDidCorporateFaceauthRequest {
	s.BizCode = &v
	return s
}

func (s *StartDidCorporateFaceauthRequest) SetGroup(v string) *StartDidCorporateFaceauthRequest {
	s.Group = &v
	return s
}

type StartDidCorporateFaceauthResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 认证ID
	CertifyId *string `json:"certify_id,omitempty" xml:"certify_id,omitempty"`
	// 二维码URL，用户支付宝扫一扫实人认证
	CertifyUrl *string `json:"certify_url,omitempty" xml:"certify_url,omitempty"`
}

func (s StartDidCorporateFaceauthResponse) String() string {
	return tea.Prettify(s)
}

func (s StartDidCorporateFaceauthResponse) GoString() string {
	return s.String()
}

func (s *StartDidCorporateFaceauthResponse) SetReqMsgId(v string) *StartDidCorporateFaceauthResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartDidCorporateFaceauthResponse) SetResultCode(v string) *StartDidCorporateFaceauthResponse {
	s.ResultCode = &v
	return s
}

func (s *StartDidCorporateFaceauthResponse) SetResultMsg(v string) *StartDidCorporateFaceauthResponse {
	s.ResultMsg = &v
	return s
}

func (s *StartDidCorporateFaceauthResponse) SetCertifyId(v string) *StartDidCorporateFaceauthResponse {
	s.CertifyId = &v
	return s
}

func (s *StartDidCorporateFaceauthResponse) SetCertifyUrl(v string) *StartDidCorporateFaceauthResponse {
	s.CertifyUrl = &v
	return s
}

type QueryDidCorporateFaceauthRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 认证ID，用于查询认证结果
	//
	CertifyId *string `json:"certify_id,omitempty" xml:"certify_id,omitempty" require:"true"`
	// 场景码，找dis工作人员进行分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
	// 产品渲染方式：H5、NATIVE 或 PC
	Group *string `json:"group,omitempty" xml:"group,omitempty"`
}

func (s QueryDidCorporateFaceauthRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDidCorporateFaceauthRequest) GoString() string {
	return s.String()
}

func (s *QueryDidCorporateFaceauthRequest) SetAuthToken(v string) *QueryDidCorporateFaceauthRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryDidCorporateFaceauthRequest) SetProductInstanceId(v string) *QueryDidCorporateFaceauthRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryDidCorporateFaceauthRequest) SetCertifyId(v string) *QueryDidCorporateFaceauthRequest {
	s.CertifyId = &v
	return s
}

func (s *QueryDidCorporateFaceauthRequest) SetBizCode(v string) *QueryDidCorporateFaceauthRequest {
	s.BizCode = &v
	return s
}

func (s *QueryDidCorporateFaceauthRequest) SetGroup(v string) *QueryDidCorporateFaceauthRequest {
	s.Group = &v
	return s
}

type QueryDidCorporateFaceauthResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 生成的did
	Did *string `json:"did,omitempty" xml:"did,omitempty"`
	// vc id，可通过该字符串来查询vc具体内容
	VcId *string `json:"vc_id,omitempty" xml:"vc_id,omitempty"`
}

func (s QueryDidCorporateFaceauthResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDidCorporateFaceauthResponse) GoString() string {
	return s.String()
}

func (s *QueryDidCorporateFaceauthResponse) SetReqMsgId(v string) *QueryDidCorporateFaceauthResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryDidCorporateFaceauthResponse) SetResultCode(v string) *QueryDidCorporateFaceauthResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryDidCorporateFaceauthResponse) SetResultMsg(v string) *QueryDidCorporateFaceauthResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryDidCorporateFaceauthResponse) SetDid(v string) *QueryDidCorporateFaceauthResponse {
	s.Did = &v
	return s
}

func (s *QueryDidCorporateFaceauthResponse) SetVcId(v string) *QueryDidCorporateFaceauthResponse {
	s.VcId = &v
	return s
}

type DeleteDidVcrepositoryVcRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 要删除的vc owner
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 带删除的VC列表
	VcList []*string `json:"vc_list,omitempty" xml:"vc_list,omitempty" require:"true" type:"Repeated"`
	// 场景码，找dis工作人员进行分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
}

func (s DeleteDidVcrepositoryVcRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDidVcrepositoryVcRequest) GoString() string {
	return s.String()
}

func (s *DeleteDidVcrepositoryVcRequest) SetAuthToken(v string) *DeleteDidVcrepositoryVcRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteDidVcrepositoryVcRequest) SetProductInstanceId(v string) *DeleteDidVcrepositoryVcRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *DeleteDidVcrepositoryVcRequest) SetDid(v string) *DeleteDidVcrepositoryVcRequest {
	s.Did = &v
	return s
}

func (s *DeleteDidVcrepositoryVcRequest) SetVcList(v []*string) *DeleteDidVcrepositoryVcRequest {
	s.VcList = v
	return s
}

func (s *DeleteDidVcrepositoryVcRequest) SetBizCode(v string) *DeleteDidVcrepositoryVcRequest {
	s.BizCode = &v
	return s
}

type DeleteDidVcrepositoryVcResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s DeleteDidVcrepositoryVcResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDidVcrepositoryVcResponse) GoString() string {
	return s.String()
}

func (s *DeleteDidVcrepositoryVcResponse) SetReqMsgId(v string) *DeleteDidVcrepositoryVcResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteDidVcrepositoryVcResponse) SetResultCode(v string) *DeleteDidVcrepositoryVcResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteDidVcrepositoryVcResponse) SetResultMsg(v string) *DeleteDidVcrepositoryVcResponse {
	s.ResultMsg = &v
	return s
}

type StartDidZkpverifiableclaimProofRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 场景码，找dis工作人员进行分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
	// vc对应的授予者
	Subject *string `json:"subject,omitempty" xml:"subject,omitempty" require:"true"`
	// vc原文
	Vc *string `json:"vc,omitempty" xml:"vc,omitempty" require:"true"`
	// zkp证明生成信息
	ZkpInfo []*DidZKPInfo `json:"zkp_info,omitempty" xml:"zkp_info,omitempty" require:"true" type:"Repeated"`
}

func (s StartDidZkpverifiableclaimProofRequest) String() string {
	return tea.Prettify(s)
}

func (s StartDidZkpverifiableclaimProofRequest) GoString() string {
	return s.String()
}

func (s *StartDidZkpverifiableclaimProofRequest) SetAuthToken(v string) *StartDidZkpverifiableclaimProofRequest {
	s.AuthToken = &v
	return s
}

func (s *StartDidZkpverifiableclaimProofRequest) SetProductInstanceId(v string) *StartDidZkpverifiableclaimProofRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *StartDidZkpverifiableclaimProofRequest) SetBizCode(v string) *StartDidZkpverifiableclaimProofRequest {
	s.BizCode = &v
	return s
}

func (s *StartDidZkpverifiableclaimProofRequest) SetSubject(v string) *StartDidZkpverifiableclaimProofRequest {
	s.Subject = &v
	return s
}

func (s *StartDidZkpverifiableclaimProofRequest) SetVc(v string) *StartDidZkpverifiableclaimProofRequest {
	s.Vc = &v
	return s
}

func (s *StartDidZkpverifiableclaimProofRequest) SetZkpInfo(v []*DidZKPInfo) *StartDidZkpverifiableclaimProofRequest {
	s.ZkpInfo = v
	return s
}

type StartDidZkpverifiableclaimProofResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 替换为zkp证明的VC
	ZkpVc *string `json:"zkp_vc,omitempty" xml:"zkp_vc,omitempty"`
}

func (s StartDidZkpverifiableclaimProofResponse) String() string {
	return tea.Prettify(s)
}

func (s StartDidZkpverifiableclaimProofResponse) GoString() string {
	return s.String()
}

func (s *StartDidZkpverifiableclaimProofResponse) SetReqMsgId(v string) *StartDidZkpverifiableclaimProofResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartDidZkpverifiableclaimProofResponse) SetResultCode(v string) *StartDidZkpverifiableclaimProofResponse {
	s.ResultCode = &v
	return s
}

func (s *StartDidZkpverifiableclaimProofResponse) SetResultMsg(v string) *StartDidZkpverifiableclaimProofResponse {
	s.ResultMsg = &v
	return s
}

func (s *StartDidZkpverifiableclaimProofResponse) SetZkpVc(v string) *StartDidZkpverifiableclaimProofResponse {
	s.ZkpVc = &v
	return s
}

type VerifyDidZkpverifiableclaimProofRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 场景码，找dis工作人员进行分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
	// 包含ZKP Proof的可验证声明
	Vc *string `json:"vc,omitempty" xml:"vc,omitempty" require:"true"`
	// ZKP验证信息
	VerifyZkpProof []*DidZKPInfo `json:"verify_zkp_proof,omitempty" xml:"verify_zkp_proof,omitempty" require:"true" type:"Repeated"`
}

func (s VerifyDidZkpverifiableclaimProofRequest) String() string {
	return tea.Prettify(s)
}

func (s VerifyDidZkpverifiableclaimProofRequest) GoString() string {
	return s.String()
}

func (s *VerifyDidZkpverifiableclaimProofRequest) SetAuthToken(v string) *VerifyDidZkpverifiableclaimProofRequest {
	s.AuthToken = &v
	return s
}

func (s *VerifyDidZkpverifiableclaimProofRequest) SetProductInstanceId(v string) *VerifyDidZkpverifiableclaimProofRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *VerifyDidZkpverifiableclaimProofRequest) SetBizCode(v string) *VerifyDidZkpverifiableclaimProofRequest {
	s.BizCode = &v
	return s
}

func (s *VerifyDidZkpverifiableclaimProofRequest) SetVc(v string) *VerifyDidZkpverifiableclaimProofRequest {
	s.Vc = &v
	return s
}

func (s *VerifyDidZkpverifiableclaimProofRequest) SetVerifyZkpProof(v []*DidZKPInfo) *VerifyDidZkpverifiableclaimProofRequest {
	s.VerifyZkpProof = v
	return s
}

type VerifyDidZkpverifiableclaimProofResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s VerifyDidZkpverifiableclaimProofResponse) String() string {
	return tea.Prettify(s)
}

func (s VerifyDidZkpverifiableclaimProofResponse) GoString() string {
	return s.String()
}

func (s *VerifyDidZkpverifiableclaimProofResponse) SetReqMsgId(v string) *VerifyDidZkpverifiableclaimProofResponse {
	s.ReqMsgId = &v
	return s
}

func (s *VerifyDidZkpverifiableclaimProofResponse) SetResultCode(v string) *VerifyDidZkpverifiableclaimProofResponse {
	s.ResultCode = &v
	return s
}

func (s *VerifyDidZkpverifiableclaimProofResponse) SetResultMsg(v string) *VerifyDidZkpverifiableclaimProofResponse {
	s.ResultMsg = &v
	return s
}

type CreateDidPersonFacevrfRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 场景码，通常针对性特别支持，或者防止多调用方使用相同租户身份的情况下用bizCode做区分。
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
	// 请求的唯一标识，通常为32字符宽度的字符串内容，也可以只用UUID，此参数通常用来支持幂等，或者排查问题，调用方可以使用业务流水号。
	BizId *string `json:"biz_id,omitempty" xml:"biz_id,omitempty" require:"true"`
	// 姓名字段，真实姓名，不可包含空格等特殊字符。
	CertName *string `json:"cert_name,omitempty" xml:"cert_name,omitempty" require:"true"`
	// 证件号码，要求带有字母的情况使用大写字母。
	CertNo *string `json:"cert_no,omitempty" xml:"cert_no,omitempty" require:"true"`
	// 份信息来源类型，当前仅支持证件（CERT_INFO）
	IdentityType *string `json:"identity_type,omitempty" xml:"identity_type,omitempty" require:"true"`
	// 证件类型，当前仅支持身份证（IDENTITY_CARD）
	CertType *string `json:"cert_type,omitempty" xml:"cert_type,omitempty" require:"true"`
	// metainfo 环境参数，需要通过客户端 SDK 获取
	MetaInfo *string `json:"meta_info,omitempty" xml:"meta_info,omitempty" require:"true"`
	// OCR 能力对两个扩展参数，map的json格式：tradeParam_needOcr=true tradeParam_verifyStageCheckUsable=true
	ExternParam *string `json:"extern_param,omitempty" xml:"extern_param,omitempty"`
	// DID未来创建锚定的用户身份唯一关联，如果不设置此参数则使用二要素拼接后的哈希值 SHA256("张三"+"210282*****X") 来进行关联创建DID，并且支持幂等。
	Uid *string `json:"uid,omitempty" xml:"uid,omitempty"`
}

func (s CreateDidPersonFacevrfRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDidPersonFacevrfRequest) GoString() string {
	return s.String()
}

func (s *CreateDidPersonFacevrfRequest) SetAuthToken(v string) *CreateDidPersonFacevrfRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateDidPersonFacevrfRequest) SetProductInstanceId(v string) *CreateDidPersonFacevrfRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateDidPersonFacevrfRequest) SetBizCode(v string) *CreateDidPersonFacevrfRequest {
	s.BizCode = &v
	return s
}

func (s *CreateDidPersonFacevrfRequest) SetBizId(v string) *CreateDidPersonFacevrfRequest {
	s.BizId = &v
	return s
}

func (s *CreateDidPersonFacevrfRequest) SetCertName(v string) *CreateDidPersonFacevrfRequest {
	s.CertName = &v
	return s
}

func (s *CreateDidPersonFacevrfRequest) SetCertNo(v string) *CreateDidPersonFacevrfRequest {
	s.CertNo = &v
	return s
}

func (s *CreateDidPersonFacevrfRequest) SetIdentityType(v string) *CreateDidPersonFacevrfRequest {
	s.IdentityType = &v
	return s
}

func (s *CreateDidPersonFacevrfRequest) SetCertType(v string) *CreateDidPersonFacevrfRequest {
	s.CertType = &v
	return s
}

func (s *CreateDidPersonFacevrfRequest) SetMetaInfo(v string) *CreateDidPersonFacevrfRequest {
	s.MetaInfo = &v
	return s
}

func (s *CreateDidPersonFacevrfRequest) SetExternParam(v string) *CreateDidPersonFacevrfRequest {
	s.ExternParam = &v
	return s
}

func (s *CreateDidPersonFacevrfRequest) SetUid(v string) *CreateDidPersonFacevrfRequest {
	s.Uid = &v
	return s
}

type CreateDidPersonFacevrfResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 可信实人认证的唯一标识，返回后用于移动端进行唤起刷脸，也用于后续查询认证结果的关键入参。
	CertifyId *string `json:"certify_id,omitempty" xml:"certify_id,omitempty"`
}

func (s CreateDidPersonFacevrfResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDidPersonFacevrfResponse) GoString() string {
	return s.String()
}

func (s *CreateDidPersonFacevrfResponse) SetReqMsgId(v string) *CreateDidPersonFacevrfResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateDidPersonFacevrfResponse) SetResultCode(v string) *CreateDidPersonFacevrfResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateDidPersonFacevrfResponse) SetResultMsg(v string) *CreateDidPersonFacevrfResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateDidPersonFacevrfResponse) SetCertifyId(v string) *CreateDidPersonFacevrfResponse {
	s.CertifyId = &v
	return s
}

type QueryDidPersonFacevrfRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 可能由于租户ID被多个调用方公用时候，使用bizCode作为隔离区分。
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
	// 可信实人认证的唯一标识，用于核心查询认证结果的唯一标识。
	CertifyId *string `json:"certify_id,omitempty" xml:"certify_id,omitempty" require:"true"`
	// 认证材料（人脸图像，如移动端采集认证后获得的人脸图像）的哈希
	MaterialHash *string `json:"material_hash,omitempty" xml:"material_hash,omitempty"`
	// 请求的唯一标识，通常为32字符宽度的字符串内容，也可以只用UUID，此参数通常用来支持幂等，或者排查问题，调用方可以使用业务流水号。
	// 与创建申请认证的接口的bizId目前不强校验一致性。
	BizId *string `json:"biz_id,omitempty" xml:"biz_id,omitempty" require:"true"`
}

func (s QueryDidPersonFacevrfRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDidPersonFacevrfRequest) GoString() string {
	return s.String()
}

func (s *QueryDidPersonFacevrfRequest) SetAuthToken(v string) *QueryDidPersonFacevrfRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryDidPersonFacevrfRequest) SetProductInstanceId(v string) *QueryDidPersonFacevrfRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryDidPersonFacevrfRequest) SetBizCode(v string) *QueryDidPersonFacevrfRequest {
	s.BizCode = &v
	return s
}

func (s *QueryDidPersonFacevrfRequest) SetCertifyId(v string) *QueryDidPersonFacevrfRequest {
	s.CertifyId = &v
	return s
}

func (s *QueryDidPersonFacevrfRequest) SetMaterialHash(v string) *QueryDidPersonFacevrfRequest {
	s.MaterialHash = &v
	return s
}

func (s *QueryDidPersonFacevrfRequest) SetBizId(v string) *QueryDidPersonFacevrfRequest {
	s.BizId = &v
	return s
}

type QueryDidPersonFacevrfResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 认证是否通过。
	Passed *string `json:"passed,omitempty" xml:"passed,omitempty"`
	// 认证材料哈希是否匹配。 如果有传入材料哈希参数，匹配则返回值为 T；不匹配则返回值为 F。如果无材料哈希参数传入，则返回空。
	MaterialMatched *string `json:"material_matched,omitempty" xml:"material_matched,omitempty"`
	// 身份信息，目前只有在ocr的场景下才有返回。
	// certName/certNo：本次认证通过的姓名和身份证；ocrInfo：本次OCR识别的结果，包含如下信息："address": 地址"nationality": 名族"num":身份证号码"sex":性别"name": 名称"birth": 生日"issue": 签发机关"endDate":到期日"startDate":发证日期；注意:认证通过的信息和OCR识别的信息可能不一致
	IdentityInfo *string `json:"identity_info,omitempty" xml:"identity_info,omitempty"`
	// 长度不超过128字符的分布式数字身份DID
	Did *string `json:"did,omitempty" xml:"did,omitempty"`
}

func (s QueryDidPersonFacevrfResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDidPersonFacevrfResponse) GoString() string {
	return s.String()
}

func (s *QueryDidPersonFacevrfResponse) SetReqMsgId(v string) *QueryDidPersonFacevrfResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryDidPersonFacevrfResponse) SetResultCode(v string) *QueryDidPersonFacevrfResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryDidPersonFacevrfResponse) SetResultMsg(v string) *QueryDidPersonFacevrfResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryDidPersonFacevrfResponse) SetPassed(v string) *QueryDidPersonFacevrfResponse {
	s.Passed = &v
	return s
}

func (s *QueryDidPersonFacevrfResponse) SetMaterialMatched(v string) *QueryDidPersonFacevrfResponse {
	s.MaterialMatched = &v
	return s
}

func (s *QueryDidPersonFacevrfResponse) SetIdentityInfo(v string) *QueryDidPersonFacevrfResponse {
	s.IdentityInfo = &v
	return s
}

func (s *QueryDidPersonFacevrfResponse) SetDid(v string) *QueryDidPersonFacevrfResponse {
	s.Did = &v
	return s
}

type CreateDidPersonFacevrfminiappRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 场景码，通常针对性特别支持，或者防止多调用方使用相同租户身份的情况下用bizCode做区分。
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
	// 请求的唯一标识，通常为32字符宽度的字符串内容，也可以只用UUID，此参数通常用来支持幂等，或者排查问题，调用方可以使用业务流水号。
	BizId *string `json:"biz_id,omitempty" xml:"biz_id,omitempty" require:"true"`
	// 姓名字段，真实姓名，不可包含空格等特殊字符。
	CertName *string `json:"cert_name,omitempty" xml:"cert_name,omitempty" require:"true"`
	// 证件号码，要求带有字母的情况使用大写字母。
	CertNo *string `json:"cert_no,omitempty" xml:"cert_no,omitempty" require:"true"`
	// 身份信息来源类型，当前仅支持证件（CERT_INFO）
	IdentityType *string `json:"identity_type,omitempty" xml:"identity_type,omitempty" require:"true"`
	// 证件类型，当前仅支持身份证（IDENTITY_CARD）
	CertType *string `json:"cert_type,omitempty" xml:"cert_type,omitempty" require:"true"`
	// 认证结束回跳地址
	ReturnUrl *string `json:"return_url,omitempty" xml:"return_url,omitempty" require:"true"`
	// DID未来创建锚定的用户身份唯一关联，如果不设置此参数则使用二要素拼接后的哈希值 SHA256("张三"+"210282*****X") 来进行关联创建DID，并且支持幂等。
	Uid *string `json:"uid,omitempty" xml:"uid,omitempty"`
	// 刷脸类型，目前只支持FACE_SDK、FACE
	FaceType *string `json:"face_type,omitempty" xml:"face_type,omitempty"`
}

func (s CreateDidPersonFacevrfminiappRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDidPersonFacevrfminiappRequest) GoString() string {
	return s.String()
}

func (s *CreateDidPersonFacevrfminiappRequest) SetAuthToken(v string) *CreateDidPersonFacevrfminiappRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateDidPersonFacevrfminiappRequest) SetProductInstanceId(v string) *CreateDidPersonFacevrfminiappRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateDidPersonFacevrfminiappRequest) SetBizCode(v string) *CreateDidPersonFacevrfminiappRequest {
	s.BizCode = &v
	return s
}

func (s *CreateDidPersonFacevrfminiappRequest) SetBizId(v string) *CreateDidPersonFacevrfminiappRequest {
	s.BizId = &v
	return s
}

func (s *CreateDidPersonFacevrfminiappRequest) SetCertName(v string) *CreateDidPersonFacevrfminiappRequest {
	s.CertName = &v
	return s
}

func (s *CreateDidPersonFacevrfminiappRequest) SetCertNo(v string) *CreateDidPersonFacevrfminiappRequest {
	s.CertNo = &v
	return s
}

func (s *CreateDidPersonFacevrfminiappRequest) SetIdentityType(v string) *CreateDidPersonFacevrfminiappRequest {
	s.IdentityType = &v
	return s
}

func (s *CreateDidPersonFacevrfminiappRequest) SetCertType(v string) *CreateDidPersonFacevrfminiappRequest {
	s.CertType = &v
	return s
}

func (s *CreateDidPersonFacevrfminiappRequest) SetReturnUrl(v string) *CreateDidPersonFacevrfminiappRequest {
	s.ReturnUrl = &v
	return s
}

func (s *CreateDidPersonFacevrfminiappRequest) SetUid(v string) *CreateDidPersonFacevrfminiappRequest {
	s.Uid = &v
	return s
}

func (s *CreateDidPersonFacevrfminiappRequest) SetFaceType(v string) *CreateDidPersonFacevrfminiappRequest {
	s.FaceType = &v
	return s
}

type CreateDidPersonFacevrfminiappResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 查询刷脸结果唯一标识
	CertifyId *string `json:"certify_id,omitempty" xml:"certify_id,omitempty"`
	// 认证流程入口 URL。
	CertifyUrl *string `json:"certify_url,omitempty" xml:"certify_url,omitempty"`
}

func (s CreateDidPersonFacevrfminiappResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDidPersonFacevrfminiappResponse) GoString() string {
	return s.String()
}

func (s *CreateDidPersonFacevrfminiappResponse) SetReqMsgId(v string) *CreateDidPersonFacevrfminiappResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateDidPersonFacevrfminiappResponse) SetResultCode(v string) *CreateDidPersonFacevrfminiappResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateDidPersonFacevrfminiappResponse) SetResultMsg(v string) *CreateDidPersonFacevrfminiappResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateDidPersonFacevrfminiappResponse) SetCertifyId(v string) *CreateDidPersonFacevrfminiappResponse {
	s.CertifyId = &v
	return s
}

func (s *CreateDidPersonFacevrfminiappResponse) SetCertifyUrl(v string) *CreateDidPersonFacevrfminiappResponse {
	s.CertifyUrl = &v
	return s
}

type QueryDidPersonFacevrfminiappRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 可能由于租户ID被多个调用方公用时候，使用bizCode作为隔离区分。
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
	// 请求的唯一标识，通常为32字符宽度的字符串内容，也可以只用UUID，此参数通常用来支持幂等，或者排查问题，调用方可以使用业务流水号。 与创建申请认证的接口的bizId目前不强校验一致性。
	BizId *string `json:"biz_id,omitempty" xml:"biz_id,omitempty" require:"true"`
	// 可信实人认证的唯一标识，用于核心查询认证结果的唯一标识。
	CertifyId *string `json:"certify_id,omitempty" xml:"certify_id,omitempty" require:"true"`
}

func (s QueryDidPersonFacevrfminiappRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDidPersonFacevrfminiappRequest) GoString() string {
	return s.String()
}

func (s *QueryDidPersonFacevrfminiappRequest) SetAuthToken(v string) *QueryDidPersonFacevrfminiappRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryDidPersonFacevrfminiappRequest) SetProductInstanceId(v string) *QueryDidPersonFacevrfminiappRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryDidPersonFacevrfminiappRequest) SetBizCode(v string) *QueryDidPersonFacevrfminiappRequest {
	s.BizCode = &v
	return s
}

func (s *QueryDidPersonFacevrfminiappRequest) SetBizId(v string) *QueryDidPersonFacevrfminiappRequest {
	s.BizId = &v
	return s
}

func (s *QueryDidPersonFacevrfminiappRequest) SetCertifyId(v string) *QueryDidPersonFacevrfminiappRequest {
	s.CertifyId = &v
	return s
}

type QueryDidPersonFacevrfminiappResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 认证是否通过。
	Passed *string `json:"passed,omitempty" xml:"passed,omitempty"`
	// 长度不超过128字符的分布式数字身份DID
	Did *string `json:"did,omitempty" xml:"did,omitempty"`
}

func (s QueryDidPersonFacevrfminiappResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDidPersonFacevrfminiappResponse) GoString() string {
	return s.String()
}

func (s *QueryDidPersonFacevrfminiappResponse) SetReqMsgId(v string) *QueryDidPersonFacevrfminiappResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryDidPersonFacevrfminiappResponse) SetResultCode(v string) *QueryDidPersonFacevrfminiappResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryDidPersonFacevrfminiappResponse) SetResultMsg(v string) *QueryDidPersonFacevrfminiappResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryDidPersonFacevrfminiappResponse) SetPassed(v string) *QueryDidPersonFacevrfminiappResponse {
	s.Passed = &v
	return s
}

func (s *QueryDidPersonFacevrfminiappResponse) SetDid(v string) *QueryDidPersonFacevrfminiappResponse {
	s.Did = &v
	return s
}

type StartDidVcrepositoryIssuenewocpRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 配置此列表，则说明需要DIS对证书声明内容加密处理，并且控制访问权限，此列表为初始配置的did名单，拥有对此颁发证书的读取权限。 如果不配置此列表，则DIS默认将明文存储此证书，任何did都可以访问此证书声明内容。
	AuthDidList []*string `json:"auth_did_list,omitempty" xml:"auth_did_list,omitempty" type:"Repeated"`
	// 颁发证书声明的原始声明内容，其中claim字段为json格式
	//
	BareClaim *BareClaim `json:"bare_claim,omitempty" xml:"bare_claim,omitempty" require:"true"`
	// 过期时间，如果用不过期可以设置为：-1。 注意如果证书过期，则无法再通过VC Repository读取访问此证书内容。
	Expire *int64 `json:"expire,omitempty" xml:"expire,omitempty" require:"true"`
	// 颁发证书方，该did必须为调用者自己或者自己代理的did。
	//
	Issuer *string `json:"issuer,omitempty" xml:"issuer,omitempty" require:"true"`
	// 1 - 指定id将被按照verifiable_claim_id = "vc:mychain:" + SHA256(Joiner.on(":").join(subject, verifiable_claim_id.substring(0,50)))+verifiable_claim_id.substring(50);此表达式参与SHA256的 verifiable_claim_id 为用户指定的参数。
	SpecifiedClaimIdType *int64 `json:"specified_claim_id_type,omitempty" xml:"specified_claim_id_type,omitempty"`
	// 颁发证书的目标did，此目标did将拥有存储到VC Repository的数据管控权限，比如：授权给其它did读取此证书的权限。
	Subject *string `json:"subject,omitempty" xml:"subject,omitempty" require:"true"`
	// 通过层级定义的证书类型说明，在使用VC Repository的情况下默认为：["VerifiableCredential","DelegateVCRepository"]。 如果用户希望通过type来过滤读取证书VC，那么可以在此列表后面追加层次定义说明，方便后续读取证书在VC Repository进行过滤。（如果读取方已知verifiable_claim_id可以直接过滤读取）
	Type []*string `json:"type,omitempty" xml:"type,omitempty" type:"Repeated"`
	// 如果指定，最终会使用此id会参与生成的证书的verifiable_claim_id，但是调用方需要保证设置值的唯一性，重复的id会引起最终verifiable_claim_id重复，导致被拒绝颁发证书。 如果不指定，则会随机生成一个规范的verifiable_claim_id。 verifiable_claim_id = "vc:mychain:" + SHA256(Joiner.on(":").join(subject, verifiable_claim_id)); 此表达式参与SHA256的 verifiable_claim_id 为用户指定的参数。
	VerifiableClaimId *string `json:"verifiable_claim_id,omitempty" xml:"verifiable_claim_id,omitempty"`
	// 验证声明状态方式，目前只支持直接通过声明id上链查找状态方式，后续会支持更多方式
	VerifyStatusType *string `json:"verify_status_type,omitempty" xml:"verify_status_type,omitempty"`
	// 场景码，找dis工作人员进行分配
	//
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
}

func (s StartDidVcrepositoryIssuenewocpRequest) String() string {
	return tea.Prettify(s)
}

func (s StartDidVcrepositoryIssuenewocpRequest) GoString() string {
	return s.String()
}

func (s *StartDidVcrepositoryIssuenewocpRequest) SetAuthToken(v string) *StartDidVcrepositoryIssuenewocpRequest {
	s.AuthToken = &v
	return s
}

func (s *StartDidVcrepositoryIssuenewocpRequest) SetProductInstanceId(v string) *StartDidVcrepositoryIssuenewocpRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *StartDidVcrepositoryIssuenewocpRequest) SetAuthDidList(v []*string) *StartDidVcrepositoryIssuenewocpRequest {
	s.AuthDidList = v
	return s
}

func (s *StartDidVcrepositoryIssuenewocpRequest) SetBareClaim(v *BareClaim) *StartDidVcrepositoryIssuenewocpRequest {
	s.BareClaim = v
	return s
}

func (s *StartDidVcrepositoryIssuenewocpRequest) SetExpire(v int64) *StartDidVcrepositoryIssuenewocpRequest {
	s.Expire = &v
	return s
}

func (s *StartDidVcrepositoryIssuenewocpRequest) SetIssuer(v string) *StartDidVcrepositoryIssuenewocpRequest {
	s.Issuer = &v
	return s
}

func (s *StartDidVcrepositoryIssuenewocpRequest) SetSpecifiedClaimIdType(v int64) *StartDidVcrepositoryIssuenewocpRequest {
	s.SpecifiedClaimIdType = &v
	return s
}

func (s *StartDidVcrepositoryIssuenewocpRequest) SetSubject(v string) *StartDidVcrepositoryIssuenewocpRequest {
	s.Subject = &v
	return s
}

func (s *StartDidVcrepositoryIssuenewocpRequest) SetType(v []*string) *StartDidVcrepositoryIssuenewocpRequest {
	s.Type = v
	return s
}

func (s *StartDidVcrepositoryIssuenewocpRequest) SetVerifiableClaimId(v string) *StartDidVcrepositoryIssuenewocpRequest {
	s.VerifiableClaimId = &v
	return s
}

func (s *StartDidVcrepositoryIssuenewocpRequest) SetVerifyStatusType(v string) *StartDidVcrepositoryIssuenewocpRequest {
	s.VerifyStatusType = &v
	return s
}

func (s *StartDidVcrepositoryIssuenewocpRequest) SetBizCode(v string) *StartDidVcrepositoryIssuenewocpRequest {
	s.BizCode = &v
	return s
}

type StartDidVcrepositoryIssuenewocpResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 可验证声明的完整声明 {"content":{"verion":"0.7.0","issuer":"xxxx","subject":"xxxx","expire":1530735444,"issucanceDate":1530735000,"id":"XXXX","claim":{//用户自定义},"status":{"type":"XXXX","id":"XXXXX"}},"proof":{"type":"ecdsa","created":"2018-06-18T21:19:10Z","verificationMethod":"XXXX","signatureValue":"XXXXX"}}
	VerifiableClaimContent *string `json:"verifiable_claim_content,omitempty" xml:"verifiable_claim_content,omitempty"`
	// 颁发的证书唯一id，颁发成功后返回。
	//
	VerifiableClaimId *string `json:"verifiable_claim_id,omitempty" xml:"verifiable_claim_id,omitempty"`
}

func (s StartDidVcrepositoryIssuenewocpResponse) String() string {
	return tea.Prettify(s)
}

func (s StartDidVcrepositoryIssuenewocpResponse) GoString() string {
	return s.String()
}

func (s *StartDidVcrepositoryIssuenewocpResponse) SetReqMsgId(v string) *StartDidVcrepositoryIssuenewocpResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartDidVcrepositoryIssuenewocpResponse) SetResultCode(v string) *StartDidVcrepositoryIssuenewocpResponse {
	s.ResultCode = &v
	return s
}

func (s *StartDidVcrepositoryIssuenewocpResponse) SetResultMsg(v string) *StartDidVcrepositoryIssuenewocpResponse {
	s.ResultMsg = &v
	return s
}

func (s *StartDidVcrepositoryIssuenewocpResponse) SetVerifiableClaimContent(v string) *StartDidVcrepositoryIssuenewocpResponse {
	s.VerifiableClaimContent = &v
	return s
}

func (s *StartDidVcrepositoryIssuenewocpResponse) SetVerifiableClaimId(v string) *StartDidVcrepositoryIssuenewocpResponse {
	s.VerifiableClaimId = &v
	return s
}

type StartDidVerifiableclaimIssurenewocpRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 颁发证书声明
	BareClaim *BareClaim `json:"bare_claim,omitempty" xml:"bare_claim,omitempty" require:"true"`
	// 过期时间
	Expire *int64 `json:"expire,omitempty" xml:"expire,omitempty" require:"true"`
	// 由谁来颁发，该did必须为调用者自己或者自己代理的did
	Issuer *string `json:"issuer,omitempty" xml:"issuer,omitempty" require:"true"`
	// 为哪个did颁发
	Subject *string `json:"subject,omitempty" xml:"subject,omitempty" require:"true"`
	// 验证声明类型，目前默认VerifiableCredential
	Type []*string `json:"type,omitempty" xml:"type,omitempty" type:"Repeated"`
	// 验证声明状态方式，目前只支持直接通过声明id上链查找状态方式，后续会支持更多方式
	VerifyStatusType *string `json:"verify_status_type,omitempty" xml:"verify_status_type,omitempty"`
	// 场景码，找dis工作人员进行分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
}

func (s StartDidVerifiableclaimIssurenewocpRequest) String() string {
	return tea.Prettify(s)
}

func (s StartDidVerifiableclaimIssurenewocpRequest) GoString() string {
	return s.String()
}

func (s *StartDidVerifiableclaimIssurenewocpRequest) SetAuthToken(v string) *StartDidVerifiableclaimIssurenewocpRequest {
	s.AuthToken = &v
	return s
}

func (s *StartDidVerifiableclaimIssurenewocpRequest) SetProductInstanceId(v string) *StartDidVerifiableclaimIssurenewocpRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *StartDidVerifiableclaimIssurenewocpRequest) SetBareClaim(v *BareClaim) *StartDidVerifiableclaimIssurenewocpRequest {
	s.BareClaim = v
	return s
}

func (s *StartDidVerifiableclaimIssurenewocpRequest) SetExpire(v int64) *StartDidVerifiableclaimIssurenewocpRequest {
	s.Expire = &v
	return s
}

func (s *StartDidVerifiableclaimIssurenewocpRequest) SetIssuer(v string) *StartDidVerifiableclaimIssurenewocpRequest {
	s.Issuer = &v
	return s
}

func (s *StartDidVerifiableclaimIssurenewocpRequest) SetSubject(v string) *StartDidVerifiableclaimIssurenewocpRequest {
	s.Subject = &v
	return s
}

func (s *StartDidVerifiableclaimIssurenewocpRequest) SetType(v []*string) *StartDidVerifiableclaimIssurenewocpRequest {
	s.Type = v
	return s
}

func (s *StartDidVerifiableclaimIssurenewocpRequest) SetVerifyStatusType(v string) *StartDidVerifiableclaimIssurenewocpRequest {
	s.VerifyStatusType = &v
	return s
}

func (s *StartDidVerifiableclaimIssurenewocpRequest) SetBizCode(v string) *StartDidVerifiableclaimIssurenewocpRequest {
	s.BizCode = &v
	return s
}

type StartDidVerifiableclaimIssurenewocpResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 可验证声明的完整声明 {"content":{"verion":"0.7.0","issuer":"xxxx","subject":"xxxx","expire":1530735444,"issucanceDate":1530735000,"id":"XXXX","claim":{//用户自定义},"status":{"type":"XXXX","id":"XXXXX"}},"proof":{"type":"ecdsa","created":"2018-06-18T21:19:10Z","verificationMethod":"XXXX","signatureValue":"XXXXX"}}
	VerifiableClaimContent *string `json:"verifiable_claim_content,omitempty" xml:"verifiable_claim_content,omitempty"`
	// 声明id
	VerifiableClaimId *string `json:"verifiable_claim_id,omitempty" xml:"verifiable_claim_id,omitempty"`
}

func (s StartDidVerifiableclaimIssurenewocpResponse) String() string {
	return tea.Prettify(s)
}

func (s StartDidVerifiableclaimIssurenewocpResponse) GoString() string {
	return s.String()
}

func (s *StartDidVerifiableclaimIssurenewocpResponse) SetReqMsgId(v string) *StartDidVerifiableclaimIssurenewocpResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartDidVerifiableclaimIssurenewocpResponse) SetResultCode(v string) *StartDidVerifiableclaimIssurenewocpResponse {
	s.ResultCode = &v
	return s
}

func (s *StartDidVerifiableclaimIssurenewocpResponse) SetResultMsg(v string) *StartDidVerifiableclaimIssurenewocpResponse {
	s.ResultMsg = &v
	return s
}

func (s *StartDidVerifiableclaimIssurenewocpResponse) SetVerifiableClaimContent(v string) *StartDidVerifiableclaimIssurenewocpResponse {
	s.VerifiableClaimContent = &v
	return s
}

func (s *StartDidVerifiableclaimIssurenewocpResponse) SetVerifiableClaimId(v string) *StartDidVerifiableclaimIssurenewocpResponse {
	s.VerifiableClaimId = &v
	return s
}

type CreateDidPersonWithtwometanewocpRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 身份证号码
	CertNo *string `json:"cert_no,omitempty" xml:"cert_no,omitempty" require:"true"`
	// 扩展字段
	ExtensionInfo *string `json:"extension_info,omitempty" xml:"extension_info,omitempty"`
	// 姓名
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 名称
	OwnerName *string `json:"owner_name,omitempty" xml:"owner_name,omitempty"`
	// 自定义个人唯一id，个人在自有模式下的唯一号，调用者需要保证其唯一性
	OwnerUid *string `json:"owner_uid,omitempty" xml:"owner_uid,omitempty" require:"true"`
	// 场景码，找dis工作人员进行分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
}

func (s CreateDidPersonWithtwometanewocpRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDidPersonWithtwometanewocpRequest) GoString() string {
	return s.String()
}

func (s *CreateDidPersonWithtwometanewocpRequest) SetAuthToken(v string) *CreateDidPersonWithtwometanewocpRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateDidPersonWithtwometanewocpRequest) SetProductInstanceId(v string) *CreateDidPersonWithtwometanewocpRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateDidPersonWithtwometanewocpRequest) SetCertNo(v string) *CreateDidPersonWithtwometanewocpRequest {
	s.CertNo = &v
	return s
}

func (s *CreateDidPersonWithtwometanewocpRequest) SetExtensionInfo(v string) *CreateDidPersonWithtwometanewocpRequest {
	s.ExtensionInfo = &v
	return s
}

func (s *CreateDidPersonWithtwometanewocpRequest) SetName(v string) *CreateDidPersonWithtwometanewocpRequest {
	s.Name = &v
	return s
}

func (s *CreateDidPersonWithtwometanewocpRequest) SetOwnerName(v string) *CreateDidPersonWithtwometanewocpRequest {
	s.OwnerName = &v
	return s
}

func (s *CreateDidPersonWithtwometanewocpRequest) SetOwnerUid(v string) *CreateDidPersonWithtwometanewocpRequest {
	s.OwnerUid = &v
	return s
}

func (s *CreateDidPersonWithtwometanewocpRequest) SetBizCode(v string) *CreateDidPersonWithtwometanewocpRequest {
	s.BizCode = &v
	return s
}

type CreateDidPersonWithtwometanewocpResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 生成的did字符串
	Did *string `json:"did,omitempty" xml:"did,omitempty"`
	// 颁发的vcId
	VcId *string `json:"vc_id,omitempty" xml:"vc_id,omitempty"`
}

func (s CreateDidPersonWithtwometanewocpResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDidPersonWithtwometanewocpResponse) GoString() string {
	return s.String()
}

func (s *CreateDidPersonWithtwometanewocpResponse) SetReqMsgId(v string) *CreateDidPersonWithtwometanewocpResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateDidPersonWithtwometanewocpResponse) SetResultCode(v string) *CreateDidPersonWithtwometanewocpResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateDidPersonWithtwometanewocpResponse) SetResultMsg(v string) *CreateDidPersonWithtwometanewocpResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateDidPersonWithtwometanewocpResponse) SetDid(v string) *CreateDidPersonWithtwometanewocpResponse {
	s.Did = &v
	return s
}

func (s *CreateDidPersonWithtwometanewocpResponse) SetVcId(v string) *CreateDidPersonWithtwometanewocpResponse {
	s.VcId = &v
	return s
}

type CreateDidPersonWiththreemetanewocpRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 身份证号码
	CertNo *string `json:"cert_no,omitempty" xml:"cert_no,omitempty" require:"true"`
	// 扩展字段
	ExtensionInfo *string `json:"extension_info,omitempty" xml:"extension_info,omitempty"`
	// 手机号码
	Mobile *string `json:"mobile,omitempty" xml:"mobile,omitempty" require:"true"`
	// 姓名
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 名称
	OwnerName *string `json:"owner_name,omitempty" xml:"owner_name,omitempty"`
	// 自定义个人唯一id，个人在自有模式下的唯一号，调用者需要保证其唯一性
	OwnerUid *string `json:"owner_uid,omitempty" xml:"owner_uid,omitempty" require:"true"`
	// 场景码，找dis工作人员进行分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
}

func (s CreateDidPersonWiththreemetanewocpRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDidPersonWiththreemetanewocpRequest) GoString() string {
	return s.String()
}

func (s *CreateDidPersonWiththreemetanewocpRequest) SetAuthToken(v string) *CreateDidPersonWiththreemetanewocpRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateDidPersonWiththreemetanewocpRequest) SetProductInstanceId(v string) *CreateDidPersonWiththreemetanewocpRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateDidPersonWiththreemetanewocpRequest) SetCertNo(v string) *CreateDidPersonWiththreemetanewocpRequest {
	s.CertNo = &v
	return s
}

func (s *CreateDidPersonWiththreemetanewocpRequest) SetExtensionInfo(v string) *CreateDidPersonWiththreemetanewocpRequest {
	s.ExtensionInfo = &v
	return s
}

func (s *CreateDidPersonWiththreemetanewocpRequest) SetMobile(v string) *CreateDidPersonWiththreemetanewocpRequest {
	s.Mobile = &v
	return s
}

func (s *CreateDidPersonWiththreemetanewocpRequest) SetName(v string) *CreateDidPersonWiththreemetanewocpRequest {
	s.Name = &v
	return s
}

func (s *CreateDidPersonWiththreemetanewocpRequest) SetOwnerName(v string) *CreateDidPersonWiththreemetanewocpRequest {
	s.OwnerName = &v
	return s
}

func (s *CreateDidPersonWiththreemetanewocpRequest) SetOwnerUid(v string) *CreateDidPersonWiththreemetanewocpRequest {
	s.OwnerUid = &v
	return s
}

func (s *CreateDidPersonWiththreemetanewocpRequest) SetBizCode(v string) *CreateDidPersonWiththreemetanewocpRequest {
	s.BizCode = &v
	return s
}

type CreateDidPersonWiththreemetanewocpResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 生成的did字符串
	Did *string `json:"did,omitempty" xml:"did,omitempty"`
	// 颁发的vcId
	VcId *string `json:"vc_id,omitempty" xml:"vc_id,omitempty"`
}

func (s CreateDidPersonWiththreemetanewocpResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDidPersonWiththreemetanewocpResponse) GoString() string {
	return s.String()
}

func (s *CreateDidPersonWiththreemetanewocpResponse) SetReqMsgId(v string) *CreateDidPersonWiththreemetanewocpResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateDidPersonWiththreemetanewocpResponse) SetResultCode(v string) *CreateDidPersonWiththreemetanewocpResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateDidPersonWiththreemetanewocpResponse) SetResultMsg(v string) *CreateDidPersonWiththreemetanewocpResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateDidPersonWiththreemetanewocpResponse) SetDid(v string) *CreateDidPersonWiththreemetanewocpResponse {
	s.Did = &v
	return s
}

func (s *CreateDidPersonWiththreemetanewocpResponse) SetVcId(v string) *CreateDidPersonWiththreemetanewocpResponse {
	s.VcId = &v
	return s
}

type StartDidIdentificationFaceauthnewocpRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 认证类型,枚举值 PC_AUTH、APP_AUTH
	AuthType *string `json:"auth_type,omitempty" xml:"auth_type,omitempty" require:"true"`
	// 颁发证书的subject did
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 用户身份信息
	IdentityParam *IdentityParam `json:"identity_param,omitempty" xml:"identity_param,omitempty" require:"true"`
	// 认证接口回调路径，POST接口 请求示例： { "certifyId":"0242de204e1a2c3ed6ee5e21d8a57a4c", "did":"xxxxx","vcId":"xxxxx" }
	ReturnUrl *string `json:"return_url,omitempty" xml:"return_url,omitempty"`
	// 场景码，找dis工作人员进行分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
}

func (s StartDidIdentificationFaceauthnewocpRequest) String() string {
	return tea.Prettify(s)
}

func (s StartDidIdentificationFaceauthnewocpRequest) GoString() string {
	return s.String()
}

func (s *StartDidIdentificationFaceauthnewocpRequest) SetAuthToken(v string) *StartDidIdentificationFaceauthnewocpRequest {
	s.AuthToken = &v
	return s
}

func (s *StartDidIdentificationFaceauthnewocpRequest) SetProductInstanceId(v string) *StartDidIdentificationFaceauthnewocpRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *StartDidIdentificationFaceauthnewocpRequest) SetAuthType(v string) *StartDidIdentificationFaceauthnewocpRequest {
	s.AuthType = &v
	return s
}

func (s *StartDidIdentificationFaceauthnewocpRequest) SetDid(v string) *StartDidIdentificationFaceauthnewocpRequest {
	s.Did = &v
	return s
}

func (s *StartDidIdentificationFaceauthnewocpRequest) SetIdentityParam(v *IdentityParam) *StartDidIdentificationFaceauthnewocpRequest {
	s.IdentityParam = v
	return s
}

func (s *StartDidIdentificationFaceauthnewocpRequest) SetReturnUrl(v string) *StartDidIdentificationFaceauthnewocpRequest {
	s.ReturnUrl = &v
	return s
}

func (s *StartDidIdentificationFaceauthnewocpRequest) SetBizCode(v string) *StartDidIdentificationFaceauthnewocpRequest {
	s.BizCode = &v
	return s
}

type StartDidIdentificationFaceauthnewocpResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 认证ID
	CertifyId *string `json:"certify_id,omitempty" xml:"certify_id,omitempty"`
	// 二维码URL，用户支付宝扫一扫实人认证
	CertifyUrl *string `json:"certify_url,omitempty" xml:"certify_url,omitempty"`
}

func (s StartDidIdentificationFaceauthnewocpResponse) String() string {
	return tea.Prettify(s)
}

func (s StartDidIdentificationFaceauthnewocpResponse) GoString() string {
	return s.String()
}

func (s *StartDidIdentificationFaceauthnewocpResponse) SetReqMsgId(v string) *StartDidIdentificationFaceauthnewocpResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartDidIdentificationFaceauthnewocpResponse) SetResultCode(v string) *StartDidIdentificationFaceauthnewocpResponse {
	s.ResultCode = &v
	return s
}

func (s *StartDidIdentificationFaceauthnewocpResponse) SetResultMsg(v string) *StartDidIdentificationFaceauthnewocpResponse {
	s.ResultMsg = &v
	return s
}

func (s *StartDidIdentificationFaceauthnewocpResponse) SetCertifyId(v string) *StartDidIdentificationFaceauthnewocpResponse {
	s.CertifyId = &v
	return s
}

func (s *StartDidIdentificationFaceauthnewocpResponse) SetCertifyUrl(v string) *StartDidIdentificationFaceauthnewocpResponse {
	s.CertifyUrl = &v
	return s
}

type CreateDidPersonFacevrfnewocpRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 场景码，通常针对性特别支持，或者防止多调用方使用相同租户身份的情况下用bizCode做区分。
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
	// 请求的唯一标识，通常为32字符宽度的字符串内容，也可以只用UUID，此参数通常用来支持幂等，或者排查问题，调用方可以使用业务流水号。
	BizId *string `json:"biz_id,omitempty" xml:"biz_id,omitempty" require:"true"`
	// 姓名字段，真实姓名，不可包含空格等特殊字符。
	CertName *string `json:"cert_name,omitempty" xml:"cert_name,omitempty" require:"true"`
	// 证件号码，要求带有字母的情况使用大写字母。
	CertNo *string `json:"cert_no,omitempty" xml:"cert_no,omitempty" require:"true"`
	// 份信息来源类型，当前仅支持证件（CERT_INFO）
	IdentityType *string `json:"identity_type,omitempty" xml:"identity_type,omitempty" require:"true"`
	// 证件类型，当前仅支持身份证（IDENTITY_CARD）
	CertType *string `json:"cert_type,omitempty" xml:"cert_type,omitempty" require:"true"`
	// metainfo 环境参数，需要通过客户端 SDK 获取
	MetaInfo *string `json:"meta_info,omitempty" xml:"meta_info,omitempty" require:"true"`
	// OCR 能力对两个扩展参数，map的json格式：tradeParam_needOcr=true tradeParam_verifyStageCheckUsable=true
	ExternParam *string `json:"extern_param,omitempty" xml:"extern_param,omitempty"`
	// DID未来创建锚定的用户身份唯一关联，如果不设置此参数则使用二要素拼接后的哈希值 SHA256("张三"+"210282*****X") 来进行关联创建DID，并且支持幂等。
	Uid *string `json:"uid,omitempty" xml:"uid,omitempty"`
}

func (s CreateDidPersonFacevrfnewocpRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDidPersonFacevrfnewocpRequest) GoString() string {
	return s.String()
}

func (s *CreateDidPersonFacevrfnewocpRequest) SetAuthToken(v string) *CreateDidPersonFacevrfnewocpRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateDidPersonFacevrfnewocpRequest) SetProductInstanceId(v string) *CreateDidPersonFacevrfnewocpRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateDidPersonFacevrfnewocpRequest) SetBizCode(v string) *CreateDidPersonFacevrfnewocpRequest {
	s.BizCode = &v
	return s
}

func (s *CreateDidPersonFacevrfnewocpRequest) SetBizId(v string) *CreateDidPersonFacevrfnewocpRequest {
	s.BizId = &v
	return s
}

func (s *CreateDidPersonFacevrfnewocpRequest) SetCertName(v string) *CreateDidPersonFacevrfnewocpRequest {
	s.CertName = &v
	return s
}

func (s *CreateDidPersonFacevrfnewocpRequest) SetCertNo(v string) *CreateDidPersonFacevrfnewocpRequest {
	s.CertNo = &v
	return s
}

func (s *CreateDidPersonFacevrfnewocpRequest) SetIdentityType(v string) *CreateDidPersonFacevrfnewocpRequest {
	s.IdentityType = &v
	return s
}

func (s *CreateDidPersonFacevrfnewocpRequest) SetCertType(v string) *CreateDidPersonFacevrfnewocpRequest {
	s.CertType = &v
	return s
}

func (s *CreateDidPersonFacevrfnewocpRequest) SetMetaInfo(v string) *CreateDidPersonFacevrfnewocpRequest {
	s.MetaInfo = &v
	return s
}

func (s *CreateDidPersonFacevrfnewocpRequest) SetExternParam(v string) *CreateDidPersonFacevrfnewocpRequest {
	s.ExternParam = &v
	return s
}

func (s *CreateDidPersonFacevrfnewocpRequest) SetUid(v string) *CreateDidPersonFacevrfnewocpRequest {
	s.Uid = &v
	return s
}

type CreateDidPersonFacevrfnewocpResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 可信实人认证的唯一标识，返回后用于移动端进行唤起刷脸，也用于后续查询认证结果的关键入参。
	CertifyId *string `json:"certify_id,omitempty" xml:"certify_id,omitempty"`
}

func (s CreateDidPersonFacevrfnewocpResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDidPersonFacevrfnewocpResponse) GoString() string {
	return s.String()
}

func (s *CreateDidPersonFacevrfnewocpResponse) SetReqMsgId(v string) *CreateDidPersonFacevrfnewocpResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateDidPersonFacevrfnewocpResponse) SetResultCode(v string) *CreateDidPersonFacevrfnewocpResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateDidPersonFacevrfnewocpResponse) SetResultMsg(v string) *CreateDidPersonFacevrfnewocpResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateDidPersonFacevrfnewocpResponse) SetCertifyId(v string) *CreateDidPersonFacevrfnewocpResponse {
	s.CertifyId = &v
	return s
}

type CreateDidPersonFacevrfminiappnewocpRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 场景码，通常针对性特别支持，或者防止多调用方使用相同租户身份的情况下用bizCode做区分。
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
	// 请求的唯一标识，通常为32字符宽度的字符串内容，也可以只用UUID，此参数通常用来支持幂等，或者排查问题，调用方可以使用业务流水号。
	BizId *string `json:"biz_id,omitempty" xml:"biz_id,omitempty" require:"true"`
	// 姓名字段，真实姓名，不可包含空格等特殊字符。
	CertName *string `json:"cert_name,omitempty" xml:"cert_name,omitempty" require:"true"`
	// 证件号码，要求带有字母的情况使用大写字母。
	CertNo *string `json:"cert_no,omitempty" xml:"cert_no,omitempty" require:"true"`
	// 身份信息来源类型，当前仅支持证件（CERT_INFO）
	IdentityType *string `json:"identity_type,omitempty" xml:"identity_type,omitempty" require:"true"`
	// 证件类型，当前仅支持身份证（IDENTITY_CARD）
	CertType *string `json:"cert_type,omitempty" xml:"cert_type,omitempty" require:"true"`
	// 认证结束回跳地址
	ReturnUrl *string `json:"return_url,omitempty" xml:"return_url,omitempty" require:"true"`
	// DID未来创建锚定的用户身份唯一关联，如果不设置此参数则使用二要素拼接后的哈希值 SHA256("张三"+"210282*****X") 来进行关联创建DID，并且支持幂等。
	Uid *string `json:"uid,omitempty" xml:"uid,omitempty"`
	// 刷脸类型，目前只支持FACE_SDK、FACE，默认FACE_SDK
	FaceType *string `json:"face_type,omitempty" xml:"face_type,omitempty"`
}

func (s CreateDidPersonFacevrfminiappnewocpRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDidPersonFacevrfminiappnewocpRequest) GoString() string {
	return s.String()
}

func (s *CreateDidPersonFacevrfminiappnewocpRequest) SetAuthToken(v string) *CreateDidPersonFacevrfminiappnewocpRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateDidPersonFacevrfminiappnewocpRequest) SetProductInstanceId(v string) *CreateDidPersonFacevrfminiappnewocpRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateDidPersonFacevrfminiappnewocpRequest) SetBizCode(v string) *CreateDidPersonFacevrfminiappnewocpRequest {
	s.BizCode = &v
	return s
}

func (s *CreateDidPersonFacevrfminiappnewocpRequest) SetBizId(v string) *CreateDidPersonFacevrfminiappnewocpRequest {
	s.BizId = &v
	return s
}

func (s *CreateDidPersonFacevrfminiappnewocpRequest) SetCertName(v string) *CreateDidPersonFacevrfminiappnewocpRequest {
	s.CertName = &v
	return s
}

func (s *CreateDidPersonFacevrfminiappnewocpRequest) SetCertNo(v string) *CreateDidPersonFacevrfminiappnewocpRequest {
	s.CertNo = &v
	return s
}

func (s *CreateDidPersonFacevrfminiappnewocpRequest) SetIdentityType(v string) *CreateDidPersonFacevrfminiappnewocpRequest {
	s.IdentityType = &v
	return s
}

func (s *CreateDidPersonFacevrfminiappnewocpRequest) SetCertType(v string) *CreateDidPersonFacevrfminiappnewocpRequest {
	s.CertType = &v
	return s
}

func (s *CreateDidPersonFacevrfminiappnewocpRequest) SetReturnUrl(v string) *CreateDidPersonFacevrfminiappnewocpRequest {
	s.ReturnUrl = &v
	return s
}

func (s *CreateDidPersonFacevrfminiappnewocpRequest) SetUid(v string) *CreateDidPersonFacevrfminiappnewocpRequest {
	s.Uid = &v
	return s
}

func (s *CreateDidPersonFacevrfminiappnewocpRequest) SetFaceType(v string) *CreateDidPersonFacevrfminiappnewocpRequest {
	s.FaceType = &v
	return s
}

type CreateDidPersonFacevrfminiappnewocpResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 查询刷脸结果唯一标识
	CertifyId *string `json:"certify_id,omitempty" xml:"certify_id,omitempty"`
	// 认证流程入口 URL。
	CertifyUrl *string `json:"certify_url,omitempty" xml:"certify_url,omitempty"`
}

func (s CreateDidPersonFacevrfminiappnewocpResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDidPersonFacevrfminiappnewocpResponse) GoString() string {
	return s.String()
}

func (s *CreateDidPersonFacevrfminiappnewocpResponse) SetReqMsgId(v string) *CreateDidPersonFacevrfminiappnewocpResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateDidPersonFacevrfminiappnewocpResponse) SetResultCode(v string) *CreateDidPersonFacevrfminiappnewocpResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateDidPersonFacevrfminiappnewocpResponse) SetResultMsg(v string) *CreateDidPersonFacevrfminiappnewocpResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateDidPersonFacevrfminiappnewocpResponse) SetCertifyId(v string) *CreateDidPersonFacevrfminiappnewocpResponse {
	s.CertifyId = &v
	return s
}

func (s *CreateDidPersonFacevrfminiappnewocpResponse) SetCertifyUrl(v string) *CreateDidPersonFacevrfminiappnewocpResponse {
	s.CertifyUrl = &v
	return s
}

type StartDidCertificationThreemetanewocpRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 身份证号码
	CertNo *string `json:"cert_no,omitempty" xml:"cert_no,omitempty" require:"true"`
	// 证书的subject did，不给此参数时候三要素验证不颁发vc
	Did *string `json:"did,omitempty" xml:"did,omitempty"`
	// 手机号码
	Mobile *string `json:"mobile,omitempty" xml:"mobile,omitempty" require:"true"`
	// 姓名
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 场景码，找dis工作人员进行分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
}

func (s StartDidCertificationThreemetanewocpRequest) String() string {
	return tea.Prettify(s)
}

func (s StartDidCertificationThreemetanewocpRequest) GoString() string {
	return s.String()
}

func (s *StartDidCertificationThreemetanewocpRequest) SetAuthToken(v string) *StartDidCertificationThreemetanewocpRequest {
	s.AuthToken = &v
	return s
}

func (s *StartDidCertificationThreemetanewocpRequest) SetProductInstanceId(v string) *StartDidCertificationThreemetanewocpRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *StartDidCertificationThreemetanewocpRequest) SetCertNo(v string) *StartDidCertificationThreemetanewocpRequest {
	s.CertNo = &v
	return s
}

func (s *StartDidCertificationThreemetanewocpRequest) SetDid(v string) *StartDidCertificationThreemetanewocpRequest {
	s.Did = &v
	return s
}

func (s *StartDidCertificationThreemetanewocpRequest) SetMobile(v string) *StartDidCertificationThreemetanewocpRequest {
	s.Mobile = &v
	return s
}

func (s *StartDidCertificationThreemetanewocpRequest) SetName(v string) *StartDidCertificationThreemetanewocpRequest {
	s.Name = &v
	return s
}

func (s *StartDidCertificationThreemetanewocpRequest) SetBizCode(v string) *StartDidCertificationThreemetanewocpRequest {
	s.BizCode = &v
	return s
}

type StartDidCertificationThreemetanewocpResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// vc id，可通过该字符串来查询vc具体内容
	VcId *string `json:"vc_id,omitempty" xml:"vc_id,omitempty"`
}

func (s StartDidCertificationThreemetanewocpResponse) String() string {
	return tea.Prettify(s)
}

func (s StartDidCertificationThreemetanewocpResponse) GoString() string {
	return s.String()
}

func (s *StartDidCertificationThreemetanewocpResponse) SetReqMsgId(v string) *StartDidCertificationThreemetanewocpResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartDidCertificationThreemetanewocpResponse) SetResultCode(v string) *StartDidCertificationThreemetanewocpResponse {
	s.ResultCode = &v
	return s
}

func (s *StartDidCertificationThreemetanewocpResponse) SetResultMsg(v string) *StartDidCertificationThreemetanewocpResponse {
	s.ResultMsg = &v
	return s
}

func (s *StartDidCertificationThreemetanewocpResponse) SetVcId(v string) *StartDidCertificationThreemetanewocpResponse {
	s.VcId = &v
	return s
}

type ImportDidAldabaRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 待迁移did
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
}

func (s ImportDidAldabaRequest) String() string {
	return tea.Prettify(s)
}

func (s ImportDidAldabaRequest) GoString() string {
	return s.String()
}

func (s *ImportDidAldabaRequest) SetAuthToken(v string) *ImportDidAldabaRequest {
	s.AuthToken = &v
	return s
}

func (s *ImportDidAldabaRequest) SetProductInstanceId(v string) *ImportDidAldabaRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ImportDidAldabaRequest) SetDid(v string) *ImportDidAldabaRequest {
	s.Did = &v
	return s
}

type ImportDidAldabaResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s ImportDidAldabaResponse) String() string {
	return tea.Prettify(s)
}

func (s ImportDidAldabaResponse) GoString() string {
	return s.String()
}

func (s *ImportDidAldabaResponse) SetReqMsgId(v string) *ImportDidAldabaResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ImportDidAldabaResponse) SetResultCode(v string) *ImportDidAldabaResponse {
	s.ResultCode = &v
	return s
}

func (s *ImportDidAldabaResponse) SetResultMsg(v string) *ImportDidAldabaResponse {
	s.ResultMsg = &v
	return s
}

type CreateDidDtxPersonRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 唯一号，比如可以是hash(证件类型+企业营业执照号) 计算出来的唯一值等
	OwnerUid *string `json:"owner_uid,omitempty" xml:"owner_uid,omitempty" require:"true"`
	// 场景码，找dis工作人员进行分配
	//
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
}

func (s CreateDidDtxPersonRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDidDtxPersonRequest) GoString() string {
	return s.String()
}

func (s *CreateDidDtxPersonRequest) SetAuthToken(v string) *CreateDidDtxPersonRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateDidDtxPersonRequest) SetProductInstanceId(v string) *CreateDidDtxPersonRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateDidDtxPersonRequest) SetOwnerUid(v string) *CreateDidDtxPersonRequest {
	s.OwnerUid = &v
	return s
}

func (s *CreateDidDtxPersonRequest) SetBizCode(v string) *CreateDidDtxPersonRequest {
	s.BizCode = &v
	return s
}

type CreateDidDtxPersonResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 生成的did字符串
	//
	Did *string `json:"did,omitempty" xml:"did,omitempty"`
}

func (s CreateDidDtxPersonResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDidDtxPersonResponse) GoString() string {
	return s.String()
}

func (s *CreateDidDtxPersonResponse) SetReqMsgId(v string) *CreateDidDtxPersonResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateDidDtxPersonResponse) SetResultCode(v string) *CreateDidDtxPersonResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateDidDtxPersonResponse) SetResultMsg(v string) *CreateDidDtxPersonResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateDidDtxPersonResponse) SetDid(v string) *CreateDidDtxPersonResponse {
	s.Did = &v
	return s
}

type AddDidDtxPkRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 待操作的did
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 待添加公钥
	PublicKey *string `json:"public_key,omitempty" xml:"public_key,omitempty" require:"true"`
	// keyId
	KeyId *string `json:"key_id,omitempty" xml:"key_id,omitempty" require:"true"`
	// 需要传输给业务服务的JSON字段
	//
	Extension *string `json:"extension,omitempty" xml:"extension,omitempty"`
}

func (s AddDidDtxPkRequest) String() string {
	return tea.Prettify(s)
}

func (s AddDidDtxPkRequest) GoString() string {
	return s.String()
}

func (s *AddDidDtxPkRequest) SetAuthToken(v string) *AddDidDtxPkRequest {
	s.AuthToken = &v
	return s
}

func (s *AddDidDtxPkRequest) SetProductInstanceId(v string) *AddDidDtxPkRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *AddDidDtxPkRequest) SetDid(v string) *AddDidDtxPkRequest {
	s.Did = &v
	return s
}

func (s *AddDidDtxPkRequest) SetPublicKey(v string) *AddDidDtxPkRequest {
	s.PublicKey = &v
	return s
}

func (s *AddDidDtxPkRequest) SetKeyId(v string) *AddDidDtxPkRequest {
	s.KeyId = &v
	return s
}

func (s *AddDidDtxPkRequest) SetExtension(v string) *AddDidDtxPkRequest {
	s.Extension = &v
	return s
}

type AddDidDtxPkResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s AddDidDtxPkResponse) String() string {
	return tea.Prettify(s)
}

func (s AddDidDtxPkResponse) GoString() string {
	return s.String()
}

func (s *AddDidDtxPkResponse) SetReqMsgId(v string) *AddDidDtxPkResponse {
	s.ReqMsgId = &v
	return s
}

func (s *AddDidDtxPkResponse) SetResultCode(v string) *AddDidDtxPkResponse {
	s.ResultCode = &v
	return s
}

func (s *AddDidDtxPkResponse) SetResultMsg(v string) *AddDidDtxPkResponse {
	s.ResultMsg = &v
	return s
}

type CreateDidDtxVcRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// vc原文
	Vc *string `json:"vc,omitempty" xml:"vc,omitempty" require:"true"`
}

func (s CreateDidDtxVcRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDidDtxVcRequest) GoString() string {
	return s.String()
}

func (s *CreateDidDtxVcRequest) SetAuthToken(v string) *CreateDidDtxVcRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateDidDtxVcRequest) SetProductInstanceId(v string) *CreateDidDtxVcRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateDidDtxVcRequest) SetVc(v string) *CreateDidDtxVcRequest {
	s.Vc = &v
	return s
}

type CreateDidDtxVcResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s CreateDidDtxVcResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDidDtxVcResponse) GoString() string {
	return s.String()
}

func (s *CreateDidDtxVcResponse) SetReqMsgId(v string) *CreateDidDtxVcResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateDidDtxVcResponse) SetResultCode(v string) *CreateDidDtxVcResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateDidDtxVcResponse) SetResultMsg(v string) *CreateDidDtxVcResponse {
	s.ResultMsg = &v
	return s
}

type StartMydidcommunAgencySettleinRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 企业名称
	EpCertName *string `json:"ep_cert_name,omitempty" xml:"ep_cert_name,omitempty" require:"true"`
	// 企业证件号
	EpCertNo *string `json:"ep_cert_no,omitempty" xml:"ep_cert_no,omitempty" require:"true"`
	// 法人姓名
	LegalPersonCertName *string `json:"legal_person_cert_name,omitempty" xml:"legal_person_cert_name,omitempty" require:"true"`
	// 事件通知地址
	NotificationUrl *string `json:"notification_url,omitempty" xml:"notification_url,omitempty"`
	// 公钥
	PublicKey *string `json:"public_key,omitempty" xml:"public_key,omitempty" require:"true"`
	// 恢复公钥
	RecoverKey *string `json:"recover_key,omitempty" xml:"recover_key,omitempty" require:"true"`
	// 业务码，接入时需要找数据隐私服务分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
}

func (s StartMydidcommunAgencySettleinRequest) String() string {
	return tea.Prettify(s)
}

func (s StartMydidcommunAgencySettleinRequest) GoString() string {
	return s.String()
}

func (s *StartMydidcommunAgencySettleinRequest) SetAuthToken(v string) *StartMydidcommunAgencySettleinRequest {
	s.AuthToken = &v
	return s
}

func (s *StartMydidcommunAgencySettleinRequest) SetProductInstanceId(v string) *StartMydidcommunAgencySettleinRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *StartMydidcommunAgencySettleinRequest) SetEpCertName(v string) *StartMydidcommunAgencySettleinRequest {
	s.EpCertName = &v
	return s
}

func (s *StartMydidcommunAgencySettleinRequest) SetEpCertNo(v string) *StartMydidcommunAgencySettleinRequest {
	s.EpCertNo = &v
	return s
}

func (s *StartMydidcommunAgencySettleinRequest) SetLegalPersonCertName(v string) *StartMydidcommunAgencySettleinRequest {
	s.LegalPersonCertName = &v
	return s
}

func (s *StartMydidcommunAgencySettleinRequest) SetNotificationUrl(v string) *StartMydidcommunAgencySettleinRequest {
	s.NotificationUrl = &v
	return s
}

func (s *StartMydidcommunAgencySettleinRequest) SetPublicKey(v string) *StartMydidcommunAgencySettleinRequest {
	s.PublicKey = &v
	return s
}

func (s *StartMydidcommunAgencySettleinRequest) SetRecoverKey(v string) *StartMydidcommunAgencySettleinRequest {
	s.RecoverKey = &v
	return s
}

func (s *StartMydidcommunAgencySettleinRequest) SetBizCode(v string) *StartMydidcommunAgencySettleinRequest {
	s.BizCode = &v
	return s
}

type StartMydidcommunAgencySettleinResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 生成的did
	Did *string `json:"did,omitempty" xml:"did,omitempty"`
	// 生成的did doc
	Doc *string `json:"doc,omitempty" xml:"doc,omitempty"`
}

func (s StartMydidcommunAgencySettleinResponse) String() string {
	return tea.Prettify(s)
}

func (s StartMydidcommunAgencySettleinResponse) GoString() string {
	return s.String()
}

func (s *StartMydidcommunAgencySettleinResponse) SetReqMsgId(v string) *StartMydidcommunAgencySettleinResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartMydidcommunAgencySettleinResponse) SetResultCode(v string) *StartMydidcommunAgencySettleinResponse {
	s.ResultCode = &v
	return s
}

func (s *StartMydidcommunAgencySettleinResponse) SetResultMsg(v string) *StartMydidcommunAgencySettleinResponse {
	s.ResultMsg = &v
	return s
}

func (s *StartMydidcommunAgencySettleinResponse) SetDid(v string) *StartMydidcommunAgencySettleinResponse {
	s.Did = &v
	return s
}

func (s *StartMydidcommunAgencySettleinResponse) SetDoc(v string) *StartMydidcommunAgencySettleinResponse {
	s.Doc = &v
	return s
}

type StartMydidcommunAgencyChoicetappRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 入驻时候生成的did
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 服务ID
	ServiceId *string `json:"service_id,omitempty" xml:"service_id,omitempty" require:"true"`
	// 选择tapp的名称
	TappName *string `json:"tapp_name,omitempty" xml:"tapp_name,omitempty" require:"true"`
	// tapp版本
	TappVersion *int64 `json:"tapp_version,omitempty" xml:"tapp_version,omitempty" require:"true"`
	// 业务码，需要接入时联系数据隐私服务分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
}

func (s StartMydidcommunAgencyChoicetappRequest) String() string {
	return tea.Prettify(s)
}

func (s StartMydidcommunAgencyChoicetappRequest) GoString() string {
	return s.String()
}

func (s *StartMydidcommunAgencyChoicetappRequest) SetAuthToken(v string) *StartMydidcommunAgencyChoicetappRequest {
	s.AuthToken = &v
	return s
}

func (s *StartMydidcommunAgencyChoicetappRequest) SetProductInstanceId(v string) *StartMydidcommunAgencyChoicetappRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *StartMydidcommunAgencyChoicetappRequest) SetDid(v string) *StartMydidcommunAgencyChoicetappRequest {
	s.Did = &v
	return s
}

func (s *StartMydidcommunAgencyChoicetappRequest) SetServiceId(v string) *StartMydidcommunAgencyChoicetappRequest {
	s.ServiceId = &v
	return s
}

func (s *StartMydidcommunAgencyChoicetappRequest) SetTappName(v string) *StartMydidcommunAgencyChoicetappRequest {
	s.TappName = &v
	return s
}

func (s *StartMydidcommunAgencyChoicetappRequest) SetTappVersion(v int64) *StartMydidcommunAgencyChoicetappRequest {
	s.TappVersion = &v
	return s
}

func (s *StartMydidcommunAgencyChoicetappRequest) SetBizCode(v string) *StartMydidcommunAgencyChoicetappRequest {
	s.BizCode = &v
	return s
}

type StartMydidcommunAgencyChoicetappResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// doc当前版本
	PreVersion *int64 `json:"pre_version,omitempty" xml:"pre_version,omitempty"`
	// 生成的tapp info
	ServiceEndpoint *string `json:"service_endpoint,omitempty" xml:"service_endpoint,omitempty"`
	// 生成的serviceId
	ServiceId *string `json:"service_id,omitempty" xml:"service_id,omitempty"`
	// service 类型
	ServiceType *string `json:"service_type,omitempty" xml:"service_type,omitempty"`
	// EXIST 该tapp和serviceid已经包含在did doc中；
	// CONFLICT 该serviceid已经存在，但信息与此次不一致；
	// VALID 正常
	Desc *string `json:"desc,omitempty" xml:"desc,omitempty"`
}

func (s StartMydidcommunAgencyChoicetappResponse) String() string {
	return tea.Prettify(s)
}

func (s StartMydidcommunAgencyChoicetappResponse) GoString() string {
	return s.String()
}

func (s *StartMydidcommunAgencyChoicetappResponse) SetReqMsgId(v string) *StartMydidcommunAgencyChoicetappResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartMydidcommunAgencyChoicetappResponse) SetResultCode(v string) *StartMydidcommunAgencyChoicetappResponse {
	s.ResultCode = &v
	return s
}

func (s *StartMydidcommunAgencyChoicetappResponse) SetResultMsg(v string) *StartMydidcommunAgencyChoicetappResponse {
	s.ResultMsg = &v
	return s
}

func (s *StartMydidcommunAgencyChoicetappResponse) SetPreVersion(v int64) *StartMydidcommunAgencyChoicetappResponse {
	s.PreVersion = &v
	return s
}

func (s *StartMydidcommunAgencyChoicetappResponse) SetServiceEndpoint(v string) *StartMydidcommunAgencyChoicetappResponse {
	s.ServiceEndpoint = &v
	return s
}

func (s *StartMydidcommunAgencyChoicetappResponse) SetServiceId(v string) *StartMydidcommunAgencyChoicetappResponse {
	s.ServiceId = &v
	return s
}

func (s *StartMydidcommunAgencyChoicetappResponse) SetServiceType(v string) *StartMydidcommunAgencyChoicetappResponse {
	s.ServiceType = &v
	return s
}

func (s *StartMydidcommunAgencyChoicetappResponse) SetDesc(v string) *StartMydidcommunAgencyChoicetappResponse {
	s.Desc = &v
	return s
}

type StartMydidcommunAgencyuserPersonjoinRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 身份证号码
	CertNo *string `json:"cert_no,omitempty" xml:"cert_no,omitempty" require:"true"`
	// 姓名
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 事件通知地址
	NotificationUrl *string `json:"notification_url,omitempty" xml:"notification_url,omitempty" require:"true"`
	// 公钥
	PublicKey *string `json:"public_key,omitempty" xml:"public_key,omitempty" require:"true"`
	// 恢复公钥
	RecoverKey *string `json:"recover_key,omitempty" xml:"recover_key,omitempty" require:"true"`
	// 选择的TAPP列表
	TappInfoList []*ChoiceTappInfo `json:"tapp_info_list,omitempty" xml:"tapp_info_list,omitempty" type:"Repeated"`
	// 业务码，接入时需要找数据隐私服务分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
}

func (s StartMydidcommunAgencyuserPersonjoinRequest) String() string {
	return tea.Prettify(s)
}

func (s StartMydidcommunAgencyuserPersonjoinRequest) GoString() string {
	return s.String()
}

func (s *StartMydidcommunAgencyuserPersonjoinRequest) SetAuthToken(v string) *StartMydidcommunAgencyuserPersonjoinRequest {
	s.AuthToken = &v
	return s
}

func (s *StartMydidcommunAgencyuserPersonjoinRequest) SetProductInstanceId(v string) *StartMydidcommunAgencyuserPersonjoinRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *StartMydidcommunAgencyuserPersonjoinRequest) SetCertNo(v string) *StartMydidcommunAgencyuserPersonjoinRequest {
	s.CertNo = &v
	return s
}

func (s *StartMydidcommunAgencyuserPersonjoinRequest) SetName(v string) *StartMydidcommunAgencyuserPersonjoinRequest {
	s.Name = &v
	return s
}

func (s *StartMydidcommunAgencyuserPersonjoinRequest) SetNotificationUrl(v string) *StartMydidcommunAgencyuserPersonjoinRequest {
	s.NotificationUrl = &v
	return s
}

func (s *StartMydidcommunAgencyuserPersonjoinRequest) SetPublicKey(v string) *StartMydidcommunAgencyuserPersonjoinRequest {
	s.PublicKey = &v
	return s
}

func (s *StartMydidcommunAgencyuserPersonjoinRequest) SetRecoverKey(v string) *StartMydidcommunAgencyuserPersonjoinRequest {
	s.RecoverKey = &v
	return s
}

func (s *StartMydidcommunAgencyuserPersonjoinRequest) SetTappInfoList(v []*ChoiceTappInfo) *StartMydidcommunAgencyuserPersonjoinRequest {
	s.TappInfoList = v
	return s
}

func (s *StartMydidcommunAgencyuserPersonjoinRequest) SetBizCode(v string) *StartMydidcommunAgencyuserPersonjoinRequest {
	s.BizCode = &v
	return s
}

type StartMydidcommunAgencyuserPersonjoinResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 生成的did
	Did *string `json:"did,omitempty" xml:"did,omitempty"`
	// 生成的did doc
	Doc *string `json:"doc,omitempty" xml:"doc,omitempty"`
}

func (s StartMydidcommunAgencyuserPersonjoinResponse) String() string {
	return tea.Prettify(s)
}

func (s StartMydidcommunAgencyuserPersonjoinResponse) GoString() string {
	return s.String()
}

func (s *StartMydidcommunAgencyuserPersonjoinResponse) SetReqMsgId(v string) *StartMydidcommunAgencyuserPersonjoinResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartMydidcommunAgencyuserPersonjoinResponse) SetResultCode(v string) *StartMydidcommunAgencyuserPersonjoinResponse {
	s.ResultCode = &v
	return s
}

func (s *StartMydidcommunAgencyuserPersonjoinResponse) SetResultMsg(v string) *StartMydidcommunAgencyuserPersonjoinResponse {
	s.ResultMsg = &v
	return s
}

func (s *StartMydidcommunAgencyuserPersonjoinResponse) SetDid(v string) *StartMydidcommunAgencyuserPersonjoinResponse {
	s.Did = &v
	return s
}

func (s *StartMydidcommunAgencyuserPersonjoinResponse) SetDoc(v string) *StartMydidcommunAgencyuserPersonjoinResponse {
	s.Doc = &v
	return s
}

type StartMydidcommunAgencyuserCorporatejoinRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 企业名称
	EpCertName *string `json:"ep_cert_name,omitempty" xml:"ep_cert_name,omitempty" require:"true"`
	// 企业证件号
	EpCertNo *string `json:"ep_cert_no,omitempty" xml:"ep_cert_no,omitempty" require:"true"`
	// 法人姓名
	LegalPersonCertName *string `json:"legal_person_cert_name,omitempty" xml:"legal_person_cert_name,omitempty" require:"true"`
	// 事件通知地址
	NotificationUrl *string `json:"notification_url,omitempty" xml:"notification_url,omitempty" require:"true"`
	// 公钥
	PublicKey *string `json:"public_key,omitempty" xml:"public_key,omitempty" require:"true"`
	// 恢复公钥
	RecoverKey *string `json:"recover_key,omitempty" xml:"recover_key,omitempty" require:"true"`
	// 选择的tapp列表
	TappInfoList []*ChoiceTappInfo `json:"tapp_info_list,omitempty" xml:"tapp_info_list,omitempty" type:"Repeated"`
	// 业务码，接入时需要找数据隐私服务分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
}

func (s StartMydidcommunAgencyuserCorporatejoinRequest) String() string {
	return tea.Prettify(s)
}

func (s StartMydidcommunAgencyuserCorporatejoinRequest) GoString() string {
	return s.String()
}

func (s *StartMydidcommunAgencyuserCorporatejoinRequest) SetAuthToken(v string) *StartMydidcommunAgencyuserCorporatejoinRequest {
	s.AuthToken = &v
	return s
}

func (s *StartMydidcommunAgencyuserCorporatejoinRequest) SetProductInstanceId(v string) *StartMydidcommunAgencyuserCorporatejoinRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *StartMydidcommunAgencyuserCorporatejoinRequest) SetEpCertName(v string) *StartMydidcommunAgencyuserCorporatejoinRequest {
	s.EpCertName = &v
	return s
}

func (s *StartMydidcommunAgencyuserCorporatejoinRequest) SetEpCertNo(v string) *StartMydidcommunAgencyuserCorporatejoinRequest {
	s.EpCertNo = &v
	return s
}

func (s *StartMydidcommunAgencyuserCorporatejoinRequest) SetLegalPersonCertName(v string) *StartMydidcommunAgencyuserCorporatejoinRequest {
	s.LegalPersonCertName = &v
	return s
}

func (s *StartMydidcommunAgencyuserCorporatejoinRequest) SetNotificationUrl(v string) *StartMydidcommunAgencyuserCorporatejoinRequest {
	s.NotificationUrl = &v
	return s
}

func (s *StartMydidcommunAgencyuserCorporatejoinRequest) SetPublicKey(v string) *StartMydidcommunAgencyuserCorporatejoinRequest {
	s.PublicKey = &v
	return s
}

func (s *StartMydidcommunAgencyuserCorporatejoinRequest) SetRecoverKey(v string) *StartMydidcommunAgencyuserCorporatejoinRequest {
	s.RecoverKey = &v
	return s
}

func (s *StartMydidcommunAgencyuserCorporatejoinRequest) SetTappInfoList(v []*ChoiceTappInfo) *StartMydidcommunAgencyuserCorporatejoinRequest {
	s.TappInfoList = v
	return s
}

func (s *StartMydidcommunAgencyuserCorporatejoinRequest) SetBizCode(v string) *StartMydidcommunAgencyuserCorporatejoinRequest {
	s.BizCode = &v
	return s
}

type StartMydidcommunAgencyuserCorporatejoinResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 生成的did
	Did *string `json:"did,omitempty" xml:"did,omitempty"`
	// 生成的did doc
	Doc *string `json:"doc,omitempty" xml:"doc,omitempty"`
}

func (s StartMydidcommunAgencyuserCorporatejoinResponse) String() string {
	return tea.Prettify(s)
}

func (s StartMydidcommunAgencyuserCorporatejoinResponse) GoString() string {
	return s.String()
}

func (s *StartMydidcommunAgencyuserCorporatejoinResponse) SetReqMsgId(v string) *StartMydidcommunAgencyuserCorporatejoinResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartMydidcommunAgencyuserCorporatejoinResponse) SetResultCode(v string) *StartMydidcommunAgencyuserCorporatejoinResponse {
	s.ResultCode = &v
	return s
}

func (s *StartMydidcommunAgencyuserCorporatejoinResponse) SetResultMsg(v string) *StartMydidcommunAgencyuserCorporatejoinResponse {
	s.ResultMsg = &v
	return s
}

func (s *StartMydidcommunAgencyuserCorporatejoinResponse) SetDid(v string) *StartMydidcommunAgencyuserCorporatejoinResponse {
	s.Did = &v
	return s
}

func (s *StartMydidcommunAgencyuserCorporatejoinResponse) SetDoc(v string) *StartMydidcommunAgencyuserCorporatejoinResponse {
	s.Doc = &v
	return s
}

type UpdateMydidcommunAgencyDocRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 入驻时候生成的did
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 对参数进行构造签名
	OperationSign *string `json:"operation_sign,omitempty" xml:"operation_sign,omitempty" require:"true"`
	// doc当前版本
	PreVersion *int64 `json:"pre_version,omitempty" xml:"pre_version,omitempty" require:"true"`
	// doc中服务信息列表
	ServiceList []*DisServicesInfo `json:"service_list,omitempty" xml:"service_list,omitempty" require:"true" type:"Repeated"`
}

func (s UpdateMydidcommunAgencyDocRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateMydidcommunAgencyDocRequest) GoString() string {
	return s.String()
}

func (s *UpdateMydidcommunAgencyDocRequest) SetAuthToken(v string) *UpdateMydidcommunAgencyDocRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateMydidcommunAgencyDocRequest) SetProductInstanceId(v string) *UpdateMydidcommunAgencyDocRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UpdateMydidcommunAgencyDocRequest) SetDid(v string) *UpdateMydidcommunAgencyDocRequest {
	s.Did = &v
	return s
}

func (s *UpdateMydidcommunAgencyDocRequest) SetOperationSign(v string) *UpdateMydidcommunAgencyDocRequest {
	s.OperationSign = &v
	return s
}

func (s *UpdateMydidcommunAgencyDocRequest) SetPreVersion(v int64) *UpdateMydidcommunAgencyDocRequest {
	s.PreVersion = &v
	return s
}

func (s *UpdateMydidcommunAgencyDocRequest) SetServiceList(v []*DisServicesInfo) *UpdateMydidcommunAgencyDocRequest {
	s.ServiceList = v
	return s
}

type UpdateMydidcommunAgencyDocResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateMydidcommunAgencyDocResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateMydidcommunAgencyDocResponse) GoString() string {
	return s.String()
}

func (s *UpdateMydidcommunAgencyDocResponse) SetReqMsgId(v string) *UpdateMydidcommunAgencyDocResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateMydidcommunAgencyDocResponse) SetResultCode(v string) *UpdateMydidcommunAgencyDocResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateMydidcommunAgencyDocResponse) SetResultMsg(v string) *UpdateMydidcommunAgencyDocResponse {
	s.ResultMsg = &v
	return s
}

type StartMydidcommunAgencyDatatransmitstartRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 发送者的did
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 数字资产的owner did
	OwnerDid *string `json:"owner_did,omitempty" xml:"owner_did,omitempty"`
	// 具体调用Tapp的参数数组，json格式
	Params *string `json:"params,omitempty" xml:"params,omitempty" require:"true"`
	// 数据处理tapp id
	ProcessTappId *string `json:"process_tapp_id,omitempty" xml:"process_tapp_id,omitempty"`
	// 处理tapp的function
	ProcessTappMethod *string `json:"process_tapp_method,omitempty" xml:"process_tapp_method,omitempty"`
	// 读取数据的tapp id
	ReadTappId *string `json:"read_tapp_id,omitempty" xml:"read_tapp_id,omitempty" require:"true"`
	// 读取数据的Tapp中对应的Method
	ReadTappMethod *string `json:"read_tapp_method,omitempty" xml:"read_tapp_method,omitempty" require:"true"`
	// 数据资产传输目标did
	TargetDid *string `json:"target_did,omitempty" xml:"target_did,omitempty" require:"true"`
	// 发起流程的唯一号，系统将更加这个唯一号保持幂等
	ProcessId *string `json:"process_id,omitempty" xml:"process_id,omitempty" require:"true"`
}

func (s StartMydidcommunAgencyDatatransmitstartRequest) String() string {
	return tea.Prettify(s)
}

func (s StartMydidcommunAgencyDatatransmitstartRequest) GoString() string {
	return s.String()
}

func (s *StartMydidcommunAgencyDatatransmitstartRequest) SetAuthToken(v string) *StartMydidcommunAgencyDatatransmitstartRequest {
	s.AuthToken = &v
	return s
}

func (s *StartMydidcommunAgencyDatatransmitstartRequest) SetProductInstanceId(v string) *StartMydidcommunAgencyDatatransmitstartRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *StartMydidcommunAgencyDatatransmitstartRequest) SetDid(v string) *StartMydidcommunAgencyDatatransmitstartRequest {
	s.Did = &v
	return s
}

func (s *StartMydidcommunAgencyDatatransmitstartRequest) SetOwnerDid(v string) *StartMydidcommunAgencyDatatransmitstartRequest {
	s.OwnerDid = &v
	return s
}

func (s *StartMydidcommunAgencyDatatransmitstartRequest) SetParams(v string) *StartMydidcommunAgencyDatatransmitstartRequest {
	s.Params = &v
	return s
}

func (s *StartMydidcommunAgencyDatatransmitstartRequest) SetProcessTappId(v string) *StartMydidcommunAgencyDatatransmitstartRequest {
	s.ProcessTappId = &v
	return s
}

func (s *StartMydidcommunAgencyDatatransmitstartRequest) SetProcessTappMethod(v string) *StartMydidcommunAgencyDatatransmitstartRequest {
	s.ProcessTappMethod = &v
	return s
}

func (s *StartMydidcommunAgencyDatatransmitstartRequest) SetReadTappId(v string) *StartMydidcommunAgencyDatatransmitstartRequest {
	s.ReadTappId = &v
	return s
}

func (s *StartMydidcommunAgencyDatatransmitstartRequest) SetReadTappMethod(v string) *StartMydidcommunAgencyDatatransmitstartRequest {
	s.ReadTappMethod = &v
	return s
}

func (s *StartMydidcommunAgencyDatatransmitstartRequest) SetTargetDid(v string) *StartMydidcommunAgencyDatatransmitstartRequest {
	s.TargetDid = &v
	return s
}

func (s *StartMydidcommunAgencyDatatransmitstartRequest) SetProcessId(v string) *StartMydidcommunAgencyDatatransmitstartRequest {
	s.ProcessId = &v
	return s
}

type StartMydidcommunAgencyDatatransmitstartResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 发起之后返回的任务ID
	TaskId *string `json:"task_id,omitempty" xml:"task_id,omitempty"`
}

func (s StartMydidcommunAgencyDatatransmitstartResponse) String() string {
	return tea.Prettify(s)
}

func (s StartMydidcommunAgencyDatatransmitstartResponse) GoString() string {
	return s.String()
}

func (s *StartMydidcommunAgencyDatatransmitstartResponse) SetReqMsgId(v string) *StartMydidcommunAgencyDatatransmitstartResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartMydidcommunAgencyDatatransmitstartResponse) SetResultCode(v string) *StartMydidcommunAgencyDatatransmitstartResponse {
	s.ResultCode = &v
	return s
}

func (s *StartMydidcommunAgencyDatatransmitstartResponse) SetResultMsg(v string) *StartMydidcommunAgencyDatatransmitstartResponse {
	s.ResultMsg = &v
	return s
}

func (s *StartMydidcommunAgencyDatatransmitstartResponse) SetTaskId(v string) *StartMydidcommunAgencyDatatransmitstartResponse {
	s.TaskId = &v
	return s
}

type StartMydidcommunAgencyDatatransmitcontinueRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 调用tapp时传输的参数
	Params *string `json:"params,omitempty" xml:"params,omitempty" require:"true"`
	// 之前触发主动发送数据流程返回的taskid
	TaskId *string `json:"task_id,omitempty" xml:"task_id,omitempty" require:"true"`
	// 发送者的did声明
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
}

func (s StartMydidcommunAgencyDatatransmitcontinueRequest) String() string {
	return tea.Prettify(s)
}

func (s StartMydidcommunAgencyDatatransmitcontinueRequest) GoString() string {
	return s.String()
}

func (s *StartMydidcommunAgencyDatatransmitcontinueRequest) SetAuthToken(v string) *StartMydidcommunAgencyDatatransmitcontinueRequest {
	s.AuthToken = &v
	return s
}

func (s *StartMydidcommunAgencyDatatransmitcontinueRequest) SetProductInstanceId(v string) *StartMydidcommunAgencyDatatransmitcontinueRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *StartMydidcommunAgencyDatatransmitcontinueRequest) SetParams(v string) *StartMydidcommunAgencyDatatransmitcontinueRequest {
	s.Params = &v
	return s
}

func (s *StartMydidcommunAgencyDatatransmitcontinueRequest) SetTaskId(v string) *StartMydidcommunAgencyDatatransmitcontinueRequest {
	s.TaskId = &v
	return s
}

func (s *StartMydidcommunAgencyDatatransmitcontinueRequest) SetDid(v string) *StartMydidcommunAgencyDatatransmitcontinueRequest {
	s.Did = &v
	return s
}

type StartMydidcommunAgencyDatatransmitcontinueResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 主动发起数据传输流程的task id
	TaskId *string `json:"task_id,omitempty" xml:"task_id,omitempty"`
}

func (s StartMydidcommunAgencyDatatransmitcontinueResponse) String() string {
	return tea.Prettify(s)
}

func (s StartMydidcommunAgencyDatatransmitcontinueResponse) GoString() string {
	return s.String()
}

func (s *StartMydidcommunAgencyDatatransmitcontinueResponse) SetReqMsgId(v string) *StartMydidcommunAgencyDatatransmitcontinueResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartMydidcommunAgencyDatatransmitcontinueResponse) SetResultCode(v string) *StartMydidcommunAgencyDatatransmitcontinueResponse {
	s.ResultCode = &v
	return s
}

func (s *StartMydidcommunAgencyDatatransmitcontinueResponse) SetResultMsg(v string) *StartMydidcommunAgencyDatatransmitcontinueResponse {
	s.ResultMsg = &v
	return s
}

func (s *StartMydidcommunAgencyDatatransmitcontinueResponse) SetTaskId(v string) *StartMydidcommunAgencyDatatransmitcontinueResponse {
	s.TaskId = &v
	return s
}

type StartMydidcommunAgencyDataapplicationRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 申请的数据ID，该字段由两部分组成ownerdid#service-id(did doc中表示对应数据资产的serviceid)
	DataId *string `json:"data_id,omitempty" xml:"data_id,omitempty" require:"true"`
	// 主动发起申请数据流程的请求者did
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 申请数据时增加的说明，比如说明本次申请数据的原因，等描述
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// 申请者在申请数据的时候，申明自己将使用那种方式处理申请到的数据。如果该字段为0表示要得到原始数据。
	// 该字段形式与dataId类似
	ProcessDataId *string `json:"process_data_id,omitempty" xml:"process_data_id,omitempty"`
	// 发起申请的申请id，系统将基于该id保持幂等
	ProcessId *string `json:"process_id,omitempty" xml:"process_id,omitempty" require:"true" maxLength:"128" minLength:"1"`
	// 数据申请到之后最终发送给谁的did
	TargetDid *string `json:"target_did,omitempty" xml:"target_did,omitempty" require:"true"`
}

func (s StartMydidcommunAgencyDataapplicationRequest) String() string {
	return tea.Prettify(s)
}

func (s StartMydidcommunAgencyDataapplicationRequest) GoString() string {
	return s.String()
}

func (s *StartMydidcommunAgencyDataapplicationRequest) SetAuthToken(v string) *StartMydidcommunAgencyDataapplicationRequest {
	s.AuthToken = &v
	return s
}

func (s *StartMydidcommunAgencyDataapplicationRequest) SetProductInstanceId(v string) *StartMydidcommunAgencyDataapplicationRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *StartMydidcommunAgencyDataapplicationRequest) SetDataId(v string) *StartMydidcommunAgencyDataapplicationRequest {
	s.DataId = &v
	return s
}

func (s *StartMydidcommunAgencyDataapplicationRequest) SetDid(v string) *StartMydidcommunAgencyDataapplicationRequest {
	s.Did = &v
	return s
}

func (s *StartMydidcommunAgencyDataapplicationRequest) SetMessage(v string) *StartMydidcommunAgencyDataapplicationRequest {
	s.Message = &v
	return s
}

func (s *StartMydidcommunAgencyDataapplicationRequest) SetProcessDataId(v string) *StartMydidcommunAgencyDataapplicationRequest {
	s.ProcessDataId = &v
	return s
}

func (s *StartMydidcommunAgencyDataapplicationRequest) SetProcessId(v string) *StartMydidcommunAgencyDataapplicationRequest {
	s.ProcessId = &v
	return s
}

func (s *StartMydidcommunAgencyDataapplicationRequest) SetTargetDid(v string) *StartMydidcommunAgencyDataapplicationRequest {
	s.TargetDid = &v
	return s
}

type StartMydidcommunAgencyDataapplicationResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 本次请求对应的任务ID，后续消息通知时会携带该字段，方便业务系统进行对应
	TaskId *string `json:"task_id,omitempty" xml:"task_id,omitempty"`
}

func (s StartMydidcommunAgencyDataapplicationResponse) String() string {
	return tea.Prettify(s)
}

func (s StartMydidcommunAgencyDataapplicationResponse) GoString() string {
	return s.String()
}

func (s *StartMydidcommunAgencyDataapplicationResponse) SetReqMsgId(v string) *StartMydidcommunAgencyDataapplicationResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartMydidcommunAgencyDataapplicationResponse) SetResultCode(v string) *StartMydidcommunAgencyDataapplicationResponse {
	s.ResultCode = &v
	return s
}

func (s *StartMydidcommunAgencyDataapplicationResponse) SetResultMsg(v string) *StartMydidcommunAgencyDataapplicationResponse {
	s.ResultMsg = &v
	return s
}

func (s *StartMydidcommunAgencyDataapplicationResponse) SetTaskId(v string) *StartMydidcommunAgencyDataapplicationResponse {
	s.TaskId = &v
	return s
}

type StartMydidcommunAgencyChoicetapplistRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 入驻时候生成的did
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 选择的tapp信息列表
	TappInfos []*ChoiceTappInfo `json:"tapp_infos,omitempty" xml:"tapp_infos,omitempty" require:"true" type:"Repeated"`
}

func (s StartMydidcommunAgencyChoicetapplistRequest) String() string {
	return tea.Prettify(s)
}

func (s StartMydidcommunAgencyChoicetapplistRequest) GoString() string {
	return s.String()
}

func (s *StartMydidcommunAgencyChoicetapplistRequest) SetAuthToken(v string) *StartMydidcommunAgencyChoicetapplistRequest {
	s.AuthToken = &v
	return s
}

func (s *StartMydidcommunAgencyChoicetapplistRequest) SetProductInstanceId(v string) *StartMydidcommunAgencyChoicetapplistRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *StartMydidcommunAgencyChoicetapplistRequest) SetDid(v string) *StartMydidcommunAgencyChoicetapplistRequest {
	s.Did = &v
	return s
}

func (s *StartMydidcommunAgencyChoicetapplistRequest) SetTappInfos(v []*ChoiceTappInfo) *StartMydidcommunAgencyChoicetapplistRequest {
	s.TappInfos = v
	return s
}

type StartMydidcommunAgencyChoicetapplistResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 之前did的版本号，在更新时会使用到
	PreVersion *int64 `json:"pre_version,omitempty" xml:"pre_version,omitempty"`
	// 对应servic info
	ServiceList []*DisServicesInfo `json:"service_list,omitempty" xml:"service_list,omitempty" type:"Repeated"`
}

func (s StartMydidcommunAgencyChoicetapplistResponse) String() string {
	return tea.Prettify(s)
}

func (s StartMydidcommunAgencyChoicetapplistResponse) GoString() string {
	return s.String()
}

func (s *StartMydidcommunAgencyChoicetapplistResponse) SetReqMsgId(v string) *StartMydidcommunAgencyChoicetapplistResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartMydidcommunAgencyChoicetapplistResponse) SetResultCode(v string) *StartMydidcommunAgencyChoicetapplistResponse {
	s.ResultCode = &v
	return s
}

func (s *StartMydidcommunAgencyChoicetapplistResponse) SetResultMsg(v string) *StartMydidcommunAgencyChoicetapplistResponse {
	s.ResultMsg = &v
	return s
}

func (s *StartMydidcommunAgencyChoicetapplistResponse) SetPreVersion(v int64) *StartMydidcommunAgencyChoicetapplistResponse {
	s.PreVersion = &v
	return s
}

func (s *StartMydidcommunAgencyChoicetapplistResponse) SetServiceList(v []*DisServicesInfo) *StartMydidcommunAgencyChoicetapplistResponse {
	s.ServiceList = v
	return s
}

type StartMydidcommunAgencyDataassertregisterRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 审批流程节点
	Approvers []*string `json:"approvers,omitempty" xml:"approvers,omitempty" require:"true" type:"Repeated"`
	// 数据资产的Owner
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 数据资产id
	ServiceId *string `json:"service_id,omitempty" xml:"service_id,omitempty" require:"true"`
}

func (s StartMydidcommunAgencyDataassertregisterRequest) String() string {
	return tea.Prettify(s)
}

func (s StartMydidcommunAgencyDataassertregisterRequest) GoString() string {
	return s.String()
}

func (s *StartMydidcommunAgencyDataassertregisterRequest) SetAuthToken(v string) *StartMydidcommunAgencyDataassertregisterRequest {
	s.AuthToken = &v
	return s
}

func (s *StartMydidcommunAgencyDataassertregisterRequest) SetProductInstanceId(v string) *StartMydidcommunAgencyDataassertregisterRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *StartMydidcommunAgencyDataassertregisterRequest) SetApprovers(v []*string) *StartMydidcommunAgencyDataassertregisterRequest {
	s.Approvers = v
	return s
}

func (s *StartMydidcommunAgencyDataassertregisterRequest) SetDid(v string) *StartMydidcommunAgencyDataassertregisterRequest {
	s.Did = &v
	return s
}

func (s *StartMydidcommunAgencyDataassertregisterRequest) SetServiceId(v string) *StartMydidcommunAgencyDataassertregisterRequest {
	s.ServiceId = &v
	return s
}

type StartMydidcommunAgencyDataassertregisterResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 数据资产ID
	DataId *string `json:"data_id,omitempty" xml:"data_id,omitempty"`
}

func (s StartMydidcommunAgencyDataassertregisterResponse) String() string {
	return tea.Prettify(s)
}

func (s StartMydidcommunAgencyDataassertregisterResponse) GoString() string {
	return s.String()
}

func (s *StartMydidcommunAgencyDataassertregisterResponse) SetReqMsgId(v string) *StartMydidcommunAgencyDataassertregisterResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartMydidcommunAgencyDataassertregisterResponse) SetResultCode(v string) *StartMydidcommunAgencyDataassertregisterResponse {
	s.ResultCode = &v
	return s
}

func (s *StartMydidcommunAgencyDataassertregisterResponse) SetResultMsg(v string) *StartMydidcommunAgencyDataassertregisterResponse {
	s.ResultMsg = &v
	return s
}

func (s *StartMydidcommunAgencyDataassertregisterResponse) SetDataId(v string) *StartMydidcommunAgencyDataassertregisterResponse {
	s.DataId = &v
	return s
}

type StartMydidcommunAgencyAuthRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 发起者did
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 用户在本地构造的发起数据授权申请的消息
	RequestRaw *string `json:"request_raw,omitempty" xml:"request_raw,omitempty" require:"true"`
	// 业务码，需要接入时联系数据隐私服务分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
}

func (s StartMydidcommunAgencyAuthRequest) String() string {
	return tea.Prettify(s)
}

func (s StartMydidcommunAgencyAuthRequest) GoString() string {
	return s.String()
}

func (s *StartMydidcommunAgencyAuthRequest) SetAuthToken(v string) *StartMydidcommunAgencyAuthRequest {
	s.AuthToken = &v
	return s
}

func (s *StartMydidcommunAgencyAuthRequest) SetProductInstanceId(v string) *StartMydidcommunAgencyAuthRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *StartMydidcommunAgencyAuthRequest) SetDid(v string) *StartMydidcommunAgencyAuthRequest {
	s.Did = &v
	return s
}

func (s *StartMydidcommunAgencyAuthRequest) SetRequestRaw(v string) *StartMydidcommunAgencyAuthRequest {
	s.RequestRaw = &v
	return s
}

func (s *StartMydidcommunAgencyAuthRequest) SetBizCode(v string) *StartMydidcommunAgencyAuthRequest {
	s.BizCode = &v
	return s
}

type StartMydidcommunAgencyAuthResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 授权返回值
	Result *string `json:"result,omitempty" xml:"result,omitempty"`
}

func (s StartMydidcommunAgencyAuthResponse) String() string {
	return tea.Prettify(s)
}

func (s StartMydidcommunAgencyAuthResponse) GoString() string {
	return s.String()
}

func (s *StartMydidcommunAgencyAuthResponse) SetReqMsgId(v string) *StartMydidcommunAgencyAuthResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartMydidcommunAgencyAuthResponse) SetResultCode(v string) *StartMydidcommunAgencyAuthResponse {
	s.ResultCode = &v
	return s
}

func (s *StartMydidcommunAgencyAuthResponse) SetResultMsg(v string) *StartMydidcommunAgencyAuthResponse {
	s.ResultMsg = &v
	return s
}

func (s *StartMydidcommunAgencyAuthResponse) SetResult(v string) *StartMydidcommunAgencyAuthResponse {
	s.Result = &v
	return s
}

type StartMydidcommunAgencyProcessauthRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 处理人did
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 处理授权的原始请求流
	RequestRaw *string `json:"request_raw,omitempty" xml:"request_raw,omitempty" require:"true"`
}

func (s StartMydidcommunAgencyProcessauthRequest) String() string {
	return tea.Prettify(s)
}

func (s StartMydidcommunAgencyProcessauthRequest) GoString() string {
	return s.String()
}

func (s *StartMydidcommunAgencyProcessauthRequest) SetAuthToken(v string) *StartMydidcommunAgencyProcessauthRequest {
	s.AuthToken = &v
	return s
}

func (s *StartMydidcommunAgencyProcessauthRequest) SetProductInstanceId(v string) *StartMydidcommunAgencyProcessauthRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *StartMydidcommunAgencyProcessauthRequest) SetDid(v string) *StartMydidcommunAgencyProcessauthRequest {
	s.Did = &v
	return s
}

func (s *StartMydidcommunAgencyProcessauthRequest) SetRequestRaw(v string) *StartMydidcommunAgencyProcessauthRequest {
	s.RequestRaw = &v
	return s
}

type StartMydidcommunAgencyProcessauthResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 授权处理后的结果
	Result *string `json:"result,omitempty" xml:"result,omitempty"`
}

func (s StartMydidcommunAgencyProcessauthResponse) String() string {
	return tea.Prettify(s)
}

func (s StartMydidcommunAgencyProcessauthResponse) GoString() string {
	return s.String()
}

func (s *StartMydidcommunAgencyProcessauthResponse) SetReqMsgId(v string) *StartMydidcommunAgencyProcessauthResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartMydidcommunAgencyProcessauthResponse) SetResultCode(v string) *StartMydidcommunAgencyProcessauthResponse {
	s.ResultCode = &v
	return s
}

func (s *StartMydidcommunAgencyProcessauthResponse) SetResultMsg(v string) *StartMydidcommunAgencyProcessauthResponse {
	s.ResultMsg = &v
	return s
}

func (s *StartMydidcommunAgencyProcessauthResponse) SetResult(v string) *StartMydidcommunAgencyProcessauthResponse {
	s.Result = &v
	return s
}

type QueryMydidcommunAgencyProcessauthRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 审批流水号
	ProcessId *string `json:"process_id,omitempty" xml:"process_id,omitempty" require:"true"`
	// 查询者did
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
}

func (s QueryMydidcommunAgencyProcessauthRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMydidcommunAgencyProcessauthRequest) GoString() string {
	return s.String()
}

func (s *QueryMydidcommunAgencyProcessauthRequest) SetAuthToken(v string) *QueryMydidcommunAgencyProcessauthRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryMydidcommunAgencyProcessauthRequest) SetProductInstanceId(v string) *QueryMydidcommunAgencyProcessauthRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryMydidcommunAgencyProcessauthRequest) SetProcessId(v string) *QueryMydidcommunAgencyProcessauthRequest {
	s.ProcessId = &v
	return s
}

func (s *QueryMydidcommunAgencyProcessauthRequest) SetDid(v string) *QueryMydidcommunAgencyProcessauthRequest {
	s.Did = &v
	return s
}

type QueryMydidcommunAgencyProcessauthResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 审批流当前状态
	Result *string `json:"result,omitempty" xml:"result,omitempty"`
}

func (s QueryMydidcommunAgencyProcessauthResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMydidcommunAgencyProcessauthResponse) GoString() string {
	return s.String()
}

func (s *QueryMydidcommunAgencyProcessauthResponse) SetReqMsgId(v string) *QueryMydidcommunAgencyProcessauthResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryMydidcommunAgencyProcessauthResponse) SetResultCode(v string) *QueryMydidcommunAgencyProcessauthResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryMydidcommunAgencyProcessauthResponse) SetResultMsg(v string) *QueryMydidcommunAgencyProcessauthResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryMydidcommunAgencyProcessauthResponse) SetResult(v string) *QueryMydidcommunAgencyProcessauthResponse {
	s.Result = &v
	return s
}

type QueryMydidcommunAgencyServicetypeinfoRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 带查询的服务类型
	ServiceType *string `json:"service_type,omitempty" xml:"service_type,omitempty" require:"true"`
}

func (s QueryMydidcommunAgencyServicetypeinfoRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMydidcommunAgencyServicetypeinfoRequest) GoString() string {
	return s.String()
}

func (s *QueryMydidcommunAgencyServicetypeinfoRequest) SetAuthToken(v string) *QueryMydidcommunAgencyServicetypeinfoRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryMydidcommunAgencyServicetypeinfoRequest) SetProductInstanceId(v string) *QueryMydidcommunAgencyServicetypeinfoRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryMydidcommunAgencyServicetypeinfoRequest) SetServiceType(v string) *QueryMydidcommunAgencyServicetypeinfoRequest {
	s.ServiceType = &v
	return s
}

type QueryMydidcommunAgencyServicetypeinfoResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 对应算法的入口函数名
	Method *string `json:"method,omitempty" xml:"method,omitempty"`
	// 服务对应的具体的Tapp或者算法名
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 表示服务的实际处理类型，目前是Data_Tapp
	//
	ServiceModel *string `json:"service_model,omitempty" xml:"service_model,omitempty"`
	// 对应name的算法当前版本
	Version *int64 `json:"version,omitempty" xml:"version,omitempty"`
	// serviceType所对应版本的publickey
	PublicKey *string `json:"public_key,omitempty" xml:"public_key,omitempty"`
}

func (s QueryMydidcommunAgencyServicetypeinfoResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMydidcommunAgencyServicetypeinfoResponse) GoString() string {
	return s.String()
}

func (s *QueryMydidcommunAgencyServicetypeinfoResponse) SetReqMsgId(v string) *QueryMydidcommunAgencyServicetypeinfoResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryMydidcommunAgencyServicetypeinfoResponse) SetResultCode(v string) *QueryMydidcommunAgencyServicetypeinfoResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryMydidcommunAgencyServicetypeinfoResponse) SetResultMsg(v string) *QueryMydidcommunAgencyServicetypeinfoResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryMydidcommunAgencyServicetypeinfoResponse) SetMethod(v string) *QueryMydidcommunAgencyServicetypeinfoResponse {
	s.Method = &v
	return s
}

func (s *QueryMydidcommunAgencyServicetypeinfoResponse) SetName(v string) *QueryMydidcommunAgencyServicetypeinfoResponse {
	s.Name = &v
	return s
}

func (s *QueryMydidcommunAgencyServicetypeinfoResponse) SetServiceModel(v string) *QueryMydidcommunAgencyServicetypeinfoResponse {
	s.ServiceModel = &v
	return s
}

func (s *QueryMydidcommunAgencyServicetypeinfoResponse) SetVersion(v int64) *QueryMydidcommunAgencyServicetypeinfoResponse {
	s.Version = &v
	return s
}

func (s *QueryMydidcommunAgencyServicetypeinfoResponse) SetPublicKey(v string) *QueryMydidcommunAgencyServicetypeinfoResponse {
	s.PublicKey = &v
	return s
}

type QueryMydidcommunAgencyTaskresultfileRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 文件在数据隐私服务中标示
	FileMark *string `json:"file_mark,omitempty" xml:"file_mark,omitempty" require:"true"`
	// 结果文件拥有者did
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
}

func (s QueryMydidcommunAgencyTaskresultfileRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMydidcommunAgencyTaskresultfileRequest) GoString() string {
	return s.String()
}

func (s *QueryMydidcommunAgencyTaskresultfileRequest) SetAuthToken(v string) *QueryMydidcommunAgencyTaskresultfileRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryMydidcommunAgencyTaskresultfileRequest) SetProductInstanceId(v string) *QueryMydidcommunAgencyTaskresultfileRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryMydidcommunAgencyTaskresultfileRequest) SetFileMark(v string) *QueryMydidcommunAgencyTaskresultfileRequest {
	s.FileMark = &v
	return s
}

func (s *QueryMydidcommunAgencyTaskresultfileRequest) SetDid(v string) *QueryMydidcommunAgencyTaskresultfileRequest {
	s.Did = &v
	return s
}

type QueryMydidcommunAgencyTaskresultfileResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 文件临时路径
	FileUrl *string `json:"file_url,omitempty" xml:"file_url,omitempty"`
}

func (s QueryMydidcommunAgencyTaskresultfileResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMydidcommunAgencyTaskresultfileResponse) GoString() string {
	return s.String()
}

func (s *QueryMydidcommunAgencyTaskresultfileResponse) SetReqMsgId(v string) *QueryMydidcommunAgencyTaskresultfileResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryMydidcommunAgencyTaskresultfileResponse) SetResultCode(v string) *QueryMydidcommunAgencyTaskresultfileResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryMydidcommunAgencyTaskresultfileResponse) SetResultMsg(v string) *QueryMydidcommunAgencyTaskresultfileResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryMydidcommunAgencyTaskresultfileResponse) SetFileUrl(v string) *QueryMydidcommunAgencyTaskresultfileResponse {
	s.FileUrl = &v
	return s
}

type ApplyMydidcommunTaskServicetypeRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 需要被授权人的DID
	TargetDid *string `json:"target_did,omitempty" xml:"target_did,omitempty" require:"true"`
	// 申请发起人的DID
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 需要被授权使用的服务类型
	ServiceType *string `json:"service_type,omitempty" xml:"service_type,omitempty" require:"true"`
}

func (s ApplyMydidcommunTaskServicetypeRequest) String() string {
	return tea.Prettify(s)
}

func (s ApplyMydidcommunTaskServicetypeRequest) GoString() string {
	return s.String()
}

func (s *ApplyMydidcommunTaskServicetypeRequest) SetAuthToken(v string) *ApplyMydidcommunTaskServicetypeRequest {
	s.AuthToken = &v
	return s
}

func (s *ApplyMydidcommunTaskServicetypeRequest) SetProductInstanceId(v string) *ApplyMydidcommunTaskServicetypeRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ApplyMydidcommunTaskServicetypeRequest) SetTargetDid(v string) *ApplyMydidcommunTaskServicetypeRequest {
	s.TargetDid = &v
	return s
}

func (s *ApplyMydidcommunTaskServicetypeRequest) SetDid(v string) *ApplyMydidcommunTaskServicetypeRequest {
	s.Did = &v
	return s
}

func (s *ApplyMydidcommunTaskServicetypeRequest) SetServiceType(v string) *ApplyMydidcommunTaskServicetypeRequest {
	s.ServiceType = &v
	return s
}

type ApplyMydidcommunTaskServicetypeResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 用于查询异步处理流程的任务ID
	TaskId *string `json:"task_id,omitempty" xml:"task_id,omitempty"`
}

func (s ApplyMydidcommunTaskServicetypeResponse) String() string {
	return tea.Prettify(s)
}

func (s ApplyMydidcommunTaskServicetypeResponse) GoString() string {
	return s.String()
}

func (s *ApplyMydidcommunTaskServicetypeResponse) SetReqMsgId(v string) *ApplyMydidcommunTaskServicetypeResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ApplyMydidcommunTaskServicetypeResponse) SetResultCode(v string) *ApplyMydidcommunTaskServicetypeResponse {
	s.ResultCode = &v
	return s
}

func (s *ApplyMydidcommunTaskServicetypeResponse) SetResultMsg(v string) *ApplyMydidcommunTaskServicetypeResponse {
	s.ResultMsg = &v
	return s
}

func (s *ApplyMydidcommunTaskServicetypeResponse) SetTaskId(v string) *ApplyMydidcommunTaskServicetypeResponse {
	s.TaskId = &v
	return s
}

type GetMydidcommunTaskTaskresultRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 任务ID
	TaskId *string `json:"task_id,omitempty" xml:"task_id,omitempty" require:"true"`
	// 申请人did（只有任务发起人才能查询执行结果）
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
}

func (s GetMydidcommunTaskTaskresultRequest) String() string {
	return tea.Prettify(s)
}

func (s GetMydidcommunTaskTaskresultRequest) GoString() string {
	return s.String()
}

func (s *GetMydidcommunTaskTaskresultRequest) SetAuthToken(v string) *GetMydidcommunTaskTaskresultRequest {
	s.AuthToken = &v
	return s
}

func (s *GetMydidcommunTaskTaskresultRequest) SetProductInstanceId(v string) *GetMydidcommunTaskTaskresultRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *GetMydidcommunTaskTaskresultRequest) SetTaskId(v string) *GetMydidcommunTaskTaskresultRequest {
	s.TaskId = &v
	return s
}

func (s *GetMydidcommunTaskTaskresultRequest) SetDid(v string) *GetMydidcommunTaskTaskresultRequest {
	s.Did = &v
	return s
}

type GetMydidcommunTaskTaskresultResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 任务ID
	TaskId *string `json:"task_id,omitempty" xml:"task_id,omitempty"`
	// FINISH 执行成功
	// CANCEL 执行失败
	// 只有FINISH 和CANCEL为最终状态，其他均为中间状态
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// json序列化后的，任务执行结果，对不同的任务格式会有不同
	// 如：
	// - 代理VC的任务，返回值结构为{"vc":"1111111"}
	// - 获取数据的任务，返回值结构为{"response":{"output":"xxxx","status":"FINISH"}}
	DataResult *string `json:"data_result,omitempty" xml:"data_result,omitempty"`
}

func (s GetMydidcommunTaskTaskresultResponse) String() string {
	return tea.Prettify(s)
}

func (s GetMydidcommunTaskTaskresultResponse) GoString() string {
	return s.String()
}

func (s *GetMydidcommunTaskTaskresultResponse) SetReqMsgId(v string) *GetMydidcommunTaskTaskresultResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetMydidcommunTaskTaskresultResponse) SetResultCode(v string) *GetMydidcommunTaskTaskresultResponse {
	s.ResultCode = &v
	return s
}

func (s *GetMydidcommunTaskTaskresultResponse) SetResultMsg(v string) *GetMydidcommunTaskTaskresultResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetMydidcommunTaskTaskresultResponse) SetTaskId(v string) *GetMydidcommunTaskTaskresultResponse {
	s.TaskId = &v
	return s
}

func (s *GetMydidcommunTaskTaskresultResponse) SetStatus(v string) *GetMydidcommunTaskTaskresultResponse {
	s.Status = &v
	return s
}

func (s *GetMydidcommunTaskTaskresultResponse) SetDataResult(v string) *GetMydidcommunTaskTaskresultResponse {
	s.DataResult = &v
	return s
}

type AddMydidcommunAssetDataRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 数据实际存储路径
	DataPath *string `json:"data_path,omitempty" xml:"data_path,omitempty" require:"true"`
	// 请求发起人的did
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 所注册的资产所有者DID，要注意资产所有者DID需与授权发起方DID相同
	OwnerDid *string `json:"owner_did,omitempty" xml:"owner_did,omitempty" require:"true"`
	// 数据所对应的业务类型
	ServiceType *string `json:"service_type,omitempty" xml:"service_type,omitempty" require:"true"`
	// 临时字段，数据文件的md5哈希值，在隐私服务无法直接读取数据时，由用户提供
	DataHash *string `json:"data_hash,omitempty" xml:"data_hash,omitempty"`
}

func (s AddMydidcommunAssetDataRequest) String() string {
	return tea.Prettify(s)
}

func (s AddMydidcommunAssetDataRequest) GoString() string {
	return s.String()
}

func (s *AddMydidcommunAssetDataRequest) SetAuthToken(v string) *AddMydidcommunAssetDataRequest {
	s.AuthToken = &v
	return s
}

func (s *AddMydidcommunAssetDataRequest) SetProductInstanceId(v string) *AddMydidcommunAssetDataRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *AddMydidcommunAssetDataRequest) SetDataPath(v string) *AddMydidcommunAssetDataRequest {
	s.DataPath = &v
	return s
}

func (s *AddMydidcommunAssetDataRequest) SetDid(v string) *AddMydidcommunAssetDataRequest {
	s.Did = &v
	return s
}

func (s *AddMydidcommunAssetDataRequest) SetOwnerDid(v string) *AddMydidcommunAssetDataRequest {
	s.OwnerDid = &v
	return s
}

func (s *AddMydidcommunAssetDataRequest) SetServiceType(v string) *AddMydidcommunAssetDataRequest {
	s.ServiceType = &v
	return s
}

func (s *AddMydidcommunAssetDataRequest) SetDataHash(v string) *AddMydidcommunAssetDataRequest {
	s.DataHash = &v
	return s
}

type AddMydidcommunAssetDataResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 数据DID，用于唯一标示数据
	DataDid *string `json:"data_did,omitempty" xml:"data_did,omitempty"`
}

func (s AddMydidcommunAssetDataResponse) String() string {
	return tea.Prettify(s)
}

func (s AddMydidcommunAssetDataResponse) GoString() string {
	return s.String()
}

func (s *AddMydidcommunAssetDataResponse) SetReqMsgId(v string) *AddMydidcommunAssetDataResponse {
	s.ReqMsgId = &v
	return s
}

func (s *AddMydidcommunAssetDataResponse) SetResultCode(v string) *AddMydidcommunAssetDataResponse {
	s.ResultCode = &v
	return s
}

func (s *AddMydidcommunAssetDataResponse) SetResultMsg(v string) *AddMydidcommunAssetDataResponse {
	s.ResultMsg = &v
	return s
}

func (s *AddMydidcommunAssetDataResponse) SetDataDid(v string) *AddMydidcommunAssetDataResponse {
	s.DataDid = &v
	return s
}

type StartMydidcommunTaskGetdataRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 要获取的数据ID
	DataDid *string `json:"data_did,omitempty" xml:"data_did,omitempty" require:"true"`
	// 申请获得的数据的用户DID，将用该DID公钥加密原始数据
	TargetDid *string `json:"target_did,omitempty" xml:"target_did,omitempty" require:"true"`
	// 授权数据申请方读取该数据的VC
	Vc *string `json:"vc,omitempty" xml:"vc,omitempty" require:"true"`
	// 请求发起人的did
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
}

func (s StartMydidcommunTaskGetdataRequest) String() string {
	return tea.Prettify(s)
}

func (s StartMydidcommunTaskGetdataRequest) GoString() string {
	return s.String()
}

func (s *StartMydidcommunTaskGetdataRequest) SetAuthToken(v string) *StartMydidcommunTaskGetdataRequest {
	s.AuthToken = &v
	return s
}

func (s *StartMydidcommunTaskGetdataRequest) SetProductInstanceId(v string) *StartMydidcommunTaskGetdataRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *StartMydidcommunTaskGetdataRequest) SetDataDid(v string) *StartMydidcommunTaskGetdataRequest {
	s.DataDid = &v
	return s
}

func (s *StartMydidcommunTaskGetdataRequest) SetTargetDid(v string) *StartMydidcommunTaskGetdataRequest {
	s.TargetDid = &v
	return s
}

func (s *StartMydidcommunTaskGetdataRequest) SetVc(v string) *StartMydidcommunTaskGetdataRequest {
	s.Vc = &v
	return s
}

func (s *StartMydidcommunTaskGetdataRequest) SetDid(v string) *StartMydidcommunTaskGetdataRequest {
	s.Did = &v
	return s
}

type StartMydidcommunTaskGetdataResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 对应任务的ID
	TaskId *string `json:"task_id,omitempty" xml:"task_id,omitempty"`
}

func (s StartMydidcommunTaskGetdataResponse) String() string {
	return tea.Prettify(s)
}

func (s StartMydidcommunTaskGetdataResponse) GoString() string {
	return s.String()
}

func (s *StartMydidcommunTaskGetdataResponse) SetReqMsgId(v string) *StartMydidcommunTaskGetdataResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartMydidcommunTaskGetdataResponse) SetResultCode(v string) *StartMydidcommunTaskGetdataResponse {
	s.ResultCode = &v
	return s
}

func (s *StartMydidcommunTaskGetdataResponse) SetResultMsg(v string) *StartMydidcommunTaskGetdataResponse {
	s.ResultMsg = &v
	return s
}

func (s *StartMydidcommunTaskGetdataResponse) SetTaskId(v string) *StartMydidcommunTaskGetdataResponse {
	s.TaskId = &v
	return s
}

type StartMydidcommunInstitutionSettleinRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 入驻时选择的业务码，这个码需要在机构入驻时与数据隐私服务确认之后填写
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
	// 机构唯一编号
	InstitiutionNo *string `json:"institiution_no,omitempty" xml:"institiution_no,omitempty"`
	// 机构实际名称
	InstitutionName *string `json:"institution_name,omitempty" xml:"institution_name,omitempty" require:"true"`
	// 接受数据隐私服务回调通知的URL，如果地址是https的，那么该地址必须提供有效的证书
	NotificationUrl *string `json:"notification_url,omitempty" xml:"notification_url,omitempty"`
	// 机构和数据隐私服务进行通讯的非对称密钥对中的公钥
	PublicKey *string `json:"public_key,omitempty" xml:"public_key,omitempty" require:"true"`
	// 恢复密钥公钥，可用于以后修改通讯公钥用，不要和通讯公钥一样
	RecoverKey *string `json:"recover_key,omitempty" xml:"recover_key,omitempty" require:"true"`
}

func (s StartMydidcommunInstitutionSettleinRequest) String() string {
	return tea.Prettify(s)
}

func (s StartMydidcommunInstitutionSettleinRequest) GoString() string {
	return s.String()
}

func (s *StartMydidcommunInstitutionSettleinRequest) SetAuthToken(v string) *StartMydidcommunInstitutionSettleinRequest {
	s.AuthToken = &v
	return s
}

func (s *StartMydidcommunInstitutionSettleinRequest) SetProductInstanceId(v string) *StartMydidcommunInstitutionSettleinRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *StartMydidcommunInstitutionSettleinRequest) SetBizCode(v string) *StartMydidcommunInstitutionSettleinRequest {
	s.BizCode = &v
	return s
}

func (s *StartMydidcommunInstitutionSettleinRequest) SetInstitiutionNo(v string) *StartMydidcommunInstitutionSettleinRequest {
	s.InstitiutionNo = &v
	return s
}

func (s *StartMydidcommunInstitutionSettleinRequest) SetInstitutionName(v string) *StartMydidcommunInstitutionSettleinRequest {
	s.InstitutionName = &v
	return s
}

func (s *StartMydidcommunInstitutionSettleinRequest) SetNotificationUrl(v string) *StartMydidcommunInstitutionSettleinRequest {
	s.NotificationUrl = &v
	return s
}

func (s *StartMydidcommunInstitutionSettleinRequest) SetPublicKey(v string) *StartMydidcommunInstitutionSettleinRequest {
	s.PublicKey = &v
	return s
}

func (s *StartMydidcommunInstitutionSettleinRequest) SetRecoverKey(v string) *StartMydidcommunInstitutionSettleinRequest {
	s.RecoverKey = &v
	return s
}

type StartMydidcommunInstitutionSettleinResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 机构入驻后，会为其分配唯一的区块链数字身份，这里是数字身份的ID，后续接口都需要用这个id作为参数
	Did *string `json:"did,omitempty" xml:"did,omitempty"`
	// 是对数字身份did的描述，主要包括通讯公钥，和恢复公钥，以及会调url
	Doc *string `json:"doc,omitempty" xml:"doc,omitempty"`
}

func (s StartMydidcommunInstitutionSettleinResponse) String() string {
	return tea.Prettify(s)
}

func (s StartMydidcommunInstitutionSettleinResponse) GoString() string {
	return s.String()
}

func (s *StartMydidcommunInstitutionSettleinResponse) SetReqMsgId(v string) *StartMydidcommunInstitutionSettleinResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartMydidcommunInstitutionSettleinResponse) SetResultCode(v string) *StartMydidcommunInstitutionSettleinResponse {
	s.ResultCode = &v
	return s
}

func (s *StartMydidcommunInstitutionSettleinResponse) SetResultMsg(v string) *StartMydidcommunInstitutionSettleinResponse {
	s.ResultMsg = &v
	return s
}

func (s *StartMydidcommunInstitutionSettleinResponse) SetDid(v string) *StartMydidcommunInstitutionSettleinResponse {
	s.Did = &v
	return s
}

func (s *StartMydidcommunInstitutionSettleinResponse) SetDoc(v string) *StartMydidcommunInstitutionSettleinResponse {
	s.Doc = &v
	return s
}

type GetMydidcommunWorkergroupSyncRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 计算集群群组代号
	GroupCode *string `json:"group_code,omitempty" xml:"group_code,omitempty" require:"true"`
	// 环境名称
	Env *string `json:"env,omitempty" xml:"env,omitempty" require:"true"`
	// 主节点
	MasterNode *string `json:"master_node,omitempty" xml:"master_node,omitempty" require:"true"`
}

func (s GetMydidcommunWorkergroupSyncRequest) String() string {
	return tea.Prettify(s)
}

func (s GetMydidcommunWorkergroupSyncRequest) GoString() string {
	return s.String()
}

func (s *GetMydidcommunWorkergroupSyncRequest) SetAuthToken(v string) *GetMydidcommunWorkergroupSyncRequest {
	s.AuthToken = &v
	return s
}

func (s *GetMydidcommunWorkergroupSyncRequest) SetProductInstanceId(v string) *GetMydidcommunWorkergroupSyncRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *GetMydidcommunWorkergroupSyncRequest) SetGroupCode(v string) *GetMydidcommunWorkergroupSyncRequest {
	s.GroupCode = &v
	return s
}

func (s *GetMydidcommunWorkergroupSyncRequest) SetEnv(v string) *GetMydidcommunWorkergroupSyncRequest {
	s.Env = &v
	return s
}

func (s *GetMydidcommunWorkergroupSyncRequest) SetMasterNode(v string) *GetMydidcommunWorkergroupSyncRequest {
	s.MasterNode = &v
	return s
}

type GetMydidcommunWorkergroupSyncResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 序列化后的同步任务
	Data *string `json:"data,omitempty" xml:"data,omitempty"`
}

func (s GetMydidcommunWorkergroupSyncResponse) String() string {
	return tea.Prettify(s)
}

func (s GetMydidcommunWorkergroupSyncResponse) GoString() string {
	return s.String()
}

func (s *GetMydidcommunWorkergroupSyncResponse) SetReqMsgId(v string) *GetMydidcommunWorkergroupSyncResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetMydidcommunWorkergroupSyncResponse) SetResultCode(v string) *GetMydidcommunWorkergroupSyncResponse {
	s.ResultCode = &v
	return s
}

func (s *GetMydidcommunWorkergroupSyncResponse) SetResultMsg(v string) *GetMydidcommunWorkergroupSyncResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetMydidcommunWorkergroupSyncResponse) SetData(v string) *GetMydidcommunWorkergroupSyncResponse {
	s.Data = &v
	return s
}

type GetMydidcommunWorkergroupPodRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 部署ID
	PodId *int64 `json:"pod_id,omitempty" xml:"pod_id,omitempty" require:"true"`
}

func (s GetMydidcommunWorkergroupPodRequest) String() string {
	return tea.Prettify(s)
}

func (s GetMydidcommunWorkergroupPodRequest) GoString() string {
	return s.String()
}

func (s *GetMydidcommunWorkergroupPodRequest) SetAuthToken(v string) *GetMydidcommunWorkergroupPodRequest {
	s.AuthToken = &v
	return s
}

func (s *GetMydidcommunWorkergroupPodRequest) SetProductInstanceId(v string) *GetMydidcommunWorkergroupPodRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *GetMydidcommunWorkergroupPodRequest) SetPodId(v int64) *GetMydidcommunWorkergroupPodRequest {
	s.PodId = &v
	return s
}

type GetMydidcommunWorkergroupPodResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 序列化后的部署
	Data *string `json:"data,omitempty" xml:"data,omitempty"`
}

func (s GetMydidcommunWorkergroupPodResponse) String() string {
	return tea.Prettify(s)
}

func (s GetMydidcommunWorkergroupPodResponse) GoString() string {
	return s.String()
}

func (s *GetMydidcommunWorkergroupPodResponse) SetReqMsgId(v string) *GetMydidcommunWorkergroupPodResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetMydidcommunWorkergroupPodResponse) SetResultCode(v string) *GetMydidcommunWorkergroupPodResponse {
	s.ResultCode = &v
	return s
}

func (s *GetMydidcommunWorkergroupPodResponse) SetResultMsg(v string) *GetMydidcommunWorkergroupPodResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetMydidcommunWorkergroupPodResponse) SetData(v string) *GetMydidcommunWorkergroupPodResponse {
	s.Data = &v
	return s
}

type FinishMydidcommunWorkergroupSyncRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 部署ID
	PodId *int64 `json:"pod_id,omitempty" xml:"pod_id,omitempty" require:"true"`
	// 任务ID
	TaskId *int64 `json:"task_id,omitempty" xml:"task_id,omitempty" require:"true"`
	// 是否同步成功
	IsSuccess *bool `json:"is_success,omitempty" xml:"is_success,omitempty" require:"true"`
	// 处理消息
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
	// 负责更新的节点名
	MasterNode *string `json:"master_node,omitempty" xml:"master_node,omitempty" require:"true"`
}

func (s FinishMydidcommunWorkergroupSyncRequest) String() string {
	return tea.Prettify(s)
}

func (s FinishMydidcommunWorkergroupSyncRequest) GoString() string {
	return s.String()
}

func (s *FinishMydidcommunWorkergroupSyncRequest) SetAuthToken(v string) *FinishMydidcommunWorkergroupSyncRequest {
	s.AuthToken = &v
	return s
}

func (s *FinishMydidcommunWorkergroupSyncRequest) SetProductInstanceId(v string) *FinishMydidcommunWorkergroupSyncRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *FinishMydidcommunWorkergroupSyncRequest) SetPodId(v int64) *FinishMydidcommunWorkergroupSyncRequest {
	s.PodId = &v
	return s
}

func (s *FinishMydidcommunWorkergroupSyncRequest) SetTaskId(v int64) *FinishMydidcommunWorkergroupSyncRequest {
	s.TaskId = &v
	return s
}

func (s *FinishMydidcommunWorkergroupSyncRequest) SetIsSuccess(v bool) *FinishMydidcommunWorkergroupSyncRequest {
	s.IsSuccess = &v
	return s
}

func (s *FinishMydidcommunWorkergroupSyncRequest) SetMsg(v string) *FinishMydidcommunWorkergroupSyncRequest {
	s.Msg = &v
	return s
}

func (s *FinishMydidcommunWorkergroupSyncRequest) SetMasterNode(v string) *FinishMydidcommunWorkergroupSyncRequest {
	s.MasterNode = &v
	return s
}

type FinishMydidcommunWorkergroupSyncResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s FinishMydidcommunWorkergroupSyncResponse) String() string {
	return tea.Prettify(s)
}

func (s FinishMydidcommunWorkergroupSyncResponse) GoString() string {
	return s.String()
}

func (s *FinishMydidcommunWorkergroupSyncResponse) SetReqMsgId(v string) *FinishMydidcommunWorkergroupSyncResponse {
	s.ReqMsgId = &v
	return s
}

func (s *FinishMydidcommunWorkergroupSyncResponse) SetResultCode(v string) *FinishMydidcommunWorkergroupSyncResponse {
	s.ResultCode = &v
	return s
}

func (s *FinishMydidcommunWorkergroupSyncResponse) SetResultMsg(v string) *FinishMydidcommunWorkergroupSyncResponse {
	s.ResultMsg = &v
	return s
}

type GetMydidcommunWorkergroupTappRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// TAPPInstance所对应的部署ID
	PodId *int64 `json:"pod_id,omitempty" xml:"pod_id,omitempty" require:"true"`
}

func (s GetMydidcommunWorkergroupTappRequest) String() string {
	return tea.Prettify(s)
}

func (s GetMydidcommunWorkergroupTappRequest) GoString() string {
	return s.String()
}

func (s *GetMydidcommunWorkergroupTappRequest) SetAuthToken(v string) *GetMydidcommunWorkergroupTappRequest {
	s.AuthToken = &v
	return s
}

func (s *GetMydidcommunWorkergroupTappRequest) SetProductInstanceId(v string) *GetMydidcommunWorkergroupTappRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *GetMydidcommunWorkergroupTappRequest) SetPodId(v int64) *GetMydidcommunWorkergroupTappRequest {
	s.PodId = &v
	return s
}

type GetMydidcommunWorkergroupTappResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// TAPP部署详情
	Data *string `json:"data,omitempty" xml:"data,omitempty"`
}

func (s GetMydidcommunWorkergroupTappResponse) String() string {
	return tea.Prettify(s)
}

func (s GetMydidcommunWorkergroupTappResponse) GoString() string {
	return s.String()
}

func (s *GetMydidcommunWorkergroupTappResponse) SetReqMsgId(v string) *GetMydidcommunWorkergroupTappResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetMydidcommunWorkergroupTappResponse) SetResultCode(v string) *GetMydidcommunWorkergroupTappResponse {
	s.ResultCode = &v
	return s
}

func (s *GetMydidcommunWorkergroupTappResponse) SetResultMsg(v string) *GetMydidcommunWorkergroupTappResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetMydidcommunWorkergroupTappResponse) SetData(v string) *GetMydidcommunWorkergroupTappResponse {
	s.Data = &v
	return s
}

type UpdateMydidcommunWorkergroupTappRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// TAPP部署实例ID
	TappInstanceId *int64 `json:"tapp_instance_id,omitempty" xml:"tapp_instance_id,omitempty" require:"true"`
	// TAPP部署公钥
	PublicKey *string `json:"public_key,omitempty" xml:"public_key,omitempty" require:"true"`
	// TAPP部署在mytf中的版本号
	TappVersion *int64 `json:"tapp_version,omitempty" xml:"tapp_version,omitempty" require:"true"`
	// mytf部署后返回的TAPP哈希
	Hash *string `json:"hash,omitempty" xml:"hash,omitempty" require:"true"`
}

func (s UpdateMydidcommunWorkergroupTappRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateMydidcommunWorkergroupTappRequest) GoString() string {
	return s.String()
}

func (s *UpdateMydidcommunWorkergroupTappRequest) SetAuthToken(v string) *UpdateMydidcommunWorkergroupTappRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateMydidcommunWorkergroupTappRequest) SetProductInstanceId(v string) *UpdateMydidcommunWorkergroupTappRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UpdateMydidcommunWorkergroupTappRequest) SetTappInstanceId(v int64) *UpdateMydidcommunWorkergroupTappRequest {
	s.TappInstanceId = &v
	return s
}

func (s *UpdateMydidcommunWorkergroupTappRequest) SetPublicKey(v string) *UpdateMydidcommunWorkergroupTappRequest {
	s.PublicKey = &v
	return s
}

func (s *UpdateMydidcommunWorkergroupTappRequest) SetTappVersion(v int64) *UpdateMydidcommunWorkergroupTappRequest {
	s.TappVersion = &v
	return s
}

func (s *UpdateMydidcommunWorkergroupTappRequest) SetHash(v string) *UpdateMydidcommunWorkergroupTappRequest {
	s.Hash = &v
	return s
}

type UpdateMydidcommunWorkergroupTappResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateMydidcommunWorkergroupTappResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateMydidcommunWorkergroupTappResponse) GoString() string {
	return s.String()
}

func (s *UpdateMydidcommunWorkergroupTappResponse) SetReqMsgId(v string) *UpdateMydidcommunWorkergroupTappResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateMydidcommunWorkergroupTappResponse) SetResultCode(v string) *UpdateMydidcommunWorkergroupTappResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateMydidcommunWorkergroupTappResponse) SetResultMsg(v string) *UpdateMydidcommunWorkergroupTappResponse {
	s.ResultMsg = &v
	return s
}

type QueryMydidcommunWorkergroupWorkflowRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 工作流对应的部署Id
	PodId *int64 `json:"pod_id,omitempty" xml:"pod_id,omitempty" require:"true"`
	// 版本号
	PodVersion *int64 `json:"pod_version,omitempty" xml:"pod_version,omitempty" require:"true"`
}

func (s QueryMydidcommunWorkergroupWorkflowRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMydidcommunWorkergroupWorkflowRequest) GoString() string {
	return s.String()
}

func (s *QueryMydidcommunWorkergroupWorkflowRequest) SetAuthToken(v string) *QueryMydidcommunWorkergroupWorkflowRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryMydidcommunWorkergroupWorkflowRequest) SetProductInstanceId(v string) *QueryMydidcommunWorkergroupWorkflowRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryMydidcommunWorkergroupWorkflowRequest) SetPodId(v int64) *QueryMydidcommunWorkergroupWorkflowRequest {
	s.PodId = &v
	return s
}

func (s *QueryMydidcommunWorkergroupWorkflowRequest) SetPodVersion(v int64) *QueryMydidcommunWorkergroupWorkflowRequest {
	s.PodVersion = &v
	return s
}

type QueryMydidcommunWorkergroupWorkflowResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 工作流配置
	Data *string `json:"data,omitempty" xml:"data,omitempty"`
}

func (s QueryMydidcommunWorkergroupWorkflowResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMydidcommunWorkergroupWorkflowResponse) GoString() string {
	return s.String()
}

func (s *QueryMydidcommunWorkergroupWorkflowResponse) SetReqMsgId(v string) *QueryMydidcommunWorkergroupWorkflowResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryMydidcommunWorkergroupWorkflowResponse) SetResultCode(v string) *QueryMydidcommunWorkergroupWorkflowResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryMydidcommunWorkergroupWorkflowResponse) SetResultMsg(v string) *QueryMydidcommunWorkergroupWorkflowResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryMydidcommunWorkergroupWorkflowResponse) SetData(v string) *QueryMydidcommunWorkergroupWorkflowResponse {
	s.Data = &v
	return s
}

type SyncMydidcommunWorkergroupGroupRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 计算集群明称
	WorkerGroup *string `json:"worker_group,omitempty" xml:"worker_group,omitempty" require:"true"`
	// 计算集群环境
	Env *string `json:"env,omitempty" xml:"env,omitempty" require:"true"`
	// 执行状态上报
	Metrics *string `json:"metrics,omitempty" xml:"metrics,omitempty" require:"true"`
	// 执行器code
	ExecutorList []*string `json:"executor_list,omitempty" xml:"executor_list,omitempty" require:"true" type:"Repeated"`
	// 主节点名
	MasterNode *string `json:"master_node,omitempty" xml:"master_node,omitempty" require:"true"`
}

func (s SyncMydidcommunWorkergroupGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s SyncMydidcommunWorkergroupGroupRequest) GoString() string {
	return s.String()
}

func (s *SyncMydidcommunWorkergroupGroupRequest) SetAuthToken(v string) *SyncMydidcommunWorkergroupGroupRequest {
	s.AuthToken = &v
	return s
}

func (s *SyncMydidcommunWorkergroupGroupRequest) SetProductInstanceId(v string) *SyncMydidcommunWorkergroupGroupRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *SyncMydidcommunWorkergroupGroupRequest) SetWorkerGroup(v string) *SyncMydidcommunWorkergroupGroupRequest {
	s.WorkerGroup = &v
	return s
}

func (s *SyncMydidcommunWorkergroupGroupRequest) SetEnv(v string) *SyncMydidcommunWorkergroupGroupRequest {
	s.Env = &v
	return s
}

func (s *SyncMydidcommunWorkergroupGroupRequest) SetMetrics(v string) *SyncMydidcommunWorkergroupGroupRequest {
	s.Metrics = &v
	return s
}

func (s *SyncMydidcommunWorkergroupGroupRequest) SetExecutorList(v []*string) *SyncMydidcommunWorkergroupGroupRequest {
	s.ExecutorList = v
	return s
}

func (s *SyncMydidcommunWorkergroupGroupRequest) SetMasterNode(v string) *SyncMydidcommunWorkergroupGroupRequest {
	s.MasterNode = &v
	return s
}

type SyncMydidcommunWorkergroupGroupResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s SyncMydidcommunWorkergroupGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s SyncMydidcommunWorkergroupGroupResponse) GoString() string {
	return s.String()
}

func (s *SyncMydidcommunWorkergroupGroupResponse) SetReqMsgId(v string) *SyncMydidcommunWorkergroupGroupResponse {
	s.ReqMsgId = &v
	return s
}

func (s *SyncMydidcommunWorkergroupGroupResponse) SetResultCode(v string) *SyncMydidcommunWorkergroupGroupResponse {
	s.ResultCode = &v
	return s
}

func (s *SyncMydidcommunWorkergroupGroupResponse) SetResultMsg(v string) *SyncMydidcommunWorkergroupGroupResponse {
	s.ResultMsg = &v
	return s
}

type ListMydidcommunWorkergroupPodversionRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 部署id
	PodId *int64 `json:"pod_id,omitempty" xml:"pod_id,omitempty" require:"true"`
}

func (s ListMydidcommunWorkergroupPodversionRequest) String() string {
	return tea.Prettify(s)
}

func (s ListMydidcommunWorkergroupPodversionRequest) GoString() string {
	return s.String()
}

func (s *ListMydidcommunWorkergroupPodversionRequest) SetAuthToken(v string) *ListMydidcommunWorkergroupPodversionRequest {
	s.AuthToken = &v
	return s
}

func (s *ListMydidcommunWorkergroupPodversionRequest) SetProductInstanceId(v string) *ListMydidcommunWorkergroupPodversionRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ListMydidcommunWorkergroupPodversionRequest) SetPodId(v int64) *ListMydidcommunWorkergroupPodversionRequest {
	s.PodId = &v
	return s
}

type ListMydidcommunWorkergroupPodversionResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 版本列表
	Data *string `json:"data,omitempty" xml:"data,omitempty"`
}

func (s ListMydidcommunWorkergroupPodversionResponse) String() string {
	return tea.Prettify(s)
}

func (s ListMydidcommunWorkergroupPodversionResponse) GoString() string {
	return s.String()
}

func (s *ListMydidcommunWorkergroupPodversionResponse) SetReqMsgId(v string) *ListMydidcommunWorkergroupPodversionResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListMydidcommunWorkergroupPodversionResponse) SetResultCode(v string) *ListMydidcommunWorkergroupPodversionResponse {
	s.ResultCode = &v
	return s
}

func (s *ListMydidcommunWorkergroupPodversionResponse) SetResultMsg(v string) *ListMydidcommunWorkergroupPodversionResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListMydidcommunWorkergroupPodversionResponse) SetData(v string) *ListMydidcommunWorkergroupPodversionResponse {
	s.Data = &v
	return s
}

type SaveMydidIdaasDidserviceRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// uuid
	Uuid *string `json:"uuid,omitempty" xml:"uuid,omitempty" require:"true"`
}

func (s SaveMydidIdaasDidserviceRequest) String() string {
	return tea.Prettify(s)
}

func (s SaveMydidIdaasDidserviceRequest) GoString() string {
	return s.String()
}

func (s *SaveMydidIdaasDidserviceRequest) SetAuthToken(v string) *SaveMydidIdaasDidserviceRequest {
	s.AuthToken = &v
	return s
}

func (s *SaveMydidIdaasDidserviceRequest) SetProductInstanceId(v string) *SaveMydidIdaasDidserviceRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *SaveMydidIdaasDidserviceRequest) SetUuid(v string) *SaveMydidIdaasDidserviceRequest {
	s.Uuid = &v
	return s
}

type SaveMydidIdaasDidserviceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// did
	Did *string `json:"did,omitempty" xml:"did,omitempty"`
}

func (s SaveMydidIdaasDidserviceResponse) String() string {
	return tea.Prettify(s)
}

func (s SaveMydidIdaasDidserviceResponse) GoString() string {
	return s.String()
}

func (s *SaveMydidIdaasDidserviceResponse) SetReqMsgId(v string) *SaveMydidIdaasDidserviceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *SaveMydidIdaasDidserviceResponse) SetResultCode(v string) *SaveMydidIdaasDidserviceResponse {
	s.ResultCode = &v
	return s
}

func (s *SaveMydidIdaasDidserviceResponse) SetResultMsg(v string) *SaveMydidIdaasDidserviceResponse {
	s.ResultMsg = &v
	return s
}

func (s *SaveMydidIdaasDidserviceResponse) SetDid(v string) *SaveMydidIdaasDidserviceResponse {
	s.Did = &v
	return s
}

type QueryDidNotificationDideventRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 指定关注的did
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 起始偏移量
	Offset *int64 `json:"offset,omitempty" xml:"offset,omitempty" require:"true"`
	// 场景码，找dis工作人员进行分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
}

func (s QueryDidNotificationDideventRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDidNotificationDideventRequest) GoString() string {
	return s.String()
}

func (s *QueryDidNotificationDideventRequest) SetAuthToken(v string) *QueryDidNotificationDideventRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryDidNotificationDideventRequest) SetProductInstanceId(v string) *QueryDidNotificationDideventRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryDidNotificationDideventRequest) SetDid(v string) *QueryDidNotificationDideventRequest {
	s.Did = &v
	return s
}

func (s *QueryDidNotificationDideventRequest) SetOffset(v int64) *QueryDidNotificationDideventRequest {
	s.Offset = &v
	return s
}

func (s *QueryDidNotificationDideventRequest) SetBizCode(v string) *QueryDidNotificationDideventRequest {
	s.BizCode = &v
	return s
}

type QueryDidNotificationDideventResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 相关事件列表
	Events []*DidEvent `json:"events,omitempty" xml:"events,omitempty" type:"Repeated"`
	// 是否还有待同步事件
	HasMore *bool `json:"has_more,omitempty" xml:"has_more,omitempty"`
	// 下次事件拉取开始的offset
	NextOffset *int64 `json:"next_offset,omitempty" xml:"next_offset,omitempty"`
}

func (s QueryDidNotificationDideventResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDidNotificationDideventResponse) GoString() string {
	return s.String()
}

func (s *QueryDidNotificationDideventResponse) SetReqMsgId(v string) *QueryDidNotificationDideventResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryDidNotificationDideventResponse) SetResultCode(v string) *QueryDidNotificationDideventResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryDidNotificationDideventResponse) SetResultMsg(v string) *QueryDidNotificationDideventResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryDidNotificationDideventResponse) SetEvents(v []*DidEvent) *QueryDidNotificationDideventResponse {
	s.Events = v
	return s
}

func (s *QueryDidNotificationDideventResponse) SetHasMore(v bool) *QueryDidNotificationDideventResponse {
	s.HasMore = &v
	return s
}

func (s *QueryDidNotificationDideventResponse) SetNextOffset(v int64) *QueryDidNotificationDideventResponse {
	s.NextOffset = &v
	return s
}

type QueryDidNotificationVceventRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 指定关注的did
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 开始 同步事件的起始偏移量
	Offset *int64 `json:"offset,omitempty" xml:"offset,omitempty" require:"true"`
	// 场景码，找dis工作人员进行分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
}

func (s QueryDidNotificationVceventRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDidNotificationVceventRequest) GoString() string {
	return s.String()
}

func (s *QueryDidNotificationVceventRequest) SetAuthToken(v string) *QueryDidNotificationVceventRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryDidNotificationVceventRequest) SetProductInstanceId(v string) *QueryDidNotificationVceventRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryDidNotificationVceventRequest) SetDid(v string) *QueryDidNotificationVceventRequest {
	s.Did = &v
	return s
}

func (s *QueryDidNotificationVceventRequest) SetOffset(v int64) *QueryDidNotificationVceventRequest {
	s.Offset = &v
	return s
}

func (s *QueryDidNotificationVceventRequest) SetBizCode(v string) *QueryDidNotificationVceventRequest {
	s.BizCode = &v
	return s
}

type QueryDidNotificationVceventResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// vc事件列表
	Events []*VCEvent `json:"events,omitempty" xml:"events,omitempty" type:"Repeated"`
	// 是否有更多事件待同步
	HasMore *bool `json:"has_more,omitempty" xml:"has_more,omitempty"`
	// 下次拉取事件的起始偏移量
	NextOffset *int64 `json:"next_offset,omitempty" xml:"next_offset,omitempty"`
}

func (s QueryDidNotificationVceventResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDidNotificationVceventResponse) GoString() string {
	return s.String()
}

func (s *QueryDidNotificationVceventResponse) SetReqMsgId(v string) *QueryDidNotificationVceventResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryDidNotificationVceventResponse) SetResultCode(v string) *QueryDidNotificationVceventResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryDidNotificationVceventResponse) SetResultMsg(v string) *QueryDidNotificationVceventResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryDidNotificationVceventResponse) SetEvents(v []*VCEvent) *QueryDidNotificationVceventResponse {
	s.Events = v
	return s
}

func (s *QueryDidNotificationVceventResponse) SetHasMore(v bool) *QueryDidNotificationVceventResponse {
	s.HasMore = &v
	return s
}

func (s *QueryDidNotificationVceventResponse) SetNextOffset(v int64) *QueryDidNotificationVceventResponse {
	s.NextOffset = &v
	return s
}

type QueryDidNotificationFulldidRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// did描述符
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 页数
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty" require:"true" minimum:"1"`
	// 使用使用的did私钥对传参进行签名，签名方法可以联系开发人员
	RequestSignature *string `json:"request_signature,omitempty" xml:"request_signature,omitempty" require:"true"`
	// 场景码，找dis工作人员进行分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
}

func (s QueryDidNotificationFulldidRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDidNotificationFulldidRequest) GoString() string {
	return s.String()
}

func (s *QueryDidNotificationFulldidRequest) SetAuthToken(v string) *QueryDidNotificationFulldidRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryDidNotificationFulldidRequest) SetProductInstanceId(v string) *QueryDidNotificationFulldidRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryDidNotificationFulldidRequest) SetDid(v string) *QueryDidNotificationFulldidRequest {
	s.Did = &v
	return s
}

func (s *QueryDidNotificationFulldidRequest) SetPageNum(v int64) *QueryDidNotificationFulldidRequest {
	s.PageNum = &v
	return s
}

func (s *QueryDidNotificationFulldidRequest) SetRequestSignature(v string) *QueryDidNotificationFulldidRequest {
	s.RequestSignature = &v
	return s
}

func (s *QueryDidNotificationFulldidRequest) SetBizCode(v string) *QueryDidNotificationFulldidRequest {
	s.BizCode = &v
	return s
}

type QueryDidNotificationFulldidResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// did详情
	List []*DidDetail `json:"list,omitempty" xml:"list,omitempty" type:"Repeated"`
	// 总体数量
	TotalNum *int64 `json:"total_num,omitempty" xml:"total_num,omitempty"`
	// 总页数
	TotalPage *int64 `json:"total_page,omitempty" xml:"total_page,omitempty"`
}

func (s QueryDidNotificationFulldidResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDidNotificationFulldidResponse) GoString() string {
	return s.String()
}

func (s *QueryDidNotificationFulldidResponse) SetReqMsgId(v string) *QueryDidNotificationFulldidResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryDidNotificationFulldidResponse) SetResultCode(v string) *QueryDidNotificationFulldidResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryDidNotificationFulldidResponse) SetResultMsg(v string) *QueryDidNotificationFulldidResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryDidNotificationFulldidResponse) SetList(v []*DidDetail) *QueryDidNotificationFulldidResponse {
	s.List = v
	return s
}

func (s *QueryDidNotificationFulldidResponse) SetTotalNum(v int64) *QueryDidNotificationFulldidResponse {
	s.TotalNum = &v
	return s
}

func (s *QueryDidNotificationFulldidResponse) SetTotalPage(v int64) *QueryDidNotificationFulldidResponse {
	s.TotalPage = &v
	return s
}

type CreateDidIdentityCorporateRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 扩展字段
	ExtensionInfo *string `json:"extension_info,omitempty" xml:"extension_info,omitempty"`
	// 公钥
	PublicKey *string `json:"public_key,omitempty" xml:"public_key,omitempty" require:"true"`
	// 恢复公钥
	RecoveryKey *string `json:"recovery_key,omitempty" xml:"recovery_key,omitempty" require:"true"`
	// uid
	UserId *string `json:"user_id,omitempty" xml:"user_id,omitempty" require:"true"`
	// 持有者名字
	UserName *string `json:"user_name,omitempty" xml:"user_name,omitempty"`
	// 场景码，找dis工作人员进行分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
}

func (s CreateDidIdentityCorporateRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDidIdentityCorporateRequest) GoString() string {
	return s.String()
}

func (s *CreateDidIdentityCorporateRequest) SetAuthToken(v string) *CreateDidIdentityCorporateRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateDidIdentityCorporateRequest) SetProductInstanceId(v string) *CreateDidIdentityCorporateRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateDidIdentityCorporateRequest) SetExtensionInfo(v string) *CreateDidIdentityCorporateRequest {
	s.ExtensionInfo = &v
	return s
}

func (s *CreateDidIdentityCorporateRequest) SetPublicKey(v string) *CreateDidIdentityCorporateRequest {
	s.PublicKey = &v
	return s
}

func (s *CreateDidIdentityCorporateRequest) SetRecoveryKey(v string) *CreateDidIdentityCorporateRequest {
	s.RecoveryKey = &v
	return s
}

func (s *CreateDidIdentityCorporateRequest) SetUserId(v string) *CreateDidIdentityCorporateRequest {
	s.UserId = &v
	return s
}

func (s *CreateDidIdentityCorporateRequest) SetUserName(v string) *CreateDidIdentityCorporateRequest {
	s.UserName = &v
	return s
}

func (s *CreateDidIdentityCorporateRequest) SetBizCode(v string) *CreateDidIdentityCorporateRequest {
	s.BizCode = &v
	return s
}

type CreateDidIdentityCorporateResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// did
	Did *string `json:"did,omitempty" xml:"did,omitempty"`
}

func (s CreateDidIdentityCorporateResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDidIdentityCorporateResponse) GoString() string {
	return s.String()
}

func (s *CreateDidIdentityCorporateResponse) SetReqMsgId(v string) *CreateDidIdentityCorporateResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateDidIdentityCorporateResponse) SetResultCode(v string) *CreateDidIdentityCorporateResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateDidIdentityCorporateResponse) SetResultMsg(v string) *CreateDidIdentityCorporateResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateDidIdentityCorporateResponse) SetDid(v string) *CreateDidIdentityCorporateResponse {
	s.Did = &v
	return s
}

type InitDidAdddidHashRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 客户did
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// {\"creator\":\"did:mychain:93496ea09e022cdf21a0df15d2bfb3102985eb64016af5fb14a2e24a9ab1a73a\",\"created\":\"2019-08-08T13:52:02+0800\",\"service\":[{\"id\":\"didauth-1\",\"serviceEndpoint\":\"auth.mydid.agent.com\",\"type\":\"DidAuthService\"},{\"id\":\"vcrepository-1\",\"serviceEndpoint\":\"auth.mydid.agent.com\",\"type\":\"VerifiableClaimRepository\"},{\"id\":\"oneBid-1\",\"serviceEndpoint\":\"[{\\\"uid\\\":\\\"z50Uid\\\",\\\"tenancyId\\\":\\\"z50\\\",\\\"version\\\":\\\"v1.0\\\",\\\"releated\\\":{\\\"releatedHash\\\":\\\"hash(关联结果)\\\",\\\"releatedInfo\\\":\\\"AES(核身过程)+version\\\"}}]\",\"type\":\"oneBid\"}],\"id\":\"did:mychain:4145aac009d5e94ad68c16bd56af0bf65a0437b49046529a142de8b385ee71c1\",\"publicKey\":[{\"controller\":\"did:mychain:93496ea09e022cdf21a0df15d2bfb3102985eb64016af5fb14a2e24a9ab1a73a\",\"id\":\"keys-1\",\"publicKey\":\"f498ee29763dd24cd8324c6e861d82ef558e7d6dac10be8b99f5c33934d5cc4f5ff49861a235c7fd4c99a99265d777e657e747164e5549195003878c7222bdcc\",\"type\":\"Secp256k1VerificationKey2018\"}],\"@context\":\"https://w3id.org/did/v1\",\"updated\":\"2019-08-08T13:52:02+0800\",\"authentication\":[\"keys-1\"]}"])
	Diddoc *string `json:"diddoc,omitempty" xml:"diddoc,omitempty" require:"true"`
	// 使用私钥对消息中其他字段进行签名
	RequestSignature *string `json:"request_signature,omitempty" xml:"request_signature,omitempty" require:"true"`
	// 场景码，找dis工作人员进行分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
}

func (s InitDidAdddidHashRequest) String() string {
	return tea.Prettify(s)
}

func (s InitDidAdddidHashRequest) GoString() string {
	return s.String()
}

func (s *InitDidAdddidHashRequest) SetAuthToken(v string) *InitDidAdddidHashRequest {
	s.AuthToken = &v
	return s
}

func (s *InitDidAdddidHashRequest) SetProductInstanceId(v string) *InitDidAdddidHashRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *InitDidAdddidHashRequest) SetDid(v string) *InitDidAdddidHashRequest {
	s.Did = &v
	return s
}

func (s *InitDidAdddidHashRequest) SetDiddoc(v string) *InitDidAdddidHashRequest {
	s.Diddoc = &v
	return s
}

func (s *InitDidAdddidHashRequest) SetRequestSignature(v string) *InitDidAdddidHashRequest {
	s.RequestSignature = &v
	return s
}

func (s *InitDidAdddidHashRequest) SetBizCode(v string) *InitDidAdddidHashRequest {
	s.BizCode = &v
	return s
}

type InitDidAdddidHashResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 待签名的交易hash
	Hash *string `json:"hash,omitempty" xml:"hash,omitempty"`
}

func (s InitDidAdddidHashResponse) String() string {
	return tea.Prettify(s)
}

func (s InitDidAdddidHashResponse) GoString() string {
	return s.String()
}

func (s *InitDidAdddidHashResponse) SetReqMsgId(v string) *InitDidAdddidHashResponse {
	s.ReqMsgId = &v
	return s
}

func (s *InitDidAdddidHashResponse) SetResultCode(v string) *InitDidAdddidHashResponse {
	s.ResultCode = &v
	return s
}

func (s *InitDidAdddidHashResponse) SetResultMsg(v string) *InitDidAdddidHashResponse {
	s.ResultMsg = &v
	return s
}

func (s *InitDidAdddidHashResponse) SetHash(v string) *InitDidAdddidHashResponse {
	s.Hash = &v
	return s
}

type StartDidAdddidExecuteRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// did
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 操作描述
	Operation *string `json:"operation,omitempty" xml:"operation,omitempty" require:"true"`
	// 操作的具体参数
	Payload *DidAddDoc `json:"payload,omitempty" xml:"payload,omitempty" require:"true"`
	// 使用私钥对消息中其他字段进行签名
	RequestSignature *string `json:"request_signature,omitempty" xml:"request_signature,omitempty" require:"true"`
	// 场景码，找dis工作人员进行分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
}

func (s StartDidAdddidExecuteRequest) String() string {
	return tea.Prettify(s)
}

func (s StartDidAdddidExecuteRequest) GoString() string {
	return s.String()
}

func (s *StartDidAdddidExecuteRequest) SetAuthToken(v string) *StartDidAdddidExecuteRequest {
	s.AuthToken = &v
	return s
}

func (s *StartDidAdddidExecuteRequest) SetProductInstanceId(v string) *StartDidAdddidExecuteRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *StartDidAdddidExecuteRequest) SetDid(v string) *StartDidAdddidExecuteRequest {
	s.Did = &v
	return s
}

func (s *StartDidAdddidExecuteRequest) SetOperation(v string) *StartDidAdddidExecuteRequest {
	s.Operation = &v
	return s
}

func (s *StartDidAdddidExecuteRequest) SetPayload(v *DidAddDoc) *StartDidAdddidExecuteRequest {
	s.Payload = v
	return s
}

func (s *StartDidAdddidExecuteRequest) SetRequestSignature(v string) *StartDidAdddidExecuteRequest {
	s.RequestSignature = &v
	return s
}

func (s *StartDidAdddidExecuteRequest) SetBizCode(v string) *StartDidAdddidExecuteRequest {
	s.BizCode = &v
	return s
}

type StartDidAdddidExecuteResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s StartDidAdddidExecuteResponse) String() string {
	return tea.Prettify(s)
}

func (s StartDidAdddidExecuteResponse) GoString() string {
	return s.String()
}

func (s *StartDidAdddidExecuteResponse) SetReqMsgId(v string) *StartDidAdddidExecuteResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartDidAdddidExecuteResponse) SetResultCode(v string) *StartDidAdddidExecuteResponse {
	s.ResultCode = &v
	return s
}

func (s *StartDidAdddidExecuteResponse) SetResultMsg(v string) *StartDidAdddidExecuteResponse {
	s.ResultMsg = &v
	return s
}

type InitDidAddvcHashRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 可验证声明hash
	ContentHash *string `json:"content_hash,omitempty" xml:"content_hash,omitempty" require:"true"`
	// 发起该交易的did
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// issuer did对应的hash
	IssuerHash *string `json:"issuer_hash,omitempty" xml:"issuer_hash,omitempty" require:"true"`
	// 使用私钥对消息中其他字段进行签名
	RequestSignature *string `json:"request_signature,omitempty" xml:"request_signature,omitempty" require:"true"`
	// valid or invalid
	Status *string `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// subject的did计算的hash
	SubjectHash *string `json:"subject_hash,omitempty" xml:"subject_hash,omitempty" require:"true"`
	// 可验证声明id
	Vcid *string `json:"vcid,omitempty" xml:"vcid,omitempty" require:"true"`
	// 场景码，找dis工作人员进行分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
}

func (s InitDidAddvcHashRequest) String() string {
	return tea.Prettify(s)
}

func (s InitDidAddvcHashRequest) GoString() string {
	return s.String()
}

func (s *InitDidAddvcHashRequest) SetAuthToken(v string) *InitDidAddvcHashRequest {
	s.AuthToken = &v
	return s
}

func (s *InitDidAddvcHashRequest) SetProductInstanceId(v string) *InitDidAddvcHashRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *InitDidAddvcHashRequest) SetContentHash(v string) *InitDidAddvcHashRequest {
	s.ContentHash = &v
	return s
}

func (s *InitDidAddvcHashRequest) SetDid(v string) *InitDidAddvcHashRequest {
	s.Did = &v
	return s
}

func (s *InitDidAddvcHashRequest) SetIssuerHash(v string) *InitDidAddvcHashRequest {
	s.IssuerHash = &v
	return s
}

func (s *InitDidAddvcHashRequest) SetRequestSignature(v string) *InitDidAddvcHashRequest {
	s.RequestSignature = &v
	return s
}

func (s *InitDidAddvcHashRequest) SetStatus(v string) *InitDidAddvcHashRequest {
	s.Status = &v
	return s
}

func (s *InitDidAddvcHashRequest) SetSubjectHash(v string) *InitDidAddvcHashRequest {
	s.SubjectHash = &v
	return s
}

func (s *InitDidAddvcHashRequest) SetVcid(v string) *InitDidAddvcHashRequest {
	s.Vcid = &v
	return s
}

func (s *InitDidAddvcHashRequest) SetBizCode(v string) *InitDidAddvcHashRequest {
	s.BizCode = &v
	return s
}

type InitDidAddvcHashResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 添加vc的交易hash值
	Hash *string `json:"hash,omitempty" xml:"hash,omitempty"`
}

func (s InitDidAddvcHashResponse) String() string {
	return tea.Prettify(s)
}

func (s InitDidAddvcHashResponse) GoString() string {
	return s.String()
}

func (s *InitDidAddvcHashResponse) SetReqMsgId(v string) *InitDidAddvcHashResponse {
	s.ReqMsgId = &v
	return s
}

func (s *InitDidAddvcHashResponse) SetResultCode(v string) *InitDidAddvcHashResponse {
	s.ResultCode = &v
	return s
}

func (s *InitDidAddvcHashResponse) SetResultMsg(v string) *InitDidAddvcHashResponse {
	s.ResultMsg = &v
	return s
}

func (s *InitDidAddvcHashResponse) SetHash(v string) *InitDidAddvcHashResponse {
	s.Hash = &v
	return s
}

type StartDidAddvcExecuteRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 发起该交易的did
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 操作名
	Operation *string `json:"operation,omitempty" xml:"operation,omitempty" require:"true"`
	// 创建VC具体参数
	Payload *AddVC `json:"payload,omitempty" xml:"payload,omitempty" require:"true"`
	// 使用私钥对消息中其他字段进行签名
	RequestSignature *string `json:"request_signature,omitempty" xml:"request_signature,omitempty" require:"true"`
	// 场景码，找dis工作人员进行分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
}

func (s StartDidAddvcExecuteRequest) String() string {
	return tea.Prettify(s)
}

func (s StartDidAddvcExecuteRequest) GoString() string {
	return s.String()
}

func (s *StartDidAddvcExecuteRequest) SetAuthToken(v string) *StartDidAddvcExecuteRequest {
	s.AuthToken = &v
	return s
}

func (s *StartDidAddvcExecuteRequest) SetProductInstanceId(v string) *StartDidAddvcExecuteRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *StartDidAddvcExecuteRequest) SetDid(v string) *StartDidAddvcExecuteRequest {
	s.Did = &v
	return s
}

func (s *StartDidAddvcExecuteRequest) SetOperation(v string) *StartDidAddvcExecuteRequest {
	s.Operation = &v
	return s
}

func (s *StartDidAddvcExecuteRequest) SetPayload(v *AddVC) *StartDidAddvcExecuteRequest {
	s.Payload = v
	return s
}

func (s *StartDidAddvcExecuteRequest) SetRequestSignature(v string) *StartDidAddvcExecuteRequest {
	s.RequestSignature = &v
	return s
}

func (s *StartDidAddvcExecuteRequest) SetBizCode(v string) *StartDidAddvcExecuteRequest {
	s.BizCode = &v
	return s
}

type StartDidAddvcExecuteResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s StartDidAddvcExecuteResponse) String() string {
	return tea.Prettify(s)
}

func (s StartDidAddvcExecuteResponse) GoString() string {
	return s.String()
}

func (s *StartDidAddvcExecuteResponse) SetReqMsgId(v string) *StartDidAddvcExecuteResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartDidAddvcExecuteResponse) SetResultCode(v string) *StartDidAddvcExecuteResponse {
	s.ResultCode = &v
	return s
}

func (s *StartDidAddvcExecuteResponse) SetResultMsg(v string) *StartDidAddvcExecuteResponse {
	s.ResultMsg = &v
	return s
}

type InitDidUpdatevcstatusHashRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 交易发起者did
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 使用私钥对消息中其他字段进行签名
	RequestSignature *string `json:"request_signature,omitempty" xml:"request_signature,omitempty" require:"true"`
	// valid or invalid
	Status *string `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// 可验证声明id
	Vcid *string `json:"vcid,omitempty" xml:"vcid,omitempty" require:"true"`
	// 场景码，找dis工作人员进行分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
}

func (s InitDidUpdatevcstatusHashRequest) String() string {
	return tea.Prettify(s)
}

func (s InitDidUpdatevcstatusHashRequest) GoString() string {
	return s.String()
}

func (s *InitDidUpdatevcstatusHashRequest) SetAuthToken(v string) *InitDidUpdatevcstatusHashRequest {
	s.AuthToken = &v
	return s
}

func (s *InitDidUpdatevcstatusHashRequest) SetProductInstanceId(v string) *InitDidUpdatevcstatusHashRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *InitDidUpdatevcstatusHashRequest) SetDid(v string) *InitDidUpdatevcstatusHashRequest {
	s.Did = &v
	return s
}

func (s *InitDidUpdatevcstatusHashRequest) SetRequestSignature(v string) *InitDidUpdatevcstatusHashRequest {
	s.RequestSignature = &v
	return s
}

func (s *InitDidUpdatevcstatusHashRequest) SetStatus(v string) *InitDidUpdatevcstatusHashRequest {
	s.Status = &v
	return s
}

func (s *InitDidUpdatevcstatusHashRequest) SetVcid(v string) *InitDidUpdatevcstatusHashRequest {
	s.Vcid = &v
	return s
}

func (s *InitDidUpdatevcstatusHashRequest) SetBizCode(v string) *InitDidUpdatevcstatusHashRequest {
	s.BizCode = &v
	return s
}

type InitDidUpdatevcstatusHashResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 交易hash
	Hash *string `json:"hash,omitempty" xml:"hash,omitempty"`
}

func (s InitDidUpdatevcstatusHashResponse) String() string {
	return tea.Prettify(s)
}

func (s InitDidUpdatevcstatusHashResponse) GoString() string {
	return s.String()
}

func (s *InitDidUpdatevcstatusHashResponse) SetReqMsgId(v string) *InitDidUpdatevcstatusHashResponse {
	s.ReqMsgId = &v
	return s
}

func (s *InitDidUpdatevcstatusHashResponse) SetResultCode(v string) *InitDidUpdatevcstatusHashResponse {
	s.ResultCode = &v
	return s
}

func (s *InitDidUpdatevcstatusHashResponse) SetResultMsg(v string) *InitDidUpdatevcstatusHashResponse {
	s.ResultMsg = &v
	return s
}

func (s *InitDidUpdatevcstatusHashResponse) SetHash(v string) *InitDidUpdatevcstatusHashResponse {
	s.Hash = &v
	return s
}

type StartDidUpdatevcstatusExecuteRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 交易发起者did
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 使用私钥对消息中其他字段进行签名
	RequestSignature *string `json:"request_signature,omitempty" xml:"request_signature,omitempty" require:"true"`
	// 交易hash的签名
	Signature *string `json:"signature,omitempty" xml:"signature,omitempty" require:"true"`
	// valid or invalid
	Status *string `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// 可验证声明id
	Vcid *string `json:"vcid,omitempty" xml:"vcid,omitempty" require:"true"`
	// 场景码，找dis工作人员进行分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
}

func (s StartDidUpdatevcstatusExecuteRequest) String() string {
	return tea.Prettify(s)
}

func (s StartDidUpdatevcstatusExecuteRequest) GoString() string {
	return s.String()
}

func (s *StartDidUpdatevcstatusExecuteRequest) SetAuthToken(v string) *StartDidUpdatevcstatusExecuteRequest {
	s.AuthToken = &v
	return s
}

func (s *StartDidUpdatevcstatusExecuteRequest) SetProductInstanceId(v string) *StartDidUpdatevcstatusExecuteRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *StartDidUpdatevcstatusExecuteRequest) SetDid(v string) *StartDidUpdatevcstatusExecuteRequest {
	s.Did = &v
	return s
}

func (s *StartDidUpdatevcstatusExecuteRequest) SetRequestSignature(v string) *StartDidUpdatevcstatusExecuteRequest {
	s.RequestSignature = &v
	return s
}

func (s *StartDidUpdatevcstatusExecuteRequest) SetSignature(v string) *StartDidUpdatevcstatusExecuteRequest {
	s.Signature = &v
	return s
}

func (s *StartDidUpdatevcstatusExecuteRequest) SetStatus(v string) *StartDidUpdatevcstatusExecuteRequest {
	s.Status = &v
	return s
}

func (s *StartDidUpdatevcstatusExecuteRequest) SetVcid(v string) *StartDidUpdatevcstatusExecuteRequest {
	s.Vcid = &v
	return s
}

func (s *StartDidUpdatevcstatusExecuteRequest) SetBizCode(v string) *StartDidUpdatevcstatusExecuteRequest {
	s.BizCode = &v
	return s
}

type StartDidUpdatevcstatusExecuteResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s StartDidUpdatevcstatusExecuteResponse) String() string {
	return tea.Prettify(s)
}

func (s StartDidUpdatevcstatusExecuteResponse) GoString() string {
	return s.String()
}

func (s *StartDidUpdatevcstatusExecuteResponse) SetReqMsgId(v string) *StartDidUpdatevcstatusExecuteResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartDidUpdatevcstatusExecuteResponse) SetResultCode(v string) *StartDidUpdatevcstatusExecuteResponse {
	s.ResultCode = &v
	return s
}

func (s *StartDidUpdatevcstatusExecuteResponse) SetResultMsg(v string) *StartDidUpdatevcstatusExecuteResponse {
	s.ResultMsg = &v
	return s
}

type InitDidUpdatedidHashRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 发起者did
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// did doc
	Doc *string `json:"doc,omitempty" xml:"doc,omitempty" require:"true"`
	// 使用私钥对消息中其他字段进行签名
	RequestSignature *string `json:"request_signature,omitempty" xml:"request_signature,omitempty" require:"true"`
	// 场景码，找dis工作人员进行分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
}

func (s InitDidUpdatedidHashRequest) String() string {
	return tea.Prettify(s)
}

func (s InitDidUpdatedidHashRequest) GoString() string {
	return s.String()
}

func (s *InitDidUpdatedidHashRequest) SetAuthToken(v string) *InitDidUpdatedidHashRequest {
	s.AuthToken = &v
	return s
}

func (s *InitDidUpdatedidHashRequest) SetProductInstanceId(v string) *InitDidUpdatedidHashRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *InitDidUpdatedidHashRequest) SetDid(v string) *InitDidUpdatedidHashRequest {
	s.Did = &v
	return s
}

func (s *InitDidUpdatedidHashRequest) SetDoc(v string) *InitDidUpdatedidHashRequest {
	s.Doc = &v
	return s
}

func (s *InitDidUpdatedidHashRequest) SetRequestSignature(v string) *InitDidUpdatedidHashRequest {
	s.RequestSignature = &v
	return s
}

func (s *InitDidUpdatedidHashRequest) SetBizCode(v string) *InitDidUpdatedidHashRequest {
	s.BizCode = &v
	return s
}

type InitDidUpdatedidHashResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 交易hash
	Hash *string `json:"hash,omitempty" xml:"hash,omitempty"`
}

func (s InitDidUpdatedidHashResponse) String() string {
	return tea.Prettify(s)
}

func (s InitDidUpdatedidHashResponse) GoString() string {
	return s.String()
}

func (s *InitDidUpdatedidHashResponse) SetReqMsgId(v string) *InitDidUpdatedidHashResponse {
	s.ReqMsgId = &v
	return s
}

func (s *InitDidUpdatedidHashResponse) SetResultCode(v string) *InitDidUpdatedidHashResponse {
	s.ResultCode = &v
	return s
}

func (s *InitDidUpdatedidHashResponse) SetResultMsg(v string) *InitDidUpdatedidHashResponse {
	s.ResultMsg = &v
	return s
}

func (s *InitDidUpdatedidHashResponse) SetHash(v string) *InitDidUpdatedidHashResponse {
	s.Hash = &v
	return s
}

type StartDidUpdatedidExecuteRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// did
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// did doc
	Doc *string `json:"doc,omitempty" xml:"doc,omitempty" require:"true"`
	// 使用私钥对消息中其他字段进行签名
	RequestSignature *string `json:"request_signature,omitempty" xml:"request_signature,omitempty" require:"true"`
	//  交易hash签名
	Signature *string `json:"signature,omitempty" xml:"signature,omitempty" require:"true"`
	// 场景码，找dis工作人员进行分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
}

func (s StartDidUpdatedidExecuteRequest) String() string {
	return tea.Prettify(s)
}

func (s StartDidUpdatedidExecuteRequest) GoString() string {
	return s.String()
}

func (s *StartDidUpdatedidExecuteRequest) SetAuthToken(v string) *StartDidUpdatedidExecuteRequest {
	s.AuthToken = &v
	return s
}

func (s *StartDidUpdatedidExecuteRequest) SetProductInstanceId(v string) *StartDidUpdatedidExecuteRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *StartDidUpdatedidExecuteRequest) SetDid(v string) *StartDidUpdatedidExecuteRequest {
	s.Did = &v
	return s
}

func (s *StartDidUpdatedidExecuteRequest) SetDoc(v string) *StartDidUpdatedidExecuteRequest {
	s.Doc = &v
	return s
}

func (s *StartDidUpdatedidExecuteRequest) SetRequestSignature(v string) *StartDidUpdatedidExecuteRequest {
	s.RequestSignature = &v
	return s
}

func (s *StartDidUpdatedidExecuteRequest) SetSignature(v string) *StartDidUpdatedidExecuteRequest {
	s.Signature = &v
	return s
}

func (s *StartDidUpdatedidExecuteRequest) SetBizCode(v string) *StartDidUpdatedidExecuteRequest {
	s.BizCode = &v
	return s
}

type StartDidUpdatedidExecuteResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s StartDidUpdatedidExecuteResponse) String() string {
	return tea.Prettify(s)
}

func (s StartDidUpdatedidExecuteResponse) GoString() string {
	return s.String()
}

func (s *StartDidUpdatedidExecuteResponse) SetReqMsgId(v string) *StartDidUpdatedidExecuteResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartDidUpdatedidExecuteResponse) SetResultCode(v string) *StartDidUpdatedidExecuteResponse {
	s.ResultCode = &v
	return s
}

func (s *StartDidUpdatedidExecuteResponse) SetResultMsg(v string) *StartDidUpdatedidExecuteResponse {
	s.ResultMsg = &v
	return s
}

type QueryDidDiddocDirectRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 发起者did
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 待查询did
	QueryDid *string `json:"query_did,omitempty" xml:"query_did,omitempty" require:"true"`
	// 请求中其他字段的签名
	RequestSignature *string `json:"request_signature,omitempty" xml:"request_signature,omitempty" require:"true"`
	// 场景码，找dis工作人员进行分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
}

func (s QueryDidDiddocDirectRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDidDiddocDirectRequest) GoString() string {
	return s.String()
}

func (s *QueryDidDiddocDirectRequest) SetAuthToken(v string) *QueryDidDiddocDirectRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryDidDiddocDirectRequest) SetProductInstanceId(v string) *QueryDidDiddocDirectRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryDidDiddocDirectRequest) SetDid(v string) *QueryDidDiddocDirectRequest {
	s.Did = &v
	return s
}

func (s *QueryDidDiddocDirectRequest) SetQueryDid(v string) *QueryDidDiddocDirectRequest {
	s.QueryDid = &v
	return s
}

func (s *QueryDidDiddocDirectRequest) SetRequestSignature(v string) *QueryDidDiddocDirectRequest {
	s.RequestSignature = &v
	return s
}

func (s *QueryDidDiddocDirectRequest) SetBizCode(v string) *QueryDidDiddocDirectRequest {
	s.BizCode = &v
	return s
}

type QueryDidDiddocDirectResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// did doc
	Doc *string `json:"doc,omitempty" xml:"doc,omitempty"`
}

func (s QueryDidDiddocDirectResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDidDiddocDirectResponse) GoString() string {
	return s.String()
}

func (s *QueryDidDiddocDirectResponse) SetReqMsgId(v string) *QueryDidDiddocDirectResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryDidDiddocDirectResponse) SetResultCode(v string) *QueryDidDiddocDirectResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryDidDiddocDirectResponse) SetResultMsg(v string) *QueryDidDiddocDirectResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryDidDiddocDirectResponse) SetDoc(v string) *QueryDidDiddocDirectResponse {
	s.Doc = &v
	return s
}

type QueryDidVcDirectRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 发起者did
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 请求中其他字段的签名
	RequestSignature *string `json:"request_signature,omitempty" xml:"request_signature,omitempty" require:"true"`
	// 可验证声明id
	Vcid *string `json:"vcid,omitempty" xml:"vcid,omitempty" require:"true"`
	// 场景码，找dis工作人员进行分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
}

func (s QueryDidVcDirectRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDidVcDirectRequest) GoString() string {
	return s.String()
}

func (s *QueryDidVcDirectRequest) SetAuthToken(v string) *QueryDidVcDirectRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryDidVcDirectRequest) SetProductInstanceId(v string) *QueryDidVcDirectRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryDidVcDirectRequest) SetDid(v string) *QueryDidVcDirectRequest {
	s.Did = &v
	return s
}

func (s *QueryDidVcDirectRequest) SetRequestSignature(v string) *QueryDidVcDirectRequest {
	s.RequestSignature = &v
	return s
}

func (s *QueryDidVcDirectRequest) SetVcid(v string) *QueryDidVcDirectRequest {
	s.Vcid = &v
	return s
}

func (s *QueryDidVcDirectRequest) SetBizCode(v string) *QueryDidVcDirectRequest {
	s.BizCode = &v
	return s
}

type QueryDidVcDirectResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// vc内容hash值
	ContentHash *string `json:"content_hash,omitempty" xml:"content_hash,omitempty"`
	// vc的状态
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
}

func (s QueryDidVcDirectResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDidVcDirectResponse) GoString() string {
	return s.String()
}

func (s *QueryDidVcDirectResponse) SetReqMsgId(v string) *QueryDidVcDirectResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryDidVcDirectResponse) SetResultCode(v string) *QueryDidVcDirectResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryDidVcDirectResponse) SetResultMsg(v string) *QueryDidVcDirectResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryDidVcDirectResponse) SetContentHash(v string) *QueryDidVcDirectResponse {
	s.ContentHash = &v
	return s
}

func (s *QueryDidVcDirectResponse) SetStatus(v string) *QueryDidVcDirectResponse {
	s.Status = &v
	return s
}

type CreateDidIdentityPersonRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 扩展字段
	ExtensionInfo *string `json:"extension_info,omitempty" xml:"extension_info,omitempty"`
	// 公钥
	PublicKey *string `json:"public_key,omitempty" xml:"public_key,omitempty" require:"true"`
	// 恢复公钥
	RecoveryKey *string `json:"recovery_key,omitempty" xml:"recovery_key,omitempty" require:"true"`
	// 用户id
	UserId *string `json:"user_id,omitempty" xml:"user_id,omitempty" require:"true"`
	// 用户名称
	UserName *string `json:"user_name,omitempty" xml:"user_name,omitempty"`
	// 场景码，找dis工作人员进行分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
}

func (s CreateDidIdentityPersonRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDidIdentityPersonRequest) GoString() string {
	return s.String()
}

func (s *CreateDidIdentityPersonRequest) SetAuthToken(v string) *CreateDidIdentityPersonRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateDidIdentityPersonRequest) SetProductInstanceId(v string) *CreateDidIdentityPersonRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateDidIdentityPersonRequest) SetExtensionInfo(v string) *CreateDidIdentityPersonRequest {
	s.ExtensionInfo = &v
	return s
}

func (s *CreateDidIdentityPersonRequest) SetPublicKey(v string) *CreateDidIdentityPersonRequest {
	s.PublicKey = &v
	return s
}

func (s *CreateDidIdentityPersonRequest) SetRecoveryKey(v string) *CreateDidIdentityPersonRequest {
	s.RecoveryKey = &v
	return s
}

func (s *CreateDidIdentityPersonRequest) SetUserId(v string) *CreateDidIdentityPersonRequest {
	s.UserId = &v
	return s
}

func (s *CreateDidIdentityPersonRequest) SetUserName(v string) *CreateDidIdentityPersonRequest {
	s.UserName = &v
	return s
}

func (s *CreateDidIdentityPersonRequest) SetBizCode(v string) *CreateDidIdentityPersonRequest {
	s.BizCode = &v
	return s
}

type CreateDidIdentityPersonResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// did
	Did *string `json:"did,omitempty" xml:"did,omitempty"`
}

func (s CreateDidIdentityPersonResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDidIdentityPersonResponse) GoString() string {
	return s.String()
}

func (s *CreateDidIdentityPersonResponse) SetReqMsgId(v string) *CreateDidIdentityPersonResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateDidIdentityPersonResponse) SetResultCode(v string) *CreateDidIdentityPersonResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateDidIdentityPersonResponse) SetResultMsg(v string) *CreateDidIdentityPersonResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateDidIdentityPersonResponse) SetDid(v string) *CreateDidIdentityPersonResponse {
	s.Did = &v
	return s
}

type UpdateDidUpdatedidAuthkeyRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// did描述符
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 具体操作名
	Operation *string `json:"operation,omitempty" xml:"operation,omitempty" require:"true"`
	// 更新Auth 操作具体描述
	Payload *UpdateDidAuthPayload `json:"payload,omitempty" xml:"payload,omitempty" require:"true"`
	// sig(hash(operation+payload+did))  使用sdk生成方式
	RequestSignature *string `json:"request_signature,omitempty" xml:"request_signature,omitempty" require:"true"`
	// 场景码，找dis工作人员进行分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
}

func (s UpdateDidUpdatedidAuthkeyRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateDidUpdatedidAuthkeyRequest) GoString() string {
	return s.String()
}

func (s *UpdateDidUpdatedidAuthkeyRequest) SetAuthToken(v string) *UpdateDidUpdatedidAuthkeyRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateDidUpdatedidAuthkeyRequest) SetProductInstanceId(v string) *UpdateDidUpdatedidAuthkeyRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UpdateDidUpdatedidAuthkeyRequest) SetDid(v string) *UpdateDidUpdatedidAuthkeyRequest {
	s.Did = &v
	return s
}

func (s *UpdateDidUpdatedidAuthkeyRequest) SetOperation(v string) *UpdateDidUpdatedidAuthkeyRequest {
	s.Operation = &v
	return s
}

func (s *UpdateDidUpdatedidAuthkeyRequest) SetPayload(v *UpdateDidAuthPayload) *UpdateDidUpdatedidAuthkeyRequest {
	s.Payload = v
	return s
}

func (s *UpdateDidUpdatedidAuthkeyRequest) SetRequestSignature(v string) *UpdateDidUpdatedidAuthkeyRequest {
	s.RequestSignature = &v
	return s
}

func (s *UpdateDidUpdatedidAuthkeyRequest) SetBizCode(v string) *UpdateDidUpdatedidAuthkeyRequest {
	s.BizCode = &v
	return s
}

type UpdateDidUpdatedidAuthkeyResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateDidUpdatedidAuthkeyResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateDidUpdatedidAuthkeyResponse) GoString() string {
	return s.String()
}

func (s *UpdateDidUpdatedidAuthkeyResponse) SetReqMsgId(v string) *UpdateDidUpdatedidAuthkeyResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateDidUpdatedidAuthkeyResponse) SetResultCode(v string) *UpdateDidUpdatedidAuthkeyResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateDidUpdatedidAuthkeyResponse) SetResultMsg(v string) *UpdateDidUpdatedidAuthkeyResponse {
	s.ResultMsg = &v
	return s
}

type UpdateDidUpdatedidServiceRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// did描述符
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 更新did service endpoint
	Operation *string `json:"operation,omitempty" xml:"operation,omitempty" require:"true"`
	// update did service的payload
	Payload *UpdateDidService `json:"payload,omitempty" xml:"payload,omitempty" require:"true"`
	// sig(hash(operation+payload+did)) 使用sdk生成方式
	RequestSignature *string `json:"request_signature,omitempty" xml:"request_signature,omitempty" require:"true"`
	// 场景码，找dis工作人员进行分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
}

func (s UpdateDidUpdatedidServiceRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateDidUpdatedidServiceRequest) GoString() string {
	return s.String()
}

func (s *UpdateDidUpdatedidServiceRequest) SetAuthToken(v string) *UpdateDidUpdatedidServiceRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateDidUpdatedidServiceRequest) SetProductInstanceId(v string) *UpdateDidUpdatedidServiceRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UpdateDidUpdatedidServiceRequest) SetDid(v string) *UpdateDidUpdatedidServiceRequest {
	s.Did = &v
	return s
}

func (s *UpdateDidUpdatedidServiceRequest) SetOperation(v string) *UpdateDidUpdatedidServiceRequest {
	s.Operation = &v
	return s
}

func (s *UpdateDidUpdatedidServiceRequest) SetPayload(v *UpdateDidService) *UpdateDidUpdatedidServiceRequest {
	s.Payload = v
	return s
}

func (s *UpdateDidUpdatedidServiceRequest) SetRequestSignature(v string) *UpdateDidUpdatedidServiceRequest {
	s.RequestSignature = &v
	return s
}

func (s *UpdateDidUpdatedidServiceRequest) SetBizCode(v string) *UpdateDidUpdatedidServiceRequest {
	s.BizCode = &v
	return s
}

type UpdateDidUpdatedidServiceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateDidUpdatedidServiceResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateDidUpdatedidServiceResponse) GoString() string {
	return s.String()
}

func (s *UpdateDidUpdatedidServiceResponse) SetReqMsgId(v string) *UpdateDidUpdatedidServiceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateDidUpdatedidServiceResponse) SetResultCode(v string) *UpdateDidUpdatedidServiceResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateDidUpdatedidServiceResponse) SetResultMsg(v string) *UpdateDidUpdatedidServiceResponse {
	s.ResultMsg = &v
	return s
}

type AddDidUpdatedidServiceRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 待处理did
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 具体操作名
	Operation *string `json:"operation,omitempty" xml:"operation,omitempty" require:"true"`
	// 添加的did service info
	Payload *UpdateDidService `json:"payload,omitempty" xml:"payload,omitempty" require:"true"`
	// sig(hash(operation+payload+did)) 使用sdk生成方式
	RequestSignature *string `json:"request_signature,omitempty" xml:"request_signature,omitempty" require:"true"`
	// 场景码，找dis工作人员进行分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
}

func (s AddDidUpdatedidServiceRequest) String() string {
	return tea.Prettify(s)
}

func (s AddDidUpdatedidServiceRequest) GoString() string {
	return s.String()
}

func (s *AddDidUpdatedidServiceRequest) SetAuthToken(v string) *AddDidUpdatedidServiceRequest {
	s.AuthToken = &v
	return s
}

func (s *AddDidUpdatedidServiceRequest) SetProductInstanceId(v string) *AddDidUpdatedidServiceRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *AddDidUpdatedidServiceRequest) SetDid(v string) *AddDidUpdatedidServiceRequest {
	s.Did = &v
	return s
}

func (s *AddDidUpdatedidServiceRequest) SetOperation(v string) *AddDidUpdatedidServiceRequest {
	s.Operation = &v
	return s
}

func (s *AddDidUpdatedidServiceRequest) SetPayload(v *UpdateDidService) *AddDidUpdatedidServiceRequest {
	s.Payload = v
	return s
}

func (s *AddDidUpdatedidServiceRequest) SetRequestSignature(v string) *AddDidUpdatedidServiceRequest {
	s.RequestSignature = &v
	return s
}

func (s *AddDidUpdatedidServiceRequest) SetBizCode(v string) *AddDidUpdatedidServiceRequest {
	s.BizCode = &v
	return s
}

type AddDidUpdatedidServiceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s AddDidUpdatedidServiceResponse) String() string {
	return tea.Prettify(s)
}

func (s AddDidUpdatedidServiceResponse) GoString() string {
	return s.String()
}

func (s *AddDidUpdatedidServiceResponse) SetReqMsgId(v string) *AddDidUpdatedidServiceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *AddDidUpdatedidServiceResponse) SetResultCode(v string) *AddDidUpdatedidServiceResponse {
	s.ResultCode = &v
	return s
}

func (s *AddDidUpdatedidServiceResponse) SetResultMsg(v string) *AddDidUpdatedidServiceResponse {
	s.ResultMsg = &v
	return s
}

type DeleteDidUpdatedidServiceRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 待处理did
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 具体操作名
	Operation *string `json:"operation,omitempty" xml:"operation,omitempty" require:"true"`
	// 删除did service操作信息
	Payload *DidDeleteService `json:"payload,omitempty" xml:"payload,omitempty" require:"true"`
	// sig(hash(operation+payload+did)) 使用sdk生成方式签名
	RequestSignature *string `json:"request_signature,omitempty" xml:"request_signature,omitempty" require:"true"`
	// 场景码，找dis工作人员进行分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
}

func (s DeleteDidUpdatedidServiceRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDidUpdatedidServiceRequest) GoString() string {
	return s.String()
}

func (s *DeleteDidUpdatedidServiceRequest) SetAuthToken(v string) *DeleteDidUpdatedidServiceRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteDidUpdatedidServiceRequest) SetProductInstanceId(v string) *DeleteDidUpdatedidServiceRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *DeleteDidUpdatedidServiceRequest) SetDid(v string) *DeleteDidUpdatedidServiceRequest {
	s.Did = &v
	return s
}

func (s *DeleteDidUpdatedidServiceRequest) SetOperation(v string) *DeleteDidUpdatedidServiceRequest {
	s.Operation = &v
	return s
}

func (s *DeleteDidUpdatedidServiceRequest) SetPayload(v *DidDeleteService) *DeleteDidUpdatedidServiceRequest {
	s.Payload = v
	return s
}

func (s *DeleteDidUpdatedidServiceRequest) SetRequestSignature(v string) *DeleteDidUpdatedidServiceRequest {
	s.RequestSignature = &v
	return s
}

func (s *DeleteDidUpdatedidServiceRequest) SetBizCode(v string) *DeleteDidUpdatedidServiceRequest {
	s.BizCode = &v
	return s
}

type DeleteDidUpdatedidServiceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s DeleteDidUpdatedidServiceResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDidUpdatedidServiceResponse) GoString() string {
	return s.String()
}

func (s *DeleteDidUpdatedidServiceResponse) SetReqMsgId(v string) *DeleteDidUpdatedidServiceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteDidUpdatedidServiceResponse) SetResultCode(v string) *DeleteDidUpdatedidServiceResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteDidUpdatedidServiceResponse) SetResultMsg(v string) *DeleteDidUpdatedidServiceResponse {
	s.ResultMsg = &v
	return s
}

type UpdateDidUpdatevcStatusRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// did描述符
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 可验证声明更新
	Operation *string `json:"operation,omitempty" xml:"operation,omitempty" require:"true"`
	// 更新可验证声明状态
	Payload *UpdateVCStatus `json:"payload,omitempty" xml:"payload,omitempty" require:"true"`
	// sig(hash(operation+payload+did)) 使用sdk生成方式
	RequestSignature *string `json:"request_signature,omitempty" xml:"request_signature,omitempty" require:"true"`
	// 场景码，找dis工作人员进行分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
}

func (s UpdateDidUpdatevcStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateDidUpdatevcStatusRequest) GoString() string {
	return s.String()
}

func (s *UpdateDidUpdatevcStatusRequest) SetAuthToken(v string) *UpdateDidUpdatevcStatusRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateDidUpdatevcStatusRequest) SetProductInstanceId(v string) *UpdateDidUpdatevcStatusRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UpdateDidUpdatevcStatusRequest) SetDid(v string) *UpdateDidUpdatevcStatusRequest {
	s.Did = &v
	return s
}

func (s *UpdateDidUpdatevcStatusRequest) SetOperation(v string) *UpdateDidUpdatevcStatusRequest {
	s.Operation = &v
	return s
}

func (s *UpdateDidUpdatevcStatusRequest) SetPayload(v *UpdateVCStatus) *UpdateDidUpdatevcStatusRequest {
	s.Payload = v
	return s
}

func (s *UpdateDidUpdatevcStatusRequest) SetRequestSignature(v string) *UpdateDidUpdatevcStatusRequest {
	s.RequestSignature = &v
	return s
}

func (s *UpdateDidUpdatevcStatusRequest) SetBizCode(v string) *UpdateDidUpdatevcStatusRequest {
	s.BizCode = &v
	return s
}

type UpdateDidUpdatevcStatusResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateDidUpdatevcStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateDidUpdatevcStatusResponse) GoString() string {
	return s.String()
}

func (s *UpdateDidUpdatevcStatusResponse) SetReqMsgId(v string) *UpdateDidUpdatevcStatusResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateDidUpdatevcStatusResponse) SetResultCode(v string) *UpdateDidUpdatevcStatusResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateDidUpdatevcStatusResponse) SetResultMsg(v string) *UpdateDidUpdatevcStatusResponse {
	s.ResultMsg = &v
	return s
}

type OpenDidResolverServiceRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 扩展字段
	Specification *string `json:"specification,omitempty" xml:"specification,omitempty"`
	// 需要开通服务的租户id
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty" require:"true"`
	// 场景码，找dis工作人员进行分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
}

func (s OpenDidResolverServiceRequest) String() string {
	return tea.Prettify(s)
}

func (s OpenDidResolverServiceRequest) GoString() string {
	return s.String()
}

func (s *OpenDidResolverServiceRequest) SetAuthToken(v string) *OpenDidResolverServiceRequest {
	s.AuthToken = &v
	return s
}

func (s *OpenDidResolverServiceRequest) SetProductInstanceId(v string) *OpenDidResolverServiceRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *OpenDidResolverServiceRequest) SetSpecification(v string) *OpenDidResolverServiceRequest {
	s.Specification = &v
	return s
}

func (s *OpenDidResolverServiceRequest) SetTenantId(v string) *OpenDidResolverServiceRequest {
	s.TenantId = &v
	return s
}

func (s *OpenDidResolverServiceRequest) SetBizCode(v string) *OpenDidResolverServiceRequest {
	s.BizCode = &v
	return s
}

type OpenDidResolverServiceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s OpenDidResolverServiceResponse) String() string {
	return tea.Prettify(s)
}

func (s OpenDidResolverServiceResponse) GoString() string {
	return s.String()
}

func (s *OpenDidResolverServiceResponse) SetReqMsgId(v string) *OpenDidResolverServiceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *OpenDidResolverServiceResponse) SetResultCode(v string) *OpenDidResolverServiceResponse {
	s.ResultCode = &v
	return s
}

func (s *OpenDidResolverServiceResponse) SetResultMsg(v string) *OpenDidResolverServiceResponse {
	s.ResultMsg = &v
	return s
}

type StopDidResolverServiceRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 扩展字段
	Specification *string `json:"specification,omitempty" xml:"specification,omitempty"`
	// 需要关闭resolver服务的租户id
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty" require:"true"`
	// 场景码，找dis工作人员进行分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
}

func (s StopDidResolverServiceRequest) String() string {
	return tea.Prettify(s)
}

func (s StopDidResolverServiceRequest) GoString() string {
	return s.String()
}

func (s *StopDidResolverServiceRequest) SetAuthToken(v string) *StopDidResolverServiceRequest {
	s.AuthToken = &v
	return s
}

func (s *StopDidResolverServiceRequest) SetProductInstanceId(v string) *StopDidResolverServiceRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *StopDidResolverServiceRequest) SetSpecification(v string) *StopDidResolverServiceRequest {
	s.Specification = &v
	return s
}

func (s *StopDidResolverServiceRequest) SetTenantId(v string) *StopDidResolverServiceRequest {
	s.TenantId = &v
	return s
}

func (s *StopDidResolverServiceRequest) SetBizCode(v string) *StopDidResolverServiceRequest {
	s.BizCode = &v
	return s
}

type StopDidResolverServiceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s StopDidResolverServiceResponse) String() string {
	return tea.Prettify(s)
}

func (s StopDidResolverServiceResponse) GoString() string {
	return s.String()
}

func (s *StopDidResolverServiceResponse) SetReqMsgId(v string) *StopDidResolverServiceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StopDidResolverServiceResponse) SetResultCode(v string) *StopDidResolverServiceResponse {
	s.ResultCode = &v
	return s
}

func (s *StopDidResolverServiceResponse) SetResultMsg(v string) *StopDidResolverServiceResponse {
	s.ResultMsg = &v
	return s
}

type StartDidDerivedidExecuteRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 发起该交易的根DID
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 操作名
	Operation *string `json:"operation,omitempty" xml:"operation,omitempty" require:"true"`
	// derive did的参数
	Payload *DeriveDid `json:"payload,omitempty" xml:"payload,omitempty" require:"true"`
	// 使用私钥对消息中其他字段进行签名
	RequestSignature *string `json:"request_signature,omitempty" xml:"request_signature,omitempty" require:"true"`
	// 场景码，找dis工作人员进行分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
}

func (s StartDidDerivedidExecuteRequest) String() string {
	return tea.Prettify(s)
}

func (s StartDidDerivedidExecuteRequest) GoString() string {
	return s.String()
}

func (s *StartDidDerivedidExecuteRequest) SetAuthToken(v string) *StartDidDerivedidExecuteRequest {
	s.AuthToken = &v
	return s
}

func (s *StartDidDerivedidExecuteRequest) SetProductInstanceId(v string) *StartDidDerivedidExecuteRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *StartDidDerivedidExecuteRequest) SetDid(v string) *StartDidDerivedidExecuteRequest {
	s.Did = &v
	return s
}

func (s *StartDidDerivedidExecuteRequest) SetOperation(v string) *StartDidDerivedidExecuteRequest {
	s.Operation = &v
	return s
}

func (s *StartDidDerivedidExecuteRequest) SetPayload(v *DeriveDid) *StartDidDerivedidExecuteRequest {
	s.Payload = v
	return s
}

func (s *StartDidDerivedidExecuteRequest) SetRequestSignature(v string) *StartDidDerivedidExecuteRequest {
	s.RequestSignature = &v
	return s
}

func (s *StartDidDerivedidExecuteRequest) SetBizCode(v string) *StartDidDerivedidExecuteRequest {
	s.BizCode = &v
	return s
}

type StartDidDerivedidExecuteResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s StartDidDerivedidExecuteResponse) String() string {
	return tea.Prettify(s)
}

func (s StartDidDerivedidExecuteResponse) GoString() string {
	return s.String()
}

func (s *StartDidDerivedidExecuteResponse) SetReqMsgId(v string) *StartDidDerivedidExecuteResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartDidDerivedidExecuteResponse) SetResultCode(v string) *StartDidDerivedidExecuteResponse {
	s.ResultCode = &v
	return s
}

func (s *StartDidDerivedidExecuteResponse) SetResultMsg(v string) *StartDidDerivedidExecuteResponse {
	s.ResultMsg = &v
	return s
}

type ExecDidAccesscontrolAuthorizeRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 发起授权的did
	Fromdid *string `json:"fromdid,omitempty" xml:"fromdid,omitempty" require:"true"`
	// 对其他字段的签名
	RequestSignature *string `json:"request_signature,omitempty" xml:"request_signature,omitempty" require:"true"`
	// 被授权的did
	Todid *string `json:"todid,omitempty" xml:"todid,omitempty" require:"true"`
	// 授权的权限类型
	Type []*string `json:"type,omitempty" xml:"type,omitempty" require:"true" type:"Repeated"`
	// 场景码，找dis工作人员进行分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
}

func (s ExecDidAccesscontrolAuthorizeRequest) String() string {
	return tea.Prettify(s)
}

func (s ExecDidAccesscontrolAuthorizeRequest) GoString() string {
	return s.String()
}

func (s *ExecDidAccesscontrolAuthorizeRequest) SetAuthToken(v string) *ExecDidAccesscontrolAuthorizeRequest {
	s.AuthToken = &v
	return s
}

func (s *ExecDidAccesscontrolAuthorizeRequest) SetProductInstanceId(v string) *ExecDidAccesscontrolAuthorizeRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ExecDidAccesscontrolAuthorizeRequest) SetFromdid(v string) *ExecDidAccesscontrolAuthorizeRequest {
	s.Fromdid = &v
	return s
}

func (s *ExecDidAccesscontrolAuthorizeRequest) SetRequestSignature(v string) *ExecDidAccesscontrolAuthorizeRequest {
	s.RequestSignature = &v
	return s
}

func (s *ExecDidAccesscontrolAuthorizeRequest) SetTodid(v string) *ExecDidAccesscontrolAuthorizeRequest {
	s.Todid = &v
	return s
}

func (s *ExecDidAccesscontrolAuthorizeRequest) SetType(v []*string) *ExecDidAccesscontrolAuthorizeRequest {
	s.Type = v
	return s
}

func (s *ExecDidAccesscontrolAuthorizeRequest) SetBizCode(v string) *ExecDidAccesscontrolAuthorizeRequest {
	s.BizCode = &v
	return s
}

type ExecDidAccesscontrolAuthorizeResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s ExecDidAccesscontrolAuthorizeResponse) String() string {
	return tea.Prettify(s)
}

func (s ExecDidAccesscontrolAuthorizeResponse) GoString() string {
	return s.String()
}

func (s *ExecDidAccesscontrolAuthorizeResponse) SetReqMsgId(v string) *ExecDidAccesscontrolAuthorizeResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ExecDidAccesscontrolAuthorizeResponse) SetResultCode(v string) *ExecDidAccesscontrolAuthorizeResponse {
	s.ResultCode = &v
	return s
}

func (s *ExecDidAccesscontrolAuthorizeResponse) SetResultMsg(v string) *ExecDidAccesscontrolAuthorizeResponse {
	s.ResultMsg = &v
	return s
}

type ExecDidAccesscontrolCheckRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 发起鉴权请求的did
	Fromdid *string `json:"fromdid,omitempty" xml:"fromdid,omitempty" require:"true"`
	// 发起者用私钥对请求其他字段的签名
	RequestSignature *string `json:"request_signature,omitempty" xml:"request_signature,omitempty" require:"true"`
	// 被鉴定权限的did
	Todid *string `json:"todid,omitempty" xml:"todid,omitempty" require:"true"`
	// 鉴定的权限类别
	Type []*string `json:"type,omitempty" xml:"type,omitempty" require:"true" type:"Repeated"`
	// 场景码，找dis工作人员进行分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
}

func (s ExecDidAccesscontrolCheckRequest) String() string {
	return tea.Prettify(s)
}

func (s ExecDidAccesscontrolCheckRequest) GoString() string {
	return s.String()
}

func (s *ExecDidAccesscontrolCheckRequest) SetAuthToken(v string) *ExecDidAccesscontrolCheckRequest {
	s.AuthToken = &v
	return s
}

func (s *ExecDidAccesscontrolCheckRequest) SetProductInstanceId(v string) *ExecDidAccesscontrolCheckRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ExecDidAccesscontrolCheckRequest) SetFromdid(v string) *ExecDidAccesscontrolCheckRequest {
	s.Fromdid = &v
	return s
}

func (s *ExecDidAccesscontrolCheckRequest) SetRequestSignature(v string) *ExecDidAccesscontrolCheckRequest {
	s.RequestSignature = &v
	return s
}

func (s *ExecDidAccesscontrolCheckRequest) SetTodid(v string) *ExecDidAccesscontrolCheckRequest {
	s.Todid = &v
	return s
}

func (s *ExecDidAccesscontrolCheckRequest) SetType(v []*string) *ExecDidAccesscontrolCheckRequest {
	s.Type = v
	return s
}

func (s *ExecDidAccesscontrolCheckRequest) SetBizCode(v string) *ExecDidAccesscontrolCheckRequest {
	s.BizCode = &v
	return s
}

type ExecDidAccesscontrolCheckResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s ExecDidAccesscontrolCheckResponse) String() string {
	return tea.Prettify(s)
}

func (s ExecDidAccesscontrolCheckResponse) GoString() string {
	return s.String()
}

func (s *ExecDidAccesscontrolCheckResponse) SetReqMsgId(v string) *ExecDidAccesscontrolCheckResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ExecDidAccesscontrolCheckResponse) SetResultCode(v string) *ExecDidAccesscontrolCheckResponse {
	s.ResultCode = &v
	return s
}

func (s *ExecDidAccesscontrolCheckResponse) SetResultMsg(v string) *ExecDidAccesscontrolCheckResponse {
	s.ResultMsg = &v
	return s
}

type ExecDidAccesscontrolUpdateRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 发起请求的did
	Fromdid *string `json:"fromdid,omitempty" xml:"fromdid,omitempty" require:"true"`
	// 发起者私钥对其他字段的签名
	RequestSignature *string `json:"request_signature,omitempty" xml:"request_signature,omitempty" require:"true"`
	// 被更新权限的did
	Todid *string `json:"todid,omitempty" xml:"todid,omitempty" require:"true"`
	// 更新后的权限
	Type []*string `json:"type,omitempty" xml:"type,omitempty" require:"true" type:"Repeated"`
	// 场景码，找dis工作人员进行分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
}

func (s ExecDidAccesscontrolUpdateRequest) String() string {
	return tea.Prettify(s)
}

func (s ExecDidAccesscontrolUpdateRequest) GoString() string {
	return s.String()
}

func (s *ExecDidAccesscontrolUpdateRequest) SetAuthToken(v string) *ExecDidAccesscontrolUpdateRequest {
	s.AuthToken = &v
	return s
}

func (s *ExecDidAccesscontrolUpdateRequest) SetProductInstanceId(v string) *ExecDidAccesscontrolUpdateRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ExecDidAccesscontrolUpdateRequest) SetFromdid(v string) *ExecDidAccesscontrolUpdateRequest {
	s.Fromdid = &v
	return s
}

func (s *ExecDidAccesscontrolUpdateRequest) SetRequestSignature(v string) *ExecDidAccesscontrolUpdateRequest {
	s.RequestSignature = &v
	return s
}

func (s *ExecDidAccesscontrolUpdateRequest) SetTodid(v string) *ExecDidAccesscontrolUpdateRequest {
	s.Todid = &v
	return s
}

func (s *ExecDidAccesscontrolUpdateRequest) SetType(v []*string) *ExecDidAccesscontrolUpdateRequest {
	s.Type = v
	return s
}

func (s *ExecDidAccesscontrolUpdateRequest) SetBizCode(v string) *ExecDidAccesscontrolUpdateRequest {
	s.BizCode = &v
	return s
}

type ExecDidAccesscontrolUpdateResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s ExecDidAccesscontrolUpdateResponse) String() string {
	return tea.Prettify(s)
}

func (s ExecDidAccesscontrolUpdateResponse) GoString() string {
	return s.String()
}

func (s *ExecDidAccesscontrolUpdateResponse) SetReqMsgId(v string) *ExecDidAccesscontrolUpdateResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ExecDidAccesscontrolUpdateResponse) SetResultCode(v string) *ExecDidAccesscontrolUpdateResponse {
	s.ResultCode = &v
	return s
}

func (s *ExecDidAccesscontrolUpdateResponse) SetResultMsg(v string) *ExecDidAccesscontrolUpdateResponse {
	s.ResultMsg = &v
	return s
}

type CreateDidIdentityIotRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 扩展字段
	ExtensionInfo *string `json:"extension_info,omitempty" xml:"extension_info,omitempty"`
	// 公钥
	PublicKey *string `json:"public_key,omitempty" xml:"public_key,omitempty" require:"true"`
	// 恢复秘钥
	RecoveryKey *string `json:"recovery_key,omitempty" xml:"recovery_key,omitempty" require:"true"`
	// id
	UserId *string `json:"user_id,omitempty" xml:"user_id,omitempty" require:"true"`
	// user name
	UserName *string `json:"user_name,omitempty" xml:"user_name,omitempty"`
	// 场景码，找dis工作人员进行分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
}

func (s CreateDidIdentityIotRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDidIdentityIotRequest) GoString() string {
	return s.String()
}

func (s *CreateDidIdentityIotRequest) SetAuthToken(v string) *CreateDidIdentityIotRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateDidIdentityIotRequest) SetProductInstanceId(v string) *CreateDidIdentityIotRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateDidIdentityIotRequest) SetExtensionInfo(v string) *CreateDidIdentityIotRequest {
	s.ExtensionInfo = &v
	return s
}

func (s *CreateDidIdentityIotRequest) SetPublicKey(v string) *CreateDidIdentityIotRequest {
	s.PublicKey = &v
	return s
}

func (s *CreateDidIdentityIotRequest) SetRecoveryKey(v string) *CreateDidIdentityIotRequest {
	s.RecoveryKey = &v
	return s
}

func (s *CreateDidIdentityIotRequest) SetUserId(v string) *CreateDidIdentityIotRequest {
	s.UserId = &v
	return s
}

func (s *CreateDidIdentityIotRequest) SetUserName(v string) *CreateDidIdentityIotRequest {
	s.UserName = &v
	return s
}

func (s *CreateDidIdentityIotRequest) SetBizCode(v string) *CreateDidIdentityIotRequest {
	s.BizCode = &v
	return s
}

type CreateDidIdentityIotResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 返回创建的did
	Did *string `json:"did,omitempty" xml:"did,omitempty"`
}

func (s CreateDidIdentityIotResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDidIdentityIotResponse) GoString() string {
	return s.String()
}

func (s *CreateDidIdentityIotResponse) SetReqMsgId(v string) *CreateDidIdentityIotResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateDidIdentityIotResponse) SetResultCode(v string) *CreateDidIdentityIotResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateDidIdentityIotResponse) SetResultMsg(v string) *CreateDidIdentityIotResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateDidIdentityIotResponse) SetDid(v string) *CreateDidIdentityIotResponse {
	s.Did = &v
	return s
}

type ExecDidServicetypeCreateRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 发起该交易的did
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 创建服务类型
	Operation *string `json:"operation,omitempty" xml:"operation,omitempty" require:"true"`
	// 新增服务类型的定义Json 字符串
	// {
	//   "@context": {
	//     "version": 1,
	//     "id": "{ServiceTypeName}", //<- 50 Byte
	//     "type": "ServiceType", //<- 固定值
	//     "serviceInput": "", //<- 入参描述
	//     "serviceOutput": "", //<- 出参描述
	//     "accessMode": "", //<- 访问模式
	//     "description": "" //<- 服务描述
	//   },
	//    "controller": "{Creator`s did}" // <- 创建者did，只有该创建者才能修改服务类型定义
	// }
	Payload *string `json:"payload,omitempty" xml:"payload,omitempty" require:"true"`
	// 使用私钥对消息中其他字段进行签名
	RequestSignature *string `json:"request_signature,omitempty" xml:"request_signature,omitempty" require:"true"`
	// 场景码，找dis工作人员进行分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
}

func (s ExecDidServicetypeCreateRequest) String() string {
	return tea.Prettify(s)
}

func (s ExecDidServicetypeCreateRequest) GoString() string {
	return s.String()
}

func (s *ExecDidServicetypeCreateRequest) SetAuthToken(v string) *ExecDidServicetypeCreateRequest {
	s.AuthToken = &v
	return s
}

func (s *ExecDidServicetypeCreateRequest) SetProductInstanceId(v string) *ExecDidServicetypeCreateRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ExecDidServicetypeCreateRequest) SetDid(v string) *ExecDidServicetypeCreateRequest {
	s.Did = &v
	return s
}

func (s *ExecDidServicetypeCreateRequest) SetOperation(v string) *ExecDidServicetypeCreateRequest {
	s.Operation = &v
	return s
}

func (s *ExecDidServicetypeCreateRequest) SetPayload(v string) *ExecDidServicetypeCreateRequest {
	s.Payload = &v
	return s
}

func (s *ExecDidServicetypeCreateRequest) SetRequestSignature(v string) *ExecDidServicetypeCreateRequest {
	s.RequestSignature = &v
	return s
}

func (s *ExecDidServicetypeCreateRequest) SetBizCode(v string) *ExecDidServicetypeCreateRequest {
	s.BizCode = &v
	return s
}

type ExecDidServicetypeCreateResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 服务注册成功之后返回注册的服务类型名
	ServiceType *string `json:"service_type,omitempty" xml:"service_type,omitempty"`
}

func (s ExecDidServicetypeCreateResponse) String() string {
	return tea.Prettify(s)
}

func (s ExecDidServicetypeCreateResponse) GoString() string {
	return s.String()
}

func (s *ExecDidServicetypeCreateResponse) SetReqMsgId(v string) *ExecDidServicetypeCreateResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ExecDidServicetypeCreateResponse) SetResultCode(v string) *ExecDidServicetypeCreateResponse {
	s.ResultCode = &v
	return s
}

func (s *ExecDidServicetypeCreateResponse) SetResultMsg(v string) *ExecDidServicetypeCreateResponse {
	s.ResultMsg = &v
	return s
}

func (s *ExecDidServicetypeCreateResponse) SetServiceType(v string) *ExecDidServicetypeCreateResponse {
	s.ServiceType = &v
	return s
}

type CreateDidIdentityCommonRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 场景码，找dis工作人员进行分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
	// 扩展字段
	ExtensionInfo *string `json:"extension_info,omitempty" xml:"extension_info,omitempty"`
	// 公钥
	PublicKey *string `json:"public_key,omitempty" xml:"public_key,omitempty" require:"true"`
	// 恢复公钥
	RecoveryKey *string `json:"recovery_key,omitempty" xml:"recovery_key,omitempty" require:"true"`
	// user_id
	UserId *string `json:"user_id,omitempty" xml:"user_id,omitempty" require:"true"`
	// 名称
	UserName *string `json:"user_name,omitempty" xml:"user_name,omitempty"`
	// 通用DID类型 Person Corporate Devices Data Common
	EntityType *string `json:"entity_type,omitempty" xml:"entity_type,omitempty"`
}

func (s CreateDidIdentityCommonRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDidIdentityCommonRequest) GoString() string {
	return s.String()
}

func (s *CreateDidIdentityCommonRequest) SetAuthToken(v string) *CreateDidIdentityCommonRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateDidIdentityCommonRequest) SetProductInstanceId(v string) *CreateDidIdentityCommonRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateDidIdentityCommonRequest) SetBizCode(v string) *CreateDidIdentityCommonRequest {
	s.BizCode = &v
	return s
}

func (s *CreateDidIdentityCommonRequest) SetExtensionInfo(v string) *CreateDidIdentityCommonRequest {
	s.ExtensionInfo = &v
	return s
}

func (s *CreateDidIdentityCommonRequest) SetPublicKey(v string) *CreateDidIdentityCommonRequest {
	s.PublicKey = &v
	return s
}

func (s *CreateDidIdentityCommonRequest) SetRecoveryKey(v string) *CreateDidIdentityCommonRequest {
	s.RecoveryKey = &v
	return s
}

func (s *CreateDidIdentityCommonRequest) SetUserId(v string) *CreateDidIdentityCommonRequest {
	s.UserId = &v
	return s
}

func (s *CreateDidIdentityCommonRequest) SetUserName(v string) *CreateDidIdentityCommonRequest {
	s.UserName = &v
	return s
}

func (s *CreateDidIdentityCommonRequest) SetEntityType(v string) *CreateDidIdentityCommonRequest {
	s.EntityType = &v
	return s
}

type CreateDidIdentityCommonResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// did
	Did *string `json:"did,omitempty" xml:"did,omitempty"`
}

func (s CreateDidIdentityCommonResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDidIdentityCommonResponse) GoString() string {
	return s.String()
}

func (s *CreateDidIdentityCommonResponse) SetReqMsgId(v string) *CreateDidIdentityCommonResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateDidIdentityCommonResponse) SetResultCode(v string) *CreateDidIdentityCommonResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateDidIdentityCommonResponse) SetResultMsg(v string) *CreateDidIdentityCommonResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateDidIdentityCommonResponse) SetDid(v string) *CreateDidIdentityCommonResponse {
	s.Did = &v
	return s
}

type ConfirmVcVcrepoVctransmitRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 请求发起者did
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// vc_transmit_cnf
	Operation *string `json:"operation,omitempty" xml:"operation,omitempty" require:"true"`
	// VC传输确认请求参数
	Payload []*VcTransmitCnf `json:"payload,omitempty" xml:"payload,omitempty" require:"true" type:"Repeated"`
	// 签名
	Signature *string `json:"signature,omitempty" xml:"signature,omitempty" require:"true"`
	// 场景码，找dis工作人员进行分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
}

func (s ConfirmVcVcrepoVctransmitRequest) String() string {
	return tea.Prettify(s)
}

func (s ConfirmVcVcrepoVctransmitRequest) GoString() string {
	return s.String()
}

func (s *ConfirmVcVcrepoVctransmitRequest) SetAuthToken(v string) *ConfirmVcVcrepoVctransmitRequest {
	s.AuthToken = &v
	return s
}

func (s *ConfirmVcVcrepoVctransmitRequest) SetProductInstanceId(v string) *ConfirmVcVcrepoVctransmitRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ConfirmVcVcrepoVctransmitRequest) SetDid(v string) *ConfirmVcVcrepoVctransmitRequest {
	s.Did = &v
	return s
}

func (s *ConfirmVcVcrepoVctransmitRequest) SetOperation(v string) *ConfirmVcVcrepoVctransmitRequest {
	s.Operation = &v
	return s
}

func (s *ConfirmVcVcrepoVctransmitRequest) SetPayload(v []*VcTransmitCnf) *ConfirmVcVcrepoVctransmitRequest {
	s.Payload = v
	return s
}

func (s *ConfirmVcVcrepoVctransmitRequest) SetSignature(v string) *ConfirmVcVcrepoVctransmitRequest {
	s.Signature = &v
	return s
}

func (s *ConfirmVcVcrepoVctransmitRequest) SetBizCode(v string) *ConfirmVcVcrepoVctransmitRequest {
	s.BizCode = &v
	return s
}

type ConfirmVcVcrepoVctransmitResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 传输结果
	Result []*VcTransmitResult `json:"result,omitempty" xml:"result,omitempty" type:"Repeated"`
}

func (s ConfirmVcVcrepoVctransmitResponse) String() string {
	return tea.Prettify(s)
}

func (s ConfirmVcVcrepoVctransmitResponse) GoString() string {
	return s.String()
}

func (s *ConfirmVcVcrepoVctransmitResponse) SetReqMsgId(v string) *ConfirmVcVcrepoVctransmitResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ConfirmVcVcrepoVctransmitResponse) SetResultCode(v string) *ConfirmVcVcrepoVctransmitResponse {
	s.ResultCode = &v
	return s
}

func (s *ConfirmVcVcrepoVctransmitResponse) SetResultMsg(v string) *ConfirmVcVcrepoVctransmitResponse {
	s.ResultMsg = &v
	return s
}

func (s *ConfirmVcVcrepoVctransmitResponse) SetResult(v []*VcTransmitResult) *ConfirmVcVcrepoVctransmitResponse {
	s.Result = v
	return s
}

type UpdateDidUpdatedidPubkeyRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 场景码，找dis工作人员进行分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
	// did描述符
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 具体操作名
	Operation *string `json:"operation,omitempty" xml:"operation,omitempty" require:"true"`
	// 需要更新的新的公钥，仅在未完成上链的DID 才能做这个更新
	PublicKey *string `json:"public_key,omitempty" xml:"public_key,omitempty" require:"true"`
	// sig(hash(operation+payload+did)) 使用sdk生成方式
	RequestSignature *string `json:"request_signature,omitempty" xml:"request_signature,omitempty" require:"true"`
}

func (s UpdateDidUpdatedidPubkeyRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateDidUpdatedidPubkeyRequest) GoString() string {
	return s.String()
}

func (s *UpdateDidUpdatedidPubkeyRequest) SetAuthToken(v string) *UpdateDidUpdatedidPubkeyRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateDidUpdatedidPubkeyRequest) SetProductInstanceId(v string) *UpdateDidUpdatedidPubkeyRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UpdateDidUpdatedidPubkeyRequest) SetBizCode(v string) *UpdateDidUpdatedidPubkeyRequest {
	s.BizCode = &v
	return s
}

func (s *UpdateDidUpdatedidPubkeyRequest) SetDid(v string) *UpdateDidUpdatedidPubkeyRequest {
	s.Did = &v
	return s
}

func (s *UpdateDidUpdatedidPubkeyRequest) SetOperation(v string) *UpdateDidUpdatedidPubkeyRequest {
	s.Operation = &v
	return s
}

func (s *UpdateDidUpdatedidPubkeyRequest) SetPublicKey(v string) *UpdateDidUpdatedidPubkeyRequest {
	s.PublicKey = &v
	return s
}

func (s *UpdateDidUpdatedidPubkeyRequest) SetRequestSignature(v string) *UpdateDidUpdatedidPubkeyRequest {
	s.RequestSignature = &v
	return s
}

type UpdateDidUpdatedidPubkeyResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateDidUpdatedidPubkeyResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateDidUpdatedidPubkeyResponse) GoString() string {
	return s.String()
}

func (s *UpdateDidUpdatedidPubkeyResponse) SetReqMsgId(v string) *UpdateDidUpdatedidPubkeyResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateDidUpdatedidPubkeyResponse) SetResultCode(v string) *UpdateDidUpdatedidPubkeyResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateDidUpdatedidPubkeyResponse) SetResultMsg(v string) *UpdateDidUpdatedidPubkeyResponse {
	s.ResultMsg = &v
	return s
}

type AddDidUpdatedidServicelistRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 场景码，找dis工作人员进行分配
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
	// 待处理did
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 具体操作名
	Operation *string `json:"operation,omitempty" xml:"operation,omitempty" require:"true"`
	// 更新ServiceList
	Payload *UpdateDidServiceList `json:"payload,omitempty" xml:"payload,omitempty" require:"true"`
	// sig(hash(operation+payload+did)) 使用sdk生成方式
	RequestSignature *string `json:"request_signature,omitempty" xml:"request_signature,omitempty" require:"true"`
}

func (s AddDidUpdatedidServicelistRequest) String() string {
	return tea.Prettify(s)
}

func (s AddDidUpdatedidServicelistRequest) GoString() string {
	return s.String()
}

func (s *AddDidUpdatedidServicelistRequest) SetAuthToken(v string) *AddDidUpdatedidServicelistRequest {
	s.AuthToken = &v
	return s
}

func (s *AddDidUpdatedidServicelistRequest) SetProductInstanceId(v string) *AddDidUpdatedidServicelistRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *AddDidUpdatedidServicelistRequest) SetBizCode(v string) *AddDidUpdatedidServicelistRequest {
	s.BizCode = &v
	return s
}

func (s *AddDidUpdatedidServicelistRequest) SetDid(v string) *AddDidUpdatedidServicelistRequest {
	s.Did = &v
	return s
}

func (s *AddDidUpdatedidServicelistRequest) SetOperation(v string) *AddDidUpdatedidServicelistRequest {
	s.Operation = &v
	return s
}

func (s *AddDidUpdatedidServicelistRequest) SetPayload(v *UpdateDidServiceList) *AddDidUpdatedidServicelistRequest {
	s.Payload = v
	return s
}

func (s *AddDidUpdatedidServicelistRequest) SetRequestSignature(v string) *AddDidUpdatedidServicelistRequest {
	s.RequestSignature = &v
	return s
}

type AddDidUpdatedidServicelistResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s AddDidUpdatedidServicelistResponse) String() string {
	return tea.Prettify(s)
}

func (s AddDidUpdatedidServicelistResponse) GoString() string {
	return s.String()
}

func (s *AddDidUpdatedidServicelistResponse) SetReqMsgId(v string) *AddDidUpdatedidServicelistResponse {
	s.ReqMsgId = &v
	return s
}

func (s *AddDidUpdatedidServicelistResponse) SetResultCode(v string) *AddDidUpdatedidServicelistResponse {
	s.ResultCode = &v
	return s
}

func (s *AddDidUpdatedidServicelistResponse) SetResultMsg(v string) *AddDidUpdatedidServicelistResponse {
	s.ResultMsg = &v
	return s
}

type StartVcVcrepositoryWriteRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 指定情况跟随 auth_did_list，如果auth_did_list不指定，则此字段无需指定，否则是与auth_did_list长度相同，并且对应auth_did_list的did的公钥加密AES密钥的结果
	AuthAccessKeyList []*string `json:"auth_access_key_list,omitempty" xml:"auth_access_key_list,omitempty" type:"Repeated"`
	// 配置此列表，则说明需要并且控制访问权限，此列表为初始配置的did名单，拥有对此颁发证书的读取权限。 如果不配置此列表，则默认将明文存储此证书，任何did都可以访问此证书声明内容。
	AuthDidList []*string `json:"auth_did_list,omitempty" xml:"auth_did_list,omitempty" type:"Repeated"`
	// 写入VC数据的did，通常为证书VC的颁发者issuer的did。
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 对当前VC Repository操作的描述，signature字段需要包含此操作的描述，最终会记录在VC Repository连接的链上，可追溯此operation操作记录。
	Operation *string `json:"operation,omitempty" xml:"operation,omitempty" require:"true"`
	// 写数据的did对应使用公钥做的数据签名，确保数据准确性。
	Signature *string `json:"signature,omitempty" xml:"signature,omitempty" require:"true"`
	// 可验证声明的完整声明，其中claim字段可以已被加密保护 {"content":{"verion":"0.7.0","issuer":"xxxx","subject":"xxxx","expire":1530735444,"issucanceDate":1530735000,"id":"XXXX","claim":{//用户自定义，可加密处理},"status":{"type":"XXXX","id":"XXXXX"}},"proof":{"type":"ecdsa","created":"2018-06-18T21:19:10Z","verificationMethod":"XXXX","signatureValue":"XXXXX"}}
	VcContent *string `json:"vc_content,omitempty" xml:"vc_content,omitempty" require:"true"`
}

func (s StartVcVcrepositoryWriteRequest) String() string {
	return tea.Prettify(s)
}

func (s StartVcVcrepositoryWriteRequest) GoString() string {
	return s.String()
}

func (s *StartVcVcrepositoryWriteRequest) SetAuthToken(v string) *StartVcVcrepositoryWriteRequest {
	s.AuthToken = &v
	return s
}

func (s *StartVcVcrepositoryWriteRequest) SetProductInstanceId(v string) *StartVcVcrepositoryWriteRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *StartVcVcrepositoryWriteRequest) SetAuthAccessKeyList(v []*string) *StartVcVcrepositoryWriteRequest {
	s.AuthAccessKeyList = v
	return s
}

func (s *StartVcVcrepositoryWriteRequest) SetAuthDidList(v []*string) *StartVcVcrepositoryWriteRequest {
	s.AuthDidList = v
	return s
}

func (s *StartVcVcrepositoryWriteRequest) SetDid(v string) *StartVcVcrepositoryWriteRequest {
	s.Did = &v
	return s
}

func (s *StartVcVcrepositoryWriteRequest) SetOperation(v string) *StartVcVcrepositoryWriteRequest {
	s.Operation = &v
	return s
}

func (s *StartVcVcrepositoryWriteRequest) SetSignature(v string) *StartVcVcrepositoryWriteRequest {
	s.Signature = &v
	return s
}

func (s *StartVcVcrepositoryWriteRequest) SetVcContent(v string) *StartVcVcrepositoryWriteRequest {
	s.VcContent = &v
	return s
}

type StartVcVcrepositoryWriteResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// true:操作成功，false:操作失败
	Result *bool `json:"result,omitempty" xml:"result,omitempty"`
}

func (s StartVcVcrepositoryWriteResponse) String() string {
	return tea.Prettify(s)
}

func (s StartVcVcrepositoryWriteResponse) GoString() string {
	return s.String()
}

func (s *StartVcVcrepositoryWriteResponse) SetReqMsgId(v string) *StartVcVcrepositoryWriteResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartVcVcrepositoryWriteResponse) SetResultCode(v string) *StartVcVcrepositoryWriteResponse {
	s.ResultCode = &v
	return s
}

func (s *StartVcVcrepositoryWriteResponse) SetResultMsg(v string) *StartVcVcrepositoryWriteResponse {
	s.ResultMsg = &v
	return s
}

func (s *StartVcVcrepositoryWriteResponse) SetResult(v bool) *StartVcVcrepositoryWriteResponse {
	s.Result = &v
	return s
}

type StartVcVcrepositoryReadRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 提交请求的did，通常是在授权列表中的did才具有读取权限。
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 对当前VC Repository操作的描述，signature字段需要包含此操作的描述，最终会记录在VC Repository连接的链上，可追溯此operation操作记录。
	Operation *string `json:"operation,omitempty" xml:"operation,omitempty" require:"true"`
	// 读数据请求的did对应使用公钥做的数据签名，确保数据准确性，签名包含operation字段，会一起上链。
	Signature *string `json:"signature,omitempty" xml:"signature,omitempty" require:"true"`
	// 目标读取VC的唯一id标识。
	VerifiableClaimId *string `json:"verifiable_claim_id,omitempty" xml:"verifiable_claim_id,omitempty" require:"true"`
}

func (s StartVcVcrepositoryReadRequest) String() string {
	return tea.Prettify(s)
}

func (s StartVcVcrepositoryReadRequest) GoString() string {
	return s.String()
}

func (s *StartVcVcrepositoryReadRequest) SetAuthToken(v string) *StartVcVcrepositoryReadRequest {
	s.AuthToken = &v
	return s
}

func (s *StartVcVcrepositoryReadRequest) SetProductInstanceId(v string) *StartVcVcrepositoryReadRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *StartVcVcrepositoryReadRequest) SetDid(v string) *StartVcVcrepositoryReadRequest {
	s.Did = &v
	return s
}

func (s *StartVcVcrepositoryReadRequest) SetOperation(v string) *StartVcVcrepositoryReadRequest {
	s.Operation = &v
	return s
}

func (s *StartVcVcrepositoryReadRequest) SetSignature(v string) *StartVcVcrepositoryReadRequest {
	s.Signature = &v
	return s
}

func (s *StartVcVcrepositoryReadRequest) SetVerifiableClaimId(v string) *StartVcVcrepositoryReadRequest {
	s.VerifiableClaimId = &v
	return s
}

type StartVcVcrepositoryReadResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 密文加密16进制表示的字符串，是请求方did对应的didDoc中的公钥加密AES密钥的结果，使用标准信封加密的方式，AES密钥用于解密verifiable_claim_content的claim字段，如果此auth_access_key是空字符串，则说明verifiable_claim_content的内容是明文。
	AuthAccessKey *string `json:"auth_access_key,omitempty" xml:"auth_access_key,omitempty"`
	// 可验证声明的完整声明 {"content":{"verion":"0.7.0","issuer":"xxxx","subject":"xxxx","expire":1530735444,"issucanceDate":1530735000,"id":"XXXX","claim":{//用户自定义，可能为密文},"status":{"type":"XXXX","id":"XXXXX"}},"proof":{"type":"ecdsa","created":"2018-06-18T21:19:10Z","verificationMethod":"XXXX","signatureValue":"XXXXX"}}
	VerifiableClaimContent *string `json:"verifiable_claim_content,omitempty" xml:"verifiable_claim_content,omitempty"`
}

func (s StartVcVcrepositoryReadResponse) String() string {
	return tea.Prettify(s)
}

func (s StartVcVcrepositoryReadResponse) GoString() string {
	return s.String()
}

func (s *StartVcVcrepositoryReadResponse) SetReqMsgId(v string) *StartVcVcrepositoryReadResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartVcVcrepositoryReadResponse) SetResultCode(v string) *StartVcVcrepositoryReadResponse {
	s.ResultCode = &v
	return s
}

func (s *StartVcVcrepositoryReadResponse) SetResultMsg(v string) *StartVcVcrepositoryReadResponse {
	s.ResultMsg = &v
	return s
}

func (s *StartVcVcrepositoryReadResponse) SetAuthAccessKey(v string) *StartVcVcrepositoryReadResponse {
	s.AuthAccessKey = &v
	return s
}

func (s *StartVcVcrepositoryReadResponse) SetVerifiableClaimContent(v string) *StartVcVcrepositoryReadResponse {
	s.VerifiableClaimContent = &v
	return s
}

type StartVcVcrepositoryAuthRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 指定情况跟随 auth_did_list，如果auth_did_list不指定，则此字段无需指定，否则是与auth_did_list长度相同，并且对应auth_did_list的did的公钥加密AES密钥的结果。
	AuthAccessKeyList []*string `json:"auth_access_key_list,omitempty" xml:"auth_access_key_list,omitempty" require:"true" type:"Repeated"`
	// 本次追加授权的did列表
	AuthDidList []*string `json:"auth_did_list,omitempty" xml:"auth_did_list,omitempty" require:"true" type:"Repeated"`
	// 提交请求的did，通常是目标VC的subject did，也就是VC的owner。
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 对当前VC Repository操作的描述，signature字段需要包含此操作的描述，最终会记录在VC Repository连接的链上，可追溯此operation操作记录。
	Operation *string `json:"operation,omitempty" xml:"operation,omitempty" require:"true"`
	// 读数据请求的did对应使用公钥做的数据签名，确保数据准确性，签名包含operation字段，会一起上链。
	Signature *string `json:"signature,omitempty" xml:"signature,omitempty" require:"true"`
	// 目标VC的唯一id标识。
	VerifiableClaimId *string `json:"verifiable_claim_id,omitempty" xml:"verifiable_claim_id,omitempty" require:"true"`
}

func (s StartVcVcrepositoryAuthRequest) String() string {
	return tea.Prettify(s)
}

func (s StartVcVcrepositoryAuthRequest) GoString() string {
	return s.String()
}

func (s *StartVcVcrepositoryAuthRequest) SetAuthToken(v string) *StartVcVcrepositoryAuthRequest {
	s.AuthToken = &v
	return s
}

func (s *StartVcVcrepositoryAuthRequest) SetProductInstanceId(v string) *StartVcVcrepositoryAuthRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *StartVcVcrepositoryAuthRequest) SetAuthAccessKeyList(v []*string) *StartVcVcrepositoryAuthRequest {
	s.AuthAccessKeyList = v
	return s
}

func (s *StartVcVcrepositoryAuthRequest) SetAuthDidList(v []*string) *StartVcVcrepositoryAuthRequest {
	s.AuthDidList = v
	return s
}

func (s *StartVcVcrepositoryAuthRequest) SetDid(v string) *StartVcVcrepositoryAuthRequest {
	s.Did = &v
	return s
}

func (s *StartVcVcrepositoryAuthRequest) SetOperation(v string) *StartVcVcrepositoryAuthRequest {
	s.Operation = &v
	return s
}

func (s *StartVcVcrepositoryAuthRequest) SetSignature(v string) *StartVcVcrepositoryAuthRequest {
	s.Signature = &v
	return s
}

func (s *StartVcVcrepositoryAuthRequest) SetVerifiableClaimId(v string) *StartVcVcrepositoryAuthRequest {
	s.VerifiableClaimId = &v
	return s
}

type StartVcVcrepositoryAuthResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// true：操作成功，false：操作失败
	Result *bool `json:"result,omitempty" xml:"result,omitempty"`
}

func (s StartVcVcrepositoryAuthResponse) String() string {
	return tea.Prettify(s)
}

func (s StartVcVcrepositoryAuthResponse) GoString() string {
	return s.String()
}

func (s *StartVcVcrepositoryAuthResponse) SetReqMsgId(v string) *StartVcVcrepositoryAuthResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartVcVcrepositoryAuthResponse) SetResultCode(v string) *StartVcVcrepositoryAuthResponse {
	s.ResultCode = &v
	return s
}

func (s *StartVcVcrepositoryAuthResponse) SetResultMsg(v string) *StartVcVcrepositoryAuthResponse {
	s.ResultMsg = &v
	return s
}

func (s *StartVcVcrepositoryAuthResponse) SetResult(v bool) *StartVcVcrepositoryAuthResponse {
	s.Result = &v
	return s
}

type StartVcVcrepoUserRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 用户did标示
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 操作缩写
	Operation *string `json:"operation,omitempty" xml:"operation,omitempty" require:"true"`
	// 注册用户实际参数
	Payload *VcUserRegisterPayload `json:"payload,omitempty" xml:"payload,omitempty" require:"true"`
	// 用户使用私钥对参数进行签名
	Signature *string `json:"signature,omitempty" xml:"signature,omitempty" require:"true"`
}

func (s StartVcVcrepoUserRequest) String() string {
	return tea.Prettify(s)
}

func (s StartVcVcrepoUserRequest) GoString() string {
	return s.String()
}

func (s *StartVcVcrepoUserRequest) SetAuthToken(v string) *StartVcVcrepoUserRequest {
	s.AuthToken = &v
	return s
}

func (s *StartVcVcrepoUserRequest) SetProductInstanceId(v string) *StartVcVcrepoUserRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *StartVcVcrepoUserRequest) SetDid(v string) *StartVcVcrepoUserRequest {
	s.Did = &v
	return s
}

func (s *StartVcVcrepoUserRequest) SetOperation(v string) *StartVcVcrepoUserRequest {
	s.Operation = &v
	return s
}

func (s *StartVcVcrepoUserRequest) SetPayload(v *VcUserRegisterPayload) *StartVcVcrepoUserRequest {
	s.Payload = v
	return s
}

func (s *StartVcVcrepoUserRequest) SetSignature(v string) *StartVcVcrepoUserRequest {
	s.Signature = &v
	return s
}

type StartVcVcrepoUserResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s StartVcVcrepoUserResponse) String() string {
	return tea.Prettify(s)
}

func (s StartVcVcrepoUserResponse) GoString() string {
	return s.String()
}

func (s *StartVcVcrepoUserResponse) SetReqMsgId(v string) *StartVcVcrepoUserResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartVcVcrepoUserResponse) SetResultCode(v string) *StartVcVcrepoUserResponse {
	s.ResultCode = &v
	return s
}

func (s *StartVcVcrepoUserResponse) SetResultMsg(v string) *StartVcVcrepoUserResponse {
	s.ResultMsg = &v
	return s
}

type UpdateVcVcrepoUserRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 用户did标示
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 操作缩写
	Operation *string `json:"operation,omitempty" xml:"operation,omitempty" require:"true"`
	// 更新的user信息
	Payload *VcUserRegisterPayload `json:"payload,omitempty" xml:"payload,omitempty" require:"true"`
	// 用户使用私钥对参数进行签名
	Signature *string `json:"signature,omitempty" xml:"signature,omitempty" require:"true"`
}

func (s UpdateVcVcrepoUserRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateVcVcrepoUserRequest) GoString() string {
	return s.String()
}

func (s *UpdateVcVcrepoUserRequest) SetAuthToken(v string) *UpdateVcVcrepoUserRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateVcVcrepoUserRequest) SetProductInstanceId(v string) *UpdateVcVcrepoUserRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UpdateVcVcrepoUserRequest) SetDid(v string) *UpdateVcVcrepoUserRequest {
	s.Did = &v
	return s
}

func (s *UpdateVcVcrepoUserRequest) SetOperation(v string) *UpdateVcVcrepoUserRequest {
	s.Operation = &v
	return s
}

func (s *UpdateVcVcrepoUserRequest) SetPayload(v *VcUserRegisterPayload) *UpdateVcVcrepoUserRequest {
	s.Payload = v
	return s
}

func (s *UpdateVcVcrepoUserRequest) SetSignature(v string) *UpdateVcVcrepoUserRequest {
	s.Signature = &v
	return s
}

type UpdateVcVcrepoUserResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateVcVcrepoUserResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateVcVcrepoUserResponse) GoString() string {
	return s.String()
}

func (s *UpdateVcVcrepoUserResponse) SetReqMsgId(v string) *UpdateVcVcrepoUserResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateVcVcrepoUserResponse) SetResultCode(v string) *UpdateVcVcrepoUserResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateVcVcrepoUserResponse) SetResultMsg(v string) *UpdateVcVcrepoUserResponse {
	s.ResultMsg = &v
	return s
}

type StartVcVcrepoVctransmitRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 用户did标示
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 操作缩写
	Operation *string `json:"operation,omitempty" xml:"operation,omitempty" require:"true"`
	// 实际参数
	Payload *VcTransmitPayload `json:"payload,omitempty" xml:"payload,omitempty" require:"true"`
	// 用户使用私钥对参数进行签名
	Signature *string `json:"signature,omitempty" xml:"signature,omitempty" require:"true"`
}

func (s StartVcVcrepoVctransmitRequest) String() string {
	return tea.Prettify(s)
}

func (s StartVcVcrepoVctransmitRequest) GoString() string {
	return s.String()
}

func (s *StartVcVcrepoVctransmitRequest) SetAuthToken(v string) *StartVcVcrepoVctransmitRequest {
	s.AuthToken = &v
	return s
}

func (s *StartVcVcrepoVctransmitRequest) SetProductInstanceId(v string) *StartVcVcrepoVctransmitRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *StartVcVcrepoVctransmitRequest) SetDid(v string) *StartVcVcrepoVctransmitRequest {
	s.Did = &v
	return s
}

func (s *StartVcVcrepoVctransmitRequest) SetOperation(v string) *StartVcVcrepoVctransmitRequest {
	s.Operation = &v
	return s
}

func (s *StartVcVcrepoVctransmitRequest) SetPayload(v *VcTransmitPayload) *StartVcVcrepoVctransmitRequest {
	s.Payload = v
	return s
}

func (s *StartVcVcrepoVctransmitRequest) SetSignature(v string) *StartVcVcrepoVctransmitRequest {
	s.Signature = &v
	return s
}

type StartVcVcrepoVctransmitResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 具体传输结果
	Result []*VcTransmitResult `json:"result,omitempty" xml:"result,omitempty" type:"Repeated"`
}

func (s StartVcVcrepoVctransmitResponse) String() string {
	return tea.Prettify(s)
}

func (s StartVcVcrepoVctransmitResponse) GoString() string {
	return s.String()
}

func (s *StartVcVcrepoVctransmitResponse) SetReqMsgId(v string) *StartVcVcrepoVctransmitResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartVcVcrepoVctransmitResponse) SetResultCode(v string) *StartVcVcrepoVctransmitResponse {
	s.ResultCode = &v
	return s
}

func (s *StartVcVcrepoVctransmitResponse) SetResultMsg(v string) *StartVcVcrepoVctransmitResponse {
	s.ResultMsg = &v
	return s
}

func (s *StartVcVcrepoVctransmitResponse) SetResult(v []*VcTransmitResult) *StartVcVcrepoVctransmitResponse {
	s.Result = v
	return s
}

type StartVcVcrepoControlleradduserRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// controller did标示
	Controller *string `json:"controller,omitempty" xml:"controller,omitempty" require:"true"`
	// 操作缩写
	Operation *string `json:"operation,omitempty" xml:"operation,omitempty" require:"true"`
	// 实际参数
	Payload *VcControllerAddUserRegisterPayload `json:"payload,omitempty" xml:"payload,omitempty" require:"true"`
	// controller使用私钥对参数进行签名
	Signature *string `json:"signature,omitempty" xml:"signature,omitempty" require:"true"`
}

func (s StartVcVcrepoControlleradduserRequest) String() string {
	return tea.Prettify(s)
}

func (s StartVcVcrepoControlleradduserRequest) GoString() string {
	return s.String()
}

func (s *StartVcVcrepoControlleradduserRequest) SetAuthToken(v string) *StartVcVcrepoControlleradduserRequest {
	s.AuthToken = &v
	return s
}

func (s *StartVcVcrepoControlleradduserRequest) SetProductInstanceId(v string) *StartVcVcrepoControlleradduserRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *StartVcVcrepoControlleradduserRequest) SetController(v string) *StartVcVcrepoControlleradduserRequest {
	s.Controller = &v
	return s
}

func (s *StartVcVcrepoControlleradduserRequest) SetOperation(v string) *StartVcVcrepoControlleradduserRequest {
	s.Operation = &v
	return s
}

func (s *StartVcVcrepoControlleradduserRequest) SetPayload(v *VcControllerAddUserRegisterPayload) *StartVcVcrepoControlleradduserRequest {
	s.Payload = v
	return s
}

func (s *StartVcVcrepoControlleradduserRequest) SetSignature(v string) *StartVcVcrepoControlleradduserRequest {
	s.Signature = &v
	return s
}

type StartVcVcrepoControlleradduserResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s StartVcVcrepoControlleradduserResponse) String() string {
	return tea.Prettify(s)
}

func (s StartVcVcrepoControlleradduserResponse) GoString() string {
	return s.String()
}

func (s *StartVcVcrepoControlleradduserResponse) SetReqMsgId(v string) *StartVcVcrepoControlleradduserResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartVcVcrepoControlleradduserResponse) SetResultCode(v string) *StartVcVcrepoControlleradduserResponse {
	s.ResultCode = &v
	return s
}

func (s *StartVcVcrepoControlleradduserResponse) SetResultMsg(v string) *StartVcVcrepoControlleradduserResponse {
	s.ResultMsg = &v
	return s
}

type StartVcVcrepoVccontentsaveRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 发起者did
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 操作缩写
	Operation *string `json:"operation,omitempty" xml:"operation,omitempty" require:"true"`
	// vc原文内容
	Payload *string `json:"payload,omitempty" xml:"payload,omitempty" require:"true"`
	// 用户使用私钥对参数进行签名
	Signature *string `json:"signature,omitempty" xml:"signature,omitempty" require:"true"`
}

func (s StartVcVcrepoVccontentsaveRequest) String() string {
	return tea.Prettify(s)
}

func (s StartVcVcrepoVccontentsaveRequest) GoString() string {
	return s.String()
}

func (s *StartVcVcrepoVccontentsaveRequest) SetAuthToken(v string) *StartVcVcrepoVccontentsaveRequest {
	s.AuthToken = &v
	return s
}

func (s *StartVcVcrepoVccontentsaveRequest) SetProductInstanceId(v string) *StartVcVcrepoVccontentsaveRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *StartVcVcrepoVccontentsaveRequest) SetDid(v string) *StartVcVcrepoVccontentsaveRequest {
	s.Did = &v
	return s
}

func (s *StartVcVcrepoVccontentsaveRequest) SetOperation(v string) *StartVcVcrepoVccontentsaveRequest {
	s.Operation = &v
	return s
}

func (s *StartVcVcrepoVccontentsaveRequest) SetPayload(v string) *StartVcVcrepoVccontentsaveRequest {
	s.Payload = &v
	return s
}

func (s *StartVcVcrepoVccontentsaveRequest) SetSignature(v string) *StartVcVcrepoVccontentsaveRequest {
	s.Signature = &v
	return s
}

type StartVcVcrepoVccontentsaveResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s StartVcVcrepoVccontentsaveResponse) String() string {
	return tea.Prettify(s)
}

func (s StartVcVcrepoVccontentsaveResponse) GoString() string {
	return s.String()
}

func (s *StartVcVcrepoVccontentsaveResponse) SetReqMsgId(v string) *StartVcVcrepoVccontentsaveResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartVcVcrepoVccontentsaveResponse) SetResultCode(v string) *StartVcVcrepoVccontentsaveResponse {
	s.ResultCode = &v
	return s
}

func (s *StartVcVcrepoVccontentsaveResponse) SetResultMsg(v string) *StartVcVcrepoVccontentsaveResponse {
	s.ResultMsg = &v
	return s
}

type StartVcRepoReadwithvcidRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 发起者did
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 操作缩写
	Operation *string `json:"operation,omitempty" xml:"operation,omitempty" require:"true"`
	// vcid
	Payload *string `json:"payload,omitempty" xml:"payload,omitempty" require:"true"`
	// 用户使用私钥对参数进行签名
	Signature *string `json:"signature,omitempty" xml:"signature,omitempty" require:"true"`
}

func (s StartVcRepoReadwithvcidRequest) String() string {
	return tea.Prettify(s)
}

func (s StartVcRepoReadwithvcidRequest) GoString() string {
	return s.String()
}

func (s *StartVcRepoReadwithvcidRequest) SetAuthToken(v string) *StartVcRepoReadwithvcidRequest {
	s.AuthToken = &v
	return s
}

func (s *StartVcRepoReadwithvcidRequest) SetProductInstanceId(v string) *StartVcRepoReadwithvcidRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *StartVcRepoReadwithvcidRequest) SetDid(v string) *StartVcRepoReadwithvcidRequest {
	s.Did = &v
	return s
}

func (s *StartVcRepoReadwithvcidRequest) SetOperation(v string) *StartVcRepoReadwithvcidRequest {
	s.Operation = &v
	return s
}

func (s *StartVcRepoReadwithvcidRequest) SetPayload(v string) *StartVcRepoReadwithvcidRequest {
	s.Payload = &v
	return s
}

func (s *StartVcRepoReadwithvcidRequest) SetSignature(v string) *StartVcRepoReadwithvcidRequest {
	s.Signature = &v
	return s
}

type StartVcRepoReadwithvcidResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// vc原文
	Vc *string `json:"vc,omitempty" xml:"vc,omitempty"`
}

func (s StartVcRepoReadwithvcidResponse) String() string {
	return tea.Prettify(s)
}

func (s StartVcRepoReadwithvcidResponse) GoString() string {
	return s.String()
}

func (s *StartVcRepoReadwithvcidResponse) SetReqMsgId(v string) *StartVcRepoReadwithvcidResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartVcRepoReadwithvcidResponse) SetResultCode(v string) *StartVcRepoReadwithvcidResponse {
	s.ResultCode = &v
	return s
}

func (s *StartVcRepoReadwithvcidResponse) SetResultMsg(v string) *StartVcRepoReadwithvcidResponse {
	s.ResultMsg = &v
	return s
}

func (s *StartVcRepoReadwithvcidResponse) SetVc(v string) *StartVcRepoReadwithvcidResponse {
	s.Vc = &v
	return s
}

type InitVcVcrepoVctransmitRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// vc传输发起人did
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// vc_transmit_init
	Operation *string `json:"operation,omitempty" xml:"operation,omitempty" require:"true"`
	// 使用对应的did私钥进行签名
	Signature *string `json:"signature,omitempty" xml:"signature,omitempty" require:"true"`
	// 可验证声明id
	VcId *string `json:"vc_id,omitempty" xml:"vc_id,omitempty" require:"true"`
	// 传递目标
	Verifiers []*VcTransmitTargetStruct `json:"verifiers,omitempty" xml:"verifiers,omitempty" require:"true" type:"Repeated"`
}

func (s InitVcVcrepoVctransmitRequest) String() string {
	return tea.Prettify(s)
}

func (s InitVcVcrepoVctransmitRequest) GoString() string {
	return s.String()
}

func (s *InitVcVcrepoVctransmitRequest) SetAuthToken(v string) *InitVcVcrepoVctransmitRequest {
	s.AuthToken = &v
	return s
}

func (s *InitVcVcrepoVctransmitRequest) SetProductInstanceId(v string) *InitVcVcrepoVctransmitRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *InitVcVcrepoVctransmitRequest) SetDid(v string) *InitVcVcrepoVctransmitRequest {
	s.Did = &v
	return s
}

func (s *InitVcVcrepoVctransmitRequest) SetOperation(v string) *InitVcVcrepoVctransmitRequest {
	s.Operation = &v
	return s
}

func (s *InitVcVcrepoVctransmitRequest) SetSignature(v string) *InitVcVcrepoVctransmitRequest {
	s.Signature = &v
	return s
}

func (s *InitVcVcrepoVctransmitRequest) SetVcId(v string) *InitVcVcrepoVctransmitRequest {
	s.VcId = &v
	return s
}

func (s *InitVcVcrepoVctransmitRequest) SetVerifiers(v []*VcTransmitTargetStruct) *InitVcVcrepoVctransmitRequest {
	s.Verifiers = v
	return s
}

type InitVcVcrepoVctransmitResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 非托管模式下传输vc初始化结果
	InitResult []*VcTransmitInitResult `json:"init_result,omitempty" xml:"init_result,omitempty" type:"Repeated"`
}

func (s InitVcVcrepoVctransmitResponse) String() string {
	return tea.Prettify(s)
}

func (s InitVcVcrepoVctransmitResponse) GoString() string {
	return s.String()
}

func (s *InitVcVcrepoVctransmitResponse) SetReqMsgId(v string) *InitVcVcrepoVctransmitResponse {
	s.ReqMsgId = &v
	return s
}

func (s *InitVcVcrepoVctransmitResponse) SetResultCode(v string) *InitVcVcrepoVctransmitResponse {
	s.ResultCode = &v
	return s
}

func (s *InitVcVcrepoVctransmitResponse) SetResultMsg(v string) *InitVcVcrepoVctransmitResponse {
	s.ResultMsg = &v
	return s
}

func (s *InitVcVcrepoVctransmitResponse) SetInitResult(v []*VcTransmitInitResult) *InitVcVcrepoVctransmitResponse {
	s.InitResult = v
	return s
}

type InitIdentificationFaceauthRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 认证类型,枚举值
	// PC_AUTH、APP_AUTH
	AuthType *string `json:"auth_type,omitempty" xml:"auth_type,omitempty" require:"true"`
	//    用户身份信息
	IdentityParam *IdentityParam `json:"identity_param,omitempty" xml:"identity_param,omitempty" require:"true"`
	// 认证接口回调路径，POST接口
	// 请求示例：
	// {
	//   "certifyId":"0242de204e1a2c3ed6ee5e21d8a57a4c",
	//   "status":3,
	// }
	ReturnUrl *string `json:"return_url,omitempty" xml:"return_url,omitempty"`
}

func (s InitIdentificationFaceauthRequest) String() string {
	return tea.Prettify(s)
}

func (s InitIdentificationFaceauthRequest) GoString() string {
	return s.String()
}

func (s *InitIdentificationFaceauthRequest) SetAuthToken(v string) *InitIdentificationFaceauthRequest {
	s.AuthToken = &v
	return s
}

func (s *InitIdentificationFaceauthRequest) SetProductInstanceId(v string) *InitIdentificationFaceauthRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *InitIdentificationFaceauthRequest) SetAuthType(v string) *InitIdentificationFaceauthRequest {
	s.AuthType = &v
	return s
}

func (s *InitIdentificationFaceauthRequest) SetIdentityParam(v *IdentityParam) *InitIdentificationFaceauthRequest {
	s.IdentityParam = v
	return s
}

func (s *InitIdentificationFaceauthRequest) SetReturnUrl(v string) *InitIdentificationFaceauthRequest {
	s.ReturnUrl = &v
	return s
}

type InitIdentificationFaceauthResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 认证ID
	CertifyId *string `json:"certify_id,omitempty" xml:"certify_id,omitempty"`
	// 二维码URL，用户支付宝扫一扫实人认证
	//
	CertifyUrl *string `json:"certify_url,omitempty" xml:"certify_url,omitempty"`
}

func (s InitIdentificationFaceauthResponse) String() string {
	return tea.Prettify(s)
}

func (s InitIdentificationFaceauthResponse) GoString() string {
	return s.String()
}

func (s *InitIdentificationFaceauthResponse) SetReqMsgId(v string) *InitIdentificationFaceauthResponse {
	s.ReqMsgId = &v
	return s
}

func (s *InitIdentificationFaceauthResponse) SetResultCode(v string) *InitIdentificationFaceauthResponse {
	s.ResultCode = &v
	return s
}

func (s *InitIdentificationFaceauthResponse) SetResultMsg(v string) *InitIdentificationFaceauthResponse {
	s.ResultMsg = &v
	return s
}

func (s *InitIdentificationFaceauthResponse) SetCertifyId(v string) *InitIdentificationFaceauthResponse {
	s.CertifyId = &v
	return s
}

func (s *InitIdentificationFaceauthResponse) SetCertifyUrl(v string) *InitIdentificationFaceauthResponse {
	s.CertifyUrl = &v
	return s
}

type QueryIdentificationFaceauthRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 认证ID，用于查询认证结果
	CertifyId *string `json:"certify_id,omitempty" xml:"certify_id,omitempty" require:"true"`
}

func (s QueryIdentificationFaceauthRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryIdentificationFaceauthRequest) GoString() string {
	return s.String()
}

func (s *QueryIdentificationFaceauthRequest) SetAuthToken(v string) *QueryIdentificationFaceauthRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryIdentificationFaceauthRequest) SetProductInstanceId(v string) *QueryIdentificationFaceauthRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryIdentificationFaceauthRequest) SetCertifyId(v string) *QueryIdentificationFaceauthRequest {
	s.CertifyId = &v
	return s
}

type QueryIdentificationFaceauthResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 认证ID
	CertifyId *string `json:"certify_id,omitempty" xml:"certify_id,omitempty"`
	// 认证状态，枚举值如下：
	// 值为1，认证初始化成功
	// 值为2，认证链接获取成功
	// 值为3，认证通过
	Status *int64 `json:"status,omitempty" xml:"status,omitempty"`
}

func (s QueryIdentificationFaceauthResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryIdentificationFaceauthResponse) GoString() string {
	return s.String()
}

func (s *QueryIdentificationFaceauthResponse) SetReqMsgId(v string) *QueryIdentificationFaceauthResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryIdentificationFaceauthResponse) SetResultCode(v string) *QueryIdentificationFaceauthResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryIdentificationFaceauthResponse) SetResultMsg(v string) *QueryIdentificationFaceauthResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryIdentificationFaceauthResponse) SetCertifyId(v string) *QueryIdentificationFaceauthResponse {
	s.CertifyId = &v
	return s
}

func (s *QueryIdentificationFaceauthResponse) SetStatus(v int64) *QueryIdentificationFaceauthResponse {
	s.Status = &v
	return s
}

type InitNotaryTransactionRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 客户的身份信息
	Customer *IdentityParam `json:"customer,omitempty" xml:"customer,omitempty" require:"true"`
	// 扩展字段
	Properties *string `json:"properties,omitempty" xml:"properties,omitempty"`
	// 托管用户信息
	Trustee *IdentityParam `json:"trustee,omitempty" xml:"trustee,omitempty"`
	// 是否使⽤用可信时间戳，默认为false
	Tsr *bool `json:"tsr,omitempty" xml:"tsr,omitempty"`
}

func (s InitNotaryTransactionRequest) String() string {
	return tea.Prettify(s)
}

func (s InitNotaryTransactionRequest) GoString() string {
	return s.String()
}

func (s *InitNotaryTransactionRequest) SetAuthToken(v string) *InitNotaryTransactionRequest {
	s.AuthToken = &v
	return s
}

func (s *InitNotaryTransactionRequest) SetProductInstanceId(v string) *InitNotaryTransactionRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *InitNotaryTransactionRequest) SetCustomer(v *IdentityParam) *InitNotaryTransactionRequest {
	s.Customer = v
	return s
}

func (s *InitNotaryTransactionRequest) SetProperties(v string) *InitNotaryTransactionRequest {
	s.Properties = &v
	return s
}

func (s *InitNotaryTransactionRequest) SetTrustee(v *IdentityParam) *InitNotaryTransactionRequest {
	s.Trustee = v
	return s
}

func (s *InitNotaryTransactionRequest) SetTsr(v bool) *InitNotaryTransactionRequest {
	s.Tsr = &v
	return s
}

type InitNotaryTransactionResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 返回全局唯⼀的事务ID
	Token *string `json:"token,omitempty" xml:"token,omitempty"`
}

func (s InitNotaryTransactionResponse) String() string {
	return tea.Prettify(s)
}

func (s InitNotaryTransactionResponse) GoString() string {
	return s.String()
}

func (s *InitNotaryTransactionResponse) SetReqMsgId(v string) *InitNotaryTransactionResponse {
	s.ReqMsgId = &v
	return s
}

func (s *InitNotaryTransactionResponse) SetResultCode(v string) *InitNotaryTransactionResponse {
	s.ResultCode = &v
	return s
}

func (s *InitNotaryTransactionResponse) SetResultMsg(v string) *InitNotaryTransactionResponse {
	s.ResultMsg = &v
	return s
}

func (s *InitNotaryTransactionResponse) SetToken(v string) *InitNotaryTransactionResponse {
	s.Token = &v
	return s
}

type GetNotaryTransactionRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 存证事务ID
	Token *string `json:"token,omitempty" xml:"token,omitempty" require:"true"`
}

func (s GetNotaryTransactionRequest) String() string {
	return tea.Prettify(s)
}

func (s GetNotaryTransactionRequest) GoString() string {
	return s.String()
}

func (s *GetNotaryTransactionRequest) SetAuthToken(v string) *GetNotaryTransactionRequest {
	s.AuthToken = &v
	return s
}

func (s *GetNotaryTransactionRequest) SetProductInstanceId(v string) *GetNotaryTransactionRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *GetNotaryTransactionRequest) SetToken(v string) *GetNotaryTransactionRequest {
	s.Token = &v
	return s
}

type GetNotaryTransactionResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 存证信息下载地址
	DownloadUrl *string `json:"download_url,omitempty" xml:"download_url,omitempty"`
}

func (s GetNotaryTransactionResponse) String() string {
	return tea.Prettify(s)
}

func (s GetNotaryTransactionResponse) GoString() string {
	return s.String()
}

func (s *GetNotaryTransactionResponse) SetReqMsgId(v string) *GetNotaryTransactionResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetNotaryTransactionResponse) SetResultCode(v string) *GetNotaryTransactionResponse {
	s.ResultCode = &v
	return s
}

func (s *GetNotaryTransactionResponse) SetResultMsg(v string) *GetNotaryTransactionResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetNotaryTransactionResponse) SetDownloadUrl(v string) *GetNotaryTransactionResponse {
	s.DownloadUrl = &v
	return s
}

type SendNotaryTransactionTextRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 存证元数据
	Meta *NotaryMetaParam `json:"meta,omitempty" xml:"meta,omitempty" require:"true"`
	// 存证内容
	NotaryContent *string `json:"notary_content,omitempty" xml:"notary_content,omitempty" require:"true"`
	// 是否使用可信时间戳
	Tsr *bool `json:"tsr,omitempty" xml:"tsr,omitempty"`
}

func (s SendNotaryTransactionTextRequest) String() string {
	return tea.Prettify(s)
}

func (s SendNotaryTransactionTextRequest) GoString() string {
	return s.String()
}

func (s *SendNotaryTransactionTextRequest) SetAuthToken(v string) *SendNotaryTransactionTextRequest {
	s.AuthToken = &v
	return s
}

func (s *SendNotaryTransactionTextRequest) SetProductInstanceId(v string) *SendNotaryTransactionTextRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *SendNotaryTransactionTextRequest) SetMeta(v *NotaryMetaParam) *SendNotaryTransactionTextRequest {
	s.Meta = v
	return s
}

func (s *SendNotaryTransactionTextRequest) SetNotaryContent(v string) *SendNotaryTransactionTextRequest {
	s.NotaryContent = &v
	return s
}

func (s *SendNotaryTransactionTextRequest) SetTsr(v bool) *SendNotaryTransactionTextRequest {
	s.Tsr = &v
	return s
}

type SendNotaryTransactionTextResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 存证凭据txHash，通过此凭据查询存证
	TransactionHash *string `json:"transaction_hash,omitempty" xml:"transaction_hash,omitempty"`
}

func (s SendNotaryTransactionTextResponse) String() string {
	return tea.Prettify(s)
}

func (s SendNotaryTransactionTextResponse) GoString() string {
	return s.String()
}

func (s *SendNotaryTransactionTextResponse) SetReqMsgId(v string) *SendNotaryTransactionTextResponse {
	s.ReqMsgId = &v
	return s
}

func (s *SendNotaryTransactionTextResponse) SetResultCode(v string) *SendNotaryTransactionTextResponse {
	s.ResultCode = &v
	return s
}

func (s *SendNotaryTransactionTextResponse) SetResultMsg(v string) *SendNotaryTransactionTextResponse {
	s.ResultMsg = &v
	return s
}

func (s *SendNotaryTransactionTextResponse) SetTransactionHash(v string) *SendNotaryTransactionTextResponse {
	s.TransactionHash = &v
	return s
}

type GetNotaryTransactionTextRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 存证凭据
	TransactionHash *string `json:"transaction_hash,omitempty" xml:"transaction_hash,omitempty" require:"true"`
}

func (s GetNotaryTransactionTextRequest) String() string {
	return tea.Prettify(s)
}

func (s GetNotaryTransactionTextRequest) GoString() string {
	return s.String()
}

func (s *GetNotaryTransactionTextRequest) SetAuthToken(v string) *GetNotaryTransactionTextRequest {
	s.AuthToken = &v
	return s
}

func (s *GetNotaryTransactionTextRequest) SetProductInstanceId(v string) *GetNotaryTransactionTextRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *GetNotaryTransactionTextRequest) SetTransactionHash(v string) *GetNotaryTransactionTextRequest {
	s.TransactionHash = &v
	return s
}

type GetNotaryTransactionTextResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 存证文本
	Content *string `json:"content,omitempty" xml:"content,omitempty"`
}

func (s GetNotaryTransactionTextResponse) String() string {
	return tea.Prettify(s)
}

func (s GetNotaryTransactionTextResponse) GoString() string {
	return s.String()
}

func (s *GetNotaryTransactionTextResponse) SetReqMsgId(v string) *GetNotaryTransactionTextResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetNotaryTransactionTextResponse) SetResultCode(v string) *GetNotaryTransactionTextResponse {
	s.ResultCode = &v
	return s
}

func (s *GetNotaryTransactionTextResponse) SetResultMsg(v string) *GetNotaryTransactionTextResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetNotaryTransactionTextResponse) SetContent(v string) *GetNotaryTransactionTextResponse {
	s.Content = &v
	return s
}

type CreateNotaryTokenRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 用户身份识别信息
	Customer *Identity `json:"customer,omitempty" xml:"customer,omitempty" require:"true"`
	// 接口调用者身份信息
	Entity *Identity `json:"entity,omitempty" xml:"entity,omitempty"`
	// 扩展属性
	Properties *string `json:"properties,omitempty" xml:"properties,omitempty"`
	// 业务子类型标识
	SubBizId *string `json:"sub_biz_id,omitempty" xml:"sub_biz_id,omitempty"`
	// 是否使用可信时间戳，默认为false
	Tsr *bool `json:"tsr,omitempty" xml:"tsr,omitempty"`
}

func (s CreateNotaryTokenRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateNotaryTokenRequest) GoString() string {
	return s.String()
}

func (s *CreateNotaryTokenRequest) SetAuthToken(v string) *CreateNotaryTokenRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateNotaryTokenRequest) SetProductInstanceId(v string) *CreateNotaryTokenRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateNotaryTokenRequest) SetCustomer(v *Identity) *CreateNotaryTokenRequest {
	s.Customer = v
	return s
}

func (s *CreateNotaryTokenRequest) SetEntity(v *Identity) *CreateNotaryTokenRequest {
	s.Entity = v
	return s
}

func (s *CreateNotaryTokenRequest) SetProperties(v string) *CreateNotaryTokenRequest {
	s.Properties = &v
	return s
}

func (s *CreateNotaryTokenRequest) SetSubBizId(v string) *CreateNotaryTokenRequest {
	s.SubBizId = &v
	return s
}

func (s *CreateNotaryTokenRequest) SetTsr(v bool) *CreateNotaryTokenRequest {
	s.Tsr = &v
	return s
}

type CreateNotaryTokenResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 返回事务ID，全局唯一
	TransactionId *string `json:"transaction_id,omitempty" xml:"transaction_id,omitempty"`
	// 可信时间信息
	Tsr *TsrResponse `json:"tsr,omitempty" xml:"tsr,omitempty"`
}

func (s CreateNotaryTokenResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateNotaryTokenResponse) GoString() string {
	return s.String()
}

func (s *CreateNotaryTokenResponse) SetReqMsgId(v string) *CreateNotaryTokenResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateNotaryTokenResponse) SetResultCode(v string) *CreateNotaryTokenResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateNotaryTokenResponse) SetResultMsg(v string) *CreateNotaryTokenResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateNotaryTokenResponse) SetTransactionId(v string) *CreateNotaryTokenResponse {
	s.TransactionId = &v
	return s
}

func (s *CreateNotaryTokenResponse) SetTsr(v *TsrResponse) *CreateNotaryTokenResponse {
	s.Tsr = v
	return s
}

type GetNotaryTransRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 存证事务ID
	Token *string `json:"token,omitempty" xml:"token,omitempty" require:"true"`
}

func (s GetNotaryTransRequest) String() string {
	return tea.Prettify(s)
}

func (s GetNotaryTransRequest) GoString() string {
	return s.String()
}

func (s *GetNotaryTransRequest) SetAuthToken(v string) *GetNotaryTransRequest {
	s.AuthToken = &v
	return s
}

func (s *GetNotaryTransRequest) SetProductInstanceId(v string) *GetNotaryTransRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *GetNotaryTransRequest) SetToken(v string) *GetNotaryTransRequest {
	s.Token = &v
	return s
}

type GetNotaryTransResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 返回文件下载路径列表
	FileUrl []*string `json:"file_url,omitempty" xml:"file_url,omitempty" type:"Repeated"`
	// 存证事务ID
	Token *string `json:"token,omitempty" xml:"token,omitempty"`
}

func (s GetNotaryTransResponse) String() string {
	return tea.Prettify(s)
}

func (s GetNotaryTransResponse) GoString() string {
	return s.String()
}

func (s *GetNotaryTransResponse) SetReqMsgId(v string) *GetNotaryTransResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetNotaryTransResponse) SetResultCode(v string) *GetNotaryTransResponse {
	s.ResultCode = &v
	return s
}

func (s *GetNotaryTransResponse) SetResultMsg(v string) *GetNotaryTransResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetNotaryTransResponse) SetFileUrl(v []*string) *GetNotaryTransResponse {
	s.FileUrl = v
	return s
}

func (s *GetNotaryTransResponse) SetToken(v string) *GetNotaryTransResponse {
	s.Token = &v
	return s
}

type CreateNotaryTextRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 存证地点(如手机硬件ID，Wi-Fi地址，GPS位置，IP地址)
	Location *Location `json:"location,omitempty" xml:"location,omitempty"`
	// 存证内容
	NotaryContent *string `json:"notary_content,omitempty" xml:"notary_content,omitempty" require:"true"`
	// 描述本条存证在存证事务中的阶段，用户可自行维护
	Phase *string `json:"phase,omitempty" xml:"phase,omitempty" require:"true"`
	// 扩展属性
	Properties *string `json:"properties,omitempty" xml:"properties,omitempty" require:"true"`
	// 存证事务id
	Token *string `json:"token,omitempty" xml:"token,omitempty" require:"true"`
	// 是否使用可信时间戳，默认为false
	Tsr *bool `json:"tsr,omitempty" xml:"tsr,omitempty"`
}

func (s CreateNotaryTextRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateNotaryTextRequest) GoString() string {
	return s.String()
}

func (s *CreateNotaryTextRequest) SetAuthToken(v string) *CreateNotaryTextRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateNotaryTextRequest) SetProductInstanceId(v string) *CreateNotaryTextRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateNotaryTextRequest) SetLocation(v *Location) *CreateNotaryTextRequest {
	s.Location = v
	return s
}

func (s *CreateNotaryTextRequest) SetNotaryContent(v string) *CreateNotaryTextRequest {
	s.NotaryContent = &v
	return s
}

func (s *CreateNotaryTextRequest) SetPhase(v string) *CreateNotaryTextRequest {
	s.Phase = &v
	return s
}

func (s *CreateNotaryTextRequest) SetProperties(v string) *CreateNotaryTextRequest {
	s.Properties = &v
	return s
}

func (s *CreateNotaryTextRequest) SetToken(v string) *CreateNotaryTextRequest {
	s.Token = &v
	return s
}

func (s *CreateNotaryTextRequest) SetTsr(v bool) *CreateNotaryTextRequest {
	s.Tsr = &v
	return s
}

type CreateNotaryTextResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 可信时间信息
	Tsr *TsrResponse `json:"tsr,omitempty" xml:"tsr,omitempty"`
	// 存证凭据
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty"`
}

func (s CreateNotaryTextResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateNotaryTextResponse) GoString() string {
	return s.String()
}

func (s *CreateNotaryTextResponse) SetReqMsgId(v string) *CreateNotaryTextResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateNotaryTextResponse) SetResultCode(v string) *CreateNotaryTextResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateNotaryTextResponse) SetResultMsg(v string) *CreateNotaryTextResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateNotaryTextResponse) SetTsr(v *TsrResponse) *CreateNotaryTextResponse {
	s.Tsr = v
	return s
}

func (s *CreateNotaryTextResponse) SetTxHash(v string) *CreateNotaryTextResponse {
	s.TxHash = &v
	return s
}

type GetNotaryTextRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 存证地点(如手机硬件ID，Wi-Fi地址，GPS位置，IP地址)
	Location *Location `json:"location,omitempty" xml:"location,omitempty"`
	// 描述本条存证在存证事务中的阶段，用户可自行维护
	Phase *string `json:"phase,omitempty" xml:"phase,omitempty"`
	// 扩展属性
	Properties *string `json:"properties,omitempty" xml:"properties,omitempty"`
	// 存证事务id
	Token *string `json:"token,omitempty" xml:"token,omitempty"`
	// 存证凭据
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty" require:"true"`
}

func (s GetNotaryTextRequest) String() string {
	return tea.Prettify(s)
}

func (s GetNotaryTextRequest) GoString() string {
	return s.String()
}

func (s *GetNotaryTextRequest) SetAuthToken(v string) *GetNotaryTextRequest {
	s.AuthToken = &v
	return s
}

func (s *GetNotaryTextRequest) SetProductInstanceId(v string) *GetNotaryTextRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *GetNotaryTextRequest) SetLocation(v *Location) *GetNotaryTextRequest {
	s.Location = v
	return s
}

func (s *GetNotaryTextRequest) SetPhase(v string) *GetNotaryTextRequest {
	s.Phase = &v
	return s
}

func (s *GetNotaryTextRequest) SetProperties(v string) *GetNotaryTextRequest {
	s.Properties = &v
	return s
}

func (s *GetNotaryTextRequest) SetToken(v string) *GetNotaryTextRequest {
	s.Token = &v
	return s
}

func (s *GetNotaryTextRequest) SetTxHash(v string) *GetNotaryTextRequest {
	s.TxHash = &v
	return s
}

type GetNotaryTextResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 存证信息
	Content *string `json:"content,omitempty" xml:"content,omitempty"`
	// 可信信息
	Tsr *TsrResponse `json:"tsr,omitempty" xml:"tsr,omitempty"`
}

func (s GetNotaryTextResponse) String() string {
	return tea.Prettify(s)
}

func (s GetNotaryTextResponse) GoString() string {
	return s.String()
}

func (s *GetNotaryTextResponse) SetReqMsgId(v string) *GetNotaryTextResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetNotaryTextResponse) SetResultCode(v string) *GetNotaryTextResponse {
	s.ResultCode = &v
	return s
}

func (s *GetNotaryTextResponse) SetResultMsg(v string) *GetNotaryTextResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetNotaryTextResponse) SetContent(v string) *GetNotaryTextResponse {
	s.Content = &v
	return s
}

func (s *GetNotaryTextResponse) SetTsr(v *TsrResponse) *GetNotaryTextResponse {
	s.Tsr = v
	return s
}

type CreateNotaryFileRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 存证地点(如手机硬件ID，Wi-Fi地址，GPS位置，IP地址)
	Location *Location `json:"location,omitempty" xml:"location,omitempty"`
	// base64加密后的存证文件内容
	NotaryFile *string `json:"notary_file,omitempty" xml:"notary_file,omitempty" require:"true"`
	// 存证文件名称
	NotaryName *string `json:"notary_name,omitempty" xml:"notary_name,omitempty" require:"true"`
	// 描述本条存证在存证事务中的阶段，用户可自行维护
	Phase *string `json:"phase,omitempty" xml:"phase,omitempty" require:"true"`
	// 扩展属性
	Properties *string `json:"properties,omitempty" xml:"properties,omitempty"`
	// 存证事务ID
	Token *string `json:"token,omitempty" xml:"token,omitempty" require:"true"`
	// 是否使用可信时间戳，默认为false
	Tsr *bool `json:"tsr,omitempty" xml:"tsr,omitempty"`
}

func (s CreateNotaryFileRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateNotaryFileRequest) GoString() string {
	return s.String()
}

func (s *CreateNotaryFileRequest) SetAuthToken(v string) *CreateNotaryFileRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateNotaryFileRequest) SetProductInstanceId(v string) *CreateNotaryFileRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateNotaryFileRequest) SetLocation(v *Location) *CreateNotaryFileRequest {
	s.Location = v
	return s
}

func (s *CreateNotaryFileRequest) SetNotaryFile(v string) *CreateNotaryFileRequest {
	s.NotaryFile = &v
	return s
}

func (s *CreateNotaryFileRequest) SetNotaryName(v string) *CreateNotaryFileRequest {
	s.NotaryName = &v
	return s
}

func (s *CreateNotaryFileRequest) SetPhase(v string) *CreateNotaryFileRequest {
	s.Phase = &v
	return s
}

func (s *CreateNotaryFileRequest) SetProperties(v string) *CreateNotaryFileRequest {
	s.Properties = &v
	return s
}

func (s *CreateNotaryFileRequest) SetToken(v string) *CreateNotaryFileRequest {
	s.Token = &v
	return s
}

func (s *CreateNotaryFileRequest) SetTsr(v bool) *CreateNotaryFileRequest {
	s.Tsr = &v
	return s
}

type CreateNotaryFileResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 可信时间信息
	Tsr *TsrResponse `json:"tsr,omitempty" xml:"tsr,omitempty"`
	// 存证凭证
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty"`
}

func (s CreateNotaryFileResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateNotaryFileResponse) GoString() string {
	return s.String()
}

func (s *CreateNotaryFileResponse) SetReqMsgId(v string) *CreateNotaryFileResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateNotaryFileResponse) SetResultCode(v string) *CreateNotaryFileResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateNotaryFileResponse) SetResultMsg(v string) *CreateNotaryFileResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateNotaryFileResponse) SetTsr(v *TsrResponse) *CreateNotaryFileResponse {
	s.Tsr = v
	return s
}

func (s *CreateNotaryFileResponse) SetTxHash(v string) *CreateNotaryFileResponse {
	s.TxHash = &v
	return s
}

type GetNotaryFileRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 存证地点(如手机硬件ID，Wi-Fi地址，GPS位置，IP地址)
	Location *Location `json:"location,omitempty" xml:"location,omitempty"`
	// 描述本条存证在存证事务中的阶段，用户可自行维护
	Phase *string `json:"phase,omitempty" xml:"phase,omitempty" require:"true"`
	// 扩展属性
	Properties *string `json:"properties,omitempty" xml:"properties,omitempty"`
	// 存证事务ID
	Token *string `json:"token,omitempty" xml:"token,omitempty" require:"true"`
	// 存证凭据
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty" require:"true"`
}

func (s GetNotaryFileRequest) String() string {
	return tea.Prettify(s)
}

func (s GetNotaryFileRequest) GoString() string {
	return s.String()
}

func (s *GetNotaryFileRequest) SetAuthToken(v string) *GetNotaryFileRequest {
	s.AuthToken = &v
	return s
}

func (s *GetNotaryFileRequest) SetProductInstanceId(v string) *GetNotaryFileRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *GetNotaryFileRequest) SetLocation(v *Location) *GetNotaryFileRequest {
	s.Location = v
	return s
}

func (s *GetNotaryFileRequest) SetPhase(v string) *GetNotaryFileRequest {
	s.Phase = &v
	return s
}

func (s *GetNotaryFileRequest) SetProperties(v string) *GetNotaryFileRequest {
	s.Properties = &v
	return s
}

func (s *GetNotaryFileRequest) SetToken(v string) *GetNotaryFileRequest {
	s.Token = &v
	return s
}

func (s *GetNotaryFileRequest) SetTxHash(v string) *GetNotaryFileRequest {
	s.TxHash = &v
	return s
}

type GetNotaryFileResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 文件下载地址
	OssPath *string `json:"oss_path,omitempty" xml:"oss_path,omitempty"`
}

func (s GetNotaryFileResponse) String() string {
	return tea.Prettify(s)
}

func (s GetNotaryFileResponse) GoString() string {
	return s.String()
}

func (s *GetNotaryFileResponse) SetReqMsgId(v string) *GetNotaryFileResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetNotaryFileResponse) SetResultCode(v string) *GetNotaryFileResponse {
	s.ResultCode = &v
	return s
}

func (s *GetNotaryFileResponse) SetResultMsg(v string) *GetNotaryFileResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetNotaryFileResponse) SetOssPath(v string) *GetNotaryFileResponse {
	s.OssPath = &v
	return s
}

type CreateNotarySourceRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 存证地点(如手机硬件ID，Wi-Fi地址，GPS位置，IP地址)
	Location *Location `json:"location,omitempty" xml:"location,omitempty"`
	// 描述本条存证在存证事务中的阶段，用户可自行维护
	Phase *string `json:"phase,omitempty" xml:"phase,omitempty" require:"true"`
	// 扩展属性
	Properties *string `json:"properties,omitempty" xml:"properties,omitempty"`
	// 原文文件描述
	SourceDesc *string `json:"source_desc,omitempty" xml:"source_desc,omitempty" require:"true"`
	// base64加密后的原文文件内容
	SourceFile *string `json:"source_file,omitempty" xml:"source_file,omitempty" require:"true"`
	// 存证原文名称
	SourceName *string `json:"source_name,omitempty" xml:"source_name,omitempty" require:"true"`
	// 存证事务ID
	Token *string `json:"token,omitempty" xml:"token,omitempty" require:"true"`
	// 是否使用可信时间戳，默认为false
	Tsr *bool `json:"tsr,omitempty" xml:"tsr,omitempty"`
}

func (s CreateNotarySourceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateNotarySourceRequest) GoString() string {
	return s.String()
}

func (s *CreateNotarySourceRequest) SetAuthToken(v string) *CreateNotarySourceRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateNotarySourceRequest) SetProductInstanceId(v string) *CreateNotarySourceRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateNotarySourceRequest) SetLocation(v *Location) *CreateNotarySourceRequest {
	s.Location = v
	return s
}

func (s *CreateNotarySourceRequest) SetPhase(v string) *CreateNotarySourceRequest {
	s.Phase = &v
	return s
}

func (s *CreateNotarySourceRequest) SetProperties(v string) *CreateNotarySourceRequest {
	s.Properties = &v
	return s
}

func (s *CreateNotarySourceRequest) SetSourceDesc(v string) *CreateNotarySourceRequest {
	s.SourceDesc = &v
	return s
}

func (s *CreateNotarySourceRequest) SetSourceFile(v string) *CreateNotarySourceRequest {
	s.SourceFile = &v
	return s
}

func (s *CreateNotarySourceRequest) SetSourceName(v string) *CreateNotarySourceRequest {
	s.SourceName = &v
	return s
}

func (s *CreateNotarySourceRequest) SetToken(v string) *CreateNotarySourceRequest {
	s.Token = &v
	return s
}

func (s *CreateNotarySourceRequest) SetTsr(v bool) *CreateNotarySourceRequest {
	s.Tsr = &v
	return s
}

type CreateNotarySourceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 可信时间信息
	Tsr *TsrResponse `json:"tsr,omitempty" xml:"tsr,omitempty"`
	// 存证凭据
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty"`
}

func (s CreateNotarySourceResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateNotarySourceResponse) GoString() string {
	return s.String()
}

func (s *CreateNotarySourceResponse) SetReqMsgId(v string) *CreateNotarySourceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateNotarySourceResponse) SetResultCode(v string) *CreateNotarySourceResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateNotarySourceResponse) SetResultMsg(v string) *CreateNotarySourceResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateNotarySourceResponse) SetTsr(v *TsrResponse) *CreateNotarySourceResponse {
	s.Tsr = v
	return s
}

func (s *CreateNotarySourceResponse) SetTxHash(v string) *CreateNotarySourceResponse {
	s.TxHash = &v
	return s
}

type GetNotarySourceRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 存证地点(如手机硬件ID，Wi-Fi地址，GPS位置，IP地址)
	Location *Location `json:"location,omitempty" xml:"location,omitempty"`
	// 描述本条存证在存证事务中的阶段，用户可自行维护
	Phase *string `json:"phase,omitempty" xml:"phase,omitempty" require:"true"`
	// 扩展属性
	Properties *string `json:"properties,omitempty" xml:"properties,omitempty"`
	// 存证事务id
	Token *string `json:"token,omitempty" xml:"token,omitempty" require:"true"`
	// 存证凭据
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty" require:"true"`
}

func (s GetNotarySourceRequest) String() string {
	return tea.Prettify(s)
}

func (s GetNotarySourceRequest) GoString() string {
	return s.String()
}

func (s *GetNotarySourceRequest) SetAuthToken(v string) *GetNotarySourceRequest {
	s.AuthToken = &v
	return s
}

func (s *GetNotarySourceRequest) SetProductInstanceId(v string) *GetNotarySourceRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *GetNotarySourceRequest) SetLocation(v *Location) *GetNotarySourceRequest {
	s.Location = v
	return s
}

func (s *GetNotarySourceRequest) SetPhase(v string) *GetNotarySourceRequest {
	s.Phase = &v
	return s
}

func (s *GetNotarySourceRequest) SetProperties(v string) *GetNotarySourceRequest {
	s.Properties = &v
	return s
}

func (s *GetNotarySourceRequest) SetToken(v string) *GetNotarySourceRequest {
	s.Token = &v
	return s
}

func (s *GetNotarySourceRequest) SetTxHash(v string) *GetNotarySourceRequest {
	s.TxHash = &v
	return s
}

type GetNotarySourceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 文件下载地址
	OssPath *string `json:"oss_path,omitempty" xml:"oss_path,omitempty"`
}

func (s GetNotarySourceResponse) String() string {
	return tea.Prettify(s)
}

func (s GetNotarySourceResponse) GoString() string {
	return s.String()
}

func (s *GetNotarySourceResponse) SetReqMsgId(v string) *GetNotarySourceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetNotarySourceResponse) SetResultCode(v string) *GetNotarySourceResponse {
	s.ResultCode = &v
	return s
}

func (s *GetNotarySourceResponse) SetResultMsg(v string) *GetNotarySourceResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetNotarySourceResponse) SetOssPath(v string) *GetNotarySourceResponse {
	s.OssPath = &v
	return s
}

type QueryNotaryTestRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// test
	UserName *string `json:"user_name,omitempty" xml:"user_name,omitempty" require:"true"`
}

func (s QueryNotaryTestRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryNotaryTestRequest) GoString() string {
	return s.String()
}

func (s *QueryNotaryTestRequest) SetAuthToken(v string) *QueryNotaryTestRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryNotaryTestRequest) SetProductInstanceId(v string) *QueryNotaryTestRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryNotaryTestRequest) SetUserName(v string) *QueryNotaryTestRequest {
	s.UserName = &v
	return s
}

type QueryNotaryTestResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// test
	Resp *string `json:"resp,omitempty" xml:"resp,omitempty"`
}

func (s QueryNotaryTestResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryNotaryTestResponse) GoString() string {
	return s.String()
}

func (s *QueryNotaryTestResponse) SetReqMsgId(v string) *QueryNotaryTestResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryNotaryTestResponse) SetResultCode(v string) *QueryNotaryTestResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryNotaryTestResponse) SetResultMsg(v string) *QueryNotaryTestResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryNotaryTestResponse) SetResp(v string) *QueryNotaryTestResponse {
	s.Resp = &v
	return s
}

type InitNotaryOpenapiMerchantRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 认证来源，PC_AUTH或APP_AUTH
	AuthType *string `json:"auth_type,omitempty" xml:"auth_type,omitempty" require:"true"`
	// 认证成功页面回跳地址（只在移动端跳转，PC暂不支持）
	CallbackUrl *string `json:"callback_url,omitempty" xml:"callback_url,omitempty"`
	// 企业名称
	EpCertName *string `json:"ep_cert_name,omitempty" xml:"ep_cert_name,omitempty" require:"true"`
	// 企业统一社会信用代码
	EpCertNo *string `json:"ep_cert_no,omitempty" xml:"ep_cert_no,omitempty" require:"true"`
	// 企业证件类型，目前只支持企业营业执照类型，值为NATIONAL_LEGAL_MERGE
	EpCertType *string `json:"ep_cert_type,omitempty" xml:"ep_cert_type,omitempty" require:"true"`
	// 认证类型，目前只支持企业认证信息，值为EP_CERT_INFO
	IdentityType *string `json:"identity_type,omitempty" xml:"identity_type,omitempty" require:"true"`
	// 法人姓名
	LegalPersonCertName *string `json:"legal_person_cert_name,omitempty" xml:"legal_person_cert_name,omitempty" require:"true"`
	// 法人身份证号
	LegalPersonCertNo *string `json:"legal_person_cert_no,omitempty" xml:"legal_person_cert_no,omitempty" require:"true"`
	// 法人认证证件类型，目前只支持身份证，值为IDENTITY_CARD
	LegalPersonCertType *string `json:"legal_person_cert_type,omitempty" xml:"legal_person_cert_type,omitempty" require:"true"`
	// 认证成功回调地址
	ReturnUrl *string `json:"return_url,omitempty" xml:"return_url,omitempty"`
	// 商户请求的唯一标志，商户要保证其唯一性。值为32位长度的字母数字下划线组合
	TransactionId *string `json:"transaction_id,omitempty" xml:"transaction_id,omitempty" require:"true"`
}

func (s InitNotaryOpenapiMerchantRequest) String() string {
	return tea.Prettify(s)
}

func (s InitNotaryOpenapiMerchantRequest) GoString() string {
	return s.String()
}

func (s *InitNotaryOpenapiMerchantRequest) SetAuthToken(v string) *InitNotaryOpenapiMerchantRequest {
	s.AuthToken = &v
	return s
}

func (s *InitNotaryOpenapiMerchantRequest) SetProductInstanceId(v string) *InitNotaryOpenapiMerchantRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *InitNotaryOpenapiMerchantRequest) SetAuthType(v string) *InitNotaryOpenapiMerchantRequest {
	s.AuthType = &v
	return s
}

func (s *InitNotaryOpenapiMerchantRequest) SetCallbackUrl(v string) *InitNotaryOpenapiMerchantRequest {
	s.CallbackUrl = &v
	return s
}

func (s *InitNotaryOpenapiMerchantRequest) SetEpCertName(v string) *InitNotaryOpenapiMerchantRequest {
	s.EpCertName = &v
	return s
}

func (s *InitNotaryOpenapiMerchantRequest) SetEpCertNo(v string) *InitNotaryOpenapiMerchantRequest {
	s.EpCertNo = &v
	return s
}

func (s *InitNotaryOpenapiMerchantRequest) SetEpCertType(v string) *InitNotaryOpenapiMerchantRequest {
	s.EpCertType = &v
	return s
}

func (s *InitNotaryOpenapiMerchantRequest) SetIdentityType(v string) *InitNotaryOpenapiMerchantRequest {
	s.IdentityType = &v
	return s
}

func (s *InitNotaryOpenapiMerchantRequest) SetLegalPersonCertName(v string) *InitNotaryOpenapiMerchantRequest {
	s.LegalPersonCertName = &v
	return s
}

func (s *InitNotaryOpenapiMerchantRequest) SetLegalPersonCertNo(v string) *InitNotaryOpenapiMerchantRequest {
	s.LegalPersonCertNo = &v
	return s
}

func (s *InitNotaryOpenapiMerchantRequest) SetLegalPersonCertType(v string) *InitNotaryOpenapiMerchantRequest {
	s.LegalPersonCertType = &v
	return s
}

func (s *InitNotaryOpenapiMerchantRequest) SetReturnUrl(v string) *InitNotaryOpenapiMerchantRequest {
	s.ReturnUrl = &v
	return s
}

func (s *InitNotaryOpenapiMerchantRequest) SetTransactionId(v string) *InitNotaryOpenapiMerchantRequest {
	s.TransactionId = &v
	return s
}

type InitNotaryOpenapiMerchantResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 本次认证的唯一标识，商户需要记录，后续的操作都需要用到
	BizNo *string `json:"biz_no,omitempty" xml:"biz_no,omitempty"`
	// 生成的认证地址，需要转换成二维码通过支付宝APP打开
	VerifyUrl *string `json:"verify_url,omitempty" xml:"verify_url,omitempty"`
}

func (s InitNotaryOpenapiMerchantResponse) String() string {
	return tea.Prettify(s)
}

func (s InitNotaryOpenapiMerchantResponse) GoString() string {
	return s.String()
}

func (s *InitNotaryOpenapiMerchantResponse) SetReqMsgId(v string) *InitNotaryOpenapiMerchantResponse {
	s.ReqMsgId = &v
	return s
}

func (s *InitNotaryOpenapiMerchantResponse) SetResultCode(v string) *InitNotaryOpenapiMerchantResponse {
	s.ResultCode = &v
	return s
}

func (s *InitNotaryOpenapiMerchantResponse) SetResultMsg(v string) *InitNotaryOpenapiMerchantResponse {
	s.ResultMsg = &v
	return s
}

func (s *InitNotaryOpenapiMerchantResponse) SetBizNo(v string) *InitNotaryOpenapiMerchantResponse {
	s.BizNo = &v
	return s
}

func (s *InitNotaryOpenapiMerchantResponse) SetVerifyUrl(v string) *InitNotaryOpenapiMerchantResponse {
	s.VerifyUrl = &v
	return s
}

type QueryNotaryOpenapiMerchantRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 查询唯一ID，初始化获取认证地址时生成
	BizNo *string `json:"biz_no,omitempty" xml:"biz_no,omitempty" require:"true"`
}

func (s QueryNotaryOpenapiMerchantRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryNotaryOpenapiMerchantRequest) GoString() string {
	return s.String()
}

func (s *QueryNotaryOpenapiMerchantRequest) SetAuthToken(v string) *QueryNotaryOpenapiMerchantRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryNotaryOpenapiMerchantRequest) SetProductInstanceId(v string) *QueryNotaryOpenapiMerchantRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryNotaryOpenapiMerchantRequest) SetBizNo(v string) *QueryNotaryOpenapiMerchantRequest {
	s.BizNo = &v
	return s
}

type QueryNotaryOpenapiMerchantResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 查询的biz_no
	BizNo *string `json:"biz_no,omitempty" xml:"biz_no,omitempty"`
	// 认证状态：认证是否通过。通过为true，不通过为false
	Passed *bool `json:"passed,omitempty" xml:"passed,omitempty"`
}

func (s QueryNotaryOpenapiMerchantResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryNotaryOpenapiMerchantResponse) GoString() string {
	return s.String()
}

func (s *QueryNotaryOpenapiMerchantResponse) SetReqMsgId(v string) *QueryNotaryOpenapiMerchantResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryNotaryOpenapiMerchantResponse) SetResultCode(v string) *QueryNotaryOpenapiMerchantResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryNotaryOpenapiMerchantResponse) SetResultMsg(v string) *QueryNotaryOpenapiMerchantResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryNotaryOpenapiMerchantResponse) SetBizNo(v string) *QueryNotaryOpenapiMerchantResponse {
	s.BizNo = &v
	return s
}

func (s *QueryNotaryOpenapiMerchantResponse) SetPassed(v bool) *QueryNotaryOpenapiMerchantResponse {
	s.Passed = &v
	return s
}

type DeployNotaryLeaseContractRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 租赁服务平台部署的合约Id名称
	ContractId *string `json:"contract_id,omitempty" xml:"contract_id,omitempty" require:"true"`
}

func (s DeployNotaryLeaseContractRequest) String() string {
	return tea.Prettify(s)
}

func (s DeployNotaryLeaseContractRequest) GoString() string {
	return s.String()
}

func (s *DeployNotaryLeaseContractRequest) SetAuthToken(v string) *DeployNotaryLeaseContractRequest {
	s.AuthToken = &v
	return s
}

func (s *DeployNotaryLeaseContractRequest) SetProductInstanceId(v string) *DeployNotaryLeaseContractRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *DeployNotaryLeaseContractRequest) SetContractId(v string) *DeployNotaryLeaseContractRequest {
	s.ContractId = &v
	return s
}

type DeployNotaryLeaseContractResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 状态码 0表示成功
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 错误信息
	ErrMessage *string `json:"err_message,omitempty" xml:"err_message,omitempty"`
	// 部署合约对应的区块链交易哈希
	ResponseData *string `json:"response_data,omitempty" xml:"response_data,omitempty"`
}

func (s DeployNotaryLeaseContractResponse) String() string {
	return tea.Prettify(s)
}

func (s DeployNotaryLeaseContractResponse) GoString() string {
	return s.String()
}

func (s *DeployNotaryLeaseContractResponse) SetReqMsgId(v string) *DeployNotaryLeaseContractResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeployNotaryLeaseContractResponse) SetResultCode(v string) *DeployNotaryLeaseContractResponse {
	s.ResultCode = &v
	return s
}

func (s *DeployNotaryLeaseContractResponse) SetResultMsg(v string) *DeployNotaryLeaseContractResponse {
	s.ResultMsg = &v
	return s
}

func (s *DeployNotaryLeaseContractResponse) SetCode(v int64) *DeployNotaryLeaseContractResponse {
	s.Code = &v
	return s
}

func (s *DeployNotaryLeaseContractResponse) SetErrMessage(v string) *DeployNotaryLeaseContractResponse {
	s.ErrMessage = &v
	return s
}

func (s *DeployNotaryLeaseContractResponse) SetResponseData(v string) *DeployNotaryLeaseContractResponse {
	s.ResponseData = &v
	return s
}

type CreateOpenchainWebsitServiceRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 商户code,如法人的唯一id
	MerchantCode *string `json:"merchant_code,omitempty" xml:"merchant_code,omitempty" require:"true"`
	// 商户名称
	MerchantName *string `json:"merchant_name,omitempty" xml:"merchant_name,omitempty" require:"true"`
	// 租户code
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty" require:"true"`
}

func (s CreateOpenchainWebsitServiceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateOpenchainWebsitServiceRequest) GoString() string {
	return s.String()
}

func (s *CreateOpenchainWebsitServiceRequest) SetAuthToken(v string) *CreateOpenchainWebsitServiceRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateOpenchainWebsitServiceRequest) SetProductInstanceId(v string) *CreateOpenchainWebsitServiceRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateOpenchainWebsitServiceRequest) SetMerchantCode(v string) *CreateOpenchainWebsitServiceRequest {
	s.MerchantCode = &v
	return s
}

func (s *CreateOpenchainWebsitServiceRequest) SetMerchantName(v string) *CreateOpenchainWebsitServiceRequest {
	s.MerchantName = &v
	return s
}

func (s *CreateOpenchainWebsitServiceRequest) SetTenantId(v string) *CreateOpenchainWebsitServiceRequest {
	s.TenantId = &v
	return s
}

type CreateOpenchainWebsitServiceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s CreateOpenchainWebsitServiceResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateOpenchainWebsitServiceResponse) GoString() string {
	return s.String()
}

func (s *CreateOpenchainWebsitServiceResponse) SetReqMsgId(v string) *CreateOpenchainWebsitServiceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateOpenchainWebsitServiceResponse) SetResultCode(v string) *CreateOpenchainWebsitServiceResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateOpenchainWebsitServiceResponse) SetResultMsg(v string) *CreateOpenchainWebsitServiceResponse {
	s.ResultMsg = &v
	return s
}

type CheckOpenchainCorporateFaceRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 企业名称
	EpCertName *string `json:"ep_cert_name,omitempty" xml:"ep_cert_name,omitempty" require:"true"`
	// 企业证件
	EpCertNo *string `json:"ep_cert_no,omitempty" xml:"ep_cert_no,omitempty" require:"true"`
	// 企业证件类型（NATIONAL_LEGAL（工商注册号）或 NATIONAL_LEGAL_MERGE （ 社会统一信用代码））
	EpCertType *string `json:"ep_cert_type,omitempty" xml:"ep_cert_type,omitempty" require:"true"`
	// 企业法人名称
	LegalPersonCertName *string `json:"legal_person_cert_name,omitempty" xml:"legal_person_cert_name,omitempty" require:"true"`
	// 法人身份证号
	LegalPersonCertNo *string `json:"legal_person_cert_no,omitempty" xml:"legal_person_cert_no,omitempty" require:"true"`
	// 商户code
	MerchantCode *string `json:"merchant_code,omitempty" xml:"merchant_code,omitempty" require:"true"`
	// 店铺描述
	ShopDesc *string `json:"shop_desc,omitempty" xml:"shop_desc,omitempty"`
	// 店铺图片地址
	ShopSitImage *string `json:"shop_sit_image,omitempty" xml:"shop_sit_image,omitempty"`
	// 店铺url地址
	ShopWebUrl *string `json:"shop_web_url,omitempty" xml:"shop_web_url,omitempty"`
	// 租户code
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty" require:"true"`
	// 网站id，为网站产品唯一标识
	WebSitId *string `json:"web_sit_id,omitempty" xml:"web_sit_id,omitempty" require:"true"`
	// 网站域名
	WebSitUrl *string `json:"web_sit_url,omitempty" xml:"web_sit_url,omitempty" require:"true"`
}

func (s CheckOpenchainCorporateFaceRequest) String() string {
	return tea.Prettify(s)
}

func (s CheckOpenchainCorporateFaceRequest) GoString() string {
	return s.String()
}

func (s *CheckOpenchainCorporateFaceRequest) SetAuthToken(v string) *CheckOpenchainCorporateFaceRequest {
	s.AuthToken = &v
	return s
}

func (s *CheckOpenchainCorporateFaceRequest) SetProductInstanceId(v string) *CheckOpenchainCorporateFaceRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CheckOpenchainCorporateFaceRequest) SetEpCertName(v string) *CheckOpenchainCorporateFaceRequest {
	s.EpCertName = &v
	return s
}

func (s *CheckOpenchainCorporateFaceRequest) SetEpCertNo(v string) *CheckOpenchainCorporateFaceRequest {
	s.EpCertNo = &v
	return s
}

func (s *CheckOpenchainCorporateFaceRequest) SetEpCertType(v string) *CheckOpenchainCorporateFaceRequest {
	s.EpCertType = &v
	return s
}

func (s *CheckOpenchainCorporateFaceRequest) SetLegalPersonCertName(v string) *CheckOpenchainCorporateFaceRequest {
	s.LegalPersonCertName = &v
	return s
}

func (s *CheckOpenchainCorporateFaceRequest) SetLegalPersonCertNo(v string) *CheckOpenchainCorporateFaceRequest {
	s.LegalPersonCertNo = &v
	return s
}

func (s *CheckOpenchainCorporateFaceRequest) SetMerchantCode(v string) *CheckOpenchainCorporateFaceRequest {
	s.MerchantCode = &v
	return s
}

func (s *CheckOpenchainCorporateFaceRequest) SetShopDesc(v string) *CheckOpenchainCorporateFaceRequest {
	s.ShopDesc = &v
	return s
}

func (s *CheckOpenchainCorporateFaceRequest) SetShopSitImage(v string) *CheckOpenchainCorporateFaceRequest {
	s.ShopSitImage = &v
	return s
}

func (s *CheckOpenchainCorporateFaceRequest) SetShopWebUrl(v string) *CheckOpenchainCorporateFaceRequest {
	s.ShopWebUrl = &v
	return s
}

func (s *CheckOpenchainCorporateFaceRequest) SetTenantId(v string) *CheckOpenchainCorporateFaceRequest {
	s.TenantId = &v
	return s
}

func (s *CheckOpenchainCorporateFaceRequest) SetWebSitId(v string) *CheckOpenchainCorporateFaceRequest {
	s.WebSitId = &v
	return s
}

func (s *CheckOpenchainCorporateFaceRequest) SetWebSitUrl(v string) *CheckOpenchainCorporateFaceRequest {
	s.WebSitUrl = &v
	return s
}

type CheckOpenchainCorporateFaceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 认证id
	CertifyId *string `json:"certify_id,omitempty" xml:"certify_id,omitempty"`
	// 二维码URL，用户支付宝扫一扫实人认证
	CertifyUrl *string `json:"certify_url,omitempty" xml:"certify_url,omitempty"`
}

func (s CheckOpenchainCorporateFaceResponse) String() string {
	return tea.Prettify(s)
}

func (s CheckOpenchainCorporateFaceResponse) GoString() string {
	return s.String()
}

func (s *CheckOpenchainCorporateFaceResponse) SetReqMsgId(v string) *CheckOpenchainCorporateFaceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CheckOpenchainCorporateFaceResponse) SetResultCode(v string) *CheckOpenchainCorporateFaceResponse {
	s.ResultCode = &v
	return s
}

func (s *CheckOpenchainCorporateFaceResponse) SetResultMsg(v string) *CheckOpenchainCorporateFaceResponse {
	s.ResultMsg = &v
	return s
}

func (s *CheckOpenchainCorporateFaceResponse) SetCertifyId(v string) *CheckOpenchainCorporateFaceResponse {
	s.CertifyId = &v
	return s
}

func (s *CheckOpenchainCorporateFaceResponse) SetCertifyUrl(v string) *CheckOpenchainCorporateFaceResponse {
	s.CertifyUrl = &v
	return s
}

type QueryOpenchainCorporateFaceRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 认证id
	CertifyId *string `json:"certify_id,omitempty" xml:"certify_id,omitempty" require:"true"`
	// 租户code
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty" require:"true"`
	// 商户code
	MerchantCode *string `json:"merchant_code,omitempty" xml:"merchant_code,omitempty" require:"true"`
}

func (s QueryOpenchainCorporateFaceRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryOpenchainCorporateFaceRequest) GoString() string {
	return s.String()
}

func (s *QueryOpenchainCorporateFaceRequest) SetAuthToken(v string) *QueryOpenchainCorporateFaceRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryOpenchainCorporateFaceRequest) SetProductInstanceId(v string) *QueryOpenchainCorporateFaceRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryOpenchainCorporateFaceRequest) SetCertifyId(v string) *QueryOpenchainCorporateFaceRequest {
	s.CertifyId = &v
	return s
}

func (s *QueryOpenchainCorporateFaceRequest) SetTenantId(v string) *QueryOpenchainCorporateFaceRequest {
	s.TenantId = &v
	return s
}

func (s *QueryOpenchainCorporateFaceRequest) SetMerchantCode(v string) *QueryOpenchainCorporateFaceRequest {
	s.MerchantCode = &v
	return s
}

type QueryOpenchainCorporateFaceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 访问授权宝的url
	AuthedUrl *string `json:"authed_url,omitempty" xml:"authed_url,omitempty"`
}

func (s QueryOpenchainCorporateFaceResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryOpenchainCorporateFaceResponse) GoString() string {
	return s.String()
}

func (s *QueryOpenchainCorporateFaceResponse) SetReqMsgId(v string) *QueryOpenchainCorporateFaceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryOpenchainCorporateFaceResponse) SetResultCode(v string) *QueryOpenchainCorporateFaceResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryOpenchainCorporateFaceResponse) SetResultMsg(v string) *QueryOpenchainCorporateFaceResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryOpenchainCorporateFaceResponse) SetAuthedUrl(v string) *QueryOpenchainCorporateFaceResponse {
	s.AuthedUrl = &v
	return s
}

type QueryOpenchainUserDataRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 租户code
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty" require:"true"`
	// 商户code
	MerchantCode *string `json:"merchant_code,omitempty" xml:"merchant_code,omitempty" require:"true"`
	// 网站sitid
	WebsitId *string `json:"websit_id,omitempty" xml:"websit_id,omitempty" require:"true"`
	// 查询的开始时间
	StartTime *string `json:"start_time,omitempty" xml:"start_time,omitempty" require:"true" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 查询的截止时间
	EndTime *string `json:"end_time,omitempty" xml:"end_time,omitempty" require:"true" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
}

func (s QueryOpenchainUserDataRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryOpenchainUserDataRequest) GoString() string {
	return s.String()
}

func (s *QueryOpenchainUserDataRequest) SetAuthToken(v string) *QueryOpenchainUserDataRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryOpenchainUserDataRequest) SetProductInstanceId(v string) *QueryOpenchainUserDataRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryOpenchainUserDataRequest) SetTenantId(v string) *QueryOpenchainUserDataRequest {
	s.TenantId = &v
	return s
}

func (s *QueryOpenchainUserDataRequest) SetMerchantCode(v string) *QueryOpenchainUserDataRequest {
	s.MerchantCode = &v
	return s
}

func (s *QueryOpenchainUserDataRequest) SetWebsitId(v string) *QueryOpenchainUserDataRequest {
	s.WebsitId = &v
	return s
}

func (s *QueryOpenchainUserDataRequest) SetStartTime(v string) *QueryOpenchainUserDataRequest {
	s.StartTime = &v
	return s
}

func (s *QueryOpenchainUserDataRequest) SetEndTime(v string) *QueryOpenchainUserDataRequest {
	s.EndTime = &v
	return s
}

type QueryOpenchainUserDataResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 用户数据
	UserData []*OCUserData `json:"user_data,omitempty" xml:"user_data,omitempty" type:"Repeated"`
}

func (s QueryOpenchainUserDataResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryOpenchainUserDataResponse) GoString() string {
	return s.String()
}

func (s *QueryOpenchainUserDataResponse) SetReqMsgId(v string) *QueryOpenchainUserDataResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryOpenchainUserDataResponse) SetResultCode(v string) *QueryOpenchainUserDataResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryOpenchainUserDataResponse) SetResultMsg(v string) *QueryOpenchainUserDataResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryOpenchainUserDataResponse) SetUserData(v []*OCUserData) *QueryOpenchainUserDataResponse {
	s.UserData = v
	return s
}

type QueryIdentificationRiskThreemetaRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 被核验人身份证号码
	CertNo *string `json:"cert_no,omitempty" xml:"cert_no,omitempty" require:"true"`
	// 被核验人手机号码
	Mobile *string `json:"mobile,omitempty" xml:"mobile,omitempty" require:"true"`
	// 被核验人姓名
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
}

func (s QueryIdentificationRiskThreemetaRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryIdentificationRiskThreemetaRequest) GoString() string {
	return s.String()
}

func (s *QueryIdentificationRiskThreemetaRequest) SetAuthToken(v string) *QueryIdentificationRiskThreemetaRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryIdentificationRiskThreemetaRequest) SetProductInstanceId(v string) *QueryIdentificationRiskThreemetaRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryIdentificationRiskThreemetaRequest) SetCertNo(v string) *QueryIdentificationRiskThreemetaRequest {
	s.CertNo = &v
	return s
}

func (s *QueryIdentificationRiskThreemetaRequest) SetMobile(v string) *QueryIdentificationRiskThreemetaRequest {
	s.Mobile = &v
	return s
}

func (s *QueryIdentificationRiskThreemetaRequest) SetName(v string) *QueryIdentificationRiskThreemetaRequest {
	s.Name = &v
	return s
}

type QueryIdentificationRiskThreemetaResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 是否通过
	Accepted *bool `json:"accepted,omitempty" xml:"accepted,omitempty"`
	//
	VerifyUrl *string `json:"verify_url,omitempty" xml:"verify_url,omitempty"`
}

func (s QueryIdentificationRiskThreemetaResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryIdentificationRiskThreemetaResponse) GoString() string {
	return s.String()
}

func (s *QueryIdentificationRiskThreemetaResponse) SetReqMsgId(v string) *QueryIdentificationRiskThreemetaResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryIdentificationRiskThreemetaResponse) SetResultCode(v string) *QueryIdentificationRiskThreemetaResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryIdentificationRiskThreemetaResponse) SetResultMsg(v string) *QueryIdentificationRiskThreemetaResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryIdentificationRiskThreemetaResponse) SetAccepted(v bool) *QueryIdentificationRiskThreemetaResponse {
	s.Accepted = &v
	return s
}

func (s *QueryIdentificationRiskThreemetaResponse) SetVerifyUrl(v string) *QueryIdentificationRiskThreemetaResponse {
	s.VerifyUrl = &v
	return s
}

type CheckContentRiskTextRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 文本内容
	Content *string `json:"content,omitempty" xml:"content,omitempty" require:"true"`
}

func (s CheckContentRiskTextRequest) String() string {
	return tea.Prettify(s)
}

func (s CheckContentRiskTextRequest) GoString() string {
	return s.String()
}

func (s *CheckContentRiskTextRequest) SetAuthToken(v string) *CheckContentRiskTextRequest {
	s.AuthToken = &v
	return s
}

func (s *CheckContentRiskTextRequest) SetProductInstanceId(v string) *CheckContentRiskTextRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CheckContentRiskTextRequest) SetContent(v string) *CheckContentRiskTextRequest {
	s.Content = &v
	return s
}

type CheckContentRiskTextResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 风险等级
	RiskLevel *string `json:"risk_level,omitempty" xml:"risk_level,omitempty"`
	// 风险类型
	RiskType *string `json:"risk_type,omitempty" xml:"risk_type,omitempty"`
}

func (s CheckContentRiskTextResponse) String() string {
	return tea.Prettify(s)
}

func (s CheckContentRiskTextResponse) GoString() string {
	return s.String()
}

func (s *CheckContentRiskTextResponse) SetReqMsgId(v string) *CheckContentRiskTextResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CheckContentRiskTextResponse) SetResultCode(v string) *CheckContentRiskTextResponse {
	s.ResultCode = &v
	return s
}

func (s *CheckContentRiskTextResponse) SetResultMsg(v string) *CheckContentRiskTextResponse {
	s.ResultMsg = &v
	return s
}

func (s *CheckContentRiskTextResponse) SetRiskLevel(v string) *CheckContentRiskTextResponse {
	s.RiskLevel = &v
	return s
}

func (s *CheckContentRiskTextResponse) SetRiskType(v string) *CheckContentRiskTextResponse {
	s.RiskType = &v
	return s
}

type QueryIdentificationRiskTwometaRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 被核验人身份证号码
	CertNo *string `json:"cert_no,omitempty" xml:"cert_no,omitempty" require:"true"`
	// 被核验人姓名
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
}

func (s QueryIdentificationRiskTwometaRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryIdentificationRiskTwometaRequest) GoString() string {
	return s.String()
}

func (s *QueryIdentificationRiskTwometaRequest) SetAuthToken(v string) *QueryIdentificationRiskTwometaRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryIdentificationRiskTwometaRequest) SetProductInstanceId(v string) *QueryIdentificationRiskTwometaRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryIdentificationRiskTwometaRequest) SetCertNo(v string) *QueryIdentificationRiskTwometaRequest {
	s.CertNo = &v
	return s
}

func (s *QueryIdentificationRiskTwometaRequest) SetName(v string) *QueryIdentificationRiskTwometaRequest {
	s.Name = &v
	return s
}

type QueryIdentificationRiskTwometaResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 是否通过
	Accepted *bool `json:"accepted,omitempty" xml:"accepted,omitempty"`
	//
	VerifyUrl *string `json:"verify_url,omitempty" xml:"verify_url,omitempty"`
}

func (s QueryIdentificationRiskTwometaResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryIdentificationRiskTwometaResponse) GoString() string {
	return s.String()
}

func (s *QueryIdentificationRiskTwometaResponse) SetReqMsgId(v string) *QueryIdentificationRiskTwometaResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryIdentificationRiskTwometaResponse) SetResultCode(v string) *QueryIdentificationRiskTwometaResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryIdentificationRiskTwometaResponse) SetResultMsg(v string) *QueryIdentificationRiskTwometaResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryIdentificationRiskTwometaResponse) SetAccepted(v bool) *QueryIdentificationRiskTwometaResponse {
	s.Accepted = &v
	return s
}

func (s *QueryIdentificationRiskTwometaResponse) SetVerifyUrl(v string) *QueryIdentificationRiskTwometaResponse {
	s.VerifyUrl = &v
	return s
}

type QueryIdentificationRiskFourmetaRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 被核验人银行卡号
	BankCardNo *string `json:"bank_card_no,omitempty" xml:"bank_card_no,omitempty" require:"true"`
	// 被核验人身份证号码
	CertNo *string `json:"cert_no,omitempty" xml:"cert_no,omitempty" require:"true"`
	// 被核验人手机号码
	Mobile *string `json:"mobile,omitempty" xml:"mobile,omitempty" require:"true"`
	// 被核验人姓名
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
}

func (s QueryIdentificationRiskFourmetaRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryIdentificationRiskFourmetaRequest) GoString() string {
	return s.String()
}

func (s *QueryIdentificationRiskFourmetaRequest) SetAuthToken(v string) *QueryIdentificationRiskFourmetaRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryIdentificationRiskFourmetaRequest) SetProductInstanceId(v string) *QueryIdentificationRiskFourmetaRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryIdentificationRiskFourmetaRequest) SetBankCardNo(v string) *QueryIdentificationRiskFourmetaRequest {
	s.BankCardNo = &v
	return s
}

func (s *QueryIdentificationRiskFourmetaRequest) SetCertNo(v string) *QueryIdentificationRiskFourmetaRequest {
	s.CertNo = &v
	return s
}

func (s *QueryIdentificationRiskFourmetaRequest) SetMobile(v string) *QueryIdentificationRiskFourmetaRequest {
	s.Mobile = &v
	return s
}

func (s *QueryIdentificationRiskFourmetaRequest) SetName(v string) *QueryIdentificationRiskFourmetaRequest {
	s.Name = &v
	return s
}

type QueryIdentificationRiskFourmetaResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 是否通过
	Accepted *bool `json:"accepted,omitempty" xml:"accepted,omitempty"`
	//
	VerifyUrl *string `json:"verify_url,omitempty" xml:"verify_url,omitempty"`
}

func (s QueryIdentificationRiskFourmetaResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryIdentificationRiskFourmetaResponse) GoString() string {
	return s.String()
}

func (s *QueryIdentificationRiskFourmetaResponse) SetReqMsgId(v string) *QueryIdentificationRiskFourmetaResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryIdentificationRiskFourmetaResponse) SetResultCode(v string) *QueryIdentificationRiskFourmetaResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryIdentificationRiskFourmetaResponse) SetResultMsg(v string) *QueryIdentificationRiskFourmetaResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryIdentificationRiskFourmetaResponse) SetAccepted(v bool) *QueryIdentificationRiskFourmetaResponse {
	s.Accepted = &v
	return s
}

func (s *QueryIdentificationRiskFourmetaResponse) SetVerifyUrl(v string) *QueryIdentificationRiskFourmetaResponse {
	s.VerifyUrl = &v
	return s
}

type CreateNotaryRawTextRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 如果已经在链上有账户，可以直接使用已有的账户进行存证。如果为空，服务端会在链上创建一个
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty"`
	// 链的唯一性标示，请联系baas平台获取
	Bizid *string `json:"bizid,omitempty" xml:"bizid,omitempty" require:"true"`
	// 存证内容
	Content *string `json:"content,omitempty" xml:"content,omitempty" require:"true"`
}

func (s CreateNotaryRawTextRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateNotaryRawTextRequest) GoString() string {
	return s.String()
}

func (s *CreateNotaryRawTextRequest) SetAuthToken(v string) *CreateNotaryRawTextRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateNotaryRawTextRequest) SetProductInstanceId(v string) *CreateNotaryRawTextRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateNotaryRawTextRequest) SetAccountId(v string) *CreateNotaryRawTextRequest {
	s.AccountId = &v
	return s
}

func (s *CreateNotaryRawTextRequest) SetBizid(v string) *CreateNotaryRawTextRequest {
	s.Bizid = &v
	return s
}

func (s *CreateNotaryRawTextRequest) SetContent(v string) *CreateNotaryRawTextRequest {
	s.Content = &v
	return s
}

type CreateNotaryRawTextResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 存证使用的链上账户
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty"`
	// 存证哈希
	TransactionHash *string `json:"transaction_hash,omitempty" xml:"transaction_hash,omitempty"`
}

func (s CreateNotaryRawTextResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateNotaryRawTextResponse) GoString() string {
	return s.String()
}

func (s *CreateNotaryRawTextResponse) SetReqMsgId(v string) *CreateNotaryRawTextResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateNotaryRawTextResponse) SetResultCode(v string) *CreateNotaryRawTextResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateNotaryRawTextResponse) SetResultMsg(v string) *CreateNotaryRawTextResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateNotaryRawTextResponse) SetAccountId(v string) *CreateNotaryRawTextResponse {
	s.AccountId = &v
	return s
}

func (s *CreateNotaryRawTextResponse) SetTransactionHash(v string) *CreateNotaryRawTextResponse {
	s.TransactionHash = &v
	return s
}

type GetNotaryRawTextRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 区块链的唯一性标示
	Bizid *string `json:"bizid,omitempty" xml:"bizid,omitempty" require:"true"`
	// 存证哈希
	TransactionHash *string `json:"transaction_hash,omitempty" xml:"transaction_hash,omitempty" require:"true"`
}

func (s GetNotaryRawTextRequest) String() string {
	return tea.Prettify(s)
}

func (s GetNotaryRawTextRequest) GoString() string {
	return s.String()
}

func (s *GetNotaryRawTextRequest) SetAuthToken(v string) *GetNotaryRawTextRequest {
	s.AuthToken = &v
	return s
}

func (s *GetNotaryRawTextRequest) SetProductInstanceId(v string) *GetNotaryRawTextRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *GetNotaryRawTextRequest) SetBizid(v string) *GetNotaryRawTextRequest {
	s.Bizid = &v
	return s
}

func (s *GetNotaryRawTextRequest) SetTransactionHash(v string) *GetNotaryRawTextRequest {
	s.TransactionHash = &v
	return s
}

type GetNotaryRawTextResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 存证内容
	Content *string `json:"content,omitempty" xml:"content,omitempty"`
	// 存证时间
	NotaryDate *string `json:"notary_date,omitempty" xml:"notary_date,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
}

func (s GetNotaryRawTextResponse) String() string {
	return tea.Prettify(s)
}

func (s GetNotaryRawTextResponse) GoString() string {
	return s.String()
}

func (s *GetNotaryRawTextResponse) SetReqMsgId(v string) *GetNotaryRawTextResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetNotaryRawTextResponse) SetResultCode(v string) *GetNotaryRawTextResponse {
	s.ResultCode = &v
	return s
}

func (s *GetNotaryRawTextResponse) SetResultMsg(v string) *GetNotaryRawTextResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetNotaryRawTextResponse) SetContent(v string) *GetNotaryRawTextResponse {
	s.Content = &v
	return s
}

func (s *GetNotaryRawTextResponse) SetNotaryDate(v string) *GetNotaryRawTextResponse {
	s.NotaryDate = &v
	return s
}

type QueryIdentificationRiskMaskRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 被核验人身份证号码后四位
	CertNo *string `json:"cert_no,omitempty" xml:"cert_no,omitempty" require:"true"`
	// 被核验人手机号码
	Mobile *string `json:"mobile,omitempty" xml:"mobile,omitempty" require:"true"`
	// 被核验人姓名的一部分
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
}

func (s QueryIdentificationRiskMaskRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryIdentificationRiskMaskRequest) GoString() string {
	return s.String()
}

func (s *QueryIdentificationRiskMaskRequest) SetAuthToken(v string) *QueryIdentificationRiskMaskRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryIdentificationRiskMaskRequest) SetProductInstanceId(v string) *QueryIdentificationRiskMaskRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryIdentificationRiskMaskRequest) SetCertNo(v string) *QueryIdentificationRiskMaskRequest {
	s.CertNo = &v
	return s
}

func (s *QueryIdentificationRiskMaskRequest) SetMobile(v string) *QueryIdentificationRiskMaskRequest {
	s.Mobile = &v
	return s
}

func (s *QueryIdentificationRiskMaskRequest) SetName(v string) *QueryIdentificationRiskMaskRequest {
	s.Name = &v
	return s
}

type QueryIdentificationRiskMaskResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 是否通过
	//
	Accepted *bool `json:"accepted,omitempty" xml:"accepted,omitempty"`
	//
	VerifyUrl *string `json:"verify_url,omitempty" xml:"verify_url,omitempty"`
}

func (s QueryIdentificationRiskMaskResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryIdentificationRiskMaskResponse) GoString() string {
	return s.String()
}

func (s *QueryIdentificationRiskMaskResponse) SetReqMsgId(v string) *QueryIdentificationRiskMaskResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryIdentificationRiskMaskResponse) SetResultCode(v string) *QueryIdentificationRiskMaskResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryIdentificationRiskMaskResponse) SetResultMsg(v string) *QueryIdentificationRiskMaskResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryIdentificationRiskMaskResponse) SetAccepted(v bool) *QueryIdentificationRiskMaskResponse {
	s.Accepted = &v
	return s
}

func (s *QueryIdentificationRiskMaskResponse) SetVerifyUrl(v string) *QueryIdentificationRiskMaskResponse {
	s.VerifyUrl = &v
	return s
}

type InitIdentificationEnterpriseFaceauthRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 用于内部统计的参数，外部用户请忽略
	BizInfo *BizInfo `json:"biz_info,omitempty" xml:"biz_info,omitempty"`
	// 回调通知地址
	CallBackUrl *string `json:"call_back_url,omitempty" xml:"call_back_url,omitempty"`
	// 企业名称
	EpCertName *string `json:"ep_cert_name,omitempty" xml:"ep_cert_name,omitempty" require:"true"`
	// 企业证件号
	EpCertNo *string `json:"ep_cert_no,omitempty" xml:"ep_cert_no,omitempty" require:"true"`
	// 企业证件类型（NATIONAL_LEGAL（工商注册号）或 NATIONAL_LEGAL_MERGE （ 社会统一信用代码））
	EpCertType *string `json:"ep_cert_type,omitempty" xml:"ep_cert_type,omitempty" require:"true"`
	// 企业法人姓名
	LegalPersonCertName *string `json:"legal_person_cert_name,omitempty" xml:"legal_person_cert_name,omitempty" require:"true"`
	// 企业法人身份证号（目前只支持身份证号）
	LegalPersonCertNo *string `json:"legal_person_cert_no,omitempty" xml:"legal_person_cert_no,omitempty" require:"true"`
	// 认证完成后回跳地址
	MerchantUrl *string `json:"merchant_url,omitempty" xml:"merchant_url,omitempty"`
}

func (s InitIdentificationEnterpriseFaceauthRequest) String() string {
	return tea.Prettify(s)
}

func (s InitIdentificationEnterpriseFaceauthRequest) GoString() string {
	return s.String()
}

func (s *InitIdentificationEnterpriseFaceauthRequest) SetAuthToken(v string) *InitIdentificationEnterpriseFaceauthRequest {
	s.AuthToken = &v
	return s
}

func (s *InitIdentificationEnterpriseFaceauthRequest) SetProductInstanceId(v string) *InitIdentificationEnterpriseFaceauthRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *InitIdentificationEnterpriseFaceauthRequest) SetBizInfo(v *BizInfo) *InitIdentificationEnterpriseFaceauthRequest {
	s.BizInfo = v
	return s
}

func (s *InitIdentificationEnterpriseFaceauthRequest) SetCallBackUrl(v string) *InitIdentificationEnterpriseFaceauthRequest {
	s.CallBackUrl = &v
	return s
}

func (s *InitIdentificationEnterpriseFaceauthRequest) SetEpCertName(v string) *InitIdentificationEnterpriseFaceauthRequest {
	s.EpCertName = &v
	return s
}

func (s *InitIdentificationEnterpriseFaceauthRequest) SetEpCertNo(v string) *InitIdentificationEnterpriseFaceauthRequest {
	s.EpCertNo = &v
	return s
}

func (s *InitIdentificationEnterpriseFaceauthRequest) SetEpCertType(v string) *InitIdentificationEnterpriseFaceauthRequest {
	s.EpCertType = &v
	return s
}

func (s *InitIdentificationEnterpriseFaceauthRequest) SetLegalPersonCertName(v string) *InitIdentificationEnterpriseFaceauthRequest {
	s.LegalPersonCertName = &v
	return s
}

func (s *InitIdentificationEnterpriseFaceauthRequest) SetLegalPersonCertNo(v string) *InitIdentificationEnterpriseFaceauthRequest {
	s.LegalPersonCertNo = &v
	return s
}

func (s *InitIdentificationEnterpriseFaceauthRequest) SetMerchantUrl(v string) *InitIdentificationEnterpriseFaceauthRequest {
	s.MerchantUrl = &v
	return s
}

type InitIdentificationEnterpriseFaceauthResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 本次认证的业务唯一性标示
	BizNo *string `json:"biz_no,omitempty" xml:"biz_no,omitempty"`
	// 认证url
	VerifyUrl *string `json:"verify_url,omitempty" xml:"verify_url,omitempty"`
}

func (s InitIdentificationEnterpriseFaceauthResponse) String() string {
	return tea.Prettify(s)
}

func (s InitIdentificationEnterpriseFaceauthResponse) GoString() string {
	return s.String()
}

func (s *InitIdentificationEnterpriseFaceauthResponse) SetReqMsgId(v string) *InitIdentificationEnterpriseFaceauthResponse {
	s.ReqMsgId = &v
	return s
}

func (s *InitIdentificationEnterpriseFaceauthResponse) SetResultCode(v string) *InitIdentificationEnterpriseFaceauthResponse {
	s.ResultCode = &v
	return s
}

func (s *InitIdentificationEnterpriseFaceauthResponse) SetResultMsg(v string) *InitIdentificationEnterpriseFaceauthResponse {
	s.ResultMsg = &v
	return s
}

func (s *InitIdentificationEnterpriseFaceauthResponse) SetBizNo(v string) *InitIdentificationEnterpriseFaceauthResponse {
	s.BizNo = &v
	return s
}

func (s *InitIdentificationEnterpriseFaceauthResponse) SetVerifyUrl(v string) *InitIdentificationEnterpriseFaceauthResponse {
	s.VerifyUrl = &v
	return s
}

type QueryIdentificationEnterpriseFaceauthRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 认证的唯一性标示
	BizNo *string `json:"biz_no,omitempty" xml:"biz_no,omitempty" require:"true"`
}

func (s QueryIdentificationEnterpriseFaceauthRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryIdentificationEnterpriseFaceauthRequest) GoString() string {
	return s.String()
}

func (s *QueryIdentificationEnterpriseFaceauthRequest) SetAuthToken(v string) *QueryIdentificationEnterpriseFaceauthRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryIdentificationEnterpriseFaceauthRequest) SetProductInstanceId(v string) *QueryIdentificationEnterpriseFaceauthRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryIdentificationEnterpriseFaceauthRequest) SetBizNo(v string) *QueryIdentificationEnterpriseFaceauthRequest {
	s.BizNo = &v
	return s
}

type QueryIdentificationEnterpriseFaceauthResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 认证的唯一性标示
	BizNo *string `json:"biz_no,omitempty" xml:"biz_no,omitempty"`
	// 认证失败错误码
	FailedCode *string `json:"failed_code,omitempty" xml:"failed_code,omitempty"`
	// 认证失败原因信息
	FailedMessage *string `json:"failed_message,omitempty" xml:"failed_message,omitempty"`
	// 是否认证通过
	Passed *bool `json:"passed,omitempty" xml:"passed,omitempty"`
}

func (s QueryIdentificationEnterpriseFaceauthResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryIdentificationEnterpriseFaceauthResponse) GoString() string {
	return s.String()
}

func (s *QueryIdentificationEnterpriseFaceauthResponse) SetReqMsgId(v string) *QueryIdentificationEnterpriseFaceauthResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryIdentificationEnterpriseFaceauthResponse) SetResultCode(v string) *QueryIdentificationEnterpriseFaceauthResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryIdentificationEnterpriseFaceauthResponse) SetResultMsg(v string) *QueryIdentificationEnterpriseFaceauthResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryIdentificationEnterpriseFaceauthResponse) SetBizNo(v string) *QueryIdentificationEnterpriseFaceauthResponse {
	s.BizNo = &v
	return s
}

func (s *QueryIdentificationEnterpriseFaceauthResponse) SetFailedCode(v string) *QueryIdentificationEnterpriseFaceauthResponse {
	s.FailedCode = &v
	return s
}

func (s *QueryIdentificationEnterpriseFaceauthResponse) SetFailedMessage(v string) *QueryIdentificationEnterpriseFaceauthResponse {
	s.FailedMessage = &v
	return s
}

func (s *QueryIdentificationEnterpriseFaceauthResponse) SetPassed(v bool) *QueryIdentificationEnterpriseFaceauthResponse {
	s.Passed = &v
	return s
}

type QueryIdentificationEnterpriseFourmetaRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 企业名称
	EpCertName *string `json:"ep_cert_name,omitempty" xml:"ep_cert_name,omitempty" require:"true"`
	// 企业证件号
	EpCertNo *string `json:"ep_cert_no,omitempty" xml:"ep_cert_no,omitempty" require:"true"`
	// 企业证件类型（NATIONAL_LEGAL（工商注册号）或 NATIONAL_LEGAL_MERGE （ 社会统一信用代码））
	EpCertType *string `json:"ep_cert_type,omitempty" xml:"ep_cert_type,omitempty" require:"true"`
	// 法人姓名
	LegalPersonCertName *string `json:"legal_person_cert_name,omitempty" xml:"legal_person_cert_name,omitempty" require:"true"`
	// 企业法人身份证号码
	LegalPersonCertNo *string `json:"legal_person_cert_no,omitempty" xml:"legal_person_cert_no,omitempty" require:"true"`
}

func (s QueryIdentificationEnterpriseFourmetaRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryIdentificationEnterpriseFourmetaRequest) GoString() string {
	return s.String()
}

func (s *QueryIdentificationEnterpriseFourmetaRequest) SetAuthToken(v string) *QueryIdentificationEnterpriseFourmetaRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryIdentificationEnterpriseFourmetaRequest) SetProductInstanceId(v string) *QueryIdentificationEnterpriseFourmetaRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryIdentificationEnterpriseFourmetaRequest) SetEpCertName(v string) *QueryIdentificationEnterpriseFourmetaRequest {
	s.EpCertName = &v
	return s
}

func (s *QueryIdentificationEnterpriseFourmetaRequest) SetEpCertNo(v string) *QueryIdentificationEnterpriseFourmetaRequest {
	s.EpCertNo = &v
	return s
}

func (s *QueryIdentificationEnterpriseFourmetaRequest) SetEpCertType(v string) *QueryIdentificationEnterpriseFourmetaRequest {
	s.EpCertType = &v
	return s
}

func (s *QueryIdentificationEnterpriseFourmetaRequest) SetLegalPersonCertName(v string) *QueryIdentificationEnterpriseFourmetaRequest {
	s.LegalPersonCertName = &v
	return s
}

func (s *QueryIdentificationEnterpriseFourmetaRequest) SetLegalPersonCertNo(v string) *QueryIdentificationEnterpriseFourmetaRequest {
	s.LegalPersonCertNo = &v
	return s
}

type QueryIdentificationEnterpriseFourmetaResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 经营状态
	EnterpriseStatus *string `json:"enterprise_status,omitempty" xml:"enterprise_status,omitempty"`
	// 营业期限
	OpenTime *string `json:"open_time,omitempty" xml:"open_time,omitempty"`
	// 认证是否通过
	Passed *bool `json:"passed,omitempty" xml:"passed,omitempty"`
}

func (s QueryIdentificationEnterpriseFourmetaResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryIdentificationEnterpriseFourmetaResponse) GoString() string {
	return s.String()
}

func (s *QueryIdentificationEnterpriseFourmetaResponse) SetReqMsgId(v string) *QueryIdentificationEnterpriseFourmetaResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryIdentificationEnterpriseFourmetaResponse) SetResultCode(v string) *QueryIdentificationEnterpriseFourmetaResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryIdentificationEnterpriseFourmetaResponse) SetResultMsg(v string) *QueryIdentificationEnterpriseFourmetaResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryIdentificationEnterpriseFourmetaResponse) SetEnterpriseStatus(v string) *QueryIdentificationEnterpriseFourmetaResponse {
	s.EnterpriseStatus = &v
	return s
}

func (s *QueryIdentificationEnterpriseFourmetaResponse) SetOpenTime(v string) *QueryIdentificationEnterpriseFourmetaResponse {
	s.OpenTime = &v
	return s
}

func (s *QueryIdentificationEnterpriseFourmetaResponse) SetPassed(v bool) *QueryIdentificationEnterpriseFourmetaResponse {
	s.Passed = &v
	return s
}

type QueryIdentificationEnterpriseThreemetaRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 企业名称
	EpCertName *string `json:"ep_cert_name,omitempty" xml:"ep_cert_name,omitempty" require:"true"`
	// 企业证件号
	EpCertNo *string `json:"ep_cert_no,omitempty" xml:"ep_cert_no,omitempty" require:"true"`
	// 证件类型
	EpCertType *string `json:"ep_cert_type,omitempty" xml:"ep_cert_type,omitempty" require:"true"`
	// 法人姓名
	LegalPersonCertName *string `json:"legal_person_cert_name,omitempty" xml:"legal_person_cert_name,omitempty" require:"true"`
}

func (s QueryIdentificationEnterpriseThreemetaRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryIdentificationEnterpriseThreemetaRequest) GoString() string {
	return s.String()
}

func (s *QueryIdentificationEnterpriseThreemetaRequest) SetAuthToken(v string) *QueryIdentificationEnterpriseThreemetaRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryIdentificationEnterpriseThreemetaRequest) SetProductInstanceId(v string) *QueryIdentificationEnterpriseThreemetaRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryIdentificationEnterpriseThreemetaRequest) SetEpCertName(v string) *QueryIdentificationEnterpriseThreemetaRequest {
	s.EpCertName = &v
	return s
}

func (s *QueryIdentificationEnterpriseThreemetaRequest) SetEpCertNo(v string) *QueryIdentificationEnterpriseThreemetaRequest {
	s.EpCertNo = &v
	return s
}

func (s *QueryIdentificationEnterpriseThreemetaRequest) SetEpCertType(v string) *QueryIdentificationEnterpriseThreemetaRequest {
	s.EpCertType = &v
	return s
}

func (s *QueryIdentificationEnterpriseThreemetaRequest) SetLegalPersonCertName(v string) *QueryIdentificationEnterpriseThreemetaRequest {
	s.LegalPersonCertName = &v
	return s
}

type QueryIdentificationEnterpriseThreemetaResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 经营状态
	EnterpriseStatus *string `json:"enterprise_status,omitempty" xml:"enterprise_status,omitempty"`
	// 营业期限
	OpenTime *string `json:"open_time,omitempty" xml:"open_time,omitempty"`
	// 认证是否通过
	Passed *bool `json:"passed,omitempty" xml:"passed,omitempty"`
}

func (s QueryIdentificationEnterpriseThreemetaResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryIdentificationEnterpriseThreemetaResponse) GoString() string {
	return s.String()
}

func (s *QueryIdentificationEnterpriseThreemetaResponse) SetReqMsgId(v string) *QueryIdentificationEnterpriseThreemetaResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryIdentificationEnterpriseThreemetaResponse) SetResultCode(v string) *QueryIdentificationEnterpriseThreemetaResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryIdentificationEnterpriseThreemetaResponse) SetResultMsg(v string) *QueryIdentificationEnterpriseThreemetaResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryIdentificationEnterpriseThreemetaResponse) SetEnterpriseStatus(v string) *QueryIdentificationEnterpriseThreemetaResponse {
	s.EnterpriseStatus = &v
	return s
}

func (s *QueryIdentificationEnterpriseThreemetaResponse) SetOpenTime(v string) *QueryIdentificationEnterpriseThreemetaResponse {
	s.OpenTime = &v
	return s
}

func (s *QueryIdentificationEnterpriseThreemetaResponse) SetPassed(v bool) *QueryIdentificationEnterpriseThreemetaResponse {
	s.Passed = &v
	return s
}

type QueryIdentificationEnterpriseTwometaRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 企业名称
	EpCertName *string `json:"ep_cert_name,omitempty" xml:"ep_cert_name,omitempty" require:"true"`
	// 企业证件号
	EpCertNo *string `json:"ep_cert_no,omitempty" xml:"ep_cert_no,omitempty" require:"true"`
	// 企业证件类型（NATIONAL_LEGAL（工商注册号）或 NATIONAL_LEGAL_MERGE （ 社会统一信用代码）
	EpCertType *string `json:"ep_cert_type,omitempty" xml:"ep_cert_type,omitempty" require:"true"`
}

func (s QueryIdentificationEnterpriseTwometaRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryIdentificationEnterpriseTwometaRequest) GoString() string {
	return s.String()
}

func (s *QueryIdentificationEnterpriseTwometaRequest) SetAuthToken(v string) *QueryIdentificationEnterpriseTwometaRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryIdentificationEnterpriseTwometaRequest) SetProductInstanceId(v string) *QueryIdentificationEnterpriseTwometaRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryIdentificationEnterpriseTwometaRequest) SetEpCertName(v string) *QueryIdentificationEnterpriseTwometaRequest {
	s.EpCertName = &v
	return s
}

func (s *QueryIdentificationEnterpriseTwometaRequest) SetEpCertNo(v string) *QueryIdentificationEnterpriseTwometaRequest {
	s.EpCertNo = &v
	return s
}

func (s *QueryIdentificationEnterpriseTwometaRequest) SetEpCertType(v string) *QueryIdentificationEnterpriseTwometaRequest {
	s.EpCertType = &v
	return s
}

type QueryIdentificationEnterpriseTwometaResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 经营状态
	EnterpriseStatus *string `json:"enterprise_status,omitempty" xml:"enterprise_status,omitempty"`
	// 营业期限
	OpenTime *string `json:"open_time,omitempty" xml:"open_time,omitempty"`
	// 认证是否通过
	Passed *bool `json:"passed,omitempty" xml:"passed,omitempty"`
}

func (s QueryIdentificationEnterpriseTwometaResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryIdentificationEnterpriseTwometaResponse) GoString() string {
	return s.String()
}

func (s *QueryIdentificationEnterpriseTwometaResponse) SetReqMsgId(v string) *QueryIdentificationEnterpriseTwometaResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryIdentificationEnterpriseTwometaResponse) SetResultCode(v string) *QueryIdentificationEnterpriseTwometaResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryIdentificationEnterpriseTwometaResponse) SetResultMsg(v string) *QueryIdentificationEnterpriseTwometaResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryIdentificationEnterpriseTwometaResponse) SetEnterpriseStatus(v string) *QueryIdentificationEnterpriseTwometaResponse {
	s.EnterpriseStatus = &v
	return s
}

func (s *QueryIdentificationEnterpriseTwometaResponse) SetOpenTime(v string) *QueryIdentificationEnterpriseTwometaResponse {
	s.OpenTime = &v
	return s
}

func (s *QueryIdentificationEnterpriseTwometaResponse) SetPassed(v bool) *QueryIdentificationEnterpriseTwometaResponse {
	s.Passed = &v
	return s
}

type StartMydidDidThreeelementRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 客户自有用户的唯一id
	CustumorUid *string `json:"custumor_uid,omitempty" xml:"custumor_uid,omitempty" require:"true" maxLength:"64" minLength:"10"`
	// 实名认证身份证号
	VerifyInfoId *string `json:"verify_info_id,omitempty" xml:"verify_info_id,omitempty" require:"true" maxLength:"20" minLength:"14"`
	// 实名认证用户名
	VerifyInfoName *string `json:"verify_info_name,omitempty" xml:"verify_info_name,omitempty" require:"true" maxLength:"20" minLength:"4"`
	// 电话号码
	VerifyInfoPhone *string `json:"verify_info_phone,omitempty" xml:"verify_info_phone,omitempty" require:"true" maxLength:"11" minLength:"11"`
}

func (s StartMydidDidThreeelementRequest) String() string {
	return tea.Prettify(s)
}

func (s StartMydidDidThreeelementRequest) GoString() string {
	return s.String()
}

func (s *StartMydidDidThreeelementRequest) SetAuthToken(v string) *StartMydidDidThreeelementRequest {
	s.AuthToken = &v
	return s
}

func (s *StartMydidDidThreeelementRequest) SetProductInstanceId(v string) *StartMydidDidThreeelementRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *StartMydidDidThreeelementRequest) SetCustumorUid(v string) *StartMydidDidThreeelementRequest {
	s.CustumorUid = &v
	return s
}

func (s *StartMydidDidThreeelementRequest) SetVerifyInfoId(v string) *StartMydidDidThreeelementRequest {
	s.VerifyInfoId = &v
	return s
}

func (s *StartMydidDidThreeelementRequest) SetVerifyInfoName(v string) *StartMydidDidThreeelementRequest {
	s.VerifyInfoName = &v
	return s
}

func (s *StartMydidDidThreeelementRequest) SetVerifyInfoPhone(v string) *StartMydidDidThreeelementRequest {
	s.VerifyInfoPhone = &v
	return s
}

type StartMydidDidThreeelementResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 如果创建成功，会返回创建之后的did
	Did *string `json:"did,omitempty" xml:"did,omitempty"`
}

func (s StartMydidDidThreeelementResponse) String() string {
	return tea.Prettify(s)
}

func (s StartMydidDidThreeelementResponse) GoString() string {
	return s.String()
}

func (s *StartMydidDidThreeelementResponse) SetReqMsgId(v string) *StartMydidDidThreeelementResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartMydidDidThreeelementResponse) SetResultCode(v string) *StartMydidDidThreeelementResponse {
	s.ResultCode = &v
	return s
}

func (s *StartMydidDidThreeelementResponse) SetResultMsg(v string) *StartMydidDidThreeelementResponse {
	s.ResultMsg = &v
	return s
}

func (s *StartMydidDidThreeelementResponse) SetDid(v string) *StartMydidDidThreeelementResponse {
	s.Did = &v
	return s
}

type ListWaasDidValidpublickeysRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 用户数字身份ID
	Did *string `json:"did,omitempty" xml:"did,omitempty"`
	// 姓名
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 证件号码
	CertNo *string `json:"cert_no,omitempty" xml:"cert_no,omitempty"`
}

func (s ListWaasDidValidpublickeysRequest) String() string {
	return tea.Prettify(s)
}

func (s ListWaasDidValidpublickeysRequest) GoString() string {
	return s.String()
}

func (s *ListWaasDidValidpublickeysRequest) SetAuthToken(v string) *ListWaasDidValidpublickeysRequest {
	s.AuthToken = &v
	return s
}

func (s *ListWaasDidValidpublickeysRequest) SetProductInstanceId(v string) *ListWaasDidValidpublickeysRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ListWaasDidValidpublickeysRequest) SetDid(v string) *ListWaasDidValidpublickeysRequest {
	s.Did = &v
	return s
}

func (s *ListWaasDidValidpublickeysRequest) SetName(v string) *ListWaasDidValidpublickeysRequest {
	s.Name = &v
	return s
}

func (s *ListWaasDidValidpublickeysRequest) SetCertNo(v string) *ListWaasDidValidpublickeysRequest {
	s.CertNo = &v
	return s
}

type ListWaasDidValidpublickeysResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 用户数字身份ID
	Did *string `json:"did,omitempty" xml:"did,omitempty"`
	// 公钥信息列表
	ValidPubKeys []*PublicKeyInfo `json:"valid_pub_keys,omitempty" xml:"valid_pub_keys,omitempty" type:"Repeated"`
}

func (s ListWaasDidValidpublickeysResponse) String() string {
	return tea.Prettify(s)
}

func (s ListWaasDidValidpublickeysResponse) GoString() string {
	return s.String()
}

func (s *ListWaasDidValidpublickeysResponse) SetReqMsgId(v string) *ListWaasDidValidpublickeysResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListWaasDidValidpublickeysResponse) SetResultCode(v string) *ListWaasDidValidpublickeysResponse {
	s.ResultCode = &v
	return s
}

func (s *ListWaasDidValidpublickeysResponse) SetResultMsg(v string) *ListWaasDidValidpublickeysResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListWaasDidValidpublickeysResponse) SetDid(v string) *ListWaasDidValidpublickeysResponse {
	s.Did = &v
	return s
}

func (s *ListWaasDidValidpublickeysResponse) SetValidPubKeys(v []*PublicKeyInfo) *ListWaasDidValidpublickeysResponse {
	s.ValidPubKeys = v
	return s
}

type QueryWaasDidPublickeyRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 用户数字身份ID
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 公钥id
	KeyId *string `json:"key_id,omitempty" xml:"key_id,omitempty" require:"true"`
}

func (s QueryWaasDidPublickeyRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryWaasDidPublickeyRequest) GoString() string {
	return s.String()
}

func (s *QueryWaasDidPublickeyRequest) SetAuthToken(v string) *QueryWaasDidPublickeyRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryWaasDidPublickeyRequest) SetProductInstanceId(v string) *QueryWaasDidPublickeyRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryWaasDidPublickeyRequest) SetDid(v string) *QueryWaasDidPublickeyRequest {
	s.Did = &v
	return s
}

func (s *QueryWaasDidPublickeyRequest) SetKeyId(v string) *QueryWaasDidPublickeyRequest {
	s.KeyId = &v
	return s
}

type QueryWaasDidPublickeyResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 公钥信息
	PublicKeyInfo *PublicKeyInfo `json:"public_key_info,omitempty" xml:"public_key_info,omitempty"`
}

func (s QueryWaasDidPublickeyResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryWaasDidPublickeyResponse) GoString() string {
	return s.String()
}

func (s *QueryWaasDidPublickeyResponse) SetReqMsgId(v string) *QueryWaasDidPublickeyResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryWaasDidPublickeyResponse) SetResultCode(v string) *QueryWaasDidPublickeyResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryWaasDidPublickeyResponse) SetResultMsg(v string) *QueryWaasDidPublickeyResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryWaasDidPublickeyResponse) SetPublicKeyInfo(v *PublicKeyInfo) *QueryWaasDidPublickeyResponse {
	s.PublicKeyInfo = v
	return s
}

type RegisterWaasBusinessRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 业务场景名称
	BizName *string `json:"biz_name,omitempty" xml:"biz_name,omitempty" require:"true"`
	// 业务场景公钥
	PublicKey *string `json:"public_key,omitempty" xml:"public_key,omitempty" require:"true"`
	// 业务场景运行dcep合约的链id
	ChainId *string `json:"chain_id,omitempty" xml:"chain_id,omitempty" require:"true"`
	// 数据资产展示首页
	IndexUrl *string `json:"index_url,omitempty" xml:"index_url,omitempty" require:"true"`
	// 与waas交互地址，waas服务会推送相关消息至该链接
	InteractionUrl *string `json:"interaction_url,omitempty" xml:"interaction_url,omitempty" require:"true"`
	// 业务场景描述
	BusinessDesc *string `json:"business_desc,omitempty" xml:"business_desc,omitempty" require:"true"`
	// 扩展字段
	Extension *string `json:"extension,omitempty" xml:"extension,omitempty"`
}

func (s RegisterWaasBusinessRequest) String() string {
	return tea.Prettify(s)
}

func (s RegisterWaasBusinessRequest) GoString() string {
	return s.String()
}

func (s *RegisterWaasBusinessRequest) SetAuthToken(v string) *RegisterWaasBusinessRequest {
	s.AuthToken = &v
	return s
}

func (s *RegisterWaasBusinessRequest) SetProductInstanceId(v string) *RegisterWaasBusinessRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *RegisterWaasBusinessRequest) SetBizName(v string) *RegisterWaasBusinessRequest {
	s.BizName = &v
	return s
}

func (s *RegisterWaasBusinessRequest) SetPublicKey(v string) *RegisterWaasBusinessRequest {
	s.PublicKey = &v
	return s
}

func (s *RegisterWaasBusinessRequest) SetChainId(v string) *RegisterWaasBusinessRequest {
	s.ChainId = &v
	return s
}

func (s *RegisterWaasBusinessRequest) SetIndexUrl(v string) *RegisterWaasBusinessRequest {
	s.IndexUrl = &v
	return s
}

func (s *RegisterWaasBusinessRequest) SetInteractionUrl(v string) *RegisterWaasBusinessRequest {
	s.InteractionUrl = &v
	return s
}

func (s *RegisterWaasBusinessRequest) SetBusinessDesc(v string) *RegisterWaasBusinessRequest {
	s.BusinessDesc = &v
	return s
}

func (s *RegisterWaasBusinessRequest) SetExtension(v string) *RegisterWaasBusinessRequest {
	s.Extension = &v
	return s
}

type RegisterWaasBusinessResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// waas生成的对应的业务合作方id
	BusinessId *string `json:"business_id,omitempty" xml:"business_id,omitempty"`
}

func (s RegisterWaasBusinessResponse) String() string {
	return tea.Prettify(s)
}

func (s RegisterWaasBusinessResponse) GoString() string {
	return s.String()
}

func (s *RegisterWaasBusinessResponse) SetReqMsgId(v string) *RegisterWaasBusinessResponse {
	s.ReqMsgId = &v
	return s
}

func (s *RegisterWaasBusinessResponse) SetResultCode(v string) *RegisterWaasBusinessResponse {
	s.ResultCode = &v
	return s
}

func (s *RegisterWaasBusinessResponse) SetResultMsg(v string) *RegisterWaasBusinessResponse {
	s.ResultMsg = &v
	return s
}

func (s *RegisterWaasBusinessResponse) SetBusinessId(v string) *RegisterWaasBusinessResponse {
	s.BusinessId = &v
	return s
}

type QueryWaasBusinessTransferbodyRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 业务合作方id
	BusinessId *string `json:"business_id,omitempty" xml:"business_id,omitempty" require:"true"`
	// 转账用户的did
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 业务转账id
	BusinessOrderId *string `json:"business_order_id,omitempty" xml:"business_order_id,omitempty" require:"true"`
}

func (s QueryWaasBusinessTransferbodyRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryWaasBusinessTransferbodyRequest) GoString() string {
	return s.String()
}

func (s *QueryWaasBusinessTransferbodyRequest) SetAuthToken(v string) *QueryWaasBusinessTransferbodyRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryWaasBusinessTransferbodyRequest) SetProductInstanceId(v string) *QueryWaasBusinessTransferbodyRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryWaasBusinessTransferbodyRequest) SetBusinessId(v string) *QueryWaasBusinessTransferbodyRequest {
	s.BusinessId = &v
	return s
}

func (s *QueryWaasBusinessTransferbodyRequest) SetDid(v string) *QueryWaasBusinessTransferbodyRequest {
	s.Did = &v
	return s
}

func (s *QueryWaasBusinessTransferbodyRequest) SetBusinessOrderId(v string) *QueryWaasBusinessTransferbodyRequest {
	s.BusinessOrderId = &v
	return s
}

type QueryWaasBusinessTransferbodyResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// dcep的data参数，包含用户签名信息
	ChainBody *string `json:"chain_body,omitempty" xml:"chain_body,omitempty"`
}

func (s QueryWaasBusinessTransferbodyResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryWaasBusinessTransferbodyResponse) GoString() string {
	return s.String()
}

func (s *QueryWaasBusinessTransferbodyResponse) SetReqMsgId(v string) *QueryWaasBusinessTransferbodyResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryWaasBusinessTransferbodyResponse) SetResultCode(v string) *QueryWaasBusinessTransferbodyResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryWaasBusinessTransferbodyResponse) SetResultMsg(v string) *QueryWaasBusinessTransferbodyResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryWaasBusinessTransferbodyResponse) SetChainBody(v string) *QueryWaasBusinessTransferbodyResponse {
	s.ChainBody = &v
	return s
}

type NotifyWaasBusinessOrderRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 业务合作方id
	BusinessId *string `json:"business_id,omitempty" xml:"business_id,omitempty" require:"true"`
	// 转账用户的did
	Did *string `json:"did,omitempty" xml:"did,omitempty" require:"true"`
	// 业务转账订单id
	BusinessOrderId *string `json:"business_order_id,omitempty" xml:"business_order_id,omitempty" require:"true"`
	// 订单结果
	Result *string `json:"result,omitempty" xml:"result,omitempty" require:"true"`
	// 结果描述
	ResultMessage *string `json:"result_message,omitempty" xml:"result_message,omitempty"`
}

func (s NotifyWaasBusinessOrderRequest) String() string {
	return tea.Prettify(s)
}

func (s NotifyWaasBusinessOrderRequest) GoString() string {
	return s.String()
}

func (s *NotifyWaasBusinessOrderRequest) SetAuthToken(v string) *NotifyWaasBusinessOrderRequest {
	s.AuthToken = &v
	return s
}

func (s *NotifyWaasBusinessOrderRequest) SetProductInstanceId(v string) *NotifyWaasBusinessOrderRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *NotifyWaasBusinessOrderRequest) SetBusinessId(v string) *NotifyWaasBusinessOrderRequest {
	s.BusinessId = &v
	return s
}

func (s *NotifyWaasBusinessOrderRequest) SetDid(v string) *NotifyWaasBusinessOrderRequest {
	s.Did = &v
	return s
}

func (s *NotifyWaasBusinessOrderRequest) SetBusinessOrderId(v string) *NotifyWaasBusinessOrderRequest {
	s.BusinessOrderId = &v
	return s
}

func (s *NotifyWaasBusinessOrderRequest) SetResult(v string) *NotifyWaasBusinessOrderRequest {
	s.Result = &v
	return s
}

func (s *NotifyWaasBusinessOrderRequest) SetResultMessage(v string) *NotifyWaasBusinessOrderRequest {
	s.ResultMessage = &v
	return s
}

type NotifyWaasBusinessOrderResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s NotifyWaasBusinessOrderResponse) String() string {
	return tea.Prettify(s)
}

func (s NotifyWaasBusinessOrderResponse) GoString() string {
	return s.String()
}

func (s *NotifyWaasBusinessOrderResponse) SetReqMsgId(v string) *NotifyWaasBusinessOrderResponse {
	s.ReqMsgId = &v
	return s
}

func (s *NotifyWaasBusinessOrderResponse) SetResultCode(v string) *NotifyWaasBusinessOrderResponse {
	s.ResultCode = &v
	return s
}

func (s *NotifyWaasBusinessOrderResponse) SetResultMsg(v string) *NotifyWaasBusinessOrderResponse {
	s.ResultMsg = &v
	return s
}

type CreateAntcloudGatewayxFileUploadRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 上传文件作用的openapi method
	ApiCode *string `json:"api_code,omitempty" xml:"api_code,omitempty" require:"true"`
	// 文件标签，多个标签;分割
	FileLabel *string `json:"file_label,omitempty" xml:"file_label,omitempty" maxLength:"100"`
	// 自定义的文件元数据
	FileMetadata *string `json:"file_metadata,omitempty" xml:"file_metadata,omitempty" maxLength:"1000"`
	// 文件名，不传则随机生成文件名
	FileName *string `json:"file_name,omitempty" xml:"file_name,omitempty" maxLength:"100"`
	// 文件的多媒体类型
	MimeType *string `json:"mime_type,omitempty" xml:"mime_type,omitempty"`
	// 产品方的api归属集群，即productInstanceId
	ApiCluster *string `json:"api_cluster,omitempty" xml:"api_cluster,omitempty"`
}

func (s CreateAntcloudGatewayxFileUploadRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateAntcloudGatewayxFileUploadRequest) GoString() string {
	return s.String()
}

func (s *CreateAntcloudGatewayxFileUploadRequest) SetAuthToken(v string) *CreateAntcloudGatewayxFileUploadRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateAntcloudGatewayxFileUploadRequest) SetApiCode(v string) *CreateAntcloudGatewayxFileUploadRequest {
	s.ApiCode = &v
	return s
}

func (s *CreateAntcloudGatewayxFileUploadRequest) SetFileLabel(v string) *CreateAntcloudGatewayxFileUploadRequest {
	s.FileLabel = &v
	return s
}

func (s *CreateAntcloudGatewayxFileUploadRequest) SetFileMetadata(v string) *CreateAntcloudGatewayxFileUploadRequest {
	s.FileMetadata = &v
	return s
}

func (s *CreateAntcloudGatewayxFileUploadRequest) SetFileName(v string) *CreateAntcloudGatewayxFileUploadRequest {
	s.FileName = &v
	return s
}

func (s *CreateAntcloudGatewayxFileUploadRequest) SetMimeType(v string) *CreateAntcloudGatewayxFileUploadRequest {
	s.MimeType = &v
	return s
}

func (s *CreateAntcloudGatewayxFileUploadRequest) SetApiCluster(v string) *CreateAntcloudGatewayxFileUploadRequest {
	s.ApiCluster = &v
	return s
}

type CreateAntcloudGatewayxFileUploadResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 上传有效期
	ExpiredTime *string `json:"expired_time,omitempty" xml:"expired_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 32位文件唯一id
	FileId *string `json:"file_id,omitempty" xml:"file_id,omitempty"`
	// 放入http请求头里
	UploadHeaders []*XNameValuePair `json:"upload_headers,omitempty" xml:"upload_headers,omitempty" type:"Repeated"`
	// 文件上传地址
	UploadUrl *string `json:"upload_url,omitempty" xml:"upload_url,omitempty"`
}

func (s CreateAntcloudGatewayxFileUploadResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateAntcloudGatewayxFileUploadResponse) GoString() string {
	return s.String()
}

func (s *CreateAntcloudGatewayxFileUploadResponse) SetReqMsgId(v string) *CreateAntcloudGatewayxFileUploadResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateAntcloudGatewayxFileUploadResponse) SetResultCode(v string) *CreateAntcloudGatewayxFileUploadResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateAntcloudGatewayxFileUploadResponse) SetResultMsg(v string) *CreateAntcloudGatewayxFileUploadResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateAntcloudGatewayxFileUploadResponse) SetExpiredTime(v string) *CreateAntcloudGatewayxFileUploadResponse {
	s.ExpiredTime = &v
	return s
}

func (s *CreateAntcloudGatewayxFileUploadResponse) SetFileId(v string) *CreateAntcloudGatewayxFileUploadResponse {
	s.FileId = &v
	return s
}

func (s *CreateAntcloudGatewayxFileUploadResponse) SetUploadHeaders(v []*XNameValuePair) *CreateAntcloudGatewayxFileUploadResponse {
	s.UploadHeaders = v
	return s
}

func (s *CreateAntcloudGatewayxFileUploadResponse) SetUploadUrl(v string) *CreateAntcloudGatewayxFileUploadResponse {
	s.UploadUrl = &v
	return s
}

type Client struct {
	Endpoint                *string
	RegionId                *string
	AccessKeyId             *string
	AccessKeySecret         *string
	Protocol                *string
	UserAgent               *string
	ReadTimeout             *int
	ConnectTimeout          *int
	HttpProxy               *string
	HttpsProxy              *string
	Socks5Proxy             *string
	Socks5NetWork           *string
	NoProxy                 *string
	MaxIdleConns            *int
	SecurityToken           *string
	MaxIdleTimeMillis       *int
	KeepAliveDurationMillis *int
	MaxRequests             *int
	MaxRequestsPerHost      *int
}

/**
 * Init client with Config
 * @param config config contains the necessary information to create a client
 */
func NewClient(config *Config) (*Client, error) {
	client := new(Client)
	err := client.Init(config)
	return client, err
}

func (client *Client) Init(config *Config) (_err error) {
	if tea.BoolValue(util.IsUnset(tea.ToMap(config))) {
		_err = tea.NewSDKError(map[string]interface{}{
			"code":    "ParameterMissing",
			"message": "'config' can not be unset",
		})
		return _err
	}

	client.AccessKeyId = config.AccessKeyId
	client.AccessKeySecret = config.AccessKeySecret
	client.SecurityToken = config.SecurityToken
	client.Endpoint = config.Endpoint
	client.Protocol = config.Protocol
	client.UserAgent = config.UserAgent
	client.ReadTimeout = util.DefaultNumber(config.ReadTimeout, tea.Int(20000))
	client.ConnectTimeout = util.DefaultNumber(config.ConnectTimeout, tea.Int(20000))
	client.HttpProxy = config.HttpProxy
	client.HttpsProxy = config.HttpsProxy
	client.NoProxy = config.NoProxy
	client.Socks5Proxy = config.Socks5Proxy
	client.Socks5NetWork = config.Socks5NetWork
	client.MaxIdleConns = util.DefaultNumber(config.MaxIdleConns, tea.Int(60000))
	client.MaxIdleTimeMillis = util.DefaultNumber(config.MaxIdleTimeMillis, tea.Int(5))
	client.KeepAliveDurationMillis = util.DefaultNumber(config.KeepAliveDurationMillis, tea.Int(5000))
	client.MaxRequests = util.DefaultNumber(config.MaxRequests, tea.Int(100))
	client.MaxRequestsPerHost = util.DefaultNumber(config.MaxRequestsPerHost, tea.Int(100))
	return nil
}

/**
 * Encapsulate the request and invoke the network
 * @param action api name
 * @param protocol http or https
 * @param method e.g. GET
 * @param pathname pathname of every api
 * @param request which contains request params
 * @param runtime which controls some details of call api, such as retry times
 * @return the response
 */
func (client *Client) DoRequest(version *string, action *string, protocol *string, method *string, pathname *string, request map[string]interface{}, headers map[string]*string, runtime *util.RuntimeOptions) (_result map[string]interface{}, _err error) {
	_err = tea.Validate(runtime)
	if _err != nil {
		return _result, _err
	}
	_runtime := map[string]interface{}{
		"timeouted":          "retry",
		"readTimeout":        tea.IntValue(util.DefaultNumber(runtime.ReadTimeout, client.ReadTimeout)),
		"connectTimeout":     tea.IntValue(util.DefaultNumber(runtime.ConnectTimeout, client.ConnectTimeout)),
		"httpProxy":          tea.StringValue(util.DefaultString(runtime.HttpProxy, client.HttpProxy)),
		"httpsProxy":         tea.StringValue(util.DefaultString(runtime.HttpsProxy, client.HttpsProxy)),
		"noProxy":            tea.StringValue(util.DefaultString(runtime.NoProxy, client.NoProxy)),
		"maxIdleConns":       tea.IntValue(util.DefaultNumber(runtime.MaxIdleConns, client.MaxIdleConns)),
		"maxIdleTimeMillis":  tea.IntValue(client.MaxIdleTimeMillis),
		"keepAliveDuration":  tea.IntValue(client.KeepAliveDurationMillis),
		"maxRequests":        tea.IntValue(client.MaxRequests),
		"maxRequestsPerHost": tea.IntValue(client.MaxRequestsPerHost),
		"retry": map[string]interface{}{
			"retryable":   tea.BoolValue(runtime.Autoretry),
			"maxAttempts": tea.IntValue(util.DefaultNumber(runtime.MaxAttempts, tea.Int(3))),
		},
		"backoff": map[string]interface{}{
			"policy": tea.StringValue(util.DefaultString(runtime.BackoffPolicy, tea.String("no"))),
			"period": tea.IntValue(util.DefaultNumber(runtime.BackoffPeriod, tea.Int(1))),
		},
		"ignoreSSL": tea.BoolValue(runtime.IgnoreSSL),
	}

	_resp := make(map[string]interface{})
	for _retryTimes := 0; tea.BoolValue(tea.AllowRetry(_runtime["retry"], tea.Int(_retryTimes))); _retryTimes++ {
		if _retryTimes > 0 {
			_backoffTime := tea.GetBackoffTime(_runtime["backoff"], tea.Int(_retryTimes))
			if tea.IntValue(_backoffTime) > 0 {
				tea.Sleep(_backoffTime)
			}
		}

		_resp, _err = func() (map[string]interface{}, error) {
			request_ := tea.NewRequest()
			request_.Protocol = util.DefaultString(client.Protocol, protocol)
			request_.Method = method
			request_.Pathname = pathname
			request_.Query = map[string]*string{
				"method":           action,
				"version":          version,
				"sign_type":        tea.String("HmacSHA1"),
				"req_time":         antchainutil.GetTimestamp(),
				"req_msg_id":       antchainutil.GetNonce(),
				"access_key":       client.AccessKeyId,
				"base_sdk_version": tea.String("TeaSDK-2.0"),
				"sdk_version":      tea.String("1.28.23"),
				"_prod_code":       tea.String("BLOCKCHAIN"),
				"_prod_channel":    tea.String("undefined"),
			}
			if !tea.BoolValue(util.Empty(client.SecurityToken)) {
				request_.Query["security_token"] = client.SecurityToken
			}

			request_.Headers = tea.Merge(map[string]*string{
				"host":       util.DefaultString(client.Endpoint, tea.String("openapi.antchain.antgroup.com")),
				"user-agent": util.GetUserAgent(client.UserAgent),
			}, headers)
			tmp := util.AnyifyMapValue(rpcutil.Query(request))
			request_.Body = tea.ToReader(util.ToFormString(tmp))
			request_.Headers["content-type"] = tea.String("application/x-www-form-urlencoded")
			signedParam := tea.Merge(request_.Query,
				rpcutil.Query(request))
			request_.Query["sign"] = antchainutil.GetSignature(signedParam, client.AccessKeySecret)
			response_, _err := tea.DoRequest(request_, _runtime)
			if _err != nil {
				return _result, _err
			}
			raw, _err := util.ReadAsString(response_.Body)
			if _err != nil {
				return _result, _err
			}

			obj := util.ParseJSON(raw)
			res, _err := util.AssertAsMap(obj)
			if _err != nil {
				return _result, _err
			}

			resp, _err := util.AssertAsMap(res["response"])
			if _err != nil {
				return _result, _err
			}

			if tea.BoolValue(antchainutil.HasError(raw, client.AccessKeySecret)) {
				_err = tea.NewSDKError(map[string]interface{}{
					"message": resp["result_msg"],
					"data":    resp,
					"code":    resp["result_code"],
				})
				return _result, _err
			}

			_result = resp
			return _result, _err
		}()
		if !tea.BoolValue(tea.Retryable(_err)) {
			break
		}
	}

	return _resp, _err
}

/**
 * Description: 将用户自有账户导入到链上
 * Summary: 自有账户映射到链上
 */
func (client *Client) StartAccountMapping(request *StartAccountMappingRequest) (_result *StartAccountMappingResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartAccountMappingResponse{}
	_body, _err := client.StartAccountMappingEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 将用户自有账户导入到链上
 * Summary: 自有账户映射到链上
 */
func (client *Client) StartAccountMappingEx(request *StartAccountMappingRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartAccountMappingResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartAccountMappingResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.account.mapping.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 自有账户到链上账户的批量映射接口
 * Summary: 自有账户到链上账户的批量映射
 */
func (client *Client) BatchcreateAccountMapping(request *BatchcreateAccountMappingRequest) (_result *BatchcreateAccountMappingResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &BatchcreateAccountMappingResponse{}
	_body, _err := client.BatchcreateAccountMappingEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 自有账户到链上账户的批量映射接口
 * Summary: 自有账户到链上账户的批量映射
 */
func (client *Client) BatchcreateAccountMappingEx(request *BatchcreateAccountMappingRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *BatchcreateAccountMappingResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BatchcreateAccountMappingResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.account.mapping.batchcreate"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 为用户生成签名的接口
 * Summary: 为用户生成签名
 */
func (client *Client) StartAccountSignature(request *StartAccountSignatureRequest) (_result *StartAccountSignatureResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartAccountSignatureResponse{}
	_body, _err := client.StartAccountSignatureEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 为用户生成签名的接口
 * Summary: 为用户生成签名
 */
func (client *Client) StartAccountSignatureEx(request *StartAccountSignatureRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartAccountSignatureResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartAccountSignatureResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.account.signature.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询批量映射结果的接口
 * Summary: 查询批量映射的结果
 */
func (client *Client) QueryAccountMappingresult(request *QueryAccountMappingresultRequest) (_result *QueryAccountMappingresultResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryAccountMappingresultResponse{}
	_body, _err := client.QueryAccountMappingresultEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询批量映射结果的接口
 * Summary: 查询批量映射的结果
 */
func (client *Client) QueryAccountMappingresultEx(request *QueryAccountMappingresultRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryAccountMappingresultResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryAccountMappingresultResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.account.mappingresult.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询商户下账户在链上账号映射情况
 * Summary: 单个查询用户映射情况信息
 */
func (client *Client) QueryAccountMapping(request *QueryAccountMappingRequest) (_result *QueryAccountMappingResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryAccountMappingResponse{}
	_body, _err := client.QueryAccountMappingEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询商户下账户在链上账号映射情况
 * Summary: 单个查询用户映射情况信息
 */
func (client *Client) QueryAccountMappingEx(request *QueryAccountMappingRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryAccountMappingResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryAccountMappingResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.account.mapping.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 批量查询商户下已映射的账户信息
 * Summary: 批量查询商户下已映射的账户信息
 */
func (client *Client) BatchqueryAccountMapping(request *BatchqueryAccountMappingRequest) (_result *BatchqueryAccountMappingResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &BatchqueryAccountMappingResponse{}
	_body, _err := client.BatchqueryAccountMappingEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 批量查询商户下已映射的账户信息
 * Summary: 批量查询商户下已映射的账户信息
 */
func (client *Client) BatchqueryAccountMappingEx(request *BatchqueryAccountMappingRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *BatchqueryAccountMappingResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BatchqueryAccountMappingResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.account.mapping.batchquery"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 用户信息存储
 * Summary: 用户信息存储
 */
func (client *Client) CreateAccountMappingInfo(request *CreateAccountMappingInfoRequest) (_result *CreateAccountMappingInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateAccountMappingInfoResponse{}
	_body, _err := client.CreateAccountMappingInfoEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 用户信息存储
 * Summary: 用户信息存储
 */
func (client *Client) CreateAccountMappingInfoEx(request *CreateAccountMappingInfoRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateAccountMappingInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateAccountMappingInfoResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.account.mapping.info.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 批量创建用户信息
 * Summary: 批量创建用户信息
 */
func (client *Client) BatchcreateAccountMappingInfo(request *BatchcreateAccountMappingInfoRequest) (_result *BatchcreateAccountMappingInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &BatchcreateAccountMappingInfoResponse{}
	_body, _err := client.BatchcreateAccountMappingInfoEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 批量创建用户信息
 * Summary: 批量创建用户信息
 */
func (client *Client) BatchcreateAccountMappingInfoEx(request *BatchcreateAccountMappingInfoRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *BatchcreateAccountMappingInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BatchcreateAccountMappingInfoResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.account.mapping.info.batchcreate"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取用户的密钥对。
公钥为明文公钥
私钥为密文，需要用户在本地再做一次解密才能得到真正的私钥
 * Summary: 获取用户biz key
*/
func (client *Client) GetAkdfUserbizkey(request *GetAkdfUserbizkeyRequest) (_result *GetAkdfUserbizkeyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetAkdfUserbizkeyResponse{}
	_body, _err := client.GetAkdfUserbizkeyEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取用户的密钥对。
公钥为明文公钥
私钥为密文，需要用户在本地再做一次解密才能得到真正的私钥
 * Summary: 获取用户biz key
*/
func (client *Client) GetAkdfUserbizkeyEx(request *GetAkdfUserbizkeyRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetAkdfUserbizkeyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetAkdfUserbizkeyResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.akdf.userbizkey.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 列出用户在某条链上所有的密钥
 * Summary: 列出密钥
 */
func (client *Client) ListAkdfUserbizkey(request *ListAkdfUserbizkeyRequest) (_result *ListAkdfUserbizkeyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListAkdfUserbizkeyResponse{}
	_body, _err := client.ListAkdfUserbizkeyEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 列出用户在某条链上所有的密钥
 * Summary: 列出密钥
 */
func (client *Client) ListAkdfUserbizkeyEx(request *ListAkdfUserbizkeyRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListAkdfUserbizkeyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListAkdfUserbizkeyResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.akdf.userbizkey.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 根据用户选择的规则和订单类型，生成instanceId给commondriver
 * Summary: 下单
 */
func (client *Client) CheckBlockchainOrder(request *CheckBlockchainOrderRequest) (_result *CheckBlockchainOrderResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CheckBlockchainOrderResponse{}
	_body, _err := client.CheckBlockchainOrderEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 根据用户选择的规则和订单类型，生成instanceId给commondriver
 * Summary: 下单
 */
func (client *Client) CheckBlockchainOrderEx(request *CheckBlockchainOrderRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CheckBlockchainOrderResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CheckBlockchainOrderResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.blockchain.order.check"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 下单前校验
 * Summary: 下单前校验
 */
func (client *Client) VerifyBlockchainOrder(request *VerifyBlockchainOrderRequest) (_result *VerifyBlockchainOrderResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &VerifyBlockchainOrderResponse{}
	_body, _err := client.VerifyBlockchainOrderEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 下单前校验
 * Summary: 下单前校验
 */
func (client *Client) VerifyBlockchainOrderEx(request *VerifyBlockchainOrderRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *VerifyBlockchainOrderResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &VerifyBlockchainOrderResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.blockchain.order.verify"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 退款
 * Summary: 退款
 */
func (client *Client) InvalidateBlockchainOrder(request *InvalidateBlockchainOrderRequest) (_result *InvalidateBlockchainOrderResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &InvalidateBlockchainOrderResponse{}
	_body, _err := client.InvalidateBlockchainOrderEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 退款
 * Summary: 退款
 */
func (client *Client) InvalidateBlockchainOrderEx(request *InvalidateBlockchainOrderRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *InvalidateBlockchainOrderResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &InvalidateBlockchainOrderResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.blockchain.order.invalidate"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 删除物理资源
 * Summary: 删除物理资源
 */
func (client *Client) ReleaseBlockchainOrderPhysical(request *ReleaseBlockchainOrderPhysicalRequest) (_result *ReleaseBlockchainOrderPhysicalResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ReleaseBlockchainOrderPhysicalResponse{}
	_body, _err := client.ReleaseBlockchainOrderPhysicalEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 删除物理资源
 * Summary: 删除物理资源
 */
func (client *Client) ReleaseBlockchainOrderPhysicalEx(request *ReleaseBlockchainOrderPhysicalRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ReleaseBlockchainOrderPhysicalResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ReleaseBlockchainOrderPhysicalResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.blockchain.order.physical.release"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 逻辑资源删除
 * Summary: 逻辑资源删除
 */
func (client *Client) ReleaseBlockchainOrderLogical(request *ReleaseBlockchainOrderLogicalRequest) (_result *ReleaseBlockchainOrderLogicalResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ReleaseBlockchainOrderLogicalResponse{}
	_body, _err := client.ReleaseBlockchainOrderLogicalEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 逻辑资源删除
 * Summary: 逻辑资源删除
 */
func (client *Client) ReleaseBlockchainOrderLogicalEx(request *ReleaseBlockchainOrderLogicalRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ReleaseBlockchainOrderLogicalResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ReleaseBlockchainOrderLogicalResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.blockchain.order.logical.release"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 资源检查
 * Summary: 资源检查
 */
func (client *Client) CheckBlockchainResource(request *CheckBlockchainResourceRequest) (_result *CheckBlockchainResourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CheckBlockchainResourceResponse{}
	_body, _err := client.CheckBlockchainResourceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 资源检查
 * Summary: 资源检查
 */
func (client *Client) CheckBlockchainResourceEx(request *CheckBlockchainResourceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CheckBlockchainResourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CheckBlockchainResourceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.blockchain.resource.check"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 补齐商品信息
 * Summary: 补齐商品信息
 */
func (client *Client) ConfirmBlockchainOrder(request *ConfirmBlockchainOrderRequest) (_result *ConfirmBlockchainOrderResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ConfirmBlockchainOrderResponse{}
	_body, _err := client.ConfirmBlockchainOrderEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 补齐商品信息
 * Summary: 补齐商品信息
 */
func (client *Client) ConfirmBlockchainOrderEx(request *ConfirmBlockchainOrderRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ConfirmBlockchainOrderResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ConfirmBlockchainOrderResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.blockchain.order.confirm"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 检查
 * Summary: 检查
 */
func (client *Client) ConnectBlockchainOrder(request *ConnectBlockchainOrderRequest) (_result *ConnectBlockchainOrderResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ConnectBlockchainOrderResponse{}
	_body, _err := client.ConnectBlockchainOrderEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 检查
 * Summary: 检查
 */
func (client *Client) ConnectBlockchainOrderEx(request *ConnectBlockchainOrderRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ConnectBlockchainOrderResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ConnectBlockchainOrderResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.blockchain.order.connect"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 阿里云区块链订单创建接口
 * Summary: 阿里云区块链订单创建接口
 */
func (client *Client) ExecBlockchainOrder(request *ExecBlockchainOrderRequest) (_result *ExecBlockchainOrderResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExecBlockchainOrderResponse{}
	_body, _err := client.ExecBlockchainOrderEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 阿里云区块链订单创建接口
 * Summary: 阿里云区块链订单创建接口
 */
func (client *Client) ExecBlockchainOrderEx(request *ExecBlockchainOrderRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExecBlockchainOrderResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ExecBlockchainOrderResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.blockchain.order.exec"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建联盟
 * Summary: 创建联盟
 */
func (client *Client) CreateUnionUnion(request *CreateUnionUnionRequest) (_result *CreateUnionUnionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateUnionUnionResponse{}
	_body, _err := client.CreateUnionUnionEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建联盟
 * Summary: 创建联盟
 */
func (client *Client) CreateUnionUnionEx(request *CreateUnionUnionRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateUnionUnionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateUnionUnionResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.union.union.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 删除联盟
 * Summary: 删除联盟
 */
func (client *Client) DeleteUnionUnion(request *DeleteUnionUnionRequest) (_result *DeleteUnionUnionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteUnionUnionResponse{}
	_body, _err := client.DeleteUnionUnionEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 删除联盟
 * Summary: 删除联盟
 */
func (client *Client) DeleteUnionUnionEx(request *DeleteUnionUnionRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteUnionUnionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteUnionUnionResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.union.union.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 联盟更新
 * Summary: 联盟更新
 */
func (client *Client) UpdateUnionUnion(request *UpdateUnionUnionRequest) (_result *UpdateUnionUnionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateUnionUnionResponse{}
	_body, _err := client.UpdateUnionUnionEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 联盟更新
 * Summary: 联盟更新
 */
func (client *Client) UpdateUnionUnionEx(request *UpdateUnionUnionRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateUnionUnionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateUnionUnionResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.union.union.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 联盟查询
 * Summary: 联盟查询
 */
func (client *Client) QueryUnionUnion(request *QueryUnionUnionRequest) (_result *QueryUnionUnionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryUnionUnionResponse{}
	_body, _err := client.QueryUnionUnionEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 联盟查询
 * Summary: 联盟查询
 */
func (client *Client) QueryUnionUnionEx(request *QueryUnionUnionRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryUnionUnionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryUnionUnionResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.union.union.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 联盟邀请用户
 * Summary: 联盟邀请用户
 */
func (client *Client) ApplyUnionMember(request *ApplyUnionMemberRequest) (_result *ApplyUnionMemberResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ApplyUnionMemberResponse{}
	_body, _err := client.ApplyUnionMemberEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 联盟邀请用户
 * Summary: 联盟邀请用户
 */
func (client *Client) ApplyUnionMemberEx(request *ApplyUnionMemberRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ApplyUnionMemberResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ApplyUnionMemberResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.union.member.apply"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 阿里云联盟成员加入
 * Summary: 阿里云联盟成员加入
 */
func (client *Client) ConfirmUnionMember(request *ConfirmUnionMemberRequest) (_result *ConfirmUnionMemberResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ConfirmUnionMemberResponse{}
	_body, _err := client.ConfirmUnionMemberEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 阿里云联盟成员加入
 * Summary: 阿里云联盟成员加入
 */
func (client *Client) ConfirmUnionMemberEx(request *ConfirmUnionMemberRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ConfirmUnionMemberResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ConfirmUnionMemberResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.union.member.confirm"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取联盟内的蚂蚁区块链列表
 * Summary: 获取联盟内的蚂蚁区块链列表
 */
func (client *Client) QueryUnionChain(request *QueryUnionChainRequest) (_result *QueryUnionChainResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryUnionChainResponse{}
	_body, _err := client.QueryUnionChainEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取联盟内的蚂蚁区块链列表
 * Summary: 获取联盟内的蚂蚁区块链列表
 */
func (client *Client) QueryUnionChainEx(request *QueryUnionChainRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryUnionChainResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryUnionChainResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.union.chain.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取联盟成员列表
 * Summary: 获取联盟成员列表
 */
func (client *Client) QueryUnionMember(request *QueryUnionMemberRequest) (_result *QueryUnionMemberResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryUnionMemberResponse{}
	_body, _err := client.QueryUnionMemberEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取联盟成员列表
 * Summary: 获取联盟成员列表
 */
func (client *Client) QueryUnionMemberEx(request *QueryUnionMemberRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryUnionMemberResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryUnionMemberResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.union.member.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 更新联盟成员属性
 * Summary: 更新联盟成员属性
 */
func (client *Client) UpdateUnionMember(request *UpdateUnionMemberRequest) (_result *UpdateUnionMemberResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateUnionMemberResponse{}
	_body, _err := client.UpdateUnionMemberEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 更新联盟成员属性
 * Summary: 更新联盟成员属性
 */
func (client *Client) UpdateUnionMemberEx(request *UpdateUnionMemberRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateUnionMemberResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateUnionMemberResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.union.member.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 更新区块链的名称
 * Summary: 更新区块链的名称
 */
func (client *Client) UpdateChainNameAnt(request *UpdateChainNameAntRequest) (_result *UpdateChainNameAntResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateChainNameAntResponse{}
	_body, _err := client.UpdateChainNameAntEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 更新区块链的名称
 * Summary: 更新区块链的名称
 */
func (client *Client) UpdateChainNameAntEx(request *UpdateChainNameAntRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateChainNameAntResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateChainNameAntResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.chain.name.ant.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 手工创建区块链证书
 * Summary: 手工创建区块链证书
 */
func (client *Client) CreateChainCertAnt(request *CreateChainCertAntRequest) (_result *CreateChainCertAntResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateChainCertAntResponse{}
	_body, _err := client.CreateChainCertAntEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 手工创建区块链证书
 * Summary: 手工创建区块链证书
 */
func (client *Client) CreateChainCertAntEx(request *CreateChainCertAntRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateChainCertAntResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateChainCertAntResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.chain.cert.ant.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 自动申请区块链证书
 * Summary: 自动申请区块链证书
 */
func (client *Client) ApplyChainCertAnt(request *ApplyChainCertAntRequest) (_result *ApplyChainCertAntResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ApplyChainCertAntResponse{}
	_body, _err := client.ApplyChainCertAntEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 自动申请区块链证书
 * Summary: 自动申请区块链证书
 */
func (client *Client) ApplyChainCertAntEx(request *ApplyChainCertAntRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ApplyChainCertAntResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ApplyChainCertAntResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.chain.cert.ant.apply"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 人工申请区块链证书
 * Summary: 人工申请区块链证书
 */
func (client *Client) CreateChainPublicCert(request *CreateChainPublicCertRequest) (_result *CreateChainPublicCertResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateChainPublicCertResponse{}
	_body, _err := client.CreateChainPublicCertEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 人工申请区块链证书
 * Summary: 人工申请区块链证书
 */
func (client *Client) CreateChainPublicCertEx(request *CreateChainPublicCertRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateChainPublicCertResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateChainPublicCertResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.chain.public.cert.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 自动创建区块链证书
 * Summary: 自动创建区块链证书
 */
func (client *Client) ApplyChainPublicCert(request *ApplyChainPublicCertRequest) (_result *ApplyChainPublicCertResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ApplyChainPublicCertResponse{}
	_body, _err := client.ApplyChainPublicCertEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 自动创建区块链证书
 * Summary: 自动创建区块链证书
 */
func (client *Client) ApplyChainPublicCertEx(request *ApplyChainPublicCertRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ApplyChainPublicCertResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ApplyChainPublicCertResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.chain.public.cert.apply"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 免费体验链重置证书
 * Summary: 免费体验链重置证书
 */
func (client *Client) ReinitChainPublicCert(request *ReinitChainPublicCertRequest) (_result *ReinitChainPublicCertResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ReinitChainPublicCertResponse{}
	_body, _err := client.ReinitChainPublicCertEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 免费体验链重置证书
 * Summary: 免费体验链重置证书
 */
func (client *Client) ReinitChainPublicCertEx(request *ReinitChainPublicCertRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ReinitChainPublicCertResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ReinitChainPublicCertResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.chain.public.cert.reinit"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 免费体验链创建账户
 * Summary: 免费体验链创建账户
 */
func (client *Client) CreateChainPublicAccount(request *CreateChainPublicAccountRequest) (_result *CreateChainPublicAccountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateChainPublicAccountResponse{}
	_body, _err := client.CreateChainPublicAccountEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 免费体验链创建账户
 * Summary: 免费体验链创建账户
 */
func (client *Client) CreateChainPublicAccountEx(request *CreateChainPublicAccountRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateChainPublicAccountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateChainPublicAccountResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.chain.public.account.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 自动创建链上账户
 * Summary: 自动创建链上账户
 */
func (client *Client) ApplyChainPublicAccount(request *ApplyChainPublicAccountRequest) (_result *ApplyChainPublicAccountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ApplyChainPublicAccountResponse{}
	_body, _err := client.ApplyChainPublicAccountEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 自动创建链上账户
 * Summary: 自动创建链上账户
 */
func (client *Client) ApplyChainPublicAccountEx(request *ApplyChainPublicAccountRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ApplyChainPublicAccountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ApplyChainPublicAccountResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.chain.public.account.apply"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 免费体验链查询
 * Summary: 免费体验链查询
 */
func (client *Client) QueryChainPublic(request *QueryChainPublicRequest) (_result *QueryChainPublicResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryChainPublicResponse{}
	_body, _err := client.QueryChainPublicEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 免费体验链查询
 * Summary: 免费体验链查询
 */
func (client *Client) QueryChainPublicEx(request *QueryChainPublicRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryChainPublicResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryChainPublicResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.chain.public.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 免费体验链证书下载
 * Summary: 免费体验链证书下载
 */
func (client *Client) DownloadChainPublicCert(request *DownloadChainPublicCertRequest) (_result *DownloadChainPublicCertResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DownloadChainPublicCertResponse{}
	_body, _err := client.DownloadChainPublicCertEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 免费体验链证书下载
 * Summary: 免费体验链证书下载
 */
func (client *Client) DownloadChainPublicCertEx(request *DownloadChainPublicCertRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DownloadChainPublicCertResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DownloadChainPublicCertResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.chain.public.cert.download"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 手工创建账户
 * Summary: 手工创建账户
 */
func (client *Client) CreateChainAccountAnt(request *CreateChainAccountAntRequest) (_result *CreateChainAccountAntResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateChainAccountAntResponse{}
	_body, _err := client.CreateChainAccountAntEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 手工创建账户
 * Summary: 手工创建账户
 */
func (client *Client) CreateChainAccountAntEx(request *CreateChainAccountAntRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateChainAccountAntResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateChainAccountAntResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.chain.account.ant.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 自动创建账户
 * Summary: 自动创建账户
 */
func (client *Client) ApplyChainAccountAnt(request *ApplyChainAccountAntRequest) (_result *ApplyChainAccountAntResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ApplyChainAccountAntResponse{}
	_body, _err := client.ApplyChainAccountAntEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 自动创建账户
 * Summary: 自动创建账户
 */
func (client *Client) ApplyChainAccountAntEx(request *ApplyChainAccountAntRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ApplyChainAccountAntResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ApplyChainAccountAntResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.chain.account.ant.apply"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询链上账户列表
 * Summary: 查询链上账户列表
 */
func (client *Client) QueryChainAccountAnt(request *QueryChainAccountAntRequest) (_result *QueryChainAccountAntResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryChainAccountAntResponse{}
	_body, _err := client.QueryChainAccountAntEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询链上账户列表
 * Summary: 查询链上账户列表
 */
func (client *Client) QueryChainAccountAntEx(request *QueryChainAccountAntRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryChainAccountAntResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryChainAccountAntResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.chain.account.ant.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 区块链证书下载
 * Summary: 区块链证书下载
 */
func (client *Client) DownloadChainCertAnt(request *DownloadChainCertAntRequest) (_result *DownloadChainCertAntResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DownloadChainCertAntResponse{}
	_body, _err := client.DownloadChainCertAntEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 区块链证书下载
 * Summary: 区块链证书下载
 */
func (client *Client) DownloadChainCertAntEx(request *DownloadChainCertAntRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DownloadChainCertAntResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DownloadChainCertAntResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.chain.cert.ant.download"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 阿里云链节点查询
 * Summary: 阿里云链节点查询
 */
func (client *Client) QueryChainNodeAnt(request *QueryChainNodeAntRequest) (_result *QueryChainNodeAntResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryChainNodeAntResponse{}
	_body, _err := client.QueryChainNodeAntEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 阿里云链节点查询
 * Summary: 阿里云链节点查询
 */
func (client *Client) QueryChainNodeAntEx(request *QueryChainNodeAntRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryChainNodeAntResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryChainNodeAntResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.chain.node.ant.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 区块链链上账户冻结
 * Summary: 区块链链上账户冻结
 */
func (client *Client) FreezeChainAccountAnt(request *FreezeChainAccountAntRequest) (_result *FreezeChainAccountAntResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &FreezeChainAccountAntResponse{}
	_body, _err := client.FreezeChainAccountAntEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 区块链链上账户冻结
 * Summary: 区块链链上账户冻结
 */
func (client *Client) FreezeChainAccountAntEx(request *FreezeChainAccountAntRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *FreezeChainAccountAntResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &FreezeChainAccountAntResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.chain.account.ant.freeze"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 蚂蚁区块链账户解冻
 * Summary: 蚂蚁区块链账户解冻
 */
func (client *Client) UnfreezeChainAccountAnt(request *UnfreezeChainAccountAntRequest) (_result *UnfreezeChainAccountAntResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UnfreezeChainAccountAntResponse{}
	_body, _err := client.UnfreezeChainAccountAntEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 蚂蚁区块链账户解冻
 * Summary: 蚂蚁区块链账户解冻
 */
func (client *Client) UnfreezeChainAccountAntEx(request *UnfreezeChainAccountAntRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UnfreezeChainAccountAntResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UnfreezeChainAccountAntResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.chain.account.ant.unfreeze"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 区块链证书重置
 * Summary: 区块链证书重置
 */
func (client *Client) ReinitChainCertAnt(request *ReinitChainCertAntRequest) (_result *ReinitChainCertAntResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ReinitChainCertAntResponse{}
	_body, _err := client.ReinitChainCertAntEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 区块链证书重置
 * Summary: 区块链证书重置
 */
func (client *Client) ReinitChainCertAntEx(request *ReinitChainCertAntRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ReinitChainCertAntResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ReinitChainCertAntResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.chain.cert.ant.reinit"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 区块链证书查询
 * Summary: 区块链证书查询
 */
func (client *Client) QueryChainCertAnt(request *QueryChainCertAntRequest) (_result *QueryChainCertAntResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryChainCertAntResponse{}
	_body, _err := client.QueryChainCertAntEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 区块链证书查询
 * Summary: 区块链证书查询
 */
func (client *Client) QueryChainCertAntEx(request *QueryChainCertAntRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryChainCertAntResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryChainCertAntResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.chain.cert.ant.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 阿里云浏览器信息查询
 * Summary: 阿里云浏览器信息查询
 */
func (client *Client) QueryChainBrowserInfo(request *QueryChainBrowserInfoRequest) (_result *QueryChainBrowserInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryChainBrowserInfoResponse{}
	_body, _err := client.QueryChainBrowserInfoEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 阿里云浏览器信息查询
 * Summary: 阿里云浏览器信息查询
 */
func (client *Client) QueryChainBrowserInfoEx(request *QueryChainBrowserInfoRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryChainBrowserInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryChainBrowserInfoResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.chain.browser.info.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 阿里云最新区块链信息查询
 * Summary: 阿里云最新区块链信息查询
 */
func (client *Client) QueryChainBrowserBlocks(request *QueryChainBrowserBlocksRequest) (_result *QueryChainBrowserBlocksResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryChainBrowserBlocksResponse{}
	_body, _err := client.QueryChainBrowserBlocksEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 阿里云最新区块链信息查询
 * Summary: 阿里云最新区块链信息查询
 */
func (client *Client) QueryChainBrowserBlocksEx(request *QueryChainBrowserBlocksRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryChainBrowserBlocksResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryChainBrowserBlocksResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.chain.browser.blocks.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 阿里云最新交易查询
 * Summary: 阿里云最新交易查询
 */
func (client *Client) QueryChainBrowserTransactions(request *QueryChainBrowserTransactionsRequest) (_result *QueryChainBrowserTransactionsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryChainBrowserTransactionsResponse{}
	_body, _err := client.QueryChainBrowserTransactionsEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 阿里云最新交易查询
 * Summary: 阿里云最新交易查询
 */
func (client *Client) QueryChainBrowserTransactionsEx(request *QueryChainBrowserTransactionsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryChainBrowserTransactionsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryChainBrowserTransactionsResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.chain.browser.transactions.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 阿里云最新区块交易信息查询
 * Summary: 阿里云最新区块交易信息查询
 */
func (client *Client) BatchqueryChainBrowserTransaction(request *BatchqueryChainBrowserTransactionRequest) (_result *BatchqueryChainBrowserTransactionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &BatchqueryChainBrowserTransactionResponse{}
	_body, _err := client.BatchqueryChainBrowserTransactionEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 阿里云最新区块交易信息查询
 * Summary: 阿里云最新区块交易信息查询
 */
func (client *Client) BatchqueryChainBrowserTransactionEx(request *BatchqueryChainBrowserTransactionRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *BatchqueryChainBrowserTransactionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BatchqueryChainBrowserTransactionResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.chain.browser.transaction.batchquery"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 阿里云区块链交易收据查询
 * Summary: 阿里云区块链交易收据查询
 */
func (client *Client) QueryChainBrowserReceipt(request *QueryChainBrowserReceiptRequest) (_result *QueryChainBrowserReceiptResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryChainBrowserReceiptResponse{}
	_body, _err := client.QueryChainBrowserReceiptEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 阿里云区块链交易收据查询
 * Summary: 阿里云区块链交易收据查询
 */
func (client *Client) QueryChainBrowserReceiptEx(request *QueryChainBrowserReceiptRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryChainBrowserReceiptResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryChainBrowserReceiptResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.chain.browser.receipt.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 阿里云区块链交易查询
 * Summary: 阿里云区块链交易查询
 */
func (client *Client) QueryChainBrowserTransaction(request *QueryChainBrowserTransactionRequest) (_result *QueryChainBrowserTransactionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryChainBrowserTransactionResponse{}
	_body, _err := client.QueryChainBrowserTransactionEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 阿里云区块链交易查询
 * Summary: 阿里云区块链交易查询
 */
func (client *Client) QueryChainBrowserTransactionEx(request *QueryChainBrowserTransactionRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryChainBrowserTransactionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryChainBrowserTransactionResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.chain.browser.transaction.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 阿里云区块链的区块信息
 * Summary: 阿里云区块链的区块信息
 */
func (client *Client) QueryChainBrowserBlock(request *QueryChainBrowserBlockRequest) (_result *QueryChainBrowserBlockResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryChainBrowserBlockResponse{}
	_body, _err := client.QueryChainBrowserBlockEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 阿里云区块链的区块信息
 * Summary: 阿里云区块链的区块信息
 */
func (client *Client) QueryChainBrowserBlockEx(request *QueryChainBrowserBlockRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryChainBrowserBlockResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryChainBrowserBlockResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.chain.browser.block.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 阿里云售卖区信息查询
 * Summary: 阿里云售卖区信息查询
 */
func (client *Client) QueryChainResouceRegion(request *QueryChainResouceRegionRequest) (_result *QueryChainResouceRegionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryChainResouceRegionResponse{}
	_body, _err := client.QueryChainResouceRegionEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 阿里云售卖区信息查询
 * Summary: 阿里云售卖区信息查询
 */
func (client *Client) QueryChainResouceRegionEx(request *QueryChainResouceRegionRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryChainResouceRegionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryChainResouceRegionResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.chain.resouce.region.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 阿里云资源类型查询
 * Summary: 阿里云资源类型查询
 */
func (client *Client) QueryChainResourceType(request *QueryChainResourceTypeRequest) (_result *QueryChainResourceTypeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryChainResourceTypeResponse{}
	_body, _err := client.QueryChainResourceTypeEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 阿里云资源类型查询
 * Summary: 阿里云资源类型查询
 */
func (client *Client) QueryChainResourceTypeEx(request *QueryChainResourceTypeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryChainResourceTypeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryChainResourceTypeResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.chain.resource.type.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 阿里云区块链售卖资源查询
 * Summary: 阿里云区块链售卖资源查询
 */
func (client *Client) QueryChainResouceSale(request *QueryChainResouceSaleRequest) (_result *QueryChainResouceSaleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryChainResouceSaleResponse{}
	_body, _err := client.QueryChainResouceSaleEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 阿里云区块链售卖资源查询
 * Summary: 阿里云区块链售卖资源查询
 */
func (client *Client) QueryChainResouceSaleEx(request *QueryChainResouceSaleRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryChainResouceSaleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryChainResouceSaleResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.chain.resouce.sale.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 阿里云区块链配置信息查询
 * Summary: 阿里云区块链配置信息查询
 */
func (client *Client) QueryChainResourceConfig(request *QueryChainResourceConfigRequest) (_result *QueryChainResourceConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryChainResourceConfigResponse{}
	_body, _err := client.QueryChainResourceConfigEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 阿里云区块链配置信息查询
 * Summary: 阿里云区块链配置信息查询
 */
func (client *Client) QueryChainResourceConfigEx(request *QueryChainResourceConfigRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryChainResourceConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryChainResourceConfigResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.chain.resource.config.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 阿里云区块链交易统计信息
 * Summary: 阿里云区块链交易统计信息
 */
func (client *Client) QueryChainBrowserStatistics(request *QueryChainBrowserStatisticsRequest) (_result *QueryChainBrowserStatisticsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryChainBrowserStatisticsResponse{}
	_body, _err := client.QueryChainBrowserStatisticsEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 阿里云区块链交易统计信息
 * Summary: 阿里云区块链交易统计信息
 */
func (client *Client) QueryChainBrowserStatisticsEx(request *QueryChainBrowserStatisticsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryChainBrowserStatisticsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryChainBrowserStatisticsResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.chain.browser.statistics.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 阿里云区块链交易执行交易
 * Summary: 阿里云区块链交易执行交易
 */
func (client *Client) ExecChainPublicContract(request *ExecChainPublicContractRequest) (_result *ExecChainPublicContractResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExecChainPublicContractResponse{}
	_body, _err := client.ExecChainPublicContractEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 阿里云区块链交易执行交易
 * Summary: 阿里云区块链交易执行交易
 */
func (client *Client) ExecChainPublicContractEx(request *ExecChainPublicContractRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExecChainPublicContractResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ExecChainPublicContractResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.chain.public.contract.exec"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 阿里云免费体验链的cloudIde查询
 * Summary: 阿里云免费体验链的cloudIde查询
 */
func (client *Client) QueryChainPublicIde(request *QueryChainPublicIdeRequest) (_result *QueryChainPublicIdeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryChainPublicIdeResponse{}
	_body, _err := client.QueryChainPublicIdeEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 阿里云免费体验链的cloudIde查询
 * Summary: 阿里云免费体验链的cloudIde查询
 */
func (client *Client) QueryChainPublicIdeEx(request *QueryChainPublicIdeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryChainPublicIdeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryChainPublicIdeResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.chain.public.ide.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 阿里云免费体验链合约文件和内容查询
 * Summary: 阿里云免费体验链合约文件和内容查询
 */
func (client *Client) QueryChainPublicContent(request *QueryChainPublicContentRequest) (_result *QueryChainPublicContentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryChainPublicContentResponse{}
	_body, _err := client.QueryChainPublicContentEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 阿里云免费体验链合约文件和内容查询
 * Summary: 阿里云免费体验链合约文件和内容查询
 */
func (client *Client) QueryChainPublicContentEx(request *QueryChainPublicContentRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryChainPublicContentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryChainPublicContentResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.chain.public.content.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 阿里云合约工程创建
 * Summary: 阿里云合约工程创建
 */
func (client *Client) CreateChainContractProject(request *CreateChainContractProjectRequest) (_result *CreateChainContractProjectResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateChainContractProjectResponse{}
	_body, _err := client.CreateChainContractProjectEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 阿里云合约工程创建
 * Summary: 阿里云合约工程创建
 */
func (client *Client) CreateChainContractProjectEx(request *CreateChainContractProjectRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateChainContractProjectResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateChainContractProjectResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.chain.contract.project.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 阿里云合约工程删除
 * Summary: 阿里云合约工程删除
 */
func (client *Client) DeleteChainContractProject(request *DeleteChainContractProjectRequest) (_result *DeleteChainContractProjectResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteChainContractProjectResponse{}
	_body, _err := client.DeleteChainContractProjectEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 阿里云合约工程删除
 * Summary: 阿里云合约工程删除
 */
func (client *Client) DeleteChainContractProjectEx(request *DeleteChainContractProjectRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteChainContractProjectResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteChainContractProjectResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.chain.contract.project.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 复制阿里云合约工程
 * Summary: 复制阿里云合约工程
 */
func (client *Client) CloneChainContractProject(request *CloneChainContractProjectRequest) (_result *CloneChainContractProjectResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CloneChainContractProjectResponse{}
	_body, _err := client.CloneChainContractProjectEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 复制阿里云合约工程
 * Summary: 复制阿里云合约工程
 */
func (client *Client) CloneChainContractProjectEx(request *CloneChainContractProjectRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CloneChainContractProjectResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CloneChainContractProjectResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.chain.contract.project.clone"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 阿里云合约工程信息查询
 * Summary: 阿里云合约工程信息查询
 */
func (client *Client) QueryChainContractProject(request *QueryChainContractProjectRequest) (_result *QueryChainContractProjectResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryChainContractProjectResponse{}
	_body, _err := client.QueryChainContractProjectEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 阿里云合约工程信息查询
 * Summary: 阿里云合约工程信息查询
 */
func (client *Client) QueryChainContractProjectEx(request *QueryChainContractProjectRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryChainContractProjectResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryChainContractProjectResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.chain.contract.project.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 复制阿里云合约工程
 * Summary: 复制阿里云合约工程
 */
func (client *Client) RetryChainContractProject(request *RetryChainContractProjectRequest) (_result *RetryChainContractProjectResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &RetryChainContractProjectResponse{}
	_body, _err := client.RetryChainContractProjectEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 复制阿里云合约工程
 * Summary: 复制阿里云合约工程
 */
func (client *Client) RetryChainContractProjectEx(request *RetryChainContractProjectRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *RetryChainContractProjectResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &RetryChainContractProjectResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.chain.contract.project.retry"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 更新阿里云区块链的合约工程
 * Summary: 更新阿里云区块链的合约工程
 */
func (client *Client) UpdateChainContractProject(request *UpdateChainContractProjectRequest) (_result *UpdateChainContractProjectResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateChainContractProjectResponse{}
	_body, _err := client.UpdateChainContractProjectEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 更新阿里云区块链的合约工程
 * Summary: 更新阿里云区块链的合约工程
 */
func (client *Client) UpdateChainContractProjectEx(request *UpdateChainContractProjectRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateChainContractProjectResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateChainContractProjectResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.chain.contract.project.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建合约文件内容
 * Summary: 创建合约文件内容
 */
func (client *Client) CreateChainContractContent(request *CreateChainContractContentRequest) (_result *CreateChainContractContentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateChainContractContentResponse{}
	_body, _err := client.CreateChainContractContentEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建合约文件内容
 * Summary: 创建合约文件内容
 */
func (client *Client) CreateChainContractContentEx(request *CreateChainContractContentRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateChainContractContentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateChainContractContentResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.chain.contract.content.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 更新阿里云合约文件内容
 * Summary: 更新阿里云合约文件内容
 */
func (client *Client) UpdateChainContractContent(request *UpdateChainContractContentRequest) (_result *UpdateChainContractContentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateChainContractContentResponse{}
	_body, _err := client.UpdateChainContractContentEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 更新阿里云合约文件内容
 * Summary: 更新阿里云合约文件内容
 */
func (client *Client) UpdateChainContractContentEx(request *UpdateChainContractContentRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateChainContractContentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateChainContractContentResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.chain.contract.content.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 阿里云合约文件信息查询
 * Summary: 阿里云合约文件信息查询
 */
func (client *Client) QueryChainContractContent(request *QueryChainContractContentRequest) (_result *QueryChainContractContentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryChainContractContentResponse{}
	_body, _err := client.QueryChainContractContentEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 阿里云合约文件信息查询
 * Summary: 阿里云合约文件信息查询
 */
func (client *Client) QueryChainContractContentEx(request *QueryChainContractContentRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryChainContractContentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryChainContractContentResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.chain.contract.content.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 阿里云区块链合约执行接口
 * Summary: 阿里云区块链合约执行
 */
func (client *Client) ExecChainContract(request *ExecChainContractRequest) (_result *ExecChainContractResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExecChainContractResponse{}
	_body, _err := client.ExecChainContractEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 阿里云区块链合约执行接口
 * Summary: 阿里云区块链合约执行
 */
func (client *Client) ExecChainContractEx(request *ExecChainContractRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExecChainContractResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ExecChainContractResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.chain.contract.exec"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 阿里云区块链CloudIde配置查询
 * Summary: 阿里云区块链CloudIde配置查询
 */
func (client *Client) QueryChainIde(request *QueryChainIdeRequest) (_result *QueryChainIdeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryChainIdeResponse{}
	_body, _err := client.QueryChainIdeEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 阿里云区块链CloudIde配置查询
 * Summary: 阿里云区块链CloudIde配置查询
 */
func (client *Client) QueryChainIdeEx(request *QueryChainIdeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryChainIdeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryChainIdeResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.chain.ide.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 阿里云区块链合约文件删除
 * Summary: 阿里云区块链合约文件删除
 */
func (client *Client) DeleteChainContractContent(request *DeleteChainContractContentRequest) (_result *DeleteChainContractContentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteChainContractContentResponse{}
	_body, _err := client.DeleteChainContractContentEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 阿里云区块链合约文件删除
 * Summary: 阿里云区块链合约文件删除
 */
func (client *Client) DeleteChainContractContentEx(request *DeleteChainContractContentRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteChainContractContentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteChainContractContentResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.chain.contract.content.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 阿里云区块链小程序用户权限添加
 * Summary: 阿里云区块链小程序用户权限添加
 */
func (client *Client) BatchcreateChainMiniappUser(request *BatchcreateChainMiniappUserRequest) (_result *BatchcreateChainMiniappUserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &BatchcreateChainMiniappUserResponse{}
	_body, _err := client.BatchcreateChainMiniappUserEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 阿里云区块链小程序用户权限添加
 * Summary: 阿里云区块链小程序用户权限添加
 */
func (client *Client) BatchcreateChainMiniappUserEx(request *BatchcreateChainMiniappUserRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *BatchcreateChainMiniappUserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BatchcreateChainMiniappUserResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.chain.miniapp.user.batchcreate"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 阿里云区块链小程序用户权限删除
 * Summary: 阿里云区块链小程序用户权限删除
 */
func (client *Client) DeleteChainMiniappUser(request *DeleteChainMiniappUserRequest) (_result *DeleteChainMiniappUserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteChainMiniappUserResponse{}
	_body, _err := client.DeleteChainMiniappUserEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 阿里云区块链小程序用户权限删除
 * Summary: 阿里云区块链小程序用户权限删除
 */
func (client *Client) DeleteChainMiniappUserEx(request *DeleteChainMiniappUserRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteChainMiniappUserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteChainMiniappUserResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.chain.miniapp.user.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 阿里云区块链所有用户权限查询
 * Summary: 阿里云区块链所有用户权限查询
 */
func (client *Client) BatchqueryChainMiniappUser(request *BatchqueryChainMiniappUserRequest) (_result *BatchqueryChainMiniappUserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &BatchqueryChainMiniappUserResponse{}
	_body, _err := client.BatchqueryChainMiniappUserEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 阿里云区块链所有用户权限查询
 * Summary: 阿里云区块链所有用户权限查询
 */
func (client *Client) BatchqueryChainMiniappUserEx(request *BatchqueryChainMiniappUserRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *BatchqueryChainMiniappUserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BatchqueryChainMiniappUserResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.chain.miniapp.user.batchquery"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 阿里云区块链小程序权限控制查询
 * Summary: 阿里云区块链小程序权限控制查询
 */
func (client *Client) QueryChainMiniappAuthorization(request *QueryChainMiniappAuthorizationRequest) (_result *QueryChainMiniappAuthorizationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryChainMiniappAuthorizationResponse{}
	_body, _err := client.QueryChainMiniappAuthorizationEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 阿里云区块链小程序权限控制查询
 * Summary: 阿里云区块链小程序权限控制查询
 */
func (client *Client) QueryChainMiniappAuthorizationEx(request *QueryChainMiniappAuthorizationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryChainMiniappAuthorizationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryChainMiniappAuthorizationResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.chain.miniapp.authorization.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 阿里云区块链小程序权限控制变更
 * Summary: 阿里云区块链小程序权限控制变更
 */
func (client *Client) UpdateChainMiniappAuthorization(request *UpdateChainMiniappAuthorizationRequest) (_result *UpdateChainMiniappAuthorizationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateChainMiniappAuthorizationResponse{}
	_body, _err := client.UpdateChainMiniappAuthorizationEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 阿里云区块链小程序权限控制变更
 * Summary: 阿里云区块链小程序权限控制变更
 */
func (client *Client) UpdateChainMiniappAuthorizationEx(request *UpdateChainMiniappAuthorizationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateChainMiniappAuthorizationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateChainMiniappAuthorizationResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.chain.miniapp.authorization.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 阿里云区块链小程序交易查询
 * Summary: 阿里云区块链小程序交易查询
 */
func (client *Client) QueryChainMiniappTransaction(request *QueryChainMiniappTransactionRequest) (_result *QueryChainMiniappTransactionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryChainMiniappTransactionResponse{}
	_body, _err := client.QueryChainMiniappTransactionEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 阿里云区块链小程序交易查询
 * Summary: 阿里云区块链小程序交易查询
 */
func (client *Client) QueryChainMiniappTransactionEx(request *QueryChainMiniappTransactionRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryChainMiniappTransactionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryChainMiniappTransactionResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.chain.miniapp.transaction.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 阿里云区块链小程序交易查询的记录
 * Summary: 阿里云区块链小程序交易查询的记录
 */
func (client *Client) QueryChainMiniappLog(request *QueryChainMiniappLogRequest) (_result *QueryChainMiniappLogResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryChainMiniappLogResponse{}
	_body, _err := client.QueryChainMiniappLogEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 阿里云区块链小程序交易查询的记录
 * Summary: 阿里云区块链小程序交易查询的记录
 */
func (client *Client) QueryChainMiniappLogEx(request *QueryChainMiniappLogRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryChainMiniappLogResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryChainMiniappLogResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.chain.miniapp.log.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 阿里云生成小程序二维码
 * Summary: 阿里云生成小程序二维码
 */
func (client *Client) CreateChainMiniappCode(request *CreateChainMiniappCodeRequest) (_result *CreateChainMiniappCodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateChainMiniappCodeResponse{}
	_body, _err := client.CreateChainMiniappCodeEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 阿里云生成小程序二维码
 * Summary: 阿里云生成小程序二维码
 */
func (client *Client) CreateChainMiniappCodeEx(request *CreateChainMiniappCodeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateChainMiniappCodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateChainMiniappCodeResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.chain.miniapp.code.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 阿里云售卖页联盟信息查询
 * Summary: 阿里云售卖页联盟信息查询
 */
func (client *Client) QueryUnionBuy(request *QueryUnionBuyRequest) (_result *QueryUnionBuyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryUnionBuyResponse{}
	_body, _err := client.QueryUnionBuyEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 阿里云售卖页联盟信息查询
 * Summary: 阿里云售卖页联盟信息查询
 */
func (client *Client) QueryUnionBuyEx(request *QueryUnionBuyRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryUnionBuyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryUnionBuyResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.union.buy.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 阿里云国内站免费体验链Rest查询
 * Summary: 阿里云国内站免费体验链Rest查询
 */
func (client *Client) QueryChainPublicRest(request *QueryChainPublicRestRequest) (_result *QueryChainPublicRestResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryChainPublicRestResponse{}
	_body, _err := client.QueryChainPublicRestEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 阿里云国内站免费体验链Rest查询
 * Summary: 阿里云国内站免费体验链Rest查询
 */
func (client *Client) QueryChainPublicRestEx(request *QueryChainPublicRestRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryChainPublicRestResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryChainPublicRestResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.chain.public.rest.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 阿里云国内站免费体验链申请Rest
 * Summary: 阿里云国内站免费体验链申请Rest
 */
func (client *Client) ApplyChainPublicRest(request *ApplyChainPublicRestRequest) (_result *ApplyChainPublicRestResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ApplyChainPublicRestResponse{}
	_body, _err := client.ApplyChainPublicRestEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 阿里云国内站免费体验链申请Rest
 * Summary: 阿里云国内站免费体验链申请Rest
 */
func (client *Client) ApplyChainPublicRestEx(request *ApplyChainPublicRestRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ApplyChainPublicRestResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ApplyChainPublicRestResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.chain.public.rest.apply"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 阿里云国内站重置Rest
 * Summary: 阿里云国内站重置Rest
 */
func (client *Client) ReinitChainPublicRest(request *ReinitChainPublicRestRequest) (_result *ReinitChainPublicRestResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ReinitChainPublicRestResponse{}
	_body, _err := client.ReinitChainPublicRestEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 阿里云国内站重置Rest
 * Summary: 阿里云国内站重置Rest
 */
func (client *Client) ReinitChainPublicRestEx(request *ReinitChainPublicRestRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ReinitChainPublicRestResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ReinitChainPublicRestResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.chain.public.rest.reinit"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 阿里云国内站区块链rest查询
 * Summary: 阿里云国内站区块链rest查询
 */
func (client *Client) QueryChainRestAnt(request *QueryChainRestAntRequest) (_result *QueryChainRestAntResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryChainRestAntResponse{}
	_body, _err := client.QueryChainRestAntEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 阿里云国内站区块链rest查询
 * Summary: 阿里云国内站区块链rest查询
 */
func (client *Client) QueryChainRestAntEx(request *QueryChainRestAntRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryChainRestAntResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryChainRestAntResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.chain.rest.ant.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 阿里云国内站区块链rest申请
 * Summary: 阿里云国内站区块链rest申请
 */
func (client *Client) ApplyChainRestAnt(request *ApplyChainRestAntRequest) (_result *ApplyChainRestAntResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ApplyChainRestAntResponse{}
	_body, _err := client.ApplyChainRestAntEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 阿里云国内站区块链rest申请
 * Summary: 阿里云国内站区块链rest申请
 */
func (client *Client) ApplyChainRestAntEx(request *ApplyChainRestAntRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ApplyChainRestAntResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ApplyChainRestAntResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.chain.rest.ant.apply"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 阿里云国内站区块链重置Rest
 * Summary: 阿里云国内站区块链重置Rest
 */
func (client *Client) ReinitChainRestAnt(request *ReinitChainRestAntRequest) (_result *ReinitChainRestAntResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ReinitChainRestAntResponse{}
	_body, _err := client.ReinitChainRestAntEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 阿里云国内站区块链重置Rest
 * Summary: 阿里云国内站区块链重置Rest
 */
func (client *Client) ReinitChainRestAntEx(request *ReinitChainRestAntRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ReinitChainRestAntResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ReinitChainRestAntResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.chain.rest.ant.reinit"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 阿里云国内站公共链重置rest发送验证码
 * Summary: 阿里云国内站公共链重置rest发送验证码
 */
func (client *Client) SendChainPublicRest(request *SendChainPublicRestRequest) (_result *SendChainPublicRestResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SendChainPublicRestResponse{}
	_body, _err := client.SendChainPublicRestEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 阿里云国内站公共链重置rest发送验证码
 * Summary: 阿里云国内站公共链重置rest发送验证码
 */
func (client *Client) SendChainPublicRestEx(request *SendChainPublicRestRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SendChainPublicRestResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SendChainPublicRestResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.chain.public.rest.send"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 阿里云国内站区块链重置rest发送验证码
 * Summary: 阿里云国内站区块链重置rest发送验证码
 */
func (client *Client) SendChainRestAnt(request *SendChainRestAntRequest) (_result *SendChainRestAntResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SendChainRestAntResponse{}
	_body, _err := client.SendChainRestAntEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 阿里云国内站区块链重置rest发送验证码
 * Summary: 阿里云国内站区块链重置rest发送验证码
 */
func (client *Client) SendChainRestAntEx(request *SendChainRestAntRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SendChainRestAntResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SendChainRestAntResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.chain.rest.ant.send"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 阿里云子链列表查询
 * Summary: 阿里云子链列表查询
 */
func (client *Client) QueryChainSubnet(request *QueryChainSubnetRequest) (_result *QueryChainSubnetResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryChainSubnetResponse{}
	_body, _err := client.QueryChainSubnetEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 阿里云子链列表查询
 * Summary: 阿里云子链列表查询
 */
func (client *Client) QueryChainSubnetEx(request *QueryChainSubnetRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryChainSubnetResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryChainSubnetResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.chain.subnet.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 阿里云子链创建的前置检查
 * Summary: 阿里云子链创建的前置检查
 */
func (client *Client) CheckChainSubnetCreate(request *CheckChainSubnetCreateRequest) (_result *CheckChainSubnetCreateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CheckChainSubnetCreateResponse{}
	_body, _err := client.CheckChainSubnetCreateEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 阿里云子链创建的前置检查
 * Summary: 阿里云子链创建的前置检查
 */
func (client *Client) CheckChainSubnetCreateEx(request *CheckChainSubnetCreateRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CheckChainSubnetCreateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CheckChainSubnetCreateResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.chain.subnet.create.check"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 阿里云子链创建
 * Summary: 阿里云子链创建
 */
func (client *Client) CreateChainSubnet(request *CreateChainSubnetRequest) (_result *CreateChainSubnetResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateChainSubnetResponse{}
	_body, _err := client.CreateChainSubnetEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 阿里云子链创建
 * Summary: 阿里云子链创建
 */
func (client *Client) CreateChainSubnetEx(request *CreateChainSubnetRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateChainSubnetResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateChainSubnetResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.chain.subnet.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 阿里云子链的启动
 * Summary: 阿里云子链的启动
 */
func (client *Client) ExecChainSubnet(request *ExecChainSubnetRequest) (_result *ExecChainSubnetResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExecChainSubnetResponse{}
	_body, _err := client.ExecChainSubnetEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 阿里云子链的启动
 * Summary: 阿里云子链的启动
 */
func (client *Client) ExecChainSubnetEx(request *ExecChainSubnetRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExecChainSubnetResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ExecChainSubnetResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.chain.subnet.exec"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 阿里云子链名称修改
 * Summary: 阿里云子链名称修改
 */
func (client *Client) UpdateChainSubnetName(request *UpdateChainSubnetNameRequest) (_result *UpdateChainSubnetNameResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateChainSubnetNameResponse{}
	_body, _err := client.UpdateChainSubnetNameEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 阿里云子链名称修改
 * Summary: 阿里云子链名称修改
 */
func (client *Client) UpdateChainSubnetNameEx(request *UpdateChainSubnetNameRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateChainSubnetNameResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateChainSubnetNameResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.chain.subnet.name.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 阿里云子链节点信息查询
 * Summary: 阿里云子链节点信息查询
 */
func (client *Client) QueryChainSubnetNode(request *QueryChainSubnetNodeRequest) (_result *QueryChainSubnetNodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryChainSubnetNodeResponse{}
	_body, _err := client.QueryChainSubnetNodeEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 阿里云子链节点信息查询
 * Summary: 阿里云子链节点信息查询
 */
func (client *Client) QueryChainSubnetNodeEx(request *QueryChainSubnetNodeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryChainSubnetNodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryChainSubnetNodeResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.chain.subnet.node.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 阿里云子链的节点删除
 * Summary: 阿里云子链的节点删除
 */
func (client *Client) DeleteChainSubnetNode(request *DeleteChainSubnetNodeRequest) (_result *DeleteChainSubnetNodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteChainSubnetNodeResponse{}
	_body, _err := client.DeleteChainSubnetNodeEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 阿里云子链的节点删除
 * Summary: 阿里云子链的节点删除
 */
func (client *Client) DeleteChainSubnetNodeEx(request *DeleteChainSubnetNodeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteChainSubnetNodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteChainSubnetNodeResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.chain.subnet.node.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 阿里云子链节点添加的前置检查
 * Summary: 阿里云子链节点添加的前置检查
 */
func (client *Client) CheckChainSubnetNode(request *CheckChainSubnetNodeRequest) (_result *CheckChainSubnetNodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CheckChainSubnetNodeResponse{}
	_body, _err := client.CheckChainSubnetNodeEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 阿里云子链节点添加的前置检查
 * Summary: 阿里云子链节点添加的前置检查
 */
func (client *Client) CheckChainSubnetNodeEx(request *CheckChainSubnetNodeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CheckChainSubnetNodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CheckChainSubnetNodeResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.chain.subnet.node.check"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 阿里云子链节点添加
 * Summary: 阿里云子链节点添加
 */
func (client *Client) AddChainSubnetNode(request *AddChainSubnetNodeRequest) (_result *AddChainSubnetNodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &AddChainSubnetNodeResponse{}
	_body, _err := client.AddChainSubnetNodeEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 阿里云子链节点添加
 * Summary: 阿里云子链节点添加
 */
func (client *Client) AddChainSubnetNodeEx(request *AddChainSubnetNodeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *AddChainSubnetNodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AddChainSubnetNodeResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.chain.subnet.node.add"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 阿里云子链机构列表查询
 * Summary: 阿里云子链机构列表查询
 */
func (client *Client) QueryChainSubnetMember(request *QueryChainSubnetMemberRequest) (_result *QueryChainSubnetMemberResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryChainSubnetMemberResponse{}
	_body, _err := client.QueryChainSubnetMemberEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 阿里云子链机构列表查询
 * Summary: 阿里云子链机构列表查询
 */
func (client *Client) QueryChainSubnetMemberEx(request *QueryChainSubnetMemberRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryChainSubnetMemberResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryChainSubnetMemberResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.chain.subnet.member.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 阿里云子链成员删除
 * Summary: 阿里云子链成员删除
 */
func (client *Client) DeleteChainSubnetMember(request *DeleteChainSubnetMemberRequest) (_result *DeleteChainSubnetMemberResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteChainSubnetMemberResponse{}
	_body, _err := client.DeleteChainSubnetMemberEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 阿里云子链成员删除
 * Summary: 阿里云子链成员删除
 */
func (client *Client) DeleteChainSubnetMemberEx(request *DeleteChainSubnetMemberRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteChainSubnetMemberResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteChainSubnetMemberResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.chain.subnet.member.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 阿里云子链成员添加前校验
 * Summary: 阿里云子链成员添加前校验
 */
func (client *Client) CheckChainSubnetMember(request *CheckChainSubnetMemberRequest) (_result *CheckChainSubnetMemberResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CheckChainSubnetMemberResponse{}
	_body, _err := client.CheckChainSubnetMemberEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 阿里云子链成员添加前校验
 * Summary: 阿里云子链成员添加前校验
 */
func (client *Client) CheckChainSubnetMemberEx(request *CheckChainSubnetMemberRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CheckChainSubnetMemberResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CheckChainSubnetMemberResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.chain.subnet.member.check"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 阿里云子链成员添加
 * Summary: 阿里云子链成员添加
 */
func (client *Client) AddChainSubnetMember(request *AddChainSubnetMemberRequest) (_result *AddChainSubnetMemberResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &AddChainSubnetMemberResponse{}
	_body, _err := client.AddChainSubnetMemberEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 阿里云子链成员添加
 * Summary: 阿里云子链成员添加
 */
func (client *Client) AddChainSubnetMemberEx(request *AddChainSubnetMemberRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *AddChainSubnetMemberResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AddChainSubnetMemberResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.chain.subnet.member.add"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 阿里云子链REST开通
 * Summary: 阿里云子链REST开通
 */
func (client *Client) ApplyChainSubnetRest(request *ApplyChainSubnetRestRequest) (_result *ApplyChainSubnetRestResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ApplyChainSubnetRestResponse{}
	_body, _err := client.ApplyChainSubnetRestEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 阿里云子链REST开通
 * Summary: 阿里云子链REST开通
 */
func (client *Client) ApplyChainSubnetRestEx(request *ApplyChainSubnetRestRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ApplyChainSubnetRestResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ApplyChainSubnetRestResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.chain.subnet.rest.apply"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 阿里云数据导出任务查询
 * Summary: 阿里云数据导出任务查询
 */
func (client *Client) QueryChainDataexportTask(request *QueryChainDataexportTaskRequest) (_result *QueryChainDataexportTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryChainDataexportTaskResponse{}
	_body, _err := client.QueryChainDataexportTaskEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 阿里云数据导出任务查询
 * Summary: 阿里云数据导出任务查询
 */
func (client *Client) QueryChainDataexportTaskEx(request *QueryChainDataexportTaskRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryChainDataexportTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryChainDataexportTaskResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.chain.dataexport.task.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 阿里云数据导出服务，列出所有导出任务功能接口
 * Summary: 列出所有导出任务接口
 */
func (client *Client) QueryChainDataExport(request *QueryChainDataExportRequest) (_result *QueryChainDataExportResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryChainDataExportResponse{}
	_body, _err := client.QueryChainDataExportEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 阿里云数据导出服务，列出所有导出任务功能接口
 * Summary: 列出所有导出任务接口
 */
func (client *Client) QueryChainDataExportEx(request *QueryChainDataExportRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryChainDataExportResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryChainDataExportResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.chain.data.export.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 阿里云数据导出需求创建数据导出任务
 * Summary: 创建数据导出任务
 */
func (client *Client) CreateChainDataexportTask(request *CreateChainDataexportTaskRequest) (_result *CreateChainDataexportTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateChainDataexportTaskResponse{}
	_body, _err := client.CreateChainDataexportTaskEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 阿里云数据导出需求创建数据导出任务
 * Summary: 创建数据导出任务
 */
func (client *Client) CreateChainDataexportTaskEx(request *CreateChainDataexportTaskRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateChainDataexportTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateChainDataexportTaskResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.chain.dataexport.task.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取预览数据（第一步：生成任务ID）
 * Summary: 获取预览数据（第一步：生成任务ID）
 */
func (client *Client) CreateChainTaskId(request *CreateChainTaskIdRequest) (_result *CreateChainTaskIdResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateChainTaskIdResponse{}
	_body, _err := client.CreateChainTaskIdEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取预览数据（第一步：生成任务ID）
 * Summary: 获取预览数据（第一步：生成任务ID）
 */
func (client *Client) CreateChainTaskIdEx(request *CreateChainTaskIdRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateChainTaskIdResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateChainTaskIdResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.chain.task.id.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取预览数据（第二步：根据任务ID获取预览数据结果）
 * Summary: 根据任务ID获取预览数据结果
 */
func (client *Client) QueryChainDataPreview(request *QueryChainDataPreviewRequest) (_result *QueryChainDataPreviewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryChainDataPreviewResponse{}
	_body, _err := client.QueryChainDataPreviewEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取预览数据（第二步：根据任务ID获取预览数据结果）
 * Summary: 根据任务ID获取预览数据结果
 */
func (client *Client) QueryChainDataPreviewEx(request *QueryChainDataPreviewRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryChainDataPreviewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryChainDataPreviewResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.chain.data.preview.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 根据预览数据获取默认映射关系
 * Summary: 根据预览数据获取默认映射关系
 */
func (client *Client) QueryChainMappingRelationship(request *QueryChainMappingRelationshipRequest) (_result *QueryChainMappingRelationshipResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryChainMappingRelationshipResponse{}
	_body, _err := client.QueryChainMappingRelationshipEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 根据预览数据获取默认映射关系
 * Summary: 根据预览数据获取默认映射关系
 */
func (client *Client) QueryChainMappingRelationshipEx(request *QueryChainMappingRelationshipRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryChainMappingRelationshipResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryChainMappingRelationshipResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.chain.mapping.relationship.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建导出MySQL任务失败，获取 Create Table 语句
 * Summary: 获取 Create Table 语句
 */
func (client *Client) CreateChainTableSql(request *CreateChainTableSqlRequest) (_result *CreateChainTableSqlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateChainTableSqlResponse{}
	_body, _err := client.CreateChainTableSqlEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建导出MySQL任务失败，获取 Create Table 语句
 * Summary: 获取 Create Table 语句
 */
func (client *Client) CreateChainTableSqlEx(request *CreateChainTableSqlRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateChainTableSqlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateChainTableSqlResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.chain.table.sql.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 修改导出任务状态（启动、暂停、删除）
 * Summary: 修改导出任务状态（启动、暂停、删除）
 */
func (client *Client) UpdateChainDataexportStatus(request *UpdateChainDataexportStatusRequest) (_result *UpdateChainDataexportStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateChainDataexportStatusResponse{}
	_body, _err := client.UpdateChainDataexportStatusEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 修改导出任务状态（启动、暂停、删除）
 * Summary: 修改导出任务状态（启动、暂停、删除）
 */
func (client *Client) UpdateChainDataexportStatusEx(request *UpdateChainDataexportStatusRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateChainDataexportStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateChainDataexportStatusResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.chain.dataexport.status.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 修改导出任务（名称、描述、告警地址）
 * Summary: 修改导出任务（名称、描述、告警地址）
 */
func (client *Client) UpdateChainDataexportTask(request *UpdateChainDataexportTaskRequest) (_result *UpdateChainDataexportTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateChainDataexportTaskResponse{}
	_body, _err := client.UpdateChainDataexportTaskEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 修改导出任务（名称、描述、告警地址）
 * Summary: 修改导出任务（名称、描述、告警地址）
 */
func (client *Client) UpdateChainDataexportTaskEx(request *UpdateChainDataexportTaskRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateChainDataexportTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateChainDataexportTaskResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.chain.dataexport.task.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 分页失败的展示日志（过滤器：待处理、成功、已忽略）
 * Summary: 分页失败的展示日志
 */
func (client *Client) QueryChainFailureLog(request *QueryChainFailureLogRequest) (_result *QueryChainFailureLogResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryChainFailureLogResponse{}
	_body, _err := client.QueryChainFailureLogEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 分页失败的展示日志（过滤器：待处理、成功、已忽略）
 * Summary: 分页失败的展示日志
 */
func (client *Client) QueryChainFailureLogEx(request *QueryChainFailureLogRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryChainFailureLogResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryChainFailureLogResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.chain.failure.log.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 批量处理失败日志（重试/忽略）
 * Summary: 批量处理失败日志（重试/忽略）
 */
func (client *Client) UpdateChainFailureLog(request *UpdateChainFailureLogRequest) (_result *UpdateChainFailureLogResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateChainFailureLogResponse{}
	_body, _err := client.UpdateChainFailureLogEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 批量处理失败日志（重试/忽略）
 * Summary: 批量处理失败日志（重试/忽略）
 */
func (client *Client) UpdateChainFailureLogEx(request *UpdateChainFailureLogRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateChainFailureLogResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateChainFailureLogResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.chain.failure.log.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 列出当前用户的托管MQ实例
 * Summary: 列出当前用户的托管MQ实例
 */
func (client *Client) QueryChainManagedMq(request *QueryChainManagedMqRequest) (_result *QueryChainManagedMqResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryChainManagedMqResponse{}
	_body, _err := client.QueryChainManagedMqEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 列出当前用户的托管MQ实例
 * Summary: 列出当前用户的托管MQ实例
 */
func (client *Client) QueryChainManagedMqEx(request *QueryChainManagedMqRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryChainManagedMqResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryChainManagedMqResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.chain.managed.mq.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 初始化托管 MQ 实例
 * Summary: 初始化托管 MQ 实例
 */
func (client *Client) InitChainManagedMq(request *InitChainManagedMqRequest) (_result *InitChainManagedMqResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &InitChainManagedMqResponse{}
	_body, _err := client.InitChainManagedMqEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 初始化托管 MQ 实例
 * Summary: 初始化托管 MQ 实例
 */
func (client *Client) InitChainManagedMqEx(request *InitChainManagedMqRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *InitChainManagedMqResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &InitChainManagedMqResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.chain.managed.mq.init"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询蚂蚁链用途列表接口
 * Summary: 查询蚂蚁链用途列表
 */
func (client *Client) QueryChainUseDeclaration(request *QueryChainUseDeclarationRequest) (_result *QueryChainUseDeclarationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryChainUseDeclarationResponse{}
	_body, _err := client.QueryChainUseDeclarationEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询蚂蚁链用途列表接口
 * Summary: 查询蚂蚁链用途列表
 */
func (client *Client) QueryChainUseDeclarationEx(request *QueryChainUseDeclarationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryChainUseDeclarationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryChainUseDeclarationResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.chain.use.declaration.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 选择蚂蚁链用途列表中的某项，进行提交申报接口
 * Summary: 选择蚂蚁链用途列表中的某项，进行提交申报
 */
func (client *Client) ApplyChainUseDeclaration(request *ApplyChainUseDeclarationRequest) (_result *ApplyChainUseDeclarationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ApplyChainUseDeclarationResponse{}
	_body, _err := client.ApplyChainUseDeclarationEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 选择蚂蚁链用途列表中的某项，进行提交申报接口
 * Summary: 选择蚂蚁链用途列表中的某项，进行提交申报
 */
func (client *Client) ApplyChainUseDeclarationEx(request *ApplyChainUseDeclarationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ApplyChainUseDeclarationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ApplyChainUseDeclarationResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.chain.use.declaration.apply"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 展示用户添加申报的记录接口
 * Summary: 展示用户添加申报的记录
 */
func (client *Client) QueryChainUseList(request *QueryChainUseListRequest) (_result *QueryChainUseListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryChainUseListResponse{}
	_body, _err := client.QueryChainUseListEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 展示用户添加申报的记录接口
 * Summary: 展示用户添加申报的记录
 */
func (client *Client) QueryChainUseListEx(request *QueryChainUseListRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryChainUseListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryChainUseListResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.chain.use.list.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: BaaS用途申报敏感词检查接口
 * Summary: BaaS用途申报敏感词检查
 */
func (client *Client) CheckChainSensitiveWords(request *CheckChainSensitiveWordsRequest) (_result *CheckChainSensitiveWordsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CheckChainSensitiveWordsResponse{}
	_body, _err := client.CheckChainSensitiveWordsEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: BaaS用途申报敏感词检查接口
 * Summary: BaaS用途申报敏感词检查
 */
func (client *Client) CheckChainSensitiveWordsEx(request *CheckChainSensitiveWordsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CheckChainSensitiveWordsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CheckChainSensitiveWordsResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.chain.sensitive.words.check"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 阿里云MyChain创建托管账户
 * Summary: 阿里云MyChain创建托管账户
 */
func (client *Client) CreateChainAccountAntkms(request *CreateChainAccountAntkmsRequest) (_result *CreateChainAccountAntkmsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateChainAccountAntkmsResponse{}
	_body, _err := client.CreateChainAccountAntkmsEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 阿里云MyChain创建托管账户
 * Summary: 阿里云MyChain创建托管账户
 */
func (client *Client) CreateChainAccountAntkmsEx(request *CreateChainAccountAntkmsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateChainAccountAntkmsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateChainAccountAntkmsResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.chain.account.antkms.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 阿里云渠道链相关商业化服务开通，后台经由ocp转发，实现计量计费
 * Summary: 阿里云渠道链相关商业化服务开通
 */
func (client *Client) OpenChainService(request *OpenChainServiceRequest) (_result *OpenChainServiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &OpenChainServiceResponse{}
	_body, _err := client.OpenChainServiceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 阿里云渠道链相关商业化服务开通，后台经由ocp转发，实现计量计费
 * Summary: 阿里云渠道链相关商业化服务开通
 */
func (client *Client) OpenChainServiceEx(request *OpenChainServiceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *OpenChainServiceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &OpenChainServiceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.chain.service.open"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 阿里云渠道链相关商业化服务开通结果查询
 * Summary: 阿里云渠道链相关商业化服务开通结果查询
 */
func (client *Client) CheckChainService(request *CheckChainServiceRequest) (_result *CheckChainServiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CheckChainServiceResponse{}
	_body, _err := client.CheckChainServiceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 阿里云渠道链相关商业化服务开通结果查询
 * Summary: 阿里云渠道链相关商业化服务开通结果查询
 */
func (client *Client) CheckChainServiceEx(request *CheckChainServiceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CheckChainServiceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CheckChainServiceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.chain.service.check"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 阿里云渠道链相关商业化服务开通，后台经由ocp转发，实现服务关闭
 * Summary: 阿里云渠道链相关商业化服务关闭
 */
func (client *Client) CloseChainService(request *CloseChainServiceRequest) (_result *CloseChainServiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CloseChainServiceResponse{}
	_body, _err := client.CloseChainServiceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 阿里云渠道链相关商业化服务开通，后台经由ocp转发，实现服务关闭
 * Summary: 阿里云渠道链相关商业化服务关闭
 */
func (client *Client) CloseChainServiceEx(request *CloseChainServiceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CloseChainServiceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CloseChainServiceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.chain.service.close"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 企业通过调用该接口准备接入反洗钱信息共享平台
 * Summary: 反洗钱信息共享平台入驻接口
 */
func (client *Client) StartAmlCorporationJoinprepare(request *StartAmlCorporationJoinprepareRequest) (_result *StartAmlCorporationJoinprepareResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartAmlCorporationJoinprepareResponse{}
	_body, _err := client.StartAmlCorporationJoinprepareEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 企业通过调用该接口准备接入反洗钱信息共享平台
 * Summary: 反洗钱信息共享平台入驻接口
 */
func (client *Client) StartAmlCorporationJoinprepareEx(request *StartAmlCorporationJoinprepareRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartAmlCorporationJoinprepareResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartAmlCorporationJoinprepareResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.aml.corporation.joinprepare.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 反洗钱信息共享平台确认加盟接口，用户在准备阶段确认了平台安全性之后可以确认入驻
 * Summary: 反洗钱信息共享平台确认加盟接口
 */
func (client *Client) StartAmlCorporationJoincommit(request *StartAmlCorporationJoincommitRequest) (_result *StartAmlCorporationJoincommitResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartAmlCorporationJoincommitResponse{}
	_body, _err := client.StartAmlCorporationJoincommitEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 反洗钱信息共享平台确认加盟接口，用户在准备阶段确认了平台安全性之后可以确认入驻
 * Summary: 反洗钱信息共享平台确认加盟接口
 */
func (client *Client) StartAmlCorporationJoincommitEx(request *StartAmlCorporationJoincommitRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartAmlCorporationJoincommitResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartAmlCorporationJoincommitResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.aml.corporation.joincommit.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 反洗钱系统二要素实名认证
 * Summary: 反洗钱系统二要素实名认证
 */
func (client *Client) StartAmlPersonTwofactor(request *StartAmlPersonTwofactorRequest) (_result *StartAmlPersonTwofactorResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartAmlPersonTwofactorResponse{}
	_body, _err := client.StartAmlPersonTwofactorEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 反洗钱系统二要素实名认证
 * Summary: 反洗钱系统二要素实名认证
 */
func (client *Client) StartAmlPersonTwofactorEx(request *StartAmlPersonTwofactorRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartAmlPersonTwofactorResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartAmlPersonTwofactorResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.aml.person.twofactor.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 简单存证
 * Summary: 简单存证
 */
func (client *Client) SaveBusinessDeposit(request *SaveBusinessDepositRequest) (_result *SaveBusinessDepositResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SaveBusinessDepositResponse{}
	_body, _err := client.SaveBusinessDepositEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 简单存证
 * Summary: 简单存证
 */
func (client *Client) SaveBusinessDepositEx(request *SaveBusinessDepositRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SaveBusinessDepositResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SaveBusinessDepositResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.business.deposit.save"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 存储带有描述性的数据
 * Summary: 存储带有描述性的数据
 */
func (client *Client) SaveBusinessDepositMetadata(request *SaveBusinessDepositMetadataRequest) (_result *SaveBusinessDepositMetadataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SaveBusinessDepositMetadataResponse{}
	_body, _err := client.SaveBusinessDepositMetadataEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 存储带有描述性的数据
 * Summary: 存储带有描述性的数据
 */
func (client *Client) SaveBusinessDepositMetadataEx(request *SaveBusinessDepositMetadataRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SaveBusinessDepositMetadataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SaveBusinessDepositMetadataResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.business.deposit.metadata.save"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 将存证的数据在链上加密
 * Summary: 将存证的数据在链上加密
 */
func (client *Client) SaveBusinessDepositEncrypt(request *SaveBusinessDepositEncryptRequest) (_result *SaveBusinessDepositEncryptResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SaveBusinessDepositEncryptResponse{}
	_body, _err := client.SaveBusinessDepositEncryptEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 将存证的数据在链上加密
 * Summary: 将存证的数据在链上加密
 */
func (client *Client) SaveBusinessDepositEncryptEx(request *SaveBusinessDepositEncryptRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SaveBusinessDepositEncryptResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SaveBusinessDepositEncryptResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.business.deposit.encrypt.save"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 存证带有描述性的数据并加密
 * Summary: 存证带有描述性的数据并加密
 */
func (client *Client) SaveBusinessDepositEncryptmetadata(request *SaveBusinessDepositEncryptmetadataRequest) (_result *SaveBusinessDepositEncryptmetadataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SaveBusinessDepositEncryptmetadataResponse{}
	_body, _err := client.SaveBusinessDepositEncryptmetadataEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 存证带有描述性的数据并加密
 * Summary: 存证带有描述性的数据并加密
 */
func (client *Client) SaveBusinessDepositEncryptmetadataEx(request *SaveBusinessDepositEncryptmetadataRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SaveBusinessDepositEncryptmetadataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SaveBusinessDepositEncryptmetadataResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.business.deposit.encryptmetadata.save"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 通过授权宝创建did
 * Summary: 创建did
 */
func (client *Client) CreateBusinessDid(request *CreateBusinessDidRequest) (_result *CreateBusinessDidResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateBusinessDidResponse{}
	_body, _err := client.CreateBusinessDidEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 通过授权宝创建did
 * Summary: 创建did
 */
func (client *Client) CreateBusinessDidEx(request *CreateBusinessDidRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateBusinessDidResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateBusinessDidResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.business.did.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 根据did创建链上账户
 * Summary: 根据did创建链上账户
 */
func (client *Client) CreateBusinessBizaccount(request *CreateBusinessBizaccountRequest) (_result *CreateBusinessBizaccountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateBusinessBizaccountResponse{}
	_body, _err := client.CreateBusinessBizaccountEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 根据did创建链上账户
 * Summary: 根据did创建链上账户
 */
func (client *Client) CreateBusinessBizaccountEx(request *CreateBusinessBizaccountRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateBusinessBizaccountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateBusinessBizaccountResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.business.bizaccount.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询存证数据
 * Summary: 查询存证数据
 */
func (client *Client) QueryBusinessDeposit(request *QueryBusinessDepositRequest) (_result *QueryBusinessDepositResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryBusinessDepositResponse{}
	_body, _err := client.QueryBusinessDepositEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询存证数据
 * Summary: 查询存证数据
 */
func (client *Client) QueryBusinessDepositEx(request *QueryBusinessDepositRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryBusinessDepositResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryBusinessDepositResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.business.deposit.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 授权存证数据
 * Summary: 授权存证数据
 */
func (client *Client) AuthBusinessDepositdata(request *AuthBusinessDepositdataRequest) (_result *AuthBusinessDepositdataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &AuthBusinessDepositdataResponse{}
	_body, _err := client.AuthBusinessDepositdataEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 授权存证数据
 * Summary: 授权存证数据
 */
func (client *Client) AuthBusinessDepositdataEx(request *AuthBusinessDepositdataRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *AuthBusinessDepositdataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AuthBusinessDepositdataResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.business.depositdata.auth"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建部署合约
 * Summary: 创建部署合约
 */
func (client *Client) CreateBusinessContractDeploy(request *CreateBusinessContractDeployRequest) (_result *CreateBusinessContractDeployResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateBusinessContractDeployResponse{}
	_body, _err := client.CreateBusinessContractDeployEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建部署合约
 * Summary: 创建部署合约
 */
func (client *Client) CreateBusinessContractDeployEx(request *CreateBusinessContractDeployRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateBusinessContractDeployResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateBusinessContractDeployResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.business.contract.deploy.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 普通合约接口调用
 * Summary: 普通合约接口调用
 */
func (client *Client) CreateBusinessContractnormalcall(request *CreateBusinessContractnormalcallRequest) (_result *CreateBusinessContractnormalcallResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateBusinessContractnormalcallResponse{}
	_body, _err := client.CreateBusinessContractnormalcallEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 普通合约接口调用
 * Summary: 普通合约接口调用
 */
func (client *Client) CreateBusinessContractnormalcallEx(request *CreateBusinessContractnormalcallRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateBusinessContractnormalcallResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateBusinessContractnormalcallResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.business.contractnormalcall.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 调用加密合约接口
 * Summary: 调用加密合约接口
 */
func (client *Client) CreateBusinessContractencryptcall(request *CreateBusinessContractencryptcallRequest) (_result *CreateBusinessContractencryptcallResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateBusinessContractencryptcallResponse{}
	_body, _err := client.CreateBusinessContractencryptcallEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 调用加密合约接口
 * Summary: 调用加密合约接口
 */
func (client *Client) CreateBusinessContractencryptcallEx(request *CreateBusinessContractencryptcallRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateBusinessContractencryptcallResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateBusinessContractencryptcallResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.business.contractencryptcall.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询交易receipt
 * Summary: 查询交易receipt
 */
func (client *Client) QueryBusinessContractreceipt(request *QueryBusinessContractreceiptRequest) (_result *QueryBusinessContractreceiptResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryBusinessContractreceiptResponse{}
	_body, _err := client.QueryBusinessContractreceiptEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询交易receipt
 * Summary: 查询交易receipt
 */
func (client *Client) QueryBusinessContractreceiptEx(request *QueryBusinessContractreceiptRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryBusinessContractreceiptResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryBusinessContractreceiptResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.business.contractreceipt.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询加密的receipt
 * Summary: 查询加密的receipt
 */
func (client *Client) QueryBusinessContractencryptreceipt(request *QueryBusinessContractencryptreceiptRequest) (_result *QueryBusinessContractencryptreceiptResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryBusinessContractencryptreceiptResponse{}
	_body, _err := client.QueryBusinessContractencryptreceiptEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询加密的receipt
 * Summary: 查询加密的receipt
 */
func (client *Client) QueryBusinessContractencryptreceiptEx(request *QueryBusinessContractencryptreceiptRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryBusinessContractencryptreceiptResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryBusinessContractencryptreceiptResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.business.contractencryptreceipt.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询合约加密内容的方法
 * Summary: 查询合约加密内容的方法
 */
func (client *Client) QueryBusinessContractencryptmethod(request *QueryBusinessContractencryptmethodRequest) (_result *QueryBusinessContractencryptmethodResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryBusinessContractencryptmethodResponse{}
	_body, _err := client.QueryBusinessContractencryptmethodEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询合约加密内容的方法
 * Summary: 查询合约加密内容的方法
 */
func (client *Client) QueryBusinessContractencryptmethodEx(request *QueryBusinessContractencryptmethodRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryBusinessContractencryptmethodResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryBusinessContractencryptmethodResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.business.contractencryptmethod.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 部署业务共识合约
 * Summary: 部署业务共识合约
 */
func (client *Client) DeployBusinessAgreement(request *DeployBusinessAgreementRequest) (_result *DeployBusinessAgreementResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeployBusinessAgreementResponse{}
	_body, _err := client.DeployBusinessAgreementEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 部署业务共识合约
 * Summary: 部署业务共识合约
 */
func (client *Client) DeployBusinessAgreementEx(request *DeployBusinessAgreementRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeployBusinessAgreementResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeployBusinessAgreementResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.business.agreement.deploy"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建业务共识模板
 * Summary: 创建业务共识模板
 */
func (client *Client) CreateBusinessAgreementRegistertemplate(request *CreateBusinessAgreementRegistertemplateRequest) (_result *CreateBusinessAgreementRegistertemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateBusinessAgreementRegistertemplateResponse{}
	_body, _err := client.CreateBusinessAgreementRegistertemplateEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建业务共识模板
 * Summary: 创建业务共识模板
 */
func (client *Client) CreateBusinessAgreementRegistertemplateEx(request *CreateBusinessAgreementRegistertemplateRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateBusinessAgreementRegistertemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateBusinessAgreementRegistertemplateResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.business.agreement.registertemplate.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 注册业务共识实例
 * Summary: 注册业务共识实例
 */
func (client *Client) CreateBusinessAgreementRegister(request *CreateBusinessAgreementRegisterRequest) (_result *CreateBusinessAgreementRegisterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateBusinessAgreementRegisterResponse{}
	_body, _err := client.CreateBusinessAgreementRegisterEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 注册业务共识实例
 * Summary: 注册业务共识实例
 */
func (client *Client) CreateBusinessAgreementRegisterEx(request *CreateBusinessAgreementRegisterRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateBusinessAgreementRegisterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateBusinessAgreementRegisterResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.business.agreement.register.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 对业务共识key进行签名认可
 * Summary: 对业务共识key进行签名认可
 */
func (client *Client) CreateBusinessAgreementSign(request *CreateBusinessAgreementSignRequest) (_result *CreateBusinessAgreementSignResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateBusinessAgreementSignResponse{}
	_body, _err := client.CreateBusinessAgreementSignEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 对业务共识key进行签名认可
 * Summary: 对业务共识key进行签名认可
 */
func (client *Client) CreateBusinessAgreementSignEx(request *CreateBusinessAgreementSignRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateBusinessAgreementSignResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateBusinessAgreementSignResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.business.agreement.sign.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询业务共识当前状态
 * Summary: 查询业务共识当前状态
 */
func (client *Client) QueryBusinessAgreement(request *QueryBusinessAgreementRequest) (_result *QueryBusinessAgreementResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryBusinessAgreementResponse{}
	_body, _err := client.QueryBusinessAgreementEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询业务共识当前状态
 * Summary: 查询业务共识当前状态
 */
func (client *Client) QueryBusinessAgreementEx(request *QueryBusinessAgreementRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryBusinessAgreementResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryBusinessAgreementResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.business.agreement.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 对合约隐私key授权
 * Summary: 对合约隐私key授权
 */
func (client *Client) CreateBusinessContractGrantdid(request *CreateBusinessContractGrantdidRequest) (_result *CreateBusinessContractGrantdidResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateBusinessContractGrantdidResponse{}
	_body, _err := client.CreateBusinessContractGrantdidEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 对合约隐私key授权
 * Summary: 对合约隐私key授权
 */
func (client *Client) CreateBusinessContractGrantdidEx(request *CreateBusinessContractGrantdidRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateBusinessContractGrantdidResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateBusinessContractGrantdidResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.business.contract.grantdid.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询被加密的存证数据
 * Summary: 查询被加密的存证数据
 */
func (client *Client) QueryBusinessDepositEncryptedmetadata(request *QueryBusinessDepositEncryptedmetadataRequest) (_result *QueryBusinessDepositEncryptedmetadataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryBusinessDepositEncryptedmetadataResponse{}
	_body, _err := client.QueryBusinessDepositEncryptedmetadataEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询被加密的存证数据
 * Summary: 查询被加密的存证数据
 */
func (client *Client) QueryBusinessDepositEncryptedmetadataEx(request *QueryBusinessDepositEncryptedmetadataRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryBusinessDepositEncryptedmetadataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryBusinessDepositEncryptedmetadataResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.business.deposit.encryptedmetadata.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 授权存证数据给对应的组织机构，该组织下所有的人员都可以查询该存证数据的原内容
 * Summary: 授权存证数据给对应的组织机构
 */
func (client *Client) AuthBusinessDepositdataCorp(request *AuthBusinessDepositdataCorpRequest) (_result *AuthBusinessDepositdataCorpResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &AuthBusinessDepositdataCorpResponse{}
	_body, _err := client.AuthBusinessDepositdataCorpEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 授权存证数据给对应的组织机构，该组织下所有的人员都可以查询该存证数据的原内容
 * Summary: 授权存证数据给对应的组织机构
 */
func (client *Client) AuthBusinessDepositdataCorpEx(request *AuthBusinessDepositdataCorpRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *AuthBusinessDepositdataCorpResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AuthBusinessDepositdataCorpResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.business.depositdata.corp.auth"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 取消存证数据授权给账户
 * Summary: 取消存证数据授权给账户
 */
func (client *Client) CancelBusinessDepositGrantdid(request *CancelBusinessDepositGrantdidRequest) (_result *CancelBusinessDepositGrantdidResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CancelBusinessDepositGrantdidResponse{}
	_body, _err := client.CancelBusinessDepositGrantdidEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 取消存证数据授权给账户
 * Summary: 取消存证数据授权给账户
 */
func (client *Client) CancelBusinessDepositGrantdidEx(request *CancelBusinessDepositGrantdidRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CancelBusinessDepositGrantdidResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CancelBusinessDepositGrantdidResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.business.deposit.grantdid.cancel"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 取消存证授权给组织机构
 * Summary: 取消存证授权给组织机构
 */
func (client *Client) CancelBusinessDepositGrantcorp(request *CancelBusinessDepositGrantcorpRequest) (_result *CancelBusinessDepositGrantcorpResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CancelBusinessDepositGrantcorpResponse{}
	_body, _err := client.CancelBusinessDepositGrantcorpEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 取消存证授权给组织机构
 * Summary: 取消存证授权给组织机构
 */
func (client *Client) CancelBusinessDepositGrantcorpEx(request *CancelBusinessDepositGrantcorpRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CancelBusinessDepositGrantcorpResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CancelBusinessDepositGrantcorpResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.business.deposit.grantcorp.cancel"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 授权合约内加密字段给机构，机构下的所有人都有权限访问该数据
 * Summary: 授权合约内加密字段给机构
 */
func (client *Client) CreateBusinessContractGrantcorp(request *CreateBusinessContractGrantcorpRequest) (_result *CreateBusinessContractGrantcorpResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateBusinessContractGrantcorpResponse{}
	_body, _err := client.CreateBusinessContractGrantcorpEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 授权合约内加密字段给机构，机构下的所有人都有权限访问该数据
 * Summary: 授权合约内加密字段给机构
 */
func (client *Client) CreateBusinessContractGrantcorpEx(request *CreateBusinessContractGrantcorpRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateBusinessContractGrantcorpResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateBusinessContractGrantcorpResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.business.contract.grantcorp.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 取消授权did查询加密数据
 * Summary: 取消授权did查询加密数据
 */
func (client *Client) CancelBusinessContractGrantdid(request *CancelBusinessContractGrantdidRequest) (_result *CancelBusinessContractGrantdidResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CancelBusinessContractGrantdidResponse{}
	_body, _err := client.CancelBusinessContractGrantdidEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 取消授权did查询加密数据
 * Summary: 取消授权did查询加密数据
 */
func (client *Client) CancelBusinessContractGrantdidEx(request *CancelBusinessContractGrantdidRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CancelBusinessContractGrantdidResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CancelBusinessContractGrantdidResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.business.contract.grantdid.cancel"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 取消授权给组织机构
 * Summary: 取消授权给组织机构
 */
func (client *Client) CancelBusinessContractGrantcorp(request *CancelBusinessContractGrantcorpRequest) (_result *CancelBusinessContractGrantcorpResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CancelBusinessContractGrantcorpResponse{}
	_body, _err := client.CancelBusinessContractGrantcorpEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 取消授权给组织机构
 * Summary: 取消授权给组织机构
 */
func (client *Client) CancelBusinessContractGrantcorpEx(request *CancelBusinessContractGrantcorpRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CancelBusinessContractGrantcorpResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CancelBusinessContractGrantcorpResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.business.contract.grantcorp.cancel"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 业务中台测试接口
 * Summary: 业务中台测试接口
 */
func (client *Client) ImportPlatformTestregionTestfunc(request *ImportPlatformTestregionTestfuncRequest) (_result *ImportPlatformTestregionTestfuncResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ImportPlatformTestregionTestfuncResponse{}
	_body, _err := client.ImportPlatformTestregionTestfuncEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 业务中台测试接口
 * Summary: 业务中台测试接口
 */
func (client *Client) ImportPlatformTestregionTestfuncEx(request *ImportPlatformTestregionTestfuncRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ImportPlatformTestregionTestfuncResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ImportPlatformTestregionTestfuncResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.platform.testregion.testfunc.import"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 存证创建账户
 * Summary: 存证创建账户
 */
func (client *Client) CreatePlatformDepositAccount(request *CreatePlatformDepositAccountRequest) (_result *CreatePlatformDepositAccountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreatePlatformDepositAccountResponse{}
	_body, _err := client.CreatePlatformDepositAccountEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 存证创建账户
 * Summary: 存证创建账户
 */
func (client *Client) CreatePlatformDepositAccountEx(request *CreatePlatformDepositAccountRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreatePlatformDepositAccountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreatePlatformDepositAccountResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.platform.deposit.account.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 存证创建did
 * Summary: 存证创建did
 */
func (client *Client) CreatePlatformDepositDid(request *CreatePlatformDepositDidRequest) (_result *CreatePlatformDepositDidResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreatePlatformDepositDidResponse{}
	_body, _err := client.CreatePlatformDepositDidEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 存证创建did
 * Summary: 存证创建did
 */
func (client *Client) CreatePlatformDepositDidEx(request *CreatePlatformDepositDidRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreatePlatformDepositDidResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreatePlatformDepositDidResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.platform.deposit.did.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 普通数据存证
 * Summary: 普通数据存证
 */
func (client *Client) SavePlatformDepositDeposit(request *SavePlatformDepositDepositRequest) (_result *SavePlatformDepositDepositResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SavePlatformDepositDepositResponse{}
	_body, _err := client.SavePlatformDepositDepositEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 普通数据存证
 * Summary: 普通数据存证
 */
func (client *Client) SavePlatformDepositDepositEx(request *SavePlatformDepositDepositRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SavePlatformDepositDepositResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SavePlatformDepositDepositResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.platform.deposit.deposit.save"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 为企业创建did
 * Summary: 为企业创建did
 */
func (client *Client) CreatePlatformDepositCorpdid(request *CreatePlatformDepositCorpdidRequest) (_result *CreatePlatformDepositCorpdidResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreatePlatformDepositCorpdidResponse{}
	_body, _err := client.CreatePlatformDepositCorpdidEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 为企业创建did
 * Summary: 为企业创建did
 */
func (client *Client) CreatePlatformDepositCorpdidEx(request *CreatePlatformDepositCorpdidRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreatePlatformDepositCorpdidResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreatePlatformDepositCorpdidResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.platform.deposit.corpdid.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 用于对用户的账户映射，输入用户名、账户、手机号等信息，返回用户的链上身份信息
 * Summary: 用户账号映射
 */
func (client *Client) CreateDigitalassetartAccount(request *CreateDigitalassetartAccountRequest) (_result *CreateDigitalassetartAccountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateDigitalassetartAccountResponse{}
	_body, _err := client.CreateDigitalassetartAccountEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 用于对用户的账户映射，输入用户名、账户、手机号等信息，返回用户的链上身份信息
 * Summary: 用户账号映射
 */
func (client *Client) CreateDigitalassetartAccountEx(request *CreateDigitalassetartAccountRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateDigitalassetartAccountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateDigitalassetartAccountResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.digitalassetart.account.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 批量账户映射
 * Summary: 批量账户映射
 */
func (client *Client) BatchcreateDigitalassetartAccount(request *BatchcreateDigitalassetartAccountRequest) (_result *BatchcreateDigitalassetartAccountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &BatchcreateDigitalassetartAccountResponse{}
	_body, _err := client.BatchcreateDigitalassetartAccountEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 批量账户映射
 * Summary: 批量账户映射
 */
func (client *Client) BatchcreateDigitalassetartAccountEx(request *BatchcreateDigitalassetartAccountRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *BatchcreateDigitalassetartAccountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BatchcreateDigitalassetartAccountResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.digitalassetart.account.batchcreate"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建艺术品
 * Summary: 创建艺术品
 */
func (client *Client) CreateDigitalassetartArtCreate(request *CreateDigitalassetartArtCreateRequest) (_result *CreateDigitalassetartArtCreateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateDigitalassetartArtCreateResponse{}
	_body, _err := client.CreateDigitalassetartArtCreateEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建艺术品
 * Summary: 创建艺术品
 */
func (client *Client) CreateDigitalassetartArtCreateEx(request *CreateDigitalassetartArtCreateRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateDigitalassetartArtCreateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateDigitalassetartArtCreateResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.digitalassetart.art.create.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 将艺术品从创建状态改为发行状态，只有在发行状态的艺术品才能进行各种交易
 * Summary: 发行艺术品
 */
func (client *Client) SetDigitalassetartArtIssue(request *SetDigitalassetartArtIssueRequest) (_result *SetDigitalassetartArtIssueResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SetDigitalassetartArtIssueResponse{}
	_body, _err := client.SetDigitalassetartArtIssueEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 将艺术品从创建状态改为发行状态，只有在发行状态的艺术品才能进行各种交易
 * Summary: 发行艺术品
 */
func (client *Client) SetDigitalassetartArtIssueEx(request *SetDigitalassetartArtIssueRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SetDigitalassetartArtIssueResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SetDigitalassetartArtIssueResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.digitalassetart.art.issue.set"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 将该艺术品发布到交易所
 * Summary: 将该艺术品发布到交易所
 */
func (client *Client) SetDigitalassetartArtIssuetoexchange(request *SetDigitalassetartArtIssuetoexchangeRequest) (_result *SetDigitalassetartArtIssuetoexchangeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SetDigitalassetartArtIssuetoexchangeResponse{}
	_body, _err := client.SetDigitalassetartArtIssuetoexchangeEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 将该艺术品发布到交易所
 * Summary: 将该艺术品发布到交易所
 */
func (client *Client) SetDigitalassetartArtIssuetoexchangeEx(request *SetDigitalassetartArtIssuetoexchangeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SetDigitalassetartArtIssuetoexchangeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SetDigitalassetartArtIssuetoexchangeResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.digitalassetart.art.issuetoexchange.set"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 艺术品本链交易
 * Summary: 艺术品本链交易
 */
func (client *Client) SetDigitalassetartArtTrade(request *SetDigitalassetartArtTradeRequest) (_result *SetDigitalassetartArtTradeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SetDigitalassetartArtTradeResponse{}
	_body, _err := client.SetDigitalassetartArtTradeEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 艺术品本链交易
 * Summary: 艺术品本链交易
 */
func (client *Client) SetDigitalassetartArtTradeEx(request *SetDigitalassetartArtTradeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SetDigitalassetartArtTradeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SetDigitalassetartArtTradeResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.digitalassetart.art.trade.set"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 在交易所交易艺术品
 * Summary: 在交易所交易艺术品
 */
func (client *Client) SetDigitalassetartArtTradeonexchange(request *SetDigitalassetartArtTradeonexchangeRequest) (_result *SetDigitalassetartArtTradeonexchangeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SetDigitalassetartArtTradeonexchangeResponse{}
	_body, _err := client.SetDigitalassetartArtTradeonexchangeEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 在交易所交易艺术品
 * Summary: 在交易所交易艺术品
 */
func (client *Client) SetDigitalassetartArtTradeonexchangeEx(request *SetDigitalassetartArtTradeonexchangeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SetDigitalassetartArtTradeonexchangeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SetDigitalassetartArtTradeonexchangeResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.digitalassetart.art.tradeonexchange.set"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 冻结艺术品
 * Summary: 冻结艺术品
 */
func (client *Client) FreezeDigitalassetartArtAccount(request *FreezeDigitalassetartArtAccountRequest) (_result *FreezeDigitalassetartArtAccountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &FreezeDigitalassetartArtAccountResponse{}
	_body, _err := client.FreezeDigitalassetartArtAccountEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 冻结艺术品
 * Summary: 冻结艺术品
 */
func (client *Client) FreezeDigitalassetartArtAccountEx(request *FreezeDigitalassetartArtAccountRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *FreezeDigitalassetartArtAccountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &FreezeDigitalassetartArtAccountResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.digitalassetart.art.account.freeze"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 艺术品解冻
 * Summary: 艺术品解冻
 */
func (client *Client) UnfreezeDigitalassetartArtAccount(request *UnfreezeDigitalassetartArtAccountRequest) (_result *UnfreezeDigitalassetartArtAccountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UnfreezeDigitalassetartArtAccountResponse{}
	_body, _err := client.UnfreezeDigitalassetartArtAccountEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 艺术品解冻
 * Summary: 艺术品解冻
 */
func (client *Client) UnfreezeDigitalassetartArtAccountEx(request *UnfreezeDigitalassetartArtAccountRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UnfreezeDigitalassetartArtAccountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UnfreezeDigitalassetartArtAccountResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.digitalassetart.art.account.unfreeze"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 取消在交易所发布艺术品
 * Summary: 取消在交易所发布艺术品
 */
func (client *Client) SetDigitalassetartArtUnissuetoexchange(request *SetDigitalassetartArtUnissuetoexchangeRequest) (_result *SetDigitalassetartArtUnissuetoexchangeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SetDigitalassetartArtUnissuetoexchangeResponse{}
	_body, _err := client.SetDigitalassetartArtUnissuetoexchangeEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 取消在交易所发布艺术品
 * Summary: 取消在交易所发布艺术品
 */
func (client *Client) SetDigitalassetartArtUnissuetoexchangeEx(request *SetDigitalassetartArtUnissuetoexchangeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SetDigitalassetartArtUnissuetoexchangeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SetDigitalassetartArtUnissuetoexchangeResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.digitalassetart.art.unissuetoexchange.set"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询艺术品信息
 * Summary: 查询艺术品信息
 */
func (client *Client) QueryDigitalassetartArt(request *QueryDigitalassetartArtRequest) (_result *QueryDigitalassetartArtResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryDigitalassetartArtResponse{}
	_body, _err := client.QueryDigitalassetartArtEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询艺术品信息
 * Summary: 查询艺术品信息
 */
func (client *Client) QueryDigitalassetartArtEx(request *QueryDigitalassetartArtRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryDigitalassetartArtResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryDigitalassetartArtResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.digitalassetart.art.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 数字资产管理平台业务方账户映射接口
 * Summary: 数字资产管理平台业务方账户映射
 */
func (client *Client) CreateDigitalassetExchangeAccountmap(request *CreateDigitalassetExchangeAccountmapRequest) (_result *CreateDigitalassetExchangeAccountmapResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateDigitalassetExchangeAccountmapResponse{}
	_body, _err := client.CreateDigitalassetExchangeAccountmapEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 数字资产管理平台业务方账户映射接口
 * Summary: 数字资产管理平台业务方账户映射
 */
func (client *Client) CreateDigitalassetExchangeAccountmapEx(request *CreateDigitalassetExchangeAccountmapRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateDigitalassetExchangeAccountmapResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateDigitalassetExchangeAccountmapResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.digitalasset.exchange.accountmap.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 数字资产管理平台用户账户批量映射接口
 * Summary: 数字资产管理平台用户账户批量映射
 */
func (client *Client) BatchcreateDigitalassetExchangeAccountmap(request *BatchcreateDigitalassetExchangeAccountmapRequest) (_result *BatchcreateDigitalassetExchangeAccountmapResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &BatchcreateDigitalassetExchangeAccountmapResponse{}
	_body, _err := client.BatchcreateDigitalassetExchangeAccountmapEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 数字资产管理平台用户账户批量映射接口
 * Summary: 数字资产管理平台用户账户批量映射
 */
func (client *Client) BatchcreateDigitalassetExchangeAccountmapEx(request *BatchcreateDigitalassetExchangeAccountmapRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *BatchcreateDigitalassetExchangeAccountmapResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BatchcreateDigitalassetExchangeAccountmapResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.digitalasset.exchange.accountmap.batchcreate"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 数字资产管理平台版通解限接口
 * Summary: 数字资产管理平台版通解限
 */
func (client *Client) StartDigitalassetExchangeUnfreeze(request *StartDigitalassetExchangeUnfreezeRequest) (_result *StartDigitalassetExchangeUnfreezeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartDigitalassetExchangeUnfreezeResponse{}
	_body, _err := client.StartDigitalassetExchangeUnfreezeEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 数字资产管理平台版通解限接口
 * Summary: 数字资产管理平台版通解限
 */
func (client *Client) StartDigitalassetExchangeUnfreezeEx(request *StartDigitalassetExchangeUnfreezeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartDigitalassetExchangeUnfreezeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartDigitalassetExchangeUnfreezeResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.digitalasset.exchange.unfreeze.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 数字资产管理平台资源管理 处理用户、版通的锁定与解锁
1. ep_code有值，user_account为空时，对指定版通进行锁定解锁操作
2. ep_code为空，user_account有值时，对指定账户进行锁定解锁操作
3. ep_code，user_account均有值时，对指定账户的版通进行锁定解锁操作
4. ep_code，user_account均为空时，对全交易所进行锁定解锁操作，需谨慎
 * Summary: 数字资产管理平台资源管理
*/
func (client *Client) StartDigitalassetExchangeLockposition(request *StartDigitalassetExchangeLockpositionRequest) (_result *StartDigitalassetExchangeLockpositionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartDigitalassetExchangeLockpositionResponse{}
	_body, _err := client.StartDigitalassetExchangeLockpositionEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 数字资产管理平台资源管理 处理用户、版通的锁定与解锁
1. ep_code有值，user_account为空时，对指定版通进行锁定解锁操作
2. ep_code为空，user_account有值时，对指定账户进行锁定解锁操作
3. ep_code，user_account均有值时，对指定账户的版通进行锁定解锁操作
4. ep_code，user_account均为空时，对全交易所进行锁定解锁操作，需谨慎
 * Summary: 数字资产管理平台资源管理
*/
func (client *Client) StartDigitalassetExchangeLockpositionEx(request *StartDigitalassetExchangeLockpositionRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartDigitalassetExchangeLockpositionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartDigitalassetExchangeLockpositionResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.digitalasset.exchange.lockposition.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 数字资产管理平台版通发行接口
 * Summary: 数字资产管理平台版通发行
 */
func (client *Client) CreateDigitalassetExchangeEpissue(request *CreateDigitalassetExchangeEpissueRequest) (_result *CreateDigitalassetExchangeEpissueResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateDigitalassetExchangeEpissueResponse{}
	_body, _err := client.CreateDigitalassetExchangeEpissueEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 数字资产管理平台版通发行接口
 * Summary: 数字资产管理平台版通发行
 */
func (client *Client) CreateDigitalassetExchangeEpissueEx(request *CreateDigitalassetExchangeEpissueRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateDigitalassetExchangeEpissueResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateDigitalassetExchangeEpissueResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.digitalasset.exchange.epissue.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 数字资产管理平台版通存量发行接口
 * Summary: 数字资产管理平台版通存量发行
 */
func (client *Client) CreateDigitalassetExchangeEpstockissue(request *CreateDigitalassetExchangeEpstockissueRequest) (_result *CreateDigitalassetExchangeEpstockissueResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateDigitalassetExchangeEpstockissueResponse{}
	_body, _err := client.CreateDigitalassetExchangeEpstockissueEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 数字资产管理平台版通存量发行接口
 * Summary: 数字资产管理平台版通存量发行
 */
func (client *Client) CreateDigitalassetExchangeEpstockissueEx(request *CreateDigitalassetExchangeEpstockissueRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateDigitalassetExchangeEpstockissueResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateDigitalassetExchangeEpstockissueResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.digitalasset.exchange.epstockissue.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 数字资产管理平台版通批发接口
 * Summary: 数字资产管理平台版通批发
 */
func (client *Client) StartDigitalassetExchangeEpwholesale(request *StartDigitalassetExchangeEpwholesaleRequest) (_result *StartDigitalassetExchangeEpwholesaleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartDigitalassetExchangeEpwholesaleResponse{}
	_body, _err := client.StartDigitalassetExchangeEpwholesaleEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 数字资产管理平台版通批发接口
 * Summary: 数字资产管理平台版通批发
 */
func (client *Client) StartDigitalassetExchangeEpwholesaleEx(request *StartDigitalassetExchangeEpwholesaleRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartDigitalassetExchangeEpwholesaleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartDigitalassetExchangeEpwholesaleResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.digitalasset.exchange.epwholesale.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 数字资产管理平台版通信息查询接口
 * Summary: 数字资产管理平台版通信息查询
 */
func (client *Client) QueryDigitalassetExchangeEpinfo(request *QueryDigitalassetExchangeEpinfoRequest) (_result *QueryDigitalassetExchangeEpinfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryDigitalassetExchangeEpinfoResponse{}
	_body, _err := client.QueryDigitalassetExchangeEpinfoEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 数字资产管理平台版通信息查询接口
 * Summary: 数字资产管理平台版通信息查询
 */
func (client *Client) QueryDigitalassetExchangeEpinfoEx(request *QueryDigitalassetExchangeEpinfoRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryDigitalassetExchangeEpinfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryDigitalassetExchangeEpinfoResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.digitalasset.exchange.epinfo.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 数字资产管理平台交易查询接口
1. ep_code有值，user_account为空时，查询版通的交易信息
2. ep_code为空，user_account有值时，查询账户的交易信息
3. ep_code，user_account均有值时，查询账户下指定版通的交易信息
 * Summary: 数字资产管理平台交易查询
*/
func (client *Client) QueryDigitalassetExchangeEptrade(request *QueryDigitalassetExchangeEptradeRequest) (_result *QueryDigitalassetExchangeEptradeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryDigitalassetExchangeEptradeResponse{}
	_body, _err := client.QueryDigitalassetExchangeEptradeEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 数字资产管理平台交易查询接口
1. ep_code有值，user_account为空时，查询版通的交易信息
2. ep_code为空，user_account有值时，查询账户的交易信息
3. ep_code，user_account均有值时，查询账户下指定版通的交易信息
 * Summary: 数字资产管理平台交易查询
*/
func (client *Client) QueryDigitalassetExchangeEptradeEx(request *QueryDigitalassetExchangeEptradeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryDigitalassetExchangeEptradeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryDigitalassetExchangeEptradeResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.digitalasset.exchange.eptrade.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 数字资产管理平台账户信息查询接口
 * Summary: 数字资产管理平台账户信息查询
 */
func (client *Client) QueryDigitalassetExchangeEpaccount(request *QueryDigitalassetExchangeEpaccountRequest) (_result *QueryDigitalassetExchangeEpaccountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryDigitalassetExchangeEpaccountResponse{}
	_body, _err := client.QueryDigitalassetExchangeEpaccountEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 数字资产管理平台账户信息查询接口
 * Summary: 数字资产管理平台账户信息查询
 */
func (client *Client) QueryDigitalassetExchangeEpaccountEx(request *QueryDigitalassetExchangeEpaccountRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryDigitalassetExchangeEpaccountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryDigitalassetExchangeEpaccountResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.digitalasset.exchange.epaccount.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 数字资产管理平台交易接口
 * Summary: 数字资产管理平台交易
 */
func (client *Client) StartDigitalassetExchangeEptrade(request *StartDigitalassetExchangeEptradeRequest) (_result *StartDigitalassetExchangeEptradeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartDigitalassetExchangeEptradeResponse{}
	_body, _err := client.StartDigitalassetExchangeEptradeEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 数字资产管理平台交易接口
 * Summary: 数字资产管理平台交易
 */
func (client *Client) StartDigitalassetExchangeEptradeEx(request *StartDigitalassetExchangeEptradeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartDigitalassetExchangeEptradeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartDigitalassetExchangeEptradeResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.digitalasset.exchange.eptrade.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 数字资产管理平台版通回购接口
 * Summary: 数字资产管理平台版通回购
 */
func (client *Client) StartDigitalassetExchangeEpbuyback(request *StartDigitalassetExchangeEpbuybackRequest) (_result *StartDigitalassetExchangeEpbuybackResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartDigitalassetExchangeEpbuybackResponse{}
	_body, _err := client.StartDigitalassetExchangeEpbuybackEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 数字资产管理平台版通回购接口
 * Summary: 数字资产管理平台版通回购
 */
func (client *Client) StartDigitalassetExchangeEpbuybackEx(request *StartDigitalassetExchangeEpbuybackRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartDigitalassetExchangeEpbuybackResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartDigitalassetExchangeEpbuybackResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.digitalasset.exchange.epbuyback.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建用户接口
 * Summary: 创建用户接口
 */
func (client *Client) CreateDistributionUser(request *CreateDistributionUserRequest) (_result *CreateDistributionUserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateDistributionUserResponse{}
	_body, _err := client.CreateDistributionUserEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建用户接口
 * Summary: 创建用户接口
 */
func (client *Client) CreateDistributionUserEx(request *CreateDistributionUserRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateDistributionUserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateDistributionUserResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.distribution.user.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 用户下级分销关系查询
 * Summary: 用户下级分销关系查询
 */
func (client *Client) QueryDistributionUserTeam(request *QueryDistributionUserTeamRequest) (_result *QueryDistributionUserTeamResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryDistributionUserTeamResponse{}
	_body, _err := client.QueryDistributionUserTeamEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 用户下级分销关系查询
 * Summary: 用户下级分销关系查询
 */
func (client *Client) QueryDistributionUserTeamEx(request *QueryDistributionUserTeamRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryDistributionUserTeamResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryDistributionUserTeamResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.distribution.user.team.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建商户接口
 * Summary: 创建商户
 */
func (client *Client) CreateDistributionShop(request *CreateDistributionShopRequest) (_result *CreateDistributionShopResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateDistributionShopResponse{}
	_body, _err := client.CreateDistributionShopEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建商户接口
 * Summary: 创建商户
 */
func (client *Client) CreateDistributionShopEx(request *CreateDistributionShopRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateDistributionShopResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateDistributionShopResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.distribution.shop.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 用户之间分销关系建立
 * Summary: 用户之间分销关系建立
 */
func (client *Client) CreateDistributionUserRelation(request *CreateDistributionUserRelationRequest) (_result *CreateDistributionUserRelationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateDistributionUserRelationResponse{}
	_body, _err := client.CreateDistributionUserRelationEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 用户之间分销关系建立
 * Summary: 用户之间分销关系建立
 */
func (client *Client) CreateDistributionUserRelationEx(request *CreateDistributionUserRelationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateDistributionUserRelationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateDistributionUserRelationResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.distribution.user.relation.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 营销分销合约初始化
 * Summary: 营销分销合约初始化
 */
func (client *Client) InitDistributionContract(request *InitDistributionContractRequest) (_result *InitDistributionContractResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &InitDistributionContractResponse{}
	_body, _err := client.InitDistributionContractEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 营销分销合约初始化
 * Summary: 营销分销合约初始化
 */
func (client *Client) InitDistributionContractEx(request *InitDistributionContractRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *InitDistributionContractResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &InitDistributionContractResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.distribution.contract.init"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 营销分销平台商品创建
 * Summary: 营销分销平台商品创建
 */
func (client *Client) CreateDistributionProductItem(request *CreateDistributionProductItemRequest) (_result *CreateDistributionProductItemResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateDistributionProductItemResponse{}
	_body, _err := client.CreateDistributionProductItemEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 营销分销平台商品创建
 * Summary: 营销分销平台商品创建
 */
func (client *Client) CreateDistributionProductItemEx(request *CreateDistributionProductItemRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateDistributionProductItemResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateDistributionProductItemResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.distribution.product.item.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 营销分销平台商品查询
 * Summary: 营销分销平台商品查询
 */
func (client *Client) QueryDistributionProductItem(request *QueryDistributionProductItemRequest) (_result *QueryDistributionProductItemResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryDistributionProductItemResponse{}
	_body, _err := client.QueryDistributionProductItemEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 营销分销平台商品查询
 * Summary: 营销分销平台商品查询
 */
func (client *Client) QueryDistributionProductItemEx(request *QueryDistributionProductItemRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryDistributionProductItemResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryDistributionProductItemResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.distribution.product.item.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 营销分销平台推广人钱包更新
 * Summary: 营销分销平台推广人钱包更新
 */
func (client *Client) UpdateDistributionFundPromoter(request *UpdateDistributionFundPromoterRequest) (_result *UpdateDistributionFundPromoterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateDistributionFundPromoterResponse{}
	_body, _err := client.UpdateDistributionFundPromoterEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 营销分销平台推广人钱包更新
 * Summary: 营销分销平台推广人钱包更新
 */
func (client *Client) UpdateDistributionFundPromoterEx(request *UpdateDistributionFundPromoterRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateDistributionFundPromoterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateDistributionFundPromoterResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.distribution.fund.promoter.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 营销分销平台商户账户更新
 * Summary: 营销分销平台商户账户更新
 */
func (client *Client) UpdateDistributionFundShop(request *UpdateDistributionFundShopRequest) (_result *UpdateDistributionFundShopResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateDistributionFundShopResponse{}
	_body, _err := client.UpdateDistributionFundShopEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 营销分销平台商户账户更新
 * Summary: 营销分销平台商户账户更新
 */
func (client *Client) UpdateDistributionFundShopEx(request *UpdateDistributionFundShopRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateDistributionFundShopResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateDistributionFundShopResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.distribution.fund.shop.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 营销分销平台推广人账户查询
 * Summary: 营销分销平台推广人账户查询
 */
func (client *Client) QueryDistributionFundPromoter(request *QueryDistributionFundPromoterRequest) (_result *QueryDistributionFundPromoterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryDistributionFundPromoterResponse{}
	_body, _err := client.QueryDistributionFundPromoterEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 营销分销平台推广人账户查询
 * Summary: 营销分销平台推广人账户查询
 */
func (client *Client) QueryDistributionFundPromoterEx(request *QueryDistributionFundPromoterRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryDistributionFundPromoterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryDistributionFundPromoterResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.distribution.fund.promoter.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 营销分销平台商户账户查询
 * Summary: 营销分销平台商户账户查询
 */
func (client *Client) QueryDistributionFundShop(request *QueryDistributionFundShopRequest) (_result *QueryDistributionFundShopResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryDistributionFundShopResponse{}
	_body, _err := client.QueryDistributionFundShopEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 营销分销平台商户账户查询
 * Summary: 营销分销平台商户账户查询
 */
func (client *Client) QueryDistributionFundShopEx(request *QueryDistributionFundShopRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryDistributionFundShopResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryDistributionFundShopResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.distribution.fund.shop.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 营销分销平台推广人账户流水查询
 * Summary: 营销分销平台推广人账户流水查询
 */
func (client *Client) QueryDistributionFundPromoterflow(request *QueryDistributionFundPromoterflowRequest) (_result *QueryDistributionFundPromoterflowResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryDistributionFundPromoterflowResponse{}
	_body, _err := client.QueryDistributionFundPromoterflowEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 营销分销平台推广人账户流水查询
 * Summary: 营销分销平台推广人账户流水查询
 */
func (client *Client) QueryDistributionFundPromoterflowEx(request *QueryDistributionFundPromoterflowRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryDistributionFundPromoterflowResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryDistributionFundPromoterflowResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.distribution.fund.promoterflow.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 营销分销平台推广订单创建
 * Summary: 营销分销平台推广订单创建
 */
func (client *Client) CreateDistributionOrderPromoter(request *CreateDistributionOrderPromoterRequest) (_result *CreateDistributionOrderPromoterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateDistributionOrderPromoterResponse{}
	_body, _err := client.CreateDistributionOrderPromoterEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 营销分销平台推广订单创建
 * Summary: 营销分销平台推广订单创建
 */
func (client *Client) CreateDistributionOrderPromoterEx(request *CreateDistributionOrderPromoterRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateDistributionOrderPromoterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateDistributionOrderPromoterResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.distribution.order.promoter.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 营销分销平台购买订单创建
 * Summary: 营销分销平台购买订单创建
 */
func (client *Client) CreateDistributionOrderTrade(request *CreateDistributionOrderTradeRequest) (_result *CreateDistributionOrderTradeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateDistributionOrderTradeResponse{}
	_body, _err := client.CreateDistributionOrderTradeEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 营销分销平台购买订单创建
 * Summary: 营销分销平台购买订单创建
 */
func (client *Client) CreateDistributionOrderTradeEx(request *CreateDistributionOrderTradeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateDistributionOrderTradeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateDistributionOrderTradeResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.distribution.order.trade.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 营销分销平台推广订单查询
 * Summary: 营销分销平台推广订单查询
 */
func (client *Client) QueryDistributionOrderPromoter(request *QueryDistributionOrderPromoterRequest) (_result *QueryDistributionOrderPromoterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryDistributionOrderPromoterResponse{}
	_body, _err := client.QueryDistributionOrderPromoterEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 营销分销平台推广订单查询
 * Summary: 营销分销平台推广订单查询
 */
func (client *Client) QueryDistributionOrderPromoterEx(request *QueryDistributionOrderPromoterRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryDistributionOrderPromoterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryDistributionOrderPromoterResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.distribution.order.promoter.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 营销分销平台订单返佣信息查询
 * Summary: 营销分销平台订单返佣信息查询
 */
func (client *Client) QueryDistributionOrderRakeback(request *QueryDistributionOrderRakebackRequest) (_result *QueryDistributionOrderRakebackResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryDistributionOrderRakebackResponse{}
	_body, _err := client.QueryDistributionOrderRakebackEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 营销分销平台订单返佣信息查询
 * Summary: 营销分销平台订单返佣信息查询
 */
func (client *Client) QueryDistributionOrderRakebackEx(request *QueryDistributionOrderRakebackRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryDistributionOrderRakebackResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryDistributionOrderRakebackResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.distribution.order.rakeback.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 营销分销平台购买订单查询
 * Summary: 营销分销平台购买订单查询
 */
func (client *Client) QueryDistributionOrderTrade(request *QueryDistributionOrderTradeRequest) (_result *QueryDistributionOrderTradeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryDistributionOrderTradeResponse{}
	_body, _err := client.QueryDistributionOrderTradeEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 营销分销平台购买订单查询
 * Summary: 营销分销平台购买订单查询
 */
func (client *Client) QueryDistributionOrderTradeEx(request *QueryDistributionOrderTradeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryDistributionOrderTradeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryDistributionOrderTradeResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.distribution.order.trade.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: DIS 分布式数字身份申请
 * Summary: DIS 分布式数字身份申请
 */
func (client *Client) CreateLogisticFinanceDis(request *CreateLogisticFinanceDisRequest) (_result *CreateLogisticFinanceDisResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateLogisticFinanceDisResponse{}
	_body, _err := client.CreateLogisticFinanceDisEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: DIS 分布式数字身份申请
 * Summary: DIS 分布式数字身份申请
 */
func (client *Client) CreateLogisticFinanceDisEx(request *CreateLogisticFinanceDisRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateLogisticFinanceDisResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateLogisticFinanceDisResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.logistic.finance.dis.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询 DIS 分布式数字身份列表
 * Summary: 查询 DIS 分布式数字身份列表
 */
func (client *Client) ListLogisticFinanceDis(request *ListLogisticFinanceDisRequest) (_result *ListLogisticFinanceDisResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListLogisticFinanceDisResponse{}
	_body, _err := client.ListLogisticFinanceDisEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询 DIS 分布式数字身份列表
 * Summary: 查询 DIS 分布式数字身份列表
 */
func (client *Client) ListLogisticFinanceDisEx(request *ListLogisticFinanceDisRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListLogisticFinanceDisResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListLogisticFinanceDisResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.logistic.finance.dis.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 为成员颁发可验证声明用于允许指定成员有访问数据的权限
 * Summary: 颁发可验证声明
 */
func (client *Client) CreateLogisticFinanceDisvc(request *CreateLogisticFinanceDisvcRequest) (_result *CreateLogisticFinanceDisvcResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateLogisticFinanceDisvcResponse{}
	_body, _err := client.CreateLogisticFinanceDisvcEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 为成员颁发可验证声明用于允许指定成员有访问数据的权限
 * Summary: 颁发可验证声明
 */
func (client *Client) CreateLogisticFinanceDisvcEx(request *CreateLogisticFinanceDisvcRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateLogisticFinanceDisvcResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateLogisticFinanceDisvcResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.logistic.finance.disvc.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询颁发的可验证声明完整声明内容
 * Summary: 查询颁发的可验证声明
 */
func (client *Client) QueryLogisticFinanceDisvc(request *QueryLogisticFinanceDisvcRequest) (_result *QueryLogisticFinanceDisvcResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryLogisticFinanceDisvcResponse{}
	_body, _err := client.QueryLogisticFinanceDisvcEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询颁发的可验证声明完整声明内容
 * Summary: 查询颁发的可验证声明
 */
func (client *Client) QueryLogisticFinanceDisvcEx(request *QueryLogisticFinanceDisvcRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryLogisticFinanceDisvcResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryLogisticFinanceDisvcResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.logistic.finance.disvc.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 物流金融平台用户账户映射
 * Summary: 物流金融平台用户账户映射
 */
func (client *Client) CreateLogisticFinanceAccount(request *CreateLogisticFinanceAccountRequest) (_result *CreateLogisticFinanceAccountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateLogisticFinanceAccountResponse{}
	_body, _err := client.CreateLogisticFinanceAccountEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 物流金融平台用户账户映射
 * Summary: 物流金融平台用户账户映射
 */
func (client *Client) CreateLogisticFinanceAccountEx(request *CreateLogisticFinanceAccountRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateLogisticFinanceAccountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateLogisticFinanceAccountResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.logistic.finance.account.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 物流金融平台账户批量映射
 * Summary: 物流金融平台账户批量映射
 */
func (client *Client) BatchcreateLogisticFinanceAccount(request *BatchcreateLogisticFinanceAccountRequest) (_result *BatchcreateLogisticFinanceAccountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &BatchcreateLogisticFinanceAccountResponse{}
	_body, _err := client.BatchcreateLogisticFinanceAccountEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 物流金融平台账户批量映射
 * Summary: 物流金融平台账户批量映射
 */
func (client *Client) BatchcreateLogisticFinanceAccountEx(request *BatchcreateLogisticFinanceAccountRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *BatchcreateLogisticFinanceAccountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BatchcreateLogisticFinanceAccountResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.logistic.finance.account.batchcreate"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 物流金融平台物流运单创建
 * Summary: 物流金融平台物流运单创建
 */
func (client *Client) CreateLogisticFinanceOrder(request *CreateLogisticFinanceOrderRequest) (_result *CreateLogisticFinanceOrderResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateLogisticFinanceOrderResponse{}
	_body, _err := client.CreateLogisticFinanceOrderEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 物流金融平台物流运单创建
 * Summary: 物流金融平台物流运单创建
 */
func (client *Client) CreateLogisticFinanceOrderEx(request *CreateLogisticFinanceOrderRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateLogisticFinanceOrderResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateLogisticFinanceOrderResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.logistic.finance.order.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 物流金融平台运单完成
 * Summary: 物流金融平台运单完成
 */
func (client *Client) FinishLogisticFinanceOrder(request *FinishLogisticFinanceOrderRequest) (_result *FinishLogisticFinanceOrderResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &FinishLogisticFinanceOrderResponse{}
	_body, _err := client.FinishLogisticFinanceOrderEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 物流金融平台运单完成
 * Summary: 物流金融平台运单完成
 */
func (client *Client) FinishLogisticFinanceOrderEx(request *FinishLogisticFinanceOrderRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *FinishLogisticFinanceOrderResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &FinishLogisticFinanceOrderResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.logistic.finance.order.finish"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 物流金融平台支付订单创建
 * Summary: 物流金融平台支付订单创建
 */
func (client *Client) CreateLogisticFinancePayorder(request *CreateLogisticFinancePayorderRequest) (_result *CreateLogisticFinancePayorderResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateLogisticFinancePayorderResponse{}
	_body, _err := client.CreateLogisticFinancePayorderEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 物流金融平台支付订单创建
 * Summary: 物流金融平台支付订单创建
 */
func (client *Client) CreateLogisticFinancePayorderEx(request *CreateLogisticFinancePayorderRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateLogisticFinancePayorderResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateLogisticFinancePayorderResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.logistic.finance.payorder.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 物流金融平台订单状态查询
 * Summary: 物流金融平台订单状态查询
 */
func (client *Client) QueryLogisticFinanceOrder(request *QueryLogisticFinanceOrderRequest) (_result *QueryLogisticFinanceOrderResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryLogisticFinanceOrderResponse{}
	_body, _err := client.QueryLogisticFinanceOrderEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 物流金融平台订单状态查询
 * Summary: 物流金融平台订单状态查询
 */
func (client *Client) QueryLogisticFinanceOrderEx(request *QueryLogisticFinanceOrderRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryLogisticFinanceOrderResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryLogisticFinanceOrderResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.logistic.finance.order.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 物流金融平台发票订单创建
 * Summary: 物流金融平台发票订单创建
 */
func (client *Client) CreateLogisticFinanceBillorder(request *CreateLogisticFinanceBillorderRequest) (_result *CreateLogisticFinanceBillorderResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateLogisticFinanceBillorderResponse{}
	_body, _err := client.CreateLogisticFinanceBillorderEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 物流金融平台发票订单创建
 * Summary: 物流金融平台发票订单创建
 */
func (client *Client) CreateLogisticFinanceBillorderEx(request *CreateLogisticFinanceBillorderRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateLogisticFinanceBillorderResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateLogisticFinanceBillorderResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.logistic.finance.billorder.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 物流金融平台运单轨迹信息导入
 * Summary: 物流金融平台运单轨迹信息导入
 */
func (client *Client) ImportLogisticFinanceLocation(request *ImportLogisticFinanceLocationRequest) (_result *ImportLogisticFinanceLocationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ImportLogisticFinanceLocationResponse{}
	_body, _err := client.ImportLogisticFinanceLocationEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 物流金融平台运单轨迹信息导入
 * Summary: 物流金融平台运单轨迹信息导入
 */
func (client *Client) ImportLogisticFinanceLocationEx(request *ImportLogisticFinanceLocationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ImportLogisticFinanceLocationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ImportLogisticFinanceLocationResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.logistic.finance.location.import"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 物流金融平台创建货主DIS
 * Summary: 物流金融平台创建货主DIS
 */
func (client *Client) CreateLogisticFinanceConsignor(request *CreateLogisticFinanceConsignorRequest) (_result *CreateLogisticFinanceConsignorResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateLogisticFinanceConsignorResponse{}
	_body, _err := client.CreateLogisticFinanceConsignorEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 物流金融平台创建货主DIS
 * Summary: 物流金融平台创建货主DIS
 */
func (client *Client) CreateLogisticFinanceConsignorEx(request *CreateLogisticFinanceConsignorRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateLogisticFinanceConsignorResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateLogisticFinanceConsignorResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.logistic.finance.consignor.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 物流金融平台创建无车承运平台DIS
 * Summary: 物流金融平台创建无车承运平台DIS
 */
func (client *Client) CreateLogisticFinancePlatform(request *CreateLogisticFinancePlatformRequest) (_result *CreateLogisticFinancePlatformResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateLogisticFinancePlatformResponse{}
	_body, _err := client.CreateLogisticFinancePlatformEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 物流金融平台创建无车承运平台DIS
 * Summary: 物流金融平台创建无车承运平台DIS
 */
func (client *Client) CreateLogisticFinancePlatformEx(request *CreateLogisticFinancePlatformRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateLogisticFinancePlatformResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateLogisticFinancePlatformResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.logistic.finance.platform.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 物流金融平台代理创建无车承运平台DIS
 * Summary: 物流金融平台代理创建无车承运平台DIS
 */
func (client *Client) CreateLogistFinanceAgentplatform(request *CreateLogistFinanceAgentplatformRequest) (_result *CreateLogistFinanceAgentplatformResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateLogistFinanceAgentplatformResponse{}
	_body, _err := client.CreateLogistFinanceAgentplatformEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 物流金融平台代理创建无车承运平台DIS
 * Summary: 物流金融平台代理创建无车承运平台DIS
 */
func (client *Client) CreateLogistFinanceAgentplatformEx(request *CreateLogistFinanceAgentplatformRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateLogistFinanceAgentplatformResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateLogistFinanceAgentplatformResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.logist.finance.agentplatform.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 物流金融平台创建司机DIS
 * Summary: 物流金融平台创建司机DIS
 */
func (client *Client) CreateLogisticFinanceDriver(request *CreateLogisticFinanceDriverRequest) (_result *CreateLogisticFinanceDriverResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateLogisticFinanceDriverResponse{}
	_body, _err := client.CreateLogisticFinanceDriverEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 物流金融平台创建司机DIS
 * Summary: 物流金融平台创建司机DIS
 */
func (client *Client) CreateLogisticFinanceDriverEx(request *CreateLogisticFinanceDriverRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateLogisticFinanceDriverResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateLogisticFinanceDriverResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.logistic.finance.driver.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 物流金融平台创建货源订单
 * Summary: 物流金融平台创建货源订单
 */
func (client *Client) CreateLogisticFinanceCargoorder(request *CreateLogisticFinanceCargoorderRequest) (_result *CreateLogisticFinanceCargoorderResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateLogisticFinanceCargoorderResponse{}
	_body, _err := client.CreateLogisticFinanceCargoorderEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 物流金融平台创建货源订单
 * Summary: 物流金融平台创建货源订单
 */
func (client *Client) CreateLogisticFinanceCargoorderEx(request *CreateLogisticFinanceCargoorderRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateLogisticFinanceCargoorderResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateLogisticFinanceCargoorderResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.logistic.finance.cargoorder.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 物流金融平台货源支付订单创建
 * Summary: 物流金融平台货源支付订单创建
 */
func (client *Client) CreateLogisticFinanceCargopayorder(request *CreateLogisticFinanceCargopayorderRequest) (_result *CreateLogisticFinanceCargopayorderResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateLogisticFinanceCargopayorderResponse{}
	_body, _err := client.CreateLogisticFinanceCargopayorderEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 物流金融平台货源支付订单创建
 * Summary: 物流金融平台货源支付订单创建
 */
func (client *Client) CreateLogisticFinanceCargopayorderEx(request *CreateLogisticFinanceCargopayorderRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateLogisticFinanceCargopayorderResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateLogisticFinanceCargopayorderResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.logistic.finance.cargopayorder.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建蚂蚁区块链实例
 * Summary: 创建蚂蚁区块链实例
 */
func (client *Client) CreateOcpProduct(request *CreateOcpProductRequest) (_result *CreateOcpProductResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateOcpProductResponse{}
	_body, _err := client.CreateOcpProductEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建蚂蚁区块链实例
 * Summary: 创建蚂蚁区块链实例
 */
func (client *Client) CreateOcpProductEx(request *CreateOcpProductRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateOcpProductResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateOcpProductResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.ocp.product.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 变配，对已有的实例进行规格变更操作。
 * Summary: 对已有的实例进行规格变更操作
 */
func (client *Client) UpdateOcpProduct(request *UpdateOcpProductRequest) (_result *UpdateOcpProductResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateOcpProductResponse{}
	_body, _err := client.UpdateOcpProductEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 变配，对已有的实例进行规格变更操作。
 * Summary: 对已有的实例进行规格变更操作
 */
func (client *Client) UpdateOcpProductEx(request *UpdateOcpProductRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateOcpProductResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateOcpProductResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.ocp.product.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 用户主动删除实例或欠费逾期平台按照约定进行强制删除。
 * Summary: 释放资源
 */
func (client *Client) CloseOcpProduct(request *CloseOcpProductRequest) (_result *CloseOcpProductResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CloseOcpProductResponse{}
	_body, _err := client.CloseOcpProductEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 用户主动删除实例或欠费逾期平台按照约定进行强制删除。
 * Summary: 释放资源
 */
func (client *Client) CloseOcpProductEx(request *CloseOcpProductRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CloseOcpProductResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CloseOcpProductResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.ocp.product.close"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 用户对欠费或者到期实例进行续费操作后，平台会通知产品解除对用户指定实例的操作限制。即恢复正常服务能力。
 * Summary: 恢复资源
 */
func (client *Client) EnableOcpProduct(request *EnableOcpProductRequest) (_result *EnableOcpProductResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &EnableOcpProductResponse{}
	_body, _err := client.EnableOcpProductEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 用户对欠费或者到期实例进行续费操作后，平台会通知产品解除对用户指定实例的操作限制。即恢复正常服务能力。
 * Summary: 恢复资源
 */
func (client *Client) EnableOcpProductEx(request *EnableOcpProductRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *EnableOcpProductResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &EnableOcpProductResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.ocp.product.enable"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 用户资源到期或欠费情况下会对资源先进行停服操作，用于限制用户使用但不能删除用户数据！不同的产品可以根据自身的功能进行不同的限制。
 * Summary: 停止服务
 */
func (client *Client) StopOcpProduct(request *StopOcpProductRequest) (_result *StopOcpProductResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StopOcpProductResponse{}
	_body, _err := client.StopOcpProductEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 用户资源到期或欠费情况下会对资源先进行停服操作，用于限制用户使用但不能删除用户数据！不同的产品可以根据自身的功能进行不同的限制。
 * Summary: 停止服务
 */
func (client *Client) StopOcpProductEx(request *StopOcpProductRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StopOcpProductResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StopOcpProductResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.ocp.product.stop"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 售卖页面加载产品个性化内容，比如：类目、库存等，用于辅助用户选择。用户下单后参数会下发给产品方
 * Summary: 加载售卖页自定义参数
 */
func (client *Client) InitOcpProduct(request *InitOcpProductRequest) (_result *InitOcpProductResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &InitOcpProductResponse{}
	_body, _err := client.InitOcpProductEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 售卖页面加载产品个性化内容，比如：类目、库存等，用于辅助用户选择。用户下单后参数会下发给产品方
 * Summary: 加载售卖页自定义参数
 */
func (client *Client) InitOcpProductEx(request *InitOcpProductRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *InitOcpProductResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &InitOcpProductResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.ocp.product.init"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询商业化产品的状态
 * Summary: 查询商业化产品的状态
 */
func (client *Client) QueryOcpProduct(request *QueryOcpProductRequest) (_result *QueryOcpProductResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryOcpProductResponse{}
	_body, _err := client.QueryOcpProductEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询商业化产品的状态
 * Summary: 查询商业化产品的状态
 */
func (client *Client) QueryOcpProductEx(request *QueryOcpProductRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryOcpProductResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryOcpProductResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.ocp.product.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 开通商业化服务
 * Summary: 开通商业化服务
 */
func (client *Client) OpenOcpProduct(request *OpenOcpProductRequest) (_result *OpenOcpProductResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &OpenOcpProductResponse{}
	_body, _err := client.OpenOcpProductEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 开通商业化服务
 * Summary: 开通商业化服务
 */
func (client *Client) OpenOcpProductEx(request *OpenOcpProductRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *OpenOcpProductResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &OpenOcpProductResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.ocp.product.open"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建商业化产品实例
 * Summary: 创建商业化产品实例
 */
func (client *Client) CreateOcpProducts(request *CreateOcpProductsRequest) (_result *CreateOcpProductsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateOcpProductsResponse{}
	_body, _err := client.CreateOcpProductsEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建商业化产品实例
 * Summary: 创建商业化产品实例
 */
func (client *Client) CreateOcpProductsEx(request *CreateOcpProductsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateOcpProductsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateOcpProductsResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.ocp.products.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 回调接口，产品侧主动通知ocp，产品状态变更。
 * Summary: 主动通知ocp，产品状态变更
 */
func (client *Client) CallbackOcpProduct(request *CallbackOcpProductRequest) (_result *CallbackOcpProductResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CallbackOcpProductResponse{}
	_body, _err := client.CallbackOcpProductEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 回调接口，产品侧主动通知ocp，产品状态变更。
 * Summary: 主动通知ocp，产品状态变更
 */
func (client *Client) CallbackOcpProductEx(request *CallbackOcpProductRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CallbackOcpProductResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CallbackOcpProductResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.ocp.product.callback"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 检查任务状态
 * Summary: 检查任务状态
 */
func (client *Client) CheckOcpTask(request *CheckOcpTaskRequest) (_result *CheckOcpTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CheckOcpTaskResponse{}
	_body, _err := client.CheckOcpTaskEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 检查任务状态
 * Summary: 检查任务状态
 */
func (client *Client) CheckOcpTaskEx(request *CheckOcpTaskRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CheckOcpTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CheckOcpTaskResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.ocp.task.check"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 商业化产品相关任务下发
 * Summary: 任务下发
 */
func (client *Client) ExecOcpTask(request *ExecOcpTaskRequest) (_result *ExecOcpTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExecOcpTaskResponse{}
	_body, _err := client.ExecOcpTaskEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 商业化产品相关任务下发
 * Summary: 任务下发
 */
func (client *Client) ExecOcpTaskEx(request *ExecOcpTaskRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExecOcpTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ExecOcpTaskResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.ocp.task.exec"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 区块链实例创建（内部）
 * Summary: 区块链创建（内部）
 */
func (client *Client) CreateBlockchainInstanceInner(request *CreateBlockchainInstanceInnerRequest) (_result *CreateBlockchainInstanceInnerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateBlockchainInstanceInnerResponse{}
	_body, _err := client.CreateBlockchainInstanceInnerEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 区块链实例创建（内部）
 * Summary: 区块链创建（内部）
 */
func (client *Client) CreateBlockchainInstanceInnerEx(request *CreateBlockchainInstanceInnerRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateBlockchainInstanceInnerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateBlockchainInstanceInnerResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.blockchain.instance.inner.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 蚂蚁区块链通过实例查询链id
 * Summary: 蚂蚁区块链通过实例查询链id
 */
func (client *Client) QueryBlockchainInstanceBizid(request *QueryBlockchainInstanceBizidRequest) (_result *QueryBlockchainInstanceBizidResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryBlockchainInstanceBizidResponse{}
	_body, _err := client.QueryBlockchainInstanceBizidEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 蚂蚁区块链通过实例查询链id
 * Summary: 蚂蚁区块链通过实例查询链id
 */
func (client *Client) QueryBlockchainInstanceBizidEx(request *QueryBlockchainInstanceBizidRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryBlockchainInstanceBizidResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryBlockchainInstanceBizidResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.blockchain.instance.bizid.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建联盟接口
 * Summary: 创建联盟接口
 */
func (client *Client) CreateApiConsortium(request *CreateApiConsortiumRequest) (_result *CreateApiConsortiumResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateApiConsortiumResponse{}
	_body, _err := client.CreateApiConsortiumEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建联盟接口
 * Summary: 创建联盟接口
 */
func (client *Client) CreateApiConsortiumEx(request *CreateApiConsortiumRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateApiConsortiumResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateApiConsortiumResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.api.consortium.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询链的小程序浏览器授权状态
 * Summary: 查询链的小程序浏览器授权状态
 */
func (client *Client) QueryApiMiniappbrowserAuthtype(request *QueryApiMiniappbrowserAuthtypeRequest) (_result *QueryApiMiniappbrowserAuthtypeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryApiMiniappbrowserAuthtypeResponse{}
	_body, _err := client.QueryApiMiniappbrowserAuthtypeEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询链的小程序浏览器授权状态
 * Summary: 查询链的小程序浏览器授权状态
 */
func (client *Client) QueryApiMiniappbrowserAuthtypeEx(request *QueryApiMiniappbrowserAuthtypeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryApiMiniappbrowserAuthtypeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryApiMiniappbrowserAuthtypeResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.api.miniappbrowser.authtype.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询某链当前块高
 * Summary: 查询某链当前块高
 */
func (client *Client) QueryStatisticsPortHeight(request *QueryStatisticsPortHeightRequest) (_result *QueryStatisticsPortHeightResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryStatisticsPortHeightResponse{}
	_body, _err := client.QueryStatisticsPortHeightEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询某链当前块高
 * Summary: 查询某链当前块高
 */
func (client *Client) QueryStatisticsPortHeightEx(request *QueryStatisticsPortHeightRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryStatisticsPortHeightResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryStatisticsPortHeightResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.statistics.port.height.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询授权的链id列表
 * Summary: 查询授权的链id列表
 */
func (client *Client) QueryStatisticPortBizid(request *QueryStatisticPortBizidRequest) (_result *QueryStatisticPortBizidResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryStatisticPortBizidResponse{}
	_body, _err := client.QueryStatisticPortBizidEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询授权的链id列表
 * Summary: 查询授权的链id列表
 */
func (client *Client) QueryStatisticPortBizidEx(request *QueryStatisticPortBizidRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryStatisticPortBizidResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryStatisticPortBizidResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.statistic.port.bizid.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 添加存量采集任务
 * Summary: 添加存量采集任务
 */
func (client *Client) AddStatisticsPortTask(request *AddStatisticsPortTaskRequest) (_result *AddStatisticsPortTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &AddStatisticsPortTaskResponse{}
	_body, _err := client.AddStatisticsPortTaskEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 添加存量采集任务
 * Summary: 添加存量采集任务
 */
func (client *Client) AddStatisticsPortTaskEx(request *AddStatisticsPortTaskRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *AddStatisticsPortTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AddStatisticsPortTaskResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.statistics.port.task.add"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询交易列表
 * Summary: 查询交易列表
 */
func (client *Client) QueryApiDwhTransaction(request *QueryApiDwhTransactionRequest) (_result *QueryApiDwhTransactionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryApiDwhTransactionResponse{}
	_body, _err := client.QueryApiDwhTransactionEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询交易列表
 * Summary: 查询交易列表
 */
func (client *Client) QueryApiDwhTransactionEx(request *QueryApiDwhTransactionRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryApiDwhTransactionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryApiDwhTransactionResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.api.dwh.transaction.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 根据自定义条件查询用户列表
 * Summary: 查询账户列表
 */
func (client *Client) QueryApiDwhAccount(request *QueryApiDwhAccountRequest) (_result *QueryApiDwhAccountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryApiDwhAccountResponse{}
	_body, _err := client.QueryApiDwhAccountEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 根据自定义条件查询用户列表
 * Summary: 查询账户列表
 */
func (client *Client) QueryApiDwhAccountEx(request *QueryApiDwhAccountRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryApiDwhAccountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryApiDwhAccountResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.api.dwh.account.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询合约接口
 * Summary: 查询合约
 */
func (client *Client) QueryApiDwhContract(request *QueryApiDwhContractRequest) (_result *QueryApiDwhContractResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryApiDwhContractResponse{}
	_body, _err := client.QueryApiDwhContractEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询合约接口
 * Summary: 查询合约
 */
func (client *Client) QueryApiDwhContractEx(request *QueryApiDwhContractRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryApiDwhContractResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryApiDwhContractResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.api.dwh.contract.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 单独查询交易
 * Summary: 查询链上交易
 */
func (client *Client) QueryApiDwhbTransaction(request *QueryApiDwhbTransactionRequest) (_result *QueryApiDwhbTransactionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryApiDwhbTransactionResponse{}
	_body, _err := client.QueryApiDwhbTransactionEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 单独查询交易
 * Summary: 查询链上交易
 */
func (client *Client) QueryApiDwhbTransactionEx(request *QueryApiDwhbTransactionRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryApiDwhbTransactionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryApiDwhbTransactionResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.api.dwhb.transaction.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 删除合约
 * Summary: 删除合约
 */
func (client *Client) DeleteCaasContractService(request *DeleteCaasContractServiceRequest) (_result *DeleteCaasContractServiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteCaasContractServiceResponse{}
	_body, _err := client.DeleteCaasContractServiceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 删除合约
 * Summary: 删除合约
 */
func (client *Client) DeleteCaasContractServiceEx(request *DeleteCaasContractServiceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteCaasContractServiceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteCaasContractServiceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.caas.contract.service.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 新建合约服务
 * Summary: 新建合约服务
 */
func (client *Client) CreateCaasContractService(request *CreateCaasContractServiceRequest) (_result *CreateCaasContractServiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateCaasContractServiceResponse{}
	_body, _err := client.CreateCaasContractServiceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 新建合约服务
 * Summary: 新建合约服务
 */
func (client *Client) CreateCaasContractServiceEx(request *CreateCaasContractServiceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateCaasContractServiceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateCaasContractServiceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.caas.contract.service.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 合约列表查询
 * Summary: 合约列表查询
 */
func (client *Client) PagequeryCaasContractService(request *PagequeryCaasContractServiceRequest) (_result *PagequeryCaasContractServiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &PagequeryCaasContractServiceResponse{}
	_body, _err := client.PagequeryCaasContractServiceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 合约列表查询
 * Summary: 合约列表查询
 */
func (client *Client) PagequeryCaasContractServiceEx(request *PagequeryCaasContractServiceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *PagequeryCaasContractServiceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &PagequeryCaasContractServiceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.caas.contract.service.pagequery"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询创建实例进度
 * Summary: 查询创建实例进度
 */
func (client *Client) QueryCaasContractService(request *QueryCaasContractServiceRequest) (_result *QueryCaasContractServiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryCaasContractServiceResponse{}
	_body, _err := client.QueryCaasContractServiceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询创建实例进度
 * Summary: 查询创建实例进度
 */
func (client *Client) QueryCaasContractServiceEx(request *QueryCaasContractServiceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryCaasContractServiceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryCaasContractServiceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.caas.contract.service.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 自动化部署合约服务
 * Summary: 自动化部署合约服务
 */
func (client *Client) DeployCaasContractService(request *DeployCaasContractServiceRequest) (_result *DeployCaasContractServiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeployCaasContractServiceResponse{}
	_body, _err := client.DeployCaasContractServiceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 自动化部署合约服务
 * Summary: 自动化部署合约服务
 */
func (client *Client) DeployCaasContractServiceEx(request *DeployCaasContractServiceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeployCaasContractServiceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeployCaasContractServiceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.caas.contract.service.deploy"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询合约类型列表
 * Summary: 查询合约类型列表
 */
func (client *Client) ListCaasContractService(request *ListCaasContractServiceRequest) (_result *ListCaasContractServiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListCaasContractServiceResponse{}
	_body, _err := client.ListCaasContractServiceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询合约类型列表
 * Summary: 查询合约类型列表
 */
func (client *Client) ListCaasContractServiceEx(request *ListCaasContractServiceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListCaasContractServiceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListCaasContractServiceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.caas.contract.service.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 合约详情
 * Summary: 合约详情
 */
func (client *Client) DetailCaasContractService(request *DetailCaasContractServiceRequest) (_result *DetailCaasContractServiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DetailCaasContractServiceResponse{}
	_body, _err := client.DetailCaasContractServiceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 合约详情
 * Summary: 合约详情
 */
func (client *Client) DetailCaasContractServiceEx(request *DetailCaasContractServiceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DetailCaasContractServiceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DetailCaasContractServiceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.caas.contract.service.detail"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 新建应用
 * Summary: 新建应用
 */
func (client *Client) CreateCaasApplicationManage(request *CreateCaasApplicationManageRequest) (_result *CreateCaasApplicationManageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateCaasApplicationManageResponse{}
	_body, _err := client.CreateCaasApplicationManageEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 新建应用
 * Summary: 新建应用
 */
func (client *Client) CreateCaasApplicationManageEx(request *CreateCaasApplicationManageRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateCaasApplicationManageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateCaasApplicationManageResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.caas.application.manage.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 应用列表查询
 * Summary: 应用列表查询
 */
func (client *Client) PagequeryCaasApplicationManage(request *PagequeryCaasApplicationManageRequest) (_result *PagequeryCaasApplicationManageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &PagequeryCaasApplicationManageResponse{}
	_body, _err := client.PagequeryCaasApplicationManageEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 应用列表查询
 * Summary: 应用列表查询
 */
func (client *Client) PagequeryCaasApplicationManageEx(request *PagequeryCaasApplicationManageRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *PagequeryCaasApplicationManageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &PagequeryCaasApplicationManageResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.caas.application.manage.pagequery"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询合约绑定关系
 * Summary: 查询合约绑定关系
 */
func (client *Client) QueryCaasApplicationManage(request *QueryCaasApplicationManageRequest) (_result *QueryCaasApplicationManageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryCaasApplicationManageResponse{}
	_body, _err := client.QueryCaasApplicationManageEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询合约绑定关系
 * Summary: 查询合约绑定关系
 */
func (client *Client) QueryCaasApplicationManageEx(request *QueryCaasApplicationManageRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryCaasApplicationManageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryCaasApplicationManageResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.caas.application.manage.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 解除授权
 * Summary: 解除授权
 */
func (client *Client) UnbindCaasApplicationManage(request *UnbindCaasApplicationManageRequest) (_result *UnbindCaasApplicationManageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UnbindCaasApplicationManageResponse{}
	_body, _err := client.UnbindCaasApplicationManageEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 解除授权
 * Summary: 解除授权
 */
func (client *Client) UnbindCaasApplicationManageEx(request *UnbindCaasApplicationManageRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UnbindCaasApplicationManageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UnbindCaasApplicationManageResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.caas.application.manage.unbind"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 绑定合约
 * Summary: 绑定合约
 */
func (client *Client) BindCaasApplicationManage(request *BindCaasApplicationManageRequest) (_result *BindCaasApplicationManageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &BindCaasApplicationManageResponse{}
	_body, _err := client.BindCaasApplicationManageEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 绑定合约
 * Summary: 绑定合约
 */
func (client *Client) BindCaasApplicationManageEx(request *BindCaasApplicationManageRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *BindCaasApplicationManageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BindCaasApplicationManageResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.caas.application.manage.bind"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查看sk
 * Summary: 查看sk
 */
func (client *Client) GetCaasApplicationManage(request *GetCaasApplicationManageRequest) (_result *GetCaasApplicationManageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetCaasApplicationManageResponse{}
	_body, _err := client.GetCaasApplicationManageEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查看sk
 * Summary: 查看sk
 */
func (client *Client) GetCaasApplicationManageEx(request *GetCaasApplicationManageRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetCaasApplicationManageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetCaasApplicationManageResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.caas.application.manage.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 智能合约市场列表查询
 * Summary: 智能合约市场列表查询
 */
func (client *Client) PagequeryCaasContractMarket(request *PagequeryCaasContractMarketRequest) (_result *PagequeryCaasContractMarketResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &PagequeryCaasContractMarketResponse{}
	_body, _err := client.PagequeryCaasContractMarketEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 智能合约市场列表查询
 * Summary: 智能合约市场列表查询
 */
func (client *Client) PagequeryCaasContractMarketEx(request *PagequeryCaasContractMarketRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *PagequeryCaasContractMarketResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &PagequeryCaasContractMarketResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.caas.contract.market.pagequery"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 合约部署记录
 * Summary: 合约部署记录
 */
func (client *Client) CreateContractRecord(request *CreateContractRecordRequest) (_result *CreateContractRecordResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateContractRecordResponse{}
	_body, _err := client.CreateContractRecordEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 合约部署记录
 * Summary: 合约部署记录
 */
func (client *Client) CreateContractRecordEx(request *CreateContractRecordRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateContractRecordResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateContractRecordResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.contract.record.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 部署记录详情
 * Summary: 部署记录详情
 */
func (client *Client) GetContractRecord(request *GetContractRecordRequest) (_result *GetContractRecordResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetContractRecordResponse{}
	_body, _err := client.GetContractRecordEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 部署记录详情
 * Summary: 部署记录详情
 */
func (client *Client) GetContractRecordEx(request *GetContractRecordRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetContractRecordResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetContractRecordResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.contract.record.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 合约升级更新
 * Summary: 合约升级更新
 */
func (client *Client) UpdateContractRecord(request *UpdateContractRecordRequest) (_result *UpdateContractRecordResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateContractRecordResponse{}
	_body, _err := client.UpdateContractRecordEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 合约升级更新
 * Summary: 合约升级更新
 */
func (client *Client) UpdateContractRecordEx(request *UpdateContractRecordRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateContractRecordResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateContractRecordResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.contract.record.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 发布合约服务
 * Summary: 发布合约服务
 */
func (client *Client) OnlineContractRecord(request *OnlineContractRecordRequest) (_result *OnlineContractRecordResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &OnlineContractRecordResponse{}
	_body, _err := client.OnlineContractRecordEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 发布合约服务
 * Summary: 发布合约服务
 */
func (client *Client) OnlineContractRecordEx(request *OnlineContractRecordRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *OnlineContractRecordResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &OnlineContractRecordResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.contract.record.online"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 合约服务下线
 * Summary: 合约服务下线
 */
func (client *Client) OfflineContractRecord(request *OfflineContractRecordRequest) (_result *OfflineContractRecordResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &OfflineContractRecordResponse{}
	_body, _err := client.OfflineContractRecordEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 合约服务下线
 * Summary: 合约服务下线
 */
func (client *Client) OfflineContractRecordEx(request *OfflineContractRecordRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *OfflineContractRecordResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &OfflineContractRecordResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.contract.record.offline"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询合约部署记录
 * Summary: 查询合约部署记录
 */
func (client *Client) QueryContractRecord(request *QueryContractRecordRequest) (_result *QueryContractRecordResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryContractRecordResponse{}
	_body, _err := client.QueryContractRecordEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询合约部署记录
 * Summary: 查询合约部署记录
 */
func (client *Client) QueryContractRecordEx(request *QueryContractRecordRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryContractRecordResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryContractRecordResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.contract.record.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 合约代理调用
 * Summary: 合约代理调用
 */
func (client *Client) ExecContractDelegate(request *ExecContractDelegateRequest) (_result *ExecContractDelegateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExecContractDelegateResponse{}
	_body, _err := client.ExecContractDelegateEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 合约代理调用
 * Summary: 合约代理调用
 */
func (client *Client) ExecContractDelegateEx(request *ExecContractDelegateRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExecContractDelegateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ExecContractDelegateResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.contract.delegate.exec"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 调用合约服务
 * Summary: 调用合约服务
 */
func (client *Client) ExecContractService(request *ExecContractServiceRequest) (_result *ExecContractServiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExecContractServiceResponse{}
	_body, _err := client.ExecContractServiceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 调用合约服务
 * Summary: 调用合约服务
 */
func (client *Client) ExecContractServiceEx(request *ExecContractServiceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExecContractServiceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ExecContractServiceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.contract.service.exec"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取当前租户具有访问权限的合约链配置列表，方便在client（IDE插件、SDK等）访问合约链
 * Summary: 获取合约链配置
 */
func (client *Client) GetContractConfigChain(request *GetContractConfigChainRequest) (_result *GetContractConfigChainResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetContractConfigChainResponse{}
	_body, _err := client.GetContractConfigChainEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取当前租户具有访问权限的合约链配置列表，方便在client（IDE插件、SDK等）访问合约链
 * Summary: 获取合约链配置
 */
func (client *Client) GetContractConfigChainEx(request *GetContractConfigChainRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetContractConfigChainResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetContractConfigChainResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.contract.config.chain.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 申请获取一个可以上传文件到oss的url，此url可用时间默认为30秒
 * Summary: 获取oss的可用url上传文件
 */
func (client *Client) GetContractAbiUrl(request *GetContractAbiUrlRequest) (_result *GetContractAbiUrlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetContractAbiUrlResponse{}
	_body, _err := client.GetContractAbiUrlEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 申请获取一个可以上传文件到oss的url，此url可用时间默认为30秒
 * Summary: 获取oss的可用url上传文件
 */
func (client *Client) GetContractAbiUrlEx(request *GetContractAbiUrlRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetContractAbiUrlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetContractAbiUrlResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.contract.abi.url.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 申请获取一个可以上传bytecode文件到oss的url，此url可用时间默认为30秒
 * Summary: 获取oss的可用url上传文件
 */
func (client *Client) GetContractBytecodeUrl(request *GetContractBytecodeUrlRequest) (_result *GetContractBytecodeUrlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetContractBytecodeUrlResponse{}
	_body, _err := client.GetContractBytecodeUrlEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 申请获取一个可以上传bytecode文件到oss的url，此url可用时间默认为30秒
 * Summary: 获取oss的可用url上传文件
 */
func (client *Client) GetContractBytecodeUrlEx(request *GetContractBytecodeUrlRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetContractBytecodeUrlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetContractBytecodeUrlResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.contract.bytecode.url.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 上传批量查询数据文件
 * Summary: 上传批量查询数据文件
 */
func (client *Client) UploadDataFileBatchquery(request *UploadDataFileBatchqueryRequest) (_result *UploadDataFileBatchqueryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UploadDataFileBatchqueryResponse{}
	_body, _err := client.UploadDataFileBatchqueryEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 上传批量查询数据文件
 * Summary: 上传批量查询数据文件
 */
func (client *Client) UploadDataFileBatchqueryEx(request *UploadDataFileBatchqueryRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UploadDataFileBatchqueryResponse, _err error) {
	if !tea.BoolValue(util.IsUnset(request.FileObject)) {
		uploadReq := &CreateAntcloudGatewayxFileUploadRequest{
			AuthToken: request.AuthToken,
			ApiCode:   tea.String("baas.data.file.batchquery.upload"),
			FileName:  request.FileObjectName,
		}
		uploadResp, _err := client.CreateAntcloudGatewayxFileUploadEx(uploadReq, headers, runtime)
		if _err != nil {
			return _result, _err
		}

		if !tea.BoolValue(antchainutil.IsSuccess(uploadResp.ResultCode, tea.String("ok"))) {
			uploadDataFileBatchqueryResponse := &UploadDataFileBatchqueryResponse{
				ReqMsgId:   uploadResp.ReqMsgId,
				ResultCode: uploadResp.ResultCode,
				ResultMsg:  uploadResp.ResultMsg,
			}
			_result = uploadDataFileBatchqueryResponse
			return _result, _err
		}

		uploadHeaders := antchainutil.ParseUploadHeaders(uploadResp.UploadHeaders)
		_err = antchainutil.PutObject(request.FileObject, uploadHeaders, uploadResp.UploadUrl)
		if _err != nil {
			return _result, _err
		}
		request.FileId = uploadResp.FileId
	}

	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UploadDataFileBatchqueryResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.data.file.batchquery.upload"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取查询数据集任务结果
 * Summary: 获取查询数据集任务结果
 */
func (client *Client) QueryDataResultBatchquery(request *QueryDataResultBatchqueryRequest) (_result *QueryDataResultBatchqueryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryDataResultBatchqueryResponse{}
	_body, _err := client.QueryDataResultBatchqueryEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取查询数据集任务结果
 * Summary: 获取查询数据集任务结果
 */
func (client *Client) QueryDataResultBatchqueryEx(request *QueryDataResultBatchqueryRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryDataResultBatchqueryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryDataResultBatchqueryResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.data.result.batchquery.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 数据授权服务创建参与方
 * Summary: 数据授权服务创建参与方
 */
func (client *Client) CreateDataauthorizationParticipant(request *CreateDataauthorizationParticipantRequest) (_result *CreateDataauthorizationParticipantResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateDataauthorizationParticipantResponse{}
	_body, _err := client.CreateDataauthorizationParticipantEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 数据授权服务创建参与方
 * Summary: 数据授权服务创建参与方
 */
func (client *Client) CreateDataauthorizationParticipantEx(request *CreateDataauthorizationParticipantRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateDataauthorizationParticipantResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateDataauthorizationParticipantResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.dataauthorization.participant.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 数据授权服务删除参与方
 * Summary: 数据授权服务删除参与方
 */
func (client *Client) DeleteDataauthorizationParticipant(request *DeleteDataauthorizationParticipantRequest) (_result *DeleteDataauthorizationParticipantResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteDataauthorizationParticipantResponse{}
	_body, _err := client.DeleteDataauthorizationParticipantEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 数据授权服务删除参与方
 * Summary: 数据授权服务删除参与方
 */
func (client *Client) DeleteDataauthorizationParticipantEx(request *DeleteDataauthorizationParticipantRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteDataauthorizationParticipantResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteDataauthorizationParticipantResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.dataauthorization.participant.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 数据授权服务修改用户信息
 * Summary: 数据授权服务修改用户信息
 */
func (client *Client) UpdateDataauthorizationParticipant(request *UpdateDataauthorizationParticipantRequest) (_result *UpdateDataauthorizationParticipantResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateDataauthorizationParticipantResponse{}
	_body, _err := client.UpdateDataauthorizationParticipantEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 数据授权服务修改用户信息
 * Summary: 数据授权服务修改用户信息
 */
func (client *Client) UpdateDataauthorizationParticipantEx(request *UpdateDataauthorizationParticipantRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateDataauthorizationParticipantResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateDataauthorizationParticipantResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.dataauthorization.participant.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 数据授权服务查询参与方信息
 * Summary: 数据授权服务查询参与方信息
 */
func (client *Client) QueryDataauthorizationParticipant(request *QueryDataauthorizationParticipantRequest) (_result *QueryDataauthorizationParticipantResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryDataauthorizationParticipantResponse{}
	_body, _err := client.QueryDataauthorizationParticipantEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 数据授权服务查询参与方信息
 * Summary: 数据授权服务查询参与方信息
 */
func (client *Client) QueryDataauthorizationParticipantEx(request *QueryDataauthorizationParticipantRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryDataauthorizationParticipantResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryDataauthorizationParticipantResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.dataauthorization.participant.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 数据授权服务根据角色获取用户列表
 * Summary: 数据授权服务根据角色获取用户列表
 */
func (client *Client) ListDataauthorizationParticipant(request *ListDataauthorizationParticipantRequest) (_result *ListDataauthorizationParticipantResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListDataauthorizationParticipantResponse{}
	_body, _err := client.ListDataauthorizationParticipantEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 数据授权服务根据角色获取用户列表
 * Summary: 数据授权服务根据角色获取用户列表
 */
func (client *Client) ListDataauthorizationParticipantEx(request *ListDataauthorizationParticipantRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListDataauthorizationParticipantResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListDataauthorizationParticipantResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.dataauthorization.participant.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 数据授权服务创建数据目录
 * Summary: 数据授权服务创建数据目录
 */
func (client *Client) CreateDataauthorizationDataEntity(request *CreateDataauthorizationDataEntityRequest) (_result *CreateDataauthorizationDataEntityResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateDataauthorizationDataEntityResponse{}
	_body, _err := client.CreateDataauthorizationDataEntityEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 数据授权服务创建数据目录
 * Summary: 数据授权服务创建数据目录
 */
func (client *Client) CreateDataauthorizationDataEntityEx(request *CreateDataauthorizationDataEntityRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateDataauthorizationDataEntityResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateDataauthorizationDataEntityResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.dataauthorization.data.entity.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 数据授权服务查询数据目录
 * Summary: 数据授权服务查询数据目录
 */
func (client *Client) QueryDataauthorizationDataEntity(request *QueryDataauthorizationDataEntityRequest) (_result *QueryDataauthorizationDataEntityResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryDataauthorizationDataEntityResponse{}
	_body, _err := client.QueryDataauthorizationDataEntityEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 数据授权服务查询数据目录
 * Summary: 数据授权服务查询数据目录
 */
func (client *Client) QueryDataauthorizationDataEntityEx(request *QueryDataauthorizationDataEntityRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryDataauthorizationDataEntityResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryDataauthorizationDataEntityResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.dataauthorization.data.entity.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 数据授权服务公钥矩阵更新
 * Summary: 数据授权服务公钥矩阵更新
 */
func (client *Client) UpdateDataauthorizationPublicKey(request *UpdateDataauthorizationPublicKeyRequest) (_result *UpdateDataauthorizationPublicKeyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateDataauthorizationPublicKeyResponse{}
	_body, _err := client.UpdateDataauthorizationPublicKeyEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 数据授权服务公钥矩阵更新
 * Summary: 数据授权服务公钥矩阵更新
 */
func (client *Client) UpdateDataauthorizationPublicKeyEx(request *UpdateDataauthorizationPublicKeyRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateDataauthorizationPublicKeyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateDataauthorizationPublicKeyResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.dataauthorization.public.key.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 数据授权服务公钥矩阵查询
 * Summary: 数据授权服务公钥矩阵查询
 */
func (client *Client) ListDataauthorizationPublicKey(request *ListDataauthorizationPublicKeyRequest) (_result *ListDataauthorizationPublicKeyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListDataauthorizationPublicKeyResponse{}
	_body, _err := client.ListDataauthorizationPublicKeyEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 数据授权服务公钥矩阵查询
 * Summary: 数据授权服务公钥矩阵查询
 */
func (client *Client) ListDataauthorizationPublicKeyEx(request *ListDataauthorizationPublicKeyRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListDataauthorizationPublicKeyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListDataauthorizationPublicKeyResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.dataauthorization.public.key.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 数据授权服务开通服务
 * Summary: 数据授权服务开通服务
 */
func (client *Client) OpenDataauthorizationAuthorizationService(request *OpenDataauthorizationAuthorizationServiceRequest) (_result *OpenDataauthorizationAuthorizationServiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &OpenDataauthorizationAuthorizationServiceResponse{}
	_body, _err := client.OpenDataauthorizationAuthorizationServiceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 数据授权服务开通服务
 * Summary: 数据授权服务开通服务
 */
func (client *Client) OpenDataauthorizationAuthorizationServiceEx(request *OpenDataauthorizationAuthorizationServiceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *OpenDataauthorizationAuthorizationServiceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &OpenDataauthorizationAuthorizationServiceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.dataauthorization.authorization.service.open"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 数据授权服务关闭租户服务
 * Summary: 数据授权服务关闭租户服务
 */
func (client *Client) CloseDataauthorizationAuthorizationService(request *CloseDataauthorizationAuthorizationServiceRequest) (_result *CloseDataauthorizationAuthorizationServiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CloseDataauthorizationAuthorizationServiceResponse{}
	_body, _err := client.CloseDataauthorizationAuthorizationServiceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 数据授权服务关闭租户服务
 * Summary: 数据授权服务关闭租户服务
 */
func (client *Client) CloseDataauthorizationAuthorizationServiceEx(request *CloseDataauthorizationAuthorizationServiceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CloseDataauthorizationAuthorizationServiceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CloseDataauthorizationAuthorizationServiceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.dataauthorization.authorization.service.close"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 数据授权服务申请权限
 * Summary: 数据授权服务申请权限
 */
func (client *Client) ApplyDataauthorizationAuthorization(request *ApplyDataauthorizationAuthorizationRequest) (_result *ApplyDataauthorizationAuthorizationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ApplyDataauthorizationAuthorizationResponse{}
	_body, _err := client.ApplyDataauthorizationAuthorizationEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 数据授权服务申请权限
 * Summary: 数据授权服务申请权限
 */
func (client *Client) ApplyDataauthorizationAuthorizationEx(request *ApplyDataauthorizationAuthorizationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ApplyDataauthorizationAuthorizationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ApplyDataauthorizationAuthorizationResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.dataauthorization.authorization.apply"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 数据授权服务流程步骤处理
 * Summary: 数据授权服务流程步骤处理
 */
func (client *Client) ExecDataauthorizationProcess(request *ExecDataauthorizationProcessRequest) (_result *ExecDataauthorizationProcessResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExecDataauthorizationProcessResponse{}
	_body, _err := client.ExecDataauthorizationProcessEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 数据授权服务流程步骤处理
 * Summary: 数据授权服务流程步骤处理
 */
func (client *Client) ExecDataauthorizationProcessEx(request *ExecDataauthorizationProcessRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExecDataauthorizationProcessResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ExecDataauthorizationProcessResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.dataauthorization.process.exec"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 数据授权服务取消授权
 * Summary: 数据授权服务取消授权
 */
func (client *Client) CancelDataauthorizationAuthorization(request *CancelDataauthorizationAuthorizationRequest) (_result *CancelDataauthorizationAuthorizationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CancelDataauthorizationAuthorizationResponse{}
	_body, _err := client.CancelDataauthorizationAuthorizationEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 数据授权服务取消授权
 * Summary: 数据授权服务取消授权
 */
func (client *Client) CancelDataauthorizationAuthorizationEx(request *CancelDataauthorizationAuthorizationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CancelDataauthorizationAuthorizationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CancelDataauthorizationAuthorizationResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.dataauthorization.authorization.cancel"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 数据授权服务权限校验
 * Summary: 数据授权服务权限校验
 */
func (client *Client) CheckDataauthorizationAuthorization(request *CheckDataauthorizationAuthorizationRequest) (_result *CheckDataauthorizationAuthorizationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CheckDataauthorizationAuthorizationResponse{}
	_body, _err := client.CheckDataauthorizationAuthorizationEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 数据授权服务权限校验
 * Summary: 数据授权服务权限校验
 */
func (client *Client) CheckDataauthorizationAuthorizationEx(request *CheckDataauthorizationAuthorizationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CheckDataauthorizationAuthorizationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CheckDataauthorizationAuthorizationResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.dataauthorization.authorization.check"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 数据授权服务流程信息查询
 * Summary: 数据授权服务流程信息查询
 */
func (client *Client) QueryDataauthorizationProcess(request *QueryDataauthorizationProcessRequest) (_result *QueryDataauthorizationProcessResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryDataauthorizationProcessResponse{}
	_body, _err := client.QueryDataauthorizationProcessEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 数据授权服务流程信息查询
 * Summary: 数据授权服务流程信息查询
 */
func (client *Client) QueryDataauthorizationProcessEx(request *QueryDataauthorizationProcessRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryDataauthorizationProcessResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryDataauthorizationProcessResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.dataauthorization.process.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 数据授权服务存证数据上链
 * Summary: 数据授权服务存证数据上链
 */
func (client *Client) SendDataauthorizationDepositData(request *SendDataauthorizationDepositDataRequest) (_result *SendDataauthorizationDepositDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SendDataauthorizationDepositDataResponse{}
	_body, _err := client.SendDataauthorizationDepositDataEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 数据授权服务存证数据上链
 * Summary: 数据授权服务存证数据上链
 */
func (client *Client) SendDataauthorizationDepositDataEx(request *SendDataauthorizationDepositDataRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SendDataauthorizationDepositDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SendDataauthorizationDepositDataResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.dataauthorization.deposit.data.send"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 数据授权服务查询存证数据
 * Summary: 数据授权服务查询存证数据
 */
func (client *Client) QueryDataauthorizationDepositData(request *QueryDataauthorizationDepositDataRequest) (_result *QueryDataauthorizationDepositDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryDataauthorizationDepositDataResponse{}
	_body, _err := client.QueryDataauthorizationDepositDataEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 数据授权服务查询存证数据
 * Summary: 数据授权服务查询存证数据
 */
func (client *Client) QueryDataauthorizationDepositDataEx(request *QueryDataauthorizationDepositDataRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryDataauthorizationDepositDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryDataauthorizationDepositDataResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.dataauthorization.deposit.data.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 数据授权服务恢复权限
 * Summary: 数据授权服务恢复权限
 */
func (client *Client) ResumeDataauthorizationAuthorization(request *ResumeDataauthorizationAuthorizationRequest) (_result *ResumeDataauthorizationAuthorizationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ResumeDataauthorizationAuthorizationResponse{}
	_body, _err := client.ResumeDataauthorizationAuthorizationEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 数据授权服务恢复权限
 * Summary: 数据授权服务恢复权限
 */
func (client *Client) ResumeDataauthorizationAuthorizationEx(request *ResumeDataauthorizationAuthorizationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ResumeDataauthorizationAuthorizationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ResumeDataauthorizationAuthorizationResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.dataauthorization.authorization.resume"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 数据授权服务更新数据信息
 * Summary: 数据授权服务更新数据信息
 */
func (client *Client) UpdateDataauthorizationDataEntity(request *UpdateDataauthorizationDataEntityRequest) (_result *UpdateDataauthorizationDataEntityResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateDataauthorizationDataEntityResponse{}
	_body, _err := client.UpdateDataauthorizationDataEntityEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 数据授权服务更新数据信息
 * Summary: 数据授权服务更新数据信息
 */
func (client *Client) UpdateDataauthorizationDataEntityEx(request *UpdateDataauthorizationDataEntityRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateDataauthorizationDataEntityResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateDataauthorizationDataEntityResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.dataauthorization.data.entity.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 数据授权服务删除数据对象
 * Summary: 数据授权服务删除数据对象
 */
func (client *Client) DeleteDataauthorizationDataEntity(request *DeleteDataauthorizationDataEntityRequest) (_result *DeleteDataauthorizationDataEntityResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteDataauthorizationDataEntityResponse{}
	_body, _err := client.DeleteDataauthorizationDataEntityEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 数据授权服务删除数据对象
 * Summary: 数据授权服务删除数据对象
 */
func (client *Client) DeleteDataauthorizationDataEntityEx(request *DeleteDataauthorizationDataEntityRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteDataauthorizationDataEntityResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteDataauthorizationDataEntityResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.dataauthorization.data.entity.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 数据授权服务创建自定义ID用户
 * Summary: 数据授权服务创建自定义ID用户
 */
func (client *Client) CreateDataauthorizationCustomParticipant(request *CreateDataauthorizationCustomParticipantRequest) (_result *CreateDataauthorizationCustomParticipantResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateDataauthorizationCustomParticipantResponse{}
	_body, _err := client.CreateDataauthorizationCustomParticipantEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 数据授权服务创建自定义ID用户
 * Summary: 数据授权服务创建自定义ID用户
 */
func (client *Client) CreateDataauthorizationCustomParticipantEx(request *CreateDataauthorizationCustomParticipantRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateDataauthorizationCustomParticipantResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateDataauthorizationCustomParticipantResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.dataauthorization.custom.participant.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 数据授权服务创建自定义ID数据对象
 * Summary: 数据授权服务创建自定义ID数据对象
 */
func (client *Client) CreateDataauthorizationCustomData(request *CreateDataauthorizationCustomDataRequest) (_result *CreateDataauthorizationCustomDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateDataauthorizationCustomDataResponse{}
	_body, _err := client.CreateDataauthorizationCustomDataEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 数据授权服务创建自定义ID数据对象
 * Summary: 数据授权服务创建自定义ID数据对象
 */
func (client *Client) CreateDataauthorizationCustomDataEx(request *CreateDataauthorizationCustomDataRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateDataauthorizationCustomDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateDataauthorizationCustomDataResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.dataauthorization.custom.data.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 数据授权服务申请权限
 * Summary: 数据授权服务申请权限
 */
func (client *Client) ApplyDataauthorizationAuthorizationWithsignature(request *ApplyDataauthorizationAuthorizationWithsignatureRequest) (_result *ApplyDataauthorizationAuthorizationWithsignatureResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ApplyDataauthorizationAuthorizationWithsignatureResponse{}
	_body, _err := client.ApplyDataauthorizationAuthorizationWithsignatureEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 数据授权服务申请权限
 * Summary: 数据授权服务申请权限
 */
func (client *Client) ApplyDataauthorizationAuthorizationWithsignatureEx(request *ApplyDataauthorizationAuthorizationWithsignatureRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ApplyDataauthorizationAuthorizationWithsignatureResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ApplyDataauthorizationAuthorizationWithsignatureResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.dataauthorization.authorization.withsignature.apply"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 数据授权服务流程步骤处理
 * Summary: 数据授权服务流程步骤处理
 */
func (client *Client) ExecDataauthorizationProcessWithsignature(request *ExecDataauthorizationProcessWithsignatureRequest) (_result *ExecDataauthorizationProcessWithsignatureResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExecDataauthorizationProcessWithsignatureResponse{}
	_body, _err := client.ExecDataauthorizationProcessWithsignatureEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 数据授权服务流程步骤处理
 * Summary: 数据授权服务流程步骤处理
 */
func (client *Client) ExecDataauthorizationProcessWithsignatureEx(request *ExecDataauthorizationProcessWithsignatureRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExecDataauthorizationProcessWithsignatureResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ExecDataauthorizationProcessWithsignatureResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.dataauthorization.process.withsignature.exec"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建数据模型
 * Summary: 创建数据模型
 */
func (client *Client) CreateDataauthorizationDataModel(request *CreateDataauthorizationDataModelRequest) (_result *CreateDataauthorizationDataModelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateDataauthorizationDataModelResponse{}
	_body, _err := client.CreateDataauthorizationDataModelEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建数据模型
 * Summary: 创建数据模型
 */
func (client *Client) CreateDataauthorizationDataModelEx(request *CreateDataauthorizationDataModelRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateDataauthorizationDataModelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateDataauthorizationDataModelResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.dataauthorization.data.model.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 数据模型修改
 * Summary: 数据模型修改
 */
func (client *Client) UpdateDataauthorizationDataModel(request *UpdateDataauthorizationDataModelRequest) (_result *UpdateDataauthorizationDataModelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateDataauthorizationDataModelResponse{}
	_body, _err := client.UpdateDataauthorizationDataModelEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 数据模型修改
 * Summary: 数据模型修改
 */
func (client *Client) UpdateDataauthorizationDataModelEx(request *UpdateDataauthorizationDataModelRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateDataauthorizationDataModelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateDataauthorizationDataModelResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.dataauthorization.data.model.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 删除数据模型
 * Summary: 删除数据模型
 */
func (client *Client) DeleteDataauthorizationDataModel(request *DeleteDataauthorizationDataModelRequest) (_result *DeleteDataauthorizationDataModelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteDataauthorizationDataModelResponse{}
	_body, _err := client.DeleteDataauthorizationDataModelEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 删除数据模型
 * Summary: 删除数据模型
 */
func (client *Client) DeleteDataauthorizationDataModelEx(request *DeleteDataauthorizationDataModelRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteDataauthorizationDataModelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteDataauthorizationDataModelResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.dataauthorization.data.model.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 分页查询参与方列表
 * Summary: 分页查询参与方列表
 */
func (client *Client) ListDataauthorizationParticipantPage(request *ListDataauthorizationParticipantPageRequest) (_result *ListDataauthorizationParticipantPageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListDataauthorizationParticipantPageResponse{}
	_body, _err := client.ListDataauthorizationParticipantPageEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 分页查询参与方列表
 * Summary: 分页查询参与方列表
 */
func (client *Client) ListDataauthorizationParticipantPageEx(request *ListDataauthorizationParticipantPageRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListDataauthorizationParticipantPageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListDataauthorizationParticipantPageResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.dataauthorization.participant.page.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询数据模型
 * Summary: 查询数据模型
 */
func (client *Client) QueryDataauthorizationDataModel(request *QueryDataauthorizationDataModelRequest) (_result *QueryDataauthorizationDataModelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryDataauthorizationDataModelResponse{}
	_body, _err := client.QueryDataauthorizationDataModelEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询数据模型
 * Summary: 查询数据模型
 */
func (client *Client) QueryDataauthorizationDataModelEx(request *QueryDataauthorizationDataModelRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryDataauthorizationDataModelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryDataauthorizationDataModelResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.dataauthorization.data.model.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 数据模型分页查询
 * Summary: 数据模型分页查询
 */
func (client *Client) ListDataauthorizationDatamodelPage(request *ListDataauthorizationDatamodelPageRequest) (_result *ListDataauthorizationDatamodelPageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListDataauthorizationDatamodelPageResponse{}
	_body, _err := client.ListDataauthorizationDatamodelPageEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 数据模型分页查询
 * Summary: 数据模型分页查询
 */
func (client *Client) ListDataauthorizationDatamodelPageEx(request *ListDataauthorizationDatamodelPageRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListDataauthorizationDatamodelPageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListDataauthorizationDatamodelPageResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.dataauthorization.datamodel.page.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询可注册的数据模型列表
 * Summary: 查询可注册的数据模型列表
 */
func (client *Client) ListDataauthorizationAvailableDatamodel(request *ListDataauthorizationAvailableDatamodelRequest) (_result *ListDataauthorizationAvailableDatamodelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListDataauthorizationAvailableDatamodelResponse{}
	_body, _err := client.ListDataauthorizationAvailableDatamodelEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询可注册的数据模型列表
 * Summary: 查询可注册的数据模型列表
 */
func (client *Client) ListDataauthorizationAvailableDatamodelEx(request *ListDataauthorizationAvailableDatamodelRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListDataauthorizationAvailableDatamodelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListDataauthorizationAvailableDatamodelResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.dataauthorization.available.datamodel.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 根据模型名称、授权状态分页查询。
 * Summary: 数据注册情况查询
 */
func (client *Client) ListDataauthorizationDataentityPage(request *ListDataauthorizationDataentityPageRequest) (_result *ListDataauthorizationDataentityPageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListDataauthorizationDataentityPageResponse{}
	_body, _err := client.ListDataauthorizationDataentityPageEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 根据模型名称、授权状态分页查询。
 * Summary: 数据注册情况查询
 */
func (client *Client) ListDataauthorizationDataentityPageEx(request *ListDataauthorizationDataentityPageRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListDataauthorizationDataentityPageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListDataauthorizationDataentityPageResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.dataauthorization.dataentity.page.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 直接授权接口
 * Summary: 直接授权接口
 */
func (client *Client) CreateDataauthorizationDirectAuthorization(request *CreateDataauthorizationDirectAuthorizationRequest) (_result *CreateDataauthorizationDirectAuthorizationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateDataauthorizationDirectAuthorizationResponse{}
	_body, _err := client.CreateDataauthorizationDirectAuthorizationEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 直接授权接口
 * Summary: 直接授权接口
 */
func (client *Client) CreateDataauthorizationDirectAuthorizationEx(request *CreateDataauthorizationDirectAuthorizationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateDataauthorizationDirectAuthorizationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateDataauthorizationDirectAuthorizationResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.dataauthorization.direct.authorization.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 授权列表分页查询
 * Summary: 授权列表分页查询
 */
func (client *Client) ListDataauthorizationAuthorizationPage(request *ListDataauthorizationAuthorizationPageRequest) (_result *ListDataauthorizationAuthorizationPageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListDataauthorizationAuthorizationPageResponse{}
	_body, _err := client.ListDataauthorizationAuthorizationPageEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 授权列表分页查询
 * Summary: 授权列表分页查询
 */
func (client *Client) ListDataauthorizationAuthorizationPageEx(request *ListDataauthorizationAuthorizationPageRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListDataauthorizationAuthorizationPageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListDataauthorizationAuthorizationPageResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.dataauthorization.authorization.page.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询已授权的参与方列表
 * Summary: 查询已授权的参与方列表
 */
func (client *Client) ListDataauthorizationAuthparticipantPage(request *ListDataauthorizationAuthparticipantPageRequest) (_result *ListDataauthorizationAuthparticipantPageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListDataauthorizationAuthparticipantPageResponse{}
	_body, _err := client.ListDataauthorizationAuthparticipantPageEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询已授权的参与方列表
 * Summary: 查询已授权的参与方列表
 */
func (client *Client) ListDataauthorizationAuthparticipantPageEx(request *ListDataauthorizationAuthparticipantPageRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListDataauthorizationAuthparticipantPageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListDataauthorizationAuthparticipantPageResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.dataauthorization.authparticipant.page.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建数据资产
 * Summary: 创建数据资产
 */
func (client *Client) CreateDataauthorizationDataAssert(request *CreateDataauthorizationDataAssertRequest) (_result *CreateDataauthorizationDataAssertResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateDataauthorizationDataAssertResponse{}
	_body, _err := client.CreateDataauthorizationDataAssertEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建数据资产
 * Summary: 创建数据资产
 */
func (client *Client) CreateDataauthorizationDataAssertEx(request *CreateDataauthorizationDataAssertRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateDataauthorizationDataAssertResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateDataauthorizationDataAssertResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.dataauthorization.data.assert.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 数据资产更新
 * Summary: 数据资产更新
 */
func (client *Client) UpdateDataauthorizationDataAssert(request *UpdateDataauthorizationDataAssertRequest) (_result *UpdateDataauthorizationDataAssertResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateDataauthorizationDataAssertResponse{}
	_body, _err := client.UpdateDataauthorizationDataAssertEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 数据资产更新
 * Summary: 数据资产更新
 */
func (client *Client) UpdateDataauthorizationDataAssertEx(request *UpdateDataauthorizationDataAssertRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateDataauthorizationDataAssertResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateDataauthorizationDataAssertResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.dataauthorization.data.assert.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 数据资产删除
 * Summary: 数据资产删除
 */
func (client *Client) DeleteDataauthorizationDataAssert(request *DeleteDataauthorizationDataAssertRequest) (_result *DeleteDataauthorizationDataAssertResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteDataauthorizationDataAssertResponse{}
	_body, _err := client.DeleteDataauthorizationDataAssertEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 数据资产删除
 * Summary: 数据资产删除
 */
func (client *Client) DeleteDataauthorizationDataAssertEx(request *DeleteDataauthorizationDataAssertRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteDataauthorizationDataAssertResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteDataauthorizationDataAssertResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.dataauthorization.data.assert.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 授权服务代理授权接口
 * Summary: 代理授权
 */
func (client *Client) CreateDataauthorizationAgentAuthorization(request *CreateDataauthorizationAgentAuthorizationRequest) (_result *CreateDataauthorizationAgentAuthorizationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateDataauthorizationAgentAuthorizationResponse{}
	_body, _err := client.CreateDataauthorizationAgentAuthorizationEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 授权服务代理授权接口
 * Summary: 代理授权
 */
func (client *Client) CreateDataauthorizationAgentAuthorizationEx(request *CreateDataauthorizationAgentAuthorizationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateDataauthorizationAgentAuthorizationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateDataauthorizationAgentAuthorizationResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.dataauthorization.agent.authorization.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description:  授权列表相信信息查询
 * Summary:  授权列表相信信息查询
 */
func (client *Client) ListDataauthorizationAuthorityCert(request *ListDataauthorizationAuthorityCertRequest) (_result *ListDataauthorizationAuthorityCertResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListDataauthorizationAuthorityCertResponse{}
	_body, _err := client.ListDataauthorizationAuthorityCertEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description:  授权列表相信信息查询
 * Summary:  授权列表相信信息查询
 */
func (client *Client) ListDataauthorizationAuthorityCertEx(request *ListDataauthorizationAuthorityCertRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListDataauthorizationAuthorityCertResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListDataauthorizationAuthorityCertResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.dataauthorization.authority.cert.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 同步存证上链接口
 * Summary: 同步存证上链
 */
func (client *Client) SaveDataauthorizationDepositData(request *SaveDataauthorizationDepositDataRequest) (_result *SaveDataauthorizationDepositDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SaveDataauthorizationDepositDataResponse{}
	_body, _err := client.SaveDataauthorizationDepositDataEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 同步存证上链接口
 * Summary: 同步存证上链
 */
func (client *Client) SaveDataauthorizationDepositDataEx(request *SaveDataauthorizationDepositDataRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SaveDataauthorizationDepositDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SaveDataauthorizationDepositDataResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.dataauthorization.deposit.data.save"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 启动全量同步
 * Summary: 启动全量同步
 */
func (client *Client) StartDataauthorizationSyncData(request *StartDataauthorizationSyncDataRequest) (_result *StartDataauthorizationSyncDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartDataauthorizationSyncDataResponse{}
	_body, _err := client.StartDataauthorizationSyncDataEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 启动全量同步
 * Summary: 启动全量同步
 */
func (client *Client) StartDataauthorizationSyncDataEx(request *StartDataauthorizationSyncDataRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartDataauthorizationSyncDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartDataauthorizationSyncDataResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.dataauthorization.sync.data.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 通过额交易hash查询，返回hash对应区块链上信息。
 * Summary: 溯源区块查证接口
 */
func (client *Client) QueryTraceabilityTxCheck(request *QueryTraceabilityTxCheckRequest) (_result *QueryTraceabilityTxCheckResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryTraceabilityTxCheckResponse{}
	_body, _err := client.QueryTraceabilityTxCheckEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 通过额交易hash查询，返回hash对应区块链上信息。
 * Summary: 溯源区块查证接口
 */
func (client *Client) QueryTraceabilityTxCheckEx(request *QueryTraceabilityTxCheckRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryTraceabilityTxCheckResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryTraceabilityTxCheckResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.traceability.tx.check.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 通过链id，获取链的相关信息
 * Summary: 获取链信息接口
 */
func (client *Client) QueryTraceabilityBlockchainInfos(request *QueryTraceabilityBlockchainInfosRequest) (_result *QueryTraceabilityBlockchainInfosResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryTraceabilityBlockchainInfosResponse{}
	_body, _err := client.QueryTraceabilityBlockchainInfosEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 通过链id，获取链的相关信息
 * Summary: 获取链信息接口
 */
func (client *Client) QueryTraceabilityBlockchainInfosEx(request *QueryTraceabilityBlockchainInfosRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryTraceabilityBlockchainInfosResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryTraceabilityBlockchainInfosResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.traceability.blockchain.infos.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: BaaS区块链浏览器添加租户与链的访问权限
 * Summary: BaaS区块链浏览器添加权限
 */
func (client *Client) SaveBlockchainBrowserPrivilege(request *SaveBlockchainBrowserPrivilegeRequest) (_result *SaveBlockchainBrowserPrivilegeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SaveBlockchainBrowserPrivilegeResponse{}
	_body, _err := client.SaveBlockchainBrowserPrivilegeEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: BaaS区块链浏览器添加租户与链的访问权限
 * Summary: BaaS区块链浏览器添加权限
 */
func (client *Client) SaveBlockchainBrowserPrivilegeEx(request *SaveBlockchainBrowserPrivilegeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SaveBlockchainBrowserPrivilegeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SaveBlockchainBrowserPrivilegeResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.blockchain.browser.privilege.save"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询租户查看某链的权限
 * Summary: 查询租户查看某链的权限
 */
func (client *Client) QueryBlockchainBrowserPrivilege(request *QueryBlockchainBrowserPrivilegeRequest) (_result *QueryBlockchainBrowserPrivilegeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryBlockchainBrowserPrivilegeResponse{}
	_body, _err := client.QueryBlockchainBrowserPrivilegeEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询租户查看某链的权限
 * Summary: 查询租户查看某链的权限
 */
func (client *Client) QueryBlockchainBrowserPrivilegeEx(request *QueryBlockchainBrowserPrivilegeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryBlockchainBrowserPrivilegeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryBlockchainBrowserPrivilegeResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.blockchain.browser.privilege.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: BaaS区块链浏览器删除租户与链的访问权限
 * Summary: BaaS区块链浏览器添加权限
 */
func (client *Client) DeleteBlockchainBrowserPrivilege(request *DeleteBlockchainBrowserPrivilegeRequest) (_result *DeleteBlockchainBrowserPrivilegeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteBlockchainBrowserPrivilegeResponse{}
	_body, _err := client.DeleteBlockchainBrowserPrivilegeEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: BaaS区块链浏览器删除租户与链的访问权限
 * Summary: BaaS区块链浏览器添加权限
 */
func (client *Client) DeleteBlockchainBrowserPrivilegeEx(request *DeleteBlockchainBrowserPrivilegeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteBlockchainBrowserPrivilegeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteBlockchainBrowserPrivilegeResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.blockchain.browser.privilege.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 生成蚂蚁区块链的交易二维码
 * Summary: 数科生成蚂蚁区块链的交易二维码
 */
func (client *Client) GetBlockchainMiniprogram(request *GetBlockchainMiniprogramRequest) (_result *GetBlockchainMiniprogramResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetBlockchainMiniprogramResponse{}
	_body, _err := client.GetBlockchainMiniprogramEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 生成蚂蚁区块链的交易二维码
 * Summary: 数科生成蚂蚁区块链的交易二维码
 */
func (client *Client) GetBlockchainMiniprogramEx(request *GetBlockchainMiniprogramRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetBlockchainMiniprogramResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetBlockchainMiniprogramResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.blockchain.miniprogram.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 蚂蚁区块链的链上交易数据查看权限批量添加
 * Summary: 蚂蚁区块链的链上交易数据查看权限批量添加
 */
func (client *Client) AddBlockchainMiniprogram(request *AddBlockchainMiniprogramRequest) (_result *AddBlockchainMiniprogramResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &AddBlockchainMiniprogramResponse{}
	_body, _err := client.AddBlockchainMiniprogramEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 蚂蚁区块链的链上交易数据查看权限批量添加
 * Summary: 蚂蚁区块链的链上交易数据查看权限批量添加
 */
func (client *Client) AddBlockchainMiniprogramEx(request *AddBlockchainMiniprogramRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *AddBlockchainMiniprogramResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AddBlockchainMiniprogramResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.blockchain.miniprogram.add"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取金融科技BaaS浏览器交易统计信息
 * Summary: 获取金融科技BaaS浏览器交易统计信息
 */
func (client *Client) QueryBrowserTransactionStatistic(request *QueryBrowserTransactionStatisticRequest) (_result *QueryBrowserTransactionStatisticResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryBrowserTransactionStatisticResponse{}
	_body, _err := client.QueryBrowserTransactionStatisticEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取金融科技BaaS浏览器交易统计信息
 * Summary: 获取金融科技BaaS浏览器交易统计信息
 */
func (client *Client) QueryBrowserTransactionStatisticEx(request *QueryBrowserTransactionStatisticRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryBrowserTransactionStatisticResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryBrowserTransactionStatisticResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.browser.transaction.statistic.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取金融科技BaaS最新区块信息列表
 * Summary: 获取金融科技BaaS最新区块信息列表
 */
func (client *Client) QueryBrowserBlockLatest(request *QueryBrowserBlockLatestRequest) (_result *QueryBrowserBlockLatestResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryBrowserBlockLatestResponse{}
	_body, _err := client.QueryBrowserBlockLatestEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取金融科技BaaS最新区块信息列表
 * Summary: 获取金融科技BaaS最新区块信息列表
 */
func (client *Client) QueryBrowserBlockLatestEx(request *QueryBrowserBlockLatestRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryBrowserBlockLatestResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryBrowserBlockLatestResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.browser.block.latest.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取金融科技BaaS最新交易列表
 * Summary: 获取金融科技BaaS最新交易列表
 */
func (client *Client) QueryBrowserTransactionLatest(request *QueryBrowserTransactionLatestRequest) (_result *QueryBrowserTransactionLatestResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryBrowserTransactionLatestResponse{}
	_body, _err := client.QueryBrowserTransactionLatestEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取金融科技BaaS最新交易列表
 * Summary: 获取金融科技BaaS最新交易列表
 */
func (client *Client) QueryBrowserTransactionLatestEx(request *QueryBrowserTransactionLatestRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryBrowserTransactionLatestResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryBrowserTransactionLatestResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.browser.transaction.latest.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取金融科技BaaS区块信息
 * Summary: 获取金融科技BaaS区块信息
 */
func (client *Client) QueryBrowserBlock(request *QueryBrowserBlockRequest) (_result *QueryBrowserBlockResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryBrowserBlockResponse{}
	_body, _err := client.QueryBrowserBlockEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取金融科技BaaS区块信息
 * Summary: 获取金融科技BaaS区块信息
 */
func (client *Client) QueryBrowserBlockEx(request *QueryBrowserBlockRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryBrowserBlockResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryBrowserBlockResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.browser.block.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取金融科技BaaS交易信息内容
 * Summary: 获取金融科技BaaS交易信息内容
 */
func (client *Client) QueryBrowserTransaction(request *QueryBrowserTransactionRequest) (_result *QueryBrowserTransactionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryBrowserTransactionResponse{}
	_body, _err := client.QueryBrowserTransactionEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取金融科技BaaS交易信息内容
 * Summary: 获取金融科技BaaS交易信息内容
 */
func (client *Client) QueryBrowserTransactionEx(request *QueryBrowserTransactionRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryBrowserTransactionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryBrowserTransactionResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.browser.transaction.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取金融科技BaaS交易回执信息
 * Summary: 获取金融科技BaaS交易回执信息
 */
func (client *Client) QueryBrowserTransactionReceipt(request *QueryBrowserTransactionReceiptRequest) (_result *QueryBrowserTransactionReceiptResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryBrowserTransactionReceiptResponse{}
	_body, _err := client.QueryBrowserTransactionReceiptEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取金融科技BaaS交易回执信息
 * Summary: 获取金融科技BaaS交易回执信息
 */
func (client *Client) QueryBrowserTransactionReceiptEx(request *QueryBrowserTransactionReceiptRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryBrowserTransactionReceiptResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryBrowserTransactionReceiptResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.browser.transaction.receipt.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 蚂蚁链节点所有者查询
 * Summary: 蚂蚁链节点所有者查询
 */
func (client *Client) QueryBrowserNodeOwner(request *QueryBrowserNodeOwnerRequest) (_result *QueryBrowserNodeOwnerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryBrowserNodeOwnerResponse{}
	_body, _err := client.QueryBrowserNodeOwnerEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 蚂蚁链节点所有者查询
 * Summary: 蚂蚁链节点所有者查询
 */
func (client *Client) QueryBrowserNodeOwnerEx(request *QueryBrowserNodeOwnerRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryBrowserNodeOwnerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryBrowserNodeOwnerResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.browser.node.owner.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 小程序权限删除
 * Summary: 小程序权限删除
 */
func (client *Client) DeleteBlockchainMiniprogram(request *DeleteBlockchainMiniprogramRequest) (_result *DeleteBlockchainMiniprogramResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteBlockchainMiniprogramResponse{}
	_body, _err := client.DeleteBlockchainMiniprogramEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 小程序权限删除
 * Summary: 小程序权限删除
 */
func (client *Client) DeleteBlockchainMiniprogramEx(request *DeleteBlockchainMiniprogramRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteBlockchainMiniprogramResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteBlockchainMiniprogramResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.blockchain.miniprogram.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询用户链上交易移动端查看权限
 * Summary: 查询用户链上交易移动端查看权限
 */
func (client *Client) QueryBlockchainMiniprogram(request *QueryBlockchainMiniprogramRequest) (_result *QueryBlockchainMiniprogramResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryBlockchainMiniprogramResponse{}
	_body, _err := client.QueryBlockchainMiniprogramEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询用户链上交易移动端查看权限
 * Summary: 查询用户链上交易移动端查看权限
 */
func (client *Client) QueryBlockchainMiniprogramEx(request *QueryBlockchainMiniprogramRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryBlockchainMiniprogramResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryBlockchainMiniprogramResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.blockchain.miniprogram.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 物流金融信用流转能力注册开通结果查询
 * Summary: 物流金融信用流转能力注册开通结果查询
 */
func (client *Client) QueryCreditTransferApply(request *QueryCreditTransferApplyRequest) (_result *QueryCreditTransferApplyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryCreditTransferApplyResponse{}
	_body, _err := client.QueryCreditTransferApplyEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 物流金融信用流转能力注册开通结果查询
 * Summary: 物流金融信用流转能力注册开通结果查询
 */
func (client *Client) QueryCreditTransferApplyEx(request *QueryCreditTransferApplyRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryCreditTransferApplyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryCreditTransferApplyResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.credit.transfer.apply.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 物流金融信用流转额度查询，仅显示是否有额度，不会返回具体额度
 * Summary: 物流金融信用流转额度查询
 */
func (client *Client) QueryCreditTransferBalance(request *QueryCreditTransferBalanceRequest) (_result *QueryCreditTransferBalanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryCreditTransferBalanceResponse{}
	_body, _err := client.QueryCreditTransferBalanceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 物流金融信用流转额度查询，仅显示是否有额度，不会返回具体额度
 * Summary: 物流金融信用流转额度查询
 */
func (client *Client) QueryCreditTransferBalanceEx(request *QueryCreditTransferBalanceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryCreditTransferBalanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryCreditTransferBalanceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.credit.transfer.balance.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 物流金融信用流转通过id查询发行结果
 * Summary: 物流金融信用流转通过id查询发行结果
 */
func (client *Client) QueryCreditTransferIssuebyid(request *QueryCreditTransferIssuebyidRequest) (_result *QueryCreditTransferIssuebyidResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryCreditTransferIssuebyidResponse{}
	_body, _err := client.QueryCreditTransferIssuebyidEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 物流金融信用流转通过id查询发行结果
 * Summary: 物流金融信用流转通过id查询发行结果
 */
func (client *Client) QueryCreditTransferIssuebyidEx(request *QueryCreditTransferIssuebyidRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryCreditTransferIssuebyidResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryCreditTransferIssuebyidResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.credit.transfer.issuebyid.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 物流金融根据时间查询信用凭证信息
 * Summary: 物流金融根据时间查询信用流转信息
 */
func (client *Client) QueryCreditTransferIssuebytime(request *QueryCreditTransferIssuebytimeRequest) (_result *QueryCreditTransferIssuebytimeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryCreditTransferIssuebytimeResponse{}
	_body, _err := client.QueryCreditTransferIssuebytimeEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 物流金融根据时间查询信用凭证信息
 * Summary: 物流金融根据时间查询信用流转信息
 */
func (client *Client) QueryCreditTransferIssuebytimeEx(request *QueryCreditTransferIssuebytimeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryCreditTransferIssuebytimeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryCreditTransferIssuebytimeResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.credit.transfer.issuebytime.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 物流金融信用流转流水查询
 * Summary: 物流金融信用流转流水查询
 */
func (client *Client) QueryCreditTransferStatement(request *QueryCreditTransferStatementRequest) (_result *QueryCreditTransferStatementResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryCreditTransferStatementResponse{}
	_body, _err := client.QueryCreditTransferStatementEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 物流金融信用流转流水查询
 * Summary: 物流金融信用流转流水查询
 */
func (client *Client) QueryCreditTransferStatementEx(request *QueryCreditTransferStatementRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryCreditTransferStatementResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryCreditTransferStatementResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.credit.transfer.statement.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 物流金融信用流转主站系统回调
 * Summary: 物流金融信用流转主站系统回调
 */
func (client *Client) CallbackCreditTransfer(request *CallbackCreditTransferRequest) (_result *CallbackCreditTransferResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CallbackCreditTransferResponse{}
	_body, _err := client.CallbackCreditTransferEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 物流金融信用流转主站系统回调
 * Summary: 物流金融信用流转主站系统回调
 */
func (client *Client) CallbackCreditTransferEx(request *CallbackCreditTransferRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CallbackCreditTransferResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CallbackCreditTransferResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.credit.transfer.callback"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 外部业务方可以给DIS的C端小程序用户颁发声明（VC）用户特定场景
 * Summary: 推送业务方给用户颁发的声明内容
 */
func (client *Client) PushAuthUserVc(request *PushAuthUserVcRequest) (_result *PushAuthUserVcResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &PushAuthUserVcResponse{}
	_body, _err := client.PushAuthUserVcEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 外部业务方可以给DIS的C端小程序用户颁发声明（VC）用户特定场景
 * Summary: 推送业务方给用户颁发的声明内容
 */
func (client *Client) PushAuthUserVcEx(request *PushAuthUserVcRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *PushAuthUserVcResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &PushAuthUserVcResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.auth.user.vc.push"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 业务方推送需要用户使用数字身份did授权确认的声明，推送后可根据自定义的业务id（biz_id）来查询状态（另提供接口），进而获取用户授权后的声明。
 * Summary: 推送需要用户端授权的业务声明
 */
func (client *Client) PushAuthClaimVc(request *PushAuthClaimVcRequest) (_result *PushAuthClaimVcResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &PushAuthClaimVcResponse{}
	_body, _err := client.PushAuthClaimVcEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 业务方推送需要用户使用数字身份did授权确认的声明，推送后可根据自定义的业务id（biz_id）来查询状态（另提供接口），进而获取用户授权后的声明。
 * Summary: 推送需要用户端授权的业务声明
 */
func (client *Client) PushAuthClaimVcEx(request *PushAuthClaimVcRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *PushAuthClaimVcResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &PushAuthClaimVcResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.auth.claim.vc.push"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 业务方通过提供二维码的方式引导用户支付宝扫描创建did，然后业务方通过此接口可查询用户新建的did
 * Summary: 通过biz_id获取用户的did
 */
func (client *Client) PullAuthUserDid(request *PullAuthUserDidRequest) (_result *PullAuthUserDidResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &PullAuthUserDidResponse{}
	_body, _err := client.PullAuthUserDidEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 业务方通过提供二维码的方式引导用户支付宝扫描创建did，然后业务方通过此接口可查询用户新建的did
 * Summary: 通过biz_id获取用户的did
 */
func (client *Client) PullAuthUserDidEx(request *PullAuthUserDidRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *PullAuthUserDidResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &PullAuthUserDidResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.auth.user.did.pull"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 业务方通过此接口可以查询，申请用户授权的声明状态，如果用户已授权即可获取到授权后的声明（vc）内容。
 * Summary: 获取申请用户声明的授权结果
 */
func (client *Client) PullAuthClaimVc(request *PullAuthClaimVcRequest) (_result *PullAuthClaimVcResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &PullAuthClaimVcResponse{}
	_body, _err := client.PullAuthClaimVcEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 业务方通过此接口可以查询，申请用户授权的声明状态，如果用户已授权即可获取到授权后的声明（vc）内容。
 * Summary: 获取申请用户声明的授权结果
 */
func (client *Client) PullAuthClaimVcEx(request *PullAuthClaimVcRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *PullAuthClaimVcResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &PullAuthClaimVcResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.auth.claim.vc.pull"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 业务系统通过授权宝服务帮忙给用户创建did，此接口访问需预先在授权宝配置白名单开通。
 * Summary: 给用户创建did，需要指定userId
 */
func (client *Client) CreateAuthUserDid(request *CreateAuthUserDidRequest) (_result *CreateAuthUserDidResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateAuthUserDidResponse{}
	_body, _err := client.CreateAuthUserDidEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 业务系统通过授权宝服务帮忙给用户创建did，此接口访问需预先在授权宝配置白名单开通。
 * Summary: 给用户创建did，需要指定userId
 */
func (client *Client) CreateAuthUserDidEx(request *CreateAuthUserDidRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateAuthUserDidResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateAuthUserDidResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.auth.user.did.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 给企业DID创建DID，通常场景为对授权宝服务的开通，调用方对企业有认证能力。
 * Summary: 创建企业DID，开通授权宝服务
 */
func (client *Client) CreateAuthCorporateDid(request *CreateAuthCorporateDidRequest) (_result *CreateAuthCorporateDidResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateAuthCorporateDidResponse{}
	_body, _err := client.CreateAuthCorporateDidEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 给企业DID创建DID，通常场景为对授权宝服务的开通，调用方对企业有认证能力。
 * Summary: 创建企业DID，开通授权宝服务
 */
func (client *Client) CreateAuthCorporateDidEx(request *CreateAuthCorporateDidRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateAuthCorporateDidResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateAuthCorporateDidResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.auth.corporate.did.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 业务方的C端用户授权颁发“可验证声明”（简称VC）之后，就会异步推送结果给相关业务服务端，如果相关业务服务端没有接收到，或者本地缓存过期，则可以通过此接口到授权宝再次查询目标可验证声明结果情况。
 * Summary: 查询目标可验证声明结果
 */
func (client *Client) PullAuthWebpageVc(request *PullAuthWebpageVcRequest) (_result *PullAuthWebpageVcResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &PullAuthWebpageVcResponse{}
	_body, _err := client.PullAuthWebpageVcEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 业务方的C端用户授权颁发“可验证声明”（简称VC）之后，就会异步推送结果给相关业务服务端，如果相关业务服务端没有接收到，或者本地缓存过期，则可以通过此接口到授权宝再次查询目标可验证声明结果情况。
 * Summary: 查询目标可验证声明结果
 */
func (client *Client) PullAuthWebpageVcEx(request *PullAuthWebpageVcRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *PullAuthWebpageVcResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &PullAuthWebpageVcResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.auth.webpage.vc.pull"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 此接口提供了授权宝这边可用的H5页面的Url，此Url会携带一些参数：授权宝鉴权token(JWT机制生成，内部使用)、bizId(接口入参带入)
 * Summary: 获取授权宝侧的H5授权Url
 */
func (client *Client) PullAuthWebpageUrl(request *PullAuthWebpageUrlRequest) (_result *PullAuthWebpageUrlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &PullAuthWebpageUrlResponse{}
	_body, _err := client.PullAuthWebpageUrlEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 此接口提供了授权宝这边可用的H5页面的Url，此Url会携带一些参数：授权宝鉴权token(JWT机制生成，内部使用)、bizId(接口入参带入)
 * Summary: 获取授权宝侧的H5授权Url
 */
func (client *Client) PullAuthWebpageUrlEx(request *PullAuthWebpageUrlRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *PullAuthWebpageUrlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &PullAuthWebpageUrlResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.auth.webpage.url.pull"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 在一些业务场景，指定可验证声明之后，根据bizType的类型，直接发生代理颁发可验证声明的操作。
 * Summary: 给定声明内容并颁发声明
 */
func (client *Client) StartAuthVcAuth(request *StartAuthVcAuthRequest) (_result *StartAuthVcAuthResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartAuthVcAuthResponse{}
	_body, _err := client.StartAuthVcAuthEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 在一些业务场景，指定可验证声明之后，根据bizType的类型，直接发生代理颁发可验证声明的操作。
 * Summary: 给定声明内容并颁发声明
 */
func (client *Client) StartAuthVcAuthEx(request *StartAuthVcAuthRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartAuthVcAuthResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartAuthVcAuthResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.auth.vc.auth.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 可验证声明（VC）的拥有者（vcContent中的subject）可以将声明分享权限给其它的DID。
 * Summary: 将目标的声明内容，分享权限给目标的DID
 */
func (client *Client) StartAuthVcShare(request *StartAuthVcShareRequest) (_result *StartAuthVcShareResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartAuthVcShareResponse{}
	_body, _err := client.StartAuthVcShareEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 可验证声明（VC）的拥有者（vcContent中的subject）可以将声明分享权限给其它的DID。
 * Summary: 将目标的声明内容，分享权限给目标的DID
 */
func (client *Client) StartAuthVcShareEx(request *StartAuthVcShareRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartAuthVcShareResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartAuthVcShareResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.auth.vc.share.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 通过指定可验证声明id，获取目标可验证声明内容，需要可验证声明的拥有者分享声明才可查询，如果没有权限则获取失败。
 * Summary: 获取目标可验证声明内容
 */
func (client *Client) QueryAuthVcContent(request *QueryAuthVcContentRequest) (_result *QueryAuthVcContentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryAuthVcContentResponse{}
	_body, _err := client.QueryAuthVcContentEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 通过指定可验证声明id，获取目标可验证声明内容，需要可验证声明的拥有者分享声明才可查询，如果没有权限则获取失败。
 * Summary: 获取目标可验证声明内容
 */
func (client *Client) QueryAuthVcContentEx(request *QueryAuthVcContentRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryAuthVcContentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryAuthVcContentResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.auth.vc.content.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 业务系统通过授权宝服务帮忙给C类用户创建did，此接口访问需预先在授权宝配置白名单开通。
 * Summary: 给C类用户建did，需要指定user信息
 */
func (client *Client) CreateAuthUserinfoDid(request *CreateAuthUserinfoDidRequest) (_result *CreateAuthUserinfoDidResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateAuthUserinfoDidResponse{}
	_body, _err := client.CreateAuthUserinfoDidEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 业务系统通过授权宝服务帮忙给C类用户创建did，此接口访问需预先在授权宝配置白名单开通。
 * Summary: 给C类用户建did，需要指定user信息
 */
func (client *Client) CreateAuthUserinfoDidEx(request *CreateAuthUserinfoDidRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateAuthUserinfoDidResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateAuthUserinfoDidResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.auth.userinfo.did.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 声明的持有者可以吊销一个已颁发的可验证声明(VC)
 * Summary: 吊销已颁发声明
 */
func (client *Client) StartAuthVcRevoke(request *StartAuthVcRevokeRequest) (_result *StartAuthVcRevokeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartAuthVcRevokeResponse{}
	_body, _err := client.StartAuthVcRevokeEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 声明的持有者可以吊销一个已颁发的可验证声明(VC)
 * Summary: 吊销已颁发声明
 */
func (client *Client) StartAuthVcRevokeEx(request *StartAuthVcRevokeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartAuthVcRevokeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartAuthVcRevokeResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.auth.vc.revoke.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 将可验证声明内的数据资产内容赠送给目标的did
 * Summary: 将vc赠送给一个目标did
 */
func (client *Client) StartAuthVcGive(request *StartAuthVcGiveRequest) (_result *StartAuthVcGiveResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartAuthVcGiveResponse{}
	_body, _err := client.StartAuthVcGiveEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 将可验证声明内的数据资产内容赠送给目标的did
 * Summary: 将vc赠送给一个目标did
 */
func (client *Client) StartAuthVcGiveEx(request *StartAuthVcGiveRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartAuthVcGiveResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartAuthVcGiveResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.auth.vc.give.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 提供批量分享可验证声明到目标did
 * Summary: 批量分享VC内容
 */
func (client *Client) StartAuthVcSharebatch(request *StartAuthVcSharebatchRequest) (_result *StartAuthVcSharebatchResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartAuthVcSharebatchResponse{}
	_body, _err := client.StartAuthVcSharebatchEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 提供批量分享可验证声明到目标did
 * Summary: 批量分享VC内容
 */
func (client *Client) StartAuthVcSharebatchEx(request *StartAuthVcSharebatchRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartAuthVcSharebatchResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartAuthVcSharebatchResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.auth.vc.sharebatch.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 如果机构没有接入网关能力需要合作方代理在授权宝管理签名能力，可使用此接口。
初始申请创建此corp did的调用方，有权限申请签名。
 * Summary: 代理签名
*/
func (client *Client) StartAuthCorporateSign(request *StartAuthCorporateSignRequest) (_result *StartAuthCorporateSignResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartAuthCorporateSignResponse{}
	_body, _err := client.StartAuthCorporateSignEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 如果机构没有接入网关能力需要合作方代理在授权宝管理签名能力，可使用此接口。
初始申请创建此corp did的调用方，有权限申请签名。
 * Summary: 代理签名
*/
func (client *Client) StartAuthCorporateSignEx(request *StartAuthCorporateSignRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartAuthCorporateSignResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartAuthCorporateSignResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.auth.corporate.sign.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 在一些业务场景，指定可验证声明之后，提交颁发可验证声明的操作。当前接口支持批量颁发声明，通常支持对多机构的数据授权。
 * Summary: 批量给定声明内容颁发声明，并上链存证
 */
func (client *Client) StartAuthVcBatchauth(request *StartAuthVcBatchauthRequest) (_result *StartAuthVcBatchauthResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartAuthVcBatchauthResponse{}
	_body, _err := client.StartAuthVcBatchauthEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 在一些业务场景，指定可验证声明之后，提交颁发可验证声明的操作。当前接口支持批量颁发声明，通常支持对多机构的数据授权。
 * Summary: 批量给定声明内容颁发声明，并上链存证
 */
func (client *Client) StartAuthVcBatchauthEx(request *StartAuthVcBatchauthRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartAuthVcBatchauthResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartAuthVcBatchauthResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.auth.vc.batchauth.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 将已颁发的可验证声明进行吊销，然后重新颁发一个新的可验证声明用于代替原有的业务语义的可验证声明。
 * Summary: 将已颁发的可验证声明进行重置替换
 */
func (client *Client) StartAuthVcReplace(request *StartAuthVcReplaceRequest) (_result *StartAuthVcReplaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartAuthVcReplaceResponse{}
	_body, _err := client.StartAuthVcReplaceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 将已颁发的可验证声明进行吊销，然后重新颁发一个新的可验证声明用于代替原有的业务语义的可验证声明。
 * Summary: 将已颁发的可验证声明进行重置替换
 */
func (client *Client) StartAuthVcReplaceEx(request *StartAuthVcReplaceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartAuthVcReplaceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartAuthVcReplaceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.auth.vc.replace.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 推送保单信息
 * Summary: 推送保单信息
 */
func (client *Client) PushAuthInsurancePolicy(request *PushAuthInsurancePolicyRequest) (_result *PushAuthInsurancePolicyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &PushAuthInsurancePolicyResponse{}
	_body, _err := client.PushAuthInsurancePolicyEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 推送保单信息
 * Summary: 推送保单信息
 */
func (client *Client) PushAuthInsurancePolicyEx(request *PushAuthInsurancePolicyRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *PushAuthInsurancePolicyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &PushAuthInsurancePolicyResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.auth.insurance.policy.push"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取前端sdk使用的token
 * Summary: 获取前端sdk使用的token
 */
func (client *Client) GetAuthFrontendAccesstoken(request *GetAuthFrontendAccesstokenRequest) (_result *GetAuthFrontendAccesstokenResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetAuthFrontendAccesstokenResponse{}
	_body, _err := client.GetAuthFrontendAccesstokenEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取前端sdk使用的token
 * Summary: 获取前端sdk使用的token
 */
func (client *Client) GetAuthFrontendAccesstokenEx(request *GetAuthFrontendAccesstokenRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetAuthFrontendAccesstokenResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetAuthFrontendAccesstokenResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.auth.frontend.accesstoken.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取声明授权链接
 * Summary: 获取声明授权链接
 */
func (client *Client) CreateAuthClaimUrl(request *CreateAuthClaimUrlRequest) (_result *CreateAuthClaimUrlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateAuthClaimUrlResponse{}
	_body, _err := client.CreateAuthClaimUrlEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取声明授权链接
 * Summary: 获取声明授权链接
 */
func (client *Client) CreateAuthClaimUrlEx(request *CreateAuthClaimUrlRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateAuthClaimUrlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateAuthClaimUrlResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.auth.claim.url.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 行驶证核身授权
 * Summary: 授权宝个人信息授权，行驶证核身授权
 */
func (client *Client) StartAuthVerifyCarinfo(request *StartAuthVerifyCarinfoRequest) (_result *StartAuthVerifyCarinfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartAuthVerifyCarinfoResponse{}
	_body, _err := client.StartAuthVerifyCarinfoEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 行驶证核身授权
 * Summary: 授权宝个人信息授权，行驶证核身授权
 */
func (client *Client) StartAuthVerifyCarinfoEx(request *StartAuthVerifyCarinfoRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartAuthVerifyCarinfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartAuthVerifyCarinfoResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.auth.verify.carinfo.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 驾驶证相关信息核验并核身，并且结合授权宝完成授权。
 * Summary: 授权宝个人信息授权，驾驶证核身授权
 */
func (client *Client) StartAuthVerifyDriverinfo(request *StartAuthVerifyDriverinfoRequest) (_result *StartAuthVerifyDriverinfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartAuthVerifyDriverinfoResponse{}
	_body, _err := client.StartAuthVerifyDriverinfoEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 驾驶证相关信息核验并核身，并且结合授权宝完成授权。
 * Summary: 授权宝个人信息授权，驾驶证核身授权
 */
func (client *Client) StartAuthVerifyDriverinfoEx(request *StartAuthVerifyDriverinfoRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartAuthVerifyDriverinfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartAuthVerifyDriverinfoResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.auth.verify.driverinfo.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 检查车牌是否进行年检，当前状态，以及年检有效期止。
 * Summary: 车检查询核验，目标车牌年检状态
 */
func (client *Client) StartAuthVerifyCarinspect(request *StartAuthVerifyCarinspectRequest) (_result *StartAuthVerifyCarinspectResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartAuthVerifyCarinspectResponse{}
	_body, _err := client.StartAuthVerifyCarinspectEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 检查车牌是否进行年检，当前状态，以及年检有效期止。
 * Summary: 车检查询核验，目标车牌年检状态
 */
func (client *Client) StartAuthVerifyCarinspectEx(request *StartAuthVerifyCarinspectRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartAuthVerifyCarinspectResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartAuthVerifyCarinspectResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.auth.verify.carinspect.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取授权声明模版
 * Summary: 获取授权声明模版
 */
func (client *Client) GetAuthClaimTemplate(request *GetAuthClaimTemplateRequest) (_result *GetAuthClaimTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetAuthClaimTemplateResponse{}
	_body, _err := client.GetAuthClaimTemplateEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取授权声明模版
 * Summary: 获取授权声明模版
 */
func (client *Client) GetAuthClaimTemplateEx(request *GetAuthClaimTemplateRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetAuthClaimTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetAuthClaimTemplateResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.auth.claim.template.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 通过claim创建vc
 * Summary: 通过claim创建vc
 */
func (client *Client) CreateAuthClaimVc(request *CreateAuthClaimVcRequest) (_result *CreateAuthClaimVcResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateAuthClaimVcResponse{}
	_body, _err := client.CreateAuthClaimVcEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 通过claim创建vc
 * Summary: 通过claim创建vc
 */
func (client *Client) CreateAuthClaimVcEx(request *CreateAuthClaimVcRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateAuthClaimVcResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateAuthClaimVcResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.auth.claim.vc.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询vc详情
 * Summary: 查询vc详情
 */
func (client *Client) QueryAuthClaimVc(request *QueryAuthClaimVcRequest) (_result *QueryAuthClaimVcResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryAuthClaimVcResponse{}
	_body, _err := client.QueryAuthClaimVcEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询vc详情
 * Summary: 查询vc详情
 */
func (client *Client) QueryAuthClaimVcEx(request *QueryAuthClaimVcRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryAuthClaimVcResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryAuthClaimVcResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.auth.claim.vc.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 车辆投保日期查询(存量)
 * Summary: 车辆投保日期查询(存量)
 */
func (client *Client) QueryAuthVehicleinsurance(request *QueryAuthVehicleinsuranceRequest) (_result *QueryAuthVehicleinsuranceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryAuthVehicleinsuranceResponse{}
	_body, _err := client.QueryAuthVehicleinsuranceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 车辆投保日期查询(存量)
 * Summary: 车辆投保日期查询(存量)
 */
func (client *Client) QueryAuthVehicleinsuranceEx(request *QueryAuthVehicleinsuranceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryAuthVehicleinsuranceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryAuthVehicleinsuranceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.auth.vehicleinsurance.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 车辆投保日期查询(增量)
 * Summary: 车辆投保日期查询(增量)
 */
func (client *Client) QueryAuthVehicleinsuranceVc(request *QueryAuthVehicleinsuranceVcRequest) (_result *QueryAuthVehicleinsuranceVcResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryAuthVehicleinsuranceVcResponse{}
	_body, _err := client.QueryAuthVehicleinsuranceVcEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 车辆投保日期查询(增量)
 * Summary: 车辆投保日期查询(增量)
 */
func (client *Client) QueryAuthVehicleinsuranceVcEx(request *QueryAuthVehicleinsuranceVcRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryAuthVehicleinsuranceVcResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryAuthVehicleinsuranceVcResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.auth.vehicleinsurance.vc.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询在特定业务bizType下的凭证颁发的统计数据，以及按照day维度的分布情况。
 * Summary: 查询目标场景的凭证颁发的统计数据
 */
func (client *Client) QueryAuthVcStatistics(request *QueryAuthVcStatisticsRequest) (_result *QueryAuthVcStatisticsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryAuthVcStatisticsResponse{}
	_body, _err := client.QueryAuthVcStatisticsEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询在特定业务bizType下的凭证颁发的统计数据，以及按照day维度的分布情况。
 * Summary: 查询目标场景的凭证颁发的统计数据
 */
func (client *Client) QueryAuthVcStatisticsEx(request *QueryAuthVcStatisticsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryAuthVcStatisticsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryAuthVcStatisticsResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.auth.vc.statistics.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询目标业务凭证的实时颁发的情况，返回一个列表。
 * Summary: 查询目标业务凭证颁发的实时列表情况
 */
func (client *Client) QueryAuthVcRealtime(request *QueryAuthVcRealtimeRequest) (_result *QueryAuthVcRealtimeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryAuthVcRealtimeResponse{}
	_body, _err := client.QueryAuthVcRealtimeEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询目标业务凭证的实时颁发的情况，返回一个列表。
 * Summary: 查询目标业务凭证颁发的实时列表情况
 */
func (client *Client) QueryAuthVcRealtimeEx(request *QueryAuthVcRealtimeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryAuthVcRealtimeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryAuthVcRealtimeResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.auth.vc.realtime.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 在机构颁发凭证的情况下，机构的可信度和状态会影响颁发的凭证的有效性和影响，因此提供接口查询机构状态。
 * Summary: 特定场景下使用，查询机构状态
 */
func (client *Client) QueryAuthOrgStatus(request *QueryAuthOrgStatusRequest) (_result *QueryAuthOrgStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryAuthOrgStatusResponse{}
	_body, _err := client.QueryAuthOrgStatusEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 在机构颁发凭证的情况下，机构的可信度和状态会影响颁发的凭证的有效性和影响，因此提供接口查询机构状态。
 * Summary: 特定场景下使用，查询机构状态
 */
func (client *Client) QueryAuthOrgStatusEx(request *QueryAuthOrgStatusRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryAuthOrgStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryAuthOrgStatusResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.auth.org.status.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 预充值交易通过身份的凭证封装的方式在区块链上资产化。
 * Summary: 交易资产的归属
 */
func (client *Client) StartAuthAssetIssue(request *StartAuthAssetIssueRequest) (_result *StartAuthAssetIssueResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartAuthAssetIssueResponse{}
	_body, _err := client.StartAuthAssetIssueEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 预充值交易通过身份的凭证封装的方式在区块链上资产化。
 * Summary: 交易资产的归属
 */
func (client *Client) StartAuthAssetIssueEx(request *StartAuthAssetIssueRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartAuthAssetIssueResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartAuthAssetIssueResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.auth.asset.issue.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询卡证模板的列表
 * Summary: 查询模板列表
 */
func (client *Client) AllAuthCertTemplate(request *AllAuthCertTemplateRequest) (_result *AllAuthCertTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &AllAuthCertTemplateResponse{}
	_body, _err := client.AllAuthCertTemplateEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询卡证模板的列表
 * Summary: 查询模板列表
 */
func (client *Client) AllAuthCertTemplateEx(request *AllAuthCertTemplateRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *AllAuthCertTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AllAuthCertTemplateResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.auth.cert.template.all"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 为客权业务定制化的编辑或新增证书实例，可以绕过审批流程
 * Summary: 编辑或新增证书实例
 */
func (client *Client) SaveAuthCertInstanceforcustom(request *SaveAuthCertInstanceforcustomRequest) (_result *SaveAuthCertInstanceforcustomResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SaveAuthCertInstanceforcustomResponse{}
	_body, _err := client.SaveAuthCertInstanceforcustomEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 为客权业务定制化的编辑或新增证书实例，可以绕过审批流程
 * Summary: 编辑或新增证书实例
 */
func (client *Client) SaveAuthCertInstanceforcustomEx(request *SaveAuthCertInstanceforcustomRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SaveAuthCertInstanceforcustomResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SaveAuthCertInstanceforcustomResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.auth.cert.instanceforcustom.save"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 通过上传的领取人明细文件，为证书实例批量颁发证书
 * Summary: 批量颁发证书
 */
func (client *Client) BatchcreateAuthCert(request *BatchcreateAuthCertRequest) (_result *BatchcreateAuthCertResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &BatchcreateAuthCertResponse{}
	_body, _err := client.BatchcreateAuthCertEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 通过上传的领取人明细文件，为证书实例批量颁发证书
 * Summary: 批量颁发证书
 */
func (client *Client) BatchcreateAuthCertEx(request *BatchcreateAuthCertRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *BatchcreateAuthCertResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BatchcreateAuthCertResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.auth.cert.batchcreate"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 单个颁发证书
 * Summary: 颁发证书
 */
func (client *Client) CreateAuthCert(request *CreateAuthCertRequest) (_result *CreateAuthCertResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateAuthCertResponse{}
	_body, _err := client.CreateAuthCertEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 单个颁发证书
 * Summary: 颁发证书
 */
func (client *Client) CreateAuthCertEx(request *CreateAuthCertRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateAuthCertResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateAuthCertResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.auth.cert.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 吊销已经颁发的证书
 * Summary: 吊销证书
 */
func (client *Client) InvalidateAuthCert(request *InvalidateAuthCertRequest) (_result *InvalidateAuthCertResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &InvalidateAuthCertResponse{}
	_body, _err := client.InvalidateAuthCertEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 吊销已经颁发的证书
 * Summary: 吊销证书
 */
func (client *Client) InvalidateAuthCertEx(request *InvalidateAuthCertRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *InvalidateAuthCertResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &InvalidateAuthCertResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.auth.cert.invalidate"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询批量颁发证书的进度详情
 * Summary: 查询批量颁发证书的进度
 */
func (client *Client) QueryAuthCertProgress(request *QueryAuthCertProgressRequest) (_result *QueryAuthCertProgressResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryAuthCertProgressResponse{}
	_body, _err := client.QueryAuthCertProgressEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询批量颁发证书的进度详情
 * Summary: 查询批量颁发证书的进度
 */
func (client *Client) QueryAuthCertProgressEx(request *QueryAuthCertProgressRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryAuthCertProgressResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryAuthCertProgressResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.auth.cert.progress.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 上传需要批量颁发的证书领取人明细csv文件到oss服务器，并返回文件的路径
 * Summary: 上传领取人明细csv文件
 */
func (client *Client) UploadAuthCertInstance(request *UploadAuthCertInstanceRequest) (_result *UploadAuthCertInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UploadAuthCertInstanceResponse{}
	_body, _err := client.UploadAuthCertInstanceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 上传需要批量颁发的证书领取人明细csv文件到oss服务器，并返回文件的路径
 * Summary: 上传领取人明细csv文件
 */
func (client *Client) UploadAuthCertInstanceEx(request *UploadAuthCertInstanceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UploadAuthCertInstanceResponse, _err error) {
	if !tea.BoolValue(util.IsUnset(request.FileObject)) {
		uploadReq := &CreateAntcloudGatewayxFileUploadRequest{
			AuthToken: request.AuthToken,
			ApiCode:   tea.String("baas.auth.cert.instance.upload"),
			FileName:  request.FileObjectName,
		}
		uploadResp, _err := client.CreateAntcloudGatewayxFileUploadEx(uploadReq, headers, runtime)
		if _err != nil {
			return _result, _err
		}

		if !tea.BoolValue(antchainutil.IsSuccess(uploadResp.ResultCode, tea.String("ok"))) {
			uploadAuthCertInstanceResponse := &UploadAuthCertInstanceResponse{
				ReqMsgId:   uploadResp.ReqMsgId,
				ResultCode: uploadResp.ResultCode,
				ResultMsg:  uploadResp.ResultMsg,
			}
			_result = uploadAuthCertInstanceResponse
			return _result, _err
		}

		uploadHeaders := antchainutil.ParseUploadHeaders(uploadResp.UploadHeaders)
		_err = antchainutil.PutObject(request.FileObject, uploadHeaders, uploadResp.UploadUrl)
		if _err != nil {
			return _result, _err
		}
		request.FileId = uploadResp.FileId
	}

	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UploadAuthCertInstanceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.auth.cert.instance.upload"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description:  编辑或新增证书实例
 * Summary:  编辑或新增证书实例
 */
func (client *Client) SaveAuthCertInstance(request *SaveAuthCertInstanceRequest) (_result *SaveAuthCertInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SaveAuthCertInstanceResponse{}
	_body, _err := client.SaveAuthCertInstanceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description:  编辑或新增证书实例
 * Summary:  编辑或新增证书实例
 */
func (client *Client) SaveAuthCertInstanceEx(request *SaveAuthCertInstanceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SaveAuthCertInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SaveAuthCertInstanceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.auth.cert.instance.save"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 状态为编辑中的证书实例，调用此接口提交审核
 * Summary: 证书实例提交审核
 */
func (client *Client) ApplyAuthCertInstance(request *ApplyAuthCertInstanceRequest) (_result *ApplyAuthCertInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ApplyAuthCertInstanceResponse{}
	_body, _err := client.ApplyAuthCertInstanceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 状态为编辑中的证书实例，调用此接口提交审核
 * Summary: 证书实例提交审核
 */
func (client *Client) ApplyAuthCertInstanceEx(request *ApplyAuthCertInstanceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ApplyAuthCertInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ApplyAuthCertInstanceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.auth.cert.instance.apply"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 向证书平台申请一个oss临时url，用来上传证书领取人csv文件，有效期30分钟
 * Summary: 获取证书领取人csv上传url
 */
func (client *Client) GetAuthCertInstancedataurl(request *GetAuthCertInstancedataurlRequest) (_result *GetAuthCertInstancedataurlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetAuthCertInstancedataurlResponse{}
	_body, _err := client.GetAuthCertInstancedataurlEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 向证书平台申请一个oss临时url，用来上传证书领取人csv文件，有效期30分钟
 * Summary: 获取证书领取人csv上传url
 */
func (client *Client) GetAuthCertInstancedataurlEx(request *GetAuthCertInstancedataurlRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetAuthCertInstancedataurlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetAuthCertInstancedataurlResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.auth.cert.instancedataurl.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 证书平台创建自定义存证
 * Summary: 证书平台创建存证
 */
func (client *Client) CreateAuthCertClaim(request *CreateAuthCertClaimRequest) (_result *CreateAuthCertClaimResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateAuthCertClaimResponse{}
	_body, _err := client.CreateAuthCertClaimEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 证书平台创建自定义存证
 * Summary: 证书平台创建存证
 */
func (client *Client) CreateAuthCertClaimEx(request *CreateAuthCertClaimRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateAuthCertClaimResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateAuthCertClaimResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.auth.cert.claim.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 证书平台查询用户自定义存证
 * Summary: 证书平台查询用户自定义存证
 */
func (client *Client) QueryAuthCertClaim(request *QueryAuthCertClaimRequest) (_result *QueryAuthCertClaimResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryAuthCertClaimResponse{}
	_body, _err := client.QueryAuthCertClaimEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 证书平台查询用户自定义存证
 * Summary: 证书平台查询用户自定义存证
 */
func (client *Client) QueryAuthCertClaimEx(request *QueryAuthCertClaimRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryAuthCertClaimResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryAuthCertClaimResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.auth.cert.claim.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 生成查验证书存证的url
 * Summary: 生成查验证书存证的url
 */
func (client *Client) CreateAuthCertClaimurl(request *CreateAuthCertClaimurlRequest) (_result *CreateAuthCertClaimurlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateAuthCertClaimurlResponse{}
	_body, _err := client.CreateAuthCertClaimurlEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 生成查验证书存证的url
 * Summary: 生成查验证书存证的url
 */
func (client *Client) CreateAuthCertClaimurlEx(request *CreateAuthCertClaimurlRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateAuthCertClaimurlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateAuthCertClaimurlResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.auth.cert.claimurl.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取用户已授权的最近存证信息，在理财风测卡场景获取最近的题目答案
 * Summary: 获取用户已授权的最近存证信息
 */
func (client *Client) GetAuthClaimRecent(request *GetAuthClaimRecentRequest) (_result *GetAuthClaimRecentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetAuthClaimRecentResponse{}
	_body, _err := client.GetAuthClaimRecentEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取用户已授权的最近存证信息，在理财风测卡场景获取最近的题目答案
 * Summary: 获取用户已授权的最近存证信息
 */
func (client *Client) GetAuthClaimRecentEx(request *GetAuthClaimRecentRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetAuthClaimRecentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetAuthClaimRecentResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.auth.claim.recent.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 新的：baas.auth.contract.claim.exec
 * Summary: 合约调用_废弃
 */
func (client *Client) ExecAuthContract(request *ExecAuthContractRequest) (_result *ExecAuthContractResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExecAuthContractResponse{}
	_body, _err := client.ExecAuthContractEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 新的：baas.auth.contract.claim.exec
 * Summary: 合约调用_废弃
 */
func (client *Client) ExecAuthContractEx(request *ExecAuthContractRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExecAuthContractResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ExecAuthContractResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.auth.contract.exec"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查看用户对于某一场景的授权状态
 * Summary: 查看用户授权状态
 */
func (client *Client) QueryAuthSceneAuthstatus(request *QueryAuthSceneAuthstatusRequest) (_result *QueryAuthSceneAuthstatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryAuthSceneAuthstatusResponse{}
	_body, _err := client.QueryAuthSceneAuthstatusEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查看用户对于某一场景的授权状态
 * Summary: 查看用户授权状态
 */
func (client *Client) QueryAuthSceneAuthstatusEx(request *QueryAuthSceneAuthstatusRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryAuthSceneAuthstatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryAuthSceneAuthstatusResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.auth.scene.authstatus.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 使用调用方did注册的vc channel链上账户调用指定合约
 * Summary: 合约调用
 */
func (client *Client) ExecAuthContractClaim(request *ExecAuthContractClaimRequest) (_result *ExecAuthContractClaimResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExecAuthContractClaimResponse{}
	_body, _err := client.ExecAuthContractClaimEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 使用调用方did注册的vc channel链上账户调用指定合约
 * Summary: 合约调用
 */
func (client *Client) ExecAuthContractClaimEx(request *ExecAuthContractClaimRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExecAuthContractClaimResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ExecAuthContractClaimResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.auth.contract.claim.exec"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: B类用户获取证书查验页面二维码的url
 * Summary: 获取证书查验页面二维码的url
 */
func (client *Client) CreateAuthCertDetailpageurl(request *CreateAuthCertDetailpageurlRequest) (_result *CreateAuthCertDetailpageurlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateAuthCertDetailpageurlResponse{}
	_body, _err := client.CreateAuthCertDetailpageurlEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: B类用户获取证书查验页面二维码的url
 * Summary: 获取证书查验页面二维码的url
 */
func (client *Client) CreateAuthCertDetailpageurlEx(request *CreateAuthCertDetailpageurlRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateAuthCertDetailpageurlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateAuthCertDetailpageurlResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.auth.cert.detailpageurl.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 用户合约签约接口
 * Summary: 用户合约签约
 */
func (client *Client) SignAuthAgreementUser(request *SignAuthAgreementUserRequest) (_result *SignAuthAgreementUserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SignAuthAgreementUserResponse{}
	_body, _err := client.SignAuthAgreementUserEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 用户合约签约接口
 * Summary: 用户合约签约
 */
func (client *Client) SignAuthAgreementUserEx(request *SignAuthAgreementUserRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SignAuthAgreementUserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SignAuthAgreementUserResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.auth.agreement.user.sign"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 给指定用户发放POAP徽章
 * Summary: 给指定用户发放POAP徽章
 */
func (client *Client) BindAuthPoap(request *BindAuthPoapRequest) (_result *BindAuthPoapResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &BindAuthPoapResponse{}
	_body, _err := client.BindAuthPoapEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 给指定用户发放POAP徽章
 * Summary: 给指定用户发放POAP徽章
 */
func (client *Client) BindAuthPoapEx(request *BindAuthPoapRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *BindAuthPoapResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BindAuthPoapResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.auth.poap.bind"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 根据ID查询POAP徽章详情
 * Summary: 查询POAP徽章详情
 */
func (client *Client) QueryAuthPoap(request *QueryAuthPoapRequest) (_result *QueryAuthPoapResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryAuthPoapResponse{}
	_body, _err := client.QueryAuthPoapEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 根据ID查询POAP徽章详情
 * Summary: 查询POAP徽章详情
 */
func (client *Client) QueryAuthPoapEx(request *QueryAuthPoapRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryAuthPoapResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryAuthPoapResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.auth.poap.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 授权宝数据授权流程，需要请求方先进行请求记录。
 * Summary: 开启数据授权流程，首先记录授权请求
 */
func (client *Client) StartAuthData(request *StartAuthDataRequest) (_result *StartAuthDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartAuthDataResponse{}
	_body, _err := client.StartAuthDataEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 授权宝数据授权流程，需要请求方先进行请求记录。
 * Summary: 开启数据授权流程，首先记录授权请求
 */
func (client *Client) StartAuthDataEx(request *StartAuthDataRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartAuthDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartAuthDataResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.auth.data.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 授权宝数据授权流程，调用方经过授权之后请求数据
 * Summary: 请求授权的数据，加密传输
 */
func (client *Client) GetAuthData(request *GetAuthDataRequest) (_result *GetAuthDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetAuthDataResponse{}
	_body, _err := client.GetAuthDataEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 授权宝数据授权流程，调用方经过授权之后请求数据
 * Summary: 请求授权的数据，加密传输
 */
func (client *Client) GetAuthDataEx(request *GetAuthDataRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetAuthDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetAuthDataResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.auth.data.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询核身结果
 * Summary: 查询核身结果
 */
func (client *Client) QueryAuthIdentityauth(request *QueryAuthIdentityauthRequest) (_result *QueryAuthIdentityauthResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryAuthIdentityauthResponse{}
	_body, _err := client.QueryAuthIdentityauthEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询核身结果
 * Summary: 查询核身结果
 */
func (client *Client) QueryAuthIdentityauthEx(request *QueryAuthIdentityauthRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryAuthIdentityauthResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryAuthIdentityauthResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.auth.identityauth.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询证书的详情h5链接
 * Summary: 查询证书的详情h5链接
 */
func (client *Client) QueryAuthCertDetailurl(request *QueryAuthCertDetailurlRequest) (_result *QueryAuthCertDetailurlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryAuthCertDetailurlResponse{}
	_body, _err := client.QueryAuthCertDetailurlEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询证书的详情h5链接
 * Summary: 查询证书的详情h5链接
 */
func (client *Client) QueryAuthCertDetailurlEx(request *QueryAuthCertDetailurlRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryAuthCertDetailurlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryAuthCertDetailurlResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.auth.cert.detailurl.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 主站应用同步授权宝权益任务的完成情况
 * Summary: 主站应用同步授权宝权益任务的完成情况
 */
func (client *Client) NotifyAuthTaskStatus(request *NotifyAuthTaskStatusRequest) (_result *NotifyAuthTaskStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &NotifyAuthTaskStatusResponse{}
	_body, _err := client.NotifyAuthTaskStatusEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 主站应用同步授权宝权益任务的完成情况
 * Summary: 主站应用同步授权宝权益任务的完成情况
 */
func (client *Client) NotifyAuthTaskStatusEx(request *NotifyAuthTaskStatusRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *NotifyAuthTaskStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &NotifyAuthTaskStatusResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.auth.task.status.notify"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 任务暂停
 * Summary: 任务暂停
 */
func (client *Client) PauseAuthTask(request *PauseAuthTaskRequest) (_result *PauseAuthTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &PauseAuthTaskResponse{}
	_body, _err := client.PauseAuthTaskEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 任务暂停
 * Summary: 任务暂停
 */
func (client *Client) PauseAuthTaskEx(request *PauseAuthTaskRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *PauseAuthTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &PauseAuthTaskResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.auth.task.pause"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 任务完成
 * Summary: 任务完成
 */
func (client *Client) FinishAuthTask(request *FinishAuthTaskRequest) (_result *FinishAuthTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &FinishAuthTaskResponse{}
	_body, _err := client.FinishAuthTaskEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 任务完成
 * Summary: 任务完成
 */
func (client *Client) FinishAuthTaskEx(request *FinishAuthTaskRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *FinishAuthTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &FinishAuthTaskResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.auth.task.finish"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 任务重启
 * Summary: 任务重启
 */
func (client *Client) ReopenAuthTask(request *ReopenAuthTaskRequest) (_result *ReopenAuthTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ReopenAuthTaskResponse{}
	_body, _err := client.ReopenAuthTaskEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 任务重启
 * Summary: 任务重启
 */
func (client *Client) ReopenAuthTaskEx(request *ReopenAuthTaskRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ReopenAuthTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ReopenAuthTaskResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.auth.task.reopen"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 样本量修改
 * Summary: 样本量修改
 */
func (client *Client) OperateAuthTask(request *OperateAuthTaskRequest) (_result *OperateAuthTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &OperateAuthTaskResponse{}
	_body, _err := client.OperateAuthTaskEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 样本量修改
 * Summary: 样本量修改
 */
func (client *Client) OperateAuthTaskEx(request *OperateAuthTaskRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *OperateAuthTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &OperateAuthTaskResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.auth.task.operate"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询人群标签取值范围
 * Summary: 查询人群标签取值范围
 */
func (client *Client) QueryAuthTask(request *QueryAuthTaskRequest) (_result *QueryAuthTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryAuthTaskResponse{}
	_body, _err := client.QueryAuthTaskEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询人群标签取值范围
 * Summary: 查询人群标签取值范围
 */
func (client *Client) QueryAuthTaskEx(request *QueryAuthTaskRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryAuthTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryAuthTaskResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.auth.task.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 人群量级查询
 * Summary: 人群量级查询
 */
func (client *Client) CountAuthTask(request *CountAuthTaskRequest) (_result *CountAuthTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CountAuthTaskResponse{}
	_body, _err := client.CountAuthTaskEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 人群量级查询
 * Summary: 人群量级查询
 */
func (client *Client) CountAuthTaskEx(request *CountAuthTaskRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CountAuthTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CountAuthTaskResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.auth.task.count"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 人群匹配查询
 * Summary: 人群匹配查询
 */
func (client *Client) MatchAuthTask(request *MatchAuthTaskRequest) (_result *MatchAuthTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &MatchAuthTaskResponse{}
	_body, _err := client.MatchAuthTaskEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 人群匹配查询
 * Summary: 人群匹配查询
 */
func (client *Client) MatchAuthTaskEx(request *MatchAuthTaskRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *MatchAuthTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &MatchAuthTaskResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.auth.task.match"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 问卷任务提交
 * Summary: 问卷任务提交
 */
func (client *Client) SubmitAuthTask(request *SubmitAuthTaskRequest) (_result *SubmitAuthTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SubmitAuthTaskResponse{}
	_body, _err := client.SubmitAuthTaskEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 问卷任务提交
 * Summary: 问卷任务提交
 */
func (client *Client) SubmitAuthTaskEx(request *SubmitAuthTaskRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SubmitAuthTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SubmitAuthTaskResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.auth.task.submit"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 问卷任务详情
 * Summary: 问卷任务详情
 */
func (client *Client) DetailAuthTask(request *DetailAuthTaskRequest) (_result *DetailAuthTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DetailAuthTaskResponse{}
	_body, _err := client.DetailAuthTaskEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 问卷任务详情
 * Summary: 问卷任务详情
 */
func (client *Client) DetailAuthTaskEx(request *DetailAuthTaskRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DetailAuthTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DetailAuthTaskResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.auth.task.detail"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 任务修改
 * Summary: 任务修改
 */
func (client *Client) UpdateAuthTask(request *UpdateAuthTaskRequest) (_result *UpdateAuthTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateAuthTaskResponse{}
	_body, _err := client.UpdateAuthTaskEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 任务修改
 * Summary: 任务修改
 */
func (client *Client) UpdateAuthTaskEx(request *UpdateAuthTaskRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateAuthTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateAuthTaskResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.auth.task.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 人群量级查询
 * Summary: 人群量级查询
 */
func (client *Client) CountAuthTaskCrowd(request *CountAuthTaskCrowdRequest) (_result *CountAuthTaskCrowdResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CountAuthTaskCrowdResponse{}
	_body, _err := client.CountAuthTaskCrowdEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 人群量级查询
 * Summary: 人群量级查询
 */
func (client *Client) CountAuthTaskCrowdEx(request *CountAuthTaskCrowdRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CountAuthTaskCrowdResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CountAuthTaskCrowdResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.auth.task.crowd.count"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 人群匹配查询
 * Summary: 人群匹配查询
 */
func (client *Client) MatchAuthTaskCrowd(request *MatchAuthTaskCrowdRequest) (_result *MatchAuthTaskCrowdResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &MatchAuthTaskCrowdResponse{}
	_body, _err := client.MatchAuthTaskCrowdEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 人群匹配查询
 * Summary: 人群匹配查询
 */
func (client *Client) MatchAuthTaskCrowdEx(request *MatchAuthTaskCrowdRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *MatchAuthTaskCrowdResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &MatchAuthTaskCrowdResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.auth.task.crowd.match"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 人群标签取值范围查询
 * Summary: 人群标签取值范围查询
 */
func (client *Client) QueryAuthTaskLabel(request *QueryAuthTaskLabelRequest) (_result *QueryAuthTaskLabelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryAuthTaskLabelResponse{}
	_body, _err := client.QueryAuthTaskLabelEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 人群标签取值范围查询
 * Summary: 人群标签取值范围查询
 */
func (client *Client) QueryAuthTaskLabelEx(request *QueryAuthTaskLabelRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryAuthTaskLabelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryAuthTaskLabelResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.auth.task.label.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 任务列表查询
 * Summary: 任务列表查询
 */
func (client *Client) ListAuthTask(request *ListAuthTaskRequest) (_result *ListAuthTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListAuthTaskResponse{}
	_body, _err := client.ListAuthTaskEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 任务列表查询
 * Summary: 任务列表查询
 */
func (client *Client) ListAuthTaskEx(request *ListAuthTaskRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListAuthTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListAuthTaskResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.auth.task.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 权益退订openAPI接口
 * Summary: 权益退订
 */
func (client *Client) UnbindAuthEquity(request *UnbindAuthEquityRequest) (_result *UnbindAuthEquityResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UnbindAuthEquityResponse{}
	_body, _err := client.UnbindAuthEquityEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 权益退订openAPI接口
 * Summary: 权益退订
 */
func (client *Client) UnbindAuthEquityEx(request *UnbindAuthEquityRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UnbindAuthEquityResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UnbindAuthEquityResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.auth.equity.unbind"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 权益退款
 * Summary: 权益退款接口
 */
func (client *Client) RepayAuthEquity(request *RepayAuthEquityRequest) (_result *RepayAuthEquityResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &RepayAuthEquityResponse{}
	_body, _err := client.RepayAuthEquityEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 权益退款
 * Summary: 权益退款接口
 */
func (client *Client) RepayAuthEquityEx(request *RepayAuthEquityRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *RepayAuthEquityResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &RepayAuthEquityResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.auth.equity.repay"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 授权token校验
 * Summary: 授权token校验
 */
func (client *Client) VerifyAuthTokenValidity(request *VerifyAuthTokenValidityRequest) (_result *VerifyAuthTokenValidityResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &VerifyAuthTokenValidityResponse{}
	_body, _err := client.VerifyAuthTokenValidityEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 授权token校验
 * Summary: 授权token校验
 */
func (client *Client) VerifyAuthTokenValidityEx(request *VerifyAuthTokenValidityRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *VerifyAuthTokenValidityResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &VerifyAuthTokenValidityResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.auth.token.validity.verify"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 核验当前用户是否权益新用户
 * Summary: 权益核验是否新用户
 */
func (client *Client) VerifyAuthBusinessUser(request *VerifyAuthBusinessUserRequest) (_result *VerifyAuthBusinessUserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &VerifyAuthBusinessUserResponse{}
	_body, _err := client.VerifyAuthBusinessUserEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 核验当前用户是否权益新用户
 * Summary: 权益核验是否新用户
 */
func (client *Client) VerifyAuthBusinessUserEx(request *VerifyAuthBusinessUserRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *VerifyAuthBusinessUserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &VerifyAuthBusinessUserResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.auth.business.user.verify"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 代运营场景下第三方应用调用该接口推送相关信息，例如车辆信息
 * Summary: 代运营-推送用户授权的相关信息
 */
func (client *Client) SubmitAuthBusinessData(request *SubmitAuthBusinessDataRequest) (_result *SubmitAuthBusinessDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SubmitAuthBusinessDataResponse{}
	_body, _err := client.SubmitAuthBusinessDataEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 代运营场景下第三方应用调用该接口推送相关信息，例如车辆信息
 * Summary: 代运营-推送用户授权的相关信息
 */
func (client *Client) SubmitAuthBusinessDataEx(request *SubmitAuthBusinessDataRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SubmitAuthBusinessDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SubmitAuthBusinessDataResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.auth.business.data.submit"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 支持调用该接口上传行驶证照片，返回上传链接
 * Summary: 行驶证上传接口
 */
func (client *Client) UploadAuthBusinessCard(request *UploadAuthBusinessCardRequest) (_result *UploadAuthBusinessCardResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UploadAuthBusinessCardResponse{}
	_body, _err := client.UploadAuthBusinessCardEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 支持调用该接口上传行驶证照片，返回上传链接
 * Summary: 行驶证上传接口
 */
func (client *Client) UploadAuthBusinessCardEx(request *UploadAuthBusinessCardRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UploadAuthBusinessCardResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UploadAuthBusinessCardResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.auth.business.card.upload"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 通过指定可验证声明id，获取目标可验证声明链上交易信息，需要可验证声明的拥有者分享声明才可查询，如果没有权限则获取失败。
 * Summary: 获取目标可验证声明链上交易信息
 */
func (client *Client) QueryAuthVcTransaction(request *QueryAuthVcTransactionRequest) (_result *QueryAuthVcTransactionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryAuthVcTransactionResponse{}
	_body, _err := client.QueryAuthVcTransactionEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 通过指定可验证声明id，获取目标可验证声明链上交易信息，需要可验证声明的拥有者分享声明才可查询，如果没有权限则获取失败。
 * Summary: 获取目标可验证声明链上交易信息
 */
func (client *Client) QueryAuthVcTransactionEx(request *QueryAuthVcTransactionRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryAuthVcTransactionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryAuthVcTransactionResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.auth.vc.transaction.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 代运营场景用户确认授权接口
 * Summary: 代运营用户确认授权接口
 */
func (client *Client) AuthAuthBusinessUser(request *AuthAuthBusinessUserRequest) (_result *AuthAuthBusinessUserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &AuthAuthBusinessUserResponse{}
	_body, _err := client.AuthAuthBusinessUserEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 代运营场景用户确认授权接口
 * Summary: 代运营用户确认授权接口
 */
func (client *Client) AuthAuthBusinessUserEx(request *AuthAuthBusinessUserRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *AuthAuthBusinessUserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AuthAuthBusinessUserResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.auth.business.user.auth"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 通过代理模式为企业创建did
 * Summary: 通过代理模式为企业创建did
 */
func (client *Client) StartDidCorporateAgentcreate(request *StartDidCorporateAgentcreateRequest) (_result *StartDidCorporateAgentcreateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartDidCorporateAgentcreateResponse{}
	_body, _err := client.StartDidCorporateAgentcreateEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 通过代理模式为企业创建did
 * Summary: 通过代理模式为企业创建did
 */
func (client *Client) StartDidCorporateAgentcreateEx(request *StartDidCorporateAgentcreateRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartDidCorporateAgentcreateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartDidCorporateAgentcreateResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.corporate.agentcreate.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 通过代理模式为个人创建did
 * Summary: 通过代理模式为个人创建did
 */
func (client *Client) StartDidPersonAgentcreate(request *StartDidPersonAgentcreateRequest) (_result *StartDidPersonAgentcreateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartDidPersonAgentcreateResponse{}
	_body, _err := client.StartDidPersonAgentcreateEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 通过代理模式为个人创建did
 * Summary: 通过代理模式为个人创建did
 */
func (client *Client) StartDidPersonAgentcreateEx(request *StartDidPersonAgentcreateRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartDidPersonAgentcreateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartDidPersonAgentcreateResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.person.agentcreate.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 直接创建自己的企业did
 * Summary: 直接创建自己的企业did
 */
func (client *Client) StartDidCorporateSelfcreate(request *StartDidCorporateSelfcreateRequest) (_result *StartDidCorporateSelfcreateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartDidCorporateSelfcreateResponse{}
	_body, _err := client.StartDidCorporateSelfcreateEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 直接创建自己的企业did
 * Summary: 直接创建自己的企业did
 */
func (client *Client) StartDidCorporateSelfcreateEx(request *StartDidCorporateSelfcreateRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartDidCorporateSelfcreateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartDidCorporateSelfcreateResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.corporate.selfcreate.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 直接创建自己的个人did
 * Summary: 直接创建自己的个人did
 */
func (client *Client) StartDidPersonSelfcreate(request *StartDidPersonSelfcreateRequest) (_result *StartDidPersonSelfcreateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartDidPersonSelfcreateResponse{}
	_body, _err := client.StartDidPersonSelfcreateEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 直接创建自己的个人did
 * Summary: 直接创建自己的个人did
 */
func (client *Client) StartDidPersonSelfcreateEx(request *StartDidPersonSelfcreateRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartDidPersonSelfcreateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartDidPersonSelfcreateResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.person.selfcreate.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 使用自己或者代理的did为指定did颁发证书
 * Summary: 为指定did颁发证书
 */
func (client *Client) StartDidVerifiableclaimIssure(request *StartDidVerifiableclaimIssureRequest) (_result *StartDidVerifiableclaimIssureResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartDidVerifiableclaimIssureResponse{}
	_body, _err := client.StartDidVerifiableclaimIssureEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 使用自己或者代理的did为指定did颁发证书
 * Summary: 为指定did颁发证书
 */
func (client *Client) StartDidVerifiableclaimIssureEx(request *StartDidVerifiableclaimIssureRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartDidVerifiableclaimIssureResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartDidVerifiableclaimIssureResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.verifiableclaim.issure.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 验证可验证声明
 * Summary: 验证可验证声明
 */
func (client *Client) StartDidVerifiableclaimVerifier(request *StartDidVerifiableclaimVerifierRequest) (_result *StartDidVerifiableclaimVerifierResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartDidVerifiableclaimVerifierResponse{}
	_body, _err := client.StartDidVerifiableclaimVerifierEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 验证可验证声明
 * Summary: 验证可验证声明
 */
func (client *Client) StartDidVerifiableclaimVerifierEx(request *StartDidVerifiableclaimVerifierRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartDidVerifiableclaimVerifierResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartDidVerifiableclaimVerifierResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.verifiableclaim.verifier.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询did对应的doc
 * Summary: 查询did对应的doc
 */
func (client *Client) QueryDidDoc(request *QueryDidDocRequest) (_result *QueryDidDocResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryDidDocResponse{}
	_body, _err := client.QueryDidDocEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询did对应的doc
 * Summary: 查询did对应的doc
 */
func (client *Client) QueryDidDocEx(request *QueryDidDocRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryDidDocResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryDidDocResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.doc.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 更新可验证声明状态
 * Summary: 更新可验证声明状态
 */
func (client *Client) UpdateDidVerifiableclaimStatus(request *UpdateDidVerifiableclaimStatusRequest) (_result *UpdateDidVerifiableclaimStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateDidVerifiableclaimStatusResponse{}
	_body, _err := client.UpdateDidVerifiableclaimStatusEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 更新可验证声明状态
 * Summary: 更新可验证声明状态
 */
func (client *Client) UpdateDidVerifiableclaimStatusEx(request *UpdateDidVerifiableclaimStatusRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateDidVerifiableclaimStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateDidVerifiableclaimStatusResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.verifiableclaim.status.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 用户更新扩展字段中的扩展字段
 * Summary: 更新doc service中的扩展字段
 */
func (client *Client) UpdateDidCorporateExtensionservice(request *UpdateDidCorporateExtensionserviceRequest) (_result *UpdateDidCorporateExtensionserviceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateDidCorporateExtensionserviceResponse{}
	_body, _err := client.UpdateDidCorporateExtensionserviceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 用户更新扩展字段中的扩展字段
 * Summary: 更新doc service中的扩展字段
 */
func (client *Client) UpdateDidCorporateExtensionserviceEx(request *UpdateDidCorporateExtensionserviceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateDidCorporateExtensionserviceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateDidCorporateExtensionserviceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.corporate.extensionservice.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 设置不通租户在DID中的不同扩展字段
 * Summary: 设置不通租户在DID中的不同扩展字段
 */
func (client *Client) StartDidCorporateCustomerservicetype(request *StartDidCorporateCustomerservicetypeRequest) (_result *StartDidCorporateCustomerservicetypeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartDidCorporateCustomerservicetypeResponse{}
	_body, _err := client.StartDidCorporateCustomerservicetypeEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 设置不通租户在DID中的不同扩展字段
 * Summary: 设置不通租户在DID中的不同扩展字段
 */
func (client *Client) StartDidCorporateCustomerservicetypeEx(request *StartDidCorporateCustomerservicetypeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartDidCorporateCustomerservicetypeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartDidCorporateCustomerservicetypeResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.corporate.customerservicetype.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 三要素实名认证
 * Summary: 三要素实名认证
 */
func (client *Client) StartDidCertificationThreemeta(request *StartDidCertificationThreemetaRequest) (_result *StartDidCertificationThreemetaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartDidCertificationThreemetaResponse{}
	_body, _err := client.StartDidCertificationThreemetaEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 三要素实名认证
 * Summary: 三要素实名认证
 */
func (client *Client) StartDidCertificationThreemetaEx(request *StartDidCertificationThreemetaRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartDidCertificationThreemetaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartDidCertificationThreemetaResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.certification.threemeta.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 二要素实名认证
 * Summary: 二要素实名认证
 */
func (client *Client) StartDidCertificationTwometa(request *StartDidCertificationTwometaRequest) (_result *StartDidCertificationTwometaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartDidCertificationTwometaResponse{}
	_body, _err := client.StartDidCertificationTwometaEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 二要素实名认证
 * Summary: 二要素实名认证
 */
func (client *Client) StartDidCertificationTwometaEx(request *StartDidCertificationTwometaRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartDidCertificationTwometaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartDidCertificationTwometaResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.certification.twometa.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 通过vcid查询vc内容
 * Summary: 通过vcid查询vc内容
 */
func (client *Client) QueryDidVc(request *QueryDidVcRequest) (_result *QueryDidVcResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryDidVcResponse{}
	_body, _err := client.QueryDidVcEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 通过vcid查询vc内容
 * Summary: 通过vcid查询vc内容
 */
func (client *Client) QueryDidVcEx(request *QueryDidVcRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryDidVcResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryDidVcResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.vc.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 开始实人认证
 * Summary: 开始实人认证
 */
func (client *Client) StartDidIdentificationFaceauth(request *StartDidIdentificationFaceauthRequest) (_result *StartDidIdentificationFaceauthResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartDidIdentificationFaceauthResponse{}
	_body, _err := client.StartDidIdentificationFaceauthEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 开始实人认证
 * Summary: 开始实人认证
 */
func (client *Client) StartDidIdentificationFaceauthEx(request *StartDidIdentificationFaceauthRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartDidIdentificationFaceauthResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartDidIdentificationFaceauthResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.identification.faceauth.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询实人认证结果
 * Summary: 查询实人认证结果
 */
func (client *Client) QueryDidIdentificationFaceauth(request *QueryDidIdentificationFaceauthRequest) (_result *QueryDidIdentificationFaceauthResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryDidIdentificationFaceauthResponse{}
	_body, _err := client.QueryDidIdentificationFaceauthEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询实人认证结果
 * Summary: 查询实人认证结果
 */
func (client *Client) QueryDidIdentificationFaceauthEx(request *QueryDidIdentificationFaceauthRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryDidIdentificationFaceauthResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryDidIdentificationFaceauthResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.identification.faceauth.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 用户通过该接口订阅自己关心的did事件
 * Summary: 订阅did事件服务
 */
func (client *Client) StartDidNotificationConsumer(request *StartDidNotificationConsumerRequest) (_result *StartDidNotificationConsumerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartDidNotificationConsumerResponse{}
	_body, _err := client.StartDidNotificationConsumerEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 用户通过该接口订阅自己关心的did事件
 * Summary: 订阅did事件服务
 */
func (client *Client) StartDidNotificationConsumerEx(request *StartDidNotificationConsumerRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartDidNotificationConsumerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartDidNotificationConsumerResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.notification.consumer.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 消费端在重启，或者需要重新拉之前的信息，需要调用这个接口重新注册
 * Summary: 消费端重新启动
 */
func (client *Client) RebootDidNotificationConsumer(request *RebootDidNotificationConsumerRequest) (_result *RebootDidNotificationConsumerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &RebootDidNotificationConsumerResponse{}
	_body, _err := client.RebootDidNotificationConsumerEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 消费端在重启，或者需要重新拉之前的信息，需要调用这个接口重新注册
 * Summary: 消费端重新启动
 */
func (client *Client) RebootDidNotificationConsumerEx(request *RebootDidNotificationConsumerRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *RebootDidNotificationConsumerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &RebootDidNotificationConsumerResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.notification.consumer.reboot"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 向Dis申请DID号
 * Summary: 非托管模式下创建DID时，申请ID
 */
func (client *Client) InitDidCorporateDirect(request *InitDidCorporateDirectRequest) (_result *InitDidCorporateDirectResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &InitDidCorporateDirectResponse{}
	_body, _err := client.InitDidCorporateDirectEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 向Dis申请DID号
 * Summary: 非托管模式下创建DID时，申请ID
 */
func (client *Client) InitDidCorporateDirectEx(request *InitDidCorporateDirectRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *InitDidCorporateDirectResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &InitDidCorporateDirectResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.corporate.direct.init"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 推送或者更新did doc
 * Summary: 推送或者更新did doc
 */
func (client *Client) PushDidCorporateDirect(request *PushDidCorporateDirectRequest) (_result *PushDidCorporateDirectResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &PushDidCorporateDirectResponse{}
	_body, _err := client.PushDidCorporateDirectEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 推送或者更新did doc
 * Summary: 推送或者更新did doc
 */
func (client *Client) PushDidCorporateDirectEx(request *PushDidCorporateDirectRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *PushDidCorporateDirectResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &PushDidCorporateDirectResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.corporate.direct.push"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 企业申请did
 * Summary: 申请did
 */
func (client *Client) InitDidCorporateIdentity(request *InitDidCorporateIdentityRequest) (_result *InitDidCorporateIdentityResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &InitDidCorporateIdentityResponse{}
	_body, _err := client.InitDidCorporateIdentityEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 企业申请did
 * Summary: 申请did
 */
func (client *Client) InitDidCorporateIdentityEx(request *InitDidCorporateIdentityRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *InitDidCorporateIdentityResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &InitDidCorporateIdentityResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.corporate.identity.init"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 对authchallenge进行响应
 * Summary: 对authchallenge进行响应
 */
func (client *Client) StartDidAgentChallengeresponse(request *StartDidAgentChallengeresponseRequest) (_result *StartDidAgentChallengeresponseResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartDidAgentChallengeresponseResponse{}
	_body, _err := client.StartDidAgentChallengeresponseEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 对authchallenge进行响应
 * Summary: 对authchallenge进行响应
 */
func (client *Client) StartDidAgentChallengeresponseEx(request *StartDidAgentChallengeresponseRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartDidAgentChallengeresponseResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartDidAgentChallengeresponseResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.agent.challengeresponse.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 验证Auth Response有效性接口
 * Summary: 验证Auth Response有效性
 */
func (client *Client) StartDidAgentVerifyauthresponse(request *StartDidAgentVerifyauthresponseRequest) (_result *StartDidAgentVerifyauthresponseResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartDidAgentVerifyauthresponseResponse{}
	_body, _err := client.StartDidAgentVerifyauthresponseEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 验证Auth Response有效性接口
 * Summary: 验证Auth Response有效性
 */
func (client *Client) StartDidAgentVerifyauthresponseEx(request *StartDidAgentVerifyauthresponseRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartDidAgentVerifyauthresponseResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartDidAgentVerifyauthresponseResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.agent.verifyauthresponse.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 脱敏身份验证
 * Summary: 脱敏身份验证
 */
func (client *Client) StartDidCertificationMask(request *StartDidCertificationMaskRequest) (_result *StartDidCertificationMaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartDidCertificationMaskResponse{}
	_body, _err := client.StartDidCertificationMaskEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 脱敏身份验证
 * Summary: 脱敏身份验证
 */
func (client *Client) StartDidCertificationMaskEx(request *StartDidCertificationMaskRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartDidCertificationMaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartDidCertificationMaskResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.certification.mask.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 管理员为租户开通did服务
 * Summary: 管理员为租户开通did服务
 */
func (client *Client) OpenDidAdminService(request *OpenDidAdminServiceRequest) (_result *OpenDidAdminServiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &OpenDidAdminServiceResponse{}
	_body, _err := client.OpenDidAdminServiceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 管理员为租户开通did服务
 * Summary: 管理员为租户开通did服务
 */
func (client *Client) OpenDidAdminServiceEx(request *OpenDidAdminServiceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *OpenDidAdminServiceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &OpenDidAdminServiceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.admin.service.open"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 针对指定租户关闭dis服务
 * Summary: 针对指定租户关闭dis服务
 */
func (client *Client) StopDidAdminService(request *StopDidAdminServiceRequest) (_result *StopDidAdminServiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StopDidAdminServiceResponse{}
	_body, _err := client.StopDidAdminServiceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 针对指定租户关闭dis服务
 * Summary: 针对指定租户关闭dis服务
 */
func (client *Client) StopDidAdminServiceEx(request *StopDidAdminServiceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StopDidAdminServiceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StopDidAdminServiceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.admin.service.stop"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 为被托管人进行代理签名
 * Summary: 为被托管人进行代理签名
 */
func (client *Client) StartDidSignatureAgent(request *StartDidSignatureAgentRequest) (_result *StartDidSignatureAgentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartDidSignatureAgentResponse{}
	_body, _err := client.StartDidSignatureAgentEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 为被托管人进行代理签名
 * Summary: 为被托管人进行代理签名
 */
func (client *Client) StartDidSignatureAgentEx(request *StartDidSignatureAgentRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartDidSignatureAgentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartDidSignatureAgentResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.signature.agent.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 对字符串进行验签
 * Summary: 对字符串进行验签
 */
func (client *Client) CheckDidSign(request *CheckDidSignRequest) (_result *CheckDidSignResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CheckDidSignResponse{}
	_body, _err := client.CheckDidSignEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 对字符串进行验签
 * Summary: 对字符串进行验签
 */
func (client *Client) CheckDidSignEx(request *CheckDidSignRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CheckDidSignResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CheckDidSignResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.sign.check"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 根据用户指定路径，展示部分可见的声明，并可以被验证
 * Summary: 根据用户指定路径，展示部分可见声明
 */
func (client *Client) StartDidZkpverifiableclaimVisibility(request *StartDidZkpverifiableclaimVisibilityRequest) (_result *StartDidZkpverifiableclaimVisibilityResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartDidZkpverifiableclaimVisibilityResponse{}
	_body, _err := client.StartDidZkpverifiableclaimVisibilityEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 根据用户指定路径，展示部分可见的声明，并可以被验证
 * Summary: 根据用户指定路径，展示部分可见声明
 */
func (client *Client) StartDidZkpverifiableclaimVisibilityEx(request *StartDidZkpverifiableclaimVisibilityRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartDidZkpverifiableclaimVisibilityResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartDidZkpverifiableclaimVisibilityResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.zkpverifiableclaim.visibility.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 为指定did添加外键关联，该接口必须被did自己调用或者did的认证密钥管理人调用。
 * Summary: 为指定did添加外键关联
 */
func (client *Client) StartDidAgentSidekey(request *StartDidAgentSidekeyRequest) (_result *StartDidAgentSidekeyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartDidAgentSidekeyResponse{}
	_body, _err := client.StartDidAgentSidekeyEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 为指定did添加外键关联，该接口必须被did自己调用或者did的认证密钥管理人调用。
 * Summary: 为指定did添加外键关联
 */
func (client *Client) StartDidAgentSidekeyEx(request *StartDidAgentSidekeyRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartDidAgentSidekeyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartDidAgentSidekeyResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.agent.sidekey.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 为指定did更新外键关联，该接口必须被did自己调用或者did的认证密钥管理人调用。
 * Summary: 更新指定did的外键
 */
func (client *Client) UpdateDidAgentSidekey(request *UpdateDidAgentSidekeyRequest) (_result *UpdateDidAgentSidekeyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateDidAgentSidekeyResponse{}
	_body, _err := client.UpdateDidAgentSidekeyEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 为指定did更新外键关联，该接口必须被did自己调用或者did的认证密钥管理人调用。
 * Summary: 更新指定did的外键
 */
func (client *Client) UpdateDidAgentSidekeyEx(request *UpdateDidAgentSidekeyRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateDidAgentSidekeyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateDidAgentSidekeyResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.agent.sidekey.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 代理创建did并创建外键
 * Summary: 代理创建did并创建外键
 */
func (client *Client) StartDidCorporateAgentcreatewithsidekey(request *StartDidCorporateAgentcreatewithsidekeyRequest) (_result *StartDidCorporateAgentcreatewithsidekeyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartDidCorporateAgentcreatewithsidekeyResponse{}
	_body, _err := client.StartDidCorporateAgentcreatewithsidekeyEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 代理创建did并创建外键
 * Summary: 代理创建did并创建外键
 */
func (client *Client) StartDidCorporateAgentcreatewithsidekeyEx(request *StartDidCorporateAgentcreatewithsidekeyRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartDidCorporateAgentcreatewithsidekeyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartDidCorporateAgentcreatewithsidekeyResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.corporate.agentcreatewithsidekey.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 更新doc 中的扩展字段并更新外键
 * Summary: 更新doc 中的扩展字段并更新外键
 */
func (client *Client) UpdateDidCorporateExtensionservicewithsidekey(request *UpdateDidCorporateExtensionservicewithsidekeyRequest) (_result *UpdateDidCorporateExtensionservicewithsidekeyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateDidCorporateExtensionservicewithsidekeyResponse{}
	_body, _err := client.UpdateDidCorporateExtensionservicewithsidekeyEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 更新doc 中的扩展字段并更新外键
 * Summary: 更新doc 中的扩展字段并更新外键
 */
func (client *Client) UpdateDidCorporateExtensionservicewithsidekeyEx(request *UpdateDidCorporateExtensionservicewithsidekeyRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateDidCorporateExtensionservicewithsidekeyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateDidCorporateExtensionservicewithsidekeyResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.corporate.extensionservicewithsidekey.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 通过sidekey方式查询对应doc
 * Summary: 通过sidekey方式查询对应doc
 */
func (client *Client) QueryDidDocSidekey(request *QueryDidDocSidekeyRequest) (_result *QueryDidDocSidekeyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryDidDocSidekeyResponse{}
	_body, _err := client.QueryDidDocSidekeyEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 通过sidekey方式查询对应doc
 * Summary: 通过sidekey方式查询对应doc
 */
func (client *Client) QueryDidDocSidekeyEx(request *QueryDidDocSidekeyRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryDidDocSidekeyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryDidDocSidekeyResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.doc.sidekey.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 代理创建个人did并创建外键
 * Summary: 代理创建个人did并创建外键
 */
func (client *Client) StartDidPersonAgentcreatewithsidekey(request *StartDidPersonAgentcreatewithsidekeyRequest) (_result *StartDidPersonAgentcreatewithsidekeyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartDidPersonAgentcreatewithsidekeyResponse{}
	_body, _err := client.StartDidPersonAgentcreatewithsidekeyEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 代理创建个人did并创建外键
 * Summary: 代理创建个人did并创建外键
 */
func (client *Client) StartDidPersonAgentcreatewithsidekeyEx(request *StartDidPersonAgentcreatewithsidekeyRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartDidPersonAgentcreatewithsidekeyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartDidPersonAgentcreatewithsidekeyResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.person.agentcreatewithsidekey.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 代理创建IOT did
 * Summary: 代理创建IOT did
 */
func (client *Client) StartDidIotAgentcreate(request *StartDidIotAgentcreateRequest) (_result *StartDidIotAgentcreateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartDidIotAgentcreateResponse{}
	_body, _err := client.StartDidIotAgentcreateEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 代理创建IOT did
 * Summary: 代理创建IOT did
 */
func (client *Client) StartDidIotAgentcreateEx(request *StartDidIotAgentcreateRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartDidIotAgentcreateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartDidIotAgentcreateResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.iot.agentcreate.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 代理创建IOT did并创建外键
 * Summary: 代理创建IOT did并创建外键
 */
func (client *Client) StartDidIotAgentcreatewithsidekey(request *StartDidIotAgentcreatewithsidekeyRequest) (_result *StartDidIotAgentcreatewithsidekeyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartDidIotAgentcreatewithsidekeyResponse{}
	_body, _err := client.StartDidIotAgentcreatewithsidekeyEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 代理创建IOT did并创建外键
 * Summary: 代理创建IOT did并创建外键
 */
func (client *Client) StartDidIotAgentcreatewithsidekeyEx(request *StartDidIotAgentcreatewithsidekeyRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartDidIotAgentcreatewithsidekeyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartDidIotAgentcreatewithsidekeyResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.iot.agentcreatewithsidekey.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 更新IOT类did的扩展字段并更新外键
 * Summary: 更新IOT类did的扩展字段并更新外键
 */
func (client *Client) UpdateDidIotExtensionservicewithsidekey(request *UpdateDidIotExtensionservicewithsidekeyRequest) (_result *UpdateDidIotExtensionservicewithsidekeyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateDidIotExtensionservicewithsidekeyResponse{}
	_body, _err := client.UpdateDidIotExtensionservicewithsidekeyEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 更新IOT类did的扩展字段并更新外键
 * Summary: 更新IOT类did的扩展字段并更新外键
 */
func (client *Client) UpdateDidIotExtensionservicewithsidekeyEx(request *UpdateDidIotExtensionservicewithsidekeyRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateDidIotExtensionservicewithsidekeyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateDidIotExtensionservicewithsidekeyResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.iot.extensionservicewithsidekey.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 更新个人did中的扩展字段并更新外键
 * Summary: 更新个人did中的扩展字段并更新外键
 */
func (client *Client) UpdateDidPersonExtensionservicewithsidekey(request *UpdateDidPersonExtensionservicewithsidekeyRequest) (_result *UpdateDidPersonExtensionservicewithsidekeyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateDidPersonExtensionservicewithsidekeyResponse{}
	_body, _err := client.UpdateDidPersonExtensionservicewithsidekeyEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 更新个人did中的扩展字段并更新外键
 * Summary: 更新个人did中的扩展字段并更新外键
 */
func (client *Client) UpdateDidPersonExtensionservicewithsidekeyEx(request *UpdateDidPersonExtensionservicewithsidekeyRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateDidPersonExtensionservicewithsidekeyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateDidPersonExtensionservicewithsidekeyResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.person.extensionservicewithsidekey.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 通过个人三要素验证后创建个人did，若未通过个人三要素验证，则不创建did并报错
 * Summary: 通过个人三要素验证后创建个人did
 */
func (client *Client) CreateDidPersonWiththreemeta(request *CreateDidPersonWiththreemetaRequest) (_result *CreateDidPersonWiththreemetaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateDidPersonWiththreemetaResponse{}
	_body, _err := client.CreateDidPersonWiththreemetaEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 通过个人三要素验证后创建个人did，若未通过个人三要素验证，则不创建did并报错
 * Summary: 通过个人三要素验证后创建个人did
 */
func (client *Client) CreateDidPersonWiththreemetaEx(request *CreateDidPersonWiththreemetaRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateDidPersonWiththreemetaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateDidPersonWiththreemetaResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.person.withthreemeta.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 通过企业三要素验证后创建企业did，若未通过企业三要素验证，则不创建did并报错
 * Summary: 通过企业三要素验证后创建企业did
 */
func (client *Client) CreateDidCorporateWiththreemeta(request *CreateDidCorporateWiththreemetaRequest) (_result *CreateDidCorporateWiththreemetaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateDidCorporateWiththreemetaResponse{}
	_body, _err := client.CreateDidCorporateWiththreemetaEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 通过企业三要素验证后创建企业did，若未通过企业三要素验证，则不创建did并报错
 * Summary: 通过企业三要素验证后创建企业did
 */
func (client *Client) CreateDidCorporateWiththreemetaEx(request *CreateDidCorporateWiththreemetaRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateDidCorporateWiththreemetaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateDidCorporateWiththreemetaResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.corporate.withthreemeta.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 使用自己或者代理的did为指定did颁发证书，同时在VC Repository中对证书VC进行存储。
支持授权管理，只有被授权的did未来才可以访问获取此颁发的证书数据。
 * Summary: 指定did颁发证书，并存储
*/
func (client *Client) StartDidVcrepositoryIssue(request *StartDidVcrepositoryIssueRequest) (_result *StartDidVcrepositoryIssueResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartDidVcrepositoryIssueResponse{}
	_body, _err := client.StartDidVcrepositoryIssueEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 使用自己或者代理的did为指定did颁发证书，同时在VC Repository中对证书VC进行存储。
支持授权管理，只有被授权的did未来才可以访问获取此颁发的证书数据。
 * Summary: 指定did颁发证书，并存储
*/
func (client *Client) StartDidVcrepositoryIssueEx(request *StartDidVcrepositoryIssueRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartDidVcrepositoryIssueResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartDidVcrepositoryIssueResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.vcrepository.issue.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 通过提供verifiable_claim_id来读取目标VC内容，如果调用方不知道目标VC的verifiable_claim_id，则通过配置目标VC的subject_did、issuer_did 和 过滤字段来查询并读取。
如果调用者不在目标VC的授权名单中，则无法读取目标VC内容。
 * Summary: 读取目标证书数据
*/
func (client *Client) StartDidVcrepositoryRead(request *StartDidVcrepositoryReadRequest) (_result *StartDidVcrepositoryReadResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartDidVcrepositoryReadResponse{}
	_body, _err := client.StartDidVcrepositoryReadEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 通过提供verifiable_claim_id来读取目标VC内容，如果调用方不知道目标VC的verifiable_claim_id，则通过配置目标VC的subject_did、issuer_did 和 过滤字段来查询并读取。
如果调用者不在目标VC的授权名单中，则无法读取目标VC内容。
 * Summary: 读取目标证书数据
*/
func (client *Client) StartDidVcrepositoryReadEx(request *StartDidVcrepositoryReadRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartDidVcrepositoryReadResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartDidVcrepositoryReadResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.vcrepository.read.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 调用者需是目标VC的拥有者，也就是目标VC内容中的subject。
授权新的did读取目标VC的权限。
 * Summary: 对已有vc新增授权did
*/
func (client *Client) StartDidVcrepositoryAuth(request *StartDidVcrepositoryAuthRequest) (_result *StartDidVcrepositoryAuthResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartDidVcrepositoryAuthResponse{}
	_body, _err := client.StartDidVcrepositoryAuthEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 调用者需是目标VC的拥有者，也就是目标VC内容中的subject。
授权新的did读取目标VC的权限。
 * Summary: 对已有vc新增授权did
*/
func (client *Client) StartDidVcrepositoryAuthEx(request *StartDidVcrepositoryAuthRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartDidVcrepositoryAuthResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartDidVcrepositoryAuthResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.vcrepository.auth.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 通过配置目标VC的subject_did 和 过滤字段来查询并读取。
如果调用者不在目标VC的授权名单中，则无法读取目标VC内容。
 * Summary: 查询过滤并读取目标证书数据
*/
func (client *Client) StartDidVcrepositoryFilterandread(request *StartDidVcrepositoryFilterandreadRequest) (_result *StartDidVcrepositoryFilterandreadResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartDidVcrepositoryFilterandreadResponse{}
	_body, _err := client.StartDidVcrepositoryFilterandreadEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 通过配置目标VC的subject_did 和 过滤字段来查询并读取。
如果调用者不在目标VC的授权名单中，则无法读取目标VC内容。
 * Summary: 查询过滤并读取目标证书数据
*/
func (client *Client) StartDidVcrepositoryFilterandreadEx(request *StartDidVcrepositoryFilterandreadRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartDidVcrepositoryFilterandreadResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartDidVcrepositoryFilterandreadResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.vcrepository.filterandread.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 通过提供verifiable_claim_id来读取目标VC内容，如果调用者不在目标VC的授权名单中，则无法读取目标VC内容。
注意通常verifiable_claim_id是“vc:mychain:”为前缀。
 * Summary: 通过vcid读取目标证书数据
*/
func (client *Client) StartDidVcrepositoryReadwithvcid(request *StartDidVcrepositoryReadwithvcidRequest) (_result *StartDidVcrepositoryReadwithvcidResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartDidVcrepositoryReadwithvcidResponse{}
	_body, _err := client.StartDidVcrepositoryReadwithvcidEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 通过提供verifiable_claim_id来读取目标VC内容，如果调用者不在目标VC的授权名单中，则无法读取目标VC内容。
注意通常verifiable_claim_id是“vc:mychain:”为前缀。
 * Summary: 通过vcid读取目标证书数据
*/
func (client *Client) StartDidVcrepositoryReadwithvcidEx(request *StartDidVcrepositoryReadwithvcidRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartDidVcrepositoryReadwithvcidResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartDidVcrepositoryReadwithvcidResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.vcrepository.readwithvcid.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 如果业务方在颁发证书VC时，使用了自定义的verifiable_claim_id，则使用此id来读取目标证书内容。
注意：通常自定义的verifiable_claim_id，不是“vc:mychain:”前缀开始。
 * Summary: 通过自定义id读取目标证书内容
*/
func (client *Client) StartDidVcrepositoryReadwithdefineid(request *StartDidVcrepositoryReadwithdefineidRequest) (_result *StartDidVcrepositoryReadwithdefineidResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartDidVcrepositoryReadwithdefineidResponse{}
	_body, _err := client.StartDidVcrepositoryReadwithdefineidEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 如果业务方在颁发证书VC时，使用了自定义的verifiable_claim_id，则使用此id来读取目标证书内容。
注意：通常自定义的verifiable_claim_id，不是“vc:mychain:”前缀开始。
 * Summary: 通过自定义id读取目标证书内容
*/
func (client *Client) StartDidVcrepositoryReadwithdefineidEx(request *StartDidVcrepositoryReadwithdefineidRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartDidVcrepositoryReadwithdefineidResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartDidVcrepositoryReadwithdefineidResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.vcrepository.readwithdefineid.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 通过提供verifiable_claim_id来找到目标VC内容并追加授权did列表，只有调用者是目标VC的subject才能操作。 注意通常verifiable_claim_id是“vc:mychain:”为前缀。
 * Summary: 通过vcid对目标证书追加授权
 */
func (client *Client) StartDidVcrepositoryAuthwithvcid(request *StartDidVcrepositoryAuthwithvcidRequest) (_result *StartDidVcrepositoryAuthwithvcidResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartDidVcrepositoryAuthwithvcidResponse{}
	_body, _err := client.StartDidVcrepositoryAuthwithvcidEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 通过提供verifiable_claim_id来找到目标VC内容并追加授权did列表，只有调用者是目标VC的subject才能操作。 注意通常verifiable_claim_id是“vc:mychain:”为前缀。
 * Summary: 通过vcid对目标证书追加授权
 */
func (client *Client) StartDidVcrepositoryAuthwithvcidEx(request *StartDidVcrepositoryAuthwithvcidRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartDidVcrepositoryAuthwithvcidResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartDidVcrepositoryAuthwithvcidResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.vcrepository.authwithvcid.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 通过提供业务方自定义id来找到目标VC内容并追加授权did列表，只有调用者是目标VC的subject才能操作。 注意通常自定义id不是“vc:mychain:”前缀。
 * Summary: 通过自定义id对目标证书追加授权
 */
func (client *Client) StartDidVcrepositoryAuthwithdefineid(request *StartDidVcrepositoryAuthwithdefineidRequest) (_result *StartDidVcrepositoryAuthwithdefineidResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartDidVcrepositoryAuthwithdefineidResponse{}
	_body, _err := client.StartDidVcrepositoryAuthwithdefineidEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 通过提供业务方自定义id来找到目标VC内容并追加授权did列表，只有调用者是目标VC的subject才能操作。 注意通常自定义id不是“vc:mychain:”前缀。
 * Summary: 通过自定义id对目标证书追加授权
 */
func (client *Client) StartDidVcrepositoryAuthwithdefineidEx(request *StartDidVcrepositoryAuthwithdefineidRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartDidVcrepositoryAuthwithdefineidResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartDidVcrepositoryAuthwithdefineidResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.vcrepository.authwithdefineid.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 注册自定义的服务类型，目前只有租户did可以调用
 * Summary: 注册自定义服务类型
 */
func (client *Client) StartDidAgentServicetype(request *StartDidAgentServicetypeRequest) (_result *StartDidAgentServicetypeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartDidAgentServicetypeResponse{}
	_body, _err := client.StartDidAgentServicetypeEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 注册自定义的服务类型，目前只有租户did可以调用
 * Summary: 注册自定义服务类型
 */
func (client *Client) StartDidAgentServicetypeEx(request *StartDidAgentServicetypeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartDidAgentServicetypeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartDidAgentServicetypeResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.agent.servicetype.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询指定服务类型的定义，不支持全量查询
 * Summary: 查询指定服务类型的定义
 */
func (client *Client) QueryDidAgentServicetype(request *QueryDidAgentServicetypeRequest) (_result *QueryDidAgentServicetypeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryDidAgentServicetypeResponse{}
	_body, _err := client.QueryDidAgentServicetypeEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询指定服务类型的定义，不支持全量查询
 * Summary: 查询指定服务类型的定义
 */
func (client *Client) QueryDidAgentServicetypeEx(request *QueryDidAgentServicetypeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryDidAgentServicetypeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryDidAgentServicetypeResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.agent.servicetype.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 代理模式下更新企业did doc中service中的字段
 * Summary: 代理更新企业did中的services
 */
func (client *Client) UpdateDidServices(request *UpdateDidServicesRequest) (_result *UpdateDidServicesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateDidServicesResponse{}
	_body, _err := client.UpdateDidServicesEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 代理模式下更新企业did doc中service中的字段
 * Summary: 代理更新企业did中的services
 */
func (client *Client) UpdateDidServicesEx(request *UpdateDidServicesRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateDidServicesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateDidServicesResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.services.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 服务发现
 * Summary: 服务发现
 */
func (client *Client) QueryDidAgentServicediscovery(request *QueryDidAgentServicediscoveryRequest) (_result *QueryDidAgentServicediscoveryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryDidAgentServicediscoveryResponse{}
	_body, _err := client.QueryDidAgentServicediscoveryEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 服务发现
 * Summary: 服务发现
 */
func (client *Client) QueryDidAgentServicediscoveryEx(request *QueryDidAgentServicediscoveryRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryDidAgentServicediscoveryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryDidAgentServicediscoveryResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.agent.servicediscovery.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 为指定did颁发证书,并将保存到对应仓库
 * Summary: 为指定did颁发证书,并将保存到对应仓库
 */
func (client *Client) StartDidVerifiableclaimIssuerandsave(request *StartDidVerifiableclaimIssuerandsaveRequest) (_result *StartDidVerifiableclaimIssuerandsaveResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartDidVerifiableclaimIssuerandsaveResponse{}
	_body, _err := client.StartDidVerifiableclaimIssuerandsaveEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 为指定did颁发证书,并将保存到对应仓库
 * Summary: 为指定did颁发证书,并将保存到对应仓库
 */
func (client *Client) StartDidVerifiableclaimIssuerandsaveEx(request *StartDidVerifiableclaimIssuerandsaveRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartDidVerifiableclaimIssuerandsaveResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartDidVerifiableclaimIssuerandsaveResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.verifiableclaim.issuerandsave.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 通过agent代理通过VC Repo进行VC传输
 * Summary: 通过agent代理进行VC传输
 */
func (client *Client) StartDidVcrepositoryVctransmit(request *StartDidVcrepositoryVctransmitRequest) (_result *StartDidVcrepositoryVctransmitResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartDidVcrepositoryVctransmitResponse{}
	_body, _err := client.StartDidVcrepositoryVctransmitEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 通过agent代理通过VC Repo进行VC传输
 * Summary: 通过agent代理进行VC传输
 */
func (client *Client) StartDidVcrepositoryVctransmitEx(request *StartDidVcrepositoryVctransmitRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartDidVcrepositoryVctransmitResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartDidVcrepositoryVctransmitResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.vcrepository.vctransmit.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 通过个人二要素验证后创建个人did，若未通过个人二要素验证，则不创建did并报错
 * Summary: 通过个人二要素验证后创建个人did
 */
func (client *Client) CreateDidPersonWithtwometa(request *CreateDidPersonWithtwometaRequest) (_result *CreateDidPersonWithtwometaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateDidPersonWithtwometaResponse{}
	_body, _err := client.CreateDidPersonWithtwometaEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 通过个人二要素验证后创建个人did，若未通过个人二要素验证，则不创建did并报错
 * Summary: 通过个人二要素验证后创建个人did
 */
func (client *Client) CreateDidPersonWithtwometaEx(request *CreateDidPersonWithtwometaRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateDidPersonWithtwometaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateDidPersonWithtwometaResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.person.withtwometa.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 通过企业二要素验证后创建企业did
 * Summary: 通过企业二要素验证后创建企业did
 */
func (client *Client) CreateDidCorporateWithtwometa(request *CreateDidCorporateWithtwometaRequest) (_result *CreateDidCorporateWithtwometaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateDidCorporateWithtwometaResponse{}
	_body, _err := client.CreateDidCorporateWithtwometaEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 通过企业二要素验证后创建企业did
 * Summary: 通过企业二要素验证后创建企业did
 */
func (client *Client) CreateDidCorporateWithtwometaEx(request *CreateDidCorporateWithtwometaRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateDidCorporateWithtwometaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateDidCorporateWithtwometaResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.corporate.withtwometa.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 通过企业四要素验证后创建企业did
 * Summary: 通过企业四要素验证后创建企业did
 */
func (client *Client) CreateDidCorporateWithfourmeta(request *CreateDidCorporateWithfourmetaRequest) (_result *CreateDidCorporateWithfourmetaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateDidCorporateWithfourmetaResponse{}
	_body, _err := client.CreateDidCorporateWithfourmetaEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 通过企业四要素验证后创建企业did
 * Summary: 通过企业四要素验证后创建企业did
 */
func (client *Client) CreateDidCorporateWithfourmetaEx(request *CreateDidCorporateWithfourmetaRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateDidCorporateWithfourmetaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateDidCorporateWithfourmetaResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.corporate.withfourmeta.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 通过个人四要素验证后创建个人did
 * Summary: 通过个人四要素验证后创建个人did
 */
func (client *Client) CreateDidPersonWithfourmeta(request *CreateDidPersonWithfourmetaRequest) (_result *CreateDidPersonWithfourmetaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateDidPersonWithfourmetaResponse{}
	_body, _err := client.CreateDidPersonWithfourmetaEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 通过个人四要素验证后创建个人did
 * Summary: 通过个人四要素验证后创建个人did
 */
func (client *Client) CreateDidPersonWithfourmetaEx(request *CreateDidPersonWithfourmetaRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateDidPersonWithfourmetaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateDidPersonWithfourmetaResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.person.withfourmeta.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 对did进行企业二要素实名认证
 * Summary: 对did进行企业二要素实名认证
 */
func (client *Client) StartDidCorporateTwometa(request *StartDidCorporateTwometaRequest) (_result *StartDidCorporateTwometaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartDidCorporateTwometaResponse{}
	_body, _err := client.StartDidCorporateTwometaEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 对did进行企业二要素实名认证
 * Summary: 对did进行企业二要素实名认证
 */
func (client *Client) StartDidCorporateTwometaEx(request *StartDidCorporateTwometaRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartDidCorporateTwometaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartDidCorporateTwometaResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.corporate.twometa.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 对did进行企业三要素实名认证
 * Summary: 对did进行企业三要素实名认证
 */
func (client *Client) StartDidCorporateThreemeta(request *StartDidCorporateThreemetaRequest) (_result *StartDidCorporateThreemetaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartDidCorporateThreemetaResponse{}
	_body, _err := client.StartDidCorporateThreemetaEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 对did进行企业三要素实名认证
 * Summary: 对did进行企业三要素实名认证
 */
func (client *Client) StartDidCorporateThreemetaEx(request *StartDidCorporateThreemetaRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartDidCorporateThreemetaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartDidCorporateThreemetaResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.corporate.threemeta.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 对did进行企业四要素实名认证
 * Summary: 对did进行企业四要素实名认证
 */
func (client *Client) StartDidCorporateFourmeta(request *StartDidCorporateFourmetaRequest) (_result *StartDidCorporateFourmetaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartDidCorporateFourmetaResponse{}
	_body, _err := client.StartDidCorporateFourmetaEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 对did进行企业四要素实名认证
 * Summary: 对did进行企业四要素实名认证
 */
func (client *Client) StartDidCorporateFourmetaEx(request *StartDidCorporateFourmetaRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartDidCorporateFourmetaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartDidCorporateFourmetaResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.corporate.fourmeta.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 四要素实名认证
 * Summary: 四要素实名认证
 */
func (client *Client) StartDidCertificationFourmeta(request *StartDidCertificationFourmetaRequest) (_result *StartDidCertificationFourmetaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartDidCertificationFourmetaResponse{}
	_body, _err := client.StartDidCertificationFourmetaEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 四要素实名认证
 * Summary: 四要素实名认证
 */
func (client *Client) StartDidCertificationFourmetaEx(request *StartDidCertificationFourmetaRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartDidCertificationFourmetaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartDidCertificationFourmetaResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.certification.fourmeta.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 模糊查询VC列表
 * Summary: 模糊查询vc
 */
func (client *Client) QueryDidVcrepositoryFuzzyquerywithdefinedid(request *QueryDidVcrepositoryFuzzyquerywithdefinedidRequest) (_result *QueryDidVcrepositoryFuzzyquerywithdefinedidResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryDidVcrepositoryFuzzyquerywithdefinedidResponse{}
	_body, _err := client.QueryDidVcrepositoryFuzzyquerywithdefinedidEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 模糊查询VC列表
 * Summary: 模糊查询vc
 */
func (client *Client) QueryDidVcrepositoryFuzzyquerywithdefinedidEx(request *QueryDidVcrepositoryFuzzyquerywithdefinedidRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryDidVcrepositoryFuzzyquerywithdefinedidResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryDidVcrepositoryFuzzyquerywithdefinedidResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.vcrepository.fuzzyquerywithdefinedid.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 通过代理模式为普通账号创建did
 * Summary: 通过代理模式为普通账号创建did
 */
func (client *Client) StartDidCommonAgentcreate(request *StartDidCommonAgentcreateRequest) (_result *StartDidCommonAgentcreateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartDidCommonAgentcreateResponse{}
	_body, _err := client.StartDidCommonAgentcreateEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 通过代理模式为普通账号创建did
 * Summary: 通过代理模式为普通账号创建did
 */
func (client *Client) StartDidCommonAgentcreateEx(request *StartDidCommonAgentcreateRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartDidCommonAgentcreateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartDidCommonAgentcreateResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.common.agentcreate.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 企业法人刷脸认证
 * Summary: 企业法人刷脸认证
 */
func (client *Client) StartDidCorporateFaceauth(request *StartDidCorporateFaceauthRequest) (_result *StartDidCorporateFaceauthResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartDidCorporateFaceauthResponse{}
	_body, _err := client.StartDidCorporateFaceauthEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 企业法人刷脸认证
 * Summary: 企业法人刷脸认证
 */
func (client *Client) StartDidCorporateFaceauthEx(request *StartDidCorporateFaceauthRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartDidCorporateFaceauthResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartDidCorporateFaceauthResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.corporate.faceauth.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询企业法人实人结果
 * Summary: 查询企业法人实人结果
 */
func (client *Client) QueryDidCorporateFaceauth(request *QueryDidCorporateFaceauthRequest) (_result *QueryDidCorporateFaceauthResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryDidCorporateFaceauthResponse{}
	_body, _err := client.QueryDidCorporateFaceauthEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询企业法人实人结果
 * Summary: 查询企业法人实人结果
 */
func (client *Client) QueryDidCorporateFaceauthEx(request *QueryDidCorporateFaceauthRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryDidCorporateFaceauthResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryDidCorporateFaceauthResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.corporate.faceauth.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 用户删除不需要的VC
 * Summary: 用户删除不需要的vc
 */
func (client *Client) DeleteDidVcrepositoryVc(request *DeleteDidVcrepositoryVcRequest) (_result *DeleteDidVcrepositoryVcResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteDidVcrepositoryVcResponse{}
	_body, _err := client.DeleteDidVcrepositoryVcEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 用户删除不需要的VC
 * Summary: 用户删除不需要的vc
 */
func (client *Client) DeleteDidVcrepositoryVcEx(request *DeleteDidVcrepositoryVcRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteDidVcrepositoryVcResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteDidVcrepositoryVcResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.vcrepository.vc.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description:  构造包含零知识 字段的VC
 * Summary: 构造零知识证明的VC
 */
func (client *Client) StartDidZkpverifiableclaimProof(request *StartDidZkpverifiableclaimProofRequest) (_result *StartDidZkpverifiableclaimProofResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartDidZkpverifiableclaimProofResponse{}
	_body, _err := client.StartDidZkpverifiableclaimProofEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description:  构造包含零知识 字段的VC
 * Summary: 构造零知识证明的VC
 */
func (client *Client) StartDidZkpverifiableclaimProofEx(request *StartDidZkpverifiableclaimProofRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartDidZkpverifiableclaimProofResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartDidZkpverifiableclaimProofResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.zkpverifiableclaim.proof.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 验证包含ZKP Proof的VC
 * Summary: 验证包含ZKP Proof的VC
 */
func (client *Client) VerifyDidZkpverifiableclaimProof(request *VerifyDidZkpverifiableclaimProofRequest) (_result *VerifyDidZkpverifiableclaimProofResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &VerifyDidZkpverifiableclaimProofResponse{}
	_body, _err := client.VerifyDidZkpverifiableclaimProofEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 验证包含ZKP Proof的VC
 * Summary: 验证包含ZKP Proof的VC
 */
func (client *Client) VerifyDidZkpverifiableclaimProofEx(request *VerifyDidZkpverifiableclaimProofRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *VerifyDidZkpverifiableclaimProofResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &VerifyDidZkpverifiableclaimProofResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.zkpverifiableclaim.proof.verify"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 支持移动端APP的安卓和IOS集成SDK进行刷脸认证，在查询query认证结果通过的情况下创建DID身份。
 * Summary: APP移动端刷脸认证成功后创建DID
 */
func (client *Client) CreateDidPersonFacevrf(request *CreateDidPersonFacevrfRequest) (_result *CreateDidPersonFacevrfResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateDidPersonFacevrfResponse{}
	_body, _err := client.CreateDidPersonFacevrfEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 支持移动端APP的安卓和IOS集成SDK进行刷脸认证，在查询query认证结果通过的情况下创建DID身份。
 * Summary: APP移动端刷脸认证成功后创建DID
 */
func (client *Client) CreateDidPersonFacevrfEx(request *CreateDidPersonFacevrfRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateDidPersonFacevrfResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateDidPersonFacevrfResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.person.facevrf.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询之前发起的实人认证的结果，如果认证通过就创建DID身份并返回。
 * Summary: 查询可信实人认证的结果并创建DID
 */
func (client *Client) QueryDidPersonFacevrf(request *QueryDidPersonFacevrfRequest) (_result *QueryDidPersonFacevrfResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryDidPersonFacevrfResponse{}
	_body, _err := client.QueryDidPersonFacevrfEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询之前发起的实人认证的结果，如果认证通过就创建DID身份并返回。
 * Summary: 查询可信实人认证的结果并创建DID
 */
func (client *Client) QueryDidPersonFacevrfEx(request *QueryDidPersonFacevrfRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryDidPersonFacevrfResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryDidPersonFacevrfResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.person.facevrf.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: h5或者小程序刷脸认证成功后创建DID
 * Summary: h5或者小程序刷脸认证成功后创建DID
 */
func (client *Client) CreateDidPersonFacevrfminiapp(request *CreateDidPersonFacevrfminiappRequest) (_result *CreateDidPersonFacevrfminiappResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateDidPersonFacevrfminiappResponse{}
	_body, _err := client.CreateDidPersonFacevrfminiappEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: h5或者小程序刷脸认证成功后创建DID
 * Summary: h5或者小程序刷脸认证成功后创建DID
 */
func (client *Client) CreateDidPersonFacevrfminiappEx(request *CreateDidPersonFacevrfminiappRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateDidPersonFacevrfminiappResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateDidPersonFacevrfminiappResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.person.facevrfminiapp.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询之前发起的实人认证的结果，如果认证通过就创建DID身份并返回。
 * Summary: 查询小程序刷脸的结果并创建DID
 */
func (client *Client) QueryDidPersonFacevrfminiapp(request *QueryDidPersonFacevrfminiappRequest) (_result *QueryDidPersonFacevrfminiappResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryDidPersonFacevrfminiappResponse{}
	_body, _err := client.QueryDidPersonFacevrfminiappEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询之前发起的实人认证的结果，如果认证通过就创建DID身份并返回。
 * Summary: 查询小程序刷脸的结果并创建DID
 */
func (client *Client) QueryDidPersonFacevrfminiappEx(request *QueryDidPersonFacevrfminiappRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryDidPersonFacevrfminiappResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryDidPersonFacevrfminiappResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.person.facevrfminiapp.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 使用自己或者代理的did为指定did颁发证书，同时在VC Repository中对证书VC进行存储。 支持授权管理，只有被授权的did未来才可以访问获取此颁发的证书数据。
 * Summary: 指定did颁发证书，并存储（新商品）
 */
func (client *Client) StartDidVcrepositoryIssuenewocp(request *StartDidVcrepositoryIssuenewocpRequest) (_result *StartDidVcrepositoryIssuenewocpResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartDidVcrepositoryIssuenewocpResponse{}
	_body, _err := client.StartDidVcrepositoryIssuenewocpEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 使用自己或者代理的did为指定did颁发证书，同时在VC Repository中对证书VC进行存储。 支持授权管理，只有被授权的did未来才可以访问获取此颁发的证书数据。
 * Summary: 指定did颁发证书，并存储（新商品）
 */
func (client *Client) StartDidVcrepositoryIssuenewocpEx(request *StartDidVcrepositoryIssuenewocpRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartDidVcrepositoryIssuenewocpResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartDidVcrepositoryIssuenewocpResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.vcrepository.issuenewocp.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 使用自己或者代理的did为指定did颁发证书
 * Summary: 为指定did颁发证书（新商品）
 */
func (client *Client) StartDidVerifiableclaimIssurenewocp(request *StartDidVerifiableclaimIssurenewocpRequest) (_result *StartDidVerifiableclaimIssurenewocpResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartDidVerifiableclaimIssurenewocpResponse{}
	_body, _err := client.StartDidVerifiableclaimIssurenewocpEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 使用自己或者代理的did为指定did颁发证书
 * Summary: 为指定did颁发证书（新商品）
 */
func (client *Client) StartDidVerifiableclaimIssurenewocpEx(request *StartDidVerifiableclaimIssurenewocpRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartDidVerifiableclaimIssurenewocpResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartDidVerifiableclaimIssurenewocpResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.verifiableclaim.issurenewocp.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 通过个人二要素验证后创建个人did，若未通过个人二要素验证，则不创建did并报错
 * Summary: 通过个人二要素验证后创建个人did（新）
 */
func (client *Client) CreateDidPersonWithtwometanewocp(request *CreateDidPersonWithtwometanewocpRequest) (_result *CreateDidPersonWithtwometanewocpResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateDidPersonWithtwometanewocpResponse{}
	_body, _err := client.CreateDidPersonWithtwometanewocpEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 通过个人二要素验证后创建个人did，若未通过个人二要素验证，则不创建did并报错
 * Summary: 通过个人二要素验证后创建个人did（新）
 */
func (client *Client) CreateDidPersonWithtwometanewocpEx(request *CreateDidPersonWithtwometanewocpRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateDidPersonWithtwometanewocpResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateDidPersonWithtwometanewocpResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.person.withtwometanewocp.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 通过个人三要素验证后创建个人did，若未通过个人三要素验证，则不创建did并报错
 * Summary: 通过个人三要素验证后创建个人did（新）
 */
func (client *Client) CreateDidPersonWiththreemetanewocp(request *CreateDidPersonWiththreemetanewocpRequest) (_result *CreateDidPersonWiththreemetanewocpResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateDidPersonWiththreemetanewocpResponse{}
	_body, _err := client.CreateDidPersonWiththreemetanewocpEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 通过个人三要素验证后创建个人did，若未通过个人三要素验证，则不创建did并报错
 * Summary: 通过个人三要素验证后创建个人did（新）
 */
func (client *Client) CreateDidPersonWiththreemetanewocpEx(request *CreateDidPersonWiththreemetanewocpRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateDidPersonWiththreemetanewocpResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateDidPersonWiththreemetanewocpResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.person.withthreemetanewocp.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 开始实人认证
 * Summary: 开始实人认证（新商品）
 */
func (client *Client) StartDidIdentificationFaceauthnewocp(request *StartDidIdentificationFaceauthnewocpRequest) (_result *StartDidIdentificationFaceauthnewocpResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartDidIdentificationFaceauthnewocpResponse{}
	_body, _err := client.StartDidIdentificationFaceauthnewocpEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 开始实人认证
 * Summary: 开始实人认证（新商品）
 */
func (client *Client) StartDidIdentificationFaceauthnewocpEx(request *StartDidIdentificationFaceauthnewocpRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartDidIdentificationFaceauthnewocpResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartDidIdentificationFaceauthnewocpResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.identification.faceauthnewocp.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 支持移动端APP的安卓和IOS集成SDK进行刷脸认证，在查询query认证结果通过的情况下创建DID身份。
 * Summary: APP移动端刷脸认证成功后创建DID
 */
func (client *Client) CreateDidPersonFacevrfnewocp(request *CreateDidPersonFacevrfnewocpRequest) (_result *CreateDidPersonFacevrfnewocpResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateDidPersonFacevrfnewocpResponse{}
	_body, _err := client.CreateDidPersonFacevrfnewocpEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 支持移动端APP的安卓和IOS集成SDK进行刷脸认证，在查询query认证结果通过的情况下创建DID身份。
 * Summary: APP移动端刷脸认证成功后创建DID
 */
func (client *Client) CreateDidPersonFacevrfnewocpEx(request *CreateDidPersonFacevrfnewocpRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateDidPersonFacevrfnewocpResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateDidPersonFacevrfnewocpResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.person.facevrfnewocp.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: h5或者小程序刷脸认证成功后创建DID（新个人刷脸商品）
 * Summary: h5或者小程序刷脸认证成功后创建DID
 */
func (client *Client) CreateDidPersonFacevrfminiappnewocp(request *CreateDidPersonFacevrfminiappnewocpRequest) (_result *CreateDidPersonFacevrfminiappnewocpResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateDidPersonFacevrfminiappnewocpResponse{}
	_body, _err := client.CreateDidPersonFacevrfminiappnewocpEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: h5或者小程序刷脸认证成功后创建DID（新个人刷脸商品）
 * Summary: h5或者小程序刷脸认证成功后创建DID
 */
func (client *Client) CreateDidPersonFacevrfminiappnewocpEx(request *CreateDidPersonFacevrfminiappnewocpRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateDidPersonFacevrfminiappnewocpResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateDidPersonFacevrfminiappnewocpResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.person.facevrfminiappnewocp.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 三要素实名认证（新商品）
 * Summary: 三要素实名认证
 */
func (client *Client) StartDidCertificationThreemetanewocp(request *StartDidCertificationThreemetanewocpRequest) (_result *StartDidCertificationThreemetanewocpResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartDidCertificationThreemetanewocpResponse{}
	_body, _err := client.StartDidCertificationThreemetanewocpEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 三要素实名认证（新商品）
 * Summary: 三要素实名认证
 */
func (client *Client) StartDidCertificationThreemetanewocpEx(request *StartDidCertificationThreemetanewocpRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartDidCertificationThreemetanewocpResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartDidCertificationThreemetanewocpResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.certification.threemetanewocp.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 迁移did至aldaba链
 * Summary: 迁移did至aldaba链
 */
func (client *Client) ImportDidAldaba(request *ImportDidAldabaRequest) (_result *ImportDidAldabaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ImportDidAldabaResponse{}
	_body, _err := client.ImportDidAldabaEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 迁移did至aldaba链
 * Summary: 迁移did至aldaba链
 */
func (client *Client) ImportDidAldabaEx(request *ImportDidAldabaRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ImportDidAldabaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ImportDidAldabaResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.aldaba.import"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 端上密钥生成did，但不doc上链
 * Summary: 端上密钥生成did
 */
func (client *Client) CreateDidDtxPerson(request *CreateDidDtxPersonRequest) (_result *CreateDidDtxPersonResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateDidDtxPersonResponse{}
	_body, _err := client.CreateDidDtxPersonEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 端上密钥生成did，但不doc上链
 * Summary: 端上密钥生成did
 */
func (client *Client) CreateDidDtxPersonEx(request *CreateDidDtxPersonRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateDidDtxPersonResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateDidDtxPersonResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.dtx.person.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 添加端上密钥，并上链
 * Summary: 添加端上密钥
 */
func (client *Client) AddDidDtxPk(request *AddDidDtxPkRequest) (_result *AddDidDtxPkResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &AddDidDtxPkResponse{}
	_body, _err := client.AddDidDtxPkEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 添加端上密钥，并上链
 * Summary: 添加端上密钥
 */
func (client *Client) AddDidDtxPkEx(request *AddDidDtxPkRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *AddDidDtxPkResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AddDidDtxPkResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.dtx.pk.add"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 端上密钥颁发vc
 * Summary: 端上密钥颁发vc
 */
func (client *Client) CreateDidDtxVc(request *CreateDidDtxVcRequest) (_result *CreateDidDtxVcResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateDidDtxVcResponse{}
	_body, _err := client.CreateDidDtxVcEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 端上密钥颁发vc
 * Summary: 端上密钥颁发vc
 */
func (client *Client) CreateDidDtxVcEx(request *CreateDidDtxVcRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateDidDtxVcResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateDidDtxVcResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.dtx.vc.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 数据隐私服务合作方入驻接口
 * Summary: 数据隐私服务合作方入驻接口
 */
func (client *Client) StartMydidcommunAgencySettlein(request *StartMydidcommunAgencySettleinRequest) (_result *StartMydidcommunAgencySettleinResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartMydidcommunAgencySettleinResponse{}
	_body, _err := client.StartMydidcommunAgencySettleinEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 数据隐私服务合作方入驻接口
 * Summary: 数据隐私服务合作方入驻接口
 */
func (client *Client) StartMydidcommunAgencySettleinEx(request *StartMydidcommunAgencySettleinRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartMydidcommunAgencySettleinResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartMydidcommunAgencySettleinResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.mydidcommun.agency.settlein.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 数据隐私服务合作机构选择tapp接口
 * Summary: 数据隐私服务合作机构选择tapp接口
 */
func (client *Client) StartMydidcommunAgencyChoicetapp(request *StartMydidcommunAgencyChoicetappRequest) (_result *StartMydidcommunAgencyChoicetappResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartMydidcommunAgencyChoicetappResponse{}
	_body, _err := client.StartMydidcommunAgencyChoicetappEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 数据隐私服务合作机构选择tapp接口
 * Summary: 数据隐私服务合作机构选择tapp接口
 */
func (client *Client) StartMydidcommunAgencyChoicetappEx(request *StartMydidcommunAgencyChoicetappRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartMydidcommunAgencyChoicetappResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartMydidcommunAgencyChoicetappResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.mydidcommun.agency.choicetapp.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 数据隐私服务合作机构下个人用户入驻接口
 * Summary: 数据隐私服务合作机构下个人用户入驻接口
 */
func (client *Client) StartMydidcommunAgencyuserPersonjoin(request *StartMydidcommunAgencyuserPersonjoinRequest) (_result *StartMydidcommunAgencyuserPersonjoinResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartMydidcommunAgencyuserPersonjoinResponse{}
	_body, _err := client.StartMydidcommunAgencyuserPersonjoinEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 数据隐私服务合作机构下个人用户入驻接口
 * Summary: 数据隐私服务合作机构下个人用户入驻接口
 */
func (client *Client) StartMydidcommunAgencyuserPersonjoinEx(request *StartMydidcommunAgencyuserPersonjoinRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartMydidcommunAgencyuserPersonjoinResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartMydidcommunAgencyuserPersonjoinResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.mydidcommun.agencyuser.personjoin.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 数据隐私服务合作机构下企业用户入驻接口
 * Summary: 数据隐私服务合作机构下企业用户入驻接口
 */
func (client *Client) StartMydidcommunAgencyuserCorporatejoin(request *StartMydidcommunAgencyuserCorporatejoinRequest) (_result *StartMydidcommunAgencyuserCorporatejoinResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartMydidcommunAgencyuserCorporatejoinResponse{}
	_body, _err := client.StartMydidcommunAgencyuserCorporatejoinEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 数据隐私服务合作机构下企业用户入驻接口
 * Summary: 数据隐私服务合作机构下企业用户入驻接口
 */
func (client *Client) StartMydidcommunAgencyuserCorporatejoinEx(request *StartMydidcommunAgencyuserCorporatejoinRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartMydidcommunAgencyuserCorporatejoinResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartMydidcommunAgencyuserCorporatejoinResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.mydidcommun.agencyuser.corporatejoin.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 更新doc service接口
 * Summary: 更新doc service接口
 */
func (client *Client) UpdateMydidcommunAgencyDoc(request *UpdateMydidcommunAgencyDocRequest) (_result *UpdateMydidcommunAgencyDocResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateMydidcommunAgencyDocResponse{}
	_body, _err := client.UpdateMydidcommunAgencyDocEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 更新doc service接口
 * Summary: 更新doc service接口
 */
func (client *Client) UpdateMydidcommunAgencyDocEx(request *UpdateMydidcommunAgencyDocRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateMydidcommunAgencyDocResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateMydidcommunAgencyDocResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.mydidcommun.agency.doc.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 主动发起数据传输流程请求
 * Summary: 主动发起数据安全传输流程
 */
func (client *Client) StartMydidcommunAgencyDatatransmitstart(request *StartMydidcommunAgencyDatatransmitstartRequest) (_result *StartMydidcommunAgencyDatatransmitstartResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartMydidcommunAgencyDatatransmitstartResponse{}
	_body, _err := client.StartMydidcommunAgencyDatatransmitstartEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 主动发起数据传输流程请求
 * Summary: 主动发起数据安全传输流程
 */
func (client *Client) StartMydidcommunAgencyDatatransmitstartEx(request *StartMydidcommunAgencyDatatransmitstartRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartMydidcommunAgencyDatatransmitstartResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartMydidcommunAgencyDatatransmitstartResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.mydidcommun.agency.datatransmitstart.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 继续触发主动发起数据安全传输流程
 * Summary: 继续触发主动发起数据安全传输流程
 */
func (client *Client) StartMydidcommunAgencyDatatransmitcontinue(request *StartMydidcommunAgencyDatatransmitcontinueRequest) (_result *StartMydidcommunAgencyDatatransmitcontinueResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartMydidcommunAgencyDatatransmitcontinueResponse{}
	_body, _err := client.StartMydidcommunAgencyDatatransmitcontinueEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 继续触发主动发起数据安全传输流程
 * Summary: 继续触发主动发起数据安全传输流程
 */
func (client *Client) StartMydidcommunAgencyDatatransmitcontinueEx(request *StartMydidcommunAgencyDatatransmitcontinueRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartMydidcommunAgencyDatatransmitcontinueResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartMydidcommunAgencyDatatransmitcontinueResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.mydidcommun.agency.datatransmitcontinue.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 主动发起申请数据资产的流程
 * Summary: 主动发起申请数据资产的流程
 */
func (client *Client) StartMydidcommunAgencyDataapplication(request *StartMydidcommunAgencyDataapplicationRequest) (_result *StartMydidcommunAgencyDataapplicationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartMydidcommunAgencyDataapplicationResponse{}
	_body, _err := client.StartMydidcommunAgencyDataapplicationEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 主动发起申请数据资产的流程
 * Summary: 主动发起申请数据资产的流程
 */
func (client *Client) StartMydidcommunAgencyDataapplicationEx(request *StartMydidcommunAgencyDataapplicationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartMydidcommunAgencyDataapplicationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartMydidcommunAgencyDataapplicationResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.mydidcommun.agency.dataapplication.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 据隐私服务合作机构选择多个tapp接口
 * Summary: 据隐私服务合作机构选择多个tapp接口
 */
func (client *Client) StartMydidcommunAgencyChoicetapplist(request *StartMydidcommunAgencyChoicetapplistRequest) (_result *StartMydidcommunAgencyChoicetapplistResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartMydidcommunAgencyChoicetapplistResponse{}
	_body, _err := client.StartMydidcommunAgencyChoicetapplistEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 据隐私服务合作机构选择多个tapp接口
 * Summary: 据隐私服务合作机构选择多个tapp接口
 */
func (client *Client) StartMydidcommunAgencyChoicetapplistEx(request *StartMydidcommunAgencyChoicetapplistRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartMydidcommunAgencyChoicetapplistResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartMydidcommunAgencyChoicetapplistResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.mydidcommun.agency.choicetapplist.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 定义数据资产审批流程
 * Summary: 定义数据资产审批流程
 */
func (client *Client) StartMydidcommunAgencyDataassertregister(request *StartMydidcommunAgencyDataassertregisterRequest) (_result *StartMydidcommunAgencyDataassertregisterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartMydidcommunAgencyDataassertregisterResponse{}
	_body, _err := client.StartMydidcommunAgencyDataassertregisterEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 定义数据资产审批流程
 * Summary: 定义数据资产审批流程
 */
func (client *Client) StartMydidcommunAgencyDataassertregisterEx(request *StartMydidcommunAgencyDataassertregisterRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartMydidcommunAgencyDataassertregisterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartMydidcommunAgencyDataassertregisterResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.mydidcommun.agency.dataassertregister.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 发起数据授权
 * Summary: 发起数据授权
 */
func (client *Client) StartMydidcommunAgencyAuth(request *StartMydidcommunAgencyAuthRequest) (_result *StartMydidcommunAgencyAuthResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartMydidcommunAgencyAuthResponse{}
	_body, _err := client.StartMydidcommunAgencyAuthEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 发起数据授权
 * Summary: 发起数据授权
 */
func (client *Client) StartMydidcommunAgencyAuthEx(request *StartMydidcommunAgencyAuthRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartMydidcommunAgencyAuthResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartMydidcommunAgencyAuthResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.mydidcommun.agency.auth.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 处理授权流程
 * Summary: 处理授权流程
 */
func (client *Client) StartMydidcommunAgencyProcessauth(request *StartMydidcommunAgencyProcessauthRequest) (_result *StartMydidcommunAgencyProcessauthResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartMydidcommunAgencyProcessauthResponse{}
	_body, _err := client.StartMydidcommunAgencyProcessauthEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 处理授权流程
 * Summary: 处理授权流程
 */
func (client *Client) StartMydidcommunAgencyProcessauthEx(request *StartMydidcommunAgencyProcessauthRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartMydidcommunAgencyProcessauthResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartMydidcommunAgencyProcessauthResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.mydidcommun.agency.processauth.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询授权当前状态
 * Summary: 查询授权当前状态
 */
func (client *Client) QueryMydidcommunAgencyProcessauth(request *QueryMydidcommunAgencyProcessauthRequest) (_result *QueryMydidcommunAgencyProcessauthResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryMydidcommunAgencyProcessauthResponse{}
	_body, _err := client.QueryMydidcommunAgencyProcessauthEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询授权当前状态
 * Summary: 查询授权当前状态
 */
func (client *Client) QueryMydidcommunAgencyProcessauthEx(request *QueryMydidcommunAgencyProcessauthRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryMydidcommunAgencyProcessauthResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryMydidcommunAgencyProcessauthResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.mydidcommun.agency.processauth.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 通过serviceType查找其对应信息
 * Summary: 通过serviceType查找其对应信息
 */
func (client *Client) QueryMydidcommunAgencyServicetypeinfo(request *QueryMydidcommunAgencyServicetypeinfoRequest) (_result *QueryMydidcommunAgencyServicetypeinfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryMydidcommunAgencyServicetypeinfoResponse{}
	_body, _err := client.QueryMydidcommunAgencyServicetypeinfoEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 通过serviceType查找其对应信息
 * Summary: 通过serviceType查找其对应信息
 */
func (client *Client) QueryMydidcommunAgencyServicetypeinfoEx(request *QueryMydidcommunAgencyServicetypeinfoRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryMydidcommunAgencyServicetypeinfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryMydidcommunAgencyServicetypeinfoResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.mydidcommun.agency.servicetypeinfo.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询任务执行结果文件
 * Summary: 查询任务执行结果文件
 */
func (client *Client) QueryMydidcommunAgencyTaskresultfile(request *QueryMydidcommunAgencyTaskresultfileRequest) (_result *QueryMydidcommunAgencyTaskresultfileResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryMydidcommunAgencyTaskresultfileResponse{}
	_body, _err := client.QueryMydidcommunAgencyTaskresultfileEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询任务执行结果文件
 * Summary: 查询任务执行结果文件
 */
func (client *Client) QueryMydidcommunAgencyTaskresultfileEx(request *QueryMydidcommunAgencyTaskresultfileRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryMydidcommunAgencyTaskresultfileResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryMydidcommunAgencyTaskresultfileResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.mydidcommun.agency.taskresultfile.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 任务执行 - 为目标用户申请某一服务类型的调用权限
 * Summary: 服务类型权限申请
 */
func (client *Client) ApplyMydidcommunTaskServicetype(request *ApplyMydidcommunTaskServicetypeRequest) (_result *ApplyMydidcommunTaskServicetypeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ApplyMydidcommunTaskServicetypeResponse{}
	_body, _err := client.ApplyMydidcommunTaskServicetypeEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 任务执行 - 为目标用户申请某一服务类型的调用权限
 * Summary: 服务类型权限申请
 */
func (client *Client) ApplyMydidcommunTaskServicetypeEx(request *ApplyMydidcommunTaskServicetypeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ApplyMydidcommunTaskServicetypeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ApplyMydidcommunTaskServicetypeResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.mydidcommun.task.servicetype.apply"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 通过任务Id获取任务执行结果
 * Summary: 获取任务执行结果
 */
func (client *Client) GetMydidcommunTaskTaskresult(request *GetMydidcommunTaskTaskresultRequest) (_result *GetMydidcommunTaskTaskresultResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetMydidcommunTaskTaskresultResponse{}
	_body, _err := client.GetMydidcommunTaskTaskresultEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 通过任务Id获取任务执行结果
 * Summary: 获取任务执行结果
 */
func (client *Client) GetMydidcommunTaskTaskresultEx(request *GetMydidcommunTaskTaskresultRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetMydidcommunTaskTaskresultResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetMydidcommunTaskTaskresultResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.mydidcommun.task.taskresult.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 注册数据资产
 * Summary: 添加数据资产
 */
func (client *Client) AddMydidcommunAssetData(request *AddMydidcommunAssetDataRequest) (_result *AddMydidcommunAssetDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &AddMydidcommunAssetDataResponse{}
	_body, _err := client.AddMydidcommunAssetDataEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 注册数据资产
 * Summary: 添加数据资产
 */
func (client *Client) AddMydidcommunAssetDataEx(request *AddMydidcommunAssetDataRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *AddMydidcommunAssetDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AddMydidcommunAssetDataResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.mydidcommun.asset.data.add"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 开始获取数据任务流程
 * Summary: 执行获取数据接口
 */
func (client *Client) StartMydidcommunTaskGetdata(request *StartMydidcommunTaskGetdataRequest) (_result *StartMydidcommunTaskGetdataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartMydidcommunTaskGetdataResponse{}
	_body, _err := client.StartMydidcommunTaskGetdataEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 开始获取数据任务流程
 * Summary: 执行获取数据接口
 */
func (client *Client) StartMydidcommunTaskGetdataEx(request *StartMydidcommunTaskGetdataRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartMydidcommunTaskGetdataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartMydidcommunTaskGetdataResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.mydidcommun.task.getdata.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 针对线下入驻，或者无法提供四要素的机构入驻
 * Summary: 机构入驻数据隐私服务
 */
func (client *Client) StartMydidcommunInstitutionSettlein(request *StartMydidcommunInstitutionSettleinRequest) (_result *StartMydidcommunInstitutionSettleinResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartMydidcommunInstitutionSettleinResponse{}
	_body, _err := client.StartMydidcommunInstitutionSettleinEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 针对线下入驻，或者无法提供四要素的机构入驻
 * Summary: 机构入驻数据隐私服务
 */
func (client *Client) StartMydidcommunInstitutionSettleinEx(request *StartMydidcommunInstitutionSettleinRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartMydidcommunInstitutionSettleinResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartMydidcommunInstitutionSettleinResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.mydidcommun.institution.settlein.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 计算集群 - 部署同步 - 获取一个需要同步的部署任务
 * Summary: 计算集群-部署同步-获取一个需要同步任务
 */
func (client *Client) GetMydidcommunWorkergroupSync(request *GetMydidcommunWorkergroupSyncRequest) (_result *GetMydidcommunWorkergroupSyncResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetMydidcommunWorkergroupSyncResponse{}
	_body, _err := client.GetMydidcommunWorkergroupSyncEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 计算集群 - 部署同步 - 获取一个需要同步的部署任务
 * Summary: 计算集群-部署同步-获取一个需要同步任务
 */
func (client *Client) GetMydidcommunWorkergroupSyncEx(request *GetMydidcommunWorkergroupSyncRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetMydidcommunWorkergroupSyncResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetMydidcommunWorkergroupSyncResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.mydidcommun.workergroup.sync.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 通过部署ID获取部署详情
 * Summary: 计算集群-部署-获取部署详情
 */
func (client *Client) GetMydidcommunWorkergroupPod(request *GetMydidcommunWorkergroupPodRequest) (_result *GetMydidcommunWorkergroupPodResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetMydidcommunWorkergroupPodResponse{}
	_body, _err := client.GetMydidcommunWorkergroupPodEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 通过部署ID获取部署详情
 * Summary: 计算集群-部署-获取部署详情
 */
func (client *Client) GetMydidcommunWorkergroupPodEx(request *GetMydidcommunWorkergroupPodRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetMydidcommunWorkergroupPodResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetMydidcommunWorkergroupPodResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.mydidcommun.workergroup.pod.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 计算集群-部署同步-设置同步任务完成
 * Summary: 计算集群-部署同步-设置同步任务完成
 */
func (client *Client) FinishMydidcommunWorkergroupSync(request *FinishMydidcommunWorkergroupSyncRequest) (_result *FinishMydidcommunWorkergroupSyncResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &FinishMydidcommunWorkergroupSyncResponse{}
	_body, _err := client.FinishMydidcommunWorkergroupSyncEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 计算集群-部署同步-设置同步任务完成
 * Summary: 计算集群-部署同步-设置同步任务完成
 */
func (client *Client) FinishMydidcommunWorkergroupSyncEx(request *FinishMydidcommunWorkergroupSyncRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *FinishMydidcommunWorkergroupSyncResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &FinishMydidcommunWorkergroupSyncResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.mydidcommun.workergroup.sync.finish"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 计算集群-部署同步-获取TAPP部署详情
 * Summary: 计算集群-TAPP-获取TAPP部署
 */
func (client *Client) GetMydidcommunWorkergroupTapp(request *GetMydidcommunWorkergroupTappRequest) (_result *GetMydidcommunWorkergroupTappResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetMydidcommunWorkergroupTappResponse{}
	_body, _err := client.GetMydidcommunWorkergroupTappEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 计算集群-部署同步-获取TAPP部署详情
 * Summary: 计算集群-TAPP-获取TAPP部署
 */
func (client *Client) GetMydidcommunWorkergroupTappEx(request *GetMydidcommunWorkergroupTappRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetMydidcommunWorkergroupTappResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetMydidcommunWorkergroupTappResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.mydidcommun.workergroup.tapp.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 更新TAPP部署的信息，包括公钥哈希等
 * Summary: 计算集群-TAPP-更新TAPP信息
 */
func (client *Client) UpdateMydidcommunWorkergroupTapp(request *UpdateMydidcommunWorkergroupTappRequest) (_result *UpdateMydidcommunWorkergroupTappResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateMydidcommunWorkergroupTappResponse{}
	_body, _err := client.UpdateMydidcommunWorkergroupTappEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 更新TAPP部署的信息，包括公钥哈希等
 * Summary: 计算集群-TAPP-更新TAPP信息
 */
func (client *Client) UpdateMydidcommunWorkergroupTappEx(request *UpdateMydidcommunWorkergroupTappRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateMydidcommunWorkergroupTappResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateMydidcommunWorkergroupTappResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.mydidcommun.workergroup.tapp.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取工作流的所有在线版本的配置
 * Summary: 计算集群-工作流-获取工作流配置
 */
func (client *Client) QueryMydidcommunWorkergroupWorkflow(request *QueryMydidcommunWorkergroupWorkflowRequest) (_result *QueryMydidcommunWorkergroupWorkflowResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryMydidcommunWorkergroupWorkflowResponse{}
	_body, _err := client.QueryMydidcommunWorkergroupWorkflowEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取工作流的所有在线版本的配置
 * Summary: 计算集群-工作流-获取工作流配置
 */
func (client *Client) QueryMydidcommunWorkergroupWorkflowEx(request *QueryMydidcommunWorkergroupWorkflowRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryMydidcommunWorkergroupWorkflowResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryMydidcommunWorkergroupWorkflowResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.mydidcommun.workergroup.workflow.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 同步集群状态
 * Summary: 计算集群-集群-同步集群状态
 */
func (client *Client) SyncMydidcommunWorkergroupGroup(request *SyncMydidcommunWorkergroupGroupRequest) (_result *SyncMydidcommunWorkergroupGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SyncMydidcommunWorkergroupGroupResponse{}
	_body, _err := client.SyncMydidcommunWorkergroupGroupEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 同步集群状态
 * Summary: 计算集群-集群-同步集群状态
 */
func (client *Client) SyncMydidcommunWorkergroupGroupEx(request *SyncMydidcommunWorkergroupGroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SyncMydidcommunWorkergroupGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SyncMydidcommunWorkergroupGroupResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.mydidcommun.workergroup.group.sync"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 计算集群-部署版本-获取版本列表
 * Summary: 计算集群-部署版本-获取版本列表
 */
func (client *Client) ListMydidcommunWorkergroupPodversion(request *ListMydidcommunWorkergroupPodversionRequest) (_result *ListMydidcommunWorkergroupPodversionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListMydidcommunWorkergroupPodversionResponse{}
	_body, _err := client.ListMydidcommunWorkergroupPodversionEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 计算集群-部署版本-获取版本列表
 * Summary: 计算集群-部署版本-获取版本列表
 */
func (client *Client) ListMydidcommunWorkergroupPodversionEx(request *ListMydidcommunWorkergroupPodversionRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListMydidcommunWorkergroupPodversionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListMydidcommunWorkergroupPodversionResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.mydidcommun.workergroup.podversion.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: did创建
 * Summary: did创建
 */
func (client *Client) SaveMydidIdaasDidservice(request *SaveMydidIdaasDidserviceRequest) (_result *SaveMydidIdaasDidserviceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SaveMydidIdaasDidserviceResponse{}
	_body, _err := client.SaveMydidIdaasDidserviceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: did创建
 * Summary: did创建
 */
func (client *Client) SaveMydidIdaasDidserviceEx(request *SaveMydidIdaasDidserviceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SaveMydidIdaasDidserviceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SaveMydidIdaasDidserviceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.mydid.idaas.didservice.save"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 消息端主动拉取did event
 * Summary: 消息端主动拉取did event
 */
func (client *Client) QueryDidNotificationDidevent(request *QueryDidNotificationDideventRequest) (_result *QueryDidNotificationDideventResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryDidNotificationDideventResponse{}
	_body, _err := client.QueryDidNotificationDideventEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 消息端主动拉取did event
 * Summary: 消息端主动拉取did event
 */
func (client *Client) QueryDidNotificationDideventEx(request *QueryDidNotificationDideventRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryDidNotificationDideventResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryDidNotificationDideventResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.notification.didevent.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 主动拉取vc事件
 * Summary: 主动拉取vc事件
 */
func (client *Client) QueryDidNotificationVcevent(request *QueryDidNotificationVceventRequest) (_result *QueryDidNotificationVceventResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryDidNotificationVceventResponse{}
	_body, _err := client.QueryDidNotificationVceventEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 主动拉取vc事件
 * Summary: 主动拉取vc事件
 */
func (client *Client) QueryDidNotificationVceventEx(request *QueryDidNotificationVceventRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryDidNotificationVceventResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryDidNotificationVceventResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.notification.vcevent.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取did全量数据
 * Summary: 获取did全量数据
 */
func (client *Client) QueryDidNotificationFulldid(request *QueryDidNotificationFulldidRequest) (_result *QueryDidNotificationFulldidResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryDidNotificationFulldidResponse{}
	_body, _err := client.QueryDidNotificationFulldidEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取did全量数据
 * Summary: 获取did全量数据
 */
func (client *Client) QueryDidNotificationFulldidEx(request *QueryDidNotificationFulldidRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryDidNotificationFulldidResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryDidNotificationFulldidResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.notification.fulldid.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 非托管模式下创建企业did账户
 * Summary: 非托管模式下创建企业did账户
 */
func (client *Client) CreateDidIdentityCorporate(request *CreateDidIdentityCorporateRequest) (_result *CreateDidIdentityCorporateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateDidIdentityCorporateResponse{}
	_body, _err := client.CreateDidIdentityCorporateEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 非托管模式下创建企业did账户
 * Summary: 非托管模式下创建企业did账户
 */
func (client *Client) CreateDidIdentityCorporateEx(request *CreateDidIdentityCorporateRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateDidIdentityCorporateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateDidIdentityCorporateResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.identity.corporate.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 计算上链交易hash
 * Summary: add did doc上链交易hash
 */
func (client *Client) InitDidAdddidHash(request *InitDidAdddidHashRequest) (_result *InitDidAdddidHashResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &InitDidAdddidHashResponse{}
	_body, _err := client.InitDidAdddidHashEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 计算上链交易hash
 * Summary: add did doc上链交易hash
 */
func (client *Client) InitDidAdddidHashEx(request *InitDidAdddidHashRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *InitDidAdddidHashResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &InitDidAdddidHashResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.adddid.hash.init"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 将diddoc写入DIS链
 * Summary: 将diddoc写入DIS链
 */
func (client *Client) StartDidAdddidExecute(request *StartDidAdddidExecuteRequest) (_result *StartDidAdddidExecuteResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartDidAdddidExecuteResponse{}
	_body, _err := client.StartDidAdddidExecuteEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 将diddoc写入DIS链
 * Summary: 将diddoc写入DIS链
 */
func (client *Client) StartDidAdddidExecuteEx(request *StartDidAdddidExecuteRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartDidAdddidExecuteResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartDidAdddidExecuteResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.adddid.execute.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 可验证声明上链之前计算其hash
 * Summary: 可验证声明上链之前计算其hash
 */
func (client *Client) InitDidAddvcHash(request *InitDidAddvcHashRequest) (_result *InitDidAddvcHashResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &InitDidAddvcHashResponse{}
	_body, _err := client.InitDidAddvcHashEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 可验证声明上链之前计算其hash
 * Summary: 可验证声明上链之前计算其hash
 */
func (client *Client) InitDidAddvcHashEx(request *InitDidAddvcHashRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *InitDidAddvcHashResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &InitDidAddvcHashResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.addvc.hash.init"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 实际执行可验证声明上链
 * Summary: 实际执行可验证声明上链
 */
func (client *Client) StartDidAddvcExecute(request *StartDidAddvcExecuteRequest) (_result *StartDidAddvcExecuteResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartDidAddvcExecuteResponse{}
	_body, _err := client.StartDidAddvcExecuteEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 实际执行可验证声明上链
 * Summary: 实际执行可验证声明上链
 */
func (client *Client) StartDidAddvcExecuteEx(request *StartDidAddvcExecuteRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartDidAddvcExecuteResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartDidAddvcExecuteResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.addvc.execute.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 计算更新VC状态交易hash
 * Summary: 计算更新VC状态交易hash
 */
func (client *Client) InitDidUpdatevcstatusHash(request *InitDidUpdatevcstatusHashRequest) (_result *InitDidUpdatevcstatusHashResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &InitDidUpdatevcstatusHashResponse{}
	_body, _err := client.InitDidUpdatevcstatusHashEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 计算更新VC状态交易hash
 * Summary: 计算更新VC状态交易hash
 */
func (client *Client) InitDidUpdatevcstatusHashEx(request *InitDidUpdatevcstatusHashRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *InitDidUpdatevcstatusHashResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &InitDidUpdatevcstatusHashResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.updatevcstatus.hash.init"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 更新VC状态
 * Summary: 更新VC状态
 */
func (client *Client) StartDidUpdatevcstatusExecute(request *StartDidUpdatevcstatusExecuteRequest) (_result *StartDidUpdatevcstatusExecuteResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartDidUpdatevcstatusExecuteResponse{}
	_body, _err := client.StartDidUpdatevcstatusExecuteEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 更新VC状态
 * Summary: 更新VC状态
 */
func (client *Client) StartDidUpdatevcstatusExecuteEx(request *StartDidUpdatevcstatusExecuteRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartDidUpdatevcstatusExecuteResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartDidUpdatevcstatusExecuteResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.updatevcstatus.execute.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 计算更新did交易hash
 * Summary: 计算更新did交易hash
 */
func (client *Client) InitDidUpdatedidHash(request *InitDidUpdatedidHashRequest) (_result *InitDidUpdatedidHashResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &InitDidUpdatedidHashResponse{}
	_body, _err := client.InitDidUpdatedidHashEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 计算更新did交易hash
 * Summary: 计算更新did交易hash
 */
func (client *Client) InitDidUpdatedidHashEx(request *InitDidUpdatedidHashRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *InitDidUpdatedidHashResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &InitDidUpdatedidHashResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.updatedid.hash.init"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 更新did
 * Summary: 更新did
 */
func (client *Client) StartDidUpdatedidExecute(request *StartDidUpdatedidExecuteRequest) (_result *StartDidUpdatedidExecuteResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartDidUpdatedidExecuteResponse{}
	_body, _err := client.StartDidUpdatedidExecuteEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 更新did
 * Summary: 更新did
 */
func (client *Client) StartDidUpdatedidExecuteEx(request *StartDidUpdatedidExecuteRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartDidUpdatedidExecuteResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartDidUpdatedidExecuteResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.updatedid.execute.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 非托管查询did doc
 * Summary: 非托管查询did doc
 */
func (client *Client) QueryDidDiddocDirect(request *QueryDidDiddocDirectRequest) (_result *QueryDidDiddocDirectResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryDidDiddocDirectResponse{}
	_body, _err := client.QueryDidDiddocDirectEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 非托管查询did doc
 * Summary: 非托管查询did doc
 */
func (client *Client) QueryDidDiddocDirectEx(request *QueryDidDiddocDirectRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryDidDiddocDirectResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryDidDiddocDirectResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.diddoc.direct.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 非托管查询可验证声明
 * Summary: 非托管查询可验证声明
 */
func (client *Client) QueryDidVcDirect(request *QueryDidVcDirectRequest) (_result *QueryDidVcDirectResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryDidVcDirectResponse{}
	_body, _err := client.QueryDidVcDirectEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 非托管查询可验证声明
 * Summary: 非托管查询可验证声明
 */
func (client *Client) QueryDidVcDirectEx(request *QueryDidVcDirectRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryDidVcDirectResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryDidVcDirectResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.vc.direct.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 非托管模式下创建个人did账户
 * Summary: 非托管模式下创建个人did账户
 */
func (client *Client) CreateDidIdentityPerson(request *CreateDidIdentityPersonRequest) (_result *CreateDidIdentityPersonResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateDidIdentityPersonResponse{}
	_body, _err := client.CreateDidIdentityPersonEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 非托管模式下创建个人did账户
 * Summary: 非托管模式下创建个人did账户
 */
func (client *Client) CreateDidIdentityPersonEx(request *CreateDidIdentityPersonRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateDidIdentityPersonResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateDidIdentityPersonResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.identity.person.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 非托管模式更新did doc中的auth key
 * Summary: 非托管模式更新doc中的auth key
 */
func (client *Client) UpdateDidUpdatedidAuthkey(request *UpdateDidUpdatedidAuthkeyRequest) (_result *UpdateDidUpdatedidAuthkeyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateDidUpdatedidAuthkeyResponse{}
	_body, _err := client.UpdateDidUpdatedidAuthkeyEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 非托管模式更新did doc中的auth key
 * Summary: 非托管模式更新doc中的auth key
 */
func (client *Client) UpdateDidUpdatedidAuthkeyEx(request *UpdateDidUpdatedidAuthkeyRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateDidUpdatedidAuthkeyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateDidUpdatedidAuthkeyResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.updatedid.authkey.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 更新did对应did doc中的service信息
 * Summary: 更新did service信息
 */
func (client *Client) UpdateDidUpdatedidService(request *UpdateDidUpdatedidServiceRequest) (_result *UpdateDidUpdatedidServiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateDidUpdatedidServiceResponse{}
	_body, _err := client.UpdateDidUpdatedidServiceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 更新did对应did doc中的service信息
 * Summary: 更新did service信息
 */
func (client *Client) UpdateDidUpdatedidServiceEx(request *UpdateDidUpdatedidServiceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateDidUpdatedidServiceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateDidUpdatedidServiceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.updatedid.service.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 添加did doc中的service
 * Summary: 添加did doc中的service
 */
func (client *Client) AddDidUpdatedidService(request *AddDidUpdatedidServiceRequest) (_result *AddDidUpdatedidServiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &AddDidUpdatedidServiceResponse{}
	_body, _err := client.AddDidUpdatedidServiceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 添加did doc中的service
 * Summary: 添加did doc中的service
 */
func (client *Client) AddDidUpdatedidServiceEx(request *AddDidUpdatedidServiceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *AddDidUpdatedidServiceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AddDidUpdatedidServiceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.updatedid.service.add"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 删除did doc中的service信息
 * Summary: 删除did doc中的service信息
 */
func (client *Client) DeleteDidUpdatedidService(request *DeleteDidUpdatedidServiceRequest) (_result *DeleteDidUpdatedidServiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteDidUpdatedidServiceResponse{}
	_body, _err := client.DeleteDidUpdatedidServiceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 删除did doc中的service信息
 * Summary: 删除did doc中的service信息
 */
func (client *Client) DeleteDidUpdatedidServiceEx(request *DeleteDidUpdatedidServiceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteDidUpdatedidServiceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteDidUpdatedidServiceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.updatedid.service.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 更新可验证声明状态
 * Summary: 更新可验证声明
 */
func (client *Client) UpdateDidUpdatevcStatus(request *UpdateDidUpdatevcStatusRequest) (_result *UpdateDidUpdatevcStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateDidUpdatevcStatusResponse{}
	_body, _err := client.UpdateDidUpdatevcStatusEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 更新可验证声明状态
 * Summary: 更新可验证声明
 */
func (client *Client) UpdateDidUpdatevcStatusEx(request *UpdateDidUpdatevcStatusRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateDidUpdatevcStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateDidUpdatevcStatusResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.updatevc.status.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 开通resolver服务接口
 * Summary: 开通resolver服务接口
 */
func (client *Client) OpenDidResolverService(request *OpenDidResolverServiceRequest) (_result *OpenDidResolverServiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &OpenDidResolverServiceResponse{}
	_body, _err := client.OpenDidResolverServiceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 开通resolver服务接口
 * Summary: 开通resolver服务接口
 */
func (client *Client) OpenDidResolverServiceEx(request *OpenDidResolverServiceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *OpenDidResolverServiceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &OpenDidResolverServiceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.resolver.service.open"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 停止resolver服务接口
 * Summary: 停止resolver服务接口
 */
func (client *Client) StopDidResolverService(request *StopDidResolverServiceRequest) (_result *StopDidResolverServiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StopDidResolverServiceResponse{}
	_body, _err := client.StopDidResolverServiceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 停止resolver服务接口
 * Summary: 停止resolver服务接口
 */
func (client *Client) StopDidResolverServiceEx(request *StopDidResolverServiceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StopDidResolverServiceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StopDidResolverServiceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.resolver.service.stop"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 使用根DID派生子DID并上链
 * Summary: 派生子DID上链
 */
func (client *Client) StartDidDerivedidExecute(request *StartDidDerivedidExecuteRequest) (_result *StartDidDerivedidExecuteResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartDidDerivedidExecuteResponse{}
	_body, _err := client.StartDidDerivedidExecuteEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 使用根DID派生子DID并上链
 * Summary: 派生子DID上链
 */
func (client *Client) StartDidDerivedidExecuteEx(request *StartDidDerivedidExecuteRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartDidDerivedidExecuteResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartDidDerivedidExecuteResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.derivedid.execute.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 基于DIS的访问控制授权
 * Summary: 访问控制授权
 */
func (client *Client) ExecDidAccesscontrolAuthorize(request *ExecDidAccesscontrolAuthorizeRequest) (_result *ExecDidAccesscontrolAuthorizeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExecDidAccesscontrolAuthorizeResponse{}
	_body, _err := client.ExecDidAccesscontrolAuthorizeEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 基于DIS的访问控制授权
 * Summary: 访问控制授权
 */
func (client *Client) ExecDidAccesscontrolAuthorizeEx(request *ExecDidAccesscontrolAuthorizeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExecDidAccesscontrolAuthorizeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ExecDidAccesscontrolAuthorizeResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.accesscontrol.authorize.exec"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 对请求的权限进行鉴权，判断是否有该权限
 * Summary: 访问控制鉴权
 */
func (client *Client) ExecDidAccesscontrolCheck(request *ExecDidAccesscontrolCheckRequest) (_result *ExecDidAccesscontrolCheckResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExecDidAccesscontrolCheckResponse{}
	_body, _err := client.ExecDidAccesscontrolCheckEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 对请求的权限进行鉴权，判断是否有该权限
 * Summary: 访问控制鉴权
 */
func (client *Client) ExecDidAccesscontrolCheckEx(request *ExecDidAccesscontrolCheckRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExecDidAccesscontrolCheckResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ExecDidAccesscontrolCheckResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.accesscontrol.check.exec"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 访问控制中更新权限
 * Summary: 对已授权的did更新权限
 */
func (client *Client) ExecDidAccesscontrolUpdate(request *ExecDidAccesscontrolUpdateRequest) (_result *ExecDidAccesscontrolUpdateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExecDidAccesscontrolUpdateResponse{}
	_body, _err := client.ExecDidAccesscontrolUpdateEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 访问控制中更新权限
 * Summary: 对已授权的did更新权限
 */
func (client *Client) ExecDidAccesscontrolUpdateEx(request *ExecDidAccesscontrolUpdateRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExecDidAccesscontrolUpdateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ExecDidAccesscontrolUpdateResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.accesscontrol.update.exec"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 非托管模式下为iot创建did
 * Summary: 非托管模式下为iot创建did
 */
func (client *Client) CreateDidIdentityIot(request *CreateDidIdentityIotRequest) (_result *CreateDidIdentityIotResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateDidIdentityIotResponse{}
	_body, _err := client.CreateDidIdentityIotEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 非托管模式下为iot创建did
 * Summary: 非托管模式下为iot创建did
 */
func (client *Client) CreateDidIdentityIotEx(request *CreateDidIdentityIotRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateDidIdentityIotResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateDidIdentityIotResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.identity.iot.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 非托管模式下的服务类型创建
 * Summary: 非托管模式下的服务类型创建
 */
func (client *Client) ExecDidServicetypeCreate(request *ExecDidServicetypeCreateRequest) (_result *ExecDidServicetypeCreateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExecDidServicetypeCreateResponse{}
	_body, _err := client.ExecDidServicetypeCreateEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 非托管模式下的服务类型创建
 * Summary: 非托管模式下的服务类型创建
 */
func (client *Client) ExecDidServicetypeCreateEx(request *ExecDidServicetypeCreateRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExecDidServicetypeCreateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ExecDidServicetypeCreateResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.servicetype.create.exec"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 非托管模式下创建普通did账户
 * Summary: 非托管模式下创建普通did账户
 */
func (client *Client) CreateDidIdentityCommon(request *CreateDidIdentityCommonRequest) (_result *CreateDidIdentityCommonResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateDidIdentityCommonResponse{}
	_body, _err := client.CreateDidIdentityCommonEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 非托管模式下创建普通did账户
 * Summary: 非托管模式下创建普通did账户
 */
func (client *Client) CreateDidIdentityCommonEx(request *CreateDidIdentityCommonRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateDidIdentityCommonResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateDidIdentityCommonResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.identity.common.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: VC传输确认请求
 * Summary: VC传输确认请求
 */
func (client *Client) ConfirmVcVcrepoVctransmit(request *ConfirmVcVcrepoVctransmitRequest) (_result *ConfirmVcVcrepoVctransmitResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ConfirmVcVcrepoVctransmitResponse{}
	_body, _err := client.ConfirmVcVcrepoVctransmitEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: VC传输确认请求
 * Summary: VC传输确认请求
 */
func (client *Client) ConfirmVcVcrepoVctransmitEx(request *ConfirmVcVcrepoVctransmitRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ConfirmVcVcrepoVctransmitResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ConfirmVcVcrepoVctransmitResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.vc.vcrepo.vctransmit.confirm"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 在非托管模式，要先createDid，然后addDoc，两步都完成才实现DID创建。
如果第一步成功，第二步失败，无法完全回滚，但是第一步createDid已经绑定了一个pubKey，如果调用方重试，并且用了新的pubKey（可能之前绑定的pubKey因为没有走完流程，没有保存，或者没有中间态，继续重试第二步），就无法重试成功。因此需要给这种极端情况一个更新pubKey的机会，但是需要通过recoveryKey鉴权请求变更。
 * Summary: 非托管更新还未上链did的pub key
*/
func (client *Client) UpdateDidUpdatedidPubkey(request *UpdateDidUpdatedidPubkeyRequest) (_result *UpdateDidUpdatedidPubkeyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateDidUpdatedidPubkeyResponse{}
	_body, _err := client.UpdateDidUpdatedidPubkeyEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 在非托管模式，要先createDid，然后addDoc，两步都完成才实现DID创建。
如果第一步成功，第二步失败，无法完全回滚，但是第一步createDid已经绑定了一个pubKey，如果调用方重试，并且用了新的pubKey（可能之前绑定的pubKey因为没有走完流程，没有保存，或者没有中间态，继续重试第二步），就无法重试成功。因此需要给这种极端情况一个更新pubKey的机会，但是需要通过recoveryKey鉴权请求变更。
 * Summary: 非托管更新还未上链did的pub key
*/
func (client *Client) UpdateDidUpdatedidPubkeyEx(request *UpdateDidUpdatedidPubkeyRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateDidUpdatedidPubkeyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateDidUpdatedidPubkeyResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.updatedid.pubkey.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 一次增加多个service
 * Summary: 一次增加多个service
 */
func (client *Client) AddDidUpdatedidServicelist(request *AddDidUpdatedidServicelistRequest) (_result *AddDidUpdatedidServicelistResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &AddDidUpdatedidServicelistResponse{}
	_body, _err := client.AddDidUpdatedidServicelistEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 一次增加多个service
 * Summary: 一次增加多个service
 */
func (client *Client) AddDidUpdatedidServicelistEx(request *AddDidUpdatedidServicelistRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *AddDidUpdatedidServicelistResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AddDidUpdatedidServicelistResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.did.updatedid.servicelist.add"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 存储VC到存储中
 * Summary: 写入VC存储
 */
func (client *Client) StartVcVcrepositoryWrite(request *StartVcVcrepositoryWriteRequest) (_result *StartVcVcrepositoryWriteResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartVcVcrepositoryWriteResponse{}
	_body, _err := client.StartVcVcrepositoryWriteEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 存储VC到存储中
 * Summary: 写入VC存储
 */
func (client *Client) StartVcVcrepositoryWriteEx(request *StartVcVcrepositoryWriteRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartVcVcrepositoryWriteResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartVcVcrepositoryWriteResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.vc.vcrepository.write.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 从VC存储中，读取目标的VC内容，前提是调用者的did已经被授予权限。
如果VC中claim内容已被加密，返回值的verifiable_claim_content的claim字段是密文，需要使用当前调用者的did对应私钥解密auth_access_key获取AES密钥，然后通过AES密钥解密VC内容。
 * Summary: 从VC存储读取已被授权VC内容
*/
func (client *Client) StartVcVcrepositoryRead(request *StartVcVcrepositoryReadRequest) (_result *StartVcVcrepositoryReadResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartVcVcrepositoryReadResponse{}
	_body, _err := client.StartVcVcrepositoryReadEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 从VC存储中，读取目标的VC内容，前提是调用者的did已经被授予权限。
如果VC中claim内容已被加密，返回值的verifiable_claim_content的claim字段是密文，需要使用当前调用者的did对应私钥解密auth_access_key获取AES密钥，然后通过AES密钥解密VC内容。
 * Summary: 从VC存储读取已被授权VC内容
*/
func (client *Client) StartVcVcrepositoryReadEx(request *StartVcVcrepositoryReadRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartVcVcrepositoryReadResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartVcVcrepositoryReadResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.vc.vcrepository.read.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 对已存在的证书VC进行新增授权管理，批量添加did到授权列表中，授权这些did具有读取VC的权限。
注意：VC的整体auth_did_list的长度将受限制，目前约定不超过30。
 * Summary: 添加已有证书VC的授权列表
*/
func (client *Client) StartVcVcrepositoryAuth(request *StartVcVcrepositoryAuthRequest) (_result *StartVcVcrepositoryAuthResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartVcVcrepositoryAuthResponse{}
	_body, _err := client.StartVcVcrepositoryAuthEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 对已存在的证书VC进行新增授权管理，批量添加did到授权列表中，授权这些did具有读取VC的权限。
注意：VC的整体auth_did_list的长度将受限制，目前约定不超过30。
 * Summary: 添加已有证书VC的授权列表
*/
func (client *Client) StartVcVcrepositoryAuthEx(request *StartVcVcrepositoryAuthRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartVcVcrepositoryAuthResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartVcVcrepositoryAuthResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.vc.vcrepository.auth.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: vc repo上的用户注册
 * Summary: vc repo 上的用户注册
 */
func (client *Client) StartVcVcrepoUser(request *StartVcVcrepoUserRequest) (_result *StartVcVcrepoUserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartVcVcrepoUserResponse{}
	_body, _err := client.StartVcVcrepoUserEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: vc repo上的用户注册
 * Summary: vc repo 上的用户注册
 */
func (client *Client) StartVcVcrepoUserEx(request *StartVcVcrepoUserRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartVcVcrepoUserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartVcVcrepoUserResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.vc.vcrepo.user.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: VC Repo用户信息更新，可以更新公钥，可以更新vc channel
 * Summary: VC Repo用户信息更新
 */
func (client *Client) UpdateVcVcrepoUser(request *UpdateVcVcrepoUserRequest) (_result *UpdateVcVcrepoUserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateVcVcrepoUserResponse{}
	_body, _err := client.UpdateVcVcrepoUserEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: VC Repo用户信息更新，可以更新公钥，可以更新vc channel
 * Summary: VC Repo用户信息更新
 */
func (client *Client) UpdateVcVcrepoUserEx(request *UpdateVcVcrepoUserRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateVcVcrepoUserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateVcVcrepoUserResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.vc.vcrepo.user.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 指定VC可信传输到指定Verifier
 * Summary: 指定VC可信传输到指定Verifier
 */
func (client *Client) StartVcVcrepoVctransmit(request *StartVcVcrepoVctransmitRequest) (_result *StartVcVcrepoVctransmitResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartVcVcrepoVctransmitResponse{}
	_body, _err := client.StartVcVcrepoVctransmitEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 指定VC可信传输到指定Verifier
 * Summary: 指定VC可信传输到指定Verifier
 */
func (client *Client) StartVcVcrepoVctransmitEx(request *StartVcVcrepoVctransmitRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartVcVcrepoVctransmitResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartVcVcrepoVctransmitResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.vc.vcrepo.vctransmit.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 通过controller进行用户注册
 * Summary: 通过controller的用户注册
 */
func (client *Client) StartVcVcrepoControlleradduser(request *StartVcVcrepoControlleradduserRequest) (_result *StartVcVcrepoControlleradduserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartVcVcrepoControlleradduserResponse{}
	_body, _err := client.StartVcVcrepoControlleradduserEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 通过controller进行用户注册
 * Summary: 通过controller的用户注册
 */
func (client *Client) StartVcVcrepoControlleradduserEx(request *StartVcVcrepoControlleradduserRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartVcVcrepoControlleradduserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartVcVcrepoControlleradduserResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.vc.vcrepo.controlleradduser.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: VC存储
 * Summary: VC存储
 */
func (client *Client) StartVcVcrepoVccontentsave(request *StartVcVcrepoVccontentsaveRequest) (_result *StartVcVcrepoVccontentsaveResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartVcVcrepoVccontentsaveResponse{}
	_body, _err := client.StartVcVcrepoVccontentsaveEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: VC存储
 * Summary: VC存储
 */
func (client *Client) StartVcVcrepoVccontentsaveEx(request *StartVcVcrepoVccontentsaveRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartVcVcrepoVccontentsaveResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartVcVcrepoVccontentsaveResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.vc.vcrepo.vccontentsave.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 根据vcid获取vccontent
 * Summary: 根据vcid获取vccontent
 */
func (client *Client) StartVcRepoReadwithvcid(request *StartVcRepoReadwithvcidRequest) (_result *StartVcRepoReadwithvcidResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartVcRepoReadwithvcidResponse{}
	_body, _err := client.StartVcRepoReadwithvcidEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 根据vcid获取vccontent
 * Summary: 根据vcid获取vccontent
 */
func (client *Client) StartVcRepoReadwithvcidEx(request *StartVcRepoReadwithvcidRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartVcRepoReadwithvcidResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartVcRepoReadwithvcidResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.vc.repo.readwithvcid.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: vc仓库非托管模式下的VC传输初始化接口
 * Summary: vc仓库非托管模式下的VC传输初始化接口
 */
func (client *Client) InitVcVcrepoVctransmit(request *InitVcVcrepoVctransmitRequest) (_result *InitVcVcrepoVctransmitResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &InitVcVcrepoVctransmitResponse{}
	_body, _err := client.InitVcVcrepoVctransmitEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: vc仓库非托管模式下的VC传输初始化接口
 * Summary: vc仓库非托管模式下的VC传输初始化接口
 */
func (client *Client) InitVcVcrepoVctransmitEx(request *InitVcVcrepoVctransmitRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *InitVcVcrepoVctransmitResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &InitVcVcrepoVctransmitResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.vc.vcrepo.vctransmit.init"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 人脸实人认证初始化接口
 * Summary: 人脸实人认证初始化接口
 */
func (client *Client) InitIdentificationFaceauth(request *InitIdentificationFaceauthRequest) (_result *InitIdentificationFaceauthResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &InitIdentificationFaceauthResponse{}
	_body, _err := client.InitIdentificationFaceauthEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 人脸实人认证初始化接口
 * Summary: 人脸实人认证初始化接口
 */
func (client *Client) InitIdentificationFaceauthEx(request *InitIdentificationFaceauthRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *InitIdentificationFaceauthResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &InitIdentificationFaceauthResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.identification.faceauth.init"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取人脸实人认证结果
 * Summary: 获取人脸实人认证结果
 */
func (client *Client) QueryIdentificationFaceauth(request *QueryIdentificationFaceauthRequest) (_result *QueryIdentificationFaceauthResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryIdentificationFaceauthResponse{}
	_body, _err := client.QueryIdentificationFaceauthEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取人脸实人认证结果
 * Summary: 获取人脸实人认证结果
 */
func (client *Client) QueryIdentificationFaceauthEx(request *QueryIdentificationFaceauthRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryIdentificationFaceauthResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryIdentificationFaceauthResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.identification.faceauth.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 初始化存证事务: 进⾏行行资格核验，包括调⽤用⽅方账号权限，是否实⼈人等。成功后获得存证事务 ID(Token)
 * Summary: 存证交易初始化
 */
func (client *Client) InitNotaryTransaction(request *InitNotaryTransactionRequest) (_result *InitNotaryTransactionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &InitNotaryTransactionResponse{}
	_body, _err := client.InitNotaryTransactionEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 初始化存证事务: 进⾏行行资格核验，包括调⽤用⽅方账号权限，是否实⼈人等。成功后获得存证事务 ID(Token)
 * Summary: 存证交易初始化
 */
func (client *Client) InitNotaryTransactionEx(request *InitNotaryTransactionRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *InitNotaryTransactionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &InitNotaryTransactionResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.notary.transaction.init"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: ⽤用户通过存证事务Token，获取事务中所有的存证信息
 * Summary: 获取事务中所有的存证信息
 */
func (client *Client) GetNotaryTransaction(request *GetNotaryTransactionRequest) (_result *GetNotaryTransactionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetNotaryTransactionResponse{}
	_body, _err := client.GetNotaryTransactionEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: ⽤用户通过存证事务Token，获取事务中所有的存证信息
 * Summary: 获取事务中所有的存证信息
 */
func (client *Client) GetNotaryTransactionEx(request *GetNotaryTransactionRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetNotaryTransactionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetNotaryTransactionResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.notary.transaction.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 发起⼀个文本存证，将文本内容存证上链。
 * Summary: 发送文本存证
 */
func (client *Client) SendNotaryTransactionText(request *SendNotaryTransactionTextRequest) (_result *SendNotaryTransactionTextResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SendNotaryTransactionTextResponse{}
	_body, _err := client.SendNotaryTransactionTextEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 发起⼀个文本存证，将文本内容存证上链。
 * Summary: 发送文本存证
 */
func (client *Client) SendNotaryTransactionTextEx(request *SendNotaryTransactionTextRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SendNotaryTransactionTextResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SendNotaryTransactionTextResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.notary.transaction.text.send"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: ⽤户通过交易易哈希获取自己上传的文本存证内容
 * Summary: 获取文本存证
 */
func (client *Client) GetNotaryTransactionText(request *GetNotaryTransactionTextRequest) (_result *GetNotaryTransactionTextResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetNotaryTransactionTextResponse{}
	_body, _err := client.GetNotaryTransactionTextEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: ⽤户通过交易易哈希获取自己上传的文本存证内容
 * Summary: 获取文本存证
 */
func (client *Client) GetNotaryTransactionTextEx(request *GetNotaryTransactionTextRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetNotaryTransactionTextResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetNotaryTransactionTextResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.notary.transaction.text.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取存证事务ID
 * Summary: 获取存证事务ID
 */
func (client *Client) CreateNotaryToken(request *CreateNotaryTokenRequest) (_result *CreateNotaryTokenResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateNotaryTokenResponse{}
	_body, _err := client.CreateNotaryTokenEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取存证事务ID
 * Summary: 获取存证事务ID
 */
func (client *Client) CreateNotaryTokenEx(request *CreateNotaryTokenRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateNotaryTokenResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateNotaryTokenResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.notary.token.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 通过存证事务Token，获取事务中所有的存证信息
 * Summary: 获取事务中所有的存证信息
 */
func (client *Client) GetNotaryTrans(request *GetNotaryTransRequest) (_result *GetNotaryTransResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetNotaryTransResponse{}
	_body, _err := client.GetNotaryTransEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 通过存证事务Token，获取事务中所有的存证信息
 * Summary: 获取事务中所有的存证信息
 */
func (client *Client) GetNotaryTransEx(request *GetNotaryTransRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetNotaryTransResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetNotaryTransResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.notary.trans.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 发起文本存证，将文本内容存证上链
 * Summary: 文本存证，将文本内容存证上链
 */
func (client *Client) CreateNotaryText(request *CreateNotaryTextRequest) (_result *CreateNotaryTextResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateNotaryTextResponse{}
	_body, _err := client.CreateNotaryTextEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 发起文本存证，将文本内容存证上链
 * Summary: 文本存证，将文本内容存证上链
 */
func (client *Client) CreateNotaryTextEx(request *CreateNotaryTextRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateNotaryTextResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateNotaryTextResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.notary.text.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 用户通过交易哈希获取自己上传的文本存证内容
 * Summary: 获取文本存证内容
 */
func (client *Client) GetNotaryText(request *GetNotaryTextRequest) (_result *GetNotaryTextResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetNotaryTextResponse{}
	_body, _err := client.GetNotaryTextEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 用户通过交易哈希获取自己上传的文本存证内容
 * Summary: 获取文本存证内容
 */
func (client *Client) GetNotaryTextEx(request *GetNotaryTextRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetNotaryTextResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetNotaryTextResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.notary.text.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 发起文件存证，将文件内容存证上链
 * Summary: 文件内容存证上链
 */
func (client *Client) CreateNotaryFile(request *CreateNotaryFileRequest) (_result *CreateNotaryFileResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateNotaryFileResponse{}
	_body, _err := client.CreateNotaryFileEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 发起文件存证，将文件内容存证上链
 * Summary: 文件内容存证上链
 */
func (client *Client) CreateNotaryFileEx(request *CreateNotaryFileRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateNotaryFileResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateNotaryFileResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.notary.file.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 用户通过交易哈希获取自己上传的文件存证oss下载地址
 * Summary: 获取文件存证oss下载地址
 */
func (client *Client) GetNotaryFile(request *GetNotaryFileRequest) (_result *GetNotaryFileResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetNotaryFileResponse{}
	_body, _err := client.GetNotaryFileEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 用户通过交易哈希获取自己上传的文件存证oss下载地址
 * Summary: 获取文件存证oss下载地址
 */
func (client *Client) GetNotaryFileEx(request *GetNotaryFileRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetNotaryFileResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetNotaryFileResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.notary.file.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 发起原文存证，将原文内容存证上链
 * Summary: 原文内容存证
 */
func (client *Client) CreateNotarySource(request *CreateNotarySourceRequest) (_result *CreateNotarySourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateNotarySourceResponse{}
	_body, _err := client.CreateNotarySourceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 发起原文存证，将原文内容存证上链
 * Summary: 原文内容存证
 */
func (client *Client) CreateNotarySourceEx(request *CreateNotarySourceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateNotarySourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateNotarySourceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.notary.source.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 用户通过交易哈希获取自己上传的原文存证oss下载地址
 * Summary: 获取原文存证oss下载地址
 */
func (client *Client) GetNotarySource(request *GetNotarySourceRequest) (_result *GetNotarySourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetNotarySourceResponse{}
	_body, _err := client.GetNotarySourceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 用户通过交易哈希获取自己上传的原文存证oss下载地址
 * Summary: 获取原文存证oss下载地址
 */
func (client *Client) GetNotarySourceEx(request *GetNotarySourceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetNotarySourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetNotarySourceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.notary.source.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: test
 * Summary: test
 */
func (client *Client) QueryNotaryTest(request *QueryNotaryTestRequest) (_result *QueryNotaryTestResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryNotaryTestResponse{}
	_body, _err := client.QueryNotaryTestEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: test
 * Summary: test
 */
func (client *Client) QueryNotaryTestEx(request *QueryNotaryTestRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryNotaryTestResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryNotaryTestResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.notary.test.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 接口定义 https://yuque.antfin-inc.com/antchain/lqq4qz/pnvo46#52f667ab
 * Summary: 企业法人认证初始化接口
 */
func (client *Client) InitNotaryOpenapiMerchant(request *InitNotaryOpenapiMerchantRequest) (_result *InitNotaryOpenapiMerchantResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &InitNotaryOpenapiMerchantResponse{}
	_body, _err := client.InitNotaryOpenapiMerchantEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 接口定义 https://yuque.antfin-inc.com/antchain/lqq4qz/pnvo46#52f667ab
 * Summary: 企业法人认证初始化接口
 */
func (client *Client) InitNotaryOpenapiMerchantEx(request *InitNotaryOpenapiMerchantRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *InitNotaryOpenapiMerchantResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &InitNotaryOpenapiMerchantResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.notary.openapi.merchant.init"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 企业法人认证查询认证状态
 * Summary: 企业法人认证查询认证状态
 */
func (client *Client) QueryNotaryOpenapiMerchant(request *QueryNotaryOpenapiMerchantRequest) (_result *QueryNotaryOpenapiMerchantResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryNotaryOpenapiMerchantResponse{}
	_body, _err := client.QueryNotaryOpenapiMerchantEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 企业法人认证查询认证状态
 * Summary: 企业法人认证查询认证状态
 */
func (client *Client) QueryNotaryOpenapiMerchantEx(request *QueryNotaryOpenapiMerchantRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryNotaryOpenapiMerchantResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryNotaryOpenapiMerchantResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.notary.openapi.merchant.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 为租赁服务平台部署合约
 * Summary: 为租赁服务平台部署合约
 */
func (client *Client) DeployNotaryLeaseContract(request *DeployNotaryLeaseContractRequest) (_result *DeployNotaryLeaseContractResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeployNotaryLeaseContractResponse{}
	_body, _err := client.DeployNotaryLeaseContractEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 为租赁服务平台部署合约
 * Summary: 为租赁服务平台部署合约
 */
func (client *Client) DeployNotaryLeaseContractEx(request *DeployNotaryLeaseContractRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeployNotaryLeaseContractResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeployNotaryLeaseContractResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.notary.lease.contract.deploy"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 建站服务信息注册
 * Summary: 服务注册
 */
func (client *Client) CreateOpenchainWebsitService(request *CreateOpenchainWebsitServiceRequest) (_result *CreateOpenchainWebsitServiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateOpenchainWebsitServiceResponse{}
	_body, _err := client.CreateOpenchainWebsitServiceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 建站服务信息注册
 * Summary: 服务注册
 */
func (client *Client) CreateOpenchainWebsitServiceEx(request *CreateOpenchainWebsitServiceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateOpenchainWebsitServiceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateOpenchainWebsitServiceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.openchain.websit.service.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 可信建站法人四要素认证
 * Summary: 可信建站法人四要素认证
 */
func (client *Client) CheckOpenchainCorporateFace(request *CheckOpenchainCorporateFaceRequest) (_result *CheckOpenchainCorporateFaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CheckOpenchainCorporateFaceResponse{}
	_body, _err := client.CheckOpenchainCorporateFaceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 可信建站法人四要素认证
 * Summary: 可信建站法人四要素认证
 */
func (client *Client) CheckOpenchainCorporateFaceEx(request *CheckOpenchainCorporateFaceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CheckOpenchainCorporateFaceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CheckOpenchainCorporateFaceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.openchain.corporate.face.check"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 法人认证4要素结果查询
 * Summary: 法人认证4要素结果查询
 */
func (client *Client) QueryOpenchainCorporateFace(request *QueryOpenchainCorporateFaceRequest) (_result *QueryOpenchainCorporateFaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryOpenchainCorporateFaceResponse{}
	_body, _err := client.QueryOpenchainCorporateFaceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 法人认证4要素结果查询
 * Summary: 法人认证4要素结果查询
 */
func (client *Client) QueryOpenchainCorporateFaceEx(request *QueryOpenchainCorporateFaceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryOpenchainCorporateFaceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryOpenchainCorporateFaceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.openchain.corporate.face.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 授权用户数据查询
 * Summary: 授权用户数据查询
 */
func (client *Client) QueryOpenchainUserData(request *QueryOpenchainUserDataRequest) (_result *QueryOpenchainUserDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryOpenchainUserDataResponse{}
	_body, _err := client.QueryOpenchainUserDataEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 授权用户数据查询
 * Summary: 授权用户数据查询
 */
func (client *Client) QueryOpenchainUserDataEx(request *QueryOpenchainUserDataRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryOpenchainUserDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryOpenchainUserDataResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.openchain.user.data.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 三要素验证身份冒用风险
 * Summary: 三要素验证身份冒用风险
 */
func (client *Client) QueryIdentificationRiskThreemeta(request *QueryIdentificationRiskThreemetaRequest) (_result *QueryIdentificationRiskThreemetaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryIdentificationRiskThreemetaResponse{}
	_body, _err := client.QueryIdentificationRiskThreemetaEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 三要素验证身份冒用风险
 * Summary: 三要素验证身份冒用风险
 */
func (client *Client) QueryIdentificationRiskThreemetaEx(request *QueryIdentificationRiskThreemetaRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryIdentificationRiskThreemetaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryIdentificationRiskThreemetaResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.identification.risk.threemeta.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 文本内容安全扫描
 * Summary: 文本内容安全扫描
 */
func (client *Client) CheckContentRiskText(request *CheckContentRiskTextRequest) (_result *CheckContentRiskTextResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CheckContentRiskTextResponse{}
	_body, _err := client.CheckContentRiskTextEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 文本内容安全扫描
 * Summary: 文本内容安全扫描
 */
func (client *Client) CheckContentRiskTextEx(request *CheckContentRiskTextRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CheckContentRiskTextResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CheckContentRiskTextResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.content.risk.text.check"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 二要素验证身份冒用风险
 * Summary: 二要素验证身份冒用风险
 */
func (client *Client) QueryIdentificationRiskTwometa(request *QueryIdentificationRiskTwometaRequest) (_result *QueryIdentificationRiskTwometaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryIdentificationRiskTwometaResponse{}
	_body, _err := client.QueryIdentificationRiskTwometaEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 二要素验证身份冒用风险
 * Summary: 二要素验证身份冒用风险
 */
func (client *Client) QueryIdentificationRiskTwometaEx(request *QueryIdentificationRiskTwometaRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryIdentificationRiskTwometaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryIdentificationRiskTwometaResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.identification.risk.twometa.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 四要素验证身份冒用风险
 * Summary: 四要素验证身份冒用风险
 */
func (client *Client) QueryIdentificationRiskFourmeta(request *QueryIdentificationRiskFourmetaRequest) (_result *QueryIdentificationRiskFourmetaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryIdentificationRiskFourmetaResponse{}
	_body, _err := client.QueryIdentificationRiskFourmetaEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 四要素验证身份冒用风险
 * Summary: 四要素验证身份冒用风险
 */
func (client *Client) QueryIdentificationRiskFourmetaEx(request *QueryIdentificationRiskFourmetaRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryIdentificationRiskFourmetaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryIdentificationRiskFourmetaResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.identification.risk.fourmeta.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 原生存证接口
 * Summary: 原生存证接口
 */
func (client *Client) CreateNotaryRawText(request *CreateNotaryRawTextRequest) (_result *CreateNotaryRawTextResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateNotaryRawTextResponse{}
	_body, _err := client.CreateNotaryRawTextEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 原生存证接口
 * Summary: 原生存证接口
 */
func (client *Client) CreateNotaryRawTextEx(request *CreateNotaryRawTextRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateNotaryRawTextResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateNotaryRawTextResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.notary.raw.text.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取原生存证内容接口
 * Summary: 获取原生存证内容接口
 */
func (client *Client) GetNotaryRawText(request *GetNotaryRawTextRequest) (_result *GetNotaryRawTextResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetNotaryRawTextResponse{}
	_body, _err := client.GetNotaryRawTextEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取原生存证内容接口
 * Summary: 获取原生存证内容接口
 */
func (client *Client) GetNotaryRawTextEx(request *GetNotaryRawTextRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetNotaryRawTextResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetNotaryRawTextResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.notary.raw.text.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 脱敏身份验证
 * Summary: 脱敏身份验证
 */
func (client *Client) QueryIdentificationRiskMask(request *QueryIdentificationRiskMaskRequest) (_result *QueryIdentificationRiskMaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryIdentificationRiskMaskResponse{}
	_body, _err := client.QueryIdentificationRiskMaskEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 脱敏身份验证
 * Summary: 脱敏身份验证
 */
func (client *Client) QueryIdentificationRiskMaskEx(request *QueryIdentificationRiskMaskRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryIdentificationRiskMaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryIdentificationRiskMaskResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.identification.risk.mask.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 基于法人实人认证的企业四要素认证
 * Summary: 基于法人实人认证的企业四要素认证
 */
func (client *Client) InitIdentificationEnterpriseFaceauth(request *InitIdentificationEnterpriseFaceauthRequest) (_result *InitIdentificationEnterpriseFaceauthResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &InitIdentificationEnterpriseFaceauthResponse{}
	_body, _err := client.InitIdentificationEnterpriseFaceauthEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 基于法人实人认证的企业四要素认证
 * Summary: 基于法人实人认证的企业四要素认证
 */
func (client *Client) InitIdentificationEnterpriseFaceauthEx(request *InitIdentificationEnterpriseFaceauthRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *InitIdentificationEnterpriseFaceauthResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &InitIdentificationEnterpriseFaceauthResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.identification.enterprise.faceauth.init"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询企业四要素（实人）认证结果
 * Summary: 查询企业四要素（实人）认证结果
 */
func (client *Client) QueryIdentificationEnterpriseFaceauth(request *QueryIdentificationEnterpriseFaceauthRequest) (_result *QueryIdentificationEnterpriseFaceauthResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryIdentificationEnterpriseFaceauthResponse{}
	_body, _err := client.QueryIdentificationEnterpriseFaceauthEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询企业四要素（实人）认证结果
 * Summary: 查询企业四要素（实人）认证结果
 */
func (client *Client) QueryIdentificationEnterpriseFaceauthEx(request *QueryIdentificationEnterpriseFaceauthRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryIdentificationEnterpriseFaceauthResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryIdentificationEnterpriseFaceauthResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.identification.enterprise.faceauth.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 企业四要素认证
 * Summary: 企业四要素认证
 */
func (client *Client) QueryIdentificationEnterpriseFourmeta(request *QueryIdentificationEnterpriseFourmetaRequest) (_result *QueryIdentificationEnterpriseFourmetaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryIdentificationEnterpriseFourmetaResponse{}
	_body, _err := client.QueryIdentificationEnterpriseFourmetaEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 企业四要素认证
 * Summary: 企业四要素认证
 */
func (client *Client) QueryIdentificationEnterpriseFourmetaEx(request *QueryIdentificationEnterpriseFourmetaRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryIdentificationEnterpriseFourmetaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryIdentificationEnterpriseFourmetaResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.identification.enterprise.fourmeta.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 企业三要素认证（企业名，企业证件号，法人姓名）
 * Summary: 企业三要素认证
 */
func (client *Client) QueryIdentificationEnterpriseThreemeta(request *QueryIdentificationEnterpriseThreemetaRequest) (_result *QueryIdentificationEnterpriseThreemetaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryIdentificationEnterpriseThreemetaResponse{}
	_body, _err := client.QueryIdentificationEnterpriseThreemetaEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 企业三要素认证（企业名，企业证件号，法人姓名）
 * Summary: 企业三要素认证
 */
func (client *Client) QueryIdentificationEnterpriseThreemetaEx(request *QueryIdentificationEnterpriseThreemetaRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryIdentificationEnterpriseThreemetaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryIdentificationEnterpriseThreemetaResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.identification.enterprise.threemeta.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 企业二要素认证（企业名称，企业证件号码）
 * Summary:  企业二要素认证
 */
func (client *Client) QueryIdentificationEnterpriseTwometa(request *QueryIdentificationEnterpriseTwometaRequest) (_result *QueryIdentificationEnterpriseTwometaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryIdentificationEnterpriseTwometaResponse{}
	_body, _err := client.QueryIdentificationEnterpriseTwometaEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 企业二要素认证（企业名称，企业证件号码）
 * Summary:  企业二要素认证
 */
func (client *Client) QueryIdentificationEnterpriseTwometaEx(request *QueryIdentificationEnterpriseTwometaRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryIdentificationEnterpriseTwometaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryIdentificationEnterpriseTwometaResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.identification.enterprise.twometa.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 完成1.三要素认证；2创建did；3.颁发声明（声明该DID已经完成三要素认证）
 * Summary: 三要素认证与did创建接口
 */
func (client *Client) StartMydidDidThreeelement(request *StartMydidDidThreeelementRequest) (_result *StartMydidDidThreeelementResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartMydidDidThreeelementResponse{}
	_body, _err := client.StartMydidDidThreeelementEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 完成1.三要素认证；2创建did；3.颁发声明（声明该DID已经完成三要素认证）
 * Summary: 三要素认证与did创建接口
 */
func (client *Client) StartMydidDidThreeelementEx(request *StartMydidDidThreeelementRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartMydidDidThreeelementResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartMydidDidThreeelementResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.mydid.did.threeelement.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询用户可用的公钥列表
 * Summary: 查询用户可用的公钥列表
 */
func (client *Client) ListWaasDidValidpublickeys(request *ListWaasDidValidpublickeysRequest) (_result *ListWaasDidValidpublickeysResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListWaasDidValidpublickeysResponse{}
	_body, _err := client.ListWaasDidValidpublickeysEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询用户可用的公钥列表
 * Summary: 查询用户可用的公钥列表
 */
func (client *Client) ListWaasDidValidpublickeysEx(request *ListWaasDidValidpublickeysRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListWaasDidValidpublickeysResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListWaasDidValidpublickeysResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.waas.did.validpublickeys.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询指定公钥信息
 * Summary: 查询指定公钥信息
 */
func (client *Client) QueryWaasDidPublickey(request *QueryWaasDidPublickeyRequest) (_result *QueryWaasDidPublickeyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryWaasDidPublickeyResponse{}
	_body, _err := client.QueryWaasDidPublickeyEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询指定公钥信息
 * Summary: 查询指定公钥信息
 */
func (client *Client) QueryWaasDidPublickeyEx(request *QueryWaasDidPublickeyRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryWaasDidPublickeyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryWaasDidPublickeyResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.waas.did.publickey.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 业务注册waas服务
 * Summary: 业务注册waas服务
 */
func (client *Client) RegisterWaasBusiness(request *RegisterWaasBusinessRequest) (_result *RegisterWaasBusinessResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &RegisterWaasBusinessResponse{}
	_body, _err := client.RegisterWaasBusinessEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 业务注册waas服务
 * Summary: 业务注册waas服务
 */
func (client *Client) RegisterWaasBusinessEx(request *RegisterWaasBusinessRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *RegisterWaasBusinessResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &RegisterWaasBusinessResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.waas.business.register"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 为业务合作方提供查询转账时上链信息，里面包含dcep合约传参
 * Summary: 查询转账上链信息
 */
func (client *Client) QueryWaasBusinessTransferbody(request *QueryWaasBusinessTransferbodyRequest) (_result *QueryWaasBusinessTransferbodyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryWaasBusinessTransferbodyResponse{}
	_body, _err := client.QueryWaasBusinessTransferbodyEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 为业务合作方提供查询转账时上链信息，里面包含dcep合约传参
 * Summary: 查询转账上链信息
 */
func (client *Client) QueryWaasBusinessTransferbodyEx(request *QueryWaasBusinessTransferbodyRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryWaasBusinessTransferbodyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryWaasBusinessTransferbodyResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.waas.business.transferbody.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 业务合作方通知订单上链情况
 * Summary: 业务合作方通知订单上链情况
 */
func (client *Client) NotifyWaasBusinessOrder(request *NotifyWaasBusinessOrderRequest) (_result *NotifyWaasBusinessOrderResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &NotifyWaasBusinessOrderResponse{}
	_body, _err := client.NotifyWaasBusinessOrderEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 业务合作方通知订单上链情况
 * Summary: 业务合作方通知订单上链情况
 */
func (client *Client) NotifyWaasBusinessOrderEx(request *NotifyWaasBusinessOrderRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *NotifyWaasBusinessOrderResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &NotifyWaasBusinessOrderResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("baas.waas.business.order.notify"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建HTTP PUT提交的文件上传
 * Summary: 文件上传创建
 */
func (client *Client) CreateAntcloudGatewayxFileUpload(request *CreateAntcloudGatewayxFileUploadRequest) (_result *CreateAntcloudGatewayxFileUploadResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateAntcloudGatewayxFileUploadResponse{}
	_body, _err := client.CreateAntcloudGatewayxFileUploadEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建HTTP PUT提交的文件上传
 * Summary: 文件上传创建
 */
func (client *Client) CreateAntcloudGatewayxFileUploadEx(request *CreateAntcloudGatewayxFileUploadRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateAntcloudGatewayxFileUploadResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateAntcloudGatewayxFileUploadResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.gatewayx.file.upload.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}
