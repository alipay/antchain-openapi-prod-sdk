import AntchainUtil;
import Util;
import RPCUtil;

type @endpoint = string
type @regionId = string
type @accessKeyId = string
type @accessKeySecret = string
type @protocol = string
type @userAgent = string
type @readTimeout = number
type @connectTimeout = number
type @httpProxy = string
type @httpsProxy = string
type @socks5Proxy = string
type @socks5NetWork = string
type @noProxy = string
type @maxIdleConns = number
type @securityToken = string
type @maxIdleTimeMillis = number
type @keepAliveDurationMillis = number
type @maxRequests = number
type @maxRequestsPerHost = number

/**
 * Model for initing client
 */
model Config {
  accessKeyId?: string(description='accesskey id',default=''),
  accessKeySecret?: string(description='accesskey secret',default=''),
  securityToken?: string(description='security token',default=''),
  protocol?: string(description='http protocol',example='http',default='http'),
  readTimeout?: number(description='read timeout',example='10',default=''),
  connectTimeout?: number(description='connect timeout',example='10',default=''),
  httpProxy?: string(description='http proxy',example='http://localhost',default=''),
  httpsProxy?: string(description='https proxy',example='https://localhost',default=''),
  endpoint?: string(description='endpoint',example='cs.aliyuncs.com',default=''),
  noProxy?: string(description='proxy white list',example='http://localhost',default=''),
  maxIdleConns?: number(description='max idle conns',example='3',default=''),
  userAgent?: string(description='user agent',example='Alibabacloud/1',default=''),
  socks5Proxy?: string(description='socks5 proxy',default=''),
  socks5NetWork?: string(description='socks5 network',example='TCP',default=''),
  maxIdleTimeMillis?: number(description='长链接最大空闲时长',default='60 * 1000L'),
  keepAliveDurationMillis?: number(description='长链接最大连接时长',default='5000'),
  maxRequests?: number(description='最大连接数（长链接最大总数）',default='100'),
  maxRequestsPerHost?: number(description='每个目标主机的最大连接数（分主机域名的长链接最大总数',default='100'),
}

/**
 * Init client with Config
 * @param config config contains the necessary information to create a client
 */
init(config: Config) {
  if (Util.isUnset(config)) {
    throw {
      code = 'ParameterMissing',
      message = '\'config\' can not be unset'
    };
  }

  @accessKeyId = config.accessKeyId;
  @accessKeySecret = config.accessKeySecret;
  @securityToken = config.securityToken;
  @endpoint = config.endpoint;
  @protocol = config.protocol;
  @userAgent = config.userAgent;
  @readTimeout = Util.defaultNumber(config.readTimeout, 20000);
  @connectTimeout = Util.defaultNumber(config.connectTimeout, 20000);
  @httpProxy = config.httpProxy;
  @httpsProxy = config.httpsProxy;
  @noProxy = config.noProxy;
  @socks5Proxy = config.socks5Proxy;
  @socks5NetWork = config.socks5NetWork;
  @maxIdleConns = Util.defaultNumber(config.maxIdleConns, 60000);
  @maxIdleTimeMillis = Util.defaultNumber(config.maxIdleTimeMillis, 5);
  @keepAliveDurationMillis = Util.defaultNumber(config.keepAliveDurationMillis, 5000);
  @maxRequests = Util.defaultNumber(config.maxRequests, 100);
  @maxRequestsPerHost = Util.defaultNumber(config.maxRequestsPerHost, 100);
}

/**
 * Encapsulate the request and invoke the network
 * @param action api name
 * @param protocol http or https
 * @param method e.g. GET
 * @param pathname pathname of every api
 * @param request which contains request params
 * @param runtime which controls some details of call api, such as retry times
 * @return the response
 */
api doRequest(version: string, action: string, protocol: string, method: string, pathname: string, request: object, headers: map[string]string, runtime: Util.RuntimeOptions): object {
  __request.protocol = Util.defaultString(@protocol, protocol);
  __request.method = method;
  __request.pathname = pathname;
  __request.query = {
    method = action,
    version = version,
    sign_type = 'HmacSHA1',
    req_time = AntchainUtil.getTimestamp(),
    req_msg_id = AntchainUtil.getNonce(),
    access_key = @accessKeyId,
    base_sdk_version = 'TeaSDK-2.0',
    sdk_version = '1.28.23',
    _prod_code = 'BLOCKCHAIN',
    _prod_channel = 'undefined'
  };

  if (!Util.empty(@securityToken)) {
    __request.query.security_token = @securityToken;
  }

  __request.headers = {
    host = Util.defaultString(@endpoint, 'openapi.antchain.antgroup.com'),
    user-agent = Util.getUserAgent(@userAgent),
    ...headers
  };

  var tmp = Util.anyifyMapValue(RPCUtil.query(request));
  __request.body = Util.toFormString(tmp);
  __request.headers.content-type = 'application/x-www-form-urlencoded';

  var signedParam = {
    ...__request.query,
    ...RPCUtil.query(request)
  };
  __request.query.sign = AntchainUtil.getSignature(signedParam, @accessKeySecret);
} returns {
  var raw = Util.readAsString(__response.body);
  var obj = Util.parseJSON(raw);
  var res = Util.assertAsMap(obj);
  var resp = Util.assertAsMap(res.response);

  if (AntchainUtil.hasError(raw, @accessKeySecret)) {
    throw {
      message = resp.result_msg,
      data = resp,
      code = resp.result_code
    };
  }
  return resp;
} runtime {
  timeouted = 'retry',
  readTimeout = Util.defaultNumber(runtime.readTimeout, @readTimeout),
  connectTimeout = Util.defaultNumber(runtime.connectTimeout, @connectTimeout),
  httpProxy = Util.defaultString(runtime.httpProxy, @httpProxy),
  httpsProxy = Util.defaultString(runtime.httpsProxy, @httpsProxy),
  noProxy = Util.defaultString(runtime.noProxy, @noProxy),
  maxIdleConns = Util.defaultNumber(runtime.maxIdleConns, @maxIdleConns),
  maxIdleTimeMillis = @maxIdleTimeMillis,
  keepAliveDuration = @keepAliveDurationMillis,
  maxRequests = @maxRequests,
  maxRequestsPerHost = @maxRequestsPerHost,
  retry = {
    retryable = runtime.autoretry,
    maxAttempts = Util.defaultNumber(runtime.maxAttempts, 3)
  },
  backoff = {
    policy = Util.defaultString(runtime.backoffPolicy, 'no'),
    period = Util.defaultNumber(runtime.backoffPeriod, 1)
  },
  ignoreSSL = runtime.ignoreSSL
}

// 数据授权服务审批流程节点结构体
model ProcessNode {
  // 审批节点ID
  nodeId: string(maxLength=100, name='node_id', example='did:test:0000:3fc223617da9a17a4d7792ef0c3f57bd176eca8408f2f4cb1df42939220829d2'),
  // 节点名称
  nodeName: string(maxLength=64, name='node_name', example='Bob'),
  // 节点序号，从1开始编号
  nodeNum: long(minimum=1, name='node_num', example='1'),
}

// 蚂蚁链浏览器合约链交易内容
model BlockchainBrowserTransactionContract {
  // data
  data: string(name='data', example='asdfasdfsadfsdafasd'),
  // from
  from: string(name='from', example='eeb0aa76449922c8ec718b97ec5da4c493d46d66a1f446fdce2ba29263efd612'),
  // to
  to: string(name='to', example='eeb0aa76449922c8ec718b97ec5da4c493d46d66a1f446fdce2ba29263efd612'),
  // gas
  gas: long(name='gas', example='0'),
  // hash
  hash: string(name='hash', example='65a0a7aa9b6f739faddd8e993eadecf85340cdeda6e20417e013e052f30afd3c'),
  // nonce
  nonce: string(name='nonce', example='395460146568219584'),
  // period
  period: long(name='period', example='0'),
  // signature_list
  signatureList: [ string ](name='signature_list', example='signature_list'),
  // timestamp
  timestamp: long(name='timestamp', example='1604565299516'),
  // transaction_type
  transactionType: string(name='transaction_type', example='TX_DEPOSIT_DATA'),
  // value
  value: long(name='value', example='0'),
}

// TriggerLogDTO类成员
model PositionStructBody {
  // 错误计数
  errorCount?: string(name='error_count', example='"1"'),
  // 高度
  height?: string(name='height', example='"10"'),
  // 序号
  index?: string(name='index', example='“1”'),
  // 最后一个错误
  lastError?: string(name='last_error', example='“”'),
  // 类型
  type?: string(name='type', example='""'),
}

// 授权服务参与方结构体
model Participant {
  // 业务系统唯一标示
  bizUid?: string(maxLength=64, name='biz_uid', example='76a0e716164848168dc726460042ee25'),
  // 区块链ID
  blockchainId?: string(name='blockchain_id', example='cfd98b44fb3246dbbae07dae4bae59fe'),
  // 创建时间
  createTime: long(name='create_time', example='1595574776000'),
  // 信用代码
  creditNumber?: string(name='credit_number', example='30405123'),
  // 扩展信息，标准JSON格式
  extensionInfo?: string(name='extension_info', example='{"organization":"test","company":"test"}'),
  // 参与方名字
  name: string(maxLength=64, name='name', example='Bob'),
  // 回调通知服务地址
  notificationService?: string(name='notification_service', example='http://127.0.0.1'),
  // 参与方ID
  participantId: string(maxLength=100, name='participant_id', example='did:test:0000:3fc223617da9a17a4d7792ef0c3f57bd176eca8408f2f4cb1df42939220829d2'),
  // DID  doc中的公开信息
  publicInfo?: string(name='public_info', example='information'),
  // 参与方角色列表
  role: [ string ](name='role', example=''),
  // 空间ID
  spaceId?: string(name='space_id', example='space1'),
  // 参与方状态
  status?: string(name='status', example='ACTIVE,DELETED...'),
  // 更新时间
  updateTime: long(name='update_time', example='1595574776000'),
  // 账户名称
  account?: string(name='account', example='account1'),
}

// 合约绑定关系
model ContractBindResp {
  // 合约标识
  serviceId?: string(name='service_id', example='cme20230724104931af3a4d'),
  // 合约名称
  name?: string(name='name', example='资产合约'),
  // 是否已关联
  bind?: boolean(name='bind', example='true'),
}

// 节点类型
model CrowdNodeTypeEnum {
  // 组合节点
  group?: string(name='group', example='xx'),
  // 条件节点
  condition?: string(name='condition', example='xx'),
}

// 任务列表返回体
model TaskListInfoDTO {
  // 任务名称
  taskName: string(name='task_name', example='普通任务'),
  // 任务ID
  taskId: string(name='task_id', example='qdQxqU5gz'),
  // appId
  appId: string(name='app_id', example='2021004121633301'),
  // 自有ID
  surveyId: string(name='survey_id', example='ybl1112'),
  // 租户ID
  tenantId: string(name='tenant_id', example='RIVUFSJG'),
  // 租户名称
  tenantName: string(name='tenant_name', example='李强'),
  // 操作员
  operator: string(name='operator', example='eipzps@alitest.comtest'),
  // 样本数量
  sampleNum: long(name='sample_num', example=''),
  // 完成数量
  completedNum: long(name='completed_num', example=''),
  // 甄别数量
  screenNum: long(name='screen_num', example=''),
  // 样本总金额
  sampleTotalAmount: string(name='sample_total_amount', example='10.00'),
  // 全额红包总金额
  redPacketTotalAmount: string(name='red_packet_total_amount', example='20.00'),
  // 该任务总金额
  taskTotalAmount: string(name='task_total_amount', example='30.00'),
  // 全额红包金额
  fullRedPacketAmount: string(name='full_red_packet_amount', example='1.00'),
  // 甄别红包金额
  examineRedPacketAmount: string(name='examine_red_packet_amount', example='0.05'),
  // 发证量
  issuedNum?: long(name='issued_num', example=''),
  // 产品下单code类型（1-资源包 2-后付费）
  productCodeType: string(name='product_code_type', example='1'),
  // 审核理由
  reviewContent?: string(name='review_content', example='拒绝,图片不合适'),
  // 任务状态：0-已删、1-已完成、2-审核未通过、3-暂停、4-投放中、5-暂停中未重启、6、投放中未暂停、7-投放中未调整、8-投放中未完成、9-待投放、10-草稿任务
  status: string(name='status', example='9'),
  // ap状态，1:启用，0：审批中
  apStatus: string(name='ap_status', example='1'),
  // 奖励渠道（0-手动发支付宝余额 1-海豚红包 2-问卷自带）
  prizeChannel: long(name='prize_channel', example='1'),
  // 奖励渠道为问卷自带时，全额红包信息
  fullRedPacketTextInfo?: string(name='full_red_packet_text_info', example='1-5元红包'),
  // 修改时间
  gmtModified: string(name='gmt_modified', example='2023-12-22 10:34:11'),
  // 创建时间
  gmtCreate: string(name='gmt_create', example='2023-12-22 10:11:33'),
  // 投放时间
  gmtOnline?: string(name='gmt_online', example='2023-12-23 10:11:22'),
  // 最近暂停/完成时间
  gmtPauseOrComplete?: string(name='gmt_pause_or_complete', example='2022-12-22 09:11:11'),
  // 最近一轮用时（h）
  lastRoundTime?: long(name='last_round_time', example='1'),
}

// 阿里云联盟成员信息
model ALiYunMember {
  // 加入时间
  joinTime?: long(name='join_time', example='11231231231'),
  // 成员id
  memberId?: string(name='member_id', example='成员id'),
  // 成员名称
  memberName?: string(name='member_name', example='成员名称'),
  // 角色
  role?: string(name='role', example='角色'),
  // 状态
  status?: string(name='status', example='状态'),
}

// 应用授权列表
model ApplicationPageListResp {
  // 应用标识
  applicationId?: string(name='application_id', example='app20230725115808679d4f'),
  // 链ID
  accessKey?: string(name='access_key', example='284f75bc-8069-443f-9d46-4576bb15f210'),
  // 合约(创建实例时填写的合约名称。)
  nameList?: [ string ](name='name_list', example=''),
}

// 实例进度信息
model InstanceProgressInfo {
  // 操作人
  operator?: string(name='operator', example='张三'),
  // 操作时间
  time?: long(name='time', example='1690166971465'),
  // 合约部署进度类型
  type?: string(name='type', example='SERVICE_START'),
  // 部署状态
  status?: string(name='status', example='INIT'),
  // 合约部署进度名称
  typeName?: string(name='type_name', example='部署合约服务'),
  // 额外参数
  data?: string(name='data', example='{json}'),
}

// 授权服务数据模型结构体
model DataModel {
  // 业务系统唯一标示
  bizUid?: string(name='biz_uid', example='3fc223617da9a17a4d7792ef0c3f57bd176ec'),
  // 空间ID
  spaceId: string(name='space_id', example='space1'),
  // 创建时间
  createTime: long(name='create_time', example='1595574776000'),
  // 数据模型描述
  description?: string(name='description', example='这是一个描述信息'),
  // 模型字段详细信息
  fieldDetail: string(name='field_detail', example='{"organization":"test","company":"test"}'),
  // 数据模型业务ID
  modelBizId?: string(name='model_biz_id', example='model_company_data'),
  // 数据模型ID
  modelId: string(name='model_id', example='DATA_MODEL_123'),
  // 数据模型名称
  name: string(name='name', example='税务信息模型'),
  // 提交人
  submitter: Participant(name='submitter', example=''),
  // 更新时间
  updateTime: long(name='update_time', example='1595574776000'),
  // 状态
  status: string(name='status', example='ACTIVE'),
}

// 授权流程节点详细信息
model NodeDetail {
  // 节点审批意见
  comment: string(name='comment', example='agree comment'),
  // 节点ID
  nodeId: string(name='node_id', example='did:test:0000:3fc223617da9a17a4d7792ef0c3f57bd176eca8408f2f4cb1df42939220829d2'),
  // 节点名称
  nodeName: string(name='node_name', example='Bob'),
  // 节点状态
  nodeStatus: string(name='node_status', example='Agree'),
  // 节点审批时间
  operateTime: long(name='operate_time', example='1592883002497'),
  // 扩展参数
  extensionInfo?: string(name='extension_info', example='test'),
}

// 合约链配置信息结果
model ContractIdeConfig {
  // 合约链的一个已创建的测试账户
  accountName: string(name='account_name', example='Tester001'),
  // 区块链唯一标识
  bizid: string(name='bizid', example='0001bcde'),
  // 合约链的名字
  chainName: string(name='chain_name', example='合约体验链'),
  // 目标合约链的host地址
  host: string(name='host', example='https://127.0.0.1'),
  // 说明是否开启wasm合约功能
  isWasm?: boolean(name='is_wasm', example='true'),
  // 目标合约链服务公开的端口号
  port: string(name='port', example='18131'),
  // 合约链已创建的测试账户的密钥
  privateKey: string(name='private_key', example='c8d6079a1ea7e5dba407998fecd89ac0783295c7e1a84d44e304b5314c765e73'),
  // 如果是TEE硬件隐私合约链，会包含此字段内容
  rsaPublicKey?: string(name='rsa_public_key', example='-----BEGIN PUBLIC KEY----- <RSA公钥> -----END PUBLIC KEY-----'),
  // 合约链的版本说明
  version?: string(name='version', example='2.7'),
}

// {"key":"value"}
model KeyValuePair {
  // 键名
  key: string(name='key', example='key'),
  // 值
  value: string(name='value', example='value'),
}

// 日志存储类型
model TriggerLogDTOStructBody {
  // 创建时间
  createTime?: string(name='create_time', example='""'),
  // 修改时间
  modifyTime?: string(name='modify_time', example='""'),
  // 状态
  status?: string(name='status', example='""'),
  // uuid
  uuid?: string(name='uuid', example='“”'),
  // 位置
  position?: PositionStructBody(name='position', example='{}'),
}

// 合约类型
model ContractTypeListResp {
  // 名称
  name?: string(name='name', example='存证合约'),
  // 值
  value?: string(name='value', example='DEPOSITE'),
}

// 蚂蚁链浏览器交易信息
model BlockchainBrowserTransaction {
  // bizid
  bizid: string(name='bizid', example='27ce375122ef483691488395808e009e'),
  // block_hash
  blockHash: string(name='block_hash', example='4a6306e001a484c5c1d198668008b4876b991c5369a18a8431e9e7b37b021694'),
  // category
  category: long(name='category', example='-1'),
  // create_time
  createTime: long(name='create_time', example='1604565299516'),
  // from
  from: string(name='from', example='eeb0aa76449922c8ec718b97ec5da4c493d46d66a1f446fdce2ba29263efd612'),
  // gas_used
  gasUsed: long(name='gas_used', example='0'),
  // hash
  hash: string(name='hash', example='65a0a7aa9b6f739faddd8e993eadecf85340cdeda6e20417e013e052f30afd3c'),
  // height
  height: long(name='height', example='6814087'),
  // reference_count
  referenceCount: long(name='reference_count', example='0'),
  // to
  to: string(name='to', example='eeb0aa76449922c8ec718b97ec5da4c493d46d66a1f446fdce2ba29263efd612'),
  // transaction_type
  transactionType: string(name='transaction_type', example='TX_DEPOSIT_DATA'),
  // block_version
  blockVersion: long(name='block_version', example='10'),
  // blockchain_name
  blockchainName: string(name='blockchain_name', example='BAASQATEST'),
  // blockchain_status
  blockchainStatus: boolean(name='blockchain_status', example='true, false'),
  // content
  content: string(name='content', example='eyJ0cmFuc2FjdGlvbl9pZCI6ImRjM2YyZTYz'),
  // hash_status
  hashStatus: boolean(name='hash_status', example='true, false'),
  // type
  type: long(name='type', example='0'),
  // transaction_contract
  transactionContract: BlockchainBrowserTransactionContract(name='transaction_contract', example='transaction_contract'),
}

// 阿里云蚂蚁链相关下载链接
model ALiYunDownloadPath {
  // client_crt_url
  clientCrtUrl?: string(name='client_crt_url', example='client_crt_url'),
  // trust_ca_url
  trustCaUrl?: string(name='trust_ca_url', example='trust_ca_url'),
  // ca_crt_url
  caCrtUrl?: string(name='ca_crt_url', example='ca_crt_url'),
  // sdk_url
  sdkUrl?: string(name='sdk_url', example='sdk_url'),
}

// 阿里云子链结构体
model ALiYunChainSubnet {
  // 子链id
  antChainId?: string(name='ant_chain_id', example='S210304150059'),
  // 子链名称
  name?: string(name='name', example='name'),
  // 子链节点数
  nodeSum?: long(name='node_sum', example='1'),
  // 子链监控状态
  monitor?: boolean(name='monitor', example='true, false'),
  // 子链的块高
  blockHeight?: string(name='block_height', example='100'),
  // 子链的业务总数
  transactionSum?: long(name='transaction_sum', example='1000'),
  // 子链的创建时间
  createTime?: long(name='create_time', example='1000821213123'),
  // 子链的状态
  status?: string(name='status', example='STOP/CREATE'),
  // 子链的权限
  consortiumMember?: boolean(name='consortium_member', example='true, false'),
  // 主链id
  mainChainId?: string(name='main_chain_id', example='2e7e22c42bb8419bbf99b7f56aa2f17f'),
  // rest申请状态
  rest?: string(name='rest', example='OK'),
  // 子链序号
  groupId?: string(name='group_id', example='0000000000000002000000000000000000000000'),
}

// Did doc中的service info
model DidServiceInfo {
  // 服务的end point info
  endPoint: string(name='end_point', example='http://xxxxxx'),
  // 扩展字段信息
  extensionInfo: string(name='extension_info', example='{"item1":""}'),
}

// 实例最近调用记录
model InstanceRecordInfo {
  // 应用标识
  application?: string(name='application', example='app20230725115808679d4f'),
  // 执行结果
  status?: string(name='status', example='INIT'),
  // 操作时间
  operatingTime?: string(name='operating_time', example='1690166971465'),
}

// 阿里云账户信息
model ALiYunAccount {
  // ant_chain_id
  antChainId?: string(name='ant_chain_id', example='ant_chain_id'),
  // account
  account?: string(name='account', example='account'),
  // account_public_key
  accountPublicKey?: string(name='account_public_key', example='account_public_key'),
  // account_recovery_key
  accountRecoveryKey?: string(name='account_recovery_key', example='account_recovery_key'),
  // account_status
  accountStatus?: string(name='account_status', example='account_status'),
  // 机构信息
  memberName?: string(name='member_name', example='uid-11321313131'),
  // 创建时间
  createTime?: long(name='create_time', example='112313123'),
}

// 阿里云链节点信息
model ALiYunChainNodeInfo {
  // block_height
  blockHeight?: long(name='block_height', example='3123123'),
  // node_name
  nodeName?: string(name='node_name', example='node_name'),
  // status
  status?: boolean(name='status', example='true, false'),
  // version
  version?: string(name='version', example='version'),
  // 节点id
  nodeId?: string(name='node_id', example='0x0AC5C397C076E394B3D32C1A9488AAF32BABD410A2FFAF97C87646F5BD04CD42'),
  // 节点ip
  nodeIp?: string(name='node_ip', example='10.1.0.12'),
  // 节点的端口
  nodePort?: string(name='node_port', example='18130'),
  // 节点类型
  nodeType?: string(name='node_type', example='共识或非共识'),
  // 节点状态
  nodeState?: string(name='node_state', example='正常/异常'),
  // 节点来源
  nodeSource?: string(name='node_source', example='BaaS'),
  // 节点存储空间使用量
  diskUse?: string(name='disk_use', example='10'),
  // 节点存储总空间大小
  diskTotal?: string(name='disk_total', example='1024'),
  // 节点公钥
  publicKey?: string(name='public_key', example='121231bcd'),
}

// VC可信传输时，指定的目标did信息
model VcTransmitTargetStruct {
  // 目标did的公钥
  publicKey?: string(name='public_key', example='xxxx'),
  // 传输vc使用的区块链id
  vcChannel?: string(maxLength=32, minLength=8, name='vc_channel', example='bizid'),
  // 验证者did
  verifierDid: string(name='verifier_did', example='did:mychain:xxxx'),
}

// 人群标签对象
model CrowdTagEnumItemDTO {
  // 枚举名称
  name: string(name='name', example='性别'),
  // 枚举值
  val: string(name='val', example='F'),
}

// 阿里云交易查询信息
model ALiYunTransaction {
  // tx_type
  txType?: string(name='tx_type', example='tx_type'),
  // data
  data?: string(name='data', example='data'),
  // hash
  hash?: string(name='hash', example='hash'),
  // from
  from?: string(name='from', example='from'),
  // to
  to?: string(name='to', example='to'),
  // timestamp
  timestamp?: long(name='timestamp', example='1231231'),
  // period
  period?: long(name='period', example='12312312'),
  // nonce
  nonce?: string(name='nonce', example='nonce'),
  // gas
  gas?: string(name='gas', example='gas'),
  // value
  value?: string(name='value', example='value'),
  // signatures
  signatures?: [ string ](name='signatures', example='signatures'),
  // extentions
  extentions?: [ string ](name='extentions', example='extentions'),
}

// 阿里云存证链信息
model ALiYunNotaryBlockchain {
  // name
  name?: string(name='name', example='name'),
  // bizid
  bizid?: string(name='bizid', example='bizid'),
  // chain_type
  chainType?: string(name='chain_type', example='chain_type'),
  // node_num
  nodeNum?: long(name='node_num', example='node_num'),
  // member_status
  memberStatus?: string(name='member_status', example='member_status'),
  // block_height
  blockHeight?: long(name='block_height', example='block_height'),
  // transactions
  transactions?: long(name='transactions', example='transactions'),
  // network
  network?: string(name='network', example='network'),
  // version
  version?: string(name='version', example='version'),
}

// 合约市场列表
model ContractTemplateResp {
  // 模板标识
  templateId?: string(name='template_id', example='tme202307251209228357cc'),
  // 产品码
  productCode?: string(name='product_code', example='0001'),
  // 合约名称
  name?: string(name='name', example='资产合约'),
  // 缩略图url
  thumbUrl?: string(name='thumb_url', example='http://www.xxx.com'),
  // 合约描述
  description?: string(name='description', example='实现数据不可删除，不可篡改，不可抵赖的存证效果'),
  // 文档地址
  detailUrl?: string(name='detail_url', example='https://help.aliyun.com/product/84950.html'),
  // 是否已开通合约
  open?: boolean(name='open', example='true'),
  // 后续展示：购买用户头像
  avatarLogoList?: [ string ](name='avatar_logo_list', example=''),
  // 定制合约价格
  priceMessage?: string(name='price_message', example='定制合约服务费用：80,000元/年'),
}

// 数据授权服务数据对象结构体
model DataEntity {
  // 授权状态
  authStatus?: string(name='auth_status', example='AUTHORIZED'),
  // 业务系统唯一标示
  bizUid?: string(maxLength=64, name='biz_uid', example='76a0e716164848168dc726460042ee25'),
  // 区块链ID
  blockchainId?: string(name='blockchain_id', example='8c777cf9a71b660233215b6337dca78d'),
  // 数据类别
  category: string(maxLength=32, name='category', example='TABLE,FILE...'),
  // 数据ID
  dataId: string(maxLength=100, name='data_id', example='did:test:0000:3fc223617da9a17a4d7792ef0c3f57bd176eca8408f2f4cb1df42939220829d2'),
  // 数据模型ID
  dataModelId?: string(name='data_model_id', example='DATA_MODEL_Q23'),
  // 扩展信息，标准JSON格式
  extensionInfo?: string(name='extension_info', example='{"strategy":"test”}'),
  // 数据名称
  name: string(maxLength=64, name='name', example='testdata'),
  // 数据所有者ID
  ownerId: string(maxLength=100, name='owner_id', example='did:test:0000:3fc223617da9a17a4d7792ef0c3f57bd176eca8408f2f4cb1df42939220829d2'),
  // 流程节点信息
  processTemplate?: [ ProcessNode ](name='process_template', example=''),
  // 数据状态
  status?: string(maxLength=16, name='status', example='ACTIVE,DELETED...'),
  // 创建时间
  createTime: long(name='create_time', example='1595574776000'),
  // 修改时间
  updateTime?: long(name='update_time', example='1592810480442'),
  // DID doc里的公开信息
  publicInfo?: string(name='public_info', example='{}'),
}

// 阿里云蚂蚁链对象
model ALiYunAntChain {
  // ant_chain_id
  antChainId?: string(name='ant_chain_id', example='ant_chain_id'),
  // 链名称
  antChainName?: string(name='ant_chain_name', example='name'),
  // 链的类型
  chainType?: string(name='chain_type', example='链的类型'),
  // cipher_suit
  cipherSuit?: string(name='cipher_suit', example='cipher_suit'),
  // 创建时间
  createTime?: long(name='create_time', example='创建时间'),
  // expire_time
  expireTime?: long(name='expire_time', example='1123123123123'),
  // instance_id
  instanceId?: string(name='instance_id', example='instance_id'),
  // is_admin
  isAdmin?: boolean(name='is_admin', example='true、false'),
  // 成员状态
  memberStatus?: string(name='member_status', example='成员状态'),
  // merkle_tree_suit
  merkleTreeSuit?: string(name='merkle_tree_suit', example='merkle_tree_suit'),
  // Network
  network?: string(name='network', example='Network'),
  // 节点数
  nodeNum?: long(name='node_num', example='节点数'),
  // 区域信息
  regionId?: string(name='region_id', example='区域信息'),
  // 链的资源大小
  resourceSize?: string(name='resource_size', example='链的资源大小'),
  // rest_status
  restStatus?: string(name='rest_status', example='rest_status'),
  // 算法参数
  tlsAlgo?: string(name='tls_algo', example='算法参数'),
  // 版本信息
  version?: string(name='version', example='0.10.2.12.5'),
  // monitor_status
  monitorStatus?: boolean(name='monitor_status', example='monitor_status'),
}

// Did Doc中的服务字段描述
model DidDocServicesInfo {
  // 服务的扩展字段
  extension?: string(name='extension', example='json string'),
  // 服务ID，必须保证该服务ID在did doc中是唯一的。对于保留类型服务：
  // DidAuthService， 有且只能有一个，并且id必须为didauth-1；
  // VerifiableClaimRepository， 有且只有一个，并且id必须为vcrepository-1;
  id: string(name='id', example='service-id1'),
  // 服务的可访问地址
  serviceEndpoint: string(name='service_endpoint', example='http://example.com'),
  // 服务类型，必须是已经注册的服务类型，或者是默认保留的服务类型
  type: string(name='type', example='KYBServiceType'),
}

// 阿里云蚂蚁区块链证书信息
model ALiYunCertificateApplication {
  // ant_chain_id
  antChainId?: string(name='ant_chain_id', example='ant_chain_id'),
  // username
  username?: string(name='username', example='username'),
  // createtime
  createtime?: long(name='createtime', example='createtime'),
  // updatetime
  updatetime?: long(name='updatetime', example='1231231231231'),
  // bid
  bid?: string(name='bid', example='bid'),
  // status
  status?: string(name='status', example='status'),
}

// DidDoc中service的信息
model DisServicesInfo {
  // did doc service扩展字段
  extesion?: string(name='extesion', example='{}'),
  // did doc service id
  id: string(name='id', example='didauth-1'),
  // 服务endpoint
  serviceEndpoint: string(name='service_endpoint', example='http://auth.mydid.agent.com'),
  // service type
  type: string(name='type', example='DidAuthService'),
  // EXIST
  // CONFLICT
  // VALID
  // INVALID
  desc?: string(name='desc', example='描述'),
}

// 阿里云合约链信息
model ALiYunContractBlockchain {
  // name
  name?: string(name='name', example='name'),
  // bizid
  bizid?: string(name='bizid', example='bizid'),
  // chain_type
  chainType?: string(name='chain_type', example='chain_type'),
  // node_num
  nodeNum?: long(name='node_num', example='3'),
  // member_status
  memberStatus?: string(name='member_status', example='member_status'),
  // block_height
  blockHeight?: long(name='block_height', example='4'),
  // transactions
  transactions?: long(name='transactions', example='121'),
  // network
  network?: string(name='network', example='network'),
  // version
  version?: string(name='version', example='version'),
}

// 阿里云区块链小程序用户权限信息
model ALiYunChainMiniAppAuthorizedUser {
  // phone
  phone?: string(name='phone', example='phone'),
  // gmt_authorized
  gmtAuthorized?: string(name='gmt_authorized', example='gmt_authorized'),
  // 记录id
  userId?: long(name='user_id', example='112'),
}

// 阿里云合约工程信息
model ALiYunContractProject {
  // consortium_id
  consortiumId?: string(name='consortium_id', example='consortium_id'),
  // create_time
  createTime?: long(name='create_time', example='123123123'),
  // project_description
  projectDescription?: string(name='project_description', example='project_description'),
  // project_id
  projectId?: string(name='project_id', example='project_id'),
  // project_name
  projectName?: string(name='project_name', example='project_name'),
  // project_version
  projectVersion?: string(name='project_version', example='project_version'),
  // update_time
  updateTime?: long(name='update_time', example='update_time'),
}

// 合约列表
model ContractPageListResp {
  // 服务ID
  serviceId?: string(name='service_id', example='cme20230724104931af3a4d'),
  // 合约名称
  name?: string(name='name', example='资产合约'),
  // 合约类型
  type?: string(name='type', example='存证合约'),
  // 创建时间
  createTime?: long(name='create_time', example='1690166971465'),
}

// 阿里云区块链信息
model ALiYunOldContractBlockchain {
  // name
  name?: string(name='name', example='name'),
  // bizid
  bizid?: string(name='bizid', example='bizid'),
  // chain_type
  chainType?: string(name='chain_type', example='chain_type'),
  // node_num
  nodeNum?: long(name='node_num', example='node_num'),
  // member_status
  memberStatus?: string(name='member_status', example='member_status'),
  // block_height
  blockHeight?: long(name='block_height', example='block_height'),
  // transactions
  transactions?: long(name='transactions', example='transactions'),
  // network
  network?: string(name='network', example='network'),
  // version
  version?: string(name='version', example='version'),
}

// 分页属性
model ALiYunPagination {
  // 分页大小
  pageSize?: long(name='page_size', example='20'),
  // 分页编号
  pageNumber?: long(name='page_number', example='1'),
  // 总数大小
  totalCount?: long(name='total_count', example='100'),
}

// 阿里云区块链交易的汇总信息
model ALiYunTransactionSummary {
  // alias
  alias?: string(name='alias', example='alias'),
  // hash
  hash?: string(name='hash', example='hash'),
  // trans_type_v6
  transTypeV6?: string(name='trans_type_v6', example='trans_type_v6'),
  // trans_type_v10
  transTypeV10?: string(name='trans_type_v10', example='trans_type_v10'),
  // category
  category?: long(name='category', example='1'),
  // height
  height?: long(name='height', example='2131231'),
  // block_hash
  blockHash?: string(name='block_hash', example='block_hash'),
  // create_time
  createTime?: long(name='create_time', example='123123123'),
  // reference_count
  referenceCount?: long(name='reference_count', example='1'),
  // from
  from?: string(name='from', example='from'),
  // to
  to?: string(name='to', example='to'),
  // gas_used
  gasUsed?: long(name='gas_used', example='123'),
}

// 阿里云联盟信息
model ALiYunAntConsortium {
  // 链的数量
  chainNum?: long(name='chain_num', example='2'),
  // 成员数量
  memberNum?: long(name='member_num', example='5'),
  // 时间戳
  createTime?: long(name='create_time', example='时间戳'),
  // 角色
  role?: string(name='role', example='角色'),
  // 联盟id
  consortiumId?: string(name='consortium_id', example='联盟id'),
  // 状态值
  status?: string(name='status', example='状态值'),
  // 联盟名称
  consortiumName?: string(name='consortium_name', example='联盟名称'),
  // 联盟描述
  consortiumDescription?: string(name='consortium_description', example='联盟描述'),
  // 是否为空联盟
  isEmptyConsortium?: boolean(name='is_empty_consortium', example='true, false'),
}

// 阿里云数据导出任务checkpoint类
model CheckPointStructBody {
  // 高度
  height?: string(name='height', example='100'),
  // 序号
  index?: string(name='index', example='0'),
  // 类型
  type?: string(name='type', example='"Block"'),
  // last_error
  lastError?: string(name='last_error', example='“”'),
  // 错误统计
  errorCount?: string(name='error_count', example='0'),
  // 统计
  totalCount?: string(name='total_count', example='0'),
}

// 人群匹配结果
model CrowdMatchResult {
  // 人群匹配结果
  match: boolean(name='match', example='true, false'),
}

// 账户映射情况
model AccountMappingInfo {
  // 链上账户id
  bcAccount: string(name='bc_account', example='xxxxxxx'),
  // 账户绑定状态，1为未绑定，2为绑定成功
  bindingStatus: long(name='binding_status', example='1'),
  // 1是激活状态，2是冻结状态
  status: long(name='status', example='1'),
  // 账户唯一标示
  uid: string(name='uid', example='userid'),
}

// 证书实例详情
model CertInstanceDetail {
  // 主键
  bizId: string(name='biz_id', example='xx'),
  // 实例名称
  name: string(name='name', example='xx'),
  // 版发者
  issuer: string(name='issuer', example='xx'),
  // 实例内容
  claimContent: string(name='claim_content', example='xx'),
  // 状态；-1：已删除 0：审核未通过, 1：审核通过, 2：待审核, 3：编辑中
  status: long(name='status', example=''),
  // 审核建议
  verifyComment: string(name='verify_comment', example='xx'),
  // 创建时间
  gmtCreate: string(name='gmt_create', example='1701227612000'),
  // 修改时间
  gmtModified: string(name='gmt_modified', example='1701227612000'),
}

// 蚂蚁链用途申报结构体
model ChainPurpose {
  // 用途id
  id?: string(name='id', example='4356'),
  // 用途key
  key?: string(name='key', example='3uhhf'),
  // 用途内容
  name?: string(name='name', example='用途内容'),
  // 用途申报时间
  time?: string(name='time', example='22-01-01'),
  // 用途申报状态
  status?: string(name='status', example='用途申报状态'),
  // 简短描述开关
  item?: boolean(name='item', example='true, false'),
  // 详细描述开关
  extend?: boolean(name='extend', example='true, false'),
  // 用途申报简短描述
  purposeItem?: string(name='purpose_item', example='""'),
}

// 证书颁发校验错误描述
model TemplateInstanceErrorDetailDTO {
  // 当前错误类型的错误行数
  errorNum: long(name='error_num', example='1-5000'),
  // 出错数据抽样
  samples: [ string ](name='samples', example='[“xxx“, “xxxx“]'),
  // 出错列，从0开始
  errorColumnIndex: long(name='error_column_index', example='0'),
  // 当前错误类型的描述
  errorDescription: string(name='error_description', example='身份证号格式不正确'),
}

// 申请用户授权的目标可验证声明内容、过期时间等配置
model Claim {
  // 一个json的string，内容包含具体需要的声明，不同业务场景不同。
  claimContent: string(name='claim_content', example='{"issuerName":"XX有限公司","userNo":"12123434"}'),
  // 如果在相同的biz_type下，还需要针对声明claim进行细化划分，可以使用此字段。
  claimType?: string(name='claim_type', example='Level1'),
  // 申请声明颁发后的有效期，可选参数，如果不指定则默认申请永久有效。
  expire?: long(name='expire', example='-1'),
  // 授权颁发可验证声明的目标did信息，通常为机构或组织的did
  did?: string(name='did', example='did:mychain:6d8f3ff4af91532eaa7fc477be6b68dea14ed3bcfd5755ccedced43f6c248214'),
  // 目标待授权的名称，标定唯一性，与claim内容配合使用，如果不指定did可以考虑使用此字段。
  name?: string(name='name', example='XX有限公司'),
}

// 阿里云子链检查结果
model ALiYunChainSubnetCheck {
  // 检查结果
  checkResult?: string(name='check_result', example='OK'),
  // 子链成员列表
  consortiumMemberList?: [ string ](name='consortium_member_list', example=''),
  // 节点信息列表
  chainNodeInfoList?: [ ALiYunChainNodeInfo ](name='chain_node_info_list', example=''),
  // 联盟管理员
  consortiumAdmin?: boolean(name='consortium_admin', example='true, false'),
  // 子链成员列表
  consortiumMemberInfoList?: [ ALiYunMember ](name='consortium_member_info_list', example=''),
  // 分页信息
  pagination?: ALiYunPagination(name='pagination', example=''),
}

// 授权规则详细信息
model AuthorizationRule {
  // 规则来源
  source: string(name='source', example='DID'),
  // 规则索引
  index: string(name='index', example='serviceType'),
  // 规则类型
  type: string(name='type', example='DEFAULT'),
  // 规则表达式
  expression: string(name='expression', example='EQUALS'),
  // 规则内容
  content: string(name='content', example='content'),
}

// 账户映射结果
model AccountMappingResult {
  // 该账户在链上的唯一标示
  baccount: string(name='baccount', example='1234:1234:123'),
  // 当前账户映射结果描述语句
  message: string(name='message', example='成功'),
  // 状态描述符
  status: string(name='status', example='success'),
  // 自有系统中该账户唯一标示
  uid: string(name='uid', example='1234'),
}

// 可验证声明的完整内容以及状态，当前持有者的did等信息
model VcContent {
  // 可验证声明的唯一标识id，status 为 “1” 时候非空
  vcId: string(name='vc_id', example='未定义'),
  // 可验证声明完整内容， status 为 “1” 时候非空
  vcContent: string(name='vc_content', example='声明内容，JSON字符串'),
  // 可验证声明的颁发状态说明： -1：颁发失败，0：未授权 1：授权成功，此时vc_content字段会包含授权后的声明内容，其它状态码，待定义后增加。
  status: string(name='status', example='“1”'),
  // 被颁发当前可验证声明的目标did
  did?: string(name='did', example='did:mychain:6d8f3ff4af91532eaa7fc477be6b68dea14ed3bcfd5755ccedced43f6c248214'),
  // 如果status 是 “-1”，则说明当前可验证声明颁发失败，此字段说明失败原因。
  message?: string(name='message', example='“颁发可验证声明失败”'),
}

// 用户身份、账户及手机号信息
model UserInfoParam {
  // 用户手机号信息
  phone: string(name='phone', example='13222222222'),
  // 用户账号信息
  userAccount: string(name='user_account', example='13222222222'),
  // 用户名称
  userName: string(name='user_name', example='wangerxiao'),
}

// 任务人群匹配返回列表
model TaskCrowdMatchResp {
  // 任务ID
  taskId: string(name='task_id', example='NQYwDb1w5'),
  // 人群匹配结果
  crowdMatchResult: CrowdMatchResult(name='crowd_match_result', example=''),
}

// 链详情
model MyChainInfo {
  // 链id
  bizId: string(name='biz_id', example='xxxid'),
  // 授权租户id
  tenant: string(name='tenant', example='tenantID'),
}

// 派生DID的具体参数
model DeriveDid {
  // 派生的子did
  childdid: string(name='childdid', example='did:mychain:xxxx'),
  // 子did 的did doc
  childdiddoc: string(name='childdiddoc', example='xxx'),
  // 用户输入用于派生子did的派生码
  code: string(name='code', example='asdfghj'),
}

// 授权明细详情
model AuthorizationDetail {
  // 授权凭证ID
  authorityCertId: string(name='authority_cert_id', example='vc:private:0000:7bd647663cec087bc424941ad35cb588e96f38c2dcb512442410596c02e8ef681595560495530110'),
  // 授权ID
  authorizationId?: string(name='authorization_id', example='8c777cf9a71b660233215b6337dca78d66e10f25feca50a2761c09df7d4d0506'),
  // 区块号
  blockNum: long(name='block_num', example='1324'),
  // 过期时间
  expire?: long(name='expire', example='1592810480442'),
  // 授权时间
  issuanceTime: long(name='issuance_time', example='1595574776000'),
  // 授权人
  issuer: Participant(name='issuer', example=''),
  // 被授权人
  subject: Participant(name='subject', example=''),
  // 哈希
  txHash: string(name='tx_hash', example='d4dbde485203ed445b59fa7cf7976ecc56cf7494cca2d0185c1cac130463ac91'),
  // 资产所有者
  owner: Participant(name='owner', example=''),
}

// 阿里云CloudIde的配置
model ALiYunChainCloudIdeConfig {
  // bizid
  bizid?: string(name='bizid', example='bizid'),
  // name
  name?: string(name='name', example='name'),
  // trial_account
  trialAccount?: string(name='trial_account', example='trial_account'),
  // trial_account_private_key
  trialAccountPrivateKey?: string(name='trial_account_private_key', example='trial_account_private_key'),
  // ant_chain_id
  antChainId?: string(name='ant_chain_id', example='ant_chain_id'),
  // ant_chain_name
  antChainName?: string(name='ant_chain_name', example='ant_chain_name'),
  // version
  version?: string(name='version', example='version'),
}

// 创建应用响应信息
model ApplicationCreateResp {
  // 应用标识
  applicationId?: string(name='application_id', example='app20230725115808679d4f'),
}

// 阿里云联盟返回结果
model ALiYunUnion {
  // 联盟内链的集合
  antChains?: [ ALiYunAntChain ](name='ant_chains', example='联盟内链的集合'),
  // 联盟信息
  antConsortiums?: [ ALiYunAntConsortium ](name='ant_consortiums', example='联盟信息'),
  // 联盟Id
  consortiumId?: string(name='consortium_id', example='联盟Id'),
  // 联盟成员信息
  members?: [ ALiYunMember ](name='members', example='联盟成员信息'),
  // 阿里云分页属性
  pagination?: ALiYunPagination(name='pagination', example='阿里云分页属性'),
  // is_exist
  isExist?: boolean(name='is_exist', example='true, false'),
}

// 数据授权服务公钥矩阵关系结构体
model PublicKeyRelation {
  // 公钥颁发者ID
  issuerId: string(name='issuer_id', example='did:test:0000:3fc223617da9a17a4d7792ef0c3f57bd176eca8408f2f4cb1df42939220829d2'),
  // 公钥接受者ID
  recipientId: string(name='recipient_id', example='did:test:0000:3fc223617da9a17a4d7792ef0c3f57bd176eca8408f2f4cb1df42939220829d2'),
}

// 合约类型
model ContractTypeResp {
  // 合约服务类型
  typeList?: [ ContractTypeListResp ](name='type_list', example=''),
}

// 物流金融平台运单轨迹信息
model LogisticLocation {
  // 结构化地址信息,规则遵循：国家、省份、城市、区县、城镇、乡村、街道、门牌号码、屋邨、大厦
  address?: string(name='address', example='北京市朝阳区阜通东大街6号'),
  // 行政区划代码
  cityCode?: string(name='city_code', example='110000'),
  // 纬度
  lat: string(name='lat', example='39.916527'),
  // 经度
  lon: string(name='lon', example='116.397128'),
  // 轨迹时间戳
  trackTime: long(name='track_time', example='1566221266000'),
}

// 阿里云订单结果
model ALiYunOrderResult {
  // request_id
  requestId?: string(name='request_id', example='request_id'),
  // data
  data?: string(name='data', example='data'),
  // success
  success?: boolean(name='success', example='true, false'),
  // code
  code?: string(name='code', example='code'),
  // message
  message?: string(name='message', example='message'),
  // synchro
  synchro?: boolean(name='synchro', example='true, false'),
}

// 批量查询商户下已映射的账户信息接口，返回的对象
model QueryMappingBatchResult {
  // 本次查询获取的账户信息
  accounts: [ AccountMappingInfo ](name='accounts', example=''),
  // 该商户下总共映射账户的数量
  totalNum: long(name='total_num', example='200'),
  // 该商户下账户信息的总页数
  totalPage: long(name='total_page', example='10'),
}

// 阿里云区块链区块信息
model ALiYunChainBlock {
  // ant_chain_id
  antChainId?: string(name='ant_chain_id', example='ant_chain_id'),
  // block_hash
  blockHash?: string(name='block_hash', example='block_hash'),
  // create_time
  createTime?: long(name='create_time', example='create_time'),
  // height
  height?: long(name='height', example='123123'),
  // previous_hash
  previousHash?: string(name='previous_hash', example='previous_hash'),
  // root_tx_hash
  rootTxHash?: string(name='root_tx_hash', example='root_tx_hash'),
  // transaction_size
  transactionSize?: long(name='transaction_size', example='3'),
  // trans_summary_list
  transSummaryList?: [ ALiYunTransactionSummary ](name='trans_summary_list', example='trans_summary_list'),
  // Version
  version?: long(name='version', example='10'),
}

// 应用授权列表查询
model ApplicationPageResp {
  // 应用授权列表
  list?: [ ApplicationPageListResp ](name='list', example=''),
  // 总数
  total?: long(name='total', example='200'),
}

// did中使用ZKP生成证明需要的信息
model DidZKPInfo {
  // 需要生成证明的路径
  path: string(name='path', example='"$./path"'),
  // 生成ZKP证明的公共信息
  publicInputs: string(name='public_inputs', example='json array string'),
  // zkp方法
  zkpType: string(name='zkp_type', example='more,less,contain'),
}

// 阿里云账户列表信息
model ALiYunAccountList {
  // pagination
  pagination?: ALiYunPagination(name='pagination', example='pagination'),
  // accounts
  accounts?: [ ALiYunAccount ](name='accounts', example='accounts'),
  // 联盟管理员
  consortiumAdmin?: boolean(name='consortium_admin', example='true, false'),
}

// 蚂蚁链用途申报结构体
model AntChainPurposeResponse {
  // 用户申报用途状态
  status?: string(name='status', example='1'),
  // 已申报的用途，比如供应链金融
  purpose?: string(name='purpose', example='已申报的用途，比如供应链金融'),
  // 申报时间
  createTime?: string(name='create_time', example='21-1-1'),
  // 简短说明用途
  chainPurposeItem?: string(name='chain_purpose_item', example='简短说明用途'),
  // 用途详情
  chainPurposeExtend?: string(name='chain_purpose_extend', example='用途详情'),
  // 申请用途列表
  recordList?: [ ChainPurpose ](name='record_list', example='[]'),
}

// 阿里云交易收据
model ALiYunTransactionReceipt {
  // data
  data?: string(name='data', example='data'),
  // gas_used
  gasUsed?: string(name='gas_used', example='gas_used'),
  // result
  result?: long(name='result', example='result'),
  // logs
  logs?: [ string ](name='logs', example='logs'),
}

// 实例进度
model ContractCreateProcessResp {
  // 当前进度信息
  status?: string(name='status', example='SERVICE_START'),
  // 合约部署进度
  progressInfoList?: [ InstanceProgressInfo ](name='progress_info_list', example=''),
}

// 新建合约服务
model ContractCreateResp {
  // 合约标识
  serviceId?: string(name='service_id', example='cme20230724104931af3a4d'),
}

// 内部建链信息查询
model CreateBlockchainInfo {
  // 链id
  bizid: string(name='bizid', example='141a48c42f1e47b085a4502dab442553'),
  // 链的状态
  blockchainStatus: string(name='blockchain_status', example='NOMAL'),
  // 链的类型
  blockchainType: string(name='blockchain_type', example='PROD、TEST'),
  // 链的名称
  blockchainName: string(name='blockchain_name', example='区块链'),
  // 节点数量
  blockchanNodeNum: long(name='blockchan_node_num', example='1'),
  // 创建时间
  blockchainCreateTime: long(name='blockchain_create_time', example='1609731134000'),
}

// VC分享的结果
model VcShareResult {
  // 目标分享的VC的id
  vcId: string(name='vc_id', example='vc:mychain:dec9725c55bc7ad28b97340230f211b2ad96a35f5131ce9f77c1bd7b67f919451572244785477124'),
  // 分享给目标接受者的did
  targetDid: string(name='target_did', example='did:mychain:6d8f3ff4af91532eaa7fc477be6b68dea14ed3bcfd5755ccedced43f6c248214 '),
  // 分享链上VC数据的交易hash，可用于直连区块链查询交易内容时使用。
  txHash?: string(name='tx_hash', example='388d0822df016aa66c954344e22c36ec89e4a4573ef0491220bd80c1fe3469cb'),
  // 分享是否成功，true：成功，false：失败
  status: boolean(name='status', example='true，false'),
  // 失败的对应原因信息
  msg?: string(name='msg', example='“失败原因”'),
}

// 合约加密字段
model ContractEncryptKeyItem {
  // 字段对应的id
  key: string(name='key', example='keyId'),
  // 0:encrypt_text,
  // 1:encrypt_array_text,
  // 2:encrypt_int
  // 3:encrypt_array_int
  type: long(name='type', example='0'),
  // 字段对应的数据
  value: string(name='value', example='"value_1"'),
}

// did更新事件
model DidEvent {
  // 事件对应的合约方法
  action: string(name='action', example='add'),
  // 对应did
  did: string(name='did', example='did:mychain:XXXX'),
  // did对应doc
  didDoc: string(name='did_doc', example='{}'),
  // 本次事件的触发者
  from: string(name='from', example='XXXXXXXXX'),
  // 6500
  height: long(name='height', example='事件在区块的高度'),
  // 交易hash
  txHash: string(name='tx_hash', example='xxxxxx'),
  // 交易在区块中的index
  txIndex: long(name='tx_index', example='1'),
}

// Vc可信传输实际参数
model VcTransmitPayload {
  // 目标did相关信息列表
  targetVerifier: [ VcTransmitTargetStruct ](name='target_verifier', example=''),
  // 要传输的vc_id
  vcId: string(name='vc_id', example='vc:mychain:xxxxx'),
  // vc原文，如果vc原文出现在传输接口，那么VC仓库不会从本地查找，而是直接将传输的VC上链
  vcContent?: string(name='vc_content', example='json string'),
}

// 阿里云合约内容
model ALiYunChainContractContent {
  // content
  content?: string(name='content', example='content'),
  // content_id
  contentId?: string(name='content_id', example='content_id'),
  // content_name
  contentName?: string(name='content_name', example='content_name'),
  // create_time
  createTime?: long(name='create_time', example='create_time'),
  // is_directory
  isDirectory?: boolean(name='is_directory', example='true'),
  // parent_content_id
  parentContentId?: string(name='parent_content_id', example='parent_content_id'),
  // project_id
  projectId?: string(name='project_id', example='project_id'),
  // update_time
  updateTime?: long(name='update_time', example='update_time'),
}

// 结果
model Result {
  // 联盟id
  consortiumId: string(name='consortium_id', example='00001'),
}

// 更新did doc中的service信息
model UpdateDidService {
  // 待更新did之前的版本号
  previousVersion: long(name='previous_version', example='2'),
  // did doc中的service id
  serviceId: string(name='service_id', example='service#1'),
  // 服务信息
  serviceInfo: DidServiceInfo(name='service_info', example=''),
  // 服务类型
  serviceType: string(name='service_type', example='auth'),
}

// 包含业务组的用户信息
model AccountInfoWithBiz {
  // 注册地址
  address?: string(name='address', example='北京'),
  // 业务场景code
  bizCode: string(name='biz_code', example='020301'),
  // 业务名称
  bizName: string(name='biz_name', example='test1'),
  // 业务类型，预留
  bizType?: string(name='biz_type', example='test1'),
  // 用户创建时间，格式yyyy-MM-dd HH:mm:ss
  createTime?: string(name='create_time', example='2019-06-12 00:00:00'),
  // 用户注销时间，格式yyyy-MM-dd HH:mm:ss
  endTime?: string(name='end_time', example='2019-06-13 00:00:00  '),
  // 扩展字段，使用json格式
  extension?: string(maxLength=200, name='extension', example='{"status":1}'),
  // 业务组code
  groupCode: string(name='group_code', example='0101'),
  // 业务组名称
  groupName: string(name='group_name', example='baas平台'),
  // 唯一标示类型，0:统一信用代码,1:开票机构代码,2:身份证号
  identityType?: long(name='identity_type', example='0'),
  // 唯一标示码
  identityValue?: string(name='identity_value', example='370211198106130000'),
  // 用户标签
  label?: string(name='label', example='<kpi>0</kpi>'),
  // 间连用户的上层直连用户名称
  parent?: string(name='parent', example='某某公司'),
  // 统计时间，时间格式：yyyy-MM-dd HH:mm:ss
  statDate?: string(name='stat_date', example='2019-06-12 00:00:00'),
  // 用户id
  userId?: string(name='user_id', example='bjc1111   '),
  // 用户或企业名称
  userName?: string(name='user_name', example='北京公司A'),
  // 用户类型：direct直连，indirect间连，partner合作伙伴
  userType?: string(name='user_type', example='direct'),
}

// 物流金融信用凭证信息
model IssueInfo {
  // 信用流转批次号
  batchId?: string(name='batch_id', example='001abc'),
  // 合同编号
  contractId?: string(name='contract_id', example='8888888'),
  // 信用凭证额度
  creditLimit?: string(name='credit_limit', example='1898.98'),
  // 失败原因信息
  errMsg?: string(name='err_msg', example='发行额度不足'),
  // 信用凭证到期时间
  expireDate?: string(name='expire_date', example='20191212'),
  // 信用凭证发起时间
  issueDate?: string(name='issue_date', example='20190101'),
  // 信用流转凭证
  issueId?: string(name='issue_id', example='002abc'),
  // 发行结果状态 
  // -1:发行失败状态， 0:未完成状态， 1:已发行状态
  status?: long(name='status', example='1'),
  // 发行信用流转的运单号
  waybillId?: string(name='waybill_id', example='003abc'),
}

// 查看应用秘钥响应信息
model ApplicationGetSkResp {
  // 应用秘钥
  sk?: string(name='sk', example='******'),
}

// 分页失败的展示日志（过滤器：待处理、成功、已忽略）
model CommonResponsePageableStructBody {
  // 页面规格
  pageSize?: string(name='page_size', example='10'),
  // 当前页码
  current?: string(name='current', example='10'),
  // 总条数
  total?: string(name='total', example='total'),
  // 失败日志数组
  list?: [ TriggerLogDTOStructBody ](name='list', example='{}'),
}

// 阿里云售卖区信息
model ALiYunChainRegion {
  // region_id
  regionId?: string(name='region_id', example='region_id'),
  // region_name
  regionName?: string(name='region_name', example='region_name'),
}

// 阿里云售卖联盟信息
model ALiYunBuyUnion {
  // consortium_name
  consortiumName?: string(name='consortium_name', example='consortium_name'),
  // consortium_id
  consortiumId?: string(name='consortium_id', example='consortium_id'),
}

// 分享可验证声明时的核心内容
model VcShareStruct {
  // 分享的目标VC的id
  vcId: string(name='vc_id', example='未定义'),
  // 目标的VC持有者的did
  ownerDid: string(name='owner_did', example='did:mychain:6d8f3ff4af91532eaa7fc477be6b68dea14ed3bcfd5755ccedced43f6c248214'),
  // 在支持声明的claim字段级别分享能力时使用，可以指定哪些字段隐藏，哪些字段分享。示例中标记为”1“的是隐藏，”0“的是分享明文。
  index?: string(name='index', example='{ "Item1": "1", "学历信息": [ { "学历": "0", "毕业院校": "0", "专业": "0", "Item2":"1", }, "1", ], "Item3":"1" }'),
  // 非托管模式下owner_did的签名，作为授权凭证
  signature?: string(name='signature', example='jN1LVH5YhbTvgrdeBqlImPJBWDzVdNyyHZ1n9A0pSOQKnt11jWM5Qn707+wEa7bc8TOd1WvRItTe\r\nmx4xYCqX0gE=\r\n '),
}

// 小程序浏览器授权类型
model MiniAppBrowserAuthType {
  // 授权类型
  authType: string(name='auth_type', example='DISABLED, ALL_USER, SPECIFIC_USER'),
}

// 链上交易信息
model TxInfo {
  // 上链结果
  txReceiptResult: string(name='tx_receipt_result', example='SUCCESS'),
  // 区块链id
  bizId: string(name='biz_id', example='c4b83bb3080a4a19957af5b0b4430542'),
  // 交易hash
  txHash: string(name='tx_hash', example='aeedaaf3abb4a1ce86de538ec42759626689ea59fdfba4a10a0ef1550aa10d3d'),
  // 交易类型
  txType: string(name='tx_type', example='TX_DEPOSIT_DATA'),
  // 时间戳
  timestamp: long(name='timestamp', example='1638796927336'),
  // 区块高度
  blockNumber: string(name='block_number', example='68772416'),
  // 交易随机数Nonce
  nonce: string(name='nonce', example='505563366098488426'),
  // 发起地址
  from: string(name='from', example='070e88eb167a1dc5156563c5b0dd2c9e89fe5cff50e78c8534c33511d13d3304'),
  // 目标地址
  to: string(name='to', example='070e88eb167a1dc5156563c5b0dd2c9e89fe5cff50e78c8534c33511d13d3304'),
  // 签名
  signature: string(name='signature', example='9357e09984d9ba31f0f6070a8276b0d39ffeb8c40aaa7a6873cc69a04ea4babf7295d642aeb945b5eca6624751e11e41885d918deae554abd8d732f95e31d44f00'),
}

// 服务发现结果
model ServiceDiscoveryResult {
  // 提供该服务能力的did
  did: string(name='did', example='did:mychain:...'),
  // 提供该服务能力的endpoint信息
  services: [ DidDocServicesInfo ](name='services', example=''),
}

// 蚂蚁链交易汇总信息
model BlockchainBrowserTransactionStatistic {
  // 蚂蚁链id
  bizid: string(name='bizid', example='27ce375122ef483691488395808e009e'),
  // 开始时间
  createTime: long(name='create_time', example='1604480401000'),
  // 时间点
  dateTime: string(name='date_time', example='2020-10-28'),
  // 统计时间内最新块高度
  lastSumBlockHeight: long(name='last_sum_block_height', example='6372915'),
  // 统计周期内交易的数量
  transCount: long(name='trans_count', example='2750038'),
}

// 阿里云区块链Rest信息
model ALiYunChainRest {
  // access_id
  accessId?: string(name='access_id', example='access_id'),
  // create_time
  createTime?: long(name='create_time', example='123123123'),
  // rest
  rest?: string(name='rest', example='rest'),
  // update_time
  updateTime?: long(name='update_time', example='123123123'),
  // REST开通结果
  result?: string(name='result', example='OK'),
}

// 通过controller注册用户
model VcControllerAddUserRegisterPayload {
  // 注册用户did
  did: string(name='did', example='did:mychain:xxxxx'),
  // 用户did对应的授权公钥
  publicKey: string(name='public_key', example='xxxxxx'),
  // 业务区块连的bizid
  vcChannel?: string(maxLength=32, minLength=8, name='vc_channel', example='xxx'),
}

// 账户信息
model AccountInfo {
  // 版通数量
  epAmount: long(name='ep_amount', example='1000'),
  // 版通代码
  epCode: string(name='ep_code', example='000111'),
}

// 阿里云区块链配置信息
model ALiYunChainConfigOption {
  // config_option
  configOption?: string(name='config_option', example='config_option'),
  // show_name
  showName?: string(name='show_name', example='show_name'),
  // enable
  enable?: boolean(name='enable', example='true, false'),
}

// 删除资源返回结果
model ALiYunDeleteResource {
  // data
  data?: boolean(name='data', example='data'),
  // success
  success?: boolean(name='success', example='true, false'),
}

// 交易详情
model TransactionInfo {
  // 交易时间戳
  timestamp: long(name='timestamp', example='timestamp'),
  // 交易hash
  hash: string(name='hash', example='hash'),
  // 交易块高
  height: long(name='height', example='1'),
  // 交易所在块高
  blockhash: string(name='blockhash', example='hash'),
  // 交易来源
  from: string(name='from', example='hash'),
  // 交易地址
  to: string(name='to', example='hash'),
  // 交易类型
  txtype: long(name='txtype', example='11'),
  // 转账额度
  value: long(name='value', example='1'),
  // logs
  logs: string(name='logs', example='logs'),
  // 燃料消耗
  gasused: long(name='gasused', example='11'),
  // result
  result: string(name='result', example='result'),
  // 拓展json字段
  json: string(name='json', example='json'),
}

// 阿里云区块链小程序权限控制信息
model ALiYunChainMiniAppAuthorization {
  // ant_chain_id
  antChainId?: string(name='ant_chain_id', example='ant_chain_id'),
  // q_r_code_type
  qRCodeType?: string(name='q_r_code_type', example='q_r_code_type'),
  // authorization_type
  authorizationType?: string(name='authorization_type', example='authorization_type'),
}

// 历史任务信息
model OldTaskInfo {
  // 任务标题(同一个租户不能重复)
  taskName: string(name='task_name', example='普通任务'),
  // appId
  appId: string(name='app_id', example='2021004121633301'),
  // 问卷ID
  surveyId: string(name='survey_id', example='ybl1112'),
  // 备注信息
  notes?: string(name='notes', example='普通任务备注'),
  // 租户ID
  tenantId: string(name='tenant_id', example='RIVUFSJG'),
  // 操作者
  operator: string(name='operator', example='eipzps@alitest.comtest'),
  // banner标题
  bannerTitle: string(name='banner_title', example='普通任务banner'),
  // banner图片地址（最多支持3张）
  bannerImageUrls?: string(name='banner_image_urls', example='testTenant_1.png,testTenant_1.png'),
  // banner 图片地址, 拼装后的url
  bannerImageFullUrls?: [ string ](name='banner_image_full_urls', example='["testTenant_1.png","testTenant_1.png"]'),
  // 题量
  questionNum: long(name='question_num', example='100'),
  // 任务连接地址
  taskLinkUrl: string(name='task_link_url', example='https://pro.wenjuan.com/t/a2'),
  // 人群划分描述
  personDivideContent?: string(name='person_divide_content', example='购买过健身服装的人群'),
  // 城市列表
  cityDivideUrls?: string(name='city_divide_urls', example='北京,上海,新加坡'),
  // 城市列表, 拼装后的url
  cityDivideFullUrls?: [ string ](name='city_divide_full_urls', example='["北京","上海","新加坡"]'),
  // 样本数量
  sampleNum: long(name='sample_num', example='20'),
  // 完成样本量
  completedNum: long(name='completed_num', example='1'),
  // 产品下单code类型（1-资源包 2-后付费）
  productCodeType: string(name='product_code_type', example='1'),
  // 产品余量
  productCapacity: long(name='product_capacity', example='20'),
  // 奖励渠道（0-手动发支付宝余额 1-海豚红包 2-问卷自带）
  prizeChannel: long(name='prize_channel', example='1'),
  // 支付宝账号
  alipayAccountId?: string(name='alipay_account_id', example='kefu@lingdangshuo.com'),
  // 奖励类型（0-定额红包）
  prizeType: long(name='prize_type', example='0'),
  // 全额红包金额，奖励渠道为0和1时
  fullRedPacketAmount: string(name='full_red_packet_amount', example='1.00'),
  // 全额红包描述，奖励渠道为2时，此处必填
  fullRedPacketTextInfo?: string(name='full_red_packet_text_info', example='1-5元红包'),
  // 甄别红包金额
  examineRedPacketAmount: string(name='examine_red_packet_amount', example='0.01'),
  // 关联的证书instanceId
  certInstanceId?: string(name='cert_instance_id', example='6511ce4b43414e9588114682bbf9a893'),
  // 证书实例详情
  certInstanceDetail?: CertInstanceDetail(name='cert_instance_detail', example=''),
  // 审核建议
  verifyComment?: string(name='verify_comment', example='拒绝'),
  // 任务创建时间
  gmtCreate: string(name='gmt_create', example='2023-12-20 12:19:00'),
  // 任务更新时间
  gmtModified: string(name='gmt_modified', example='2023-12-20 12:45:00'),
  // 审核理由
  reviewContent?: string(name='review_content', example='不合适'),
  // 人群配置信息
  crowdConfig?: string(name='crowd_config', example='{"exclude": false,"nodeConfig": {"groupType": "AND","children": ["exclude": false,"nodeType": "GROUP","nodeId": "1303661d-a7da-4d8a-b646-0819f2fc2855","nodeConfig": {"groupType": "AND","children": []}}]},"nodeId": "ROOT","nodeType": "GROUP"}'),
  // 任务ID
  taskId: string(name='task_id', example='qdQxqU5gz'),
  // 状态
  status: long(name='status', example='9'),
}

// 阿里云蚂蚁区块链相关下载结果
model ALiYunChainDownload {
  // private_key
  privateKey?: string(name='private_key', example='private_key'),
  // download_path
  downloadPath?: ALiYunDownloadPath(name='download_path', example='download_path'),
}

// 授权协议信息
model AgreementConfigInfoDTO {
  // 协议名称
  agreementName: string(name='agreement_name', example='testAgreementName'),
  // 协议链接
  agreementUrl: string(name='agreement_url', example='testAgreementUrl'),
  // 协议描述
  agreementDesc: string(name='agreement_desc', example='testAgreementDesc'),
  // 协议版本
  version?: long(name='version', example='1'),
}

// 阿里云链统计信息
model ALiYunChainStatics {
  // alias
  alias?: string(name='alias', example='alias'),
  // Dt
  dt?: long(name='dt', example='Dt'),
  // trans_count
  transCount?: long(name='trans_count', example='21323'),
  // last_sum_block_height
  lastSumBlockHeight?: long(name='last_sum_block_height', example='1231'),
  // creat_time
  creatTime?: long(name='creat_time', example='creat_time'),
}

// 阿里云蚂蚁区块链证书列表信息
model ALiYunCertificateApplications {
  // pagination
  pagination?: ALiYunPagination(name='pagination', example='pagination'),
  // certificate_application
  certificateApplications?: [ ALiYunCertificateApplication ](name='certificate_applications', example='certificate_application'),
}

// vc传输初始化结果
model VcTransmitInitResult {
  // 初始化成功与否
  isSuccess: boolean(name='is_success', example='true, false'),
  // 失败时返回的额外信息
  message: string(name='message', example='附属消息'),
  // 接受者did
  targetVerifier: string(name='target_verifier', example='did:mychain:xxxx'),
  // 待签名的交易hash
  needSignatureTxHash: string(name='need_signature_tx_hash', example='123123'),
}

// 具体实体的身份信息
model EntityInfo {
  // 0，身份证；1，电话；2，email，3，企业营业执照号
  type: long(name='type', example=''),
  // 具体号码
  value: string(name='value', example='18701507222'),
}

// 链节点信息
model NodeInfo {
  // 链的区块高度
  blockheight?: long(name='blockheight', example='10000'),
  // 节点名称
  nodename?: string(name='nodename', example='名字'),
  // 节点健康状况
  status?: boolean(name='status', example='true'),
  // 节点版本
  version?: string(name='version', example='0.10'),
}

// Did服务类型描述结构体
model DidServiceType {
  // 枚举类型，描述访问服务的方式
  accessMode?: string(name='access_mode', example='http,https,openapi,ftp,other...'),
  // 对服务的文字描述，<1000个字符
  description?: string(maxLength=1000, name='description', example='对服务描述'),
  // 服务类型创建者did
  did: string(name='did', example='did:mychain:xxxx'),
  // { "item1":"", "item2":"",...
  serviceInput?: string(name='service_input', example='json描述服务入参'),
  // 返回值类型描述，json形式
  serviceOutput?: string(name='service_output', example='{ "item1":"" "item2":"" ... }'),
  // 自定义服务类型，字符数16～32个
  serviceType: string(name='service_type', example='KYBServiceType'),
}

// 应用请求
model ApplicationQueryReq {
  // 应用程序ID
  applicationId: string(maxLength=64, minLength=1, name='application_id', example='app20230725115808679d4f'),
}

// 合约信息
model ContractInfo {
  // 合约地址
  contract?: string(name='contract', example='ac01ceb0d8df822e042e5ea3b677201655250dbf54b9bd0c364de6f3f2a1dc7e'),
  // 部署hash
  hash?: string(name='hash', example='1c625b49992ed3b55abaac677f964a35c4151d4112da8204ac874b6497bf1143'),
  // 合约部署时间
  timestamp?: long(name='timestamp', example='1573401600000'),
}

// 创建VC参数
model AddVC {
  // vc原文hash
  contentHash: string(name='content_hash', example='1232'),
  // issuer后缀的hash值
  issuerHash: string(name='issuer_hash', example='12345667'),
  // valid or invalid
  status: string(name='status', example='valid'),
  // 接收者后缀hash值
  subjectHash: string(name='subject_hash', example='1234567'),
  // 可验证声明id
  vcId: string(name='vc_id', example='vc:mychain:xxxxxx'),
}

// 带单位的值
model ValueUnitPair {
  // 数值
  value: long(name='value', example=''),
  // 单位
  unit: string(name='unit', example='d'),
}

// 阿里云区块链小程序交易二维码生成
model ALiYunChainMiniAppCodeCreate {
  // ant_chain_id
  antChainId?: string(name='ant_chain_id', example='ant_chain_id'),
  // transaction_hash
  transactionHash?: string(name='transaction_hash', example='transaction_hash'),
  // base64_q_r_code_p_n_g
  base64QRCodePNG?: string(name='base64_q_r_code_p_n_g', example='base64_q_r_code_p_n_g'),
  // q_r_code_content
  qRCodeContent?: string(name='q_r_code_content', example='q_r_code_content'),
}

// 描述分布的结构，目前主要包含date和value值
model Curve {
  // 分布以day为单位的日期
  date: string(name='date', example='2021-03-19'),
  // 以day为单位的一天凭证颁发的数据量统计。
  value: string(name='value', example='1001'),
}

// 存证元数据
model NotaryMetaParam {
  // 描述本条存证在存证事务中的阶段，用户可自行维护
  phase: string(name='phase', example='合同内容'),
  // 扩展字段
  properties?: string(name='properties', example='{"key":"value"}'),
  // 全局唯一的存证事务ID
  token: string(name='token', example='877c4383-9c83-477b-b7ec-03828a946e54'),
}

// 用于内部业务统计的信息，外部商户请忽略
model BizInfo {
  // BPWZPFCN
  clientTenent?: string(name='client_tenent', example='用户的金融科技租户id'),
  // 业务代码
  code?: string(name='code', example='BAAS_ANTFIN|BAAS_ALICLOUD|MORSE|RECEIVABLE|TRACE|GLOBAL_PAYMENT|JUDICIAL|INVOICE'),
}

// 数字资产管理平台版通交易信息
model EPTradeInfo {
  // 版通代码
  epCode: string(name='ep_code', example='000111'),
  // 版通交易号
  txCode: string(name='tx_code', example='123123'),
  // 卖方账户
  txFrom: string(name='tx_from', example='testAccount'),
  // 交易时间戳
  txTime: long(name='tx_time', example='1560827725'),
  // 买方账户
  txTo: string(name='tx_to', example='testAccount'),
  // 交易数量
  txValue: long(name='tx_value', example='1000'),
}

// 可信存证身份识别信息
model Identity {
  // 经办人姓名，企业认证必选
  agent?: string(name='agent', example='小明'),
  // 经办人身份证
  agentId?: string(name='agent_id', example='123123123123'),
  // 用户名称
  certName: string(name='cert_name', example='小王'),
  // 证件号
  certNo: string(name='cert_no', example='12332112312312'),
  // 证件类型，个人只支持身份证IDENTITY_CARD，企业支持UNIFIED_SOCIAL_CREDIT_CODE（统一社会信用代码）和ENTERPRISE_REGISTERED_NUMBER（企业工商注册号
  certType: string(name='cert_type', example='IDENTITY_CARD'),
  // 法人姓名，企业认证必选
  legalPerson?: string(name='legal_person', example='小李'),
  // 法人身份证,  企业认证必选
  legalPersonId?: string(name='legal_person_id', example='123123321123'),
  // 用户手机号码
  mobileNo?: string(name='mobile_no', example='1231231231'),
  // 扩展属性
  properties?: string(name='properties', example='{"key":"value"}'),
  // 用户类型，PERSON或者ENTERPRISE
  userType: string(name='user_type', example='PERSON'),
}

// 营销分销平台推广人账户信息
model FundInfo {
  // 可提现余额
  balance: string(name='balance', example='10.8'),
  // 待结算额度
  settleQuota: string(name='settle_quota', example='11.4'),
  // 商户id
  shopId: string(name='shop_id', example='tset id'),
}

// VC Repo用户注册结构体
model VcUserRegisterPayload {
  // 用户did对应的授权公钥
  publicKey?: string(name='public_key', example='用户did对应的授权公钥'),
  // 业务区块连的bizid
  vcChannel?: string(maxLength=32, minLength=8, name='vc_channel', example='业务区块连的bizid'),
}

// 阿里云请求结果
model ALiYunHandleBabelMns {
  // message
  message?: string(name='message', example='message'),
  // request_id
  requestId?: string(name='request_id', example='request_id'),
  // success
  success?: boolean(name='success', example='true, false'),
}

// 溯源信息中的一项记录。
model Item {
  // 溯源项的具体内容
  desc: string(name='desc', example='枭洒保税所有海关可用严禁修改'),
  // 扩展信息 ，json格式
  extInfo: string(name='ext_info', example='"{"isUrl",true,"usrid":"123231"}"'),
  // 溯源项的键值
  key: string(name='key', example='itemName'),
  // 溯源项的中文标题 
  title: string(name='title', example='品名'),
  // 内容类型 
  type: string(name='type', example='text, image, region, link, longtext'),
}

// C3S可信计算服务TAPP应用信息
model TappInfo {
  // C3S可信计算TAPP应用标识
  taapId: string(name='taap_id', example='fafafafaf'),
  // C3S可信计算TAPP版本
  tappVersion: long(name='tapp_version', example='1'),
}

// BaaS平台联盟信息
model BaasUnionInfo {
  // 联盟名称
  unionName: string(name='union_name', example='name'),
  // 描述
  unionDescription: string(name='union_description', example='描述'),
  // 联系人
  unionUser: string(name='union_user', example='联系人'),
  // 联盟联系人手机号码
  unionUserCell: string(name='union_user_cell', example='联盟联系人手机号码'),
  // 联盟联系人邮箱
  unionUserMail: string(name='union_user_mail', example='联盟联系人邮箱'),
}

// blockchain交易结构体
model TransactionPo {
  // 交易所在块hash
  blockHash?: string(name='block_hash', example='b0c13c3bdeb4b3e0892ab2d2ddd28f9972abba66a3fae0799507dec6fcfa7ba0'),
  // 交易来源
  from?: string(name='from', example='b0c13c3bdeb4b3e0892ab2d2ddd28f9972abba66a3fae0799507dec6fcfa7ba0'),
  // gas消耗
  gasUsed?: long(name='gas_used', example='1111'),
  // 交易hash
  hash?: string(name='hash', example='ce386c5510df2e358056893b86ba77178fcf00d90de9c56bd788fd1968c9b58d'),
  // 交易所在块 块高
  height?: long(name='height', example='1000'),
  // 交易返回结果
  result?: string(name='result', example='0'),
  // 交易时间
  timestamp?: long(name='timestamp', example='1573401600000'),
  // 交易地址
  to?: string(name='to', example='4a5e107d0ea041f25ca7bfb58503e6549913e67e5d07aadfe359418440359fec'),
  // 交易类型 同SDK
  txType?: long(name='tx_type', example='11'),
  // 转账额度
  value?: long(name='value', example='1111'),
}

// VC链上传输结果
model VcTransmitResult {
  // 成功或者失败
  isSuccess: boolean(name='is_success', example='true, false'),
  // 失败信息
  message?: string(name='message', example='失败信息'),
  // 验证verifier did
  targetVerifier: string(name='target_verifier', example='did:mychian:xxxxx'),
  // 交易hash
  txHash?: string(name='tx_hash', example='xxxxx'),
}

// 可信时间信息结构
model TsrResponse {
  // hash后的信息
  hashedMessage: string(name='hashed_message', example='AAAAA '),
  // 哈希算法
  hashAlgorithm: string(name='hash_algorithm', example='321'),
  // 时间
  ts: string(name='ts', example='123'),
}

// 阿里云数据导出服务TriggerDTO结构体
model TriggerDTOStructBody {
  // 名称
  name?: string(name='name', example='9481b612d6ca4cfdbecc5c5d395eda4237c749fa-97fc-4156-9c23-e21cd6060669'),
  // 类型
  type?: string(name='type', example='"BLOCK"'),
  // 源
  source?: string(name='source', example='“”'),
  // 创建时间
  createTime?: string(name='create_time', example='103422'),
  // 错误信息
  errorMessage?: string(name='error_message', example='"error"'),
  // 状态
  status?: string(name='status', example='“success”'),
  // option（map结构，由于金融云无map接口所以通过string类型传输json格式）
  option?: string(name='option', example='{a:"123",  b:"123"}'),
  // checkpoint类
  checkpoint?: CheckPointStructBody(name='checkpoint', example='{}'),
  // 待处理的错误事件总数
  pendingErrorLogs?: string(name='pending_error_logs', example='待处理的错误事件总数'),
}

// 人群配置
model CrowdNodeDTO {
  // 节点id
  nodeId: string(name='node_id', example='c1bff3fe-f1fb-42a2-8fc7-9cbb1a011713'),
  // 节点类型
  nodeType: CrowdNodeTypeEnum(name='node_type', example='GROUP'),
  // 是否排除
  exclude: boolean(name='exclude', example='true, false'),
  // 节点配置
  nodeConfig: string(name='node_config', example='"nodeConfig": {   "tagCode": "P0010GC6",   "valueList": [     {       "selectedValues": [         "18",         "30"       ],       "operator": "BT"     }   ],   "tagType": "BASE" }'),
}

// 可信存证存证地点信息
model Location {
  // 所在城市
  city?: string(name='city', example='杭州'),
  // 操作IMEI
  imei?: string(name='imei', example='359426002899056'),
  // 操作IMSI
  imsi?: string(name='imsi', example='460001357924680'),
  // 操作IP地址
  ip?: string(name='ip', example='0.0.0.0'),
  // 纬度
  latitude?: string(name='latitude', example='66.33'),
  // 经度
  longitude?: string(name='longitude', example='23.26'),
  // 扩展属性
  propertities?: string(name='propertities', example='{"key":"value"}'),
  // 操作Wi-Fi物理地址
  wifiMac?: string(name='wifi_mac', example='00-01-6C-06-A6-29'),
}

// 营销分销推广人账户流水信息
model CapitalInfo {
  // 记录流水额度
  balanceLog: string(name='balance_log', example='15.9'),
  // 商户id
  shopId: string(name='shop_id', example='testid'),
  // 记录时间
  timeLog: long(name='time_log', example='12.2'),
  // 链上地址
  txHash: string(name='tx_hash', example='123'),
}

// 阿里云区块链小程序日志查询
model ALiYunChainMiniAppLog {
  // access_count
  accessCount?: long(name='access_count', example='100'),
  // access_alipay_account_count
  accessAlipayAccountCount?: long(name='access_alipay_account_count', example='1000'),
}

// 订单结果
model OrderResult {
  // 事例id
  instanceId: string(name='instance_id', example='事例id'),
  // 是否成功
  success: boolean(name='success', example='true, false'),
}

// 蚂蚁链节点信息
model BlockchainBrowserNodeOwner {
  // node_id
  nodeId: string(name='node_id', example='node_id'),
  // node_ip
  nodeIp: string(name='node_ip', example='node_ip'),
  // node_name
  nodeName: string(name='node_name', example='node_name'),
  // node_owner
  nodeOwner: string(name='node_owner', example='node_owner'),
  // node_port
  nodePort: string(name='node_port', example='node_port'),
  // node_source
  nodeSource: string(name='node_source', example='node_source'),
  // node_state
  nodeState: string(name='node_state', example='node_state'),
  // node_type
  nodeType: string(name='node_type', example='node_type'),
  // 节点已使用的存储空间
  nodeDiskUsed: string(name='node_disk_used', example='50'),
  // 节点的总存储空间
  nodeDiskTotal: string(name='node_disk_total', example='1024'),
}

// 阿里云蚂蚁区块链账户创建信息
model ALiYunChainAccount {
  // account_private_key
  accountPrivateKey?: string(name='account_private_key', example='account_private_key'),
  // account_public_key
  accountPublicKey?: string(name='account_public_key', example='account_public_key'),
  // account_recover_private_key
  accountRecoverPrivateKey?: string(name='account_recover_private_key', example='account_recover_private_key'),
  // account_recover_public_key
  accountRecoverPublicKey?: string(name='account_recover_public_key', example='account_recover_public_key'),
  // ant_chain_id
  antChainId?: string(name='ant_chain_id', example='ant_chain_id'),
  // account
  account?: string(name='account', example='account'),
}

// 更新DID服务列表
model UpdateDidServiceList {
  // 待更新did之前的版本号
  previousVersion: long(name='previous_version', example=''),
  // 服务信息列表
  serviceList: [ DisServicesInfo ](name='service_list', example=''),
}

// 营销分销商品信息
model ItemDto {
  // 商品id
  productId: string(name='product_id', example='test id'),
  // 商户id
  shopId: string(name='shop_id', example='test id'),
  // 链上地址
  txHash: string(name='tx_hash', example='123'),
}

// 蚂蚁链最新区块列表信息
model BlockchainBrowserLatestBlock {
  // bizid
  bizid: string(name='bizid', example='bizid'),
  // block_hash
  blockHash: string(name='block_hash', example='block_hash'),
  // create_time
  createTime: long(name='create_time', example='1604564398000'),
  // height
  height: long(name='height', example='6812497'),
  // previous_hash
  previousHash: string(name='previous_hash', example='f6d51d362abc1b31e42dbd88d5ce0660cb96b8d0c0a4293cd29ffa042f61c784'),
  // root_tx_hash
  rootTxHash: string(name='root_tx_hash', example='da9a42027ab141c8396b7fc78d74c94264da71f6361ac468385bed3fbc5408b4'),
  // size
  size: long(name='size', example='1024'),
  // transaction_size
  transactionSize: long(name='transaction_size', example='1'),
  // version
  version: long(name='version', example='258'),
}

// VC传输确认
model VcTransmitCnf {
  // 针对tx_hash的签名
  signature: string(name='signature', example='123123123'),
  // 交易hash
  txHash: string(name='tx_hash', example='1232123'),
  // vc传输目标did
  verifierId: string(name='verifier_id', example='验证者id'),
}

// 阿里云区块链小程序用户权限查询
model ALiYunChainMiniAppUserPrivilege {
  // ant_chain_id
  antChainId?: string(name='ant_chain_id', example='ant_chain_id'),
  // q_r_code_type
  qRCodeType?: string(name='q_r_code_type', example='q_r_code_type'),
  // authorization_type
  authorizationType?: string(name='authorization_type', example='authorization_type'),
  // pagination
  pagination?: ALiYunPagination(name='pagination', example='pagination'),
  // ALiYunChainMiniAppAuthorizedUser
  authorizedUserList?: [ ALiYunChainMiniAppAuthorizedUser ](name='authorized_user_list', example='ALiYunChainMiniAppAuthorizedUser'),
}

// 授权服务流程信息
model ProcessInfo {
  // 当前处理节点
  currentNode: long(minimum=0, name='current_node', example='1'),
  // 扩展信息
  extensionInfo?: string(name='extension_info', example='68f955a58591e80b94e6ed755722abab4d665936a59bbe6482dd0be9aad21d9a'),
  // 节点列表
  nodes: [ NodeDetail ](name='nodes', example=''),
  // 流程ID
  processId: string(name='process_id', example='68f955a58591e80b94e6ed755722abab4d665936a59bbe6482dd0be9aad21d9a'),
  // 流程状态
  processStatus: string(name='process_status', example='processing'),
  // 流程节点总数
  totalCount: long(minimum=0, name='total_count', example='1'),
  // 数据对象ID
  dataId: string(name='data_id', example='did:test:0000:3fc223617da9a17a4d7792ef0c3f57bd176eca8408f2f4cb1df42939220829d2'),
}

// 阿里云区块链售卖资源信息
model ALiYunChainResouceForSale {
  // region_id
  regionId?: string(name='region_id', example='region_id'),
  // type_list
  typeList?: [ string ](name='type_list', example='type_list'),
}

// 数字资产管理平台账户映射结构
model ExchangeAccountMap {
  // 用户联系方式
  phone: string(name='phone', example='13473121212'),
  // 用户账户
  userAccount: string(name='user_account', example='testAccount'),
  // 用户名称
  userName: string(name='user_name', example='小明'),
}

// 阿里云区块链创建信息
model ALiYunChainExecuteOrder {
  // user_request_id
  userRequestId?: string(name='user_request_id', example='user_request_id'),
  // data
  data?: string(name='data', example='data'),
  // success
  success?: boolean(name='success', example='true, false'),
  // code
  code?: string(name='code', example='code'),
  // message
  message?: string(name='message', example='message'),
  // synchro
  synchro?: boolean(name='synchro', example='true, false'),
}

// 账户映射的具体信息
model AccountMap {
  // 要映射的链对应的唯一id
  bizid: string(name='bizid', example='12345'),
  // 0: 身份证；1：手机；2: 电子邮箱；3: 企业营业执照号
  entityInfoType?: long(name='entity_info_type', example='0'),
  // 对应entity_info_type的具体值
  // 
  entityInfoValue?: string(name='entity_info_value', example='18701207322'),
  // 账户对应实体的全名
  fullName?: string(name='full_name', example='huihui.liu'),
  // 该账户在指定链上的状态1，激活，2，冻结，新建账户只能为1
  status: long(name='status', example=''),
  // 希望映射后在链上的账户名
  targetName?: string(name='target_name', example='huihui_online'),
  // 该账户对应实体的类型：0， 个人； 1， 企业
  type?: long(name='type', example='1'),
  // 自有系统中该账户的唯一标示
  uid: string(name='uid', example='huihui'),
}

// 任务列表分页结构体
model PageTaskListDTO {
  // 任务列表集合
  content: [ TaskListInfoDTO ](name='content', example=''),
  // 总记录条目
  totalElements: long(name='total_elements', example='6'),
  // 记录总页数
  totalPages: long(name='total_pages', example='20'),
  // 页码
  number: long(name='number', example='0'),
  // 每页记录条目
  size: long(name='size', example='6'),
  // 每页元素个数
  numberOfElements: long(name='number_of_elements', example=''),
}

// 服务端签名oss的url然后client直传文件到oss，此结构包含了服务端签名后的数据。
model PresignedUrlPolicy {
  // oss访问的临时access id
  accessId: string(name='access_id', example='LTAIR4HVnajwxdUK'),
  // 一个需要回调通知服务端的方法名，非必填
  callback?: string(name='callback', example='callBackFunction'),
  // oss上的文件存放路径
  dir: string(name='dir', example='contract/abi/lP9v5bJsvY1566977941329'),
  // url超期的时间戳说明
  expire: string(name='expire', example='1566977971'),
  // oss的地址
  host: string(name='host', example='https://baas-XXX.oss-cn-shanghai.aliyuncs.com'),
  // 被base64编码的policy内容
  policy: string(name='policy', example='eyJleHBpcmF0aW9uIjoiMjAxOS0wOC0yOFQwNzozOTozMS4zMjlaIiwiY29uZGl0aW9ucyI6W1siY29udGVudC1sZW5ndGgtcmFuZ2UiLDAsMTA0ODU3NjBdLFsic3RhcnRzLXdpdGgiLCIka2V5IiwiY29udHJhY3QvYWJpL2xQOXY1YkpzdlkxNTY2OTc3OTQxMzI5Il1dfQ=='),
  // 签名结果
  signature: string(name='signature', example='sQEa/Q8F/e5jqDWPvTVYtZ5Ysbw='),
}

// 更新did auth paylod结构体
model UpdateDidAuthPayload {
  // 新公钥的实际控制者
  controller: string(name='controller', example='did:mychain:xxxx'),
  // 旧Auth Key的过期时间
  previousAuthKeyExpire: string(name='previous_auth_key_expire', example='1567890'),
  // 更新Did doc的版本
  previousVersion: long(name='previous_version', example='1'),
  // 新DID Auth key的public key id
  publicKeyId: string(name='public_key_id', example='key#3'),
  // 密钥对生成算法
  publicKeyType: string(name='public_key_type', example='RsaVerificationKey2018'),
  // 公钥的实际值
  value: string(name='value', example='xxxxxx'),
}

// did详情
model DidDetail {
  // 控制者的did描述符
  controller: string(name='controller', example='did:mychain:xxxx'),
  // did描述符
  did: string(name='did', example='did:mychain:xxxxx'),
  // did doc
  didDoc: string(name='did_doc', example='json字段'),
}

// 蚂蚁链浏览器区块信息
model BlockchainBrowserBlock {
  // bizid
  bizid: string(name='bizid', example='27ce375122ef483691488395808e009e'),
  // blockchain_name
  blockchainName: string(name='blockchain_name', example='BAASQATEST'),
  // blockchain_status
  blockchainStatus: boolean(name='blockchain_status', example='true'),
  // block_hash
  blockHash: string(name='block_hash', example='4a6306e001a484c5c1d198668008b4876b991c5369a18a8431e9e7b37b021694'),
  // create_time
  createTime: long(name='create_time', example='1604565300002'),
  // hash_status
  hashStatus: boolean(name='hash_status', example='true, false'),
  // height
  height: long(name='height', example='6814087'),
  // previous_hash
  previousHash: string(name='previous_hash', example='e70b3768125ac3543ba0c823fa56500eb4516c165cb7fd1489961fac961ee5f1'),
  // root_tx_hash
  rootTxHash: string(name='root_tx_hash', example='711f000e6604bf49bc4434b8ecd57ac98c0519e817d8f75bf6eef3caea7a0d79'),
  // transaction_list
  transactionList: [ BlockchainBrowserTransaction ](name='transaction_list', example='transaction_list'),
  // transaction_size
  transactionSize: long(name='transaction_size', example='11'),
}

// 任务人群配置
model TaskCrowdNodeDTO {
  // 节点ID
  nodeId: string(name='node_id', example='c1bff3fe-f1fb-42a2-8fc7-9cbb1a011713'),
  // 节点类型
  nodeType: string(name='node_type', example='GROUP、AND'),
  // 是否排除
  exclude: boolean(name='exclude', example='true, false'),
  // 节点配置
  nodeConfig: string(name='node_config', example='"nodeConfig": { "tagCode": "P0010GC6", "valueList": [ { "selectedValues": [ "18", "30" ], "operator": "BT" } ], "tagType": "BASE" }'),
}

// 人群匹配结果
model MatchResult {
  // 是否匹配
  match: boolean(name='match', example='true, false'),
}

// 阿里云蚂蚁区块链信息
model ALiYunChain {
  // notary_blockchain
  notaryBlockchain?: ALiYunNotaryBlockchain(name='notary_blockchain', example='notary_blockchain'),
  // contract_blockchain
  contractBlockchain?: ALiYunContractBlockchain(name='contract_blockchain', example='contract_blockchain'),
  // old_contract_blockchain
  oldContractBlockchain?: ALiYunOldContractBlockchain(name='old_contract_blockchain', example='old_contract_blockchain'),
}

// 营销分销平台返佣信息
model RakeBackInfo {
  // 推广层级
  level: long(name='level', example='1'),
  // 上级推广订单id
  parentId: string(name='parent_id', example='test id'),
  // 推广人id
  promoterId: string(name='promoter_id', example='test id'),
  // 返佣额度
  quota: string(name='quota', example='10.5'),
  // 返佣比例 10表示10%
  rate: string(name='rate', example='10'),
}

// 阿里云区块链小程序交易查询信息
model ALiYunChainMiniAppTransaction {
  // authorized
  authorized?: boolean(name='authorized', example='true,false'),
  // transaction_response
  transactionResponse?: string(name='transaction_response', example='transaction_response'),
  // transaction_receipt
  transactionReceipt?: string(name='transaction_receipt', example='transaction_receipt'),
}

// 阿里云托管账户信息
model ALiYunChainKmsAccount {
  // 账户公钥
  pubKey?: string(name='pub_key', example='1234567890'),
  // 托管秘钥ID
  myKmsKeyId?: string(name='my_kms_key_id', example='1234567890'),
}

// 物流金融平台用户信息
model LogisticFinUser {
  // 纳税人识别号
  draweeTaxNo: string(name='drawee_tax_no', example='789'),
  // 业务方企业id
  orgId: string(name='org_id', example='123'),
  // 业务方用户id
  userId: string(name='user_id', example='456'),
}

// 合约查询
model ContractQueryDetailReq {
  // 服务ID
  serviceId: string(maxLength=64, minLength=1, name='service_id', example='cme20230724104931af3a4d'),
}

// 智能合约市场列表查询
model ContractTemplateQueryReq {
  // 页码
  num: long(name='num', example='1'),
  // 页大小
  size: long(name='size', example='200'),
}

// 分销会员用户信息
model DistributionUser {
  // 用户创建时间
  createTime: string(name='create_time', example='2018-01-02 20:00:00'),
  // 用户手机号
  mobile: string(name='mobile', example='13000005555'),
  // 用户唯一标识
  userId: string(name='user_id', example='000:111:222:333'),
}

// 智能合约市场列表
model ContractTemplateListResp {
  // 合约市场列表
  list?: [ ContractTemplateResp ](name='list', example=''),
  // 总数
  total?: long(name='total', example='200'),
}

// 授权流程操作结果
model ProcessResult {
  // 申请权限的扩展参数
  extension?: string(name='extension', example='test'),
  // 申请权限原因
  message?: string(name='message', example='test'),
  // 下一个处理节点ID
  next?: string(name='next', example='did:test:0000:3fc223617da9a17a4d7792ef0c3f57bd176eca8408f2f4cb1df42939220829d2'),
  // 流程ID
  processId: string(name='process_id', example='68f955a58591e80b94e6ed755722abab4d665936a59bbe6482dd0be9aad21d9a'),
  // 流程状态
  status: string(name='status', example='processing'),
  // 数据对象ID
  dataId: string(name='data_id', example='did:test:0000:3fc223617da9a17a4d7792ef0c3f57bd176eca8408f2f4cb1df42939220829d2'),
  // 交易HASH
  txHash?: string(name='tx_hash', example='AQEETAAAAEEAAAAETbYFwqfIiyqFWt2Tasr2f4'),
  // 区块高度
  blockNumber?: long(name='block_number', example='1256'),
  // 授权凭证
  authorityCert?: string(name='authority_cert', example='JSON格式'),
}

// 数据授权服务用户公钥结构体
model PublicKey {
  // 公钥颁发者ID
  issuerId: string(maxLength=100, name='issuer_id', example='did:test:0000:3fc223617da9a17a4d7792ef0c3f57bd176eca8408f2f4cb1df42939220829d2'),
  // 公钥内容
  publicKeyContent: string(name='public_key_content', example='AQEETAAAAEEAAAAETbYFwqfIiyqFWt2Tasr2f4+wjKcEXsFupLxM6WZohB702fTTsuw88bp7LKBskdWhDiZvpeIShOzZopg95psaFw=='),
  // 公钥接受者ID
  recipientId: string(maxLength=100, name='recipient_id', example='did:test:0000:3fc223617da9a17a4d7792ef0c3f57bd176eca8408f2f4cb1df42939220829d2'),
}

// 合约部署记录
model ContractRecord {
  // abi对应oss key
  abiOssKey: string(name='abi_oss_key', example='abi-oss-key'),
  // abi oss 地址
  abiOssUrl?: string(name='abi_oss_url', example='abi-oss-url'),
  // 区块链唯一标识
  bizid: string(name='bizid', example='0001bcde'),
  // 区块链名称
  blockchainName: string(name='blockchain_name', example='合约体验链'),
  // bytecode对应oss key
  bytecodeOssKey: string(name='bytecode_oss_key', example='bytecode-oss-key'),
  // bytecode oss 地址
  bytecodeOssUrl?: string(name='bytecode_oss_url', example='bytecode-oss-url'),
  // 16进制表示的合约identity
  identity: string(name='identity', example='e7d3e769f3f593dadcb8634cc5b09fc90dd3a61c4a06a79cb0923662fe6fae6b'),
  // 合约代码中定义的合约实例名，比如solidity的contract 关键字后面的命名
  instanceName: string(name='instance_name', example='instance-name'),
  // 合约名称
  name: string(name='name', example='contract-name'),
  // 发布状态，1未发布，3已发布
  publish: long(name='publish', example='3'),
  // 交易hash
  txHash: string(name='tx_hash', example='e93372533f323b2f12783aa3a586135cf421486439c2cdcde47411b78f9839ec'),
  // solidity|cpp|go
  type: string(name='type', example='solidity'),
}

// 蚂蚁链浏览器交易收据信息
model BlockchainBrowserTransactionReceipt {
  // data
  data: string(name='data', example='data'),
  // gas_used
  gasUsed: long(name='gas_used', example='0'),
  // logs
  logs: [ string ](name='logs', example='awdawd'),
  // result
  result: long(name='result', example='0'),
}

// 数字资产管理平台批发结构
model AccountWholesaleParam {
  // 批发数量
  epAmount: long(name='ep_amount', example='1000'),
  // 用户账户
  userAccount: string(name='user_account', example='testAccount'),
}

// 更新后的任务信息
model UpdatedTaskInfo {
  // 任务标题(同一个租户不能重复)
  taskName: string(name='task_name', example='普通任务修改'),
  // appId
  appId: string(name='app_id', example='2021004121633301'),
  // 问卷ID
  surveyId: string(name='survey_id', example='ybl1112'),
  // 任务ID
  taskId: string(name='task_id', example='qdQxqU5gz'),
  // 备注信息
  notes?: string(name='notes', example='普通任务修改测试'),
  // 租户ID
  tenantId: string(name='tenant_id', example='RIVUFSJG'),
  // 操作者ID
  operator: string(name='operator', example='eipzps@alitest.comtest'),
  // banner标题
  bannerTitle: string(name='banner_title', example='普通任务banner'),
  // banner图片地址（最多支持3张）
  bannerImageUrls?: string(name='banner_image_urls', example='testTenant_1.png,testTenant_1.png'),
  // banner 图片地址, 拼装后的url
  bannerImageFullUrls?: [ string ](name='banner_image_full_urls', example='["testTenant_1.png","testTenant_1.png"]'),
  // 题量
  questionNum: long(name='question_num', example='10'),
  // 任务连接地址
  taskLinkUrl: string(name='task_link_url', example='https://pro.wenjuan.com/t/a1'),
  // 人群划分描述
  personDivideContent?: string(name='person_divide_content', example='购买过健身服装的人群'),
  // 城市列表
  cityDivideUrls?: string(name='city_divide_urls', example='新加坡,纽约,tokey'),
  // 城市列表, 拼装后的url
  cityDivideFullUrls?: [ string ](name='city_divide_full_urls', example='[_新加坡_,"纽约","tokey"]'),
  // 样本数量
  sampleNum: long(name='sample_num', example='100'),
  // 完成样本量
  completedNum: long(name='completed_num', example='2'),
  // 产品下单code类型（1-资源包 2-后付费）
  productCodeType: string(name='product_code_type', example='1'),
  // 产品余量
  productCapacity: long(name='product_capacity', example='13'),
  // 奖励渠道（0-手动发支付宝余额 1-海豚红包 2-问卷自带）
  prizeChannel: long(name='prize_channel', example='1'),
  // 支付宝账号
  alipayAccountId?: string(name='alipay_account_id', example='kefu@lingdangshuo.com'),
  // 奖励类型（0-定额红包）
  prizeType: long(name='prize_type', example='0'),
  // 全额红包金额，奖励渠道为0和1时
  fullRedPacketAmount: string(name='full_red_packet_amount', example='1.00'),
  // 全额红包描述，奖励渠道为2时，此处必填
  fullRedPacketTextInfo?: string(name='full_red_packet_text_info', example='1-6元红包'),
  // 甄别红包金额
  examineRedPacketAmount: string(name='examine_red_packet_amount', example='0.01'),
  // 关联的证书instanceId
  certInstanceId?: string(name='cert_instance_id', example='6511ce4b43414e9588114682bbf9a893'),
  // 证书实例详情
  certInstanceDetail: CertInstanceDetail(name='cert_instance_detail', example=''),
  // 审核意见
  verifyOmment?: string(name='verify_omment', example='拒绝'),
  // 任务创建时间
  gmtCreate: string(name='gmt_create', example='2023-12-20 12:19:00'),
  // 任务修改时间
  gmtModified: string(name='gmt_modified', example='2023-12-20 12:45:00'),
  // 审核理由
  reviewContent?: string(name='review_content', example='不合适'),
  // 状态
  status: long(name='status', example='9'),
  // 人群配置
  crowdConfig: string(name='crowd_config', example='{"exclude": false,"nodeConfig": {"groupType": "AND","children": ["exclude": false,"nodeType": "GROUP","nodeId": "1303661d-a7da-4d8a-b646-0819f2fc2855","nodeConfig": {"groupType": "AND","children": []}}]},"nodeId": "ROOT","nodeType": "GROUP"}'),
}

// 阿里云交易查询结果
model ALiYunTransactionResult {
  // block_hash
  blockHash?: string(name='block_hash', example='block_hash'),
  // block_height
  blockHeight?: long(name='block_height', example='123131'),
  // block_version
  blockVersion?: string(name='block_version', example='block_version'),
  // create_time
  createTime?: long(name='create_time', example='213213'),
  // hash
  hash?: string(name='hash', example='hash'),
  // Transaction
  transaction?: ALiYunTransaction(name='transaction', example='Transaction'),
}

// waas公钥信息
model PublicKeyInfo {
  // 公钥id
  keyId: string(name='key_id', example='key-1'),
  // 公钥内容
  publicKey: string(name='public_key', example='7ceb38181822437c82909506a87aa456'),
  // 算法类型
  signType: string(name='sign_type', example='Secp256k1VerificationKey2018'),
  // 过期时间戳（毫秒）
  expire?: long(name='expire', example='18600000000'),
  // 公钥状态，0:不可用 1:可用
  status: long(name='status', example='1'),
  // 创建者的did
  controller?: string(name='controller', example='did:xxxx:xxxxxxxx'),
}

// 更新VC状态数据结构
model UpdateVCStatus {
  // valid or invalid
  status: string(name='status', example='valid'),
  // 可验证声明id
  vcId: string(name='vc_id', example='vc:mychain:xxxx'),
}

// 关联应用
model ContractBindAppReq {
  // 应用ID
  applicationId: string(maxLength=64, minLength=1, name='application_id', example='app20230725115808679d4f'),
  // 合约服务标识集合
  serviceIds?: [ string ](name='service_ids', example=''),
}

// 用户数据
model OCUserData {
  // 创建时间
  createTime: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='create_time', example='2018-10-10 10:10:00'),
  // 手机号
  phoneNumber: string(name='phone_number', example='186xxxxx'),
  // 用户姓名
  userName: string(name='user_name', example='xxxxxxx'),
}

// 用户身份信息
model UserMetaInfo {
  // 用户身份信息类型
  type: string(name='type', example='TwoMeta'),
  // 用户身份信息
  data: [ KeyValuePair ](name='data', example=''),
}

// 阿里云子链列表信息
model ALiYunChainSubnetList {
  // ant_chain_id
  antChainId?: string(name='ant_chain_id', example='S210304150059'),
  // 子链名称
  blockchainName?: string(name='blockchain_name', example='子链名称'),
  // 联盟管理员
  consortiumAdmin?: boolean(name='consortium_admin', example='true, false'),
  // 子链列表信息
  blockchainSubnetList?: [ ALiYunChainSubnet ](name='blockchain_subnet_list', example=''),
}

// 合约服务列表查询
model ContracPageReq {
  // 合约服务类别
  type?: string(name='type', example='存证合约'),
  // 页码
  num: long(name='num', example='1'),
  // 页大小
  size: long(name='size', example='200'),
}

// 人群标签枚举集合对象
model CrowdTagEnumResp {
  // 人群标签code
  crowdTag: string(name='crowd_tag', example='P0010GC6'),
  // 人群标签枚举列表对象
  crowTagEnumItemList: [ CrowdTagEnumItemDTO ](name='crow_tag_enum_item_list', example=''),
}

// 阿里云最新区块列表查询的单元信息
model ALiYunChainBlockInfo {
  // alias
  alias?: string(name='alias', example='alias'),
  // block_hash
  blockHash?: string(name='block_hash', example='block_hash'),
  // root_tx_hash
  rootTxHash?: string(name='root_tx_hash', example='root_tx_hash'),
  // height
  height?: long(name='height', example='120'),
  // previous_hash
  previousHash?: string(name='previous_hash', example='previous_hash'),
  // create_time
  createTime?: long(name='create_time', example='12312312312'),
  // biz_data
  bizData?: string(name='biz_data', example='biz_data'),
  // transaction_size
  transactionSize?: long(name='transaction_size', example='12'),
  // version
  version?: long(name='version', example='20'),
  // size
  size?: long(name='size', example='size'),
}

// 组件信息
model DiscreteValue {
  // 排序id
  sortId?: long(name='sort_id', example='12'),
  // 字段描述
  text: string(name='text', example='联盟名称'),
  // 提示信息
  tips?: string(name='tips', example='提示信息'),
  // 单位信息
  unit?: string(name='unit', example='单位信息'),
  // 值内容
  value: string(name='value', example='值内容'),
}

// 合约列表
model ContractPageResp {
  // 合约列表
  list?: [ ContractPageListResp ](name='list', example=''),
  // 总数
  total?: long(name='total', example='200'),
}

// AccountPo
model AccountPo {
  // 账户 hash
  account?: string(name='account', example='465518149b3407dc927e05208136c42b2c6b82fe961006f3dff5202b0c3d8764'),
  // 账户创建时间
  createTime?: long(name='create_time', example='1573442990479'),
  // 创建该账户的交易hash
  hash?: string(name='hash', example='fffc98e106171ee7783fb79a433312e3ac98091cb82e7292ec62462138c7ff8e'),
  // 创建该账户的 账户hash
  parent?: string(name='parent', example='e7d3e769f3f593dadcb8634cc5b09fc90dd3a61c4a06a79cb0923662fe6fae6b'),
}

// doc删除service
model DidDeleteService {
  // 修改前did doc版本
  previousVersion: long(name='previous_version', example='2'),
  // 指定服务的id
  serviceId: string(name='service_id', example='service#2'),
}

// 可验证声明相关的事件
model VCEvent {
  // 事件对应的合约方法
  action: string(name='action', example='add'),
  // 本次事件的触发者
  from: string(name='from', example='xxxxx'),
  // 事件在区块的高度
  height: long(name='height', example='6300'),
  // 该VC的颁发者
  issuer: string(name='issuer', example='did:mychian:xxxxx'),
  // 有效，或者无效
  status: string(name='status', example='valid'),
  // 该vc的接受者
  subjec: string(name='subjec', example='hash256(did:mychain:xxxxx)'),
  // 交易hash
  // 
  txHash: string(name='tx_hash', example='xxxx'),
  // 交易在区块中的index
  txIndex: long(name='tx_index', example='1'),
  // 可验证声明Hash值
  vcHash: string(name='vc_hash', example='hash256(可验证声明)'),
  // vcid
  vcId: string(name='vc_id', example='vc:mychain:XXXX'),
}

// dis服务发现对象
model DisServiceInfo {
  // 提供服务的did
  controller: string(name='controller', example='did:mychain:xxxxxxxxx'),
  // 服务地址
  endPoint: string(name='end_point', example='www.xxxx.com/xxxx'),
  // 服务id
  serviceId: string(name='service_id', example='did:service:xxxxxx'),
  // 服务类型
  serviceType: string(name='service_type', example='xxxx'),
}

// POAP徽章的详细信息
model PoapInfo {
  // 徽章ID，具有唯一性
  poapId: string(name='poap_id', example='ACconstellation_ADF'),
  // 徽章名字
  poapName: string(name='poap_name', example='星座徽章'),
  // 徽章HASH
  uniHash: string(name='uni_hash', example='0fddf9087f7c5bd71c2fabb4b520bdec9fe7157c00807b26f9ddff9cd5d73d77'),
  // 状态，枚举值
  status?: string(name='status', example='FINISHED'),
  // 徽章资源 URL
  poapUrl: string(name='poap_url', example='http://xxxx.ff.png'),
  // 枚举值，2D_IMAGE--2D图片渲染；3D_OASISENGINE--3D模型渲染
  renderType: string(name='render_type', example='2D_IMAGE'),
  // 3D模型降级使用的资源URL
  faultToleranceUrl?: string(name='fault_tolerance_url', example='http://xxx.png'),
  // 小程序详情跳转URL。临时链接，过期时间为 detail_alipays_url_expire_time 字段的值
  detailAlipaysUrl?: string(name='detail_alipays_url', example='alipays://platformapi/startapp?'),
  // 详情页跳转URL过期时间
  detailAlipaysUrlExpireTime?: string(name='detail_alipays_url_expire_time', example='2022-12-31 23:59:59'),
}

// 分布式数字身份信息
model DidInfo {
  // 分布式数字身份id
  did: string(name='did', example='123123'),
  // 分布式数字身份对应的用户名称
  name: string(name='name', example='蚂蚁金服'),
}

// 数据隐私服务选择tapp信息的结构体
model ChoiceTappInfo {
  // 选择的tapp的名字
  tappName: string(name='tapp_name', example='erpDataReader-1'),
  // 版本号，如果不填就选择最新的版本
  tappVersion?: long(name='tapp_version', example=''),
  // 该tapp将被声明在did doc中的id
  serviceId: string(name='service_id', example='erpDataReader-1'),
}

// 复制阿里云合约工程信息
model ALiYunContractProjectDuplicate {
  // id
  id?: string(name='id', example='id'),
  // consortium_id
  consortiumId?: string(name='consortium_id', example='consortium_id'),
  // gmt_create
  gmtCreate?: long(name='gmt_create', example='21312312312'),
  // gmt_modified
  gmtModified?: long(name='gmt_modified', example='123123212'),
  // name
  name?: string(name='name', example='name'),
  // version
  version?: string(name='version', example='version'),
  // description
  description?: string(name='description', example='description'),
}

// 物流金融信用流转流水信息
model CreditTransferStatementInfo {
  // 信用凭证额度
  creditLimit?: string(name='credit_limit', example='1989.76'),
  // 信用凭证到期时间
  expireDate?: string(name='expire_date', example='20191212'),
  // 凭证来源方did
  fromDid?: string(name='from_did', example='did:mychain:1b8b30228ec99cb5de99b2265538f3c505b274e0bef98fb9cee7aabd8f5f47eb'),
  // 信用凭证发起时间
  issueDate?: string(name='issue_date', example='20190101'),
  // 信用流转凭证
  issueId?: string(name='issue_id', example='000abc'),
  // 流水类型
  stateType?: string(name='state_type', example='融资提现'),
  // 凭证流转方did
  toDid?: string(name='to_did', example='did:mychain:1b8b30228ec99cb5de99b2265538f3c505b274e0bef98fb9cee7aabd8f5f47eb'),
}

// 阿里云合约工程信息查询
model ALiYunContractProjects {
  // pagination
  pagination?: ALiYunPagination(name='pagination', example='pagination'),
  // contract_projects
  contractProjects?: [ ALiYunContractProject ](name='contract_projects', example='contract_projects'),
}

// 阿里云区块链资源类型信息
model ALiYunChainResouceType {
  // type_id
  typeId?: long(name='type_id', example='type_id'),
  // cpu
  cpu?: long(name='cpu', example='24'),
  // memory
  memory?: long(name='memory', example='24'),
  // disk
  disk?: long(name='disk', example='500'),
}

// 结构化存证类型
model DepositMetaDataItem {
  // 结构化存证时该item的描述
  desc: string(name='desc', example='货物个数'),
  // 结构化存证该数据字段的唯一索引
  key: string(name='key', example='item_id'),
  // 结构化存证时该item的类型
  // 0 text
  // 1 encrypt text
  // 2 txHash
  // 3 image url
  // 4 vedio url
  // 5 map url
  type: long(name='type', example='0'),
  // 结构化数据存证时，该item的值
  value: string(name='value', example='10个'),
}

// 阿里云最新交易信息
model ALiYunLatestTransaction {
  // hash
  hash?: string(name='hash', example='hash'),
  // transaction_v10_type
  transactionV10Type?: string(name='transaction_v10_type', example='transaction_v10_type'),
  // trans_type_v6
  transTypeV6?: string(name='trans_type_v6', example='trans_type_v6'),
  // from
  from?: string(name='from', example='from'),
  // to
  to?: string(name='to', example='to'),
  // create_time
  createTime?: long(name='create_time', example='1231231231'),
}

// 分页查询请求信息
model PageReq {
  // 页码
  num: long(name='num', example='1'),
  // 页大小
  size: long(name='size', example='200'),
}

// 用户密钥信息
model UserBizKeyInfo {
  // 拥有该密钥的用户列表
  grantedUser: [ string ](name='granted_user', example='CZKZJVCN'),
  // 密钥名称
  keyName: string(name='key_name', example='subunion_a_key'),
}

// 证书详情
model BareClaim {
  // 下面的内容由调用者自己定义，建议只存放必要的声明信息，不要放置敏感数据
  claim: string(name='claim', example='{"degree": {"type": "BachelorDegree","name": "Baccalauréat en musiques numériques"}}'),
  // 证书类型
  type?: string(name='type', example='claimtype'),
}

// 合约链配置信息结果，内部包含一个列表，列举多个合约链的配置信息
model ContractIdeConfigResult {
  // 合约链的配置信息，可包含多个合约链的配置
  contractIdeConfigList: [ ContractIdeConfig ](name='contract_ide_config_list', example=''),
}

// 合约与应用关联信息
model ContractBindListResp {
  // 合约关联列表
  list?: [ ContractBindResp ](name='list', example=''),
}

// 合约详情
model ContractDetailResp {
  // 合约服务ID
  serviceId?: string(name='service_id', example='cme20230724104931af3a4d'),
  // 合约服务名称
  name?: string(name='name', example='存证合约'),
  // 创建人
  creator?: string(name='creator', example='张三'),
  // 创建时间
  createTime?: long(name='create_time', example='1690166971465'),
  // 订购产品
  orderingProducts?: string(name='ordering_products', example='存证合约服务'),
  // 关联区块链id
  chanId?: string(name='chan_id', example='284f75bc-8069-443f-9d46-4576bb15f210'),
  // 合约状态
  contractStatus?: string(name='contract_status', example='DEPLOYED'),
  // 合约部署进度当前状态
  status?: string(name='status', example='SERVICE_START'),
  // 合约部署进度
  progressInfoList?: [ InstanceProgressInfo ](name='progress_info_list', example=''),
  // 实例最近调用记录(暂缓，先不做)
  recordInfoList?: [ InstanceRecordInfo ](name='record_info_list', example=''),
}

// 托管数据库ManagedMQDTO结构体
model ManagedMQDTOStructBody {
  // id
  id: string(name='id', example='5'),
  // 实例
  instance?: string(name='instance', example='"MQ_INST_1287126353308684_BXYEnC3u"'),
  // 主题
  topic?: string(name='topic', example='"tfx4lb3m0qh3emact73tln8t8qkygb65"'),
  // 类型
  type?: string(name='type', example='"basic"'),
}

// 证书批量颁发进度
model CertIssueProgressDTO {
  // 证书实例id
  bizId: string(name='biz_id', example='b99e641b2d6d45ac90600fd958e8bc3a'),
  // 存证ID，如果颁发失败，此值为null
  vcId: string(name='vc_id', example='vc:mychain:xxxxxx'),
  // 因校验异常停止任务（不会继续校验文件内容和颁发证书） -3
  // 因校验内容不正确停止颁发任务(会校验完所有的行但不执行颁发) -2
  // 已手动取消（可重试状态下手动取消任务，取消状态下可以启动新的颁发任务） -1
  // 可重试 0
  // 执行中（初始状态） 1
  // 已成功完成 2
  status: long(name='status', example='2'),
  // is_error=true时的错误描述
  errorMessage: string(name='error_message', example='标题格式不正确'),
  // 证书的字段标题列表
  titles: [ string ](name='titles', example='[身份证号,姓名,证书字段1]'),
  // 颁发进度百分比
  progressPercent: long(name='progress_percent', example='0-100'),
  // 当前批次数据总行数（不含标题）
  totalNum: string(name='total_num', example='0-5000'),
  // 颁发证书当前执行的阶段，VERIFY：校验文件中，ISSUE：颁发中
  curTaskType: string(name='cur_task_type', example='VERIFY、ISSUE'),
  // 颁发开始的时间戳
  startTimeMillis: long(name='start_time_millis', example='18123123123123'),
  // 颁发结束的时间戳
  endTimeMillis: long(name='end_time_millis', example='182371293192831'),
  // 校验错误描述列表
  errorDetails: [ TemplateInstanceErrorDetailDTO ](name='error_details', example=''),
}

// 存证信息集合
model NotaryTransaction {
  // 如果存证类型为text, 则为存证内容
  // 如果存证类型为file,则为存证文件临时下载地址
  content: string(name='content', example='content'),
  // 链上存证哈希
  transactionHash: string(name='transaction_hash', example='04181b49ee5d7eb0099a289ac8a45df6afb5aa2679c5284444698a9790099269'),
  // 存证类型
  type: string(name='type', example='text,file'),
}

// 蚂蚁链最新交易信息
model BlockchainBrowserLatestTransaction {
  // create_time
  createTime: long(name='create_time', example='createTime'),
  // from
  from: string(name='from', example='eeb0aa76449922c8ec718b97ec5da4c493d46d66a1f446fdce2ba29263efd612'),
  // to
  to: string(name='to', example='e4386406265f8a0f7d3a84efec3afa3ea12d2f9a3c21e2928a7b4d6a4e70ba68'),
  // hash
  hash: string(name='hash', example='eeb0aa76449922c8ec718b97ec5da4c493d46d66a1f446fdce2ba29263efd612'),
  // transactionV10Type
  transactionType: string(name='transaction_type', example='TX_DEPOSIT_DATA'),
}

// 版通历史发行记录信息
model EPIssueHisInfo {
  // 版通发行日期时间戳
  issueDate: long(name='issue_date', example='1560827725'),
  // 版通线下发行量
  offlineIssueAmount: long(name='offline_issue_amount', example='1000'),
  // 版通线上发行量
  onlineIssueAmount: long(name='online_issue_amount', example='1000'),
  // 版通自持发行量
  selfIssueAmount: long(name='self_issue_amount', example='1000'),
}

// 数据资产分页查询
model ListDataEntityResult {
  // 数据模型信息
  dataModel: DataModel(name='data_model', example=''),
  // 数据资产信息
  dataEntity: DataEntity(name='data_entity', example=''),
}

// 新建合约服务
model ContractCreateReq {
  // 链ID
  chainId: string(name='chain_id', example='284f75bc-8069-443f-9d46-4576bb15f210'),
  // 合约模板标识
  templateId: string(name='template_id', example='cme2023072511571851e2f3'),
  // 合约名称
  name: string(name='name', example='资产合约'),
}

// identity parameter
model IdentityParam {
  // 经办人姓名
  agent?: string(name='agent', example='张某某'),
  // 经办人身份证号
  agentId?: string(name='agent_id', example='130406200101012832'),
  // 用户的姓名
  certName: string(name='cert_name', example='李明'),
  // 用户的身份证号
  certNo: string(name='cert_no', example='410204200101013716'),
  // 用户证件类型，目前只支持IDENTITY_CARD
  certType: string(name='cert_type', example='IDENTITY_CARD'),
  // 法人姓名，企业认证必选
  legalPerson?: string(name='legal_person', example='张某某'),
  // 法人身份证，企业认证必选
  legalPersonId?: string(name='legal_person_id', example='130406200101010634'),
  // 手机号码
  mobileNo?: string(name='mobile_no', example='18322331111'),
  // 扩展属性字段
  properties?: string(name='properties', example='{"key":"value"}'),
  // 用户类型，默认为PERSON
  userType?: string(name='user_type', example='PERSON,ENTERPRISE'),
}

// 阿里云链信息
model ALiYunChainInfo {
  // abnormal_nodes
  abnormalNodes?: long(name='abnormal_nodes', example='4'),
  // ant_chain_id
  antChainId?: string(name='ant_chain_id', example='ant_chain_id'),
  // block_height
  blockHeight?: long(name='block_height', example='2131'),
  // create_time
  createTime?: long(name='create_time', example='123131212312'),
  // is_role
  isRole?: boolean(name='is_role', example='true'),
  // node_number
  nodeNumber?: long(name='node_number', example='4'),
  // normal
  normal?: boolean(name='normal', example='true, false'),
  // transaction_sum
  transactionSum?: long(name='transaction_sum', example='312312'),
  // Version
  version?: string(name='version', example='Version'),
  // node_infos
  nodeInfos?: [ ALiYunChainNodeInfo ](name='node_infos', example='node_infos'),
}

// 创建did doc时的具体操作
model DidAddDoc {
  // did doc content
  doc: string(name='doc', example='json string'),
}

// 证书模板详情类
model TemplateInfoDTO {
  // 主键
  id: long(name='id', example='1'),
  // 模板类别：马拉松类、滑雪类
  category: string(name='category', example='marathon'),
  // 模板内容， json格式文本
  claimTemplate: string(name='claim_template', example='{}'),
  // 创建时间
  gmtCreate: string(name='gmt_create', example='2021-01-01 00:00:00'),
  // 修改时间
  gmtModified: string(name='gmt_modified', example='2021-01-01 00:00:00'),
}

// 键值对
model XNameValuePair {
  // 键名
  name: string(name='name', example='key'),
  // 键值
  value: string(name='value', example='value'),
}

model StartAccountMappingRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 映射账户详细信息
  account: AccountMap(name='account'),
  // 扩展信息
  extension: string(name='extension'),
}

model StartAccountMappingResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 映射结果
  data?: AccountMappingResult(name='data'),
}

/**
 * Description: 将用户自有账户导入到链上
 * Summary: 自有账户映射到链上
 */
async function startAccountMapping(request: StartAccountMappingRequest): StartAccountMappingResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startAccountMappingEx(request, headers, runtime);
}

/**
 * Description: 将用户自有账户导入到链上
 * Summary: 自有账户映射到链上
 */
async function startAccountMappingEx(request: StartAccountMappingRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartAccountMappingResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.account.mapping.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BatchcreateAccountMappingRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 待映射处理的账户信息列表
  data: [ AccountMap ](name='data'),
}

model BatchcreateAccountMappingResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 当前请求分配的请求ID，可以通过这个值查询映射结果
  batchId?: string(name='batch_id'),
}

/**
 * Description: 自有账户到链上账户的批量映射接口
 * Summary: 自有账户到链上账户的批量映射
 */
async function batchcreateAccountMapping(request: BatchcreateAccountMappingRequest): BatchcreateAccountMappingResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return batchcreateAccountMappingEx(request, headers, runtime);
}

/**
 * Description: 自有账户到链上账户的批量映射接口
 * Summary: 自有账户到链上账户的批量映射
 */
async function batchcreateAccountMappingEx(request: BatchcreateAccountMappingRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BatchcreateAccountMappingResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.account.mapping.batchcreate', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartAccountSignatureRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 加密算法
  algorithm: string(name='algorithm'),
  // 区块链唯一标示
  bizid: string(name='bizid'),
  // 用户需要签名的原始数据
  data: string(name='data'),
  // 签名账户在原系统中的唯一标示
  uid: string(name='uid'),
}

model StartAccountSignatureResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 签名
  signature?: string(name='signature'),
}

/**
 * Description: 为用户生成签名的接口
 * Summary: 为用户生成签名
 */
async function startAccountSignature(request: StartAccountSignatureRequest): StartAccountSignatureResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startAccountSignatureEx(request, headers, runtime);
}

/**
 * Description: 为用户生成签名的接口
 * Summary: 为用户生成签名
 */
async function startAccountSignatureEx(request: StartAccountSignatureRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartAccountSignatureResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.account.signature.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryAccountMappingresultRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 查询之前对应批量映射请求的映射结果
  batchId: string(name='batch_id'),
}

model QueryAccountMappingresultResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 映射结果列表
  data?: [ AccountMappingResult ](name='data'),
}

/**
 * Description: 查询批量映射结果的接口
 * Summary: 查询批量映射的结果
 */
async function queryAccountMappingresult(request: QueryAccountMappingresultRequest): QueryAccountMappingresultResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryAccountMappingresultEx(request, headers, runtime);
}

/**
 * Description: 查询批量映射结果的接口
 * Summary: 查询批量映射的结果
 */
async function queryAccountMappingresultEx(request: QueryAccountMappingresultRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAccountMappingresultResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.account.mappingresult.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryAccountMappingRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 要映射的链对应的唯一id
  bizid: string(name='bizid'),
  // 自有系统中该账户唯一标示
  uid: string(name='uid'),
}

model QueryAccountMappingResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 该用户信息
  data?: AccountMappingInfo(name='data'),
}

/**
 * Description: 查询商户下账户在链上账号映射情况
 * Summary: 单个查询用户映射情况信息
 */
async function queryAccountMapping(request: QueryAccountMappingRequest): QueryAccountMappingResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryAccountMappingEx(request, headers, runtime);
}

/**
 * Description: 查询商户下账户在链上账号映射情况
 * Summary: 单个查询用户映射情况信息
 */
async function queryAccountMappingEx(request: QueryAccountMappingRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAccountMappingResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.account.mapping.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BatchqueryAccountMappingRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 要映射的链对应的唯一id
  bizid: string(name='bizid'),
  // 查询页数
  pageNum: long(minimum=1, name='page_num'),
  // 每页大小
  pageSize: long(minimum=1, name='page_size'),
}

model BatchqueryAccountMappingResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回查询的数据
  data?: QueryMappingBatchResult(name='data'),
}

/**
 * Description: 批量查询商户下已映射的账户信息
 * Summary: 批量查询商户下已映射的账户信息
 */
async function batchqueryAccountMapping(request: BatchqueryAccountMappingRequest): BatchqueryAccountMappingResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return batchqueryAccountMappingEx(request, headers, runtime);
}

/**
 * Description: 批量查询商户下已映射的账户信息
 * Summary: 批量查询商户下已映射的账户信息
 */
async function batchqueryAccountMappingEx(request: BatchqueryAccountMappingRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BatchqueryAccountMappingResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.account.mapping.batchquery', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateAccountMappingInfoRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 注册地址
  address?: string(name='address'),
  // 业务场景code
  bizCode: string(name='biz_code'),
  // 业务名称
  bizName: string(name='biz_name'),
  // 业务类型，预留
  bizType?: string(name='biz_type'),
  // 用户创建时间
  createTime?: string(name='create_time'),
  // 用户注销时间
  endTime?: string(name='end_time'),
  // 扩展字段，使用json格式
  extension?: string(name='extension'),
  // 业务组code
  groupCode: string(name='group_code'),
  // 业务组名称
  groupName: string(name='group_name'),
  // 唯一标示类型，0:统一信用代码,1:开票机构代码,2:身份证号
  identityType?: long(name='identity_type'),
  // 唯一标示码
  identityValue?: string(name='identity_value'),
  // 用户标签
  label?: string(name='label'),
  // 间连用户的上层直连用户名称
  parent?: string(name='parent'),
  // 统计时间
  statDate?: string(name='stat_date'),
  // 用户id
  userId?: string(name='user_id'),
  // 用户或企业名称
  userName?: string(name='user_name'),
  // 用户类型：direct直连，indirect间连，partner合作伙伴
  userType?: string(name='user_type'),
}

model CreateAccountMappingInfoResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回id
  accountId?: string(name='account_id'),
}

/**
 * Description: 用户信息存储
 * Summary: 用户信息存储
 */
async function createAccountMappingInfo(request: CreateAccountMappingInfoRequest): CreateAccountMappingInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createAccountMappingInfoEx(request, headers, runtime);
}

/**
 * Description: 用户信息存储
 * Summary: 用户信息存储
 */
async function createAccountMappingInfoEx(request: CreateAccountMappingInfoRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateAccountMappingInfoResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.account.mapping.info.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BatchcreateAccountMappingInfoRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 批量上传的用户信息
  list: [ AccountInfoWithBiz ](name='list'),
}

model BatchcreateAccountMappingInfoResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 账户id列表
  accounts?: [ string ](name='accounts'),
}

/**
 * Description: 批量创建用户信息
 * Summary: 批量创建用户信息
 */
async function batchcreateAccountMappingInfo(request: BatchcreateAccountMappingInfoRequest): BatchcreateAccountMappingInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return batchcreateAccountMappingInfoEx(request, headers, runtime);
}

/**
 * Description: 批量创建用户信息
 * Summary: 批量创建用户信息
 */
async function batchcreateAccountMappingInfoEx(request: BatchcreateAccountMappingInfoRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BatchcreateAccountMappingInfoResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.account.mapping.info.batchcreate', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetAkdfUserbizkeyRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 区块链id
  bizid: string(name='bizid'),
  // 密钥名称
  keyName: string(name='key_name'),
}

model GetAkdfUserbizkeyResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 区块链id
  bizid?: string(name='bizid'),
  // 4dY3DnjHPogYcsiVujkdhBRBceY8ZT5cUBP1zRBAZia7WZhJZyHmWbARBAWvy13aB7cNenbBg5D4CnM1gijv5YiSgBgHTC89sag9M7cxxdaRMrvFEA4YpcaunZdd4Q1APBynsDsqmVyzyGnZk5Kez9WBz5PZRyRC3gqCNXhHLLwuJmGCn8aEv3Ar9vsFUQa6qAgNtVVgiDxEYqBNNQc9K51ytdpBX81ph8nzy2ctUvLqi4G7iFU1wVsdd14XS7oz1v54M5Hb2CUTkv7ncXZSnNJYDsGyKAmHiriL2rargNzp6v2nUXhGSrkCVMDCVkZVcpeVFqSxKGatVdkGYUAswt3vtRVCcs
  encryptedPrivateKey?: string(name='encrypted_private_key'),
}

/**
 * Description: 获取用户的密钥对。
公钥为明文公钥
私钥为密文，需要用户在本地再做一次解密才能得到真正的私钥
 * Summary: 获取用户biz key
 */
async function getAkdfUserbizkey(request: GetAkdfUserbizkeyRequest): GetAkdfUserbizkeyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getAkdfUserbizkeyEx(request, headers, runtime);
}

/**
 * Description: 获取用户的密钥对。
公钥为明文公钥
私钥为密文，需要用户在本地再做一次解密才能得到真正的私钥
 * Summary: 获取用户biz key
 */
async function getAkdfUserbizkeyEx(request: GetAkdfUserbizkeyRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetAkdfUserbizkeyResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.akdf.userbizkey.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListAkdfUserbizkeyRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 区块链id
  bizid: string(name='bizid'),
}

model ListAkdfUserbizkeyResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 区块链id
  bizid?: string(name='bizid'),
  // 用户密钥信息
  userBizKeyInfo?: [ UserBizKeyInfo ](name='user_biz_key_info'),
}

/**
 * Description: 列出用户在某条链上所有的密钥
 * Summary: 列出密钥
 */
async function listAkdfUserbizkey(request: ListAkdfUserbizkeyRequest): ListAkdfUserbizkeyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listAkdfUserbizkeyEx(request, headers, runtime);
}

/**
 * Description: 列出用户在某条链上所有的密钥
 * Summary: 列出密钥
 */
async function listAkdfUserbizkeyEx(request: ListAkdfUserbizkeyRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListAkdfUserbizkeyResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.akdf.userbizkey.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CheckBlockchainOrderRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 参数
  data: string(name='data'),
  // region_id
  regionId?: string(name='region_id'),
  // 用户请求ID
  userRequestId?: string(name='user_request_id'),
}

model CheckBlockchainOrderResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 阿里云订单结果
  result?: ALiYunOrderResult(name='result'),
}

/**
 * Description: 根据用户选择的规则和订单类型，生成instanceId给commondriver
 * Summary: 下单
 */
async function checkBlockchainOrder(request: CheckBlockchainOrderRequest): CheckBlockchainOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return checkBlockchainOrderEx(request, headers, runtime);
}

/**
 * Description: 根据用户选择的规则和订单类型，生成instanceId给commondriver
 * Summary: 下单
 */
async function checkBlockchainOrderEx(request: CheckBlockchainOrderRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CheckBlockchainOrderResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.blockchain.order.check', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model VerifyBlockchainOrderRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 参数信息
  data: string(name='data'),
  // 区域信息
  regionId?: string(name='region_id'),
  // 用户请求id
  userRequestId?: string(name='user_request_id'),
}

model VerifyBlockchainOrderResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 阿里云请求返回结果
  result?: ALiYunOrderResult(name='result'),
}

/**
 * Description: 下单前校验
 * Summary: 下单前校验
 */
async function verifyBlockchainOrder(request: VerifyBlockchainOrderRequest): VerifyBlockchainOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return verifyBlockchainOrderEx(request, headers, runtime);
}

/**
 * Description: 下单前校验
 * Summary: 下单前校验
 */
async function verifyBlockchainOrderEx(request: VerifyBlockchainOrderRequest, headers: map[string]string, runtime: Util.RuntimeOptions): VerifyBlockchainOrderResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.blockchain.order.verify', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model InvalidateBlockchainOrderRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 参数
  data: string(name='data'),
  // 区域信息
  regionId?: string(name='region_id'),
  // 用户请求信息
  userRequestId?: string(name='user_request_id'),
}

model InvalidateBlockchainOrderResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 阿里云请求参数
  result?: ALiYunOrderResult(name='result'),
}

/**
 * Description: 退款
 * Summary: 退款
 */
async function invalidateBlockchainOrder(request: InvalidateBlockchainOrderRequest): InvalidateBlockchainOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return invalidateBlockchainOrderEx(request, headers, runtime);
}

/**
 * Description: 退款
 * Summary: 退款
 */
async function invalidateBlockchainOrderEx(request: InvalidateBlockchainOrderRequest, headers: map[string]string, runtime: Util.RuntimeOptions): InvalidateBlockchainOrderResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.blockchain.order.invalidate', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ReleaseBlockchainOrderPhysicalRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // bid
  bid: string(name='bid'),
  // country
  country?: string(name='country'),
  // gmt_wakeup
  gmtWakeup?: string(name='gmt_wakeup'),
  // hid
  hid: long(name='hid'),
  // interrupt
  interrupt?: boolean(name='interrupt'),
  // pk
  pk: string(name='pk'),
  // region_id
  regionId?: string(name='region_id'),
  // request_id
  requestId?: string(name='request_id'),
  // task_extra_data
  taskExtraData?: string(name='task_extra_data'),
  // task_identifier
  taskIdentifier?: string(name='task_identifier'),
}

model ReleaseBlockchainOrderPhysicalResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // bid
  bid?: string(name='bid'),
  // country
  country?: string(name='country'),
  // gmt_wakeup
  gmtWakeup?: string(name='gmt_wakeup'),
  // hid
  hid?: long(name='hid'),
  // interrupt
  interrupt?: boolean(name='interrupt'),
  // invoker
  invoker?: string(name='invoker'),
  // level
  level?: long(name='level'),
  // message
  message?: string(name='message'),
  // pk
  pk?: string(name='pk'),
  // prompt
  prompt?: string(name='prompt'),
  // request_id
  requestId?: string(name='request_id'),
  // 阿里云请求返回结果
  result?: ALiYunDeleteResource(name='result'),
  // task_extra_data
  taskExtraData?: string(name='task_extra_data'),
  // task_identifier
  taskIdentifier?: string(name='task_identifier'),
  // url
  url?: string(name='url'),
}

/**
 * Description: 删除物理资源
 * Summary: 删除物理资源
 */
async function releaseBlockchainOrderPhysical(request: ReleaseBlockchainOrderPhysicalRequest): ReleaseBlockchainOrderPhysicalResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return releaseBlockchainOrderPhysicalEx(request, headers, runtime);
}

/**
 * Description: 删除物理资源
 * Summary: 删除物理资源
 */
async function releaseBlockchainOrderPhysicalEx(request: ReleaseBlockchainOrderPhysicalRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ReleaseBlockchainOrderPhysicalResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.blockchain.order.physical.release', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ReleaseBlockchainOrderLogicalRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // bid
  bid: string(name='bid'),
  // country
  country?: string(name='country'),
  // gmt_wakeup
  gmtWakeup?: string(name='gmt_wakeup'),
  // hid
  hid: long(name='hid'),
  // 中断标识
  interrupt?: boolean(name='interrupt'),
  // pk
  pk: string(name='pk'),
  // region_id
  regionId?: string(name='region_id'),
  // request_id
  requestId?: string(name='request_id'),
  // task_extra_data
  taskExtraData?: string(name='task_extra_data'),
  // task_identifier
  taskIdentifier?: string(name='task_identifier'),
}

model ReleaseBlockchainOrderLogicalResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // bid
  bid?: string(name='bid'),
  // country
  country?: string(name='country'),
  // data
  data?: boolean(name='data'),
  // gmt_wakeup
  gmtWakeup?: string(name='gmt_wakeup'),
  // hid
  hid?: long(name='hid'),
  // interrupt
  interrupt?: boolean(name='interrupt'),
  // invoker
  invoker?: string(name='invoker'),
  // level
  level?: long(name='level'),
  // message
  message?: string(name='message'),
  // pk
  pk?: string(name='pk'),
  // prompt
  prompt?: string(name='prompt'),
  // reques_id
  requesId?: string(name='reques_id'),
  // 阿里云请求返回结果
  result?: ALiYunDeleteResource(name='result'),
  // task_extra_data
  taskExtraData?: string(name='task_extra_data'),
  // task_identifier
  taskIdentifier?: string(name='task_identifier'),
  // url
  url?: string(name='url'),
}

/**
 * Description: 逻辑资源删除
 * Summary: 逻辑资源删除
 */
async function releaseBlockchainOrderLogical(request: ReleaseBlockchainOrderLogicalRequest): ReleaseBlockchainOrderLogicalResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return releaseBlockchainOrderLogicalEx(request, headers, runtime);
}

/**
 * Description: 逻辑资源删除
 * Summary: 逻辑资源删除
 */
async function releaseBlockchainOrderLogicalEx(request: ReleaseBlockchainOrderLogicalRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ReleaseBlockchainOrderLogicalResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.blockchain.order.logical.release', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CheckBlockchainResourceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // bid
  bid: string(name='bid'),
  // country
  country?: string(name='country'),
  // gmt_wakeup
  gmtWakeup?: string(name='gmt_wakeup'),
  // hid
  hid: long(name='hid'),
  // interrupt
  interrupt?: boolean(name='interrupt'),
  // pk
  pk: string(name='pk'),
  // region_id
  regionId?: string(name='region_id'),
  // request_id
  requestId?: string(name='request_id'),
  // task_extra_data
  taskExtraData?: string(name='task_extra_data'),
  // task_identifier
  taskIdentifier?: string(name='task_identifier'),
}

model CheckBlockchainResourceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // bid
  bid?: string(name='bid'),
  // country
  country?: string(name='country'),
  // gmt_wakeup
  gmtWakeup?: string(name='gmt_wakeup'),
  // hid
  hid?: long(name='hid'),
  // interrupt
  interrupt?: boolean(name='interrupt'),
  // invoker
  invoker?: string(name='invoker'),
  // level
  level?: long(name='level'),
  // message
  message?: string(name='message'),
  // pk
  pk?: string(name='pk'),
  // prompt
  prompt?: string(name='prompt'),
  // request_id
  requestId?: string(name='request_id'),
  // task_extra_data
  taskExtraData?: string(name='task_extra_data'),
  // task_identifier
  taskIdentifier?: string(name='task_identifier'),
  // url
  url?: string(name='url'),
  // 阿里云资源请求返回结果
  result?: ALiYunDeleteResource(name='result'),
}

/**
 * Description: 资源检查
 * Summary: 资源检查
 */
async function checkBlockchainResource(request: CheckBlockchainResourceRequest): CheckBlockchainResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return checkBlockchainResourceEx(request, headers, runtime);
}

/**
 * Description: 资源检查
 * Summary: 资源检查
 */
async function checkBlockchainResourceEx(request: CheckBlockchainResourceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CheckBlockchainResourceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.blockchain.resource.check', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ConfirmBlockchainOrderRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // data
  data: string(name='data'),
  // region_id
  regionId?: string(name='region_id'),
  // user_request_id
  userRequestId?: string(name='user_request_id'),
}

model ConfirmBlockchainOrderResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 阿里云接口返回结果
  result?: ALiYunOrderResult(name='result'),
}

/**
 * Description: 补齐商品信息
 * Summary: 补齐商品信息
 */
async function confirmBlockchainOrder(request: ConfirmBlockchainOrderRequest): ConfirmBlockchainOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return confirmBlockchainOrderEx(request, headers, runtime);
}

/**
 * Description: 补齐商品信息
 * Summary: 补齐商品信息
 */
async function confirmBlockchainOrderEx(request: ConfirmBlockchainOrderRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ConfirmBlockchainOrderResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.blockchain.order.confirm', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ConnectBlockchainOrderRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // message
  message?: string(name='message'),
  // region_id
  regionId?: string(name='region_id'),
}

model ConnectBlockchainOrderResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 阿里云请求参数
  result?: ALiYunHandleBabelMns(name='result'),
}

/**
 * Description: 检查
 * Summary: 检查
 */
async function connectBlockchainOrder(request: ConnectBlockchainOrderRequest): ConnectBlockchainOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return connectBlockchainOrderEx(request, headers, runtime);
}

/**
 * Description: 检查
 * Summary: 检查
 */
async function connectBlockchainOrderEx(request: ConnectBlockchainOrderRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ConnectBlockchainOrderResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.blockchain.order.connect', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExecBlockchainOrderRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // data
  data?: string(name='data'),
  // region_id
  regionId?: string(name='region_id'),
  // user_request_id
  userRequestId?: string(name='user_request_id'),
}

model ExecBlockchainOrderResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // result
  result?: ALiYunChainExecuteOrder(name='result'),
}

/**
 * Description: 阿里云区块链订单创建接口
 * Summary: 阿里云区块链订单创建接口
 */
async function execBlockchainOrder(request: ExecBlockchainOrderRequest): ExecBlockchainOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return execBlockchainOrderEx(request, headers, runtime);
}

/**
 * Description: 阿里云区块链订单创建接口
 * Summary: 阿里云区块链订单创建接口
 */
async function execBlockchainOrderEx(request: ExecBlockchainOrderRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExecBlockchainOrderResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.blockchain.order.exec', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateUnionUnionRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 联盟描述
  consortiumDescription?: string(name='consortium_description'),
  // 联盟名称
  consortiumName: string(name='consortium_name'),
  // 区域信息
  regionId?: string(name='region_id'),
}

model CreateUnionUnionResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 联盟信息
  result?: ALiYunUnion(name='result'),
}

/**
 * Description: 创建联盟
 * Summary: 创建联盟
 */
async function createUnionUnion(request: CreateUnionUnionRequest): CreateUnionUnionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createUnionUnionEx(request, headers, runtime);
}

/**
 * Description: 创建联盟
 * Summary: 创建联盟
 */
async function createUnionUnionEx(request: CreateUnionUnionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateUnionUnionResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.union.union.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteUnionUnionRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 联盟ID
  consortiumId: string(name='consortium_id'),
  // 区域id
  regionId?: string(name='region_id'),
}

model DeleteUnionUnionResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 结果信息
  result?: string(name='result'),
}

/**
 * Description: 删除联盟
 * Summary: 删除联盟
 */
async function deleteUnionUnion(request: DeleteUnionUnionRequest): DeleteUnionUnionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteUnionUnionEx(request, headers, runtime);
}

/**
 * Description: 删除联盟
 * Summary: 删除联盟
 */
async function deleteUnionUnionEx(request: DeleteUnionUnionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteUnionUnionResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.union.union.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateUnionUnionRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 联盟id
  consortiumId: string(name='consortium_id'),
  // 联盟名称
  consortiumName: string(name='consortium_name'),
  // 区域信息
  regionId?: string(name='region_id'),
  // 联盟描述
  consortiumDescription?: string(name='consortium_description'),
}

model UpdateUnionUnionResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 结果信息
  result?: string(name='result'),
}

/**
 * Description: 联盟更新
 * Summary: 联盟更新
 */
async function updateUnionUnion(request: UpdateUnionUnionRequest): UpdateUnionUnionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateUnionUnionEx(request, headers, runtime);
}

/**
 * Description: 联盟更新
 * Summary: 联盟更新
 */
async function updateUnionUnionEx(request: UpdateUnionUnionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateUnionUnionResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.union.union.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryUnionUnionRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 分页编号
  pageNumber?: string(name='page_number'),
  // 分页大小
  pageSize: string(name='page_size'),
  // 区域信息
  regionId?: string(name='region_id'),
}

model QueryUnionUnionResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 阿里云联盟查询结果
  result?: ALiYunUnion(name='result'),
}

/**
 * Description: 联盟查询
 * Summary: 联盟查询
 */
async function queryUnionUnion(request: QueryUnionUnionRequest): QueryUnionUnionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryUnionUnionEx(request, headers, runtime);
}

/**
 * Description: 联盟查询
 * Summary: 联盟查询
 */
async function queryUnionUnionEx(request: QueryUnionUnionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryUnionUnionResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.union.union.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ApplyUnionMemberRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 联盟id
  consortiumId?: string(name='consortium_id'),
  // 被邀请用户的bid
  inviteBid?: string(name='invite_bid'),
  // 被邀请的用户id
  inviteUserId?: long(name='invite_user_id'),
  // 区域信息
  regionId?: string(name='region_id'),
}

model ApplyUnionMemberResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 邀请联盟的结果
  result?: string(name='result'),
}

/**
 * Description: 联盟邀请用户
 * Summary: 联盟邀请用户
 */
async function applyUnionMember(request: ApplyUnionMemberRequest): ApplyUnionMemberResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return applyUnionMemberEx(request, headers, runtime);
}

/**
 * Description: 联盟邀请用户
 * Summary: 联盟邀请用户
 */
async function applyUnionMemberEx(request: ApplyUnionMemberRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ApplyUnionMemberResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.union.member.apply', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ConfirmUnionMemberRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 邀请码
  code?: string(name='code'),
  // 区域信息
  regionId?: string(name='region_id'),
}

model ConfirmUnionMemberResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 阿里云联盟成员加入
  result?: string(name='result'),
}

/**
 * Description: 阿里云联盟成员加入
 * Summary: 阿里云联盟成员加入
 */
async function confirmUnionMember(request: ConfirmUnionMemberRequest): ConfirmUnionMemberResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return confirmUnionMemberEx(request, headers, runtime);
}

/**
 * Description: 阿里云联盟成员加入
 * Summary: 阿里云联盟成员加入
 */
async function confirmUnionMemberEx(request: ConfirmUnionMemberRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ConfirmUnionMemberResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.union.member.confirm', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryUnionChainRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 联盟id
  consortiumId: string(name='consortium_id'),
  // 分页编号
  pageNumber?: long(name='page_number'),
  // 分页大小
  pageSize: long(name='page_size'),
  // region_id
  regionId?: string(name='region_id'),
}

model QueryUnionChainResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 联盟内链数据
  result?: ALiYunUnion(name='result'),
}

/**
 * Description: 获取联盟内的蚂蚁区块链列表
 * Summary: 获取联盟内的蚂蚁区块链列表
 */
async function queryUnionChain(request: QueryUnionChainRequest): QueryUnionChainResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryUnionChainEx(request, headers, runtime);
}

/**
 * Description: 获取联盟内的蚂蚁区块链列表
 * Summary: 获取联盟内的蚂蚁区块链列表
 */
async function queryUnionChainEx(request: QueryUnionChainRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryUnionChainResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.union.chain.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryUnionMemberRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 联盟id
  consortiumId: string(name='consortium_id'),
  // page_number
  pageNumber?: long(name='page_number'),
  // page_size
  pageSize: long(name='page_size'),
  // 区域信息
  regionId?: string(name='region_id'),
}

model QueryUnionMemberResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 结果信息
  result?: ALiYunUnion(name='result'),
}

/**
 * Description: 获取联盟成员列表
 * Summary: 获取联盟成员列表
 */
async function queryUnionMember(request: QueryUnionMemberRequest): QueryUnionMemberResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryUnionMemberEx(request, headers, runtime);
}

/**
 * Description: 获取联盟成员列表
 * Summary: 获取联盟成员列表
 */
async function queryUnionMemberEx(request: QueryUnionMemberRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryUnionMemberResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.union.member.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateUnionMemberRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // region_id
  regionId?: string(name='region_id'),
  // member_name
  memberName: string(name='member_name'),
  // consortium_id
  consortiumId: string(name='consortium_id'),
  // member_id
  memberId: string(name='member_id'),
}

model UpdateUnionMemberResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // result
  result?: string(name='result'),
}

/**
 * Description: 更新联盟成员属性
 * Summary: 更新联盟成员属性
 */
async function updateUnionMember(request: UpdateUnionMemberRequest): UpdateUnionMemberResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateUnionMemberEx(request, headers, runtime);
}

/**
 * Description: 更新联盟成员属性
 * Summary: 更新联盟成员属性
 */
async function updateUnionMemberEx(request: UpdateUnionMemberRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateUnionMemberResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.union.member.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateChainNameAntRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // ant_chain_id
  antChainId: string(name='ant_chain_id'),
  // ant_chain_name
  antChainName: string(name='ant_chain_name'),
  // region_id
  regionId?: string(name='region_id'),
}

model UpdateChainNameAntResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // result
  result?: string(name='result'),
}

/**
 * Description: 更新区块链的名称
 * Summary: 更新区块链的名称
 */
async function updateChainNameAnt(request: UpdateChainNameAntRequest): UpdateChainNameAntResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateChainNameAntEx(request, headers, runtime);
}

/**
 * Description: 更新区块链的名称
 * Summary: 更新区块链的名称
 */
async function updateChainNameAntEx(request: UpdateChainNameAntRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateChainNameAntResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.chain.name.ant.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateChainCertAntRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // ant_chain_id
  antChainId: string(name='ant_chain_id'),
  // region_id
  regionId?: string(name='region_id'),
  // upload_req
  uploadReq: string(name='upload_req'),
}

model CreateChainCertAntResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // result
  result?: string(name='result'),
}

/**
 * Description: 手工创建区块链证书
 * Summary: 手工创建区块链证书
 */
async function createChainCertAnt(request: CreateChainCertAntRequest): CreateChainCertAntResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createChainCertAntEx(request, headers, runtime);
}

/**
 * Description: 手工创建区块链证书
 * Summary: 手工创建区块链证书
 */
async function createChainCertAntEx(request: CreateChainCertAntRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateChainCertAntResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.chain.cert.ant.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ApplyChainCertAntRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // ant_chain_id
  antChainId: string(name='ant_chain_id'),
  // common_name
  commonName: string(name='common_name'),
  // consortium_id
  consortiumId: string(name='consortium_id'),
  // country_name
  countryName: string(name='country_name'),
  // locality_name
  localityName: string(name='locality_name'),
  // organization_name
  organizationName: string(name='organization_name'),
  // organization_unit_name
  organizationUnitName: string(name='organization_unit_name'),
  // password
  password: string(name='password'),
  // region_id
  regionId?: string(name='region_id'),
  // state_or_province_name
  stateOrProvinceName: string(name='state_or_province_name'),
}

model ApplyChainCertAntResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // result
  result?: ALiYunChainDownload(name='result'),
}

/**
 * Description: 自动申请区块链证书
 * Summary: 自动申请区块链证书
 */
async function applyChainCertAnt(request: ApplyChainCertAntRequest): ApplyChainCertAntResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return applyChainCertAntEx(request, headers, runtime);
}

/**
 * Description: 自动申请区块链证书
 * Summary: 自动申请区块链证书
 */
async function applyChainCertAntEx(request: ApplyChainCertAntRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ApplyChainCertAntResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.chain.cert.ant.apply', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateChainPublicCertRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // bizid
  bizid?: string(name='bizid'),
  // consortium_id
  consortiumId?: string(name='consortium_id'),
  // region_id
  regionId?: string(name='region_id'),
  // upload_req
  uploadReq?: string(name='upload_req'),
}

model CreateChainPublicCertResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // result
  result?: string(name='result'),
}

/**
 * Description: 人工申请区块链证书
 * Summary: 人工申请区块链证书
 */
async function createChainPublicCert(request: CreateChainPublicCertRequest): CreateChainPublicCertResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createChainPublicCertEx(request, headers, runtime);
}

/**
 * Description: 人工申请区块链证书
 * Summary: 人工申请区块链证书
 */
async function createChainPublicCertEx(request: CreateChainPublicCertRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateChainPublicCertResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.chain.public.cert.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ApplyChainPublicCertRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // bizid
  bizid?: string(name='bizid'),
  // common_name
  commonName?: string(name='common_name'),
  // country_name
  countryName?: string(name='country_name'),
  // locality_name
  localityName?: string(name='locality_name'),
  // organization_name
  organizationName?: string(name='organization_name'),
  // organization_unit_name
  organizationUnitName?: string(name='organization_unit_name'),
  // password
  password?: string(name='password'),
  // region_id
  regionId?: string(name='region_id'),
  // state_or_province_name
  stateOrProvinceName?: string(name='state_or_province_name'),
}

model ApplyChainPublicCertResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // result
  result?: ALiYunChainDownload(name='result'),
}

/**
 * Description: 自动创建区块链证书
 * Summary: 自动创建区块链证书
 */
async function applyChainPublicCert(request: ApplyChainPublicCertRequest): ApplyChainPublicCertResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return applyChainPublicCertEx(request, headers, runtime);
}

/**
 * Description: 自动创建区块链证书
 * Summary: 自动创建区块链证书
 */
async function applyChainPublicCertEx(request: ApplyChainPublicCertRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ApplyChainPublicCertResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.chain.public.cert.apply', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ReinitChainPublicCertRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // bizid
  bizid?: string(name='bizid'),
  // region_id
  regionId?: string(name='region_id'),
}

model ReinitChainPublicCertResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // result
  result?: string(name='result'),
}

/**
 * Description: 免费体验链重置证书
 * Summary: 免费体验链重置证书
 */
async function reinitChainPublicCert(request: ReinitChainPublicCertRequest): ReinitChainPublicCertResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return reinitChainPublicCertEx(request, headers, runtime);
}

/**
 * Description: 免费体验链重置证书
 * Summary: 免费体验链重置证书
 */
async function reinitChainPublicCertEx(request: ReinitChainPublicCertRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ReinitChainPublicCertResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.chain.public.cert.reinit', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateChainPublicAccountRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // account
  account?: string(name='account'),
  // account_pub_key
  accountPubKey?: string(name='account_pub_key'),
  // account_recover_pub_key
  accountRecoverPubKey?: string(name='account_recover_pub_key'),
  // bizid
  bizid?: string(name='bizid'),
  // region_id
  regionId?: string(name='region_id'),
}

model CreateChainPublicAccountResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // result
  result?: string(name='result'),
}

/**
 * Description: 免费体验链创建账户
 * Summary: 免费体验链创建账户
 */
async function createChainPublicAccount(request: CreateChainPublicAccountRequest): CreateChainPublicAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createChainPublicAccountEx(request, headers, runtime);
}

/**
 * Description: 免费体验链创建账户
 * Summary: 免费体验链创建账户
 */
async function createChainPublicAccountEx(request: CreateChainPublicAccountRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateChainPublicAccountResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.chain.public.account.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ApplyChainPublicAccountRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // account
  account?: string(name='account'),
  // bizid
  bizid?: string(name='bizid'),
  // password
  password?: string(name='password'),
  // recover_password
  recoverPassword?: string(name='recover_password'),
  // region_id
  regionId?: string(name='region_id'),
}

model ApplyChainPublicAccountResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // result
  result?: ALiYunChainAccount(name='result'),
}

/**
 * Description: 自动创建链上账户
 * Summary: 自动创建链上账户
 */
async function applyChainPublicAccount(request: ApplyChainPublicAccountRequest): ApplyChainPublicAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return applyChainPublicAccountEx(request, headers, runtime);
}

/**
 * Description: 自动创建链上账户
 * Summary: 自动创建链上账户
 */
async function applyChainPublicAccountEx(request: ApplyChainPublicAccountRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ApplyChainPublicAccountResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.chain.public.account.apply', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryChainPublicRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // region_id
  regionId?: string(name='region_id'),
}

model QueryChainPublicResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // result
  result?: ALiYunChain(name='result'),
}

/**
 * Description: 免费体验链查询
 * Summary: 免费体验链查询
 */
async function queryChainPublic(request: QueryChainPublicRequest): QueryChainPublicResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryChainPublicEx(request, headers, runtime);
}

/**
 * Description: 免费体验链查询
 * Summary: 免费体验链查询
 */
async function queryChainPublicEx(request: QueryChainPublicRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryChainPublicResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.chain.public.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DownloadChainPublicCertRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // bizid
  bizid?: string(name='bizid'),
  // region_id
  regionId?: string(name='region_id'),
}

model DownloadChainPublicCertResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // result
  result?: ALiYunDownloadPath(name='result'),
}

/**
 * Description: 免费体验链证书下载
 * Summary: 免费体验链证书下载
 */
async function downloadChainPublicCert(request: DownloadChainPublicCertRequest): DownloadChainPublicCertResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return downloadChainPublicCertEx(request, headers, runtime);
}

/**
 * Description: 免费体验链证书下载
 * Summary: 免费体验链证书下载
 */
async function downloadChainPublicCertEx(request: DownloadChainPublicCertRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DownloadChainPublicCertResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.chain.public.cert.download', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateChainAccountAntRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // account
  account?: string(name='account'),
  // account_pub_key
  accountPubKey?: string(name='account_pub_key'),
  // account_recover_pub_key
  accountRecoverPubKey?: string(name='account_recover_pub_key'),
  // ant_chain_id
  antChainId?: string(name='ant_chain_id'),
}

model CreateChainAccountAntResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // result
  result?: ALiYunChainAccount(name='result'),
}

/**
 * Description: 手工创建账户
 * Summary: 手工创建账户
 */
async function createChainAccountAnt(request: CreateChainAccountAntRequest): CreateChainAccountAntResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createChainAccountAntEx(request, headers, runtime);
}

/**
 * Description: 手工创建账户
 * Summary: 手工创建账户
 */
async function createChainAccountAntEx(request: CreateChainAccountAntRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateChainAccountAntResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.chain.account.ant.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ApplyChainAccountAntRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // account
  account?: string(name='account'),
  // ant_chain_id
  antChainId?: string(name='ant_chain_id'),
  // password
  password?: string(name='password'),
  // recover_password
  recoverPassword?: string(name='recover_password'),
}

model ApplyChainAccountAntResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // result
  result?: ALiYunChainAccount(name='result'),
}

/**
 * Description: 自动创建账户
 * Summary: 自动创建账户
 */
async function applyChainAccountAnt(request: ApplyChainAccountAntRequest): ApplyChainAccountAntResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return applyChainAccountAntEx(request, headers, runtime);
}

/**
 * Description: 自动创建账户
 * Summary: 自动创建账户
 */
async function applyChainAccountAntEx(request: ApplyChainAccountAntRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ApplyChainAccountAntResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.chain.account.ant.apply', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryChainAccountAntRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // ant_chain_id
  antChainId: string(name='ant_chain_id'),
  // page_number
  pageNumber?: long(name='page_number'),
  // page_size
  pageSize: long(name='page_size'),
}

model QueryChainAccountAntResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // result
  result?: ALiYunAccountList(name='result'),
}

/**
 * Description: 查询链上账户列表
 * Summary: 查询链上账户列表
 */
async function queryChainAccountAnt(request: QueryChainAccountAntRequest): QueryChainAccountAntResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryChainAccountAntEx(request, headers, runtime);
}

/**
 * Description: 查询链上账户列表
 * Summary: 查询链上账户列表
 */
async function queryChainAccountAntEx(request: QueryChainAccountAntRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryChainAccountAntResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.chain.account.ant.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DownloadChainCertAntRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // ant_chain_id
  antChainId: string(name='ant_chain_id'),
  // region_id
  regionId?: string(name='region_id'),
}

model DownloadChainCertAntResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // result
  result?: ALiYunDownloadPath(name='result'),
}

/**
 * Description: 区块链证书下载
 * Summary: 区块链证书下载
 */
async function downloadChainCertAnt(request: DownloadChainCertAntRequest): DownloadChainCertAntResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return downloadChainCertAntEx(request, headers, runtime);
}

/**
 * Description: 区块链证书下载
 * Summary: 区块链证书下载
 */
async function downloadChainCertAntEx(request: DownloadChainCertAntRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DownloadChainCertAntResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.chain.cert.ant.download', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryChainNodeAntRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // ant_chain_id
  antChainId: string(name='ant_chain_id'),
  // region_id
  regionId?: string(name='region_id'),
}

model QueryChainNodeAntResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // result
  result?: [ string ](name='result'),
}

/**
 * Description: 阿里云链节点查询
 * Summary: 阿里云链节点查询
 */
async function queryChainNodeAnt(request: QueryChainNodeAntRequest): QueryChainNodeAntResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryChainNodeAntEx(request, headers, runtime);
}

/**
 * Description: 阿里云链节点查询
 * Summary: 阿里云链节点查询
 */
async function queryChainNodeAntEx(request: QueryChainNodeAntRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryChainNodeAntResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.chain.node.ant.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model FreezeChainAccountAntRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // account
  account: string(name='account'),
  // ant_chain_id
  antChainId: string(name='ant_chain_id'),
  // region_id
  regionId?: string(name='region_id'),
}

model FreezeChainAccountAntResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // result
  result?: string(name='result'),
}

/**
 * Description: 区块链链上账户冻结
 * Summary: 区块链链上账户冻结
 */
async function freezeChainAccountAnt(request: FreezeChainAccountAntRequest): FreezeChainAccountAntResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return freezeChainAccountAntEx(request, headers, runtime);
}

/**
 * Description: 区块链链上账户冻结
 * Summary: 区块链链上账户冻结
 */
async function freezeChainAccountAntEx(request: FreezeChainAccountAntRequest, headers: map[string]string, runtime: Util.RuntimeOptions): FreezeChainAccountAntResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.chain.account.ant.freeze', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UnfreezeChainAccountAntRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // account
  account?: string(name='account'),
  // ant_chain_id
  antChainId: string(name='ant_chain_id'),
  // region_id
  regionId: string(name='region_id'),
}

model UnfreezeChainAccountAntResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // result
  result?: string(name='result'),
}

/**
 * Description: 蚂蚁区块链账户解冻
 * Summary: 蚂蚁区块链账户解冻
 */
async function unfreezeChainAccountAnt(request: UnfreezeChainAccountAntRequest): UnfreezeChainAccountAntResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return unfreezeChainAccountAntEx(request, headers, runtime);
}

/**
 * Description: 蚂蚁区块链账户解冻
 * Summary: 蚂蚁区块链账户解冻
 */
async function unfreezeChainAccountAntEx(request: UnfreezeChainAccountAntRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UnfreezeChainAccountAntResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.chain.account.ant.unfreeze', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ReinitChainCertAntRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // ant_chain_id
  antChainId: string(name='ant_chain_id'),
  // region_id
  regionId?: string(name='region_id'),
  // username
  username?: string(name='username'),
}

model ReinitChainCertAntResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // result
  result?: string(name='result'),
}

/**
 * Description: 区块链证书重置
 * Summary: 区块链证书重置
 */
async function reinitChainCertAnt(request: ReinitChainCertAntRequest): ReinitChainCertAntResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return reinitChainCertAntEx(request, headers, runtime);
}

/**
 * Description: 区块链证书重置
 * Summary: 区块链证书重置
 */
async function reinitChainCertAntEx(request: ReinitChainCertAntRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ReinitChainCertAntResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.chain.cert.ant.reinit', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryChainCertAntRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // ant_chain_id
  antChainId: string(name='ant_chain_id'),
  // page_number
  pageNumber: long(name='page_number'),
  // page_size
  pageSize: long(name='page_size'),
  // region_id
  regionId?: string(name='region_id'),
  // status
  status: string(name='status'),
}

model QueryChainCertAntResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // result
  result?: ALiYunCertificateApplications(name='result'),
}

/**
 * Description: 区块链证书查询
 * Summary: 区块链证书查询
 */
async function queryChainCertAnt(request: QueryChainCertAntRequest): QueryChainCertAntResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryChainCertAntEx(request, headers, runtime);
}

/**
 * Description: 区块链证书查询
 * Summary: 区块链证书查询
 */
async function queryChainCertAntEx(request: QueryChainCertAntRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryChainCertAntResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.chain.cert.ant.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryChainBrowserInfoRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // ant_chain_id
  antChainId: string(name='ant_chain_id'),
  // region_id
  regionId?: string(name='region_id'),
}

model QueryChainBrowserInfoResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // result
  result?: ALiYunChainInfo(name='result'),
}

/**
 * Description: 阿里云浏览器信息查询
 * Summary: 阿里云浏览器信息查询
 */
async function queryChainBrowserInfo(request: QueryChainBrowserInfoRequest): QueryChainBrowserInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryChainBrowserInfoEx(request, headers, runtime);
}

/**
 * Description: 阿里云浏览器信息查询
 * Summary: 阿里云浏览器信息查询
 */
async function queryChainBrowserInfoEx(request: QueryChainBrowserInfoRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryChainBrowserInfoResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.chain.browser.info.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryChainBrowserBlocksRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // ant_chain_id
  antChainId: string(name='ant_chain_id'),
  // region_id
  regionId?: string(name='region_id'),
}

model QueryChainBrowserBlocksResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // result
  result?: [ ALiYunChainBlockInfo ](name='result'),
}

/**
 * Description: 阿里云最新区块链信息查询
 * Summary: 阿里云最新区块链信息查询
 */
async function queryChainBrowserBlocks(request: QueryChainBrowserBlocksRequest): QueryChainBrowserBlocksResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryChainBrowserBlocksEx(request, headers, runtime);
}

/**
 * Description: 阿里云最新区块链信息查询
 * Summary: 阿里云最新区块链信息查询
 */
async function queryChainBrowserBlocksEx(request: QueryChainBrowserBlocksRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryChainBrowserBlocksResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.chain.browser.blocks.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryChainBrowserTransactionsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // bizid
  bizid?: string(name='bizid'),
  // start
  start?: long(name='start'),
  // end
  end?: long(name='end'),
  // region_id
  regionId?: string(name='region_id'),
}

model QueryChainBrowserTransactionsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // result
  result?: [ ALiYunChainStatics ](name='result'),
}

/**
 * Description: 阿里云最新交易查询
 * Summary: 阿里云最新交易查询
 */
async function queryChainBrowserTransactions(request: QueryChainBrowserTransactionsRequest): QueryChainBrowserTransactionsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryChainBrowserTransactionsEx(request, headers, runtime);
}

/**
 * Description: 阿里云最新交易查询
 * Summary: 阿里云最新交易查询
 */
async function queryChainBrowserTransactionsEx(request: QueryChainBrowserTransactionsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryChainBrowserTransactionsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.chain.browser.transactions.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BatchqueryChainBrowserTransactionRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // ant_chain_id
  antChainId: string(name='ant_chain_id'),
  // region_id
  regionId?: string(name='region_id'),
}

model BatchqueryChainBrowserTransactionResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // result
  result?: [ ALiYunLatestTransaction ](name='result'),
}

/**
 * Description: 阿里云最新区块交易信息查询
 * Summary: 阿里云最新区块交易信息查询
 */
async function batchqueryChainBrowserTransaction(request: BatchqueryChainBrowserTransactionRequest): BatchqueryChainBrowserTransactionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return batchqueryChainBrowserTransactionEx(request, headers, runtime);
}

/**
 * Description: 阿里云最新区块交易信息查询
 * Summary: 阿里云最新区块交易信息查询
 */
async function batchqueryChainBrowserTransactionEx(request: BatchqueryChainBrowserTransactionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BatchqueryChainBrowserTransactionResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.chain.browser.transaction.batchquery', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryChainBrowserReceiptRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // ant_chain_id
  antChainId: string(name='ant_chain_id'),
  // hash
  hash: string(name='hash'),
  // region_id
  regionId?: string(name='region_id'),
}

model QueryChainBrowserReceiptResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // result
  result?: ALiYunTransactionReceipt(name='result'),
}

/**
 * Description: 阿里云区块链交易收据查询
 * Summary: 阿里云区块链交易收据查询
 */
async function queryChainBrowserReceipt(request: QueryChainBrowserReceiptRequest): QueryChainBrowserReceiptResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryChainBrowserReceiptEx(request, headers, runtime);
}

/**
 * Description: 阿里云区块链交易收据查询
 * Summary: 阿里云区块链交易收据查询
 */
async function queryChainBrowserReceiptEx(request: QueryChainBrowserReceiptRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryChainBrowserReceiptResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.chain.browser.receipt.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryChainBrowserTransactionRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // ant_chain_id
  antChainId: string(name='ant_chain_id'),
  // hash
  hash: string(name='hash'),
  // region_id
  regionId?: string(name='region_id'),
}

model QueryChainBrowserTransactionResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // result
  result?: ALiYunTransactionResult(name='result'),
}

/**
 * Description: 阿里云区块链交易查询
 * Summary: 阿里云区块链交易查询
 */
async function queryChainBrowserTransaction(request: QueryChainBrowserTransactionRequest): QueryChainBrowserTransactionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryChainBrowserTransactionEx(request, headers, runtime);
}

/**
 * Description: 阿里云区块链交易查询
 * Summary: 阿里云区块链交易查询
 */
async function queryChainBrowserTransactionEx(request: QueryChainBrowserTransactionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryChainBrowserTransactionResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.chain.browser.transaction.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryChainBrowserBlockRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // ant_chain_id
  antChainId?: string(name='ant_chain_id'),
  // height
  height?: long(name='height'),
  // region_id
  regionId?: string(name='region_id'),
}

model QueryChainBrowserBlockResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // result
  result?: ALiYunChainBlock(name='result'),
}

/**
 * Description: 阿里云区块链的区块信息
 * Summary: 阿里云区块链的区块信息
 */
async function queryChainBrowserBlock(request: QueryChainBrowserBlockRequest): QueryChainBrowserBlockResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryChainBrowserBlockEx(request, headers, runtime);
}

/**
 * Description: 阿里云区块链的区块信息
 * Summary: 阿里云区块链的区块信息
 */
async function queryChainBrowserBlockEx(request: QueryChainBrowserBlockRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryChainBrowserBlockResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.chain.browser.block.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryChainResouceRegionRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // region_id
  regionId?: string(name='region_id'),
  // locale
  locale?: string(name='locale'),
}

model QueryChainResouceRegionResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // result
  result?: [ ALiYunChainRegion ](name='result'),
}

/**
 * Description: 阿里云售卖区信息查询
 * Summary: 阿里云售卖区信息查询
 */
async function queryChainResouceRegion(request: QueryChainResouceRegionRequest): QueryChainResouceRegionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryChainResouceRegionEx(request, headers, runtime);
}

/**
 * Description: 阿里云售卖区信息查询
 * Summary: 阿里云售卖区信息查询
 */
async function queryChainResouceRegionEx(request: QueryChainResouceRegionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryChainResouceRegionResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.chain.resouce.region.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryChainResourceTypeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // region_id
  regionId?: string(name='region_id'),
}

model QueryChainResourceTypeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // result
  result?: [ ALiYunChainResouceType ](name='result'),
}

/**
 * Description: 阿里云资源类型查询
 * Summary: 阿里云资源类型查询
 */
async function queryChainResourceType(request: QueryChainResourceTypeRequest): QueryChainResourceTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryChainResourceTypeEx(request, headers, runtime);
}

/**
 * Description: 阿里云资源类型查询
 * Summary: 阿里云资源类型查询
 */
async function queryChainResourceTypeEx(request: QueryChainResourceTypeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryChainResourceTypeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.chain.resource.type.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryChainResouceSaleRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // region_id
  regionId?: string(name='region_id'),
}

model QueryChainResouceSaleResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // reslut
  reslut?: ALiYunChainResouceForSale(name='reslut'),
}

/**
 * Description: 阿里云区块链售卖资源查询
 * Summary: 阿里云区块链售卖资源查询
 */
async function queryChainResouceSale(request: QueryChainResouceSaleRequest): QueryChainResouceSaleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryChainResouceSaleEx(request, headers, runtime);
}

/**
 * Description: 阿里云区块链售卖资源查询
 * Summary: 阿里云区块链售卖资源查询
 */
async function queryChainResouceSaleEx(request: QueryChainResouceSaleRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryChainResouceSaleResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.chain.resouce.sale.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryChainResourceConfigRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // purpose
  purpose?: string(name='purpose'),
  // region_id
  regionId?: string(name='region_id'),
}

model QueryChainResourceConfigResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // result
  result?: [ ALiYunChainConfigOption ](name='result'),
}

/**
 * Description: 阿里云区块链配置信息查询
 * Summary: 阿里云区块链配置信息查询
 */
async function queryChainResourceConfig(request: QueryChainResourceConfigRequest): QueryChainResourceConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryChainResourceConfigEx(request, headers, runtime);
}

/**
 * Description: 阿里云区块链配置信息查询
 * Summary: 阿里云区块链配置信息查询
 */
async function queryChainResourceConfigEx(request: QueryChainResourceConfigRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryChainResourceConfigResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.chain.resource.config.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryChainBrowserStatisticsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // ant_chain_id
  antChainId: string(name='ant_chain_id'),
  // start
  start?: long(name='start'),
  // end
  end?: long(name='end'),
  // region_id
  regionId?: string(name='region_id'),
}

model QueryChainBrowserStatisticsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // result
  result?: [ ALiYunChainStatics ](name='result'),
}

/**
 * Description: 阿里云区块链交易统计信息
 * Summary: 阿里云区块链交易统计信息
 */
async function queryChainBrowserStatistics(request: QueryChainBrowserStatisticsRequest): QueryChainBrowserStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryChainBrowserStatisticsEx(request, headers, runtime);
}

/**
 * Description: 阿里云区块链交易统计信息
 * Summary: 阿里云区块链交易统计信息
 */
async function queryChainBrowserStatisticsEx(request: QueryChainBrowserStatisticsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryChainBrowserStatisticsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.chain.browser.statistics.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExecChainPublicContractRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // bizid
  bizid?: string(name='bizid'),
  // transaction
  transaction?: string(name='transaction'),
  // region_id
  regionId?: string(name='region_id'),
}

model ExecChainPublicContractResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // result
  result?: string(name='result'),
}

/**
 * Description: 阿里云区块链交易执行交易
 * Summary: 阿里云区块链交易执行交易
 */
async function execChainPublicContract(request: ExecChainPublicContractRequest): ExecChainPublicContractResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return execChainPublicContractEx(request, headers, runtime);
}

/**
 * Description: 阿里云区块链交易执行交易
 * Summary: 阿里云区块链交易执行交易
 */
async function execChainPublicContractEx(request: ExecChainPublicContractRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExecChainPublicContractResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.chain.public.contract.exec', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryChainPublicIdeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // bizid
  bizid?: string(name='bizid'),
  // region_id
  regionId?: string(name='region_id'),
}

model QueryChainPublicIdeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // result
  result?: [ ALiYunChainCloudIdeConfig ](name='result'),
}

/**
 * Description: 阿里云免费体验链的cloudIde查询
 * Summary: 阿里云免费体验链的cloudIde查询
 */
async function queryChainPublicIde(request: QueryChainPublicIdeRequest): QueryChainPublicIdeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryChainPublicIdeEx(request, headers, runtime);
}

/**
 * Description: 阿里云免费体验链的cloudIde查询
 * Summary: 阿里云免费体验链的cloudIde查询
 */
async function queryChainPublicIdeEx(request: QueryChainPublicIdeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryChainPublicIdeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.chain.public.ide.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryChainPublicContentRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // region_id
  regionId?: string(name='region_id'),
}

model QueryChainPublicContentResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // result
  result?: string(name='result'),
}

/**
 * Description: 阿里云免费体验链合约文件和内容查询
 * Summary: 阿里云免费体验链合约文件和内容查询
 */
async function queryChainPublicContent(request: QueryChainPublicContentRequest): QueryChainPublicContentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryChainPublicContentEx(request, headers, runtime);
}

/**
 * Description: 阿里云免费体验链合约文件和内容查询
 * Summary: 阿里云免费体验链合约文件和内容查询
 */
async function queryChainPublicContentEx(request: QueryChainPublicContentRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryChainPublicContentResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.chain.public.content.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateChainContractProjectRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // region_id
  regionId?: string(name='region_id'),
  // consortium_id
  consortiumId?: string(name='consortium_id'),
  // project_name
  projectName?: string(name='project_name'),
  // project_version
  projectVersion?: string(name='project_version'),
  // project_description
  projectDescription?: string(name='project_description'),
}

model CreateChainContractProjectResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // result
  result?: ALiYunContractProject(name='result'),
}

/**
 * Description: 阿里云合约工程创建
 * Summary: 阿里云合约工程创建
 */
async function createChainContractProject(request: CreateChainContractProjectRequest): CreateChainContractProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createChainContractProjectEx(request, headers, runtime);
}

/**
 * Description: 阿里云合约工程创建
 * Summary: 阿里云合约工程创建
 */
async function createChainContractProjectEx(request: CreateChainContractProjectRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateChainContractProjectResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.chain.contract.project.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteChainContractProjectRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // project_id
  projectId?: string(name='project_id'),
  // region_id
  regionId?: string(name='region_id'),
  // consortium_id
  consortiumId?: string(name='consortium_id'),
}

model DeleteChainContractProjectResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // result
  result?: string(name='result'),
}

/**
 * Description: 阿里云合约工程删除
 * Summary: 阿里云合约工程删除
 */
async function deleteChainContractProject(request: DeleteChainContractProjectRequest): DeleteChainContractProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteChainContractProjectEx(request, headers, runtime);
}

/**
 * Description: 阿里云合约工程删除
 * Summary: 阿里云合约工程删除
 */
async function deleteChainContractProjectEx(request: DeleteChainContractProjectRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteChainContractProjectResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.chain.contract.project.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CloneChainContractProjectRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // project_description
  projectDescription: string(name='project_description'),
  // project_id
  projectId: string(name='project_id'),
  // project_name
  projectName: string(name='project_name'),
  // project_version
  projectVersion: string(name='project_version'),
  // region_id
  regionId?: string(name='region_id'),
  // consortium_id
  consortiumId: string(name='consortium_id'),
}

model CloneChainContractProjectResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // result
  result?: ALiYunContractProject(name='result'),
}

/**
 * Description: 复制阿里云合约工程
 * Summary: 复制阿里云合约工程
 */
async function cloneChainContractProject(request: CloneChainContractProjectRequest): CloneChainContractProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return cloneChainContractProjectEx(request, headers, runtime);
}

/**
 * Description: 复制阿里云合约工程
 * Summary: 复制阿里云合约工程
 */
async function cloneChainContractProjectEx(request: CloneChainContractProjectRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CloneChainContractProjectResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.chain.contract.project.clone', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryChainContractProjectRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // consortium_id
  consortiumId: string(name='consortium_id'),
  // page_number
  pageNumber: long(name='page_number'),
  // page_size
  pageSize: long(name='page_size'),
  // region_id
  regionId?: string(name='region_id'),
}

model QueryChainContractProjectResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // result
  result?: ALiYunContractProjects(name='result'),
}

/**
 * Description: 阿里云合约工程信息查询
 * Summary: 阿里云合约工程信息查询
 */
async function queryChainContractProject(request: QueryChainContractProjectRequest): QueryChainContractProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryChainContractProjectEx(request, headers, runtime);
}

/**
 * Description: 阿里云合约工程信息查询
 * Summary: 阿里云合约工程信息查询
 */
async function queryChainContractProjectEx(request: QueryChainContractProjectRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryChainContractProjectResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.chain.contract.project.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model RetryChainContractProjectRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // description
  description?: string(name='description'),
  // name
  name?: string(name='name'),
  // project_id
  projectId?: string(name='project_id'),
  // project_version
  projectVersion?: string(name='project_version'),
  // region_id
  regionId?: string(name='region_id'),
  // consortium_id
  consortiumId: string(name='consortium_id'),
}

model RetryChainContractProjectResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // result
  result?: ALiYunContractProjectDuplicate(name='result'),
}

/**
 * Description: 复制阿里云合约工程
 * Summary: 复制阿里云合约工程
 */
async function retryChainContractProject(request: RetryChainContractProjectRequest): RetryChainContractProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return retryChainContractProjectEx(request, headers, runtime);
}

/**
 * Description: 复制阿里云合约工程
 * Summary: 复制阿里云合约工程
 */
async function retryChainContractProjectEx(request: RetryChainContractProjectRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RetryChainContractProjectResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.chain.contract.project.retry', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateChainContractProjectRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // project_description
  projectDescription?: string(name='project_description'),
  // project_id
  projectId: string(name='project_id'),
  // project_name
  projectName?: string(name='project_name'),
  // project_version
  projectVersion?: string(name='project_version'),
  // region_id
  regionId?: string(name='region_id'),
  // consortium_id
  consortiumId: string(name='consortium_id'),
}

model UpdateChainContractProjectResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // result
  result?: string(name='result'),
}

/**
 * Description: 更新阿里云区块链的合约工程
 * Summary: 更新阿里云区块链的合约工程
 */
async function updateChainContractProject(request: UpdateChainContractProjectRequest): UpdateChainContractProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateChainContractProjectEx(request, headers, runtime);
}

/**
 * Description: 更新阿里云区块链的合约工程
 * Summary: 更新阿里云区块链的合约工程
 */
async function updateChainContractProjectEx(request: UpdateChainContractProjectRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateChainContractProjectResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.chain.contract.project.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateChainContractContentRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // content
  content?: string(name='content'),
  // content_name
  contentName: string(name='content_name'),
  // is_directory
  isDirectory: boolean(name='is_directory'),
  // parent_content_id
  parentContentId?: string(name='parent_content_id'),
  // project_id
  projectId: string(name='project_id'),
  // region_id
  regionId?: string(name='region_id'),
  // consortium_id
  consortiumId: string(name='consortium_id'),
}

model CreateChainContractContentResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // result
  result?: ALiYunChainContractContent(name='result'),
}

/**
 * Description: 创建合约文件内容
 * Summary: 创建合约文件内容
 */
async function createChainContractContent(request: CreateChainContractContentRequest): CreateChainContractContentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createChainContractContentEx(request, headers, runtime);
}

/**
 * Description: 创建合约文件内容
 * Summary: 创建合约文件内容
 */
async function createChainContractContentEx(request: CreateChainContractContentRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateChainContractContentResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.chain.contract.content.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateChainContractContentRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // content
  content?: string(name='content'),
  // content_id
  contentId: string(name='content_id'),
  // content_name
  contentName?: string(name='content_name'),
  // parent_content_id
  parentContentId?: string(name='parent_content_id'),
  // region_id
  regionId?: string(name='region_id'),
  // consortium_id
  consortiumId?: string(name='consortium_id'),
}

model UpdateChainContractContentResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // result
  result?: string(name='result'),
}

/**
 * Description: 更新阿里云合约文件内容
 * Summary: 更新阿里云合约文件内容
 */
async function updateChainContractContent(request: UpdateChainContractContentRequest): UpdateChainContractContentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateChainContractContentEx(request, headers, runtime);
}

/**
 * Description: 更新阿里云合约文件内容
 * Summary: 更新阿里云合约文件内容
 */
async function updateChainContractContentEx(request: UpdateChainContractContentRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateChainContractContentResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.chain.contract.content.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryChainContractContentRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // project_id
  projectId?: string(name='project_id'),
  // region_id
  regionId?: string(name='region_id'),
  // consortium_id
  consortiumId: string(name='consortium_id'),
}

model QueryChainContractContentResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // result
  result?: string(name='result'),
}

/**
 * Description: 阿里云合约文件信息查询
 * Summary: 阿里云合约文件信息查询
 */
async function queryChainContractContent(request: QueryChainContractContentRequest): QueryChainContractContentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryChainContractContentEx(request, headers, runtime);
}

/**
 * Description: 阿里云合约文件信息查询
 * Summary: 阿里云合约文件信息查询
 */
async function queryChainContractContentEx(request: QueryChainContractContentRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryChainContractContentResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.chain.contract.content.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExecChainContractRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // region_id
  regionId?: string(name='region_id'),
  // ant_chain_id
  antChainId: string(name='ant_chain_id'),
  // transaction
  transaction: string(name='transaction'),
}

model ExecChainContractResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // result
  result?: string(name='result'),
}

/**
 * Description: 阿里云区块链合约执行接口
 * Summary: 阿里云区块链合约执行
 */
async function execChainContract(request: ExecChainContractRequest): ExecChainContractResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return execChainContractEx(request, headers, runtime);
}

/**
 * Description: 阿里云区块链合约执行接口
 * Summary: 阿里云区块链合约执行
 */
async function execChainContractEx(request: ExecChainContractRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExecChainContractResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.chain.contract.exec', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryChainIdeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // consortium_id
  consortiumId: string(name='consortium_id'),
  // region_id
  regionId?: string(name='region_id'),
}

model QueryChainIdeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // result
  result?: [ ALiYunChainCloudIdeConfig ](name='result'),
}

/**
 * Description: 阿里云区块链CloudIde配置查询
 * Summary: 阿里云区块链CloudIde配置查询
 */
async function queryChainIde(request: QueryChainIdeRequest): QueryChainIdeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryChainIdeEx(request, headers, runtime);
}

/**
 * Description: 阿里云区块链CloudIde配置查询
 * Summary: 阿里云区块链CloudIde配置查询
 */
async function queryChainIdeEx(request: QueryChainIdeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryChainIdeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.chain.ide.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteChainContractContentRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // content_id
  contentId: string(name='content_id'),
  // region_id
  regionId?: string(name='region_id'),
  // consortium_id
  consortiumId: string(name='consortium_id'),
}

model DeleteChainContractContentResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // result
  result?: string(name='result'),
}

/**
 * Description: 阿里云区块链合约文件删除
 * Summary: 阿里云区块链合约文件删除
 */
async function deleteChainContractContent(request: DeleteChainContractContentRequest): DeleteChainContractContentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteChainContractContentEx(request, headers, runtime);
}

/**
 * Description: 阿里云区块链合约文件删除
 * Summary: 阿里云区块链合约文件删除
 */
async function deleteChainContractContentEx(request: DeleteChainContractContentRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteChainContractContentResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.chain.contract.content.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BatchcreateChainMiniappUserRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // ant_chain_id
  antChainId?: string(name='ant_chain_id'),
  // phone_list
  phoneList?: string(name='phone_list'),
}

model BatchcreateChainMiniappUserResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // result
  result?: string(name='result'),
}

/**
 * Description: 阿里云区块链小程序用户权限添加
 * Summary: 阿里云区块链小程序用户权限添加
 */
async function batchcreateChainMiniappUser(request: BatchcreateChainMiniappUserRequest): BatchcreateChainMiniappUserResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return batchcreateChainMiniappUserEx(request, headers, runtime);
}

/**
 * Description: 阿里云区块链小程序用户权限添加
 * Summary: 阿里云区块链小程序用户权限添加
 */
async function batchcreateChainMiniappUserEx(request: BatchcreateChainMiniappUserRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BatchcreateChainMiniappUserResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.chain.miniapp.user.batchcreate', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteChainMiniappUserRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // AntChainId
  antChainId?: string(name='ant_chain_id'),
  // phone
  phone?: string(name='phone'),
}

model DeleteChainMiniappUserResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // result
  result?: string(name='result'),
}

/**
 * Description: 阿里云区块链小程序用户权限删除
 * Summary: 阿里云区块链小程序用户权限删除
 */
async function deleteChainMiniappUser(request: DeleteChainMiniappUserRequest): DeleteChainMiniappUserResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteChainMiniappUserEx(request, headers, runtime);
}

/**
 * Description: 阿里云区块链小程序用户权限删除
 * Summary: 阿里云区块链小程序用户权限删除
 */
async function deleteChainMiniappUserEx(request: DeleteChainMiniappUserRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteChainMiniappUserResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.chain.miniapp.user.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BatchqueryChainMiniappUserRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // ant_chain_id
  antChainId: string(name='ant_chain_id'),
  // page_number
  pageNumber: long(name='page_number'),
  // page_size
  pageSize: long(name='page_size'),
  // q_r_code_type
  qRCodeType: string(name='q_r_code_type'),
}

model BatchqueryChainMiniappUserResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // result
  result?: ALiYunChainMiniAppUserPrivilege(name='result'),
}

/**
 * Description: 阿里云区块链所有用户权限查询
 * Summary: 阿里云区块链所有用户权限查询
 */
async function batchqueryChainMiniappUser(request: BatchqueryChainMiniappUserRequest): BatchqueryChainMiniappUserResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return batchqueryChainMiniappUserEx(request, headers, runtime);
}

/**
 * Description: 阿里云区块链所有用户权限查询
 * Summary: 阿里云区块链所有用户权限查询
 */
async function batchqueryChainMiniappUserEx(request: BatchqueryChainMiniappUserRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BatchqueryChainMiniappUserResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.chain.miniapp.user.batchquery', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryChainMiniappAuthorizationRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // ant_chain_id
  antChainId: string(name='ant_chain_id'),
  // q_r_code_type
  qRCodeType: string(name='q_r_code_type'),
}

model QueryChainMiniappAuthorizationResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // result
  result?: ALiYunChainMiniAppAuthorization(name='result'),
}

/**
 * Description: 阿里云区块链小程序权限控制查询
 * Summary: 阿里云区块链小程序权限控制查询
 */
async function queryChainMiniappAuthorization(request: QueryChainMiniappAuthorizationRequest): QueryChainMiniappAuthorizationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryChainMiniappAuthorizationEx(request, headers, runtime);
}

/**
 * Description: 阿里云区块链小程序权限控制查询
 * Summary: 阿里云区块链小程序权限控制查询
 */
async function queryChainMiniappAuthorizationEx(request: QueryChainMiniappAuthorizationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryChainMiniappAuthorizationResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.chain.miniapp.authorization.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateChainMiniappAuthorizationRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // ant_chain_id
  antChainId?: string(name='ant_chain_id'),
  // q_r_code_type
  qRCodeType?: string(name='q_r_code_type'),
  // authorization_type
  authorizationType?: string(name='authorization_type'),
}

model UpdateChainMiniappAuthorizationResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // result
  result?: string(name='result'),
}

/**
 * Description: 阿里云区块链小程序权限控制变更
 * Summary: 阿里云区块链小程序权限控制变更
 */
async function updateChainMiniappAuthorization(request: UpdateChainMiniappAuthorizationRequest): UpdateChainMiniappAuthorizationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateChainMiniappAuthorizationEx(request, headers, runtime);
}

/**
 * Description: 阿里云区块链小程序权限控制变更
 * Summary: 阿里云区块链小程序权限控制变更
 */
async function updateChainMiniappAuthorizationEx(request: UpdateChainMiniappAuthorizationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateChainMiniappAuthorizationResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.chain.miniapp.authorization.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryChainMiniappTransactionRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // ant_chain_id
  antChainId: string(name='ant_chain_id'),
  // transaction_hash
  transactionHash: string(name='transaction_hash'),
  // phone_hash
  phoneHash: string(name='phone_hash'),
}

model QueryChainMiniappTransactionResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // result
  result?: ALiYunChainMiniAppTransaction(name='result'),
}

/**
 * Description: 阿里云区块链小程序交易查询
 * Summary: 阿里云区块链小程序交易查询
 */
async function queryChainMiniappTransaction(request: QueryChainMiniappTransactionRequest): QueryChainMiniappTransactionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryChainMiniappTransactionEx(request, headers, runtime);
}

/**
 * Description: 阿里云区块链小程序交易查询
 * Summary: 阿里云区块链小程序交易查询
 */
async function queryChainMiniappTransactionEx(request: QueryChainMiniappTransactionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryChainMiniappTransactionResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.chain.miniapp.transaction.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryChainMiniappLogRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // ant_chain_id
  antChainId: string(name='ant_chain_id'),
  // q_r_code_type
  qRCodeType: string(name='q_r_code_type'),
}

model QueryChainMiniappLogResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // result
  result?: ALiYunChainMiniAppLog(name='result'),
}

/**
 * Description: 阿里云区块链小程序交易查询的记录
 * Summary: 阿里云区块链小程序交易查询的记录
 */
async function queryChainMiniappLog(request: QueryChainMiniappLogRequest): QueryChainMiniappLogResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryChainMiniappLogEx(request, headers, runtime);
}

/**
 * Description: 阿里云区块链小程序交易查询的记录
 * Summary: 阿里云区块链小程序交易查询的记录
 */
async function queryChainMiniappLogEx(request: QueryChainMiniappLogRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryChainMiniappLogResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.chain.miniapp.log.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateChainMiniappCodeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // ant_chain_id
  antChainId: string(name='ant_chain_id'),
  // transaction_hash
  transactionHash: string(name='transaction_hash'),
  // contract_id
  contractId: string(name='contract_id'),
}

model CreateChainMiniappCodeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // result
  result?: ALiYunChainMiniAppCodeCreate(name='result'),
}

/**
 * Description: 阿里云生成小程序二维码
 * Summary: 阿里云生成小程序二维码
 */
async function createChainMiniappCode(request: CreateChainMiniappCodeRequest): CreateChainMiniappCodeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createChainMiniappCodeEx(request, headers, runtime);
}

/**
 * Description: 阿里云生成小程序二维码
 * Summary: 阿里云生成小程序二维码
 */
async function createChainMiniappCodeEx(request: CreateChainMiniappCodeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateChainMiniappCodeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.chain.miniapp.code.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryUnionBuyRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // region_id
  regionId?: string(name='region_id'),
  // tenant_id
  tenantId: string(name='tenant_id'),
}

model QueryUnionBuyResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // result
  result?: [ ALiYunBuyUnion ](name='result'),
}

/**
 * Description: 阿里云售卖页联盟信息查询
 * Summary: 阿里云售卖页联盟信息查询
 */
async function queryUnionBuy(request: QueryUnionBuyRequest): QueryUnionBuyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryUnionBuyEx(request, headers, runtime);
}

/**
 * Description: 阿里云售卖页联盟信息查询
 * Summary: 阿里云售卖页联盟信息查询
 */
async function queryUnionBuyEx(request: QueryUnionBuyRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryUnionBuyResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.union.buy.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryChainPublicRestRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // bizid
  bizid: string(name='bizid'),
  // region_id
  regionId?: string(name='region_id'),
}

model QueryChainPublicRestResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // AccessId
  result?: [ ALiYunChainRest ](name='result'),
}

/**
 * Description: 阿里云国内站免费体验链Rest查询
 * Summary: 阿里云国内站免费体验链Rest查询
 */
async function queryChainPublicRest(request: QueryChainPublicRestRequest): QueryChainPublicRestResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryChainPublicRestEx(request, headers, runtime);
}

/**
 * Description: 阿里云国内站免费体验链Rest查询
 * Summary: 阿里云国内站免费体验链Rest查询
 */
async function queryChainPublicRestEx(request: QueryChainPublicRestRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryChainPublicRestResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.chain.public.rest.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ApplyChainPublicRestRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // bizid
  bizid: string(name='bizid'),
  // region_id
  regionId?: string(name='region_id'),
}

model ApplyChainPublicRestResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // result
  result?: ALiYunChainRest(name='result'),
}

/**
 * Description: 阿里云国内站免费体验链申请Rest
 * Summary: 阿里云国内站免费体验链申请Rest
 */
async function applyChainPublicRest(request: ApplyChainPublicRestRequest): ApplyChainPublicRestResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return applyChainPublicRestEx(request, headers, runtime);
}

/**
 * Description: 阿里云国内站免费体验链申请Rest
 * Summary: 阿里云国内站免费体验链申请Rest
 */
async function applyChainPublicRestEx(request: ApplyChainPublicRestRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ApplyChainPublicRestResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.chain.public.rest.apply', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ReinitChainPublicRestRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // access_id
  accessId: string(name='access_id'),
  // bizid
  bizid: string(name='bizid'),
  // region_id
  regionId?: string(name='region_id'),
  // vcode
  vcode: string(name='vcode'),
}

model ReinitChainPublicRestResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // result
  result?: ALiYunChainRest(name='result'),
}

/**
 * Description: 阿里云国内站重置Rest
 * Summary: 阿里云国内站重置Rest
 */
async function reinitChainPublicRest(request: ReinitChainPublicRestRequest): ReinitChainPublicRestResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return reinitChainPublicRestEx(request, headers, runtime);
}

/**
 * Description: 阿里云国内站重置Rest
 * Summary: 阿里云国内站重置Rest
 */
async function reinitChainPublicRestEx(request: ReinitChainPublicRestRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ReinitChainPublicRestResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.chain.public.rest.reinit', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryChainRestAntRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // ant_chain_id
  antChainId: string(name='ant_chain_id'),
  // region_id
  regionId?: string(name='region_id'),
  // consortium_id
  consortiumId: string(name='consortium_id'),
}

model QueryChainRestAntResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // result
  result?: [ ALiYunChainRest ](name='result'),
}

/**
 * Description: 阿里云国内站区块链rest查询
 * Summary: 阿里云国内站区块链rest查询
 */
async function queryChainRestAnt(request: QueryChainRestAntRequest): QueryChainRestAntResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryChainRestAntEx(request, headers, runtime);
}

/**
 * Description: 阿里云国内站区块链rest查询
 * Summary: 阿里云国内站区块链rest查询
 */
async function queryChainRestAntEx(request: QueryChainRestAntRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryChainRestAntResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.chain.rest.ant.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ApplyChainRestAntRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // ant_chain_id
  antChainId: string(name='ant_chain_id'),
  // region_id
  regionId?: string(name='region_id'),
  // consortium_id
  consortiumId: string(name='consortium_id'),
}

model ApplyChainRestAntResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // result
  result?: ALiYunChainRest(name='result'),
}

/**
 * Description: 阿里云国内站区块链rest申请
 * Summary: 阿里云国内站区块链rest申请
 */
async function applyChainRestAnt(request: ApplyChainRestAntRequest): ApplyChainRestAntResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return applyChainRestAntEx(request, headers, runtime);
}

/**
 * Description: 阿里云国内站区块链rest申请
 * Summary: 阿里云国内站区块链rest申请
 */
async function applyChainRestAntEx(request: ApplyChainRestAntRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ApplyChainRestAntResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.chain.rest.ant.apply', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ReinitChainRestAntRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // access_id
  accessId: string(name='access_id'),
  // ant_chain_id
  antChainId: string(name='ant_chain_id'),
  // consortium_id
  consortiumId: string(name='consortium_id'),
  // region_id
  regionId?: string(name='region_id'),
  // vcode
  vcode: string(name='vcode'),
}

model ReinitChainRestAntResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // result
  result?: ALiYunChainRest(name='result'),
}

/**
 * Description: 阿里云国内站区块链重置Rest
 * Summary: 阿里云国内站区块链重置Rest
 */
async function reinitChainRestAnt(request: ReinitChainRestAntRequest): ReinitChainRestAntResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return reinitChainRestAntEx(request, headers, runtime);
}

/**
 * Description: 阿里云国内站区块链重置Rest
 * Summary: 阿里云国内站区块链重置Rest
 */
async function reinitChainRestAntEx(request: ReinitChainRestAntRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ReinitChainRestAntResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.chain.rest.ant.reinit', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SendChainPublicRestRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // access_id
  accessId: string(name='access_id'),
  // bizid
  bizid: string(name='bizid'),
  // region_id
  regionId?: string(name='region_id'),
}

model SendChainPublicRestResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // result
  result?: boolean(name='result'),
}

/**
 * Description: 阿里云国内站公共链重置rest发送验证码
 * Summary: 阿里云国内站公共链重置rest发送验证码
 */
async function sendChainPublicRest(request: SendChainPublicRestRequest): SendChainPublicRestResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return sendChainPublicRestEx(request, headers, runtime);
}

/**
 * Description: 阿里云国内站公共链重置rest发送验证码
 * Summary: 阿里云国内站公共链重置rest发送验证码
 */
async function sendChainPublicRestEx(request: SendChainPublicRestRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SendChainPublicRestResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.chain.public.rest.send', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SendChainRestAntRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // access_id
  accessId: string(name='access_id'),
  // ant_chain_id
  antChainId: string(name='ant_chain_id'),
  // consortium_id
  consortiumId: string(name='consortium_id'),
  // region_id
  regionId?: string(name='region_id'),
}

model SendChainRestAntResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // result
  result?: boolean(name='result'),
}

/**
 * Description: 阿里云国内站区块链重置rest发送验证码
 * Summary: 阿里云国内站区块链重置rest发送验证码
 */
async function sendChainRestAnt(request: SendChainRestAntRequest): SendChainRestAntResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return sendChainRestAntEx(request, headers, runtime);
}

/**
 * Description: 阿里云国内站区块链重置rest发送验证码
 * Summary: 阿里云国内站区块链重置rest发送验证码
 */
async function sendChainRestAntEx(request: SendChainRestAntRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SendChainRestAntResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.chain.rest.ant.send', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryChainSubnetRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链id
  antChainId: string(name='ant_chain_id'),
  // 联盟id
  consortiumId: string(name='consortium_id'),
}

model QueryChainSubnetResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 子链列表信息
  result?: ALiYunChainSubnetList(name='result'),
}

/**
 * Description: 阿里云子链列表查询
 * Summary: 阿里云子链列表查询
 */
async function queryChainSubnet(request: QueryChainSubnetRequest): QueryChainSubnetResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryChainSubnetEx(request, headers, runtime);
}

/**
 * Description: 阿里云子链列表查询
 * Summary: 阿里云子链列表查询
 */
async function queryChainSubnetEx(request: QueryChainSubnetRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryChainSubnetResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.chain.subnet.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CheckChainSubnetCreateRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链id
  antChainId: string(name='ant_chain_id'),
  // 联盟id
  consortiumId: string(name='consortium_id'),
}

model CheckChainSubnetCreateResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 检查结果
  result?: ALiYunChainSubnetCheck(name='result'),
}

/**
 * Description: 阿里云子链创建的前置检查
 * Summary: 阿里云子链创建的前置检查
 */
async function checkChainSubnetCreate(request: CheckChainSubnetCreateRequest): CheckChainSubnetCreateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return checkChainSubnetCreateEx(request, headers, runtime);
}

/**
 * Description: 阿里云子链创建的前置检查
 * Summary: 阿里云子链创建的前置检查
 */
async function checkChainSubnetCreateEx(request: CheckChainSubnetCreateRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CheckChainSubnetCreateResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.chain.subnet.create.check', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateChainSubnetRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 主链id
  antChainId?: string(name='ant_chain_id'),
  // 子链名称
  subnetName?: string(name='subnet_name'),
  // 节点的id
  nodeId?: string(name='node_id'),
  // 联盟成员
  consortiumMember?: string(name='consortium_member'),
  // 联盟id
  consortiumId?: string(name='consortium_id'),
}

model CreateChainSubnetResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 建链结果
  result?: string(name='result'),
}

/**
 * Description: 阿里云子链创建
 * Summary: 阿里云子链创建
 */
async function createChainSubnet(request: CreateChainSubnetRequest): CreateChainSubnetResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createChainSubnetEx(request, headers, runtime);
}

/**
 * Description: 阿里云子链创建
 * Summary: 阿里云子链创建
 */
async function createChainSubnetEx(request: CreateChainSubnetRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateChainSubnetResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.chain.subnet.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExecChainSubnetRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 子链id
  antChainId?: string(name='ant_chain_id'),
  // 联盟id
  consortiumId?: string(name='consortium_id'),
  // 子链操作的枚举类型
  operateType?: string(name='operate_type'),
}

model ExecChainSubnetResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 子链启停的结果
  result?: string(name='result'),
}

/**
 * Description: 阿里云子链的启动
 * Summary: 阿里云子链的启动
 */
async function execChainSubnet(request: ExecChainSubnetRequest): ExecChainSubnetResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return execChainSubnetEx(request, headers, runtime);
}

/**
 * Description: 阿里云子链的启动
 * Summary: 阿里云子链的启动
 */
async function execChainSubnetEx(request: ExecChainSubnetRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExecChainSubnetResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.chain.subnet.exec', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateChainSubnetNameRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 子链id
  antChainId?: string(name='ant_chain_id'),
  // 联盟id
  consortiumId?: string(name='consortium_id'),
  // 子链名称
  subnetName?: string(name='subnet_name'),
}

model UpdateChainSubnetNameResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 修改子链的结果
  result?: string(name='result'),
}

/**
 * Description: 阿里云子链名称修改
 * Summary: 阿里云子链名称修改
 */
async function updateChainSubnetName(request: UpdateChainSubnetNameRequest): UpdateChainSubnetNameResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateChainSubnetNameEx(request, headers, runtime);
}

/**
 * Description: 阿里云子链名称修改
 * Summary: 阿里云子链名称修改
 */
async function updateChainSubnetNameEx(request: UpdateChainSubnetNameRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateChainSubnetNameResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.chain.subnet.name.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryChainSubnetNodeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 子链id
  antChainId?: string(name='ant_chain_id'),
  // 联盟id
  consortiumId?: string(name='consortium_id'),
}

model QueryChainSubnetNodeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 子链节点信息列表
  result?: ALiYunChainSubnetCheck(name='result'),
}

/**
 * Description: 阿里云子链节点信息查询
 * Summary: 阿里云子链节点信息查询
 */
async function queryChainSubnetNode(request: QueryChainSubnetNodeRequest): QueryChainSubnetNodeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryChainSubnetNodeEx(request, headers, runtime);
}

/**
 * Description: 阿里云子链节点信息查询
 * Summary: 阿里云子链节点信息查询
 */
async function queryChainSubnetNodeEx(request: QueryChainSubnetNodeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryChainSubnetNodeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.chain.subnet.node.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteChainSubnetNodeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 子链id
  antChainId?: string(name='ant_chain_id'),
  // 联盟id
  consortiumId?: string(name='consortium_id'),
  // 待删除的节点id
  nodeId?: string(name='node_id'),
}

model DeleteChainSubnetNodeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 删除节点的结果
  result?: string(name='result'),
}

/**
 * Description: 阿里云子链的节点删除
 * Summary: 阿里云子链的节点删除
 */
async function deleteChainSubnetNode(request: DeleteChainSubnetNodeRequest): DeleteChainSubnetNodeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteChainSubnetNodeEx(request, headers, runtime);
}

/**
 * Description: 阿里云子链的节点删除
 * Summary: 阿里云子链的节点删除
 */
async function deleteChainSubnetNodeEx(request: DeleteChainSubnetNodeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteChainSubnetNodeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.chain.subnet.node.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CheckChainSubnetNodeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 子链id
  antChainId?: string(name='ant_chain_id'),
  // 联盟id
  consortiumId?: string(name='consortium_id'),
}

model CheckChainSubnetNodeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 阿里云节点信息列表
  result?: [ ALiYunChainNodeInfo ](name='result'),
}

/**
 * Description: 阿里云子链节点添加的前置检查
 * Summary: 阿里云子链节点添加的前置检查
 */
async function checkChainSubnetNode(request: CheckChainSubnetNodeRequest): CheckChainSubnetNodeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return checkChainSubnetNodeEx(request, headers, runtime);
}

/**
 * Description: 阿里云子链节点添加的前置检查
 * Summary: 阿里云子链节点添加的前置检查
 */
async function checkChainSubnetNodeEx(request: CheckChainSubnetNodeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CheckChainSubnetNodeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.chain.subnet.node.check', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AddChainSubnetNodeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 子链节点
  antChainId?: string(name='ant_chain_id'),
  // 联盟id
  consortiumId?: string(name='consortium_id'),
  // 节点id
  nodeId?: string(name='node_id'),
}

model AddChainSubnetNodeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 添加节点的结果
  result?: string(name='result'),
}

/**
 * Description: 阿里云子链节点添加
 * Summary: 阿里云子链节点添加
 */
async function addChainSubnetNode(request: AddChainSubnetNodeRequest): AddChainSubnetNodeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return addChainSubnetNodeEx(request, headers, runtime);
}

/**
 * Description: 阿里云子链节点添加
 * Summary: 阿里云子链节点添加
 */
async function addChainSubnetNodeEx(request: AddChainSubnetNodeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddChainSubnetNodeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.chain.subnet.node.add', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryChainSubnetMemberRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 子链id
  antChainId?: string(name='ant_chain_id'),
  // 联盟id
  consortiumId?: string(name='consortium_id'),
  // 分页编号
  pageNumber?: string(name='page_number'),
  // 分页大小
  pageSize?: string(name='page_size'),
}

model QueryChainSubnetMemberResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 子链机构信息
  result?: ALiYunChainSubnetCheck(name='result'),
}

/**
 * Description: 阿里云子链机构列表查询
 * Summary: 阿里云子链机构列表查询
 */
async function queryChainSubnetMember(request: QueryChainSubnetMemberRequest): QueryChainSubnetMemberResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryChainSubnetMemberEx(request, headers, runtime);
}

/**
 * Description: 阿里云子链机构列表查询
 * Summary: 阿里云子链机构列表查询
 */
async function queryChainSubnetMemberEx(request: QueryChainSubnetMemberRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryChainSubnetMemberResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.chain.subnet.member.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteChainSubnetMemberRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 子链id
  antChainId?: string(name='ant_chain_id'),
  // 联盟id
  consortiumId?: string(name='consortium_id'),
  // 子链成员id
  memberId?: string(name='member_id'),
}

model DeleteChainSubnetMemberResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 子链成员删除结果
  result?: string(name='result'),
}

/**
 * Description: 阿里云子链成员删除
 * Summary: 阿里云子链成员删除
 */
async function deleteChainSubnetMember(request: DeleteChainSubnetMemberRequest): DeleteChainSubnetMemberResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteChainSubnetMemberEx(request, headers, runtime);
}

/**
 * Description: 阿里云子链成员删除
 * Summary: 阿里云子链成员删除
 */
async function deleteChainSubnetMemberEx(request: DeleteChainSubnetMemberRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteChainSubnetMemberResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.chain.subnet.member.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CheckChainSubnetMemberRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 子链id
  antChainId?: string(name='ant_chain_id'),
  // 联盟id
  consortiumId?: string(name='consortium_id'),
}

model CheckChainSubnetMemberResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 子链的机构列表
  result?: ALiYunChainSubnetCheck(name='result'),
}

/**
 * Description: 阿里云子链成员添加前校验
 * Summary: 阿里云子链成员添加前校验
 */
async function checkChainSubnetMember(request: CheckChainSubnetMemberRequest): CheckChainSubnetMemberResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return checkChainSubnetMemberEx(request, headers, runtime);
}

/**
 * Description: 阿里云子链成员添加前校验
 * Summary: 阿里云子链成员添加前校验
 */
async function checkChainSubnetMemberEx(request: CheckChainSubnetMemberRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CheckChainSubnetMemberResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.chain.subnet.member.check', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AddChainSubnetMemberRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 子链id
  antChainId?: string(name='ant_chain_id'),
  // 联盟id
  consortiumId?: string(name='consortium_id'),
  // 联盟成员id
  consortiumMemberId?: string(name='consortium_member_id'),
}

model AddChainSubnetMemberResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 子链添加成员的结果
  result?: string(name='result'),
}

/**
 * Description: 阿里云子链成员添加
 * Summary: 阿里云子链成员添加
 */
async function addChainSubnetMember(request: AddChainSubnetMemberRequest): AddChainSubnetMemberResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return addChainSubnetMemberEx(request, headers, runtime);
}

/**
 * Description: 阿里云子链成员添加
 * Summary: 阿里云子链成员添加
 */
async function addChainSubnetMemberEx(request: AddChainSubnetMemberRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddChainSubnetMemberResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.chain.subnet.member.add', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ApplyChainSubnetRestRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 子链id
  antChainId?: string(name='ant_chain_id'),
  // 联盟id
  consortiumId?: string(name='consortium_id'),
}

model ApplyChainSubnetRestResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 阿里云REST开通结果
  result?: ALiYunChainRest(name='result'),
}

/**
 * Description: 阿里云子链REST开通
 * Summary: 阿里云子链REST开通
 */
async function applyChainSubnetRest(request: ApplyChainSubnetRestRequest): ApplyChainSubnetRestResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return applyChainSubnetRestEx(request, headers, runtime);
}

/**
 * Description: 阿里云子链REST开通
 * Summary: 阿里云子链REST开通
 */
async function applyChainSubnetRestEx(request: ApplyChainSubnetRestRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ApplyChainSubnetRestResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.chain.subnet.rest.apply', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryChainDataexportTaskRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链id
  antChainId: string(name='ant_chain_id'),
  // 联盟id
  consortiumId: string(name='consortium_id'),
}

model QueryChainDataexportTaskResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 数据导出结果测试
  result?: string(name='result'),
}

/**
 * Description: 阿里云数据导出任务查询
 * Summary: 阿里云数据导出任务查询
 */
async function queryChainDataexportTask(request: QueryChainDataexportTaskRequest): QueryChainDataexportTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryChainDataexportTaskEx(request, headers, runtime);
}

/**
 * Description: 阿里云数据导出任务查询
 * Summary: 阿里云数据导出任务查询
 */
async function queryChainDataexportTaskEx(request: QueryChainDataexportTaskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryChainDataexportTaskResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.chain.dataexport.task.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryChainDataExportRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链id
  antChainId: string(name='ant_chain_id'),
  // 联盟id
  consortiumId: string(name='consortium_id'),
}

model QueryChainDataExportResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回结果为TriggerDTO类型的list
  result?: [ TriggerDTOStructBody ](name='result'),
}

/**
 * Description: 阿里云数据导出服务，列出所有导出任务功能接口
 * Summary: 列出所有导出任务接口
 */
async function queryChainDataExport(request: QueryChainDataExportRequest): QueryChainDataExportResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryChainDataExportEx(request, headers, runtime);
}

/**
 * Description: 阿里云数据导出服务，列出所有导出任务功能接口
 * Summary: 列出所有导出任务接口
 */
async function queryChainDataExportEx(request: QueryChainDataExportRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryChainDataExportResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.chain.data.export.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateChainDataexportTaskRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链id
  antChainId: string(name='ant_chain_id'),
  // 联盟id
  consortiumId: string(name='consortium_id'),
  // {}
  trigger: TriggerDTOStructBody(name='trigger'),
}

model CreateChainDataexportTaskResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // ""
  result?: string(name='result'),
}

/**
 * Description: 阿里云数据导出需求创建数据导出任务
 * Summary: 创建数据导出任务
 */
async function createChainDataexportTask(request: CreateChainDataexportTaskRequest): CreateChainDataexportTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createChainDataexportTaskEx(request, headers, runtime);
}

/**
 * Description: 阿里云数据导出需求创建数据导出任务
 * Summary: 创建数据导出任务
 */
async function createChainDataexportTaskEx(request: CreateChainDataexportTaskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateChainDataexportTaskResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.chain.dataexport.task.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateChainTaskIdRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链id
  antChainId: string(name='ant_chain_id'),
  // 联盟id
  consortiumId: string(name='consortium_id'),
  // TriggerDTO结构体
  trigger: TriggerDTOStructBody(name='trigger'),
}

model CreateChainTaskIdResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // ""
  result?: string(name='result'),
}

/**
 * Description: 获取预览数据（第一步：生成任务ID）
 * Summary: 获取预览数据（第一步：生成任务ID）
 */
async function createChainTaskId(request: CreateChainTaskIdRequest): CreateChainTaskIdResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createChainTaskIdEx(request, headers, runtime);
}

/**
 * Description: 获取预览数据（第一步：生成任务ID）
 * Summary: 获取预览数据（第一步：生成任务ID）
 */
async function createChainTaskIdEx(request: CreateChainTaskIdRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateChainTaskIdResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.chain.task.id.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryChainDataPreviewRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链id
  antChainId: string(name='ant_chain_id'),
  // 联盟id
  consortiumId: string(name='consortium_id'),
  // 任务id
  taskId: string(name='task_id'),
}

model QueryChainDataPreviewResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回预览数据
  result?: string(name='result'),
}

/**
 * Description: 获取预览数据（第二步：根据任务ID获取预览数据结果）
 * Summary: 根据任务ID获取预览数据结果
 */
async function queryChainDataPreview(request: QueryChainDataPreviewRequest): QueryChainDataPreviewResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryChainDataPreviewEx(request, headers, runtime);
}

/**
 * Description: 获取预览数据（第二步：根据任务ID获取预览数据结果）
 * Summary: 根据任务ID获取预览数据结果
 */
async function queryChainDataPreviewEx(request: QueryChainDataPreviewRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryChainDataPreviewResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.chain.data.preview.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryChainMappingRelationshipRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链id
  antChainId: string(name='ant_chain_id'),
  // 联盟id
  consortiumId: string(name='consortium_id'),
  // ""
  serviceId: string(name='service_id'),
  // 映射方法类型
  mappingType: string(name='mapping_type'),
}

model QueryChainMappingRelationshipResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 映射结果
  result?: string(name='result'),
}

/**
 * Description: 根据预览数据获取默认映射关系
 * Summary: 根据预览数据获取默认映射关系
 */
async function queryChainMappingRelationship(request: QueryChainMappingRelationshipRequest): QueryChainMappingRelationshipResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryChainMappingRelationshipEx(request, headers, runtime);
}

/**
 * Description: 根据预览数据获取默认映射关系
 * Summary: 根据预览数据获取默认映射关系
 */
async function queryChainMappingRelationshipEx(request: QueryChainMappingRelationshipRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryChainMappingRelationshipResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.chain.mapping.relationship.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateChainTableSqlRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链id
  antChainId: string(name='ant_chain_id'),
  // 联盟id
  consortiumId: string(name='consortium_id'),
  // {}
  trigger: TriggerDTOStructBody(name='trigger'),
}

model CreateChainTableSqlResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 创建导出MySQL任务失败，获取 Create Table 语句
  result?: string(name='result'),
}

/**
 * Description: 创建导出MySQL任务失败，获取 Create Table 语句
 * Summary: 获取 Create Table 语句
 */
async function createChainTableSql(request: CreateChainTableSqlRequest): CreateChainTableSqlResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createChainTableSqlEx(request, headers, runtime);
}

/**
 * Description: 创建导出MySQL任务失败，获取 Create Table 语句
 * Summary: 获取 Create Table 语句
 */
async function createChainTableSqlEx(request: CreateChainTableSqlRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateChainTableSqlResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.chain.table.sql.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateChainDataexportStatusRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链id
  antChainId: string(name='ant_chain_id'),
  // 联盟id
  consortiumId: string(name='consortium_id'),
  // "9481b612d6ca4cfdbecc5c5d395eda423f007745-233d-4860-8fd4-a107233ace6c"
  triggerName: string(name='trigger_name'),
  //  "Enabled/Disabled/DELETE"
  statusAction: string(name='status_action'),
}

model UpdateChainDataexportStatusResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // {}
  result?: TriggerDTOStructBody(name='result'),
}

/**
 * Description: 修改导出任务状态（启动、暂停、删除）
 * Summary: 修改导出任务状态（启动、暂停、删除）
 */
async function updateChainDataexportStatus(request: UpdateChainDataexportStatusRequest): UpdateChainDataexportStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateChainDataexportStatusEx(request, headers, runtime);
}

/**
 * Description: 修改导出任务状态（启动、暂停、删除）
 * Summary: 修改导出任务状态（启动、暂停、删除）
 */
async function updateChainDataexportStatusEx(request: UpdateChainDataexportStatusRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateChainDataexportStatusResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.chain.dataexport.status.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateChainDataexportTaskRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 联盟id
  consortiumId: string(name='consortium_id'),
  // 链id
  antChainId: string(name='ant_chain_id'),
  // 任务名称
  triggerName: string(name='trigger_name'),
  // 导出任务接口体
  trigger: TriggerDTOStructBody(name='trigger'),
}

model UpdateChainDataexportTaskResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  //  修改导出任务（名称、描述、告警地址）信息结构体
  //   
  result?: TriggerDTOStructBody(name='result'),
}

/**
 * Description: 修改导出任务（名称、描述、告警地址）
 * Summary: 修改导出任务（名称、描述、告警地址）
 */
async function updateChainDataexportTask(request: UpdateChainDataexportTaskRequest): UpdateChainDataexportTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateChainDataexportTaskEx(request, headers, runtime);
}

/**
 * Description: 修改导出任务（名称、描述、告警地址）
 * Summary: 修改导出任务（名称、描述、告警地址）
 */
async function updateChainDataexportTaskEx(request: UpdateChainDataexportTaskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateChainDataexportTaskResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.chain.dataexport.task.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryChainFailureLogRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链id
  antChainId: string(name='ant_chain_id'),
  // 联盟id
  consortiumId: string(name='consortium_id'),
  // ""
  triggerName: string(name='trigger_name'),
  // ""
  statusAction?: string(name='status_action'),
  // 当前页码
  pageNo?: string(name='page_no'),
  // 页面规格
  pageSize?: string(name='page_size'),
}

model QueryChainFailureLogResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // {}
  result?: CommonResponsePageableStructBody(name='result'),
}

/**
 * Description: 分页失败的展示日志（过滤器：待处理、成功、已忽略）
 * Summary: 分页失败的展示日志
 */
async function queryChainFailureLog(request: QueryChainFailureLogRequest): QueryChainFailureLogResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryChainFailureLogEx(request, headers, runtime);
}

/**
 * Description: 分页失败的展示日志（过滤器：待处理、成功、已忽略）
 * Summary: 分页失败的展示日志
 */
async function queryChainFailureLogEx(request: QueryChainFailureLogRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryChainFailureLogResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.chain.failure.log.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateChainFailureLogRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链id
  antChainId: string(name='ant_chain_id'),
  // 联盟id
  consortiumId: string(name='consortium_id'),
  // 日志名称
  triggerName?: string(name='trigger_name'),
  // 日志状态
  statusAction?: string(name='status_action'),
  // 日志id
  logId?: string(name='log_id'),
}

model UpdateChainFailureLogResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回结果
  result?: string(name='result'),
}

/**
 * Description: 批量处理失败日志（重试/忽略）
 * Summary: 批量处理失败日志（重试/忽略）
 */
async function updateChainFailureLog(request: UpdateChainFailureLogRequest): UpdateChainFailureLogResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateChainFailureLogEx(request, headers, runtime);
}

/**
 * Description: 批量处理失败日志（重试/忽略）
 * Summary: 批量处理失败日志（重试/忽略）
 */
async function updateChainFailureLogEx(request: UpdateChainFailureLogRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateChainFailureLogResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.chain.failure.log.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryChainManagedMqRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链id
  antChainId: string(name='ant_chain_id'),
  // 联盟id
  consortiumId: string(name='consortium_id'),
}

model QueryChainManagedMqResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // ManagedMQDTO接口体列表
  result?: [ ManagedMQDTOStructBody ](name='result'),
}

/**
 * Description: 列出当前用户的托管MQ实例
 * Summary: 列出当前用户的托管MQ实例
 */
async function queryChainManagedMq(request: QueryChainManagedMqRequest): QueryChainManagedMqResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryChainManagedMqEx(request, headers, runtime);
}

/**
 * Description: 列出当前用户的托管MQ实例
 * Summary: 列出当前用户的托管MQ实例
 */
async function queryChainManagedMqEx(request: QueryChainManagedMqRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryChainManagedMqResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.chain.managed.mq.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model InitChainManagedMqRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链id
  antChainId: string(name='ant_chain_id'),
  // 联盟id
  consortiumId: string(name='consortium_id'),
}

model InitChainManagedMqResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 初始化托管 MQ 实例
  result?: ManagedMQDTOStructBody(name='result'),
}

/**
 * Description: 初始化托管 MQ 实例
 * Summary: 初始化托管 MQ 实例
 */
async function initChainManagedMq(request: InitChainManagedMqRequest): InitChainManagedMqResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return initChainManagedMqEx(request, headers, runtime);
}

/**
 * Description: 初始化托管 MQ 实例
 * Summary: 初始化托管 MQ 实例
 */
async function initChainManagedMqEx(request: InitChainManagedMqRequest, headers: map[string]string, runtime: Util.RuntimeOptions): InitChainManagedMqResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.chain.managed.mq.init', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryChainUseDeclarationRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
}

model QueryChainUseDeclarationResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 用户申报用途类
  result?: [ ChainPurpose ](name='result'),
}

/**
 * Description: 查询蚂蚁链用途列表接口
 * Summary: 查询蚂蚁链用途列表
 */
async function queryChainUseDeclaration(request: QueryChainUseDeclarationRequest): QueryChainUseDeclarationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryChainUseDeclarationEx(request, headers, runtime);
}

/**
 * Description: 查询蚂蚁链用途列表接口
 * Summary: 查询蚂蚁链用途列表
 */
async function queryChainUseDeclarationEx(request: QueryChainUseDeclarationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryChainUseDeclarationResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.chain.use.declaration.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ApplyChainUseDeclarationRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 用途KEY
  chainPurposeKey: string(name='chain_purpose_key'),
  // 选择其他类型时，用户输入（必填）
  chainPurposeExtend?: string(name='chain_purpose_extend'),
  // 简短说明用途
  // 
  // 选择其他类型时，用户输入
  chainPurposeItem?: string(name='chain_purpose_item'),
}

model ApplyChainUseDeclarationResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 蚂蚁链申报用途接口体
  result?: AntChainPurposeResponse(name='result'),
}

/**
 * Description: 选择蚂蚁链用途列表中的某项，进行提交申报接口
 * Summary: 选择蚂蚁链用途列表中的某项，进行提交申报
 */
async function applyChainUseDeclaration(request: ApplyChainUseDeclarationRequest): ApplyChainUseDeclarationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return applyChainUseDeclarationEx(request, headers, runtime);
}

/**
 * Description: 选择蚂蚁链用途列表中的某项，进行提交申报接口
 * Summary: 选择蚂蚁链用途列表中的某项，进行提交申报
 */
async function applyChainUseDeclarationEx(request: ApplyChainUseDeclarationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ApplyChainUseDeclarationResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.chain.use.declaration.apply', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryChainUseListRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
}

model QueryChainUseListResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 蚂蚁链用途申报结构体
  result?: AntChainPurposeResponse(name='result'),
}

/**
 * Description: 展示用户添加申报的记录接口
 * Summary: 展示用户添加申报的记录
 */
async function queryChainUseList(request: QueryChainUseListRequest): QueryChainUseListResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryChainUseListEx(request, headers, runtime);
}

/**
 * Description: 展示用户添加申报的记录接口
 * Summary: 展示用户添加申报的记录
 */
async function queryChainUseListEx(request: QueryChainUseListRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryChainUseListResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.chain.use.list.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CheckChainSensitiveWordsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 用途KEY
  chainPurposeKey: string(name='chain_purpose_key'),
  // 敏感词检查条目内容
  chainPurposeItem: string(name='chain_purpose_item'),
}

model CheckChainSensitiveWordsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回敏感词校验结果
  result?: string(name='result'),
}

/**
 * Description: BaaS用途申报敏感词检查接口
 * Summary: BaaS用途申报敏感词检查
 */
async function checkChainSensitiveWords(request: CheckChainSensitiveWordsRequest): CheckChainSensitiveWordsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return checkChainSensitiveWordsEx(request, headers, runtime);
}

/**
 * Description: BaaS用途申报敏感词检查接口
 * Summary: BaaS用途申报敏感词检查
 */
async function checkChainSensitiveWordsEx(request: CheckChainSensitiveWordsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CheckChainSensitiveWordsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.chain.sensitive.words.check', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateChainAccountAntkmsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链账户名称
  account: string(minLength=1, name='account'),
  // 链ID
  antChainId: string(minLength=1, name='ant_chain_id'),
}

model CreateChainAccountAntkmsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 阿里云托管账户返回值
  result?: ALiYunChainKmsAccount(name='result'),
}

/**
 * Description: 阿里云MyChain创建托管账户
 * Summary: 阿里云MyChain创建托管账户
 */
async function createChainAccountAntkms(request: CreateChainAccountAntkmsRequest): CreateChainAccountAntkmsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createChainAccountAntkmsEx(request, headers, runtime);
}

/**
 * Description: 阿里云MyChain创建托管账户
 * Summary: 阿里云MyChain创建托管账户
 */
async function createChainAccountAntkmsEx(request: CreateChainAccountAntkmsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateChainAccountAntkmsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.chain.account.antkms.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model OpenChainServiceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 2e7e22c42bb8419bbf99b7f56aa2f17f
  antChainId: string(name='ant_chain_id'),
  // 联盟id
  consortiumId: string(name='consortium_id'),
  // 内部产品code
  productCode: string(name='product_code'),
  // 自定义信息，json格式
  extend?: string(name='extend'),
}

model OpenChainServiceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 服务开通受理状态：
  //     UN_OPEN(0, "product.status.unopen"),
  //     INIT(1, "product.status.init"),
  //     OPEN(2, "product.status.open"),
  //     CLOSE(3, "product.status.close"),
  //     UNKNOWN(4, "product.status.unknown"),
  //     STOP(5, "product.status.stop");
  result?: long(name='result'),
}

/**
 * Description: 阿里云渠道链相关商业化服务开通，后台经由ocp转发，实现计量计费
 * Summary: 阿里云渠道链相关商业化服务开通
 */
async function openChainService(request: OpenChainServiceRequest): OpenChainServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return openChainServiceEx(request, headers, runtime);
}

/**
 * Description: 阿里云渠道链相关商业化服务开通，后台经由ocp转发，实现计量计费
 * Summary: 阿里云渠道链相关商业化服务开通
 */
async function openChainServiceEx(request: OpenChainServiceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): OpenChainServiceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.chain.service.open', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CheckChainServiceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链id
  antChainId: string(name='ant_chain_id'),
  // 联盟id
  consortiumId: string(name='consortium_id'),
  // BAAS-SERVICE1
  productCode: string(name='product_code'),
}

model CheckChainServiceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 服务开通受理状态： UN_OPEN(0, "product.status.unopen"), INIT(1, "product.status.init"), OPEN(2, "product.status.open"), CLOSE(3, "product.status.close"), UNKNOWN(4, "product.status.unknown"), STOP(5, "product.status.stop");
  result?: long(name='result'),
}

/**
 * Description: 阿里云渠道链相关商业化服务开通结果查询
 * Summary: 阿里云渠道链相关商业化服务开通结果查询
 */
async function checkChainService(request: CheckChainServiceRequest): CheckChainServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return checkChainServiceEx(request, headers, runtime);
}

/**
 * Description: 阿里云渠道链相关商业化服务开通结果查询
 * Summary: 阿里云渠道链相关商业化服务开通结果查询
 */
async function checkChainServiceEx(request: CheckChainServiceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CheckChainServiceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.chain.service.check', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CloseChainServiceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链id
  antChainId: string(name='ant_chain_id'),
  // 联盟id
  consortiumId: string(name='consortium_id'),
  // 内部产品code
  productCode: string(name='product_code'),
  // 自定义信息，json格式
  extend?: string(name='extend'),
}

model CloseChainServiceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 服务关闭受理状态： UN_OPEN(0, "product.status.unopen"), INIT(1, "product.status.init"), OPEN(2, "product.status.open"), CLOSE(3, "product.status.close"), UNKNOWN(4, "product.status.unknown"), STOP(5, "product.status.stop");
  result?: long(name='result'),
}

/**
 * Description: 阿里云渠道链相关商业化服务开通，后台经由ocp转发，实现服务关闭
 * Summary: 阿里云渠道链相关商业化服务关闭
 */
async function closeChainService(request: CloseChainServiceRequest): CloseChainServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return closeChainServiceEx(request, headers, runtime);
}

/**
 * Description: 阿里云渠道链相关商业化服务开通，后台经由ocp转发，实现服务关闭
 * Summary: 阿里云渠道链相关商业化服务关闭
 */
async function closeChainServiceEx(request: CloseChainServiceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CloseChainServiceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.chain.service.close', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartAmlCorporationJoinprepareRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 企业加入BaaS创建的反洗钱联盟时使用的邮箱地址
  email: string(name='email'),
  // 扩展信息字段
  extension?: string(name='extension'),
  // 目前支持ECDSA K1公私密钥对
  publicKey: string(name='public_key'),
  // 数字身份恢复密钥，支持ECDSA K1曲线的公私密钥对
  recoveryKey?: string(name='recovery_key'),
}

model StartAmlCorporationJoinprepareResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 企业在反洗钱联盟中的唯一区块链标示，后续和平台的交互都要通过该标示
  did?: string(name='did'),
  // mytf的认证信息，加盟方可以验证其有效性
  mytfInfo?: string(name='mytf_info'),
  // 平台提供的各类tapp信息，入驻方需要从中选择自己使用的tapp，并记录下tapp的加密私钥和签名密钥；后续平台发给加盟放的所有信息都会携带签名；而所有发往TAPP的数据都需要使用对应加密公钥进行加密来保证数据安全
  tappInfos?: [ string ](name='tapp_infos'),
}

/**
 * Description: 企业通过调用该接口准备接入反洗钱信息共享平台
 * Summary: 反洗钱信息共享平台入驻接口
 */
async function startAmlCorporationJoinprepare(request: StartAmlCorporationJoinprepareRequest): StartAmlCorporationJoinprepareResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startAmlCorporationJoinprepareEx(request, headers, runtime);
}

/**
 * Description: 企业通过调用该接口准备接入反洗钱信息共享平台
 * Summary: 反洗钱信息共享平台入驻接口
 */
async function startAmlCorporationJoinprepareEx(request: StartAmlCorporationJoinprepareRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartAmlCorporationJoinprepareResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.aml.corporation.joinprepare.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartAmlCorporationJoincommitRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 入驻准备阶段得到的数字标识
  did: string(name='did'),
  // 选择采用的TAPP ID编号，如果不填，系统将选择默认的kyc tapp进行执行
  tappId?: string(name='tapp_id'),
  // 对应tapp的版本号。默认选择最新版本
  tappVersion?: long(name='tapp_version'),
}

model StartAmlCorporationJoincommitResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 反洗钱信息共享平台确认加盟接口，用户在准备阶段确认了平台安全性之后可以确认入驻
 * Summary: 反洗钱信息共享平台确认加盟接口
 */
async function startAmlCorporationJoincommit(request: StartAmlCorporationJoincommitRequest): StartAmlCorporationJoincommitResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startAmlCorporationJoincommitEx(request, headers, runtime);
}

/**
 * Description: 反洗钱信息共享平台确认加盟接口，用户在准备阶段确认了平台安全性之后可以确认入驻
 * Summary: 反洗钱信息共享平台确认加盟接口
 */
async function startAmlCorporationJoincommitEx(request: StartAmlCorporationJoincommitRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartAmlCorporationJoincommitResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.aml.corporation.joincommit.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartAmlPersonTwofactorRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 完整证件号，与证件类型配对
  certNo: string(name='cert_no'),
  // 证件类型
  // 001，身份证
  // 目前只支持身份证
  certType: long(name='cert_type'),
  // 张三
  name: string(name='name'),
}

model StartAmlPersonTwofactorResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 如果验证通过会为用户创建did
  did?: string(name='did'),
}

/**
 * Description: 反洗钱系统二要素实名认证
 * Summary: 反洗钱系统二要素实名认证
 */
async function startAmlPersonTwofactor(request: StartAmlPersonTwofactorRequest): StartAmlPersonTwofactorResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startAmlPersonTwofactorEx(request, headers, runtime);
}

/**
 * Description: 反洗钱系统二要素实名认证
 * Summary: 反洗钱系统二要素实名认证
 */
async function startAmlPersonTwofactorEx(request: StartAmlPersonTwofactorRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartAmlPersonTwofactorResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.aml.person.twofactor.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SaveBusinessDepositRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 业务链对应的bizId    
  // 
  bizId: string(name='biz_id'),
  // 存证的内容
  data: string(name='data'),
  // 用户的did地址
  did: string(name='did'),
  // 任意用户自定义的keyId(需要唯一)，根据该keyId可以查找存证的内容，若不填则使用txHash作为keyId
  keyId?: string(name='key_id'),
}

model SaveBusinessDepositResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // bizid+accountid+keyId/txHash 组成的唯一id，用户可以根据该id到服务中查询链上内容
  depositId?: string(name='deposit_id'),
  // 是否存在成功
  status?: string(name='status'),
  // 链上返回的txHash值
  txHash?: string(name='tx_hash'),
}

/**
 * Description: 简单存证
 * Summary: 简单存证
 */
async function saveBusinessDeposit(request: SaveBusinessDepositRequest): SaveBusinessDepositResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return saveBusinessDepositEx(request, headers, runtime);
}

/**
 * Description: 简单存证
 * Summary: 简单存证
 */
async function saveBusinessDepositEx(request: SaveBusinessDepositRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SaveBusinessDepositResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.business.deposit.save', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SaveBusinessDepositMetadataRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 业务链对应的bizId    
  // 
  bizId: string(name='biz_id'),
  // 具体存证的内容
  data: [ DepositMetaDataItem ](name='data'),
  // 用户的did地址
  did: string(name='did'),
  // 用户自定义唯一keyId，可用该keyId到业务服务中查询存证内容
  keyId?: string(name='key_id'),
}

model SaveBusinessDepositMetadataResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 存证id，由bizId+accountId+keyId组成
  depositId?: string(name='deposit_id'),
  // 是否存证成功
  status?: string(name='status'),
  // 链上存证对应的txHash
  txHash?: string(name='tx_hash'),
}

/**
 * Description: 存储带有描述性的数据
 * Summary: 存储带有描述性的数据
 */
async function saveBusinessDepositMetadata(request: SaveBusinessDepositMetadataRequest): SaveBusinessDepositMetadataResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return saveBusinessDepositMetadataEx(request, headers, runtime);
}

/**
 * Description: 存储带有描述性的数据
 * Summary: 存储带有描述性的数据
 */
async function saveBusinessDepositMetadataEx(request: SaveBusinessDepositMetadataRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SaveBusinessDepositMetadataResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.business.deposit.metadata.save', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SaveBusinessDepositEncryptRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 业务链对应的bizId    
  bizId: string(name='biz_id'),
  // 要加密存储的内容
  data: string(name='data'),
  // 用户did地址
  did: string(name='did'),
  // 业务唯一id，只需要本用户的应用唯一即可，因为最终会与用户的accountId拼接起来
  keyId?: string(name='key_id'),
}

model SaveBusinessDepositEncryptResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 可以用该id到服务上查询链的信息
  depositId?: string(name='deposit_id'),
  // 是否存证成功
  status?: string(name='status'),
  // 交易的txHash
  txHash?: string(name='tx_hash'),
}

/**
 * Description: 将存证的数据在链上加密
 * Summary: 将存证的数据在链上加密
 */
async function saveBusinessDepositEncrypt(request: SaveBusinessDepositEncryptRequest): SaveBusinessDepositEncryptResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return saveBusinessDepositEncryptEx(request, headers, runtime);
}

/**
 * Description: 将存证的数据在链上加密
 * Summary: 将存证的数据在链上加密
 */
async function saveBusinessDepositEncryptEx(request: SaveBusinessDepositEncryptRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SaveBusinessDepositEncryptResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.business.deposit.encrypt.save', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SaveBusinessDepositEncryptmetadataRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 业务链对应的bizId    
  // 
  bizId: string(name='biz_id'),
  // 要加密的数据
  data: string(name='data'),
  // 用户的did身份地址
  did: string(name='did'),
  // 业务唯一id，只需要本链本用户所用的业务keyId唯一即可
  keyId?: string(name='key_id'),
  // 存证内容描述，格式为json，其中type为支持的类型：
  // text：文本类型 
  // image：图片类型(待添加) 
  // video：视频类型(待添加) 
  // txHash：存证引用类型(待添加) 
  // map:地图类型(待添加)
  metadata: string(name='metadata'),
}

model SaveBusinessDepositEncryptmetadataResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 存证id，由bizId+accountId+keyId组成
  depositId?: string(name='deposit_id'),
  // 是否存证成功
  status?: string(name='status'),
  // 链上交易的id
  txHash?: string(name='tx_hash'),
}

/**
 * Description: 存证带有描述性的数据并加密
 * Summary: 存证带有描述性的数据并加密
 */
async function saveBusinessDepositEncryptmetadata(request: SaveBusinessDepositEncryptmetadataRequest): SaveBusinessDepositEncryptmetadataResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return saveBusinessDepositEncryptmetadataEx(request, headers, runtime);
}

/**
 * Description: 存证带有描述性的数据并加密
 * Summary: 存证带有描述性的数据并加密
 */
async function saveBusinessDepositEncryptmetadataEx(request: SaveBusinessDepositEncryptmetadataRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SaveBusinessDepositEncryptmetadataResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.business.deposit.encryptmetadata.save', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateBusinessDidRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 用户身份证号
  idCardNumber: string(name='id_card_number'),
  // 用户手机号
  phoneNumber: string(name='phone_number'),
  // 用户姓名
  userName: string(name='user_name'),
}

model CreateBusinessDidResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 链的业务编号
  bizId?: string(name='biz_id'),
  // 生成的did用户身份号
  did?: string(name='did'),
  // isv创建者身份
  isvAccount?: string(name='isv_account'),
  // 是否创建成功
  status?: string(name='status'),
}

/**
 * Description: 通过授权宝创建did
 * Summary: 创建did
 */
async function createBusinessDid(request: CreateBusinessDidRequest): CreateBusinessDidResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createBusinessDidEx(request, headers, runtime);
}

/**
 * Description: 通过授权宝创建did
 * Summary: 创建did
 */
async function createBusinessDidEx(request: CreateBusinessDidRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateBusinessDidResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.business.did.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateBusinessBizaccountRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 业务链对应的bizId
  bizId: string(name='biz_id'),
  // 申请者对应的did账户
  did: string(name='did'),
}

model CreateBusinessBizaccountResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // did地址
  did?: string(name='did'),
  // 租户账户
  isvAccount?: string(name='isv_account'),
  // 生成的账户在kms上的密钥id    
  // 
  kmsId?: string(name='kms_id'),
  // 调用接口是否成功
  status?: string(name='status'),
}

/**
 * Description: 根据did创建链上账户
 * Summary: 根据did创建链上账户
 */
async function createBusinessBizaccount(request: CreateBusinessBizaccountRequest): CreateBusinessBizaccountResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createBusinessBizaccountEx(request, headers, runtime);
}

/**
 * Description: 根据did创建链上账户
 * Summary: 根据did创建链上账户
 */
async function createBusinessBizaccountEx(request: CreateBusinessBizaccountRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateBusinessBizaccountResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.business.bizaccount.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryBusinessDepositRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 业务链对应的bizId    
  // 
  bizId: string(name='biz_id'),
  // 用户did身份
  did: string(name='did'),
  // 存证数据业务逻辑id
  keyId: string(name='key_id'),
  // 存证数据对应的链上交易哈希，若无则返回最新的交易哈希。
  txHash?: string(name='tx_hash'),
}

model QueryBusinessDepositResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 具体存证数据
  depositData?: string(name='deposit_data'),
  // 业务逻辑对应的存证id
  depositId?: string(name='deposit_id'),
  // keyId对应的所有相关的历史交易记录
  historyTxHashes?: [ string ](name='history_tx_hashes'),
  // 是否查询成功
  status?: string(name='status'),
}

/**
 * Description: 查询存证数据
 * Summary: 查询存证数据
 */
async function queryBusinessDeposit(request: QueryBusinessDepositRequest): QueryBusinessDepositResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryBusinessDepositEx(request, headers, runtime);
}

/**
 * Description: 查询存证数据
 * Summary: 查询存证数据
 */
async function queryBusinessDepositEx(request: QueryBusinessDepositRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryBusinessDepositResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.business.deposit.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AuthBusinessDepositdataRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 业务链对应的bizId    
  // 
  bizId: string(name='biz_id'),
  // 授权者身份
  did: string(name='did'),
  // 被授权者did身份
  grantedDid: string(name='granted_did'),
  // 被授权的字段
  itemKeyId: [ string ](name='item_key_id'),
  // 业务逻辑唯一id
  keyId: string(name='key_id'),
}

model AuthBusinessDepositdataResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 被授权的逻辑交易
  depositId?: string(name='deposit_id'),
  // 是否授权调用成功
  status?: string(name='status'),
}

/**
 * Description: 授权存证数据
 * Summary: 授权存证数据
 */
async function authBusinessDepositdata(request: AuthBusinessDepositdataRequest): AuthBusinessDepositdataResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return authBusinessDepositdataEx(request, headers, runtime);
}

/**
 * Description: 授权存证数据
 * Summary: 授权存证数据
 */
async function authBusinessDepositdataEx(request: AuthBusinessDepositdataRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AuthBusinessDepositdataResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.business.depositdata.auth', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateBusinessContractDeployRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 业务链对应的bizId
  bizId: string(name='biz_id'),
  // 合约代码
  contractCode: string(name='contract_code'),
  // 合约名称
  contractName: string(name='contract_name'),
  // 合约类型
  contractType: long(name='contract_type'),
  // 合约部署者did身份
  did: string(name='did'),
  // 构造函数传入参数
  inputData?: string(name='input_data'),
}

model CreateBusinessContractDeployResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 部署合约返回值
  data?: string(name='data'),
  // 是否调用成功
  status?: long(name='status'),
  // 部署合约在链上对应的交易地址
  txHash?: string(name='tx_hash'),
}

/**
 * Description: 创建部署合约
 * Summary: 创建部署合约
 */
async function createBusinessContractDeploy(request: CreateBusinessContractDeployRequest): CreateBusinessContractDeployResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createBusinessContractDeployEx(request, headers, runtime);
}

/**
 * Description: 创建部署合约
 * Summary: 创建部署合约
 */
async function createBusinessContractDeployEx(request: CreateBusinessContractDeployRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateBusinessContractDeployResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.business.contract.deploy.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateBusinessContractnormalcallRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 业务链对应的bizId    
  // 
  bizId: string(name='biz_id'),
  // 合约名称
  contractName: string(name='contract_name'),
  // 合约类型
  contractType: long(name='contract_type'),
  // 调用合约者身份
  did: string(name='did'),
  // 传入参数
  inputData: string(name='input_data'),
  // 合约接口名称
  methodSignature: string(name='method_signature'),
  // 返回值类型
  outputType: string(name='output_type'),
}

model CreateBusinessContractnormalcallResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 调用合约接口返回值
  data?: string(name='data'),
  // 是否调用成功
  status?: long(name='status'),
  // 调用合约的交易地址
  txHash?: string(name='tx_hash'),
}

/**
 * Description: 普通合约接口调用
 * Summary: 普通合约接口调用
 */
async function createBusinessContractnormalcall(request: CreateBusinessContractnormalcallRequest): CreateBusinessContractnormalcallResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createBusinessContractnormalcallEx(request, headers, runtime);
}

/**
 * Description: 普通合约接口调用
 * Summary: 普通合约接口调用
 */
async function createBusinessContractnormalcallEx(request: CreateBusinessContractnormalcallRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateBusinessContractnormalcallResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.business.contractnormalcall.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateBusinessContractencryptcallRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 业务链对应的bizId    
  bizId: string(name='biz_id'),
  // 合约名称
  contractName: string(name='contract_name'),
  // 合约类型
  contractType: long(name='contract_type'),
  // 具体数据的定义，加密在服务端，需传入原始值、类型及key等相关信息
  data: [ ContractEncryptKeyItem ](name='data'),
  // 调用合约者用户身份
  did: string(name='did'),
  // 合约方法名
  methodSignature: string(name='method_signature'),
  // 返回值类型
  outputType: string(name='output_type'),
}

model CreateBusinessContractencryptcallResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 合约返回参数
  data?: string(name='data'),
  // 是否调用成功
  status?: long(name='status'),
  // 链上合约交易调用地址
  txHash?: string(name='tx_hash'),
}

/**
 * Description: 调用加密合约接口
 * Summary: 调用加密合约接口
 */
async function createBusinessContractencryptcall(request: CreateBusinessContractencryptcallRequest): CreateBusinessContractencryptcallResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createBusinessContractencryptcallEx(request, headers, runtime);
}

/**
 * Description: 调用加密合约接口
 * Summary: 调用加密合约接口
 */
async function createBusinessContractencryptcallEx(request: CreateBusinessContractencryptcallRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateBusinessContractencryptcallResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.business.contractencryptcall.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryBusinessContractreceiptRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 业务链的bizId
  bizId: string(name='biz_id'),
  // 调用者用户did
  did: string(name='did'),
  // 链上交易txHash
  txHash: string(name='tx_hash'),
}

model QueryBusinessContractreceiptResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 链上txHash对应的内容
  data?: string(name='data'),
  // 接口调用是否成功
  status?: long(name='status'),
  // 对应的链上交易txHash
  txHash?: string(name='tx_hash'),
}

/**
 * Description: 查询交易receipt
 * Summary: 查询交易receipt
 */
async function queryBusinessContractreceipt(request: QueryBusinessContractreceiptRequest): QueryBusinessContractreceiptResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryBusinessContractreceiptEx(request, headers, runtime);
}

/**
 * Description: 查询交易receipt
 * Summary: 查询交易receipt
 */
async function queryBusinessContractreceiptEx(request: QueryBusinessContractreceiptRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryBusinessContractreceiptResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.business.contractreceipt.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryBusinessContractencryptreceiptRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链的业务bizId
  bizId: string(name='biz_id'),
  // test_contract_name
  contractName: string(name='contract_name'),
  // 调用者用户身份
  did: string(name='did'),
  // 交易对应的链上地址
  txHash: string(name='tx_hash'),
}

model QueryBusinessContractencryptreceiptResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // txHash对应的交易内容
  data?: string(name='data'),
  // 调用接口是否成功
  status?: long(name='status'),
  // 交易对应的txHash
  txHash?: string(name='tx_hash'),
}

/**
 * Description: 查询加密的receipt
 * Summary: 查询加密的receipt
 */
async function queryBusinessContractencryptreceipt(request: QueryBusinessContractencryptreceiptRequest): QueryBusinessContractencryptreceiptResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryBusinessContractencryptreceiptEx(request, headers, runtime);
}

/**
 * Description: 查询加密的receipt
 * Summary: 查询加密的receipt
 */
async function queryBusinessContractencryptreceiptEx(request: QueryBusinessContractencryptreceiptRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryBusinessContractencryptreceiptResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.business.contractencryptreceipt.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryBusinessContractencryptmethodRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 合约链所在地址
  bizId: string(name='biz_id'),
  // 合约名称
  contractName: string(name='contract_name'),
  // 合约类型
  contractType: long(name='contract_type'),
  // 用户的did身份
  did: string(name='did'),
  // 输入参数
  inputData: string(name='input_data'),
  // 查询方法名接口
  methodSignature: string(name='method_signature'),
}

model QueryBusinessContractencryptmethodResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 查询方法返回值
  data?: string(name='data'),
  // 是否接口调用成功
  status?: long(name='status'),
  // 该查询方法在链上所发的交易
  txHash?: string(name='tx_hash'),
}

/**
 * Description: 查询合约加密内容的方法
 * Summary: 查询合约加密内容的方法
 */
async function queryBusinessContractencryptmethod(request: QueryBusinessContractencryptmethodRequest): QueryBusinessContractencryptmethodResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryBusinessContractencryptmethodEx(request, headers, runtime);
}

/**
 * Description: 查询合约加密内容的方法
 * Summary: 查询合约加密内容的方法
 */
async function queryBusinessContractencryptmethodEx(request: QueryBusinessContractencryptmethodRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryBusinessContractencryptmethodResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.business.contractencryptmethod.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeployBusinessAgreementRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 业务链的id编号
  bizId: string(name='biz_id'),
  // 合约名称
  contractName: string(name='contract_name'),
  // 用户的did身份
  did: string(name='did'),
}

model DeployBusinessAgreementResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回值
  data?: string(name='data'),
  // 0表示成功
  status?: long(name='status'),
  // 部署合约交易在链上的地址
  txHash?: string(name='tx_hash'),
}

/**
 * Description: 部署业务共识合约
 * Summary: 部署业务共识合约
 */
async function deployBusinessAgreement(request: DeployBusinessAgreementRequest): DeployBusinessAgreementResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deployBusinessAgreementEx(request, headers, runtime);
}

/**
 * Description: 部署业务共识合约
 * Summary: 部署业务共识合约
 */
async function deployBusinessAgreementEx(request: DeployBusinessAgreementRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeployBusinessAgreementResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.business.agreement.deploy', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateBusinessAgreementRegistertemplateRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 业务链对应的bizId
  bizId: string(name='biz_id'),
  // 合约名称
  contractName: string(name='contract_name'),
  // 用户did身份
  did: string(name='did'),
  // 业务共识模板
  template: string(name='template'),
}

model CreateBusinessAgreementRegistertemplateResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 注册合约模板，链上合约返回值
  data?: string(name='data'),
  // 是否该接口调用成功
  status?: long(name='status'),
  // 该调用对应链上的交易地址
  txHash?: string(name='tx_hash'),
}

/**
 * Description: 创建业务共识模板
 * Summary: 创建业务共识模板
 */
async function createBusinessAgreementRegistertemplate(request: CreateBusinessAgreementRegistertemplateRequest): CreateBusinessAgreementRegistertemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createBusinessAgreementRegistertemplateEx(request, headers, runtime);
}

/**
 * Description: 创建业务共识模板
 * Summary: 创建业务共识模板
 */
async function createBusinessAgreementRegistertemplateEx(request: CreateBusinessAgreementRegistertemplateRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateBusinessAgreementRegistertemplateResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.business.agreement.registertemplate.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateBusinessAgreementRegisterRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 业务链的bizId
  bizId: string(name='biz_id'),
  // 回调合约方法
  callbackMethod: string(name='callback_method'),
  // 回调合约名称
  contractId: string(name='contract_id'),
  // 合约名称
  contractName: string(name='contract_name'),
  // 用户身份的did
  did: string(name='did'),
  // 回调key
  key: string(name='key'),
  // 合约模板id
  templateId: string(name='template_id'),
}

model CreateBusinessAgreementRegisterResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 合约调用返回值
  data?: string(name='data'),
  // 该接口是否调用成功
  status?: long(name='status'),
  // 该交易对应的链上地址
  txHash?: string(name='tx_hash'),
}

/**
 * Description: 注册业务共识实例
 * Summary: 注册业务共识实例
 */
async function createBusinessAgreementRegister(request: CreateBusinessAgreementRegisterRequest): CreateBusinessAgreementRegisterResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createBusinessAgreementRegisterEx(request, headers, runtime);
}

/**
 * Description: 注册业务共识实例
 * Summary: 注册业务共识实例
 */
async function createBusinessAgreementRegisterEx(request: CreateBusinessAgreementRegisterRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateBusinessAgreementRegisterResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.business.agreement.register.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateBusinessAgreementSignRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 业务链bizId
  bizId: string(name='biz_id'),
  // 回调合约名称
  contractId: string(name='contract_id'),
  // 业务共识合约名称
  contractName: string(name='contract_name'),
  // 用户did身份
  did: string(name='did'),
  // 业务共识唯一标识
  key: string(name='key'),
  // 用户签名
  signData: string(name='sign_data'),
}

model CreateBusinessAgreementSignResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 该合约调用返回值
  data?: string(name='data'),
  // 该接口是否调用成功，0表示成功
  status?: long(name='status'),
  // 该调用对应的链上交易地址
  txHash?: string(name='tx_hash'),
}

/**
 * Description: 对业务共识key进行签名认可
 * Summary: 对业务共识key进行签名认可
 */
async function createBusinessAgreementSign(request: CreateBusinessAgreementSignRequest): CreateBusinessAgreementSignResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createBusinessAgreementSignEx(request, headers, runtime);
}

/**
 * Description: 对业务共识key进行签名认可
 * Summary: 对业务共识key进行签名认可
 */
async function createBusinessAgreementSignEx(request: CreateBusinessAgreementSignRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateBusinessAgreementSignResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.business.agreement.sign.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryBusinessAgreementRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 业务共识链id
  bizId: string(name='biz_id'),
  // 回调合约id
  contractId: string(name='contract_id'),
  // 业务共识合约id
  contractName: string(name='contract_name'),
  // 发起者did账户
  did: string(name='did'),
  // 业务共识唯一id
  key: string(name='key'),
}

model QueryBusinessAgreementResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 当前该共识的状态信息
  data?: string(name='data'),
  // 业务共识查询接口是否调用成功，0表示成功
  status?: long(name='status'),
  // 该接口调用对应的链上交易地址
  txHash?: string(name='tx_hash'),
}

/**
 * Description: 查询业务共识当前状态
 * Summary: 查询业务共识当前状态
 */
async function queryBusinessAgreement(request: QueryBusinessAgreementRequest): QueryBusinessAgreementResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryBusinessAgreementEx(request, headers, runtime);
}

/**
 * Description: 查询业务共识当前状态
 * Summary: 查询业务共识当前状态
 */
async function queryBusinessAgreementEx(request: QueryBusinessAgreementRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryBusinessAgreementResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.business.agreement.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateBusinessContractGrantdidRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 租户业务链地址biz_id
  bizId: string(name='biz_id'),
  // 授权的合约名称
  contractName: string(name='contract_name'),
  // 用户did身份
  did: string(name='did'),
  // 授权截止日期
  dueTime: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='due_time'),
  // 被授权者身份
  grantedDid: string(name='granted_did'),
  // 授权的字段
  itemIds: [ string ](name='item_ids'),
}

model CreateBusinessContractGrantdidResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 成功被授权的字段
  data?: string(name='data'),
  // 该接口是否调用成功，0表示成功
  status?: long(name='status'),
}

/**
 * Description: 对合约隐私key授权
 * Summary: 对合约隐私key授权
 */
async function createBusinessContractGrantdid(request: CreateBusinessContractGrantdidRequest): CreateBusinessContractGrantdidResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createBusinessContractGrantdidEx(request, headers, runtime);
}

/**
 * Description: 对合约隐私key授权
 * Summary: 对合约隐私key授权
 */
async function createBusinessContractGrantdidEx(request: CreateBusinessContractGrantdidRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateBusinessContractGrantdidResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.business.contract.grantdid.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryBusinessDepositEncryptedmetadataRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链的业务id
  bizId: string(name='biz_id'),
  // 发起者的did身份
  did: string(name='did'),
  // 存证的唯一主键key_id
  keyId: string(name='key_id'),
  // 被存证的交易txHash，若不传则默认key_id最近的交易hash
  txHash?: string(name='tx_hash'),
}

model QueryBusinessDepositEncryptedmetadataResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 被存证的数据
  depositData?: string(name='deposit_data'),
  // 存证的唯一主键
  depositId?: string(name='deposit_id'),
  // 被存证的主键关联的历史交易
  historyTxId?: [ string ](name='history_tx_id'),
  // 是否查询成功
  status?: string(name='status'),
}

/**
 * Description: 查询被加密的存证数据
 * Summary: 查询被加密的存证数据
 */
async function queryBusinessDepositEncryptedmetadata(request: QueryBusinessDepositEncryptedmetadataRequest): QueryBusinessDepositEncryptedmetadataResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryBusinessDepositEncryptedmetadataEx(request, headers, runtime);
}

/**
 * Description: 查询被加密的存证数据
 * Summary: 查询被加密的存证数据
 */
async function queryBusinessDepositEncryptedmetadataEx(request: QueryBusinessDepositEncryptedmetadataRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryBusinessDepositEncryptedmetadataResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.business.deposit.encryptedmetadata.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AuthBusinessDepositdataCorpRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 被授权的存证数据所在的链
  bizId: string(name='biz_id'),
  // 被授权者的did数字身份
  did: string(name='did'),
  // 授权的截止日期，超过该日期后，该组织不再具有访问加密数据的权限
  dueTime: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='due_time'),
  // 被授权的组织名
  grantedCorp: string(name='granted_corp'),
  // 被授权的字段
  itemKeyId: [ string ](name='item_key_id'),
  // 被授权的存证内容逻辑主键
  keyId: string(name='key_id'),
}

model AuthBusinessDepositdataCorpResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 被授权的逻辑主字段(biz_id与key_id的拼接）
  depositId?: string(name='deposit_id'),
  // 是否授权成功
  status?: string(name='status'),
  // deposit_id对应的当前最新的交易
  txHash?: string(name='tx_hash'),
}

/**
 * Description: 授权存证数据给对应的组织机构，该组织下所有的人员都可以查询该存证数据的原内容
 * Summary: 授权存证数据给对应的组织机构
 */
async function authBusinessDepositdataCorp(request: AuthBusinessDepositdataCorpRequest): AuthBusinessDepositdataCorpResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return authBusinessDepositdataCorpEx(request, headers, runtime);
}

/**
 * Description: 授权存证数据给对应的组织机构，该组织下所有的人员都可以查询该存证数据的原内容
 * Summary: 授权存证数据给对应的组织机构
 */
async function authBusinessDepositdataCorpEx(request: AuthBusinessDepositdataCorpRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AuthBusinessDepositdataCorpResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.business.depositdata.corp.auth', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CancelBusinessDepositGrantdidRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 存证数据的发起者did身份
  did: string(name='did'),
  // 取消授权的did数字身份
  grantedDid: string(name='granted_did'),
  // 取消授权的字段名称
  itemKeyId: [ string ](name='item_key_id'),
  // 存证数据的主键
  keyId: string(name='key_id'),
}

model CancelBusinessDepositGrantdidResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 取消授权的主键
  depositId?: string(name='deposit_id'),
  // 取消授权成功
  status?: string(name='status'),
}

/**
 * Description: 取消存证数据授权给账户
 * Summary: 取消存证数据授权给账户
 */
async function cancelBusinessDepositGrantdid(request: CancelBusinessDepositGrantdidRequest): CancelBusinessDepositGrantdidResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return cancelBusinessDepositGrantdidEx(request, headers, runtime);
}

/**
 * Description: 取消存证数据授权给账户
 * Summary: 取消存证数据授权给账户
 */
async function cancelBusinessDepositGrantdidEx(request: CancelBusinessDepositGrantdidRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CancelBusinessDepositGrantdidResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.business.deposit.grantdid.cancel', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CancelBusinessDepositGrantcorpRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 数据存证所在链的业务id
  bizId: string(name='biz_id'),
  // 存证数据的发起者did数字身份
  did: string(name='did'),
  // 取消授权的组织名称
  grantedCorp: string(name='granted_corp'),
  // 取消授权的子列名称
  itemKeyId: [ string ](name='item_key_id'),
  // 存证数据的逻辑主keyId
  keyId: string(name='key_id'),
}

model CancelBusinessDepositGrantcorpResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 存证数据的逻辑主id(biz_id与key_id的拼接)
  depositId?: string(name='deposit_id'),
  // 是否取消授权成功
  status?: string(name='status'),
}

/**
 * Description: 取消存证授权给组织机构
 * Summary: 取消存证授权给组织机构
 */
async function cancelBusinessDepositGrantcorp(request: CancelBusinessDepositGrantcorpRequest): CancelBusinessDepositGrantcorpResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return cancelBusinessDepositGrantcorpEx(request, headers, runtime);
}

/**
 * Description: 取消存证授权给组织机构
 * Summary: 取消存证授权给组织机构
 */
async function cancelBusinessDepositGrantcorpEx(request: CancelBusinessDepositGrantcorpRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CancelBusinessDepositGrantcorpResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.business.deposit.grantcorp.cancel', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateBusinessContractGrantcorpRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 数据所在的链业务id
  bizId: string(name='biz_id'),
  // 合约名称
  contractName: string(name='contract_name'),
  // 合约keyId发起者的数字身份
  did: string(name='did'),
  // 授权截止日期，超过该日期则不可继续访问该数据
  dueTime: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='due_time'),
  // 授权的组织名称
  grantedCorp: string(name='granted_corp'),
  // 需要授权的字段名称
  itemIds: [ string ](name='item_ids'),
}

model CreateBusinessContractGrantcorpResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 授权的字段列表
  data?: [ string ](name='data'),
  // 是否授权给组织成功，0表示成功
  status?: long(name='status'),
}

/**
 * Description: 授权合约内加密字段给机构，机构下的所有人都有权限访问该数据
 * Summary: 授权合约内加密字段给机构
 */
async function createBusinessContractGrantcorp(request: CreateBusinessContractGrantcorpRequest): CreateBusinessContractGrantcorpResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createBusinessContractGrantcorpEx(request, headers, runtime);
}

/**
 * Description: 授权合约内加密字段给机构，机构下的所有人都有权限访问该数据
 * Summary: 授权合约内加密字段给机构
 */
async function createBusinessContractGrantcorpEx(request: CreateBusinessContractGrantcorpRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateBusinessContractGrantcorpResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.business.contract.grantcorp.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CancelBusinessContractGrantdidRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 合约所在链的业务id
  bizId: string(name='biz_id'),
  // 合约名称
  contractName: string(name='contract_name'),
  // keyId的创建者数字身份
  did: string(name='did'),
  // 取消被授权者的数字身份
  grantedDid: string(name='granted_did'),
  // 取消授权的字段
  itemIds: [ string ](name='item_ids'),
}

model CancelBusinessContractGrantdidResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 取消授权成功的字段列表
  data?: string(name='data'),
  // 是否取消授权成功，0表示成功
  status?: long(name='status'),
}

/**
 * Description: 取消授权did查询加密数据
 * Summary: 取消授权did查询加密数据
 */
async function cancelBusinessContractGrantdid(request: CancelBusinessContractGrantdidRequest): CancelBusinessContractGrantdidResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return cancelBusinessContractGrantdidEx(request, headers, runtime);
}

/**
 * Description: 取消授权did查询加密数据
 * Summary: 取消授权did查询加密数据
 */
async function cancelBusinessContractGrantdidEx(request: CancelBusinessContractGrantdidRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CancelBusinessContractGrantdidResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.business.contract.grantdid.cancel', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CancelBusinessContractGrantcorpRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 合约所在的业务链id
  bizId: string(name='biz_id'),
  // 合约名称
  contractName: string(name='contract_name'),
  // 用户的did数字身份
  did: string(name='did'),
  // 取消被授权者的机构名称
  grantedCorp: string(name='granted_corp'),
  // 取消授权的字段名
  itemIds: [ string ](name='item_ids'),
}

model CancelBusinessContractGrantcorpResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 成功取消授权的字段
  data?: string(name='data'),
  // 是否取消授权成功，0表示成功
  status?: long(name='status'),
}

/**
 * Description: 取消授权给组织机构
 * Summary: 取消授权给组织机构
 */
async function cancelBusinessContractGrantcorp(request: CancelBusinessContractGrantcorpRequest): CancelBusinessContractGrantcorpResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return cancelBusinessContractGrantcorpEx(request, headers, runtime);
}

/**
 * Description: 取消授权给组织机构
 * Summary: 取消授权给组织机构
 */
async function cancelBusinessContractGrantcorpEx(request: CancelBusinessContractGrantcorpRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CancelBusinessContractGrantcorpResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.business.contract.grantcorp.cancel', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ImportPlatformTestregionTestfuncRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 123
  testParam1: string(name='test_param1'),
  // 123
  testParam2: long(name='test_param2'),
  // 123
  testParam3: [ NodeInfo ](name='test_param3'),
}

model ImportPlatformTestregionTestfuncResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 123
  testResponse?: string(name='test_response'),
}

/**
 * Description: 业务中台测试接口
 * Summary: 业务中台测试接口
 */
async function importPlatformTestregionTestfunc(request: ImportPlatformTestregionTestfuncRequest): ImportPlatformTestregionTestfuncResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return importPlatformTestregionTestfuncEx(request, headers, runtime);
}

/**
 * Description: 业务中台测试接口
 * Summary: 业务中台测试接口
 */
async function importPlatformTestregionTestfuncEx(request: ImportPlatformTestregionTestfuncRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ImportPlatformTestregionTestfuncResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.platform.testregion.testfunc.import', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreatePlatformDepositAccountRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 业务链对应的bizId
  bizId: string(name='biz_id'),
  // 申请者对应的did账户
  did: string(name='did'),
}

model CreatePlatformDepositAccountResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // did地址
  did?: string(name='did'),
  // 租户账户
  isvAccount?: string(name='isv_account'),
  // 生成的账户在kms上的密钥id
  kmsId?: string(name='kms_id'),
  // 调用接口是否成功
  status?: string(name='status'),
}

/**
 * Description: 存证创建账户
 * Summary: 存证创建账户
 */
async function createPlatformDepositAccount(request: CreatePlatformDepositAccountRequest): CreatePlatformDepositAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createPlatformDepositAccountEx(request, headers, runtime);
}

/**
 * Description: 存证创建账户
 * Summary: 存证创建账户
 */
async function createPlatformDepositAccountEx(request: CreatePlatformDepositAccountRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreatePlatformDepositAccountResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.platform.deposit.account.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreatePlatformDepositDidRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 用户身份证号
  idCardNumber: string(name='id_card_number'),
  // 手机号
  phoneNumber: string(name='phone_number'),
  // 用户姓名
  userName: string(name='user_name'),
}

model CreatePlatformDepositDidResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 用户did
  did?: string(name='did'),
  // 租户金融科技id
  isvAccount?: string(name='isv_account'),
  // 是否创建成果
  status?: string(name='status'),
}

/**
 * Description: 存证创建did
 * Summary: 存证创建did
 */
async function createPlatformDepositDid(request: CreatePlatformDepositDidRequest): CreatePlatformDepositDidResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createPlatformDepositDidEx(request, headers, runtime);
}

/**
 * Description: 存证创建did
 * Summary: 存证创建did
 */
async function createPlatformDepositDidEx(request: CreatePlatformDepositDidRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreatePlatformDepositDidResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.platform.deposit.did.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SavePlatformDepositDepositRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 业务链对应的bizId
  bizId: string(name='biz_id'),
  // 存证数据
  data: string(name='data'),
  // 用户的did地址
  did: string(name='did'),
  // 任意用户自定义的keyId(需要唯一)，根据该keyId可以查找存证的内容，若不填则使用txHash作为keyId
  keyId: string(name='key_id'),
}

model SavePlatformDepositDepositResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // bizid+accountid+keyId/txHash 组成的唯一id，用户可以根据该id到服务中查询链上内容
  depositId?: string(name='deposit_id'),
  // 是否存证成果
  status?: string(name='status'),
  // 链上返回的txHash值
  txHash?: string(name='tx_hash'),
}

/**
 * Description: 普通数据存证
 * Summary: 普通数据存证
 */
async function savePlatformDepositDeposit(request: SavePlatformDepositDepositRequest): SavePlatformDepositDepositResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return savePlatformDepositDepositEx(request, headers, runtime);
}

/**
 * Description: 普通数据存证
 * Summary: 普通数据存证
 */
async function savePlatformDepositDepositEx(request: SavePlatformDepositDepositRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SavePlatformDepositDepositResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.platform.deposit.deposit.save', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreatePlatformDepositCorpdidRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 企业名称
  // 
  epCertName: string(name='ep_cert_name'),
  // 企业证件号
  epCertNo: string(name='ep_cert_no'),
  // 企业法人名称
  legalPersonCertName: string(name='legal_person_cert_name'),
}

model CreatePlatformDepositCorpdidResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 企业did
  did?: string(name='did'),
  // 调用者金融科技id
  isvAccount?: string(name='isv_account'),
  // 是否调用成功
  status?: string(name='status'),
}

/**
 * Description: 为企业创建did
 * Summary: 为企业创建did
 */
async function createPlatformDepositCorpdid(request: CreatePlatformDepositCorpdidRequest): CreatePlatformDepositCorpdidResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createPlatformDepositCorpdidEx(request, headers, runtime);
}

/**
 * Description: 为企业创建did
 * Summary: 为企业创建did
 */
async function createPlatformDepositCorpdidEx(request: CreatePlatformDepositCorpdidRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreatePlatformDepositCorpdidResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.platform.deposit.corpdid.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateDigitalassetartAccountRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 用户手机号
  phone: string(name='phone'),
  // 用户的支付宝账号
  userAccount: string(name='user_account'),
  // 用户姓名
  userName: string(name='user_name'),
}

model CreateDigitalassetartAccountResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 用户链账户地址
  accountId?: string(name='account_id'),
}

/**
 * Description: 用于对用户的账户映射，输入用户名、账户、手机号等信息，返回用户的链上身份信息
 * Summary: 用户账号映射
 */
async function createDigitalassetartAccount(request: CreateDigitalassetartAccountRequest): CreateDigitalassetartAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createDigitalassetartAccountEx(request, headers, runtime);
}

/**
 * Description: 用于对用户的账户映射，输入用户名、账户、手机号等信息，返回用户的链上身份信息
 * Summary: 用户账号映射
 */
async function createDigitalassetartAccountEx(request: CreateDigitalassetartAccountRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateDigitalassetartAccountResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.digitalassetart.account.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BatchcreateDigitalassetartAccountRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 批量用户账户、姓名、手机号等信息
  users: [ UserInfoParam ](name='users'),
}

model BatchcreateDigitalassetartAccountResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 失败的账户
  failList?: [ string ](name='fail_list'),
  // 失败的个数
  failNum?: long(name='fail_num'),
  // 成功的个数
  successNum?: long(name='success_num'),
}

/**
 * Description: 批量账户映射
 * Summary: 批量账户映射
 */
async function batchcreateDigitalassetartAccount(request: BatchcreateDigitalassetartAccountRequest): BatchcreateDigitalassetartAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return batchcreateDigitalassetartAccountEx(request, headers, runtime);
}

/**
 * Description: 批量账户映射
 * Summary: 批量账户映射
 */
async function batchcreateDigitalassetartAccountEx(request: BatchcreateDigitalassetartAccountRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BatchcreateDigitalassetartAccountResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.digitalassetart.account.batchcreate', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateDigitalassetartArtCreateRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 艺术品锚定物
  artAnchor: string(name='art_anchor'),
  // 艺术品唯一id
  artId: string(name='art_id'),
  // 艺术品名称
  artName: string(name='art_name'),
  // 艺术品代码
  code: string(name='code'),
  // 创建时间
  createDate: string(name='create_date'),
  // 鉴定者账户
  identifiers: [ string ](name='identifiers'),
  // 艺术品图片哈希
  imageHashes: [ string ](name='image_hashes'),
  // 一级分类
  mainClass: string(name='main_class'),
  // 拥有者链上账户地址
  ownerAccountId: string(name='owner_account_id'),
  // 二级分类
  subClass: string(name='sub_class'),
  // 艺术品视频哈希
  vedioHashes: [ string ](name='vedio_hashes'),
}

model CreateDigitalassetartArtCreateResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 艺术品唯一id
  artId?: string(name='art_id'),
  // 艺术品状态信息
  status?: long(name='status'),
}

/**
 * Description: 创建艺术品
 * Summary: 创建艺术品
 */
async function createDigitalassetartArtCreate(request: CreateDigitalassetartArtCreateRequest): CreateDigitalassetartArtCreateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createDigitalassetartArtCreateEx(request, headers, runtime);
}

/**
 * Description: 创建艺术品
 * Summary: 创建艺术品
 */
async function createDigitalassetartArtCreateEx(request: CreateDigitalassetartArtCreateRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateDigitalassetartArtCreateResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.digitalassetart.art.create.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SetDigitalassetartArtIssueRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 拥有者链上账户地址
  accountId: string(name='account_id'),
  // 艺术品id
  artId: string(name='art_id'),
}

model SetDigitalassetartArtIssueResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 艺术品id
  artId?: string(name='art_id'),
  // 艺术品状态信息，1表示发行成功
  status?: long(name='status'),
}

/**
 * Description: 将艺术品从创建状态改为发行状态，只有在发行状态的艺术品才能进行各种交易
 * Summary: 发行艺术品
 */
async function setDigitalassetartArtIssue(request: SetDigitalassetartArtIssueRequest): SetDigitalassetartArtIssueResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return setDigitalassetartArtIssueEx(request, headers, runtime);
}

/**
 * Description: 将艺术品从创建状态改为发行状态，只有在发行状态的艺术品才能进行各种交易
 * Summary: 发行艺术品
 */
async function setDigitalassetartArtIssueEx(request: SetDigitalassetartArtIssueRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SetDigitalassetartArtIssueResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.digitalassetart.art.issue.set', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SetDigitalassetartArtIssuetoexchangeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 拥有者账户地址
  accountId: string(name='account_id'),
  // 艺术品id
  artId: string(name='art_id'),
  // 交易所代码
  exchangeCode: string(name='exchange_code'),
}

model SetDigitalassetartArtIssuetoexchangeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 艺术品id
  artId?: string(name='art_id'),
  // 交易所代码
  exchangeCode?: string(name='exchange_code'),
}

/**
 * Description: 将该艺术品发布到交易所
 * Summary: 将该艺术品发布到交易所
 */
async function setDigitalassetartArtIssuetoexchange(request: SetDigitalassetartArtIssuetoexchangeRequest): SetDigitalassetartArtIssuetoexchangeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return setDigitalassetartArtIssuetoexchangeEx(request, headers, runtime);
}

/**
 * Description: 将该艺术品发布到交易所
 * Summary: 将该艺术品发布到交易所
 */
async function setDigitalassetartArtIssuetoexchangeEx(request: SetDigitalassetartArtIssuetoexchangeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SetDigitalassetartArtIssuetoexchangeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.digitalassetart.art.issuetoexchange.set', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SetDigitalassetartArtTradeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 拥有者链上地址
  accountId: string(name='account_id'),
  // 艺术品唯一id
  artId: string(name='art_id'),
}

model SetDigitalassetartArtTradeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 艺术品交易成功
  artId?: string(name='art_id'),
}

/**
 * Description: 艺术品本链交易
 * Summary: 艺术品本链交易
 */
async function setDigitalassetartArtTrade(request: SetDigitalassetartArtTradeRequest): SetDigitalassetartArtTradeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return setDigitalassetartArtTradeEx(request, headers, runtime);
}

/**
 * Description: 艺术品本链交易
 * Summary: 艺术品本链交易
 */
async function setDigitalassetartArtTradeEx(request: SetDigitalassetartArtTradeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SetDigitalassetartArtTradeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.digitalassetart.art.trade.set', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SetDigitalassetartArtTradeonexchangeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 交易所代码
  exchangeCode: string(name='exchange_code'),
  // 交易者账户
  tradeAccountId: string(name='trade_account_id'),
  // 交易txHash
  txHash: string(name='tx_hash'),
}

model SetDigitalassetartArtTradeonexchangeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 0 在交易成功
  // 1 在交易失败
  status?: long(name='status'),
}

/**
 * Description: 在交易所交易艺术品
 * Summary: 在交易所交易艺术品
 */
async function setDigitalassetartArtTradeonexchange(request: SetDigitalassetartArtTradeonexchangeRequest): SetDigitalassetartArtTradeonexchangeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return setDigitalassetartArtTradeonexchangeEx(request, headers, runtime);
}

/**
 * Description: 在交易所交易艺术品
 * Summary: 在交易所交易艺术品
 */
async function setDigitalassetartArtTradeonexchangeEx(request: SetDigitalassetartArtTradeonexchangeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SetDigitalassetartArtTradeonexchangeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.digitalassetart.art.tradeonexchange.set', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model FreezeDigitalassetartArtAccountRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 管理员账户
  accountId: string(name='account_id'),
  // 艺术品id
  artId: string(name='art_id'),
}

model FreezeDigitalassetartArtAccountResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 艺术品id
  artId?: string(name='art_id'),
  // 艺术品冻结是否成功，0表示成功
  status?: long(name='status'),
}

/**
 * Description: 冻结艺术品
 * Summary: 冻结艺术品
 */
async function freezeDigitalassetartArtAccount(request: FreezeDigitalassetartArtAccountRequest): FreezeDigitalassetartArtAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return freezeDigitalassetartArtAccountEx(request, headers, runtime);
}

/**
 * Description: 冻结艺术品
 * Summary: 冻结艺术品
 */
async function freezeDigitalassetartArtAccountEx(request: FreezeDigitalassetartArtAccountRequest, headers: map[string]string, runtime: Util.RuntimeOptions): FreezeDigitalassetartArtAccountResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.digitalassetart.art.account.freeze', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UnfreezeDigitalassetartArtAccountRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 管理员账户id
  accountId: string(name='account_id'),
  // 艺术品id
  artId: string(name='art_id'),
}

model UnfreezeDigitalassetartArtAccountResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 艺术品id
  artId?: string(name='art_id'),
  // 解冻是否成功，0表示成功
  status?: long(name='status'),
}

/**
 * Description: 艺术品解冻
 * Summary: 艺术品解冻
 */
async function unfreezeDigitalassetartArtAccount(request: UnfreezeDigitalassetartArtAccountRequest): UnfreezeDigitalassetartArtAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return unfreezeDigitalassetartArtAccountEx(request, headers, runtime);
}

/**
 * Description: 艺术品解冻
 * Summary: 艺术品解冻
 */
async function unfreezeDigitalassetartArtAccountEx(request: UnfreezeDigitalassetartArtAccountRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UnfreezeDigitalassetartArtAccountResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.digitalassetart.art.account.unfreeze', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SetDigitalassetartArtUnissuetoexchangeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 管理员账户地址
  accountId: string(name='account_id'),
  // 艺术品id
  artId: string(name='art_id'),
  // 交易所代码
  exchangeCode: string(name='exchange_code'),
}

model SetDigitalassetartArtUnissuetoexchangeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 取消在交易所发布艺术品成功或者失败原因详情
  reason?: string(name='reason'),
  // 取消在交易发布艺术品调用是否成功
  // 0 表示成功
  status?: long(name='status'),
}

/**
 * Description: 取消在交易所发布艺术品
 * Summary: 取消在交易所发布艺术品
 */
async function setDigitalassetartArtUnissuetoexchange(request: SetDigitalassetartArtUnissuetoexchangeRequest): SetDigitalassetartArtUnissuetoexchangeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return setDigitalassetartArtUnissuetoexchangeEx(request, headers, runtime);
}

/**
 * Description: 取消在交易所发布艺术品
 * Summary: 取消在交易所发布艺术品
 */
async function setDigitalassetartArtUnissuetoexchangeEx(request: SetDigitalassetartArtUnissuetoexchangeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SetDigitalassetartArtUnissuetoexchangeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.digitalassetart.art.unissuetoexchange.set', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDigitalassetartArtRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 管理员账户
  accountId: string(name='account_id'),
  // 艺术品id
  artId: string(name='art_id'),
}

model QueryDigitalassetartArtResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 艺术品id
  artId?: string(name='art_id'),
  // 艺术品名称
  artName?: string(name='art_name'),
  // 艺术品代码
  code?: string(name='code'),
  // 艺术品所在交易所代码
  exchanges?: [ string ](name='exchanges'),
  // 艺术品鉴定者列表
  identifiers?: [ string ](name='identifiers'),
  // 艺术品图片哈希
  imageHash?: [ string ](name='image_hash'),
  // 发行方账户信息
  issueAccount?: string(name='issue_account'),
  // 艺术品在链上发行时间
  issueDate?: long(name='issue_date'),
  // 艺术品所属主分类
  mainClass?: string(name='main_class'),
  // 艺术品拥有者id
  ownerId?: string(name='owner_id'),
  // 艺术品状态信息
  // 1未发行 
  // 2已发行 
  // 3冻结 
  // 4回购
  state?: long(name='state'),
  // 艺术品所属分类次分类
  subClass?: string(name='sub_class'),
  // 艺术品视频哈希
  vedioHash?: string(name='vedio_hash'),
}

/**
 * Description: 查询艺术品信息
 * Summary: 查询艺术品信息
 */
async function queryDigitalassetartArt(request: QueryDigitalassetartArtRequest): QueryDigitalassetartArtResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDigitalassetartArtEx(request, headers, runtime);
}

/**
 * Description: 查询艺术品信息
 * Summary: 查询艺术品信息
 */
async function queryDigitalassetartArtEx(request: QueryDigitalassetartArtRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDigitalassetartArtResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.digitalassetart.art.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateDigitalassetExchangeAccountmapRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 交易所代码
  exchangeCode: string(name='exchange_code'),
  // 用户联系方式
  phone: string(name='phone'),
  // 业务方用户账号
  userAccount: string(name='user_account'),
  // 业务方用户名称
  userName: string(name='user_name'),
}

model CreateDigitalassetExchangeAccountmapResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回调用结果 正常为 success
  result?: string(name='result'),
}

/**
 * Description: 数字资产管理平台业务方账户映射接口
 * Summary: 数字资产管理平台业务方账户映射
 */
async function createDigitalassetExchangeAccountmap(request: CreateDigitalassetExchangeAccountmapRequest): CreateDigitalassetExchangeAccountmapResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createDigitalassetExchangeAccountmapEx(request, headers, runtime);
}

/**
 * Description: 数字资产管理平台业务方账户映射接口
 * Summary: 数字资产管理平台业务方账户映射
 */
async function createDigitalassetExchangeAccountmapEx(request: CreateDigitalassetExchangeAccountmapRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateDigitalassetExchangeAccountmapResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.digitalasset.exchange.accountmap.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BatchcreateDigitalassetExchangeAccountmapRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 业务方需映射的账户列表
  accountMapParams: [ ExchangeAccountMap ](name='account_map_params'),
  // 交易所代码
  exchangeCode: string(name='exchange_code'),
}

model BatchcreateDigitalassetExchangeAccountmapResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回失败账户列表
  failList?: [ string ](name='fail_list'),
  // 失败数量
  failNum?: long(name='fail_num'),
  // 成功数量
  successNum?: long(name='success_num'),
}

/**
 * Description: 数字资产管理平台用户账户批量映射接口
 * Summary: 数字资产管理平台用户账户批量映射
 */
async function batchcreateDigitalassetExchangeAccountmap(request: BatchcreateDigitalassetExchangeAccountmapRequest): BatchcreateDigitalassetExchangeAccountmapResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return batchcreateDigitalassetExchangeAccountmapEx(request, headers, runtime);
}

/**
 * Description: 数字资产管理平台用户账户批量映射接口
 * Summary: 数字资产管理平台用户账户批量映射
 */
async function batchcreateDigitalassetExchangeAccountmapEx(request: BatchcreateDigitalassetExchangeAccountmapRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BatchcreateDigitalassetExchangeAccountmapResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.digitalasset.exchange.accountmap.batchcreate', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartDigitalassetExchangeUnfreezeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 版通代码
  epCode: string(name='ep_code'),
  // 解限数量
  epUnfreezeAmount: long(name='ep_unfreeze_amount'),
  // 交易所代码
  exchangeCode: string(name='exchange_code'),
  // 业务方用户账户
  userAccount: string(name='user_account'),
}

model StartDigitalassetExchangeUnfreezeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 操作结果 success 为正常
  result?: string(name='result'),
}

/**
 * Description: 数字资产管理平台版通解限接口
 * Summary: 数字资产管理平台版通解限
 */
async function startDigitalassetExchangeUnfreeze(request: StartDigitalassetExchangeUnfreezeRequest): StartDigitalassetExchangeUnfreezeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startDigitalassetExchangeUnfreezeEx(request, headers, runtime);
}

/**
 * Description: 数字资产管理平台版通解限接口
 * Summary: 数字资产管理平台版通解限
 */
async function startDigitalassetExchangeUnfreezeEx(request: StartDigitalassetExchangeUnfreezeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartDigitalassetExchangeUnfreezeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.digitalasset.exchange.unfreeze.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartDigitalassetExchangeLockpositionRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 版通代码
  epCode?: string(name='ep_code'),
  // 交易所代码
  exchangeCode: string(name='exchange_code'),
  // 锁定操作，0为解锁，1为锁定
  operate: long(name='operate'),
  // 业务方账户
  userAccount?: string(name='user_account'),
}

model StartDigitalassetExchangeLockpositionResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 操作结果 success 为正常
  result?: string(name='result'),
}

/**
 * Description: 数字资产管理平台资源管理 处理用户、版通的锁定与解锁
1. ep_code有值，user_account为空时，对指定版通进行锁定解锁操作
2. ep_code为空，user_account有值时，对指定账户进行锁定解锁操作
3. ep_code，user_account均有值时，对指定账户的版通进行锁定解锁操作
4. ep_code，user_account均为空时，对全交易所进行锁定解锁操作，需谨慎
 * Summary: 数字资产管理平台资源管理
 */
async function startDigitalassetExchangeLockposition(request: StartDigitalassetExchangeLockpositionRequest): StartDigitalassetExchangeLockpositionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startDigitalassetExchangeLockpositionEx(request, headers, runtime);
}

/**
 * Description: 数字资产管理平台资源管理 处理用户、版通的锁定与解锁
1. ep_code有值，user_account为空时，对指定版通进行锁定解锁操作
2. ep_code为空，user_account有值时，对指定账户进行锁定解锁操作
3. ep_code，user_account均有值时，对指定账户的版通进行锁定解锁操作
4. ep_code，user_account均为空时，对全交易所进行锁定解锁操作，需谨慎
 * Summary: 数字资产管理平台资源管理
 */
async function startDigitalassetExchangeLockpositionEx(request: StartDigitalassetExchangeLockpositionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartDigitalassetExchangeLockpositionResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.digitalasset.exchange.lockposition.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateDigitalassetExchangeEpissueRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 版通锚定物
  epAnchor: string(name='ep_anchor'),
  // 版通代码
  epCode: string(name='ep_code'),
  // 版通首发量
  epFirstAmount: long(name='ep_first_amount'),
  // 版通发行方账户
  epIssueAccount: string(name='ep_issue_account'),
  // 版通发行时间戳
  epIssueDate: long(name='ep_issue_date'),
  // 版通名称
  epName: string(name='ep_name'),
  // 版通线下发行配额
  epOfflineIssueAmount: long(name='ep_offline_issue_amount'),
  // 版通线下日解限比例
  epOfflineUnfreeze: long(name='ep_offline_unfreeze'),
  // 版通线上发行配额
  epOnlineIssueAmount: long(name='ep_online_issue_amount'),
  // 发行方版通自持量
  epSelfAmount: long(name='ep_self_amount'),
  // 发行方版通日解限比例
  epSelfUnfreeze: long(name='ep_self_unfreeze'),
  // 版通发行数量
  epTotalAmount: long(name='ep_total_amount'),
  // 版通类型
  epType: string(name='ep_type'),
  // 交易所代码
  exchangeCode: string(name='exchange_code'),
  // 预留扩展字段
  extend?: string(name='extend'),
}

model CreateDigitalassetExchangeEpissueResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 操作结果 success 为成功
  result?: string(name='result'),
}

/**
 * Description: 数字资产管理平台版通发行接口
 * Summary: 数字资产管理平台版通发行
 */
async function createDigitalassetExchangeEpissue(request: CreateDigitalassetExchangeEpissueRequest): CreateDigitalassetExchangeEpissueResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createDigitalassetExchangeEpissueEx(request, headers, runtime);
}

/**
 * Description: 数字资产管理平台版通发行接口
 * Summary: 数字资产管理平台版通发行
 */
async function createDigitalassetExchangeEpissueEx(request: CreateDigitalassetExchangeEpissueRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateDigitalassetExchangeEpissueResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.digitalasset.exchange.epissue.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateDigitalassetExchangeEpstockissueRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 版通代码
  epCode: string(name='ep_code'),
  // 版通发行方账户
  epIssueAccount: string(name='ep_issue_account'),
  // 版通存量发行线下量
  epOfflineIssueAmount: long(name='ep_offline_issue_amount'),
  // 版通存量发行线上量
  epOnlineIssueAmount: long(name='ep_online_issue_amount'),
  // 版通存量发行自持量
  epSelfIssueAmount: long(name='ep_self_issue_amount'),
  // 交易所代码
  exchangeCode: string(name='exchange_code'),
}

model CreateDigitalassetExchangeEpstockissueResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 操作结果 success 为成功
  result?: string(name='result'),
}

/**
 * Description: 数字资产管理平台版通存量发行接口
 * Summary: 数字资产管理平台版通存量发行
 */
async function createDigitalassetExchangeEpstockissue(request: CreateDigitalassetExchangeEpstockissueRequest): CreateDigitalassetExchangeEpstockissueResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createDigitalassetExchangeEpstockissueEx(request, headers, runtime);
}

/**
 * Description: 数字资产管理平台版通存量发行接口
 * Summary: 数字资产管理平台版通存量发行
 */
async function createDigitalassetExchangeEpstockissueEx(request: CreateDigitalassetExchangeEpstockissueRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateDigitalassetExchangeEpstockissueResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.digitalasset.exchange.epstockissue.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartDigitalassetExchangeEpwholesaleRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 批发账户信息列表
  accountList: [ AccountWholesaleParam ](name='account_list'),
  // 版通代码
  epCode: string(name='ep_code'),
  // 版通发行方账户
  epIssueAccount: string(name='ep_issue_account'),
  // 交易所代码
  exchangeCode: string(name='exchange_code'),
}

model StartDigitalassetExchangeEpwholesaleResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 失败账户列表
  failList?: [ string ](name='fail_list'),
  // 失败原因 0:成功 1:执行失败 2:线下配额数量不足
  reason?: long(name='reason'),
  // 成功账户列表
  successList?: [ string ](name='success_list'),
}

/**
 * Description: 数字资产管理平台版通批发接口
 * Summary: 数字资产管理平台版通批发
 */
async function startDigitalassetExchangeEpwholesale(request: StartDigitalassetExchangeEpwholesaleRequest): StartDigitalassetExchangeEpwholesaleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startDigitalassetExchangeEpwholesaleEx(request, headers, runtime);
}

/**
 * Description: 数字资产管理平台版通批发接口
 * Summary: 数字资产管理平台版通批发
 */
async function startDigitalassetExchangeEpwholesaleEx(request: StartDigitalassetExchangeEpwholesaleRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartDigitalassetExchangeEpwholesaleResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.digitalasset.exchange.epwholesale.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDigitalassetExchangeEpinfoRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 版通代码
  epCode: string(name='ep_code'),
  // 交易所代码
  exchangeCode: string(name='exchange_code'),
}

model QueryDigitalassetExchangeEpinfoResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 版通锚定物
  epAnchor?: string(name='ep_anchor'),
  // 版通代码
  epCode?: string(name='ep_code'),
  // 版通首发量
  epFirstAmount?: long(name='ep_first_amount'),
  // 版通发行方账户
  epIssueAccount?: string(name='ep_issue_account'),
  // 版通发行日时间戳
  epIssueDate?: long(name='ep_issue_date'),
  // 版通历史发行记录
  epIssueHistory?: [ EPIssueHisInfo ](name='ep_issue_history'),
  // 版通名称
  epName?: string(name='ep_name'),
  // 版通线下发行量
  epOfflineIssueAmount?: long(name='ep_offline_issue_amount'),
  // 版通线下日解限量
  epOfflineUnfreeze?: long(name='ep_offline_unfreeze'),
  // 版通线上发行量
  epOnlineIssueAmount?: long(name='ep_online_issue_amount'),
  // 版通发行方自持量
  epSelfAmount?: long(name='ep_self_amount'),
  // 版通自持日解限量
  epSelfUnfreeze?: long(name='ep_self_unfreeze'),
  // 版通状态 0:正常 1:锁定
  epStatus?: long(name='ep_status'),
  // 版通总发行量
  epTotalAmount?: long(name='ep_total_amount'),
  // 版通类型
  epType?: string(name='ep_type'),
  // 扩展字段
  extend?: string(name='extend'),
}

/**
 * Description: 数字资产管理平台版通信息查询接口
 * Summary: 数字资产管理平台版通信息查询
 */
async function queryDigitalassetExchangeEpinfo(request: QueryDigitalassetExchangeEpinfoRequest): QueryDigitalassetExchangeEpinfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDigitalassetExchangeEpinfoEx(request, headers, runtime);
}

/**
 * Description: 数字资产管理平台版通信息查询接口
 * Summary: 数字资产管理平台版通信息查询
 */
async function queryDigitalassetExchangeEpinfoEx(request: QueryDigitalassetExchangeEpinfoRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDigitalassetExchangeEpinfoResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.digitalasset.exchange.epinfo.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDigitalassetExchangeEptradeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 查询截止时间
  endDate: string(name='end_date'),
  // 版通代码 （版通代码与用户账户至少选一个）
  epCode?: string(name='ep_code'),
  // 交易所代码
  exchangeCode: string(name='exchange_code'),
  // 页数 从1开始
  pageNum: long(name='page_num'),
  // 每页显示数量
  pageSize: long(name='page_size'),
  // 查询起始时间
  startDate: string(name='start_date'),
  // 用户账户 （版通代码与用户账户至少选一个）
  userAccount?: string(name='user_account'),
}

model QueryDigitalassetExchangeEptradeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 页数 从1开始
  pageNum?: long(name='page_num'),
  // 每页显示数量
  pageSize?: long(name='page_size'),
  // 数据总量
  totalCount?: long(name='total_count'),
  // 交易信息列表
  txInfos?: [ EPTradeInfo ](name='tx_infos'),
}

/**
 * Description: 数字资产管理平台交易查询接口
1. ep_code有值，user_account为空时，查询版通的交易信息
2. ep_code为空，user_account有值时，查询账户的交易信息
3. ep_code，user_account均有值时，查询账户下指定版通的交易信息
 * Summary: 数字资产管理平台交易查询
 */
async function queryDigitalassetExchangeEptrade(request: QueryDigitalassetExchangeEptradeRequest): QueryDigitalassetExchangeEptradeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDigitalassetExchangeEptradeEx(request, headers, runtime);
}

/**
 * Description: 数字资产管理平台交易查询接口
1. ep_code有值，user_account为空时，查询版通的交易信息
2. ep_code为空，user_account有值时，查询账户的交易信息
3. ep_code，user_account均有值时，查询账户下指定版通的交易信息
 * Summary: 数字资产管理平台交易查询
 */
async function queryDigitalassetExchangeEptradeEx(request: QueryDigitalassetExchangeEptradeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDigitalassetExchangeEptradeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.digitalasset.exchange.eptrade.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDigitalassetExchangeEpaccountRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 交易所代码
  exchangeCode: string(name='exchange_code'),
  // 用户账户
  userAccount: string(name='user_account'),
}

model QueryDigitalassetExchangeEpaccountResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 账户状态 0:正常 1:锁定
  accountStatus?: long(name='account_status'),
  // 版通回购账户信息
  buybackAccounts?: [ AccountInfo ](name='buyback_accounts'),
  // 版通限制交易账户信息
  constrainedAccounts?: [ AccountInfo ](name='constrained_accounts'),
  // 版通可交易账户信息
  tradeAccounts?: [ AccountInfo ](name='trade_accounts'),
}

/**
 * Description: 数字资产管理平台账户信息查询接口
 * Summary: 数字资产管理平台账户信息查询
 */
async function queryDigitalassetExchangeEpaccount(request: QueryDigitalassetExchangeEpaccountRequest): QueryDigitalassetExchangeEpaccountResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDigitalassetExchangeEpaccountEx(request, headers, runtime);
}

/**
 * Description: 数字资产管理平台账户信息查询接口
 * Summary: 数字资产管理平台账户信息查询
 */
async function queryDigitalassetExchangeEpaccountEx(request: QueryDigitalassetExchangeEpaccountRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDigitalassetExchangeEpaccountResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.digitalasset.exchange.epaccount.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartDigitalassetExchangeEptradeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 交易数量
  epAmount: long(name='ep_amount'),
  // 版通代码
  epCode: string(name='ep_code'),
  // 交易所代码
  exchangeCode: string(name='exchange_code'),
  // 卖方账户
  fromAccount: string(name='from_account'),
  // 买方账户
  toAccount: string(name='to_account'),
}

model StartDigitalassetExchangeEptradeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 交易号
  txCode?: string(name='tx_code'),
}

/**
 * Description: 数字资产管理平台交易接口
 * Summary: 数字资产管理平台交易
 */
async function startDigitalassetExchangeEptrade(request: StartDigitalassetExchangeEptradeRequest): StartDigitalassetExchangeEptradeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startDigitalassetExchangeEptradeEx(request, headers, runtime);
}

/**
 * Description: 数字资产管理平台交易接口
 * Summary: 数字资产管理平台交易
 */
async function startDigitalassetExchangeEptradeEx(request: StartDigitalassetExchangeEptradeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartDigitalassetExchangeEptradeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.digitalasset.exchange.eptrade.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartDigitalassetExchangeEpbuybackRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 版通回购数量
  epAmount: long(name='ep_amount'),
  // 版通代码
  epCode: string(name='ep_code'),
  // 交易所代码
  exchangeCode: string(name='exchange_code'),
  // 用户账户
  userAccount: string(name='user_account'),
}

model StartDigitalassetExchangeEpbuybackResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 操作结果 success 为成功
  result?: string(name='result'),
}

/**
 * Description: 数字资产管理平台版通回购接口
 * Summary: 数字资产管理平台版通回购
 */
async function startDigitalassetExchangeEpbuyback(request: StartDigitalassetExchangeEpbuybackRequest): StartDigitalassetExchangeEpbuybackResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startDigitalassetExchangeEpbuybackEx(request, headers, runtime);
}

/**
 * Description: 数字资产管理平台版通回购接口
 * Summary: 数字资产管理平台版通回购
 */
async function startDigitalassetExchangeEpbuybackEx(request: StartDigitalassetExchangeEpbuybackRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartDigitalassetExchangeEpbuybackResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.digitalasset.exchange.epbuyback.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateDistributionUserRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 用户在ISV中的唯一标识
  identity: string(name='identity'),
  // 其他说明
  info?: string(name='info'),
  // 用户手机号码
  mobile: string(name='mobile'),
  // 来源: 微信朋友圈/微信小程序/支付宝小程序/H5/商户自有APP/其他
  source: string(name='source'),
}

model CreateDistributionUserResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 用户创建时间
  createTime?: string(name='create_time'),
  // 用户唯一标示
  userId?: string(name='user_id'),
}

/**
 * Description: 创建用户接口
 * Summary: 创建用户接口
 */
async function createDistributionUser(request: CreateDistributionUserRequest): CreateDistributionUserResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createDistributionUserEx(request, headers, runtime);
}

/**
 * Description: 创建用户接口
 * Summary: 创建用户接口
 */
async function createDistributionUserEx(request: CreateDistributionUserRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateDistributionUserResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.distribution.user.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDistributionUserTeamRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 商品唯一标识
  itemId?: string(name='item_id'),
  // 分页查询当前页号，默认值1
  pageNum?: long(name='page_num'),
  // 分页查询当前页大小，默认值20
  pageSize?: long(name='page_size'),
  // 商户唯一标识
  shopId: string(name='shop_id'),
  // 用户唯一标识
  userId: string(name='user_id'),
}

model QueryDistributionUserTeamResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 一级会员信息
  members?: [ DistributionUser ](name='members'),
  // 下级用户总数
  memberNum?: long(name='member_num'),
  // 一级会员数
  oneLevelMemberNum?: long(name='one_level_member_num'),
  // 分页查询当前页号
  pageNum?: long(name='page_num'),
  // 分页查询当前页大小
  pageSize?: long(name='page_size'),
  // 二级会员数
  twoLevelMemberNum?: long(name='two_level_member_num'),
}

/**
 * Description: 用户下级分销关系查询
 * Summary: 用户下级分销关系查询
 */
async function queryDistributionUserTeam(request: QueryDistributionUserTeamRequest): QueryDistributionUserTeamResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDistributionUserTeamEx(request, headers, runtime);
}

/**
 * Description: 用户下级分销关系查询
 * Summary: 用户下级分销关系查询
 */
async function queryDistributionUserTeamEx(request: QueryDistributionUserTeamRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDistributionUserTeamResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.distribution.user.team.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateDistributionShopRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 商户在ISV中的标识
  identity: string(name='identity'),
  // 其他说明
  info?: string(name='info'),
  // 商户名称
  name: string(name='name'),
}

model CreateDistributionShopResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 商户管理员唯一标识
  adminUserId?: string(name='admin_user_id'),
  // 商户创建时间
  createTime?: string(name='create_time'),
  // 商户唯一标识
  shopId?: string(name='shop_id'),
}

/**
 * Description: 创建商户接口
 * Summary: 创建商户
 */
async function createDistributionShop(request: CreateDistributionShopRequest): CreateDistributionShopResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createDistributionShopEx(request, headers, runtime);
}

/**
 * Description: 创建商户接口
 * Summary: 创建商户
 */
async function createDistributionShopEx(request: CreateDistributionShopRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateDistributionShopResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.distribution.shop.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateDistributionUserRelationRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 上级用户唯一标识
  fromUserId?: string(name='from_user_id'),
  // 商品唯一标识
  itemId?: string(name='item_id'),
  // 商户唯一标识
  shopId: string(name='shop_id'),
  // 来源，微信朋友圈/微信小程序/支付宝小程序/H5/商户自有APP/其他
  source: string(name='source'),
  // 用户唯一标识
  userId: string(name='user_id'),
}

model CreateDistributionUserRelationResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 区块链交易hash
  txHash?: string(name='tx_hash'),
}

/**
 * Description: 用户之间分销关系建立
 * Summary: 用户之间分销关系建立
 */
async function createDistributionUserRelation(request: CreateDistributionUserRelationRequest): CreateDistributionUserRelationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createDistributionUserRelationEx(request, headers, runtime);
}

/**
 * Description: 用户之间分销关系建立
 * Summary: 用户之间分销关系建立
 */
async function createDistributionUserRelationEx(request: CreateDistributionUserRelationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateDistributionUserRelationResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.distribution.user.relation.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model InitDistributionContractRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 初始化合约名称
  name: string(name='name'),
}

model InitDistributionContractResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 合约链上地址
  txHash?: string(name='tx_hash'),
}

/**
 * Description: 营销分销合约初始化
 * Summary: 营销分销合约初始化
 */
async function initDistributionContract(request: InitDistributionContractRequest): InitDistributionContractResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return initDistributionContractEx(request, headers, runtime);
}

/**
 * Description: 营销分销合约初始化
 * Summary: 营销分销合约初始化
 */
async function initDistributionContractEx(request: InitDistributionContractRequest, headers: map[string]string, runtime: Util.RuntimeOptions): InitDistributionContractResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.distribution.contract.init', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateDistributionProductItemRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 分销比例  10 表示 10%
  distributionRate: string(name='distribution_rate'),
  // 上架时间戳
  enableDate: string(name='enable_date'),
  // 划线价格
  linePrice: string(name='line_price'),
  // 商品id
  productId: string(name='product_id'),
  // 商品封面图片url
  productImg: string(name='product_img'),
  // 商品信息
  productInfo: string(name='product_info'),
  // 商品名称
  productName: string(name='product_name'),
  // 商品价格
  productPrice: string(name='product_price'),
  // 商品类型
  productType: string(name='product_type'),
  // 商户id
  shopId: string(name='shop_id'),
}

model CreateDistributionProductItemResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 商品id
  productId?: string(name='product_id'),
  // 商户id
  shopId?: string(name='shop_id'),
  // 链上地址
  txHash?: string(name='tx_hash'),
}

/**
 * Description: 营销分销平台商品创建
 * Summary: 营销分销平台商品创建
 */
async function createDistributionProductItem(request: CreateDistributionProductItemRequest): CreateDistributionProductItemResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createDistributionProductItemEx(request, headers, runtime);
}

/**
 * Description: 营销分销平台商品创建
 * Summary: 营销分销平台商品创建
 */
async function createDistributionProductItemEx(request: CreateDistributionProductItemRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateDistributionProductItemResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.distribution.product.item.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDistributionProductItemRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 商品id
  productId?: string(name='product_id'),
  // 商户id
  shopId: string(name='shop_id'),
}

model QueryDistributionProductItemResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 商品列表
  products?: [ ItemDto ](name='products'),
}

/**
 * Description: 营销分销平台商品查询
 * Summary: 营销分销平台商品查询
 */
async function queryDistributionProductItem(request: QueryDistributionProductItemRequest): QueryDistributionProductItemResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDistributionProductItemEx(request, headers, runtime);
}

/**
 * Description: 营销分销平台商品查询
 * Summary: 营销分销平台商品查询
 */
async function queryDistributionProductItemEx(request: QueryDistributionProductItemRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDistributionProductItemResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.distribution.product.item.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateDistributionFundPromoterRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 可提现余额
  balance: string(name='balance'),
  // 推广人id
  promoterId: string(name='promoter_id'),
  // 待结算
  settleQuota: string(name='settle_quota'),
  // 商户id
  shopId: string(name='shop_id'),
}

model UpdateDistributionFundPromoterResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 链上地址
  txHash?: string(name='tx_hash'),
}

/**
 * Description: 营销分销平台推广人钱包更新
 * Summary: 营销分销平台推广人钱包更新
 */
async function updateDistributionFundPromoter(request: UpdateDistributionFundPromoterRequest): UpdateDistributionFundPromoterResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateDistributionFundPromoterEx(request, headers, runtime);
}

/**
 * Description: 营销分销平台推广人钱包更新
 * Summary: 营销分销平台推广人钱包更新
 */
async function updateDistributionFundPromoterEx(request: UpdateDistributionFundPromoterRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateDistributionFundPromoterResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.distribution.fund.promoter.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateDistributionFundShopRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 审批中额度
  approveQuota: string(name='approve_quota'),
  // 可提现余额
  balance: string(name='balance'),
  // 已到账额度
  finishQuota: string(name='finish_quota'),
  // 商户id
  shopId: string(name='shop_id'),
}

model UpdateDistributionFundShopResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 链上地址
  txHash?: string(name='tx_hash'),
}

/**
 * Description: 营销分销平台商户账户更新
 * Summary: 营销分销平台商户账户更新
 */
async function updateDistributionFundShop(request: UpdateDistributionFundShopRequest): UpdateDistributionFundShopResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateDistributionFundShopEx(request, headers, runtime);
}

/**
 * Description: 营销分销平台商户账户更新
 * Summary: 营销分销平台商户账户更新
 */
async function updateDistributionFundShopEx(request: UpdateDistributionFundShopRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateDistributionFundShopResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.distribution.fund.shop.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDistributionFundPromoterRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 分页号
  pageNum: long(name='page_num'),
  // 分页显示条数
  pageSize: long(name='page_size'),
  // 推广人id
  promoterId: string(name='promoter_id'),
}

model QueryDistributionFundPromoterResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 推广人账户列表
  fundList?: [ FundInfo ](name='fund_list'),
  // 分页号
  pageNum?: long(name='page_num'),
  // 分页显示条数
  pageSize?: long(name='page_size'),
  // 推广人id
  promoterId?: string(name='promoter_id'),
  // 总量
  totalCount?: long(name='total_count'),
}

/**
 * Description: 营销分销平台推广人账户查询
 * Summary: 营销分销平台推广人账户查询
 */
async function queryDistributionFundPromoter(request: QueryDistributionFundPromoterRequest): QueryDistributionFundPromoterResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDistributionFundPromoterEx(request, headers, runtime);
}

/**
 * Description: 营销分销平台推广人账户查询
 * Summary: 营销分销平台推广人账户查询
 */
async function queryDistributionFundPromoterEx(request: QueryDistributionFundPromoterRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDistributionFundPromoterResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.distribution.fund.promoter.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDistributionFundShopRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 商户id
  shopId: string(name='shop_id'),
}

model QueryDistributionFundShopResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 审批中额度
  approveQuota?: string(name='approve_quota'),
  // 可提现额度
  balance?: string(name='balance'),
  // 已到账额度
  finishQuota?: string(name='finish_quota'),
  // 商户id
  shopId?: string(name='shop_id'),
}

/**
 * Description: 营销分销平台商户账户查询
 * Summary: 营销分销平台商户账户查询
 */
async function queryDistributionFundShop(request: QueryDistributionFundShopRequest): QueryDistributionFundShopResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDistributionFundShopEx(request, headers, runtime);
}

/**
 * Description: 营销分销平台商户账户查询
 * Summary: 营销分销平台商户账户查询
 */
async function queryDistributionFundShopEx(request: QueryDistributionFundShopRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDistributionFundShopResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.distribution.fund.shop.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDistributionFundPromoterflowRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 分页号
  pageNum: long(name='page_num'),
  // 分页显示条数
  pageSize: long(name='page_size'),
  // 推广人id
  promoterId: string(name='promoter_id'),
  // 商户id
  shopId: string(name='shop_id'),
}

model QueryDistributionFundPromoterflowResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 流水信息列表
  capitalFlows?: [ CapitalInfo ](name='capital_flows'),
  // 分页号
  pageNum?: long(name='page_num'),
  // 分页显示条数
  pageSize?: long(name='page_size'),
  // 总数量
  totalCount?: string(name='total_count'),
}

/**
 * Description: 营销分销平台推广人账户流水查询
 * Summary: 营销分销平台推广人账户流水查询
 */
async function queryDistributionFundPromoterflow(request: QueryDistributionFundPromoterflowRequest): QueryDistributionFundPromoterflowResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDistributionFundPromoterflowEx(request, headers, runtime);
}

/**
 * Description: 营销分销平台推广人账户流水查询
 * Summary: 营销分销平台推广人账户流水查询
 */
async function queryDistributionFundPromoterflowEx(request: QueryDistributionFundPromoterflowRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDistributionFundPromoterflowResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.distribution.fund.promoterflow.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateDistributionOrderPromoterRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 购买用户id
  buyerId: string(name='buyer_id'),
  // 佣金
  commission: string(name='commission'),
  // 佣金比例 10表示10%
  commissionRate: string(name='commission_rate'),
  // 推广订单id
  orderId: string(name='order_id'),
  // 订单金额
  orderPrice: string(name='order_price'),
  // 推广人上级ID
  prevPromoterId: string(name='prev_promoter_id'),
  // 推广人上级分佣金额
  prevPromoterPrice: string(name='prev_promoter_price'),
  // 商品id
  productId: string(name='product_id'),
  // 推广人id
  promoterId: string(name='promoter_id'),
}

model CreateDistributionOrderPromoterResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 链上地址
  txHash?: string(name='tx_hash'),
}

/**
 * Description: 营销分销平台推广订单创建
 * Summary: 营销分销平台推广订单创建
 */
async function createDistributionOrderPromoter(request: CreateDistributionOrderPromoterRequest): CreateDistributionOrderPromoterResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createDistributionOrderPromoterEx(request, headers, runtime);
}

/**
 * Description: 营销分销平台推广订单创建
 * Summary: 营销分销平台推广订单创建
 */
async function createDistributionOrderPromoterEx(request: CreateDistributionOrderPromoterRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateDistributionOrderPromoterResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.distribution.order.promoter.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateDistributionOrderTradeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 买家id
  buyerId: string(name='buyer_id'),
  // 买家信息
  buyerInfo: string(name='buyer_info'),
  // 买家名称
  buyerName: string(name='buyer_name'),
  // 收银单号
  cashierId: string(name='cashier_id'),
  // 外部子订单id
  childId: string(name='child_id'),
  // 分销交易分佣信息
  distributionInfo: string(name='distribution_info'),
  // 分销商城id
  distributionShopId: string(name='distribution_shop_id'),
  // 分销商城名称
  distributionShopName: string(name='distribution_shop_name'),
  // 订单过期时间戳
  expireTime: long(name='expire_time'),
  // 订单扩展信息
  extend: string(name='extend'),
  // 内部渠道
  innerSource: string(name='inner_source'),
  // 交易参与方
  joinTrader: string(name='join_trader'),
  // 订单id
  orderId: string(name='order_id'),
  // 订单金额 单位 分
  orderPrice: long(name='order_price'),
  // 外部父订单id
  parentId: string(name='parent_id'),
  // 订单支付信息
  payInfo: string(name='pay_info'),
  // 结算状态 I待结算 S已结算
  payStatus: string(name='pay_status'),
  // 上级推广金额
  prevPromoterPrice: string(name='prev_promoter_price'),
  // 商品描述
  productDesc: string(name='product_desc'),
  // 商品id
  productId: string(name='product_id'),
  // 商品名称
  productName: string(name='product_name'),
  // 商品数量
  productNum: long(name='product_num'),
  // 商品价格
  productPrice: string(name='product_price'),
  // 商品类型
  productType: string(name='product_type'),
  // 推广订单id
  promoterOrderId: string(name='promoter_order_id'),
  // 商品原始金额
  realPrice: string(name='real_price'),
  // 退款时间戳
  refundTime: long(name='refund_time'),
  // 请求系统
  reqSystem: string(name='req_system'),
  // 卖方id
  sellerId: string(name='seller_id'),
  // 卖方信息
  sellerInfo: string(name='seller_info'),
  // 卖方名称
  sellerName: string(name='seller_name'),
  // 分享人
  share: string(name='share'),
  // 商户id
  shopId: string(name='shop_id'),
  // 订单渠道
  source: string(name='source'),
  // 交易状态 W-待付款、S-成功、F-失败、C-待确认
  status: string(name='status'),
  // 购买订单id
  tradeId: string(name='trade_id'),
  // 交易时间戳
  tradeTime: long(name='trade_time'),
  // 交易类型
  tradeType: string(name='trade_type'),
  // 业务类型
  type: string(name='type'),
}

model CreateDistributionOrderTradeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 链上地址
  txHash?: string(name='tx_hash'),
}

/**
 * Description: 营销分销平台购买订单创建
 * Summary: 营销分销平台购买订单创建
 */
async function createDistributionOrderTrade(request: CreateDistributionOrderTradeRequest): CreateDistributionOrderTradeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createDistributionOrderTradeEx(request, headers, runtime);
}

/**
 * Description: 营销分销平台购买订单创建
 * Summary: 营销分销平台购买订单创建
 */
async function createDistributionOrderTradeEx(request: CreateDistributionOrderTradeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateDistributionOrderTradeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.distribution.order.trade.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDistributionOrderPromoterRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 订单id
  orderId: string(name='order_id'),
}

model QueryDistributionOrderPromoterResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 佣金
  commission?: string(name='commission'),
  // 佣金比例 10表示 10%
  commissionRate?: string(name='commission_rate'),
  // 订单id
  orderId?: string(name='order_id'),
  // 订单金额
  orderPrice?: string(name='order_price'),
  // 推广人上级ID
  prevPromoterId?: string(name='prev_promoter_id'),
  // 推广人上级分佣金额
  prevPromoterPrice?: string(name='prev_promoter_price'),
  // 商品id
  productId?: string(name='product_id'),
  // 推广人id
  promoterId?: string(name='promoter_id'),
  // 链上地址
  txHash?: string(name='tx_hash'),
}

/**
 * Description: 营销分销平台推广订单查询
 * Summary: 营销分销平台推广订单查询
 */
async function queryDistributionOrderPromoter(request: QueryDistributionOrderPromoterRequest): QueryDistributionOrderPromoterResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDistributionOrderPromoterEx(request, headers, runtime);
}

/**
 * Description: 营销分销平台推广订单查询
 * Summary: 营销分销平台推广订单查询
 */
async function queryDistributionOrderPromoterEx(request: QueryDistributionOrderPromoterRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDistributionOrderPromoterResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.distribution.order.promoter.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDistributionOrderRakebackRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 订单id
  orderId: string(name='order_id'),
}

model QueryDistributionOrderRakebackResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 订单id
  orderId?: string(name='order_id'),
  // 返佣信息列表
  rakebackList?: [ RakeBackInfo ](name='rakeback_list'),
}

/**
 * Description: 营销分销平台订单返佣信息查询
 * Summary: 营销分销平台订单返佣信息查询
 */
async function queryDistributionOrderRakeback(request: QueryDistributionOrderRakebackRequest): QueryDistributionOrderRakebackResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDistributionOrderRakebackEx(request, headers, runtime);
}

/**
 * Description: 营销分销平台订单返佣信息查询
 * Summary: 营销分销平台订单返佣信息查询
 */
async function queryDistributionOrderRakebackEx(request: QueryDistributionOrderRakebackRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDistributionOrderRakebackResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.distribution.order.rakeback.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDistributionOrderTradeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 订单id
  orderId: string(name='order_id'),
}

model QueryDistributionOrderTradeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 买家id
  buyerId?: string(name='buyer_id'),
  // 买家信息
  buyerInfo?: string(name='buyer_info'),
  // 买家名称
  buyerName?: string(name='buyer_name'),
  // 收银单号
  cashierId?: string(name='cashier_id'),
  // 外部子订单id
  childId?: string(name='child_id'),
  // 分销交易分佣信息
  distributionInfo?: string(name='distribution_info'),
  // 分销商城id
  distributionShopId?: string(name='distribution_shop_id'),
  // 分销商城名称
  distributionShopName?: string(name='distribution_shop_name'),
  // 订单过期时间戳
  expireTime?: long(name='expire_time'),
  // 订单扩展信息
  extend?: string(name='extend'),
  // 内部渠道
  innerSource?: string(name='inner_source'),
  // 交易参与方
  joinTrader?: string(name='join_trader'),
  // 订单id
  orderId?: string(name='order_id'),
  // 订单金额
  orderPrice?: string(name='order_price'),
  // 外部父订单id
  parentId?: string(name='parent_id'),
  // 订单支付信息f
  payInfo?: string(name='pay_info'),
  // 结算状态 I待结算 S已结算
  payStatus?: string(name='pay_status'),
  // 商品描述
  productDesc?: string(name='product_desc'),
  // 商品id
  productId?: string(name='product_id'),
  // 商品名称
  productName?: string(name='product_name'),
  // 商品数量
  productNum?: long(name='product_num'),
  // 商品单价
  productPrice?: string(name='product_price'),
  // 商品类型
  productType?: string(name='product_type'),
  // 推广人订单id
  promoterOrderId?: string(name='promoter_order_id'),
  // 商品原始金额
  realPrice?: string(name='real_price'),
  // 退款时间
  refundTime?: long(name='refund_time'),
  // 请求系统
  reqSystem?: string(name='req_system'),
  // 卖家id
  sellerId?: string(name='seller_id'),
  // 卖家信息
  sellerInfo?: string(name='seller_info'),
  // 卖家名称
  sellerName?: string(name='seller_name'),
  // 分享人
  share?: string(name='share'),
  // 商户id
  shopId?: string(name='shop_id'),
  // 订单渠道
  source?: string(name='source'),
  // 状态 W-待付款、S-成功、F-失败、C-待确认
  status?: string(name='status'),
  // 购买订单id
  tradeId?: string(name='trade_id'),
  // 交易时间戳
  tradeTime?: long(name='trade_time'),
  // 交易类型
  tradeType?: string(name='trade_type'),
  // 业务类型
  type?: string(name='type'),
}

/**
 * Description: 营销分销平台购买订单查询
 * Summary: 营销分销平台购买订单查询
 */
async function queryDistributionOrderTrade(request: QueryDistributionOrderTradeRequest): QueryDistributionOrderTradeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDistributionOrderTradeEx(request, headers, runtime);
}

/**
 * Description: 营销分销平台购买订单查询
 * Summary: 营销分销平台购买订单查询
 */
async function queryDistributionOrderTradeEx(request: QueryDistributionOrderTradeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDistributionOrderTradeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.distribution.order.trade.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateLogisticFinanceDisRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 扩展字段
  extend?: string(name='extend'),
  // 是否为他人代理申请分布式数字身份,缺省时为自己创建分布式数字身份
  isAgent?: boolean(name='is_agent'),
  // 用户（企业）名称
  userName: string(name='user_name'),
}

model CreateLogisticFinanceDisResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 生成的分布式数字身份id
  did?: string(name='did'),
}

/**
 * Description: DIS 分布式数字身份申请
 * Summary: DIS 分布式数字身份申请
 */
async function createLogisticFinanceDis(request: CreateLogisticFinanceDisRequest): CreateLogisticFinanceDisResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createLogisticFinanceDisEx(request, headers, runtime);
}

/**
 * Description: DIS 分布式数字身份申请
 * Summary: DIS 分布式数字身份申请
 */
async function createLogisticFinanceDisEx(request: CreateLogisticFinanceDisRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateLogisticFinanceDisResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.logistic.finance.dis.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListLogisticFinanceDisRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
}

model ListLogisticFinanceDisResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 分布式数字身份列表
  didList?: [ DidInfo ](name='did_list'),
}

/**
 * Description: 查询 DIS 分布式数字身份列表
 * Summary: 查询 DIS 分布式数字身份列表
 */
async function listLogisticFinanceDis(request: ListLogisticFinanceDisRequest): ListLogisticFinanceDisResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listLogisticFinanceDisEx(request, headers, runtime);
}

/**
 * Description: 查询 DIS 分布式数字身份列表
 * Summary: 查询 DIS 分布式数字身份列表
 */
async function listLogisticFinanceDisEx(request: ListLogisticFinanceDisRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListLogisticFinanceDisResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.logistic.finance.dis.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateLogisticFinanceDisvcRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 指定可验证声明颁发对象的分布式数字身份id
  destDid: string(name='dest_did'),
  // 可验证声明有效期 (时间戳) ， 到达该时间戳表示的时间时过期， 默认一天
  expire?: string(name='expire'),
  // vc颁发者分布式数字身份，缺省时为调用者的默认分布式数字身份
  srcDid?: string(name='src_did'),
}

model CreateLogisticFinanceDisvcResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 可验证声明id
  vcId?: string(name='vc_id'),
}

/**
 * Description: 为成员颁发可验证声明用于允许指定成员有访问数据的权限
 * Summary: 颁发可验证声明
 */
async function createLogisticFinanceDisvc(request: CreateLogisticFinanceDisvcRequest): CreateLogisticFinanceDisvcResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createLogisticFinanceDisvcEx(request, headers, runtime);
}

/**
 * Description: 为成员颁发可验证声明用于允许指定成员有访问数据的权限
 * Summary: 颁发可验证声明
 */
async function createLogisticFinanceDisvcEx(request: CreateLogisticFinanceDisvcRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateLogisticFinanceDisvcResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.logistic.finance.disvc.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryLogisticFinanceDisvcRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 代理申请的分布式数字身份，缺省时为自己的分布式数字身份
  agentDid?: string(name='agent_did'),
  // 可验证声明id
  vcId: string(name='vc_id'),
}

model QueryLogisticFinanceDisvcResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 可验证声明完整内容
  vc?: string(name='vc'),
}

/**
 * Description: 查询颁发的可验证声明完整声明内容
 * Summary: 查询颁发的可验证声明
 */
async function queryLogisticFinanceDisvc(request: QueryLogisticFinanceDisvcRequest): QueryLogisticFinanceDisvcResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryLogisticFinanceDisvcEx(request, headers, runtime);
}

/**
 * Description: 查询颁发的可验证声明完整声明内容
 * Summary: 查询颁发的可验证声明
 */
async function queryLogisticFinanceDisvcEx(request: QueryLogisticFinanceDisvcRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryLogisticFinanceDisvcResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.logistic.finance.disvc.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateLogisticFinanceAccountRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 指定的分布式数字身份，缺省时默认为自己的分布式数字身份
  did?: string(name='did'),
  // 纳税人识别号
  draweeTaxNo: string(name='drawee_tax_no'),
  // 业务方企业id
  orgId: string(name='org_id'),
  // 业务方用户id
  userId: string(name='user_id'),
}

model CreateLogisticFinanceAccountResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 平台内唯一标识，格式为 org_id:user_id:drawee_tax_no
  accountId?: string(name='account_id'),
}

/**
 * Description: 物流金融平台用户账户映射
 * Summary: 物流金融平台用户账户映射
 */
async function createLogisticFinanceAccount(request: CreateLogisticFinanceAccountRequest): CreateLogisticFinanceAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createLogisticFinanceAccountEx(request, headers, runtime);
}

/**
 * Description: 物流金融平台用户账户映射
 * Summary: 物流金融平台用户账户映射
 */
async function createLogisticFinanceAccountEx(request: CreateLogisticFinanceAccountRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateLogisticFinanceAccountResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.logistic.finance.account.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BatchcreateLogisticFinanceAccountRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 指定的分布式数字身份，缺省时为自己的分布式数字身份
  did?: string(name='did'),
  // 业务方用户列表，一次最多不超过200
  users: [ LogisticFinUser ](name='users'),
}

model BatchcreateLogisticFinanceAccountResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 失败列表
  failList?: [ LogisticFinUser ](name='fail_list'),
  // 映射失败数
  failNum?: long(name='fail_num'),
  // 成功列表
  successList?: [ string ](name='success_list'),
  // 映射成功数
  successNum?: long(name='success_num'),
}

/**
 * Description: 物流金融平台账户批量映射
 * Summary: 物流金融平台账户批量映射
 */
async function batchcreateLogisticFinanceAccount(request: BatchcreateLogisticFinanceAccountRequest): BatchcreateLogisticFinanceAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return batchcreateLogisticFinanceAccountEx(request, headers, runtime);
}

/**
 * Description: 物流金融平台账户批量映射
 * Summary: 物流金融平台账户批量映射
 */
async function batchcreateLogisticFinanceAccountEx(request: BatchcreateLogisticFinanceAccountRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BatchcreateLogisticFinanceAccountResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.logistic.finance.account.batchcreate', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateLogisticFinanceOrderRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 用户链上账户
  // 与司机did 二选一填写
  accountId?: string(name='account_id'),
  // 运费
  allFreight?: string(name='all_freight'),
  // 回单押金
  // 
  backFee?: string(name='back_fee'),
  // 货源单号
  cargoOrder?: string(name='cargo_order'),
  // 车牌颜色
  cartBadgeColor: string(name='cart_badge_color'),
  // 车牌号
  cartBadgeNo: string(name='cart_badge_no'),
  // 建单时间
  createdTime: long(name='created_time'),
  // 受票方名称
  drawee: string(name='drawee'),
  // 受票方纳税人识别号
  draweeTaxNo: string(name='drawee_tax_no'),
  // 司机分布式身份
  driverDid?: string(name='driver_did'),
  // 司机姓名
  // 已填司机分布式身份的情况下可不填
  driverName?: string(name='driver_name'),
  // 目的地城市CODE
  endCityCode: string(name='end_city_code'),
  // 目的地城市名称
  endCityName: string(name='end_city_name'),
  // 目的地区县CODE
  endCountyCode?: string(name='end_county_code'),
  // 目的地区县名称
  endCountyName?: string(name='end_county_name'),
  // 结束行政区划代码
  endDivisionCode: string(name='end_division_code'),
  // 目的地省份CODE
  endProvinceCode: string(name='end_province_code'),
  // 目的地省份名称
  endProvinceName: string(name='end_province_name'),
  // 运费增项
  freightIncr?: string(name='freight_incr'),
  // 货物数量
  goodsAmount?: long(name='goods_amount'),
  // 货物数量单位类型
  goodsAmountType?: string(name='goods_amount_type'),
  // 货物名称
  goodsName: string(name='goods_name'),
  // 司机身份证号
  // 已填司机分布式身份的情况下可不填
  idCard?: string(name='id_card'),
  // 运费扣减
  // 
  lossFee?: string(name='loss_fee'),
  // 司机手机号
  // 已填司机分布式身份的情况下可不填
  mobileNo?: string(name='mobile_no'),
  // 系统识别id
  // 网商识别号
  partnerId?: string(name='partner_id'),
  // 无车承运平台分布式数字身份，缺省时为自己的分布式数字身份
  platformDid?: string(name='platform_did'),
  // 预付款金额
  prepayments?: string(name='prepayments'),
  // 线下预付ETC
  prepaymentsBuyEtc?: string(name='prepayments_buy_etc'),
  // 线下气款金额
  prepaymentsBuyGas?: string(name='prepayments_buy_gas'),
  // 线下油款预付
  prepaymentsBuyOil?: string(name='prepayments_buy_oil'),
  // 预付ETC卡金额
  prepaymentsEtccard?: string(name='prepayments_etccard'),
  // 预付油卡金额
  prepaymentsOilcard?: string(name='prepayments_oilcard'),
  // 油卡赠送金额
  presentAmountOil?: string(name='present_amount_oil'),
  // 起始地CODE
  startCityCode: string(name='start_city_code'),
  // 起始地城市名称
  startCityName: string(name='start_city_name'),
  // 起始地区县CODE
  startCountyCode?: string(name='start_county_code'),
  // 起始地区县名称
  startCountyName?: string(name='start_county_name'),
  // 起始行政区划代码
  startDivisionCode: string(name='start_division_code'),
  // 起始地省份CODE
  startProvinceCode: string(name='start_province_code'),
  // 起始地省份名称
  startProvinceName: string(name='start_province_name'),
  // 起运时间戳
  startTime: long(name='start_time'),
  // 运单id
  taxWaybillId: string(name='tax_waybill_id'),
  // 运输单价
  unitPrice?: string(name='unit_price'),
}

model CreateLogisticFinanceOrderResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 链上凭证
  txCode?: string(name='tx_code'),
}

/**
 * Description: 物流金融平台物流运单创建
 * Summary: 物流金融平台物流运单创建
 */
async function createLogisticFinanceOrder(request: CreateLogisticFinanceOrderRequest): CreateLogisticFinanceOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createLogisticFinanceOrderEx(request, headers, runtime);
}

/**
 * Description: 物流金融平台物流运单创建
 * Summary: 物流金融平台物流运单创建
 */
async function createLogisticFinanceOrderEx(request: CreateLogisticFinanceOrderRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateLogisticFinanceOrderResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.logistic.finance.order.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model FinishLogisticFinanceOrderRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链上账号 
  // 与司机did 二选一填写
  accountId?: string(name='account_id'),
  // 运费
  allFreight?: string(name='all_freight'),
  // 回单押金
  backFee?: string(name='back_fee'),
  // 货源单号
  cargoOrder?: string(name='cargo_order'),
  // 车牌颜色
  cartBadgeColor: string(name='cart_badge_color'),
  // 车牌号
  cartBadgeNo: string(name='cart_badge_no'),
  // 建单时间
  createdTime: long(name='created_time'),
  // 受票方名称
  drawee: string(name='drawee'),
  // 受票方纳税人识别号
  draweeTaxNo: string(name='drawee_tax_no'),
  // 司机分布式数字身份
  driverDid?: string(name='driver_did'),
  // 司机姓名
  // 已填司机分布式身份的情况下可不填
  driverName?: string(name='driver_name'),
  // 目的地城市CODE
  endCityCode: string(name='end_city_code'),
  // 目的地城市名称
  endCityName: string(name='end_city_name'),
  // 目的地区县CODE
  endCountyCode?: string(name='end_county_code'),
  // 目的地区县名称
  endCountyName?: string(name='end_county_name'),
  // 结束行政区划代码
  endDivisionCode: string(name='end_division_code'),
  // 目的地省份CODE
  endProvinceCode: string(name='end_province_code'),
  // 目的地省份名称
  endProvinceName: string(name='end_province_name'),
  // 终结时间
  endTime: long(name='end_time'),
  // 运费增项
  freightIncr?: string(name='freight_incr'),
  // 货物数量
  goodsAmount?: long(name='goods_amount'),
  // 货物数量单位类型
  goodsAmountType?: string(name='goods_amount_type'),
  // 货物名称
  goodsName: string(name='goods_name'),
  // 司机身份证号
  // 已填司机分布式身份的情况下可不填
  idCard?: string(name='id_card'),
  // 运费扣减
  lossFee?: string(name='loss_fee'),
  // 司机手机号
  // 已填司机分布式身份的情况下可不填
  mobileNo?: string(name='mobile_no'),
  // 系统识别id
  // 网商识别号
  partnerId?: string(name='partner_id'),
  // 是否进行资金验证
  payCheck?: boolean(name='pay_check'),
  // 无车承运平台分布式数字身份，缺省时为自己的分布式数字身份
  platformDid?: string(name='platform_did'),
  // 预付款金额
  prepayments?: string(name='prepayments'),
  // 线下预付ETC
  prepaymentsBuyEtc?: string(name='prepayments_buy_etc'),
  // 线下气款金额
  prepaymentsBuyGas?: string(name='prepayments_buy_gas'),
  // 线下油款预付
  prepaymentsBuyOil?: string(name='prepayments_buy_oil'),
  // 预付ETC卡金额
  prepaymentsEtccard?: string(name='prepayments_etccard'),
  // 预付油卡金额
  prepaymentsOilcard?: string(name='prepayments_oilcard'),
  // 油卡赠送金额
  presentAmountOil?: string(name='present_amount_oil'),
  // 起始地CODE
  startCityCode: string(name='start_city_code'),
  // 起始地城市名称
  startCityName: string(name='start_city_name'),
  // 起始地区县CODE
  startCountyCode?: string(name='start_county_code'),
  // 起始地区县名称
  startCountyName?: string(name='start_county_name'),
  // 起始行政区划代码
  startDivisionCode: string(name='start_division_code'),
  // 起始地省份CODE
  startProvinceCode: string(name='start_province_code'),
  // 起始地省份名称
  startProvinceName: string(name='start_province_name'),
  // 起运时间
  startTime: long(name='start_time'),
  // 运单ID
  taxWaybillId: string(name='tax_waybill_id'),
  // 运输单价
  unitPrice?: string(name='unit_price'),
}

model FinishLogisticFinanceOrderResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 链上凭证
  txCode?: string(name='tx_code'),
}

/**
 * Description: 物流金融平台运单完成
 * Summary: 物流金融平台运单完成
 */
async function finishLogisticFinanceOrder(request: FinishLogisticFinanceOrderRequest): FinishLogisticFinanceOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return finishLogisticFinanceOrderEx(request, headers, runtime);
}

/**
 * Description: 物流金融平台运单完成
 * Summary: 物流金融平台运单完成
 */
async function finishLogisticFinanceOrderEx(request: FinishLogisticFinanceOrderRequest, headers: map[string]string, runtime: Util.RuntimeOptions): FinishLogisticFinanceOrderResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.logistic.finance.order.finish', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateLogisticFinancePayorderRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 确认到账时间
  arriveTime: long(name='arrive_time'),
  // 关联银行流水号
  bankSn: string(name='bank_sn'),
  // 付款金额
  payAmount: string(name='pay_amount'),
  // 付款方银行账号
  payBankCardNo: string(name='pay_bank_card_no'),
  // 付款方开户行
  payBankName: string(name='pay_bank_name'),
  // 付款方did
  payDid?: string(name='pay_did'),
  // 付款方名称
  payName: string(name='pay_name'),
  // 付款时间戳
  payTime: long(name='pay_time'),
  // 支付类型
  payTypeNew: string(name='pay_type_new'),
  // 支付方式
  payWay: string(name='pay_way'),
  // 无车承运平台分布式数字身份，缺省为自己的分布式数字身份
  platformDid?: string(name='platform_did'),
  // 支付订单ID
  posInfoId: string(name='pos_info_id'),
  // 实际付款方开户行
  realPayBank: string(name='real_pay_bank'),
  // 实际付款方银行账号
  realPayBankCardNo: string(name='real_pay_bank_card_no'),
  // 实际付款方名称
  realPayName: string(name='real_pay_name'),
  // 收款方银行账号
  recvBankCardNo: string(name='recv_bank_card_no'),
  // 收款方开户行
  recvBankName: string(name='recv_bank_name'),
  // 收款方did
  recvDid?: string(name='recv_did'),
  // 收款方名称
  recvName: string(name='recv_name'),
  // 关联的运单ID
  waybillId: string(name='waybill_id'),
}

model CreateLogisticFinancePayorderResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 链上凭证
  txCode?: string(name='tx_code'),
}

/**
 * Description: 物流金融平台支付订单创建
 * Summary: 物流金融平台支付订单创建
 */
async function createLogisticFinancePayorder(request: CreateLogisticFinancePayorderRequest): CreateLogisticFinancePayorderResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createLogisticFinancePayorderEx(request, headers, runtime);
}

/**
 * Description: 物流金融平台支付订单创建
 * Summary: 物流金融平台支付订单创建
 */
async function createLogisticFinancePayorderEx(request: CreateLogisticFinancePayorderRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateLogisticFinancePayorderResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.logistic.finance.payorder.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryLogisticFinanceOrderRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 无车承运平台分布式数字身份，缺省时为自己的分布式数字身份
  platformDid?: string(name='platform_did'),
  // 运单ID
  taxWaybillId: string(name='tax_waybill_id'),
}

model QueryLogisticFinanceOrderResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 运单状态
  status?: string(name='status'),
}

/**
 * Description: 物流金融平台订单状态查询
 * Summary: 物流金融平台订单状态查询
 */
async function queryLogisticFinanceOrder(request: QueryLogisticFinanceOrderRequest): QueryLogisticFinanceOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryLogisticFinanceOrderEx(request, headers, runtime);
}

/**
 * Description: 物流金融平台订单状态查询
 * Summary: 物流金融平台订单状态查询
 */
async function queryLogisticFinanceOrderEx(request: QueryLogisticFinanceOrderRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryLogisticFinanceOrderResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.logistic.finance.order.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateLogisticFinanceBillorderRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 受票方名称
  drawee: string(name='drawee'),
  // 受票方纳税人识别号
  draweeTaxNo: string(name='drawee_tax_no'),
  // 发票代码
  lzfpdm?: string(name='lzfpdm'),
  // 发票号码
  lzfphm?: string(name='lzfphm'),
  // 开票时间戳
  openTime: long(name='open_time'),
  // 所属平台的分布式数字身份，缺省时为自己的分布式数字身份
  platformDid?: string(name='platform_did'),
  // 关联的运单ID
  waybillId: string(name='waybill_id'),
}

model CreateLogisticFinanceBillorderResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 链上凭证
  txCode?: string(name='tx_code'),
}

/**
 * Description: 物流金融平台发票订单创建
 * Summary: 物流金融平台发票订单创建
 */
async function createLogisticFinanceBillorder(request: CreateLogisticFinanceBillorderRequest): CreateLogisticFinanceBillorderResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createLogisticFinanceBillorderEx(request, headers, runtime);
}

/**
 * Description: 物流金融平台发票订单创建
 * Summary: 物流金融平台发票订单创建
 */
async function createLogisticFinanceBillorderEx(request: CreateLogisticFinanceBillorderRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateLogisticFinanceBillorderResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.logistic.finance.billorder.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ImportLogisticFinanceLocationRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 描述信息
  desc?: string(name='desc'),
  // 运单轨迹信息
  location: [ LogisticLocation ](name='location'),
  // 所属平台分布式数字身份，缺省时为自己的分布式数字身份
  platformDid?: string(name='platform_did'),
  // 运单id
  taxWaybillId: string(name='tax_waybill_id'),
}

model ImportLogisticFinanceLocationResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 物流金融平台运单轨迹信息导入
 * Summary: 物流金融平台运单轨迹信息导入
 */
async function importLogisticFinanceLocation(request: ImportLogisticFinanceLocationRequest): ImportLogisticFinanceLocationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return importLogisticFinanceLocationEx(request, headers, runtime);
}

/**
 * Description: 物流金融平台运单轨迹信息导入
 * Summary: 物流金融平台运单轨迹信息导入
 */
async function importLogisticFinanceLocationEx(request: ImportLogisticFinanceLocationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ImportLogisticFinanceLocationResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.logistic.finance.location.import', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateLogisticFinanceConsignorRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 企业名称
  epCertName: string(name='ep_cert_name'),
  // 企业证件号
  epCertNo: string(name='ep_cert_no'),
  // 扩展字段
  extensionInfo?: string(name='extension_info'),
  // 法人姓名
  legalPersonCertName: string(name='legal_person_cert_name'),
  // 法人身份证
  legalPersonCertNo: string(name='legal_person_cert_no'),
  // 所属无车平台DIS
  platformDid: string(name='platform_did'),
}

model CreateLogisticFinanceConsignorResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回货主did信息
  did?: string(name='did'),
}

/**
 * Description: 物流金融平台创建货主DIS
 * Summary: 物流金融平台创建货主DIS
 */
async function createLogisticFinanceConsignor(request: CreateLogisticFinanceConsignorRequest): CreateLogisticFinanceConsignorResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createLogisticFinanceConsignorEx(request, headers, runtime);
}

/**
 * Description: 物流金融平台创建货主DIS
 * Summary: 物流金融平台创建货主DIS
 */
async function createLogisticFinanceConsignorEx(request: CreateLogisticFinanceConsignorRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateLogisticFinanceConsignorResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.logistic.finance.consignor.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateLogisticFinancePlatformRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 企业名称
  epCertName: string(name='ep_cert_name'),
  // 企业证件号
  epCertNo: string(name='ep_cert_no'),
  // 扩展字段
  extensionInfo?: string(name='extension_info'),
  // 法人姓名
  legalPersonCertName: string(name='legal_person_cert_name'),
  // 法人身份证
  legalPersonCertNo: string(name='legal_person_cert_no'),
}

model CreateLogisticFinancePlatformResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回无车承运平台DIS
  did?: string(name='did'),
}

/**
 * Description: 物流金融平台创建无车承运平台DIS
 * Summary: 物流金融平台创建无车承运平台DIS
 */
async function createLogisticFinancePlatform(request: CreateLogisticFinancePlatformRequest): CreateLogisticFinancePlatformResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createLogisticFinancePlatformEx(request, headers, runtime);
}

/**
 * Description: 物流金融平台创建无车承运平台DIS
 * Summary: 物流金融平台创建无车承运平台DIS
 */
async function createLogisticFinancePlatformEx(request: CreateLogisticFinancePlatformRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateLogisticFinancePlatformResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.logistic.finance.platform.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateLogistFinanceAgentplatformRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 代理创建者did
  agentDid: string(name='agent_did'),
  // 企业名称
  epCertName: string(name='ep_cert_name'),
  // 企业证件号
  epCertNo: string(name='ep_cert_no'),
  // 扩展字段
  extensionInfo?: string(name='extension_info'),
  // 法人姓名
  legalPersonCertName: string(name='legal_person_cert_name'),
  // 法人身份证号
  legalPersonCertNo: string(name='legal_person_cert_no'),
}

model CreateLogistFinanceAgentplatformResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回无车承运平台did
  did?: string(name='did'),
}

/**
 * Description: 物流金融平台代理创建无车承运平台DIS
 * Summary: 物流金融平台代理创建无车承运平台DIS
 */
async function createLogistFinanceAgentplatform(request: CreateLogistFinanceAgentplatformRequest): CreateLogistFinanceAgentplatformResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createLogistFinanceAgentplatformEx(request, headers, runtime);
}

/**
 * Description: 物流金融平台代理创建无车承运平台DIS
 * Summary: 物流金融平台代理创建无车承运平台DIS
 */
async function createLogistFinanceAgentplatformEx(request: CreateLogistFinanceAgentplatformRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateLogistFinanceAgentplatformResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.logist.finance.agentplatform.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateLogisticFinanceDriverRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 身份证号码
  certNo: string(name='cert_no'),
  // 扩展字段
  extensionInfo?: string(name='extension_info'),
  // 手机号码
  mobile: string(name='mobile'),
  // 姓名
  name: string(name='name'),
  // 所属平台did
  platformDid: string(name='platform_did'),
}

model CreateLogisticFinanceDriverResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回司机did
  did?: string(name='did'),
}

/**
 * Description: 物流金融平台创建司机DIS
 * Summary: 物流金融平台创建司机DIS
 */
async function createLogisticFinanceDriver(request: CreateLogisticFinanceDriverRequest): CreateLogisticFinanceDriverResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createLogisticFinanceDriverEx(request, headers, runtime);
}

/**
 * Description: 物流金融平台创建司机DIS
 * Summary: 物流金融平台创建司机DIS
 */
async function createLogisticFinanceDriverEx(request: CreateLogisticFinanceDriverRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateLogisticFinanceDriverResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.logistic.finance.driver.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateLogisticFinanceCargoorderRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 运费
  allFreight: string(name='all_freight'),
  // 货物名称
  cargoName: string(name='cargo_name'),
  // 货源单号
  cargoOrder: string(name='cargo_order'),
  // 货物类型
  cargoType: string(name='cargo_type'),
  // 货主did
  consignorDid: string(name='consignor_did'),
  // 卸货地
  deliveryPlace: string(name='delivery_place'),
  // 装货地
  loadingPlace: string(name='loading_place'),
  // 平台did
  platformDid: string(name='platform_did'),
  // 联系人电话
  userPhone?: string(name='user_phone'),
  // 重量
  weight: string(name='weight'),
}

model CreateLogisticFinanceCargoorderResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 货源链上凭证
  txCode?: string(name='tx_code'),
}

/**
 * Description: 物流金融平台创建货源订单
 * Summary: 物流金融平台创建货源订单
 */
async function createLogisticFinanceCargoorder(request: CreateLogisticFinanceCargoorderRequest): CreateLogisticFinanceCargoorderResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createLogisticFinanceCargoorderEx(request, headers, runtime);
}

/**
 * Description: 物流金融平台创建货源订单
 * Summary: 物流金融平台创建货源订单
 */
async function createLogisticFinanceCargoorderEx(request: CreateLogisticFinanceCargoorderRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateLogisticFinanceCargoorderResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.logistic.finance.cargoorder.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateLogisticFinanceCargopayorderRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 银行流水号
  bankNo: string(name='bank_no'),
  // 货源单号
  cargoOrder: string(name='cargo_order'),
  // 费用类型   (运费、调度费、服务费)
  expenseType: string(name='expense_type'),
  // 支付金额
  payment: string(name='payment'),
  // 付款方did
  payDid: string(name='pay_did'),
  // 平台支付单号
  payId: string(name='pay_id'),
  // 支付备注
  payNote?: string(name='pay_note'),
  // 收款方did
  recvDid: string(name='recv_did'),
}

model CreateLogisticFinanceCargopayorderResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 货源支付链上凭证
  txCode?: string(name='tx_code'),
}

/**
 * Description: 物流金融平台货源支付订单创建
 * Summary: 物流金融平台货源支付订单创建
 */
async function createLogisticFinanceCargopayorder(request: CreateLogisticFinanceCargopayorderRequest): CreateLogisticFinanceCargopayorderResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createLogisticFinanceCargopayorderEx(request, headers, runtime);
}

/**
 * Description: 物流金融平台货源支付订单创建
 * Summary: 物流金融平台货源支付订单创建
 */
async function createLogisticFinanceCargopayorderEx(request: CreateLogisticFinanceCargopayorderRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateLogisticFinanceCargopayorderResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.logistic.finance.cargopayorder.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateOcpProductRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 联盟Id
  baasAlliance: string(name='baas_alliance'),
  // 意义：链扩容字段，表示在默认空间大小基础上，新增空间大小，单位为G，默认值为0。
  // 仅链版本为企业版（enterpriseVer）时，才发挥作用。
  baasCapacity?: string(name='baas_capacity'),
  // 区块链的名称
  baasName: string(name='baas_name'),
  // 意义：链新增节点数，表示在默认4个节点基础上，新增节点数，单位为个，默认值为0。
  //  仅链版本为企业版（enterpriseVer）时，才发挥作用。
  baasNode?: string(name='baas_node'),
  // 意义：Tee链标志，表示创建Tee区块链，默认值为false。 
  // 注意：仅链版本为企业版（enterpriseVer）时，才发挥作用。
  baasTee?: boolean(name='baas_tee'),
  // 基础版（basicVer）、企业版（enterpriseVer）
  baasVer: string(name='baas_ver'),
  // 业务组详细码
  bizCode: string(name='biz_code'),
  // 业务组详细类型
  bizType: string(name='biz_type'),
  // 业务组码
  groupCode: string(name='group_code'),
  // 产品码 全局唯一
  productCode: string(name='product_code'),
}

model CreateOcpProductResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 创建蚂蚁区块链实例
 * Summary: 创建蚂蚁区块链实例
 */
async function createOcpProduct(request: CreateOcpProductRequest): CreateOcpProductResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createOcpProductEx(request, headers, runtime);
}

/**
 * Description: 创建蚂蚁区块链实例
 * Summary: 创建蚂蚁区块链实例
 */
async function createOcpProductEx(request: CreateOcpProductRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateOcpProductResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.ocp.product.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateOcpProductRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 产品实例Id 
  instanceId: string(name='instance_id'),
  // 产品码 全局唯一
  productCode: string(name='product_code'),
  // 增量规格信息（JSON格式）会按照key进行排序
  specification: string(name='specification'),
}

model UpdateOcpProductResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 签名结果
  sign?: string(name='sign'),
}

/**
 * Description: 变配，对已有的实例进行规格变更操作。
 * Summary: 对已有的实例进行规格变更操作
 */
async function updateOcpProduct(request: UpdateOcpProductRequest): UpdateOcpProductResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateOcpProductEx(request, headers, runtime);
}

/**
 * Description: 变配，对已有的实例进行规格变更操作。
 * Summary: 对已有的实例进行规格变更操作
 */
async function updateOcpProductEx(request: UpdateOcpProductRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateOcpProductResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.ocp.product.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CloseOcpProductRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 产品实例Id列    
  instanceId: string(name='instance_id'),
  // 产品码 全局唯一
  productCode: string(name='product_code'),
}

model CloseOcpProductResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 用户主动删除实例或欠费逾期平台按照约定进行强制删除。
 * Summary: 释放资源
 */
async function closeOcpProduct(request: CloseOcpProductRequest): CloseOcpProductResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return closeOcpProductEx(request, headers, runtime);
}

/**
 * Description: 用户主动删除实例或欠费逾期平台按照约定进行强制删除。
 * Summary: 释放资源
 */
async function closeOcpProductEx(request: CloseOcpProductRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CloseOcpProductResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.ocp.product.close', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model EnableOcpProductRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 产品实例Id
  instanceId: string(name='instance_id'),
  // 产品码 全局唯一
  productCode: string(name='product_code'),
}

model EnableOcpProductResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 签名结果
  sign?: string(name='sign'),
}

/**
 * Description: 用户对欠费或者到期实例进行续费操作后，平台会通知产品解除对用户指定实例的操作限制。即恢复正常服务能力。
 * Summary: 恢复资源
 */
async function enableOcpProduct(request: EnableOcpProductRequest): EnableOcpProductResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return enableOcpProductEx(request, headers, runtime);
}

/**
 * Description: 用户对欠费或者到期实例进行续费操作后，平台会通知产品解除对用户指定实例的操作限制。即恢复正常服务能力。
 * Summary: 恢复资源
 */
async function enableOcpProductEx(request: EnableOcpProductRequest, headers: map[string]string, runtime: Util.RuntimeOptions): EnableOcpProductResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.ocp.product.enable', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StopOcpProductRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 产品实例Id
  instanceId: string(name='instance_id'),
  // 产品码 全局唯一
  productCode: string(name='product_code'),
}

model StopOcpProductResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 签名结果   
  sign?: string(name='sign'),
}

/**
 * Description: 用户资源到期或欠费情况下会对资源先进行停服操作，用于限制用户使用但不能删除用户数据！不同的产品可以根据自身的功能进行不同的限制。
 * Summary: 停止服务
 */
async function stopOcpProduct(request: StopOcpProductRequest): StopOcpProductResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return stopOcpProductEx(request, headers, runtime);
}

/**
 * Description: 用户资源到期或欠费情况下会对资源先进行停服操作，用于限制用户使用但不能删除用户数据！不同的产品可以根据自身的功能进行不同的限制。
 * Summary: 停止服务
 */
async function stopOcpProductEx(request: StopOcpProductRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StopOcpProductResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.ocp.product.stop', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model InitOcpProductRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 加载业务的场景
  businessAction: string(name='business_action'),
  // 用于加载对应场景数据的上下文（JSON格式具体同产品方定义）
  businessContext: string(name='business_context'),
  // 流水号用于业务串联，以及幂等
  orderNo?: string(name='order_no'),
  // 产品码 全局唯一
  productCode: string(name='product_code'),
  // 区域
  region?: string(name='region'),
}

model InitOcpProductResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 组合内容
  discreteValues?: [ DiscreteValue ](name='discrete_values'),
  // 签名结果
  sign?: string(name='sign'),
}

/**
 * Description: 售卖页面加载产品个性化内容，比如：类目、库存等，用于辅助用户选择。用户下单后参数会下发给产品方
 * Summary: 加载售卖页自定义参数
 */
async function initOcpProduct(request: InitOcpProductRequest): InitOcpProductResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return initOcpProductEx(request, headers, runtime);
}

/**
 * Description: 售卖页面加载产品个性化内容，比如：类目、库存等，用于辅助用户选择。用户下单后参数会下发给产品方
 * Summary: 加载售卖页自定义参数
 */
async function initOcpProductEx(request: InitOcpProductRequest, headers: map[string]string, runtime: Util.RuntimeOptions): InitOcpProductResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.ocp.product.init', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryOcpProductRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 实例id
  instanceId: string(name='instance_id'),
  // 产品码
  productCode: string(name='product_code'),
  // 租户id
  tenantId: string(name='tenant_id'),
}

model QueryOcpProductResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 状态描述：未开通（UN_OPEN）、初始化（INIT）、开通（OPEN）、释放\关闭（CLOSE）、未知（UNKNOWN）、暂停（STOP）。
  info?: string(name='info'),
}

/**
 * Description: 查询商业化产品的状态
 * Summary: 查询商业化产品的状态
 */
async function queryOcpProduct(request: QueryOcpProductRequest): QueryOcpProductResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryOcpProductEx(request, headers, runtime);
}

/**
 * Description: 查询商业化产品的状态
 * Summary: 查询商业化产品的状态
 */
async function queryOcpProductEx(request: QueryOcpProductRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryOcpProductResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.ocp.product.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model OpenOcpProductRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 实例id
  instanceId: string(name='instance_id'),
  // 产品码
  productCode: string(name='product_code'),
}

model OpenOcpProductResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 开通商业化服务
 * Summary: 开通商业化服务
 */
async function openOcpProduct(request: OpenOcpProductRequest): OpenOcpProductResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return openOcpProductEx(request, headers, runtime);
}

/**
 * Description: 开通商业化服务
 * Summary: 开通商业化服务
 */
async function openOcpProductEx(request: OpenOcpProductRequest, headers: map[string]string, runtime: Util.RuntimeOptions): OpenOcpProductResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.ocp.product.open', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateOcpProductsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 实例id
  instanceId: string(name='instance_id'),
  // 产品码
  productCode: string(name='product_code'),
  // 产品规格
  specification: string(name='specification'),
}

model CreateOcpProductsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 创建商业化产品实例
 * Summary: 创建商业化产品实例
 */
async function createOcpProducts(request: CreateOcpProductsRequest): CreateOcpProductsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createOcpProductsEx(request, headers, runtime);
}

/**
 * Description: 创建商业化产品实例
 * Summary: 创建商业化产品实例
 */
async function createOcpProductsEx(request: CreateOcpProductsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateOcpProductsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.ocp.products.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CallbackOcpProductRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 任务状态变更，是否成功；
  downstatus: boolean(name='downstatus'),
  // 事件类型：开通、变更、释放、创建、停止、恢复等
  event: string(name='event'),
  // 产品实例Id列
  instanceId: string(name='instance_id'),
  // 产品码 全局唯一
  productCode: string(name='product_code'),
  // 租户id
  tenantId: string(name='tenant_id'),
}

model CallbackOcpProductResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 回调接口，产品侧主动通知ocp，产品状态变更。
 * Summary: 主动通知ocp，产品状态变更
 */
async function callbackOcpProduct(request: CallbackOcpProductRequest): CallbackOcpProductResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return callbackOcpProductEx(request, headers, runtime);
}

/**
 * Description: 回调接口，产品侧主动通知ocp，产品状态变更。
 * Summary: 主动通知ocp，产品状态变更
 */
async function callbackOcpProductEx(request: CallbackOcpProductRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CallbackOcpProductResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.ocp.product.callback', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CheckOcpTaskRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 事件类型：开通（AF_OPEN）、变更（AF_MODIFY）、释放（AF_RELEASE）、创建（AF_PROVISION）、停止（AF_STOP）、恢复（AF_RESUME）等。
  event: string(name='event'),
  // 实例id
  instanceId: string(name='instance_id'),
  // 请求平台来源
  platform: string(name='platform'),
  // 产品码
  productCode: string(name='product_code'),
  // 租户id
  tenantId: string(name='tenant_id'),
  // 商品码
  accessCode: string(name='access_code'),
}

model CheckOcpTaskResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 任务是否成功
  taskResult?: boolean(name='task_result'),
}

/**
 * Description: 检查任务状态
 * Summary: 检查任务状态
 */
async function checkOcpTask(request: CheckOcpTaskRequest): CheckOcpTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return checkOcpTaskEx(request, headers, runtime);
}

/**
 * Description: 检查任务状态
 * Summary: 检查任务状态
 */
async function checkOcpTaskEx(request: CheckOcpTaskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CheckOcpTaskResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.ocp.task.check', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExecOcpTaskRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 事件类型：开通（AF_OPEN）、变更（AF_MODIFY）、释放（AF_RELEASE）、创建（AF_PROVISION）、停止（AF_STOP）、恢复（AF_RESUME）等。
  event: string(name='event'),
  // 实例id
  instanceId: string(name='instance_id'),
  // 订单号码
  orderNo: string(name='order_no'),
  // 请求平台来源
  platform: string(name='platform'),
  // 产品码
  productCode: string(name='product_code'),
  // 产品规格
  specification: string(name='specification'),
  // 租户Id
  tenantId: string(name='tenant_id'),
  // 商品码
  accessCode: string(name='access_code'),
}

model ExecOcpTaskResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 任务是否成功
  taskResult?: boolean(name='task_result'),
}

/**
 * Description: 商业化产品相关任务下发
 * Summary: 任务下发
 */
async function execOcpTask(request: ExecOcpTaskRequest): ExecOcpTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return execOcpTaskEx(request, headers, runtime);
}

/**
 * Description: 商业化产品相关任务下发
 * Summary: 任务下发
 */
async function execOcpTaskEx(request: ExecOcpTaskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExecOcpTaskResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.ocp.task.exec', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateBlockchainInstanceInnerRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 区块链名称
  blockchainName: string(name='blockchain_name'),
  // 链打标内容
  blockchainTag?: string(name='blockchain_tag'),
  // Tee链/企业版/企业版  enterprise
  blockchainType: string(name='blockchain_type'),
  // 待创建联盟的信息
  createUnionInfo?: BaasUnionInfo(name='create_union_info'),
  // 节点数
  nodeNumber: long(name='node_number'),
  // 联盟id
  unionId?: long(name='union_id'),
  // 业务线code
  groupCode: string(name='group_code'),
  // 业务线子码
  groupSubCode: string(name='group_sub_code'),
  // 是否需要创建测试链
  testChain: boolean(name='test_chain'),
}

model CreateBlockchainInstanceInnerResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // instanceId
  result?: string(name='result'),
}

/**
 * Description: 区块链实例创建（内部）
 * Summary: 区块链创建（内部）
 */
async function createBlockchainInstanceInner(request: CreateBlockchainInstanceInnerRequest): CreateBlockchainInstanceInnerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createBlockchainInstanceInnerEx(request, headers, runtime);
}

/**
 * Description: 区块链实例创建（内部）
 * Summary: 区块链创建（内部）
 */
async function createBlockchainInstanceInnerEx(request: CreateBlockchainInstanceInnerRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateBlockchainInstanceInnerResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.blockchain.instance.inner.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryBlockchainInstanceBizidRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 内部建链的实例id
  instanceId: string(name='instance_id'),
}

model QueryBlockchainInstanceBizidResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 区块链的相关信息
  result?: [ CreateBlockchainInfo ](name='result'),
}

/**
 * Description: 蚂蚁区块链通过实例查询链id
 * Summary: 蚂蚁区块链通过实例查询链id
 */
async function queryBlockchainInstanceBizid(request: QueryBlockchainInstanceBizidRequest): QueryBlockchainInstanceBizidResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryBlockchainInstanceBizidEx(request, headers, runtime);
}

/**
 * Description: 蚂蚁区块链通过实例查询链id
 * Summary: 蚂蚁区块链通过实例查询链id
 */
async function queryBlockchainInstanceBizidEx(request: QueryBlockchainInstanceBizidRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryBlockchainInstanceBizidResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.blockchain.instance.bizid.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateApiConsortiumRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 某某联盟的使用场景描述
  description: string(name='description'),
  // 联盟名称
  name: string(name='name'),
}

model CreateApiConsortiumResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 请求id
  requestId?: string(name='request_id'),
  // 结果
  result?: Result(name='result'),
}

/**
 * Description: 创建联盟接口
 * Summary: 创建联盟接口
 */
async function createApiConsortium(request: CreateApiConsortiumRequest): CreateApiConsortiumResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createApiConsortiumEx(request, headers, runtime);
}

/**
 * Description: 创建联盟接口
 * Summary: 创建联盟接口
 */
async function createApiConsortiumEx(request: CreateApiConsortiumRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateApiConsortiumResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.api.consortium.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryApiMiniappbrowserAuthtypeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链 ID
  antChainId: string(name='ant_chain_id'),
}

model QueryApiMiniappbrowserAuthtypeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 请求 ID
  requestId?: string(name='request_id'),
  // 授权类型
  result?: MiniAppBrowserAuthType(name='result'),
}

/**
 * Description: 查询链的小程序浏览器授权状态
 * Summary: 查询链的小程序浏览器授权状态
 */
async function queryApiMiniappbrowserAuthtype(request: QueryApiMiniappbrowserAuthtypeRequest): QueryApiMiniappbrowserAuthtypeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryApiMiniappbrowserAuthtypeEx(request, headers, runtime);
}

/**
 * Description: 查询链的小程序浏览器授权状态
 * Summary: 查询链的小程序浏览器授权状态
 */
async function queryApiMiniappbrowserAuthtypeEx(request: QueryApiMiniappbrowserAuthtypeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryApiMiniappbrowserAuthtypeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.api.miniappbrowser.authtype.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryStatisticsPortHeightRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链id
  bizid: string(name='bizid'),
}

model QueryStatisticsPortHeightResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 当前块高
  height?: long(name='height'),
}

/**
 * Description: 查询某链当前块高
 * Summary: 查询某链当前块高
 */
async function queryStatisticsPortHeight(request: QueryStatisticsPortHeightRequest): QueryStatisticsPortHeightResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryStatisticsPortHeightEx(request, headers, runtime);
}

/**
 * Description: 查询某链当前块高
 * Summary: 查询某链当前块高
 */
async function queryStatisticsPortHeightEx(request: QueryStatisticsPortHeightRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryStatisticsPortHeightResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.statistics.port.height.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryStatisticPortBizidRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
}

model QueryStatisticPortBizidResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 链授权列表
  bizList?: [ MyChainInfo ](name='biz_list'),
}

/**
 * Description: 查询授权的链id列表
 * Summary: 查询授权的链id列表
 */
async function queryStatisticPortBizid(request: QueryStatisticPortBizidRequest): QueryStatisticPortBizidResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryStatisticPortBizidEx(request, headers, runtime);
}

/**
 * Description: 查询授权的链id列表
 * Summary: 查询授权的链id列表
 */
async function queryStatisticPortBizidEx(request: QueryStatisticPortBizidRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryStatisticPortBizidResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.statistic.port.bizid.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AddStatisticsPortTaskRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链id
  bizid: string(name='bizid'),
  // 结束块高
  end: long(name='end'),
  // 开始块高
  start: long(name='start'),
}

model AddStatisticsPortTaskResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 添加存量采集任务
 * Summary: 添加存量采集任务
 */
async function addStatisticsPortTask(request: AddStatisticsPortTaskRequest): AddStatisticsPortTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return addStatisticsPortTaskEx(request, headers, runtime);
}

/**
 * Description: 添加存量采集任务
 * Summary: 添加存量采集任务
 */
async function addStatisticsPortTaskEx(request: AddStatisticsPortTaskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddStatisticsPortTaskResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.statistics.port.task.add', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryApiDwhTransactionRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链bizid
  bizId: string(name='biz_id'),
  // block_hash
  blockHash?: string(name='block_hash'),
  // end_timestamp
  endTimestamp?: long(name='end_timestamp'),
  // from
  from?: string(name='from'),
  // pageNo
  pageNo?: long(name='page_no'),
  // pageSize
  pageSize?: long(maximum=100, name='page_size'),
  // startTimestamp
  startTimestamp?: long(name='start_timestamp'),
  // to
  to?: string(name='to'),
  // transactionHash
  transactionHash?: string(name='transaction_hash'),
  // transactionType
  transactionType?: long(name='transaction_type'),
}

model QueryApiDwhTransactionResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // transaction_list
  transactionList?: [ TransactionPo ](name='transaction_list'),
}

/**
 * Description: 查询交易列表
 * Summary: 查询交易列表
 */
async function queryApiDwhTransaction(request: QueryApiDwhTransactionRequest): QueryApiDwhTransactionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryApiDwhTransactionEx(request, headers, runtime);
}

/**
 * Description: 查询交易列表
 * Summary: 查询交易列表
 */
async function queryApiDwhTransactionEx(request: QueryApiDwhTransactionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryApiDwhTransactionResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.api.dwh.transaction.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryApiDwhAccountRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 账户hash ，如果根据账户hash查询账户信息可以填写该字段
  accountHash?: string(name='account_hash'),
  // 链id
  bizId: string(name='biz_id'),
  // 结束时间，如果查询时间段创建的账户，可以填写该字段
  endTimestamp?: long(name='end_timestamp'),
  // 页数，分页使用，从1开始
  pageNo?: long(name='page_no'),
  // 分页大小，取值不能超过100，默认100
  pageSize?: long(maximum=100, minimum=0, name='page_size'),
  // 开始时间，如果查询时间段创建的账户，可以填写该字段
  startTimestamp?: long(name='start_timestamp'),
}

model QueryApiDwhAccountResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 账户列表
  accountList?: [ AccountPo ](name='account_list'),
}

/**
 * Description: 根据自定义条件查询用户列表
 * Summary: 查询账户列表
 */
async function queryApiDwhAccount(request: QueryApiDwhAccountRequest): QueryApiDwhAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryApiDwhAccountEx(request, headers, runtime);
}

/**
 * Description: 根据自定义条件查询用户列表
 * Summary: 查询账户列表
 */
async function queryApiDwhAccountEx(request: QueryApiDwhAccountRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryApiDwhAccountResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.api.dwh.account.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryApiDwhContractRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // biz_id 链id
  bizId?: string(name='biz_id'),
  // 合约地址：如果根据合约地址查询，可以填该字段
  contract?: string(name='contract'),
  // 结束时间：如果根据时间范围查询创建的合约，可以填写该字段
  endTimestamp?: long(name='end_timestamp'),
  // 页数，分页使用，从1开始默认为1
  pageNo?: long(name='page_no'),
  // 分页大小，取值不能超过100，默认100
  pageSize?: long(maximum=100, minimum=0, name='page_size'),
  // 开始时间：如果根据时间范围查询创建的账户，可以填写该字段
  startTimestamp?: long(name='start_timestamp'),
}

model QueryApiDwhContractResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 合约列表
  contractList?: [ ContractInfo ](name='contract_list'),
}

/**
 * Description: 查询合约接口
 * Summary: 查询合约
 */
async function queryApiDwhContract(request: QueryApiDwhContractRequest): QueryApiDwhContractResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryApiDwhContractEx(request, headers, runtime);
}

/**
 * Description: 查询合约接口
 * Summary: 查询合约
 */
async function queryApiDwhContractEx(request: QueryApiDwhContractRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryApiDwhContractResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.api.dwh.contract.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryApiDwhbTransactionRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // biz_id
  bizId: string(name='biz_id'),
  // hash_list
  hashList: [ string ](name='hash_list'),
}

model QueryApiDwhbTransactionResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // transaction
  transactionList?: [ TransactionInfo ](name='transaction_list'),
}

/**
 * Description: 单独查询交易
 * Summary: 查询链上交易
 */
async function queryApiDwhbTransaction(request: QueryApiDwhbTransactionRequest): QueryApiDwhbTransactionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryApiDwhbTransactionEx(request, headers, runtime);
}

/**
 * Description: 单独查询交易
 * Summary: 查询链上交易
 */
async function queryApiDwhbTransactionEx(request: QueryApiDwhbTransactionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryApiDwhbTransactionResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.api.dwhb.transaction.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteCaasContractServiceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 服务ID
  serviceId: string(name='service_id'),
}

model DeleteCaasContractServiceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 删除合约
 * Summary: 删除合约
 */
async function deleteCaasContractService(request: DeleteCaasContractServiceRequest): DeleteCaasContractServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteCaasContractServiceEx(request, headers, runtime);
}

/**
 * Description: 删除合约
 * Summary: 删除合约
 */
async function deleteCaasContractServiceEx(request: DeleteCaasContractServiceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteCaasContractServiceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.caas.contract.service.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateCaasContractServiceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链ID
  chainId: string(maxLength=64, minLength=1, name='chain_id'),
  // 联盟ID
  unionId: string(name='union_id'),
  // 合约模板标识
  templateId: string(maxLength=64, minLength=1, name='template_id'),
  // 合约名称
  name: string(maxLength=64, minLength=1, name='name'),
}

model CreateCaasContractServiceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回结果
  result?: ContractCreateResp(name='result'),
}

/**
 * Description: 新建合约服务
 * Summary: 新建合约服务
 */
async function createCaasContractService(request: CreateCaasContractServiceRequest): CreateCaasContractServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createCaasContractServiceEx(request, headers, runtime);
}

/**
 * Description: 新建合约服务
 * Summary: 新建合约服务
 */
async function createCaasContractServiceEx(request: CreateCaasContractServiceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateCaasContractServiceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.caas.contract.service.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model PagequeryCaasContractServiceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 合约服务类别
  type?: string(name='type'),
  // 页码
  num: long(name='num'),
  // 页大小
  size: long(name='size'),
  // 链id
  chainId: string(name='chain_id'),
}

model PagequeryCaasContractServiceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回结果
  result?: ContractPageResp(name='result'),
}

/**
 * Description: 合约列表查询
 * Summary: 合约列表查询
 */
async function pagequeryCaasContractService(request: PagequeryCaasContractServiceRequest): PagequeryCaasContractServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return pagequeryCaasContractServiceEx(request, headers, runtime);
}

/**
 * Description: 合约列表查询
 * Summary: 合约列表查询
 */
async function pagequeryCaasContractServiceEx(request: PagequeryCaasContractServiceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PagequeryCaasContractServiceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.caas.contract.service.pagequery', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryCaasContractServiceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 服务ID
  serviceId: string(name='service_id'),
}

model QueryCaasContractServiceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回结果
  result?: ContractCreateProcessResp(name='result'),
}

/**
 * Description: 查询创建实例进度
 * Summary: 查询创建实例进度
 */
async function queryCaasContractService(request: QueryCaasContractServiceRequest): QueryCaasContractServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryCaasContractServiceEx(request, headers, runtime);
}

/**
 * Description: 查询创建实例进度
 * Summary: 查询创建实例进度
 */
async function queryCaasContractServiceEx(request: QueryCaasContractServiceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryCaasContractServiceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.caas.contract.service.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeployCaasContractServiceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链ID
  chainId: string(maxLength=64, minLength=1, name='chain_id'),
  // 联盟id
  unionId: string(name='union_id'),
  // 合约模板标识
  templateId: string(maxLength=64, minLength=1, name='template_id'),
  // 合约名称
  name: string(maxLength=64, minLength=1, name='name'),
}

model DeployCaasContractServiceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回结果
  result?: ContractCreateResp(name='result'),
}

/**
 * Description: 自动化部署合约服务
 * Summary: 自动化部署合约服务
 */
async function deployCaasContractService(request: DeployCaasContractServiceRequest): DeployCaasContractServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deployCaasContractServiceEx(request, headers, runtime);
}

/**
 * Description: 自动化部署合约服务
 * Summary: 自动化部署合约服务
 */
async function deployCaasContractServiceEx(request: DeployCaasContractServiceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeployCaasContractServiceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.caas.contract.service.deploy', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListCaasContractServiceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链ID
  chainId: string(name='chain_id'),
}

model ListCaasContractServiceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回结果
  result?: ContractTypeResp(name='result'),
}

/**
 * Description: 查询合约类型列表
 * Summary: 查询合约类型列表
 */
async function listCaasContractService(request: ListCaasContractServiceRequest): ListCaasContractServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listCaasContractServiceEx(request, headers, runtime);
}

/**
 * Description: 查询合约类型列表
 * Summary: 查询合约类型列表
 */
async function listCaasContractServiceEx(request: ListCaasContractServiceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListCaasContractServiceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.caas.contract.service.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DetailCaasContractServiceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 服务ID
  serviceId: string(name='service_id'),
}

model DetailCaasContractServiceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回结果
  result?: ContractDetailResp(name='result'),
}

/**
 * Description: 合约详情
 * Summary: 合约详情
 */
async function detailCaasContractService(request: DetailCaasContractServiceRequest): DetailCaasContractServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return detailCaasContractServiceEx(request, headers, runtime);
}

/**
 * Description: 合约详情
 * Summary: 合约详情
 */
async function detailCaasContractServiceEx(request: DetailCaasContractServiceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DetailCaasContractServiceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.caas.contract.service.detail', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateCaasApplicationManageRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链ID
  chainId: string(name='chain_id'),
  // 联盟id
  unionId: string(name='union_id'),
}

model CreateCaasApplicationManageResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回结果
  result?: ApplicationCreateResp(name='result'),
}

/**
 * Description: 新建应用
 * Summary: 新建应用
 */
async function createCaasApplicationManage(request: CreateCaasApplicationManageRequest): CreateCaasApplicationManageResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createCaasApplicationManageEx(request, headers, runtime);
}

/**
 * Description: 新建应用
 * Summary: 新建应用
 */
async function createCaasApplicationManageEx(request: CreateCaasApplicationManageRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateCaasApplicationManageResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.caas.application.manage.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model PagequeryCaasApplicationManageRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 页码
  num: long(name='num'),
  // 页大小
  size: long(name='size'),
  // 链ID
  chainId: string(name='chain_id'),
}

model PagequeryCaasApplicationManageResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回结果
  result?: ApplicationPageResp(name='result'),
}

/**
 * Description: 应用列表查询
 * Summary: 应用列表查询
 */
async function pagequeryCaasApplicationManage(request: PagequeryCaasApplicationManageRequest): PagequeryCaasApplicationManageResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return pagequeryCaasApplicationManageEx(request, headers, runtime);
}

/**
 * Description: 应用列表查询
 * Summary: 应用列表查询
 */
async function pagequeryCaasApplicationManageEx(request: PagequeryCaasApplicationManageRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PagequeryCaasApplicationManageResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.caas.application.manage.pagequery', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryCaasApplicationManageRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 应用程序ID
  applicationId: string(name='application_id'),
}

model QueryCaasApplicationManageResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回结果
  result?: ContractBindListResp(name='result'),
}

/**
 * Description: 查询合约绑定关系
 * Summary: 查询合约绑定关系
 */
async function queryCaasApplicationManage(request: QueryCaasApplicationManageRequest): QueryCaasApplicationManageResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryCaasApplicationManageEx(request, headers, runtime);
}

/**
 * Description: 查询合约绑定关系
 * Summary: 查询合约绑定关系
 */
async function queryCaasApplicationManageEx(request: QueryCaasApplicationManageRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryCaasApplicationManageResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.caas.application.manage.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UnbindCaasApplicationManageRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 应用程序ID
  applicationId: string(name='application_id'),
}

model UnbindCaasApplicationManageResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 解除授权
 * Summary: 解除授权
 */
async function unbindCaasApplicationManage(request: UnbindCaasApplicationManageRequest): UnbindCaasApplicationManageResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return unbindCaasApplicationManageEx(request, headers, runtime);
}

/**
 * Description: 解除授权
 * Summary: 解除授权
 */
async function unbindCaasApplicationManageEx(request: UnbindCaasApplicationManageRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UnbindCaasApplicationManageResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.caas.application.manage.unbind', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BindCaasApplicationManageRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 应用ID
  applicationId: string(name='application_id'),
  // 合约服务标识集合
  serviceIds?: [ string ](name='service_ids'),
}

model BindCaasApplicationManageResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 绑定合约
 * Summary: 绑定合约
 */
async function bindCaasApplicationManage(request: BindCaasApplicationManageRequest): BindCaasApplicationManageResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return bindCaasApplicationManageEx(request, headers, runtime);
}

/**
 * Description: 绑定合约
 * Summary: 绑定合约
 */
async function bindCaasApplicationManageEx(request: BindCaasApplicationManageRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BindCaasApplicationManageResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.caas.application.manage.bind', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetCaasApplicationManageRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 应用程序ID
  applicationId: string(name='application_id'),
}

model GetCaasApplicationManageResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回结果
  result?: ApplicationGetSkResp(name='result'),
}

/**
 * Description: 查看sk
 * Summary: 查看sk
 */
async function getCaasApplicationManage(request: GetCaasApplicationManageRequest): GetCaasApplicationManageResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getCaasApplicationManageEx(request, headers, runtime);
}

/**
 * Description: 查看sk
 * Summary: 查看sk
 */
async function getCaasApplicationManageEx(request: GetCaasApplicationManageRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetCaasApplicationManageResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.caas.application.manage.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model PagequeryCaasContractMarketRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 页码
  num: long(name='num'),
  // 页大小
  size: long(name='size'),
  // 链id
  chainId: string(name='chain_id'),
}

model PagequeryCaasContractMarketResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回结果
  result?: ContractTemplateListResp(name='result'),
}

/**
 * Description: 智能合约市场列表查询
 * Summary: 智能合约市场列表查询
 */
async function pagequeryCaasContractMarket(request: PagequeryCaasContractMarketRequest): PagequeryCaasContractMarketResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return pagequeryCaasContractMarketEx(request, headers, runtime);
}

/**
 * Description: 智能合约市场列表查询
 * Summary: 智能合约市场列表查询
 */
async function pagequeryCaasContractMarketEx(request: PagequeryCaasContractMarketRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PagequeryCaasContractMarketResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.caas.contract.market.pagequery', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateContractRecordRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // abi对应oss key
  abiOssKey: string(name='abi_oss_key'),
  // 区块链唯一标识
  bizid: string(name='bizid'),
  // bytecode对应oss key
  bytecodeOssKey: string(name='bytecode_oss_key'),
  // 16进制表示的合约identity
  identity: string(maxLength=64, minLength=64, name='identity'),
  // 合约代码中定义的合约实例名，比如solidity的contract 关键字后面的命名
  instanceName: string(name='instance_name'),
  // 合约名称
  name: string(name='name'),
  // 交易hash
  txHash: string(maxLength=64, minLength=64, name='tx_hash'),
  // solidity|cpp|go
  type: string(name='type'),
}

model CreateContractRecordResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 是否成功
  result?: boolean(name='result'),
}

/**
 * Description: 合约部署记录
 * Summary: 合约部署记录
 */
async function createContractRecord(request: CreateContractRecordRequest): CreateContractRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createContractRecordEx(request, headers, runtime);
}

/**
 * Description: 合约部署记录
 * Summary: 合约部署记录
 */
async function createContractRecordEx(request: CreateContractRecordRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateContractRecordResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.contract.record.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetContractRecordRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 区块链唯一标识
  bizid: string(name='bizid'),
  // 16进制表示的合约identity
  identity: string(maxLength=64, minLength=64, name='identity'),
}

model GetContractRecordResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 合约部署记录
  result?: ContractRecord(name='result'),
}

/**
 * Description: 部署记录详情
 * Summary: 部署记录详情
 */
async function getContractRecord(request: GetContractRecordRequest): GetContractRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getContractRecordEx(request, headers, runtime);
}

/**
 * Description: 部署记录详情
 * Summary: 部署记录详情
 */
async function getContractRecordEx(request: GetContractRecordRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetContractRecordResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.contract.record.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateContractRecordRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // abi对应oss key
  abiOssKey: string(name='abi_oss_key'),
  // 区块链唯一标识
  bizid: string(name='bizid'),
  // bytecode对应oss key
  bytecodeOssKey: string(name='bytecode_oss_key'),
  // 16进制表示的合约identity
  identity: string(name='identity'),
}

model UpdateContractRecordResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 是否成功
  result?: boolean(name='result'),
}

/**
 * Description: 合约升级更新
 * Summary: 合约升级更新
 */
async function updateContractRecord(request: UpdateContractRecordRequest): UpdateContractRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateContractRecordEx(request, headers, runtime);
}

/**
 * Description: 合约升级更新
 * Summary: 合约升级更新
 */
async function updateContractRecordEx(request: UpdateContractRecordRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateContractRecordResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.contract.record.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model OnlineContractRecordRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 区块链唯一标识
  bizid: string(name='bizid'),
  // 16进制表示的合约identity
  identity: string(name='identity'),
}

model OnlineContractRecordResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 是否成功
  result?: boolean(name='result'),
}

/**
 * Description: 发布合约服务
 * Summary: 发布合约服务
 */
async function onlineContractRecord(request: OnlineContractRecordRequest): OnlineContractRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return onlineContractRecordEx(request, headers, runtime);
}

/**
 * Description: 发布合约服务
 * Summary: 发布合约服务
 */
async function onlineContractRecordEx(request: OnlineContractRecordRequest, headers: map[string]string, runtime: Util.RuntimeOptions): OnlineContractRecordResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.contract.record.online', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model OfflineContractRecordRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 区块链唯一标识
  bizid: string(name='bizid'),
  // 16进制表示的合约identity
  identity: string(name='identity'),
}

model OfflineContractRecordResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 是否成功
  result?: boolean(name='result'),
}

/**
 * Description: 合约服务下线
 * Summary: 合约服务下线
 */
async function offlineContractRecord(request: OfflineContractRecordRequest): OfflineContractRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return offlineContractRecordEx(request, headers, runtime);
}

/**
 * Description: 合约服务下线
 * Summary: 合约服务下线
 */
async function offlineContractRecordEx(request: OfflineContractRecordRequest, headers: map[string]string, runtime: Util.RuntimeOptions): OfflineContractRecordResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.contract.record.offline', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryContractRecordRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 区块链唯一标识
  bizid: string(name='bizid'),
  // 页号
  pageNo: long(name='page_no'),
  // 页大小
  pageSize: long(name='page_size'),
  // 查询状态
  queryStatus?: long(name='query_status'),
}

model QueryContractRecordResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 当前页元素列表
  content?: [ ContractRecord ](name='content'),
  // 当前页号
  number?: string(name='number'),
  // 当前页大小
  size?: string(name='size'),
  // 元素总个数
  totalElements?: long(name='total_elements'),
  // 总页数
  totalPages?: long(name='total_pages'),
}

/**
 * Description: 查询合约部署记录
 * Summary: 查询合约部署记录
 */
async function queryContractRecord(request: QueryContractRecordRequest): QueryContractRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryContractRecordEx(request, headers, runtime);
}

/**
 * Description: 查询合约部署记录
 * Summary: 查询合约部署记录
 */
async function queryContractRecordEx(request: QueryContractRecordRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryContractRecordResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.contract.record.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExecContractDelegateRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 区块链唯一标识
  bizid: string(name='bizid'),
  // 交易消息体
  body: string(name='body'),
}

model ExecContractDelegateResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回结果
  result?: string(name='result'),
}

/**
 * Description: 合约代理调用
 * Summary: 合约代理调用
 */
async function execContractDelegate(request: ExecContractDelegateRequest): ExecContractDelegateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return execContractDelegateEx(request, headers, runtime);
}

/**
 * Description: 合约代理调用
 * Summary: 合约代理调用
 */
async function execContractDelegateEx(request: ExecContractDelegateRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExecContractDelegateResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.contract.delegate.exec', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExecContractServiceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 区块链唯一标识
  bizid: string(name='bizid'),
  // 交易消息体
  body: string(name='body'),
  // 16进制表示的合约identity
  identity: string(name='identity'),
}

model ExecContractServiceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 执行结果
  result?: string(name='result'),
}

/**
 * Description: 调用合约服务
 * Summary: 调用合约服务
 */
async function execContractService(request: ExecContractServiceRequest): ExecContractServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return execContractServiceEx(request, headers, runtime);
}

/**
 * Description: 调用合约服务
 * Summary: 调用合约服务
 */
async function execContractServiceEx(request: ExecContractServiceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExecContractServiceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.contract.service.exec', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetContractConfigChainRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
}

model GetContractConfigChainResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 当前租户具有访问权限的合约链配置信息列表
  result?: ContractIdeConfigResult(name='result'),
}

/**
 * Description: 获取当前租户具有访问权限的合约链配置列表，方便在client（IDE插件、SDK等）访问合约链
 * Summary: 获取合约链配置
 */
async function getContractConfigChain(request: GetContractConfigChainRequest): GetContractConfigChainResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getContractConfigChainEx(request, headers, runtime);
}

/**
 * Description: 获取当前租户具有访问权限的合约链配置列表，方便在client（IDE插件、SDK等）访问合约链
 * Summary: 获取合约链配置
 */
async function getContractConfigChainEx(request: GetContractConfigChainRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetContractConfigChainResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.contract.config.chain.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetContractAbiUrlRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
}

model GetContractAbiUrlResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 可用于上传文件到oss的相关oss client字段配置，包括服务端的签名，url超期时间等。
  result?: PresignedUrlPolicy(name='result'),
}

/**
 * Description: 申请获取一个可以上传文件到oss的url，此url可用时间默认为30秒
 * Summary: 获取oss的可用url上传文件
 */
async function getContractAbiUrl(request: GetContractAbiUrlRequest): GetContractAbiUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getContractAbiUrlEx(request, headers, runtime);
}

/**
 * Description: 申请获取一个可以上传文件到oss的url，此url可用时间默认为30秒
 * Summary: 获取oss的可用url上传文件
 */
async function getContractAbiUrlEx(request: GetContractAbiUrlRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetContractAbiUrlResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.contract.abi.url.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetContractBytecodeUrlRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
}

model GetContractBytecodeUrlResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 可用于上传文件到oss的相关oss client字段配置，包括服务端的签名，url超期时间等。
  result?: PresignedUrlPolicy(name='result'),
}

/**
 * Description: 申请获取一个可以上传bytecode文件到oss的url，此url可用时间默认为30秒
 * Summary: 获取oss的可用url上传文件
 */
async function getContractBytecodeUrl(request: GetContractBytecodeUrlRequest): GetContractBytecodeUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getContractBytecodeUrlEx(request, headers, runtime);
}

/**
 * Description: 申请获取一个可以上传bytecode文件到oss的url，此url可用时间默认为30秒
 * Summary: 获取oss的可用url上传文件
 */
async function getContractBytecodeUrlEx(request: GetContractBytecodeUrlRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetContractBytecodeUrlResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.contract.bytecode.url.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UploadDataFileBatchqueryRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 上传文件md5值
  fileMd5: string(name='file_md5'),
  // 数据集id
  dataSetId: string(name='data_set_id'),
  // 文件id
  fileObject?: readable(description='待上传文件', ignore='true'),
  fileObjectName?: string(description='待上传文件名', ignore='true'),
  fileId: string(name='file_id'),
}

model UploadDataFileBatchqueryResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 离线任务查询id，批量任务结束后可通过该字段查询结果
  queryId?: string(name='query_id'),
}

/**
 * Description: 上传批量查询数据文件
 * Summary: 上传批量查询数据文件
 */
async function uploadDataFileBatchquery(request: UploadDataFileBatchqueryRequest): UploadDataFileBatchqueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return uploadDataFileBatchqueryEx(request, headers, runtime);
}

/**
 * Description: 上传批量查询数据文件
 * Summary: 上传批量查询数据文件
 */
async function uploadDataFileBatchqueryEx(request: UploadDataFileBatchqueryRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UploadDataFileBatchqueryResponse {
  if (!Util.isUnset(request.fileObject)) {
    var uploadReq = new CreateAntcloudGatewayxFileUploadRequest{
      authToken = request.authToken,
      apiCode = 'baas.data.file.batchquery.upload',
      fileName = request.fileObjectName,
    };
    var uploadResp = createAntcloudGatewayxFileUploadEx(uploadReq, headers, runtime);
    if (!AntchainUtil.isSuccess(uploadResp.resultCode, "ok")) {
      var uploadDataFileBatchqueryResponse = new UploadDataFileBatchqueryResponse{
        reqMsgId = uploadResp.reqMsgId,
        resultCode = uploadResp.resultCode,
        resultMsg = uploadResp.resultMsg,
      };
      return uploadDataFileBatchqueryResponse;
    }
    var uploadHeaders = AntchainUtil.parseUploadHeaders(uploadResp.uploadHeaders);
    AntchainUtil.putObject(request.fileObject, uploadHeaders, uploadResp.uploadUrl);
    request.fileId = uploadResp.fileId;
  }
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.data.file.batchquery.upload', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDataResultBatchqueryRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 上传待查询数据集文件后得到的查询id，在此接口进行结果查询
  queryId: string(name='query_id'),
}

model QueryDataResultBatchqueryResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 结果文件临时链接
  filePath?: string(name='file_path'),
}

/**
 * Description: 获取查询数据集任务结果
 * Summary: 获取查询数据集任务结果
 */
async function queryDataResultBatchquery(request: QueryDataResultBatchqueryRequest): QueryDataResultBatchqueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDataResultBatchqueryEx(request, headers, runtime);
}

/**
 * Description: 获取查询数据集任务结果
 * Summary: 获取查询数据集任务结果
 */
async function queryDataResultBatchqueryEx(request: QueryDataResultBatchqueryRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDataResultBatchqueryResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.data.result.batchquery.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateDataauthorizationParticipantRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 账户名称
  account?: string(name='account'),
  // 业务系统唯一标示
  bizUid: string(maxLength=64, name='biz_uid'),
  // 区块链ID
  blockchainId?: string(name='blockchain_id'),
  // 信用编号
  creditNumber?: string(name='credit_number'),
  // 扩展参数，标准JSON格式
  extensionInfo?: string(maxLength=2000, name='extension_info'),
  // 用户名称
  name: string(maxLength=64, name='name'),
  // 回调通知服务地址
  notificationService?: string(name='notification_service'),
  // did doc中的公开信息
  publicInfo?: string(name='public_info'),
  // 用户角色列表
  role: [ string ](name='role'),
  // 空间ID
  spaceId?: string(name='space_id'),
}

model CreateDataauthorizationParticipantResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 参与方信息
  participant?: Participant(name='participant'),
}

/**
 * Description: 数据授权服务创建参与方
 * Summary: 数据授权服务创建参与方
 */
async function createDataauthorizationParticipant(request: CreateDataauthorizationParticipantRequest): CreateDataauthorizationParticipantResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createDataauthorizationParticipantEx(request, headers, runtime);
}

/**
 * Description: 数据授权服务创建参与方
 * Summary: 数据授权服务创建参与方
 */
async function createDataauthorizationParticipantEx(request: CreateDataauthorizationParticipantRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateDataauthorizationParticipantResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.dataauthorization.participant.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteDataauthorizationParticipantRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 参与方ID
  participantId: string(name='participant_id'),
}

model DeleteDataauthorizationParticipantResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 数据授权服务删除参与方
 * Summary: 数据授权服务删除参与方
 */
async function deleteDataauthorizationParticipant(request: DeleteDataauthorizationParticipantRequest): DeleteDataauthorizationParticipantResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteDataauthorizationParticipantEx(request, headers, runtime);
}

/**
 * Description: 数据授权服务删除参与方
 * Summary: 数据授权服务删除参与方
 */
async function deleteDataauthorizationParticipantEx(request: DeleteDataauthorizationParticipantRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteDataauthorizationParticipantResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.dataauthorization.participant.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateDataauthorizationParticipantRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 扩展参数，标准JSON格式
  extensionInfo?: string(maxLength=2000, name='extension_info'),
  // 用户名称
  name: string(maxLength=64, name='name'),
  // 回调通知服务地址
  notificationService?: string(name='notification_service'),
  // 参与方ID
  participantId: string(maxLength=100, name='participant_id'),
  // did doc中的公开信息
  publicInfo?: string(name='public_info'),
  // 用户角色列表
  role: [ string ](name='role'),
  // 账户名称
  account?: string(name='account'),
}

model UpdateDataauthorizationParticipantResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 数据授权服务修改用户信息
 * Summary: 数据授权服务修改用户信息
 */
async function updateDataauthorizationParticipant(request: UpdateDataauthorizationParticipantRequest): UpdateDataauthorizationParticipantResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateDataauthorizationParticipantEx(request, headers, runtime);
}

/**
 * Description: 数据授权服务修改用户信息
 * Summary: 数据授权服务修改用户信息
 */
async function updateDataauthorizationParticipantEx(request: UpdateDataauthorizationParticipantRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateDataauthorizationParticipantResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.dataauthorization.participant.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDataauthorizationParticipantRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 参与方ID
  participantId: string(maxLength=100, name='participant_id'),
}

model QueryDataauthorizationParticipantResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 参与方信息
  participant?: Participant(name='participant'),
}

/**
 * Description: 数据授权服务查询参与方信息
 * Summary: 数据授权服务查询参与方信息
 */
async function queryDataauthorizationParticipant(request: QueryDataauthorizationParticipantRequest): QueryDataauthorizationParticipantResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDataauthorizationParticipantEx(request, headers, runtime);
}

/**
 * Description: 数据授权服务查询参与方信息
 * Summary: 数据授权服务查询参与方信息
 */
async function queryDataauthorizationParticipantEx(request: QueryDataauthorizationParticipantRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDataauthorizationParticipantResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.dataauthorization.participant.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListDataauthorizationParticipantRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 空间ID
  spaceId?: string(name='space_id'),
  // 用户角色
  role: string(name='role'),
}

model ListDataauthorizationParticipantResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 参与方列表
  participants?: [ Participant ](name='participants'),
}

/**
 * Description: 数据授权服务根据角色获取用户列表
 * Summary: 数据授权服务根据角色获取用户列表
 */
async function listDataauthorizationParticipant(request: ListDataauthorizationParticipantRequest): ListDataauthorizationParticipantResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listDataauthorizationParticipantEx(request, headers, runtime);
}

/**
 * Description: 数据授权服务根据角色获取用户列表
 * Summary: 数据授权服务根据角色获取用户列表
 */
async function listDataauthorizationParticipantEx(request: ListDataauthorizationParticipantRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListDataauthorizationParticipantResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.dataauthorization.participant.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateDataauthorizationDataEntityRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 业务系统数据对象唯一标示
  bizUid: string(name='biz_uid'),
  // 区块链ID
  blockchainId?: string(name='blockchain_id'),
  // 数据类别
  category: string(maxLength=32, name='category'),
  // 数据模型ID
  dataModelId?: string(name='data_model_id'),
  // 扩展参数，标准JSON格式
  extensionInfo?: string(maxLength=2000, name='extension_info'),
  // 数据名称
  name: string(maxLength=64, name='name'),
  // 数据所有者ID
  ownerId: string(maxLength=100, name='owner_id'),
  // 审批模版
  processTemplate?: [ ProcessNode ](name='process_template'),
  // DID doc里的公开信息
  publicInfo?: string(name='public_info'),
}

model CreateDataauthorizationDataEntityResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 数据对象ID
  dataId?: string(name='data_id'),
}

/**
 * Description: 数据授权服务创建数据目录
 * Summary: 数据授权服务创建数据目录
 */
async function createDataauthorizationDataEntity(request: CreateDataauthorizationDataEntityRequest): CreateDataauthorizationDataEntityResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createDataauthorizationDataEntityEx(request, headers, runtime);
}

/**
 * Description: 数据授权服务创建数据目录
 * Summary: 数据授权服务创建数据目录
 */
async function createDataauthorizationDataEntityEx(request: CreateDataauthorizationDataEntityRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateDataauthorizationDataEntityResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.dataauthorization.data.entity.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDataauthorizationDataEntityRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 数据ID
  dataId: string(maxLength=100, name='data_id'),
}

model QueryDataauthorizationDataEntityResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 数据目录详细信息
  dataEntity?: DataEntity(name='data_entity'),
}

/**
 * Description: 数据授权服务查询数据目录
 * Summary: 数据授权服务查询数据目录
 */
async function queryDataauthorizationDataEntity(request: QueryDataauthorizationDataEntityRequest): QueryDataauthorizationDataEntityResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDataauthorizationDataEntityEx(request, headers, runtime);
}

/**
 * Description: 数据授权服务查询数据目录
 * Summary: 数据授权服务查询数据目录
 */
async function queryDataauthorizationDataEntityEx(request: QueryDataauthorizationDataEntityRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDataauthorizationDataEntityResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.dataauthorization.data.entity.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateDataauthorizationPublicKeyRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 公钥列表
  publicKeys: [ PublicKey ](name='public_keys'),
}

model UpdateDataauthorizationPublicKeyResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 数据授权服务公钥矩阵更新
 * Summary: 数据授权服务公钥矩阵更新
 */
async function updateDataauthorizationPublicKey(request: UpdateDataauthorizationPublicKeyRequest): UpdateDataauthorizationPublicKeyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateDataauthorizationPublicKeyEx(request, headers, runtime);
}

/**
 * Description: 数据授权服务公钥矩阵更新
 * Summary: 数据授权服务公钥矩阵更新
 */
async function updateDataauthorizationPublicKeyEx(request: UpdateDataauthorizationPublicKeyRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateDataauthorizationPublicKeyResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.dataauthorization.public.key.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListDataauthorizationPublicKeyRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 生成公钥时的关联关系
  publicKeyRelations: [ PublicKeyRelation ](name='public_key_relations'),
}

model ListDataauthorizationPublicKeyResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 公钥列表
  publicKeys?: [ PublicKey ](name='public_keys'),
}

/**
 * Description: 数据授权服务公钥矩阵查询
 * Summary: 数据授权服务公钥矩阵查询
 */
async function listDataauthorizationPublicKey(request: ListDataauthorizationPublicKeyRequest): ListDataauthorizationPublicKeyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listDataauthorizationPublicKeyEx(request, headers, runtime);
}

/**
 * Description: 数据授权服务公钥矩阵查询
 * Summary: 数据授权服务公钥矩阵查询
 */
async function listDataauthorizationPublicKeyEx(request: ListDataauthorizationPublicKeyRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListDataauthorizationPublicKeyResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.dataauthorization.public.key.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model OpenDataauthorizationAuthorizationServiceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 租户ID
  tenantId: string(maxLength=50, name='tenant_id'),
  // 租户AK
  tenantAccessKey?: string(name='tenant_access_key'),
  // 开通原因
  remark?: string(maxLength=255, name='remark'),
}

model OpenDataauthorizationAuthorizationServiceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 租户AK
  tenantAccessKey?: string(name='tenant_access_key'),
  // 租户ID
  tenantId?: string(name='tenant_id'),
}

/**
 * Description: 数据授权服务开通服务
 * Summary: 数据授权服务开通服务
 */
async function openDataauthorizationAuthorizationService(request: OpenDataauthorizationAuthorizationServiceRequest): OpenDataauthorizationAuthorizationServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return openDataauthorizationAuthorizationServiceEx(request, headers, runtime);
}

/**
 * Description: 数据授权服务开通服务
 * Summary: 数据授权服务开通服务
 */
async function openDataauthorizationAuthorizationServiceEx(request: OpenDataauthorizationAuthorizationServiceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): OpenDataauthorizationAuthorizationServiceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.dataauthorization.authorization.service.open', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CloseDataauthorizationAuthorizationServiceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 租户ID
  tenantId: string(name='tenant_id'),
  // 关闭服务原因
  remark?: string(name='remark'),
}

model CloseDataauthorizationAuthorizationServiceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 数据授权服务关闭租户服务
 * Summary: 数据授权服务关闭租户服务
 */
async function closeDataauthorizationAuthorizationService(request: CloseDataauthorizationAuthorizationServiceRequest): CloseDataauthorizationAuthorizationServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return closeDataauthorizationAuthorizationServiceEx(request, headers, runtime);
}

/**
 * Description: 数据授权服务关闭租户服务
 * Summary: 数据授权服务关闭租户服务
 */
async function closeDataauthorizationAuthorizationServiceEx(request: CloseDataauthorizationAuthorizationServiceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CloseDataauthorizationAuthorizationServiceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.dataauthorization.authorization.service.close', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ApplyDataauthorizationAuthorizationRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 申请人ID
  applicantId: string(name='applicant_id'),
  // 1592877833149
  applicantTime: long(name='applicant_time'),
  // 申请ID，业务系统唯一
  bizUid: string(name='biz_uid'),
  // 申请原因
  comment: string(name='comment'),
  // 数据ID
  dataId: string(name='data_id'),
  // 扩展参数
  extensionInfo?: string(name='extension_info'),
}

model ApplyDataauthorizationAuthorizationResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 申请处理结果
  processResult?: ProcessResult(name='process_result'),
}

/**
 * Description: 数据授权服务申请权限
 * Summary: 数据授权服务申请权限
 */
async function applyDataauthorizationAuthorization(request: ApplyDataauthorizationAuthorizationRequest): ApplyDataauthorizationAuthorizationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return applyDataauthorizationAuthorizationEx(request, headers, runtime);
}

/**
 * Description: 数据授权服务申请权限
 * Summary: 数据授权服务申请权限
 */
async function applyDataauthorizationAuthorizationEx(request: ApplyDataauthorizationAuthorizationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ApplyDataauthorizationAuthorizationResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.dataauthorization.authorization.apply', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExecDataauthorizationProcessRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 审批操作意见
  comment: string(name='comment'),
  // 扩展参数
  extensionInfo?: string(name='extension_info'),
  // 新节点ID列表
  forwardNodeIds?: [ string ](name='forward_node_ids'),
  // 审批操作结果
  operateResult: string(name='operate_result'),
  // 审批操作时间
  operateTime: long(name='operate_time'),
  // 审批操作人ID
  operatorId: string(name='operator_id'),
  // 流程ID
  processId: string(name='process_id'),
}

model ExecDataauthorizationProcessResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 数据授权服务流程步骤处理
 * Summary: 数据授权服务流程步骤处理
 */
async function execDataauthorizationProcess(request: ExecDataauthorizationProcessRequest): ExecDataauthorizationProcessResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return execDataauthorizationProcessEx(request, headers, runtime);
}

/**
 * Description: 数据授权服务流程步骤处理
 * Summary: 数据授权服务流程步骤处理
 */
async function execDataauthorizationProcessEx(request: ExecDataauthorizationProcessRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExecDataauthorizationProcessResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.dataauthorization.process.exec', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CancelDataauthorizationAuthorizationRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 权限凭证
  authorityCert: string(name='authority_cert'),
  // 操作人ID
  operatorId: string(name='operator_id'),
}

model CancelDataauthorizationAuthorizationResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 数据授权服务取消授权
 * Summary: 数据授权服务取消授权
 */
async function cancelDataauthorizationAuthorization(request: CancelDataauthorizationAuthorizationRequest): CancelDataauthorizationAuthorizationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return cancelDataauthorizationAuthorizationEx(request, headers, runtime);
}

/**
 * Description: 数据授权服务取消授权
 * Summary: 数据授权服务取消授权
 */
async function cancelDataauthorizationAuthorizationEx(request: CancelDataauthorizationAuthorizationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CancelDataauthorizationAuthorizationResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.dataauthorization.authorization.cancel', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CheckDataauthorizationAuthorizationRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 权限凭证
  authorityCert: string(name='authority_cert'),
  // 数据ID
  dataId: string(name='data_id'),
  // 参与方ID
  participantId: string(name='participant_id'),
}

model CheckDataauthorizationAuthorizationResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 是否有权限
  authority?: boolean(name='authority'),
}

/**
 * Description: 数据授权服务权限校验
 * Summary: 数据授权服务权限校验
 */
async function checkDataauthorizationAuthorization(request: CheckDataauthorizationAuthorizationRequest): CheckDataauthorizationAuthorizationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return checkDataauthorizationAuthorizationEx(request, headers, runtime);
}

/**
 * Description: 数据授权服务权限校验
 * Summary: 数据授权服务权限校验
 */
async function checkDataauthorizationAuthorizationEx(request: CheckDataauthorizationAuthorizationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CheckDataauthorizationAuthorizationResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.dataauthorization.authorization.check', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDataauthorizationProcessRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 流程ID
  processId: string(name='process_id'),
}

model QueryDataauthorizationProcessResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 流程详细信息
  processInfo?: ProcessInfo(name='process_info'),
}

/**
 * Description: 数据授权服务流程信息查询
 * Summary: 数据授权服务流程信息查询
 */
async function queryDataauthorizationProcess(request: QueryDataauthorizationProcessRequest): QueryDataauthorizationProcessResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDataauthorizationProcessEx(request, headers, runtime);
}

/**
 * Description: 数据授权服务流程信息查询
 * Summary: 数据授权服务流程信息查询
 */
async function queryDataauthorizationProcessEx(request: QueryDataauthorizationProcessRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDataauthorizationProcessResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.dataauthorization.process.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SendDataauthorizationDepositDataRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 通知人列表
  notificationIds?: [ string ](name='notification_ids'),
  // 数据发送人
  senderId?: string(name='sender_id'),
  // 存证交易内容
  txData: string(name='tx_data'),
}

model SendDataauthorizationDepositDataResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 存证交易hash
  txHash?: string(name='tx_hash'),
}

/**
 * Description: 数据授权服务存证数据上链
 * Summary: 数据授权服务存证数据上链
 */
async function sendDataauthorizationDepositData(request: SendDataauthorizationDepositDataRequest): SendDataauthorizationDepositDataResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return sendDataauthorizationDepositDataEx(request, headers, runtime);
}

/**
 * Description: 数据授权服务存证数据上链
 * Summary: 数据授权服务存证数据上链
 */
async function sendDataauthorizationDepositDataEx(request: SendDataauthorizationDepositDataRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SendDataauthorizationDepositDataResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.dataauthorization.deposit.data.send', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDataauthorizationDepositDataRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 存证交易hash
  txHash: string(name='tx_hash'),
}

model QueryDataauthorizationDepositDataResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 存证交易内容
  txData?: string(name='tx_data'),
}

/**
 * Description: 数据授权服务查询存证数据
 * Summary: 数据授权服务查询存证数据
 */
async function queryDataauthorizationDepositData(request: QueryDataauthorizationDepositDataRequest): QueryDataauthorizationDepositDataResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDataauthorizationDepositDataEx(request, headers, runtime);
}

/**
 * Description: 数据授权服务查询存证数据
 * Summary: 数据授权服务查询存证数据
 */
async function queryDataauthorizationDepositDataEx(request: QueryDataauthorizationDepositDataRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDataauthorizationDepositDataResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.dataauthorization.deposit.data.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ResumeDataauthorizationAuthorizationRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 权限凭证
  authorityCert: string(name='authority_cert'),
  // 操作人ID
  operatorId: string(name='operator_id'),
}

model ResumeDataauthorizationAuthorizationResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 数据授权服务恢复权限
 * Summary: 数据授权服务恢复权限
 */
async function resumeDataauthorizationAuthorization(request: ResumeDataauthorizationAuthorizationRequest): ResumeDataauthorizationAuthorizationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return resumeDataauthorizationAuthorizationEx(request, headers, runtime);
}

/**
 * Description: 数据授权服务恢复权限
 * Summary: 数据授权服务恢复权限
 */
async function resumeDataauthorizationAuthorizationEx(request: ResumeDataauthorizationAuthorizationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ResumeDataauthorizationAuthorizationResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.dataauthorization.authorization.resume', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateDataauthorizationDataEntityRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 数据类别
  category: string(name='category'),
  // 数据ID
  dataId: string(name='data_id'),
  // 数据模型ID
  dataModelId?: string(name='data_model_id'),
  // 扩展参数
  extensionInfo?: string(name='extension_info'),
  // 数据名称
  name: string(name='name'),
  // 数据所有者ID
  ownerId: string(name='owner_id'),
  // 流程模版
  processTemplate?: [ ProcessNode ](name='process_template'),
  // DID doc里的公开信息
  publicInfo?: string(name='public_info'),
}

model UpdateDataauthorizationDataEntityResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 数据授权服务更新数据信息
 * Summary: 数据授权服务更新数据信息
 */
async function updateDataauthorizationDataEntity(request: UpdateDataauthorizationDataEntityRequest): UpdateDataauthorizationDataEntityResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateDataauthorizationDataEntityEx(request, headers, runtime);
}

/**
 * Description: 数据授权服务更新数据信息
 * Summary: 数据授权服务更新数据信息
 */
async function updateDataauthorizationDataEntityEx(request: UpdateDataauthorizationDataEntityRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateDataauthorizationDataEntityResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.dataauthorization.data.entity.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteDataauthorizationDataEntityRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 数据ID
  dataId: string(name='data_id'),
}

model DeleteDataauthorizationDataEntityResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 数据授权服务删除数据对象
 * Summary: 数据授权服务删除数据对象
 */
async function deleteDataauthorizationDataEntity(request: DeleteDataauthorizationDataEntityRequest): DeleteDataauthorizationDataEntityResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteDataauthorizationDataEntityEx(request, headers, runtime);
}

/**
 * Description: 数据授权服务删除数据对象
 * Summary: 数据授权服务删除数据对象
 */
async function deleteDataauthorizationDataEntityEx(request: DeleteDataauthorizationDataEntityRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteDataauthorizationDataEntityResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.dataauthorization.data.entity.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateDataauthorizationCustomParticipantRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 区块链ID
  blockchainId?: string(name='blockchain_id'),
  // 扩展参数
  extensionInfo?: string(name='extension_info'),
  // 参与方名字
  name: string(name='name'),
  // 服务地址
  notificationService?: string(name='notification_service'),
  // 参与方ID，全局唯一
  participantId: string(name='participant_id'),
  // 公钥
  publicKey: string(name='public_key'),
  // 恢复公钥
  recoverKey: string(name='recover_key'),
  // 参与方角色列表
  role: [ string ](name='role'),
  // 信用代码，证件号等
  creditNumber?: string(name='credit_number'),
  // 空间ID
  spaceId?: string(name='space_id'),
}

model CreateDataauthorizationCustomParticipantResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 参与方ID
  participantId?: string(name='participant_id'),
}

/**
 * Description: 数据授权服务创建自定义ID用户
 * Summary: 数据授权服务创建自定义ID用户
 */
async function createDataauthorizationCustomParticipant(request: CreateDataauthorizationCustomParticipantRequest): CreateDataauthorizationCustomParticipantResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createDataauthorizationCustomParticipantEx(request, headers, runtime);
}

/**
 * Description: 数据授权服务创建自定义ID用户
 * Summary: 数据授权服务创建自定义ID用户
 */
async function createDataauthorizationCustomParticipantEx(request: CreateDataauthorizationCustomParticipantRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateDataauthorizationCustomParticipantResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.dataauthorization.custom.participant.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateDataauthorizationCustomDataRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 区块链ID
  blockchainId: string(name='blockchain_id'),
  // 数据对象类别
  category: string(name='category'),
  // 数据对象ID，全局唯一
  dataId: string(name='data_id'),
  // 扩展参数
  extensionInfo?: string(name='extension_info'),
  // 数据对象名字
  name: string(name='name'),
  // 数据所有者ID
  ownerId: string(name='owner_id'),
  // 流程审批模版
  processTemplate?: [ ProcessNode ](name='process_template'),
  // 带签名信息的参数信息
  parameters: string(name='parameters'),
}

model CreateDataauthorizationCustomDataResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 数据对象ID
  dataId?: string(name='data_id'),
}

/**
 * Description: 数据授权服务创建自定义ID数据对象
 * Summary: 数据授权服务创建自定义ID数据对象
 */
async function createDataauthorizationCustomData(request: CreateDataauthorizationCustomDataRequest): CreateDataauthorizationCustomDataResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createDataauthorizationCustomDataEx(request, headers, runtime);
}

/**
 * Description: 数据授权服务创建自定义ID数据对象
 * Summary: 数据授权服务创建自定义ID数据对象
 */
async function createDataauthorizationCustomDataEx(request: CreateDataauthorizationCustomDataRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateDataauthorizationCustomDataResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.dataauthorization.custom.data.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ApplyDataauthorizationAuthorizationWithsignatureRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 申请ID
  bizUid: string(name='biz_uid'),
  // 区块链ID
  blockchainId: string(name='blockchain_id'),
  // 带签名的参数信息
  parameters: string(name='parameters'),
}

model ApplyDataauthorizationAuthorizationWithsignatureResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 操作结果
  processResult?: ProcessResult(name='process_result'),
  // 权限凭证
  authorityCert?: string(name='authority_cert'),
}

/**
 * Description: 数据授权服务申请权限
 * Summary: 数据授权服务申请权限
 */
async function applyDataauthorizationAuthorizationWithsignature(request: ApplyDataauthorizationAuthorizationWithsignatureRequest): ApplyDataauthorizationAuthorizationWithsignatureResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return applyDataauthorizationAuthorizationWithsignatureEx(request, headers, runtime);
}

/**
 * Description: 数据授权服务申请权限
 * Summary: 数据授权服务申请权限
 */
async function applyDataauthorizationAuthorizationWithsignatureEx(request: ApplyDataauthorizationAuthorizationWithsignatureRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ApplyDataauthorizationAuthorizationWithsignatureResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.dataauthorization.authorization.withsignature.apply', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExecDataauthorizationProcessWithsignatureRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 区块链ID
  blockchainId: string(name='blockchain_id'),
  // 带签名的参数信息
  parameters: string(name='parameters'),
}

model ExecDataauthorizationProcessWithsignatureResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 流程处理结果
  processResult?: ProcessResult(name='process_result'),
  // 权限凭证
  authorityCert?: string(name='authority_cert'),
}

/**
 * Description: 数据授权服务流程步骤处理
 * Summary: 数据授权服务流程步骤处理
 */
async function execDataauthorizationProcessWithsignature(request: ExecDataauthorizationProcessWithsignatureRequest): ExecDataauthorizationProcessWithsignatureResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return execDataauthorizationProcessWithsignatureEx(request, headers, runtime);
}

/**
 * Description: 数据授权服务流程步骤处理
 * Summary: 数据授权服务流程步骤处理
 */
async function execDataauthorizationProcessWithsignatureEx(request: ExecDataauthorizationProcessWithsignatureRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExecDataauthorizationProcessWithsignatureResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.dataauthorization.process.withsignature.exec', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateDataauthorizationDataModelRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 业务系统唯一标示
  bizUid: string(name='biz_uid'),
  // 数据模型描述
  description?: string(name='description'),
  // 模型字段详细信息
  fieldDetail: string(name='field_detail'),
  // 数据模型业务ID
  modelBizId?: string(name='model_biz_id'),
  // 数据模型名称
  name: string(name='name'),
  // 空间ID
  spaceId?: string(name='space_id'),
  // 提交人ID
  submitterId?: string(name='submitter_id'),
}

model CreateDataauthorizationDataModelResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 数据模型ID
  dataModelId?: string(name='data_model_id'),
}

/**
 * Description: 创建数据模型
 * Summary: 创建数据模型
 */
async function createDataauthorizationDataModel(request: CreateDataauthorizationDataModelRequest): CreateDataauthorizationDataModelResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createDataauthorizationDataModelEx(request, headers, runtime);
}

/**
 * Description: 创建数据模型
 * Summary: 创建数据模型
 */
async function createDataauthorizationDataModelEx(request: CreateDataauthorizationDataModelRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateDataauthorizationDataModelResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.dataauthorization.data.model.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateDataauthorizationDataModelRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 数据模型ID
  dataModelId: string(name='data_model_id'),
  // 数据模型描述
  description?: string(name='description'),
  // 模型字段详细信息
  fieldDetail: string(name='field_detail'),
  // 模型业务ID
  modelBizId?: string(name='model_biz_id'),
  // 数据模型名称
  name: string(name='name'),
}

model UpdateDataauthorizationDataModelResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 数据模型修改
 * Summary: 数据模型修改
 */
async function updateDataauthorizationDataModel(request: UpdateDataauthorizationDataModelRequest): UpdateDataauthorizationDataModelResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateDataauthorizationDataModelEx(request, headers, runtime);
}

/**
 * Description: 数据模型修改
 * Summary: 数据模型修改
 */
async function updateDataauthorizationDataModelEx(request: UpdateDataauthorizationDataModelRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateDataauthorizationDataModelResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.dataauthorization.data.model.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteDataauthorizationDataModelRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 数据模型ID
  dataModelId: string(name='data_model_id'),
}

model DeleteDataauthorizationDataModelResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 删除数据模型
 * Summary: 删除数据模型
 */
async function deleteDataauthorizationDataModel(request: DeleteDataauthorizationDataModelRequest): DeleteDataauthorizationDataModelResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteDataauthorizationDataModelEx(request, headers, runtime);
}

/**
 * Description: 删除数据模型
 * Summary: 删除数据模型
 */
async function deleteDataauthorizationDataModelEx(request: DeleteDataauthorizationDataModelRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteDataauthorizationDataModelResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.dataauthorization.data.model.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListDataauthorizationParticipantPageRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 信用代码编号
  creditNumber?: string(name='credit_number'),
  // 参与方名字
  name?: string(name='name'),
  // 页码
  pageNum: long(minimum=1, name='page_num'),
  // 每页数量
  pageSize: long(name='page_size'),
  // 角色
  role?: string(name='role'),
  // 空间ID
  spaceId: string(name='space_id'),
  // 账户名称
  account?: string(name='account'),
}

model ListDataauthorizationParticipantPageResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 参与方列表
  data?: [ Participant ](name='data'),
  // 是否有下一页
  hasNextPage?: boolean(name='has_next_page'),
  // 是否有上一页
  hasPreviousPage?: boolean(name='has_previous_page'),
  // 页码
  pageNum?: long(name='page_num'),
  // 每页数量
  pageSize?: long(name='page_size'),
  // 数据总量
  total?: long(name='total'),
}

/**
 * Description: 分页查询参与方列表
 * Summary: 分页查询参与方列表
 */
async function listDataauthorizationParticipantPage(request: ListDataauthorizationParticipantPageRequest): ListDataauthorizationParticipantPageResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listDataauthorizationParticipantPageEx(request, headers, runtime);
}

/**
 * Description: 分页查询参与方列表
 * Summary: 分页查询参与方列表
 */
async function listDataauthorizationParticipantPageEx(request: ListDataauthorizationParticipantPageRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListDataauthorizationParticipantPageResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.dataauthorization.participant.page.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDataauthorizationDataModelRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 数据模型ID
  dataModelId: string(name='data_model_id'),
}

model QueryDataauthorizationDataModelResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 数据模型详细信息
  dataModel?: DataModel(name='data_model'),
}

/**
 * Description: 查询数据模型
 * Summary: 查询数据模型
 */
async function queryDataauthorizationDataModel(request: QueryDataauthorizationDataModelRequest): QueryDataauthorizationDataModelResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDataauthorizationDataModelEx(request, headers, runtime);
}

/**
 * Description: 查询数据模型
 * Summary: 查询数据模型
 */
async function queryDataauthorizationDataModelEx(request: QueryDataauthorizationDataModelRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDataauthorizationDataModelResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.dataauthorization.data.model.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListDataauthorizationDatamodelPageRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 模型业务ID
  modelBizId?: string(name='model_biz_id'),
  // 模型名称
  modelName?: string(name='model_name'),
  // 页码
  pageNum: long(minimum=1, name='page_num'),
  // 每页大小
  pageSize: long(name='page_size'),
  // 空间ID
  spaceId: string(name='space_id'),
  // 提交人名字
  submitterName?: string(name='submitter_name'),
}

model ListDataauthorizationDatamodelPageResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 数据模型列表
  data?: [ DataModel ](name='data'),
  // 是否有下一页
  hasNextPage?: boolean(name='has_next_page'),
  // 是否有上一页
  hasPreviousPage?: boolean(name='has_previous_page'),
  // 页码
  pageNum?: long(name='page_num'),
  // 每页大小
  pageSize?: long(name='page_size'),
  // 数据总量
  total?: long(name='total'),
}

/**
 * Description: 数据模型分页查询
 * Summary: 数据模型分页查询
 */
async function listDataauthorizationDatamodelPage(request: ListDataauthorizationDatamodelPageRequest): ListDataauthorizationDatamodelPageResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listDataauthorizationDatamodelPageEx(request, headers, runtime);
}

/**
 * Description: 数据模型分页查询
 * Summary: 数据模型分页查询
 */
async function listDataauthorizationDatamodelPageEx(request: ListDataauthorizationDatamodelPageRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListDataauthorizationDatamodelPageResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.dataauthorization.datamodel.page.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListDataauthorizationAvailableDatamodelRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 参与方DID
  participantId: string(name='participant_id'),
}

model ListDataauthorizationAvailableDatamodelResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 数据模型列表
  dataModels?: [ DataModel ](name='data_models'),
}

/**
 * Description: 查询可注册的数据模型列表
 * Summary: 查询可注册的数据模型列表
 */
async function listDataauthorizationAvailableDatamodel(request: ListDataauthorizationAvailableDatamodelRequest): ListDataauthorizationAvailableDatamodelResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listDataauthorizationAvailableDatamodelEx(request, headers, runtime);
}

/**
 * Description: 查询可注册的数据模型列表
 * Summary: 查询可注册的数据模型列表
 */
async function listDataauthorizationAvailableDatamodelEx(request: ListDataauthorizationAvailableDatamodelRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListDataauthorizationAvailableDatamodelResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.dataauthorization.available.datamodel.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListDataauthorizationDataentityPageRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 授权状态
  authStatus?: string(name='auth_status'),
  // 模型名称
  modelName?: string(name='model_name'),
  // 页码
  pageNum: long(minimum=1, name='page_num'),
  // 每页大小
  pageSize: long(name='page_size'),
  // 参与方DID
  participantId: string(name='participant_id'),
  // 数据模型业务ID
  modelBizId?: string(name='model_biz_id'),
}

model ListDataauthorizationDataentityPageResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 分页数据列表
  data?: [ ListDataEntityResult ](name='data'),
  // 是否有下一页
  hasNextPage?: boolean(name='has_next_page'),
  // 是否有上一页
  hasPreviousPage?: boolean(name='has_previous_page'),
  // 页码
  pageNum?: long(name='page_num'),
  // 每页大小
  pageSize?: long(name='page_size'),
  // 数据总量
  total?: long(name='total'),
}

/**
 * Description: 根据模型名称、授权状态分页查询。
 * Summary: 数据注册情况查询
 */
async function listDataauthorizationDataentityPage(request: ListDataauthorizationDataentityPageRequest): ListDataauthorizationDataentityPageResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listDataauthorizationDataentityPageEx(request, headers, runtime);
}

/**
 * Description: 根据模型名称、授权状态分页查询。
 * Summary: 数据注册情况查询
 */
async function listDataauthorizationDataentityPageEx(request: ListDataauthorizationDataentityPageRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListDataauthorizationDataentityPageResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.dataauthorization.dataentity.page.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateDataauthorizationDirectAuthorizationRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 业务UUID,业务系统唯一标示
  bizUid: string(name='biz_uid'),
  // 直接授权原因
  comment: string(name='comment'),
  // 数据ID
  dataId: string(name='data_id'),
  // 过期时间
  expire: long(name='expire'),
  // 扩展参数
  extensionInfo?: string(name='extension_info'),
  // 授权者ID
  issuerId: string(name='issuer_id'),
  // 被授予者ID
  subjectId: string(name='subject_id'),
}

model CreateDataauthorizationDirectAuthorizationResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 权限凭证
  authorityCert?: string(name='authority_cert'),
}

/**
 * Description: 直接授权接口
 * Summary: 直接授权接口
 */
async function createDataauthorizationDirectAuthorization(request: CreateDataauthorizationDirectAuthorizationRequest): CreateDataauthorizationDirectAuthorizationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createDataauthorizationDirectAuthorizationEx(request, headers, runtime);
}

/**
 * Description: 直接授权接口
 * Summary: 直接授权接口
 */
async function createDataauthorizationDirectAuthorizationEx(request: CreateDataauthorizationDirectAuthorizationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateDataauthorizationDirectAuthorizationResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.dataauthorization.direct.authorization.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListDataauthorizationAuthorizationPageRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 授权时间终点
  endTime?: long(name='end_time'),
  // 授权人ID
  issuerId?: string(name='issuer_id'),
  // 授权人名字
  issuerName?: string(name='issuer_name'),
  // 页码
  pageNum: long(name='page_num'),
  // 每页大小
  pageSize: long(name='page_size'),
  // 空间ID
  spaceId: string(name='space_id'),
  // 授权时间起点
  startIme?: long(name='start_ime'),
  // 被授权人ID
  subjectId?: string(name='subject_id'),
  // 被授权人名字
  subjectName?: string(name='subject_name'),
  // 数据资产ID
  dataId?: string(name='data_id'),
  // 数据模型ID
  dataModelId?: string(name='data_model_id'),
}

model ListDataauthorizationAuthorizationPageResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 授权明细列表
  data?: [ AuthorizationDetail ](name='data'),
  // 是否有下
  hasNextPage?: boolean(name='has_next_page'),
  // 是否有上一页
  hasPreviousPage?: boolean(name='has_previous_page'),
  // 页码
  pageNum?: long(name='page_num'),
  // 每页大小
  pageSize?: long(name='page_size'),
  // 数据总量
  total?: long(name='total'),
}

/**
 * Description: 授权列表分页查询
 * Summary: 授权列表分页查询
 */
async function listDataauthorizationAuthorizationPage(request: ListDataauthorizationAuthorizationPageRequest): ListDataauthorizationAuthorizationPageResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listDataauthorizationAuthorizationPageEx(request, headers, runtime);
}

/**
 * Description: 授权列表分页查询
 * Summary: 授权列表分页查询
 */
async function listDataauthorizationAuthorizationPageEx(request: ListDataauthorizationAuthorizationPageRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListDataauthorizationAuthorizationPageResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.dataauthorization.authorization.page.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListDataauthorizationAuthparticipantPageRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 数据资产ID
  dataId: string(name='data_id'),
  // 页码
  pageNum: long(minimum=1, name='page_num'),
  // 每页大小
  pageSize: long(name='page_size'),
}

model ListDataauthorizationAuthparticipantPageResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 授权列表
  data?: [ AuthorizationDetail ](name='data'),
  // 是否有下一页
  hasNextPage?: boolean(name='has_next_page'),
  // 是否有上一页
  hasPreviousPage?: boolean(name='has_previous_page'),
  // 页码
  pageNum?: long(name='page_num'),
  // 每页大小
  pageSize?: long(name='page_size'),
  // 数据总量
  total?: long(name='total'),
}

/**
 * Description: 查询已授权的参与方列表
 * Summary: 查询已授权的参与方列表
 */
async function listDataauthorizationAuthparticipantPage(request: ListDataauthorizationAuthparticipantPageRequest): ListDataauthorizationAuthparticipantPageResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listDataauthorizationAuthparticipantPageEx(request, headers, runtime);
}

/**
 * Description: 查询已授权的参与方列表
 * Summary: 查询已授权的参与方列表
 */
async function listDataauthorizationAuthparticipantPageEx(request: ListDataauthorizationAuthparticipantPageRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListDataauthorizationAuthparticipantPageResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.dataauthorization.authparticipant.page.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateDataauthorizationDataAssertRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 业务系统数据唯一标示
  bizUid: string(name='biz_uid'),
  // 区块链ID
  blockchainId?: string(name='blockchain_id'),
  // 资产类别
  category: string(name='category'),
  // 数据模型ID
  dataModelId?: string(name='data_model_id'),
  // 扩展参数
  extensionInfo?: string(name='extension_info'),
  // 资产名称
  name: string(name='name'),
  // 所有者ID
  ownerId: string(name='owner_id'),
  // 审批流程模版
  processTemplate?: [ ProcessNode ](name='process_template'),
}

model CreateDataauthorizationDataAssertResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 数据资产ID
  dataId?: string(name='data_id'),
}

/**
 * Description: 创建数据资产
 * Summary: 创建数据资产
 */
async function createDataauthorizationDataAssert(request: CreateDataauthorizationDataAssertRequest): CreateDataauthorizationDataAssertResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createDataauthorizationDataAssertEx(request, headers, runtime);
}

/**
 * Description: 创建数据资产
 * Summary: 创建数据资产
 */
async function createDataauthorizationDataAssertEx(request: CreateDataauthorizationDataAssertRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateDataauthorizationDataAssertResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.dataauthorization.data.assert.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateDataauthorizationDataAssertRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 数据资产类别
  category: string(name='category'),
  // 数据资产ID
  dataId: string(name='data_id'),
  // 扩展参数
  extensionInfo?: string(name='extension_info'),
  // 数据资产名称
  name: string(name='name'),
  // 审批流程模版
  processTemplate?: [ ProcessNode ](name='process_template'),
  // 数据模型ID
  dataModelId?: string(name='data_model_id'),
}

model UpdateDataauthorizationDataAssertResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 数据资产更新
 * Summary: 数据资产更新
 */
async function updateDataauthorizationDataAssert(request: UpdateDataauthorizationDataAssertRequest): UpdateDataauthorizationDataAssertResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateDataauthorizationDataAssertEx(request, headers, runtime);
}

/**
 * Description: 数据资产更新
 * Summary: 数据资产更新
 */
async function updateDataauthorizationDataAssertEx(request: UpdateDataauthorizationDataAssertRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateDataauthorizationDataAssertResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.dataauthorization.data.assert.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteDataauthorizationDataAssertRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 数据资产ID
  dataId: string(name='data_id'),
}

model DeleteDataauthorizationDataAssertResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 数据资产删除
 * Summary: 数据资产删除
 */
async function deleteDataauthorizationDataAssert(request: DeleteDataauthorizationDataAssertRequest): DeleteDataauthorizationDataAssertResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteDataauthorizationDataAssertEx(request, headers, runtime);
}

/**
 * Description: 数据资产删除
 * Summary: 数据资产删除
 */
async function deleteDataauthorizationDataAssertEx(request: DeleteDataauthorizationDataAssertRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteDataauthorizationDataAssertResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.dataauthorization.data.assert.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateDataauthorizationAgentAuthorizationRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 业务UUID
  bizUid: string(name='biz_uid'),
  // 授权原因
  comment: string(name='comment'),
  // 数据资产ID
  dataId: string(name='data_id'),
  // 过期时间
  expire: long(name='expire'),
  // 扩展参数
  extensionInfo?: string(name='extension_info'),
  // 授权规则
  rule?: AuthorizationRule(name='rule'),
  // 被授权人ID
  subjectId: string(name='subject_id'),
  // 申请代理授权的参与方DID
  applicantId: string(name='applicant_id'),
}

model CreateDataauthorizationAgentAuthorizationResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 授权凭证
  authorityCert?: string(name='authority_cert'),
}

/**
 * Description: 授权服务代理授权接口
 * Summary: 代理授权
 */
async function createDataauthorizationAgentAuthorization(request: CreateDataauthorizationAgentAuthorizationRequest): CreateDataauthorizationAgentAuthorizationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createDataauthorizationAgentAuthorizationEx(request, headers, runtime);
}

/**
 * Description: 授权服务代理授权接口
 * Summary: 代理授权
 */
async function createDataauthorizationAgentAuthorizationEx(request: CreateDataauthorizationAgentAuthorizationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateDataauthorizationAgentAuthorizationResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.dataauthorization.agent.authorization.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListDataauthorizationAuthorityCertRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 授权凭证ID列表
  authorityCertIds: [ string ](name='authority_cert_ids'),
}

model ListDataauthorizationAuthorityCertResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 授权详情列表
  data?: [ AuthorizationDetail ](name='data'),
}

/**
 * Description:  授权列表相信信息查询
 * Summary:  授权列表相信信息查询
 */
async function listDataauthorizationAuthorityCert(request: ListDataauthorizationAuthorityCertRequest): ListDataauthorizationAuthorityCertResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listDataauthorizationAuthorityCertEx(request, headers, runtime);
}

/**
 * Description:  授权列表相信信息查询
 * Summary:  授权列表相信信息查询
 */
async function listDataauthorizationAuthorityCertEx(request: ListDataauthorizationAuthorityCertRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListDataauthorizationAuthorityCertResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.dataauthorization.authority.cert.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SaveDataauthorizationDepositDataRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 存证内容
  txData: string(name='tx_data'),
  // 发送数据上链的DID
  senderId?: string(name='sender_id'),
}

model SaveDataauthorizationDepositDataResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 交易HASH
  txHash?: string(name='tx_hash'),
}

/**
 * Description: 同步存证上链接口
 * Summary: 同步存证上链
 */
async function saveDataauthorizationDepositData(request: SaveDataauthorizationDepositDataRequest): SaveDataauthorizationDepositDataResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return saveDataauthorizationDepositDataEx(request, headers, runtime);
}

/**
 * Description: 同步存证上链接口
 * Summary: 同步存证上链
 */
async function saveDataauthorizationDepositDataEx(request: SaveDataauthorizationDepositDataRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SaveDataauthorizationDepositDataResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.dataauthorization.deposit.data.save', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartDataauthorizationSyncDataRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 枚举值：
  // DATAENTITY：数据目录
  // PARTICIPANT：参与方
  type: string(name='type'),
  // 接收同步数据的DID
  receiverId: string(name='receiver_id'),
}

model StartDataauthorizationSyncDataResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 待同步的数据总量
  total?: long(name='total'),
  // 最后一条数据的创建时间
  lastCreateTime?: long(name='last_create_time'),
  // 任务ID
  taskId?: string(name='task_id'),
}

/**
 * Description: 启动全量同步
 * Summary: 启动全量同步
 */
async function startDataauthorizationSyncData(request: StartDataauthorizationSyncDataRequest): StartDataauthorizationSyncDataResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startDataauthorizationSyncDataEx(request, headers, runtime);
}

/**
 * Description: 启动全量同步
 * Summary: 启动全量同步
 */
async function startDataauthorizationSyncDataEx(request: StartDataauthorizationSyncDataRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartDataauthorizationSyncDataResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.dataauthorization.sync.data.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryTraceabilityTxCheckRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 接入业务标识，一接入方有条链或者必须区分统计业务类型情况下必填。
  bizType?: string(name='biz_type'),
  // 溯源信息内容校验码用sha256hex(内容) 计算出其正确性。
  payloadHash?: string(name='payload_hash'),
  // 区块链接入来源
  source: string(name='source'),
  // 区块查证信息透传
  subTitle?: string(name='sub_title'),
  // 透传到查证结果的标题信息
  title?: string(name='title'),
  // 要查询的区块链交易信息。
  txHash: string(name='tx_hash'),
}

model QueryTraceabilityTxCheckResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 溯源项列表
  items?: [ Item ](name='items'),
  // 提示信息
  message?: string(name='message'),
  // 展现信息的副标题
  subTitle?: string(name='sub_title'),
  // 显示查证结果的标题
  title?: string(name='title'),
}

/**
 * Description: 通过额交易hash查询，返回hash对应区块链上信息。
 * Summary: 溯源区块查证接口
 */
async function queryTraceabilityTxCheck(request: QueryTraceabilityTxCheckRequest): QueryTraceabilityTxCheckResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryTraceabilityTxCheckEx(request, headers, runtime);
}

/**
 * Description: 通过额交易hash查询，返回hash对应区块链上信息。
 * Summary: 溯源区块查证接口
 */
async function queryTraceabilityTxCheckEx(request: QueryTraceabilityTxCheckRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryTraceabilityTxCheckResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.traceability.tx.check.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryTraceabilityBlockchainInfosRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 区块链id
  bizid: string(name='bizid'),
}

model QueryTraceabilityBlockchainInfosResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 异常的节点数
  abnormalNodes?: long(name='abnormal_nodes'),
  // 区块链id
  bizid?: string(name='bizid'),
  // 区块高度
  blockHeight?: long(name='block_height'),
  // 创建时间
  createTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='create_time'),
  // 链的状态，是否正常
  isNormal?: boolean(name='is_normal'),
  // 是否为管理员权限
  isRole?: boolean(name='is_role'),
  // 链的名字
  name?: string(name='name'),
  // 节点信息
  nodeInfoList?: [ NodeInfo ](name='node_info_list'),
  // 节点数
  nodeNumber?: long(name='node_number'),
  // 链上交易数
  transactionSum?: long(name='transaction_sum'),
  // 链的版本
  version?: string(name='version'),
}

/**
 * Description: 通过链id，获取链的相关信息
 * Summary: 获取链信息接口
 */
async function queryTraceabilityBlockchainInfos(request: QueryTraceabilityBlockchainInfosRequest): QueryTraceabilityBlockchainInfosResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryTraceabilityBlockchainInfosEx(request, headers, runtime);
}

/**
 * Description: 通过链id，获取链的相关信息
 * Summary: 获取链信息接口
 */
async function queryTraceabilityBlockchainInfosEx(request: QueryTraceabilityBlockchainInfosRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryTraceabilityBlockchainInfosResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.traceability.blockchain.infos.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SaveBlockchainBrowserPrivilegeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链id
  bizid: string(name='bizid'),
  // ORGJC1CN
  tenantid: string(name='tenantid'),
}

model SaveBlockchainBrowserPrivilegeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: BaaS区块链浏览器添加租户与链的访问权限
 * Summary: BaaS区块链浏览器添加权限
 */
async function saveBlockchainBrowserPrivilege(request: SaveBlockchainBrowserPrivilegeRequest): SaveBlockchainBrowserPrivilegeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return saveBlockchainBrowserPrivilegeEx(request, headers, runtime);
}

/**
 * Description: BaaS区块链浏览器添加租户与链的访问权限
 * Summary: BaaS区块链浏览器添加权限
 */
async function saveBlockchainBrowserPrivilegeEx(request: SaveBlockchainBrowserPrivilegeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SaveBlockchainBrowserPrivilegeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.blockchain.browser.privilege.save', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryBlockchainBrowserPrivilegeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链id
  bizid: string(name='bizid'),
  // 租户id
  tenantid: string(name='tenantid'),
}

model QueryBlockchainBrowserPrivilegeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 查询租户查看某链的权限
 * Summary: 查询租户查看某链的权限
 */
async function queryBlockchainBrowserPrivilege(request: QueryBlockchainBrowserPrivilegeRequest): QueryBlockchainBrowserPrivilegeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryBlockchainBrowserPrivilegeEx(request, headers, runtime);
}

/**
 * Description: 查询租户查看某链的权限
 * Summary: 查询租户查看某链的权限
 */
async function queryBlockchainBrowserPrivilegeEx(request: QueryBlockchainBrowserPrivilegeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryBlockchainBrowserPrivilegeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.blockchain.browser.privilege.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteBlockchainBrowserPrivilegeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 链id
  bizid: string(name='bizid'),
  // ORGJC1CN
  tenantid: string(name='tenantid'),
}

model DeleteBlockchainBrowserPrivilegeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: BaaS区块链浏览器删除租户与链的访问权限
 * Summary: BaaS区块链浏览器添加权限
 */
async function deleteBlockchainBrowserPrivilege(request: DeleteBlockchainBrowserPrivilegeRequest): DeleteBlockchainBrowserPrivilegeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteBlockchainBrowserPrivilegeEx(request, headers, runtime);
}

/**
 * Description: BaaS区块链浏览器删除租户与链的访问权限
 * Summary: BaaS区块链浏览器添加权限
 */
async function deleteBlockchainBrowserPrivilegeEx(request: DeleteBlockchainBrowserPrivilegeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteBlockchainBrowserPrivilegeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.blockchain.browser.privilege.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetBlockchainMiniprogramRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 蚂蚁区块链的唯一链id
  bizid: string(name='bizid'),
  // 蚂蚁区块链的链上交易hash值
  hash: string(name='hash'),
  // 原生存证数据展示自定义合约地址
  contractId?: string(name='contract_id'),
}

model GetBlockchainMiniprogramResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 交易二维码二进制内容的Base64编码
  qrCodeDownloadUrl?: string(name='qr_code_download_url'),
}

/**
 * Description: 生成蚂蚁区块链的交易二维码
 * Summary: 数科生成蚂蚁区块链的交易二维码
 */
async function getBlockchainMiniprogram(request: GetBlockchainMiniprogramRequest): GetBlockchainMiniprogramResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getBlockchainMiniprogramEx(request, headers, runtime);
}

/**
 * Description: 生成蚂蚁区块链的交易二维码
 * Summary: 数科生成蚂蚁区块链的交易二维码
 */
async function getBlockchainMiniprogramEx(request: GetBlockchainMiniprogramRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetBlockchainMiniprogramResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.blockchain.miniprogram.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AddBlockchainMiniprogramRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 蚂蚁区块链的唯一链id
  bizid: string(name='bizid'),
  // 授权查看权限的支付宝电话号码集合
  phoneNumbers: string(name='phone_numbers'),
}

model AddBlockchainMiniprogramResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 批量添加权限成功与否
  status?: long(name='status'),
}

/**
 * Description: 蚂蚁区块链的链上交易数据查看权限批量添加
 * Summary: 蚂蚁区块链的链上交易数据查看权限批量添加
 */
async function addBlockchainMiniprogram(request: AddBlockchainMiniprogramRequest): AddBlockchainMiniprogramResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return addBlockchainMiniprogramEx(request, headers, runtime);
}

/**
 * Description: 蚂蚁区块链的链上交易数据查看权限批量添加
 * Summary: 蚂蚁区块链的链上交易数据查看权限批量添加
 */
async function addBlockchainMiniprogramEx(request: AddBlockchainMiniprogramRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddBlockchainMiniprogramResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.blockchain.miniprogram.add', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryBrowserTransactionStatisticRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // bizid
  bizid: string(name='bizid'),
  // 截止时间
  endTime: long(name='end_time'),
  // 开始时间
  startTime: long(name='start_time'),
}

model QueryBrowserTransactionStatisticResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // result
  result?: [ BlockchainBrowserTransactionStatistic ](name='result'),
}

/**
 * Description: 获取金融科技BaaS浏览器交易统计信息
 * Summary: 获取金融科技BaaS浏览器交易统计信息
 */
async function queryBrowserTransactionStatistic(request: QueryBrowserTransactionStatisticRequest): QueryBrowserTransactionStatisticResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryBrowserTransactionStatisticEx(request, headers, runtime);
}

/**
 * Description: 获取金融科技BaaS浏览器交易统计信息
 * Summary: 获取金融科技BaaS浏览器交易统计信息
 */
async function queryBrowserTransactionStatisticEx(request: QueryBrowserTransactionStatisticRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryBrowserTransactionStatisticResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.browser.transaction.statistic.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryBrowserBlockLatestRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // bizid
  bizid: string(name='bizid'),
}

model QueryBrowserBlockLatestResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // result
  result?: [ BlockchainBrowserLatestBlock ](name='result'),
}

/**
 * Description: 获取金融科技BaaS最新区块信息列表
 * Summary: 获取金融科技BaaS最新区块信息列表
 */
async function queryBrowserBlockLatest(request: QueryBrowserBlockLatestRequest): QueryBrowserBlockLatestResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryBrowserBlockLatestEx(request, headers, runtime);
}

/**
 * Description: 获取金融科技BaaS最新区块信息列表
 * Summary: 获取金融科技BaaS最新区块信息列表
 */
async function queryBrowserBlockLatestEx(request: QueryBrowserBlockLatestRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryBrowserBlockLatestResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.browser.block.latest.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryBrowserTransactionLatestRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // bizid
  bizid: string(name='bizid'),
}

model QueryBrowserTransactionLatestResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // result
  result?: [ BlockchainBrowserLatestTransaction ](name='result'),
}

/**
 * Description: 获取金融科技BaaS最新交易列表
 * Summary: 获取金融科技BaaS最新交易列表
 */
async function queryBrowserTransactionLatest(request: QueryBrowserTransactionLatestRequest): QueryBrowserTransactionLatestResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryBrowserTransactionLatestEx(request, headers, runtime);
}

/**
 * Description: 获取金融科技BaaS最新交易列表
 * Summary: 获取金融科技BaaS最新交易列表
 */
async function queryBrowserTransactionLatestEx(request: QueryBrowserTransactionLatestRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryBrowserTransactionLatestResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.browser.transaction.latest.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryBrowserBlockRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // bizid
  bizid: string(name='bizid'),
  // height
  height: long(name='height'),
}

model QueryBrowserBlockResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // BlockchainBrowserTransaction
  result?: BlockchainBrowserBlock(name='result'),
}

/**
 * Description: 获取金融科技BaaS区块信息
 * Summary: 获取金融科技BaaS区块信息
 */
async function queryBrowserBlock(request: QueryBrowserBlockRequest): QueryBrowserBlockResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryBrowserBlockEx(request, headers, runtime);
}

/**
 * Description: 获取金融科技BaaS区块信息
 * Summary: 获取金融科技BaaS区块信息
 */
async function queryBrowserBlockEx(request: QueryBrowserBlockRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryBrowserBlockResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.browser.block.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryBrowserTransactionRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // bizid
  bizid: string(name='bizid'),
  // hash
  hash: string(name='hash'),
}

model QueryBrowserTransactionResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // result
  result?: BlockchainBrowserTransaction(name='result'),
}

/**
 * Description: 获取金融科技BaaS交易信息内容
 * Summary: 获取金融科技BaaS交易信息内容
 */
async function queryBrowserTransaction(request: QueryBrowserTransactionRequest): QueryBrowserTransactionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryBrowserTransactionEx(request, headers, runtime);
}

/**
 * Description: 获取金融科技BaaS交易信息内容
 * Summary: 获取金融科技BaaS交易信息内容
 */
async function queryBrowserTransactionEx(request: QueryBrowserTransactionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryBrowserTransactionResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.browser.transaction.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryBrowserTransactionReceiptRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // bizid
  bizid: string(name='bizid'),
  // hash
  hash: string(name='hash'),
}

model QueryBrowserTransactionReceiptResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // BlockchainBrowserTransactionReceipt
  result?: BlockchainBrowserTransactionReceipt(name='result'),
}

/**
 * Description: 获取金融科技BaaS交易回执信息
 * Summary: 获取金融科技BaaS交易回执信息
 */
async function queryBrowserTransactionReceipt(request: QueryBrowserTransactionReceiptRequest): QueryBrowserTransactionReceiptResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryBrowserTransactionReceiptEx(request, headers, runtime);
}

/**
 * Description: 获取金融科技BaaS交易回执信息
 * Summary: 获取金融科技BaaS交易回执信息
 */
async function queryBrowserTransactionReceiptEx(request: QueryBrowserTransactionReceiptRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryBrowserTransactionReceiptResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.browser.transaction.receipt.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryBrowserNodeOwnerRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // bizid
  bizid: string(name='bizid'),
}

model QueryBrowserNodeOwnerResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // result
  result?: [ BlockchainBrowserNodeOwner ](name='result'),
}

/**
 * Description: 蚂蚁链节点所有者查询
 * Summary: 蚂蚁链节点所有者查询
 */
async function queryBrowserNodeOwner(request: QueryBrowserNodeOwnerRequest): QueryBrowserNodeOwnerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryBrowserNodeOwnerEx(request, headers, runtime);
}

/**
 * Description: 蚂蚁链节点所有者查询
 * Summary: 蚂蚁链节点所有者查询
 */
async function queryBrowserNodeOwnerEx(request: QueryBrowserNodeOwnerRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryBrowserNodeOwnerResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.browser.node.owner.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteBlockchainMiniprogramRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 蚂蚁区块链的唯一链id
  bizid: string(name='bizid'),
  // 取消查看权限的支付宝电话号码集合
  phoneNumbers: string(name='phone_numbers'),
}

model DeleteBlockchainMiniprogramResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 批量取消权限成功与否
  status?: long(name='status'),
}

/**
 * Description: 小程序权限删除
 * Summary: 小程序权限删除
 */
async function deleteBlockchainMiniprogram(request: DeleteBlockchainMiniprogramRequest): DeleteBlockchainMiniprogramResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteBlockchainMiniprogramEx(request, headers, runtime);
}

/**
 * Description: 小程序权限删除
 * Summary: 小程序权限删除
 */
async function deleteBlockchainMiniprogramEx(request: DeleteBlockchainMiniprogramRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteBlockchainMiniprogramResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.blockchain.miniprogram.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryBlockchainMiniprogramRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 蚂蚁区块链的唯一链id
  bizid: string(name='bizid'),
  // 查看权限的支付宝电话号码
  phoneNumber: string(name='phone_number'),
}

model QueryBlockchainMiniprogramResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 权限成功与否
  status?: long(name='status'),
}

/**
 * Description: 查询用户链上交易移动端查看权限
 * Summary: 查询用户链上交易移动端查看权限
 */
async function queryBlockchainMiniprogram(request: QueryBlockchainMiniprogramRequest): QueryBlockchainMiniprogramResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryBlockchainMiniprogramEx(request, headers, runtime);
}

/**
 * Description: 查询用户链上交易移动端查看权限
 * Summary: 查询用户链上交易移动端查看权限
 */
async function queryBlockchainMiniprogramEx(request: QueryBlockchainMiniprogramRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryBlockchainMiniprogramResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.blockchain.miniprogram.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryCreditTransferApplyRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 货主分布式数字身份
  consignorDid: string(name='consignor_did'),
  // 业务发起方分布式数字身
  platformDid: string(name='platform_did'),
}

model QueryCreditTransferApplyResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 查询结果信息，失败时为失败原因信息
  queryMsg?: string(name='query_msg'),
  // 查询结果状态   
  // -1:注册失败， 0:注册中， 1:注册完成
  status?: long(name='status'),
}

/**
 * Description: 物流金融信用流转能力注册开通结果查询
 * Summary: 物流金融信用流转能力注册开通结果查询
 */
async function queryCreditTransferApply(request: QueryCreditTransferApplyRequest): QueryCreditTransferApplyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryCreditTransferApplyEx(request, headers, runtime);
}

/**
 * Description: 物流金融信用流转能力注册开通结果查询
 * Summary: 物流金融信用流转能力注册开通结果查询
 */
async function queryCreditTransferApplyEx(request: QueryCreditTransferApplyRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryCreditTransferApplyResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.credit.transfer.apply.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryCreditTransferBalanceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 货主分布式数字身份
  consignorDid: string(name='consignor_did'),
  // 需发行信用流转的运费，运费最多精确到小数点后2位
  freight: string(name='freight'),
  // 业务发起方分布式数字身
  platformDid: string(name='platform_did'),
}

model QueryCreditTransferBalanceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 是否有信用流转额度
  hasBalance?: boolean(name='has_balance'),
}

/**
 * Description: 物流金融信用流转额度查询，仅显示是否有额度，不会返回具体额度
 * Summary: 物流金融信用流转额度查询
 */
async function queryCreditTransferBalance(request: QueryCreditTransferBalanceRequest): QueryCreditTransferBalanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryCreditTransferBalanceEx(request, headers, runtime);
}

/**
 * Description: 物流金融信用流转额度查询，仅显示是否有额度，不会返回具体额度
 * Summary: 物流金融信用流转额度查询
 */
async function queryCreditTransferBalanceEx(request: QueryCreditTransferBalanceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryCreditTransferBalanceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.credit.transfer.balance.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryCreditTransferIssuebyidRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 信用流转发行批次号，与issueId信用流转发行结果查询号不可同时为空
  batchId?: string(name='batch_id'),
  // 货主分布式数字身份
  consignorDid: string(name='consignor_did'),
  // 信用流转发行凭证Id，与batchId信用流转发行批次号不可同时为空
  issueId?: string(name='issue_id'),
  // 是否只返回已发行凭证信息
  issueOnly: boolean(name='issue_only'),
  // 页数 从1开始
  pageNum: long(name='page_num'),
  // 每页显示数量
  pageSize: long(name='page_size'),
  // 业务发起方分布式数字身份
  platformDid: string(name='platform_did'),
}

model QueryCreditTransferIssuebyidResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 凭证所属did
  did?: string(name='did'),
  // 凭证列表
  issueIds?: [ IssueInfo ](name='issue_ids'),
  // 页数 从1开始
  pageNum?: long(name='page_num'),
  // 每页显示数量
  pageSize?: long(name='page_size'),
  // 数据总量
  totalCount?: long(name='total_count'),
}

/**
 * Description: 物流金融信用流转通过id查询发行结果
 * Summary: 物流金融信用流转通过id查询发行结果
 */
async function queryCreditTransferIssuebyid(request: QueryCreditTransferIssuebyidRequest): QueryCreditTransferIssuebyidResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryCreditTransferIssuebyidEx(request, headers, runtime);
}

/**
 * Description: 物流金融信用流转通过id查询发行结果
 * Summary: 物流金融信用流转通过id查询发行结果
 */
async function queryCreditTransferIssuebyidEx(request: QueryCreditTransferIssuebyidRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryCreditTransferIssuebyidResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.credit.transfer.issuebyid.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryCreditTransferIssuebytimeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 需查询对象的分布式数字身份
  did: string(name='did'),
  // 查询截止时间
  endDate: string(name='end_date'),
  // 是否只返回已发行凭证信息
  issueOnle: boolean(name='issue_onle'),
  // 页数 从1开始
  pageNum: string(name='page_num'),
  // 每页显示数量
  pageSize: string(name='page_size'),
  // 业务发起方分布式数字身份
  platformDid: string(name='platform_did'),
  // 查询起始时间
  startDate: string(name='start_date'),
}

model QueryCreditTransferIssuebytimeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  //  凭证所属did
  did?: string(name='did'),
  // 凭证列表
  issueIds?: [ IssueInfo ](name='issue_ids'),
  // 页数 从1开始
  pageNum?: long(name='page_num'),
  // 每页显示数量
  pageSize?: long(name='page_size'),
  // 数据总量
  totalCount?: long(name='total_count'),
}

/**
 * Description: 物流金融根据时间查询信用凭证信息
 * Summary: 物流金融根据时间查询信用流转信息
 */
async function queryCreditTransferIssuebytime(request: QueryCreditTransferIssuebytimeRequest): QueryCreditTransferIssuebytimeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryCreditTransferIssuebytimeEx(request, headers, runtime);
}

/**
 * Description: 物流金融根据时间查询信用凭证信息
 * Summary: 物流金融根据时间查询信用流转信息
 */
async function queryCreditTransferIssuebytimeEx(request: QueryCreditTransferIssuebytimeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryCreditTransferIssuebytimeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.credit.transfer.issuebytime.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryCreditTransferStatementRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 需查询对象的分布式数字身份
  did: string(name='did'),
  // 查询截止时间
  endDate: string(name='end_date'),
  // 页数 从1开始
  pageNum: long(name='page_num'),
  // 每页显示数量
  pageSize: long(name='page_size'),
  // 业务发起方分布式数字身份
  platformDid: string(name='platform_did'),
  // 查询起始时间
  startDate: string(name='start_date'),
}

model QueryCreditTransferStatementResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 需查询对象的分布式数字身份
  did?: string(name='did'),
  // 页数 从1开始
  pageNum?: long(name='page_num'),
  // 每页显示数量
  pageSize?: long(name='page_size'),
  // 流水列表
  statementInfos?: [ CreditTransferStatementInfo ](name='statement_infos'),
  // 数据总量
  totalCount?: long(name='total_count'),
}

/**
 * Description: 物流金融信用流转流水查询
 * Summary: 物流金融信用流转流水查询
 */
async function queryCreditTransferStatement(request: QueryCreditTransferStatementRequest): QueryCreditTransferStatementResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryCreditTransferStatementEx(request, headers, runtime);
}

/**
 * Description: 物流金融信用流转流水查询
 * Summary: 物流金融信用流转流水查询
 */
async function queryCreditTransferStatementEx(request: QueryCreditTransferStatementRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryCreditTransferStatementResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.credit.transfer.statement.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CallbackCreditTransferRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 回调消息内容
  msgData: string(name='msg_data'),
  // 回调消息方法类型
  msgMethod: string(name='msg_method'),
}

model CallbackCreditTransferResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 是否已接收
  isRecv?: boolean(name='is_recv'),
}

/**
 * Description: 物流金融信用流转主站系统回调
 * Summary: 物流金融信用流转主站系统回调
 */
async function callbackCreditTransfer(request: CallbackCreditTransferRequest): CallbackCreditTransferResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return callbackCreditTransferEx(request, headers, runtime);
}

/**
 * Description: 物流金融信用流转主站系统回调
 * Summary: 物流金融信用流转主站系统回调
 */
async function callbackCreditTransferEx(request: CallbackCreditTransferRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CallbackCreditTransferResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.credit.transfer.callback', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model PushAuthUserVcRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 长度不超过64字符的业务唯一ID，用于对一个业务流的追踪。
  bizId: string(maxLength=64, name='biz_id'),
  // 具体的业务类型，长度不超过32字符，具体需要与DIS小组业务对接商定新增的业务类型。
  bizType: string(maxLength=32, name='biz_type'),
  // 推送的业务方自己所属的did，也就是颁发此声明的 issuer
  did: string(name='did'),
  // 使用did字段的密钥进行整体传送内容（不包括此signature字段）签名的结果，具体签名规则：
  // 1. Map<String,String> params 的key按照字典序排序
  // 2. 拼接为 key1=value1&key2=value2&key3=value3 ...
  // 3. 计算sha256(第2步结果)得到hash
  // 4. 使用hash 和 签名的did请求DIS的签名接口进行签名：baas.account.signature.start，https://apdevcenter.cloud.alipay.com/console/openapi/product/BLOCKCHAIN/apis/baas.account.signature.start/versions/1.0/document?
  signature: string(name='signature'),
  // 通过DIS颁发的声明详细信息，其中content的claim字段是和业务相关的实际声明内容。
  vcContent: string(name='vc_content'),
}

model PushAuthUserVcResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 是否推送成功到DIS的C端应用
  result?: boolean(name='result'),
}

/**
 * Description: 外部业务方可以给DIS的C端小程序用户颁发声明（VC）用户特定场景
 * Summary: 推送业务方给用户颁发的声明内容
 */
async function pushAuthUserVc(request: PushAuthUserVcRequest): PushAuthUserVcResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return pushAuthUserVcEx(request, headers, runtime);
}

/**
 * Description: 外部业务方可以给DIS的C端小程序用户颁发声明（VC）用户特定场景
 * Summary: 推送业务方给用户颁发的声明内容
 */
async function pushAuthUserVcEx(request: PushAuthUserVcRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PushAuthUserVcResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.auth.user.vc.push', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model PushAuthClaimVcRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 长度不超过64字符的业务唯一ID，用于对一个业务流的追踪，查询等。
  bizId: string(name='biz_id'),
  // 具体的业务类型，长度不超过32字符，具体需要与DIS小组业务对接商定新增的业务类型。
  bizType: string(name='biz_type'),
  // 申请授权的具体内容，通常由业务方对接定义，在小程序展示声明详细内容给用户，用户进行确认后，授权颁发声明。
  claimContent: string(name='claim_content'),
  // 如果在相同的biz_type下，还需要针对声明claim进行细化划分，可以使用此字段。
  claimType?: string(name='claim_type'),
  // 业务方持有的did身份
  did: string(name='did'),
  // 申请声明颁发后的有效期，可选参数，如果不指定则默认申请永久有效。
  expire?: long(name='expire'),
  // 申请目标did身份持有者，对声明进行授权颁发。
  issuerDid: string(name='issuer_did'),
  // 使用did字段的密钥进行整体传送内容（不包括此signature字段）签名的结果，具体签名规则：
  // 1. Map<String,String> params 的key按照字典序排序
  // 2. 拼接为 key1=value1&key2=value2&key3=value3 ...
  // 3. 计算sha256(第2步结果)得到hash
  // 4. 使用hash 和 签名的did请求DIS的签名接口进行签名：baas.account.signature.start，https://apdevcenter.cloud.alipay.com/console/openapi/product/BLOCKCHAIN/apis/baas.account.signature.start/versions/1.0/document?
  signature: string(name='signature'),
}

model PushAuthClaimVcResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 是否推送成功到DIS的C端应用
  result?: boolean(name='result'),
}

/**
 * Description: 业务方推送需要用户使用数字身份did授权确认的声明，推送后可根据自定义的业务id（biz_id）来查询状态（另提供接口），进而获取用户授权后的声明。
 * Summary: 推送需要用户端授权的业务声明
 */
async function pushAuthClaimVc(request: PushAuthClaimVcRequest): PushAuthClaimVcResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return pushAuthClaimVcEx(request, headers, runtime);
}

/**
 * Description: 业务方推送需要用户使用数字身份did授权确认的声明，推送后可根据自定义的业务id（biz_id）来查询状态（另提供接口），进而获取用户授权后的声明。
 * Summary: 推送需要用户端授权的业务声明
 */
async function pushAuthClaimVcEx(request: PushAuthClaimVcRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PushAuthClaimVcResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.auth.claim.vc.push', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model PullAuthUserDidRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 长度不超过64字符的业务唯一ID，用于对一个业务流的追踪、查询。
  bizId: string(maxLength=64, name='biz_id'),
  // 业务方持有的did
  did: string(name='did'),
  // 使用did字段的密钥进行整体传送内容（不包括此signature字段）签名的结果，具体签名规则： 1. Map<String,String> params 的key按照字典序排序 2. 拼接为 key1=value1&key2=value2&key3=value3 ... 3. 计算sha256(第2步结果)得到hash 4. 使用hash 和 签名的did请求DIS的签名接口进行签名：baas.account.signature.start，https://apdevcenter.cloud.alipay.com/console/openapi/product/BLOCKCHAIN/apis/baas.account.signature.start/versions/1.0/document?
  signature: string(name='signature'),
}

model PullAuthUserDidResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 长度不超过64字符的业务唯一ID，用于对一个业务流的追踪，与请求中的biz_id一致方便业务方使用。
  bizId?: string(name='biz_id'),
  // 获取到关联的用户did
  userDid?: string(name='user_did'),
}

/**
 * Description: 业务方通过提供二维码的方式引导用户支付宝扫描创建did，然后业务方通过此接口可查询用户新建的did
 * Summary: 通过biz_id获取用户的did
 */
async function pullAuthUserDid(request: PullAuthUserDidRequest): PullAuthUserDidResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return pullAuthUserDidEx(request, headers, runtime);
}

/**
 * Description: 业务方通过提供二维码的方式引导用户支付宝扫描创建did，然后业务方通过此接口可查询用户新建的did
 * Summary: 通过biz_id获取用户的did
 */
async function pullAuthUserDidEx(request: PullAuthUserDidRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PullAuthUserDidResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.auth.user.did.pull', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model PullAuthClaimVcRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 长度不超过64字符的业务唯一ID，用于对一个业务流的追踪、查询。
  bizId: string(maxLength=64, name='biz_id'),
  // 业务方持有的did
  did: string(name='did'),
  // 使用did字段的密钥进行整体传送内容（不包括此signature字段）签名的结果，具体签名规则： 1. Map<String,String> params 的key按照字典序排序 2. 拼接为 key1=value1&key2=value2&key3=value3 ... 3. 计算sha256(第2步结果)得到hash 4. 使用hash 和 签名的did请求DIS的签名接口进行签名：baas.account.signature.start，https://apdevcenter.cloud.alipay.com/console/openapi/product/BLOCKCHAIN/apis/baas.account.signature.start/versions/1.0/document?
  signature: string(name='signature'),
}

model PullAuthClaimVcResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 长度不超过64字符的业务唯一ID，用于对一个业务流的追踪，与请求中的biz_id一致方便业务方使用。
  bizId?: string(name='biz_id'),
  // 具体的业务类型，长度不超过32字符，具体需要对接确定新增的业务类型。
  bizType?: string(name='biz_type'),
  // 当前声明的状态说明：
  // 0：用户未授权
  // 1：用户授权成功，此时vc_content字段会包含授权后的声明内容
  // 101：业务方发起声明claim_content中的用户三要素（姓名，电话，身份证号），与目标用户真实的三要素匹配失败
  // 
  // 其它状态码，待定义后增加。
  status?: string(name='status'),
  // 申请授权的用户did
  userDid?: string(name='user_did'),
  // 如果status的值是“1”，则此字段就是用户授权成功后的声明（vc）的完整内容。
  vcContent?: string(name='vc_content'),
}

/**
 * Description: 业务方通过此接口可以查询，申请用户授权的声明状态，如果用户已授权即可获取到授权后的声明（vc）内容。
 * Summary: 获取申请用户声明的授权结果
 */
async function pullAuthClaimVc(request: PullAuthClaimVcRequest): PullAuthClaimVcResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return pullAuthClaimVcEx(request, headers, runtime);
}

/**
 * Description: 业务方通过此接口可以查询，申请用户授权的声明状态，如果用户已授权即可获取到授权后的声明（vc）内容。
 * Summary: 获取申请用户声明的授权结果
 */
async function pullAuthClaimVcEx(request: PullAuthClaimVcRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PullAuthClaimVcResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.auth.claim.vc.pull', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateAuthUserDidRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 通常为业务方持有的企业did身份
  did: string(name='did'),
  // 扩展用户信息字段，用于创建did特别场景，传递更多用户信息。
  extension?: string(name='extension'),
  // 是否实人认证，如果"T"表示已实人认证，否则未认证。
  isCertified?: string(name='is_certified'),
  // 使用did字段的密钥进行整体传送内容（不包括此signature字段）签名的结果，具体签名规则： 1. Map<String,String> params 的key按照字典序排序 2. 拼接为 key1=value1&key2=value2&key3=value3 ... 3. 计算sha256(第2步结果)得到hash 4. 使用hash 和 签名的did请求DIS的签名接口进行签名：baas.account.signature.start，https://apdevcenter.cloud.alipay.com/console/openapi/product/BLOCKCHAIN/apis/baas.account.signature.start/versions/1.0/document?
  signature?: string(name='signature'),
  // 业务方内部用户的id，可脱敏id，在一些id打通场景有特别用途。
  userId: string(name='user_id'),
}

model CreateAuthUserDidResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回给指定用户创建的did结果，如果入参对应userId的did之前已经存在，则不会新建did，直接返回已有did。
  result?: string(name='result'),
}

/**
 * Description: 业务系统通过授权宝服务帮忙给用户创建did，此接口访问需预先在授权宝配置白名单开通。
 * Summary: 给用户创建did，需要指定userId
 */
async function createAuthUserDid(request: CreateAuthUserDidRequest): CreateAuthUserDidResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createAuthUserDidEx(request, headers, runtime);
}

/**
 * Description: 业务系统通过授权宝服务帮忙给用户创建did，此接口访问需预先在授权宝配置白名单开通。
 * Summary: 给用户创建did，需要指定userId
 */
async function createAuthUserDidEx(request: CreateAuthUserDidRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateAuthUserDidResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.auth.user.did.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateAuthCorporateDidRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 对企业描述的扩展字段，用于传递更多企业信息，支持业务。
  extensionInfo?: string(name='extension_info'),
  // 企业名称，通常为法定的公司实体名称
  ownerName: string(name='owner_name'),
  // 调用方体系内企业的唯一ID，作为创建DID的绑定目标，调用者需要保证其唯一性。
  ownerUid: string(name='owner_uid'),
}

model CreateAuthCorporateDidResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 为企业创建的DID结果
  did?: string(name='did'),
}

/**
 * Description: 给企业DID创建DID，通常场景为对授权宝服务的开通，调用方对企业有认证能力。
 * Summary: 创建企业DID，开通授权宝服务
 */
async function createAuthCorporateDid(request: CreateAuthCorporateDidRequest): CreateAuthCorporateDidResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createAuthCorporateDidEx(request, headers, runtime);
}

/**
 * Description: 给企业DID创建DID，通常场景为对授权宝服务的开通，调用方对企业有认证能力。
 * Summary: 创建企业DID，开通授权宝服务
 */
async function createAuthCorporateDidEx(request: CreateAuthCorporateDidRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateAuthCorporateDidResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.auth.corporate.did.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model PullAuthWebpageVcRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 企业B类的唯一ID，对应的did在返回值vc_content中的subject字段
  pkId: string(name='pk_id'),
  // C类用户的唯一ID，当前为通过姓名+身份证号组合计算哈希得到user_id = sha256(name+certNo)，对应的did在返回值vc_content中的issuer字段
  userId: string(name='user_id'),
}

model PullAuthWebpageVcResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // C类用户实际授权发生的时间，GMT标准时间
  gmtAuthTime?: long(name='gmt_auth_time'),
  // 企业B类的唯一ID，对应的did在vc_content中的subject字段
  pkId?: string(name='pk_id'),
  // 当前声明的状态说明： 0：用户未授权 1：用户授权成功，此时vc_content字段会包含授权后的声明内容 ，101：信息校验失败，其他授权错误码情况待明确
  status?: string(name='status'),
  // 授权的可验证声明具体类型说明，有助于未来业务区分不同授权场景。
  type?: string(name='type'),
  // C类用户的唯一ID，当前为通过姓名+身份证号组合计算哈希得到user_id = sha256(name+certNo)，对应的did在vc_content中的issuer字段
  userId?: string(name='user_id'),
  // 如果status的值是“1”，则此字段就是用户授权成功后的声明（vc）的完整内容。
  vcContent?: string(name='vc_content'),
}

/**
 * Description: 业务方的C端用户授权颁发“可验证声明”（简称VC）之后，就会异步推送结果给相关业务服务端，如果相关业务服务端没有接收到，或者本地缓存过期，则可以通过此接口到授权宝再次查询目标可验证声明结果情况。
 * Summary: 查询目标可验证声明结果
 */
async function pullAuthWebpageVc(request: PullAuthWebpageVcRequest): PullAuthWebpageVcResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return pullAuthWebpageVcEx(request, headers, runtime);
}

/**
 * Description: 业务方的C端用户授权颁发“可验证声明”（简称VC）之后，就会异步推送结果给相关业务服务端，如果相关业务服务端没有接收到，或者本地缓存过期，则可以通过此接口到授权宝再次查询目标可验证声明结果情况。
 * Summary: 查询目标可验证声明结果
 */
async function pullAuthWebpageVcEx(request: PullAuthWebpageVcRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PullAuthWebpageVcResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.auth.webpage.vc.pull', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model PullAuthWebpageUrlRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 实人认证使用的biz_id，长度不超过64字符的业务唯一id
  bizId: string(name='biz_id'),
  // 实人认证使用的biz_type，通常为业务方自己在阿里云实人认证控制台创建。
  bizType: string(name='biz_type'),
  // 业务方C端用户身份证信息，会进入可验证声明claim内容中。
  certNo: string(name='cert_no'),
  // 业务方可以传递的附加信息，通常跟可验证声明的claim有关，目前是可选项，将来业务复杂后，需要指定claim类型，或者附加信息内容说明.
  extension?: string(name='extension'),
  // 业务方C端用户姓名信息，会进入可验证声明claim内容中。
  name: string(name='name'),
  // 业务方B类身份标识id，与创建的业务方B类DID（颁发可验证声明的subject目标）时baas.auth.corporate.did.create接口的入参owner_uid相同。
  pkId?: string(name='pk_id'),
}

model PullAuthWebpageUrlResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 可用的H5的Url，并且已经携带授权宝侧相关的参数：token、bizId等.
  authUrl?: string(name='auth_url'),
  // 此请求业务方的C端用户的DID，在授权宝侧相当于C端用户给业务方做授权，因此C端用户是issuer，业务方的B类客户是目标subject。
  issuerDid?: string(name='issuer_did'),
  // 此请求业务方B类客户的DID
  subjectDid?: string(name='subject_did'),
}

/**
 * Description: 此接口提供了授权宝这边可用的H5页面的Url，此Url会携带一些参数：授权宝鉴权token(JWT机制生成，内部使用)、bizId(接口入参带入)
 * Summary: 获取授权宝侧的H5授权Url
 */
async function pullAuthWebpageUrl(request: PullAuthWebpageUrlRequest): PullAuthWebpageUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return pullAuthWebpageUrlEx(request, headers, runtime);
}

/**
 * Description: 此接口提供了授权宝这边可用的H5页面的Url，此Url会携带一些参数：授权宝鉴权token(JWT机制生成，内部使用)、bizId(接口入参带入)
 * Summary: 获取授权宝侧的H5授权Url
 */
async function pullAuthWebpageUrlEx(request: PullAuthWebpageUrlRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PullAuthWebpageUrlResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.auth.webpage.url.pull', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartAuthVcAuthRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 长度不超过64字符的业务唯一ID，用于对一个业务流的追踪，查询等。
  bizId: string(name='biz_id'),
  // 业务类型，通常需要与授权宝服务沟通确定，业务类型可能影响此接口内部实现逻辑，长度不超过32字符。
  bizType: string(name='biz_type'),
  // 一个json的string。内容包含具体需要的声明，不同业务场景不同。
  claimContent: string(name='claim_content'),
  // 如果在相同的biz_type下，还需要针对声明claim进行细化划分，可以使用此字段。
  claimType?: string(name='claim_type'),
  // 非托管的情况下必选，业务方持有的did身份。
  did?: string(name='did'),
  // 申请声明颁发后的有效期，可选参数，如果不指定则默认申请永久有效。
  expire?: long(name='expire'),
  // 业务方可以传递的附加信息，通常跟可验证声明的claim有关，目前是可选项，将来业务复杂后，需要指定claim类型，或者附加信息内容说明。
  extension?: string(name='extension'),
  // 非托管的情况下必选。
  // 使用did字段的密钥进行整体传送内容（不包括此signature字段）签名的结果，具体签名规则： 1. Map<String,String> params 的key按照字典序排序 2. 拼接为 key1=value1&key2=value2&key3=value3 ... 3. 计算sha256(第2步结果)得到hash 4. 使用hash 和 签名的did请求DIS的签名。
  signature?: string(name='signature'),
  // 涉及的C类用户身份信息，如果是支付宝体系内，需要提供userId，并且提供二要素信息(name，certNo)
  userInfo: string(name='user_info'),
}

model StartAuthVcAuthResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 输入参数的bizId返回
  bizId?: string(name='biz_id'),
  // 具体业务的类型说明，来自入参。
  bizType?: string(name='biz_type'),
  // 本次可验证声明颁发者的DID
  issuerDid?: string(name='issuer_did'),
  // 可验证声明的颁发状态说明： 0：未授权 1：授权成功，此时vc_content字段会包含授权后的声明内容，其它状态码，待定义后增加。
  status?: string(name='status'),
  // 本次可验证声明目标者的DID
  subjectDid?: string(name='subject_did'),
  // 可验证声明完整内容， status 为 “1” 时候非空
  vcContent?: string(name='vc_content'),
  // 可验证声明的唯一标识id，status 为 “1” 时候非空
  vcId?: string(name='vc_id'),
}

/**
 * Description: 在一些业务场景，指定可验证声明之后，根据bizType的类型，直接发生代理颁发可验证声明的操作。
 * Summary: 给定声明内容并颁发声明
 */
async function startAuthVcAuth(request: StartAuthVcAuthRequest): StartAuthVcAuthResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startAuthVcAuthEx(request, headers, runtime);
}

/**
 * Description: 在一些业务场景，指定可验证声明之后，根据bizType的类型，直接发生代理颁发可验证声明的操作。
 * Summary: 给定声明内容并颁发声明
 */
async function startAuthVcAuthEx(request: StartAuthVcAuthRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartAuthVcAuthResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.auth.vc.auth.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartAuthVcShareRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 非托管的情况下必选，业务方持有的did身份。
  did?: string(name='did'),
  // 在支持声明的claim字段级别分享能力时使用，可以指定哪些字段隐藏，哪些字段分享。示例中标记为”1“的是隐藏，”0“的是分享明文。
  index?: string(name='index'),
  // 非托管的情况下必选。 使用did字段的密钥进行整体传送内容（不包括此signature字段）签名的结果，具体签名规则： 1. Map<String,String> params 的key按照字典序排序 2. 拼接为 key1=value1&key2=value2&key3=value3 ... 3. 计算sha256(第2步结果)得到hash 4. 使用hash 和 签名的did请求DIS的签名。
  signature?: string(name='signature'),
  // 分享声明的目标方DID
  targetDid: string(name='target_did'),
  // 分享权限的目标可验证声明(VC)的ID
  vcId: string(name='vc_id'),
  // vc_id的owner，将持有的vc_id分享给目标target_did
  ownerDid: string(name='owner_did'),
}

model StartAuthVcShareResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 分享可验证声明的目标方DID
  targetDid?: string(name='target_did'),
  // 分享链上VC数据的交易hash，可用于直连区块链查询交易内容时使用。
  txHash?: string(name='tx_hash'),
}

/**
 * Description: 可验证声明（VC）的拥有者（vcContent中的subject）可以将声明分享权限给其它的DID。
 * Summary: 将目标的声明内容，分享权限给目标的DID
 */
async function startAuthVcShare(request: StartAuthVcShareRequest): StartAuthVcShareResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startAuthVcShareEx(request, headers, runtime);
}

/**
 * Description: 可验证声明（VC）的拥有者（vcContent中的subject）可以将声明分享权限给其它的DID。
 * Summary: 将目标的声明内容，分享权限给目标的DID
 */
async function startAuthVcShareEx(request: StartAuthVcShareRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartAuthVcShareResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.auth.vc.share.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryAuthVcContentRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 如果此字段为空，则默认使用当前请求租户在授权宝配置的did来进行查询(此did需授权有权限)，此外情况都需要指定目标vc_id的owner_did
  ownerDid?: string(name='owner_did'),
  // 查询目标可验证声明的ID
  vcId: string(name='vc_id'),
}

model QueryAuthVcContentResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 目标查询的可验证声明的完整内容，如果有权限则返回明文内容，否则获取失败，此内容为空。
  vcContent?: string(name='vc_content'),
  // 目标可验证声明的唯一ID
  vcId?: string(name='vc_id'),
  // 当前声明的状态说明： 0：未授权 1：授权成功，-1：已吊销
  status?: string(name='status'),
}

/**
 * Description: 通过指定可验证声明id，获取目标可验证声明内容，需要可验证声明的拥有者分享声明才可查询，如果没有权限则获取失败。
 * Summary: 获取目标可验证声明内容
 */
async function queryAuthVcContent(request: QueryAuthVcContentRequest): QueryAuthVcContentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryAuthVcContentEx(request, headers, runtime);
}

/**
 * Description: 通过指定可验证声明id，获取目标可验证声明内容，需要可验证声明的拥有者分享声明才可查询，如果没有权限则获取失败。
 * Summary: 获取目标可验证声明内容
 */
async function queryAuthVcContentEx(request: QueryAuthVcContentRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAuthVcContentResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.auth.vc.content.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateAuthUserinfoDidRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 业务类型，通常需要与授权宝服务沟通确定，业务类型可能影响此接口内部实现逻辑，长度不超过32字符。
  bizType: string(name='biz_type'),
  // 非托管的情况下必选，业务方持有的did身份。
  did?: string(name='did'),
  // 业务方可以传递的附加信息，暂时未启用
  extension?: string(name='extension'),
  // 非托管的情况下必选。 使用did字段的密钥进行整体传送内容（不包括此signature字段）签名的结果，具体签名规则： 1. Map<String,String> params 的key按照字典序排序 2. 拼接为 key1=value1&key2=value2&key3=value3 ... 3. 计算sha256(第2步结果)得到hash 4. 使用hash 和 签名的did请求DIS的签名。
  signature?: string(name='signature'),
  // 目标用户的相关信息描述，用于创建DID绑定
  userInfo: string(name='user_info'),
  // 所有需要关联的外键，外键必须以did auth key controller的did作为前缀+“sidekey:”+外键
  indexes?: [ string ](name='indexes'),
}

model CreateAuthUserinfoDidResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回给指定用户创建的did结果，如果入参对应的did之前已经存在，则不会新建did，直接返回已有did。
  result?: string(name='result'),
}

/**
 * Description: 业务系统通过授权宝服务帮忙给C类用户创建did，此接口访问需预先在授权宝配置白名单开通。
 * Summary: 给C类用户建did，需要指定user信息
 */
async function createAuthUserinfoDid(request: CreateAuthUserinfoDidRequest): CreateAuthUserinfoDidResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createAuthUserinfoDidEx(request, headers, runtime);
}

/**
 * Description: 业务系统通过授权宝服务帮忙给C类用户创建did，此接口访问需预先在授权宝配置白名单开通。
 * Summary: 给C类用户建did，需要指定user信息
 */
async function createAuthUserinfoDidEx(request: CreateAuthUserinfoDidRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateAuthUserinfoDidResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.auth.userinfo.did.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartAuthVcRevokeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 在type参数为1时，此did参数不需要传递，默认调用方吊销给用户颁发的卡证。
  did: string(name='did'),
  // 类型说明，1：机构给用户颁发的证书，2：用户授权机构的证书(需要用户授权)
  type?: long(name='type'),
  // 吊销的目标可验证声明ID，如果type参数为1时，此参数可以默认不传，授权宝将会找到目标user当前持有的有效卡证，进行吊销处理。
  // 当type不为1时，此参数也可以不传，此时授权宝会根据userInfo和did信息去找到一个可吊销的VC进行吊销（应用层慎重使用，确保这样筛选的目标唯一性）。
  vcId?: string(name='vc_id'),
  // 当type参数为1时，此参数和did参数，两者选一个使用，使用userId或者did参数指明did，代表的都是目标C类用户身份。
  // 当type不为1时，此参数代表C类用户身份，did参数指明授权的目标机构身份。
  // 
  userInfo?: string(name='user_info'),
}

model StartAuthVcRevokeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // true:吊销成功，false:吊销失败
  result?: boolean(name='result'),
}

/**
 * Description: 声明的持有者可以吊销一个已颁发的可验证声明(VC)
 * Summary: 吊销已颁发声明
 */
async function startAuthVcRevoke(request: StartAuthVcRevokeRequest): StartAuthVcRevokeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startAuthVcRevokeEx(request, headers, runtime);
}

/**
 * Description: 声明的持有者可以吊销一个已颁发的可验证声明(VC)
 * Summary: 吊销已颁发声明
 */
async function startAuthVcRevokeEx(request: StartAuthVcRevokeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartAuthVcRevokeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.auth.vc.revoke.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartAuthVcGiveRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 长度不超过64字符的业务唯一ID，用于对一个业务流的追踪，查询等。
  bizId: string(name='biz_id'),
  // 业务类型，通常需要与授权宝服务沟通确定，业务类型可能影响此接口内部实现逻辑，长度不超过32字符。
  bizType: string(name='biz_type'),
  // 一个json的string。内容包含具体需要的声明，不同业务场景不同。
  claimContent?: string(name='claim_content'),
  // 如果在相同的biz_type下，还需要针对声明claim进行细化划分，可以使用此字段。
  claimType?: string(name='claim_type'),
  // 非托管的情况下必选，业务方持有的did身份。
  did?: string(name='did'),
  // 业务方可以传递的附加信息
  extension?: string(name='extension'),
  // 发起转增的发起方did，其实为发起请求之前的vc_id持有人
  ownerDid: string(name='owner_did'),
  // 非托管的情况下必选。 使用did字段的密钥进行整体传送内容（不包括此signature字段）签名的结果，具体签名规则： 1. Map<String,String> params 的key按照字典序排序 2. 拼接为 key1=value1&key2=value2&key3=value3 ... 3. 计算sha256(第2步结果)得到hash 4. 使用hash 和 签名的did请求DIS的签名。
  signature?: string(name='signature'),
  // 转增目标的did内容
  targetDid: string(name='target_did'),
  // 目标票据所在的可验证证明的id
  vcId: string(name='vc_id'),
  // 申请声明颁发后的有效期，可选参数，如果不指定则默认申请永久有效。
  expire?: long(name='expire'),
}

model StartAuthVcGiveResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 入参返回
  bizId?: string(name='biz_id'),
  // 业务类型，入参返回
  bizType?: string(name='biz_type'),
  // 本次转增后新颁发的可验证声明的issuer
  issuerDid?: string(name='issuer_did'),
  // 可验证声明的颁发状态说明： 0：未授权 1：授权成功，此时vc_content字段会包含授权后的声明内容，其它状态码，待定义后增加。
  status?: string(name='status'),
  // 本次转增的目标，也是新颁发的可验证声明的持有者owner的did
  subjectDid?: string(name='subject_did'),
  // 可验证声明完整内容， status 为 “1” 时候非空
  vcContent?: string(name='vc_content'),
  // 可验证声明的id
  vcId?: string(name='vc_id'),
}

/**
 * Description: 将可验证声明内的数据资产内容赠送给目标的did
 * Summary: 将vc赠送给一个目标did
 */
async function startAuthVcGive(request: StartAuthVcGiveRequest): StartAuthVcGiveResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startAuthVcGiveEx(request, headers, runtime);
}

/**
 * Description: 将可验证声明内的数据资产内容赠送给目标的did
 * Summary: 将vc赠送给一个目标did
 */
async function startAuthVcGiveEx(request: StartAuthVcGiveRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartAuthVcGiveResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.auth.vc.give.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartAuthVcSharebatchRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 非托管的情况下必选，业务方持有的did身份。
  did?: string(name='did'),
  // 非托管的情况下必选。 使用did字段的密钥进行整体传送内容（不包括此signature字段）签名的结果，具体签名规则： 1. Map<String,String> params 的key按照字典序排序 2. 拼接为 key1=value1&key2=value2&key3=value3 ... 3. 计算sha256(第2步结果)得到hash 4. 使用hash 和 签名的did请求DIS的签名。
  signature?: string(name='signature'),
  // 分享声明的目标方DID
  targetDid: string(name='target_did'),
  // 目标待分享的VC列表，不超过10个
  vcShareList: [ VcShareStruct ](name='vc_share_list'),
}

model StartAuthVcSharebatchResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // VC分享的结果列表，分别带有结果tx_hash
  vcShareResults?: [ VcShareResult ](name='vc_share_results'),
}

/**
 * Description: 提供批量分享可验证声明到目标did
 * Summary: 批量分享VC内容
 */
async function startAuthVcSharebatch(request: StartAuthVcSharebatchRequest): StartAuthVcSharebatchResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startAuthVcSharebatchEx(request, headers, runtime);
}

/**
 * Description: 提供批量分享可验证声明到目标did
 * Summary: 批量分享VC内容
 */
async function startAuthVcSharebatchEx(request: StartAuthVcSharebatchRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartAuthVcSharebatchResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.auth.vc.sharebatch.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartAuthCorporateSignRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 需要进行签名的字符串，按规定方式进行传参拼接并sha256
  data: string(name='data'),
  // 需要代理签名的目标did，此did是当前请求方申请在授权宝控制创建
  did: string(name='did'),
}

model StartAuthCorporateSignResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 签名结果
  signature?: string(name='signature'),
}

/**
 * Description: 如果机构没有接入网关能力需要合作方代理在授权宝管理签名能力，可使用此接口。
初始申请创建此corp did的调用方，有权限申请签名。
 * Summary: 代理签名
 */
async function startAuthCorporateSign(request: StartAuthCorporateSignRequest): StartAuthCorporateSignResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startAuthCorporateSignEx(request, headers, runtime);
}

/**
 * Description: 如果机构没有接入网关能力需要合作方代理在授权宝管理签名能力，可使用此接口。
初始申请创建此corp did的调用方，有权限申请签名。
 * Summary: 代理签名
 */
async function startAuthCorporateSignEx(request: StartAuthCorporateSignRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartAuthCorporateSignResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.auth.corporate.sign.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartAuthVcBatchauthRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 长度不超过64字符的业务唯一ID，用于对一个业务流的追踪，查询等。
  bizId: string(name='biz_id'),
  // 业务类型，通常需要与授权宝服务沟通确定，业务类型可能影响此接口内部实现逻辑，长度不超过32字符。
  bizType: string(name='biz_type'),
  // 批量进行可验证声明颁发的所有候选声明内容
  claimList: [ Claim ](name='claim_list'),
  // 非托管的情况下必选，业务方持有的did身份。
  did?: string(name='did'),
  // 业务方可以传递的附加信息，通常跟可验证声明的claim有关，目前是可选项，将来业务复杂后，需要指定claim类型，或者附加信息内容说明。
  extension?: string(name='extension'),
  // jN1LVH5YhbTvgrdeBqlImPJBWDzVdNyyHZ1n9A0pSOQKnt11jWM5Qn707+wEa7bc8TOd1WvRItTe\r\nmx4xYCqX0gE=\r\n	
  signature?: string(name='signature'),
  // 涉及的C类用户身份信息，如果是支付宝体系内，需要提供userId，并且提供二要素信息(name，certNo)
  userInfo: string(name='user_info'),
}

model StartAuthVcBatchauthResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 输入参数的bizId返回
  bizId?: string(name='biz_id'),
  // 具体业务的类型说明，来自入参。
  bizType?: string(name='biz_type'),
  // 本次可验证声明颁发者的DID
  issuerDid?: string(name='issuer_did'),
  // 颁发的多个可验证声明结果列表。
  vcList?: [ VcContent ](name='vc_list'),
}

/**
 * Description: 在一些业务场景，指定可验证声明之后，提交颁发可验证声明的操作。当前接口支持批量颁发声明，通常支持对多机构的数据授权。
 * Summary: 批量给定声明内容颁发声明，并上链存证
 */
async function startAuthVcBatchauth(request: StartAuthVcBatchauthRequest): StartAuthVcBatchauthResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startAuthVcBatchauthEx(request, headers, runtime);
}

/**
 * Description: 在一些业务场景，指定可验证声明之后，提交颁发可验证声明的操作。当前接口支持批量颁发声明，通常支持对多机构的数据授权。
 * Summary: 批量给定声明内容颁发声明，并上链存证
 */
async function startAuthVcBatchauthEx(request: StartAuthVcBatchauthRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartAuthVcBatchauthResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.auth.vc.batchauth.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartAuthVcReplaceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 长度不超过64字符的业务流水唯一ID，用于对一个业务流的追踪，查询等。
  bizId: string(name='biz_id'),
  // 业务类型，通常需要与授权宝服务沟通确定，业务类型可能影响此接口内部实现逻辑，长度不超过32字符。
  bizType: string(name='biz_type'),
  // 一个json的string。内容包含具体需要的声明，不同业务场景不同。
  claimContent: string(name='claim_content'),
  // 如果在相同的biz_type下，还需要针对声明claim进行细化划分，可以使用此字段。
  claimType?: string(name='claim_type'),
  // 非托管的情况下必选，业务方持有的did身份。
  did?: string(name='did'),
  // 申请声明颁发后的有效期，可选参数，如果不指定则默认申请永久有效。
  expire?: long(name='expire'),
  // 业务方可以传递的附加信息
  extension?: string(name='extension'),
  // 非托管的情况下必选。 使用did字段的密钥进行整体传送内容（不包括此signature字段）签名的结果，具体签名规则： 1. Map<String,String> params 的key按照字典序排序 2. 拼接为 key1=value1&key2=value2&key3=value3 ... 3. 计算sha256(第2步结果)得到hash 4. 使用hash 和 签名的did请求DIS的签名。
  signature?: string(name='signature'),
  // 涉及的C类用户身份信息，如果是支付宝体系内，需要提供userId，并且提供二要素信息(name，certNo)
  // 如果已知目标C类用户的did，则可以直接指定did，比如：{"did": "XXXX"}
  userInfo: string(name='user_info'),
  // 目标被替换的卡证vcId，此vcId指向的VC将被吊销，然后颁发新的vc。
  // 如果不指定此字段，如果有效卡证唯一，授权宝会默认找到唯一的有效卡证vcId进行吊销，然后颁发新的vc。
  vcId?: string(name='vc_id'),
}

model StartAuthVcReplaceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 输入参数的bizId返回
  bizId?: string(name='biz_id'),
  // 具体业务的类型说明，来自入参。
  bizType?: string(name='biz_type'),
  // 本次可验证声明颁发者的DID
  issuerDid?: string(name='issuer_did'),
  // 可验证声明的颁发状态说明： 0：未授权 1：授权成功，此时vc_content字段会包含授权后的声明内容，其它状态码，待定义后增加。
  status?: string(name='status'),
  // 本次可验证声明目标者的DID
  subjectDid?: string(name='subject_did'),
  // 可验证声明完整内容， status 为 “1” 时候非空
  vcContent?: string(name='vc_content'),
  // 可验证声明的唯一标识id，status 为 “1” 时候非空
  vcId?: string(name='vc_id'),
}

/**
 * Description: 将已颁发的可验证声明进行吊销，然后重新颁发一个新的可验证声明用于代替原有的业务语义的可验证声明。
 * Summary: 将已颁发的可验证声明进行重置替换
 */
async function startAuthVcReplace(request: StartAuthVcReplaceRequest): StartAuthVcReplaceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startAuthVcReplaceEx(request, headers, runtime);
}

/**
 * Description: 将已颁发的可验证声明进行吊销，然后重新颁发一个新的可验证声明用于代替原有的业务语义的可验证声明。
 * Summary: 将已颁发的可验证声明进行重置替换
 */
async function startAuthVcReplaceEx(request: StartAuthVcReplaceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartAuthVcReplaceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.auth.vc.replace.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model PushAuthInsurancePolicyRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 投保人证件号码
  certNo: string(name='cert_no'),
  // 投保人证件类型
  certType?: string(name='cert_type'),
  // 投保人的did
  did: string(name='did'),
  // 保单失效时间
  effectEndTime: string(name='effect_end_time'),
  // 保单生效时间
  effectStartTime: string(name='effect_start_time'),
  // 投保时间
  insuredTime: string(name='insured_time'),
  // 出单时间
  issueTime: string(name='issue_time'),
  // 投保人姓名
  name: string(name='name'),
  // 保单编号
  policyNo: string(name='policy_no'),
  // 保单类型
  policyType?: string(name='policy_type'),
  // 产品名称
  prodName: string(name='prod_name'),
  // 产品编号
  prodNo: string(name='prod_no'),
  // 行为回溯的整体编号
  userTraceCode: string(name='user_trace_code'),
}

model PushAuthInsurancePolicyResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 凭证id
  vcId?: string(name='vc_id'),
  // 合并之后的录屏记录的id，recordingId
  recordingId?: string(name='recording_id'),
}

/**
 * Description: 推送保单信息
 * Summary: 推送保单信息
 */
async function pushAuthInsurancePolicy(request: PushAuthInsurancePolicyRequest): PushAuthInsurancePolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return pushAuthInsurancePolicyEx(request, headers, runtime);
}

/**
 * Description: 推送保单信息
 * Summary: 推送保单信息
 */
async function pushAuthInsurancePolicyEx(request: PushAuthInsurancePolicyRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PushAuthInsurancePolicyResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.auth.insurance.policy.push', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetAuthFrontendAccesstokenRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 业务类型
  bizType: string(name='biz_type'),
  // 用户did
  userDid: string(name='user_did'),
}

model GetAuthFrontendAccesstokenResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 访问令牌
  accessToken?: string(name='access_token'),
  // 过期时间
  expire?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='expire'),
  // refresh_token
  refreshToken?: string(name='refresh_token'),
  // 和xreplay交互时使用的令牌
  xreplayToken?: string(name='xreplay_token'),
}

/**
 * Description: 获取前端sdk使用的token
 * Summary: 获取前端sdk使用的token
 */
async function getAuthFrontendAccesstoken(request: GetAuthFrontendAccesstokenRequest): GetAuthFrontendAccesstokenResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getAuthFrontendAccesstokenEx(request, headers, runtime);
}

/**
 * Description: 获取前端sdk使用的token
 * Summary: 获取前端sdk使用的token
 */
async function getAuthFrontendAccesstokenEx(request: GetAuthFrontendAccesstokenRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetAuthFrontendAccesstokenResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.auth.frontend.accesstoken.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateAuthClaimUrlRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 业务类型
  bizType: string(name='biz_type'),
  // 授权声明内容
  claimValue: string(name='claim_value'),
  // 被授权企业did
  corpDid: string(name='corp_did'),
  // 过期时间选项
  expireOptions: [ ValueUnitPair ](name='expire_options'),
  // 授权是否可撤销
  revocable: boolean(name='revocable'),
}

model CreateAuthClaimUrlResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 待认证的业务id
  bizId?: string(name='biz_id'),
  // 授权模版跳转url
  claimUrl?: string(name='claim_url'),
}

/**
 * Description: 获取声明授权链接
 * Summary: 获取声明授权链接
 */
async function createAuthClaimUrl(request: CreateAuthClaimUrlRequest): CreateAuthClaimUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createAuthClaimUrlEx(request, headers, runtime);
}

/**
 * Description: 获取声明授权链接
 * Summary: 获取声明授权链接
 */
async function createAuthClaimUrlEx(request: CreateAuthClaimUrlRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateAuthClaimUrlResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.auth.claim.url.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartAuthVerifyCarinfoRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 长度不超过64字符的业务唯一ID，用于对一个业务流的追踪，查询等。
  bizId: string(name='biz_id'),
  // 业务类型，通常需要与授权宝服务沟通确定，业务类型可能影响此接口内部实现逻辑，长度不超过32字符。
  bizType: string(name='biz_type'),
  // 加密前身份证号最后一位为字母 X 时，请使用大写 X，SHA256 加密字符串(小写)，身份证需 18
  // 岁以上。
  certNo: string(name='cert_no'),
  // 保留字段，待扩展使用的JSON字符串内容
  extension?: string(name='extension'),
  // 车牌号加密前车牌字母均为大写，SHA256 的加密后字符串(小写字母)
  licenseNo: string(name='license_no'),
  // 目标用户姓名的SHA256计算结果(小写字母)
  name: string(name='name'),
  // 姓名和身份证号拼接之后，SHA256加密的结果(小写字母)，身份证最后一位为字母 X 时， 请使用大写 X，加密后 SHA256 的 字符串(小写)， 身份证需 18 岁以上。
  twoMeta: string(name='two_meta'),
}

model StartAuthVerifyCarinfoResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 业务流水号，输入参数的bizId返回。
  bizId?: string(name='biz_id'),
  // 来自入参，具体看业务场景。
  bizType?: string(name='biz_type'),
  // 目标用户创建的did结果，如果为空则表明未创建。
  did?: string(name='did'),
  // 查询结果
  // 1 一致(收费)
  // 2 姓名不一致(收费)
  // 3 身份证未命中(收费)
  // 4 车牌号不一致(收费)
  // 0 无意义(responsecode 不为 100 时 出现)
  resultStatus?: long(name='result_status'),
  // 查询结果数据，result_status 不等于 1 时为null，结果是一个JSON字符串，具体结果内容解释，需要参考文档说明。
  resultData?: string(name='result_data'),
}

/**
 * Description: 行驶证核身授权
 * Summary: 授权宝个人信息授权，行驶证核身授权
 */
async function startAuthVerifyCarinfo(request: StartAuthVerifyCarinfoRequest): StartAuthVerifyCarinfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startAuthVerifyCarinfoEx(request, headers, runtime);
}

/**
 * Description: 行驶证核身授权
 * Summary: 授权宝个人信息授权，行驶证核身授权
 */
async function startAuthVerifyCarinfoEx(request: StartAuthVerifyCarinfoRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartAuthVerifyCarinfoResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.auth.verify.carinfo.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartAuthVerifyDriverinfoRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 业务流水号，长度不超过64字符的业务唯一ID，用于对一个业务流的追踪，查询等。
  bizId: string(name='biz_id'),
  // 业务类型，通常需要与授权宝服务沟通确定，业务类型可能影响此接口内部实现逻辑，长度不超过32字符。
  bizType: string(name='biz_type'),
  // 加密前身份证号最后一位为字母 X 时，请使用大写 X，SHA256 加密字符串(小写)，身份证需 18 岁以上。
  certNo: string(name='cert_no'),
  // 保留字段，待扩展使用的JSON字符串内容
  extension?: string(name='extension'),
  // 目标用户姓名的SHA256计算结果(小写字母)。
  name: string(name='name'),
  // 姓名和身份证号拼接之后，SHA256加密的结果(小写字母)，身份证最后一位为字母 X 时， 请使用大写 X，加密后 SHA256 的 字符串(小写)， 身份证需 18 岁以上。
  twoMeta: string(name='two_meta'),
}

model StartAuthVerifyDriverinfoResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 业务流水号，输入参数的bizId返回。
  bizId?: string(name='biz_id'),
  // 来自入参，具体看业务场景。
  bizType?: string(name='biz_type'),
  // 目标用户创建的did结果，如果为空则表明未创建。
  did?: string(name='did'),
  // 查询结果：
  // 1 一致(收费) 
  // 2 姓名不一致(收费) 
  // 3 身份证未命中(收费) 
  // 4 车牌号不一致(收费) 
  // 0 无意义
  resultStatus?: long(name='result_status'),
  // 查询结果数据，result_status 不等于 1 时为null，结果是一个JSON字符串，具体结果内容解释，需要参考文档说明。
  resultData?: string(name='result_data'),
}

/**
 * Description: 驾驶证相关信息核验并核身，并且结合授权宝完成授权。
 * Summary: 授权宝个人信息授权，驾驶证核身授权
 */
async function startAuthVerifyDriverinfo(request: StartAuthVerifyDriverinfoRequest): StartAuthVerifyDriverinfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startAuthVerifyDriverinfoEx(request, headers, runtime);
}

/**
 * Description: 驾驶证相关信息核验并核身，并且结合授权宝完成授权。
 * Summary: 授权宝个人信息授权，驾驶证核身授权
 */
async function startAuthVerifyDriverinfoEx(request: StartAuthVerifyDriverinfoRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartAuthVerifyDriverinfoResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.auth.verify.driverinfo.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartAuthVerifyCarinspectRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 长度不超过64字符的业务唯一ID，用于对一个业务流的追踪，查询等。
  bizId: string(name='biz_id'),
  // 业务类型，通常需要与授权宝服务沟通确定，业务类型可能影响此接口内部实现逻辑，长度不超过32字符。
  bizType: string(name='biz_type'),
  // 车牌号，内容大写，不带空格。
  plateNo: string(name='plate_no'),
  // 非必填参数，号牌种类说明，比如"01"代表大型汽车，具体类型入参说明参考文档枚举。
  plateType?: string(name='plate_type'),
}

model StartAuthVerifyCarinspectResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 年检有效期止。
  inspectionDate?: string(name='inspection_date'),
  //  0：正常   1：逾期未检验  2：无法判断
  status?: long(name='status'),
}

/**
 * Description: 检查车牌是否进行年检，当前状态，以及年检有效期止。
 * Summary: 车检查询核验，目标车牌年检状态
 */
async function startAuthVerifyCarinspect(request: StartAuthVerifyCarinspectRequest): StartAuthVerifyCarinspectResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startAuthVerifyCarinspectEx(request, headers, runtime);
}

/**
 * Description: 检查车牌是否进行年检，当前状态，以及年检有效期止。
 * Summary: 车检查询核验，目标车牌年检状态
 */
async function startAuthVerifyCarinspectEx(request: StartAuthVerifyCarinspectRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartAuthVerifyCarinspectResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.auth.verify.carinspect.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetAuthClaimTemplateRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 业务类型
  bizType: string(name='biz_type'),
}

model GetAuthClaimTemplateResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 授权声明模版
  claimTemplate?: string(name='claim_template'),
}

/**
 * Description: 获取授权声明模版
 * Summary: 获取授权声明模版
 */
async function getAuthClaimTemplate(request: GetAuthClaimTemplateRequest): GetAuthClaimTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getAuthClaimTemplateEx(request, headers, runtime);
}

/**
 * Description: 获取授权声明模版
 * Summary: 获取授权声明模版
 */
async function getAuthClaimTemplateEx(request: GetAuthClaimTemplateRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetAuthClaimTemplateResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.auth.claim.template.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateAuthClaimVcRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 业务类型
  bizType: string(name='biz_type'),
  // 业务id
  bizId: string(name='biz_id'),
  // 被授权者did
  subjectDid: string(name='subject_did'),
  // 授权内容
  content: string(name='content'),
  // 授权发起者did
  issuerDid: string(name='issuer_did'),
  // 过期时间，长期为-1, 单位为毫秒
  expire: long(name='expire'),
  // 授权是否可撤销
  revocable: boolean(name='revocable'),
}

model CreateAuthClaimVcResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 业务id
  bizId?: string(name='biz_id'),
  // 可验证声明id
  vcId?: string(name='vc_id'),
}

/**
 * Description: 通过claim创建vc
 * Summary: 通过claim创建vc
 */
async function createAuthClaimVc(request: CreateAuthClaimVcRequest): CreateAuthClaimVcResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createAuthClaimVcEx(request, headers, runtime);
}

/**
 * Description: 通过claim创建vc
 * Summary: 通过claim创建vc
 */
async function createAuthClaimVcEx(request: CreateAuthClaimVcRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateAuthClaimVcResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.auth.claim.vc.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryAuthClaimVcRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 可验证声明id
  vcId: string(name='vc_id'),
  // 业务类型
  bizType: string(name='biz_type'),
}

model QueryAuthClaimVcResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 可验证声明id
  vcId?: string(name='vc_id'),
  // vc详情
  vcContent?: string(name='vc_content'),
  // vc状态
  // 0:未授权
  // 1:已授权
  // 2: 拒绝授权
  // 3: 授权已撤销
  status?: long(name='status'),
  // 业务类型
  bizType?: string(name='biz_type'),
  // 授权是否可撤销
  revocable?: boolean(name='revocable'),
  // 过期时间
  expire?: long(name='expire'),
}

/**
 * Description: 查询vc详情
 * Summary: 查询vc详情
 */
async function queryAuthClaimVc(request: QueryAuthClaimVcRequest): QueryAuthClaimVcResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryAuthClaimVcEx(request, headers, runtime);
}

/**
 * Description: 查询vc详情
 * Summary: 查询vc详情
 */
async function queryAuthClaimVcEx(request: QueryAuthClaimVcRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAuthClaimVcResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.auth.claim.vc.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryAuthVehicleinsuranceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 车牌号
  vehicleNo: string(name='vehicle_no'),
  // 车型代码. 可选, 02 普通小客车(默认); 52 新能源小客车
  vehicleType?: string(name='vehicle_type'),
  // 车辆识别码
  vin: string(name='vin'),
  // 车主认证信息
  ownerMetaInfo: UserMetaInfo(name='owner_meta_info'),
  // 业务类型
  bizType: string(name='biz_type'),
  // 业务id
  bizId: string(name='biz_id'),
}

model QueryAuthVehicleinsuranceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 上次交强险投保年月
  lastInsuranceDate?: string(name='last_insurance_date'),
  // 初次投保日期
  firstInsuranceDate?: string(name='first_insurance_date'),
  // 最近交强险投保期止
  latestInsuranceDate?: string(name='latest_insurance_date'),
  // 车辆did
  vehicleDid?: string(name='vehicle_did'),
  // 车主did
  ownerUserDid?: string(name='owner_user_did'),
  // 服务提供方代码
  ispType?: long(name='isp_type'),
}

/**
 * Description: 车辆投保日期查询(存量)
 * Summary: 车辆投保日期查询(存量)
 */
async function queryAuthVehicleinsurance(request: QueryAuthVehicleinsuranceRequest): QueryAuthVehicleinsuranceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryAuthVehicleinsuranceEx(request, headers, runtime);
}

/**
 * Description: 车辆投保日期查询(存量)
 * Summary: 车辆投保日期查询(存量)
 */
async function queryAuthVehicleinsuranceEx(request: QueryAuthVehicleinsuranceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAuthVehicleinsuranceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.auth.vehicleinsurance.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryAuthVehicleinsuranceVcRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 车牌号
  vehicleNo: string(name='vehicle_no'),
  // 车型代码. 可选, 02 普通小客车(默认); 52 新能源小客车
  vehicleType?: string(name='vehicle_type'),
  // 车辆识别码
  vin: string(name='vin'),
  // 车主认证信息
  ownerMetaInfo: UserMetaInfo(name='owner_meta_info'),
  // 业务类型
  bizType: string(name='biz_type'),
  // 业务id
  bizId: string(name='biz_id'),
}

model QueryAuthVehicleinsuranceVcResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 上次交强险投保年月
  lastInsuranceDate?: string(name='last_insurance_date'),
  // 初次投保日期
  firstInsuranceDate?: string(name='first_insurance_date'),
  // 最近交强险投保期止
  latestInsuranceDate?: string(name='latest_insurance_date'),
  // 车辆did
  vehicleDid?: string(name='vehicle_did'),
  // 车主did
  ownerUserDid?: string(name='owner_user_did'),
  // 可验证声明id
  vcId?: string(name='vc_id'),
  // 业务提供方代码
  ispType?: long(name='isp_type'),
}

/**
 * Description: 车辆投保日期查询(增量)
 * Summary: 车辆投保日期查询(增量)
 */
async function queryAuthVehicleinsuranceVc(request: QueryAuthVehicleinsuranceVcRequest): QueryAuthVehicleinsuranceVcResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryAuthVehicleinsuranceVcEx(request, headers, runtime);
}

/**
 * Description: 车辆投保日期查询(增量)
 * Summary: 车辆投保日期查询(增量)
 */
async function queryAuthVehicleinsuranceVcEx(request: QueryAuthVehicleinsuranceVcRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAuthVehicleinsuranceVcResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.auth.vehicleinsurance.vc.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryAuthVcStatisticsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 业务场景码，通常特定的业务场景需要与授权宝约定使用
  bizType: string(name='biz_type'),
  // 返回分布数据以day为单位的数量，当前此参数保留，只返回7day的分布，后续启用此参数。
  size?: string(name='size'),
}

model QueryAuthVcStatisticsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 业务场景值，与入参相同
  bizType?: string(name='biz_type'),
  // 指定业务场景的数据量，在核酸检测场景，就是整体核酸检测数据的数量
  total?: long(name='total'),
  // 分布曲线描绘的一个点，day为单位的分布数据汇总情况。
  list?: [ Curve ](name='list'),
}

/**
 * Description: 查询在特定业务bizType下的凭证颁发的统计数据，以及按照day维度的分布情况。
 * Summary: 查询目标场景的凭证颁发的统计数据
 */
async function queryAuthVcStatistics(request: QueryAuthVcStatisticsRequest): QueryAuthVcStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryAuthVcStatisticsEx(request, headers, runtime);
}

/**
 * Description: 查询在特定业务bizType下的凭证颁发的统计数据，以及按照day维度的分布情况。
 * Summary: 查询目标场景的凭证颁发的统计数据
 */
async function queryAuthVcStatisticsEx(request: QueryAuthVcStatisticsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAuthVcStatisticsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.auth.vc.statistics.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryAuthVcRealtimeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 查询目标业务的实时凭证颁发情况
  bizType: string(name='biz_type'),
  // 最新实时颁发的凭证查看数目，可以不设定，默认返回10个结果，如果整体结果少于10，则按情况返回。
  size?: long(name='size'),
}

model QueryAuthVcRealtimeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 业务类型场景码，与入参相同。
  bizType?: string(name='biz_type'),
  // 实际返回的结果数目，如果真是数据量小于request中的size的情况下，total 不等于 size，否则 total 与size值相等。
  total?: long(name='total'),
  // 列表结果，其中每个元素是一个json的string，这个json实际就是数据源提供的数据上链之前的内容。
  // 
  // {
  //   "key":"vc:mychain:01364d9acbda8d09d8c30d94987b40b28f2c28d4ff8f86dbe16197a8f2b0c031",
  //   "name": "张三",           //个人姓名
  //   "certNo": "210XXXXXX90", //个人证件号码
  //   "mobile": "138XXXXXX90", //个人手机号码
  //   "orgName": "XXX检测中心",      //检测机构名称
  //   "orgNo": "90XXXX00",    //检测机构编号 (可选)
  //   "type":"1",             //具体类型说明：1：核酸检测证明，2：疫苗接种证明，其他类型后续扩展
  //   "result":"阴性",
  //   "date":"2021-03-09",    //检测的日期，请统一使用此标准
  //   "timestamp":"检测准确时间戳"   //其它字段可以再补充
  // }
  list?: [ string ](name='list'),
}

/**
 * Description: 查询目标业务凭证的实时颁发的情况，返回一个列表。
 * Summary: 查询目标业务凭证颁发的实时列表情况
 */
async function queryAuthVcRealtime(request: QueryAuthVcRealtimeRequest): QueryAuthVcRealtimeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryAuthVcRealtimeEx(request, headers, runtime);
}

/**
 * Description: 查询目标业务凭证的实时颁发的情况，返回一个列表。
 * Summary: 查询目标业务凭证颁发的实时列表情况
 */
async function queryAuthVcRealtimeEx(request: QueryAuthVcRealtimeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAuthVcRealtimeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.auth.vc.realtime.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryAuthOrgStatusRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 业务类型说明，当前查询的业务类型，不同业务的机构列表不同。
  bizType: string(name='biz_type'),
}

model QueryAuthOrgStatusResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 业务场景码类型
  bizType?: string(name='biz_type'),
  // 列表结果，其中每个元素是一个json的string，这个json实际就是数据源提供的数据上链之前的内容。
  // 
  // [
  //   {
  //     "did": "did:mychain:b11dd863d31c38507d6cf8e615b897c7a9160d145e404b8a991964179c0e0bfd",
  //     "orgName": "XX检查门诊-1",
  //     "orgNo": "机构编号-1",
  //     "logoUrl": "https://gw.alipayobjects.com/mdn/rms_40e4ff/afts/img/A*a8QOSJysDlsAAAAAAAAAAABkARQnAQ",
  //     "status": 1
  //   },
  //   {
  //     "did": "did:mychain:b11dd863d31c38507d6cf8e615b897c7a9160d145e404b8a991964179c0e0bfe",
  //     "orgName": "XX检查门诊-2",
  //     "orgNo": "机构编号-2",
  //     "logoUrl": "https://gw.alipayobjects.com/mdn/rms_40e4ff/afts/img/A*a8QOSJysDlsAAAAAAAAAAABkARQnAQ",
  //     "status": 0
  //   }
  // ]
  list?: [ string ](name='list'),
}

/**
 * Description: 在机构颁发凭证的情况下，机构的可信度和状态会影响颁发的凭证的有效性和影响，因此提供接口查询机构状态。
 * Summary: 特定场景下使用，查询机构状态
 */
async function queryAuthOrgStatus(request: QueryAuthOrgStatusRequest): QueryAuthOrgStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryAuthOrgStatusEx(request, headers, runtime);
}

/**
 * Description: 在机构颁发凭证的情况下，机构的可信度和状态会影响颁发的凭证的有效性和影响，因此提供接口查询机构状态。
 * Summary: 特定场景下使用，查询机构状态
 */
async function queryAuthOrgStatusEx(request: QueryAuthOrgStatusRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAuthOrgStatusResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.auth.org.status.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartAuthAssetIssueRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 长度不超过64字符的业务唯一ID，用于对一个业务流的追踪，查询等。
  bizId: string(name='biz_id'),
  // 具体的业务类型，长度不超过32字符，具体需要与DIS小组业务对接商定新增的业务类型。
  bizType: string(name='biz_type'),
  // 目前区分content的两种数据：
  // - "b_total"：商户维度聚合数据，（分城市消费者统计数据），相关商家属性。
  // - "c_deposit"：C类个人充值数据，未来扩展C类核销，退款等数据类型，"c_"前缀。
  // - "c_total"：C类个人充值数据聚合(安心充+学费码整体去重按照地理位置维度聚合)
  type: string(name='type'),
  // 当 type参数为："b_total"
  // 主要设定“商户统一信用码” ，其name字段从mif如果获取到也填入：
  // {"name": "XXXX",
  // "certNo":"信用码"}，
  // 
  // 当type参数为："c_deposit"时，设定C类用户信息，使用uid，如果有二要素信息，则计算二要素“姓名+身份证号”的拼接字符串计算Hash得到twoMeta：
  // {"userId": "XXXX",
  // "twoMeta":"SHA256(姓名+身份证号码)"}
  // 
  // 当 type参数为："c_total"，可以不设定此参数。
  identity?: string(name='identity'),
  // 可能两种类型数据：
  // 商户维度的统计数据，是聚合的数据结果
  // C类充值数据，包含 充值明细数据，目标商户信用码，商户所在城市地理位置信息等。
  content: string(name='content'),
  // 传递的附加信息说明，暂时未定义
  extension?: string(name='extension'),
}

model StartAuthAssetIssueResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 数据在目标链上的交易hash
  hash?: string(name='hash'),
  // 颁发的凭证的索引id
  vcId?: string(name='vc_id'),
  // 目标identity在分布式数字身份这边创建的did
  did?: string(name='did'),
}

/**
 * Description: 预充值交易通过身份的凭证封装的方式在区块链上资产化。
 * Summary: 交易资产的归属
 */
async function startAuthAssetIssue(request: StartAuthAssetIssueRequest): StartAuthAssetIssueResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startAuthAssetIssueEx(request, headers, runtime);
}

/**
 * Description: 预充值交易通过身份的凭证封装的方式在区块链上资产化。
 * Summary: 交易资产的归属
 */
async function startAuthAssetIssueEx(request: StartAuthAssetIssueRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartAuthAssetIssueResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.auth.asset.issue.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AllAuthCertTemplateRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 证书模板的分类，目前支持马拉松和荣誉证书，marathon 、honor 、employee
  category: string(name='category'),
}

model AllAuthCertTemplateResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 模板类别：马拉松类、滑雪类
  category?: string(name='category'),
  // 模板详情列表
  templates?: [ TemplateInfoDTO ](name='templates'),
}

/**
 * Description: 查询卡证模板的列表
 * Summary: 查询模板列表
 */
async function allAuthCertTemplate(request: AllAuthCertTemplateRequest): AllAuthCertTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return allAuthCertTemplateEx(request, headers, runtime);
}

/**
 * Description: 查询卡证模板的列表
 * Summary: 查询模板列表
 */
async function allAuthCertTemplateEx(request: AllAuthCertTemplateRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AllAuthCertTemplateResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.auth.cert.template.all', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SaveAuthCertInstanceforcustomRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 证书内容，json格式，可以根据证书模板增加自定义字段
  content: string(name='content'),
  // 需要编辑的证书实例id，如果是新增场景则传null
  instanceId?: string(name='instance_id'),
  // 创建证书实例后的状态，新增场景默认为3，修改场景不用传值
  // 
  // 3: 编辑中 2: 待审核  1: 审核通过 
  // 
  // 只有3: 编辑中 状态可以对证书实例进行修改
  status?: long(name='status'),
}

model SaveAuthCertInstanceforcustomResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 创建成功的证书实例id
  instanceId?: string(name='instance_id'),
}

/**
 * Description: 为客权业务定制化的编辑或新增证书实例，可以绕过审批流程
 * Summary: 编辑或新增证书实例
 */
async function saveAuthCertInstanceforcustom(request: SaveAuthCertInstanceforcustomRequest): SaveAuthCertInstanceforcustomResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return saveAuthCertInstanceforcustomEx(request, headers, runtime);
}

/**
 * Description: 为客权业务定制化的编辑或新增证书实例，可以绕过审批流程
 * Summary: 编辑或新增证书实例
 */
async function saveAuthCertInstanceforcustomEx(request: SaveAuthCertInstanceforcustomRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SaveAuthCertInstanceforcustomResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.auth.cert.instanceforcustom.save', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BatchcreateAuthCertRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 证书实例id
  instanceId: string(name='instance_id'),
  // 通过上传领取人明细文件接口返回的csv文件名
  path: string(name='path'),
}

model BatchcreateAuthCertResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 证书颁发进度描述
  certIssueProgress?: CertIssueProgressDTO(name='cert_issue_progress'),
}

/**
 * Description: 通过上传的领取人明细文件，为证书实例批量颁发证书
 * Summary: 批量颁发证书
 */
async function batchcreateAuthCert(request: BatchcreateAuthCertRequest): BatchcreateAuthCertResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return batchcreateAuthCertEx(request, headers, runtime);
}

/**
 * Description: 通过上传的领取人明细文件，为证书实例批量颁发证书
 * Summary: 批量颁发证书
 */
async function batchcreateAuthCertEx(request: BatchcreateAuthCertRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BatchcreateAuthCertResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.auth.cert.batchcreate', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateAuthCertRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 证书实例id
  instanceId: string(name='instance_id'),
  // 证书的字段标题列表
  titles: [ string ](name='titles'),
  // 证书的字段内容数组
  data: [ string ](name='data'),
}

model CreateAuthCertResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 颁发进度的详细描述
  certIssueProgress?: CertIssueProgressDTO(name='cert_issue_progress'),
}

/**
 * Description: 单个颁发证书
 * Summary: 颁发证书
 */
async function createAuthCert(request: CreateAuthCertRequest): CreateAuthCertResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createAuthCertEx(request, headers, runtime);
}

/**
 * Description: 单个颁发证书
 * Summary: 颁发证书
 */
async function createAuthCertEx(request: CreateAuthCertRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateAuthCertResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.auth.cert.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model InvalidateAuthCertRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 证书id
  certId: string(name='cert_id'),
}

model InvalidateAuthCertResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 吊销已经颁发的证书
 * Summary: 吊销证书
 */
async function invalidateAuthCert(request: InvalidateAuthCertRequest): InvalidateAuthCertResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return invalidateAuthCertEx(request, headers, runtime);
}

/**
 * Description: 吊销已经颁发的证书
 * Summary: 吊销证书
 */
async function invalidateAuthCertEx(request: InvalidateAuthCertRequest, headers: map[string]string, runtime: Util.RuntimeOptions): InvalidateAuthCertResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.auth.cert.invalidate', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryAuthCertProgressRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 证书实例id
  instanceId: string(name='instance_id'),
}

model QueryAuthCertProgressResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 批量颁发的任务进度
  certIssueProgress?: CertIssueProgressDTO(name='cert_issue_progress'),
}

/**
 * Description: 查询批量颁发证书的进度详情
 * Summary: 查询批量颁发证书的进度
 */
async function queryAuthCertProgress(request: QueryAuthCertProgressRequest): QueryAuthCertProgressResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryAuthCertProgressEx(request, headers, runtime);
}

/**
 * Description: 查询批量颁发证书的进度详情
 * Summary: 查询批量颁发证书的进度
 */
async function queryAuthCertProgressEx(request: QueryAuthCertProgressRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAuthCertProgressResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.auth.cert.progress.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UploadAuthCertInstanceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 自动生成的唯一id，不需要传入
  fileObject?: readable(description='待上传文件', ignore='true'),
  fileObjectName?: string(description='待上传文件名', ignore='true'),
  fileId?: string(name='file_id'),
}

model UploadAuthCertInstanceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 上传成功后的文件名，作为批量颁发证书接口的入参
  path?: string(name='path'),
}

/**
 * Description: 上传需要批量颁发的证书领取人明细csv文件到oss服务器，并返回文件的路径
 * Summary: 上传领取人明细csv文件
 */
async function uploadAuthCertInstance(request: UploadAuthCertInstanceRequest): UploadAuthCertInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return uploadAuthCertInstanceEx(request, headers, runtime);
}

/**
 * Description: 上传需要批量颁发的证书领取人明细csv文件到oss服务器，并返回文件的路径
 * Summary: 上传领取人明细csv文件
 */
async function uploadAuthCertInstanceEx(request: UploadAuthCertInstanceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UploadAuthCertInstanceResponse {
  if (!Util.isUnset(request.fileObject)) {
    var uploadReq = new CreateAntcloudGatewayxFileUploadRequest{
      authToken = request.authToken,
      apiCode = 'baas.auth.cert.instance.upload',
      fileName = request.fileObjectName,
    };
    var uploadResp = createAntcloudGatewayxFileUploadEx(uploadReq, headers, runtime);
    if (!AntchainUtil.isSuccess(uploadResp.resultCode, "ok")) {
      var uploadAuthCertInstanceResponse = new UploadAuthCertInstanceResponse{
        reqMsgId = uploadResp.reqMsgId,
        resultCode = uploadResp.resultCode,
        resultMsg = uploadResp.resultMsg,
      };
      return uploadAuthCertInstanceResponse;
    }
    var uploadHeaders = AntchainUtil.parseUploadHeaders(uploadResp.uploadHeaders);
    AntchainUtil.putObject(request.fileObject, uploadHeaders, uploadResp.uploadUrl);
    request.fileId = uploadResp.fileId;
  }
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.auth.cert.instance.upload', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SaveAuthCertInstanceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 证书内容，json格式，可以根据证书模板增加自定义字段
  content: string(name='content'),
  // 需要编辑的证书实例id，如果是新增场景则传null
  instanceId?: string(name='instance_id'),
  // 创建证书实例后的状态，新增和修改场景默认为3 
  // 3: 编辑中 
  // 2: 待审核
  // 
  // 只有3: 编辑中 状态可以对证书实例进行修改
  status?: long(name='status'),
}

model SaveAuthCertInstanceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 创建或修改成功的证书实例id
  instanceId?: string(name='instance_id'),
}

/**
 * Description:  编辑或新增证书实例
 * Summary:  编辑或新增证书实例
 */
async function saveAuthCertInstance(request: SaveAuthCertInstanceRequest): SaveAuthCertInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return saveAuthCertInstanceEx(request, headers, runtime);
}

/**
 * Description:  编辑或新增证书实例
 * Summary:  编辑或新增证书实例
 */
async function saveAuthCertInstanceEx(request: SaveAuthCertInstanceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SaveAuthCertInstanceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.auth.cert.instance.save', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ApplyAuthCertInstanceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 证书实例id
  instanceId: string(name='instance_id'),
}

model ApplyAuthCertInstanceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 状态为编辑中的证书实例，调用此接口提交审核
 * Summary: 证书实例提交审核
 */
async function applyAuthCertInstance(request: ApplyAuthCertInstanceRequest): ApplyAuthCertInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return applyAuthCertInstanceEx(request, headers, runtime);
}

/**
 * Description: 状态为编辑中的证书实例，调用此接口提交审核
 * Summary: 证书实例提交审核
 */
async function applyAuthCertInstanceEx(request: ApplyAuthCertInstanceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ApplyAuthCertInstanceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.auth.cert.instance.apply', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetAuthCertInstancedataurlRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
}

model GetAuthCertInstancedataurlResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // oss服务地址
  host?: string(name='host'),
  // 申请的证书领取人csv的名称，使用该key作为批量颁发证书的path参数
  dir?: string(name='dir'),
  // ak
  accessId?: string(name='access_id'),
  // Policy规定了请求表单域的合法性
  policy?: string(name='policy'),
  // 签名
  signature?: string(name='signature'),
  // 过期时间戳
  expire?: string(name='expire'),
  // 加密回调信息
  callback?: string(name='callback'),
}

/**
 * Description: 向证书平台申请一个oss临时url，用来上传证书领取人csv文件，有效期30分钟
 * Summary: 获取证书领取人csv上传url
 */
async function getAuthCertInstancedataurl(request: GetAuthCertInstancedataurlRequest): GetAuthCertInstancedataurlResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getAuthCertInstancedataurlEx(request, headers, runtime);
}

/**
 * Description: 向证书平台申请一个oss临时url，用来上传证书领取人csv文件，有效期30分钟
 * Summary: 获取证书领取人csv上传url
 */
async function getAuthCertInstancedataurlEx(request: GetAuthCertInstancedataurlRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetAuthCertInstancedataurlResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.auth.cert.instancedataurl.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateAuthCertClaimRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 长度不超过64字符的业务唯一ID，用于对一个业务流的追踪，查询等。
  bizId: string(name='biz_id'),
  // 业务类型，通常需要与授权宝服务沟通确定，业务类型可能影响此接口内部实现逻辑，长度不超过32字符。
  // 
  bizType: string(name='biz_type'),
  // 一个json的string。内容包含具体需要的声明，不同业务场景不同。
  // 
  claimContent: string(name='claim_content'),
  // 如果在相同的biz_type下，还需要针对声明claim进行细化划分，可以使用此字段。
  // 
  claimType?: string(name='claim_type'),
  // 申请声明颁发后的有效期，可选参数，如果不指定则默认申请永久有效。
  // 
  expire?: long(name='expire'),
}

model CreateAuthCertClaimResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 可验证声明的唯一标识id，status 为 “1” 时候非空
  vcId?: string(name='vc_id'),
}

/**
 * Description: 证书平台创建自定义存证
 * Summary: 证书平台创建存证
 */
async function createAuthCertClaim(request: CreateAuthCertClaimRequest): CreateAuthCertClaimResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createAuthCertClaimEx(request, headers, runtime);
}

/**
 * Description: 证书平台创建自定义存证
 * Summary: 证书平台创建存证
 */
async function createAuthCertClaimEx(request: CreateAuthCertClaimRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateAuthCertClaimResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.auth.cert.claim.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryAuthCertClaimRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 可验证声明id
  vcId: string(name='vc_id'),
  // 业务类型
  bizType: string(name='biz_type'),
}

model QueryAuthCertClaimResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 可验证声明id
  vcId?: string(name='vc_id'),
  // 交易hash（仅上链成功后会有值）
  txHash?: string(name='tx_hash'),
  // vc详情
  vcContent?: string(name='vc_content'),
  // vc状态 0:未授权 1:已授权 2: 拒绝授权 3: 授权已撤销
  status?: long(name='status'),
  // 业务类型
  bizType?: string(name='biz_type'),
  // 过期时间
  expire?: long(name='expire'),
  // 授权是否可撤销
  revocable?: boolean(name='revocable'),
  // 存证请求创建时间
  gmtCreate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_create'),
  // 存证上链时间（仅上链成功后会有值）
  gmtTransmit?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_transmit'),
}

/**
 * Description: 证书平台查询用户自定义存证
 * Summary: 证书平台查询用户自定义存证
 */
async function queryAuthCertClaim(request: QueryAuthCertClaimRequest): QueryAuthCertClaimResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryAuthCertClaimEx(request, headers, runtime);
}

/**
 * Description: 证书平台查询用户自定义存证
 * Summary: 证书平台查询用户自定义存证
 */
async function queryAuthCertClaimEx(request: QueryAuthCertClaimRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAuthCertClaimResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.auth.cert.claim.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateAuthCertClaimurlRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 存证唯一id
  vcId: string(name='vc_id'),
}

model CreateAuthCertClaimurlResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 证书平台支付宝小程序查验存证的url
  miniUrl?: string(name='mini_url'),
}

/**
 * Description: 生成查验证书存证的url
 * Summary: 生成查验证书存证的url
 */
async function createAuthCertClaimurl(request: CreateAuthCertClaimurlRequest): CreateAuthCertClaimurlResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createAuthCertClaimurlEx(request, headers, runtime);
}

/**
 * Description: 生成查验证书存证的url
 * Summary: 生成查验证书存证的url
 */
async function createAuthCertClaimurlEx(request: CreateAuthCertClaimurlRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateAuthCertClaimurlResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.auth.cert.claimurl.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetAuthClaimRecentRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 业务类型
  bizType: string(name='biz_type'),
  // C类用户支付宝2088id
  uid: string(name='uid'),
  // 被授权机构did
  subject?: string(name='subject'),
}

model GetAuthClaimRecentResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 声明的 id，status 为 “1” 时候非空
  vcId?: string(name='vc_id'),
  // 可验证声明完成内容， status 为 “1” 时候非空
  vcContent?: string(name='vc_content'),
  // 业务类型
  bizType?: string(name='biz_type'),
  // vc状态 0:未授权 1:已授权 2: 拒绝授权 3: 授权已撤销
  status?: long(name='status'),
  // 授权是否可撤销
  revocable?: boolean(name='revocable'),
  // 过期时间
  expire?: long(name='expire'),
}

/**
 * Description: 获取用户已授权的最近存证信息，在理财风测卡场景获取最近的题目答案
 * Summary: 获取用户已授权的最近存证信息
 */
async function getAuthClaimRecent(request: GetAuthClaimRecentRequest): GetAuthClaimRecentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getAuthClaimRecentEx(request, headers, runtime);
}

/**
 * Description: 获取用户已授权的最近存证信息，在理财风测卡场景获取最近的题目答案
 * Summary: 获取用户已授权的最近存证信息
 */
async function getAuthClaimRecentEx(request: GetAuthClaimRecentRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetAuthClaimRecentResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.auth.claim.recent.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExecAuthContractRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 地区
  regionId?: string(name='region_id'),
  // ant_chain_id
  antChainId: string(name='ant_chain_id'),
  // transaction
  transaction: string(name='transaction'),
}

model ExecAuthContractResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // result
  result?: string(name='result'),
}

/**
 * Description: 新的：baas.auth.contract.claim.exec
 * Summary: 合约调用_废弃
 */
async function execAuthContract(request: ExecAuthContractRequest): ExecAuthContractResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return execAuthContractEx(request, headers, runtime);
}

/**
 * Description: 新的：baas.auth.contract.claim.exec
 * Summary: 合约调用_废弃
 */
async function execAuthContractEx(request: ExecAuthContractRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExecAuthContractResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.auth.contract.exec', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryAuthSceneAuthstatusRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 支付宝会员id
  userId: string(name='user_id'),
  // 当前场景id
  sceneId: string(name='scene_id'),
}

model QueryAuthSceneAuthstatusResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // Authorized 已授权
  // Unauthorized 未授权
  authStatus?: string(name='auth_status'),
}

/**
 * Description: 查看用户对于某一场景的授权状态
 * Summary: 查看用户授权状态
 */
async function queryAuthSceneAuthstatus(request: QueryAuthSceneAuthstatusRequest): QueryAuthSceneAuthstatusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryAuthSceneAuthstatusEx(request, headers, runtime);
}

/**
 * Description: 查看用户对于某一场景的授权状态
 * Summary: 查看用户授权状态
 */
async function queryAuthSceneAuthstatusEx(request: QueryAuthSceneAuthstatusRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAuthSceneAuthstatusResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.auth.scene.authstatus.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExecAuthContractClaimRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 长度不超过64字符的业务流水唯一ID，用于对一个业务流的追踪，与请求中的biz_id一致方便业务方使用。
  bizId: string(name='biz_id'),
  // 业务类型
  bizType: string(name='biz_type'),
  // 合约名称
  contractName: string(name='contract_name'),
  // 合约方法名称
  functionName: string(name='function_name'),
  // 合约入参类型，和 arguments对应， 取值类型： DOUBLE，STRING，INTEGER，LONG，FLOAT； 默认为String
  arguments?: [ string ](name='arguments'),
  // 保留参数，选填，目前暂未用到，合约入参类型，和 arguments对应 取值类型： DOUBLE，STRING，INTEGER，LONG，FLOAT；
  types?: [ string ](name='types'),
}

model ExecAuthContractClaimResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 场景码
  bizId?: string(name='biz_id'),
  // 业务场景码类型
  bizType?: string(name='biz_type'),
  // 合约执行结果
  resultData?: string(name='result_data'),
}

/**
 * Description: 使用调用方did注册的vc channel链上账户调用指定合约
 * Summary: 合约调用
 */
async function execAuthContractClaim(request: ExecAuthContractClaimRequest): ExecAuthContractClaimResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return execAuthContractClaimEx(request, headers, runtime);
}

/**
 * Description: 使用调用方did注册的vc channel链上账户调用指定合约
 * Summary: 合约调用
 */
async function execAuthContractClaimEx(request: ExecAuthContractClaimRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExecAuthContractClaimResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.auth.contract.claim.exec', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateAuthCertDetailpageurlRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 证书实例ID
  instanceId: string(name='instance_id'),
  // 用户领取条件信息, JSON结构，信息同颁发证书时使用的领取条件
  userInfo: string(name='user_info'),
}

model CreateAuthCertDetailpageurlResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // H5页面url
  resultData?: string(name='result_data'),
}

/**
 * Description: B类用户获取证书查验页面二维码的url
 * Summary: 获取证书查验页面二维码的url
 */
async function createAuthCertDetailpageurl(request: CreateAuthCertDetailpageurlRequest): CreateAuthCertDetailpageurlResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createAuthCertDetailpageurlEx(request, headers, runtime);
}

/**
 * Description: B类用户获取证书查验页面二维码的url
 * Summary: 获取证书查验页面二维码的url
 */
async function createAuthCertDetailpageurlEx(request: CreateAuthCertDetailpageurlRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateAuthCertDetailpageurlResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.auth.cert.detailpageurl.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SignAuthAgreementUserRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 用户id
  userId: string(name='user_id'),
  // 协议id
  agreementId: string(name='agreement_id'),
  // 签约时间
  signDate: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='sign_date'),
}

model SignAuthAgreementUserResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 用户合约签约接口
 * Summary: 用户合约签约
 */
async function signAuthAgreementUser(request: SignAuthAgreementUserRequest): SignAuthAgreementUserResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return signAuthAgreementUserEx(request, headers, runtime);
}

/**
 * Description: 用户合约签约接口
 * Summary: 用户合约签约
 */
async function signAuthAgreementUserEx(request: SignAuthAgreementUserRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SignAuthAgreementUserResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.auth.agreement.user.sign', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BindAuthPoapRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 长度不超过64字符的业务流水唯一id，可作幂等处理
  bizId: string(name='biz_id'),
  // 徽章元数据ID
  poapMetaId: string(name='poap_meta_id'),
  // 支付宝UID，2088开头
  userId?: string(name='user_id'),
  // 用户真实姓名
  userName?: string(name='user_name'),
  // 用户手机号
  userCertNo?: string(name='user_cert_no'),
  // 用户手机号
  userMobile?: string(name='user_mobile'),
  // 定制id会有白名单进行权限限制。id格式要求：长度6-20，允许字母、数字、部分特殊字符(_#:|)
  poapId?: string(name='poap_id'),
  // 徽章关联权益时，用户领取权益的动作类型
  profitAction?: string(name='profit_action'),
  // 徽章关联权益时，用户领取权益的地址
  profitUrl?: string(name='profit_url'),
  // 徽章关联权益时附带信息，buttonName为自定义领取按钮名称，needAuth为是否需要授权，authId为授权请求id，authBizId为授权请求场景id
  payload?: string(name='payload'),
}

model BindAuthPoapResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 徽章ID
  poapId?: string(name='poap_id'),
}

/**
 * Description: 给指定用户发放POAP徽章
 * Summary: 给指定用户发放POAP徽章
 */
async function bindAuthPoap(request: BindAuthPoapRequest): BindAuthPoapResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return bindAuthPoapEx(request, headers, runtime);
}

/**
 * Description: 给指定用户发放POAP徽章
 * Summary: 给指定用户发放POAP徽章
 */
async function bindAuthPoapEx(request: BindAuthPoapRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BindAuthPoapResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.auth.poap.bind', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryAuthPoapRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // POAP徽章ID
  poapId: string(name='poap_id'),
}

model QueryAuthPoapResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 徽章信息信息
  poapInfo?: PoapInfo(name='poap_info'),
}

/**
 * Description: 根据ID查询POAP徽章详情
 * Summary: 查询POAP徽章详情
 */
async function queryAuthPoap(request: QueryAuthPoapRequest): QueryAuthPoapResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryAuthPoapEx(request, headers, runtime);
}

/**
 * Description: 根据ID查询POAP徽章详情
 * Summary: 查询POAP徽章详情
 */
async function queryAuthPoapEx(request: QueryAuthPoapRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAuthPoapResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.auth.poap.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartAuthDataRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 调用方生成的请求id，需保证唯一
  authId: string(name='auth_id'),
  // 调用方请求的数据类型
  dataType: string(name='data_type'),
  // 授权结果通知调用方的方式
  callbackType: string(name='callback_type'),
  // 授权结果通知调用方的地址
  callbackUrl: string(name='callback_url'),
}

model StartAuthDataResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 授权宝小程序的地址，调用方需要访问该地址从而进行用户授权
  myauthUrl?: string(name='myauth_url'),
}

/**
 * Description: 授权宝数据授权流程，需要请求方先进行请求记录。
 * Summary: 开启数据授权流程，首先记录授权请求
 */
async function startAuthData(request: StartAuthDataRequest): StartAuthDataResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startAuthDataEx(request, headers, runtime);
}

/**
 * Description: 授权宝数据授权流程，需要请求方先进行请求记录。
 * Summary: 开启数据授权流程，首先记录授权请求
 */
async function startAuthDataEx(request: StartAuthDataRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartAuthDataResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.auth.data.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetAuthDataRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 调用方在发起授权请求时创建的请求id
  authId: string(name='auth_id'),
  // 授权数据类型
  dataType: string(name='data_type'),
}

model GetAuthDataResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 使用调用方的公钥加密后的授权数据
  encryptedData?: string(name='encrypted_data'),
}

/**
 * Description: 授权宝数据授权流程，调用方经过授权之后请求数据
 * Summary: 请求授权的数据，加密传输
 */
async function getAuthData(request: GetAuthDataRequest): GetAuthDataResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getAuthDataEx(request, headers, runtime);
}

/**
 * Description: 授权宝数据授权流程，调用方经过授权之后请求数据
 * Summary: 请求授权的数据，加密传输
 */
async function getAuthDataEx(request: GetAuthDataRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetAuthDataResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.auth.data.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryAuthIdentityauthRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 授权宝生成的bizId 与 核身token 用 ; 拼接成的字符串
  securityId: string(name='security_id'),
  // 核身的userid
  userId: string(name='user_id'),
  // 核身对应的操作类型，目前只有0，代表创建did
  operationType: long(name='operation_type'),
  // 其它类型操作时的参数，json形式字符串
  params?: string(name='params'),
}

model QueryAuthIdentityauthResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 核身结果
  verifyResult?: boolean(name='verify_result'),
}

/**
 * Description: 查询核身结果
 * Summary: 查询核身结果
 */
async function queryAuthIdentityauth(request: QueryAuthIdentityauthRequest): QueryAuthIdentityauthResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryAuthIdentityauthEx(request, headers, runtime);
}

/**
 * Description: 查询核身结果
 * Summary: 查询核身结果
 */
async function queryAuthIdentityauthEx(request: QueryAuthIdentityauthRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAuthIdentityauthResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.auth.identityauth.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryAuthCertDetailurlRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 证书的bizId
  bizId: string(name='biz_id'),
}

model QueryAuthCertDetailurlResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 证书的详情h5链接
  detailUrl?: string(name='detail_url'),
}

/**
 * Description: 查询证书的详情h5链接
 * Summary: 查询证书的详情h5链接
 */
async function queryAuthCertDetailurl(request: QueryAuthCertDetailurlRequest): QueryAuthCertDetailurlResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryAuthCertDetailurlEx(request, headers, runtime);
}

/**
 * Description: 查询证书的详情h5链接
 * Summary: 查询证书的详情h5链接
 */
async function queryAuthCertDetailurlEx(request: QueryAuthCertDetailurlRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAuthCertDetailurlResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.auth.cert.detailurl.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model NotifyAuthTaskStatusRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 任务id
  taskId: string(name='task_id'),
  // 支uid
  userId: string(name='user_id'),
  // NO_START, NO_SUBMIT, NOT_COMPLETE, COMPLETE
  status: string(name='status'),
  // 状态发生时间
  happenTime: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='happen_time'),
  // 业务流水号，问卷方传给主站后透传给授权宝
  outBizNo?: string(name='out_biz_no'),
}

model NotifyAuthTaskStatusResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 主站应用同步授权宝权益任务的完成情况
 * Summary: 主站应用同步授权宝权益任务的完成情况
 */
async function notifyAuthTaskStatus(request: NotifyAuthTaskStatusRequest): NotifyAuthTaskStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return notifyAuthTaskStatusEx(request, headers, runtime);
}

/**
 * Description: 主站应用同步授权宝权益任务的完成情况
 * Summary: 主站应用同步授权宝权益任务的完成情况
 */
async function notifyAuthTaskStatusEx(request: NotifyAuthTaskStatusRequest, headers: map[string]string, runtime: Util.RuntimeOptions): NotifyAuthTaskStatusResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.auth.task.status.notify', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model PauseAuthTaskRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 任务id
  taskId: string(name='task_id'),
  // 操作者
  operator: string(name='operator'),
}

model PauseAuthTaskResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 任务暂停成功/失败
  data?: boolean(name='data'),
}

/**
 * Description: 任务暂停
 * Summary: 任务暂停
 */
async function pauseAuthTask(request: PauseAuthTaskRequest): PauseAuthTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return pauseAuthTaskEx(request, headers, runtime);
}

/**
 * Description: 任务暂停
 * Summary: 任务暂停
 */
async function pauseAuthTaskEx(request: PauseAuthTaskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PauseAuthTaskResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.auth.task.pause', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model FinishAuthTaskRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 任务id
  taskId: string(name='task_id'),
  // 操作者
  operator: string(name='operator'),
}

model FinishAuthTaskResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 任务完成操作成功/失败
  data?: boolean(name='data'),
}

/**
 * Description: 任务完成
 * Summary: 任务完成
 */
async function finishAuthTask(request: FinishAuthTaskRequest): FinishAuthTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return finishAuthTaskEx(request, headers, runtime);
}

/**
 * Description: 任务完成
 * Summary: 任务完成
 */
async function finishAuthTaskEx(request: FinishAuthTaskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): FinishAuthTaskResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.auth.task.finish', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ReopenAuthTaskRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 任务id
  taskId: string(name='task_id'),
}

model ReopenAuthTaskResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 任务重启成功/失败
  data?: boolean(name='data'),
}

/**
 * Description: 任务重启
 * Summary: 任务重启
 */
async function reopenAuthTask(request: ReopenAuthTaskRequest): ReopenAuthTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return reopenAuthTaskEx(request, headers, runtime);
}

/**
 * Description: 任务重启
 * Summary: 任务重启
 */
async function reopenAuthTaskEx(request: ReopenAuthTaskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ReopenAuthTaskResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.auth.task.reopen', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model OperateAuthTaskRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 任务id
  taskId: string(name='task_id'),
  // 样本数量
  sampleNum: long(name='sample_num'),
  // 操作人
  operator: string(name='operator'),
}

model OperateAuthTaskResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 样本量修改
 * Summary: 样本量修改
 */
async function operateAuthTask(request: OperateAuthTaskRequest): OperateAuthTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return operateAuthTaskEx(request, headers, runtime);
}

/**
 * Description: 样本量修改
 * Summary: 样本量修改
 */
async function operateAuthTaskEx(request: OperateAuthTaskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): OperateAuthTaskResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.auth.task.operate', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryAuthTaskRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 标签列表
  tagCodeList: [ string ](name='tag_code_list'),
}

model QueryAuthTaskResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 人群标签返回列表
  data?: [ CrowdTagEnumResp ](name='data'),
}

/**
 * Description: 查询人群标签取值范围
 * Summary: 查询人群标签取值范围
 */
async function queryAuthTask(request: QueryAuthTaskRequest): QueryAuthTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryAuthTaskEx(request, headers, runtime);
}

/**
 * Description: 查询人群标签取值范围
 * Summary: 查询人群标签取值范围
 */
async function queryAuthTaskEx(request: QueryAuthTaskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAuthTaskResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.auth.task.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CountAuthTaskRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 任务id
  taskId: string(name='task_id'),
}

model CountAuthTaskResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 任务对应的人群预估数量
  data?: long(name='data'),
}

/**
 * Description: 人群量级查询
 * Summary: 人群量级查询
 */
async function countAuthTask(request: CountAuthTaskRequest): CountAuthTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return countAuthTaskEx(request, headers, runtime);
}

/**
 * Description: 人群量级查询
 * Summary: 人群量级查询
 */
async function countAuthTaskEx(request: CountAuthTaskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CountAuthTaskResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.auth.task.count', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model MatchAuthTaskRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 用户id
  userId: string(name='user_id'),
  // 任务ID，支持批量
  taskIds: [ string ](name='task_ids'),
}

model MatchAuthTaskResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 人群匹配结果
  data?: [ TaskCrowdMatchResp ](name='data'),
}

/**
 * Description: 人群匹配查询
 * Summary: 人群匹配查询
 */
async function matchAuthTask(request: MatchAuthTaskRequest): MatchAuthTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return matchAuthTaskEx(request, headers, runtime);
}

/**
 * Description: 人群匹配查询
 * Summary: 人群匹配查询
 */
async function matchAuthTaskEx(request: MatchAuthTaskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): MatchAuthTaskResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.auth.task.match', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SubmitAuthTaskRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 任务标题(同一个租户不能重复)
  taskName: string(maxLength=20, name='task_name'),
  // appId
  appId: string(maxLength=32, name='app_id'),
  // 问卷id(同一个租户不能重复，只能包含字母、数组或者下划线)
  surveyId: string(maxLength=32, name='survey_id'),
  // notes
  notes?: string(maxLength=32, name='notes'),
  // 任务创建者
  operator: string(maxLength=100, name='operator'),
  // banner标题
  bannerTitle: string(maxLength=30, name='banner_title'),
  // banner图片地址（最多支持3张）
  bannerImageUrls?: [ string ](name='banner_image_urls'),
  // 题量
  questionNum: long(maximum=1000, name='question_num'),
  // 任务连接地址
  taskLinkUrl: string(maxLength=1000, name='task_link_url'),
  // 人群划分描述
  personDivideContent?: string(maxLength=1000, name='person_divide_content'),
  // 城市列表
  cityDivideUrls?: [ string ](name='city_divide_urls'),
  // 样本数量
  sampleNum: long(maximum=100000, name='sample_num'),
  // 产品下单code类型（1-资源包 2-后付费）
  productCodeType: string(maxLength=4, name='product_code_type'),
  // 奖励渠道（0-手动发支付宝余额 1-海豚红包 2-问卷自带）
  prizeChannel: long(name='prize_channel'),
  // 支付宝账号
  alipayAccountId?: string(maxLength=100, name='alipay_account_id'),
  // 奖励类型（0-定额红包）
  prizeType: long(name='prize_type'),
  // 全额红包金额（价格在0.01~100），奖励渠道为0和1时
  fullRedPacketAmount: string(name='full_red_packet_amount'),
  // 甄别红包金额
  examineRedPacketAmount: string(name='examine_red_packet_amount'),
  // 全额红包描述，奖励渠道为2时，此处必填
  fullRedPacketTextInfo?: string(name='full_red_packet_text_info'),
  // 证书内容
  certContent?: string(name='cert_content'),
  // 人群配置
  crowdConfig: string(name='crowd_config'),
  // 是否草稿，1表示草稿
  draft: string(name='draft'),
}

model SubmitAuthTaskResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 任务id
  data?: string(name='data'),
}

/**
 * Description: 问卷任务提交
 * Summary: 问卷任务提交
 */
async function submitAuthTask(request: SubmitAuthTaskRequest): SubmitAuthTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return submitAuthTaskEx(request, headers, runtime);
}

/**
 * Description: 问卷任务提交
 * Summary: 问卷任务提交
 */
async function submitAuthTaskEx(request: SubmitAuthTaskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SubmitAuthTaskResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.auth.task.submit', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DetailAuthTaskRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 任务ID
  taskId: string(name='task_id'),
}

model DetailAuthTaskResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 历史任务信息
  oldTaskInfo?: OldTaskInfo(name='old_task_info'),
  // 最新的任务信息
  updateTaskInfo?: UpdatedTaskInfo(name='update_task_info'),
  // 是否有未完成的圈人任务
  haveNotFinishedCrowdTask?: boolean(name='have_not_finished_crowd_task'),
}

/**
 * Description: 问卷任务详情
 * Summary: 问卷任务详情
 */
async function detailAuthTask(request: DetailAuthTaskRequest): DetailAuthTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return detailAuthTaskEx(request, headers, runtime);
}

/**
 * Description: 问卷任务详情
 * Summary: 问卷任务详情
 */
async function detailAuthTaskEx(request: DetailAuthTaskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DetailAuthTaskResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.auth.task.detail', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateAuthTaskRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 任务ID
  taskId: string(maxLength=20, name='task_id'),
  // 任务标题(同一个租户不能重复)
  taskName: string(maxLength=20, name='task_name'),
  // appId
  appId: string(maxLength=32, name='app_id'),
  // 问卷id(同一个租户不能重复，只能包含字母、数组或者下划线)
  surveyId: string(maxLength=32, name='survey_id'),
  // notes
  notes?: string(maxLength=32, name='notes'),
  // 任务调整操作者
  operator: string(maxLength=100, name='operator'),
  // banner标题
  bannerTitle: string(maxLength=30, name='banner_title'),
  // banner图片地址（最多支持3张）
  bannerImageUrls?: [ string ](name='banner_image_urls'),
  // 题量
  questionNum: long(name='question_num'),
  // 任务连接地址
  taskLinkUrl: string(maxLength=1000, name='task_link_url'),
  // 人群划分描述
  personDivideContent?: string(maxLength=1000, name='person_divide_content'),
  // 城市列表
  cityDivideUrls?: [ string ](name='city_divide_urls'),
  // 样本数量
  sampleNum: long(name='sample_num'),
  // 产品下单code类型（1-资源包 2-后付费）
  productCodeType: string(maxLength=4, name='product_code_type'),
  // 奖励渠道（0-手动发支付宝余额 1-海豚红包 2-问卷自带）
  prizeChannel: long(name='prize_channel'),
  // 支付宝账号
  alipayAccountId?: string(name='alipay_account_id'),
  // 奖励类型（0-定额红包）
  prizeType: long(name='prize_type'),
  // 全额红包金额（价格在0.01~100），奖励渠道为0和1时
  fullRedPacketAmount: string(name='full_red_packet_amount'),
  // 甄别红包金额
  examineRedPacketAmount: string(name='examine_red_packet_amount'),
  // 全额红包描述，奖励渠道为2时，此处必填
  fullRedPacketTextInfo?: string(name='full_red_packet_text_info'),
  // 证书内容
  certContent: string(name='cert_content'),
  // 人群配置
  crowdConfig: string(name='crowd_config'),
  // 是否草稿，1表示草稿
  draft: string(name='draft'),
}

model UpdateAuthTaskResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 任务修改
 * Summary: 任务修改
 */
async function updateAuthTask(request: UpdateAuthTaskRequest): UpdateAuthTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateAuthTaskEx(request, headers, runtime);
}

/**
 * Description: 任务修改
 * Summary: 任务修改
 */
async function updateAuthTaskEx(request: UpdateAuthTaskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateAuthTaskResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.auth.task.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CountAuthTaskCrowdRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 任务ID
  taskId: string(name='task_id'),
}

model CountAuthTaskCrowdResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 人群预估数量
  crowdCount?: long(name='crowd_count'),
  // 人群导出时间
  bizDate?: string(name='biz_date'),
  // 生效的圈选人群的设置
  crowdConfigInfo?: string(name='crowd_config_info'),
  // EXPORTING 导出中
  // SUCCESS 导出成功
  // FAIL 导出失败
  exportStatus?: string(name='export_status'),
}

/**
 * Description: 人群量级查询
 * Summary: 人群量级查询
 */
async function countAuthTaskCrowd(request: CountAuthTaskCrowdRequest): CountAuthTaskCrowdResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return countAuthTaskCrowdEx(request, headers, runtime);
}

/**
 * Description: 人群量级查询
 * Summary: 人群量级查询
 */
async function countAuthTaskCrowdEx(request: CountAuthTaskCrowdRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CountAuthTaskCrowdResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.auth.task.crowd.count', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model MatchAuthTaskCrowdRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 用户ID
  userId: string(name='user_id'),
  // 任务ID
  taskIds: [ string ](name='task_ids'),
}

model MatchAuthTaskCrowdResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 人群匹配结果
  data?: [ TaskCrowdMatchResp ](name='data'),
}

/**
 * Description: 人群匹配查询
 * Summary: 人群匹配查询
 */
async function matchAuthTaskCrowd(request: MatchAuthTaskCrowdRequest): MatchAuthTaskCrowdResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return matchAuthTaskCrowdEx(request, headers, runtime);
}

/**
 * Description: 人群匹配查询
 * Summary: 人群匹配查询
 */
async function matchAuthTaskCrowdEx(request: MatchAuthTaskCrowdRequest, headers: map[string]string, runtime: Util.RuntimeOptions): MatchAuthTaskCrowdResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.auth.task.crowd.match', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryAuthTaskLabelRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 人群标签
  tagCodeList: [ string ](name='tag_code_list'),
}

model QueryAuthTaskLabelResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 人群标签返回结果
  data?: [ CrowdTagEnumResp ](name='data'),
}

/**
 * Description: 人群标签取值范围查询
 * Summary: 人群标签取值范围查询
 */
async function queryAuthTaskLabel(request: QueryAuthTaskLabelRequest): QueryAuthTaskLabelResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryAuthTaskLabelEx(request, headers, runtime);
}

/**
 * Description: 人群标签取值范围查询
 * Summary: 人群标签取值范围查询
 */
async function queryAuthTaskLabelEx(request: QueryAuthTaskLabelRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAuthTaskLabelResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.auth.task.label.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListAuthTaskRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 任务名称/任务id/自有id 模糊搜索
  taskName?: string(name='task_name'),
  // 页码，默认是0开始
  pageNo: long(name='page_no'),
  // 每页大小，默认是6
  pageSize: long(name='page_size'),
  // 操作人列表
  operators?: [ string ](name='operators'),
}

model ListAuthTaskResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 任务分页列表返回体
  data?: PageTaskListDTO(name='data'),
}

/**
 * Description: 任务列表查询
 * Summary: 任务列表查询
 */
async function listAuthTask(request: ListAuthTaskRequest): ListAuthTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listAuthTaskEx(request, headers, runtime);
}

/**
 * Description: 任务列表查询
 * Summary: 任务列表查询
 */
async function listAuthTaskEx(request: ListAuthTaskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListAuthTaskResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.auth.task.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UnbindAuthEquityRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 权益开通时ISV返回的业务订单号
  outBizNo: string(name='out_biz_no'),
}

model UnbindAuthEquityResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 权益退订openAPI接口
 * Summary: 权益退订
 */
async function unbindAuthEquity(request: UnbindAuthEquityRequest): UnbindAuthEquityResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return unbindAuthEquityEx(request, headers, runtime);
}

/**
 * Description: 权益退订openAPI接口
 * Summary: 权益退订
 */
async function unbindAuthEquityEx(request: UnbindAuthEquityRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UnbindAuthEquityResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.auth.equity.unbind', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model RepayAuthEquityRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 权益开通时ISV返回的业务订单号
  outBizNo: string(name='out_biz_no'),
  // 需要退款的交易订单号(权益扣款成功后回调消息返回的交易号)
  tradeNo: string(name='trade_no'),
}

model RepayAuthEquityResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 权益退款
 * Summary: 权益退款接口
 */
async function repayAuthEquity(request: RepayAuthEquityRequest): RepayAuthEquityResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return repayAuthEquityEx(request, headers, runtime);
}

/**
 * Description: 权益退款
 * Summary: 权益退款接口
 */
async function repayAuthEquityEx(request: RepayAuthEquityRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RepayAuthEquityResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.auth.equity.repay', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model VerifyAuthTokenValidityRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 用户ID
  userId: string(name='user_id'),
  // 授权凭证
  authorizedToken: string(name='authorized_token'),
  // 数据产品类型
  dataType: string(name='data_type'),
  // 授权场景码
  sceneCode: string(name='scene_code'),
}

model VerifyAuthTokenValidityResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 验证结果（ture表示通过，false表示不通过）
  verifyResult?: boolean(name='verify_result'),
  // 错误信息
  errMsg?: string(name='err_msg'),
}

/**
 * Description: 授权token校验
 * Summary: 授权token校验
 */
async function verifyAuthTokenValidity(request: VerifyAuthTokenValidityRequest): VerifyAuthTokenValidityResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return verifyAuthTokenValidityEx(request, headers, runtime);
}

/**
 * Description: 授权token校验
 * Summary: 授权token校验
 */
async function verifyAuthTokenValidityEx(request: VerifyAuthTokenValidityRequest, headers: map[string]string, runtime: Util.RuntimeOptions): VerifyAuthTokenValidityResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.auth.token.validity.verify', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model VerifyAuthBusinessUserRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 用户id
  userId: string(name='user_id'),
  // 场景码
  sceneCode: string(name='scene_code'),
}

model VerifyAuthBusinessUserResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 用户当前记录状态
  recordType?: string(name='record_type'),
  // 加密后的用户授权记录id
  encryptBizId?: string(name='encrypt_biz_id'),
  // 授权协议信息列表
  agreementConfigInfoList?: [ AgreementConfigInfoDTO ](name='agreement_config_info_list'),
}

/**
 * Description: 核验当前用户是否权益新用户
 * Summary: 权益核验是否新用户
 */
async function verifyAuthBusinessUser(request: VerifyAuthBusinessUserRequest): VerifyAuthBusinessUserResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return verifyAuthBusinessUserEx(request, headers, runtime);
}

/**
 * Description: 核验当前用户是否权益新用户
 * Summary: 权益核验是否新用户
 */
async function verifyAuthBusinessUserEx(request: VerifyAuthBusinessUserRequest, headers: map[string]string, runtime: Util.RuntimeOptions): VerifyAuthBusinessUserResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.auth.business.user.verify', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SubmitAuthBusinessDataRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 用户id
  userId: string(name='user_id'),
  // 场景码
  sceneCode: string(name='scene_code'),
  // 推送的数据内容，json字符串形式
  pushDataContent: string(name='push_data_content'),
}

model SubmitAuthBusinessDataResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 推送是否成功
  pushSuccess?: boolean(name='push_success'),
}

/**
 * Description: 代运营场景下第三方应用调用该接口推送相关信息，例如车辆信息
 * Summary: 代运营-推送用户授权的相关信息
 */
async function submitAuthBusinessData(request: SubmitAuthBusinessDataRequest): SubmitAuthBusinessDataResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return submitAuthBusinessDataEx(request, headers, runtime);
}

/**
 * Description: 代运营场景下第三方应用调用该接口推送相关信息，例如车辆信息
 * Summary: 代运营-推送用户授权的相关信息
 */
async function submitAuthBusinessDataEx(request: SubmitAuthBusinessDataRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SubmitAuthBusinessDataResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.auth.business.data.submit', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UploadAuthBusinessCardRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 用户id
  userId: string(name='user_id'),
  // 运营场景码
  sceneCode: string(name='scene_code'),
  // 上传证件类型
  fileType: string(name='file_type'),
}

model UploadAuthBusinessCardResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // oss文件上传策略
  presignedUrlPolicy?: PresignedUrlPolicy(name='presigned_url_policy'),
}

/**
 * Description: 支持调用该接口上传行驶证照片，返回上传链接
 * Summary: 行驶证上传接口
 */
async function uploadAuthBusinessCard(request: UploadAuthBusinessCardRequest): UploadAuthBusinessCardResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return uploadAuthBusinessCardEx(request, headers, runtime);
}

/**
 * Description: 支持调用该接口上传行驶证照片，返回上传链接
 * Summary: 行驶证上传接口
 */
async function uploadAuthBusinessCardEx(request: UploadAuthBusinessCardRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UploadAuthBusinessCardResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.auth.business.card.upload', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryAuthVcTransactionRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 查询目标可验证声明的ID
  vcId: string(name='vc_id'),
  // 业务类型，通常需要与授权宝服务沟通确定，业务类型可能影响此接口内部实现逻辑，长度不超过32字符。
  bizType: string(name='biz_type'),
  // 如果此字段为空，则默认使用当前请求租户在授权宝配置的did来进行查询(此did需授权有权限)，此外情况都需要指定目标vc_id的owner_did
  // 
  ownerDid?: string(name='owner_did'),
}

model QueryAuthVcTransactionResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 链上交易信息
  txInfo?: TxInfo(name='tx_info'),
}

/**
 * Description: 通过指定可验证声明id，获取目标可验证声明链上交易信息，需要可验证声明的拥有者分享声明才可查询，如果没有权限则获取失败。
 * Summary: 获取目标可验证声明链上交易信息
 */
async function queryAuthVcTransaction(request: QueryAuthVcTransactionRequest): QueryAuthVcTransactionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryAuthVcTransactionEx(request, headers, runtime);
}

/**
 * Description: 通过指定可验证声明id，获取目标可验证声明链上交易信息，需要可验证声明的拥有者分享声明才可查询，如果没有权限则获取失败。
 * Summary: 获取目标可验证声明链上交易信息
 */
async function queryAuthVcTransactionEx(request: QueryAuthVcTransactionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAuthVcTransactionResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.auth.vc.transaction.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AuthAuthBusinessUserRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 加密后的授权记录bizId
  encryptBizId: string(name='encrypt_biz_id'),
  // 唯一场景码
  sceneCode: string(name='scene_code'),
}

model AuthAuthBusinessUserResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 确认授权后生成的授权凭证
  authToken?: string(name='auth_token'),
}

/**
 * Description: 代运营场景用户确认授权接口
 * Summary: 代运营用户确认授权接口
 */
async function authAuthBusinessUser(request: AuthAuthBusinessUserRequest): AuthAuthBusinessUserResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return authAuthBusinessUserEx(request, headers, runtime);
}

/**
 * Description: 代运营场景用户确认授权接口
 * Summary: 代运营用户确认授权接口
 */
async function authAuthBusinessUserEx(request: AuthAuthBusinessUserRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AuthAuthBusinessUserResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.auth.business.user.auth', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartDidCorporateAgentcreateRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 场景码，找dis工作人员进行分配
  bizCode?: string(name='biz_code'),
  // 扩展字段
  extensionInfo?: string(name='extension_info'),
  // 所有需要关联的外键，外键必须已did auth key controller的did作为前缀+“sidekey:”+外键
  indexs?: [ string ](name='indexs'),
  // 企业名称
  ownerName?: string(name='owner_name'),
  // 自定义企业唯一id，企业在自有模式下的唯一号bid的hash值，调用者需要保证其唯一性
  ownerUid: string(maxLength=128, name='owner_uid'),
  // 携带自己定义的服务类型
  services?: [ DidDocServicesInfo ](name='services'),
}

model StartDidCorporateAgentcreateResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 生成的did字符串
  did?: string(name='did'),
}

/**
 * Description: 通过代理模式为企业创建did
 * Summary: 通过代理模式为企业创建did
 */
async function startDidCorporateAgentcreate(request: StartDidCorporateAgentcreateRequest): StartDidCorporateAgentcreateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startDidCorporateAgentcreateEx(request, headers, runtime);
}

/**
 * Description: 通过代理模式为企业创建did
 * Summary: 通过代理模式为企业创建did
 */
async function startDidCorporateAgentcreateEx(request: StartDidCorporateAgentcreateRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartDidCorporateAgentcreateResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.corporate.agentcreate.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartDidPersonAgentcreateRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 企业自定信息
  extensionInfo?: string(name='extension_info'),
  // 所有需要关联的外键，外键必须已did auth key controller的did作为前缀+“sidekey:”+外键
  indexs?: [ string ](name='indexs'),
  // 名称
  ownerName?: string(name='owner_name'),
  // 唯一号，比如可以是hash(证件类型+企业营业执照号) 计算出来的唯一值等
  ownerUid: string(name='owner_uid'),
  // 携带自己定义的服务类型
  services?: [ DidDocServicesInfo ](name='services'),
  // 场景码，找dis工作人员进行分配
  bizCode?: string(name='biz_code'),
}

model StartDidPersonAgentcreateResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 生成的did字符串
  did?: string(name='did'),
}

/**
 * Description: 通过代理模式为个人创建did
 * Summary: 通过代理模式为个人创建did
 */
async function startDidPersonAgentcreate(request: StartDidPersonAgentcreateRequest): StartDidPersonAgentcreateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startDidPersonAgentcreateEx(request, headers, runtime);
}

/**
 * Description: 通过代理模式为个人创建did
 * Summary: 通过代理模式为个人创建did
 */
async function startDidPersonAgentcreateEx(request: StartDidPersonAgentcreateRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartDidPersonAgentcreateResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.person.agentcreate.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartDidCorporateSelfcreateRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 扩展信息
  extension?: string(name='extension'),
  // 公司名称
  ownerName?: string(name='owner_name'),
  // 携带自己定义的服务类型
  services?: [ DidDocServicesInfo ](name='services'),
  // 场景码，找dis工作人员进行分配
  bizCode?: string(name='biz_code'),
}

model StartDidCorporateSelfcreateResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 生成的did字符串
  did?: string(name='did'),
}

/**
 * Description: 直接创建自己的企业did
 * Summary: 直接创建自己的企业did
 */
async function startDidCorporateSelfcreate(request: StartDidCorporateSelfcreateRequest): StartDidCorporateSelfcreateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startDidCorporateSelfcreateEx(request, headers, runtime);
}

/**
 * Description: 直接创建自己的企业did
 * Summary: 直接创建自己的企业did
 */
async function startDidCorporateSelfcreateEx(request: StartDidCorporateSelfcreateRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartDidCorporateSelfcreateResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.corporate.selfcreate.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartDidPersonSelfcreateRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 扩展字段
  extensionInfo?: string(name='extension_info'),
  // 由调用者，或者浏览器直接生成
  ownerName?: string(name='owner_name'),
  // 携带自己定义的服务类型
  // 
  services?: [ DidDocServicesInfo ](name='services'),
  // 场景码，找dis工作人员进行分配
  bizCode?: string(name='biz_code'),
}

model StartDidPersonSelfcreateResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 生成的did字符串
  did?: string(name='did'),
}

/**
 * Description: 直接创建自己的个人did
 * Summary: 直接创建自己的个人did
 */
async function startDidPersonSelfcreate(request: StartDidPersonSelfcreateRequest): StartDidPersonSelfcreateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startDidPersonSelfcreateEx(request, headers, runtime);
}

/**
 * Description: 直接创建自己的个人did
 * Summary: 直接创建自己的个人did
 */
async function startDidPersonSelfcreateEx(request: StartDidPersonSelfcreateRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartDidPersonSelfcreateResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.person.selfcreate.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartDidVerifiableclaimIssureRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 颁发证书声明
  bareClaim: BareClaim(name='bare_claim'),
  // 过期时间
  expire: long(name='expire'),
  // 由谁来颁发，该did必须为调用者自己或者自己代理的did
  issuer: string(name='issuer'),
  // 为哪个did颁发
  subject: string(name='subject'),
  // 验证声明类型，目前默认VerifiableCredential
  type?: [ string ](name='type'),
  // 验证声明状态方式，目前只支持直接通过声明id上链查找状态方式，后续会支持更多方式
  verifyStatusType?: string(name='verify_status_type'),
  // 场景码，找dis工作人员进行分配
  bizCode?: string(name='biz_code'),
}

model StartDidVerifiableclaimIssureResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 可验证声明的完整声明 {"content":{"verion":"0.7.0","issuer":"xxxx","subject":"xxxx","expire":1530735444,"issucanceDate":1530735000,"id":"XXXX","claim":{//用户自定义},"status":{"type":"XXXX","id":"XXXXX"}},"proof":{"type":"ecdsa","created":"2018-06-18T21:19:10Z","verificationMethod":"XXXX","signatureValue":"XXXXX"}}
  verifiableClaimContent?: string(name='verifiable_claim_content'),
  // 声明id
  verifiableClaimId?: string(name='verifiable_claim_id'),
}

/**
 * Description: 使用自己或者代理的did为指定did颁发证书
 * Summary: 为指定did颁发证书
 */
async function startDidVerifiableclaimIssure(request: StartDidVerifiableclaimIssureRequest): StartDidVerifiableclaimIssureResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startDidVerifiableclaimIssureEx(request, headers, runtime);
}

/**
 * Description: 使用自己或者代理的did为指定did颁发证书
 * Summary: 为指定did颁发证书
 */
async function startDidVerifiableclaimIssureEx(request: StartDidVerifiableclaimIssureRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartDidVerifiableclaimIssureResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.verifiableclaim.issure.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartDidVerifiableclaimVerifierRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 用于零知识证明类型的可验证声明的验证。index是对应于完整VC的一个json字符串，其中key值保持和原始VC一致，value如果是1表示verificate_claim对应key携带的是对应field的原始值，而如果Key的value是0表示verificate_claim对应key携带的是对应field的merkle root值。
  indexs?: string(name='indexs'),
  // 可验证声明
  verifiableClaim: string(name='verifiable_claim'),
  // 场景码，找dis工作人员进行分配
  bizCode?: string(name='biz_code'),
}

model StartDidVerifiableclaimVerifierResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 验证可验证声明
 * Summary: 验证可验证声明
 */
async function startDidVerifiableclaimVerifier(request: StartDidVerifiableclaimVerifierRequest): StartDidVerifiableclaimVerifierResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startDidVerifiableclaimVerifierEx(request, headers, runtime);
}

/**
 * Description: 验证可验证声明
 * Summary: 验证可验证声明
 */
async function startDidVerifiableclaimVerifierEx(request: StartDidVerifiableclaimVerifierRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartDidVerifiableclaimVerifierResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.verifiableclaim.verifier.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDidDocRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 请求者did
  did: string(name='did'),
  // 场景码，找dis工作人员进行分配
  bizCode?: string(name='biz_code'),
}

model QueryDidDocResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // did对应的doc
  doc?: string(name='doc'),
}

/**
 * Description: 查询did对应的doc
 * Summary: 查询did对应的doc
 */
async function queryDidDoc(request: QueryDidDocRequest): QueryDidDocResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDidDocEx(request, headers, runtime);
}

/**
 * Description: 查询did对应的doc
 * Summary: 查询did对应的doc
 */
async function queryDidDocEx(request: QueryDidDocRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDidDocResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.doc.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateDidVerifiableclaimStatusRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 场景码，找dis工作人员进行分配
  bizCode?: string(name='biz_code'),
  // 希望可验证声明的状态， 0无效，1生效
  status: string(name='status'),
  // 可验证声明id
  vcId: string(name='vc_id'),
  // 该VC的颁发者
  issuerDid?: string(name='issuer_did'),
}

model UpdateDidVerifiableclaimStatusResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 更新可验证声明状态
 * Summary: 更新可验证声明状态
 */
async function updateDidVerifiableclaimStatus(request: UpdateDidVerifiableclaimStatusRequest): UpdateDidVerifiableclaimStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateDidVerifiableclaimStatusEx(request, headers, runtime);
}

/**
 * Description: 更新可验证声明状态
 * Summary: 更新可验证声明状态
 */
async function updateDidVerifiableclaimStatusEx(request: UpdateDidVerifiableclaimStatusRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateDidVerifiableclaimStatusResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.verifiableclaim.status.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateDidCorporateExtensionserviceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 需要更新的did doc对应的did字段；该did必须为调用者自己的did，或者托管给调用者的did
  did: string(name='did'),
  // 修改后的全量扩展字段
  extension: string(name='extension'),
  // 场景码，找dis工作人员进行分配
  bizCode?: string(name='biz_code'),
}

model UpdateDidCorporateExtensionserviceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 用户更新扩展字段中的扩展字段
 * Summary: 更新doc service中的扩展字段
 */
async function updateDidCorporateExtensionservice(request: UpdateDidCorporateExtensionserviceRequest): UpdateDidCorporateExtensionserviceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateDidCorporateExtensionserviceEx(request, headers, runtime);
}

/**
 * Description: 用户更新扩展字段中的扩展字段
 * Summary: 更新doc service中的扩展字段
 */
async function updateDidCorporateExtensionserviceEx(request: UpdateDidCorporateExtensionserviceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateDidCorporateExtensionserviceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.corporate.extensionservice.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartDidCorporateCustomerservicetypeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 自定义的扩展服务类型
  serviceTypes: [ DidServiceType ](name='service_types'),
  // 场景码，找dis工作人员进行分配
  bizCode?: string(name='biz_code'),
}

model StartDidCorporateCustomerservicetypeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 设置不通租户在DID中的不同扩展字段
 * Summary: 设置不通租户在DID中的不同扩展字段
 */
async function startDidCorporateCustomerservicetype(request: StartDidCorporateCustomerservicetypeRequest): StartDidCorporateCustomerservicetypeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startDidCorporateCustomerservicetypeEx(request, headers, runtime);
}

/**
 * Description: 设置不通租户在DID中的不同扩展字段
 * Summary: 设置不通租户在DID中的不同扩展字段
 */
async function startDidCorporateCustomerservicetypeEx(request: StartDidCorporateCustomerservicetypeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartDidCorporateCustomerservicetypeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.corporate.customerservicetype.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartDidCertificationThreemetaRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 身份证号码
  // 
  certNo: string(name='cert_no'),
  // 证书的subject did，不给此参数时候三要素验证不颁发vc
  // 
  did?: string(name='did'),
  // 手机号码
  // 
  mobile: string(name='mobile'),
  // 姓名
  name: string(name='name'),
  // 场景码，找dis工作人员进行分配
  bizCode?: string(name='biz_code'),
}

model StartDidCertificationThreemetaResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // vc id，可通过该字符串来查询vc具体内容
  // 
  vcId?: string(name='vc_id'),
}

/**
 * Description: 三要素实名认证
 * Summary: 三要素实名认证
 */
async function startDidCertificationThreemeta(request: StartDidCertificationThreemetaRequest): StartDidCertificationThreemetaResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startDidCertificationThreemetaEx(request, headers, runtime);
}

/**
 * Description: 三要素实名认证
 * Summary: 三要素实名认证
 */
async function startDidCertificationThreemetaEx(request: StartDidCertificationThreemetaRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartDidCertificationThreemetaResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.certification.threemeta.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartDidCertificationTwometaRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 身份证号码
  certNo: string(name='cert_no'),
  // 颁发证书的subject did
  did: string(name='did'),
  // 姓名
  name: string(name='name'),
  // 场景码，找dis工作人员进行分配
  bizCode?: string(name='biz_code'),
}

model StartDidCertificationTwometaResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // vc id，可通过该字符串来查询vc具体内容
  vcId?: string(name='vc_id'),
}

/**
 * Description: 二要素实名认证
 * Summary: 二要素实名认证
 */
async function startDidCertificationTwometa(request: StartDidCertificationTwometaRequest): StartDidCertificationTwometaResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startDidCertificationTwometaEx(request, headers, runtime);
}

/**
 * Description: 二要素实名认证
 * Summary: 二要素实名认证
 */
async function startDidCertificationTwometaEx(request: StartDidCertificationTwometaRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartDidCertificationTwometaResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.certification.twometa.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDidVcRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // vc id，可通过该字符串来查询vc具体内容
  vcId: string(name='vc_id'),
  // 验证者id
  verifierDid?: string(name='verifier_did'),
  // 场景码，找dis工作人员进行分配
  bizCode?: string(name='biz_code'),
}

model QueryDidVcResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 可验证声明的完整声明 {"content":{"verion":"0.7.0","issuer":"xxxx","subject":"xxxx","expire":1530735444,"issucanceDate":1530735000,"id":"XXXX","claim":{//用户自定义},"status":{"type":"XXXX","id":"XXXXX"}},"proof":{"type":"ecdsa","created":"2018-06-18T21:19:10Z","verificationMethod":"XXXX","signatureValue":"XXXXX"}}
  vcContent?: string(name='vc_content'),
}

/**
 * Description: 通过vcid查询vc内容
 * Summary: 通过vcid查询vc内容
 */
async function queryDidVc(request: QueryDidVcRequest): QueryDidVcResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDidVcEx(request, headers, runtime);
}

/**
 * Description: 通过vcid查询vc内容
 * Summary: 通过vcid查询vc内容
 */
async function queryDidVcEx(request: QueryDidVcRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDidVcResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.vc.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartDidIdentificationFaceauthRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 认证类型,枚举值 PC_AUTH、APP_AUTH
  authType: string(name='auth_type'),
  // 颁发证书的subject did
  did: string(name='did'),
  // 用户身份信息
  identityParam: IdentityParam(name='identity_param'),
  // 认证接口回调路径，POST接口 请求示例： { "certifyId":"0242de204e1a2c3ed6ee5e21d8a57a4c", "did":"xxxxx","vcId":"xxxxx" }
  returnUrl?: string(name='return_url'),
  // 场景码，找dis工作人员进行分配
  bizCode?: string(name='biz_code'),
}

model StartDidIdentificationFaceauthResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 认证ID
  certifyId?: string(name='certify_id'),
  // 二维码URL，用户支付宝扫一扫实人认证
  certifyUrl?: string(name='certify_url'),
}

/**
 * Description: 开始实人认证
 * Summary: 开始实人认证
 */
async function startDidIdentificationFaceauth(request: StartDidIdentificationFaceauthRequest): StartDidIdentificationFaceauthResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startDidIdentificationFaceauthEx(request, headers, runtime);
}

/**
 * Description: 开始实人认证
 * Summary: 开始实人认证
 */
async function startDidIdentificationFaceauthEx(request: StartDidIdentificationFaceauthRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartDidIdentificationFaceauthResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.identification.faceauth.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDidIdentificationFaceauthRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 认证ID，用于查询认证结果
  certifyId: string(name='certify_id'),
  // 场景码，找dis工作人员进行分配
  bizCode?: string(name='biz_code'),
}

model QueryDidIdentificationFaceauthResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // vc id，可通过该字符串来查询vc具体内容
  vcId?: string(name='vc_id'),
}

/**
 * Description: 查询实人认证结果
 * Summary: 查询实人认证结果
 */
async function queryDidIdentificationFaceauth(request: QueryDidIdentificationFaceauthRequest): QueryDidIdentificationFaceauthResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDidIdentificationFaceauthEx(request, headers, runtime);
}

/**
 * Description: 查询实人认证结果
 * Summary: 查询实人认证结果
 */
async function queryDidIdentificationFaceauthEx(request: QueryDidIdentificationFaceauthRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDidIdentificationFaceauthResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.identification.faceauth.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartDidNotificationConsumerRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  //  事件发生时的回调路径，必须满足：
  // metho：POST
  // Content-Type：application/json
  callBackUrl: string(name='call_back_url'),
  // 关注的did；这个did必须是调用者自己的did，也可以是托管给调用者的did
  did: string(name='did'),
  // 1 所有相关事件， 
  // 2 所有相关did事件，
  // 3 所有相关vc事件，
  type: long(name='type'),
  // 场景码，找dis工作人员进行分配
  bizCode?: string(name='biz_code'),
}

model StartDidNotificationConsumerResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 分配的消费者id，当需要重新注册时，需要使用这个consumer_id;
  consumerId?: string(name='consumer_id'),
}

/**
 * Description: 用户通过该接口订阅自己关心的did事件
 * Summary: 订阅did事件服务
 */
async function startDidNotificationConsumer(request: StartDidNotificationConsumerRequest): StartDidNotificationConsumerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startDidNotificationConsumerEx(request, headers, runtime);
}

/**
 * Description: 用户通过该接口订阅自己关心的did事件
 * Summary: 订阅did事件服务
 */
async function startDidNotificationConsumerEx(request: StartDidNotificationConsumerRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartDidNotificationConsumerResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.notification.consumer.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model RebootDidNotificationConsumerRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // method： POST
  // applicatoin/json
  callBackUrl: string(name='call_back_url'),
  // 注册是得到的consumer_id
  consumerId: string(name='consumer_id'),
  // 重新从哪个高度开始同步信息，目前did messager只保留1周之内的数据，所以这个高度如果早于一周，会返回异常。
  restartBlockHeight: long(name='restart_block_height'),
  // 场景码，找dis工作人员进行分配
  bizCode?: string(name='biz_code'),
}

model RebootDidNotificationConsumerResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 如果成功，会返回consumer_id
  consumerId?: string(name='consumer_id'),
}

/**
 * Description: 消费端在重启，或者需要重新拉之前的信息，需要调用这个接口重新注册
 * Summary: 消费端重新启动
 */
async function rebootDidNotificationConsumer(request: RebootDidNotificationConsumerRequest): RebootDidNotificationConsumerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return rebootDidNotificationConsumerEx(request, headers, runtime);
}

/**
 * Description: 消费端在重启，或者需要重新拉之前的信息，需要调用这个接口重新注册
 * Summary: 消费端重新启动
 */
async function rebootDidNotificationConsumerEx(request: RebootDidNotificationConsumerRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RebootDidNotificationConsumerResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.notification.consumer.reboot', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model InitDidCorporateDirectRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 扩展字段
  extension?: string(name='extension'),
  // owner名
  ownerName?: string(name='owner_name'),
  // 租户自有用户的唯1号，每个owner_uid只能申请一个did
  ownerUid: string(name='owner_uid'),
  // 公钥
  publicKey: string(name='public_key'),
  // did doc service信息列表
  services?: [ DisServicesInfo ](name='services'),
  // 场景码，找dis工作人员进行分配
  bizCode?: string(name='biz_code'),
}

model InitDidCorporateDirectResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // did
  did?: string(name='did'),
  // did doc content
  doc?: string(name='doc'),
  // 后续did doc上链需要使用私钥对这个hash值进行签名
  hash?: string(name='hash'),
}

/**
 * Description: 向Dis申请DID号
 * Summary: 非托管模式下创建DID时，申请ID
 */
async function initDidCorporateDirect(request: InitDidCorporateDirectRequest): InitDidCorporateDirectResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return initDidCorporateDirectEx(request, headers, runtime);
}

/**
 * Description: 向Dis申请DID号
 * Summary: 非托管模式下创建DID时，申请ID
 */
async function initDidCorporateDirectEx(request: InitDidCorporateDirectRequest, headers: map[string]string, runtime: Util.RuntimeOptions): InitDidCorporateDirectResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.corporate.direct.init', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model PushDidCorporateDirectRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // did
  did: string(name='did'),
  // did doc json string
  doc: string(name='doc'),
  // 对hash进行签名后接字符串
  signData: string(name='sign_data'),
  // 场景码，找dis工作人员进行分配
  bizCode?: string(name='biz_code'),
}

model PushDidCorporateDirectResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 推送或者更新did doc
 * Summary: 推送或者更新did doc
 */
async function pushDidCorporateDirect(request: PushDidCorporateDirectRequest): PushDidCorporateDirectResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return pushDidCorporateDirectEx(request, headers, runtime);
}

/**
 * Description: 推送或者更新did doc
 * Summary: 推送或者更新did doc
 */
async function pushDidCorporateDirectEx(request: PushDidCorporateDirectRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PushDidCorporateDirectResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.corporate.direct.push', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model InitDidCorporateIdentityRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 扩展字段
  extensionInfo?: string(name='extension_info'),
  // 持有者名字
  ownerName?: string(name='owner_name'),
  // 用户在租户下的唯一ID
  ownerUid: string(name='owner_uid'),
  // 场景码，找dis工作人员进行分配
  bizCode?: string(name='biz_code'),
}

model InitDidCorporateIdentityResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // did
  did?: string(name='did'),
}

/**
 * Description: 企业申请did
 * Summary: 申请did
 */
async function initDidCorporateIdentity(request: InitDidCorporateIdentityRequest): InitDidCorporateIdentityResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return initDidCorporateIdentityEx(request, headers, runtime);
}

/**
 * Description: 企业申请did
 * Summary: 申请did
 */
async function initDidCorporateIdentityEx(request: InitDidCorporateIdentityRequest, headers: map[string]string, runtime: Util.RuntimeOptions): InitDidCorporateIdentityResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.corporate.identity.init', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartDidAgentChallengeresponseRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 场景码，找dis工作人员进行分配
  bizCode?: string(name='biz_code'),
  // 一段auth challenge明文，即需要被计算签名的明文
  challengeRequest: string(name='challenge_request'),
  // 指定的did，该did必须是租户自己，或托管给租户的did
  did: string(name='did'),
  // 0 原始字符串，1 hash值
  challengeType?: long(name='challenge_type'),
}

model StartDidAgentChallengeresponseResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // {
  //   __challenge":xxxx, //待签名的明文
  //   “expired”：xxxx,//签名有效时间
  //   “sign”：xxxx，//对上述字段进行的签名
  // }
  signData?: string(name='sign_data'),
}

/**
 * Description: 对authchallenge进行响应
 * Summary: 对authchallenge进行响应
 */
async function startDidAgentChallengeresponse(request: StartDidAgentChallengeresponseRequest): StartDidAgentChallengeresponseResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startDidAgentChallengeresponseEx(request, headers, runtime);
}

/**
 * Description: 对authchallenge进行响应
 * Summary: 对authchallenge进行响应
 */
async function startDidAgentChallengeresponseEx(request: StartDidAgentChallengeresponseRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartDidAgentChallengeresponseResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.agent.challengeresponse.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartDidAgentVerifyauthresponseRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // { __challenge":xxxx, //待签名的明文
  //  “expired”：xxxx,//签名有效时间 
  // “sign”：xxxx，//对上述字段进行的签名
  // }
  authResponse: string(name='auth_response'),
  // 待验证的did
  did: string(name='did'),
  // 场景码，找dis工作人员进行分配
  bizCode?: string(name='biz_code'),
}

model StartDidAgentVerifyauthresponseResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 验证Auth Response有效性接口
 * Summary: 验证Auth Response有效性
 */
async function startDidAgentVerifyauthresponse(request: StartDidAgentVerifyauthresponseRequest): StartDidAgentVerifyauthresponseResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startDidAgentVerifyauthresponseEx(request, headers, runtime);
}

/**
 * Description: 验证Auth Response有效性接口
 * Summary: 验证Auth Response有效性
 */
async function startDidAgentVerifyauthresponseEx(request: StartDidAgentVerifyauthresponseRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartDidAgentVerifyauthresponseResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.agent.verifyauthresponse.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartDidCertificationMaskRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 身份证号码
  certNo: string(name='cert_no'),
  // 颁发证书的subject did
  did: string(name='did'),
  // 手机号码
  mobile: string(name='mobile'),
  // 姓名
  name: string(name='name'),
  // 场景码，找dis工作人员进行分配
  bizCode?: string(name='biz_code'),
}

model StartDidCertificationMaskResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // vc id，可通过该字符串来查询vc具体内容
  vcId?: string(name='vc_id'),
}

/**
 * Description: 脱敏身份验证
 * Summary: 脱敏身份验证
 */
async function startDidCertificationMask(request: StartDidCertificationMaskRequest): StartDidCertificationMaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startDidCertificationMaskEx(request, headers, runtime);
}

/**
 * Description: 脱敏身份验证
 * Summary: 脱敏身份验证
 */
async function startDidCertificationMaskEx(request: StartDidCertificationMaskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartDidCertificationMaskResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.certification.mask.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model OpenDidAdminServiceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 场景码，找dis工作人员进行分配
  bizCode?: string(name='biz_code'),
  // 账户接入公钥
  disAccessKey?: string(name='dis_access_key'),
  // 扩展字段
  specification?: string(name='specification'),
  // 租户id
  tenantId: string(name='tenant_id'),
}

model OpenDidAdminServiceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 分配给该租户的访问密钥
  disAccessKey?: string(name='dis_access_key'),
}

/**
 * Description: 管理员为租户开通did服务
 * Summary: 管理员为租户开通did服务
 */
async function openDidAdminService(request: OpenDidAdminServiceRequest): OpenDidAdminServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return openDidAdminServiceEx(request, headers, runtime);
}

/**
 * Description: 管理员为租户开通did服务
 * Summary: 管理员为租户开通did服务
 */
async function openDidAdminServiceEx(request: OpenDidAdminServiceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): OpenDidAdminServiceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.admin.service.open', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StopDidAdminServiceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 场景码，找dis工作人员进行分配
  bizCode?: string(name='biz_code'),
  // 扩展字段
  specification?: string(name='specification'),
  // 指定租户
  tenantId: string(name='tenant_id'),
}

model StopDidAdminServiceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 针对指定租户关闭dis服务
 * Summary: 针对指定租户关闭dis服务
 */
async function stopDidAdminService(request: StopDidAdminServiceRequest): StopDidAdminServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return stopDidAdminServiceEx(request, headers, runtime);
}

/**
 * Description: 针对指定租户关闭dis服务
 * Summary: 针对指定租户关闭dis服务
 */
async function stopDidAdminServiceEx(request: StopDidAdminServiceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StopDidAdminServiceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.admin.service.stop', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartDidSignatureAgentRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 场景码，找dis工作人员进行分配
  bizCode?: string(name='biz_code'),
  // 需要进行签名的字符串
  data: string(name='data'),
  // 0 原始数据
  // 1 hash值
  dataType?: long(name='data_type'),
  // 需要进行代理签名的did
  did: string(name='did'),
}

model StartDidSignatureAgentResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 签名之后的结果
  signature?: string(name='signature'),
}

/**
 * Description: 为被托管人进行代理签名
 * Summary: 为被托管人进行代理签名
 */
async function startDidSignatureAgent(request: StartDidSignatureAgentRequest): StartDidSignatureAgentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startDidSignatureAgentEx(request, headers, runtime);
}

/**
 * Description: 为被托管人进行代理签名
 * Summary: 为被托管人进行代理签名
 */
async function startDidSignatureAgentEx(request: StartDidSignatureAgentRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartDidSignatureAgentResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.signature.agent.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CheckDidSignRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 需要验签的字符串
  checkData: string(name='check_data'),
  // 对字符串签名的did
  did: string(name='did'),
  // 签名后的字符串
  signature: string(name='signature'),
  // 场景码，找dis工作人员进行分配
  bizCode?: string(name='biz_code'),
}

model CheckDidSignResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 对字符串进行验签
 * Summary: 对字符串进行验签
 */
async function checkDidSign(request: CheckDidSignRequest): CheckDidSignResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return checkDidSignEx(request, headers, runtime);
}

/**
 * Description: 对字符串进行验签
 * Summary: 对字符串进行验签
 */
async function checkDidSignEx(request: CheckDidSignRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CheckDidSignResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.sign.check', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartDidZkpverifiableclaimVisibilityRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // vc颁发者
  issuer: string(name='issuer'),
  // 哪些字段将被展示。
  // 如果父路径和子路径都被包含，那么将以最上级路径为准，展示上级路径对应的内容
  path: [ string ](name='path'),
  // vc完整原文
  vc: string(name='vc'),
  // 场景码，找dis工作人员进行分配
  bizCode?: string(name='biz_code'),
}

model StartDidZkpverifiableclaimVisibilityResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 索引字段，标示哪些字段是原始值，哪些字段是hash值
  index?: string(name='index'),
  // 被隐藏了部分内容的VC内容
  vcView?: string(name='vc_view'),
}

/**
 * Description: 根据用户指定路径，展示部分可见的声明，并可以被验证
 * Summary: 根据用户指定路径，展示部分可见声明
 */
async function startDidZkpverifiableclaimVisibility(request: StartDidZkpverifiableclaimVisibilityRequest): StartDidZkpverifiableclaimVisibilityResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startDidZkpverifiableclaimVisibilityEx(request, headers, runtime);
}

/**
 * Description: 根据用户指定路径，展示部分可见的声明，并可以被验证
 * Summary: 根据用户指定路径，展示部分可见声明
 */
async function startDidZkpverifiableclaimVisibilityEx(request: StartDidZkpverifiableclaimVisibilityRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartDidZkpverifiableclaimVisibilityResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.zkpverifiableclaim.visibility.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartDidAgentSidekeyRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 指定did进行外键关联
  did: string(name='did'),
  // 所有需要关联的外键，外键必须已did auth key controller的did作为前缀+“sidekey:”+外键
  indexs: [ string ](name='indexs'),
  // 场景码，找dis工作人员进行分配
  bizCode?: string(name='biz_code'),
}

model StartDidAgentSidekeyResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 为指定did添加外键关联，该接口必须被did自己调用或者did的认证密钥管理人调用。
 * Summary: 为指定did添加外键关联
 */
async function startDidAgentSidekey(request: StartDidAgentSidekeyRequest): StartDidAgentSidekeyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startDidAgentSidekeyEx(request, headers, runtime);
}

/**
 * Description: 为指定did添加外键关联，该接口必须被did自己调用或者did的认证密钥管理人调用。
 * Summary: 为指定did添加外键关联
 */
async function startDidAgentSidekeyEx(request: StartDidAgentSidekeyRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartDidAgentSidekeyResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.agent.sidekey.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateDidAgentSidekeyRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 新增的外键
  addIndexs?: [ string ](name='add_indexs'),
  // 去掉哪些外键
  deleteIndexs?: [ string ](name='delete_indexs'),
  // 指定did进行外键关联
  did: string(name='did'),
  // 场景码，找dis工作人员进行分配
  bizCode?: string(name='biz_code'),
}

model UpdateDidAgentSidekeyResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 为指定did更新外键关联，该接口必须被did自己调用或者did的认证密钥管理人调用。
 * Summary: 更新指定did的外键
 */
async function updateDidAgentSidekey(request: UpdateDidAgentSidekeyRequest): UpdateDidAgentSidekeyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateDidAgentSidekeyEx(request, headers, runtime);
}

/**
 * Description: 为指定did更新外键关联，该接口必须被did自己调用或者did的认证密钥管理人调用。
 * Summary: 更新指定did的外键
 */
async function updateDidAgentSidekeyEx(request: UpdateDidAgentSidekeyRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateDidAgentSidekeyResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.agent.sidekey.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartDidCorporateAgentcreatewithsidekeyRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // {
  //     "自定义服务相关字段": 自定义字符串,
  //     "nation": "CN",
  //     "type": "LimitedCompany",
  //     "name": "演示用户名",
  //     "licenceNo": "1111",
  //     "address": "1111",
  //     "parentName": "演示直连公司",
  //     "linkType": "indirect",
  //     "certifyDate": "2019-1-1",
  //     "licenceExpireDate": "2020-1-1",
  //     "businessScope": "1111",
  //     "businessAddress": "1111",
  //     "corporateBusinessType": 0
  // }
  extensionInfo?: string(name='extension_info'),
  // 所有需要关联的外键，外键必须已did auth key controller的did作为前缀+“sidekey:”+外键
  indexs: [ string ](name='indexs'),
  // 企业名称
  ownerName?: string(name='owner_name'),
  // 自定义企业唯一id，企业在自有模式下的唯一号bid的has...
  ownerUid: string(name='owner_uid'),
  // 场景码，找dis工作人员进行分配
  bizCode?: string(name='biz_code'),
}

model StartDidCorporateAgentcreatewithsidekeyResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 生成的did字符串
  did?: string(name='did'),
}

/**
 * Description: 代理创建did并创建外键
 * Summary: 代理创建did并创建外键
 */
async function startDidCorporateAgentcreatewithsidekey(request: StartDidCorporateAgentcreatewithsidekeyRequest): StartDidCorporateAgentcreatewithsidekeyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startDidCorporateAgentcreatewithsidekeyEx(request, headers, runtime);
}

/**
 * Description: 代理创建did并创建外键
 * Summary: 代理创建did并创建外键
 */
async function startDidCorporateAgentcreatewithsidekeyEx(request: StartDidCorporateAgentcreatewithsidekeyRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartDidCorporateAgentcreatewithsidekeyResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.corporate.agentcreatewithsidekey.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateDidCorporateExtensionservicewithsidekeyRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 新增的外键
  addIndexs?: [ string ](name='add_indexs'),
  // 去掉哪些外键
  deleteIndexs?: [ string ](name='delete_indexs'),
  // 需要更新的did doc对应的did字段；该did必须为调用者自己的did，或者托管给调用者的did
  did: string(name='did'),
  // 修改后的全量扩展字段
  extension: string(name='extension'),
  // 场景码，找dis工作人员进行分配
  bizCode?: string(name='biz_code'),
}

model UpdateDidCorporateExtensionservicewithsidekeyResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 更新doc 中的扩展字段并更新外键
 * Summary: 更新doc 中的扩展字段并更新外键
 */
async function updateDidCorporateExtensionservicewithsidekey(request: UpdateDidCorporateExtensionservicewithsidekeyRequest): UpdateDidCorporateExtensionservicewithsidekeyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateDidCorporateExtensionservicewithsidekeyEx(request, headers, runtime);
}

/**
 * Description: 更新doc 中的扩展字段并更新外键
 * Summary: 更新doc 中的扩展字段并更新外键
 */
async function updateDidCorporateExtensionservicewithsidekeyEx(request: UpdateDidCorporateExtensionservicewithsidekeyRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateDidCorporateExtensionservicewithsidekeyResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.corporate.extensionservicewithsidekey.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDidDocSidekeyRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 是否需要分页返回
  needPage?: boolean(name='need_page'),
  // 按分页查询
  pageNum?: long(name='page_num'),
  // 前缀+z40_uid
  sideKey: string(name='side_key'),
  // 通过外键查询did，需要以下条件之一：
  // 1. 查询者为外键前缀对应的did；
  // 2. 查询者能够提供外键前缀对应的did的授权vc。
  verifiableClaim?: string(name='verifiable_claim'),
  // 场景码，找dis工作人员进行分配
  bizCode?: string(name='biz_code'),
}

model QueryDidDocSidekeyResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // side可以查找到的所有did doc数组，以json方式输出
  doc?: string(name='doc'),
  // 总个数
  totalNum?: long(name='total_num'),
  // 总页数
  totalPage?: long(name='total_page'),
}

/**
 * Description: 通过sidekey方式查询对应doc
 * Summary: 通过sidekey方式查询对应doc
 */
async function queryDidDocSidekey(request: QueryDidDocSidekeyRequest): QueryDidDocSidekeyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDidDocSidekeyEx(request, headers, runtime);
}

/**
 * Description: 通过sidekey方式查询对应doc
 * Summary: 通过sidekey方式查询对应doc
 */
async function queryDidDocSidekeyEx(request: QueryDidDocSidekeyRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDidDocSidekeyResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.doc.sidekey.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartDidPersonAgentcreatewithsidekeyRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // { "自定义服务相关字段": 自定义字符串, "nation": "CN", "certType": "身份证", "name": "演示用户名", "certNo": "1111"}
  extensionInfo?: string(name='extension_info'),
  // 所有需要关联的外键，外键必须已did auth key controller的did作为前缀+“sidekey:”+外键
  indexs: [ string ](name='indexs'),
  // 个人名称
  ownerName?: string(name='owner_name'),
  // 自定义企业唯一id，企业在自有模式下的唯一号bid的has...
  ownerUid: string(name='owner_uid'),
  // 场景码，找dis工作人员进行分配
  bizCode?: string(name='biz_code'),
}

model StartDidPersonAgentcreatewithsidekeyResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 生成的did字符串
  did?: string(name='did'),
}

/**
 * Description: 代理创建个人did并创建外键
 * Summary: 代理创建个人did并创建外键
 */
async function startDidPersonAgentcreatewithsidekey(request: StartDidPersonAgentcreatewithsidekeyRequest): StartDidPersonAgentcreatewithsidekeyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startDidPersonAgentcreatewithsidekeyEx(request, headers, runtime);
}

/**
 * Description: 代理创建个人did并创建外键
 * Summary: 代理创建个人did并创建外键
 */
async function startDidPersonAgentcreatewithsidekeyEx(request: StartDidPersonAgentcreatewithsidekeyRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartDidPersonAgentcreatewithsidekeyResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.person.agentcreatewithsidekey.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartDidIotAgentcreateRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // { "自定义服务相关字段": 自定义字符串, "type": "IOT设备类型", "name": "演示用户名", "licenceNo": "设备唯一号", "address": "1111" }
  extensionInfo?: string(name='extension_info'),
  // 所有需要关联的外键，外键必须已did auth key controller的did作为前缀+“sidekey:”+外键
  indexs?: [ string ](name='indexs'),
  // 企业名称
  ownerName?: string(name='owner_name'),
  // 自定义企业唯一id，企业在自有模式下的唯一号bid的has...
  ownerUid: string(name='owner_uid'),
  // 携带自己定义的服务类型
  // 
  services?: [ DidDocServicesInfo ](name='services'),
  // 场景码，找dis工作人员进行分配
  bizCode?: string(name='biz_code'),
}

model StartDidIotAgentcreateResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 生成的did字符串
  did?: string(name='did'),
}

/**
 * Description: 代理创建IOT did
 * Summary: 代理创建IOT did
 */
async function startDidIotAgentcreate(request: StartDidIotAgentcreateRequest): StartDidIotAgentcreateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startDidIotAgentcreateEx(request, headers, runtime);
}

/**
 * Description: 代理创建IOT did
 * Summary: 代理创建IOT did
 */
async function startDidIotAgentcreateEx(request: StartDidIotAgentcreateRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartDidIotAgentcreateResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.iot.agentcreate.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartDidIotAgentcreatewithsidekeyRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // { "自定义服务相关字段": 自定义字符串, "type": "IOT设备类型", "name": "演示用户名", "licenceNo": "设备唯一号", "address": "1111" }
  extensionInfo?: string(name='extension_info'),
  // 所有需要关联的外键，外键必须已did auth key controller的did作为前缀+“sidekey:”+外键
  indexs: [ string ](name='indexs'),
  // iot设备名
  ownerName?: string(name='owner_name'),
  // 自定义企业唯一id，企业在自有模式下的唯一号bid的has...
  ownerUid: string(name='owner_uid'),
  // 场景码，找dis工作人员进行分配
  bizCode?: string(name='biz_code'),
}

model StartDidIotAgentcreatewithsidekeyResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 生成的iot did字符串
  did?: string(name='did'),
}

/**
 * Description: 代理创建IOT did并创建外键
 * Summary: 代理创建IOT did并创建外键
 */
async function startDidIotAgentcreatewithsidekey(request: StartDidIotAgentcreatewithsidekeyRequest): StartDidIotAgentcreatewithsidekeyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startDidIotAgentcreatewithsidekeyEx(request, headers, runtime);
}

/**
 * Description: 代理创建IOT did并创建外键
 * Summary: 代理创建IOT did并创建外键
 */
async function startDidIotAgentcreatewithsidekeyEx(request: StartDidIotAgentcreatewithsidekeyRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartDidIotAgentcreatewithsidekeyResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.iot.agentcreatewithsidekey.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateDidIotExtensionservicewithsidekeyRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 新增的外键
  addIndexs?: [ string ](name='add_indexs'),
  // 去掉哪些外键
  deleteIndexs?: [ string ](name='delete_indexs'),
  // 需要更新的did doc对应的did字段；该did必须为调用者自己的did，或者托管给调用者的did
  did: string(name='did'),
  // 修改后的全量扩展字段
  extension: string(name='extension'),
  // 场景码，找dis工作人员进行分配
  bizCode?: string(name='biz_code'),
}

model UpdateDidIotExtensionservicewithsidekeyResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 更新IOT类did的扩展字段并更新外键
 * Summary: 更新IOT类did的扩展字段并更新外键
 */
async function updateDidIotExtensionservicewithsidekey(request: UpdateDidIotExtensionservicewithsidekeyRequest): UpdateDidIotExtensionservicewithsidekeyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateDidIotExtensionservicewithsidekeyEx(request, headers, runtime);
}

/**
 * Description: 更新IOT类did的扩展字段并更新外键
 * Summary: 更新IOT类did的扩展字段并更新外键
 */
async function updateDidIotExtensionservicewithsidekeyEx(request: UpdateDidIotExtensionservicewithsidekeyRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateDidIotExtensionservicewithsidekeyResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.iot.extensionservicewithsidekey.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateDidPersonExtensionservicewithsidekeyRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 新增的外键
  addIndexs?: [ string ](name='add_indexs'),
  // 去掉哪些外键
  deleteIndexs?: [ string ](name='delete_indexs'),
  // 需要更新的did doc对应的did字段；该did必须为调用者自己的did，或者托管给调用者的did
  did: string(name='did'),
  // 修改后的全量扩展字段
  // 
  extension?: string(name='extension'),
  // 场景码，找dis工作人员进行分配
  bizCode?: string(name='biz_code'),
}

model UpdateDidPersonExtensionservicewithsidekeyResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 更新个人did中的扩展字段并更新外键
 * Summary: 更新个人did中的扩展字段并更新外键
 */
async function updateDidPersonExtensionservicewithsidekey(request: UpdateDidPersonExtensionservicewithsidekeyRequest): UpdateDidPersonExtensionservicewithsidekeyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateDidPersonExtensionservicewithsidekeyEx(request, headers, runtime);
}

/**
 * Description: 更新个人did中的扩展字段并更新外键
 * Summary: 更新个人did中的扩展字段并更新外键
 */
async function updateDidPersonExtensionservicewithsidekeyEx(request: UpdateDidPersonExtensionservicewithsidekeyRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateDidPersonExtensionservicewithsidekeyResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.person.extensionservicewithsidekey.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateDidPersonWiththreemetaRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 身份证号码
  certNo: string(name='cert_no'),
  // 扩展字段
  extensionInfo?: string(name='extension_info'),
  // 手机号码
  mobile: string(name='mobile'),
  // 姓名
  name: string(name='name'),
  // 名称
  ownerName?: string(name='owner_name'),
  // 自定义个人唯一id，个人在自有模式下的唯一号，调用者需要保证其唯一性 
  ownerUid: string(name='owner_uid'),
  // 场景码，找dis工作人员进行分配
  bizCode?: string(name='biz_code'),
}

model CreateDidPersonWiththreemetaResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 生成的did字符串
  did?: string(name='did'),
  // 颁发的vcId
  vcId?: string(name='vc_id'),
}

/**
 * Description: 通过个人三要素验证后创建个人did，若未通过个人三要素验证，则不创建did并报错
 * Summary: 通过个人三要素验证后创建个人did
 */
async function createDidPersonWiththreemeta(request: CreateDidPersonWiththreemetaRequest): CreateDidPersonWiththreemetaResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createDidPersonWiththreemetaEx(request, headers, runtime);
}

/**
 * Description: 通过个人三要素验证后创建个人did，若未通过个人三要素验证，则不创建did并报错
 * Summary: 通过个人三要素验证后创建个人did
 */
async function createDidPersonWiththreemetaEx(request: CreateDidPersonWiththreemetaRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateDidPersonWiththreemetaResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.person.withthreemeta.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateDidCorporateWiththreemetaRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 企业名称
  epCertName: string(name='ep_cert_name'),
  // 企业证件号
  epCertNo: string(name='ep_cert_no'),
  // { "nation": "CN", //企业注册地址 "type": "LimitedCompany", //企业类型 "name": "演示用户名", //必选字段，企业名 "licenceNo": "1111", //营业执照 "address": "1111", //企业地址 "parentName": "", //<-必选字段 业务方名 需要提前协商 "linkType": "indirect", //<- 连接类型，direct直链企业， indirect间链企业 "certifyDate": "2019-1-1", //证书颁发时间 "licenceExpireDate": "2020-1-1", //证书到期时间 "businessScope": "1111", //企业经营范围 "businessAddress": "1111", //企业经营地址 "corporateBusinessType": 0, //<- 企业类型：0 一般企业， 1 个人商户 "channelName": "" //<- 必选字段 业务渠道 需要提前沟通 }
  extensionInfo?: string(name='extension_info'),
  // 法人姓名
  legalPersonCertName: string(name='legal_person_cert_name'),
  // 名称
  ownerName?: string(name='owner_name'),
  // 自定义企业唯一id，企业在自有模式下的唯一号，调用者需要保证其唯一性
  ownerUid: string(name='owner_uid'),
  // 场景码，找dis工作人员进行分配
  bizCode?: string(name='biz_code'),
}

model CreateDidCorporateWiththreemetaResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 生成的did
  did?: string(name='did'),
  // 颁发的vcId
  vcId?: string(name='vc_id'),
}

/**
 * Description: 通过企业三要素验证后创建企业did，若未通过企业三要素验证，则不创建did并报错
 * Summary: 通过企业三要素验证后创建企业did
 */
async function createDidCorporateWiththreemeta(request: CreateDidCorporateWiththreemetaRequest): CreateDidCorporateWiththreemetaResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createDidCorporateWiththreemetaEx(request, headers, runtime);
}

/**
 * Description: 通过企业三要素验证后创建企业did，若未通过企业三要素验证，则不创建did并报错
 * Summary: 通过企业三要素验证后创建企业did
 */
async function createDidCorporateWiththreemetaEx(request: CreateDidCorporateWiththreemetaRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateDidCorporateWiththreemetaResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.corporate.withthreemeta.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartDidVcrepositoryIssueRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 配置此列表，则说明需要DIS对证书声明内容加密处理，并且控制访问权限，此列表为初始配置的did名单，拥有对此颁发证书的读取权限。
  // 如果不配置此列表，则DIS默认将明文存储此证书，任何did都可以访问此证书声明内容。
  // 
  authDidList?: [ string ](name='auth_did_list'),
  // 颁发证书声明的原始声明内容，其中claim字段为json格式
  bareClaim: BareClaim(name='bare_claim'),
  // 过期时间，如果用不过期可以设置为：-1。
  // 注意如果证书过期，则无法再通过VC Repository读取访问此证书内容。
  expire: long(name='expire'),
  // 颁发证书方，该did必须为调用者自己或者自己代理的did。
  // 
  issuer: string(name='issuer'),
  // 1 - 指定id将被按照verifiable_claim_id = "vc:mychain:" + SHA256(Joiner.on(":").join(subject, verifiable_claim_id.substring(0,50)))+verifiable_claim_id.substring(50);此表达式参与SHA256的 verifiable_claim_id 为用户指定的参数。
  specifiedClaimIdType?: long(name='specified_claim_id_type'),
  // 颁发证书的目标did，此目标did将拥有存储到VC Repository的数据管控权限，比如：授权给其它did读取此证书的权限。
  subject: string(name='subject'),
  // 通过层级定义的证书类型说明，在使用VC Repository的情况下默认为：["VerifiableCredential","DelegateVCRepository"]。
  // 如果用户希望通过type来过滤读取证书VC，那么可以在此列表后面追加层次定义说明，方便后续读取证书在VC Repository进行过滤。（如果读取方已知verifiable_claim_id可以直接过滤读取）
  type?: [ string ](name='type'),
  // 如果指定，最终会使用此id会参与生成的证书的verifiable_claim_id，但是调用方需要保证设置值的唯一性，重复的id会引起最终verifiable_claim_id重复，导致被拒绝颁发证书。
  // 如果不指定，则会随机生成一个规范的verifiable_claim_id。
  // verifiable_claim_id = "vc:mychain:" + SHA256(Joiner.on(":").join(subject, verifiable_claim_id)); 此表达式参与SHA256的 verifiable_claim_id 为用户指定的参数。
  verifiableClaimId?: string(name='verifiable_claim_id'),
  // 验证声明状态方式，目前只支持直接通过声明id上链查找状态方式，后续会支持更多方式
  verifyStatusType?: string(name='verify_status_type'),
  // 场景码，找dis工作人员进行分配
  bizCode?: string(name='biz_code'),
}

model StartDidVcrepositoryIssueResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 可验证声明的完整声明 {"content":{"verion":"0.7.0","issuer":"xxxx","subject":"xxxx","expire":1530735444,"issucanceDate":1530735000,"id":"XXXX","claim":{//用户自定义},"status":{"type":"XXXX","id":"XXXXX"}},"proof":{"type":"ecdsa","created":"2018-06-18T21:19:10Z","verificationMethod":"XXXX","signatureValue":"XXXXX"}}
  verifiableClaimContent?: string(name='verifiable_claim_content'),
  // 颁发的证书唯一id，颁发成功后返回。
  verifiableClaimId?: string(name='verifiable_claim_id'),
}

/**
 * Description: 使用自己或者代理的did为指定did颁发证书，同时在VC Repository中对证书VC进行存储。
支持授权管理，只有被授权的did未来才可以访问获取此颁发的证书数据。
 * Summary: 指定did颁发证书，并存储
 */
async function startDidVcrepositoryIssue(request: StartDidVcrepositoryIssueRequest): StartDidVcrepositoryIssueResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startDidVcrepositoryIssueEx(request, headers, runtime);
}

/**
 * Description: 使用自己或者代理的did为指定did颁发证书，同时在VC Repository中对证书VC进行存储。
支持授权管理，只有被授权的did未来才可以访问获取此颁发的证书数据。
 * Summary: 指定did颁发证书，并存储
 */
async function startDidVcrepositoryIssueEx(request: StartDidVcrepositoryIssueRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartDidVcrepositoryIssueResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.vcrepository.issue.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartDidVcrepositoryReadRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 请求读取数据的did。
  did: string(name='did'),
  // 配合owner_did字段一起使用，指定查询目标VC时的过滤字段（可是标准VC内容的字段），指定此字段后，配合需指定filter_value字段。
  filterField?: string(name='filter_field'),
  // 配合filter_field字段，设定具体过滤VC的使用的值，示例说明是在使用`type`字段过滤VC时候的样例。
  filterValue?: string(name='filter_value'),
  // 如果没有配置参数verifiable_claim_id，则只能通过制定subject_did、issuer_did和filter参数来查找目标VC内容。 因此只有在调用方未知verifiable_claim_id的情况下，才需要配置此参数。
  issuerDid?: string(name='issuer_did'),
  // 保留字段，请求读的did身份对应公钥对所有数据参数的签名（目前托管模式可缺省此字段，未来非托管时需请求端签名，需填此字段）
  signature?: string(name='signature'),
  // 如果没有配置参数verifiable_claim_id，则只能通过制定subject_did、issuer_did和filter参数来查找目标VC内容。
  // 因此只有在调用方未知verifiable_claim_id的情况下，才需要配置此参数。
  subjectDid?: string(name='subject_did'),
  // 调用方如果已知目标VC的verifiable_claim_id，建议通过配置此参数来读取目标VC内容，并且不需要配置subject_did、issuer_did和 filter相关参数。
  // 注意如果不配置此字段，则必须配置subject_did, issuer_did, filter_field, filter_value 字段。
  // 注意：如果此字段不是"vc:mychain:"前缀开头，则会使用如下规则生成：
  // verifiable_claim_id = "vc:mychain:" + SHA256(Joiner.on(":").join(issuer_did, subject_did, verifiable_claim_id)); 此表达式参与SHA256的 verifiable_claim_id 为用户指定的参数。
  verifiableClaimId?: string(name='verifiable_claim_id'),
  // 场景码，找dis工作人员进行分配
  bizCode?: string(name='biz_code'),
}

model StartDidVcrepositoryReadResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 可验证声明的完整声明 {"content":{"verion":"0.7.0","issuer":"xxxx","subject":"xxxx","expire":1530735444,"issucanceDate":1530735000,"id":"XXXX","claim":{//用户自定义},"status":{"type":"XXXX","id":"XXXXX"}},"proof":{"type":"ecdsa","created":"2018-06-18T21:19:10Z","verificationMethod":"XXXX","signatureValue":"XXXXX"}}
  verifiableClaimContent?: string(name='verifiable_claim_content'),
}

/**
 * Description: 通过提供verifiable_claim_id来读取目标VC内容，如果调用方不知道目标VC的verifiable_claim_id，则通过配置目标VC的subject_did、issuer_did 和 过滤字段来查询并读取。
如果调用者不在目标VC的授权名单中，则无法读取目标VC内容。
 * Summary: 读取目标证书数据
 */
async function startDidVcrepositoryRead(request: StartDidVcrepositoryReadRequest): StartDidVcrepositoryReadResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startDidVcrepositoryReadEx(request, headers, runtime);
}

/**
 * Description: 通过提供verifiable_claim_id来读取目标VC内容，如果调用方不知道目标VC的verifiable_claim_id，则通过配置目标VC的subject_did、issuer_did 和 过滤字段来查询并读取。
如果调用者不在目标VC的授权名单中，则无法读取目标VC内容。
 * Summary: 读取目标证书数据
 */
async function startDidVcrepositoryReadEx(request: StartDidVcrepositoryReadRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartDidVcrepositoryReadResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.vcrepository.read.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartDidVcrepositoryAuthRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 配置此did列表，为这些did分配读取目标VC的权限，如果目标VC存储时是明文存储，则操作失败（无需做此权限管控）。
  authDidList: [ string ](name='auth_did_list'),
  // 场景码，找dis工作人员进行分配
  bizCode?: string(name='biz_code'),
  // 目标VC的owner，也就是VC内容中的subject身份。
  did: string(name='did'),
  // 指定查询目标VC时的过滤字段（可是标准VC内容的field），指定此字段后，配合需指定filter_value字段。
  filterField: string(name='filter_field'),
  // ["VerifiableCredential","DelegateVCRepository","LocationInfo"]
  filterValue?: string(name='filter_value'),
  // 保留字段，请求增加授权的调用方did身份对应公钥对所有数据参数的签名（目前托管模式可缺省此字段，未来非托管时需请求端签名，需填此字段）
  signature?: string(name='signature'),
  // 读取目标证书VC的id，通过配置此参数可以直接找到目标VC。
  verifiableClaimId?: string(name='verifiable_claim_id'),
}

model StartDidVcrepositoryAuthResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 调用者需是目标VC的拥有者，也就是目标VC内容中的subject。
授权新的did读取目标VC的权限。
 * Summary: 对已有vc新增授权did
 */
async function startDidVcrepositoryAuth(request: StartDidVcrepositoryAuthRequest): StartDidVcrepositoryAuthResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startDidVcrepositoryAuthEx(request, headers, runtime);
}

/**
 * Description: 调用者需是目标VC的拥有者，也就是目标VC内容中的subject。
授权新的did读取目标VC的权限。
 * Summary: 对已有vc新增授权did
 */
async function startDidVcrepositoryAuthEx(request: StartDidVcrepositoryAuthRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartDidVcrepositoryAuthResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.vcrepository.auth.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartDidVcrepositoryFilterandreadRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 请求读取数据的did。
  did: string(name='did'),
  // 配合owner_did字段一起使用，指定查询目标VC时的过滤字段（可是标准VC内容的字段），指定此字段后，配合需指定filter_value字段。
  filterField: string(name='filter_field'),
  // ["VerifiableCredential","DelegateVCRepository","LocationInfo"]
  filterValue: string(name='filter_value'),
  // 保留字段，请求读的did身份对应公钥对所有数据参数的签名（目前托管模式可缺省此字段，未来非托管时需请求端签名，需填此字段）
  signature?: string(name='signature'),
  // 目标VC的subject字段，参与过滤条件。
  subjectDid: string(name='subject_did'),
  // 场景码，找dis工作人员进行分配
  bizCode?: string(name='biz_code'),
}

model StartDidVcrepositoryFilterandreadResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 可验证声明的完整声明 {"content":{"verion":"0.7.0","issuer":"xxxx","subject":"xxxx","expire":1530735444,"issucanceDate":1530735000,"id":"XXXX","claim":{//用户自定义},"status":{"type":"XXXX","id":"XXXXX"}},"proof":{"type":"ecdsa","created":"2018-06-18T21:19:10Z","verificationMethod":"XXXX","signatureValue":"XXXXX"}}
  verifiableClaimContent?: string(name='verifiable_claim_content'),
}

/**
 * Description: 通过配置目标VC的subject_did 和 过滤字段来查询并读取。
如果调用者不在目标VC的授权名单中，则无法读取目标VC内容。
 * Summary: 查询过滤并读取目标证书数据
 */
async function startDidVcrepositoryFilterandread(request: StartDidVcrepositoryFilterandreadRequest): StartDidVcrepositoryFilterandreadResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startDidVcrepositoryFilterandreadEx(request, headers, runtime);
}

/**
 * Description: 通过配置目标VC的subject_did 和 过滤字段来查询并读取。
如果调用者不在目标VC的授权名单中，则无法读取目标VC内容。
 * Summary: 查询过滤并读取目标证书数据
 */
async function startDidVcrepositoryFilterandreadEx(request: StartDidVcrepositoryFilterandreadRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartDidVcrepositoryFilterandreadResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.vcrepository.filterandread.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartDidVcrepositoryReadwithvcidRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 请求读取数据的did。
  did: string(name='did'),
  // 保留字段，请求读的did身份对应公钥对所有数据参数的签名（目前托管模式可缺省此字段，未来非托管时需请求端签名，需填此字段）
  signature?: string(name='signature'),
  // 要查询的这个vc属于哪个did，如果未指定，did会尝试从默认vc仓库获取
  subjectDid?: string(name='subject_did'),
  // 通过指定目标证书VC的唯一verifiable_claim_id来读取内容。
  verifiableClaimId: string(name='verifiable_claim_id'),
  // 场景码，找dis工作人员进行分配
  bizCode?: string(name='biz_code'),
}

model StartDidVcrepositoryReadwithvcidResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 可验证声明的完整声明 {"content":{"verion":"0.7.0","issuer":"xxxx","subject":"xxxx","expire":1530735444,"issucanceDate":1530735000,"id":"XXXX","claim":{//用户自定义},"status":{"type":"XXXX","id":"XXXXX"}},"proof":{"type":"ecdsa","created":"2018-06-18T21:19:10Z","verificationMethod":"XXXX","signatureValue":"XXXXX"}}
  verifiableClaimContent?: string(name='verifiable_claim_content'),
}

/**
 * Description: 通过提供verifiable_claim_id来读取目标VC内容，如果调用者不在目标VC的授权名单中，则无法读取目标VC内容。
注意通常verifiable_claim_id是“vc:mychain:”为前缀。
 * Summary: 通过vcid读取目标证书数据
 */
async function startDidVcrepositoryReadwithvcid(request: StartDidVcrepositoryReadwithvcidRequest): StartDidVcrepositoryReadwithvcidResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startDidVcrepositoryReadwithvcidEx(request, headers, runtime);
}

/**
 * Description: 通过提供verifiable_claim_id来读取目标VC内容，如果调用者不在目标VC的授权名单中，则无法读取目标VC内容。
注意通常verifiable_claim_id是“vc:mychain:”为前缀。
 * Summary: 通过vcid读取目标证书数据
 */
async function startDidVcrepositoryReadwithvcidEx(request: StartDidVcrepositoryReadwithvcidRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartDidVcrepositoryReadwithvcidResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.vcrepository.readwithvcid.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartDidVcrepositoryReadwithdefineidRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 自定义的业务id，通常此字段不是"vc:mychain:"前缀开头，会使用如下规则生成最终verifiable_claim_id： verifiable_claim_id = "vc:mychain:" + SHA256(Joiner.on(":").join(issuer_did, subject_did, define_id)); 此表达式参与SHA256的 define_id 为用户指定的当前参数。
  defineId: string(name='define_id'),
  // 请求读取数据的did。
  did: string(name='did'),
  // 目标证书VC的颁发者did。
  issuerDid: string(name='issuer_did'),
  // 保留字段，请求读的did身份对应公钥对所有数据参数的签名（目前托管模式可缺省此字段，未来非托管时需请求端签名，需填此字段）
  signature?: string(name='signature'),
  // 目标证书VC的颁发目标did。
  subjectDid: string(name='subject_did'),
  // 场景码，找dis工作人员进行分配
  bizCode?: string(name='biz_code'),
}

model StartDidVcrepositoryReadwithdefineidResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 可验证声明的完整声明 {"content":{"verion":"0.7.0","issuer":"xxxx","subject":"xxxx","expire":1530735444,"issucanceDate":1530735000,"id":"XXXX","claim":{//用户自定义},"status":{"type":"XXXX","id":"XXXXX"}},"proof":{"type":"ecdsa","created":"2018-06-18T21:19:10Z","verificationMethod":"XXXX","signatureValue":"XXXXX"}}
  verifiableClaimContent?: string(name='verifiable_claim_content'),
}

/**
 * Description: 如果业务方在颁发证书VC时，使用了自定义的verifiable_claim_id，则使用此id来读取目标证书内容。
注意：通常自定义的verifiable_claim_id，不是“vc:mychain:”前缀开始。
 * Summary: 通过自定义id读取目标证书内容
 */
async function startDidVcrepositoryReadwithdefineid(request: StartDidVcrepositoryReadwithdefineidRequest): StartDidVcrepositoryReadwithdefineidResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startDidVcrepositoryReadwithdefineidEx(request, headers, runtime);
}

/**
 * Description: 如果业务方在颁发证书VC时，使用了自定义的verifiable_claim_id，则使用此id来读取目标证书内容。
注意：通常自定义的verifiable_claim_id，不是“vc:mychain:”前缀开始。
 * Summary: 通过自定义id读取目标证书内容
 */
async function startDidVcrepositoryReadwithdefineidEx(request: StartDidVcrepositoryReadwithdefineidRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartDidVcrepositoryReadwithdefineidResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.vcrepository.readwithdefineid.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartDidVcrepositoryAuthwithvcidRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 配置此did列表，为这些did分配读取目标VC的权限，如果目标VC存储时是明文存储，则操作失败（无需做此权限管控）。
  authDidList: string(name='auth_did_list'),
  // 场景码，找dis工作人员进行分配
  bizCode?: string(name='biz_code'),
  // 目标VC的owner，也就是VC内容中的subject did身份。
  did: string(name='did'),
  // 保留字段，请求增加授权的调用方did身份对应公钥对所有数据参数的签名（目前托管模式可缺省此字段，未来非托管时需请求端签名，需填此字段）
  signature?: string(name='signature'),
  // 通过指定目标证书VC的唯一verifiable_claim_id来找到目标证书VC并新增授权。
  verifiableClaimId: string(name='verifiable_claim_id'),
}

model StartDidVcrepositoryAuthwithvcidResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 通过提供verifiable_claim_id来找到目标VC内容并追加授权did列表，只有调用者是目标VC的subject才能操作。 注意通常verifiable_claim_id是“vc:mychain:”为前缀。
 * Summary: 通过vcid对目标证书追加授权
 */
async function startDidVcrepositoryAuthwithvcid(request: StartDidVcrepositoryAuthwithvcidRequest): StartDidVcrepositoryAuthwithvcidResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startDidVcrepositoryAuthwithvcidEx(request, headers, runtime);
}

/**
 * Description: 通过提供verifiable_claim_id来找到目标VC内容并追加授权did列表，只有调用者是目标VC的subject才能操作。 注意通常verifiable_claim_id是“vc:mychain:”为前缀。
 * Summary: 通过vcid对目标证书追加授权
 */
async function startDidVcrepositoryAuthwithvcidEx(request: StartDidVcrepositoryAuthwithvcidRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartDidVcrepositoryAuthwithvcidResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.vcrepository.authwithvcid.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartDidVcrepositoryAuthwithdefineidRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 配置此did列表，为这些did分配读取目标VC的权限，如果目标VC存储时是明文存储，则操作失败（无需做此权限管控）。
  authDidList: string(name='auth_did_list'),
  // 场景码，找dis工作人员进行分配
  bizCode?: string(name='biz_code'),
  // 自定义的业务id，通常此字段不是"vc:mychain:"前缀开头，会使用如下规则生成最终verifiable_claim_id： verifiable_claim_id = "vc:mychain:" + SHA256(Joiner.on(":").join(issuer_did, subject_did, define_id)); 此表达式参与SHA256的 define_id 为用户指定的当前参数。
  defineId: string(name='define_id'),
  // 请求操作的did，也是目标VC的owner，也就是VC内容中的subject did身份。
  did: string(name='did'),
  // 目标证书的颁发者did。
  issuerDid: string(name='issuer_did'),
  // 保留字段，请求增加授权的调用方did身份对应公钥对所有数据参数的签名（目前托管模式可缺省此字段，未来非托管时需请求端签名，需填此字段）
  signature?: string(name='signature'),
  // 目标证书VC的颁发目标did。
  subjectDid: string(name='subject_did'),
}

model StartDidVcrepositoryAuthwithdefineidResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 通过提供业务方自定义id来找到目标VC内容并追加授权did列表，只有调用者是目标VC的subject才能操作。 注意通常自定义id不是“vc:mychain:”前缀。
 * Summary: 通过自定义id对目标证书追加授权
 */
async function startDidVcrepositoryAuthwithdefineid(request: StartDidVcrepositoryAuthwithdefineidRequest): StartDidVcrepositoryAuthwithdefineidResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startDidVcrepositoryAuthwithdefineidEx(request, headers, runtime);
}

/**
 * Description: 通过提供业务方自定义id来找到目标VC内容并追加授权did列表，只有调用者是目标VC的subject才能操作。 注意通常自定义id不是“vc:mychain:”前缀。
 * Summary: 通过自定义id对目标证书追加授权
 */
async function startDidVcrepositoryAuthwithdefineidEx(request: StartDidVcrepositoryAuthwithdefineidRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartDidVcrepositoryAuthwithdefineidResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.vcrepository.authwithdefineid.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartDidAgentServicetypeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 枚举类型，描述访问服务的方式
  accessMode?: string(name='access_mode'),
  // 对服务的文字描述，<1000个字符
  description?: string(name='description'),
  // 服务类型创建者did
  did: string(name='did'),
  // {
  //   "item1":"",
  //   "item2":"",
  //   ...
  // }
  serviceInput?: string(name='service_input'),
  // {
  //    "item1":""
  //    "item2":""
  //    ...
  // }
  serviceOutput?: string(name='service_output'),
  // 自定义服务类型，字符数16～32个
  serviceType: string(name='service_type'),
  // 场景码，找dis工作人员进行分配
  bizCode?: string(name='biz_code'),
}

model StartDidAgentServicetypeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 创建成功之后，返回服务类型名
  serviceType?: string(name='service_type'),
}

/**
 * Description: 注册自定义的服务类型，目前只有租户did可以调用
 * Summary: 注册自定义服务类型
 */
async function startDidAgentServicetype(request: StartDidAgentServicetypeRequest): StartDidAgentServicetypeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startDidAgentServicetypeEx(request, headers, runtime);
}

/**
 * Description: 注册自定义的服务类型，目前只有租户did可以调用
 * Summary: 注册自定义服务类型
 */
async function startDidAgentServicetypeEx(request: StartDidAgentServicetypeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartDidAgentServicetypeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.agent.servicetype.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDidAgentServicetypeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 查询者did
  did: string(name='did'),
  // 指定查询的服务类型名
  serviceType: string(name='service_type'),
  // 场景码，找dis工作人员进行分配
  bizCode?: string(name='biz_code'),
}

model QueryDidAgentServicetypeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 服务类型定义列表
  serviceTypes?: [ string ](name='service_types'),
  // 总共有几项
  totalNumber?: long(name='total_number'),
  // 总共有几页
  totalPage?: long(name='total_page'),
}

/**
 * Description: 查询指定服务类型的定义，不支持全量查询
 * Summary: 查询指定服务类型的定义
 */
async function queryDidAgentServicetype(request: QueryDidAgentServicetypeRequest): QueryDidAgentServicetypeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDidAgentServicetypeEx(request, headers, runtime);
}

/**
 * Description: 查询指定服务类型的定义，不支持全量查询
 * Summary: 查询指定服务类型的定义
 */
async function queryDidAgentServicetypeEx(request: QueryDidAgentServicetypeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDidAgentServicetypeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.agent.servicetype.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateDidServicesRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 新增的服务信息
  addSevices?: [ DidDocServicesInfo ](name='add_sevices'),
  // 要删除的服务id列表
  delServices?: [ string ](name='del_services'),
  // 指定要更新的did
  did: string(name='did'),
  // did类型，个人|企业|设备(IOT)
  didType: string(name='did_type'),
  // 场景码，找dis工作人员进行分配
  bizCode?: string(name='biz_code'),
}

model UpdateDidServicesResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 更新后的did doc
  didDoc?: string(name='did_doc'),
}

/**
 * Description: 代理模式下更新企业did doc中service中的字段
 * Summary: 代理更新企业did中的services
 */
async function updateDidServices(request: UpdateDidServicesRequest): UpdateDidServicesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateDidServicesEx(request, headers, runtime);
}

/**
 * Description: 代理模式下更新企业did doc中service中的字段
 * Summary: 代理更新企业did中的services
 */
async function updateDidServicesEx(request: UpdateDidServicesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateDidServicesResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.services.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDidAgentServicediscoveryRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 查询页数
  pageNum: long(name='page_num'),
  // 需要查找的服务类型
  serviceType: string(name='service_type'),
  // 场景码，找dis工作人员进行分配
  // 
  bizCode?: string(name='biz_code'),
}

model QueryDidAgentServicediscoveryResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 当前页数
  currentPage?: long(name='current_page'),
  // 服务列表
  services?: [ DisServiceInfo ](name='services'),
  // 总个数
  totalNum?: long(name='total_num'),
  // 总页数
  totalPage?: long(name='total_page'),
}

/**
 * Description: 服务发现
 * Summary: 服务发现
 */
async function queryDidAgentServicediscovery(request: QueryDidAgentServicediscoveryRequest): QueryDidAgentServicediscoveryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDidAgentServicediscoveryEx(request, headers, runtime);
}

/**
 * Description: 服务发现
 * Summary: 服务发现
 */
async function queryDidAgentServicediscoveryEx(request: QueryDidAgentServicediscoveryRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDidAgentServicediscoveryResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.agent.servicediscovery.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartDidVerifiableclaimIssuerandsaveRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 颁发证书声明
  bareClaim: BareClaim(name='bare_claim'),
  // 过期时间
  expire: long(name='expire'),
  // 由谁来颁发，该did必须为调用者自己或者自己代理的did
  issuer: string(name='issuer'),
  // 为哪个did颁发
  subject: string(name='subject'),
  // 验证声明类型，目前默认VerifiableCredential
  type?: [ string ](name='type'),
  // 验证声明状态方式，目前只支持直接通过声明id上链查找状态方式，后续会支持更多方式
  verifyStatusType?: string(name='verify_status_type'),
  // 场景码，找dis工作人员进行分配
  bizCode?: string(name='biz_code'),
}

model StartDidVerifiableclaimIssuerandsaveResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 可验证声明的完整声明 {"content":{"verion":"0.7.0","issuer":"xxxx","subject":"xxxx","expire":1530735444,"issucanceDate":1530735000,"id":"XXXX","claim":{//用户自定义},"status":{"type":"XXXX","id":"XXXXX"}},"proof":{"type":"ecdsa","created":"2018-06-18T21:19:10Z","verificationMethod":"XXXX","signatureValue":"XXXXX"}}
  verifiableClaimContent?: string(name='verifiable_claim_content'),
  // 声明id
  verifiableClaimId?: string(name='verifiable_claim_id'),
}

/**
 * Description: 为指定did颁发证书,并将保存到对应仓库
 * Summary: 为指定did颁发证书,并将保存到对应仓库
 */
async function startDidVerifiableclaimIssuerandsave(request: StartDidVerifiableclaimIssuerandsaveRequest): StartDidVerifiableclaimIssuerandsaveResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startDidVerifiableclaimIssuerandsaveEx(request, headers, runtime);
}

/**
 * Description: 为指定did颁发证书,并将保存到对应仓库
 * Summary: 为指定did颁发证书,并将保存到对应仓库
 */
async function startDidVerifiableclaimIssuerandsaveEx(request: StartDidVerifiableclaimIssuerandsaveRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartDidVerifiableclaimIssuerandsaveResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.verifiableclaim.issuerandsave.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartDidVcrepositoryVctransmitRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 用户did标示
  did: string(name='did'),
  // 实际参数
  payload: VcTransmitPayload(name='payload'),
  // 场景码，找dis工作人员进行分配
  bizCode?: string(name='biz_code'),
  // transmit在底层vc仓库使用时候是否需要使用did密钥进行信封封装加密，如果设定true则不需要底层信封加密，需要调用方执行vcContent的加密保护。
  notEncrypt?: boolean(name='not_encrypt'),
}

model StartDidVcrepositoryVctransmitResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 具体传输结果
  result?: [ VcTransmitResult ](name='result'),
}

/**
 * Description: 通过agent代理通过VC Repo进行VC传输
 * Summary: 通过agent代理进行VC传输
 */
async function startDidVcrepositoryVctransmit(request: StartDidVcrepositoryVctransmitRequest): StartDidVcrepositoryVctransmitResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startDidVcrepositoryVctransmitEx(request, headers, runtime);
}

/**
 * Description: 通过agent代理通过VC Repo进行VC传输
 * Summary: 通过agent代理进行VC传输
 */
async function startDidVcrepositoryVctransmitEx(request: StartDidVcrepositoryVctransmitRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartDidVcrepositoryVctransmitResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.vcrepository.vctransmit.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateDidPersonWithtwometaRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 身份证号码
  certNo: string(name='cert_no'),
  // 扩展字段
  extensionInfo?: string(name='extension_info'),
  // 姓名
  name: string(name='name'),
  // 名称
  ownerName?: string(name='owner_name'),
  // 自定义个人唯一id，个人在自有模式下的唯一号，调用者需要保证其唯一性
  ownerUid: string(name='owner_uid'),
  // 场景码，找dis工作人员进行分配
  bizCode?: string(name='biz_code'),
}

model CreateDidPersonWithtwometaResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 生成的did字符串
  did?: string(name='did'),
  // 颁发的vcId
  vcId?: string(name='vc_id'),
}

/**
 * Description: 通过个人二要素验证后创建个人did，若未通过个人二要素验证，则不创建did并报错
 * Summary: 通过个人二要素验证后创建个人did
 */
async function createDidPersonWithtwometa(request: CreateDidPersonWithtwometaRequest): CreateDidPersonWithtwometaResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createDidPersonWithtwometaEx(request, headers, runtime);
}

/**
 * Description: 通过个人二要素验证后创建个人did，若未通过个人二要素验证，则不创建did并报错
 * Summary: 通过个人二要素验证后创建个人did
 */
async function createDidPersonWithtwometaEx(request: CreateDidPersonWithtwometaRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateDidPersonWithtwometaResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.person.withtwometa.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateDidCorporateWithtwometaRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 企业名称
  epCertName: string(name='ep_cert_name'),
  // 企业证件号
  epCertNo: string(name='ep_cert_no'),
  // {
  //   "nation": "CN", //企业注册地址
  //   "type": "LimitedCompany", //企业类型
  //   "name": "演示用户名", //必选字段，企业名
  //   "licenceNo": "1111", //营业执照
  //   "address": "1111", //企业地址
  //   "parentName": "", //<-必选字段 业务方名 需要提前协商
  //   "linkType": "indirect", //<- 连接类型，direct直链企业， indirect间链企业
  //   "certifyDate": "2019-1-1", //证书颁发时间
  //   "licenceExpireDate": "2020-1-1", //证书到期时间
  //   "businessScope": "1111", //企业经营范围
  //   "businessAddress": "1111", //企业经营地址
  //   "corporateBusinessType": 0, //<- 企业类型：0 一般企业， 1 个人商户
  //   "channelName": "" //<- 必选字段 业务渠道 需要提前沟通
  // }
  extensionInfo?: string(name='extension_info'),
  // 名称
  // 
  ownerName?: string(name='owner_name'),
  // 自定义企业唯一id，企业在自有模式下的唯一号，调用者需要保证其唯一性
  ownerUid: string(name='owner_uid'),
  // 场景码，找dis工作人员进行分配
  bizCode?: string(name='biz_code'),
}

model CreateDidCorporateWithtwometaResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 生成的did
  // 
  did?: string(name='did'),
  // 颁发的vcId
  vcId?: string(name='vc_id'),
}

/**
 * Description: 通过企业二要素验证后创建企业did
 * Summary: 通过企业二要素验证后创建企业did
 */
async function createDidCorporateWithtwometa(request: CreateDidCorporateWithtwometaRequest): CreateDidCorporateWithtwometaResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createDidCorporateWithtwometaEx(request, headers, runtime);
}

/**
 * Description: 通过企业二要素验证后创建企业did
 * Summary: 通过企业二要素验证后创建企业did
 */
async function createDidCorporateWithtwometaEx(request: CreateDidCorporateWithtwometaRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateDidCorporateWithtwometaResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.corporate.withtwometa.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateDidCorporateWithfourmetaRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 企业名称
  // 
  epCertName: string(name='ep_cert_name'),
  // 企业证件号
  // 
  epCertNo: string(name='ep_cert_no'),
  // { "nation": "CN", //企业注册地址 "type": "LimitedCompany", //企业类型 "name": "演示用户名", //必选字段，企业名 "licenceNo": "1111", //营业执照 "address": "1111", //企业地址 "parentName": "", //<-必选字段 业务方名 需要提前协商 "linkType": "indirect", //<- 连接类型，direct直链企业， indirect间链企业 "certifyDate": "2019-1-1", //证书颁发时间 "licenceExpireDate": "2020-1-1", //证书到期时间 "businessScope": "1111", //企业经营范围 "businessAddress": "1111", //企业经营地址 "corporateBusinessType": 0, //<- 企业类型：0 一般企业， 1 个人商户 "channelName": "" //<- 必选字段 业务渠道 需要提前沟通 }
  // 
  extensionInfo?: string(name='extension_info'),
  // 法人姓名
  // 
  legalPersonCertName: string(name='legal_person_cert_name'),
  // 法人身份证件号
  legalPersonCertNo: string(name='legal_person_cert_no'),
  // 名称
  // 
  ownerName?: string(name='owner_name'),
  // 自定义企业唯一id，企业在自有模式下的唯一号，调用者需要保证其唯一性
  ownerUid: string(name='owner_uid'),
  // 场景码，找dis工作人员进行分配
  bizCode?: string(name='biz_code'),
}

model CreateDidCorporateWithfourmetaResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 生成的did
  // 
  did?: string(name='did'),
  // 颁发的vcId
  // 
  vcId?: string(name='vc_id'),
}

/**
 * Description: 通过企业四要素验证后创建企业did
 * Summary: 通过企业四要素验证后创建企业did
 */
async function createDidCorporateWithfourmeta(request: CreateDidCorporateWithfourmetaRequest): CreateDidCorporateWithfourmetaResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createDidCorporateWithfourmetaEx(request, headers, runtime);
}

/**
 * Description: 通过企业四要素验证后创建企业did
 * Summary: 通过企业四要素验证后创建企业did
 */
async function createDidCorporateWithfourmetaEx(request: CreateDidCorporateWithfourmetaRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateDidCorporateWithfourmetaResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.corporate.withfourmeta.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateDidPersonWithfourmetaRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 银行卡号
  bankCard: string(name='bank_card'),
  // 身份证号码
  // 
  certNo: string(name='cert_no'),
  // 扩展字段
  // 
  extensionInfo?: string(name='extension_info'),
  // 手机号码
  // 
  mobile: string(name='mobile'),
  // 姓名
  // 
  name: string(name='name'),
  // 名称
  // 
  ownerName?: string(name='owner_name'),
  // 自定义个人唯一id，个人在自有模式下的唯一号，调用者需要保证其唯一性
  ownerUid: string(name='owner_uid'),
  // 场景码，找dis工作人员进行分配
  bizCode?: string(name='biz_code'),
}

model CreateDidPersonWithfourmetaResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 生成的did字符串
  // 
  did?: string(name='did'),
  // 颁发的vcId
  // 
  vcId?: string(name='vc_id'),
}

/**
 * Description: 通过个人四要素验证后创建个人did
 * Summary: 通过个人四要素验证后创建个人did
 */
async function createDidPersonWithfourmeta(request: CreateDidPersonWithfourmetaRequest): CreateDidPersonWithfourmetaResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createDidPersonWithfourmetaEx(request, headers, runtime);
}

/**
 * Description: 通过个人四要素验证后创建个人did
 * Summary: 通过个人四要素验证后创建个人did
 */
async function createDidPersonWithfourmetaEx(request: CreateDidPersonWithfourmetaRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateDidPersonWithfourmetaResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.person.withfourmeta.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartDidCorporateTwometaRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 颁发证书的subject did
  // 
  did: string(name='did'),
  // 企业名称   
  epCertName: string(name='ep_cert_name'),
  // 企业证件号
  // 
  epCertNo: string(name='ep_cert_no'),
  // 场景码，找dis工作人员进行分配
  bizCode?: string(name='biz_code'),
}

model StartDidCorporateTwometaResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // vc id，可通过该字符串来查询vc具体内容
  vcId?: string(name='vc_id'),
}

/**
 * Description: 对did进行企业二要素实名认证
 * Summary: 对did进行企业二要素实名认证
 */
async function startDidCorporateTwometa(request: StartDidCorporateTwometaRequest): StartDidCorporateTwometaResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startDidCorporateTwometaEx(request, headers, runtime);
}

/**
 * Description: 对did进行企业二要素实名认证
 * Summary: 对did进行企业二要素实名认证
 */
async function startDidCorporateTwometaEx(request: StartDidCorporateTwometaRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartDidCorporateTwometaResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.corporate.twometa.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartDidCorporateThreemetaRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 证书的subject did
  // 
  did: string(name='did'),
  // 企业名称
  // 
  epCertName: string(name='ep_cert_name'),
  // 企业证件号
  // 
  epCertNo: string(name='ep_cert_no'),
  // 法人姓名
  // 
  legalPersonCertName: string(name='legal_person_cert_name'),
  // 场景码，找dis工作人员进行分配
  bizCode?: string(name='biz_code'),
}

model StartDidCorporateThreemetaResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // vc id，可通过该字符串来查询vc具体内容
  // 
  vcId?: string(name='vc_id'),
}

/**
 * Description: 对did进行企业三要素实名认证
 * Summary: 对did进行企业三要素实名认证
 */
async function startDidCorporateThreemeta(request: StartDidCorporateThreemetaRequest): StartDidCorporateThreemetaResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startDidCorporateThreemetaEx(request, headers, runtime);
}

/**
 * Description: 对did进行企业三要素实名认证
 * Summary: 对did进行企业三要素实名认证
 */
async function startDidCorporateThreemetaEx(request: StartDidCorporateThreemetaRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartDidCorporateThreemetaResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.corporate.threemeta.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartDidCorporateFourmetaRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 颁发证书的subject did
  // 
  did: string(name='did'),
  // 企业名称
  // 
  epCertName: string(name='ep_cert_name'),
  // 企业证件号
  // 
  epCertNo: string(name='ep_cert_no'),
  // 法人姓名
  // 
  legalPersonCertName: string(name='legal_person_cert_name'),
  // 法人身份证件号
  // 
  legalPersonCertNo: string(name='legal_person_cert_no'),
  // 场景码，找dis工作人员进行分配
  bizCode?: string(name='biz_code'),
}

model StartDidCorporateFourmetaResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // vc id，可通过该字符串来查询vc具体内容
  // 
  vcId?: string(name='vc_id'),
}

/**
 * Description: 对did进行企业四要素实名认证
 * Summary: 对did进行企业四要素实名认证
 */
async function startDidCorporateFourmeta(request: StartDidCorporateFourmetaRequest): StartDidCorporateFourmetaResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startDidCorporateFourmetaEx(request, headers, runtime);
}

/**
 * Description: 对did进行企业四要素实名认证
 * Summary: 对did进行企业四要素实名认证
 */
async function startDidCorporateFourmetaEx(request: StartDidCorporateFourmetaRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartDidCorporateFourmetaResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.corporate.fourmeta.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartDidCertificationFourmetaRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 银行卡号
  // 
  bankCard: string(name='bank_card'),
  // 身份证号码
  // 
  certNo: string(name='cert_no'),
  // 证书的subject did
  // 
  did: string(name='did'),
  // 手机号码
  // 
  mobile: string(name='mobile'),
  // 姓名
  // 
  name: string(name='name'),
  // 场景码，找dis工作人员进行分配
  bizCode?: string(name='biz_code'),
}

model StartDidCertificationFourmetaResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // vc id，可通过该字符串来查询vc具体内容
  // 
  vcId?: string(name='vc_id'),
}

/**
 * Description: 四要素实名认证
 * Summary: 四要素实名认证
 */
async function startDidCertificationFourmeta(request: StartDidCertificationFourmetaRequest): StartDidCertificationFourmetaResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startDidCertificationFourmetaEx(request, headers, runtime);
}

/**
 * Description: 四要素实名认证
 * Summary: 四要素实名认证
 */
async function startDidCertificationFourmetaEx(request: StartDidCertificationFourmetaRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartDidCertificationFourmetaResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.certification.fourmeta.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDidVcrepositoryFuzzyquerywithdefinedidRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 自定义的业务id，通常此字段不是"vc:mychain:"前缀开头，会使用如下规则生成最终verifiable_claim_id： verifiable_claim_id = "vc:mychain:" + SHA256(Joiner.on(":").join(issuer_did, subject_did, define_id)); 此表达式参与SHA256的 define_id 为用户指定的当前参数。查询时使用verifiable_claim_id*
  defineId: string(name='define_id'),
  // 请求读取数据的did
  did: string(name='did'),
  // 目标证书VC的颁发者did。
  issuerDid: string(name='issuer_did'),
  // 目标证书VC的颁发目标did。
  // 
  subjectDid: string(name='subject_did'),
  // 场景码，找dis工作人员进行分配
  bizCode?: string(name='biz_code'),
}

model QueryDidVcrepositoryFuzzyquerywithdefinedidResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 可验证声明的完整声明列表
  verifiableClaimContent?: [ string ](name='verifiable_claim_content'),
}

/**
 * Description: 模糊查询VC列表
 * Summary: 模糊查询vc
 */
async function queryDidVcrepositoryFuzzyquerywithdefinedid(request: QueryDidVcrepositoryFuzzyquerywithdefinedidRequest): QueryDidVcrepositoryFuzzyquerywithdefinedidResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDidVcrepositoryFuzzyquerywithdefinedidEx(request, headers, runtime);
}

/**
 * Description: 模糊查询VC列表
 * Summary: 模糊查询vc
 */
async function queryDidVcrepositoryFuzzyquerywithdefinedidEx(request: QueryDidVcrepositoryFuzzyquerywithdefinedidRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDidVcrepositoryFuzzyquerywithdefinedidResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.vcrepository.fuzzyquerywithdefinedid.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartDidCommonAgentcreateRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 场景码，找dis工作人员进行分配
  bizCode?: string(name='biz_code'),
  // 自定信息
  extensionInfo?: string(name='extension_info'),
  // 所有需要关联的外键，外键必须已did auth key controller的did作为前缀+“sidekey:”+外键
  indexs?: [ string ](name='indexs'),
  // 名称
  ownerName: string(name='owner_name'),
  // 唯一号，比如可以是hash(证件类型+企业营业执照号) 计算出来的唯一值等
  ownerUid: string(name='owner_uid'),
  // 携带自己定义的服务类型
  services?: [ DidDocServicesInfo ](name='services'),
  // 指定did的类型
  entityType?: string(name='entity_type'),
}

model StartDidCommonAgentcreateResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 生成的did字符串
  did?: string(name='did'),
}

/**
 * Description: 通过代理模式为普通账号创建did
 * Summary: 通过代理模式为普通账号创建did
 */
async function startDidCommonAgentcreate(request: StartDidCommonAgentcreateRequest): StartDidCommonAgentcreateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startDidCommonAgentcreateEx(request, headers, runtime);
}

/**
 * Description: 通过代理模式为普通账号创建did
 * Summary: 通过代理模式为普通账号创建did
 */
async function startDidCommonAgentcreateEx(request: StartDidCommonAgentcreateRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartDidCommonAgentcreateResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.common.agentcreate.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartDidCorporateFaceauthRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 回调通知地址
  callBackUrl?: string(name='call_back_url'),
  // 企业名称
  epCertName: string(name='ep_cert_name'),
  // 企业证件号
  epCertNo: string(name='ep_cert_no'),
  // 企业证件类型（NATIONAL_LEGAL（工商注册号）或 NATIONAL_LEGAL_MERGE （ 社会统一信用代码））
  epCertType: string(name='ep_cert_type'),
  // { "nation": "CN", //企业注册地址 "type": "LimitedCompany", //企业类型 "name": "演示用户名", //必选字段，企业名 "licenceNo": "1111", //营业执照 "address": "1111", //企业地址 "parentName": "", //<-必选字段 业务方名 需要提前协商 "linkType": "indirect", //<- 连接类型，direct直链企业， indirect间链企业 "certifyDate": "2019-1-1", //证书颁发时间 "licenceExpireDate": "2020-1-1", //证书到期时间 "businessScope": "1111", //企业经营范围 "businessAddress": "1111", //企业经营地址 "corporateBusinessType": 0, //<- 企业类型：0 一般企业， 1 个人商户 "channelName": "" //<- 必选字段 业务渠道 需要提前沟通 }
  extensionInfo?: string(name='extension_info'),
  // 企业法人
  legalPersonCertName: string(name='legal_person_cert_name'),
  // 法人身份证号
  legalPersonCertNo: string(name='legal_person_cert_no'),
  // 认证完成后回跳地址
  merchantUrl?: string(name='merchant_url'),
  // 名称
  ownerName?: string(name='owner_name'),
  // 自定义企业唯一id，企业在自有模式下的唯一号，调用者需要保证其唯一性
  ownerUid?: string(name='owner_uid'),
  // 场景码，找dis工作人员进行分配	
  bizCode?: string(name='biz_code'),
  // 产品渲染方式：H5、NATIVE 或 PC, 默认为H5
  group?: string(name='group'),
}

model StartDidCorporateFaceauthResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 认证ID
  certifyId?: string(name='certify_id'),
  // 二维码URL，用户支付宝扫一扫实人认证
  certifyUrl?: string(name='certify_url'),
}

/**
 * Description: 企业法人刷脸认证
 * Summary: 企业法人刷脸认证
 */
async function startDidCorporateFaceauth(request: StartDidCorporateFaceauthRequest): StartDidCorporateFaceauthResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startDidCorporateFaceauthEx(request, headers, runtime);
}

/**
 * Description: 企业法人刷脸认证
 * Summary: 企业法人刷脸认证
 */
async function startDidCorporateFaceauthEx(request: StartDidCorporateFaceauthRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartDidCorporateFaceauthResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.corporate.faceauth.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDidCorporateFaceauthRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 认证ID，用于查询认证结果
  // 
  certifyId: string(name='certify_id'),
  // 场景码，找dis工作人员进行分配
  bizCode?: string(name='biz_code'),
  // 产品渲染方式：H5、NATIVE 或 PC
  group?: string(name='group'),
}

model QueryDidCorporateFaceauthResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 生成的did
  did?: string(name='did'),
  // vc id，可通过该字符串来查询vc具体内容
  vcId?: string(name='vc_id'),
}

/**
 * Description: 查询企业法人实人结果
 * Summary: 查询企业法人实人结果
 */
async function queryDidCorporateFaceauth(request: QueryDidCorporateFaceauthRequest): QueryDidCorporateFaceauthResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDidCorporateFaceauthEx(request, headers, runtime);
}

/**
 * Description: 查询企业法人实人结果
 * Summary: 查询企业法人实人结果
 */
async function queryDidCorporateFaceauthEx(request: QueryDidCorporateFaceauthRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDidCorporateFaceauthResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.corporate.faceauth.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteDidVcrepositoryVcRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 要删除的vc owner
  did: string(name='did'),
  // 带删除的VC列表
  vcList: [ string ](name='vc_list'),
  // 场景码，找dis工作人员进行分配
  bizCode?: string(name='biz_code'),
}

model DeleteDidVcrepositoryVcResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 用户删除不需要的VC
 * Summary: 用户删除不需要的vc
 */
async function deleteDidVcrepositoryVc(request: DeleteDidVcrepositoryVcRequest): DeleteDidVcrepositoryVcResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteDidVcrepositoryVcEx(request, headers, runtime);
}

/**
 * Description: 用户删除不需要的VC
 * Summary: 用户删除不需要的vc
 */
async function deleteDidVcrepositoryVcEx(request: DeleteDidVcrepositoryVcRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteDidVcrepositoryVcResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.vcrepository.vc.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartDidZkpverifiableclaimProofRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 场景码，找dis工作人员进行分配
  bizCode?: string(name='biz_code'),
  // vc对应的授予者
  subject: string(name='subject'),
  // vc原文
  vc: string(name='vc'),
  // zkp证明生成信息
  zkpInfo: [ DidZKPInfo ](name='zkp_info'),
}

model StartDidZkpverifiableclaimProofResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 替换为zkp证明的VC
  zkpVc?: string(name='zkp_vc'),
}

/**
 * Description:  构造包含零知识 字段的VC
 * Summary: 构造零知识证明的VC
 */
async function startDidZkpverifiableclaimProof(request: StartDidZkpverifiableclaimProofRequest): StartDidZkpverifiableclaimProofResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startDidZkpverifiableclaimProofEx(request, headers, runtime);
}

/**
 * Description:  构造包含零知识 字段的VC
 * Summary: 构造零知识证明的VC
 */
async function startDidZkpverifiableclaimProofEx(request: StartDidZkpverifiableclaimProofRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartDidZkpverifiableclaimProofResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.zkpverifiableclaim.proof.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model VerifyDidZkpverifiableclaimProofRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 场景码，找dis工作人员进行分配
  bizCode?: string(name='biz_code'),
  // 包含ZKP Proof的可验证声明
  vc: string(name='vc'),
  // ZKP验证信息
  verifyZkpProof: [ DidZKPInfo ](name='verify_zkp_proof'),
}

model VerifyDidZkpverifiableclaimProofResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 验证包含ZKP Proof的VC
 * Summary: 验证包含ZKP Proof的VC
 */
async function verifyDidZkpverifiableclaimProof(request: VerifyDidZkpverifiableclaimProofRequest): VerifyDidZkpverifiableclaimProofResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return verifyDidZkpverifiableclaimProofEx(request, headers, runtime);
}

/**
 * Description: 验证包含ZKP Proof的VC
 * Summary: 验证包含ZKP Proof的VC
 */
async function verifyDidZkpverifiableclaimProofEx(request: VerifyDidZkpverifiableclaimProofRequest, headers: map[string]string, runtime: Util.RuntimeOptions): VerifyDidZkpverifiableclaimProofResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.zkpverifiableclaim.proof.verify', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateDidPersonFacevrfRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 场景码，通常针对性特别支持，或者防止多调用方使用相同租户身份的情况下用bizCode做区分。
  bizCode?: string(name='biz_code'),
  // 请求的唯一标识，通常为32字符宽度的字符串内容，也可以只用UUID，此参数通常用来支持幂等，或者排查问题，调用方可以使用业务流水号。
  bizId: string(name='biz_id'),
  // 姓名字段，真实姓名，不可包含空格等特殊字符。
  certName: string(name='cert_name'),
  // 证件号码，要求带有字母的情况使用大写字母。
  certNo: string(name='cert_no'),
  // 份信息来源类型，当前仅支持证件（CERT_INFO）
  identityType: string(name='identity_type'),
  // 证件类型，当前仅支持身份证（IDENTITY_CARD）
  certType: string(name='cert_type'),
  // metainfo 环境参数，需要通过客户端 SDK 获取
  metaInfo: string(name='meta_info'),
  // OCR 能力对两个扩展参数，map的json格式：tradeParam_needOcr=true tradeParam_verifyStageCheckUsable=true
  externParam?: string(name='extern_param'),
  // DID未来创建锚定的用户身份唯一关联，如果不设置此参数则使用二要素拼接后的哈希值 SHA256("张三"+"210282*****X") 来进行关联创建DID，并且支持幂等。
  uid?: string(name='uid'),
}

model CreateDidPersonFacevrfResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 可信实人认证的唯一标识，返回后用于移动端进行唤起刷脸，也用于后续查询认证结果的关键入参。
  certifyId?: string(name='certify_id'),
}

/**
 * Description: 支持移动端APP的安卓和IOS集成SDK进行刷脸认证，在查询query认证结果通过的情况下创建DID身份。
 * Summary: APP移动端刷脸认证成功后创建DID
 */
async function createDidPersonFacevrf(request: CreateDidPersonFacevrfRequest): CreateDidPersonFacevrfResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createDidPersonFacevrfEx(request, headers, runtime);
}

/**
 * Description: 支持移动端APP的安卓和IOS集成SDK进行刷脸认证，在查询query认证结果通过的情况下创建DID身份。
 * Summary: APP移动端刷脸认证成功后创建DID
 */
async function createDidPersonFacevrfEx(request: CreateDidPersonFacevrfRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateDidPersonFacevrfResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.person.facevrf.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDidPersonFacevrfRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 可能由于租户ID被多个调用方公用时候，使用bizCode作为隔离区分。
  bizCode?: string(name='biz_code'),
  // 可信实人认证的唯一标识，用于核心查询认证结果的唯一标识。
  certifyId: string(name='certify_id'),
  // 认证材料（人脸图像，如移动端采集认证后获得的人脸图像）的哈希
  materialHash?: string(name='material_hash'),
  // 请求的唯一标识，通常为32字符宽度的字符串内容，也可以只用UUID，此参数通常用来支持幂等，或者排查问题，调用方可以使用业务流水号。
  // 与创建申请认证的接口的bizId目前不强校验一致性。
  bizId: string(name='biz_id'),
}

model QueryDidPersonFacevrfResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 认证是否通过。
  passed?: string(name='passed'),
  // 认证材料哈希是否匹配。 如果有传入材料哈希参数，匹配则返回值为 T；不匹配则返回值为 F。如果无材料哈希参数传入，则返回空。
  materialMatched?: string(name='material_matched'),
  // 身份信息，目前只有在ocr的场景下才有返回。
  // certName/certNo：本次认证通过的姓名和身份证；ocrInfo：本次OCR识别的结果，包含如下信息："address": 地址"nationality": 名族"num":身份证号码"sex":性别"name": 名称"birth": 生日"issue": 签发机关"endDate":到期日"startDate":发证日期；注意:认证通过的信息和OCR识别的信息可能不一致
  identityInfo?: string(name='identity_info'),
  // 长度不超过128字符的分布式数字身份DID
  did?: string(name='did'),
}

/**
 * Description: 查询之前发起的实人认证的结果，如果认证通过就创建DID身份并返回。
 * Summary: 查询可信实人认证的结果并创建DID
 */
async function queryDidPersonFacevrf(request: QueryDidPersonFacevrfRequest): QueryDidPersonFacevrfResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDidPersonFacevrfEx(request, headers, runtime);
}

/**
 * Description: 查询之前发起的实人认证的结果，如果认证通过就创建DID身份并返回。
 * Summary: 查询可信实人认证的结果并创建DID
 */
async function queryDidPersonFacevrfEx(request: QueryDidPersonFacevrfRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDidPersonFacevrfResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.person.facevrf.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateDidPersonFacevrfminiappRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 场景码，通常针对性特别支持，或者防止多调用方使用相同租户身份的情况下用bizCode做区分。
  bizCode?: string(name='biz_code'),
  // 请求的唯一标识，通常为32字符宽度的字符串内容，也可以只用UUID，此参数通常用来支持幂等，或者排查问题，调用方可以使用业务流水号。
  bizId: string(name='biz_id'),
  // 姓名字段，真实姓名，不可包含空格等特殊字符。
  certName: string(name='cert_name'),
  // 证件号码，要求带有字母的情况使用大写字母。
  certNo: string(name='cert_no'),
  // 身份信息来源类型，当前仅支持证件（CERT_INFO）
  identityType: string(name='identity_type'),
  // 证件类型，当前仅支持身份证（IDENTITY_CARD）
  certType: string(name='cert_type'),
  // 认证结束回跳地址
  returnUrl: string(name='return_url'),
  // DID未来创建锚定的用户身份唯一关联，如果不设置此参数则使用二要素拼接后的哈希值 SHA256("张三"+"210282*****X") 来进行关联创建DID，并且支持幂等。
  uid?: string(name='uid'),
  // 刷脸类型，目前只支持FACE_SDK、FACE
  faceType?: string(name='face_type'),
}

model CreateDidPersonFacevrfminiappResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 查询刷脸结果唯一标识
  certifyId?: string(name='certify_id'),
  // 认证流程入口 URL。
  certifyUrl?: string(name='certify_url'),
}

/**
 * Description: h5或者小程序刷脸认证成功后创建DID
 * Summary: h5或者小程序刷脸认证成功后创建DID
 */
async function createDidPersonFacevrfminiapp(request: CreateDidPersonFacevrfminiappRequest): CreateDidPersonFacevrfminiappResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createDidPersonFacevrfminiappEx(request, headers, runtime);
}

/**
 * Description: h5或者小程序刷脸认证成功后创建DID
 * Summary: h5或者小程序刷脸认证成功后创建DID
 */
async function createDidPersonFacevrfminiappEx(request: CreateDidPersonFacevrfminiappRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateDidPersonFacevrfminiappResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.person.facevrfminiapp.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDidPersonFacevrfminiappRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 可能由于租户ID被多个调用方公用时候，使用bizCode作为隔离区分。
  bizCode?: string(name='biz_code'),
  // 请求的唯一标识，通常为32字符宽度的字符串内容，也可以只用UUID，此参数通常用来支持幂等，或者排查问题，调用方可以使用业务流水号。 与创建申请认证的接口的bizId目前不强校验一致性。
  bizId: string(name='biz_id'),
  // 可信实人认证的唯一标识，用于核心查询认证结果的唯一标识。
  certifyId: string(name='certify_id'),
}

model QueryDidPersonFacevrfminiappResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 认证是否通过。
  passed?: string(name='passed'),
  // 长度不超过128字符的分布式数字身份DID
  did?: string(name='did'),
}

/**
 * Description: 查询之前发起的实人认证的结果，如果认证通过就创建DID身份并返回。
 * Summary: 查询小程序刷脸的结果并创建DID
 */
async function queryDidPersonFacevrfminiapp(request: QueryDidPersonFacevrfminiappRequest): QueryDidPersonFacevrfminiappResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDidPersonFacevrfminiappEx(request, headers, runtime);
}

/**
 * Description: 查询之前发起的实人认证的结果，如果认证通过就创建DID身份并返回。
 * Summary: 查询小程序刷脸的结果并创建DID
 */
async function queryDidPersonFacevrfminiappEx(request: QueryDidPersonFacevrfminiappRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDidPersonFacevrfminiappResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.person.facevrfminiapp.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartDidVcrepositoryIssuenewocpRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 配置此列表，则说明需要DIS对证书声明内容加密处理，并且控制访问权限，此列表为初始配置的did名单，拥有对此颁发证书的读取权限。 如果不配置此列表，则DIS默认将明文存储此证书，任何did都可以访问此证书声明内容。
  authDidList?: [ string ](name='auth_did_list'),
  // 颁发证书声明的原始声明内容，其中claim字段为json格式
  // 
  bareClaim: BareClaim(name='bare_claim'),
  // 过期时间，如果用不过期可以设置为：-1。 注意如果证书过期，则无法再通过VC Repository读取访问此证书内容。
  expire: long(name='expire'),
  // 颁发证书方，该did必须为调用者自己或者自己代理的did。
  // 
  issuer: string(name='issuer'),
  // 1 - 指定id将被按照verifiable_claim_id = "vc:mychain:" + SHA256(Joiner.on(":").join(subject, verifiable_claim_id.substring(0,50)))+verifiable_claim_id.substring(50);此表达式参与SHA256的 verifiable_claim_id 为用户指定的参数。
  specifiedClaimIdType?: long(name='specified_claim_id_type'),
  // 颁发证书的目标did，此目标did将拥有存储到VC Repository的数据管控权限，比如：授权给其它did读取此证书的权限。
  subject: string(name='subject'),
  // 通过层级定义的证书类型说明，在使用VC Repository的情况下默认为：["VerifiableCredential","DelegateVCRepository"]。 如果用户希望通过type来过滤读取证书VC，那么可以在此列表后面追加层次定义说明，方便后续读取证书在VC Repository进行过滤。（如果读取方已知verifiable_claim_id可以直接过滤读取）
  type?: [ string ](name='type'),
  // 如果指定，最终会使用此id会参与生成的证书的verifiable_claim_id，但是调用方需要保证设置值的唯一性，重复的id会引起最终verifiable_claim_id重复，导致被拒绝颁发证书。 如果不指定，则会随机生成一个规范的verifiable_claim_id。 verifiable_claim_id = "vc:mychain:" + SHA256(Joiner.on(":").join(subject, verifiable_claim_id)); 此表达式参与SHA256的 verifiable_claim_id 为用户指定的参数。
  verifiableClaimId?: string(name='verifiable_claim_id'),
  // 验证声明状态方式，目前只支持直接通过声明id上链查找状态方式，后续会支持更多方式
  verifyStatusType?: string(name='verify_status_type'),
  // 场景码，找dis工作人员进行分配
  // 
  bizCode?: string(name='biz_code'),
}

model StartDidVcrepositoryIssuenewocpResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 可验证声明的完整声明 {"content":{"verion":"0.7.0","issuer":"xxxx","subject":"xxxx","expire":1530735444,"issucanceDate":1530735000,"id":"XXXX","claim":{//用户自定义},"status":{"type":"XXXX","id":"XXXXX"}},"proof":{"type":"ecdsa","created":"2018-06-18T21:19:10Z","verificationMethod":"XXXX","signatureValue":"XXXXX"}}
  verifiableClaimContent?: string(name='verifiable_claim_content'),
  // 颁发的证书唯一id，颁发成功后返回。
  // 
  verifiableClaimId?: string(name='verifiable_claim_id'),
}

/**
 * Description: 使用自己或者代理的did为指定did颁发证书，同时在VC Repository中对证书VC进行存储。 支持授权管理，只有被授权的did未来才可以访问获取此颁发的证书数据。
 * Summary: 指定did颁发证书，并存储（新商品）
 */
async function startDidVcrepositoryIssuenewocp(request: StartDidVcrepositoryIssuenewocpRequest): StartDidVcrepositoryIssuenewocpResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startDidVcrepositoryIssuenewocpEx(request, headers, runtime);
}

/**
 * Description: 使用自己或者代理的did为指定did颁发证书，同时在VC Repository中对证书VC进行存储。 支持授权管理，只有被授权的did未来才可以访问获取此颁发的证书数据。
 * Summary: 指定did颁发证书，并存储（新商品）
 */
async function startDidVcrepositoryIssuenewocpEx(request: StartDidVcrepositoryIssuenewocpRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartDidVcrepositoryIssuenewocpResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.vcrepository.issuenewocp.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartDidVerifiableclaimIssurenewocpRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 颁发证书声明
  bareClaim: BareClaim(name='bare_claim'),
  // 过期时间
  expire: long(name='expire'),
  // 由谁来颁发，该did必须为调用者自己或者自己代理的did
  issuer: string(name='issuer'),
  // 为哪个did颁发
  subject: string(name='subject'),
  // 验证声明类型，目前默认VerifiableCredential
  type?: [ string ](name='type'),
  // 验证声明状态方式，目前只支持直接通过声明id上链查找状态方式，后续会支持更多方式
  verifyStatusType?: string(name='verify_status_type'),
  // 场景码，找dis工作人员进行分配
  bizCode?: string(name='biz_code'),
}

model StartDidVerifiableclaimIssurenewocpResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 可验证声明的完整声明 {"content":{"verion":"0.7.0","issuer":"xxxx","subject":"xxxx","expire":1530735444,"issucanceDate":1530735000,"id":"XXXX","claim":{//用户自定义},"status":{"type":"XXXX","id":"XXXXX"}},"proof":{"type":"ecdsa","created":"2018-06-18T21:19:10Z","verificationMethod":"XXXX","signatureValue":"XXXXX"}}
  verifiableClaimContent?: string(name='verifiable_claim_content'),
  // 声明id
  verifiableClaimId?: string(name='verifiable_claim_id'),
}

/**
 * Description: 使用自己或者代理的did为指定did颁发证书
 * Summary: 为指定did颁发证书（新商品）
 */
async function startDidVerifiableclaimIssurenewocp(request: StartDidVerifiableclaimIssurenewocpRequest): StartDidVerifiableclaimIssurenewocpResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startDidVerifiableclaimIssurenewocpEx(request, headers, runtime);
}

/**
 * Description: 使用自己或者代理的did为指定did颁发证书
 * Summary: 为指定did颁发证书（新商品）
 */
async function startDidVerifiableclaimIssurenewocpEx(request: StartDidVerifiableclaimIssurenewocpRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartDidVerifiableclaimIssurenewocpResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.verifiableclaim.issurenewocp.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateDidPersonWithtwometanewocpRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 身份证号码
  certNo: string(name='cert_no'),
  // 扩展字段
  extensionInfo?: string(name='extension_info'),
  // 姓名
  name: string(name='name'),
  // 名称
  ownerName?: string(name='owner_name'),
  // 自定义个人唯一id，个人在自有模式下的唯一号，调用者需要保证其唯一性
  ownerUid: string(name='owner_uid'),
  // 场景码，找dis工作人员进行分配
  bizCode?: string(name='biz_code'),
}

model CreateDidPersonWithtwometanewocpResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 生成的did字符串
  did?: string(name='did'),
  // 颁发的vcId
  vcId?: string(name='vc_id'),
}

/**
 * Description: 通过个人二要素验证后创建个人did，若未通过个人二要素验证，则不创建did并报错
 * Summary: 通过个人二要素验证后创建个人did（新）
 */
async function createDidPersonWithtwometanewocp(request: CreateDidPersonWithtwometanewocpRequest): CreateDidPersonWithtwometanewocpResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createDidPersonWithtwometanewocpEx(request, headers, runtime);
}

/**
 * Description: 通过个人二要素验证后创建个人did，若未通过个人二要素验证，则不创建did并报错
 * Summary: 通过个人二要素验证后创建个人did（新）
 */
async function createDidPersonWithtwometanewocpEx(request: CreateDidPersonWithtwometanewocpRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateDidPersonWithtwometanewocpResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.person.withtwometanewocp.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateDidPersonWiththreemetanewocpRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 身份证号码
  certNo: string(name='cert_no'),
  // 扩展字段
  extensionInfo?: string(name='extension_info'),
  // 手机号码
  mobile: string(name='mobile'),
  // 姓名
  name: string(name='name'),
  // 名称
  ownerName?: string(name='owner_name'),
  // 自定义个人唯一id，个人在自有模式下的唯一号，调用者需要保证其唯一性
  ownerUid: string(name='owner_uid'),
  // 场景码，找dis工作人员进行分配
  bizCode?: string(name='biz_code'),
}

model CreateDidPersonWiththreemetanewocpResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 生成的did字符串
  did?: string(name='did'),
  // 颁发的vcId
  vcId?: string(name='vc_id'),
}

/**
 * Description: 通过个人三要素验证后创建个人did，若未通过个人三要素验证，则不创建did并报错
 * Summary: 通过个人三要素验证后创建个人did（新）
 */
async function createDidPersonWiththreemetanewocp(request: CreateDidPersonWiththreemetanewocpRequest): CreateDidPersonWiththreemetanewocpResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createDidPersonWiththreemetanewocpEx(request, headers, runtime);
}

/**
 * Description: 通过个人三要素验证后创建个人did，若未通过个人三要素验证，则不创建did并报错
 * Summary: 通过个人三要素验证后创建个人did（新）
 */
async function createDidPersonWiththreemetanewocpEx(request: CreateDidPersonWiththreemetanewocpRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateDidPersonWiththreemetanewocpResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.person.withthreemetanewocp.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartDidIdentificationFaceauthnewocpRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 认证类型,枚举值 PC_AUTH、APP_AUTH
  authType: string(name='auth_type'),
  // 颁发证书的subject did
  did: string(name='did'),
  // 用户身份信息
  identityParam: IdentityParam(name='identity_param'),
  // 认证接口回调路径，POST接口 请求示例： { "certifyId":"0242de204e1a2c3ed6ee5e21d8a57a4c", "did":"xxxxx","vcId":"xxxxx" }
  returnUrl?: string(name='return_url'),
  // 场景码，找dis工作人员进行分配
  bizCode?: string(name='biz_code'),
}

model StartDidIdentificationFaceauthnewocpResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 认证ID
  certifyId?: string(name='certify_id'),
  // 二维码URL，用户支付宝扫一扫实人认证
  certifyUrl?: string(name='certify_url'),
}

/**
 * Description: 开始实人认证
 * Summary: 开始实人认证（新商品）
 */
async function startDidIdentificationFaceauthnewocp(request: StartDidIdentificationFaceauthnewocpRequest): StartDidIdentificationFaceauthnewocpResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startDidIdentificationFaceauthnewocpEx(request, headers, runtime);
}

/**
 * Description: 开始实人认证
 * Summary: 开始实人认证（新商品）
 */
async function startDidIdentificationFaceauthnewocpEx(request: StartDidIdentificationFaceauthnewocpRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartDidIdentificationFaceauthnewocpResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.identification.faceauthnewocp.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateDidPersonFacevrfnewocpRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 场景码，通常针对性特别支持，或者防止多调用方使用相同租户身份的情况下用bizCode做区分。
  bizCode?: string(name='biz_code'),
  // 请求的唯一标识，通常为32字符宽度的字符串内容，也可以只用UUID，此参数通常用来支持幂等，或者排查问题，调用方可以使用业务流水号。
  bizId: string(name='biz_id'),
  // 姓名字段，真实姓名，不可包含空格等特殊字符。
  certName: string(name='cert_name'),
  // 证件号码，要求带有字母的情况使用大写字母。
  certNo: string(name='cert_no'),
  // 份信息来源类型，当前仅支持证件（CERT_INFO）
  identityType: string(name='identity_type'),
  // 证件类型，当前仅支持身份证（IDENTITY_CARD）
  certType: string(name='cert_type'),
  // metainfo 环境参数，需要通过客户端 SDK 获取
  metaInfo: string(name='meta_info'),
  // OCR 能力对两个扩展参数，map的json格式：tradeParam_needOcr=true tradeParam_verifyStageCheckUsable=true
  externParam?: string(name='extern_param'),
  // DID未来创建锚定的用户身份唯一关联，如果不设置此参数则使用二要素拼接后的哈希值 SHA256("张三"+"210282*****X") 来进行关联创建DID，并且支持幂等。
  uid?: string(name='uid'),
}

model CreateDidPersonFacevrfnewocpResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 可信实人认证的唯一标识，返回后用于移动端进行唤起刷脸，也用于后续查询认证结果的关键入参。
  certifyId?: string(name='certify_id'),
}

/**
 * Description: 支持移动端APP的安卓和IOS集成SDK进行刷脸认证，在查询query认证结果通过的情况下创建DID身份。
 * Summary: APP移动端刷脸认证成功后创建DID
 */
async function createDidPersonFacevrfnewocp(request: CreateDidPersonFacevrfnewocpRequest): CreateDidPersonFacevrfnewocpResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createDidPersonFacevrfnewocpEx(request, headers, runtime);
}

/**
 * Description: 支持移动端APP的安卓和IOS集成SDK进行刷脸认证，在查询query认证结果通过的情况下创建DID身份。
 * Summary: APP移动端刷脸认证成功后创建DID
 */
async function createDidPersonFacevrfnewocpEx(request: CreateDidPersonFacevrfnewocpRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateDidPersonFacevrfnewocpResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.person.facevrfnewocp.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateDidPersonFacevrfminiappnewocpRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 场景码，通常针对性特别支持，或者防止多调用方使用相同租户身份的情况下用bizCode做区分。
  bizCode?: string(name='biz_code'),
  // 请求的唯一标识，通常为32字符宽度的字符串内容，也可以只用UUID，此参数通常用来支持幂等，或者排查问题，调用方可以使用业务流水号。
  bizId: string(name='biz_id'),
  // 姓名字段，真实姓名，不可包含空格等特殊字符。
  certName: string(name='cert_name'),
  // 证件号码，要求带有字母的情况使用大写字母。
  certNo: string(name='cert_no'),
  // 身份信息来源类型，当前仅支持证件（CERT_INFO）
  identityType: string(name='identity_type'),
  // 证件类型，当前仅支持身份证（IDENTITY_CARD）
  certType: string(name='cert_type'),
  // 认证结束回跳地址
  returnUrl: string(name='return_url'),
  // DID未来创建锚定的用户身份唯一关联，如果不设置此参数则使用二要素拼接后的哈希值 SHA256("张三"+"210282*****X") 来进行关联创建DID，并且支持幂等。
  uid?: string(name='uid'),
  // 刷脸类型，目前只支持FACE_SDK、FACE，默认FACE_SDK
  faceType?: string(name='face_type'),
}

model CreateDidPersonFacevrfminiappnewocpResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 查询刷脸结果唯一标识
  certifyId?: string(name='certify_id'),
  // 认证流程入口 URL。
  certifyUrl?: string(name='certify_url'),
}

/**
 * Description: h5或者小程序刷脸认证成功后创建DID（新个人刷脸商品）
 * Summary: h5或者小程序刷脸认证成功后创建DID
 */
async function createDidPersonFacevrfminiappnewocp(request: CreateDidPersonFacevrfminiappnewocpRequest): CreateDidPersonFacevrfminiappnewocpResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createDidPersonFacevrfminiappnewocpEx(request, headers, runtime);
}

/**
 * Description: h5或者小程序刷脸认证成功后创建DID（新个人刷脸商品）
 * Summary: h5或者小程序刷脸认证成功后创建DID
 */
async function createDidPersonFacevrfminiappnewocpEx(request: CreateDidPersonFacevrfminiappnewocpRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateDidPersonFacevrfminiappnewocpResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.person.facevrfminiappnewocp.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartDidCertificationThreemetanewocpRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 身份证号码
  certNo: string(name='cert_no'),
  // 证书的subject did，不给此参数时候三要素验证不颁发vc
  did?: string(name='did'),
  // 手机号码
  mobile: string(name='mobile'),
  // 姓名
  name: string(name='name'),
  // 场景码，找dis工作人员进行分配
  bizCode?: string(name='biz_code'),
}

model StartDidCertificationThreemetanewocpResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // vc id，可通过该字符串来查询vc具体内容
  vcId?: string(name='vc_id'),
}

/**
 * Description: 三要素实名认证（新商品）
 * Summary: 三要素实名认证
 */
async function startDidCertificationThreemetanewocp(request: StartDidCertificationThreemetanewocpRequest): StartDidCertificationThreemetanewocpResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startDidCertificationThreemetanewocpEx(request, headers, runtime);
}

/**
 * Description: 三要素实名认证（新商品）
 * Summary: 三要素实名认证
 */
async function startDidCertificationThreemetanewocpEx(request: StartDidCertificationThreemetanewocpRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartDidCertificationThreemetanewocpResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.certification.threemetanewocp.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ImportDidAldabaRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 待迁移did
  did: string(name='did'),
}

model ImportDidAldabaResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 迁移did至aldaba链
 * Summary: 迁移did至aldaba链
 */
async function importDidAldaba(request: ImportDidAldabaRequest): ImportDidAldabaResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return importDidAldabaEx(request, headers, runtime);
}

/**
 * Description: 迁移did至aldaba链
 * Summary: 迁移did至aldaba链
 */
async function importDidAldabaEx(request: ImportDidAldabaRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ImportDidAldabaResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.aldaba.import', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateDidDtxPersonRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 唯一号，比如可以是hash(证件类型+企业营业执照号) 计算出来的唯一值等
  ownerUid: string(name='owner_uid'),
  // 场景码，找dis工作人员进行分配
  // 
  bizCode?: string(name='biz_code'),
}

model CreateDidDtxPersonResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 生成的did字符串
  // 
  did?: string(name='did'),
}

/**
 * Description: 端上密钥生成did，但不doc上链
 * Summary: 端上密钥生成did
 */
async function createDidDtxPerson(request: CreateDidDtxPersonRequest): CreateDidDtxPersonResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createDidDtxPersonEx(request, headers, runtime);
}

/**
 * Description: 端上密钥生成did，但不doc上链
 * Summary: 端上密钥生成did
 */
async function createDidDtxPersonEx(request: CreateDidDtxPersonRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateDidDtxPersonResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.dtx.person.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AddDidDtxPkRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 待操作的did
  did: string(name='did'),
  // 待添加公钥
  publicKey: string(name='public_key'),
  // keyId
  keyId: string(name='key_id'),
  // 需要传输给业务服务的JSON字段
  // 
  extension?: string(name='extension'),
}

model AddDidDtxPkResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 添加端上密钥，并上链
 * Summary: 添加端上密钥
 */
async function addDidDtxPk(request: AddDidDtxPkRequest): AddDidDtxPkResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return addDidDtxPkEx(request, headers, runtime);
}

/**
 * Description: 添加端上密钥，并上链
 * Summary: 添加端上密钥
 */
async function addDidDtxPkEx(request: AddDidDtxPkRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddDidDtxPkResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.dtx.pk.add', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateDidDtxVcRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // vc原文
  vc: string(name='vc'),
}

model CreateDidDtxVcResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 端上密钥颁发vc
 * Summary: 端上密钥颁发vc
 */
async function createDidDtxVc(request: CreateDidDtxVcRequest): CreateDidDtxVcResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createDidDtxVcEx(request, headers, runtime);
}

/**
 * Description: 端上密钥颁发vc
 * Summary: 端上密钥颁发vc
 */
async function createDidDtxVcEx(request: CreateDidDtxVcRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateDidDtxVcResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.dtx.vc.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartMydidcommunAgencySettleinRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 企业名称
  epCertName: string(name='ep_cert_name'),
  // 企业证件号
  epCertNo: string(name='ep_cert_no'),
  // 法人姓名
  legalPersonCertName: string(name='legal_person_cert_name'),
  // 事件通知地址
  notificationUrl?: string(name='notification_url'),
  // 公钥
  publicKey: string(name='public_key'),
  // 恢复公钥
  recoverKey: string(name='recover_key'),
  // 业务码，接入时需要找数据隐私服务分配
  bizCode?: string(name='biz_code'),
}

model StartMydidcommunAgencySettleinResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 生成的did
  did?: string(name='did'),
  // 生成的did doc
  doc?: string(name='doc'),
}

/**
 * Description: 数据隐私服务合作方入驻接口
 * Summary: 数据隐私服务合作方入驻接口
 */
async function startMydidcommunAgencySettlein(request: StartMydidcommunAgencySettleinRequest): StartMydidcommunAgencySettleinResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startMydidcommunAgencySettleinEx(request, headers, runtime);
}

/**
 * Description: 数据隐私服务合作方入驻接口
 * Summary: 数据隐私服务合作方入驻接口
 */
async function startMydidcommunAgencySettleinEx(request: StartMydidcommunAgencySettleinRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartMydidcommunAgencySettleinResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.mydidcommun.agency.settlein.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartMydidcommunAgencyChoicetappRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 入驻时候生成的did
  did: string(name='did'),
  // 服务ID
  serviceId: string(name='service_id'),
  // 选择tapp的名称
  tappName: string(name='tapp_name'),
  // tapp版本
  tappVersion: long(name='tapp_version'),
  // 业务码，需要接入时联系数据隐私服务分配
  bizCode?: string(name='biz_code'),
}

model StartMydidcommunAgencyChoicetappResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // doc当前版本
  preVersion?: long(name='pre_version'),
  // 生成的tapp info
  serviceEndpoint?: string(name='service_endpoint'),
  // 生成的serviceId
  serviceId?: string(name='service_id'),
  // service 类型
  serviceType?: string(name='service_type'),
  // EXIST 该tapp和serviceid已经包含在did doc中；
  // CONFLICT 该serviceid已经存在，但信息与此次不一致；
  // VALID 正常
  desc?: string(name='desc'),
}

/**
 * Description: 数据隐私服务合作机构选择tapp接口
 * Summary: 数据隐私服务合作机构选择tapp接口
 */
async function startMydidcommunAgencyChoicetapp(request: StartMydidcommunAgencyChoicetappRequest): StartMydidcommunAgencyChoicetappResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startMydidcommunAgencyChoicetappEx(request, headers, runtime);
}

/**
 * Description: 数据隐私服务合作机构选择tapp接口
 * Summary: 数据隐私服务合作机构选择tapp接口
 */
async function startMydidcommunAgencyChoicetappEx(request: StartMydidcommunAgencyChoicetappRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartMydidcommunAgencyChoicetappResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.mydidcommun.agency.choicetapp.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartMydidcommunAgencyuserPersonjoinRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 身份证号码
  certNo: string(name='cert_no'),
  // 姓名
  name: string(name='name'),
  // 事件通知地址
  notificationUrl: string(name='notification_url'),
  // 公钥	
  publicKey: string(name='public_key'),
  // 恢复公钥	
  recoverKey: string(name='recover_key'),
  // 选择的TAPP列表
  tappInfoList?: [ ChoiceTappInfo ](name='tapp_info_list'),
  // 业务码，接入时需要找数据隐私服务分配
  bizCode?: string(name='biz_code'),
}

model StartMydidcommunAgencyuserPersonjoinResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 生成的did
  did?: string(name='did'),
  // 生成的did doc
  doc?: string(name='doc'),
}

/**
 * Description: 数据隐私服务合作机构下个人用户入驻接口
 * Summary: 数据隐私服务合作机构下个人用户入驻接口
 */
async function startMydidcommunAgencyuserPersonjoin(request: StartMydidcommunAgencyuserPersonjoinRequest): StartMydidcommunAgencyuserPersonjoinResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startMydidcommunAgencyuserPersonjoinEx(request, headers, runtime);
}

/**
 * Description: 数据隐私服务合作机构下个人用户入驻接口
 * Summary: 数据隐私服务合作机构下个人用户入驻接口
 */
async function startMydidcommunAgencyuserPersonjoinEx(request: StartMydidcommunAgencyuserPersonjoinRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartMydidcommunAgencyuserPersonjoinResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.mydidcommun.agencyuser.personjoin.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartMydidcommunAgencyuserCorporatejoinRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 企业名称
  epCertName: string(name='ep_cert_name'),
  // 企业证件号
  epCertNo: string(name='ep_cert_no'),
  // 法人姓名
  legalPersonCertName: string(name='legal_person_cert_name'),
  // 事件通知地址
  notificationUrl: string(name='notification_url'),
  // 公钥	
  publicKey: string(name='public_key'),
  // 恢复公钥	
  recoverKey: string(name='recover_key'),
  // 选择的tapp列表
  tappInfoList?: [ ChoiceTappInfo ](name='tapp_info_list'),
  // 业务码，接入时需要找数据隐私服务分配
  bizCode?: string(name='biz_code'),
}

model StartMydidcommunAgencyuserCorporatejoinResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 生成的did
  did?: string(name='did'),
  // 生成的did doc
  doc?: string(name='doc'),
}

/**
 * Description: 数据隐私服务合作机构下企业用户入驻接口
 * Summary: 数据隐私服务合作机构下企业用户入驻接口
 */
async function startMydidcommunAgencyuserCorporatejoin(request: StartMydidcommunAgencyuserCorporatejoinRequest): StartMydidcommunAgencyuserCorporatejoinResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startMydidcommunAgencyuserCorporatejoinEx(request, headers, runtime);
}

/**
 * Description: 数据隐私服务合作机构下企业用户入驻接口
 * Summary: 数据隐私服务合作机构下企业用户入驻接口
 */
async function startMydidcommunAgencyuserCorporatejoinEx(request: StartMydidcommunAgencyuserCorporatejoinRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartMydidcommunAgencyuserCorporatejoinResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.mydidcommun.agencyuser.corporatejoin.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateMydidcommunAgencyDocRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 入驻时候生成的did
  did: string(name='did'),
  // 对参数进行构造签名
  operationSign: string(name='operation_sign'),
  // doc当前版本
  preVersion: long(name='pre_version'),
  // doc中服务信息列表
  serviceList: [ DisServicesInfo ](name='service_list'),
}

model UpdateMydidcommunAgencyDocResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 更新doc service接口
 * Summary: 更新doc service接口
 */
async function updateMydidcommunAgencyDoc(request: UpdateMydidcommunAgencyDocRequest): UpdateMydidcommunAgencyDocResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateMydidcommunAgencyDocEx(request, headers, runtime);
}

/**
 * Description: 更新doc service接口
 * Summary: 更新doc service接口
 */
async function updateMydidcommunAgencyDocEx(request: UpdateMydidcommunAgencyDocRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateMydidcommunAgencyDocResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.mydidcommun.agency.doc.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartMydidcommunAgencyDatatransmitstartRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 发送者的did
  did: string(name='did'),
  // 数字资产的owner did
  ownerDid?: string(name='owner_did'),
  // 具体调用Tapp的参数数组，json格式
  params: string(name='params'),
  // 数据处理tapp id
  processTappId?: string(name='process_tapp_id'),
  // 处理tapp的function
  processTappMethod?: string(name='process_tapp_method'),
  // 读取数据的tapp id
  readTappId: string(name='read_tapp_id'),
  // 读取数据的Tapp中对应的Method
  readTappMethod: string(name='read_tapp_method'),
  // 数据资产传输目标did
  targetDid: string(name='target_did'),
  // 发起流程的唯一号，系统将更加这个唯一号保持幂等
  processId: string(name='process_id'),
}

model StartMydidcommunAgencyDatatransmitstartResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 发起之后返回的任务ID
  taskId?: string(name='task_id'),
}

/**
 * Description: 主动发起数据传输流程请求
 * Summary: 主动发起数据安全传输流程
 */
async function startMydidcommunAgencyDatatransmitstart(request: StartMydidcommunAgencyDatatransmitstartRequest): StartMydidcommunAgencyDatatransmitstartResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startMydidcommunAgencyDatatransmitstartEx(request, headers, runtime);
}

/**
 * Description: 主动发起数据传输流程请求
 * Summary: 主动发起数据安全传输流程
 */
async function startMydidcommunAgencyDatatransmitstartEx(request: StartMydidcommunAgencyDatatransmitstartRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartMydidcommunAgencyDatatransmitstartResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.mydidcommun.agency.datatransmitstart.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartMydidcommunAgencyDatatransmitcontinueRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 调用tapp时传输的参数
  params: string(name='params'),
  // 之前触发主动发送数据流程返回的taskid
  taskId: string(name='task_id'),
  // 发送者的did声明
  did: string(name='did'),
}

model StartMydidcommunAgencyDatatransmitcontinueResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 主动发起数据传输流程的task id
  taskId?: string(name='task_id'),
}

/**
 * Description: 继续触发主动发起数据安全传输流程
 * Summary: 继续触发主动发起数据安全传输流程
 */
async function startMydidcommunAgencyDatatransmitcontinue(request: StartMydidcommunAgencyDatatransmitcontinueRequest): StartMydidcommunAgencyDatatransmitcontinueResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startMydidcommunAgencyDatatransmitcontinueEx(request, headers, runtime);
}

/**
 * Description: 继续触发主动发起数据安全传输流程
 * Summary: 继续触发主动发起数据安全传输流程
 */
async function startMydidcommunAgencyDatatransmitcontinueEx(request: StartMydidcommunAgencyDatatransmitcontinueRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartMydidcommunAgencyDatatransmitcontinueResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.mydidcommun.agency.datatransmitcontinue.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartMydidcommunAgencyDataapplicationRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 申请的数据ID，该字段由两部分组成ownerdid#service-id(did doc中表示对应数据资产的serviceid)
  dataId: string(name='data_id'),
  // 主动发起申请数据流程的请求者did
  did: string(name='did'),
  // 申请数据时增加的说明，比如说明本次申请数据的原因，等描述
  message?: string(name='message'),
  // 申请者在申请数据的时候，申明自己将使用那种方式处理申请到的数据。如果该字段为0表示要得到原始数据。
  // 该字段形式与dataId类似
  processDataId?: string(name='process_data_id'),
  // 发起申请的申请id，系统将基于该id保持幂等
  processId: string(maxLength=128, minLength=1, name='process_id'),
  // 数据申请到之后最终发送给谁的did
  targetDid: string(name='target_did'),
}

model StartMydidcommunAgencyDataapplicationResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 本次请求对应的任务ID，后续消息通知时会携带该字段，方便业务系统进行对应
  taskId?: string(name='task_id'),
}

/**
 * Description: 主动发起申请数据资产的流程
 * Summary: 主动发起申请数据资产的流程
 */
async function startMydidcommunAgencyDataapplication(request: StartMydidcommunAgencyDataapplicationRequest): StartMydidcommunAgencyDataapplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startMydidcommunAgencyDataapplicationEx(request, headers, runtime);
}

/**
 * Description: 主动发起申请数据资产的流程
 * Summary: 主动发起申请数据资产的流程
 */
async function startMydidcommunAgencyDataapplicationEx(request: StartMydidcommunAgencyDataapplicationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartMydidcommunAgencyDataapplicationResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.mydidcommun.agency.dataapplication.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartMydidcommunAgencyChoicetapplistRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 入驻时候生成的did
  did: string(name='did'),
  // 选择的tapp信息列表
  tappInfos: [ ChoiceTappInfo ](name='tapp_infos'),
}

model StartMydidcommunAgencyChoicetapplistResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 之前did的版本号，在更新时会使用到
  preVersion?: long(name='pre_version'),
  // 对应servic info
  serviceList?: [ DisServicesInfo ](name='service_list'),
}

/**
 * Description: 据隐私服务合作机构选择多个tapp接口
 * Summary: 据隐私服务合作机构选择多个tapp接口
 */
async function startMydidcommunAgencyChoicetapplist(request: StartMydidcommunAgencyChoicetapplistRequest): StartMydidcommunAgencyChoicetapplistResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startMydidcommunAgencyChoicetapplistEx(request, headers, runtime);
}

/**
 * Description: 据隐私服务合作机构选择多个tapp接口
 * Summary: 据隐私服务合作机构选择多个tapp接口
 */
async function startMydidcommunAgencyChoicetapplistEx(request: StartMydidcommunAgencyChoicetapplistRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartMydidcommunAgencyChoicetapplistResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.mydidcommun.agency.choicetapplist.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartMydidcommunAgencyDataassertregisterRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 审批流程节点
  approvers: [ string ](name='approvers'),
  // 数据资产的Owner
  did: string(name='did'),
  // 数据资产id
  serviceId: string(name='service_id'),
}

model StartMydidcommunAgencyDataassertregisterResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 数据资产ID
  dataId?: string(name='data_id'),
}

/**
 * Description: 定义数据资产审批流程
 * Summary: 定义数据资产审批流程
 */
async function startMydidcommunAgencyDataassertregister(request: StartMydidcommunAgencyDataassertregisterRequest): StartMydidcommunAgencyDataassertregisterResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startMydidcommunAgencyDataassertregisterEx(request, headers, runtime);
}

/**
 * Description: 定义数据资产审批流程
 * Summary: 定义数据资产审批流程
 */
async function startMydidcommunAgencyDataassertregisterEx(request: StartMydidcommunAgencyDataassertregisterRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartMydidcommunAgencyDataassertregisterResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.mydidcommun.agency.dataassertregister.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartMydidcommunAgencyAuthRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 发起者did
  did: string(name='did'),
  // 用户在本地构造的发起数据授权申请的消息
  requestRaw: string(name='request_raw'),
  // 业务码，需要接入时联系数据隐私服务分配
  bizCode?: string(name='biz_code'),
}

model StartMydidcommunAgencyAuthResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 授权返回值
  result?: string(name='result'),
}

/**
 * Description: 发起数据授权
 * Summary: 发起数据授权
 */
async function startMydidcommunAgencyAuth(request: StartMydidcommunAgencyAuthRequest): StartMydidcommunAgencyAuthResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startMydidcommunAgencyAuthEx(request, headers, runtime);
}

/**
 * Description: 发起数据授权
 * Summary: 发起数据授权
 */
async function startMydidcommunAgencyAuthEx(request: StartMydidcommunAgencyAuthRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartMydidcommunAgencyAuthResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.mydidcommun.agency.auth.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartMydidcommunAgencyProcessauthRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 处理人did
  did: string(name='did'),
  // 处理授权的原始请求流
  requestRaw: string(name='request_raw'),
}

model StartMydidcommunAgencyProcessauthResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 授权处理后的结果
  result?: string(name='result'),
}

/**
 * Description: 处理授权流程
 * Summary: 处理授权流程
 */
async function startMydidcommunAgencyProcessauth(request: StartMydidcommunAgencyProcessauthRequest): StartMydidcommunAgencyProcessauthResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startMydidcommunAgencyProcessauthEx(request, headers, runtime);
}

/**
 * Description: 处理授权流程
 * Summary: 处理授权流程
 */
async function startMydidcommunAgencyProcessauthEx(request: StartMydidcommunAgencyProcessauthRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartMydidcommunAgencyProcessauthResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.mydidcommun.agency.processauth.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryMydidcommunAgencyProcessauthRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 审批流水号
  processId: string(name='process_id'),
  // 查询者did
  did: string(name='did'),
}

model QueryMydidcommunAgencyProcessauthResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 审批流当前状态
  result?: string(name='result'),
}

/**
 * Description: 查询授权当前状态
 * Summary: 查询授权当前状态
 */
async function queryMydidcommunAgencyProcessauth(request: QueryMydidcommunAgencyProcessauthRequest): QueryMydidcommunAgencyProcessauthResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryMydidcommunAgencyProcessauthEx(request, headers, runtime);
}

/**
 * Description: 查询授权当前状态
 * Summary: 查询授权当前状态
 */
async function queryMydidcommunAgencyProcessauthEx(request: QueryMydidcommunAgencyProcessauthRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryMydidcommunAgencyProcessauthResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.mydidcommun.agency.processauth.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryMydidcommunAgencyServicetypeinfoRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 带查询的服务类型
  serviceType: string(name='service_type'),
}

model QueryMydidcommunAgencyServicetypeinfoResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 对应算法的入口函数名
  method?: string(name='method'),
  // 服务对应的具体的Tapp或者算法名
  name?: string(name='name'),
  // 表示服务的实际处理类型，目前是Data_Tapp
  // 
  serviceModel?: string(name='service_model'),
  // 对应name的算法当前版本
  version?: long(name='version'),
  // serviceType所对应版本的publickey
  publicKey?: string(name='public_key'),
}

/**
 * Description: 通过serviceType查找其对应信息
 * Summary: 通过serviceType查找其对应信息
 */
async function queryMydidcommunAgencyServicetypeinfo(request: QueryMydidcommunAgencyServicetypeinfoRequest): QueryMydidcommunAgencyServicetypeinfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryMydidcommunAgencyServicetypeinfoEx(request, headers, runtime);
}

/**
 * Description: 通过serviceType查找其对应信息
 * Summary: 通过serviceType查找其对应信息
 */
async function queryMydidcommunAgencyServicetypeinfoEx(request: QueryMydidcommunAgencyServicetypeinfoRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryMydidcommunAgencyServicetypeinfoResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.mydidcommun.agency.servicetypeinfo.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryMydidcommunAgencyTaskresultfileRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 文件在数据隐私服务中标示
  fileMark: string(name='file_mark'),
  // 结果文件拥有者did
  did: string(name='did'),
}

model QueryMydidcommunAgencyTaskresultfileResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 文件临时路径
  fileUrl?: string(name='file_url'),
}

/**
 * Description: 查询任务执行结果文件
 * Summary: 查询任务执行结果文件
 */
async function queryMydidcommunAgencyTaskresultfile(request: QueryMydidcommunAgencyTaskresultfileRequest): QueryMydidcommunAgencyTaskresultfileResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryMydidcommunAgencyTaskresultfileEx(request, headers, runtime);
}

/**
 * Description: 查询任务执行结果文件
 * Summary: 查询任务执行结果文件
 */
async function queryMydidcommunAgencyTaskresultfileEx(request: QueryMydidcommunAgencyTaskresultfileRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryMydidcommunAgencyTaskresultfileResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.mydidcommun.agency.taskresultfile.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ApplyMydidcommunTaskServicetypeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 需要被授权人的DID
  targetDid: string(name='target_did'),
  // 申请发起人的DID
  did: string(name='did'),
  // 需要被授权使用的服务类型
  serviceType: string(name='service_type'),
}

model ApplyMydidcommunTaskServicetypeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 用于查询异步处理流程的任务ID
  taskId?: string(name='task_id'),
}

/**
 * Description: 任务执行 - 为目标用户申请某一服务类型的调用权限
 * Summary: 服务类型权限申请
 */
async function applyMydidcommunTaskServicetype(request: ApplyMydidcommunTaskServicetypeRequest): ApplyMydidcommunTaskServicetypeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return applyMydidcommunTaskServicetypeEx(request, headers, runtime);
}

/**
 * Description: 任务执行 - 为目标用户申请某一服务类型的调用权限
 * Summary: 服务类型权限申请
 */
async function applyMydidcommunTaskServicetypeEx(request: ApplyMydidcommunTaskServicetypeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ApplyMydidcommunTaskServicetypeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.mydidcommun.task.servicetype.apply', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetMydidcommunTaskTaskresultRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 任务ID
  taskId: string(name='task_id'),
  // 申请人did（只有任务发起人才能查询执行结果）
  did: string(name='did'),
}

model GetMydidcommunTaskTaskresultResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 任务ID
  taskId?: string(name='task_id'),
  // FINISH 执行成功
  // CANCEL 执行失败
  // 只有FINISH 和CANCEL为最终状态，其他均为中间状态
  status?: string(name='status'),
  // json序列化后的，任务执行结果，对不同的任务格式会有不同
  // 如：
  // - 代理VC的任务，返回值结构为{"vc":"1111111"}
  // - 获取数据的任务，返回值结构为{"response":{"output":"xxxx","status":"FINISH"}}
  dataResult?: string(name='data_result'),
}

/**
 * Description: 通过任务Id获取任务执行结果
 * Summary: 获取任务执行结果
 */
async function getMydidcommunTaskTaskresult(request: GetMydidcommunTaskTaskresultRequest): GetMydidcommunTaskTaskresultResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getMydidcommunTaskTaskresultEx(request, headers, runtime);
}

/**
 * Description: 通过任务Id获取任务执行结果
 * Summary: 获取任务执行结果
 */
async function getMydidcommunTaskTaskresultEx(request: GetMydidcommunTaskTaskresultRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetMydidcommunTaskTaskresultResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.mydidcommun.task.taskresult.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AddMydidcommunAssetDataRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 数据实际存储路径
  dataPath: string(name='data_path'),
  // 请求发起人的did
  did: string(name='did'),
  // 所注册的资产所有者DID，要注意资产所有者DID需与授权发起方DID相同
  ownerDid: string(name='owner_did'),
  // 数据所对应的业务类型
  serviceType: string(name='service_type'),
  // 临时字段，数据文件的md5哈希值，在隐私服务无法直接读取数据时，由用户提供
  dataHash?: string(name='data_hash'),
}

model AddMydidcommunAssetDataResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 数据DID，用于唯一标示数据
  dataDid?: string(name='data_did'),
}

/**
 * Description: 注册数据资产
 * Summary: 添加数据资产
 */
async function addMydidcommunAssetData(request: AddMydidcommunAssetDataRequest): AddMydidcommunAssetDataResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return addMydidcommunAssetDataEx(request, headers, runtime);
}

/**
 * Description: 注册数据资产
 * Summary: 添加数据资产
 */
async function addMydidcommunAssetDataEx(request: AddMydidcommunAssetDataRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddMydidcommunAssetDataResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.mydidcommun.asset.data.add', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartMydidcommunTaskGetdataRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 要获取的数据ID
  dataDid: string(name='data_did'),
  // 申请获得的数据的用户DID，将用该DID公钥加密原始数据
  targetDid: string(name='target_did'),
  // 授权数据申请方读取该数据的VC
  vc: string(name='vc'),
  // 请求发起人的did
  did: string(name='did'),
}

model StartMydidcommunTaskGetdataResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 对应任务的ID
  taskId?: string(name='task_id'),
}

/**
 * Description: 开始获取数据任务流程
 * Summary: 执行获取数据接口
 */
async function startMydidcommunTaskGetdata(request: StartMydidcommunTaskGetdataRequest): StartMydidcommunTaskGetdataResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startMydidcommunTaskGetdataEx(request, headers, runtime);
}

/**
 * Description: 开始获取数据任务流程
 * Summary: 执行获取数据接口
 */
async function startMydidcommunTaskGetdataEx(request: StartMydidcommunTaskGetdataRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartMydidcommunTaskGetdataResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.mydidcommun.task.getdata.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartMydidcommunInstitutionSettleinRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 入驻时选择的业务码，这个码需要在机构入驻时与数据隐私服务确认之后填写
  bizCode?: string(name='biz_code'),
  // 机构唯一编号
  institiutionNo?: string(name='institiution_no'),
  // 机构实际名称
  institutionName: string(name='institution_name'),
  // 接受数据隐私服务回调通知的URL，如果地址是https的，那么该地址必须提供有效的证书
  notificationUrl?: string(name='notification_url'),
  // 机构和数据隐私服务进行通讯的非对称密钥对中的公钥
  publicKey: string(name='public_key'),
  // 恢复密钥公钥，可用于以后修改通讯公钥用，不要和通讯公钥一样
  recoverKey: string(name='recover_key'),
}

model StartMydidcommunInstitutionSettleinResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 机构入驻后，会为其分配唯一的区块链数字身份，这里是数字身份的ID，后续接口都需要用这个id作为参数
  did?: string(name='did'),
  // 是对数字身份did的描述，主要包括通讯公钥，和恢复公钥，以及会调url
  doc?: string(name='doc'),
}

/**
 * Description: 针对线下入驻，或者无法提供四要素的机构入驻
 * Summary: 机构入驻数据隐私服务
 */
async function startMydidcommunInstitutionSettlein(request: StartMydidcommunInstitutionSettleinRequest): StartMydidcommunInstitutionSettleinResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startMydidcommunInstitutionSettleinEx(request, headers, runtime);
}

/**
 * Description: 针对线下入驻，或者无法提供四要素的机构入驻
 * Summary: 机构入驻数据隐私服务
 */
async function startMydidcommunInstitutionSettleinEx(request: StartMydidcommunInstitutionSettleinRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartMydidcommunInstitutionSettleinResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.mydidcommun.institution.settlein.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetMydidcommunWorkergroupSyncRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 计算集群群组代号
  groupCode: string(name='group_code'),
  // 环境名称
  env: string(name='env'),
  // 主节点
  masterNode: string(name='master_node'),
}

model GetMydidcommunWorkergroupSyncResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 序列化后的同步任务
  data?: string(name='data'),
}

/**
 * Description: 计算集群 - 部署同步 - 获取一个需要同步的部署任务
 * Summary: 计算集群-部署同步-获取一个需要同步任务
 */
async function getMydidcommunWorkergroupSync(request: GetMydidcommunWorkergroupSyncRequest): GetMydidcommunWorkergroupSyncResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getMydidcommunWorkergroupSyncEx(request, headers, runtime);
}

/**
 * Description: 计算集群 - 部署同步 - 获取一个需要同步的部署任务
 * Summary: 计算集群-部署同步-获取一个需要同步任务
 */
async function getMydidcommunWorkergroupSyncEx(request: GetMydidcommunWorkergroupSyncRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetMydidcommunWorkergroupSyncResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.mydidcommun.workergroup.sync.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetMydidcommunWorkergroupPodRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 部署ID
  podId: long(name='pod_id'),
}

model GetMydidcommunWorkergroupPodResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 序列化后的部署
  data?: string(name='data'),
}

/**
 * Description: 通过部署ID获取部署详情
 * Summary: 计算集群-部署-获取部署详情
 */
async function getMydidcommunWorkergroupPod(request: GetMydidcommunWorkergroupPodRequest): GetMydidcommunWorkergroupPodResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getMydidcommunWorkergroupPodEx(request, headers, runtime);
}

/**
 * Description: 通过部署ID获取部署详情
 * Summary: 计算集群-部署-获取部署详情
 */
async function getMydidcommunWorkergroupPodEx(request: GetMydidcommunWorkergroupPodRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetMydidcommunWorkergroupPodResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.mydidcommun.workergroup.pod.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model FinishMydidcommunWorkergroupSyncRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 部署ID
  podId: long(name='pod_id'),
  // 任务ID
  taskId: long(name='task_id'),
  // 是否同步成功
  isSuccess: boolean(name='is_success'),
  // 处理消息
  msg: string(name='msg'),
  // 负责更新的节点名
  masterNode: string(name='master_node'),
}

model FinishMydidcommunWorkergroupSyncResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 计算集群-部署同步-设置同步任务完成
 * Summary: 计算集群-部署同步-设置同步任务完成
 */
async function finishMydidcommunWorkergroupSync(request: FinishMydidcommunWorkergroupSyncRequest): FinishMydidcommunWorkergroupSyncResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return finishMydidcommunWorkergroupSyncEx(request, headers, runtime);
}

/**
 * Description: 计算集群-部署同步-设置同步任务完成
 * Summary: 计算集群-部署同步-设置同步任务完成
 */
async function finishMydidcommunWorkergroupSyncEx(request: FinishMydidcommunWorkergroupSyncRequest, headers: map[string]string, runtime: Util.RuntimeOptions): FinishMydidcommunWorkergroupSyncResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.mydidcommun.workergroup.sync.finish', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetMydidcommunWorkergroupTappRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // TAPPInstance所对应的部署ID
  podId: long(name='pod_id'),
}

model GetMydidcommunWorkergroupTappResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // TAPP部署详情
  data?: string(name='data'),
}

/**
 * Description: 计算集群-部署同步-获取TAPP部署详情
 * Summary: 计算集群-TAPP-获取TAPP部署
 */
async function getMydidcommunWorkergroupTapp(request: GetMydidcommunWorkergroupTappRequest): GetMydidcommunWorkergroupTappResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getMydidcommunWorkergroupTappEx(request, headers, runtime);
}

/**
 * Description: 计算集群-部署同步-获取TAPP部署详情
 * Summary: 计算集群-TAPP-获取TAPP部署
 */
async function getMydidcommunWorkergroupTappEx(request: GetMydidcommunWorkergroupTappRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetMydidcommunWorkergroupTappResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.mydidcommun.workergroup.tapp.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateMydidcommunWorkergroupTappRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // TAPP部署实例ID
  tappInstanceId: long(name='tapp_instance_id'),
  // TAPP部署公钥
  publicKey: string(name='public_key'),
  // TAPP部署在mytf中的版本号
  tappVersion: long(name='tapp_version'),
  // mytf部署后返回的TAPP哈希
  hash: string(name='hash'),
}

model UpdateMydidcommunWorkergroupTappResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 更新TAPP部署的信息，包括公钥哈希等
 * Summary: 计算集群-TAPP-更新TAPP信息
 */
async function updateMydidcommunWorkergroupTapp(request: UpdateMydidcommunWorkergroupTappRequest): UpdateMydidcommunWorkergroupTappResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateMydidcommunWorkergroupTappEx(request, headers, runtime);
}

/**
 * Description: 更新TAPP部署的信息，包括公钥哈希等
 * Summary: 计算集群-TAPP-更新TAPP信息
 */
async function updateMydidcommunWorkergroupTappEx(request: UpdateMydidcommunWorkergroupTappRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateMydidcommunWorkergroupTappResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.mydidcommun.workergroup.tapp.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryMydidcommunWorkergroupWorkflowRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 工作流对应的部署Id
  podId: long(name='pod_id'),
  // 版本号
  podVersion: long(name='pod_version'),
}

model QueryMydidcommunWorkergroupWorkflowResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 工作流配置
  data?: string(name='data'),
}

/**
 * Description: 获取工作流的所有在线版本的配置
 * Summary: 计算集群-工作流-获取工作流配置
 */
async function queryMydidcommunWorkergroupWorkflow(request: QueryMydidcommunWorkergroupWorkflowRequest): QueryMydidcommunWorkergroupWorkflowResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryMydidcommunWorkergroupWorkflowEx(request, headers, runtime);
}

/**
 * Description: 获取工作流的所有在线版本的配置
 * Summary: 计算集群-工作流-获取工作流配置
 */
async function queryMydidcommunWorkergroupWorkflowEx(request: QueryMydidcommunWorkergroupWorkflowRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryMydidcommunWorkergroupWorkflowResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.mydidcommun.workergroup.workflow.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SyncMydidcommunWorkergroupGroupRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 计算集群明称
  workerGroup: string(name='worker_group'),
  // 计算集群环境
  env: string(name='env'),
  // 执行状态上报
  metrics: string(name='metrics'),
  // 执行器code
  executorList: [ string ](name='executor_list'),
  // 主节点名
  masterNode: string(name='master_node'),
}

model SyncMydidcommunWorkergroupGroupResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 同步集群状态
 * Summary: 计算集群-集群-同步集群状态
 */
async function syncMydidcommunWorkergroupGroup(request: SyncMydidcommunWorkergroupGroupRequest): SyncMydidcommunWorkergroupGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return syncMydidcommunWorkergroupGroupEx(request, headers, runtime);
}

/**
 * Description: 同步集群状态
 * Summary: 计算集群-集群-同步集群状态
 */
async function syncMydidcommunWorkergroupGroupEx(request: SyncMydidcommunWorkergroupGroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SyncMydidcommunWorkergroupGroupResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.mydidcommun.workergroup.group.sync', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListMydidcommunWorkergroupPodversionRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 部署id
  podId: long(name='pod_id'),
}

model ListMydidcommunWorkergroupPodversionResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 版本列表
  data?: string(name='data'),
}

/**
 * Description: 计算集群-部署版本-获取版本列表
 * Summary: 计算集群-部署版本-获取版本列表
 */
async function listMydidcommunWorkergroupPodversion(request: ListMydidcommunWorkergroupPodversionRequest): ListMydidcommunWorkergroupPodversionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listMydidcommunWorkergroupPodversionEx(request, headers, runtime);
}

/**
 * Description: 计算集群-部署版本-获取版本列表
 * Summary: 计算集群-部署版本-获取版本列表
 */
async function listMydidcommunWorkergroupPodversionEx(request: ListMydidcommunWorkergroupPodversionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListMydidcommunWorkergroupPodversionResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.mydidcommun.workergroup.podversion.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SaveMydidIdaasDidserviceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // uuid
  uuid: string(name='uuid'),
}

model SaveMydidIdaasDidserviceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // did
  did?: string(name='did'),
}

/**
 * Description: did创建
 * Summary: did创建
 */
async function saveMydidIdaasDidservice(request: SaveMydidIdaasDidserviceRequest): SaveMydidIdaasDidserviceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return saveMydidIdaasDidserviceEx(request, headers, runtime);
}

/**
 * Description: did创建
 * Summary: did创建
 */
async function saveMydidIdaasDidserviceEx(request: SaveMydidIdaasDidserviceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SaveMydidIdaasDidserviceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.mydid.idaas.didservice.save', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDidNotificationDideventRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 指定关注的did
  did: string(name='did'),
  // 起始偏移量
  offset: long(name='offset'),
  // 场景码，找dis工作人员进行分配
  bizCode?: string(name='biz_code'),
}

model QueryDidNotificationDideventResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 相关事件列表
  events?: [ DidEvent ](name='events'),
  // 是否还有待同步事件
  hasMore?: boolean(name='has_more'),
  // 下次事件拉取开始的offset
  nextOffset?: long(name='next_offset'),
}

/**
 * Description: 消息端主动拉取did event
 * Summary: 消息端主动拉取did event
 */
async function queryDidNotificationDidevent(request: QueryDidNotificationDideventRequest): QueryDidNotificationDideventResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDidNotificationDideventEx(request, headers, runtime);
}

/**
 * Description: 消息端主动拉取did event
 * Summary: 消息端主动拉取did event
 */
async function queryDidNotificationDideventEx(request: QueryDidNotificationDideventRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDidNotificationDideventResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.notification.didevent.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDidNotificationVceventRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 指定关注的did
  did: string(name='did'),
  // 开始 同步事件的起始偏移量
  offset: long(name='offset'),
  // 场景码，找dis工作人员进行分配
  bizCode?: string(name='biz_code'),
}

model QueryDidNotificationVceventResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // vc事件列表
  events?: [ VCEvent ](name='events'),
  // 是否有更多事件待同步
  hasMore?: boolean(name='has_more'),
  // 下次拉取事件的起始偏移量
  nextOffset?: long(name='next_offset'),
}

/**
 * Description: 主动拉取vc事件
 * Summary: 主动拉取vc事件
 */
async function queryDidNotificationVcevent(request: QueryDidNotificationVceventRequest): QueryDidNotificationVceventResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDidNotificationVceventEx(request, headers, runtime);
}

/**
 * Description: 主动拉取vc事件
 * Summary: 主动拉取vc事件
 */
async function queryDidNotificationVceventEx(request: QueryDidNotificationVceventRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDidNotificationVceventResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.notification.vcevent.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDidNotificationFulldidRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // did描述符
  did: string(name='did'),
  // 页数
  pageNum: long(minimum=1, name='page_num'),
  // 使用使用的did私钥对传参进行签名，签名方法可以联系开发人员
  requestSignature: string(name='request_signature'),
  // 场景码，找dis工作人员进行分配
  bizCode?: string(name='biz_code'),
}

model QueryDidNotificationFulldidResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // did详情
  list?: [ DidDetail ](name='list'),
  // 总体数量
  totalNum?: long(name='total_num'),
  // 总页数
  totalPage?: long(name='total_page'),
}

/**
 * Description: 获取did全量数据
 * Summary: 获取did全量数据
 */
async function queryDidNotificationFulldid(request: QueryDidNotificationFulldidRequest): QueryDidNotificationFulldidResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDidNotificationFulldidEx(request, headers, runtime);
}

/**
 * Description: 获取did全量数据
 * Summary: 获取did全量数据
 */
async function queryDidNotificationFulldidEx(request: QueryDidNotificationFulldidRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDidNotificationFulldidResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.notification.fulldid.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateDidIdentityCorporateRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 扩展字段
  extensionInfo?: string(name='extension_info'),
  // 公钥
  publicKey: string(name='public_key'),
  // 恢复公钥
  recoveryKey: string(name='recovery_key'),
  // uid
  userId: string(name='user_id'),
  // 持有者名字
  userName?: string(name='user_name'),
  // 场景码，找dis工作人员进行分配
  bizCode?: string(name='biz_code'),
}

model CreateDidIdentityCorporateResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // did
  did?: string(name='did'),
}

/**
 * Description: 非托管模式下创建企业did账户
 * Summary: 非托管模式下创建企业did账户
 */
async function createDidIdentityCorporate(request: CreateDidIdentityCorporateRequest): CreateDidIdentityCorporateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createDidIdentityCorporateEx(request, headers, runtime);
}

/**
 * Description: 非托管模式下创建企业did账户
 * Summary: 非托管模式下创建企业did账户
 */
async function createDidIdentityCorporateEx(request: CreateDidIdentityCorporateRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateDidIdentityCorporateResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.identity.corporate.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model InitDidAdddidHashRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 客户did
  did: string(name='did'),
  // {\"creator\":\"did:mychain:93496ea09e022cdf21a0df15d2bfb3102985eb64016af5fb14a2e24a9ab1a73a\",\"created\":\"2019-08-08T13:52:02+0800\",\"service\":[{\"id\":\"didauth-1\",\"serviceEndpoint\":\"auth.mydid.agent.com\",\"type\":\"DidAuthService\"},{\"id\":\"vcrepository-1\",\"serviceEndpoint\":\"auth.mydid.agent.com\",\"type\":\"VerifiableClaimRepository\"},{\"id\":\"oneBid-1\",\"serviceEndpoint\":\"[{\\\"uid\\\":\\\"z50Uid\\\",\\\"tenancyId\\\":\\\"z50\\\",\\\"version\\\":\\\"v1.0\\\",\\\"releated\\\":{\\\"releatedHash\\\":\\\"hash(关联结果)\\\",\\\"releatedInfo\\\":\\\"AES(核身过程)+version\\\"}}]\",\"type\":\"oneBid\"}],\"id\":\"did:mychain:4145aac009d5e94ad68c16bd56af0bf65a0437b49046529a142de8b385ee71c1\",\"publicKey\":[{\"controller\":\"did:mychain:93496ea09e022cdf21a0df15d2bfb3102985eb64016af5fb14a2e24a9ab1a73a\",\"id\":\"keys-1\",\"publicKey\":\"f498ee29763dd24cd8324c6e861d82ef558e7d6dac10be8b99f5c33934d5cc4f5ff49861a235c7fd4c99a99265d777e657e747164e5549195003878c7222bdcc\",\"type\":\"Secp256k1VerificationKey2018\"}],\"@context\":\"https://w3id.org/did/v1\",\"updated\":\"2019-08-08T13:52:02+0800\",\"authentication\":[\"keys-1\"]}"])
  diddoc: string(name='diddoc'),
  // 使用私钥对消息中其他字段进行签名
  requestSignature: string(name='request_signature'),
  // 场景码，找dis工作人员进行分配
  bizCode?: string(name='biz_code'),
}

model InitDidAdddidHashResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 待签名的交易hash
  hash?: string(name='hash'),
}

/**
 * Description: 计算上链交易hash
 * Summary: add did doc上链交易hash
 */
async function initDidAdddidHash(request: InitDidAdddidHashRequest): InitDidAdddidHashResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return initDidAdddidHashEx(request, headers, runtime);
}

/**
 * Description: 计算上链交易hash
 * Summary: add did doc上链交易hash
 */
async function initDidAdddidHashEx(request: InitDidAdddidHashRequest, headers: map[string]string, runtime: Util.RuntimeOptions): InitDidAdddidHashResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.adddid.hash.init', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartDidAdddidExecuteRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // did
  did: string(name='did'),
  // 操作描述
  operation: string(name='operation'),
  // 操作的具体参数
  payload: DidAddDoc(name='payload'),
  // 使用私钥对消息中其他字段进行签名
  requestSignature: string(name='request_signature'),
  // 场景码，找dis工作人员进行分配
  bizCode?: string(name='biz_code'),
}

model StartDidAdddidExecuteResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 将diddoc写入DIS链
 * Summary: 将diddoc写入DIS链
 */
async function startDidAdddidExecute(request: StartDidAdddidExecuteRequest): StartDidAdddidExecuteResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startDidAdddidExecuteEx(request, headers, runtime);
}

/**
 * Description: 将diddoc写入DIS链
 * Summary: 将diddoc写入DIS链
 */
async function startDidAdddidExecuteEx(request: StartDidAdddidExecuteRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartDidAdddidExecuteResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.adddid.execute.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model InitDidAddvcHashRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 可验证声明hash
  contentHash: string(name='content_hash'),
  // 发起该交易的did
  did: string(name='did'),
  // issuer did对应的hash
  issuerHash: string(name='issuer_hash'),
  // 使用私钥对消息中其他字段进行签名
  requestSignature: string(name='request_signature'),
  // valid or invalid
  status: string(name='status'),
  // subject的did计算的hash
  subjectHash: string(name='subject_hash'),
  // 可验证声明id
  vcid: string(name='vcid'),
  // 场景码，找dis工作人员进行分配
  bizCode?: string(name='biz_code'),
}

model InitDidAddvcHashResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 添加vc的交易hash值
  hash?: string(name='hash'),
}

/**
 * Description: 可验证声明上链之前计算其hash
 * Summary: 可验证声明上链之前计算其hash
 */
async function initDidAddvcHash(request: InitDidAddvcHashRequest): InitDidAddvcHashResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return initDidAddvcHashEx(request, headers, runtime);
}

/**
 * Description: 可验证声明上链之前计算其hash
 * Summary: 可验证声明上链之前计算其hash
 */
async function initDidAddvcHashEx(request: InitDidAddvcHashRequest, headers: map[string]string, runtime: Util.RuntimeOptions): InitDidAddvcHashResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.addvc.hash.init', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartDidAddvcExecuteRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 发起该交易的did
  did: string(name='did'),
  // 操作名
  operation: string(name='operation'),
  // 创建VC具体参数
  payload: AddVC(name='payload'),
  // 使用私钥对消息中其他字段进行签名
  requestSignature: string(name='request_signature'),
  // 场景码，找dis工作人员进行分配
  bizCode?: string(name='biz_code'),
}

model StartDidAddvcExecuteResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 实际执行可验证声明上链
 * Summary: 实际执行可验证声明上链
 */
async function startDidAddvcExecute(request: StartDidAddvcExecuteRequest): StartDidAddvcExecuteResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startDidAddvcExecuteEx(request, headers, runtime);
}

/**
 * Description: 实际执行可验证声明上链
 * Summary: 实际执行可验证声明上链
 */
async function startDidAddvcExecuteEx(request: StartDidAddvcExecuteRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartDidAddvcExecuteResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.addvc.execute.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model InitDidUpdatevcstatusHashRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 交易发起者did
  did: string(name='did'),
  // 使用私钥对消息中其他字段进行签名
  requestSignature: string(name='request_signature'),
  // valid or invalid
  status: string(name='status'),
  // 可验证声明id
  vcid: string(name='vcid'),
  // 场景码，找dis工作人员进行分配
  bizCode?: string(name='biz_code'),
}

model InitDidUpdatevcstatusHashResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 交易hash
  hash?: string(name='hash'),
}

/**
 * Description: 计算更新VC状态交易hash
 * Summary: 计算更新VC状态交易hash
 */
async function initDidUpdatevcstatusHash(request: InitDidUpdatevcstatusHashRequest): InitDidUpdatevcstatusHashResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return initDidUpdatevcstatusHashEx(request, headers, runtime);
}

/**
 * Description: 计算更新VC状态交易hash
 * Summary: 计算更新VC状态交易hash
 */
async function initDidUpdatevcstatusHashEx(request: InitDidUpdatevcstatusHashRequest, headers: map[string]string, runtime: Util.RuntimeOptions): InitDidUpdatevcstatusHashResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.updatevcstatus.hash.init', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartDidUpdatevcstatusExecuteRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 交易发起者did
  did: string(name='did'),
  // 使用私钥对消息中其他字段进行签名
  requestSignature: string(name='request_signature'),
  // 交易hash的签名
  signature: string(name='signature'),
  // valid or invalid
  status: string(name='status'),
  // 可验证声明id
  vcid: string(name='vcid'),
  // 场景码，找dis工作人员进行分配
  bizCode?: string(name='biz_code'),
}

model StartDidUpdatevcstatusExecuteResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 更新VC状态
 * Summary: 更新VC状态
 */
async function startDidUpdatevcstatusExecute(request: StartDidUpdatevcstatusExecuteRequest): StartDidUpdatevcstatusExecuteResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startDidUpdatevcstatusExecuteEx(request, headers, runtime);
}

/**
 * Description: 更新VC状态
 * Summary: 更新VC状态
 */
async function startDidUpdatevcstatusExecuteEx(request: StartDidUpdatevcstatusExecuteRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartDidUpdatevcstatusExecuteResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.updatevcstatus.execute.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model InitDidUpdatedidHashRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 发起者did
  did: string(name='did'),
  // did doc
  doc: string(name='doc'),
  // 使用私钥对消息中其他字段进行签名
  requestSignature: string(name='request_signature'),
  // 场景码，找dis工作人员进行分配
  bizCode?: string(name='biz_code'),
}

model InitDidUpdatedidHashResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 交易hash
  hash?: string(name='hash'),
}

/**
 * Description: 计算更新did交易hash
 * Summary: 计算更新did交易hash
 */
async function initDidUpdatedidHash(request: InitDidUpdatedidHashRequest): InitDidUpdatedidHashResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return initDidUpdatedidHashEx(request, headers, runtime);
}

/**
 * Description: 计算更新did交易hash
 * Summary: 计算更新did交易hash
 */
async function initDidUpdatedidHashEx(request: InitDidUpdatedidHashRequest, headers: map[string]string, runtime: Util.RuntimeOptions): InitDidUpdatedidHashResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.updatedid.hash.init', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartDidUpdatedidExecuteRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // did
  did: string(name='did'),
  // did doc
  doc: string(name='doc'),
  // 使用私钥对消息中其他字段进行签名
  requestSignature: string(name='request_signature'),
  //  交易hash签名
  signature: string(name='signature'),
  // 场景码，找dis工作人员进行分配
  bizCode?: string(name='biz_code'),
}

model StartDidUpdatedidExecuteResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 更新did
 * Summary: 更新did
 */
async function startDidUpdatedidExecute(request: StartDidUpdatedidExecuteRequest): StartDidUpdatedidExecuteResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startDidUpdatedidExecuteEx(request, headers, runtime);
}

/**
 * Description: 更新did
 * Summary: 更新did
 */
async function startDidUpdatedidExecuteEx(request: StartDidUpdatedidExecuteRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartDidUpdatedidExecuteResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.updatedid.execute.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDidDiddocDirectRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 发起者did
  did: string(name='did'),
  // 待查询did
  queryDid: string(name='query_did'),
  // 请求中其他字段的签名
  requestSignature: string(name='request_signature'),
  // 场景码，找dis工作人员进行分配
  bizCode?: string(name='biz_code'),
}

model QueryDidDiddocDirectResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // did doc
  doc?: string(name='doc'),
}

/**
 * Description: 非托管查询did doc
 * Summary: 非托管查询did doc
 */
async function queryDidDiddocDirect(request: QueryDidDiddocDirectRequest): QueryDidDiddocDirectResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDidDiddocDirectEx(request, headers, runtime);
}

/**
 * Description: 非托管查询did doc
 * Summary: 非托管查询did doc
 */
async function queryDidDiddocDirectEx(request: QueryDidDiddocDirectRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDidDiddocDirectResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.diddoc.direct.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDidVcDirectRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 发起者did
  did: string(name='did'),
  // 请求中其他字段的签名
  requestSignature: string(name='request_signature'),
  // 可验证声明id
  vcid: string(name='vcid'),
  // 场景码，找dis工作人员进行分配
  bizCode?: string(name='biz_code'),
}

model QueryDidVcDirectResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // vc内容hash值
  contentHash?: string(name='content_hash'),
  // vc的状态
  status?: string(name='status'),
}

/**
 * Description: 非托管查询可验证声明
 * Summary: 非托管查询可验证声明
 */
async function queryDidVcDirect(request: QueryDidVcDirectRequest): QueryDidVcDirectResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDidVcDirectEx(request, headers, runtime);
}

/**
 * Description: 非托管查询可验证声明
 * Summary: 非托管查询可验证声明
 */
async function queryDidVcDirectEx(request: QueryDidVcDirectRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDidVcDirectResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.vc.direct.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateDidIdentityPersonRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 扩展字段
  extensionInfo?: string(name='extension_info'),
  // 公钥
  publicKey: string(name='public_key'),
  // 恢复公钥
  recoveryKey: string(name='recovery_key'),
  // 用户id
  userId: string(name='user_id'),
  // 用户名称
  userName?: string(name='user_name'),
  // 场景码，找dis工作人员进行分配
  bizCode?: string(name='biz_code'),
}

model CreateDidIdentityPersonResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // did
  did?: string(name='did'),
}

/**
 * Description: 非托管模式下创建个人did账户
 * Summary: 非托管模式下创建个人did账户
 */
async function createDidIdentityPerson(request: CreateDidIdentityPersonRequest): CreateDidIdentityPersonResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createDidIdentityPersonEx(request, headers, runtime);
}

/**
 * Description: 非托管模式下创建个人did账户
 * Summary: 非托管模式下创建个人did账户
 */
async function createDidIdentityPersonEx(request: CreateDidIdentityPersonRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateDidIdentityPersonResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.identity.person.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateDidUpdatedidAuthkeyRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // did描述符
  did: string(name='did'),
  // 具体操作名
  operation: string(name='operation'),
  // 更新Auth 操作具体描述
  payload: UpdateDidAuthPayload(name='payload'),
  // sig(hash(operation+payload+did))  使用sdk生成方式
  requestSignature: string(name='request_signature'),
  // 场景码，找dis工作人员进行分配
  bizCode?: string(name='biz_code'),
}

model UpdateDidUpdatedidAuthkeyResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 非托管模式更新did doc中的auth key
 * Summary: 非托管模式更新doc中的auth key
 */
async function updateDidUpdatedidAuthkey(request: UpdateDidUpdatedidAuthkeyRequest): UpdateDidUpdatedidAuthkeyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateDidUpdatedidAuthkeyEx(request, headers, runtime);
}

/**
 * Description: 非托管模式更新did doc中的auth key
 * Summary: 非托管模式更新doc中的auth key
 */
async function updateDidUpdatedidAuthkeyEx(request: UpdateDidUpdatedidAuthkeyRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateDidUpdatedidAuthkeyResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.updatedid.authkey.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateDidUpdatedidServiceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // did描述符
  did: string(name='did'),
  // 更新did service endpoint
  operation: string(name='operation'),
  // update did service的payload
  payload: UpdateDidService(name='payload'),
  // sig(hash(operation+payload+did)) 使用sdk生成方式
  requestSignature: string(name='request_signature'),
  // 场景码，找dis工作人员进行分配
  bizCode?: string(name='biz_code'),
}

model UpdateDidUpdatedidServiceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 更新did对应did doc中的service信息
 * Summary: 更新did service信息
 */
async function updateDidUpdatedidService(request: UpdateDidUpdatedidServiceRequest): UpdateDidUpdatedidServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateDidUpdatedidServiceEx(request, headers, runtime);
}

/**
 * Description: 更新did对应did doc中的service信息
 * Summary: 更新did service信息
 */
async function updateDidUpdatedidServiceEx(request: UpdateDidUpdatedidServiceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateDidUpdatedidServiceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.updatedid.service.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AddDidUpdatedidServiceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 待处理did
  did: string(name='did'),
  // 具体操作名
  operation: string(name='operation'),
  // 添加的did service info
  payload: UpdateDidService(name='payload'),
  // sig(hash(operation+payload+did)) 使用sdk生成方式
  requestSignature: string(name='request_signature'),
  // 场景码，找dis工作人员进行分配
  bizCode?: string(name='biz_code'),
}

model AddDidUpdatedidServiceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 添加did doc中的service
 * Summary: 添加did doc中的service
 */
async function addDidUpdatedidService(request: AddDidUpdatedidServiceRequest): AddDidUpdatedidServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return addDidUpdatedidServiceEx(request, headers, runtime);
}

/**
 * Description: 添加did doc中的service
 * Summary: 添加did doc中的service
 */
async function addDidUpdatedidServiceEx(request: AddDidUpdatedidServiceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddDidUpdatedidServiceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.updatedid.service.add', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteDidUpdatedidServiceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 待处理did
  did: string(name='did'),
  // 具体操作名
  operation: string(name='operation'),
  // 删除did service操作信息
  payload: DidDeleteService(name='payload'),
  // sig(hash(operation+payload+did)) 使用sdk生成方式签名
  requestSignature: string(name='request_signature'),
  // 场景码，找dis工作人员进行分配
  bizCode?: string(name='biz_code'),
}

model DeleteDidUpdatedidServiceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 删除did doc中的service信息
 * Summary: 删除did doc中的service信息
 */
async function deleteDidUpdatedidService(request: DeleteDidUpdatedidServiceRequest): DeleteDidUpdatedidServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteDidUpdatedidServiceEx(request, headers, runtime);
}

/**
 * Description: 删除did doc中的service信息
 * Summary: 删除did doc中的service信息
 */
async function deleteDidUpdatedidServiceEx(request: DeleteDidUpdatedidServiceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteDidUpdatedidServiceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.updatedid.service.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateDidUpdatevcStatusRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // did描述符
  did: string(name='did'),
  // 可验证声明更新
  operation: string(name='operation'),
  // 更新可验证声明状态
  payload: UpdateVCStatus(name='payload'),
  // sig(hash(operation+payload+did)) 使用sdk生成方式
  requestSignature: string(name='request_signature'),
  // 场景码，找dis工作人员进行分配
  bizCode?: string(name='biz_code'),
}

model UpdateDidUpdatevcStatusResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 更新可验证声明状态
 * Summary: 更新可验证声明
 */
async function updateDidUpdatevcStatus(request: UpdateDidUpdatevcStatusRequest): UpdateDidUpdatevcStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateDidUpdatevcStatusEx(request, headers, runtime);
}

/**
 * Description: 更新可验证声明状态
 * Summary: 更新可验证声明
 */
async function updateDidUpdatevcStatusEx(request: UpdateDidUpdatevcStatusRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateDidUpdatevcStatusResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.updatevc.status.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model OpenDidResolverServiceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 扩展字段
  specification?: string(name='specification'),
  // 需要开通服务的租户id
  tenantId: string(name='tenant_id'),
  // 场景码，找dis工作人员进行分配
  bizCode?: string(name='biz_code'),
}

model OpenDidResolverServiceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 开通resolver服务接口
 * Summary: 开通resolver服务接口
 */
async function openDidResolverService(request: OpenDidResolverServiceRequest): OpenDidResolverServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return openDidResolverServiceEx(request, headers, runtime);
}

/**
 * Description: 开通resolver服务接口
 * Summary: 开通resolver服务接口
 */
async function openDidResolverServiceEx(request: OpenDidResolverServiceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): OpenDidResolverServiceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.resolver.service.open', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StopDidResolverServiceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 扩展字段
  specification?: string(name='specification'),
  // 需要关闭resolver服务的租户id
  tenantId: string(name='tenant_id'),
  // 场景码，找dis工作人员进行分配
  bizCode?: string(name='biz_code'),
}

model StopDidResolverServiceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 停止resolver服务接口
 * Summary: 停止resolver服务接口
 */
async function stopDidResolverService(request: StopDidResolverServiceRequest): StopDidResolverServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return stopDidResolverServiceEx(request, headers, runtime);
}

/**
 * Description: 停止resolver服务接口
 * Summary: 停止resolver服务接口
 */
async function stopDidResolverServiceEx(request: StopDidResolverServiceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StopDidResolverServiceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.resolver.service.stop', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartDidDerivedidExecuteRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 发起该交易的根DID
  did: string(name='did'),
  // 操作名
  operation: string(name='operation'),
  // derive did的参数
  payload: DeriveDid(name='payload'),
  // 使用私钥对消息中其他字段进行签名
  requestSignature: string(name='request_signature'),
  // 场景码，找dis工作人员进行分配
  bizCode?: string(name='biz_code'),
}

model StartDidDerivedidExecuteResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 使用根DID派生子DID并上链
 * Summary: 派生子DID上链
 */
async function startDidDerivedidExecute(request: StartDidDerivedidExecuteRequest): StartDidDerivedidExecuteResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startDidDerivedidExecuteEx(request, headers, runtime);
}

/**
 * Description: 使用根DID派生子DID并上链
 * Summary: 派生子DID上链
 */
async function startDidDerivedidExecuteEx(request: StartDidDerivedidExecuteRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartDidDerivedidExecuteResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.derivedid.execute.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExecDidAccesscontrolAuthorizeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 发起授权的did
  fromdid: string(name='fromdid'),
  // 对其他字段的签名
  requestSignature: string(name='request_signature'),
  // 被授权的did
  todid: string(name='todid'),
  // 授权的权限类型
  type: [ string ](name='type'),
  // 场景码，找dis工作人员进行分配
  bizCode?: string(name='biz_code'),
}

model ExecDidAccesscontrolAuthorizeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 基于DIS的访问控制授权
 * Summary: 访问控制授权
 */
async function execDidAccesscontrolAuthorize(request: ExecDidAccesscontrolAuthorizeRequest): ExecDidAccesscontrolAuthorizeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return execDidAccesscontrolAuthorizeEx(request, headers, runtime);
}

/**
 * Description: 基于DIS的访问控制授权
 * Summary: 访问控制授权
 */
async function execDidAccesscontrolAuthorizeEx(request: ExecDidAccesscontrolAuthorizeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExecDidAccesscontrolAuthorizeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.accesscontrol.authorize.exec', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExecDidAccesscontrolCheckRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 发起鉴权请求的did
  fromdid: string(name='fromdid'),
  // 发起者用私钥对请求其他字段的签名
  requestSignature: string(name='request_signature'),
  // 被鉴定权限的did
  todid: string(name='todid'),
  // 鉴定的权限类别
  type: [ string ](name='type'),
  // 场景码，找dis工作人员进行分配
  bizCode?: string(name='biz_code'),
}

model ExecDidAccesscontrolCheckResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 对请求的权限进行鉴权，判断是否有该权限
 * Summary: 访问控制鉴权
 */
async function execDidAccesscontrolCheck(request: ExecDidAccesscontrolCheckRequest): ExecDidAccesscontrolCheckResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return execDidAccesscontrolCheckEx(request, headers, runtime);
}

/**
 * Description: 对请求的权限进行鉴权，判断是否有该权限
 * Summary: 访问控制鉴权
 */
async function execDidAccesscontrolCheckEx(request: ExecDidAccesscontrolCheckRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExecDidAccesscontrolCheckResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.accesscontrol.check.exec', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExecDidAccesscontrolUpdateRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 发起请求的did
  fromdid: string(name='fromdid'),
  // 发起者私钥对其他字段的签名
  requestSignature: string(name='request_signature'),
  // 被更新权限的did
  todid: string(name='todid'),
  // 更新后的权限
  type: [ string ](name='type'),
  // 场景码，找dis工作人员进行分配
  bizCode?: string(name='biz_code'),
}

model ExecDidAccesscontrolUpdateResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 访问控制中更新权限
 * Summary: 对已授权的did更新权限
 */
async function execDidAccesscontrolUpdate(request: ExecDidAccesscontrolUpdateRequest): ExecDidAccesscontrolUpdateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return execDidAccesscontrolUpdateEx(request, headers, runtime);
}

/**
 * Description: 访问控制中更新权限
 * Summary: 对已授权的did更新权限
 */
async function execDidAccesscontrolUpdateEx(request: ExecDidAccesscontrolUpdateRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExecDidAccesscontrolUpdateResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.accesscontrol.update.exec', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateDidIdentityIotRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 扩展字段
  extensionInfo?: string(name='extension_info'),
  // 公钥
  publicKey: string(name='public_key'),
  // 恢复秘钥
  recoveryKey: string(name='recovery_key'),
  // id
  userId: string(name='user_id'),
  // user name
  userName?: string(name='user_name'),
  // 场景码，找dis工作人员进行分配
  bizCode?: string(name='biz_code'),
}

model CreateDidIdentityIotResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回创建的did
  did?: string(name='did'),
}

/**
 * Description: 非托管模式下为iot创建did
 * Summary: 非托管模式下为iot创建did
 */
async function createDidIdentityIot(request: CreateDidIdentityIotRequest): CreateDidIdentityIotResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createDidIdentityIotEx(request, headers, runtime);
}

/**
 * Description: 非托管模式下为iot创建did
 * Summary: 非托管模式下为iot创建did
 */
async function createDidIdentityIotEx(request: CreateDidIdentityIotRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateDidIdentityIotResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.identity.iot.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExecDidServicetypeCreateRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 发起该交易的did
  did: string(name='did'),
  // 创建服务类型
  operation: string(name='operation'),
  // 新增服务类型的定义Json 字符串
  // {
  //   "@context": {
  //     "version": 1,
  //     "id": "{ServiceTypeName}", //<- 50 Byte
  //     "type": "ServiceType", //<- 固定值
  //     "serviceInput": "", //<- 入参描述
  //     "serviceOutput": "", //<- 出参描述
  //     "accessMode": "", //<- 访问模式
  //     "description": "" //<- 服务描述
  //   },
  //    "controller": "{Creator`s did}" // <- 创建者did，只有该创建者才能修改服务类型定义
  // }
  payload: string(name='payload'),
  // 使用私钥对消息中其他字段进行签名
  requestSignature: string(name='request_signature'),
  // 场景码，找dis工作人员进行分配
  bizCode?: string(name='biz_code'),
}

model ExecDidServicetypeCreateResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 服务注册成功之后返回注册的服务类型名
  serviceType?: string(name='service_type'),
}

/**
 * Description: 非托管模式下的服务类型创建
 * Summary: 非托管模式下的服务类型创建
 */
async function execDidServicetypeCreate(request: ExecDidServicetypeCreateRequest): ExecDidServicetypeCreateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return execDidServicetypeCreateEx(request, headers, runtime);
}

/**
 * Description: 非托管模式下的服务类型创建
 * Summary: 非托管模式下的服务类型创建
 */
async function execDidServicetypeCreateEx(request: ExecDidServicetypeCreateRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExecDidServicetypeCreateResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.servicetype.create.exec', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateDidIdentityCommonRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 场景码，找dis工作人员进行分配
  bizCode?: string(name='biz_code'),
  // 扩展字段
  extensionInfo?: string(name='extension_info'),
  // 公钥
  publicKey: string(name='public_key'),
  // 恢复公钥
  recoveryKey: string(name='recovery_key'),
  // user_id
  userId: string(name='user_id'),
  // 名称
  userName?: string(name='user_name'),
  // 通用DID类型 Person Corporate Devices Data Common
  entityType?: string(name='entity_type'),
}

model CreateDidIdentityCommonResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // did
  did?: string(name='did'),
}

/**
 * Description: 非托管模式下创建普通did账户
 * Summary: 非托管模式下创建普通did账户
 */
async function createDidIdentityCommon(request: CreateDidIdentityCommonRequest): CreateDidIdentityCommonResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createDidIdentityCommonEx(request, headers, runtime);
}

/**
 * Description: 非托管模式下创建普通did账户
 * Summary: 非托管模式下创建普通did账户
 */
async function createDidIdentityCommonEx(request: CreateDidIdentityCommonRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateDidIdentityCommonResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.identity.common.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ConfirmVcVcrepoVctransmitRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 请求发起者did
  did: string(name='did'),
  // vc_transmit_cnf
  operation: string(name='operation'),
  // VC传输确认请求参数
  payload: [ VcTransmitCnf ](name='payload'),
  // 签名
  signature: string(name='signature'),
  // 场景码，找dis工作人员进行分配
  bizCode?: string(name='biz_code'),
}

model ConfirmVcVcrepoVctransmitResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 传输结果
  result?: [ VcTransmitResult ](name='result'),
}

/**
 * Description: VC传输确认请求
 * Summary: VC传输确认请求
 */
async function confirmVcVcrepoVctransmit(request: ConfirmVcVcrepoVctransmitRequest): ConfirmVcVcrepoVctransmitResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return confirmVcVcrepoVctransmitEx(request, headers, runtime);
}

/**
 * Description: VC传输确认请求
 * Summary: VC传输确认请求
 */
async function confirmVcVcrepoVctransmitEx(request: ConfirmVcVcrepoVctransmitRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ConfirmVcVcrepoVctransmitResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.vc.vcrepo.vctransmit.confirm', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateDidUpdatedidPubkeyRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 场景码，找dis工作人员进行分配
  bizCode?: string(name='biz_code'),
  // did描述符
  did: string(name='did'),
  // 具体操作名
  operation: string(name='operation'),
  // 需要更新的新的公钥，仅在未完成上链的DID 才能做这个更新
  publicKey: string(name='public_key'),
  // sig(hash(operation+payload+did)) 使用sdk生成方式
  requestSignature: string(name='request_signature'),
}

model UpdateDidUpdatedidPubkeyResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 在非托管模式，要先createDid，然后addDoc，两步都完成才实现DID创建。
如果第一步成功，第二步失败，无法完全回滚，但是第一步createDid已经绑定了一个pubKey，如果调用方重试，并且用了新的pubKey（可能之前绑定的pubKey因为没有走完流程，没有保存，或者没有中间态，继续重试第二步），就无法重试成功。因此需要给这种极端情况一个更新pubKey的机会，但是需要通过recoveryKey鉴权请求变更。
 * Summary: 非托管更新还未上链did的pub key
 */
async function updateDidUpdatedidPubkey(request: UpdateDidUpdatedidPubkeyRequest): UpdateDidUpdatedidPubkeyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateDidUpdatedidPubkeyEx(request, headers, runtime);
}

/**
 * Description: 在非托管模式，要先createDid，然后addDoc，两步都完成才实现DID创建。
如果第一步成功，第二步失败，无法完全回滚，但是第一步createDid已经绑定了一个pubKey，如果调用方重试，并且用了新的pubKey（可能之前绑定的pubKey因为没有走完流程，没有保存，或者没有中间态，继续重试第二步），就无法重试成功。因此需要给这种极端情况一个更新pubKey的机会，但是需要通过recoveryKey鉴权请求变更。
 * Summary: 非托管更新还未上链did的pub key
 */
async function updateDidUpdatedidPubkeyEx(request: UpdateDidUpdatedidPubkeyRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateDidUpdatedidPubkeyResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.updatedid.pubkey.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AddDidUpdatedidServicelistRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 场景码，找dis工作人员进行分配
  bizCode?: string(name='biz_code'),
  // 待处理did
  did: string(name='did'),
  // 具体操作名
  operation: string(name='operation'),
  // 更新ServiceList
  payload: UpdateDidServiceList(name='payload'),
  // sig(hash(operation+payload+did)) 使用sdk生成方式
  requestSignature: string(name='request_signature'),
}

model AddDidUpdatedidServicelistResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 一次增加多个service
 * Summary: 一次增加多个service
 */
async function addDidUpdatedidServicelist(request: AddDidUpdatedidServicelistRequest): AddDidUpdatedidServicelistResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return addDidUpdatedidServicelistEx(request, headers, runtime);
}

/**
 * Description: 一次增加多个service
 * Summary: 一次增加多个service
 */
async function addDidUpdatedidServicelistEx(request: AddDidUpdatedidServicelistRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddDidUpdatedidServicelistResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.did.updatedid.servicelist.add', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartVcVcrepositoryWriteRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 指定情况跟随 auth_did_list，如果auth_did_list不指定，则此字段无需指定，否则是与auth_did_list长度相同，并且对应auth_did_list的did的公钥加密AES密钥的结果
  authAccessKeyList?: [ string ](name='auth_access_key_list'),
  // 配置此列表，则说明需要并且控制访问权限，此列表为初始配置的did名单，拥有对此颁发证书的读取权限。 如果不配置此列表，则默认将明文存储此证书，任何did都可以访问此证书声明内容。
  authDidList?: [ string ](name='auth_did_list'),
  // 写入VC数据的did，通常为证书VC的颁发者issuer的did。
  did: string(name='did'),
  // 对当前VC Repository操作的描述，signature字段需要包含此操作的描述，最终会记录在VC Repository连接的链上，可追溯此operation操作记录。
  operation: string(name='operation'),
  // 写数据的did对应使用公钥做的数据签名，确保数据准确性。
  signature: string(name='signature'),
  // 可验证声明的完整声明，其中claim字段可以已被加密保护 {"content":{"verion":"0.7.0","issuer":"xxxx","subject":"xxxx","expire":1530735444,"issucanceDate":1530735000,"id":"XXXX","claim":{//用户自定义，可加密处理},"status":{"type":"XXXX","id":"XXXXX"}},"proof":{"type":"ecdsa","created":"2018-06-18T21:19:10Z","verificationMethod":"XXXX","signatureValue":"XXXXX"}}
  vcContent: string(name='vc_content'),
}

model StartVcVcrepositoryWriteResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // true:操作成功，false:操作失败
  result?: boolean(name='result'),
}

/**
 * Description: 存储VC到存储中
 * Summary: 写入VC存储
 */
async function startVcVcrepositoryWrite(request: StartVcVcrepositoryWriteRequest): StartVcVcrepositoryWriteResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startVcVcrepositoryWriteEx(request, headers, runtime);
}

/**
 * Description: 存储VC到存储中
 * Summary: 写入VC存储
 */
async function startVcVcrepositoryWriteEx(request: StartVcVcrepositoryWriteRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartVcVcrepositoryWriteResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.vc.vcrepository.write.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartVcVcrepositoryReadRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 提交请求的did，通常是在授权列表中的did才具有读取权限。
  did: string(name='did'),
  // 对当前VC Repository操作的描述，signature字段需要包含此操作的描述，最终会记录在VC Repository连接的链上，可追溯此operation操作记录。
  operation: string(name='operation'),
  // 读数据请求的did对应使用公钥做的数据签名，确保数据准确性，签名包含operation字段，会一起上链。
  signature: string(name='signature'),
  // 目标读取VC的唯一id标识。
  verifiableClaimId: string(name='verifiable_claim_id'),
}

model StartVcVcrepositoryReadResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 密文加密16进制表示的字符串，是请求方did对应的didDoc中的公钥加密AES密钥的结果，使用标准信封加密的方式，AES密钥用于解密verifiable_claim_content的claim字段，如果此auth_access_key是空字符串，则说明verifiable_claim_content的内容是明文。
  authAccessKey?: string(name='auth_access_key'),
  // 可验证声明的完整声明 {"content":{"verion":"0.7.0","issuer":"xxxx","subject":"xxxx","expire":1530735444,"issucanceDate":1530735000,"id":"XXXX","claim":{//用户自定义，可能为密文},"status":{"type":"XXXX","id":"XXXXX"}},"proof":{"type":"ecdsa","created":"2018-06-18T21:19:10Z","verificationMethod":"XXXX","signatureValue":"XXXXX"}}
  verifiableClaimContent?: string(name='verifiable_claim_content'),
}

/**
 * Description: 从VC存储中，读取目标的VC内容，前提是调用者的did已经被授予权限。
如果VC中claim内容已被加密，返回值的verifiable_claim_content的claim字段是密文，需要使用当前调用者的did对应私钥解密auth_access_key获取AES密钥，然后通过AES密钥解密VC内容。
 * Summary: 从VC存储读取已被授权VC内容
 */
async function startVcVcrepositoryRead(request: StartVcVcrepositoryReadRequest): StartVcVcrepositoryReadResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startVcVcrepositoryReadEx(request, headers, runtime);
}

/**
 * Description: 从VC存储中，读取目标的VC内容，前提是调用者的did已经被授予权限。
如果VC中claim内容已被加密，返回值的verifiable_claim_content的claim字段是密文，需要使用当前调用者的did对应私钥解密auth_access_key获取AES密钥，然后通过AES密钥解密VC内容。
 * Summary: 从VC存储读取已被授权VC内容
 */
async function startVcVcrepositoryReadEx(request: StartVcVcrepositoryReadRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartVcVcrepositoryReadResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.vc.vcrepository.read.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartVcVcrepositoryAuthRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 指定情况跟随 auth_did_list，如果auth_did_list不指定，则此字段无需指定，否则是与auth_did_list长度相同，并且对应auth_did_list的did的公钥加密AES密钥的结果。
  authAccessKeyList: [ string ](name='auth_access_key_list'),
  // 本次追加授权的did列表
  authDidList: [ string ](name='auth_did_list'),
  // 提交请求的did，通常是目标VC的subject did，也就是VC的owner。
  did: string(name='did'),
  // 对当前VC Repository操作的描述，signature字段需要包含此操作的描述，最终会记录在VC Repository连接的链上，可追溯此operation操作记录。
  operation: string(name='operation'),
  // 读数据请求的did对应使用公钥做的数据签名，确保数据准确性，签名包含operation字段，会一起上链。
  signature: string(name='signature'),
  // 目标VC的唯一id标识。
  verifiableClaimId: string(name='verifiable_claim_id'),
}

model StartVcVcrepositoryAuthResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // true：操作成功，false：操作失败
  result?: boolean(name='result'),
}

/**
 * Description: 对已存在的证书VC进行新增授权管理，批量添加did到授权列表中，授权这些did具有读取VC的权限。
注意：VC的整体auth_did_list的长度将受限制，目前约定不超过30。
 * Summary: 添加已有证书VC的授权列表
 */
async function startVcVcrepositoryAuth(request: StartVcVcrepositoryAuthRequest): StartVcVcrepositoryAuthResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startVcVcrepositoryAuthEx(request, headers, runtime);
}

/**
 * Description: 对已存在的证书VC进行新增授权管理，批量添加did到授权列表中，授权这些did具有读取VC的权限。
注意：VC的整体auth_did_list的长度将受限制，目前约定不超过30。
 * Summary: 添加已有证书VC的授权列表
 */
async function startVcVcrepositoryAuthEx(request: StartVcVcrepositoryAuthRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartVcVcrepositoryAuthResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.vc.vcrepository.auth.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartVcVcrepoUserRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 用户did标示
  did: string(name='did'),
  // 操作缩写
  operation: string(name='operation'),
  // 注册用户实际参数
  payload: VcUserRegisterPayload(name='payload'),
  // 用户使用私钥对参数进行签名
  signature: string(name='signature'),
}

model StartVcVcrepoUserResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: vc repo上的用户注册
 * Summary: vc repo 上的用户注册
 */
async function startVcVcrepoUser(request: StartVcVcrepoUserRequest): StartVcVcrepoUserResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startVcVcrepoUserEx(request, headers, runtime);
}

/**
 * Description: vc repo上的用户注册
 * Summary: vc repo 上的用户注册
 */
async function startVcVcrepoUserEx(request: StartVcVcrepoUserRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartVcVcrepoUserResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.vc.vcrepo.user.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateVcVcrepoUserRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 用户did标示
  did: string(name='did'),
  // 操作缩写
  operation: string(name='operation'),
  // 更新的user信息
  payload: VcUserRegisterPayload(name='payload'),
  // 用户使用私钥对参数进行签名
  signature: string(name='signature'),
}

model UpdateVcVcrepoUserResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: VC Repo用户信息更新，可以更新公钥，可以更新vc channel
 * Summary: VC Repo用户信息更新
 */
async function updateVcVcrepoUser(request: UpdateVcVcrepoUserRequest): UpdateVcVcrepoUserResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateVcVcrepoUserEx(request, headers, runtime);
}

/**
 * Description: VC Repo用户信息更新，可以更新公钥，可以更新vc channel
 * Summary: VC Repo用户信息更新
 */
async function updateVcVcrepoUserEx(request: UpdateVcVcrepoUserRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateVcVcrepoUserResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.vc.vcrepo.user.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartVcVcrepoVctransmitRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 用户did标示
  did: string(name='did'),
  // 操作缩写
  operation: string(name='operation'),
  // 实际参数
  payload: VcTransmitPayload(name='payload'),
  // 用户使用私钥对参数进行签名
  signature: string(name='signature'),
}

model StartVcVcrepoVctransmitResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 具体传输结果
  result?: [ VcTransmitResult ](name='result'),
}

/**
 * Description: 指定VC可信传输到指定Verifier
 * Summary: 指定VC可信传输到指定Verifier
 */
async function startVcVcrepoVctransmit(request: StartVcVcrepoVctransmitRequest): StartVcVcrepoVctransmitResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startVcVcrepoVctransmitEx(request, headers, runtime);
}

/**
 * Description: 指定VC可信传输到指定Verifier
 * Summary: 指定VC可信传输到指定Verifier
 */
async function startVcVcrepoVctransmitEx(request: StartVcVcrepoVctransmitRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartVcVcrepoVctransmitResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.vc.vcrepo.vctransmit.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartVcVcrepoControlleradduserRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // controller did标示
  controller: string(name='controller'),
  // 操作缩写
  operation: string(name='operation'),
  // 实际参数
  payload: VcControllerAddUserRegisterPayload(name='payload'),
  // controller使用私钥对参数进行签名
  signature: string(name='signature'),
}

model StartVcVcrepoControlleradduserResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 通过controller进行用户注册
 * Summary: 通过controller的用户注册
 */
async function startVcVcrepoControlleradduser(request: StartVcVcrepoControlleradduserRequest): StartVcVcrepoControlleradduserResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startVcVcrepoControlleradduserEx(request, headers, runtime);
}

/**
 * Description: 通过controller进行用户注册
 * Summary: 通过controller的用户注册
 */
async function startVcVcrepoControlleradduserEx(request: StartVcVcrepoControlleradduserRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartVcVcrepoControlleradduserResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.vc.vcrepo.controlleradduser.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartVcVcrepoVccontentsaveRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 发起者did
  did: string(name='did'),
  // 操作缩写
  operation: string(name='operation'),
  // vc原文内容
  payload: string(name='payload'),
  // 用户使用私钥对参数进行签名
  signature: string(name='signature'),
}

model StartVcVcrepoVccontentsaveResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: VC存储
 * Summary: VC存储
 */
async function startVcVcrepoVccontentsave(request: StartVcVcrepoVccontentsaveRequest): StartVcVcrepoVccontentsaveResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startVcVcrepoVccontentsaveEx(request, headers, runtime);
}

/**
 * Description: VC存储
 * Summary: VC存储
 */
async function startVcVcrepoVccontentsaveEx(request: StartVcVcrepoVccontentsaveRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartVcVcrepoVccontentsaveResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.vc.vcrepo.vccontentsave.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartVcRepoReadwithvcidRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 发起者did
  did: string(name='did'),
  // 操作缩写
  operation: string(name='operation'),
  // vcid
  payload: string(name='payload'),
  // 用户使用私钥对参数进行签名
  signature: string(name='signature'),
}

model StartVcRepoReadwithvcidResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // vc原文
  vc?: string(name='vc'),
}

/**
 * Description: 根据vcid获取vccontent
 * Summary: 根据vcid获取vccontent
 */
async function startVcRepoReadwithvcid(request: StartVcRepoReadwithvcidRequest): StartVcRepoReadwithvcidResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startVcRepoReadwithvcidEx(request, headers, runtime);
}

/**
 * Description: 根据vcid获取vccontent
 * Summary: 根据vcid获取vccontent
 */
async function startVcRepoReadwithvcidEx(request: StartVcRepoReadwithvcidRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartVcRepoReadwithvcidResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.vc.repo.readwithvcid.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model InitVcVcrepoVctransmitRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // vc传输发起人did
  did: string(name='did'),
  // vc_transmit_init
  operation: string(name='operation'),
  // 使用对应的did私钥进行签名
  signature: string(name='signature'),
  // 可验证声明id
  vcId: string(name='vc_id'),
  // 传递目标
  verifiers: [ VcTransmitTargetStruct ](name='verifiers'),
}

model InitVcVcrepoVctransmitResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 非托管模式下传输vc初始化结果
  initResult?: [ VcTransmitInitResult ](name='init_result'),
}

/**
 * Description: vc仓库非托管模式下的VC传输初始化接口
 * Summary: vc仓库非托管模式下的VC传输初始化接口
 */
async function initVcVcrepoVctransmit(request: InitVcVcrepoVctransmitRequest): InitVcVcrepoVctransmitResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return initVcVcrepoVctransmitEx(request, headers, runtime);
}

/**
 * Description: vc仓库非托管模式下的VC传输初始化接口
 * Summary: vc仓库非托管模式下的VC传输初始化接口
 */
async function initVcVcrepoVctransmitEx(request: InitVcVcrepoVctransmitRequest, headers: map[string]string, runtime: Util.RuntimeOptions): InitVcVcrepoVctransmitResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.vc.vcrepo.vctransmit.init', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model InitIdentificationFaceauthRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 认证类型,枚举值
  // PC_AUTH、APP_AUTH
  authType: string(name='auth_type'),
  //    用户身份信息
  identityParam: IdentityParam(name='identity_param'),
  // 认证接口回调路径，POST接口
  // 请求示例：
  // {
  //   "certifyId":"0242de204e1a2c3ed6ee5e21d8a57a4c",
  //   "status":3,
  // }
  returnUrl?: string(name='return_url'),
}

model InitIdentificationFaceauthResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 认证ID
  certifyId?: string(name='certify_id'),
  // 二维码URL，用户支付宝扫一扫实人认证
  // 
  certifyUrl?: string(name='certify_url'),
}

/**
 * Description: 人脸实人认证初始化接口
 * Summary: 人脸实人认证初始化接口
 */
async function initIdentificationFaceauth(request: InitIdentificationFaceauthRequest): InitIdentificationFaceauthResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return initIdentificationFaceauthEx(request, headers, runtime);
}

/**
 * Description: 人脸实人认证初始化接口
 * Summary: 人脸实人认证初始化接口
 */
async function initIdentificationFaceauthEx(request: InitIdentificationFaceauthRequest, headers: map[string]string, runtime: Util.RuntimeOptions): InitIdentificationFaceauthResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.identification.faceauth.init', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryIdentificationFaceauthRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 认证ID，用于查询认证结果
  certifyId: string(name='certify_id'),
}

model QueryIdentificationFaceauthResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 认证ID
  certifyId?: string(name='certify_id'),
  // 认证状态，枚举值如下：
  // 值为1，认证初始化成功
  // 值为2，认证链接获取成功
  // 值为3，认证通过
  status?: long(name='status'),
}

/**
 * Description: 获取人脸实人认证结果
 * Summary: 获取人脸实人认证结果
 */
async function queryIdentificationFaceauth(request: QueryIdentificationFaceauthRequest): QueryIdentificationFaceauthResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryIdentificationFaceauthEx(request, headers, runtime);
}

/**
 * Description: 获取人脸实人认证结果
 * Summary: 获取人脸实人认证结果
 */
async function queryIdentificationFaceauthEx(request: QueryIdentificationFaceauthRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryIdentificationFaceauthResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.identification.faceauth.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model InitNotaryTransactionRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 客户的身份信息
  customer: IdentityParam(name='customer'),
  // 扩展字段
  properties?: string(name='properties'),
  // 托管用户信息
  trustee?: IdentityParam(name='trustee'),
  // 是否使⽤用可信时间戳，默认为false
  tsr?: boolean(name='tsr'),
}

model InitNotaryTransactionResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回全局唯⼀的事务ID
  token?: string(name='token'),
}

/**
 * Description: 初始化存证事务: 进⾏行行资格核验，包括调⽤用⽅方账号权限，是否实⼈人等。成功后获得存证事务 ID(Token)
 * Summary: 存证交易初始化
 */
async function initNotaryTransaction(request: InitNotaryTransactionRequest): InitNotaryTransactionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return initNotaryTransactionEx(request, headers, runtime);
}

/**
 * Description: 初始化存证事务: 进⾏行行资格核验，包括调⽤用⽅方账号权限，是否实⼈人等。成功后获得存证事务 ID(Token)
 * Summary: 存证交易初始化
 */
async function initNotaryTransactionEx(request: InitNotaryTransactionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): InitNotaryTransactionResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.notary.transaction.init', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetNotaryTransactionRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 存证事务ID
  token: string(name='token'),
}

model GetNotaryTransactionResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 存证信息下载地址
  downloadUrl?: string(name='download_url'),
}

/**
 * Description: ⽤用户通过存证事务Token，获取事务中所有的存证信息
 * Summary: 获取事务中所有的存证信息
 */
async function getNotaryTransaction(request: GetNotaryTransactionRequest): GetNotaryTransactionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getNotaryTransactionEx(request, headers, runtime);
}

/**
 * Description: ⽤用户通过存证事务Token，获取事务中所有的存证信息
 * Summary: 获取事务中所有的存证信息
 */
async function getNotaryTransactionEx(request: GetNotaryTransactionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetNotaryTransactionResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.notary.transaction.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SendNotaryTransactionTextRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 存证元数据
  meta: NotaryMetaParam(name='meta'),
  // 存证内容
  notaryContent: string(name='notary_content'),
  // 是否使用可信时间戳
  tsr?: boolean(name='tsr'),
}

model SendNotaryTransactionTextResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 存证凭据txHash，通过此凭据查询存证
  transactionHash?: string(name='transaction_hash'),
}

/**
 * Description: 发起⼀个文本存证，将文本内容存证上链。
 * Summary: 发送文本存证
 */
async function sendNotaryTransactionText(request: SendNotaryTransactionTextRequest): SendNotaryTransactionTextResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return sendNotaryTransactionTextEx(request, headers, runtime);
}

/**
 * Description: 发起⼀个文本存证，将文本内容存证上链。
 * Summary: 发送文本存证
 */
async function sendNotaryTransactionTextEx(request: SendNotaryTransactionTextRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SendNotaryTransactionTextResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.notary.transaction.text.send', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetNotaryTransactionTextRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 存证凭据
  transactionHash: string(name='transaction_hash'),
}

model GetNotaryTransactionTextResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 存证文本
  content?: string(name='content'),
}

/**
 * Description: ⽤户通过交易易哈希获取自己上传的文本存证内容
 * Summary: 获取文本存证
 */
async function getNotaryTransactionText(request: GetNotaryTransactionTextRequest): GetNotaryTransactionTextResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getNotaryTransactionTextEx(request, headers, runtime);
}

/**
 * Description: ⽤户通过交易易哈希获取自己上传的文本存证内容
 * Summary: 获取文本存证
 */
async function getNotaryTransactionTextEx(request: GetNotaryTransactionTextRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetNotaryTransactionTextResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.notary.transaction.text.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateNotaryTokenRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 用户身份识别信息
  customer: Identity(name='customer'),
  // 接口调用者身份信息
  entity?: Identity(name='entity'),
  // 扩展属性
  properties?: string(name='properties'),
  // 业务子类型标识
  subBizId?: string(name='sub_biz_id'),
  // 是否使用可信时间戳，默认为false
  tsr?: boolean(name='tsr'),
}

model CreateNotaryTokenResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回事务ID，全局唯一
  transactionId?: string(name='transaction_id'),
  // 可信时间信息
  tsr?: TsrResponse(name='tsr'),
}

/**
 * Description: 获取存证事务ID
 * Summary: 获取存证事务ID
 */
async function createNotaryToken(request: CreateNotaryTokenRequest): CreateNotaryTokenResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createNotaryTokenEx(request, headers, runtime);
}

/**
 * Description: 获取存证事务ID
 * Summary: 获取存证事务ID
 */
async function createNotaryTokenEx(request: CreateNotaryTokenRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateNotaryTokenResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.notary.token.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetNotaryTransRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 存证事务ID
  token: string(name='token'),
}

model GetNotaryTransResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回文件下载路径列表
  fileUrl?: [ string ](name='file_url'),
  // 存证事务ID
  token?: string(name='token'),
}

/**
 * Description: 通过存证事务Token，获取事务中所有的存证信息
 * Summary: 获取事务中所有的存证信息
 */
async function getNotaryTrans(request: GetNotaryTransRequest): GetNotaryTransResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getNotaryTransEx(request, headers, runtime);
}

/**
 * Description: 通过存证事务Token，获取事务中所有的存证信息
 * Summary: 获取事务中所有的存证信息
 */
async function getNotaryTransEx(request: GetNotaryTransRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetNotaryTransResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.notary.trans.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateNotaryTextRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 存证地点(如手机硬件ID，Wi-Fi地址，GPS位置，IP地址)
  location?: Location(name='location'),
  // 存证内容
  notaryContent: string(name='notary_content'),
  // 描述本条存证在存证事务中的阶段，用户可自行维护
  phase: string(name='phase'),
  // 扩展属性
  properties: string(name='properties'),
  // 存证事务id
  token: string(name='token'),
  // 是否使用可信时间戳，默认为false
  tsr?: boolean(name='tsr'),
}

model CreateNotaryTextResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 可信时间信息
  tsr?: TsrResponse(name='tsr'),
  // 存证凭据
  txHash?: string(name='tx_hash'),
}

/**
 * Description: 发起文本存证，将文本内容存证上链
 * Summary: 文本存证，将文本内容存证上链
 */
async function createNotaryText(request: CreateNotaryTextRequest): CreateNotaryTextResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createNotaryTextEx(request, headers, runtime);
}

/**
 * Description: 发起文本存证，将文本内容存证上链
 * Summary: 文本存证，将文本内容存证上链
 */
async function createNotaryTextEx(request: CreateNotaryTextRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateNotaryTextResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.notary.text.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetNotaryTextRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 存证地点(如手机硬件ID，Wi-Fi地址，GPS位置，IP地址)
  location?: Location(name='location'),
  // 描述本条存证在存证事务中的阶段，用户可自行维护
  phase?: string(name='phase'),
  // 扩展属性
  properties?: string(name='properties'),
  // 存证事务id
  token?: string(name='token'),
  // 存证凭据
  txHash: string(name='tx_hash'),
}

model GetNotaryTextResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 存证信息
  content?: string(name='content'),
  // 可信信息
  tsr?: TsrResponse(name='tsr'),
}

/**
 * Description: 用户通过交易哈希获取自己上传的文本存证内容
 * Summary: 获取文本存证内容
 */
async function getNotaryText(request: GetNotaryTextRequest): GetNotaryTextResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getNotaryTextEx(request, headers, runtime);
}

/**
 * Description: 用户通过交易哈希获取自己上传的文本存证内容
 * Summary: 获取文本存证内容
 */
async function getNotaryTextEx(request: GetNotaryTextRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetNotaryTextResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.notary.text.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateNotaryFileRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 存证地点(如手机硬件ID，Wi-Fi地址，GPS位置，IP地址)
  location?: Location(name='location'),
  // base64加密后的存证文件内容
  notaryFile: string(name='notary_file'),
  // 存证文件名称
  notaryName: string(name='notary_name'),
  // 描述本条存证在存证事务中的阶段，用户可自行维护
  phase: string(name='phase'),
  // 扩展属性
  properties?: string(name='properties'),
  // 存证事务ID
  token: string(name='token'),
  // 是否使用可信时间戳，默认为false
  tsr?: boolean(name='tsr'),
}

model CreateNotaryFileResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 可信时间信息
  tsr?: TsrResponse(name='tsr'),
  // 存证凭证
  txHash?: string(name='tx_hash'),
}

/**
 * Description: 发起文件存证，将文件内容存证上链
 * Summary: 文件内容存证上链
 */
async function createNotaryFile(request: CreateNotaryFileRequest): CreateNotaryFileResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createNotaryFileEx(request, headers, runtime);
}

/**
 * Description: 发起文件存证，将文件内容存证上链
 * Summary: 文件内容存证上链
 */
async function createNotaryFileEx(request: CreateNotaryFileRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateNotaryFileResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.notary.file.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetNotaryFileRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 存证地点(如手机硬件ID，Wi-Fi地址，GPS位置，IP地址)
  location?: Location(name='location'),
  // 描述本条存证在存证事务中的阶段，用户可自行维护
  phase: string(name='phase'),
  // 扩展属性
  properties?: string(name='properties'),
  // 存证事务ID
  token: string(name='token'),
  // 存证凭据
  txHash: string(name='tx_hash'),
}

model GetNotaryFileResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 文件下载地址
  ossPath?: string(name='oss_path'),
}

/**
 * Description: 用户通过交易哈希获取自己上传的文件存证oss下载地址
 * Summary: 获取文件存证oss下载地址
 */
async function getNotaryFile(request: GetNotaryFileRequest): GetNotaryFileResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getNotaryFileEx(request, headers, runtime);
}

/**
 * Description: 用户通过交易哈希获取自己上传的文件存证oss下载地址
 * Summary: 获取文件存证oss下载地址
 */
async function getNotaryFileEx(request: GetNotaryFileRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetNotaryFileResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.notary.file.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateNotarySourceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 存证地点(如手机硬件ID，Wi-Fi地址，GPS位置，IP地址)
  location?: Location(name='location'),
  // 描述本条存证在存证事务中的阶段，用户可自行维护
  phase: string(name='phase'),
  // 扩展属性
  properties?: string(name='properties'),
  // 原文文件描述
  sourceDesc: string(name='source_desc'),
  // base64加密后的原文文件内容
  sourceFile: string(name='source_file'),
  // 存证原文名称
  sourceName: string(name='source_name'),
  // 存证事务ID
  token: string(name='token'),
  // 是否使用可信时间戳，默认为false
  tsr?: boolean(name='tsr'),
}

model CreateNotarySourceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 可信时间信息
  tsr?: TsrResponse(name='tsr'),
  // 存证凭据
  txHash?: string(name='tx_hash'),
}

/**
 * Description: 发起原文存证，将原文内容存证上链
 * Summary: 原文内容存证
 */
async function createNotarySource(request: CreateNotarySourceRequest): CreateNotarySourceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createNotarySourceEx(request, headers, runtime);
}

/**
 * Description: 发起原文存证，将原文内容存证上链
 * Summary: 原文内容存证
 */
async function createNotarySourceEx(request: CreateNotarySourceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateNotarySourceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.notary.source.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetNotarySourceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 存证地点(如手机硬件ID，Wi-Fi地址，GPS位置，IP地址)
  location?: Location(name='location'),
  // 描述本条存证在存证事务中的阶段，用户可自行维护
  phase: string(name='phase'),
  // 扩展属性
  properties?: string(name='properties'),
  // 存证事务id
  token: string(name='token'),
  // 存证凭据
  txHash: string(name='tx_hash'),
}

model GetNotarySourceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 文件下载地址
  ossPath?: string(name='oss_path'),
}

/**
 * Description: 用户通过交易哈希获取自己上传的原文存证oss下载地址
 * Summary: 获取原文存证oss下载地址
 */
async function getNotarySource(request: GetNotarySourceRequest): GetNotarySourceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getNotarySourceEx(request, headers, runtime);
}

/**
 * Description: 用户通过交易哈希获取自己上传的原文存证oss下载地址
 * Summary: 获取原文存证oss下载地址
 */
async function getNotarySourceEx(request: GetNotarySourceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetNotarySourceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.notary.source.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryNotaryTestRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // test
  userName: string(name='user_name'),
}

model QueryNotaryTestResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // test
  resp?: string(name='resp'),
}

/**
 * Description: test
 * Summary: test
 */
async function queryNotaryTest(request: QueryNotaryTestRequest): QueryNotaryTestResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryNotaryTestEx(request, headers, runtime);
}

/**
 * Description: test
 * Summary: test
 */
async function queryNotaryTestEx(request: QueryNotaryTestRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryNotaryTestResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.notary.test.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model InitNotaryOpenapiMerchantRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 认证来源，PC_AUTH或APP_AUTH
  authType: string(name='auth_type'),
  // 认证成功页面回跳地址（只在移动端跳转，PC暂不支持）
  callbackUrl?: string(name='callback_url'),
  // 企业名称
  epCertName: string(name='ep_cert_name'),
  // 企业统一社会信用代码
  epCertNo: string(name='ep_cert_no'),
  // 企业证件类型，目前只支持企业营业执照类型，值为NATIONAL_LEGAL_MERGE
  epCertType: string(name='ep_cert_type'),
  // 认证类型，目前只支持企业认证信息，值为EP_CERT_INFO
  identityType: string(name='identity_type'),
  // 法人姓名
  legalPersonCertName: string(name='legal_person_cert_name'),
  // 法人身份证号
  legalPersonCertNo: string(name='legal_person_cert_no'),
  // 法人认证证件类型，目前只支持身份证，值为IDENTITY_CARD
  legalPersonCertType: string(name='legal_person_cert_type'),
  // 认证成功回调地址
  returnUrl?: string(name='return_url'),
  // 商户请求的唯一标志，商户要保证其唯一性。值为32位长度的字母数字下划线组合
  transactionId: string(name='transaction_id'),
}

model InitNotaryOpenapiMerchantResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 本次认证的唯一标识，商户需要记录，后续的操作都需要用到
  bizNo?: string(name='biz_no'),
  // 生成的认证地址，需要转换成二维码通过支付宝APP打开
  verifyUrl?: string(name='verify_url'),
}

/**
 * Description: 接口定义 https://yuque.antfin-inc.com/antchain/lqq4qz/pnvo46#52f667ab
 * Summary: 企业法人认证初始化接口
 */
async function initNotaryOpenapiMerchant(request: InitNotaryOpenapiMerchantRequest): InitNotaryOpenapiMerchantResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return initNotaryOpenapiMerchantEx(request, headers, runtime);
}

/**
 * Description: 接口定义 https://yuque.antfin-inc.com/antchain/lqq4qz/pnvo46#52f667ab
 * Summary: 企业法人认证初始化接口
 */
async function initNotaryOpenapiMerchantEx(request: InitNotaryOpenapiMerchantRequest, headers: map[string]string, runtime: Util.RuntimeOptions): InitNotaryOpenapiMerchantResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.notary.openapi.merchant.init', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryNotaryOpenapiMerchantRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 查询唯一ID，初始化获取认证地址时生成
  bizNo: string(name='biz_no'),
}

model QueryNotaryOpenapiMerchantResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 查询的biz_no
  bizNo?: string(name='biz_no'),
  // 认证状态：认证是否通过。通过为true，不通过为false
  passed?: boolean(name='passed'),
}

/**
 * Description: 企业法人认证查询认证状态
 * Summary: 企业法人认证查询认证状态
 */
async function queryNotaryOpenapiMerchant(request: QueryNotaryOpenapiMerchantRequest): QueryNotaryOpenapiMerchantResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryNotaryOpenapiMerchantEx(request, headers, runtime);
}

/**
 * Description: 企业法人认证查询认证状态
 * Summary: 企业法人认证查询认证状态
 */
async function queryNotaryOpenapiMerchantEx(request: QueryNotaryOpenapiMerchantRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryNotaryOpenapiMerchantResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.notary.openapi.merchant.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeployNotaryLeaseContractRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 租赁服务平台部署的合约Id名称
  contractId: string(name='contract_id'),
}

model DeployNotaryLeaseContractResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 状态码 0表示成功
  code?: long(name='code'),
  // 错误信息
  errMessage?: string(name='err_message'),
  // 部署合约对应的区块链交易哈希
  responseData?: string(name='response_data'),
}

/**
 * Description: 为租赁服务平台部署合约
 * Summary: 为租赁服务平台部署合约
 */
async function deployNotaryLeaseContract(request: DeployNotaryLeaseContractRequest): DeployNotaryLeaseContractResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deployNotaryLeaseContractEx(request, headers, runtime);
}

/**
 * Description: 为租赁服务平台部署合约
 * Summary: 为租赁服务平台部署合约
 */
async function deployNotaryLeaseContractEx(request: DeployNotaryLeaseContractRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeployNotaryLeaseContractResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.notary.lease.contract.deploy', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateOpenchainWebsitServiceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 商户code,如法人的唯一id
  merchantCode: string(name='merchant_code'),
  // 商户名称
  merchantName: string(name='merchant_name'),
  // 租户code
  tenantId: string(name='tenant_id'),
}

model CreateOpenchainWebsitServiceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 建站服务信息注册
 * Summary: 服务注册
 */
async function createOpenchainWebsitService(request: CreateOpenchainWebsitServiceRequest): CreateOpenchainWebsitServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createOpenchainWebsitServiceEx(request, headers, runtime);
}

/**
 * Description: 建站服务信息注册
 * Summary: 服务注册
 */
async function createOpenchainWebsitServiceEx(request: CreateOpenchainWebsitServiceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateOpenchainWebsitServiceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.openchain.websit.service.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CheckOpenchainCorporateFaceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 企业名称
  epCertName: string(name='ep_cert_name'),
  // 企业证件
  epCertNo: string(name='ep_cert_no'),
  // 企业证件类型（NATIONAL_LEGAL（工商注册号）或 NATIONAL_LEGAL_MERGE （ 社会统一信用代码））
  epCertType: string(name='ep_cert_type'),
  // 企业法人名称
  legalPersonCertName: string(name='legal_person_cert_name'),
  // 法人身份证号
  legalPersonCertNo: string(name='legal_person_cert_no'),
  // 商户code
  merchantCode: string(name='merchant_code'),
  // 店铺描述
  shopDesc?: string(name='shop_desc'),
  // 店铺图片地址
  shopSitImage?: string(name='shop_sit_image'),
  // 店铺url地址
  shopWebUrl?: string(name='shop_web_url'),
  // 租户code
  tenantId: string(name='tenant_id'),
  // 网站id，为网站产品唯一标识
  webSitId: string(name='web_sit_id'),
  // 网站域名
  webSitUrl: string(name='web_sit_url'),
}

model CheckOpenchainCorporateFaceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 认证id
  certifyId?: string(name='certify_id'),
  // 二维码URL，用户支付宝扫一扫实人认证
  certifyUrl?: string(name='certify_url'),
}

/**
 * Description: 可信建站法人四要素认证
 * Summary: 可信建站法人四要素认证
 */
async function checkOpenchainCorporateFace(request: CheckOpenchainCorporateFaceRequest): CheckOpenchainCorporateFaceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return checkOpenchainCorporateFaceEx(request, headers, runtime);
}

/**
 * Description: 可信建站法人四要素认证
 * Summary: 可信建站法人四要素认证
 */
async function checkOpenchainCorporateFaceEx(request: CheckOpenchainCorporateFaceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CheckOpenchainCorporateFaceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.openchain.corporate.face.check', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryOpenchainCorporateFaceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 认证id
  certifyId: string(name='certify_id'),
  // 租户code
  tenantId: string(name='tenant_id'),
  // 商户code
  merchantCode: string(name='merchant_code'),
}

model QueryOpenchainCorporateFaceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 访问授权宝的url
  authedUrl?: string(name='authed_url'),
}

/**
 * Description: 法人认证4要素结果查询
 * Summary: 法人认证4要素结果查询
 */
async function queryOpenchainCorporateFace(request: QueryOpenchainCorporateFaceRequest): QueryOpenchainCorporateFaceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryOpenchainCorporateFaceEx(request, headers, runtime);
}

/**
 * Description: 法人认证4要素结果查询
 * Summary: 法人认证4要素结果查询
 */
async function queryOpenchainCorporateFaceEx(request: QueryOpenchainCorporateFaceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryOpenchainCorporateFaceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.openchain.corporate.face.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryOpenchainUserDataRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 租户code
  tenantId: string(name='tenant_id'),
  // 商户code
  merchantCode: string(name='merchant_code'),
  // 网站sitid
  websitId: string(name='websit_id'),
  // 查询的开始时间
  startTime: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='start_time'),
  // 查询的截止时间
  endTime: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='end_time'),
}

model QueryOpenchainUserDataResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 用户数据
  userData?: [ OCUserData ](name='user_data'),
}

/**
 * Description: 授权用户数据查询
 * Summary: 授权用户数据查询
 */
async function queryOpenchainUserData(request: QueryOpenchainUserDataRequest): QueryOpenchainUserDataResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryOpenchainUserDataEx(request, headers, runtime);
}

/**
 * Description: 授权用户数据查询
 * Summary: 授权用户数据查询
 */
async function queryOpenchainUserDataEx(request: QueryOpenchainUserDataRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryOpenchainUserDataResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.openchain.user.data.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryIdentificationRiskThreemetaRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 被核验人身份证号码
  certNo: string(name='cert_no'),
  // 被核验人手机号码
  mobile: string(name='mobile'),
  // 被核验人姓名
  name: string(name='name'),
}

model QueryIdentificationRiskThreemetaResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 是否通过
  accepted?: boolean(name='accepted'),
  //  
  verifyUrl?: string(name='verify_url'),
}

/**
 * Description: 三要素验证身份冒用风险
 * Summary: 三要素验证身份冒用风险
 */
async function queryIdentificationRiskThreemeta(request: QueryIdentificationRiskThreemetaRequest): QueryIdentificationRiskThreemetaResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryIdentificationRiskThreemetaEx(request, headers, runtime);
}

/**
 * Description: 三要素验证身份冒用风险
 * Summary: 三要素验证身份冒用风险
 */
async function queryIdentificationRiskThreemetaEx(request: QueryIdentificationRiskThreemetaRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryIdentificationRiskThreemetaResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.identification.risk.threemeta.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CheckContentRiskTextRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 文本内容
  content: string(name='content'),
}

model CheckContentRiskTextResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 风险等级
  riskLevel?: string(name='risk_level'),
  // 风险类型
  riskType?: string(name='risk_type'),
}

/**
 * Description: 文本内容安全扫描
 * Summary: 文本内容安全扫描
 */
async function checkContentRiskText(request: CheckContentRiskTextRequest): CheckContentRiskTextResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return checkContentRiskTextEx(request, headers, runtime);
}

/**
 * Description: 文本内容安全扫描
 * Summary: 文本内容安全扫描
 */
async function checkContentRiskTextEx(request: CheckContentRiskTextRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CheckContentRiskTextResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.content.risk.text.check', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryIdentificationRiskTwometaRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 被核验人身份证号码
  certNo: string(name='cert_no'),
  // 被核验人姓名
  name: string(name='name'),
}

model QueryIdentificationRiskTwometaResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 是否通过
  accepted?: boolean(name='accepted'),
  //  
  verifyUrl?: string(name='verify_url'),
}

/**
 * Description: 二要素验证身份冒用风险
 * Summary: 二要素验证身份冒用风险
 */
async function queryIdentificationRiskTwometa(request: QueryIdentificationRiskTwometaRequest): QueryIdentificationRiskTwometaResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryIdentificationRiskTwometaEx(request, headers, runtime);
}

/**
 * Description: 二要素验证身份冒用风险
 * Summary: 二要素验证身份冒用风险
 */
async function queryIdentificationRiskTwometaEx(request: QueryIdentificationRiskTwometaRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryIdentificationRiskTwometaResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.identification.risk.twometa.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryIdentificationRiskFourmetaRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 被核验人银行卡号
  bankCardNo: string(name='bank_card_no'),
  // 被核验人身份证号码
  certNo: string(name='cert_no'),
  // 被核验人手机号码
  mobile: string(name='mobile'),
  // 被核验人姓名
  name: string(name='name'),
}

model QueryIdentificationRiskFourmetaResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 是否通过
  accepted?: boolean(name='accepted'),
  //  
  verifyUrl?: string(name='verify_url'),
}

/**
 * Description: 四要素验证身份冒用风险
 * Summary: 四要素验证身份冒用风险
 */
async function queryIdentificationRiskFourmeta(request: QueryIdentificationRiskFourmetaRequest): QueryIdentificationRiskFourmetaResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryIdentificationRiskFourmetaEx(request, headers, runtime);
}

/**
 * Description: 四要素验证身份冒用风险
 * Summary: 四要素验证身份冒用风险
 */
async function queryIdentificationRiskFourmetaEx(request: QueryIdentificationRiskFourmetaRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryIdentificationRiskFourmetaResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.identification.risk.fourmeta.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateNotaryRawTextRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 如果已经在链上有账户，可以直接使用已有的账户进行存证。如果为空，服务端会在链上创建一个
  accountId?: string(name='account_id'),
  // 链的唯一性标示，请联系baas平台获取
  bizid: string(name='bizid'),
  // 存证内容
  content: string(name='content'),
}

model CreateNotaryRawTextResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 存证使用的链上账户
  accountId?: string(name='account_id'),
  // 存证哈希
  transactionHash?: string(name='transaction_hash'),
}

/**
 * Description: 原生存证接口
 * Summary: 原生存证接口
 */
async function createNotaryRawText(request: CreateNotaryRawTextRequest): CreateNotaryRawTextResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createNotaryRawTextEx(request, headers, runtime);
}

/**
 * Description: 原生存证接口
 * Summary: 原生存证接口
 */
async function createNotaryRawTextEx(request: CreateNotaryRawTextRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateNotaryRawTextResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.notary.raw.text.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetNotaryRawTextRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 区块链的唯一性标示
  bizid: string(name='bizid'),
  // 存证哈希
  transactionHash: string(name='transaction_hash'),
}

model GetNotaryRawTextResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 存证内容
  content?: string(name='content'),
  // 存证时间
  notaryDate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='notary_date'),
}

/**
 * Description: 获取原生存证内容接口
 * Summary: 获取原生存证内容接口
 */
async function getNotaryRawText(request: GetNotaryRawTextRequest): GetNotaryRawTextResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getNotaryRawTextEx(request, headers, runtime);
}

/**
 * Description: 获取原生存证内容接口
 * Summary: 获取原生存证内容接口
 */
async function getNotaryRawTextEx(request: GetNotaryRawTextRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetNotaryRawTextResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.notary.raw.text.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryIdentificationRiskMaskRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 被核验人身份证号码后四位
  certNo: string(name='cert_no'),
  // 被核验人手机号码
  mobile: string(name='mobile'),
  // 被核验人姓名的一部分
  name: string(name='name'),
}

model QueryIdentificationRiskMaskResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 是否通过
  // 
  accepted?: boolean(name='accepted'),
  //  
  verifyUrl?: string(name='verify_url'),
}

/**
 * Description: 脱敏身份验证
 * Summary: 脱敏身份验证
 */
async function queryIdentificationRiskMask(request: QueryIdentificationRiskMaskRequest): QueryIdentificationRiskMaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryIdentificationRiskMaskEx(request, headers, runtime);
}

/**
 * Description: 脱敏身份验证
 * Summary: 脱敏身份验证
 */
async function queryIdentificationRiskMaskEx(request: QueryIdentificationRiskMaskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryIdentificationRiskMaskResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.identification.risk.mask.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model InitIdentificationEnterpriseFaceauthRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 用于内部统计的参数，外部用户请忽略
  bizInfo?: BizInfo(name='biz_info'),
  // 回调通知地址
  callBackUrl?: string(name='call_back_url'),
  // 企业名称
  epCertName: string(name='ep_cert_name'),
  // 企业证件号
  epCertNo: string(name='ep_cert_no'),
  // 企业证件类型（NATIONAL_LEGAL（工商注册号）或 NATIONAL_LEGAL_MERGE （ 社会统一信用代码））
  epCertType: string(name='ep_cert_type'),
  // 企业法人姓名
  legalPersonCertName: string(name='legal_person_cert_name'),
  // 企业法人身份证号（目前只支持身份证号）
  legalPersonCertNo: string(name='legal_person_cert_no'),
  // 认证完成后回跳地址
  merchantUrl?: string(name='merchant_url'),
}

model InitIdentificationEnterpriseFaceauthResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 本次认证的业务唯一性标示
  bizNo?: string(name='biz_no'),
  // 认证url
  verifyUrl?: string(name='verify_url'),
}

/**
 * Description: 基于法人实人认证的企业四要素认证
 * Summary: 基于法人实人认证的企业四要素认证
 */
async function initIdentificationEnterpriseFaceauth(request: InitIdentificationEnterpriseFaceauthRequest): InitIdentificationEnterpriseFaceauthResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return initIdentificationEnterpriseFaceauthEx(request, headers, runtime);
}

/**
 * Description: 基于法人实人认证的企业四要素认证
 * Summary: 基于法人实人认证的企业四要素认证
 */
async function initIdentificationEnterpriseFaceauthEx(request: InitIdentificationEnterpriseFaceauthRequest, headers: map[string]string, runtime: Util.RuntimeOptions): InitIdentificationEnterpriseFaceauthResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.identification.enterprise.faceauth.init', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryIdentificationEnterpriseFaceauthRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 认证的唯一性标示
  bizNo: string(name='biz_no'),
}

model QueryIdentificationEnterpriseFaceauthResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 认证的唯一性标示
  bizNo?: string(name='biz_no'),
  // 认证失败错误码
  failedCode?: string(name='failed_code'),
  // 认证失败原因信息
  failedMessage?: string(name='failed_message'),
  // 是否认证通过
  passed?: boolean(name='passed'),
}

/**
 * Description: 查询企业四要素（实人）认证结果
 * Summary: 查询企业四要素（实人）认证结果
 */
async function queryIdentificationEnterpriseFaceauth(request: QueryIdentificationEnterpriseFaceauthRequest): QueryIdentificationEnterpriseFaceauthResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryIdentificationEnterpriseFaceauthEx(request, headers, runtime);
}

/**
 * Description: 查询企业四要素（实人）认证结果
 * Summary: 查询企业四要素（实人）认证结果
 */
async function queryIdentificationEnterpriseFaceauthEx(request: QueryIdentificationEnterpriseFaceauthRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryIdentificationEnterpriseFaceauthResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.identification.enterprise.faceauth.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryIdentificationEnterpriseFourmetaRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 企业名称
  epCertName: string(name='ep_cert_name'),
  // 企业证件号
  epCertNo: string(name='ep_cert_no'),
  // 企业证件类型（NATIONAL_LEGAL（工商注册号）或 NATIONAL_LEGAL_MERGE （ 社会统一信用代码））
  epCertType: string(name='ep_cert_type'),
  // 法人姓名
  legalPersonCertName: string(name='legal_person_cert_name'),
  // 企业法人身份证号码
  legalPersonCertNo: string(name='legal_person_cert_no'),
}

model QueryIdentificationEnterpriseFourmetaResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 经营状态
  enterpriseStatus?: string(name='enterprise_status'),
  // 营业期限
  openTime?: string(name='open_time'),
  // 认证是否通过
  passed?: boolean(name='passed'),
}

/**
 * Description: 企业四要素认证
 * Summary: 企业四要素认证
 */
async function queryIdentificationEnterpriseFourmeta(request: QueryIdentificationEnterpriseFourmetaRequest): QueryIdentificationEnterpriseFourmetaResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryIdentificationEnterpriseFourmetaEx(request, headers, runtime);
}

/**
 * Description: 企业四要素认证
 * Summary: 企业四要素认证
 */
async function queryIdentificationEnterpriseFourmetaEx(request: QueryIdentificationEnterpriseFourmetaRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryIdentificationEnterpriseFourmetaResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.identification.enterprise.fourmeta.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryIdentificationEnterpriseThreemetaRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 企业名称
  epCertName: string(name='ep_cert_name'),
  // 企业证件号
  epCertNo: string(name='ep_cert_no'),
  // 证件类型
  epCertType: string(name='ep_cert_type'),
  // 法人姓名
  legalPersonCertName: string(name='legal_person_cert_name'),
}

model QueryIdentificationEnterpriseThreemetaResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 经营状态
  enterpriseStatus?: string(name='enterprise_status'),
  // 营业期限
  openTime?: string(name='open_time'),
  // 认证是否通过
  passed?: boolean(name='passed'),
}

/**
 * Description: 企业三要素认证（企业名，企业证件号，法人姓名）
 * Summary: 企业三要素认证
 */
async function queryIdentificationEnterpriseThreemeta(request: QueryIdentificationEnterpriseThreemetaRequest): QueryIdentificationEnterpriseThreemetaResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryIdentificationEnterpriseThreemetaEx(request, headers, runtime);
}

/**
 * Description: 企业三要素认证（企业名，企业证件号，法人姓名）
 * Summary: 企业三要素认证
 */
async function queryIdentificationEnterpriseThreemetaEx(request: QueryIdentificationEnterpriseThreemetaRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryIdentificationEnterpriseThreemetaResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.identification.enterprise.threemeta.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryIdentificationEnterpriseTwometaRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 企业名称
  epCertName: string(name='ep_cert_name'),
  // 企业证件号
  epCertNo: string(name='ep_cert_no'),
  // 企业证件类型（NATIONAL_LEGAL（工商注册号）或 NATIONAL_LEGAL_MERGE （ 社会统一信用代码）
  epCertType: string(name='ep_cert_type'),
}

model QueryIdentificationEnterpriseTwometaResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 经营状态
  enterpriseStatus?: string(name='enterprise_status'),
  // 营业期限
  openTime?: string(name='open_time'),
  // 认证是否通过
  passed?: boolean(name='passed'),
}

/**
 * Description: 企业二要素认证（企业名称，企业证件号码）
 * Summary:  企业二要素认证
 */
async function queryIdentificationEnterpriseTwometa(request: QueryIdentificationEnterpriseTwometaRequest): QueryIdentificationEnterpriseTwometaResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryIdentificationEnterpriseTwometaEx(request, headers, runtime);
}

/**
 * Description: 企业二要素认证（企业名称，企业证件号码）
 * Summary:  企业二要素认证
 */
async function queryIdentificationEnterpriseTwometaEx(request: QueryIdentificationEnterpriseTwometaRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryIdentificationEnterpriseTwometaResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.identification.enterprise.twometa.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartMydidDidThreeelementRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 客户自有用户的唯一id
  custumorUid: string(maxLength=64, minLength=10, name='custumor_uid'),
  // 实名认证身份证号
  verifyInfoId: string(maxLength=20, minLength=14, name='verify_info_id'),
  // 实名认证用户名
  verifyInfoName: string(maxLength=20, minLength=4, name='verify_info_name'),
  // 电话号码
  verifyInfoPhone: string(maxLength=11, minLength=11, name='verify_info_phone'),
}

model StartMydidDidThreeelementResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 如果创建成功，会返回创建之后的did
  did?: string(name='did'),
}

/**
 * Description: 完成1.三要素认证；2创建did；3.颁发声明（声明该DID已经完成三要素认证）
 * Summary: 三要素认证与did创建接口
 */
async function startMydidDidThreeelement(request: StartMydidDidThreeelementRequest): StartMydidDidThreeelementResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startMydidDidThreeelementEx(request, headers, runtime);
}

/**
 * Description: 完成1.三要素认证；2创建did；3.颁发声明（声明该DID已经完成三要素认证）
 * Summary: 三要素认证与did创建接口
 */
async function startMydidDidThreeelementEx(request: StartMydidDidThreeelementRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartMydidDidThreeelementResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.mydid.did.threeelement.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListWaasDidValidpublickeysRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 用户数字身份ID
  did?: string(name='did'),
  // 姓名
  name?: string(name='name'),
  // 证件号码
  certNo?: string(name='cert_no'),
}

model ListWaasDidValidpublickeysResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 用户数字身份ID
  did?: string(name='did'),
  // 公钥信息列表
  validPubKeys?: [ PublicKeyInfo ](name='valid_pub_keys'),
}

/**
 * Description: 查询用户可用的公钥列表
 * Summary: 查询用户可用的公钥列表
 */
async function listWaasDidValidpublickeys(request: ListWaasDidValidpublickeysRequest): ListWaasDidValidpublickeysResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listWaasDidValidpublickeysEx(request, headers, runtime);
}

/**
 * Description: 查询用户可用的公钥列表
 * Summary: 查询用户可用的公钥列表
 */
async function listWaasDidValidpublickeysEx(request: ListWaasDidValidpublickeysRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListWaasDidValidpublickeysResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.waas.did.validpublickeys.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryWaasDidPublickeyRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 用户数字身份ID
  did: string(name='did'),
  // 公钥id
  keyId: string(name='key_id'),
}

model QueryWaasDidPublickeyResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 公钥信息
  publicKeyInfo?: PublicKeyInfo(name='public_key_info'),
}

/**
 * Description: 查询指定公钥信息
 * Summary: 查询指定公钥信息
 */
async function queryWaasDidPublickey(request: QueryWaasDidPublickeyRequest): QueryWaasDidPublickeyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryWaasDidPublickeyEx(request, headers, runtime);
}

/**
 * Description: 查询指定公钥信息
 * Summary: 查询指定公钥信息
 */
async function queryWaasDidPublickeyEx(request: QueryWaasDidPublickeyRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryWaasDidPublickeyResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.waas.did.publickey.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model RegisterWaasBusinessRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 业务场景名称
  bizName: string(name='biz_name'),
  // 业务场景公钥
  publicKey: string(name='public_key'),
  // 业务场景运行dcep合约的链id
  chainId: string(name='chain_id'),
  // 数据资产展示首页
  indexUrl: string(name='index_url'),
  // 与waas交互地址，waas服务会推送相关消息至该链接
  interactionUrl: string(name='interaction_url'),
  // 业务场景描述
  businessDesc: string(name='business_desc'),
  // 扩展字段
  extension?: string(name='extension'),
}

model RegisterWaasBusinessResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // waas生成的对应的业务合作方id
  businessId?: string(name='business_id'),
}

/**
 * Description: 业务注册waas服务
 * Summary: 业务注册waas服务
 */
async function registerWaasBusiness(request: RegisterWaasBusinessRequest): RegisterWaasBusinessResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return registerWaasBusinessEx(request, headers, runtime);
}

/**
 * Description: 业务注册waas服务
 * Summary: 业务注册waas服务
 */
async function registerWaasBusinessEx(request: RegisterWaasBusinessRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RegisterWaasBusinessResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.waas.business.register', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryWaasBusinessTransferbodyRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 业务合作方id
  businessId: string(name='business_id'),
  // 转账用户的did
  did: string(name='did'),
  // 业务转账id
  businessOrderId: string(name='business_order_id'),
}

model QueryWaasBusinessTransferbodyResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // dcep的data参数，包含用户签名信息
  chainBody?: string(name='chain_body'),
}

/**
 * Description: 为业务合作方提供查询转账时上链信息，里面包含dcep合约传参
 * Summary: 查询转账上链信息
 */
async function queryWaasBusinessTransferbody(request: QueryWaasBusinessTransferbodyRequest): QueryWaasBusinessTransferbodyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryWaasBusinessTransferbodyEx(request, headers, runtime);
}

/**
 * Description: 为业务合作方提供查询转账时上链信息，里面包含dcep合约传参
 * Summary: 查询转账上链信息
 */
async function queryWaasBusinessTransferbodyEx(request: QueryWaasBusinessTransferbodyRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryWaasBusinessTransferbodyResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.waas.business.transferbody.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model NotifyWaasBusinessOrderRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 业务合作方id
  businessId: string(name='business_id'),
  // 转账用户的did
  did: string(name='did'),
  // 业务转账订单id
  businessOrderId: string(name='business_order_id'),
  // 订单结果
  result: string(name='result'),
  // 结果描述
  resultMessage?: string(name='result_message'),
}

model NotifyWaasBusinessOrderResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 业务合作方通知订单上链情况
 * Summary: 业务合作方通知订单上链情况
 */
async function notifyWaasBusinessOrder(request: NotifyWaasBusinessOrderRequest): NotifyWaasBusinessOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return notifyWaasBusinessOrderEx(request, headers, runtime);
}

/**
 * Description: 业务合作方通知订单上链情况
 * Summary: 业务合作方通知订单上链情况
 */
async function notifyWaasBusinessOrderEx(request: NotifyWaasBusinessOrderRequest, headers: map[string]string, runtime: Util.RuntimeOptions): NotifyWaasBusinessOrderResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'baas.waas.business.order.notify', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateAntcloudGatewayxFileUploadRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 上传文件作用的openapi method
  apiCode: string(name='api_code'),
  // 文件标签，多个标签;分割
  fileLabel?: string(maxLength=100, name='file_label'),
  // 自定义的文件元数据
  fileMetadata?: string(maxLength=1000, name='file_metadata'),
  // 文件名，不传则随机生成文件名
  fileName?: string(maxLength=100, name='file_name'),
  // 文件的多媒体类型
  mimeType?: string(name='mime_type'),
  // 产品方的api归属集群，即productInstanceId
  apiCluster?: string(name='api_cluster'),
}

model CreateAntcloudGatewayxFileUploadResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 上传有效期
  expiredTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='expired_time'),
  // 32位文件唯一id
  fileId?: string(name='file_id'),
  // 放入http请求头里
  uploadHeaders?: [ XNameValuePair ](name='upload_headers'),
  // 文件上传地址
  uploadUrl?: string(name='upload_url'),
}

/**
 * Description: 创建HTTP PUT提交的文件上传
 * Summary: 文件上传创建
 */
async function createAntcloudGatewayxFileUpload(request: CreateAntcloudGatewayxFileUploadRequest): CreateAntcloudGatewayxFileUploadResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createAntcloudGatewayxFileUploadEx(request, headers, runtime);
}

/**
 * Description: 创建HTTP PUT提交的文件上传
 * Summary: 文件上传创建
 */
async function createAntcloudGatewayxFileUploadEx(request: CreateAntcloudGatewayxFileUploadRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateAntcloudGatewayxFileUploadResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.gatewayx.file.upload.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

